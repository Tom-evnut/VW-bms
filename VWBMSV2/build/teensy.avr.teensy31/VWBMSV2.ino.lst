
C:\Users\tomde\AppData\Local\Temp\arduino\sketches\2F4993CF310F7332225332ABA4F32727/VWBMSV2.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
  timeout = 30000; //milliseconds before comms timeout;
  type = 1;
}

void BMSModule::clearmodule()
{
       0:	00 80 00 20 bd 01 00 00 21 9f 00 00 dd 9e 00 00     ... ....!.......
  temperatures[1] = 0.0f;
  temperatures[2] = 0.0f;
  balstat = 0;
  exists = false;
  reset = false;
  moduleAddress = 0;
      10:	dd 9e 00 00 dd 9e 00 00 dd 9e 00 00 dd 9e 00 00     ................
  temperatures[2] = 0.0f;
      20:	dd 9e 00 00 dd 9e 00 00 dd 9e 00 00 21 9f 00 00     ............!...


int BMSModuleManager::seriescells()
{
  spack = 0;
  for (int y = 1; y < 63; y++)
      30:	21 9f 00 00 dd 9e 00 00 e9 93 00 00 ed 93 00 00     !...............
  {
    if (modules[y].isExisting())
      40:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
  for (int y = 1; y < 63; y++)
      50:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
    {
      spack = spack + modules[y].getscells();
    }
  }
  return spack;
      60:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...

  Logger::console("");
  Logger::console("");
  Logger::console("");
  Logger::console("Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
                  getPackVoltage(), getAvgCellVolt(), getAvgTemperature());
      70:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
  Logger::console("Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
      80:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
      90:	35 24 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     5$..!...!...!...
  Logger::console("");
  for (int y = 1; y < 63; y++)
      a0:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
      b0:	21 9f 00 00 89 89 00 00 95 89 00 00 99 89 00 00     !...............
  {
    if (modules[y].isExisting())
    {
      faults = modules[y].getFaults();
      c0:	a5 89 00 00 a9 89 00 00 ad 89 00 00 21 9f 00 00     ............!...
      alerts = modules[y].getAlerts();
      COV = modules[y].getCOVCells();
      d0:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
      CUV = modules[y].getCUVCells();

      Logger::console("                               Module #%i", y);
      e0:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...

      Logger::console("  Voltage: %fV   (%fV-%fV)     Temperatures: (%fC-%fC)", modules[y].getModuleVoltage(),
      f0:	21 9f 00 00 21 9f 00 00 21 9f 00 00 55 ae 00 00     !...!...!...U...
                      modules[y].getLowCellV(), modules[y].getHighCellV(), modules[y].getLowTemp(), modules[y].getHighTemp());
     100:	21 9f 00 00 7d b5 00 00 21 9f 00 00 21 9f 00 00     !...}...!...!...
     110:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
      Logger::console("  Voltage: %fV   (%fV-%fV)     Temperatures: (%fC-%fC)", modules[y].getModuleVoltage(),
     120:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
     130:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
     140:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
     150:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
          Logger::console("    Internal registers inconsistent");
        }
      }
      if (alerts > 0)
      {
        Logger::console("  MODULE HAS ALERTS:");
     160:	21 9f 00 00 81 b8 00 00 21 9f 00 00 21 9f 00 00     !.......!...!...
        }
        if (alerts & 2)
        {
          Logger::console("    Over temperature on TS2");
        }
        if (alerts & 4)
     170:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
        }
        if (alerts & 0x20)
        {
          Logger::console("    OTP EPROM Uncorrectable Error");
        }
        if (alerts & 0x40)
     180:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
  for (int y = 1; y < 63; y++)
     190:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
        Logger::console("  MODULE IS FAULTED:");
     1a0:	21 9f 00 00 21 9f 00 00 21 9f 00 00 21 9f 00 00     !...!...!...!...
        if (faults & 4)
     1b0:	21 9f 00 00 21 9f 00 00 21 9f 00 00                 !...!...!...

000001bc <ResetHandler>:
        if (faults & 0x20)
     1bc:	4b57      	ldr	r3, [pc, #348]	; (31c <ResetHandler+0x160>)
      if (alerts > 0)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
     1c2:	b510      	push	{r4, lr}
          Logger::console("    Internal registers inconsistent");
     1c4:	81da      	strh	r2, [r3, #14]
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
      if (alerts > 0)
     1ca:	81da      	strh	r2, [r3, #14]
     1cc:	bf00      	nop
     1ce:	bf00      	nop
          Logger::console("    Test fault active");
     1d0:	f009 feaa 	bl	9f28 <startup_early_hook>
     1d4:	4b52      	ldr	r3, [pc, #328]	; (320 <ResetHandler+0x164>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
          Logger::console("    Power on reset has occurred");
     1da:	631a      	str	r2, [r3, #48]	; 0x30
     1dc:	4a51      	ldr	r2, [pc, #324]	; (324 <ResetHandler+0x168>)
     1de:	639a      	str	r2, [r3, #56]	; 0x38
          Logger::console("    CRC error in received packet");
     1e0:	4a51      	ldr	r2, [pc, #324]	; (328 <ResetHandler+0x16c>)
     1e2:	63da      	str	r2, [r3, #60]	; 0x3c
     1e4:	4a51      	ldr	r2, [pc, #324]	; (32c <ResetHandler+0x170>)
     1e6:	6913      	ldr	r3, [r2, #16]
        {
          Logger::console("    GROUP3 Regs Invalid");
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d103      	bne.n	1f6 <ResetHandler+0x3a>
        }
        if (alerts & 0x80)
     1ee:	6153      	str	r3, [r2, #20]
     1f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
        {
          Logger::console("    Address not registered");
     1f4:	6113      	str	r3, [r2, #16]
     1f6:	4b4e      	ldr	r3, [pc, #312]	; (330 <ResetHandler+0x174>)
     1f8:	789a      	ldrb	r2, [r3, #2]
          Logger::console("    OTP EPROM Uncorrectable Error");
     1fa:	0711      	lsls	r1, r2, #28
     1fc:	d503      	bpl.n	206 <ResetHandler+0x4a>
     1fe:	789a      	ldrb	r2, [r3, #2]
     200:	f042 0208 	orr.w	r2, r2, #8
          Logger::console("    Test Alert");
     204:	709a      	strb	r2, [r3, #2]
     206:	4b4b      	ldr	r3, [pc, #300]	; (334 <ResetHandler+0x178>)
     208:	484b      	ldr	r0, [pc, #300]	; (338 <ResetHandler+0x17c>)
          Logger::console("    Thermal shutdown active");
     20a:	222a      	movs	r2, #42	; 0x2a
     20c:	701a      	strb	r2, [r3, #0]
     20e:	4b4b      	ldr	r3, [pc, #300]	; (33c <ResetHandler+0x180>)
     210:	1cda      	adds	r2, r3, #3
          Logger::console("    Sleep mode active");
     212:	1a12      	subs	r2, r2, r0
     214:	1ec1      	subs	r1, r0, #3
     216:	f022 0203 	bic.w	r2, r2, #3
          Logger::console("    Over temperature on TS2");
     21a:	4299      	cmp	r1, r3
     21c:	bf88      	it	hi
     21e:	2200      	movhi	r2, #0
     220:	4947      	ldr	r1, [pc, #284]	; (340 <ResetHandler+0x184>)
          Logger::console("    Over temperature on TS1");
     222:	f009 fd87 	bl	9d34 <memcpy>
     226:	4b47      	ldr	r3, [pc, #284]	; (344 <ResetHandler+0x188>)
     228:	4847      	ldr	r0, [pc, #284]	; (348 <ResetHandler+0x18c>)
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     22a:	1cda      	adds	r2, r3, #3
     22c:	1a12      	subs	r2, r2, r0
     22e:	1ec1      	subs	r1, r0, #3
     230:	f022 0203 	bic.w	r2, r2, #3
     234:	4299      	cmp	r1, r3
            if (CUV & (1 << i))
     236:	bf88      	it	hi
     238:	2200      	movhi	r2, #0
     23a:	2100      	movs	r1, #0
     23c:	f00d ff4a 	bl	e0d4 <memset>
          for (int i = 0; i < 12; i++)
     240:	4942      	ldr	r1, [pc, #264]	; (34c <ResetHandler+0x190>)
     242:	4843      	ldr	r0, [pc, #268]	; (350 <ResetHandler+0x194>)
            if (CUV & (1 << i))
     244:	f44f 72de 	mov.w	r2, #444	; 0x1bc
     248:	f009 fd74 	bl	9d34 <memcpy>
     24c:	4b41      	ldr	r3, [pc, #260]	; (354 <ResetHandler+0x198>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     24e:	4a42      	ldr	r2, [pc, #264]	; (358 <ResetHandler+0x19c>)
     250:	2180      	movs	r1, #128	; 0x80
     252:	f803 1b01 	strb.w	r1, [r3], #1
          for (int i = 0; i < 12; i++)
     256:	4293      	cmp	r3, r2
     258:	d1fb      	bne.n	252 <ResetHandler+0x96>
     25a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     25e:	4a3c      	ldr	r2, [pc, #240]	; (350 <ResetHandler+0x194>)
     260:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
          SERIALCONSOLE.println();
     264:	4b3d      	ldr	r3, [pc, #244]	; (35c <ResetHandler+0x1a0>)
     266:	228a      	movs	r2, #138	; 0x8a
     268:	701a      	strb	r2, [r3, #0]
     26a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     26e:	2224      	movs	r2, #36	; 0x24
     270:	705a      	strb	r2, [r3, #1]
     272:	22a0      	movs	r2, #160	; 0xa0
     274:	701a      	strb	r2, [r3, #0]
     276:	799a      	ldrb	r2, [r3, #6]
            if (COV & (1 << i))
     278:	0792      	lsls	r2, r2, #30
     27a:	d5fc      	bpl.n	276 <ResetHandler+0xba>
     27c:	799a      	ldrb	r2, [r3, #6]
     27e:	06d4      	lsls	r4, r2, #27
          for (int i = 0; i < 12; i++)
     280:	d4fc      	bmi.n	27c <ResetHandler+0xc0>
     282:	4b37      	ldr	r3, [pc, #220]	; (360 <ResetHandler+0x1a4>)
     284:	799a      	ldrb	r2, [r3, #6]
            if (COV & (1 << i))
     286:	f002 020c 	and.w	r2, r2, #12
     28a:	2a08      	cmp	r2, #8
     28c:	d1fa      	bne.n	284 <ResetHandler+0xc8>
     28e:	2203      	movs	r2, #3
     290:	711a      	strb	r2, [r3, #4]
     292:	2240      	movs	r2, #64	; 0x40
     294:	715a      	strb	r2, [r3, #5]
     296:	799a      	ldrb	r2, [r3, #6]
          for (int i = 0; i < 12; i++)
     298:	0690      	lsls	r0, r2, #26
     29a:	d5fc      	bpl.n	296 <ResetHandler+0xda>
     29c:	4a30      	ldr	r2, [pc, #192]	; (360 <ResetHandler+0x1a4>)
     29e:	7993      	ldrb	r3, [r2, #6]
     2a0:	0659      	lsls	r1, r3, #25
     2a2:	d5fc      	bpl.n	29e <ResetHandler+0xe2>
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
          SERIALCONSOLE.println();
     2a6:	492f      	ldr	r1, [pc, #188]	; (364 <ResetHandler+0x1a8>)
     2a8:	6459      	str	r1, [r3, #68]	; 0x44
     2aa:	2102      	movs	r1, #2
     2ac:	6499      	str	r1, [r3, #72]	; 0x48
     2ae:	2120      	movs	r1, #32
     2b0:	7011      	strb	r1, [r2, #0]
     2b2:	7991      	ldrb	r1, [r2, #6]
     2b4:	f001 010c 	and.w	r1, r1, #12
     2b8:	290c      	cmp	r1, #12
     2ba:	d1fa      	bne.n	2b2 <ResetHandler+0xf6>
     2bc:	4a2a      	ldr	r2, [pc, #168]	; (368 <ResetHandler+0x1ac>)
     2be:	605a      	str	r2, [r3, #4]
     2c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2c4:	4a29      	ldr	r2, [pc, #164]	; (36c <ResetHandler+0x1b0>)
     2c6:	615a      	str	r2, [r3, #20]
     2c8:	2200      	movs	r2, #0
     2ca:	619a      	str	r2, [r3, #24]
     2cc:	2207      	movs	r2, #7
     2ce:	611a      	str	r2, [r3, #16]
     2d0:	4a27      	ldr	r2, [pc, #156]	; (370 <ResetHandler+0x1b4>)
     2d2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
     2d6:	b662      	cpsie	i
     2d8:	f009 ff58 	bl	a18c <_init_Teensyduino_internal_>
     2dc:	4b13      	ldr	r3, [pc, #76]	; (32c <ResetHandler+0x170>)
     2de:	695b      	ldr	r3, [r3, #20]
     2e0:	07da      	lsls	r2, r3, #31
     2e2:	d505      	bpl.n	2f0 <ResetHandler+0x134>
     2e4:	4823      	ldr	r0, [pc, #140]	; (374 <ResetHandler+0x1b8>)
     2e6:	f009 ff45 	bl	a174 <rtc_set>
     2ea:	4b23      	ldr	r3, [pc, #140]	; (378 <ResetHandler+0x1bc>)
     2ec:	4a23      	ldr	r2, [pc, #140]	; (37c <ResetHandler+0x1c0>)
     2ee:	61da      	str	r2, [r3, #28]
     2f0:	4b23      	ldr	r3, [pc, #140]	; (380 <ResetHandler+0x1c4>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	065b      	lsls	r3, r3, #25
     2f6:	d509      	bpl.n	30c <ResetHandler+0x150>
     2f8:	4c1f      	ldr	r4, [pc, #124]	; (378 <ResetHandler+0x1bc>)
     2fa:	4b20      	ldr	r3, [pc, #128]	; (37c <ResetHandler+0x1c0>)
     2fc:	69e2      	ldr	r2, [r4, #28]
     2fe:	429a      	cmp	r2, r3
     300:	d104      	bne.n	30c <ResetHandler+0x150>
     302:	481c      	ldr	r0, [pc, #112]	; (374 <ResetHandler+0x1b8>)
     304:	f009 ff36 	bl	a174 <rtc_set>
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     308:	2300      	movs	r3, #0
     30a:	61e3      	str	r3, [r4, #28]
	}
#endif

	startup_late_hook();
     30c:	f009 fe12 	bl	9f34 <startup_late_hook>
	__libc_init_array();
     310:	f00d ffd6 	bl	e2c0 <__libc_init_array>

	main();
     314:	f009 fd06 	bl	9d24 <main>
	
	while (1) ;
     318:	e7fe      	b.n	318 <ResetHandler+0x15c>
     31a:	bf00      	nop
     31c:	40052000 	.word	0x40052000
     320:	40048000 	.word	0x40048000
     324:	00043f82 	.word	0x00043f82
     328:	2b000001 	.word	0x2b000001
     32c:	4003d000 	.word	0x4003d000
     330:	4007d000 	.word	0x4007d000
     334:	4007e000 	.word	0x4007e000
     338:	1fff8720 	.word	0x1fff8720
     33c:	1fff9168 	.word	0x1fff9168
     340:	00015b14 	.word	0x00015b14
     344:	1fffd90c 	.word	0x1fffd90c
     348:	1fff9168 	.word	0x1fff9168
     34c:	00000000 	.word	0x00000000
     350:	1fff8200 	.word	0x1fff8200
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	40065000 	.word	0x40065000
     360:	40064000 	.word	0x40064000
     364:	01030000 	.word	0x01030000
     368:	000510c0 	.word	0x000510c0
     36c:	000176ff 	.word	0x000176ff
     370:	20200000 	.word	0x20200000
     374:	64b7dee6 	.word	0x64b7dee6
     378:	4003e000 	.word	0x4003e000
     37c:	5a94c3a5 	.word	0x5a94c3a5
     380:	4007f000 	.word	0x4007f000
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff9168 	.word	0x1fff9168
     42c:	1fff9168 	.word	0x1fff9168
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff9168 	.word	0x1fff9168
     454:	00015b14 	.word	0x00015b14

00000458 <BMSModule::BMSModule()>:
BMSModule::BMSModule()
     458:	b510      	push	{r4, lr}
    cellVolt[i] = 0.0f;
     45a:	2234      	movs	r2, #52	; 0x34
     45c:	2100      	movs	r1, #0
BMSModule::BMSModule()
     45e:	4604      	mov	r4, r0
    cellVolt[i] = 0.0f;
     460:	f00d fe38 	bl	e0d4 <memset>
    lowestCellVolt[i] = 5.0f;
     464:	4918      	ldr	r1, [pc, #96]	; (4c8 <BMSModule::BMSModule()+0x70>)
     466:	f104 0330 	add.w	r3, r4, #48	; 0x30
     46a:	f104 0264 	add.w	r2, r4, #100	; 0x64
     46e:	f843 1f04 	str.w	r1, [r3, #4]!
  for (int i = 0; i < 13; i++)
     472:	429a      	cmp	r2, r3
     474:	d1fb      	bne.n	46e <BMSModule::BMSModule()+0x16>
    highestCellVolt[i] = 0.0f;
     476:	2234      	movs	r2, #52	; 0x34
     478:	2100      	movs	r1, #0
     47a:	f104 0068 	add.w	r0, r4, #104	; 0x68
     47e:	f00d fe29 	bl	e0d4 <memset>
  moduleVolt = 0.0f;
     482:	2300      	movs	r3, #0
  balstat = 0;
     484:	2200      	movs	r2, #0
  highestTemperature = -100.0f;
     486:	4811      	ldr	r0, [pc, #68]	; (4cc <BMSModule::BMSModule()+0x74>)
  lowestTemperature = 200.0f;
     488:	4911      	ldr	r1, [pc, #68]	; (4d0 <BMSModule::BMSModule()+0x78>)
  moduleVolt = 0.0f;
     48a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  temperatures[0] = 0.0f;
     48e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  temperatures[1] = 0.0f;
     492:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  temperatures[2] = 0.0f;
     496:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  highestTemperature = -100.0f;
     49a:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
  highestModuleVolt = 0.0f;
     49e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  timeout = 30000; //milliseconds before comms timeout;
     4a2:	f247 5030 	movw	r0, #30000	; 0x7530
  type = 1;
     4a6:	2301      	movs	r3, #1
  moduleAddress = 0;
     4a8:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
  timeout = 30000; //milliseconds before comms timeout;
     4ac:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
  lowestTemperature = 200.0f;
     4b0:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
  lowestModuleVolt = 200.0f;
     4b4:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
  balstat = 0;
     4b8:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
  exists = false;
     4bc:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
  type = 1;
     4c0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
}
     4c4:	4620      	mov	r0, r4
     4c6:	bd10      	pop	{r4, pc}
     4c8:	40a00000 	.word	0x40a00000
     4cc:	c2c80000 	.word	0xc2c80000
     4d0:	43480000 	.word	0x43480000

000004d4 <BMSModule::decodetemp(CAN_message_t&, int)>:
}

void BMSModule::decodetemp(CAN_message_t &msg, int y)
{
  if (y==1) //0x00 in byte 2 means its an MEB message
     4d4:	2a01      	cmp	r2, #1
{
     4d6:	b538      	push	{r3, r4, r5, lr}
     4d8:	4605      	mov	r5, r0
     4da:	460c      	mov	r4, r1
  if (y==1) //0x00 in byte 2 means its an MEB message
     4dc:	d014      	beq.n	508 <BMSModule::decodetemp(CAN_message_t&, int)+0x34>
      }
    }
  }
  else
  {
    type = 2;
     4de:	2302      	movs	r3, #2
     4e0:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
    temperatures[0] = ((uint16_t(((msg.buf[5] & 0x0F) << 4) | ((msg.buf[4] & 0xF0) >> 4))) * 0.5) - 40; //MEB Bits 36-44
     4e4:	7b4b      	ldrb	r3, [r1, #13]
     4e6:	7b08      	ldrb	r0, [r1, #12]
     4e8:	011b      	lsls	r3, r3, #4
     4ea:	b2db      	uxtb	r3, r3
     4ec:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
     4f0:	f00c fd1a 	bl	cf28 <__aeabi_i2f>
     4f4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     4f8:	f00c fd6a 	bl	cfd0 <__aeabi_fmul>
     4fc:	492c      	ldr	r1, [pc, #176]	; (5b0 <BMSModule::decodetemp(CAN_message_t&, int)+0xdc>)
     4fe:	f00c fc5d 	bl	cdbc <__aeabi_fsub>
     502:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
  }
}
     506:	bd38      	pop	{r3, r4, r5, pc}
    type = 1;
     508:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    if (msg.buf[7] == 0xFD)
     50c:	7bcb      	ldrb	r3, [r1, #15]
     50e:	2bfd      	cmp	r3, #253	; 0xfd
     510:	d049      	beq.n	5a6 <BMSModule::decodetemp(CAN_message_t&, int)+0xd2>
      if (msg.buf[0] < 0xDF)
     512:	7a08      	ldrb	r0, [r1, #8]
     514:	28de      	cmp	r0, #222	; 0xde
     516:	d928      	bls.n	56a <BMSModule::decodetemp(CAN_message_t&, int)+0x96>
        temperatures[0] = (msg.buf[3] * 0.5) - 43;
     518:	7ac8      	ldrb	r0, [r1, #11]
     51a:	f00c fd05 	bl	cf28 <__aeabi_i2f>
     51e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     522:	f00c fd55 	bl	cfd0 <__aeabi_fmul>
     526:	4923      	ldr	r1, [pc, #140]	; (5b4 <BMSModule::decodetemp(CAN_message_t&, int)+0xe0>)
     528:	f00c fc48 	bl	cdbc <__aeabi_fsub>
     52c:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
      if (msg.buf[4] < 0xF0)
     530:	7b20      	ldrb	r0, [r4, #12]
     532:	28ef      	cmp	r0, #239	; 0xef
     534:	d82d      	bhi.n	592 <BMSModule::decodetemp(CAN_message_t&, int)+0xbe>
        temperatures[1] = (msg.buf[4] * 0.5) - 43;
     536:	f00c fcf7 	bl	cf28 <__aeabi_i2f>
     53a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     53e:	f00c fd47 	bl	cfd0 <__aeabi_fmul>
     542:	491c      	ldr	r1, [pc, #112]	; (5b4 <BMSModule::decodetemp(CAN_message_t&, int)+0xe0>)
     544:	f00c fc3a 	bl	cdbc <__aeabi_fsub>
     548:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
      if (msg.buf[5] < 0xF0)
     54c:	7b60      	ldrb	r0, [r4, #13]
     54e:	28ef      	cmp	r0, #239	; 0xef
     550:	d825      	bhi.n	59e <BMSModule::decodetemp(CAN_message_t&, int)+0xca>
        temperatures[2] = (msg.buf[5] * 0.5) - 43;
     552:	f00c fce9 	bl	cf28 <__aeabi_i2f>
     556:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     55a:	f00c fd39 	bl	cfd0 <__aeabi_fmul>
     55e:	4915      	ldr	r1, [pc, #84]	; (5b4 <BMSModule::decodetemp(CAN_message_t&, int)+0xe0>)
     560:	f00c fc2c 	bl	cdbc <__aeabi_fsub>
     564:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
}
     568:	bd38      	pop	{r3, r4, r5, pc}
        temperatures[0] = (msg.buf[0] * 0.5) - 43;
     56a:	f00c fcdd 	bl	cf28 <__aeabi_i2f>
     56e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     572:	f00c fd2d 	bl	cfd0 <__aeabi_fmul>
     576:	490f      	ldr	r1, [pc, #60]	; (5b4 <BMSModule::decodetemp(CAN_message_t&, int)+0xe0>)
     578:	f00c fc20 	bl	cdbc <__aeabi_fsub>
     57c:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
        balstat = msg.buf[2] + (msg.buf[3] << 8);
     580:	7ae2      	ldrb	r2, [r4, #11]
     582:	7aa3      	ldrb	r3, [r4, #10]
     584:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     588:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
      if (msg.buf[4] < 0xF0)
     58c:	7b20      	ldrb	r0, [r4, #12]
     58e:	28ef      	cmp	r0, #239	; 0xef
     590:	d9d1      	bls.n	536 <BMSModule::decodetemp(CAN_message_t&, int)+0x62>
        temperatures[1] = 0;
     592:	2000      	movs	r0, #0
     594:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
      if (msg.buf[5] < 0xF0)
     598:	7b60      	ldrb	r0, [r4, #13]
     59a:	28ef      	cmp	r0, #239	; 0xef
     59c:	d9d9      	bls.n	552 <BMSModule::decodetemp(CAN_message_t&, int)+0x7e>
        temperatures[2] = 0;
     59e:	2300      	movs	r3, #0
     5a0:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
}
     5a4:	bd38      	pop	{r3, r4, r5, pc}
      if (msg.buf[2] != 0xFD)
     5a6:	7a88      	ldrb	r0, [r1, #10]
     5a8:	28fd      	cmp	r0, #253	; 0xfd
     5aa:	d1a1      	bne.n	4f0 <BMSModule::decodetemp(CAN_message_t&, int)+0x1c>
}
     5ac:	bd38      	pop	{r3, r4, r5, pc}
     5ae:	bf00      	nop
     5b0:	42200000 	.word	0x42200000
     5b4:	422c0000 	.word	0x422c0000

000005b8 <BMSModule::getFaults()>:
*/

uint8_t BMSModule::getFaults()
{
  return faults;
}
     5b8:	f890 00cc 	ldrb.w	r0, [r0, #204]	; 0xcc
     5bc:	4770      	bx	lr
     5be:	bf00      	nop

000005c0 <BMSModule::getAlerts()>:

uint8_t BMSModule::getAlerts()
{
  return alerts;
}
     5c0:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
     5c4:	4770      	bx	lr
     5c6:	bf00      	nop

000005c8 <BMSModule::getCOVCells()>:

uint8_t BMSModule::getCOVCells()
{
  return COVFaults;
}
     5c8:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
     5cc:	4770      	bx	lr
     5ce:	bf00      	nop

000005d0 <BMSModule::getCUVCells()>:

uint8_t BMSModule::getCUVCells()
{
  return CUVFaults;
}
     5d0:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
     5d4:	4770      	bx	lr
     5d6:	bf00      	nop

000005d8 <BMSModule::getCellVoltage(int)>:

float BMSModule::getCellVoltage(int cell)
{
  if (cell < 0 || cell > 13) return 0.0f;
     5d8:	290d      	cmp	r1, #13
  return cellVolt[cell];
     5da:	bf94      	ite	ls
     5dc:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
  if (cell < 0 || cell > 13) return 0.0f;
     5e0:	2000      	movhi	r0, #0
}
     5e2:	4770      	bx	lr

000005e4 <BMSModule::getLowCellV()>:

float BMSModule::getLowCellV()
{
     5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float lowVal = 10.0f;
     5e8:	4e0c      	ldr	r6, [pc, #48]	; (61c <BMSModule::getLowCellV()+0x38>)
{
     5ea:	4680      	mov	r8, r0
     5ec:	1f05      	subs	r5, r0, #4
     5ee:	f100 0730 	add.w	r7, r0, #48	; 0x30
  for (int i = 0; i < 13; i++) if (cellVolt[i] < lowVal && cellVolt[i] > IgnoreCell) lowVal = cellVolt[i];
     5f2:	f855 4f04 	ldr.w	r4, [r5, #4]!
     5f6:	4631      	mov	r1, r6
     5f8:	4620      	mov	r0, r4
     5fa:	f00c fe87 	bl	d30c <__aeabi_fcmplt>
     5fe:	4603      	mov	r3, r0
     600:	4620      	mov	r0, r4
     602:	b12b      	cbz	r3, 610 <BMSModule::getLowCellV()+0x2c>
     604:	f8d8 10bc 	ldr.w	r1, [r8, #188]	; 0xbc
     608:	f00c fe9e 	bl	d348 <__aeabi_fcmpgt>
     60c:	b100      	cbz	r0, 610 <BMSModule::getLowCellV()+0x2c>
     60e:	4626      	mov	r6, r4
     610:	42bd      	cmp	r5, r7
     612:	d1ee      	bne.n	5f2 <BMSModule::getLowCellV()+0xe>
  return lowVal;
}
     614:	4630      	mov	r0, r6
     616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     61a:	bf00      	nop
     61c:	41200000 	.word	0x41200000

00000620 <BMSModule::getHighCellV()>:

float BMSModule::getHighCellV()
{
     620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  float hiVal = 0.0f;
  for (int i = 0; i < 13; i++)
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     624:	f8d0 80bc 	ldr.w	r8, [r0, #188]	; 0xbc
     628:	4f0f      	ldr	r7, [pc, #60]	; (668 <BMSModule::getHighCellV()+0x48>)
  float hiVal = 0.0f;
     62a:	f04f 0900 	mov.w	r9, #0
     62e:	1f05      	subs	r5, r0, #4
     630:	f100 0630 	add.w	r6, r0, #48	; 0x30
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     634:	f855 4f04 	ldr.w	r4, [r5, #4]!
     638:	4641      	mov	r1, r8
     63a:	4620      	mov	r0, r4
     63c:	f00c fe84 	bl	d348 <__aeabi_fcmpgt>
     640:	4603      	mov	r3, r0
     642:	4639      	mov	r1, r7
     644:	4620      	mov	r0, r4
     646:	b14b      	cbz	r3, 65c <BMSModule::getHighCellV()+0x3c>
     648:	f00c fe60 	bl	d30c <__aeabi_fcmplt>
     64c:	4603      	mov	r3, r0
    {
      if (cellVolt[i] > hiVal) hiVal = cellVolt[i];
     64e:	4649      	mov	r1, r9
     650:	4620      	mov	r0, r4
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     652:	b11b      	cbz	r3, 65c <BMSModule::getHighCellV()+0x3c>
      if (cellVolt[i] > hiVal) hiVal = cellVolt[i];
     654:	f00c fe78 	bl	d348 <__aeabi_fcmpgt>
     658:	b100      	cbz	r0, 65c <BMSModule::getHighCellV()+0x3c>
     65a:	46a1      	mov	r9, r4
  for (int i = 0; i < 13; i++)
     65c:	42b5      	cmp	r5, r6
     65e:	d1e9      	bne.n	634 <BMSModule::getHighCellV()+0x14>
    }
  return hiVal;
}
     660:	4648      	mov	r0, r9
     662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     666:	bf00      	nop
     668:	40a00000 	.word	0x40a00000

0000066c <BMSModule::getAverageV()>:

float BMSModule::getAverageV()
{
     66c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int x = 0;
  float avgVal = 0.0f;
  for (int i = 0; i < 13; i++)
  {
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     670:	f8d0 90bc 	ldr.w	r9, [r0, #188]	; 0xbc
     674:	4f17      	ldr	r7, [pc, #92]	; (6d4 <BMSModule::getAverageV()+0x68>)
{
     676:	4683      	mov	fp, r0
  float avgVal = 0.0f;
     678:	2600      	movs	r6, #0
     67a:	1f05      	subs	r5, r0, #4
     67c:	f100 0830 	add.w	r8, r0, #48	; 0x30
  int x = 0;
     680:	f04f 0a00 	mov.w	sl, #0
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     684:	f855 4f04 	ldr.w	r4, [r5, #4]!
     688:	4649      	mov	r1, r9
     68a:	4620      	mov	r0, r4
     68c:	f00c fe5c 	bl	d348 <__aeabi_fcmpgt>
     690:	4603      	mov	r3, r0
     692:	4639      	mov	r1, r7
     694:	4620      	mov	r0, r4
     696:	b14b      	cbz	r3, 6ac <BMSModule::getAverageV()+0x40>
     698:	f00c fe38 	bl	d30c <__aeabi_fcmplt>
     69c:	b130      	cbz	r0, 6ac <BMSModule::getAverageV()+0x40>
    {
      x++;
      avgVal += cellVolt[i];
     69e:	4630      	mov	r0, r6
     6a0:	4621      	mov	r1, r4
     6a2:	f00c fb8d 	bl	cdc0 <__addsf3>
      x++;
     6a6:	f10a 0a01 	add.w	sl, sl, #1
      avgVal += cellVolt[i];
     6aa:	4606      	mov	r6, r0
  for (int i = 0; i < 13; i++)
     6ac:	4545      	cmp	r5, r8
     6ae:	d1e9      	bne.n	684 <BMSModule::getAverageV()+0x18>
    }
  }

  scells = x;
     6b0:	f8cb a0e0 	str.w	sl, [fp, #224]	; 0xe0
  avgVal /= x;

  if (scells == 0)
     6b4:	f1ba 0f00 	cmp.w	sl, #0
     6b8:	d008      	beq.n	6cc <BMSModule::getAverageV()+0x60>
  avgVal /= x;
     6ba:	4650      	mov	r0, sl
     6bc:	f00c fc34 	bl	cf28 <__aeabi_i2f>
     6c0:	4601      	mov	r1, r0
     6c2:	4630      	mov	r0, r6
     6c4:	f00c fd38 	bl	d138 <__aeabi_fdiv>
  {
    avgVal = 0;
  }

  return avgVal;
}
     6c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    avgVal = 0;
     6cc:	2000      	movs	r0, #0
}
     6ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6d2:	bf00      	nop
     6d4:	40a00000 	.word	0x40a00000

000006d8 <BMSModule::getscells()>:

int BMSModule::getscells()
{
  return scells;
}
     6d8:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
     6dc:	4770      	bx	lr
     6de:	bf00      	nop

000006e0 <BMSModule::getHighTemp()>:
    return temperatures[0];
  }
}

float BMSModule::getHighTemp()
{
     6e0:	b538      	push	{r3, r4, r5, lr}
  if (type == 1)
     6e2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
     6e6:	2b01      	cmp	r3, #1
     6e8:	d10e      	bne.n	708 <BMSModule::getHighTemp()+0x28>
  {
    if (sensor == 0)
     6ea:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
     6ee:	b97b      	cbnz	r3, 710 <BMSModule::getHighTemp()+0x30>
     6f0:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
    {
      return (temperatures[0] < temperatures[1]) ? temperatures[1] : temperatures[0];
     6f4:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
     6f8:	4621      	mov	r1, r4
     6fa:	4628      	mov	r0, r5
     6fc:	f00c fe06 	bl	d30c <__aeabi_fcmplt>
     700:	b920      	cbnz	r0, 70c <BMSModule::getHighTemp()+0x2c>
     702:	462c      	mov	r4, r5
  }
  else
  {
    return temperatures[0];
  }
}
     704:	4620      	mov	r0, r4
     706:	bd38      	pop	{r3, r4, r5, pc}
    return temperatures[0];
     708:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
}
     70c:	4620      	mov	r0, r4
     70e:	bd38      	pop	{r3, r4, r5, pc}
      return temperatures[sensor - 1];
     710:	3327      	adds	r3, #39	; 0x27
     712:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
}
     716:	4620      	mov	r0, r4
     718:	bd38      	pop	{r3, r4, r5, pc}
     71a:	bf00      	nop

0000071c <BMSModule::getAvgTemp()>:

float BMSModule::getAvgTemp()
{
  if (type == 1)
     71c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
     720:	2b01      	cmp	r3, #1
{
     722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     726:	4604      	mov	r4, r0
  if (type == 1)
     728:	d147      	bne.n	7ba <BMSModule::getAvgTemp()+0x9e>
  {
    if (sensor == 0)
     72a:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
     72e:	2b00      	cmp	r3, #0
     730:	d148      	bne.n	7c4 <BMSModule::getAvgTemp()+0xa8>
    {
      if ((temperatures[0] + temperatures[1] + temperatures[2]) / 3.0f > 0.5)
     732:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
     736:	f8d0 60a4 	ldr.w	r6, [r0, #164]	; 0xa4
     73a:	4628      	mov	r0, r5
     73c:	4631      	mov	r1, r6
     73e:	f00c fb3f 	bl	cdc0 <__addsf3>
     742:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
     746:	4639      	mov	r1, r7
     748:	4680      	mov	r8, r0
     74a:	f00c fb39 	bl	cdc0 <__addsf3>
     74e:	495f      	ldr	r1, [pc, #380]	; (8cc <BMSModule::getAvgTemp()+0x1b0>)
     750:	f00c fcf2 	bl	d138 <__aeabi_fdiv>
      {
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     754:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
      if ((temperatures[0] + temperatures[1] + temperatures[2]) / 3.0f > 0.5)
     758:	4604      	mov	r4, r0
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     75a:	4628      	mov	r0, r5
     75c:	f00c fdf4 	bl	d348 <__aeabi_fcmpgt>
     760:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     764:	2800      	cmp	r0, #0
     766:	d133      	bne.n	7d0 <BMSModule::getAvgTemp()+0xb4>
        {
          return (temperatures[0] + temperatures[1] + temperatures[2]) / 3.0f;
        }
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     768:	4628      	mov	r0, r5
     76a:	f00c fdcf 	bl	d30c <__aeabi_fcmplt>
     76e:	b130      	cbz	r0, 77e <BMSModule::getAvgTemp()+0x62>
     770:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     774:	4630      	mov	r0, r6
     776:	f00c fde7 	bl	d348 <__aeabi_fcmpgt>
     77a:	2800      	cmp	r0, #0
     77c:	d172      	bne.n	864 <BMSModule::getAvgTemp()+0x148>
        {
          return (temperatures[1] + temperatures[2]) / 2.0f;
        }
        if (temperatures[0] > 0.5 && temperatures[1] < 0.5 && temperatures[2] > 0.5)
     77e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     782:	4628      	mov	r0, r5
     784:	f00c fde0 	bl	d348 <__aeabi_fcmpgt>
     788:	2800      	cmp	r0, #0
     78a:	d134      	bne.n	7f6 <BMSModule::getAvgTemp()+0xda>
        }
        if (temperatures[0] > 0.5 && temperatures[1] < 0.5 && temperatures[2] < 0.5)
        {
          return (temperatures[0]);
        }
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] < 0.5)
     78c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     790:	4630      	mov	r0, r6
     792:	f00c fdd9 	bl	d348 <__aeabi_fcmpgt>
     796:	b138      	cbz	r0, 7a8 <BMSModule::getAvgTemp()+0x8c>
     798:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     79c:	4638      	mov	r0, r7
     79e:	f00c fdb5 	bl	d30c <__aeabi_fcmplt>
     7a2:	2800      	cmp	r0, #0
     7a4:	f040 8090 	bne.w	8c8 <BMSModule::getAvgTemp()+0x1ac>
        {
          return (temperatures[1]);
        }
        if (temperatures[0] < 0.5 && temperatures[1] < 0.5 && temperatures[2] > 0.5)
     7a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7ac:	4638      	mov	r0, r7
     7ae:	f00c fdcb 	bl	d348 <__aeabi_fcmpgt>
     7b2:	2800      	cmp	r0, #0
     7b4:	d06d      	beq.n	892 <BMSModule::getAvgTemp()+0x176>
        {
          return (temperatures[2]);
     7b6:	463c      	mov	r4, r7
     7b8:	e001      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
      return temperatures[sensor - 1];
    }
  }
  else
  {
    return temperatures[0];
     7ba:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
  }
}
     7be:	4620      	mov	r0, r4
     7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return temperatures[sensor - 1];
     7c4:	3327      	adds	r3, #39	; 0x27
     7c6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
}
     7ca:	4620      	mov	r0, r4
     7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     7d0:	4630      	mov	r0, r6
     7d2:	f00c fdb9 	bl	d348 <__aeabi_fcmpgt>
     7d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7da:	2800      	cmp	r0, #0
     7dc:	d036      	beq.n	84c <BMSModule::getAvgTemp()+0x130>
     7de:	4638      	mov	r0, r7
     7e0:	f00c fdb2 	bl	d348 <__aeabi_fcmpgt>
     7e4:	2800      	cmp	r0, #0
     7e6:	d1ea      	bne.n	7be <BMSModule::getAvgTemp()+0xa2>
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     7e8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7ec:	4628      	mov	r0, r5
     7ee:	f00c fd8d 	bl	d30c <__aeabi_fcmplt>
     7f2:	2800      	cmp	r0, #0
     7f4:	d14f      	bne.n	896 <BMSModule::getAvgTemp()+0x17a>
        if (temperatures[0] > 0.5 && temperatures[1] < 0.5 && temperatures[2] > 0.5)
     7f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7fa:	4630      	mov	r0, r6
     7fc:	f00c fd86 	bl	d30c <__aeabi_fcmplt>
     800:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     804:	2800      	cmp	r0, #0
     806:	d03e      	beq.n	886 <BMSModule::getAvgTemp()+0x16a>
     808:	4638      	mov	r0, r7
     80a:	f00c fd9d 	bl	d348 <__aeabi_fcmpgt>
     80e:	2800      	cmp	r0, #0
     810:	d149      	bne.n	8a6 <BMSModule::getAvgTemp()+0x18a>
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] < 0.5)
     812:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     816:	4630      	mov	r0, r6
     818:	f00c fd96 	bl	d348 <__aeabi_fcmpgt>
     81c:	b168      	cbz	r0, 83a <BMSModule::getAvgTemp()+0x11e>
     81e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     822:	4638      	mov	r0, r7
     824:	f00c fd72 	bl	d30c <__aeabi_fcmplt>
     828:	2800      	cmp	r0, #0
     82a:	d146      	bne.n	8ba <BMSModule::getAvgTemp()+0x19e>
        if (temperatures[0] > 0.5 && temperatures[1] < 0.5 && temperatures[2] < 0.5)
     82c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     830:	4630      	mov	r0, r6
     832:	f00c fd6b 	bl	d30c <__aeabi_fcmplt>
     836:	2800      	cmp	r0, #0
     838:	d0a8      	beq.n	78c <BMSModule::getAvgTemp()+0x70>
     83a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     83e:	4638      	mov	r0, r7
     840:	f00c fd64 	bl	d30c <__aeabi_fcmplt>
     844:	2800      	cmp	r0, #0
     846:	d0a1      	beq.n	78c <BMSModule::getAvgTemp()+0x70>
          return (temperatures[0]);
     848:	462c      	mov	r4, r5
     84a:	e7b8      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     84c:	4628      	mov	r0, r5
     84e:	f00c fd5d 	bl	d30c <__aeabi_fcmplt>
     852:	2800      	cmp	r0, #0
     854:	d0cf      	beq.n	7f6 <BMSModule::getAvgTemp()+0xda>
     856:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     85a:	4630      	mov	r0, r6
     85c:	f00c fd74 	bl	d348 <__aeabi_fcmpgt>
     860:	2800      	cmp	r0, #0
     862:	d0c8      	beq.n	7f6 <BMSModule::getAvgTemp()+0xda>
     864:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     868:	4638      	mov	r0, r7
     86a:	f00c fd6d 	bl	d348 <__aeabi_fcmpgt>
     86e:	2800      	cmp	r0, #0
     870:	d085      	beq.n	77e <BMSModule::getAvgTemp()+0x62>
          return (temperatures[1] + temperatures[2]) / 2.0f;
     872:	4639      	mov	r1, r7
     874:	4630      	mov	r0, r6
     876:	f00c faa3 	bl	cdc0 <__addsf3>
     87a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     87e:	f00c fba7 	bl	cfd0 <__aeabi_fmul>
     882:	4604      	mov	r4, r0
     884:	e79b      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] < 0.5)
     886:	4630      	mov	r0, r6
     888:	f00c fd5e 	bl	d348 <__aeabi_fcmpgt>
     88c:	2800      	cmp	r0, #0
     88e:	d0cd      	beq.n	82c <BMSModule::getAvgTemp()+0x110>
     890:	e7c5      	b.n	81e <BMSModule::getAvgTemp()+0x102>
          return (-80);
     892:	4c0f      	ldr	r4, [pc, #60]	; (8d0 <BMSModule::getAvgTemp()+0x1b4>)
     894:	e793      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     896:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     89a:	4638      	mov	r0, r7
     89c:	f00c fd54 	bl	d348 <__aeabi_fcmpgt>
     8a0:	2800      	cmp	r0, #0
     8a2:	d0a8      	beq.n	7f6 <BMSModule::getAvgTemp()+0xda>
     8a4:	e7e5      	b.n	872 <BMSModule::getAvgTemp()+0x156>
          return (temperatures[0] + temperatures[2]) / 2.0f;
     8a6:	4639      	mov	r1, r7
     8a8:	4628      	mov	r0, r5
     8aa:	f00c fa89 	bl	cdc0 <__addsf3>
     8ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     8b2:	f00c fb8d 	bl	cfd0 <__aeabi_fmul>
     8b6:	4604      	mov	r4, r0
     8b8:	e781      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
          return (temperatures[0] + temperatures[1]) / 2.0f;
     8ba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     8be:	4640      	mov	r0, r8
     8c0:	f00c fb86 	bl	cfd0 <__aeabi_fmul>
     8c4:	4604      	mov	r4, r0
     8c6:	e77a      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
          return (temperatures[1]);
     8c8:	4634      	mov	r4, r6
     8ca:	e778      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
     8cc:	40400000 	.word	0x40400000
     8d0:	c2a00000 	.word	0xc2a00000

000008d4 <BMSModule::getLowTemp()>:
  if (type == 1)
     8d4:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
     8d8:	2b01      	cmp	r3, #1
{
     8da:	b570      	push	{r4, r5, r6, lr}
     8dc:	4604      	mov	r4, r0
  if (type == 1)
     8de:	d120      	bne.n	922 <BMSModule::getLowTemp()+0x4e>
    if (sensor == 0)
     8e0:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
     8e4:	bb0b      	cbnz	r3, 92a <BMSModule::getLowTemp()+0x56>
        if (temperatures[0] > 0.5)
     8e6:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
     8ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     8ee:	4630      	mov	r0, r6
     8f0:	f00c fd2a 	bl	d348 <__aeabi_fcmpgt>
          if (temperatures[0] < temperatures[1] && temperatures[0] < temperatures[2])
     8f4:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
        if (temperatures[0] > 0.5)
     8f8:	b9e0      	cbnz	r0, 934 <BMSModule::getLowTemp()+0x60>
          if (temperatures[0] < temperatures[1] && temperatures[0] < temperatures[2])
     8fa:	f8d4 40a8 	ldr.w	r4, [r4, #168]	; 0xa8
        if (temperatures[1] > 0.5)
     8fe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     902:	4628      	mov	r0, r5
     904:	f00c fd20 	bl	d348 <__aeabi_fcmpgt>
     908:	b168      	cbz	r0, 926 <BMSModule::getLowTemp()+0x52>
          if (temperatures[1] < temperatures[0] && temperatures[1] < temperatures[2])
     90a:	4631      	mov	r1, r6
     90c:	4628      	mov	r0, r5
     90e:	f00c fcfd 	bl	d30c <__aeabi_fcmplt>
     912:	b140      	cbz	r0, 926 <BMSModule::getLowTemp()+0x52>
     914:	4621      	mov	r1, r4
     916:	4628      	mov	r0, r5
     918:	f00c fcf8 	bl	d30c <__aeabi_fcmplt>
     91c:	b118      	cbz	r0, 926 <BMSModule::getLowTemp()+0x52>
            return (temperatures[1]);
     91e:	462c      	mov	r4, r5
     920:	e001      	b.n	926 <BMSModule::getLowTemp()+0x52>
    return temperatures[0];
     922:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
}
     926:	4620      	mov	r0, r4
     928:	bd70      	pop	{r4, r5, r6, pc}
      return temperatures[sensor - 1];
     92a:	3327      	adds	r3, #39	; 0x27
     92c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
}
     930:	4620      	mov	r0, r4
     932:	bd70      	pop	{r4, r5, r6, pc}
          if (temperatures[0] < temperatures[1] && temperatures[0] < temperatures[2])
     934:	4630      	mov	r0, r6
     936:	4629      	mov	r1, r5
     938:	f00c fce8 	bl	d30c <__aeabi_fcmplt>
     93c:	f8d4 40a8 	ldr.w	r4, [r4, #168]	; 0xa8
     940:	2800      	cmp	r0, #0
     942:	d0dc      	beq.n	8fe <BMSModule::getLowTemp()+0x2a>
     944:	4630      	mov	r0, r6
     946:	4621      	mov	r1, r4
     948:	f00c fce0 	bl	d30c <__aeabi_fcmplt>
     94c:	2800      	cmp	r0, #0
     94e:	d0d6      	beq.n	8fe <BMSModule::getLowTemp()+0x2a>
            return (temperatures[0]);
     950:	4634      	mov	r4, r6
     952:	e7e8      	b.n	926 <BMSModule::getLowTemp()+0x52>

00000954 <BMSModule::decodecan(int, CAN_message_t&)>:
{
     954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     958:	4606      	mov	r6, r0
     95a:	b084      	sub	sp, #16
     95c:	4614      	mov	r4, r2
  switch (Id)
     95e:	2903      	cmp	r1, #3
     960:	d83e      	bhi.n	9e0 <BMSModule::decodecan(int, CAN_message_t&)+0x8c>
     962:	e8df f011 	tbh	[pc, r1, lsl #1]
     966:	0004      	.short	0x0004
     968:	00f80132 	.word	0x00f80132
     96c:	00e7      	.short	0x00e7
      cmuerror = 0;
     96e:	2300      	movs	r3, #0
     970:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
      cellVolt[0] = (uint16_t(msg.buf[1] >> 4) + uint16_t(msg.buf[2] << 4) + 1000) * 0.001;
     974:	7a90      	ldrb	r0, [r2, #10]
     976:	7a53      	ldrb	r3, [r2, #9]
     978:	0100      	lsls	r0, r0, #4
     97a:	eb00 1013 	add.w	r0, r0, r3, lsr #4
     97e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     982:	f00c fad1 	bl	cf28 <__aeabi_i2f>
     986:	49ae      	ldr	r1, [pc, #696]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     988:	f00c fb22 	bl	cfd0 <__aeabi_fmul>
     98c:	6030      	str	r0, [r6, #0]
      cellVolt[2] = (uint16_t(msg.buf[5] << 4) + uint16_t(msg.buf[4] >> 4) + 1000) * 0.001;
     98e:	7b20      	ldrb	r0, [r4, #12]
     990:	7b63      	ldrb	r3, [r4, #13]
     992:	0900      	lsrs	r0, r0, #4
     994:	eb00 1003 	add.w	r0, r0, r3, lsl #4
     998:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     99c:	f00c fac4 	bl	cf28 <__aeabi_i2f>
     9a0:	49a7      	ldr	r1, [pc, #668]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     9a2:	f00c fb15 	bl	cfd0 <__aeabi_fmul>
     9a6:	60b0      	str	r0, [r6, #8]
      cellVolt[1] = (msg.buf[3] + uint16_t((msg.buf[4] & 0x0F) << 8) + 1000) * 0.001;
     9a8:	7b20      	ldrb	r0, [r4, #12]
     9aa:	7ae3      	ldrb	r3, [r4, #11]
     9ac:	0200      	lsls	r0, r0, #8
     9ae:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     9b2:	4418      	add	r0, r3
     9b4:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     9b8:	f00c fab6 	bl	cf28 <__aeabi_i2f>
     9bc:	49a0      	ldr	r1, [pc, #640]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     9be:	f00c fb07 	bl	cfd0 <__aeabi_fmul>
     9c2:	6070      	str	r0, [r6, #4]
      cellVolt[3] = (msg.buf[6] + uint16_t((msg.buf[7] & 0x0F) << 8) + 1000) * 0.001;
     9c4:	7be0      	ldrb	r0, [r4, #15]
     9c6:	7ba3      	ldrb	r3, [r4, #14]
     9c8:	0200      	lsls	r0, r0, #8
     9ca:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     9ce:	4418      	add	r0, r3
     9d0:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     9d4:	f00c faa8 	bl	cf28 <__aeabi_i2f>
     9d8:	4999      	ldr	r1, [pc, #612]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     9da:	f00c faf9 	bl	cfd0 <__aeabi_fmul>
     9de:	60f0      	str	r0, [r6, #12]
  if (getLowTemp() < lowestTemperature) lowestTemperature = getLowTemp();
     9e0:	4630      	mov	r0, r6
     9e2:	f7ff ff77 	bl	8d4 <BMSModule::getLowTemp()>
     9e6:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
     9ea:	4604      	mov	r4, r0
     9ec:	f00c fc8e 	bl	d30c <__aeabi_fcmplt>
     9f0:	b108      	cbz	r0, 9f6 <BMSModule::decodecan(int, CAN_message_t&)+0xa2>
     9f2:	f8c6 40ac 	str.w	r4, [r6, #172]	; 0xac
  if (type == 1)
     9f6:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
     9fa:	2b01      	cmp	r3, #1
     9fc:	d10f      	bne.n	a1e <BMSModule::decodecan(int, CAN_message_t&)+0xca>
    if (sensor == 0)
     9fe:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
     a02:	2b00      	cmp	r3, #0
     a04:	f040 8092 	bne.w	b2c <BMSModule::decodecan(int, CAN_message_t&)+0x1d8>
     a08:	f8d6 50a0 	ldr.w	r5, [r6, #160]	; 0xa0
     a0c:	f8d6 40a4 	ldr.w	r4, [r6, #164]	; 0xa4
      return (temperatures[0] < temperatures[1]) ? temperatures[1] : temperatures[0];
     a10:	4628      	mov	r0, r5
     a12:	4621      	mov	r1, r4
     a14:	f00c fc7a 	bl	d30c <__aeabi_fcmplt>
     a18:	b918      	cbnz	r0, a22 <BMSModule::decodecan(int, CAN_message_t&)+0xce>
     a1a:	462c      	mov	r4, r5
     a1c:	e001      	b.n	a22 <BMSModule::decodecan(int, CAN_message_t&)+0xce>
    return temperatures[0];
     a1e:	f8d6 40a0 	ldr.w	r4, [r6, #160]	; 0xa0
  if (getHighTemp() > highestTemperature) highestTemperature = getHighTemp();
     a22:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
     a26:	4621      	mov	r1, r4
     a28:	f00c fc70 	bl	d30c <__aeabi_fcmplt>
     a2c:	b108      	cbz	r0, a32 <BMSModule::decodecan(int, CAN_message_t&)+0xde>
     a2e:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
    if (highestCellVolt[i] < cellVolt[i] && cellVolt[i] > 5.0) highestCellVolt[i] = cellVolt[i];
     a32:	f8df 8210 	ldr.w	r8, [pc, #528]	; c44 <BMSModule::decodecan(int, CAN_message_t&)+0x2f0>
     a36:	1f34      	subs	r4, r6, #4
     a38:	f106 0730 	add.w	r7, r6, #48	; 0x30
    if (lowestCellVolt[i] > cellVolt[i] && cellVolt[i] >= IgnoreCell) lowestCellVolt[i] = cellVolt[i];
     a3c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
     a3e:	f854 5f04 	ldr.w	r5, [r4, #4]!
     a42:	4629      	mov	r1, r5
     a44:	f00c fc80 	bl	d348 <__aeabi_fcmpgt>
     a48:	4603      	mov	r3, r0
     a4a:	4628      	mov	r0, r5
     a4c:	b12b      	cbz	r3, a5a <BMSModule::decodecan(int, CAN_message_t&)+0x106>
     a4e:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
     a52:	f00c fc6f 	bl	d334 <__aeabi_fcmpge>
     a56:	b100      	cbz	r0, a5a <BMSModule::decodecan(int, CAN_message_t&)+0x106>
     a58:	6365      	str	r5, [r4, #52]	; 0x34
    if (highestCellVolt[i] < cellVolt[i] && cellVolt[i] > 5.0) highestCellVolt[i] = cellVolt[i];
     a5a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
     a5c:	4628      	mov	r0, r5
     a5e:	f00c fc73 	bl	d348 <__aeabi_fcmpgt>
     a62:	4603      	mov	r3, r0
     a64:	4641      	mov	r1, r8
     a66:	4628      	mov	r0, r5
     a68:	b11b      	cbz	r3, a72 <BMSModule::decodecan(int, CAN_message_t&)+0x11e>
     a6a:	f00c fc6d 	bl	d348 <__aeabi_fcmpgt>
     a6e:	b100      	cbz	r0, a72 <BMSModule::decodecan(int, CAN_message_t&)+0x11e>
     a70:	66a5      	str	r5, [r4, #104]	; 0x68
  for (int i = 0; i < 13; i++)
     a72:	42a7      	cmp	r7, r4
     a74:	d1e2      	bne.n	a3c <BMSModule::decodecan(int, CAN_message_t&)+0xe8>
  if (cmuerror == 0)
     a76:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
     a7a:	b943      	cbnz	r3, a8e <BMSModule::decodecan(int, CAN_message_t&)+0x13a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a7c:	4b72      	ldr	r3, [pc, #456]	; (c48 <BMSModule::decodecan(int, CAN_message_t&)+0x2f4>)
     a7e:	681b      	ldr	r3, [r3, #0]
     a80:	9300      	str	r3, [sp, #0]
	return ret;
     a82:	9b00      	ldr	r3, [sp, #0]
    lasterror = millis();
     a84:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
}
     a88:	b004      	add	sp, #16
     a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a8e:	4c6e      	ldr	r4, [pc, #440]	; (c48 <BMSModule::decodecan(int, CAN_message_t&)+0x2f4>)
    if (millis() - lasterror < timeout)
     a90:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
     a94:	6822      	ldr	r2, [r4, #0]
     a96:	9201      	str	r2, [sp, #4]
	return ret;
     a98:	9a01      	ldr	r2, [sp, #4]
     a9a:	f8d6 10f0 	ldr.w	r1, [r6, #240]	; 0xf0
     a9e:	1ad2      	subs	r2, r2, r3
     aa0:	428a      	cmp	r2, r1
     aa2:	d232      	bcs.n	b0a <BMSModule::decodecan(int, CAN_message_t&)+0x1b6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     aa4:	6822      	ldr	r2, [r4, #0]
     aa6:	9202      	str	r2, [sp, #8]
	return ret;
     aa8:	9a02      	ldr	r2, [sp, #8]
      if (lasterror + timeout - millis() < 5000)
     aaa:	440b      	add	r3, r1
     aac:	1a9b      	subs	r3, r3, r2
     aae:	f241 3287 	movw	r2, #4999	; 0x1387
     ab2:	4293      	cmp	r3, r2
     ab4:	d8e8      	bhi.n	a88 <BMSModule::decodecan(int, CAN_message_t&)+0x134>
     ab6:	2102      	movs	r1, #2
     ab8:	4864      	ldr	r0, [pc, #400]	; (c4c <BMSModule::decodecan(int, CAN_message_t&)+0x2f8>)
     aba:	f00b fba9 	bl	c210 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     abe:	4864      	ldr	r0, [pc, #400]	; (c50 <BMSModule::decodecan(int, CAN_message_t&)+0x2fc>)
     ac0:	f008 fe56 	bl	9770 <Print::println()>
     ac4:	2106      	movs	r1, #6
     ac6:	4863      	ldr	r0, [pc, #396]	; (c54 <BMSModule::decodecan(int, CAN_message_t&)+0x300>)
     ac8:	f00b fba2 	bl	c210 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     acc:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
     ad0:	485f      	ldr	r0, [pc, #380]	; (c50 <BMSModule::decodecan(int, CAN_message_t&)+0x2fc>)
     ad2:	2300      	movs	r3, #0
     ad4:	220a      	movs	r2, #10
     ad6:	f008 fe63 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ada:	2119      	movs	r1, #25
     adc:	485e      	ldr	r0, [pc, #376]	; (c58 <BMSModule::decodecan(int, CAN_message_t&)+0x304>)
     ade:	f00b fb97 	bl	c210 <usb_serial_write>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ae2:	6821      	ldr	r1, [r4, #0]
        SERIALCONSOLE.println(lasterror + timeout - millis() );
     ae4:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
     ae8:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
     aec:	9103      	str	r1, [sp, #12]
	return ret;
     aee:	9c03      	ldr	r4, [sp, #12]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     af0:	4857      	ldr	r0, [pc, #348]	; (c50 <BMSModule::decodecan(int, CAN_message_t&)+0x2fc>)
     af2:	1899      	adds	r1, r3, r2
     af4:	1b09      	subs	r1, r1, r4
     af6:	2300      	movs	r3, #0
     af8:	220a      	movs	r2, #10
     afa:	f008 fe51 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     afe:	4854      	ldr	r0, [pc, #336]	; (c50 <BMSModule::decodecan(int, CAN_message_t&)+0x2fc>)
}
     b00:	b004      	add	sp, #16
     b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     b06:	f008 be33 	b.w	9770 <Print::println()>
        cellVolt[i] = 0.0f;
     b0a:	2220      	movs	r2, #32
     b0c:	2100      	movs	r1, #0
     b0e:	4630      	mov	r0, r6
     b10:	f00d fae0 	bl	e0d4 <memset>
      moduleVolt = 0.0f;
     b14:	2300      	movs	r3, #0
     b16:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
      temperatures[0] = 0.0f;
     b1a:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
      temperatures[1] = 0.0f;
     b1e:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
      temperatures[2] = 0.0f;
     b22:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
}
     b26:	b004      	add	sp, #16
     b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return temperatures[sensor - 1];
     b2c:	3327      	adds	r3, #39	; 0x27
     b2e:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
     b32:	e776      	b.n	a22 <BMSModule::decodecan(int, CAN_message_t&)+0xce>
      cmuerror = 0;
     b34:	2300      	movs	r3, #0
     b36:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
      cellVolt[12] = (uint16_t(msg.buf[1] >> 4) + uint16_t(msg.buf[2] << 4) + 1000) * 0.001;
     b3a:	7a90      	ldrb	r0, [r2, #10]
     b3c:	7a53      	ldrb	r3, [r2, #9]
     b3e:	0100      	lsls	r0, r0, #4
     b40:	eb00 1013 	add.w	r0, r0, r3, lsr #4
     b44:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     b48:	f00c f9ee 	bl	cf28 <__aeabi_i2f>
     b4c:	493c      	ldr	r1, [pc, #240]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     b4e:	f00c fa3f 	bl	cfd0 <__aeabi_fmul>
     b52:	6330      	str	r0, [r6, #48]	; 0x30
      break;
     b54:	e744      	b.n	9e0 <BMSModule::decodecan(int, CAN_message_t&)+0x8c>
      cmuerror = 0;
     b56:	2300      	movs	r3, #0
     b58:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
      cellVolt[8] = (uint16_t(msg.buf[1] >> 4) + uint16_t(msg.buf[2] << 4) + 1000) * 0.001;
     b5c:	7a90      	ldrb	r0, [r2, #10]
     b5e:	7a53      	ldrb	r3, [r2, #9]
     b60:	0100      	lsls	r0, r0, #4
     b62:	eb00 1013 	add.w	r0, r0, r3, lsr #4
     b66:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     b6a:	f00c f9dd 	bl	cf28 <__aeabi_i2f>
     b6e:	4934      	ldr	r1, [pc, #208]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     b70:	f00c fa2e 	bl	cfd0 <__aeabi_fmul>
     b74:	6230      	str	r0, [r6, #32]
      cellVolt[10] = (uint16_t(msg.buf[5] << 4) + uint16_t(msg.buf[4] >> 4) + 1000) * 0.001;
     b76:	7b20      	ldrb	r0, [r4, #12]
     b78:	7b63      	ldrb	r3, [r4, #13]
     b7a:	0900      	lsrs	r0, r0, #4
     b7c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
     b80:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     b84:	f00c f9d0 	bl	cf28 <__aeabi_i2f>
     b88:	492d      	ldr	r1, [pc, #180]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     b8a:	f00c fa21 	bl	cfd0 <__aeabi_fmul>
     b8e:	62b0      	str	r0, [r6, #40]	; 0x28
      cellVolt[9] = (msg.buf[3] + uint16_t((msg.buf[4] & 0x0F) << 8) + 1000) * 0.001;
     b90:	7b20      	ldrb	r0, [r4, #12]
     b92:	7ae3      	ldrb	r3, [r4, #11]
     b94:	0200      	lsls	r0, r0, #8
     b96:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     b9a:	4418      	add	r0, r3
     b9c:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     ba0:	f00c f9c2 	bl	cf28 <__aeabi_i2f>
     ba4:	4926      	ldr	r1, [pc, #152]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     ba6:	f00c fa13 	bl	cfd0 <__aeabi_fmul>
     baa:	6270      	str	r0, [r6, #36]	; 0x24
      cellVolt[11] = (msg.buf[6] + uint16_t((msg.buf[7] & 0x0F) << 8) + 1000) * 0.001;
     bac:	7be0      	ldrb	r0, [r4, #15]
     bae:	7ba3      	ldrb	r3, [r4, #14]
     bb0:	0200      	lsls	r0, r0, #8
     bb2:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     bb6:	4418      	add	r0, r3
     bb8:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     bbc:	f00c f9b4 	bl	cf28 <__aeabi_i2f>
     bc0:	491f      	ldr	r1, [pc, #124]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     bc2:	f00c fa05 	bl	cfd0 <__aeabi_fmul>
     bc6:	62f0      	str	r0, [r6, #44]	; 0x2c
      break;
     bc8:	e70a      	b.n	9e0 <BMSModule::decodecan(int, CAN_message_t&)+0x8c>
      cmuerror = 0;
     bca:	2300      	movs	r3, #0
     bcc:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
      cellVolt[4] = (uint16_t(msg.buf[1] >> 4) + uint16_t(msg.buf[2] << 4) + 1000) * 0.001;
     bd0:	7a90      	ldrb	r0, [r2, #10]
     bd2:	7a53      	ldrb	r3, [r2, #9]
     bd4:	0100      	lsls	r0, r0, #4
     bd6:	eb00 1013 	add.w	r0, r0, r3, lsr #4
     bda:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     bde:	f00c f9a3 	bl	cf28 <__aeabi_i2f>
     be2:	4917      	ldr	r1, [pc, #92]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     be4:	f00c f9f4 	bl	cfd0 <__aeabi_fmul>
     be8:	6130      	str	r0, [r6, #16]
      cellVolt[6] = (uint16_t(msg.buf[5] << 4) + uint16_t(msg.buf[4] >> 4) + 1000) * 0.001;
     bea:	7b20      	ldrb	r0, [r4, #12]
     bec:	7b63      	ldrb	r3, [r4, #13]
     bee:	0900      	lsrs	r0, r0, #4
     bf0:	eb00 1003 	add.w	r0, r0, r3, lsl #4
     bf4:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     bf8:	f00c f996 	bl	cf28 <__aeabi_i2f>
     bfc:	4910      	ldr	r1, [pc, #64]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     bfe:	f00c f9e7 	bl	cfd0 <__aeabi_fmul>
     c02:	61b0      	str	r0, [r6, #24]
      cellVolt[5] = (msg.buf[3] + uint16_t((msg.buf[4] & 0x0F) << 8) + 1000) * 0.001;
     c04:	7b20      	ldrb	r0, [r4, #12]
     c06:	7ae3      	ldrb	r3, [r4, #11]
     c08:	0200      	lsls	r0, r0, #8
     c0a:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     c0e:	4418      	add	r0, r3
     c10:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     c14:	f00c f988 	bl	cf28 <__aeabi_i2f>
     c18:	4909      	ldr	r1, [pc, #36]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     c1a:	f00c f9d9 	bl	cfd0 <__aeabi_fmul>
     c1e:	6170      	str	r0, [r6, #20]
      cellVolt[7] = (msg.buf[6] + uint16_t((msg.buf[7] & 0x0F) << 8) + 1000) * 0.001;
     c20:	7be0      	ldrb	r0, [r4, #15]
     c22:	7ba3      	ldrb	r3, [r4, #14]
     c24:	0200      	lsls	r0, r0, #8
     c26:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     c2a:	4418      	add	r0, r3
     c2c:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     c30:	f00c f97a 	bl	cf28 <__aeabi_i2f>
     c34:	4902      	ldr	r1, [pc, #8]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     c36:	f00c f9cb 	bl	cfd0 <__aeabi_fmul>
     c3a:	61f0      	str	r0, [r6, #28]
      break;
     c3c:	e6d0      	b.n	9e0 <BMSModule::decodecan(int, CAN_message_t&)+0x8c>
     c3e:	bf00      	nop
     c40:	3a83126f 	.word	0x3a83126f
     c44:	40a00000 	.word	0x40a00000
     c48:	1fffd3c0 	.word	0x1fffd3c0
     c4c:	00015030 	.word	0x00015030
     c50:	1fff89fc 	.word	0x1fff89fc
     c54:	00013d0c 	.word	0x00013d0c
     c58:	00013d14 	.word	0x00013d14

00000c5c <BMSModule::getModuleVoltage()>:

float BMSModule::getModuleVoltage()
{
     c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  moduleVolt = 0;
     c60:	2600      	movs	r6, #0
  for (int I; I < 13; I++)
  {
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     c62:	f8d0 90bc 	ldr.w	r9, [r0, #188]	; 0xbc
     c66:	4f10      	ldr	r7, [pc, #64]	; (ca8 <BMSModule::getModuleVoltage()+0x4c>)
  moduleVolt = 0;
     c68:	f8c0 609c 	str.w	r6, [r0, #156]	; 0x9c
{
     c6c:	4682      	mov	sl, r0
     c6e:	1f05      	subs	r5, r0, #4
     c70:	f100 0830 	add.w	r8, r0, #48	; 0x30
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     c74:	f855 4f04 	ldr.w	r4, [r5, #4]!
     c78:	4649      	mov	r1, r9
     c7a:	4620      	mov	r0, r4
     c7c:	f00c fb64 	bl	d348 <__aeabi_fcmpgt>
     c80:	4603      	mov	r3, r0
     c82:	4639      	mov	r1, r7
     c84:	4620      	mov	r0, r4
     c86:	b153      	cbz	r3, c9e <BMSModule::getModuleVoltage()+0x42>
     c88:	f00c fb40 	bl	d30c <__aeabi_fcmplt>
     c8c:	4603      	mov	r3, r0
    {
      moduleVolt = moduleVolt + cellVolt[I];
     c8e:	4621      	mov	r1, r4
     c90:	4630      	mov	r0, r6
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     c92:	b123      	cbz	r3, c9e <BMSModule::getModuleVoltage()+0x42>
      moduleVolt = moduleVolt + cellVolt[I];
     c94:	f00c f894 	bl	cdc0 <__addsf3>
     c98:	4606      	mov	r6, r0
     c9a:	f8ca 009c 	str.w	r0, [sl, #156]	; 0x9c
  for (int I; I < 13; I++)
     c9e:	4545      	cmp	r5, r8
     ca0:	d1e8      	bne.n	c74 <BMSModule::getModuleVoltage()+0x18>
    }
  }
  return moduleVolt;
}
     ca2:	4630      	mov	r0, r6
     ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ca8:	40a00000 	.word	0x40a00000

00000cac <BMSModule::getTemperature(int)>:

float BMSModule::getTemperature(int temp)
{
  if (temp < 0 || temp > 2) return 0.0f;
     cac:	2902      	cmp	r1, #2
  return temperatures[temp];
     cae:	bf9a      	itte	ls
     cb0:	3128      	addls	r1, #40	; 0x28
     cb2:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
  if (temp < 0 || temp > 2) return 0.0f;
     cb6:	2000      	movhi	r0, #0
}
     cb8:	4770      	bx	lr
     cba:	bf00      	nop

00000cbc <BMSModule::setAddress(int)>:

void BMSModule::setAddress(int newAddr)
{
  if (newAddr < 0 || newAddr > MAX_MODULE_ADDR) return;
     cbc:	293e      	cmp	r1, #62	; 0x3e
  moduleAddress = newAddr;
     cbe:	bf98      	it	ls
     cc0:	f880 10dc 	strbls.w	r1, [r0, #220]	; 0xdc
}
     cc4:	4770      	bx	lr
     cc6:	bf00      	nop

00000cc8 <BMSModule::getType()>:
}

int BMSModule::getType()
{
  return type;
}
     cc8:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
     ccc:	4770      	bx	lr
     cce:	bf00      	nop

00000cd0 <BMSModule::getBalStat()>:

int BMSModule::getBalStat()
{
  return balstat;
}
     cd0:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
     cd4:	4770      	bx	lr
     cd6:	bf00      	nop

00000cd8 <BMSModule::isExisting()>:

bool BMSModule::isExisting()
{
  return exists;
}
     cd8:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
     cdc:	4770      	bx	lr
     cde:	bf00      	nop

00000ce0 <BMSModule::isReset()>:

bool BMSModule::isReset()
{
  return reset;
}
     ce0:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
     ce4:	4770      	bx	lr
     ce6:	bf00      	nop

00000ce8 <BMSModule::settempsensor(int)>:

void BMSModule::settempsensor(int tempsensor)
{
  sensor = tempsensor;
     ce8:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8
}
     cec:	4770      	bx	lr
     cee:	bf00      	nop

00000cf0 <BMSModule::setExists(bool)>:

void BMSModule::setExists(bool ex)
{
  exists = ex;
     cf0:	f880 10c4 	strb.w	r1, [r0, #196]	; 0xc4
}
     cf4:	4770      	bx	lr
     cf6:	bf00      	nop

00000cf8 <BMSModule::setDelta(float)>:

void BMSModule::setDelta(float ex)
{
  VoltDelta = ex;
     cf8:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
}
     cfc:	4770      	bx	lr
     cfe:	bf00      	nop

00000d00 <BMSModule::setReset(bool)>:

void BMSModule::setReset(bool ex)
{
  reset = ex;
     d00:	f880 10c5 	strb.w	r1, [r0, #197]	; 0xc5
}
     d04:	4770      	bx	lr
     d06:	bf00      	nop

00000d08 <BMSModule::setIgnoreCell(float)>:

void BMSModule::setIgnoreCell(float Ignore)
{
     d08:	b530      	push	{r4, r5, lr}
  IgnoreCell = Ignore;
  Serial.println();
     d0a:	4c0f      	ldr	r4, [pc, #60]	; (d48 <BMSModule::setIgnoreCell(float)+0x40>)
  IgnoreCell = Ignore;
     d0c:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
{
     d10:	b083      	sub	sp, #12
  Serial.println();
     d12:	4620      	mov	r0, r4
{
     d14:	460d      	mov	r5, r1
  Serial.println();
     d16:	f008 fd2b 	bl	9770 <Print::println()>
  Serial.println();
     d1a:	4620      	mov	r0, r4
     d1c:	f008 fd28 	bl	9770 <Print::println()>
  Serial.println(Ignore);
     d20:	4628      	mov	r0, r5
     d22:	f00b ff31 	bl	cb88 <__aeabi_f2d>
     d26:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     d28:	2102      	movs	r1, #2
     d2a:	4602      	mov	r2, r0
     d2c:	9100      	str	r1, [sp, #0]
     d2e:	4620      	mov	r0, r4
     d30:	f008 fd42 	bl	97b8 <Print::printFloat(double, unsigned char)>
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     d34:	4620      	mov	r0, r4
     d36:	f008 fd1b 	bl	9770 <Print::println()>
  Serial.println();
     d3a:	4620      	mov	r0, r4

}
     d3c:	b003      	add	sp, #12
     d3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  Serial.println();
     d42:	f008 bd15 	b.w	9770 <Print::println()>
     d46:	bf00      	nop
     d48:	1fff89fc 	.word	0x1fff89fc

00000d4c <BMSModuleManager::BMSModuleManager()>:
BMSModuleManager::BMSModuleManager()
     d4c:	b570      	push	{r4, r5, r6, lr}
     d4e:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
     d52:	4606      	mov	r6, r0
     d54:	f100 042c 	add.w	r4, r0, #44	; 0x2c
     d58:	3534      	adds	r5, #52	; 0x34
     d5a:	4620      	mov	r0, r4
     d5c:	34f8      	adds	r4, #248	; 0xf8
     d5e:	f7ff fb7b 	bl	458 <BMSModule::BMSModule()>
     d62:	42ac      	cmp	r4, r5
     d64:	d1f9      	bne.n	d5a <BMSModuleManager::BMSModuleManager()+0xe>
     d66:	f506 7592 	add.w	r5, r6, #292	; 0x124
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     d6a:	2401      	movs	r4, #1
    modules[i].setExists(false);
     d6c:	4628      	mov	r0, r5
     d6e:	2100      	movs	r1, #0
     d70:	f7ff ffbe 	bl	cf0 <BMSModule::setExists(bool)>
    modules[i].setAddress(i);
     d74:	4621      	mov	r1, r4
     d76:	4628      	mov	r0, r5
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     d78:	3401      	adds	r4, #1
    modules[i].setAddress(i);
     d7a:	f7ff ff9f 	bl	cbc <BMSModule::setAddress(int)>
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     d7e:	2c3f      	cmp	r4, #63	; 0x3f
     d80:	f105 05f8 	add.w	r5, r5, #248	; 0xf8
     d84:	d1f2      	bne.n	d6c <BMSModuleManager::BMSModuleManager()+0x20>
  isFaulted = false;
     d86:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
  lowestPackVolt = 1000.0f;
     d8a:	4807      	ldr	r0, [pc, #28]	; (da8 <BMSModuleManager::BMSModuleManager()+0x5c>)
     d8c:	6130      	str	r0, [r6, #16]
  highestPackVolt = 0.0f;
     d8e:	2100      	movs	r1, #0
     d90:	6171      	str	r1, [r6, #20]
  isFaulted = false;
     d92:	2200      	movs	r2, #0
  lowestPackTemp = 200.0f;
     d94:	4805      	ldr	r0, [pc, #20]	; (dac <BMSModuleManager::BMSModuleManager()+0x60>)
  highestPackTemp = -100.0f;
     d96:	4906      	ldr	r1, [pc, #24]	; (db0 <BMSModuleManager::BMSModuleManager()+0x64>)
  lowestPackTemp = 200.0f;
     d98:	61b0      	str	r0, [r6, #24]
  highestPackTemp = -100.0f;
     d9a:	61f1      	str	r1, [r6, #28]
  balcnt = 0;//counter to stop balancing for cell measurement
     d9c:	f883 2d3e 	strb.w	r2, [r3, #3390]	; 0xd3e
}
     da0:	4630      	mov	r0, r6
  isFaulted = false;
     da2:	f8a3 2d3c 	strh.w	r2, [r3, #3388]	; 0xd3c
}
     da6:	bd70      	pop	{r4, r5, r6, pc}
     da8:	447a0000 	.word	0x447a0000
     dac:	43480000 	.word	0x43480000
     db0:	c2c80000 	.word	0xc2c80000

00000db4 <BMSModuleManager::checkcomms()>:
{
     db4:	b570      	push	{r4, r5, r6, lr}
     db6:	f500 7492 	add.w	r4, r0, #292	; 0x124
  for (int y = 1; y < 63; y++)
     dba:	2501      	movs	r5, #1
  int g = 0;
     dbc:	2600      	movs	r6, #0
     dbe:	e00d      	b.n	ddc <BMSModuleManager::checkcomms()+0x28>
      g = 1;
     dc0:	2601      	movs	r6, #1
    modules[y].setReset(false);
     dc2:	4620      	mov	r0, r4
     dc4:	2100      	movs	r1, #0
     dc6:	f7ff ff9b 	bl	d00 <BMSModule::setReset(bool)>
    modules[y].setAddress(y);
     dca:	4629      	mov	r1, r5
     dcc:	4620      	mov	r0, r4
  for (int y = 1; y < 63; y++)
     dce:	3501      	adds	r5, #1
    modules[y].setAddress(y);
     dd0:	f7ff ff74 	bl	cbc <BMSModule::setAddress(int)>
  for (int y = 1; y < 63; y++)
     dd4:	2d3f      	cmp	r5, #63	; 0x3f
     dd6:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
     dda:	d00f      	beq.n	dfc <BMSModuleManager::checkcomms()+0x48>
    if (modules[y].isExisting())
     ddc:	4620      	mov	r0, r4
     dde:	f7ff ff7b 	bl	cd8 <BMSModule::isExisting()>
     de2:	4603      	mov	r3, r0
      if (modules[y].isReset())
     de4:	4620      	mov	r0, r4
    if (modules[y].isExisting())
     de6:	2b00      	cmp	r3, #0
     de8:	d0eb      	beq.n	dc2 <BMSModuleManager::checkcomms()+0xe>
      if (modules[y].isReset())
     dea:	f7ff ff79 	bl	ce0 <BMSModule::isReset()>
     dee:	4606      	mov	r6, r0
     df0:	2800      	cmp	r0, #0
     df2:	d1e5      	bne.n	dc0 <BMSModuleManager::checkcomms()+0xc>
        modules[y].setExists(false);
     df4:	4601      	mov	r1, r0
     df6:	4620      	mov	r0, r4
     df8:	f7ff ff7a 	bl	cf0 <BMSModule::setExists(bool)>
}
     dfc:	4630      	mov	r0, r6
     dfe:	bd70      	pop	{r4, r5, r6, pc}

00000e00 <BMSModuleManager::setBalanceHyst(float)>:
  BalHys = newVal;
     e00:	6281      	str	r1, [r0, #40]	; 0x28
}
     e02:	4770      	bx	lr

00000e04 <BMSModuleManager::balanceCells(int)>:
{
     e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (balcnt > 60)
     e08:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
{
     e0c:	b083      	sub	sp, #12
  if (balcnt > 60)
     e0e:	f893 4d3e 	ldrb.w	r4, [r3, #3390]	; 0xd3e
     e12:	9301      	str	r3, [sp, #4]
     e14:	2c3c      	cmp	r4, #60	; 0x3c
{
     e16:	9100      	str	r1, [sp, #0]
  if (balcnt > 60)
     e18:	d90e      	bls.n	e38 <BMSModuleManager::balanceCells(int)+0x34>
     e1a:	f8df 8294 	ldr.w	r8, [pc, #660]	; 10b0 <BMSModuleManager::balanceCells(int)+0x2ac>
          for (int i = 0; i < 8; i++)
     e1e:	2301      	movs	r3, #1
  OUTmsg.ext = 0;
     e20:	f898 2006 	ldrb.w	r2, [r8, #6]
  balcnt++;
     e24:	9901      	ldr	r1, [sp, #4]
  OUTmsg.ext = 0;
     e26:	f36f 0200 	bfc	r2, #0, #1
  balcnt++;
     e2a:	f881 3d3e 	strb.w	r3, [r1, #3390]	; 0xd3e
  OUTmsg.ext = 0;
     e2e:	f888 2006 	strb.w	r2, [r8, #6]
}
     e32:	b003      	add	sp, #12
     e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (balcnt > 10)
     e38:	2c0a      	cmp	r4, #10
     e3a:	f240 8179 	bls.w	1130 <BMSModuleManager::balanceCells(int)+0x32c>
     e3e:	2c14      	cmp	r4, #20
     e40:	4605      	mov	r5, r0
    if (balcnt == 11 || balcnt == 15 || balcnt == 20 || balcnt == 25 || balcnt == 30 || balcnt == 35 || balcnt == 40 || balcnt == 45 || balcnt == 50 || balcnt == 55)
     e42:	d90e      	bls.n	e62 <BMSModuleManager::balanceCells(int)+0x5e>
     e44:	f1a4 0319 	sub.w	r3, r4, #25
     e48:	b2db      	uxtb	r3, r3
     e4a:	2b1e      	cmp	r3, #30
     e4c:	d804      	bhi.n	e58 <BMSModuleManager::balanceCells(int)+0x54>
     e4e:	4a99      	ldr	r2, [pc, #612]	; (10b4 <BMSModuleManager::balanceCells(int)+0x2b0>)
     e50:	fa22 f303 	lsr.w	r3, r2, r3
     e54:	07da      	lsls	r2, r3, #31
     e56:	d40c      	bmi.n	e72 <BMSModuleManager::balanceCells(int)+0x6e>
  balcnt++;
     e58:	1c63      	adds	r3, r4, #1
     e5a:	f8df 8254 	ldr.w	r8, [pc, #596]	; 10b0 <BMSModuleManager::balanceCells(int)+0x2ac>
     e5e:	b2db      	uxtb	r3, r3
     e60:	e7de      	b.n	e20 <BMSModuleManager::balanceCells(int)+0x1c>
     e62:	f1a4 020b 	sub.w	r2, r4, #11
     e66:	b2d2      	uxtb	r2, r2
     e68:	f240 2311 	movw	r3, #529	; 0x211
     e6c:	40d3      	lsrs	r3, r2
     e6e:	07db      	lsls	r3, r3, #31
     e70:	d5f2      	bpl.n	e58 <BMSModuleManager::balanceCells(int)+0x54>
      balancing = false;
     e72:	9a01      	ldr	r2, [sp, #4]
     e74:	f8df 8238 	ldr.w	r8, [pc, #568]	; 10b0 <BMSModuleManager::balanceCells(int)+0x2ac>
     e78:	2300      	movs	r3, #0
     e7a:	f882 3d3d 	strb.w	r3, [r2, #3389]	; 0xd3d
      for (int y = 1; y < 63; y++)
     e7e:	f505 7692 	add.w	r6, r5, #292	; 0x124
     e82:	2701      	movs	r7, #1
              OUTmsg.id  = 0x1A555417;
     e84:	46a9      	mov	r9, r5
     e86:	e005      	b.n	e94 <BMSModuleManager::balanceCells(int)+0x90>
      for (int y = 1; y < 63; y++)
     e88:	3701      	adds	r7, #1
     e8a:	2f3f      	cmp	r7, #63	; 0x3f
     e8c:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
     e90:	f000 8091 	beq.w	fb6 <BMSModuleManager::balanceCells(int)+0x1b2>
        if (modules[y].isExisting() == 1)
     e94:	4630      	mov	r0, r6
     e96:	f7ff ff1f 	bl	cd8 <BMSModule::isExisting()>
     e9a:	2800      	cmp	r0, #0
     e9c:	d0f4      	beq.n	e88 <BMSModuleManager::balanceCells(int)+0x84>
          for (int i = 0; i < 12; i++)
     e9e:	f04f 0b00 	mov.w	fp, #0
          balance = 0;
     ea2:	465d      	mov	r5, fp
              balance = balance | (1 << i);
     ea4:	2401      	movs	r4, #1
            if ((LowCellVolt + BalHys) < modules[y].getCellVoltage(i))
     ea6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
     eaa:	f8d9 0008 	ldr.w	r0, [r9, #8]
     eae:	f00b ff87 	bl	cdc0 <__addsf3>
     eb2:	4659      	mov	r1, fp
     eb4:	4682      	mov	sl, r0
     eb6:	4630      	mov	r0, r6
     eb8:	f7ff fb8e 	bl	5d8 <BMSModule::getCellVoltage(int)>
     ebc:	4601      	mov	r1, r0
     ebe:	4650      	mov	r0, sl
     ec0:	f00c fa24 	bl	d30c <__aeabi_fcmplt>
     ec4:	b118      	cbz	r0, ece <BMSModuleManager::balanceCells(int)+0xca>
              balance = balance | (1 << i);
     ec6:	fa04 f30b 	lsl.w	r3, r4, fp
     eca:	432b      	orrs	r3, r5
     ecc:	b29d      	uxth	r5, r3
          for (int i = 0; i < 12; i++)
     ece:	f10b 0b01 	add.w	fp, fp, #1
     ed2:	f1bb 0f0c 	cmp.w	fp, #12
     ed6:	d1e6      	bne.n	ea6 <BMSModuleManager::balanceCells(int)+0xa2>
          if (balance > 0)
     ed8:	b11d      	cbz	r5, ee2 <BMSModuleManager::balanceCells(int)+0xde>
            balancing = true;
     eda:	9a01      	ldr	r2, [sp, #4]
     edc:	2301      	movs	r3, #1
     ede:	f882 3d3d 	strb.w	r3, [r2, #3389]	; 0xd3d
          if (debug == 1)
     ee2:	9b00      	ldr	r3, [sp, #0]
     ee4:	2b01      	cmp	r3, #1
     ee6:	f000 80c9 	beq.w	107c <BMSModuleManager::balanceCells(int)+0x278>
          OUTmsg.buf[0] = 0X00;
     eea:	2400      	movs	r4, #0
     eec:	4a72      	ldr	r2, [pc, #456]	; (10b8 <BMSModuleManager::balanceCells(int)+0x2b4>)
     eee:	f8c8 4008 	str.w	r4, [r8, #8]
          OUTmsg.buf[4] = 0X00;
     ef2:	f8c8 400c 	str.w	r4, [r8, #12]
            if (bitRead(balance, i) == 1)
     ef6:	fa45 f304 	asr.w	r3, r5, r4
     efa:	f003 0301 	and.w	r3, r3, #1
          for (int i = 0; i < 8; i++)
     efe:	3401      	adds	r4, #1
            if (bitRead(balance, i) == 1)
     f00:	00db      	lsls	r3, r3, #3
          for (int i = 0; i < 8; i++)
     f02:	2c08      	cmp	r4, #8
     f04:	f802 3f01 	strb.w	r3, [r2, #1]!
     f08:	d1f5      	bne.n	ef6 <BMSModuleManager::balanceCells(int)+0xf2>
          switch (y)
     f0a:	f107 3bff 	add.w	fp, r7, #4294967295
     f0e:	f1bb 0f0b 	cmp.w	fp, #11
     f12:	d80a      	bhi.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
     f14:	e8df f00b 	tbb	[pc, fp]
     f18:	a2aaaea6 	.word	0xa2aaaea6
     f1c:	72767a9e 	.word	0x72767a9e
     f20:	06666a6e 	.word	0x06666a6e
              OUTmsg.id  = 0x1A5554AF;
     f24:	4b65      	ldr	r3, [pc, #404]	; (10bc <BMSModuleManager::balanceCells(int)+0x2b8>)
     f26:	f8c8 3000 	str.w	r3, [r8]
          OUTmsg.ext = 1;
     f2a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
          Can0.write(OUTmsg);
     f2e:	4960      	ldr	r1, [pc, #384]	; (10b0 <BMSModuleManager::balanceCells(int)+0x2ac>)
     f30:	4863      	ldr	r0, [pc, #396]	; (10c0 <BMSModuleManager::balanceCells(int)+0x2bc>)
          OUTmsg.ext = 1;
     f32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     f3a:	f043 0301 	orr.w	r3, r3, #1
     f3e:	f8a8 3006 	strh.w	r3, [r8, #6]
          Can0.write(OUTmsg);
     f42:	f007 fb45 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
          delay(1);
     f46:	2001      	movs	r0, #1
     f48:	f009 fb7e 	bl	a648 <delay>
          for (int i = 8; i < 13; i++)
     f4c:	495d      	ldr	r1, [pc, #372]	; (10c4 <BMSModuleManager::balanceCells(int)+0x2c0>)
              OUTmsg.buf[i - 8] = 0x08;
     f4e:	2008      	movs	r0, #8
            if (bitRead(balance, i) == 1)
     f50:	fa45 f304 	asr.w	r3, r5, r4
     f54:	f013 0301 	ands.w	r3, r3, #1
          for (int i = 8; i < 13; i++)
     f58:	f104 0401 	add.w	r4, r4, #1
              OUTmsg.buf[i - 8] = 0x08;
     f5c:	bf14      	ite	ne
     f5e:	7008      	strbne	r0, [r1, #0]
              OUTmsg.buf[i - 8] = 0x00;
     f60:	700b      	strbeq	r3, [r1, #0]
          for (int i = 8; i < 13; i++)
     f62:	2c0d      	cmp	r4, #13
     f64:	f101 0101 	add.w	r1, r1, #1
     f68:	d1f2      	bne.n	f50 <BMSModuleManager::balanceCells(int)+0x14c>
          OUTmsg.buf[4] = 0xFE;
     f6a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
     f6e:	f8c8 300c 	str.w	r3, [r8, #12]
          switch (y)
     f72:	f1bb 0f0b 	cmp.w	fp, #11
     f76:	d80a      	bhi.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
     f78:	e8df f00b 	tbb	[pc, fp]
     f7c:	60646830 	.word	0x60646830
     f80:	5054585c 	.word	0x5054585c
     f84:	06282c4c 	.word	0x06282c4c
              OUTmsg.id  = 0x1A5554B0;
     f88:	4b4f      	ldr	r3, [pc, #316]	; (10c8 <BMSModuleManager::balanceCells(int)+0x2c4>)
     f8a:	f8c8 3000 	str.w	r3, [r8]
          OUTmsg.ext = 1;
     f8e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
          Can0.write(OUTmsg);
     f92:	4947      	ldr	r1, [pc, #284]	; (10b0 <BMSModuleManager::balanceCells(int)+0x2ac>)
     f94:	484a      	ldr	r0, [pc, #296]	; (10c0 <BMSModuleManager::balanceCells(int)+0x2bc>)
          OUTmsg.ext = 1;
     f96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     f9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     f9e:	f043 0301 	orr.w	r3, r3, #1
      for (int y = 1; y < 63; y++)
     fa2:	3701      	adds	r7, #1
          OUTmsg.ext = 1;
     fa4:	f8a8 3006 	strh.w	r3, [r8, #6]
          Can0.write(OUTmsg);
     fa8:	f007 fb12 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      for (int y = 1; y < 63; y++)
     fac:	2f3f      	cmp	r7, #63	; 0x3f
     fae:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
     fb2:	f47f af6f 	bne.w	e94 <BMSModuleManager::balanceCells(int)+0x90>
      if (balancing == false)
     fb6:	9a01      	ldr	r2, [sp, #4]
     fb8:	f892 3d3d 	ldrb.w	r3, [r2, #3389]	; 0xd3d
     fbc:	2b00      	cmp	r3, #0
     fbe:	f43f af2e 	beq.w	e1e <BMSModuleManager::balanceCells(int)+0x1a>
  balcnt++;
     fc2:	f892 3d3e 	ldrb.w	r3, [r2, #3390]	; 0xd3e
     fc6:	3301      	adds	r3, #1
     fc8:	b2db      	uxtb	r3, r3
     fca:	e729      	b.n	e20 <BMSModuleManager::balanceCells(int)+0x1c>
              OUTmsg.id  = 0x1A5554AE;
     fcc:	4b3f      	ldr	r3, [pc, #252]	; (10cc <BMSModuleManager::balanceCells(int)+0x2c8>)
     fce:	f8c8 3000 	str.w	r3, [r8]
              break;
     fd2:	e7dc      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A5554AC;
     fd4:	4b3e      	ldr	r3, [pc, #248]	; (10d0 <BMSModuleManager::balanceCells(int)+0x2cc>)
     fd6:	f8c8 3000 	str.w	r3, [r8]
              break;
     fda:	e7d8      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A55540B;
     fdc:	4b3d      	ldr	r3, [pc, #244]	; (10d4 <BMSModuleManager::balanceCells(int)+0x2d0>)
     fde:	f8c8 3000 	str.w	r3, [r8]
              break;
     fe2:	e7d4      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A5554AD;
     fe4:	4b3c      	ldr	r3, [pc, #240]	; (10d8 <BMSModuleManager::balanceCells(int)+0x2d4>)
     fe6:	f8c8 3000 	str.w	r3, [r8]
              break;
     fea:	e79e      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A5554AB;
     fec:	4b3b      	ldr	r3, [pc, #236]	; (10dc <BMSModuleManager::balanceCells(int)+0x2d8>)
     fee:	f8c8 3000 	str.w	r3, [r8]
              break;
     ff2:	e79a      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55541A;
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <BMSModuleManager::balanceCells(int)+0x2dc>)
     ff6:	f8c8 3000 	str.w	r3, [r8]
              break;
     ffa:	e796      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A555418;
     ffc:	4b39      	ldr	r3, [pc, #228]	; (10e4 <BMSModuleManager::balanceCells(int)+0x2e0>)
     ffe:	f8c8 3000 	str.w	r3, [r8]
              break;
    1002:	e792      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A555416;
    1004:	4b38      	ldr	r3, [pc, #224]	; (10e8 <BMSModuleManager::balanceCells(int)+0x2e4>)
    1006:	f8c8 3000 	str.w	r3, [r8]
              break;
    100a:	e78e      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A555414;
    100c:	4b37      	ldr	r3, [pc, #220]	; (10ec <BMSModuleManager::balanceCells(int)+0x2e8>)
    100e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1012:	e78a      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55541B;
    1014:	4b36      	ldr	r3, [pc, #216]	; (10f0 <BMSModuleManager::balanceCells(int)+0x2ec>)
    1016:	f8c8 3000 	str.w	r3, [r8]
              break;
    101a:	e7b8      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555419;
    101c:	4b35      	ldr	r3, [pc, #212]	; (10f4 <BMSModuleManager::balanceCells(int)+0x2f0>)
    101e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1022:	e7b4      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555417;
    1024:	4b34      	ldr	r3, [pc, #208]	; (10f8 <BMSModuleManager::balanceCells(int)+0x2f4>)
    1026:	f8c8 3000 	str.w	r3, [r8]
              break;
    102a:	e7b0      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555415;
    102c:	4b33      	ldr	r3, [pc, #204]	; (10fc <BMSModuleManager::balanceCells(int)+0x2f8>)
    102e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1032:	e7ac      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555413;
    1034:	4b32      	ldr	r3, [pc, #200]	; (1100 <BMSModuleManager::balanceCells(int)+0x2fc>)
    1036:	f8c8 3000 	str.w	r3, [r8]
              break;
    103a:	e7a8      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555411;
    103c:	4b31      	ldr	r3, [pc, #196]	; (1104 <BMSModuleManager::balanceCells(int)+0x300>)
    103e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1042:	e7a4      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A55540F;
    1044:	4b30      	ldr	r3, [pc, #192]	; (1108 <BMSModuleManager::balanceCells(int)+0x304>)
    1046:	f8c8 3000 	str.w	r3, [r8]
              break;
    104a:	e7a0      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A55540D;
    104c:	4b2f      	ldr	r3, [pc, #188]	; (110c <BMSModuleManager::balanceCells(int)+0x308>)
    104e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1052:	e79c      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555412;
    1054:	4b2e      	ldr	r3, [pc, #184]	; (1110 <BMSModuleManager::balanceCells(int)+0x30c>)
    1056:	f8c8 3000 	str.w	r3, [r8]
              break;
    105a:	e766      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A555410;
    105c:	4b2d      	ldr	r3, [pc, #180]	; (1114 <BMSModuleManager::balanceCells(int)+0x310>)
    105e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1062:	e762      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55540A;
    1064:	4b2c      	ldr	r3, [pc, #176]	; (1118 <BMSModuleManager::balanceCells(int)+0x314>)
    1066:	f8c8 3000 	str.w	r3, [r8]
              break;
    106a:	e75e      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55540E;
    106c:	4b2b      	ldr	r3, [pc, #172]	; (111c <BMSModuleManager::balanceCells(int)+0x318>)
    106e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1072:	e75a      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55540C;
    1074:	4b2a      	ldr	r3, [pc, #168]	; (1120 <BMSModuleManager::balanceCells(int)+0x31c>)
    1076:	f8c8 3000 	str.w	r3, [r8]
              break;
    107a:	e756      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
            Serial.println();
    107c:	4829      	ldr	r0, [pc, #164]	; (1124 <BMSModuleManager::balanceCells(int)+0x320>)
    107e:	f008 fb77 	bl	9770 <Print::println()>
    1082:	2107      	movs	r1, #7
    1084:	4828      	ldr	r0, [pc, #160]	; (1128 <BMSModuleManager::balanceCells(int)+0x324>)
    1086:	f00b f8c3 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    108a:	4639      	mov	r1, r7
    108c:	4825      	ldr	r0, [pc, #148]	; (1124 <BMSModuleManager::balanceCells(int)+0x320>)
    108e:	f008 fb67 	bl	9760 <Print::print(long)>
    1092:	2103      	movs	r1, #3
    1094:	4825      	ldr	r0, [pc, #148]	; (112c <BMSModuleManager::balanceCells(int)+0x328>)
    1096:	f00b f8bb 	bl	c210 <usb_serial_write>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    109a:	2300      	movs	r3, #0
    109c:	2210      	movs	r2, #16
    109e:	4629      	mov	r1, r5
    10a0:	4820      	ldr	r0, [pc, #128]	; (1124 <BMSModuleManager::balanceCells(int)+0x320>)
    10a2:	f008 fb7d 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
    10a6:	481f      	ldr	r0, [pc, #124]	; (1124 <BMSModuleManager::balanceCells(int)+0x320>)
    10a8:	f008 fb62 	bl	9770 <Print::println()>
    10ac:	e71d      	b.n	eea <BMSModuleManager::balanceCells(int)+0xe6>
    10ae:	bf00      	nop
    10b0:	1fff9180 	.word	0x1fff9180
    10b4:	42108421 	.word	0x42108421
    10b8:	1fff9187 	.word	0x1fff9187
    10bc:	1a5554af 	.word	0x1a5554af
    10c0:	1fffd1cc 	.word	0x1fffd1cc
    10c4:	1fff9188 	.word	0x1fff9188
    10c8:	1a5554b0 	.word	0x1a5554b0
    10cc:	1a5554ae 	.word	0x1a5554ae
    10d0:	1a5554ac 	.word	0x1a5554ac
    10d4:	1a55540b 	.word	0x1a55540b
    10d8:	1a5554ad 	.word	0x1a5554ad
    10dc:	1a5554ab 	.word	0x1a5554ab
    10e0:	1a55541a 	.word	0x1a55541a
    10e4:	1a555418 	.word	0x1a555418
    10e8:	1a555416 	.word	0x1a555416
    10ec:	1a555414 	.word	0x1a555414
    10f0:	1a55541b 	.word	0x1a55541b
    10f4:	1a555419 	.word	0x1a555419
    10f8:	1a555417 	.word	0x1a555417
    10fc:	1a555415 	.word	0x1a555415
    1100:	1a555413 	.word	0x1a555413
    1104:	1a555411 	.word	0x1a555411
    1108:	1a55540f 	.word	0x1a55540f
    110c:	1a55540d 	.word	0x1a55540d
    1110:	1a555412 	.word	0x1a555412
    1114:	1a555410 	.word	0x1a555410
    1118:	1a55540a 	.word	0x1a55540a
    111c:	1a55540e 	.word	0x1a55540e
    1120:	1a55540c 	.word	0x1a55540c
    1124:	1fff89fc 	.word	0x1fff89fc
    1128:	00013d30 	.word	0x00013d30
    112c:	00013d38 	.word	0x00013d38
    if (balcnt == 1)
    1130:	2c01      	cmp	r4, #1
    1132:	f47f ae91 	bne.w	e58 <BMSModuleManager::balanceCells(int)+0x54>
      OUTmsg.ext = 1;
    1136:	f8df 821c 	ldr.w	r8, [pc, #540]	; 1354 <BMSModuleManager::balanceCells(int)+0x550>
      Can0.write(OUTmsg);
    113a:	4887      	ldr	r0, [pc, #540]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.ext = 1;
    113c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
    1140:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1144:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1148:	f043 0301 	orr.w	r3, r3, #1
      OUTmsg.buf[0] = 0X00;
    114c:	2500      	movs	r5, #0
      Can0.write(OUTmsg);
    114e:	4641      	mov	r1, r8
      OUTmsg.ext = 1;
    1150:	f8a8 3006 	strh.w	r3, [r8, #6]
      OUTmsg.id  = 0x1A55540A;
    1154:	4b81      	ldr	r3, [pc, #516]	; (135c <BMSModuleManager::balanceCells(int)+0x558>)
    1156:	f8c8 3000 	str.w	r3, [r8]
      OUTmsg.buf[0] = 0X00;
    115a:	f8c8 5008 	str.w	r5, [r8, #8]
      OUTmsg.buf[4] = 0X00;
    115e:	f8c8 500c 	str.w	r5, [r8, #12]
      Can0.write(OUTmsg);
    1162:	f007 fa35 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1166:	4620      	mov	r0, r4
    1168:	f009 fa6e 	bl	a648 <delay>
      OUTmsg.id  = 0x1A55540C;
    116c:	4b7c      	ldr	r3, [pc, #496]	; (1360 <BMSModuleManager::balanceCells(int)+0x55c>)
      Can0.write(OUTmsg);
    116e:	487a      	ldr	r0, [pc, #488]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540C;
    1170:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1174:	4641      	mov	r1, r8
    1176:	f007 fa2b 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    117a:	4620      	mov	r0, r4
    117c:	f009 fa64 	bl	a648 <delay>
      OUTmsg.id  = 0x1A55540E;
    1180:	4b78      	ldr	r3, [pc, #480]	; (1364 <BMSModuleManager::balanceCells(int)+0x560>)
      Can0.write(OUTmsg);
    1182:	4875      	ldr	r0, [pc, #468]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540E;
    1184:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1188:	4641      	mov	r1, r8
    118a:	f007 fa21 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    118e:	4620      	mov	r0, r4
    1190:	f009 fa5a 	bl	a648 <delay>
      OUTmsg.id  = 0x1A555410;
    1194:	4b74      	ldr	r3, [pc, #464]	; (1368 <BMSModuleManager::balanceCells(int)+0x564>)
      Can0.write(OUTmsg);
    1196:	4870      	ldr	r0, [pc, #448]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555410;
    1198:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    119c:	4641      	mov	r1, r8
    119e:	f007 fa17 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11a2:	4620      	mov	r0, r4
    11a4:	f009 fa50 	bl	a648 <delay>
      OUTmsg.id  = 0x1A555412;
    11a8:	4b70      	ldr	r3, [pc, #448]	; (136c <BMSModuleManager::balanceCells(int)+0x568>)
      Can0.write(OUTmsg);
    11aa:	486b      	ldr	r0, [pc, #428]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555412;
    11ac:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    11b0:	4641      	mov	r1, r8
    11b2:	f007 fa0d 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11b6:	4620      	mov	r0, r4
    11b8:	f009 fa46 	bl	a648 <delay>
      OUTmsg.id  = 0x1A555414;
    11bc:	4b6c      	ldr	r3, [pc, #432]	; (1370 <BMSModuleManager::balanceCells(int)+0x56c>)
      Can0.write(OUTmsg);
    11be:	4866      	ldr	r0, [pc, #408]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555414;
    11c0:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    11c4:	4641      	mov	r1, r8
    11c6:	f007 fa03 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11ca:	4620      	mov	r0, r4
    11cc:	f009 fa3c 	bl	a648 <delay>
      OUTmsg.id  = 0x1A555416;
    11d0:	4b68      	ldr	r3, [pc, #416]	; (1374 <BMSModuleManager::balanceCells(int)+0x570>)
      Can0.write(OUTmsg);
    11d2:	4861      	ldr	r0, [pc, #388]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555416;
    11d4:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    11d8:	4641      	mov	r1, r8
    11da:	f007 f9f9 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11de:	4620      	mov	r0, r4
    11e0:	f009 fa32 	bl	a648 <delay>
      OUTmsg.id  = 0x1A555418;
    11e4:	4b64      	ldr	r3, [pc, #400]	; (1378 <BMSModuleManager::balanceCells(int)+0x574>)
      Can0.write(OUTmsg);
    11e6:	485c      	ldr	r0, [pc, #368]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555418;
    11e8:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    11ec:	4641      	mov	r1, r8
    11ee:	f007 f9ef 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11f2:	4620      	mov	r0, r4
    11f4:	f009 fa28 	bl	a648 <delay>
      OUTmsg.id  = 0x1A55541A;
    11f8:	4b60      	ldr	r3, [pc, #384]	; (137c <BMSModuleManager::balanceCells(int)+0x578>)
      Can0.write(OUTmsg);
    11fa:	4857      	ldr	r0, [pc, #348]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55541A;
    11fc:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1200:	4641      	mov	r1, r8
    1202:	f007 f9e5 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1206:	4620      	mov	r0, r4
    1208:	f009 fa1e 	bl	a648 <delay>
      OUTmsg.id  = 0x1A5554AB;
    120c:	4b5c      	ldr	r3, [pc, #368]	; (1380 <BMSModuleManager::balanceCells(int)+0x57c>)
      Can0.write(OUTmsg);
    120e:	4852      	ldr	r0, [pc, #328]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AB;
    1210:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1214:	4641      	mov	r1, r8
    1216:	f007 f9db 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    121a:	4620      	mov	r0, r4
    121c:	f009 fa14 	bl	a648 <delay>
      OUTmsg.id  = 0x1A5554AD;
    1220:	4b58      	ldr	r3, [pc, #352]	; (1384 <BMSModuleManager::balanceCells(int)+0x580>)
      Can0.write(OUTmsg);
    1222:	484d      	ldr	r0, [pc, #308]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AD;
    1224:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1228:	4641      	mov	r1, r8
    122a:	f007 f9d1 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    122e:	4620      	mov	r0, r4
    1230:	f009 fa0a 	bl	a648 <delay>
      OUTmsg.id  = 0x1A5554AF;
    1234:	4b54      	ldr	r3, [pc, #336]	; (1388 <BMSModuleManager::balanceCells(int)+0x584>)
      Can0.write(OUTmsg);
    1236:	4848      	ldr	r0, [pc, #288]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AF;
    1238:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    123c:	4641      	mov	r1, r8
    123e:	f007 f9c7 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1242:	4620      	mov	r0, r4
    1244:	f009 fa00 	bl	a648 <delay>
      OUTmsg.buf[4] = 0xFE;
    1248:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
      Can0.write(OUTmsg);
    124c:	4641      	mov	r1, r8
      OUTmsg.buf[4] = 0xFE;
    124e:	f8c8 300c 	str.w	r3, [r8, #12]
      Can0.write(OUTmsg);
    1252:	4841      	ldr	r0, [pc, #260]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540B;
    1254:	4b4d      	ldr	r3, [pc, #308]	; (138c <BMSModuleManager::balanceCells(int)+0x588>)
    1256:	f8c8 3000 	str.w	r3, [r8]
      OUTmsg.buf[0] = 0X00;
    125a:	f8c8 5008 	str.w	r5, [r8, #8]
      Can0.write(OUTmsg);
    125e:	f007 f9b7 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1262:	4620      	mov	r0, r4
    1264:	f009 f9f0 	bl	a648 <delay>
      OUTmsg.id  = 0x1A55540D;
    1268:	4b49      	ldr	r3, [pc, #292]	; (1390 <BMSModuleManager::balanceCells(int)+0x58c>)
      Can0.write(OUTmsg);
    126a:	483b      	ldr	r0, [pc, #236]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540D;
    126c:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1270:	4641      	mov	r1, r8
    1272:	f007 f9ad 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1276:	4620      	mov	r0, r4
    1278:	f009 f9e6 	bl	a648 <delay>
      OUTmsg.id  = 0x1A55540F;
    127c:	4b45      	ldr	r3, [pc, #276]	; (1394 <BMSModuleManager::balanceCells(int)+0x590>)
      Can0.write(OUTmsg);
    127e:	4836      	ldr	r0, [pc, #216]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540F;
    1280:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1284:	4641      	mov	r1, r8
    1286:	f007 f9a3 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    128a:	4620      	mov	r0, r4
    128c:	f009 f9dc 	bl	a648 <delay>
      OUTmsg.id  = 0x1A555411;
    1290:	4b41      	ldr	r3, [pc, #260]	; (1398 <BMSModuleManager::balanceCells(int)+0x594>)
      Can0.write(OUTmsg);
    1292:	4831      	ldr	r0, [pc, #196]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555411;
    1294:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1298:	4641      	mov	r1, r8
    129a:	f007 f999 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    129e:	4620      	mov	r0, r4
    12a0:	f009 f9d2 	bl	a648 <delay>
      OUTmsg.id  = 0x1A555413;
    12a4:	4b3d      	ldr	r3, [pc, #244]	; (139c <BMSModuleManager::balanceCells(int)+0x598>)
      Can0.write(OUTmsg);
    12a6:	482c      	ldr	r0, [pc, #176]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555413;
    12a8:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12ac:	4641      	mov	r1, r8
    12ae:	f007 f98f 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    12b2:	4620      	mov	r0, r4
    12b4:	f009 f9c8 	bl	a648 <delay>
      OUTmsg.id  = 0x1A555415;
    12b8:	4b39      	ldr	r3, [pc, #228]	; (13a0 <BMSModuleManager::balanceCells(int)+0x59c>)
      Can0.write(OUTmsg);
    12ba:	4827      	ldr	r0, [pc, #156]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555415;
    12bc:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12c0:	4641      	mov	r1, r8
    12c2:	f007 f985 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    12c6:	4620      	mov	r0, r4
    12c8:	f009 f9be 	bl	a648 <delay>
      OUTmsg.id  = 0x1A555417;
    12cc:	4b35      	ldr	r3, [pc, #212]	; (13a4 <BMSModuleManager::balanceCells(int)+0x5a0>)
      Can0.write(OUTmsg);
    12ce:	4822      	ldr	r0, [pc, #136]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555417;
    12d0:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12d4:	4641      	mov	r1, r8
    12d6:	f007 f97b 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    12da:	4620      	mov	r0, r4
    12dc:	f009 f9b4 	bl	a648 <delay>
      OUTmsg.id  = 0x1A555419;
    12e0:	4b31      	ldr	r3, [pc, #196]	; (13a8 <BMSModuleManager::balanceCells(int)+0x5a4>)
      Can0.write(OUTmsg);
    12e2:	481d      	ldr	r0, [pc, #116]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555419;
    12e4:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12e8:	4641      	mov	r1, r8
    12ea:	f007 f971 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    12ee:	4620      	mov	r0, r4
    12f0:	f009 f9aa 	bl	a648 <delay>
      OUTmsg.id  = 0x1A55541B;
    12f4:	4b2d      	ldr	r3, [pc, #180]	; (13ac <BMSModuleManager::balanceCells(int)+0x5a8>)
      Can0.write(OUTmsg);
    12f6:	4818      	ldr	r0, [pc, #96]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55541B;
    12f8:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12fc:	4641      	mov	r1, r8
    12fe:	f007 f967 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1302:	4620      	mov	r0, r4
    1304:	f009 f9a0 	bl	a648 <delay>
      OUTmsg.id  = 0x1A5554AC;
    1308:	4b29      	ldr	r3, [pc, #164]	; (13b0 <BMSModuleManager::balanceCells(int)+0x5ac>)
      Can0.write(OUTmsg);
    130a:	4813      	ldr	r0, [pc, #76]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AC;
    130c:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1310:	4641      	mov	r1, r8
    1312:	f007 f95d 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1316:	4620      	mov	r0, r4
    1318:	f009 f996 	bl	a648 <delay>
      OUTmsg.id  = 0x1A5554AE;
    131c:	4b25      	ldr	r3, [pc, #148]	; (13b4 <BMSModuleManager::balanceCells(int)+0x5b0>)
      Can0.write(OUTmsg);
    131e:	480e      	ldr	r0, [pc, #56]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AE;
    1320:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1324:	4641      	mov	r1, r8
    1326:	f007 f953 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    132a:	4620      	mov	r0, r4
    132c:	f009 f98c 	bl	a648 <delay>
      OUTmsg.id  = 0x1A5554B0;
    1330:	4b21      	ldr	r3, [pc, #132]	; (13b8 <BMSModuleManager::balanceCells(int)+0x5b4>)
      Can0.write(OUTmsg);
    1332:	4809      	ldr	r0, [pc, #36]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554B0;
    1334:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1338:	4641      	mov	r1, r8
    133a:	f007 f949 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    133e:	4620      	mov	r0, r4
    1340:	f009 f982 	bl	a648 <delay>
  balcnt++;
    1344:	9a01      	ldr	r2, [sp, #4]
    1346:	f892 3d3e 	ldrb.w	r3, [r2, #3390]	; 0xd3e
      balancing = false;
    134a:	f882 5d3d 	strb.w	r5, [r2, #3389]	; 0xd3d
  balcnt++;
    134e:	3301      	adds	r3, #1
    1350:	b2db      	uxtb	r3, r3
    1352:	e565      	b.n	e20 <BMSModuleManager::balanceCells(int)+0x1c>
    1354:	1fff9180 	.word	0x1fff9180
    1358:	1fffd1cc 	.word	0x1fffd1cc
    135c:	1a55540a 	.word	0x1a55540a
    1360:	1a55540c 	.word	0x1a55540c
    1364:	1a55540e 	.word	0x1a55540e
    1368:	1a555410 	.word	0x1a555410
    136c:	1a555412 	.word	0x1a555412
    1370:	1a555414 	.word	0x1a555414
    1374:	1a555416 	.word	0x1a555416
    1378:	1a555418 	.word	0x1a555418
    137c:	1a55541a 	.word	0x1a55541a
    1380:	1a5554ab 	.word	0x1a5554ab
    1384:	1a5554ad 	.word	0x1a5554ad
    1388:	1a5554af 	.word	0x1a5554af
    138c:	1a55540b 	.word	0x1a55540b
    1390:	1a55540d 	.word	0x1a55540d
    1394:	1a55540f 	.word	0x1a55540f
    1398:	1a555411 	.word	0x1a555411
    139c:	1a555413 	.word	0x1a555413
    13a0:	1a555415 	.word	0x1a555415
    13a4:	1a555417 	.word	0x1a555417
    13a8:	1a555419 	.word	0x1a555419
    13ac:	1a55541b 	.word	0x1a55541b
    13b0:	1a5554ac 	.word	0x1a5554ac
    13b4:	1a5554ae 	.word	0x1a5554ae
    13b8:	1a5554b0 	.word	0x1a5554b0

000013bc <BMSModuleManager::seriescells()>:
{
    13bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  spack = 0;
    13be:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
    13c2:	2300      	movs	r3, #0
    13c4:	f500 5674 	add.w	r6, r0, #15616	; 0x3d00
    13c8:	f8c7 3d40 	str.w	r3, [r7, #3392]	; 0xd40
  for (int y = 1; y < 63; y++)
    13cc:	f500 7492 	add.w	r4, r0, #292	; 0x124
    13d0:	3634      	adds	r6, #52	; 0x34
    13d2:	e002      	b.n	13da <BMSModuleManager::seriescells()+0x1e>
    13d4:	34f8      	adds	r4, #248	; 0xf8
    13d6:	42b4      	cmp	r4, r6
    13d8:	d00f      	beq.n	13fa <BMSModuleManager::seriescells()+0x3e>
    if (modules[y].isExisting())
    13da:	4620      	mov	r0, r4
    13dc:	f7ff fc7c 	bl	cd8 <BMSModule::isExisting()>
    13e0:	2800      	cmp	r0, #0
    13e2:	d0f7      	beq.n	13d4 <BMSModuleManager::seriescells()+0x18>
      spack = spack + modules[y].getscells();
    13e4:	4620      	mov	r0, r4
    13e6:	f8d7 5d40 	ldr.w	r5, [r7, #3392]	; 0xd40
    13ea:	f7ff f975 	bl	6d8 <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
    13ee:	34f8      	adds	r4, #248	; 0xf8
      spack = spack + modules[y].getscells();
    13f0:	4405      	add	r5, r0
  for (int y = 1; y < 63; y++)
    13f2:	42b4      	cmp	r4, r6
      spack = spack + modules[y].getscells();
    13f4:	f8c7 5d40 	str.w	r5, [r7, #3392]	; 0xd40
  for (int y = 1; y < 63; y++)
    13f8:	d1ef      	bne.n	13da <BMSModuleManager::seriescells()+0x1e>
}
    13fa:	f8d7 0d40 	ldr.w	r0, [r7, #3392]	; 0xd40
    13fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001400 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>:
  if (type == 1)
    1400:	2b01      	cmp	r3, #1
{
    1402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1406:	4605      	mov	r5, r0
    1408:	460e      	mov	r6, r1
    140a:	4617      	mov	r7, r2
  if (type == 1)
    140c:	d008      	beq.n	1420 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x20>
  if (type == 2)
    140e:	2b02      	cmp	r3, #2
    1410:	461c      	mov	r4, r3
    1412:	d103      	bne.n	141c <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x1c>
      if (msg.buf[5] != 0xDF) //Check module is not initializing OR a "spoof module"
    1414:	7b4a      	ldrb	r2, [r1, #13]
    CMU = (msg.id & 0x0F);
    1416:	680b      	ldr	r3, [r1, #0]
      if (msg.buf[5] != 0xDF) //Check module is not initializing OR a "spoof module"
    1418:	2adf      	cmp	r2, #223	; 0xdf
    141a:	d138      	bne.n	148e <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x8e>
}
    141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CMU = (msg.id & 0xFF);
    1420:	6808      	ldr	r0, [r1, #0]
    1422:	fa5f f880 	uxtb.w	r8, r0
    if (CMU > 10 && CMU < 60)
    1426:	f1a8 030b 	sub.w	r3, r8, #11
    142a:	2b30      	cmp	r3, #48	; 0x30
    142c:	d80e      	bhi.n	144c <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x4c>
      CMU = (CMU * 0.5) + 1;
    142e:	f000 000f 	and.w	r0, r0, #15
    1432:	f00b fd79 	bl	cf28 <__aeabi_i2f>
    1436:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    143a:	f00b fdc9 	bl	cfd0 <__aeabi_fmul>
    143e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    1442:	f00b fcbd 	bl	cdc0 <__addsf3>
    1446:	f00b ff89 	bl	d35c <__aeabi_f2iz>
    144a:	4680      	mov	r8, r0
      modules[CMU].setExists(true);
    144c:	ebc8 1448 	rsb	r4, r8, r8, lsl #5
    1450:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    1454:	342c      	adds	r4, #44	; 0x2c
    1456:	2101      	movs	r1, #1
    1458:	4620      	mov	r0, r4
    145a:	f7ff fc49 	bl	cf0 <BMSModule::setExists(bool)>
      modules[CMU].setReset(true);
    145e:	2101      	movs	r1, #1
    1460:	4620      	mov	r0, r4
    1462:	f7ff fc4d 	bl	d00 <BMSModule::setReset(bool)>
      modules[CMU].decodetemp(msg, 1);
    1466:	2201      	movs	r2, #1
    1468:	4631      	mov	r1, r6
    146a:	4620      	mov	r0, r4
    146c:	f7ff f832 	bl	4d4 <BMSModule::decodetemp(CAN_message_t&, int)>
      if (debug == 1)
    1470:	2f01      	cmp	r7, #1
    1472:	d1d3      	bne.n	141c <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x1c>
        Serial.println();
    1474:	4818      	ldr	r0, [pc, #96]	; (14d8 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xd8>)
    1476:	f008 f97b 	bl	9770 <Print::println()>
	size_t print(int n)				{ return print((long)n); }
    147a:	4641      	mov	r1, r8
    147c:	4816      	ldr	r0, [pc, #88]	; (14d8 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xd8>)
    147e:	f008 f96f 	bl	9760 <Print::print(long)>
}
    1482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1486:	4815      	ldr	r0, [pc, #84]	; (14dc <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xdc>)
    1488:	210d      	movs	r1, #13
    148a:	f00a bec1 	b.w	c210 <usb_serial_write>
    CMU = (msg.id & 0x0F);
    148e:	f003 080f 	and.w	r8, r3, #15
      CMU++;
    1492:	f108 0801 	add.w	r8, r8, #1
        modules[CMU].setExists(true);
    1496:	ebc8 1348 	rsb	r3, r8, r8, lsl #5
    149a:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
    149e:	352c      	adds	r5, #44	; 0x2c
    14a0:	2101      	movs	r1, #1
    14a2:	4628      	mov	r0, r5
    14a4:	f7ff fc24 	bl	cf0 <BMSModule::setExists(bool)>
        modules[CMU].setReset(true);
    14a8:	2101      	movs	r1, #1
    14aa:	4628      	mov	r0, r5
    14ac:	f7ff fc28 	bl	d00 <BMSModule::setReset(bool)>
        modules[CMU].decodetemp(msg, 2);
    14b0:	4622      	mov	r2, r4
    14b2:	4631      	mov	r1, r6
    14b4:	4628      	mov	r0, r5
    14b6:	f7ff f80d 	bl	4d4 <BMSModule::decodetemp(CAN_message_t&, int)>
        if (debug == 1)
    14ba:	2f01      	cmp	r7, #1
    14bc:	d1ae      	bne.n	141c <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x1c>
          Serial.println();
    14be:	4806      	ldr	r0, [pc, #24]	; (14d8 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xd8>)
    14c0:	f008 f956 	bl	9770 <Print::println()>
    14c4:	4641      	mov	r1, r8
    14c6:	4804      	ldr	r0, [pc, #16]	; (14d8 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xd8>)
    14c8:	f008 f94a 	bl	9760 <Print::print(long)>
}
    14cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    14d0:	4803      	ldr	r0, [pc, #12]	; (14e0 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xe0>)
    14d2:	210d      	movs	r1, #13
    14d4:	f00a be9c 	b.w	c210 <usb_serial_write>
    14d8:	1fff89fc 	.word	0x1fff89fc
    14dc:	00013d3c 	.word	0x00013d3c
    14e0:	00013d4c 	.word	0x00013d4c

000014e4 <BMSModuleManager::decodecan(CAN_message_t&, int)>:
  if (balancing == false)
    14e4:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
    14e8:	f893 3d3d 	ldrb.w	r3, [r3, #3389]	; 0xd3d
    14ec:	b103      	cbz	r3, 14f0 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xc>
    14ee:	4770      	bx	lr
{
    14f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (msg.id)
    14f2:	680b      	ldr	r3, [r1, #0]
    14f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
{
    14f8:	b083      	sub	sp, #12
    14fa:	4605      	mov	r5, r0
    14fc:	460c      	mov	r4, r1
    switch (msg.id)
    14fe:	2b3e      	cmp	r3, #62	; 0x3e
    1500:	d840      	bhi.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
    1502:	e8df f013 	tbh	[pc, r3, lsl #1]
    1506:	0064      	.short	0x0064
    1508:	0067006d 	.word	0x0067006d
    150c:	006a0118 	.word	0x006a0118
    1510:	00730070 	.word	0x00730070
    1514:	00760113 	.word	0x00760113
    1518:	007c0079 	.word	0x007c0079
    151c:	009b007f 	.word	0x009b007f
    1520:	00a1009e 	.word	0x00a1009e
    1524:	00a600a4 	.word	0x00a600a4
    1528:	00ac00a9 	.word	0x00ac00a9
    152c:	00b100af 	.word	0x00b100af
    1530:	00b700b4 	.word	0x00b700b4
    1534:	00bc00ba 	.word	0x00bc00ba
    1538:	00c200bf 	.word	0x00c200bf
    153c:	00c700c5 	.word	0x00c700c5
    1540:	00cd00ca 	.word	0x00cd00ca
    1544:	011500d0 	.word	0x011500d0
    1548:	00d2011a 	.word	0x00d2011a
    154c:	00d700d5 	.word	0x00d700d5
    1550:	00dd00da 	.word	0x00dd00da
    1554:	00e0003f 	.word	0x00e0003f
    1558:	00e600e3 	.word	0x00e600e3
    155c:	00e9003f 	.word	0x00e9003f
    1560:	00ef00ec 	.word	0x00ef00ec
    1564:	00f2003f 	.word	0x00f2003f
    1568:	00f800f5 	.word	0x00f800f5
    156c:	00fb003f 	.word	0x00fb003f
    1570:	010100fe 	.word	0x010100fe
    1574:	0104003f 	.word	0x0104003f
    1578:	010a0107 	.word	0x010a0107
    157c:	010d003f 	.word	0x010d003f
    1580:	00410110 	.word	0x00410110
}
    1584:	b003      	add	sp, #12
    1586:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Id = 2;
    1588:	2702      	movs	r7, #2
        CMU = 16;
    158a:	2610      	movs	r6, #16
        if (msg.buf[2] != 0xFF && msg.buf[5] != 0xFF && msg.buf[7] != 0xFF) //Check module is not initializing OR a "spoof module"
    158c:	7aa3      	ldrb	r3, [r4, #10]
    158e:	2bff      	cmp	r3, #255	; 0xff
    1590:	d0f8      	beq.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
    1592:	7b63      	ldrb	r3, [r4, #13]
    1594:	2bff      	cmp	r3, #255	; 0xff
    1596:	d0f5      	beq.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
    1598:	7be3      	ldrb	r3, [r4, #15]
    159a:	2bff      	cmp	r3, #255	; 0xff
    159c:	d0f2      	beq.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
          if (debug == 1)
    159e:	2a01      	cmp	r2, #1
    15a0:	f000 80e4 	beq.w	176c <BMSModuleManager::decodecan(CAN_message_t&, int)+0x288>
          modules[CMU].setExists(true);
    15a4:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
    15a8:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
    15ac:	362c      	adds	r6, #44	; 0x2c
    15ae:	4630      	mov	r0, r6
    15b0:	2101      	movs	r1, #1
    15b2:	f7ff fb9d 	bl	cf0 <BMSModule::setExists(bool)>
          modules[CMU].setReset(true);
    15b6:	4630      	mov	r0, r6
    15b8:	2101      	movs	r1, #1
    15ba:	f7ff fba1 	bl	d00 <BMSModule::setReset(bool)>
          modules[CMU].decodecan(Id, msg);
    15be:	4622      	mov	r2, r4
    15c0:	4639      	mov	r1, r7
    15c2:	4630      	mov	r0, r6
}
    15c4:	b003      	add	sp, #12
    15c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          modules[CMU].decodecan(Id, msg);
    15ca:	f7ff b9c3 	b.w	954 <BMSModule::decodecan(int, CAN_message_t&)>
        Id = 0;
    15ce:	2700      	movs	r7, #0
        CMU = 1;
    15d0:	2601      	movs	r6, #1
    15d2:	e7db      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    15d4:	2702      	movs	r7, #2
        CMU = 1;
    15d6:	2601      	movs	r6, #1
    15d8:	e7d8      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    15da:	2700      	movs	r7, #0
        CMU = 2;
    15dc:	2602      	movs	r6, #2
    15de:	e7d5      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    15e0:	2701      	movs	r7, #1
        CMU = 1;
    15e2:	463e      	mov	r6, r7
    15e4:	e7d2      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    15e6:	2701      	movs	r7, #1
        CMU = 2;
    15e8:	2602      	movs	r6, #2
    15ea:	e7cf      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    15ec:	2702      	movs	r7, #2
        CMU = 2;
    15ee:	463e      	mov	r6, r7
    15f0:	e7cc      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    15f2:	2700      	movs	r7, #0
        CMU = 3;
    15f4:	2603      	movs	r6, #3
    15f6:	e7c9      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    15f8:	2701      	movs	r7, #1
        CMU = 3;
    15fa:	2603      	movs	r6, #3
    15fc:	e7c6      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    15fe:	2702      	movs	r7, #2
        CMU = 3;
    1600:	2603      	movs	r6, #3
    1602:	e7c3      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 3;
    1604:	2603      	movs	r6, #3
        if (msg.buf[2] != 0xFF) //Check module is not initializing OR a "spoof module"
    1606:	7aa3      	ldrb	r3, [r4, #10]
    1608:	2bff      	cmp	r3, #255	; 0xff
    160a:	d0bb      	beq.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
          if (debug == 1)
    160c:	2a01      	cmp	r2, #1
    160e:	f000 8097 	beq.w	1740 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x25c>
          modules[CMU].setExists(true);
    1612:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
    1616:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
    161a:	352c      	adds	r5, #44	; 0x2c
    161c:	4628      	mov	r0, r5
    161e:	2101      	movs	r1, #1
    1620:	f7ff fb66 	bl	cf0 <BMSModule::setExists(bool)>
          modules[CMU].setReset(true);
    1624:	4628      	mov	r0, r5
    1626:	2101      	movs	r1, #1
    1628:	f7ff fb6a 	bl	d00 <BMSModule::setReset(bool)>
          modules[CMU].decodecan(Id, msg);
    162c:	4622      	mov	r2, r4
    162e:	2103      	movs	r1, #3
    1630:	4628      	mov	r0, r5
}
    1632:	b003      	add	sp, #12
    1634:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          modules[CMU].decodecan(Id, msg);
    1638:	f7ff b98c 	b.w	954 <BMSModule::decodecan(int, CAN_message_t&)>
        Id = 0;
    163c:	2700      	movs	r7, #0
        CMU = 4;
    163e:	2604      	movs	r6, #4
    1640:	e7a4      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1642:	2701      	movs	r7, #1
        CMU = 4;
    1644:	2604      	movs	r6, #4
    1646:	e7a1      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    1648:	2702      	movs	r7, #2
        CMU = 4;
    164a:	2604      	movs	r6, #4
    164c:	e79e      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 4;
    164e:	2604      	movs	r6, #4
    1650:	e7d9      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    1652:	2700      	movs	r7, #0
        CMU = 5;
    1654:	2605      	movs	r6, #5
    1656:	e799      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1658:	2701      	movs	r7, #1
        CMU = 5;
    165a:	2605      	movs	r6, #5
    165c:	e796      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    165e:	2702      	movs	r7, #2
        CMU = 5;
    1660:	2605      	movs	r6, #5
    1662:	e793      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 5;
    1664:	2605      	movs	r6, #5
    1666:	e7ce      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    1668:	2700      	movs	r7, #0
        CMU = 6;
    166a:	2606      	movs	r6, #6
    166c:	e78e      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    166e:	2701      	movs	r7, #1
        CMU = 6;
    1670:	2606      	movs	r6, #6
    1672:	e78b      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    1674:	2702      	movs	r7, #2
        CMU = 6;
    1676:	2606      	movs	r6, #6
    1678:	e788      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 6;
    167a:	2606      	movs	r6, #6
    167c:	e7c3      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    167e:	2700      	movs	r7, #0
        CMU = 7;
    1680:	2607      	movs	r6, #7
    1682:	e783      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1684:	2701      	movs	r7, #1
        CMU = 7;
    1686:	2607      	movs	r6, #7
    1688:	e780      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    168a:	2702      	movs	r7, #2
        CMU = 7;
    168c:	2607      	movs	r6, #7
    168e:	e77d      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 7;
    1690:	2607      	movs	r6, #7
    1692:	e7b8      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    1694:	2700      	movs	r7, #0
        CMU = 8;
    1696:	2608      	movs	r6, #8
        break;
    1698:	e778      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    169a:	2701      	movs	r7, #1
        CMU = 8;
    169c:	2608      	movs	r6, #8
        break;
    169e:	e775      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16a0:	2702      	movs	r7, #2
        CMU = 8;
    16a2:	2608      	movs	r6, #8
        break;
    16a4:	e772      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 8;
    16a6:	2608      	movs	r6, #8
        break;
    16a8:	e7ad      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 2;
    16aa:	2702      	movs	r7, #2
        CMU = 9;
    16ac:	2609      	movs	r6, #9
    16ae:	e76d      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 9;
    16b0:	2609      	movs	r6, #9
    16b2:	e7a8      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    16b4:	2700      	movs	r7, #0
        CMU = 10;
    16b6:	260a      	movs	r6, #10
    16b8:	e768      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    16ba:	2701      	movs	r7, #1
        CMU = 10;
    16bc:	260a      	movs	r6, #10
    16be:	e765      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16c0:	2702      	movs	r7, #2
        CMU = 10;
    16c2:	260a      	movs	r6, #10
    16c4:	e762      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    16c6:	2700      	movs	r7, #0
        CMU = 11;
    16c8:	260b      	movs	r6, #11
    16ca:	e75f      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    16cc:	2701      	movs	r7, #1
        CMU = 11;
    16ce:	260b      	movs	r6, #11
    16d0:	e75c      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16d2:	2702      	movs	r7, #2
        CMU = 11;
    16d4:	260b      	movs	r6, #11
    16d6:	e759      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    16d8:	2700      	movs	r7, #0
        CMU = 12;
    16da:	260c      	movs	r6, #12
    16dc:	e756      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    16de:	2701      	movs	r7, #1
        CMU = 12;
    16e0:	260c      	movs	r6, #12
    16e2:	e753      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16e4:	2702      	movs	r7, #2
        CMU = 12;
    16e6:	260c      	movs	r6, #12
    16e8:	e750      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    16ea:	2700      	movs	r7, #0
        CMU = 13;
    16ec:	260d      	movs	r6, #13
    16ee:	e74d      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    16f0:	2701      	movs	r7, #1
        CMU = 13;
    16f2:	260d      	movs	r6, #13
    16f4:	e74a      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16f6:	2702      	movs	r7, #2
        CMU = 13;
    16f8:	260d      	movs	r6, #13
    16fa:	e747      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    16fc:	2700      	movs	r7, #0
        CMU = 14;
    16fe:	260e      	movs	r6, #14
    1700:	e744      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1702:	2701      	movs	r7, #1
        CMU = 14;
    1704:	260e      	movs	r6, #14
    1706:	e741      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    1708:	2702      	movs	r7, #2
        CMU = 14;
    170a:	260e      	movs	r6, #14
    170c:	e73e      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    170e:	2700      	movs	r7, #0
        CMU = 15;
    1710:	260f      	movs	r6, #15
    1712:	e73b      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1714:	2701      	movs	r7, #1
        CMU = 15;
    1716:	260f      	movs	r6, #15
    1718:	e738      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    171a:	2702      	movs	r7, #2
        CMU = 15;
    171c:	260f      	movs	r6, #15
    171e:	e735      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    1720:	2700      	movs	r7, #0
        CMU = 16;
    1722:	2610      	movs	r6, #16
    1724:	e732      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1726:	2701      	movs	r7, #1
        CMU = 16;
    1728:	2610      	movs	r6, #16
    172a:	e72f      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 2;
    172c:	2602      	movs	r6, #2
    172e:	e76a      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    1730:	2700      	movs	r7, #0
        CMU = 9;
    1732:	2609      	movs	r6, #9
    1734:	e72a      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
    switch (msg.id)
    1736:	2601      	movs	r6, #1
    1738:	e765      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
    173a:	2701      	movs	r7, #1
    173c:	2609      	movs	r6, #9
    173e:	e725      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
            Serial.println();
    1740:	4815      	ldr	r0, [pc, #84]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    1742:	9201      	str	r2, [sp, #4]
    1744:	f008 f814 	bl	9770 <Print::println()>
    1748:	4631      	mov	r1, r6
    174a:	4813      	ldr	r0, [pc, #76]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    174c:	f008 f808 	bl	9760 <Print::print(long)>
    1750:	9a01      	ldr	r2, [sp, #4]
    1752:	4812      	ldr	r0, [pc, #72]	; (179c <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b8>)
    1754:	4611      	mov	r1, r2
    1756:	f00a fd5b 	bl	c210 <usb_serial_write>
    175a:	2103      	movs	r1, #3
    175c:	480e      	ldr	r0, [pc, #56]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    175e:	f007 ffff 	bl	9760 <Print::print(long)>
    1762:	2103      	movs	r1, #3
    1764:	480e      	ldr	r0, [pc, #56]	; (17a0 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2bc>)
    1766:	f00a fd53 	bl	c210 <usb_serial_write>
    176a:	e752      	b.n	1612 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x12e>
            Serial.println();
    176c:	480a      	ldr	r0, [pc, #40]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    176e:	9201      	str	r2, [sp, #4]
    1770:	f007 fffe 	bl	9770 <Print::println()>
    1774:	4631      	mov	r1, r6
    1776:	4808      	ldr	r0, [pc, #32]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    1778:	f007 fff2 	bl	9760 <Print::print(long)>
    177c:	9a01      	ldr	r2, [sp, #4]
    177e:	4807      	ldr	r0, [pc, #28]	; (179c <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b8>)
    1780:	4611      	mov	r1, r2
    1782:	f00a fd45 	bl	c210 <usb_serial_write>
    1786:	4639      	mov	r1, r7
    1788:	4803      	ldr	r0, [pc, #12]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    178a:	f007 ffe9 	bl	9760 <Print::print(long)>
    178e:	2103      	movs	r1, #3
    1790:	4803      	ldr	r0, [pc, #12]	; (17a0 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2bc>)
    1792:	f00a fd3d 	bl	c210 <usb_serial_write>
    1796:	e705      	b.n	15a4 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xc0>
    1798:	1fff89fc 	.word	0x1fff89fc
    179c:	00013d5c 	.word	0x00013d5c
    17a0:	00013d38 	.word	0x00013d38

000017a4 <BMSModuleManager::getAllVoltTemp()>:
{
    17a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  packVolt = 0.0f;
    17a8:	2300      	movs	r3, #0
      Logger::debug("");
    17aa:	f8df 9164 	ldr.w	r9, [pc, #356]	; 1910 <BMSModuleManager::getAllVoltTemp()+0x16c>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
    17ae:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1914 <BMSModuleManager::getAllVoltTemp()+0x170>
      Logger::debug("Module voltage: %f", modules[x].getModuleVoltage());
    17b2:	4f59      	ldr	r7, [pc, #356]	; (1918 <BMSModuleManager::getAllVoltTemp()+0x174>)
  packVolt = 0.0f;
    17b4:	6003      	str	r3, [r0, #0]
{
    17b6:	b083      	sub	sp, #12
    17b8:	4606      	mov	r6, r0
    17ba:	f500 7492 	add.w	r4, r0, #292	; 0x124
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    17be:	2501      	movs	r5, #1
    17c0:	e004      	b.n	17cc <BMSModuleManager::getAllVoltTemp()+0x28>
    17c2:	3501      	adds	r5, #1
    17c4:	2d3f      	cmp	r5, #63	; 0x3f
    17c6:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
    17ca:	d068      	beq.n	189e <BMSModuleManager::getAllVoltTemp()+0xfa>
    if (modules[x].isExisting())
    17cc:	4620      	mov	r0, r4
    17ce:	f7ff fa83 	bl	cd8 <BMSModule::isExisting()>
    17d2:	2800      	cmp	r0, #0
    17d4:	d0f5      	beq.n	17c2 <BMSModuleManager::getAllVoltTemp()+0x1e>
      Logger::debug("");
    17d6:	4648      	mov	r0, r9
    17d8:	f000 fd84 	bl	22e4 <Logger::debug(char*, ...)>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
    17dc:	4629      	mov	r1, r5
    17de:	4640      	mov	r0, r8
    17e0:	f000 fd80 	bl	22e4 <Logger::debug(char*, ...)>
      Logger::debug("Module voltage: %f", modules[x].getModuleVoltage());
    17e4:	4620      	mov	r0, r4
    17e6:	f7ff fa39 	bl	c5c <BMSModule::getModuleVoltage()>
    17ea:	f00b f9cd 	bl	cb88 <__aeabi_f2d>
    17ee:	4602      	mov	r2, r0
    17f0:	460b      	mov	r3, r1
    17f2:	4638      	mov	r0, r7
    17f4:	f000 fd76 	bl	22e4 <Logger::debug(char*, ...)>
      Logger::debug("Lowest Cell V: %f     Highest Cell V: %f", modules[x].getLowCellV(), modules[x].getHighCellV());
    17f8:	4620      	mov	r0, r4
    17fa:	f7fe fef3 	bl	5e4 <BMSModule::getLowCellV()>
    17fe:	4682      	mov	sl, r0
    1800:	4620      	mov	r0, r4
    1802:	f7fe ff0d 	bl	620 <BMSModule::getHighCellV()>
    1806:	4683      	mov	fp, r0
    1808:	4650      	mov	r0, sl
    180a:	f00b f9bd 	bl	cb88 <__aeabi_f2d>
    180e:	4602      	mov	r2, r0
    1810:	4658      	mov	r0, fp
    1812:	4692      	mov	sl, r2
    1814:	468b      	mov	fp, r1
    1816:	f00b f9b7 	bl	cb88 <__aeabi_f2d>
    181a:	465b      	mov	r3, fp
    181c:	4652      	mov	r2, sl
    181e:	e9cd 0100 	strd	r0, r1, [sp]
    1822:	483e      	ldr	r0, [pc, #248]	; (191c <BMSModuleManager::getAllVoltTemp()+0x178>)
    1824:	f000 fd5e 	bl	22e4 <Logger::debug(char*, ...)>
      Logger::debug("Temp1: %f       Temp2: %f", modules[x].getTemperature(0), modules[x].getTemperature(1));
    1828:	2100      	movs	r1, #0
    182a:	4620      	mov	r0, r4
    182c:	f7ff fa3e 	bl	cac <BMSModule::getTemperature(int)>
    1830:	2101      	movs	r1, #1
    1832:	4682      	mov	sl, r0
    1834:	4620      	mov	r0, r4
    1836:	f7ff fa39 	bl	cac <BMSModule::getTemperature(int)>
    183a:	4683      	mov	fp, r0
    183c:	4650      	mov	r0, sl
    183e:	f00b f9a3 	bl	cb88 <__aeabi_f2d>
    1842:	4602      	mov	r2, r0
    1844:	4658      	mov	r0, fp
    1846:	4692      	mov	sl, r2
    1848:	468b      	mov	fp, r1
    184a:	f00b f99d 	bl	cb88 <__aeabi_f2d>
    184e:	4652      	mov	r2, sl
    1850:	e9cd 0100 	strd	r0, r1, [sp]
    1854:	465b      	mov	r3, fp
    1856:	4832      	ldr	r0, [pc, #200]	; (1920 <BMSModuleManager::getAllVoltTemp()+0x17c>)
    1858:	f000 fd44 	bl	22e4 <Logger::debug(char*, ...)>
      packVolt += modules[x].getModuleVoltage();
    185c:	4620      	mov	r0, r4
    185e:	f7ff f9fd 	bl	c5c <BMSModule::getModuleVoltage()>
    1862:	4601      	mov	r1, r0
    1864:	6830      	ldr	r0, [r6, #0]
    1866:	f00b faab 	bl	cdc0 <__addsf3>
    186a:	6030      	str	r0, [r6, #0]
      if (modules[x].getLowTemp() < lowestPackTemp) lowestPackTemp = modules[x].getLowTemp();
    186c:	4620      	mov	r0, r4
    186e:	f7ff f831 	bl	8d4 <BMSModule::getLowTemp()>
    1872:	69b1      	ldr	r1, [r6, #24]
    1874:	f00b fd4a 	bl	d30c <__aeabi_fcmplt>
    1878:	2800      	cmp	r0, #0
    187a:	d133      	bne.n	18e4 <BMSModuleManager::getAllVoltTemp()+0x140>
      if (modules[x].getHighTemp() > highestPackTemp) highestPackTemp = modules[x].getHighTemp();
    187c:	4620      	mov	r0, r4
    187e:	f7fe ff2f 	bl	6e0 <BMSModule::getHighTemp()>
    1882:	69f1      	ldr	r1, [r6, #28]
    1884:	f00b fd60 	bl	d348 <__aeabi_fcmpgt>
    1888:	2800      	cmp	r0, #0
    188a:	d09a      	beq.n	17c2 <BMSModuleManager::getAllVoltTemp()+0x1e>
    188c:	4620      	mov	r0, r4
    188e:	f7fe ff27 	bl	6e0 <BMSModule::getHighTemp()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1892:	3501      	adds	r5, #1
    1894:	2d3f      	cmp	r5, #63	; 0x3f
      if (modules[x].getHighTemp() > highestPackTemp) highestPackTemp = modules[x].getHighTemp();
    1896:	61f0      	str	r0, [r6, #28]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1898:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
    189c:	d196      	bne.n	17cc <BMSModuleManager::getAllVoltTemp()+0x28>
  packVolt = packVolt / Pstring;
    189e:	6870      	ldr	r0, [r6, #4]
    18a0:	f00b fb42 	bl	cf28 <__aeabi_i2f>
    18a4:	4601      	mov	r1, r0
    18a6:	6830      	ldr	r0, [r6, #0]
    18a8:	f00b fc46 	bl	d138 <__aeabi_fdiv>
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
    18ac:	6971      	ldr	r1, [r6, #20]
  packVolt = packVolt / Pstring;
    18ae:	6030      	str	r0, [r6, #0]
    18b0:	4604      	mov	r4, r0
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
    18b2:	f00b fd49 	bl	d348 <__aeabi_fcmpgt>
    18b6:	b100      	cbz	r0, 18ba <BMSModuleManager::getAllVoltTemp()+0x116>
    18b8:	6174      	str	r4, [r6, #20]
  if (packVolt < lowestPackVolt) lowestPackVolt = packVolt;
    18ba:	6931      	ldr	r1, [r6, #16]
    18bc:	4620      	mov	r0, r4
    18be:	f00b fd25 	bl	d30c <__aeabi_fcmplt>
    18c2:	b100      	cbz	r0, 18c6 <BMSModuleManager::getAllVoltTemp()+0x122>
    18c4:	6134      	str	r4, [r6, #16]
  if (digitalRead(11) == LOW) {
    18c6:	200b      	movs	r0, #11
    18c8:	f008 fe54 	bl	a574 <digitalRead>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    18cc:	f506 5640 	add.w	r6, r6, #12288	; 0x3000
    18d0:	f896 3d3c 	ldrb.w	r3, [r6, #3388]	; 0xd3c
  if (digitalRead(11) == LOW) {
    18d4:	b958      	cbnz	r0, 18ee <BMSModuleManager::getAllVoltTemp()+0x14a>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    18d6:	b1b3      	cbz	r3, 1906 <BMSModuleManager::getAllVoltTemp()+0x162>
    isFaulted = true;
    18d8:	2301      	movs	r3, #1
    18da:	f886 3d3c 	strb.w	r3, [r6, #3388]	; 0xd3c
}
    18de:	b003      	add	sp, #12
    18e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (modules[x].getLowTemp() < lowestPackTemp) lowestPackTemp = modules[x].getLowTemp();
    18e4:	4620      	mov	r0, r4
    18e6:	f7fe fff5 	bl	8d4 <BMSModule::getLowTemp()>
    18ea:	61b0      	str	r0, [r6, #24]
    18ec:	e7c6      	b.n	187c <BMSModuleManager::getAllVoltTemp()+0xd8>
    if (isFaulted) Logger::info("All modules have exited a faulted state");
    18ee:	b92b      	cbnz	r3, 18fc <BMSModuleManager::getAllVoltTemp()+0x158>
    isFaulted = false;
    18f0:	2300      	movs	r3, #0
    isFaulted = true;
    18f2:	f886 3d3c 	strb.w	r3, [r6, #3388]	; 0xd3c
}
    18f6:	b003      	add	sp, #12
    18f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (isFaulted) Logger::info("All modules have exited a faulted state");
    18fc:	4809      	ldr	r0, [pc, #36]	; (1924 <BMSModuleManager::getAllVoltTemp()+0x180>)
    18fe:	f000 fd03 	bl	2308 <Logger::info(char*, ...)>
    isFaulted = false;
    1902:	2300      	movs	r3, #0
    1904:	e7f5      	b.n	18f2 <BMSModuleManager::getAllVoltTemp()+0x14e>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    1906:	4808      	ldr	r0, [pc, #32]	; (1928 <BMSModuleManager::getAllVoltTemp()+0x184>)
    1908:	f000 fd12 	bl	2330 <Logger::error(char*, ...)>
    190c:	e7e4      	b.n	18d8 <BMSModuleManager::getAllVoltTemp()+0x134>
    190e:	bf00      	nop
    1910:	000143c4 	.word	0x000143c4
    1914:	00013d60 	.word	0x00013d60
    1918:	00013d9c 	.word	0x00013d9c
    191c:	00013db0 	.word	0x00013db0
    1920:	00013ddc 	.word	0x00013ddc
    1924:	00013e30 	.word	0x00013e30
    1928:	00013df8 	.word	0x00013df8

0000192c <BMSModuleManager::getLowCellVolt()>:
{
    192c:	b570      	push	{r4, r5, r6, lr}
  LowCellVolt = 5.0;
    192e:	4b11      	ldr	r3, [pc, #68]	; (1974 <BMSModuleManager::getLowCellVolt()+0x48>)
    1930:	6083      	str	r3, [r0, #8]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1932:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
{
    1936:	4606      	mov	r6, r0
    1938:	f500 7492 	add.w	r4, r0, #292	; 0x124
    193c:	3534      	adds	r5, #52	; 0x34
    193e:	e002      	b.n	1946 <BMSModuleManager::getLowCellVolt()+0x1a>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1940:	34f8      	adds	r4, #248	; 0xf8
    1942:	42ac      	cmp	r4, r5
    1944:	d013      	beq.n	196e <BMSModuleManager::getLowCellVolt()+0x42>
    if (modules[x].isExisting())
    1946:	4620      	mov	r0, r4
    1948:	f7ff f9c6 	bl	cd8 <BMSModule::isExisting()>
    194c:	2800      	cmp	r0, #0
    194e:	d0f7      	beq.n	1940 <BMSModuleManager::getLowCellVolt()+0x14>
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
    1950:	4620      	mov	r0, r4
    1952:	f7fe fe47 	bl	5e4 <BMSModule::getLowCellV()>
    1956:	68b1      	ldr	r1, [r6, #8]
    1958:	f00b fcd8 	bl	d30c <__aeabi_fcmplt>
    195c:	2800      	cmp	r0, #0
    195e:	d0ef      	beq.n	1940 <BMSModuleManager::getLowCellVolt()+0x14>
    1960:	4620      	mov	r0, r4
    1962:	f7fe fe3f 	bl	5e4 <BMSModule::getLowCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1966:	34f8      	adds	r4, #248	; 0xf8
    1968:	42ac      	cmp	r4, r5
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
    196a:	60b0      	str	r0, [r6, #8]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    196c:	d1eb      	bne.n	1946 <BMSModuleManager::getLowCellVolt()+0x1a>
}
    196e:	68b0      	ldr	r0, [r6, #8]
    1970:	bd70      	pop	{r4, r5, r6, pc}
    1972:	bf00      	nop
    1974:	40a00000 	.word	0x40a00000

00001978 <BMSModuleManager::getHighCellVolt()>:
{
    1978:	b570      	push	{r4, r5, r6, lr}
  HighCellVolt = 0.0;
    197a:	2300      	movs	r3, #0
    197c:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
{
    1980:	4606      	mov	r6, r0
  HighCellVolt = 0.0;
    1982:	60c3      	str	r3, [r0, #12]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1984:	f500 7492 	add.w	r4, r0, #292	; 0x124
    1988:	3534      	adds	r5, #52	; 0x34
    198a:	e002      	b.n	1992 <BMSModuleManager::getHighCellVolt()+0x1a>
    198c:	34f8      	adds	r4, #248	; 0xf8
    198e:	42ac      	cmp	r4, r5
    1990:	d013      	beq.n	19ba <BMSModuleManager::getHighCellVolt()+0x42>
    if (modules[x].isExisting())
    1992:	4620      	mov	r0, r4
    1994:	f7ff f9a0 	bl	cd8 <BMSModule::isExisting()>
    1998:	2800      	cmp	r0, #0
    199a:	d0f7      	beq.n	198c <BMSModuleManager::getHighCellVolt()+0x14>
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
    199c:	4620      	mov	r0, r4
    199e:	f7fe fe3f 	bl	620 <BMSModule::getHighCellV()>
    19a2:	68f1      	ldr	r1, [r6, #12]
    19a4:	f00b fcd0 	bl	d348 <__aeabi_fcmpgt>
    19a8:	2800      	cmp	r0, #0
    19aa:	d0ef      	beq.n	198c <BMSModuleManager::getHighCellVolt()+0x14>
    19ac:	4620      	mov	r0, r4
    19ae:	f7fe fe37 	bl	620 <BMSModule::getHighCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    19b2:	34f8      	adds	r4, #248	; 0xf8
    19b4:	42ac      	cmp	r4, r5
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
    19b6:	60f0      	str	r0, [r6, #12]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    19b8:	d1eb      	bne.n	1992 <BMSModuleManager::getHighCellVolt()+0x1a>
}
    19ba:	68f0      	ldr	r0, [r6, #12]
    19bc:	bd70      	pop	{r4, r5, r6, pc}
    19be:	bf00      	nop

000019c0 <BMSModuleManager::getPackVoltage()>:
}
    19c0:	6800      	ldr	r0, [r0, #0]
    19c2:	4770      	bx	lr

000019c4 <BMSModuleManager::getNumModules()>:
  return numFoundModules;
    19c4:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
}
    19c8:	f8d0 0d38 	ldr.w	r0, [r0, #3384]	; 0xd38
    19cc:	4770      	bx	lr
    19ce:	bf00      	nop

000019d0 <BMSModuleManager::setPstrings(int)>:
  Pstring = Pstrings;
    19d0:	6041      	str	r1, [r0, #4]
}
    19d2:	4770      	bx	lr

000019d4 <BMSModuleManager::setSensors(int, float, float)>:
{
    19d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    19d8:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
    19dc:	4688      	mov	r8, r1
    19de:	4617      	mov	r7, r2
    19e0:	461e      	mov	r6, r3
    19e2:	f500 7492 	add.w	r4, r0, #292	; 0x124
    19e6:	3534      	adds	r5, #52	; 0x34
    19e8:	e002      	b.n	19f0 <BMSModuleManager::setSensors(int, float, float)+0x1c>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    19ea:	34f8      	adds	r4, #248	; 0xf8
    19ec:	42ac      	cmp	r4, r5
    19ee:	d013      	beq.n	1a18 <BMSModuleManager::setSensors(int, float, float)+0x44>
    if (modules[x].isExisting())
    19f0:	4620      	mov	r0, r4
    19f2:	f7ff f971 	bl	cd8 <BMSModule::isExisting()>
    19f6:	2800      	cmp	r0, #0
    19f8:	d0f7      	beq.n	19ea <BMSModuleManager::setSensors(int, float, float)+0x16>
      modules[x].settempsensor(sensor);
    19fa:	4620      	mov	r0, r4
    19fc:	4641      	mov	r1, r8
    19fe:	f7ff f973 	bl	ce8 <BMSModule::settempsensor(int)>
      modules[x].setIgnoreCell(Ignore);
    1a02:	4620      	mov	r0, r4
    1a04:	4639      	mov	r1, r7
    1a06:	f7ff f97f 	bl	d08 <BMSModule::setIgnoreCell(float)>
      modules[x].setDelta(VoltDelta);
    1a0a:	4620      	mov	r0, r4
    1a0c:	4631      	mov	r1, r6
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a0e:	34f8      	adds	r4, #248	; 0xf8
      modules[x].setDelta(VoltDelta);
    1a10:	f7ff f972 	bl	cf8 <BMSModule::setDelta(float)>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a14:	42ac      	cmp	r4, r5
    1a16:	d1eb      	bne.n	19f0 <BMSModuleManager::setSensors(int, float, float)+0x1c>
}
    1a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001a1c <BMSModuleManager::getAvgTemperature()>:
{
    1a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  lowTemp = 999.0f;
    1a20:	4a2a      	ldr	r2, [pc, #168]	; (1acc <BMSModuleManager::getAvgTemperature()+0xb0>)
  highTemp = -999.0f;
    1a22:	4b2b      	ldr	r3, [pc, #172]	; (1ad0 <BMSModuleManager::getAvgTemperature()+0xb4>)
      if (modules[x].getAvgTemp() > -70)
    1a24:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1ad4 <BMSModuleManager::getAvgTemperature()+0xb8>
  lowTemp = 999.0f;
    1a28:	6242      	str	r2, [r0, #36]	; 0x24
  highTemp = -999.0f;
    1a2a:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
{
    1a2e:	4680      	mov	r8, r0
  highTemp = -999.0f;
    1a30:	6203      	str	r3, [r0, #32]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a32:	f500 7492 	add.w	r4, r0, #292	; 0x124
    1a36:	3534      	adds	r5, #52	; 0x34
  int y = 0; //counter for modules below -70 (no sensors connected)
    1a38:	2600      	movs	r6, #0
  float avg = 0.0f;
    1a3a:	2700      	movs	r7, #0
    1a3c:	e002      	b.n	1a44 <BMSModuleManager::getAvgTemperature()+0x28>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a3e:	34f8      	adds	r4, #248	; 0xf8
    1a40:	42a5      	cmp	r5, r4
    1a42:	d010      	beq.n	1a66 <BMSModuleManager::getAvgTemperature()+0x4a>
    if (modules[x].isExisting())
    1a44:	4620      	mov	r0, r4
    1a46:	f7ff f947 	bl	cd8 <BMSModule::isExisting()>
    1a4a:	2800      	cmp	r0, #0
    1a4c:	d0f7      	beq.n	1a3e <BMSModuleManager::getAvgTemperature()+0x22>
      if (modules[x].getAvgTemp() > -70)
    1a4e:	4620      	mov	r0, r4
    1a50:	f7fe fe64 	bl	71c <BMSModule::getAvgTemp()>
    1a54:	4649      	mov	r1, r9
    1a56:	f00b fc77 	bl	d348 <__aeabi_fcmpgt>
    1a5a:	b988      	cbnz	r0, 1a80 <BMSModuleManager::getAvgTemperature()+0x64>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a5c:	34f8      	adds	r4, #248	; 0xf8
    1a5e:	42a5      	cmp	r5, r4
        y++;
    1a60:	f106 0601 	add.w	r6, r6, #1
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a64:	d1ee      	bne.n	1a44 <BMSModuleManager::getAvgTemperature()+0x28>
  avg = avg / (float)(numFoundModules - y);
    1a66:	f508 5840 	add.w	r8, r8, #12288	; 0x3000
    1a6a:	f8d8 0d38 	ldr.w	r0, [r8, #3384]	; 0xd38
    1a6e:	1b80      	subs	r0, r0, r6
    1a70:	f00b fa5a 	bl	cf28 <__aeabi_i2f>
    1a74:	4601      	mov	r1, r0
    1a76:	4638      	mov	r0, r7
    1a78:	f00b fb5e 	bl	d138 <__aeabi_fdiv>
}
    1a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        avg += modules[x].getAvgTemp();
    1a80:	4620      	mov	r0, r4
    1a82:	f7fe fe4b 	bl	71c <BMSModule::getAvgTemp()>
    1a86:	4601      	mov	r1, r0
    1a88:	4638      	mov	r0, r7
    1a8a:	f00b f999 	bl	cdc0 <__addsf3>
    1a8e:	4607      	mov	r7, r0
        if (modules[x].getHighTemp() > highTemp)
    1a90:	4620      	mov	r0, r4
    1a92:	f7fe fe25 	bl	6e0 <BMSModule::getHighTemp()>
    1a96:	f8d8 1020 	ldr.w	r1, [r8, #32]
    1a9a:	f00b fc55 	bl	d348 <__aeabi_fcmpgt>
    1a9e:	b970      	cbnz	r0, 1abe <BMSModuleManager::getAvgTemperature()+0xa2>
        if (modules[x].getLowTemp() < lowTemp)
    1aa0:	4620      	mov	r0, r4
    1aa2:	f7fe ff17 	bl	8d4 <BMSModule::getLowTemp()>
    1aa6:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    1aaa:	f00b fc2f 	bl	d30c <__aeabi_fcmplt>
    1aae:	2800      	cmp	r0, #0
    1ab0:	d0c5      	beq.n	1a3e <BMSModuleManager::getAvgTemperature()+0x22>
          lowTemp = modules[x].getLowTemp();
    1ab2:	4620      	mov	r0, r4
    1ab4:	f7fe ff0e 	bl	8d4 <BMSModule::getLowTemp()>
    1ab8:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    1abc:	e7bf      	b.n	1a3e <BMSModuleManager::getAvgTemperature()+0x22>
          highTemp = modules[x].getHighTemp();
    1abe:	4620      	mov	r0, r4
    1ac0:	f7fe fe0e 	bl	6e0 <BMSModule::getHighTemp()>
    1ac4:	f8c8 0020 	str.w	r0, [r8, #32]
    1ac8:	e7ea      	b.n	1aa0 <BMSModuleManager::getAvgTemperature()+0x84>
    1aca:	bf00      	nop
    1acc:	4479c000 	.word	0x4479c000
    1ad0:	c479c000 	.word	0xc479c000
    1ad4:	c28c0000 	.word	0xc28c0000

00001ad8 <BMSModuleManager::getHighTemperature()>:
}
    1ad8:	6a00      	ldr	r0, [r0, #32]
    1ada:	4770      	bx	lr

00001adc <BMSModuleManager::getLowTemperature()>:
}
    1adc:	6a40      	ldr	r0, [r0, #36]	; 0x24
    1ade:	4770      	bx	lr

00001ae0 <BMSModuleManager::getAvgCellVolt()>:
{
    1ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  numFoundModules = 0;
    1ae4:	f500 5840 	add.w	r8, r0, #12288	; 0x3000
  float avg = 0.0f;
    1ae8:	2600      	movs	r6, #0
  numFoundModules = 0;
    1aea:	2300      	movs	r3, #0
    1aec:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
    1af0:	f8c8 3d38 	str.w	r3, [r8, #3384]	; 0xd38
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1af4:	f500 7492 	add.w	r4, r0, #292	; 0x124
    1af8:	3534      	adds	r5, #52	; 0x34
      if (modules[x].getAverageV() > 0)
    1afa:	4637      	mov	r7, r6
    1afc:	e002      	b.n	1b04 <BMSModuleManager::getAvgCellVolt()+0x24>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1afe:	34f8      	adds	r4, #248	; 0xf8
    1b00:	42ac      	cmp	r4, r5
    1b02:	d01d      	beq.n	1b40 <BMSModuleManager::getAvgCellVolt()+0x60>
    if (modules[x].isExisting())
    1b04:	4620      	mov	r0, r4
    1b06:	f7ff f8e7 	bl	cd8 <BMSModule::isExisting()>
    1b0a:	2800      	cmp	r0, #0
    1b0c:	d0f7      	beq.n	1afe <BMSModuleManager::getAvgCellVolt()+0x1e>
      if (modules[x].getAverageV() > 0)
    1b0e:	4620      	mov	r0, r4
    1b10:	f7fe fdac 	bl	66c <BMSModule::getAverageV()>
    1b14:	4639      	mov	r1, r7
    1b16:	f00b fc17 	bl	d348 <__aeabi_fcmpgt>
    1b1a:	4603      	mov	r3, r0
        avg += modules[x].getAverageV();
    1b1c:	4620      	mov	r0, r4
      if (modules[x].getAverageV() > 0)
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d0ed      	beq.n	1afe <BMSModuleManager::getAvgCellVolt()+0x1e>
        avg += modules[x].getAverageV();
    1b22:	f7fe fda3 	bl	66c <BMSModule::getAverageV()>
    1b26:	4601      	mov	r1, r0
    1b28:	4630      	mov	r0, r6
    1b2a:	f00b f949 	bl	cdc0 <__addsf3>
        numFoundModules++;
    1b2e:	f8d8 3d38 	ldr.w	r3, [r8, #3384]	; 0xd38
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1b32:	34f8      	adds	r4, #248	; 0xf8
        numFoundModules++;
    1b34:	3301      	adds	r3, #1
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1b36:	42ac      	cmp	r4, r5
        avg += modules[x].getAverageV();
    1b38:	4606      	mov	r6, r0
        numFoundModules++;
    1b3a:	f8c8 3d38 	str.w	r3, [r8, #3384]	; 0xd38
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1b3e:	d1e1      	bne.n	1b04 <BMSModuleManager::getAvgCellVolt()+0x24>
  avg = avg / (float)numFoundModules;
    1b40:	f8d8 0d38 	ldr.w	r0, [r8, #3384]	; 0xd38
    1b44:	f00b f9f0 	bl	cf28 <__aeabi_i2f>
    1b48:	4601      	mov	r1, r0
    1b4a:	4630      	mov	r0, r6
    1b4c:	f00b faf4 	bl	d138 <__aeabi_fdiv>
}
    1b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001b54 <BMSModuleManager::printPackDetails(int)>:
    }
  }
}

void BMSModuleManager::printPackDetails(int digits)
{
    1b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b58:	b091      	sub	sp, #68	; 0x44
    1b5a:	4604      	mov	r4, r0
  uint8_t alerts;
  uint8_t COV;
  uint8_t CUV;
  int cellNum = 0;

  Logger::console("");
    1b5c:	48a4      	ldr	r0, [pc, #656]	; (1df0 <BMSModuleManager::printPackDetails(int)+0x29c>)
{
    1b5e:	910e      	str	r1, [sp, #56]	; 0x38
  Logger::console("");
    1b60:	f000 fb66 	bl	2230 <Logger::console(char*, ...)>
  Logger::console("");
    1b64:	48a2      	ldr	r0, [pc, #648]	; (1df0 <BMSModuleManager::printPackDetails(int)+0x29c>)
    1b66:	f000 fb63 	bl	2230 <Logger::console(char*, ...)>
  Logger::console("");
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1b6a:	f504 5840 	add.w	r8, r4, #12288	; 0x3000
  Logger::console("");
    1b6e:	48a0      	ldr	r0, [pc, #640]	; (1df0 <BMSModuleManager::printPackDetails(int)+0x29c>)
    1b70:	f504 5774 	add.w	r7, r4, #15616	; 0x3d00
    1b74:	f000 fb5c 	bl	2230 <Logger::console(char*, ...)>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1b78:	f504 7592 	add.w	r5, r4, #292	; 0x124
  spack = 0;
    1b7c:	2300      	movs	r3, #0
    1b7e:	3734      	adds	r7, #52	; 0x34
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1b80:	f8d8 bd38 	ldr.w	fp, [r8, #3384]	; 0xd38
  spack = 0;
    1b84:	f8c8 3d40 	str.w	r3, [r8, #3392]	; 0xd40
    1b88:	462e      	mov	r6, r5
    1b8a:	46b9      	mov	r9, r7
    1b8c:	e002      	b.n	1b94 <BMSModuleManager::printPackDetails(int)+0x40>
  for (int y = 1; y < 63; y++)
    1b8e:	36f8      	adds	r6, #248	; 0xf8
    1b90:	45b1      	cmp	r9, r6
    1b92:	d00f      	beq.n	1bb4 <BMSModuleManager::printPackDetails(int)+0x60>
    if (modules[y].isExisting())
    1b94:	4630      	mov	r0, r6
    1b96:	f7ff f89f 	bl	cd8 <BMSModule::isExisting()>
    1b9a:	2800      	cmp	r0, #0
    1b9c:	d0f7      	beq.n	1b8e <BMSModuleManager::printPackDetails(int)+0x3a>
      spack = spack + modules[y].getscells();
    1b9e:	4630      	mov	r0, r6
    1ba0:	f8d8 7d40 	ldr.w	r7, [r8, #3392]	; 0xd40
    1ba4:	f7fe fd98 	bl	6d8 <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
    1ba8:	36f8      	adds	r6, #248	; 0xf8
      spack = spack + modules[y].getscells();
    1baa:	4407      	add	r7, r0
  for (int y = 1; y < 63; y++)
    1bac:	45b1      	cmp	r9, r6
      spack = spack + modules[y].getscells();
    1bae:	f8c8 7d40 	str.w	r7, [r8, #3392]	; 0xd40
  for (int y = 1; y < 63; y++)
    1bb2:	d1ef      	bne.n	1b94 <BMSModuleManager::printPackDetails(int)+0x40>
  return spack;
    1bb4:	f8d8 2d40 	ldr.w	r2, [r8, #3392]	; 0xd40
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bb8:	6820      	ldr	r0, [r4, #0]
  return spack;
    1bba:	920f      	str	r2, [sp, #60]	; 0x3c
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bbc:	f00a ffe4 	bl	cb88 <__aeabi_f2d>
    1bc0:	6863      	ldr	r3, [r4, #4]
    1bc2:	930d      	str	r3, [sp, #52]	; 0x34
    1bc4:	4606      	mov	r6, r0
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1bc6:	4620      	mov	r0, r4
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bc8:	460f      	mov	r7, r1
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1bca:	f7ff ff89 	bl	1ae0 <BMSModuleManager::getAvgCellVolt()>
    1bce:	4680      	mov	r8, r0
    1bd0:	4620      	mov	r0, r4
    1bd2:	f8d4 9008 	ldr.w	r9, [r4, #8]
    1bd6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    1bda:	f7ff ff1f 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bde:	f00a ffd3 	bl	cb88 <__aeabi_f2d>
    1be2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1be6:	4649      	mov	r1, r9
    1be8:	4650      	mov	r0, sl
    1bea:	f00b f8e7 	bl	cdbc <__aeabi_fsub>
    1bee:	4981      	ldr	r1, [pc, #516]	; (1df4 <BMSModuleManager::printPackDetails(int)+0x2a0>)
    1bf0:	f00b f9ee 	bl	cfd0 <__aeabi_fmul>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bf4:	f00a ffc8 	bl	cb88 <__aeabi_f2d>
    1bf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
    1bfc:	4650      	mov	r0, sl
    1bfe:	f00a ffc3 	bl	cb88 <__aeabi_f2d>
    1c02:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1c06:	4648      	mov	r0, r9
    1c08:	f00a ffbe 	bl	cb88 <__aeabi_f2d>
    1c0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1c10:	4640      	mov	r0, r8
    1c12:	f00a ffb9 	bl	cb88 <__aeabi_f2d>
    1c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1c1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1c1e:	e9cd 6700 	strd	r6, r7, [sp]
    1c22:	4875      	ldr	r0, [pc, #468]	; (1df8 <BMSModuleManager::printPackDetails(int)+0x2a4>)
    1c24:	4e75      	ldr	r6, [pc, #468]	; (1dfc <BMSModuleManager::printPackDetails(int)+0x2a8>)
    1c26:	4659      	mov	r1, fp
    1c28:	f000 fb02 	bl	2230 <Logger::console(char*, ...)>
  Logger::console("");
    1c2c:	4870      	ldr	r0, [pc, #448]	; (1df0 <BMSModuleManager::printPackDetails(int)+0x29c>)
    1c2e:	f000 faff 	bl	2230 <Logger::console(char*, ...)>
  int cellNum = 0;
    1c32:	2300      	movs	r3, #0
  for (int y = 1; y < 63; y++)
    1c34:	f04f 0801 	mov.w	r8, #1
  int cellNum = 0;
    1c38:	930d      	str	r3, [sp, #52]	; 0x34
    1c3a:	e007      	b.n	1c4c <BMSModuleManager::printPackDetails(int)+0xf8>
  for (int y = 1; y < 63; y++)
    1c3c:	f108 0801 	add.w	r8, r8, #1
    1c40:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    1c44:	f105 05f8 	add.w	r5, r5, #248	; 0xf8
    1c48:	f000 809d 	beq.w	1d86 <BMSModuleManager::printPackDetails(int)+0x232>
  {
    if (modules[y].isExisting())
    1c4c:	4628      	mov	r0, r5
    1c4e:	f7ff f843 	bl	cd8 <BMSModule::isExisting()>
    1c52:	2800      	cmp	r0, #0
    1c54:	d0f2      	beq.n	1c3c <BMSModuleManager::printPackDetails(int)+0xe8>
    {
      faults = modules[y].getFaults();
    1c56:	4628      	mov	r0, r5
    1c58:	f7fe fcae 	bl	5b8 <BMSModule::getFaults()>
      alerts = modules[y].getAlerts();
    1c5c:	4628      	mov	r0, r5
    1c5e:	f7fe fcaf 	bl	5c0 <BMSModule::getAlerts()>
      COV = modules[y].getCOVCells();
    1c62:	4628      	mov	r0, r5
    1c64:	f7fe fcb0 	bl	5c8 <BMSModule::getCOVCells()>
      CUV = modules[y].getCUVCells();
    1c68:	4628      	mov	r0, r5
    1c6a:	f7fe fcb1 	bl	5d0 <BMSModule::getCUVCells()>
    1c6e:	2108      	movs	r1, #8
    1c70:	4863      	ldr	r0, [pc, #396]	; (1e00 <BMSModuleManager::printPackDetails(int)+0x2ac>)
    1c72:	f00a facd 	bl	c210 <usb_serial_write>
    1c76:	4641      	mov	r1, r8
    1c78:	4630      	mov	r0, r6
    1c7a:	f007 fd71 	bl	9760 <Print::print(long)>

      SERIALCONSOLE.print("Module #");
      SERIALCONSOLE.print(y);
      if (y < 10) SERIALCONSOLE.print(" ");
    1c7e:	f1b8 0f09 	cmp.w	r8, #9
    1c82:	f340 80b0 	ble.w	1de6 <BMSModuleManager::printPackDetails(int)+0x292>
    1c86:	2102      	movs	r1, #2
    1c88:	485e      	ldr	r0, [pc, #376]	; (1e04 <BMSModuleManager::printPackDetails(int)+0x2b0>)
    1c8a:	f8df a17c 	ldr.w	sl, [pc, #380]	; 1e08 <BMSModuleManager::printPackDetails(int)+0x2b4>
    1c8e:	f00a fabf 	bl	c210 <usb_serial_write>
      SERIALCONSOLE.print("  ");
      SERIALCONSOLE.print(modules[y].getModuleVoltage(), digits);
    1c92:	4628      	mov	r0, r5
    1c94:	f7fe ffe2 	bl	c5c <BMSModule::getModuleVoltage()>
    1c98:	f00a ff76 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1c9c:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    1ca0:	f8cd 9000 	str.w	r9, [sp]
    1ca4:	460b      	mov	r3, r1
    1ca6:	4602      	mov	r2, r0
    1ca8:	4630      	mov	r0, r6
    1caa:	f007 fd85 	bl	97b8 <Print::printFloat(double, unsigned char)>
    1cae:	4857      	ldr	r0, [pc, #348]	; (1e0c <BMSModuleManager::printPackDetails(int)+0x2b8>)
    1cb0:	2101      	movs	r1, #1
    1cb2:	f00a faad 	bl	c210 <usb_serial_write>
      SERIALCONSOLE.print("V");
      for (int i = 0; i < 13; i++)
    1cb6:	462b      	mov	r3, r5
    1cb8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    1cbc:	464d      	mov	r5, r9
    1cbe:	2400      	movs	r4, #0
    1cc0:	4699      	mov	r9, r3
    1cc2:	e01f      	b.n	1d04 <BMSModuleManager::printPackDetails(int)+0x1b0>
    1cc4:	2106      	movs	r1, #6
    1cc6:	4852      	ldr	r0, [pc, #328]	; (1e10 <BMSModuleManager::printPackDetails(int)+0x2bc>)
    1cc8:	f00a faa2 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1ccc:	4659      	mov	r1, fp
    1cce:	4630      	mov	r0, r6
    1cd0:	f007 fd46 	bl	9760 <Print::print(long)>
    1cd4:	2102      	movs	r1, #2
    1cd6:	484f      	ldr	r0, [pc, #316]	; (1e14 <BMSModuleManager::printPackDetails(int)+0x2c0>)
    1cd8:	f00a fa9a 	bl	c210 <usb_serial_write>
      {
        if (cellNum < 10) SERIALCONSOLE.print(" ");
        SERIALCONSOLE.print("  Cell");
        SERIALCONSOLE.print(cellNum++);
        SERIALCONSOLE.print(": ");
        SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    1cdc:	4621      	mov	r1, r4
    1cde:	4648      	mov	r0, r9
    1ce0:	f7fe fc7a 	bl	5d8 <BMSModule::getCellVoltage(int)>
    1ce4:	f00a ff50 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1ce8:	9500      	str	r5, [sp, #0]
    1cea:	4602      	mov	r2, r0
    1cec:	460b      	mov	r3, r1
    1cee:	4630      	mov	r0, r6
    1cf0:	f007 fd62 	bl	97b8 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 13; i++)
    1cf4:	3401      	adds	r4, #1
    1cf6:	4845      	ldr	r0, [pc, #276]	; (1e0c <BMSModuleManager::printPackDetails(int)+0x2b8>)
    1cf8:	2101      	movs	r1, #1
    1cfa:	f00a fa89 	bl	c210 <usb_serial_write>
    1cfe:	2c0d      	cmp	r4, #13
    1d00:	d00a      	beq.n	1d18 <BMSModuleManager::printPackDetails(int)+0x1c4>
        SERIALCONSOLE.print(cellNum++);
    1d02:	46bb      	mov	fp, r7
        if (cellNum < 10) SERIALCONSOLE.print(" ");
    1d04:	f1bb 0f09 	cmp.w	fp, #9
        SERIALCONSOLE.print(cellNum++);
    1d08:	f10b 0701 	add.w	r7, fp, #1
        if (cellNum < 10) SERIALCONSOLE.print(" ");
    1d0c:	dcda      	bgt.n	1cc4 <BMSModuleManager::printPackDetails(int)+0x170>
    1d0e:	2101      	movs	r1, #1
    1d10:	4650      	mov	r0, sl
    1d12:	f00a fa7d 	bl	c210 <usb_serial_write>
    1d16:	e7d5      	b.n	1cc4 <BMSModuleManager::printPackDetails(int)+0x170>
        SERIALCONSOLE.print("V");
      }
      SERIALCONSOLE.println();
    1d18:	4630      	mov	r0, r6
    1d1a:	f007 fd29 	bl	9770 <Print::println()>
      if (modules[y].getType() == 1)
    1d1e:	4648      	mov	r0, r9
    1d20:	f7fe ffd2 	bl	cc8 <BMSModule::getType()>
        SERIALCONSOLE.print(cellNum++);
    1d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      if (modules[y].getType() == 1)
    1d26:	4604      	mov	r4, r0
        SERIALCONSOLE.print(cellNum++);
    1d28:	330d      	adds	r3, #13
      if (modules[y].getType() == 1)
    1d2a:	2c01      	cmp	r4, #1
    1d2c:	483a      	ldr	r0, [pc, #232]	; (1e18 <BMSModuleManager::printPackDetails(int)+0x2c4>)
        SERIALCONSOLE.print(cellNum++);
    1d2e:	930d      	str	r3, [sp, #52]	; 0x34
      SERIALCONSOLE.println();
    1d30:	464d      	mov	r5, r9
    1d32:	f04f 0109 	mov.w	r1, #9
      if (modules[y].getType() == 1)
    1d36:	d029      	beq.n	1d8c <BMSModuleManager::printPackDetails(int)+0x238>
    1d38:	f00a fa6a 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.println(modules[y].getBalStat(), HEX);
      }
      else
      {
        SERIALCONSOLE.print(" Temp 1: ");
        SERIALCONSOLE.print(modules[y].getTemperature(0));
    1d3c:	2100      	movs	r1, #0
    1d3e:	4648      	mov	r0, r9
    1d40:	f7fe ffb4 	bl	cac <BMSModule::getTemperature(int)>
    1d44:	f00a ff20 	bl	cb88 <__aeabi_f2d>
    1d48:	460b      	mov	r3, r1
    1d4a:	2102      	movs	r1, #2
    1d4c:	4602      	mov	r2, r0
    1d4e:	9100      	str	r1, [sp, #0]
    1d50:	4630      	mov	r0, r6
    1d52:	f007 fd31 	bl	97b8 <Print::printFloat(double, unsigned char)>
    1d56:	210e      	movs	r1, #14
    1d58:	4830      	ldr	r0, [pc, #192]	; (1e1c <BMSModuleManager::printPackDetails(int)+0x2c8>)
    1d5a:	f00a fa59 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print("C | Bal Stat: ");
        SERIALCONSOLE.println(modules[y].getBalStat(), HEX);
    1d5e:	4628      	mov	r0, r5
    1d60:	f7fe ffb6 	bl	cd0 <BMSModule::getBalStat()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    1d64:	2300      	movs	r3, #0
    1d66:	4601      	mov	r1, r0
    1d68:	2210      	movs	r2, #16
    1d6a:	4630      	mov	r0, r6
    1d6c:	f007 fd18 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  for (int y = 1; y < 63; y++)
    1d70:	f108 0801 	add.w	r8, r8, #1
	size_t println(int n, int base)			{ return print(n, base) + println(); }
    1d74:	4630      	mov	r0, r6
    1d76:	f007 fcfb 	bl	9770 <Print::println()>
    1d7a:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    1d7e:	f105 05f8 	add.w	r5, r5, #248	; 0xf8
    1d82:	f47f af63 	bne.w	1c4c <BMSModuleManager::printPackDetails(int)+0xf8>
      }
    }
  }
}
    1d86:	b011      	add	sp, #68	; 0x44
    1d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d8c:	f00a fa40 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(modules[y].getTemperature(0));
    1d90:	2100      	movs	r1, #0
    1d92:	4648      	mov	r0, r9
    1d94:	f7fe ff8a 	bl	cac <BMSModule::getTemperature(int)>
    1d98:	f00a fef6 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1d9c:	2702      	movs	r7, #2
    1d9e:	4602      	mov	r2, r0
    1da0:	460b      	mov	r3, r1
    1da2:	9700      	str	r7, [sp, #0]
    1da4:	4630      	mov	r0, r6
    1da6:	f007 fd07 	bl	97b8 <Print::printFloat(double, unsigned char)>
    1daa:	210a      	movs	r1, #10
    1dac:	481c      	ldr	r0, [pc, #112]	; (1e20 <BMSModuleManager::printPackDetails(int)+0x2cc>)
    1dae:	f00a fa2f 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(modules[y].getTemperature(1));
    1db2:	4621      	mov	r1, r4
    1db4:	4648      	mov	r0, r9
    1db6:	f7fe ff79 	bl	cac <BMSModule::getTemperature(int)>
    1dba:	f00a fee5 	bl	cb88 <__aeabi_f2d>
    1dbe:	9700      	str	r7, [sp, #0]
    1dc0:	4602      	mov	r2, r0
    1dc2:	460b      	mov	r3, r1
    1dc4:	4630      	mov	r0, r6
    1dc6:	f007 fcf7 	bl	97b8 <Print::printFloat(double, unsigned char)>
    1dca:	210a      	movs	r1, #10
    1dcc:	4815      	ldr	r0, [pc, #84]	; (1e24 <BMSModuleManager::printPackDetails(int)+0x2d0>)
    1dce:	f00a fa1f 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(modules[y].getTemperature(2));
    1dd2:	4639      	mov	r1, r7
    1dd4:	4648      	mov	r0, r9
    1dd6:	f7fe ff69 	bl	cac <BMSModule::getTemperature(int)>
    1dda:	f00a fed5 	bl	cb88 <__aeabi_f2d>
    1dde:	9700      	str	r7, [sp, #0]
    1de0:	4602      	mov	r2, r0
    1de2:	460b      	mov	r3, r1
    1de4:	e7b4      	b.n	1d50 <BMSModuleManager::printPackDetails(int)+0x1fc>
    1de6:	2101      	movs	r1, #1
    1de8:	4807      	ldr	r0, [pc, #28]	; (1e08 <BMSModuleManager::printPackDetails(int)+0x2b4>)
    1dea:	f00a fa11 	bl	c210 <usb_serial_write>
    1dee:	e74a      	b.n	1c86 <BMSModuleManager::printPackDetails(int)+0x132>
    1df0:	000143c4 	.word	0x000143c4
    1df4:	447a0000 	.word	0x447a0000
    1df8:	000140e0 	.word	0x000140e0
    1dfc:	1fff89fc 	.word	0x1fff89fc
    1e00:	00014180 	.word	0x00014180
    1e04:	00015030 	.word	0x00015030
    1e08:	0001424c 	.word	0x0001424c
    1e0c:	0001418c 	.word	0x0001418c
    1e10:	00014190 	.word	0x00014190
    1e14:	0001423c 	.word	0x0001423c
    1e18:	00014198 	.word	0x00014198
    1e1c:	000141bc 	.word	0x000141bc
    1e20:	000141a4 	.word	0x000141a4
    1e24:	000141b0 	.word	0x000141b0

00001e28 <BMSModuleManager::printAllCSV(unsigned long, float, int)>:
void BMSModuleManager::printAllCSV(unsigned long timestamp, float current, int SOC)
{
    1e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e2c:	b087      	sub	sp, #28
    1e2e:	f500 7492 	add.w	r4, r0, #292	; 0x124
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1e32:	f8df 8248 	ldr.w	r8, [pc, #584]	; 207c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x254>
    1e36:	f8df 9248 	ldr.w	r9, [pc, #584]	; 2080 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x258>
    1e3a:	9103      	str	r1, [sp, #12]
    1e3c:	9204      	str	r2, [sp, #16]
    1e3e:	469b      	mov	fp, r3
    1e40:	4626      	mov	r6, r4
  for (int y = 1; y < 63; y++)
    1e42:	2701      	movs	r7, #1
    1e44:	9405      	str	r4, [sp, #20]
    1e46:	4692      	mov	sl, r2
    1e48:	e004      	b.n	1e54 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    1e4a:	3701      	adds	r7, #1
    1e4c:	2f3f      	cmp	r7, #63	; 0x3f
    1e4e:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
    1e52:	d075      	beq.n	1f40 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x118>
  {
    if (modules[y].isExisting())
    1e54:	4630      	mov	r0, r6
    1e56:	f7fe ff3f 	bl	cd8 <BMSModule::isExisting()>
    1e5a:	2800      	cmp	r0, #0
    1e5c:	d0f5      	beq.n	1e4a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x22>
    1e5e:	2300      	movs	r3, #0
    1e60:	220a      	movs	r2, #10
    1e62:	9903      	ldr	r1, [sp, #12]
    1e64:	4640      	mov	r0, r8
    1e66:	f007 fc9b 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1e6a:	2101      	movs	r1, #1
    1e6c:	4648      	mov	r0, r9
    1e6e:	f00a f9cf 	bl	c210 <usb_serial_write>
    {
      SERIALCONSOLE.print(timestamp);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(current, 0);
    1e72:	4650      	mov	r0, sl
    1e74:	f00a fe88 	bl	cb88 <__aeabi_f2d>
    1e78:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1e7a:	2100      	movs	r1, #0
    1e7c:	4602      	mov	r2, r0
    1e7e:	9100      	str	r1, [sp, #0]
    1e80:	4640      	mov	r0, r8
    1e82:	f007 fc99 	bl	97b8 <Print::printFloat(double, unsigned char)>
    1e86:	2101      	movs	r1, #1
    1e88:	4648      	mov	r0, r9
    1e8a:	f00a f9c1 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1e8e:	4659      	mov	r1, fp
    1e90:	4640      	mov	r0, r8
    1e92:	f007 fc65 	bl	9760 <Print::print(long)>
    1e96:	2101      	movs	r1, #1
    1e98:	4648      	mov	r0, r9
    1e9a:	f00a f9b9 	bl	c210 <usb_serial_write>
    1e9e:	4639      	mov	r1, r7
    1ea0:	4640      	mov	r0, r8
    1ea2:	f007 fc5d 	bl	9760 <Print::print(long)>
    1ea6:	2101      	movs	r1, #1
    1ea8:	4648      	mov	r0, r9
    1eaa:	f00a f9b1 	bl	c210 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(SOC);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(y);
      SERIALCONSOLE.print(",");
      for (int i = 0; i < 8; i++)
    1eae:	2400      	movs	r4, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1eb0:	2502      	movs	r5, #2
      {
        SERIALCONSOLE.print(modules[y].getCellVoltage(i));
    1eb2:	4621      	mov	r1, r4
    1eb4:	4630      	mov	r0, r6
    1eb6:	f7fe fb8f 	bl	5d8 <BMSModule::getCellVoltage(int)>
    1eba:	f00a fe65 	bl	cb88 <__aeabi_f2d>
    1ebe:	9500      	str	r5, [sp, #0]
    1ec0:	4602      	mov	r2, r0
    1ec2:	460b      	mov	r3, r1
    1ec4:	4640      	mov	r0, r8
    1ec6:	f007 fc77 	bl	97b8 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 8; i++)
    1eca:	3401      	adds	r4, #1
    1ecc:	2101      	movs	r1, #1
    1ece:	4648      	mov	r0, r9
    1ed0:	f00a f99e 	bl	c210 <usb_serial_write>
    1ed4:	2c08      	cmp	r4, #8
    1ed6:	d1ec      	bne.n	1eb2 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x8a>
        SERIALCONSOLE.print(",");
      }
      SERIALCONSOLE.print(modules[y].getTemperature(0));
    1ed8:	2100      	movs	r1, #0
    1eda:	4630      	mov	r0, r6
    1edc:	f7fe fee6 	bl	cac <BMSModule::getTemperature(int)>
    1ee0:	f00a fe52 	bl	cb88 <__aeabi_f2d>
    1ee4:	9500      	str	r5, [sp, #0]
    1ee6:	4602      	mov	r2, r0
    1ee8:	460b      	mov	r3, r1
    1eea:	4640      	mov	r0, r8
    1eec:	f007 fc64 	bl	97b8 <Print::printFloat(double, unsigned char)>
    1ef0:	2101      	movs	r1, #1
    1ef2:	4648      	mov	r0, r9
    1ef4:	f00a f98c 	bl	c210 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    1ef8:	2101      	movs	r1, #1
    1efa:	4630      	mov	r0, r6
    1efc:	f7fe fed6 	bl	cac <BMSModule::getTemperature(int)>
    1f00:	f00a fe42 	bl	cb88 <__aeabi_f2d>
    1f04:	9500      	str	r5, [sp, #0]
    1f06:	4602      	mov	r2, r0
    1f08:	460b      	mov	r3, r1
    1f0a:	4640      	mov	r0, r8
    1f0c:	f007 fc54 	bl	97b8 <Print::printFloat(double, unsigned char)>
    1f10:	2101      	movs	r1, #1
    1f12:	4648      	mov	r0, r9
    1f14:	f00a f97c 	bl	c210 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(2));
    1f18:	2102      	movs	r1, #2
    1f1a:	4630      	mov	r0, r6
    1f1c:	f7fe fec6 	bl	cac <BMSModule::getTemperature(int)>
    1f20:	f00a fe32 	bl	cb88 <__aeabi_f2d>
    1f24:	9500      	str	r5, [sp, #0]
    1f26:	4602      	mov	r2, r0
    1f28:	460b      	mov	r3, r1
    1f2a:	4640      	mov	r0, r8
    1f2c:	f007 fc44 	bl	97b8 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    1f30:	3701      	adds	r7, #1
      SERIALCONSOLE.println();
    1f32:	4640      	mov	r0, r8
    1f34:	f007 fc1c 	bl	9770 <Print::println()>
  for (int y = 1; y < 63; y++)
    1f38:	2f3f      	cmp	r7, #63	; 0x3f
    1f3a:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
    1f3e:	d189      	bne.n	1e54 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    }
  }
  for (int y = 1; y < 63; y++)
    1f40:	9c05      	ldr	r4, [sp, #20]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1f42:	4f50      	ldr	r7, [pc, #320]	; (2084 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x25c>)
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial2_write(buffer, size); return size; }
    1f44:	f8df 8138 	ldr.w	r8, [pc, #312]	; 2080 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x258>
    1f48:	2601      	movs	r6, #1
    1f4a:	f04f 0a00 	mov.w	sl, #0
    1f4e:	e004      	b.n	1f5a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
    1f50:	3601      	adds	r6, #1
    1f52:	2e3f      	cmp	r6, #63	; 0x3f
    1f54:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
    1f58:	d05c      	beq.n	2014 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x1ec>
  {
    if (modules[y].isExisting())
    1f5a:	4620      	mov	r0, r4
    1f5c:	f7fe febc 	bl	cd8 <BMSModule::isExisting()>
    1f60:	2800      	cmp	r0, #0
    1f62:	d0f5      	beq.n	1f50 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x128>
    1f64:	2300      	movs	r3, #0
    1f66:	220a      	movs	r2, #10
    1f68:	9903      	ldr	r1, [sp, #12]
    1f6a:	4638      	mov	r0, r7
    1f6c:	f007 fc18 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1f70:	2101      	movs	r1, #1
    1f72:	4640      	mov	r0, r8
    1f74:	f008 fe1e 	bl	abb4 <serial2_write>
    {
      Serial2.print(timestamp);
      Serial2.print(",");
      Serial2.print(current, 0);
    1f78:	9804      	ldr	r0, [sp, #16]
    1f7a:	f00a fe05 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1f7e:	f8cd a000 	str.w	sl, [sp]
    1f82:	4602      	mov	r2, r0
    1f84:	460b      	mov	r3, r1
    1f86:	4638      	mov	r0, r7
    1f88:	f007 fc16 	bl	97b8 <Print::printFloat(double, unsigned char)>
    1f8c:	2101      	movs	r1, #1
    1f8e:	4640      	mov	r0, r8
    1f90:	f008 fe10 	bl	abb4 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    1f94:	4659      	mov	r1, fp
    1f96:	4638      	mov	r0, r7
    1f98:	f007 fbe2 	bl	9760 <Print::print(long)>
    1f9c:	2101      	movs	r1, #1
    1f9e:	4640      	mov	r0, r8
    1fa0:	f008 fe08 	bl	abb4 <serial2_write>
    1fa4:	4631      	mov	r1, r6
    1fa6:	4638      	mov	r0, r7
    1fa8:	f007 fbda 	bl	9760 <Print::print(long)>
    1fac:	2101      	movs	r1, #1
    1fae:	4640      	mov	r0, r8
    1fb0:	f008 fe00 	bl	abb4 <serial2_write>
      Serial2.print(",");
      Serial2.print(SOC);
      Serial2.print(",");
      Serial2.print(y);
      Serial2.print(",");
      for (int i = 0; i < 13; i++)
    1fb4:	2500      	movs	r5, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1fb6:	f04f 0902 	mov.w	r9, #2
      {
        Serial2.print(modules[y].getCellVoltage(i));
    1fba:	4629      	mov	r1, r5
    1fbc:	4620      	mov	r0, r4
    1fbe:	f7fe fb0b 	bl	5d8 <BMSModule::getCellVoltage(int)>
    1fc2:	f00a fde1 	bl	cb88 <__aeabi_f2d>
    1fc6:	f8cd 9000 	str.w	r9, [sp]
    1fca:	4602      	mov	r2, r0
    1fcc:	460b      	mov	r3, r1
    1fce:	4638      	mov	r0, r7
    1fd0:	f007 fbf2 	bl	97b8 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 13; i++)
    1fd4:	3501      	adds	r5, #1
    1fd6:	2101      	movs	r1, #1
    1fd8:	4640      	mov	r0, r8
    1fda:	f008 fdeb 	bl	abb4 <serial2_write>
    1fde:	2d0d      	cmp	r5, #13
    1fe0:	d1eb      	bne.n	1fba <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x192>
        Serial2.print(",");
      }
      if (modules[y].getType() == 1)
    1fe2:	4620      	mov	r0, r4
    1fe4:	f7fe fe70 	bl	cc8 <BMSModule::getType()>
    1fe8:	4605      	mov	r5, r0
    1fea:	2d01      	cmp	r5, #1
      {
        Serial2.print(modules[y].getTemperature(0));
    1fec:	f04f 0100 	mov.w	r1, #0
    1ff0:	4620      	mov	r0, r4
      if (modules[y].getType() == 1)
    1ff2:	d012      	beq.n	201a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x1f2>
        Serial2.print(modules[y].getTemperature(2));
        Serial2.println();
      }
      else
      {
        Serial2.print(modules[y].getTemperature(0));
    1ff4:	f7fe fe5a 	bl	cac <BMSModule::getTemperature(int)>
    1ff8:	f00a fdc6 	bl	cb88 <__aeabi_f2d>
  for (int y = 1; y < 63; y++)
    1ffc:	3601      	adds	r6, #1
        Serial2.print(modules[y].getTemperature(0));
    1ffe:	4602      	mov	r2, r0
    2000:	460b      	mov	r3, r1
    2002:	f8cd 9000 	str.w	r9, [sp]
    2006:	4638      	mov	r0, r7
    2008:	f007 fbd6 	bl	97b8 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    200c:	2e3f      	cmp	r6, #63	; 0x3f
    200e:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
    2012:	d1a2      	bne.n	1f5a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
      }
    }
  }
}
    2014:	b007      	add	sp, #28
    2016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Serial2.print(modules[y].getTemperature(0));
    201a:	f7fe fe47 	bl	cac <BMSModule::getTemperature(int)>
    201e:	f00a fdb3 	bl	cb88 <__aeabi_f2d>
    2022:	f8cd 9000 	str.w	r9, [sp]
    2026:	4602      	mov	r2, r0
    2028:	460b      	mov	r3, r1
    202a:	4638      	mov	r0, r7
    202c:	f007 fbc4 	bl	97b8 <Print::printFloat(double, unsigned char)>
    2030:	4629      	mov	r1, r5
    2032:	4640      	mov	r0, r8
    2034:	f008 fdbe 	bl	abb4 <serial2_write>
        Serial2.print(modules[y].getTemperature(1));
    2038:	4629      	mov	r1, r5
    203a:	4620      	mov	r0, r4
    203c:	f7fe fe36 	bl	cac <BMSModule::getTemperature(int)>
    2040:	f00a fda2 	bl	cb88 <__aeabi_f2d>
    2044:	f8cd 9000 	str.w	r9, [sp]
    2048:	4602      	mov	r2, r0
    204a:	460b      	mov	r3, r1
    204c:	4638      	mov	r0, r7
    204e:	f007 fbb3 	bl	97b8 <Print::printFloat(double, unsigned char)>
    2052:	4629      	mov	r1, r5
    2054:	4640      	mov	r0, r8
    2056:	f008 fdad 	bl	abb4 <serial2_write>
        Serial2.print(modules[y].getTemperature(2));
    205a:	2102      	movs	r1, #2
    205c:	4620      	mov	r0, r4
    205e:	f7fe fe25 	bl	cac <BMSModule::getTemperature(int)>
    2062:	f00a fd91 	bl	cb88 <__aeabi_f2d>
    2066:	f8cd 9000 	str.w	r9, [sp]
    206a:	4602      	mov	r2, r0
    206c:	460b      	mov	r3, r1
    206e:	4638      	mov	r0, r7
    2070:	f007 fba2 	bl	97b8 <Print::printFloat(double, unsigned char)>
        Serial2.println();
    2074:	4638      	mov	r0, r7
    2076:	f007 fb7b 	bl	9770 <Print::println()>
    207a:	e769      	b.n	1f50 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x128>
    207c:	1fff89fc 	.word	0x1fff89fc
    2080:	00013d5c 	.word	0x00013d5c
    2084:	1fff88bc 	.word	0x1fff88bc

00002088 <Logger::setLoglevel(Logger::LogLevel)>:

/*
   Set the log level. Any output below the specified log level will be omitted.
*/
void Logger::setLoglevel(LogLevel level) {
  logLevel = level;
    2088:	4b01      	ldr	r3, [pc, #4]	; (2090 <Logger::setLoglevel(Logger::LogLevel)+0x8>)
    208a:	7018      	strb	r0, [r3, #0]
}
    208c:	4770      	bx	lr
    208e:	bf00      	nop
    2090:	1fff8824 	.word	0x1fff8824

00002094 <Logger::logMessage(char*, std::__va_list)>:
   %c - prints the next parameter as a character
   %t - prints the next parameter as boolean ('T' or 'F')
   %T - prints the next parameter as boolean ('true' or 'false')
*/
void Logger::logMessage(char *format, va_list args) {
  for (; *format != 0; ++format) {
    2094:	7802      	ldrb	r2, [r0, #0]
    2096:	2a00      	cmp	r2, #0
    2098:	f000 80b8 	beq.w	220c <Logger::logMessage(char*, std::__va_list)+0x178>
void Logger::logMessage(char *format, va_list args) {
    209c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    20a0:	4f5c      	ldr	r7, [pc, #368]	; (2214 <Logger::logMessage(char*, std::__va_list)+0x180>)
    20a2:	f8df 8174 	ldr.w	r8, [pc, #372]	; 2218 <Logger::logMessage(char*, std::__va_list)+0x184>
    20a6:	4e5d      	ldr	r6, [pc, #372]	; (221c <Logger::logMessage(char*, std::__va_list)+0x188>)
    20a8:	b083      	sub	sp, #12
    20aa:	4603      	mov	r3, r0
    20ac:	460d      	mov	r5, r1
    if (*format == '%') {
    20ae:	2a25      	cmp	r2, #37	; 0x25
    20b0:	d134      	bne.n	211c <Logger::logMessage(char*, std::__va_list)+0x88>
      ++format;
      if (*format == '\0')
    20b2:	7858      	ldrb	r0, [r3, #1]
      ++format;
    20b4:	1c5c      	adds	r4, r3, #1
      if (*format == '\0')
    20b6:	2800      	cmp	r0, #0
    20b8:	d038      	beq.n	212c <Logger::logMessage(char*, std::__va_list)+0x98>
        break;
      if (*format == '%') {
    20ba:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    20be:	2b55      	cmp	r3, #85	; 0x55
    20c0:	d82e      	bhi.n	2120 <Logger::logMessage(char*, std::__va_list)+0x8c>
    20c2:	e8df f003 	tbb	[pc, r3]
    20c6:	2d9f      	.short	0x2d9f
    20c8:	2d2d2d2d 	.word	0x2d2d2d2d
    20cc:	2d2d2d2d 	.word	0x2d2d2d2d
    20d0:	2d2d2d2d 	.word	0x2d2d2d2d
    20d4:	2d2d2d2d 	.word	0x2d2d2d2d
    20d8:	2d2d2d2d 	.word	0x2d2d2d2d
    20dc:	2d2d2d2d 	.word	0x2d2d2d2d
    20e0:	932d2d2d 	.word	0x932d2d2d
    20e4:	2d2d2d2d 	.word	0x2d2d2d2d
    20e8:	2d2d2d2d 	.word	0x2d2d2d2d
    20ec:	2d2d2d2d 	.word	0x2d2d2d2d
    20f0:	2d2d2d2d 	.word	0x2d2d2d2d
    20f4:	2d2d882d 	.word	0x2d2d882d
    20f8:	2d2d7c2d 	.word	0x2d2d7c2d
    20fc:	2d2d2d2d 	.word	0x2d2d2d2d
    2100:	742d2d2d 	.word	0x742d2d2d
    2104:	5e2d3939 	.word	0x5e2d3939
    2108:	2d392d2d 	.word	0x2d392d2d
    210c:	2d2d392d 	.word	0x2d2d392d
    2110:	2d2d2d2d 	.word	0x2d2d2d2d
    2114:	2d2d3f49 	.word	0x2d2d3f49
    2118:	692d562d 	.word	0x692d562d
        }
        continue;
      }

    }
    SERIALCONSOLE.print(*format);
    211c:	7818      	ldrb	r0, [r3, #0]
    211e:	461c      	mov	r4, r3
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2120:	f00a f8fa 	bl	c318 <usb_serial_putchar>
  for (; *format != 0; ++format) {
    2124:	7862      	ldrb	r2, [r4, #1]
    2126:	1c63      	adds	r3, r4, #1
    2128:	2a00      	cmp	r2, #0
    212a:	d1c0      	bne.n	20ae <Logger::logMessage(char*, std::__va_list)+0x1a>
  }
  SERIALCONSOLE.println();
    212c:	483c      	ldr	r0, [pc, #240]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
}
    212e:	b003      	add	sp, #12
    2130:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SERIALCONSOLE.println();
    2134:	f007 bb1c 	b.w	9770 <Print::println()>
	size_t print(int n)				{ return print((long)n); }
    2138:	f855 1b04 	ldr.w	r1, [r5], #4
    213c:	4838      	ldr	r0, [pc, #224]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    213e:	f007 fb0f 	bl	9760 <Print::print(long)>
        continue;
    2142:	e7ef      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    2144:	f855 1b04 	ldr.w	r1, [r5], #4
    2148:	2901      	cmp	r1, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    214a:	bf0e      	itee	eq
    214c:	4835      	ldreq	r0, [pc, #212]	; (2224 <Logger::logMessage(char*, std::__va_list)+0x190>)
    214e:	2101      	movne	r1, #1
    2150:	4630      	movne	r0, r6
    2152:	f00a f85d 	bl	c210 <usb_serial_write>
    2156:	e7e5      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        register char *s = (char *) va_arg( args, int );
    2158:	f855 9b04 	ldr.w	r9, [r5], #4
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    215c:	f1b9 0f00 	cmp.w	r9, #0
    2160:	d0e0      	beq.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
							  return write((const uint8_t *)str, strlen(str)); }
    2162:	4648      	mov	r0, r9
    2164:	f00c f8ec 	bl	e340 <strlen>
    2168:	4601      	mov	r1, r0
    216a:	4648      	mov	r0, r9
    216c:	f00a f850 	bl	c210 <usb_serial_write>
    2170:	e7d8      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    2172:	f855 1b04 	ldr.w	r1, [r5], #4
    2176:	482a      	ldr	r0, [pc, #168]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2178:	2300      	movs	r3, #0
    217a:	2210      	movs	r2, #16
    217c:	f007 fb10 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    2180:	e7d0      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 3);
    2182:	3507      	adds	r5, #7
    2184:	f025 0507 	bic.w	r5, r5, #7
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2188:	2103      	movs	r1, #3
    218a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    218e:	4824      	ldr	r0, [pc, #144]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2190:	9100      	str	r1, [sp, #0]
    2192:	f007 fb11 	bl	97b8 <Print::printFloat(double, unsigned char)>
        continue;
    2196:	e7c5      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 0);
    2198:	3507      	adds	r5, #7
    219a:	f025 0507 	bic.w	r5, r5, #7
    219e:	2100      	movs	r1, #0
    21a0:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    21a4:	481e      	ldr	r0, [pc, #120]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    21a6:	9100      	str	r1, [sp, #0]
    21a8:	f007 fb06 	bl	97b8 <Print::printFloat(double, unsigned char)>
        continue;
    21ac:	e7ba      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    21ae:	f855 1b04 	ldr.w	r1, [r5], #4
    21b2:	481b      	ldr	r0, [pc, #108]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    21b4:	2300      	movs	r3, #0
    21b6:	2202      	movs	r2, #2
    21b8:	f007 faf2 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    21bc:	e7b2      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
    21be:	2102      	movs	r1, #2
    21c0:	4819      	ldr	r0, [pc, #100]	; (2228 <Logger::logMessage(char*, std::__va_list)+0x194>)
    21c2:	f00a f825 	bl	c210 <usb_serial_write>
    21c6:	f855 1b04 	ldr.w	r1, [r5], #4
    21ca:	4815      	ldr	r0, [pc, #84]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    21cc:	2300      	movs	r3, #0
    21ce:	2210      	movs	r2, #16
    21d0:	f007 fae6 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    21d4:	e7a6      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    21d6:	f855 3b04 	ldr.w	r3, [r5], #4
    21da:	2b01      	cmp	r3, #1
    21dc:	bf07      	ittee	eq
    21de:	2104      	moveq	r1, #4
    21e0:	4640      	moveq	r0, r8
    21e2:	2105      	movne	r1, #5
    21e4:	4638      	movne	r0, r7
    21e6:	f00a f813 	bl	c210 <usb_serial_write>
    21ea:	e79b      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
    21ec:	2102      	movs	r1, #2
    21ee:	480f      	ldr	r0, [pc, #60]	; (222c <Logger::logMessage(char*, std::__va_list)+0x198>)
    21f0:	f00a f80e 	bl	c210 <usb_serial_write>
    21f4:	f855 1b04 	ldr.w	r1, [r5], #4
    21f8:	4809      	ldr	r0, [pc, #36]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    21fa:	2300      	movs	r3, #0
    21fc:	2202      	movs	r2, #2
    21fe:	f007 facf 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    2202:	e78f      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2204:	2025      	movs	r0, #37	; 0x25
    2206:	f00a f887 	bl	c318 <usb_serial_putchar>
        continue;
    220a:	e78b      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
  SERIALCONSOLE.println();
    220c:	4804      	ldr	r0, [pc, #16]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    220e:	f007 baaf 	b.w	9770 <Print::println()>
    2212:	bf00      	nop
    2214:	000141e4 	.word	0x000141e4
    2218:	000141dc 	.word	0x000141dc
    221c:	000141d8 	.word	0x000141d8
    2220:	1fff89fc 	.word	0x1fff89fc
    2224:	000141d4 	.word	0x000141d4
    2228:	000141cc 	.word	0x000141cc
    222c:	000141d0 	.word	0x000141d0

00002230 <Logger::console(char*, ...)>:
void Logger::console(char *message, ...) {
    2230:	b40f      	push	{r0, r1, r2, r3}
    2232:	b500      	push	{lr}
    2234:	b083      	sub	sp, #12
    2236:	a904      	add	r1, sp, #16
    2238:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, message);
    223c:	9101      	str	r1, [sp, #4]
  Logger::logMessage(message, args);
    223e:	f7ff ff29 	bl	2094 <Logger::logMessage(char*, std::__va_list)>
}
    2242:	b003      	add	sp, #12
    2244:	f85d eb04 	ldr.w	lr, [sp], #4
    2248:	b004      	add	sp, #16
    224a:	4770      	bx	lr

0000224c <Logger::log(Logger::LogLevel, char*, std::__va_list)>:
void Logger::log(LogLevel level, char *format, va_list args) {
    224c:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    224e:	4b1c      	ldr	r3, [pc, #112]	; (22c0 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x74>)
  lastLogTime = millis();
    2250:	4f1c      	ldr	r7, [pc, #112]	; (22c4 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x78>)
    2252:	681b      	ldr	r3, [r3, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    2254:	b083      	sub	sp, #12
    2256:	4604      	mov	r4, r0
    2258:	9301      	str	r3, [sp, #4]
	return ret;
    225a:	9b01      	ldr	r3, [sp, #4]
  lastLogTime = millis();
    225c:	603b      	str	r3, [r7, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    225e:	460d      	mov	r5, r1
    2260:	4616      	mov	r6, r2
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2262:	4619      	mov	r1, r3
    2264:	220a      	movs	r2, #10
    2266:	2300      	movs	r3, #0
    2268:	4817      	ldr	r0, [pc, #92]	; (22c8 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x7c>)
    226a:	f007 fa99 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    226e:	2103      	movs	r1, #3
    2270:	4816      	ldr	r0, [pc, #88]	; (22cc <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x80>)
    2272:	f009 ffcd 	bl	c210 <usb_serial_write>
  switch (level) {
    2276:	2c03      	cmp	r4, #3
    2278:	d807      	bhi.n	228a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    227a:	e8df f004 	tbb	[pc, r4]
    227e:	161b      	.short	0x161b
    2280:	1102      	.short	0x1102
    2282:	4813      	ldr	r0, [pc, #76]	; (22d0 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x84>)
    2284:	2107      	movs	r1, #7
    2286:	f009 ffc3 	bl	c210 <usb_serial_write>
    228a:	2102      	movs	r1, #2
    228c:	4811      	ldr	r0, [pc, #68]	; (22d4 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x88>)
    228e:	f009 ffbf 	bl	c210 <usb_serial_write>
  logMessage(format, args);
    2292:	4631      	mov	r1, r6
    2294:	4628      	mov	r0, r5
}
    2296:	b003      	add	sp, #12
    2298:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  logMessage(format, args);
    229c:	f7ff befa 	b.w	2094 <Logger::logMessage(char*, std::__va_list)>
    22a0:	2105      	movs	r1, #5
    22a2:	480d      	ldr	r0, [pc, #52]	; (22d8 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x8c>)
    22a4:	f009 ffb4 	bl	c210 <usb_serial_write>
    22a8:	e7ef      	b.n	228a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    22aa:	2104      	movs	r1, #4
    22ac:	480b      	ldr	r0, [pc, #44]	; (22dc <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x90>)
    22ae:	f009 ffaf 	bl	c210 <usb_serial_write>
    22b2:	e7ea      	b.n	228a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    22b4:	2105      	movs	r1, #5
    22b6:	480a      	ldr	r0, [pc, #40]	; (22e0 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x94>)
    22b8:	f009 ffaa 	bl	c210 <usb_serial_write>
    22bc:	e7e5      	b.n	228a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    22be:	bf00      	nop
    22c0:	1fffd3c0 	.word	0x1fffd3c0
    22c4:	1fff9190 	.word	0x1fff9190
    22c8:	1fff89fc 	.word	0x1fff89fc
    22cc:	000141ec 	.word	0x000141ec
    22d0:	00014200 	.word	0x00014200
    22d4:	0001423c 	.word	0x0001423c
    22d8:	00014208 	.word	0x00014208
    22dc:	000141f8 	.word	0x000141f8
    22e0:	000141f0 	.word	0x000141f0

000022e4 <Logger::debug(char*, ...)>:
void Logger::debug(char *message, ...) {
    22e4:	b40f      	push	{r0, r1, r2, r3}
    22e6:	b500      	push	{lr}
  if (logLevel > Debug)
    22e8:	4b06      	ldr	r3, [pc, #24]	; (2304 <Logger::debug(char*, ...)+0x20>)
    22ea:	7818      	ldrb	r0, [r3, #0]
void Logger::debug(char *message, ...) {
    22ec:	b083      	sub	sp, #12
  if (logLevel > Debug)
    22ee:	b920      	cbnz	r0, 22fa <Logger::debug(char*, ...)+0x16>
  va_start(args, message);
    22f0:	aa05      	add	r2, sp, #20
  Logger::log(Debug, message, args);
    22f2:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    22f4:	9201      	str	r2, [sp, #4]
  Logger::log(Debug, message, args);
    22f6:	f7ff ffa9 	bl	224c <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    22fa:	b003      	add	sp, #12
    22fc:	f85d eb04 	ldr.w	lr, [sp], #4
    2300:	b004      	add	sp, #16
    2302:	4770      	bx	lr
    2304:	1fff8824 	.word	0x1fff8824

00002308 <Logger::info(char*, ...)>:
void Logger::info(char *message, ...) {
    2308:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Info)
    230a:	4b08      	ldr	r3, [pc, #32]	; (232c <Logger::info(char*, ...)+0x24>)
void Logger::info(char *message, ...) {
    230c:	b500      	push	{lr}
  if (logLevel > Info)
    230e:	781b      	ldrb	r3, [r3, #0]
    2310:	2b01      	cmp	r3, #1
void Logger::info(char *message, ...) {
    2312:	b083      	sub	sp, #12
  if (logLevel > Info)
    2314:	d805      	bhi.n	2322 <Logger::info(char*, ...)+0x1a>
  va_start(args, message);
    2316:	aa05      	add	r2, sp, #20
  Logger::log(Info, message, args);
    2318:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    231a:	9201      	str	r2, [sp, #4]
  Logger::log(Info, message, args);
    231c:	2001      	movs	r0, #1
    231e:	f7ff ff95 	bl	224c <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    2322:	b003      	add	sp, #12
    2324:	f85d eb04 	ldr.w	lr, [sp], #4
    2328:	b004      	add	sp, #16
    232a:	4770      	bx	lr
    232c:	1fff8824 	.word	0x1fff8824

00002330 <Logger::error(char*, ...)>:
void Logger::error(char *message, ...) {
    2330:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Error)
    2332:	4b08      	ldr	r3, [pc, #32]	; (2354 <Logger::error(char*, ...)+0x24>)
void Logger::error(char *message, ...) {
    2334:	b500      	push	{lr}
  if (logLevel > Error)
    2336:	781b      	ldrb	r3, [r3, #0]
    2338:	2b03      	cmp	r3, #3
void Logger::error(char *message, ...) {
    233a:	b083      	sub	sp, #12
  if (logLevel > Error)
    233c:	d805      	bhi.n	234a <Logger::error(char*, ...)+0x1a>
  va_start(args, message);
    233e:	aa05      	add	r2, sp, #20
  Logger::log(Error, message, args);
    2340:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    2342:	9201      	str	r2, [sp, #4]
  Logger::log(Error, message, args);
    2344:	2003      	movs	r0, #3
    2346:	f7ff ff81 	bl	224c <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    234a:	b003      	add	sp, #12
    234c:	f85d eb04 	ldr.w	lr, [sp], #4
    2350:	b004      	add	sp, #16
    2352:	4770      	bx	lr
    2354:	1fff8824 	.word	0x1fff8824

00002358 <SerialConsole::SerialConsole()>:

bool printPrettyDisplay;
uint32_t prettyCounter;
int whichDisplay;

SerialConsole::SerialConsole() {
    2358:	b430      	push	{r4, r5}
    //State variables for serial console
    ptrBuffer = 0;
    state = STATE_ROOT_MENU;
    loopcount=0;
    cancel=false;
    printPrettyDisplay = false;
    235a:	4d07      	ldr	r5, [pc, #28]	; (2378 <SerialConsole::SerialConsole()+0x20>)
    prettyCounter = 0;
    235c:	4c07      	ldr	r4, [pc, #28]	; (237c <SerialConsole::SerialConsole()+0x24>)
    whichDisplay = 0;
    235e:	4908      	ldr	r1, [pc, #32]	; (2380 <SerialConsole::SerialConsole()+0x28>)
    ptrBuffer = 0;
    2360:	2300      	movs	r3, #0
    printPrettyDisplay = false;
    2362:	702b      	strb	r3, [r5, #0]
    prettyCounter = 0;
    2364:	6023      	str	r3, [r4, #0]
    ptrBuffer = 0;
    2366:	6503      	str	r3, [r0, #80]	; 0x50
}
    2368:	bc30      	pop	{r4, r5}
    state = STATE_ROOT_MENU;
    236a:	6543      	str	r3, [r0, #84]	; 0x54
    loopcount=0;
    236c:	6583      	str	r3, [r0, #88]	; 0x58
    cancel=false;
    236e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    whichDisplay = 0;
    2372:	600b      	str	r3, [r1, #0]
}
    2374:	4770      	bx	lr
    2376:	bf00      	nop
    2378:	1fff9198 	.word	0x1fff9198
    237c:	1fff9194 	.word	0x1fff9194
    2380:	1fff919c 	.word	0x1fff919c

00002384 <isrCP()>:
  } else {
    return canId;  // not sure if this is really right?
  }
}

void isrCP() {
    2384:	b570      	push	{r4, r5, r6, lr}
  if (digitalRead(IN4) == LOW) {
    2386:	2013      	movs	r0, #19
    2388:	f008 f8f4 	bl	a574 <digitalRead>
    238c:	b958      	cbnz	r0, 23a6 <isrCP()+0x22>
    duration = micros() - pilottimer;
    238e:	4c11      	ldr	r4, [pc, #68]	; (23d4 <isrCP()+0x50>)
    2390:	f008 f93a 	bl	a608 <micros>
    2394:	6822      	ldr	r2, [r4, #0]
    2396:	4b10      	ldr	r3, [pc, #64]	; (23d8 <isrCP()+0x54>)
    2398:	1a80      	subs	r0, r0, r2
    239a:	b280      	uxth	r0, r0
    239c:	8018      	strh	r0, [r3, #0]
    pilottimer = micros();
    239e:	f008 f933 	bl	a608 <micros>
    23a2:	6020      	str	r0, [r4, #0]
  } else {
    accurlim = ((duration - (micros() - pilottimer + 35)) * 60) / duration;  //pilottimer + "xx" optocoupler decade ms
  }
}  // ******** end of isr CP ********
    23a4:	bd70      	pop	{r4, r5, r6, pc}
    accurlim = ((duration - (micros() - pilottimer + 35)) * 60) / duration;  //pilottimer + "xx" optocoupler decade ms
    23a6:	4d0c      	ldr	r5, [pc, #48]	; (23d8 <isrCP()+0x54>)
    23a8:	4b0a      	ldr	r3, [pc, #40]	; (23d4 <isrCP()+0x50>)
    23aa:	882c      	ldrh	r4, [r5, #0]
    23ac:	681e      	ldr	r6, [r3, #0]
    23ae:	f008 f92b 	bl	a608 <micros>
    23b2:	b2a4      	uxth	r4, r4
    23b4:	4434      	add	r4, r6
    23b6:	1a20      	subs	r0, r4, r0
    23b8:	882a      	ldrh	r2, [r5, #0]
    23ba:	4908      	ldr	r1, [pc, #32]	; (23dc <isrCP()+0x58>)
    23bc:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
    23c0:	009b      	lsls	r3, r3, #2
    23c2:	b292      	uxth	r2, r2
    23c4:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
    23c8:	fbb3 f3f2 	udiv	r3, r3, r2
    23cc:	b29b      	uxth	r3, r3
    23ce:	800b      	strh	r3, [r1, #0]
}  // ******** end of isr CP ********
    23d0:	bd70      	pop	{r4, r5, r6, pc}
    23d2:	bf00      	nop
    23d4:	1fffd0d0 	.word	0x1fffd0d0
    23d8:	1fffcfd0 	.word	0x1fffcfd0
    23dc:	1fff91d8 	.word	0x1fff91d8

000023e0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>:
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
	long in_range = in_max - in_min;
	long out_range = out_max - out_min;
    23e0:	f8dd c000 	ldr.w	ip, [sp]
	if (in_range == 0) return out_min + out_range / 2;
    23e4:	1a52      	subs	r2, r2, r1
	long out_range = out_max - out_min;
    23e6:	ebac 0c03 	sub.w	ip, ip, r3
	if (in_range == 0) return out_min + out_range / 2;
    23ea:	d01c      	beq.n	2426 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x46>
	long num = (x - in_min) * out_range;
    23ec:	1a40      	subs	r0, r0, r1
	if (out_range >= 0) {
    23ee:	f1bc 0f00 	cmp.w	ip, #0
	long num = (x - in_min) * out_range;
    23f2:	fb0c f000 	mul.w	r0, ip, r0
		num += in_range / 2;
    23f6:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
	if (out_range >= 0) {
    23fa:	db09      	blt.n	2410 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x30>
		num += in_range / 2;
    23fc:	eb00 0061 	add.w	r0, r0, r1, asr #1
	} else {
		num -= in_range / 2;
	}
	long result = num / in_range + out_min;
	if (out_range >= 0) {
		if (in_range * num < 0) return result - 1;
    2400:	fb00 f102 	mul.w	r1, r0, r2
    2404:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    2406:	fb90 f0f2 	sdiv	r0, r0, r2
    240a:	4418      	add	r0, r3
		if (in_range * num < 0) return result - 1;
    240c:	db10      	blt.n	2430 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x50>
		if (in_range * num >= 0) return result + 1;
	}
	return result;
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
}
    240e:	4770      	bx	lr
		num -= in_range / 2;
    2410:	eba0 0061 	sub.w	r0, r0, r1, asr #1
		if (in_range * num >= 0) return result + 1;
    2414:	fb00 f102 	mul.w	r1, r0, r2
    2418:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    241a:	fb90 f0f2 	sdiv	r0, r0, r2
    241e:	4418      	add	r0, r3
		if (in_range * num >= 0) return result + 1;
    2420:	dbf5      	blt.n	240e <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x2e>
    2422:	3001      	adds	r0, #1
}
    2424:	4770      	bx	lr
	if (in_range == 0) return out_min + out_range / 2;
    2426:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
    242a:	eb03 006c 	add.w	r0, r3, ip, asr #1
    242e:	4770      	bx	lr
		if (in_range * num < 0) return result - 1;
    2430:	3801      	subs	r0, #1
    2432:	4770      	bx	lr

00002434 <low_voltage_isr>:

void low_voltage_isr(void) {
  EEPROM.update(1000, uint8_t(SOC));
    2434:	4b11      	ldr	r3, [pc, #68]	; (247c <low_voltage_isr+0x48>)
void low_voltage_isr(void) {
    2436:	b510      	push	{r4, lr}

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    2438:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  EEPROM.update(1000, uint8_t(SOC));
    243c:	781c      	ldrb	r4, [r3, #0]
    243e:	f007 fbb3 	bl	9ba8 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }

    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    2442:	4284      	cmp	r4, r0
    2444:	d004      	beq.n	2450 <low_voltage_isr+0x1c>
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    2446:	4621      	mov	r1, r4
    2448:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    244c:	f007 fbc6 	bl	9bdc <eeprom_write_byte>

  PMC_LVDSC2 |= PMC_LVDSC2_LVWACK;  // clear if we can
    2450:	4b0b      	ldr	r3, [pc, #44]	; (2480 <low_voltage_isr+0x4c>)
  PMC_LVDSC1 |= PMC_LVDSC1_LVDACK;

  Serial.println();
    2452:	480c      	ldr	r0, [pc, #48]	; (2484 <low_voltage_isr+0x50>)
  PMC_LVDSC2 |= PMC_LVDSC2_LVWACK;  // clear if we can
    2454:	785a      	ldrb	r2, [r3, #1]
    2456:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    245a:	705a      	strb	r2, [r3, #1]
  PMC_LVDSC1 |= PMC_LVDSC1_LVDACK;
    245c:	781a      	ldrb	r2, [r3, #0]
    245e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    2462:	701a      	strb	r2, [r3, #0]
  Serial.println();
    2464:	f007 f984 	bl	9770 <Print::println()>
    2468:	4807      	ldr	r0, [pc, #28]	; (2488 <low_voltage_isr+0x54>)
    246a:	2107      	movs	r1, #7
    246c:	f009 fed0 	bl	c210 <usb_serial_write>
  Serial.println("GoodBye");
}
    2470:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    2474:	4803      	ldr	r0, [pc, #12]	; (2484 <low_voltage_isr+0x50>)
    2476:	f007 b97b 	b.w	9770 <Print::println()>
    247a:	bf00      	nop
    247c:	1fff8828 	.word	0x1fff8828
    2480:	4007d000 	.word	0x4007d000
    2484:	1fff89fc 	.word	0x1fff89fc
    2488:	00014210 	.word	0x00014210

0000248c <Print::println(char const*) [clone .isra.0]>:
    248c:	b538      	push	{r3, r4, r5, lr}
    248e:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2490:	b149      	cbz	r1, 24a6 <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    2492:	4608      	mov	r0, r1
    2494:	460d      	mov	r5, r1
    2496:	f00b ff53 	bl	e340 <strlen>
    249a:	6823      	ldr	r3, [r4, #0]
    249c:	4602      	mov	r2, r0
    249e:	685b      	ldr	r3, [r3, #4]
    24a0:	4629      	mov	r1, r5
    24a2:	4620      	mov	r0, r4
    24a4:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    24a6:	4620      	mov	r0, r4
    24a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    24ac:	f007 b960 	b.w	9770 <Print::println()>

000024b0 <loadSettings()>:
void loadSettings() {
    24b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Logger::console("Resetting to factory defaults");
    24b4:	4840      	ldr	r0, [pc, #256]	; (25b8 <loadSettings()+0x108>)
  settings.UnderTSetpoint = -10.0f;
    24b6:	4e41      	ldr	r6, [pc, #260]	; (25bc <loadSettings()+0x10c>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    24b8:	4c41      	ldr	r4, [pc, #260]	; (25c0 <loadSettings()+0x110>)
  settings.offset1 = 1750;     //mV mid point of channel 1
    24ba:	f8df 9108 	ldr.w	r9, [pc, #264]	; 25c4 <loadSettings()+0x114>
  settings.convhigh = 58;      // mV/A current sensor high range channel
    24be:	f8df 8108 	ldr.w	r8, [pc, #264]	; 25c8 <loadSettings()+0x118>
  settings.UnderDur = 5000;    //ms of allowed undervoltage before throwing open stopping discharge.
    24c2:	4f42      	ldr	r7, [pc, #264]	; (25cc <loadSettings()+0x11c>)
  Logger::console("Resetting to factory defaults");
    24c4:	f7ff feb4 	bl	2230 <Logger::console(char*, ...)>
  settings.version = EEPROM_VERSION;
    24c8:	4b41      	ldr	r3, [pc, #260]	; (25d0 <loadSettings()+0x120>)
  settings.OverVSetpoint = 4.2f;
    24ca:	4942      	ldr	r1, [pc, #264]	; (25d4 <loadSettings()+0x124>)
    24cc:	60d9      	str	r1, [r3, #12]
  settings.UnderVSetpoint = 3.0f;
    24ce:	4942      	ldr	r1, [pc, #264]	; (25d8 <loadSettings()+0x128>)
    24d0:	6119      	str	r1, [r3, #16]
  settings.ChargeVsetpoint = 4.1f;
    24d2:	4942      	ldr	r1, [pc, #264]	; (25dc <loadSettings()+0x12c>)
    24d4:	6159      	str	r1, [r3, #20]
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
    24d6:	4942      	ldr	r1, [pc, #264]	; (25e0 <loadSettings()+0x130>)
    24d8:	6259      	str	r1, [r3, #36]	; 0x24
  settings.DischVsetpoint = 3.2f;
    24da:	4942      	ldr	r1, [pc, #264]	; (25e4 <loadSettings()+0x134>)
    24dc:	6199      	str	r1, [r3, #24]
  settings.UnderTSetpoint = -10.0f;
    24de:	62de      	str	r6, [r3, #44]	; 0x2c
  settings.IgnoreVolt = 0.5;  //
    24e0:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  settings.ChargeTSetpoint = 0.0f;
    24e4:	2600      	movs	r6, #0
  settings.IgnoreVolt = 0.5;  //
    24e6:	6459      	str	r1, [r3, #68]	; 0x44
  settings.DeltaVolt = 0.5;    //V of allowable difference between measurements
    24e8:	6519      	str	r1, [r3, #80]	; 0x50
  settings.ChargeTSetpoint = 0.0f;
    24ea:	631e      	str	r6, [r3, #48]	; 0x30
  settings.chargecurrentmax = 300;  //max charge current in 0.1A
    24ec:	f44f 7196 	mov.w	r1, #300	; 0x12c
  settings.DisTSetpoint = 40.0f;
    24f0:	4e3d      	ldr	r6, [pc, #244]	; (25e8 <loadSettings()+0x138>)
  settings.chargecurrentmax = 300;  //max charge current in 0.1A
    24f2:	6619      	str	r1, [r3, #96]	; 0x60
  settings.discurrentmax = 300;     // max discharge current in 0.1A
    24f4:	6699      	str	r1, [r3, #104]	; 0x68
  settings.DisTSetpoint = 40.0f;
    24f6:	635e      	str	r6, [r3, #52]	; 0x34
  settings.socvolt[0] = 3100;       //Voltage and SOC curve for voltage based SOC calc
    24f8:	f640 411c 	movw	r1, #3100	; 0xc1c
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    24fc:	4e3b      	ldr	r6, [pc, #236]	; (25ec <loadSettings()+0x13c>)
  settings.socvolt[0] = 3100;       //Voltage and SOC curve for voltage based SOC calc
    24fe:	66d9      	str	r1, [r3, #108]	; 0x6c
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    2500:	639e      	str	r6, [r3, #56]	; 0x38
  settings.socvolt[1] = 10;         //Voltage and SOC curve for voltage based SOC calc
    2502:	210a      	movs	r1, #10
  settings.canSpeed = 500000;
    2504:	4e3a      	ldr	r6, [pc, #232]	; (25f0 <loadSettings()+0x140>)
  settings.socvolt[1] = 10;         //Voltage and SOC curve for voltage based SOC calc
    2506:	6719      	str	r1, [r3, #112]	; 0x70
  settings.version = EEPROM_VERSION;
    2508:	f240 2512 	movw	r5, #530	; 0x212
  settings.socvolt[2] = 4100;       //Voltage and SOC curve for voltage based SOC calc
    250c:	f241 0104 	movw	r1, #4100	; 0x1004
  settings.canSpeed = 500000;
    2510:	605e      	str	r6, [r3, #4]
  settings.StoreVsetpoint = 3.8;    // V storage mode charge max
    2512:	4e38      	ldr	r6, [pc, #224]	; (25f4 <loadSettings()+0x144>)
  settings.version = EEPROM_VERSION;
    2514:	801d      	strh	r5, [r3, #0]
  settings.socvolt[2] = 4100;       //Voltage and SOC curve for voltage based SOC calc
    2516:	6759      	str	r1, [r3, #116]	; 0x74
  settings.OverTSetpoint = 65.0f;
    2518:	4d37      	ldr	r5, [pc, #220]	; (25f8 <loadSettings()+0x148>)
  settings.StoreVsetpoint = 3.8;    // V storage mode charge max
    251a:	621e      	str	r6, [r3, #32]
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    251c:	215a      	movs	r1, #90	; 0x5a
  settings.balanceVoltage = 3.9f;
    251e:	4e37      	ldr	r6, [pc, #220]	; (25fc <loadSettings()+0x14c>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    2520:	61dc      	str	r4, [r3, #28]
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    2522:	2200      	movs	r2, #0
  settings.curcan = LemCAB300;
    2524:	2001      	movs	r0, #1
  settings.OverTSetpoint = 65.0f;
    2526:	629d      	str	r5, [r3, #40]	; 0x28
  settings.CellGap = 0.2f;  //max delta between high and low cell
    2528:	63dc      	str	r4, [r3, #60]	; 0x3c
  settings.CAP = 100;               //battery size in Ah
    252a:	2564      	movs	r5, #100	; 0x64
  settings.Scells = 12;             //Cells in series
    252c:	240c      	movs	r4, #12
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    252e:	6799      	str	r1, [r3, #120]	; 0x78
  settings.balanceVoltage = 3.9f;
    2530:	649e      	str	r6, [r3, #72]	; 0x48
  settings.chargecurrentend = 50;   //end charge current in 0.1A
    2532:	2132      	movs	r1, #50	; 0x32
  settings.balanceHyst = 0.04f;
    2534:	4e32      	ldr	r6, [pc, #200]	; (2600 <loadSettings()+0x150>)
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    2536:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    253a:	f240 2a01 	movw	sl, #513	; 0x201
  settings.curcan = LemCAB300;
    253e:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
  settings.Scells = 12;             //Cells in series
    2542:	655c      	str	r4, [r3, #84]	; 0x54
  settings.Pstrings = 1;            // strings in parallel used to divide voltage of pack
    2544:	6598      	str	r0, [r3, #88]	; 0x58
  settings.chargecurrentend = 50;   //end charge current in 0.1A
    2546:	6659      	str	r1, [r3, #100]	; 0x64
  settings.balanceHyst = 0.04f;
    2548:	64de      	str	r6, [r3, #76]	; 0x4c
  settings.CAP = 100;               //battery size in Ah
    254a:	65dd      	str	r5, [r3, #92]	; 0x5c
  settings.ChargerDirect = 1;  //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    254c:	4e2d      	ldr	r6, [pc, #180]	; (2604 <loadSettings()+0x154>)
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    254e:	f8a3 a008 	strh.w	sl, [r3, #8]
  settings.invertcur = 0;           //Invert current sensor direction
    2552:	67da      	str	r2, [r3, #124]	; 0x7c
  settings.voltsoc = 0;        //SOC purely voltage based
    2554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  settings.ESSmode = 0;        //activate ESS mode
    2558:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  settings.gaugehigh = 255;    //full fuel gauge pwm
    255c:	22ff      	movs	r2, #255	; 0xff
  settings.cursens = 2;
    255e:	2402      	movs	r4, #2
  settings.convlow = 643;      // mV/A current sensor low range channel
    2560:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 2608 <loadSettings()+0x158>
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    2564:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 260c <loadSettings()+0x15c>
  settings.ncur = 1;           //number of multiples to use for current measurement
    2568:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
  settings.conthold = 50;      //holding duty cycle for contactor 0-255
    256c:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
  settings.gaugelow = 50;      //empty fuel gauge pwm
    2570:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  settings.gaugehigh = 255;    //full fuel gauge pwm
    2574:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  settings.changecur = 20000;  //mA change overpoint
    2578:	f644 6020 	movw	r0, #20000	; 0x4e20
  settings.Pretime = 5000;     //ms of precharge time
    257c:	f241 3188 	movw	r1, #5000	; 0x1388
  settings.Precurrent = 1000;  //ma before closing main contator
    2580:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  settings.ChargerDirect = 1;  //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    2584:	f8c3 60c8 	str.w	r6, [r3, #200]	; 0xc8
  settings.offset1 = 1750;     //mV mid point of channel 1
    2588:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
  settings.convhigh = 58;      // mV/A current sensor high range channel
    258c:	f8c3 8090 	str.w	r8, [r3, #144]	; 0x90
  settings.convlow = 643;      // mV/A current sensor low range channel
    2590:	f8c3 e094 	str.w	lr, [r3, #148]	; 0x94
  settings.chargerspd = 100;   //ms per message
    2594:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
  settings.UnderDur = 5000;    //ms of allowed undervoltage before throwing open stopping discharge.
    2598:	f8c3 70c0 	str.w	r7, [r3, #192]	; 0xc0
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    259c:	f8c3 c0c4 	str.w	ip, [r3, #196]	; 0xc4
  settings.cursens = 2;
    25a0:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  settings.chargertype = 2;    // 1 - Brusa NLG5xx 2 - Volt charger 0 -No Charger
    25a4:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
  settings.changecur = 20000;  //mA change overpoint
    25a8:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  settings.Pretime = 5000;     //ms of precharge time
    25ac:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
  settings.Precurrent = 1000;  //ma before closing main contator
    25b0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
    25b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    25b8:	00014218 	.word	0x00014218
    25bc:	c1200000 	.word	0xc1200000
    25c0:	3e4ccccd 	.word	0x3e4ccccd
    25c4:	06d606d6 	.word	0x06d606d6
    25c8:	42680000 	.word	0x42680000
    25cc:	00051388 	.word	0x00051388
    25d0:	1fffd0d8 	.word	0x1fffd0d8
    25d4:	40866666 	.word	0x40866666
    25d8:	40400000 	.word	0x40400000
    25dc:	40833333 	.word	0x40833333
    25e0:	3dcccccd 	.word	0x3dcccccd
    25e4:	404ccccd 	.word	0x404ccccd
    25e8:	42200000 	.word	0x42200000
    25ec:	40a00000 	.word	0x40a00000
    25f0:	0007a120 	.word	0x0007a120
    25f4:	40733333 	.word	0x40733333
    25f8:	42820000 	.word	0x42820000
    25fc:	4079999a 	.word	0x4079999a
    2600:	3d23d70a 	.word	0x3d23d70a
    2604:	01f40101 	.word	0x01f40101
    2608:	4420c000 	.word	0x4420c000
    260c:	3e99999a 	.word	0x3e99999a

00002610 <alarmupdate()>:
void alarmupdate() {
    2610:	b570      	push	{r4, r5, r6, lr}
  alarm[0] = 0x00;
    2612:	4d45      	ldr	r5, [pc, #276]	; (2728 <alarmupdate()+0x118>)
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    2614:	4c45      	ldr	r4, [pc, #276]	; (272c <alarmupdate()+0x11c>)
    2616:	4846      	ldr	r0, [pc, #280]	; (2730 <alarmupdate()+0x120>)
    2618:	68e6      	ldr	r6, [r4, #12]
  alarm[0] = 0x00;
    261a:	2300      	movs	r3, #0
    261c:	702b      	strb	r3, [r5, #0]
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    261e:	f7ff f9ab 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    2622:	4601      	mov	r1, r0
    2624:	4630      	mov	r0, r6
    2626:	f00a fe71 	bl	d30c <__aeabi_fcmplt>
    262a:	b108      	cbz	r0, 2630 <alarmupdate()+0x20>
    alarm[0] = 0x04;
    262c:	2304      	movs	r3, #4
    262e:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    2630:	483f      	ldr	r0, [pc, #252]	; (2730 <alarmupdate()+0x120>)
    2632:	f7ff f97b 	bl	192c <BMSModuleManager::getLowCellVolt()>
    2636:	6921      	ldr	r1, [r4, #16]
    2638:	f00a fe68 	bl	d30c <__aeabi_fcmplt>
    263c:	b118      	cbz	r0, 2646 <alarmupdate()+0x36>
    alarm[0] |= 0x10;
    263e:	782b      	ldrb	r3, [r5, #0]
    2640:	f043 0310 	orr.w	r3, r3, #16
    2644:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > settings.OverTSetpoint) {
    2646:	483a      	ldr	r0, [pc, #232]	; (2730 <alarmupdate()+0x120>)
    2648:	f7ff fa46 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    264c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    264e:	f00a fe7b 	bl	d348 <__aeabi_fcmpgt>
    2652:	b118      	cbz	r0, 265c <alarmupdate()+0x4c>
    alarm[0] |= 0x40;
    2654:	782b      	ldrb	r3, [r5, #0]
    2656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    265a:	702b      	strb	r3, [r5, #0]
  alarm[1] = 0;
    265c:	2300      	movs	r3, #0
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    265e:	4834      	ldr	r0, [pc, #208]	; (2730 <alarmupdate()+0x120>)
  alarm[1] = 0;
    2660:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    2662:	f7ff fa3b 	bl	1adc <BMSModuleManager::getLowTemperature()>
    2666:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    2668:	f00a fe50 	bl	d30c <__aeabi_fcmplt>
    266c:	b108      	cbz	r0, 2672 <alarmupdate()+0x62>
    alarm[1] = 0x01;
    266e:	2301      	movs	r3, #1
    2670:	706b      	strb	r3, [r5, #1]
  alarm[3] = 0;
    2672:	2300      	movs	r3, #0
    2674:	70eb      	strb	r3, [r5, #3]
  if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    2676:	482e      	ldr	r0, [pc, #184]	; (2730 <alarmupdate()+0x120>)
    2678:	f7ff f97e 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    267c:	4606      	mov	r6, r0
    267e:	482c      	ldr	r0, [pc, #176]	; (2730 <alarmupdate()+0x120>)
    2680:	f7ff f954 	bl	192c <BMSModuleManager::getLowCellVolt()>
    2684:	4601      	mov	r1, r0
    2686:	4630      	mov	r0, r6
    2688:	f00a fb98 	bl	cdbc <__aeabi_fsub>
    268c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    268e:	f00a fe5b 	bl	d348 <__aeabi_fcmpgt>
    2692:	b108      	cbz	r0, 2698 <alarmupdate()+0x88>
    alarm[3] = 0x01;
    2694:	2301      	movs	r3, #1
    2696:	70eb      	strb	r3, [r5, #3]
  warning[0] = 0;
    2698:	4d26      	ldr	r5, [pc, #152]	; (2734 <alarmupdate()+0x124>)
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    269a:	4825      	ldr	r0, [pc, #148]	; (2730 <alarmupdate()+0x120>)
  warning[0] = 0;
    269c:	2300      	movs	r3, #0
    269e:	702b      	strb	r3, [r5, #0]
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    26a0:	f7ff f96a 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    26a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
    26a6:	4606      	mov	r6, r0
    26a8:	68e0      	ldr	r0, [r4, #12]
    26aa:	f00a fb87 	bl	cdbc <__aeabi_fsub>
    26ae:	4601      	mov	r1, r0
    26b0:	4630      	mov	r0, r6
    26b2:	f00a fe49 	bl	d348 <__aeabi_fcmpgt>
    26b6:	b108      	cbz	r0, 26bc <alarmupdate()+0xac>
    warning[0] = 0x04;
    26b8:	2304      	movs	r3, #4
    26ba:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < (settings.UnderVSetpoint + settings.WarnOff)) {
    26bc:	481c      	ldr	r0, [pc, #112]	; (2730 <alarmupdate()+0x120>)
    26be:	f7ff f935 	bl	192c <BMSModuleManager::getLowCellVolt()>
    26c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    26c4:	4606      	mov	r6, r0
    26c6:	6920      	ldr	r0, [r4, #16]
    26c8:	f00a fb7a 	bl	cdc0 <__addsf3>
    26cc:	4601      	mov	r1, r0
    26ce:	4630      	mov	r0, r6
    26d0:	f00a fe1c 	bl	d30c <__aeabi_fcmplt>
    26d4:	b118      	cbz	r0, 26de <alarmupdate()+0xce>
    warning[0] |= 0x10;
    26d6:	782b      	ldrb	r3, [r5, #0]
    26d8:	f043 0310 	orr.w	r3, r3, #16
    26dc:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > (settings.OverTSetpoint - settings.WarnToff)) {
    26de:	4814      	ldr	r0, [pc, #80]	; (2730 <alarmupdate()+0x120>)
    26e0:	f7ff f9fa 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    26e4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    26e6:	4606      	mov	r6, r0
    26e8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    26ea:	f00a fb67 	bl	cdbc <__aeabi_fsub>
    26ee:	4601      	mov	r1, r0
    26f0:	4630      	mov	r0, r6
    26f2:	f00a fe29 	bl	d348 <__aeabi_fcmpgt>
    26f6:	b118      	cbz	r0, 2700 <alarmupdate()+0xf0>
    warning[0] |= 0x40;
    26f8:	782b      	ldrb	r3, [r5, #0]
    26fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    26fe:	702b      	strb	r3, [r5, #0]
  warning[1] = 0;
    2700:	2300      	movs	r3, #0
    2702:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < (settings.UnderTSetpoint + settings.WarnToff)) {
    2704:	480a      	ldr	r0, [pc, #40]	; (2730 <alarmupdate()+0x120>)
    2706:	f7ff f9e9 	bl	1adc <BMSModuleManager::getLowTemperature()>
    270a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    270c:	4603      	mov	r3, r0
    270e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    2710:	461c      	mov	r4, r3
    2712:	f00a fb55 	bl	cdc0 <__addsf3>
    2716:	4601      	mov	r1, r0
    2718:	4620      	mov	r0, r4
    271a:	f00a fdf7 	bl	d30c <__aeabi_fcmplt>
    271e:	b108      	cbz	r0, 2724 <alarmupdate()+0x114>
    warning[1] = 0x01;
    2720:	2301      	movs	r3, #1
    2722:	706b      	strb	r3, [r5, #1]
}
    2724:	bd70      	pop	{r4, r5, r6, pc}
    2726:	bf00      	nop
    2728:	1fff91e0 	.word	0x1fff91e0
    272c:	1fffd0d8 	.word	0x1fffd0d8
    2730:	1fff91f0 	.word	0x1fff91f0
    2734:	1fffd1c4 	.word	0x1fffd1c4

00002738 <gaugeupdate()>:
void gaugeupdate() {
    2738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (gaugedebug == 1) {
    273c:	4c7f      	ldr	r4, [pc, #508]	; (293c <gaugeupdate()+0x204>)
    273e:	6823      	ldr	r3, [r4, #0]
    2740:	2b01      	cmp	r3, #1
void gaugeupdate() {
    2742:	b082      	sub	sp, #8
  if (gaugedebug == 1) {
    2744:	d049      	beq.n	27da <gaugeupdate()+0xa2>
  if (gaugedebug == 2) {
    2746:	2b02      	cmp	r3, #2
    2748:	f000 80c3 	beq.w	28d2 <gaugeupdate()+0x19a>
  if (gaugedebug == 3) {
    274c:	2b03      	cmp	r3, #3
    274e:	d003      	beq.n	2758 <gaugeupdate()+0x20>
  if (gaugedebug == 0) {
    2750:	b32b      	cbz	r3, 279e <gaugeupdate()+0x66>
}
    2752:	b002      	add	sp, #8
    2754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SOCtest = 1000;
    2758:	4b79      	ldr	r3, [pc, #484]	; (2940 <gaugeupdate()+0x208>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    275a:	4e7a      	ldr	r6, [pc, #488]	; (2944 <gaugeupdate()+0x20c>)
    SOCtest = 1000;
    275c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2760:	601a      	str	r2, [r3, #0]
// when the input is a float or double, do all math using the input's type
template <class T, class A, class B, class C, class D>
T map(T x, A in_min, B in_max, C out_min, D out_max, typename std::enable_if<std::is_floating_point<T>::value >::type* = 0)
{
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    2762:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    2766:	f00a fbdf 	bl	cf28 <__aeabi_i2f>
    276a:	4605      	mov	r5, r0
    276c:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    2770:	f00a fbda 	bl	cf28 <__aeabi_i2f>
    2774:	4629      	mov	r1, r5
    2776:	f00a fb21 	bl	cdbc <__aeabi_fsub>
    277a:	4973      	ldr	r1, [pc, #460]	; (2948 <gaugeupdate()+0x210>)
    277c:	f00a fc28 	bl	cfd0 <__aeabi_fmul>
    2780:	4971      	ldr	r1, [pc, #452]	; (2948 <gaugeupdate()+0x210>)
    2782:	f00a fcd9 	bl	d138 <__aeabi_fdiv>
    2786:	4629      	mov	r1, r5
    2788:	f00a fb1a 	bl	cdc0 <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    278c:	f00a fde6 	bl	d35c <__aeabi_f2iz>
    2790:	4601      	mov	r1, r0
    2792:	2006      	movs	r0, #6
    2794:	f007 fd4c 	bl	a230 <analogWrite>
  if (gaugedebug == 0) {
    2798:	6823      	ldr	r3, [r4, #0]
    279a:	2b00      	cmp	r3, #0
    279c:	d1d9      	bne.n	2752 <gaugeupdate()+0x1a>
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    279e:	4b69      	ldr	r3, [pc, #420]	; (2944 <gaugeupdate()+0x20c>)
    27a0:	486a      	ldr	r0, [pc, #424]	; (294c <gaugeupdate()+0x214>)
    27a2:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
	long out_range = out_max - out_min;
    27a6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
	long num = (x - in_min) * out_range;
    27aa:	6803      	ldr	r3, [r0, #0]
	long result = num / in_range + out_min;
    27ac:	4868      	ldr	r0, [pc, #416]	; (2950 <gaugeupdate()+0x218>)
	long out_range = out_max - out_min;
    27ae:	1a52      	subs	r2, r2, r1
	if (out_range >= 0) {
    27b0:	2a00      	cmp	r2, #0
	long num = (x - in_min) * out_range;
    27b2:	fb02 f303 	mul.w	r3, r2, r3
	if (out_range >= 0) {
    27b6:	f2c0 80b2 	blt.w	291e <gaugeupdate()+0x1e6>
		num += in_range / 2;
    27ba:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
    27bc:	fb80 2003 	smull	r2, r0, r0, r3
    27c0:	17da      	asrs	r2, r3, #31
    27c2:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num < 0) return result - 1;
    27c6:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    27c8:	4411      	add	r1, r2
		if (in_range * num < 0) return result - 1;
    27ca:	f2c0 80b4 	blt.w	2936 <gaugeupdate()+0x1fe>
    27ce:	2006      	movs	r0, #6
}
    27d0:	b002      	add	sp, #8
    27d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    27d6:	f007 bd2b 	b.w	a230 <analogWrite>
    SOCtest = SOCtest + 10;
    27da:	4f59      	ldr	r7, [pc, #356]	; (2940 <gaugeupdate()+0x208>)
    27dc:	6838      	ldr	r0, [r7, #0]
    27de:	300a      	adds	r0, #10
    if (SOCtest > 1000) {
    27e0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    27e4:	f300 8096 	bgt.w	2914 <gaugeupdate()+0x1dc>
    SOCtest = SOCtest + 10;
    27e8:	6038      	str	r0, [r7, #0]
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    27ea:	f00a fb9d 	bl	cf28 <__aeabi_i2f>
    27ee:	4959      	ldr	r1, [pc, #356]	; (2954 <gaugeupdate()+0x21c>)
    27f0:	f00a fbee 	bl	cfd0 <__aeabi_fmul>
    27f4:	4680      	mov	r8, r0
    27f6:	4e53      	ldr	r6, [pc, #332]	; (2944 <gaugeupdate()+0x20c>)
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    27f8:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    27fc:	f00a fb94 	bl	cf28 <__aeabi_i2f>
    2800:	4605      	mov	r5, r0
    2802:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    2806:	f00a fb8f 	bl	cf28 <__aeabi_i2f>
    280a:	4629      	mov	r1, r5
    280c:	f00a fad6 	bl	cdbc <__aeabi_fsub>
    2810:	4641      	mov	r1, r8
    2812:	f00a fbdd 	bl	cfd0 <__aeabi_fmul>
    2816:	494c      	ldr	r1, [pc, #304]	; (2948 <gaugeupdate()+0x210>)
    2818:	f00a fc8e 	bl	d138 <__aeabi_fdiv>
    281c:	4629      	mov	r1, r5
    281e:	f00a facf 	bl	cdc0 <__addsf3>
    2822:	f00a fd9b 	bl	d35c <__aeabi_f2iz>
    2826:	4601      	mov	r1, r0
    2828:	2006      	movs	r0, #6
    282a:	f007 fd01 	bl	a230 <analogWrite>
    282e:	2102      	movs	r1, #2
    2830:	4849      	ldr	r0, [pc, #292]	; (2958 <gaugeupdate()+0x220>)
    2832:	f009 fced 	bl	c210 <usb_serial_write>
    2836:	4849      	ldr	r0, [pc, #292]	; (295c <gaugeupdate()+0x224>)
    2838:	f006 ff9a 	bl	9770 <Print::println()>
    283c:	2106      	movs	r1, #6
    283e:	4848      	ldr	r0, [pc, #288]	; (2960 <gaugeupdate()+0x228>)
    2840:	f009 fce6 	bl	c210 <usb_serial_write>
    SERIALCONSOLE.print(SOCtest * 0.1);
    2844:	6838      	ldr	r0, [r7, #0]
    2846:	f00a fb6f 	bl	cf28 <__aeabi_i2f>
    284a:	4942      	ldr	r1, [pc, #264]	; (2954 <gaugeupdate()+0x21c>)
    284c:	f00a fbc0 	bl	cfd0 <__aeabi_fmul>
    2850:	f00a f99a 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2854:	f04f 0802 	mov.w	r8, #2
    2858:	4602      	mov	r2, r0
    285a:	460b      	mov	r3, r1
    285c:	483f      	ldr	r0, [pc, #252]	; (295c <gaugeupdate()+0x224>)
    285e:	f8cd 8000 	str.w	r8, [sp]
    2862:	f006 ffa9 	bl	97b8 <Print::printFloat(double, unsigned char)>
    2866:	210d      	movs	r1, #13
    2868:	483e      	ldr	r0, [pc, #248]	; (2964 <gaugeupdate()+0x22c>)
    286a:	f009 fcd1 	bl	c210 <usb_serial_write>
    286e:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    2872:	f00a fb59 	bl	cf28 <__aeabi_i2f>
    2876:	4605      	mov	r5, r0
    SERIALCONSOLE.print(map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2878:	6838      	ldr	r0, [r7, #0]
    287a:	f00a fb55 	bl	cf28 <__aeabi_i2f>
    287e:	4935      	ldr	r1, [pc, #212]	; (2954 <gaugeupdate()+0x21c>)
    2880:	f00a fba6 	bl	cfd0 <__aeabi_fmul>
    2884:	4603      	mov	r3, r0
    2886:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    288a:	461e      	mov	r6, r3
    288c:	f00a fb4c 	bl	cf28 <__aeabi_i2f>
    2890:	4629      	mov	r1, r5
    2892:	f00a fa93 	bl	cdbc <__aeabi_fsub>
    2896:	4601      	mov	r1, r0
    2898:	4630      	mov	r0, r6
    289a:	f00a fb99 	bl	cfd0 <__aeabi_fmul>
    289e:	492a      	ldr	r1, [pc, #168]	; (2948 <gaugeupdate()+0x210>)
    28a0:	f00a fc4a 	bl	d138 <__aeabi_fdiv>
    28a4:	4629      	mov	r1, r5
    28a6:	f00a fa8b 	bl	cdc0 <__addsf3>
    28aa:	f00a f96d 	bl	cb88 <__aeabi_f2d>
    28ae:	f8cd 8000 	str.w	r8, [sp]
    28b2:	460b      	mov	r3, r1
    28b4:	4602      	mov	r2, r0
    28b6:	4829      	ldr	r0, [pc, #164]	; (295c <gaugeupdate()+0x224>)
    28b8:	f006 ff7e 	bl	97b8 <Print::printFloat(double, unsigned char)>
    28bc:	4641      	mov	r1, r8
    28be:	4826      	ldr	r0, [pc, #152]	; (2958 <gaugeupdate()+0x220>)
    28c0:	f009 fca6 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    28c4:	4825      	ldr	r0, [pc, #148]	; (295c <gaugeupdate()+0x224>)
    28c6:	f006 ff53 	bl	9770 <Print::println()>
  if (gaugedebug == 2) {
    28ca:	6823      	ldr	r3, [r4, #0]
    28cc:	2b02      	cmp	r3, #2
    28ce:	f47f af3d 	bne.w	274c <gaugeupdate()+0x14>
    SOCtest = 0;
    28d2:	4b1b      	ldr	r3, [pc, #108]	; (2940 <gaugeupdate()+0x208>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    28d4:	4e1b      	ldr	r6, [pc, #108]	; (2944 <gaugeupdate()+0x20c>)
    SOCtest = 0;
    28d6:	2200      	movs	r2, #0
    28d8:	601a      	str	r2, [r3, #0]
    28da:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    28de:	f00a fb23 	bl	cf28 <__aeabi_i2f>
    28e2:	4605      	mov	r5, r0
    28e4:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    28e8:	f00a fb1e 	bl	cf28 <__aeabi_i2f>
    28ec:	4629      	mov	r1, r5
    28ee:	f00a fa65 	bl	cdbc <__aeabi_fsub>
    28f2:	2100      	movs	r1, #0
    28f4:	f00a fb6c 	bl	cfd0 <__aeabi_fmul>
    28f8:	4913      	ldr	r1, [pc, #76]	; (2948 <gaugeupdate()+0x210>)
    28fa:	f00a fc1d 	bl	d138 <__aeabi_fdiv>
    28fe:	4629      	mov	r1, r5
    2900:	f00a fa5e 	bl	cdc0 <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2904:	f00a fd2a 	bl	d35c <__aeabi_f2iz>
    2908:	4601      	mov	r1, r0
    290a:	2006      	movs	r0, #6
    290c:	f007 fc90 	bl	a230 <analogWrite>
  if (gaugedebug == 3) {
    2910:	6823      	ldr	r3, [r4, #0]
    2912:	e71b      	b.n	274c <gaugeupdate()+0x14>
      SOCtest = 0;
    2914:	2300      	movs	r3, #0
    2916:	f04f 0800 	mov.w	r8, #0
    291a:	603b      	str	r3, [r7, #0]
    291c:	e76b      	b.n	27f6 <gaugeupdate()+0xbe>
		num -= in_range / 2;
    291e:	3b32      	subs	r3, #50	; 0x32
	long result = num / in_range + out_min;
    2920:	fb80 2003 	smull	r2, r0, r0, r3
    2924:	17da      	asrs	r2, r3, #31
    2926:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num >= 0) return result + 1;
    292a:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    292c:	4411      	add	r1, r2
		if (in_range * num >= 0) return result + 1;
    292e:	f6ff af4e 	blt.w	27ce <gaugeupdate()+0x96>
    2932:	3101      	adds	r1, #1
    2934:	e74b      	b.n	27ce <gaugeupdate()+0x96>
		if (in_range * num < 0) return result - 1;
    2936:	3901      	subs	r1, #1
    2938:	e749      	b.n	27ce <gaugeupdate()+0x96>
    293a:	bf00      	nop
    293c:	1fffcfdc 	.word	0x1fffcfdc
    2940:	1fff91d0 	.word	0x1fff91d0
    2944:	1fffd0d8 	.word	0x1fffd0d8
    2948:	42c80000 	.word	0x42c80000
    294c:	1fff8828 	.word	0x1fff8828
    2950:	51eb851f 	.word	0x51eb851f
    2954:	3dcccccd 	.word	0x3dcccccd
    2958:	00015030 	.word	0x00015030
    295c:	1fff89fc 	.word	0x1fff89fc
    2960:	00014238 	.word	0x00014238
    2964:	00014240 	.word	0x00014240

00002968 <printbmsstat()>:
void printbmsstat() {
    2968:	b570      	push	{r4, r5, r6, lr}
  SERIALCONSOLE.println();
    296a:	48b2      	ldr	r0, [pc, #712]	; (2c34 <printbmsstat()+0x2cc>)
  if (settings.ESSmode == 1) {
    296c:	4cb2      	ldr	r4, [pc, #712]	; (2c38 <printbmsstat()+0x2d0>)
  SERIALCONSOLE.println();
    296e:	f006 feff 	bl	9770 <Print::println()>
  SERIALCONSOLE.println();
    2972:	48b0      	ldr	r0, [pc, #704]	; (2c34 <printbmsstat()+0x2cc>)
    2974:	f006 fefc 	bl	9770 <Print::println()>
  SERIALCONSOLE.println();
    2978:	48ae      	ldr	r0, [pc, #696]	; (2c34 <printbmsstat()+0x2cc>)
    297a:	f006 fef9 	bl	9770 <Print::println()>
    297e:	48af      	ldr	r0, [pc, #700]	; (2c3c <printbmsstat()+0x2d4>)
    2980:	210d      	movs	r1, #13
    2982:	f009 fc45 	bl	c210 <usb_serial_write>
  if (settings.ESSmode == 1) {
    2986:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    298a:	2b01      	cmp	r3, #1
    298c:	d011      	beq.n	29b2 <printbmsstat()+0x4a>
    SERIALCONSOLE.print(bmsstatus);
    298e:	4cac      	ldr	r4, [pc, #688]	; (2c40 <printbmsstat()+0x2d8>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2990:	48a8      	ldr	r0, [pc, #672]	; (2c34 <printbmsstat()+0x2cc>)
    2992:	7821      	ldrb	r1, [r4, #0]
    2994:	2300      	movs	r3, #0
    2996:	220a      	movs	r2, #10
    2998:	f006 ff02 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    switch (bmsstatus) {
    299c:	7823      	ldrb	r3, [r4, #0]
    299e:	2b05      	cmp	r3, #5
    29a0:	d857      	bhi.n	2a52 <printbmsstat()+0xea>
    29a2:	e8df f013 	tbh	[pc, r3, lsl #1]
    29a6:	0106      	.short	0x0106
    29a8:	0110010b 	.word	0x0110010b
    29ac:	011a0115 	.word	0x011a0115
    29b0:	0101      	.short	0x0101
    29b2:	2109      	movs	r1, #9
    29b4:	48a3      	ldr	r0, [pc, #652]	; (2c44 <printbmsstat()+0x2dc>)
    29b6:	f009 fc2b 	bl	c210 <usb_serial_write>
    if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    29ba:	48a3      	ldr	r0, [pc, #652]	; (2c48 <printbmsstat()+0x2e0>)
    29bc:	f7fe ffb6 	bl	192c <BMSModuleManager::getLowCellVolt()>
    29c0:	6921      	ldr	r1, [r4, #16]
    29c2:	f00a fca3 	bl	d30c <__aeabi_fcmplt>
    29c6:	2800      	cmp	r0, #0
    29c8:	f040 812e 	bne.w	2c28 <printbmsstat()+0x2c0>
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    29cc:	489e      	ldr	r0, [pc, #632]	; (2c48 <printbmsstat()+0x2e0>)
    29ce:	f7fe ffd3 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    29d2:	68e1      	ldr	r1, [r4, #12]
    29d4:	f00a fcb8 	bl	d348 <__aeabi_fcmpgt>
    29d8:	2800      	cmp	r0, #0
    29da:	f040 816c 	bne.w	2cb6 <printbmsstat()+0x34e>
    if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    29de:	489a      	ldr	r0, [pc, #616]	; (2c48 <printbmsstat()+0x2e0>)
    29e0:	f7fe ffca 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    29e4:	4605      	mov	r5, r0
    29e6:	4898      	ldr	r0, [pc, #608]	; (2c48 <printbmsstat()+0x2e0>)
    29e8:	f7fe ffa0 	bl	192c <BMSModuleManager::getLowCellVolt()>
    29ec:	4601      	mov	r1, r0
    29ee:	4628      	mov	r0, r5
    29f0:	f00a f9e4 	bl	cdbc <__aeabi_fsub>
    29f4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    29f6:	f00a fca7 	bl	d348 <__aeabi_fcmpgt>
    29fa:	2800      	cmp	r0, #0
    29fc:	f040 8156 	bne.w	2cac <printbmsstat()+0x344>
    if (bms.getAvgTemperature() > settings.OverTSetpoint) {
    2a00:	4891      	ldr	r0, [pc, #580]	; (2c48 <printbmsstat()+0x2e0>)
    2a02:	f7ff f80b 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    2a06:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    2a08:	f00a fc9e 	bl	d348 <__aeabi_fcmpgt>
    2a0c:	2800      	cmp	r0, #0
    2a0e:	f040 815c 	bne.w	2cca <printbmsstat()+0x362>
    if (bms.getAvgTemperature() < settings.UnderTSetpoint) {
    2a12:	488d      	ldr	r0, [pc, #564]	; (2c48 <printbmsstat()+0x2e0>)
    2a14:	f7ff f802 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    2a18:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    2a1a:	f00a fc77 	bl	d30c <__aeabi_fcmplt>
    2a1e:	2800      	cmp	r0, #0
    2a20:	f040 814e 	bne.w	2cc0 <printbmsstat()+0x358>
    if (storagemode == 1) {
    2a24:	4b89      	ldr	r3, [pc, #548]	; (2c4c <printbmsstat()+0x2e4>)
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    2a26:	4888      	ldr	r0, [pc, #544]	; (2c48 <printbmsstat()+0x2e0>)
    if (storagemode == 1) {
    2a28:	681b      	ldr	r3, [r3, #0]
    2a2a:	2b01      	cmp	r3, #1
    2a2c:	f000 80ec 	beq.w	2c08 <printbmsstat()+0x2a0>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    2a30:	f7fe ff7c 	bl	192c <BMSModuleManager::getLowCellVolt()>
    2a34:	6921      	ldr	r1, [r4, #16]
    2a36:	f00a fc87 	bl	d348 <__aeabi_fcmpgt>
    2a3a:	2800      	cmp	r0, #0
    2a3c:	f040 80d2 	bne.w	2be4 <printbmsstat()+0x27c>
    2a40:	2107      	movs	r1, #7
    2a42:	4883      	ldr	r0, [pc, #524]	; (2c50 <printbmsstat()+0x2e8>)
    2a44:	f009 fbe4 	bl	c210 <usb_serial_write>
    SERIALCONSOLE.print(ErrorReason);
    2a48:	4b82      	ldr	r3, [pc, #520]	; (2c54 <printbmsstat()+0x2ec>)
	size_t print(int n)				{ return print((long)n); }
    2a4a:	487a      	ldr	r0, [pc, #488]	; (2c34 <printbmsstat()+0x2cc>)
    2a4c:	6819      	ldr	r1, [r3, #0]
    2a4e:	f006 fe87 	bl	9760 <Print::print(long)>
    2a52:	2102      	movs	r1, #2
    2a54:	4880      	ldr	r0, [pc, #512]	; (2c58 <printbmsstat()+0x2f0>)
    2a56:	f009 fbdb 	bl	c210 <usb_serial_write>
  if (digitalRead(IN3) == HIGH) {
    2a5a:	2012      	movs	r0, #18
    2a5c:	f007 fd8a 	bl	a574 <digitalRead>
    2a60:	2801      	cmp	r0, #1
    2a62:	f000 809c 	beq.w	2b9e <printbmsstat()+0x236>
  if (digitalRead(IN1) == HIGH) {
    2a66:	2011      	movs	r0, #17
    2a68:	f007 fd84 	bl	a574 <digitalRead>
    2a6c:	2801      	cmp	r0, #1
    2a6e:	f000 8091 	beq.w	2b94 <printbmsstat()+0x22c>
  if (balancecells == 1) {
    2a72:	4b7a      	ldr	r3, [pc, #488]	; (2c5c <printbmsstat()+0x2f4>)
    2a74:	681b      	ldr	r3, [r3, #0]
    2a76:	2b01      	cmp	r3, #1
    2a78:	f000 8087 	beq.w	2b8a <printbmsstat()+0x222>
    2a7c:	2102      	movs	r1, #2
    2a7e:	4876      	ldr	r0, [pc, #472]	; (2c58 <printbmsstat()+0x2f0>)
  if ((contstat & 1) == 1) {
    2a80:	4c77      	ldr	r4, [pc, #476]	; (2c60 <printbmsstat()+0x2f8>)
    2a82:	f009 fbc5 	bl	c210 <usb_serial_write>
  SERIALCONSOLE.print(cellspresent);
    2a86:	4b77      	ldr	r3, [pc, #476]	; (2c64 <printbmsstat()+0x2fc>)
    2a88:	486a      	ldr	r0, [pc, #424]	; (2c34 <printbmsstat()+0x2cc>)
    2a8a:	6819      	ldr	r1, [r3, #0]
    2a8c:	f006 fe68 	bl	9760 <Print::print(long)>
  SERIALCONSOLE.println();
    2a90:	4868      	ldr	r0, [pc, #416]	; (2c34 <printbmsstat()+0x2cc>)
    2a92:	f006 fe6d 	bl	9770 <Print::println()>
    2a96:	2104      	movs	r1, #4
    2a98:	4873      	ldr	r0, [pc, #460]	; (2c68 <printbmsstat()+0x300>)
    2a9a:	f009 fbb9 	bl	c210 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(OUT1));
    2a9e:	200b      	movs	r0, #11
    2aa0:	f007 fd68 	bl	a574 <digitalRead>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2aa4:	2300      	movs	r3, #0
    2aa6:	4601      	mov	r1, r0
    2aa8:	220a      	movs	r2, #10
    2aaa:	4862      	ldr	r0, [pc, #392]	; (2c34 <printbmsstat()+0x2cc>)
    2aac:	f006 fe78 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT2));
    2ab0:	200c      	movs	r0, #12
    2ab2:	f007 fd5f 	bl	a574 <digitalRead>
    2ab6:	2300      	movs	r3, #0
    2ab8:	4601      	mov	r1, r0
    2aba:	220a      	movs	r2, #10
    2abc:	485d      	ldr	r0, [pc, #372]	; (2c34 <printbmsstat()+0x2cc>)
    2abe:	f006 fe6f 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT3));
    2ac2:	2014      	movs	r0, #20
    2ac4:	f007 fd56 	bl	a574 <digitalRead>
    2ac8:	2300      	movs	r3, #0
    2aca:	4601      	mov	r1, r0
    2acc:	220a      	movs	r2, #10
    2ace:	4859      	ldr	r0, [pc, #356]	; (2c34 <printbmsstat()+0x2cc>)
    2ad0:	f006 fe66 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT4));
    2ad4:	2015      	movs	r0, #21
    2ad6:	f007 fd4d 	bl	a574 <digitalRead>
    2ada:	220a      	movs	r2, #10
    2adc:	4601      	mov	r1, r0
    2ade:	2300      	movs	r3, #0
    2ae0:	4854      	ldr	r0, [pc, #336]	; (2c34 <printbmsstat()+0x2cc>)
    2ae2:	f006 fe5d 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2ae6:	2106      	movs	r1, #6
    2ae8:	4860      	ldr	r0, [pc, #384]	; (2c6c <printbmsstat()+0x304>)
    2aea:	f009 fb91 	bl	c210 <usb_serial_write>
  if ((contstat & 1) == 1) {
    2aee:	6823      	ldr	r3, [r4, #0]
    2af0:	07d8      	lsls	r0, r3, #31
    2af2:	bf4b      	itete	mi
    2af4:	2101      	movmi	r1, #1
    2af6:	2101      	movpl	r1, #1
    2af8:	485d      	ldrmi	r0, [pc, #372]	; (2c70 <printbmsstat()+0x308>)
    2afa:	485e      	ldrpl	r0, [pc, #376]	; (2c74 <printbmsstat()+0x30c>)
    2afc:	f009 fb88 	bl	c210 <usb_serial_write>
  if ((contstat & 2) == 2) {
    2b00:	6823      	ldr	r3, [r4, #0]
    2b02:	0799      	lsls	r1, r3, #30
    2b04:	bf4b      	itete	mi
    2b06:	2101      	movmi	r1, #1
    2b08:	2101      	movpl	r1, #1
    2b0a:	4859      	ldrmi	r0, [pc, #356]	; (2c70 <printbmsstat()+0x308>)
    2b0c:	4859      	ldrpl	r0, [pc, #356]	; (2c74 <printbmsstat()+0x30c>)
    2b0e:	f009 fb7f 	bl	c210 <usb_serial_write>
  if ((contstat & 4) == 4) {
    2b12:	6823      	ldr	r3, [r4, #0]
    2b14:	075a      	lsls	r2, r3, #29
    2b16:	bf4b      	itete	mi
    2b18:	2101      	movmi	r1, #1
    2b1a:	2101      	movpl	r1, #1
    2b1c:	4854      	ldrmi	r0, [pc, #336]	; (2c70 <printbmsstat()+0x308>)
    2b1e:	4855      	ldrpl	r0, [pc, #340]	; (2c74 <printbmsstat()+0x30c>)
    2b20:	f009 fb76 	bl	c210 <usb_serial_write>
  if ((contstat & 8) == 8) {
    2b24:	6823      	ldr	r3, [r4, #0]
    2b26:	071b      	lsls	r3, r3, #28
    2b28:	bf4b      	itete	mi
    2b2a:	2101      	movmi	r1, #1
    2b2c:	2101      	movpl	r1, #1
    2b2e:	4850      	ldrmi	r0, [pc, #320]	; (2c70 <printbmsstat()+0x308>)
    2b30:	4850      	ldrpl	r0, [pc, #320]	; (2c74 <printbmsstat()+0x30c>)
    2b32:	f009 fb6d 	bl	c210 <usb_serial_write>
    2b36:	2104      	movs	r1, #4
    2b38:	484f      	ldr	r0, [pc, #316]	; (2c78 <printbmsstat()+0x310>)
    2b3a:	f009 fb69 	bl	c210 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(IN1));
    2b3e:	2011      	movs	r0, #17
    2b40:	f007 fd18 	bl	a574 <digitalRead>
    2b44:	2300      	movs	r3, #0
    2b46:	4601      	mov	r1, r0
    2b48:	220a      	movs	r2, #10
    2b4a:	483a      	ldr	r0, [pc, #232]	; (2c34 <printbmsstat()+0x2cc>)
    2b4c:	f006 fe28 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN2));
    2b50:	2010      	movs	r0, #16
    2b52:	f007 fd0f 	bl	a574 <digitalRead>
    2b56:	2300      	movs	r3, #0
    2b58:	4601      	mov	r1, r0
    2b5a:	220a      	movs	r2, #10
    2b5c:	4835      	ldr	r0, [pc, #212]	; (2c34 <printbmsstat()+0x2cc>)
    2b5e:	f006 fe1f 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN3));
    2b62:	2012      	movs	r0, #18
    2b64:	f007 fd06 	bl	a574 <digitalRead>
    2b68:	2300      	movs	r3, #0
    2b6a:	4601      	mov	r1, r0
    2b6c:	220a      	movs	r2, #10
    2b6e:	4831      	ldr	r0, [pc, #196]	; (2c34 <printbmsstat()+0x2cc>)
    2b70:	f006 fe16 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN4));
    2b74:	2013      	movs	r0, #19
    2b76:	f007 fcfd 	bl	a574 <digitalRead>
}
    2b7a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SERIALCONSOLE.print(digitalRead(IN4));
    2b7e:	4601      	mov	r1, r0
    2b80:	2300      	movs	r3, #0
    2b82:	482c      	ldr	r0, [pc, #176]	; (2c34 <printbmsstat()+0x2cc>)
    2b84:	220a      	movs	r2, #10
    2b86:	f006 be0b 	b.w	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2b8a:	2111      	movs	r1, #17
    2b8c:	483b      	ldr	r0, [pc, #236]	; (2c7c <printbmsstat()+0x314>)
    2b8e:	f009 fb3f 	bl	c210 <usb_serial_write>
    2b92:	e773      	b.n	2a7c <printbmsstat()+0x114>
    2b94:	210a      	movs	r1, #10
    2b96:	483a      	ldr	r0, [pc, #232]	; (2c80 <printbmsstat()+0x318>)
    2b98:	f009 fb3a 	bl	c210 <usb_serial_write>
    2b9c:	e769      	b.n	2a72 <printbmsstat()+0x10a>
    2b9e:	210e      	movs	r1, #14
    2ba0:	4838      	ldr	r0, [pc, #224]	; (2c84 <printbmsstat()+0x31c>)
    2ba2:	f009 fb35 	bl	c210 <usb_serial_write>
    2ba6:	e75e      	b.n	2a66 <printbmsstat()+0xfe>
    2ba8:	2107      	movs	r1, #7
    2baa:	4837      	ldr	r0, [pc, #220]	; (2c88 <printbmsstat()+0x320>)
    2bac:	f009 fb30 	bl	c210 <usb_serial_write>
    2bb0:	e74f      	b.n	2a52 <printbmsstat()+0xea>
    2bb2:	2106      	movs	r1, #6
    2bb4:	4835      	ldr	r0, [pc, #212]	; (2c8c <printbmsstat()+0x324>)
    2bb6:	f009 fb2b 	bl	c210 <usb_serial_write>
    2bba:	e74a      	b.n	2a52 <printbmsstat()+0xea>
    2bbc:	2107      	movs	r1, #7
    2bbe:	4834      	ldr	r0, [pc, #208]	; (2c90 <printbmsstat()+0x328>)
    2bc0:	f009 fb26 	bl	c210 <usb_serial_write>
    2bc4:	e745      	b.n	2a52 <printbmsstat()+0xea>
    2bc6:	2107      	movs	r1, #7
    2bc8:	4832      	ldr	r0, [pc, #200]	; (2c94 <printbmsstat()+0x32c>)
    2bca:	f009 fb21 	bl	c210 <usb_serial_write>
    2bce:	e740      	b.n	2a52 <printbmsstat()+0xea>
    2bd0:	2108      	movs	r1, #8
    2bd2:	4831      	ldr	r0, [pc, #196]	; (2c98 <printbmsstat()+0x330>)
    2bd4:	f009 fb1c 	bl	c210 <usb_serial_write>
    2bd8:	e73b      	b.n	2a52 <printbmsstat()+0xea>
    2bda:	210b      	movs	r1, #11
    2bdc:	482f      	ldr	r0, [pc, #188]	; (2c9c <printbmsstat()+0x334>)
    2bde:	f009 fb17 	bl	c210 <usb_serial_write>
    2be2:	e736      	b.n	2a52 <printbmsstat()+0xea>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    2be4:	4818      	ldr	r0, [pc, #96]	; (2c48 <printbmsstat()+0x2e0>)
    2be6:	f7fe fec7 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    2bea:	68e1      	ldr	r1, [r4, #12]
    2bec:	f00a fb8e 	bl	d30c <__aeabi_fcmplt>
    2bf0:	2800      	cmp	r0, #0
    2bf2:	f43f af25 	beq.w	2a40 <printbmsstat()+0xd8>
        if (bmsstatus == Error) {
    2bf6:	4b12      	ldr	r3, [pc, #72]	; (2c40 <printbmsstat()+0x2d8>)
    2bf8:	781b      	ldrb	r3, [r3, #0]
    2bfa:	2b05      	cmp	r3, #5
    2bfc:	d16a      	bne.n	2cd4 <printbmsstat()+0x36c>
    2bfe:	210a      	movs	r1, #10
    2c00:	4827      	ldr	r0, [pc, #156]	; (2ca0 <printbmsstat()+0x338>)
    2c02:	f009 fb05 	bl	c210 <usb_serial_write>
    2c06:	e71b      	b.n	2a40 <printbmsstat()+0xd8>
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    2c08:	f7fe fe90 	bl	192c <BMSModuleManager::getLowCellVolt()>
    2c0c:	6a21      	ldr	r1, [r4, #32]
    2c0e:	f00a fb9b 	bl	d348 <__aeabi_fcmpgt>
    2c12:	2800      	cmp	r0, #0
    2c14:	d05e      	beq.n	2cd4 <printbmsstat()+0x36c>
    2c16:	2116      	movs	r1, #22
    2c18:	4822      	ldr	r0, [pc, #136]	; (2ca4 <printbmsstat()+0x33c>)
    2c1a:	f009 faf9 	bl	c210 <usb_serial_write>
    2c1e:	210a      	movs	r1, #10
    2c20:	481f      	ldr	r0, [pc, #124]	; (2ca0 <printbmsstat()+0x338>)
    2c22:	f009 faf5 	bl	c210 <usb_serial_write>
    2c26:	e70b      	b.n	2a40 <printbmsstat()+0xd8>
    2c28:	210f      	movs	r1, #15
    2c2a:	481f      	ldr	r0, [pc, #124]	; (2ca8 <printbmsstat()+0x340>)
    2c2c:	f009 faf0 	bl	c210 <usb_serial_write>
    2c30:	e6cc      	b.n	29cc <printbmsstat()+0x64>
    2c32:	bf00      	nop
    2c34:	1fff89fc 	.word	0x1fff89fc
    2c38:	1fffd0d8 	.word	0x1fffd0d8
    2c3c:	00014250 	.word	0x00014250
    2c40:	1fffcf34 	.word	0x1fffcf34
    2c44:	00014260 	.word	0x00014260
    2c48:	1fff91f0 	.word	0x1fff91f0
    2c4c:	1fffd1b0 	.word	0x1fffd1b0
    2c50:	000142f0 	.word	0x000142f0
    2c54:	1fff91b0 	.word	0x1fff91b0
    2c58:	00015030 	.word	0x00015030
    2c5c:	1fff91e8 	.word	0x1fff91e8
    2c60:	1fffcfb4 	.word	0x1fffcfb4
    2c64:	1fffcf3c 	.word	0x1fffcf3c
    2c68:	00014360 	.word	0x00014360
    2c6c:	00014368 	.word	0x00014368
    2c70:	00014370 	.word	0x00014370
    2c74:	00014374 	.word	0x00014374
    2c78:	00014378 	.word	0x00014378
    2c7c:	0001434c 	.word	0x0001434c
    2c80:	00014340 	.word	0x00014340
    2c84:	00014330 	.word	0x00014330
    2c88:	00014328 	.word	0x00014328
    2c8c:	000142f8 	.word	0x000142f8
    2c90:	00014300 	.word	0x00014300
    2c94:	00014314 	.word	0x00014314
    2c98:	0001431c 	.word	0x0001431c
    2c9c:	00014308 	.word	0x00014308
    2ca0:	000142d8 	.word	0x000142d8
    2ca4:	000142c0 	.word	0x000142c0
    2ca8:	0001426c 	.word	0x0001426c
    2cac:	2111      	movs	r1, #17
    2cae:	480c      	ldr	r0, [pc, #48]	; (2ce0 <printbmsstat()+0x378>)
    2cb0:	f009 faae 	bl	c210 <usb_serial_write>
    2cb4:	e6a4      	b.n	2a00 <printbmsstat()+0x98>
    2cb6:	210e      	movs	r1, #14
    2cb8:	480a      	ldr	r0, [pc, #40]	; (2ce4 <printbmsstat()+0x37c>)
    2cba:	f009 faa9 	bl	c210 <usb_serial_write>
    2cbe:	e68e      	b.n	29de <printbmsstat()+0x76>
    2cc0:	210d      	movs	r1, #13
    2cc2:	4809      	ldr	r0, [pc, #36]	; (2ce8 <printbmsstat()+0x380>)
    2cc4:	f009 faa4 	bl	c210 <usb_serial_write>
    2cc8:	e6ac      	b.n	2a24 <printbmsstat()+0xbc>
    2cca:	210c      	movs	r1, #12
    2ccc:	4807      	ldr	r0, [pc, #28]	; (2cec <printbmsstat()+0x384>)
    2cce:	f009 fa9f 	bl	c210 <usb_serial_write>
    2cd2:	e69e      	b.n	2a12 <printbmsstat()+0xaa>
    2cd4:	2108      	movs	r1, #8
    2cd6:	4806      	ldr	r0, [pc, #24]	; (2cf0 <printbmsstat()+0x388>)
    2cd8:	f009 fa9a 	bl	c210 <usb_serial_write>
    2cdc:	e6b0      	b.n	2a40 <printbmsstat()+0xd8>
    2cde:	bf00      	nop
    2ce0:	0001428c 	.word	0x0001428c
    2ce4:	0001427c 	.word	0x0001427c
    2ce8:	000142b0 	.word	0x000142b0
    2cec:	000142a0 	.word	0x000142a0
    2cf0:	000142e4 	.word	0x000142e4

00002cf4 <getcurrent()>:
void getcurrent() {
    2cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    2cf8:	4cb5      	ldr	r4, [pc, #724]	; (2fd0 <getcurrent()+0x2dc>)
    2cfa:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    2cfe:	2e01      	cmp	r6, #1
void getcurrent() {
    2d00:	b08c      	sub	sp, #48	; 0x30
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    2d02:	f000 8144 	beq.w	2f8e <getcurrent()+0x29a>
    2d06:	2e03      	cmp	r6, #3
    2d08:	d05c      	beq.n	2dc4 <getcurrent()+0xd0>
    2d0a:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 2fd4 <getcurrent()+0x2e0>
    2d0e:	4fb2      	ldr	r7, [pc, #712]	; (2fd8 <getcurrent()+0x2e4>)
    2d10:	4eb2      	ldr	r6, [pc, #712]	; (2fdc <getcurrent()+0x2e8>)
  if (settings.invertcur == 1) {
    2d12:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  lowpassFilter.input(RawCur);
    2d14:	48b2      	ldr	r0, [pc, #712]	; (2fe0 <getcurrent()+0x2ec>)
  if (settings.invertcur == 1) {
    2d16:	2b01      	cmp	r3, #1
    RawCur = RawCur * -1;
    2d18:	bf09      	itett	eq
    2d1a:	6831      	ldreq	r1, [r6, #0]
    2d1c:	6831      	ldrne	r1, [r6, #0]
    2d1e:	f101 4100 	addeq.w	r1, r1, #2147483648	; 0x80000000
    2d22:	6031      	streq	r1, [r6, #0]
  lowpassFilter.input(RawCur);
    2d24:	f006 fac8 	bl	92b8 <FilterOnePole::input(float)>
  if (debugCur != 0) {
    2d28:	683b      	ldr	r3, [r7, #0]
    2d2a:	2b00      	cmp	r3, #0
    2d2c:	f040 8115 	bne.w	2f5a <getcurrent()+0x266>
  currentact = lowpassFilter.output();
    2d30:	48ab      	ldr	r0, [pc, #684]	; (2fe0 <getcurrent()+0x2ec>)
    2d32:	f006 fa95 	bl	9260 <FilterOnePole::output()>
  if (debugCur != 0) {
    2d36:	683b      	ldr	r3, [r7, #0]
  currentact = lowpassFilter.output();
    2d38:	f8c8 0000 	str.w	r0, [r8]
    2d3c:	4605      	mov	r5, r0
  if (debugCur != 0) {
    2d3e:	2b00      	cmp	r3, #0
    2d40:	f040 80fb 	bne.w	2f3a <getcurrent()+0x246>
  if (settings.cursens == Analoguedual) {
    2d44:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    2d48:	2b01      	cmp	r3, #1
    2d4a:	f000 80ba 	beq.w	2ec2 <getcurrent()+0x1ce>
    if (currentact > 500 || currentact < -500) {
    2d4e:	49a5      	ldr	r1, [pc, #660]	; (2fe4 <getcurrent()+0x2f0>)
    2d50:	4628      	mov	r0, r5
    2d52:	f00a faf9 	bl	d348 <__aeabi_fcmpgt>
    2d56:	b930      	cbnz	r0, 2d66 <getcurrent()+0x72>
    2d58:	49a3      	ldr	r1, [pc, #652]	; (2fe8 <getcurrent()+0x2f4>)
    2d5a:	4628      	mov	r0, r5
    2d5c:	f00a fad6 	bl	d30c <__aeabi_fcmplt>
    2d60:	2800      	cmp	r0, #0
    2d62:	f000 81e0 	beq.w	3126 <getcurrent()+0x432>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d66:	f8df a284 	ldr.w	sl, [pc, #644]	; 2fec <getcurrent()+0x2f8>
      ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2d6a:	f8df 9284 	ldr.w	r9, [pc, #644]	; 2ff0 <getcurrent()+0x2fc>
    2d6e:	f8da 3000 	ldr.w	r3, [sl]
    2d72:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    2d74:	980a      	ldr	r0, [sp, #40]	; 0x28
    2d76:	f8d9 3000 	ldr.w	r3, [r9]
    2d7a:	4f9e      	ldr	r7, [pc, #632]	; (2ff4 <getcurrent()+0x300>)
    2d7c:	1ac0      	subs	r0, r0, r3
    2d7e:	f00a f8cf 	bl	cf20 <__aeabi_ui2f>
    2d82:	4629      	mov	r1, r5
    2d84:	f00a f924 	bl	cfd0 <__aeabi_fmul>
    2d88:	499b      	ldr	r1, [pc, #620]	; (2ff8 <getcurrent()+0x304>)
    2d8a:	f00a f9d5 	bl	d138 <__aeabi_fdiv>
    2d8e:	499a      	ldr	r1, [pc, #616]	; (2ff8 <getcurrent()+0x304>)
    2d90:	f00a f9d2 	bl	d138 <__aeabi_fdiv>
    2d94:	6839      	ldr	r1, [r7, #0]
    2d96:	f00a f813 	bl	cdc0 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d9a:	f8da 3000 	ldr.w	r3, [sl]
    2d9e:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    2da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2da2:	6038      	str	r0, [r7, #0]
      lasttime = millis();
    2da4:	f8c9 3000 	str.w	r3, [r9]
  currentact = settings.ncur * currentact;
    2da8:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    2dac:	f00a f8bc 	bl	cf28 <__aeabi_i2f>
    2db0:	4629      	mov	r1, r5
    2db2:	f00a f90d 	bl	cfd0 <__aeabi_fmul>
  RawCur = 0;
    2db6:	2300      	movs	r3, #0
  currentact = settings.ncur * currentact;
    2db8:	f8c8 0000 	str.w	r0, [r8]
  RawCur = 0;
    2dbc:	6033      	str	r3, [r6, #0]
}
    2dbe:	b00c      	add	sp, #48	; 0x30
    2dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      adc->adc0->startContinuous(ACUR1);
    2dc4:	4d8d      	ldr	r5, [pc, #564]	; (2ffc <getcurrent()+0x308>)
      sensor = 1;
    2dc6:	4f8e      	ldr	r7, [pc, #568]	; (3000 <getcurrent()+0x30c>)
      adc->adc0->startContinuous(ACUR1);
    2dc8:	682a      	ldr	r2, [r5, #0]
    2dca:	f8df 8208 	ldr.w	r8, [pc, #520]	; 2fd4 <getcurrent()+0x2e0>
    2dce:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      sensor = 1;
    2dd2:	2301      	movs	r3, #1
      adc->adc0->startContinuous(ACUR1);
    2dd4:	210f      	movs	r1, #15
      sensor = 1;
    2dd6:	603b      	str	r3, [r7, #0]
      adc->adc0->startContinuous(ACUR1);
    2dd8:	f006 f92c 	bl	9034 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    2ddc:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    2dde:	4f7e      	ldr	r7, [pc, #504]	; (2fd8 <getcurrent()+0x2e4>)
    if (sensor == 1) {
    2de0:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    2de2:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    2de4:	f000 812c 	beq.w	3040 <getcurrent()+0x34c>
      if (debugCur != 0) {
    2de8:	2b00      	cmp	r3, #0
    2dea:	f040 81af 	bne.w	314c <getcurrent()+0x458>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2dee:	682b      	ldr	r3, [r5, #0]
    2df0:	f8df 9210 	ldr.w	r9, [pc, #528]	; 3004 <getcurrent()+0x310>
    2df4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    int analogReadContinuous() __attribute__((always_inline))
    {
#ifdef ADC_TEENSY_4
        return (int16_t)(int32_t)adc_regs.R0;
#else
        return (int16_t)(int32_t)adc_regs.RA;
    2df8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2dfa:	691e      	ldr	r6, [r3, #16]
    2dfc:	b2b6      	uxth	r6, r6
    2dfe:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    2e02:	f005 fe5f 	bl	8ac4 <ADC_Module::getMaxValue()>
    2e06:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
    2e0a:	f640 43e4 	movw	r3, #3300	; 0xce4
    2e0e:	fb06 f303 	mul.w	r3, r6, r3
    2e12:	fbb3 f0f0 	udiv	r0, r3, r0
    2e16:	1a80      	subs	r0, r0, r2
    2e18:	b200      	sxth	r0, r0
    2e1a:	f00a f885 	bl	cf28 <__aeabi_i2f>
    2e1e:	497a      	ldr	r1, [pc, #488]	; (3008 <getcurrent()+0x314>)
    2e20:	4606      	mov	r6, r0
    2e22:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    2e26:	f00a f8d3 	bl	cfd0 <__aeabi_fmul>
    2e2a:	4601      	mov	r1, r0
    2e2c:	4630      	mov	r0, r6
    2e2e:	f00a f983 	bl	d138 <__aeabi_fdiv>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2e32:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    2e36:	4e69      	ldr	r6, [pc, #420]	; (2fdc <getcurrent()+0x2e8>)
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2e38:	2b63      	cmp	r3, #99	; 0x63
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    2e3a:	6030      	str	r0, [r6, #0]
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2e3c:	f300 817a 	bgt.w	3134 <getcurrent()+0x440>
        RawCur = 0;
    2e40:	2300      	movs	r3, #0
    2e42:	6033      	str	r3, [r6, #0]
      if (debugCur != 0) {
    2e44:	683b      	ldr	r3, [r7, #0]
    2e46:	2b00      	cmp	r3, #0
    2e48:	f43f af63 	beq.w	2d12 <getcurrent()+0x1e>
    2e4c:	2102      	movs	r1, #2
    2e4e:	486f      	ldr	r0, [pc, #444]	; (300c <getcurrent()+0x318>)
    2e50:	f009 f9de 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print((float(value * 3300 / adc->adc0->getMaxValue()) - settings.offset2));
    2e54:	682b      	ldr	r3, [r5, #0]
    2e56:	f8d9 5000 	ldr.w	r5, [r9]
    2e5a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2e5e:	f640 43e4 	movw	r3, #3300	; 0xce4
    2e62:	fb03 f505 	mul.w	r5, r3, r5
    2e66:	f005 fe2d 	bl	8ac4 <ADC_Module::getMaxValue()>
    2e6a:	fbb5 f0f0 	udiv	r0, r5, r0
    2e6e:	f00a f857 	bl	cf20 <__aeabi_ui2f>
    2e72:	4605      	mov	r5, r0
    2e74:	f8b4 008a 	ldrh.w	r0, [r4, #138]	; 0x8a
    2e78:	f00a f856 	bl	cf28 <__aeabi_i2f>
    2e7c:	4601      	mov	r1, r0
    2e7e:	4628      	mov	r0, r5
    2e80:	f009 ff9c 	bl	cdbc <__aeabi_fsub>
    2e84:	f009 fe80 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2e88:	2502      	movs	r5, #2
    2e8a:	4602      	mov	r2, r0
    2e8c:	460b      	mov	r3, r1
    2e8e:	9500      	str	r5, [sp, #0]
    2e90:	485f      	ldr	r0, [pc, #380]	; (3010 <getcurrent()+0x31c>)
    2e92:	f006 fc91 	bl	97b8 <Print::printFloat(double, unsigned char)>
    2e96:	4629      	mov	r1, r5
    2e98:	485c      	ldr	r0, [pc, #368]	; (300c <getcurrent()+0x318>)
    2e9a:	f009 f9b9 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    2e9e:	6830      	ldr	r0, [r6, #0]
    2ea0:	f009 fe72 	bl	cb88 <__aeabi_f2d>
    2ea4:	9500      	str	r5, [sp, #0]
    2ea6:	4602      	mov	r2, r0
    2ea8:	460b      	mov	r3, r1
    2eaa:	4859      	ldr	r0, [pc, #356]	; (3010 <getcurrent()+0x31c>)
    2eac:	f006 fc84 	bl	97b8 <Print::printFloat(double, unsigned char)>
    2eb0:	4629      	mov	r1, r5
    2eb2:	4858      	ldr	r0, [pc, #352]	; (3014 <getcurrent()+0x320>)
    2eb4:	f009 f9ac 	bl	c210 <usb_serial_write>
    2eb8:	4629      	mov	r1, r5
    2eba:	4854      	ldr	r0, [pc, #336]	; (300c <getcurrent()+0x318>)
    2ebc:	f009 f9a8 	bl	c210 <usb_serial_write>
    2ec0:	e727      	b.n	2d12 <getcurrent()+0x1e>
    if (sensor == 1) {
    2ec2:	4b4f      	ldr	r3, [pc, #316]	; (3000 <getcurrent()+0x30c>)
    2ec4:	681b      	ldr	r3, [r3, #0]
    2ec6:	2b01      	cmp	r3, #1
    2ec8:	f000 8175 	beq.w	31b6 <getcurrent()+0x4c2>
    if (sensor == 2) {
    2ecc:	2b02      	cmp	r3, #2
    2ece:	f47f af6b 	bne.w	2da8 <getcurrent()+0xb4>
      if (currentact > settings.changecur || currentact < (settings.changecur * -1)) {
    2ed2:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    2ed6:	4638      	mov	r0, r7
    2ed8:	f00a f826 	bl	cf28 <__aeabi_i2f>
    2edc:	4629      	mov	r1, r5
    2ede:	f00a fa15 	bl	d30c <__aeabi_fcmplt>
    2ee2:	b940      	cbnz	r0, 2ef6 <getcurrent()+0x202>
    2ee4:	4278      	negs	r0, r7
    2ee6:	f00a f81f 	bl	cf28 <__aeabi_i2f>
    2eea:	4629      	mov	r1, r5
    2eec:	f00a fa2c 	bl	d348 <__aeabi_fcmpgt>
    2ef0:	2800      	cmp	r0, #0
    2ef2:	f000 81ce 	beq.w	3292 <getcurrent()+0x59e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2ef6:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2fec <getcurrent()+0x2f8>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2efa:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 2ff0 <getcurrent()+0x2fc>
    2efe:	f8da 3000 	ldr.w	r3, [sl]
    2f02:	9307      	str	r3, [sp, #28]
	return ret;
    2f04:	9807      	ldr	r0, [sp, #28]
    2f06:	f8d9 3000 	ldr.w	r3, [r9]
    2f0a:	4f3a      	ldr	r7, [pc, #232]	; (2ff4 <getcurrent()+0x300>)
    2f0c:	1ac0      	subs	r0, r0, r3
    2f0e:	f00a f807 	bl	cf20 <__aeabi_ui2f>
    2f12:	4629      	mov	r1, r5
    2f14:	f00a f85c 	bl	cfd0 <__aeabi_fmul>
    2f18:	4937      	ldr	r1, [pc, #220]	; (2ff8 <getcurrent()+0x304>)
    2f1a:	f00a f90d 	bl	d138 <__aeabi_fdiv>
    2f1e:	4936      	ldr	r1, [pc, #216]	; (2ff8 <getcurrent()+0x304>)
    2f20:	f00a f90a 	bl	d138 <__aeabi_fdiv>
    2f24:	6839      	ldr	r1, [r7, #0]
    2f26:	f009 ff4b 	bl	cdc0 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2f2a:	f8da 3000 	ldr.w	r3, [sl]
    2f2e:	9306      	str	r3, [sp, #24]
	return ret;
    2f30:	9b06      	ldr	r3, [sp, #24]
    2f32:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    2f34:	f8c9 3000 	str.w	r3, [r9]
    2f38:	e736      	b.n	2da8 <getcurrent()+0xb4>
    SERIALCONSOLE.print(currentact);
    2f3a:	f009 fe25 	bl	cb88 <__aeabi_f2d>
    2f3e:	460b      	mov	r3, r1
    2f40:	2102      	movs	r1, #2
    2f42:	4602      	mov	r2, r0
    2f44:	9100      	str	r1, [sp, #0]
    2f46:	4832      	ldr	r0, [pc, #200]	; (3010 <getcurrent()+0x31c>)
    2f48:	f006 fc36 	bl	97b8 <Print::printFloat(double, unsigned char)>
    2f4c:	4832      	ldr	r0, [pc, #200]	; (3018 <getcurrent()+0x324>)
    2f4e:	2104      	movs	r1, #4
    2f50:	f009 f95e 	bl	c210 <usb_serial_write>
      if (currentact > 500 || currentact < -500) {
    2f54:	f8d8 5000 	ldr.w	r5, [r8]
    2f58:	e6f4      	b.n	2d44 <getcurrent()+0x50>
    SERIALCONSOLE.print(lowpassFilter.output());
    2f5a:	4821      	ldr	r0, [pc, #132]	; (2fe0 <getcurrent()+0x2ec>)
    2f5c:	f006 f980 	bl	9260 <FilterOnePole::output()>
    2f60:	f009 fe12 	bl	cb88 <__aeabi_f2d>
    2f64:	460b      	mov	r3, r1
    2f66:	2102      	movs	r1, #2
    2f68:	4602      	mov	r2, r0
    2f6a:	9100      	str	r1, [sp, #0]
    2f6c:	4828      	ldr	r0, [pc, #160]	; (3010 <getcurrent()+0x31c>)
    2f6e:	f006 fc23 	bl	97b8 <Print::printFloat(double, unsigned char)>
    2f72:	2103      	movs	r1, #3
    2f74:	4829      	ldr	r0, [pc, #164]	; (301c <getcurrent()+0x328>)
    2f76:	f009 f94b 	bl	c210 <usb_serial_write>
    SERIALCONSOLE.print(settings.changecur);
    2f7a:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    2f7e:	4824      	ldr	r0, [pc, #144]	; (3010 <getcurrent()+0x31c>)
    2f80:	f006 fbee 	bl	9760 <Print::print(long)>
    2f84:	2103      	movs	r1, #3
    2f86:	4825      	ldr	r0, [pc, #148]	; (301c <getcurrent()+0x328>)
    2f88:	f009 f942 	bl	c210 <usb_serial_write>
    2f8c:	e6d0      	b.n	2d30 <getcurrent()+0x3c>
      if (currentact < settings.changecur && currentact > (settings.changecur * -1)) {
    2f8e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2fd4 <getcurrent()+0x2e0>
    2f92:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    2f96:	f8d8 5000 	ldr.w	r5, [r8]
    2f9a:	4638      	mov	r0, r7
    2f9c:	f009 ffc4 	bl	cf28 <__aeabi_i2f>
    2fa0:	4629      	mov	r1, r5
    2fa2:	f00a f9d1 	bl	d348 <__aeabi_fcmpgt>
    2fa6:	2800      	cmp	r0, #0
    2fa8:	d03a      	beq.n	3020 <getcurrent()+0x32c>
    2faa:	4278      	negs	r0, r7
    2fac:	f009 ffbc 	bl	cf28 <__aeabi_i2f>
    2fb0:	4601      	mov	r1, r0
    2fb2:	4628      	mov	r0, r5
    2fb4:	f00a f9c8 	bl	d348 <__aeabi_fcmpgt>
    2fb8:	b390      	cbz	r0, 3020 <getcurrent()+0x32c>
        adc->startContinuous(ACUR1);
    2fba:	4d10      	ldr	r5, [pc, #64]	; (2ffc <getcurrent()+0x308>)
        sensor = 1;
    2fbc:	4f10      	ldr	r7, [pc, #64]	; (3000 <getcurrent()+0x30c>)
        adc->startContinuous(ACUR1);
    2fbe:	6828      	ldr	r0, [r5, #0]
        sensor = 1;
    2fc0:	603e      	str	r6, [r7, #0]
        adc->startContinuous(ACUR1);
    2fc2:	f04f 32ff 	mov.w	r2, #4294967295
    2fc6:	210f      	movs	r1, #15
    2fc8:	f005 fd26 	bl	8a18 <ADC::startContinuous(unsigned char, signed char)>
    2fcc:	e706      	b.n	2ddc <getcurrent()+0xe8>
    2fce:	bf00      	nop
    2fd0:	1fffd0d8 	.word	0x1fffd0d8
    2fd4:	1fffcfc4 	.word	0x1fffcfc4
    2fd8:	1fffcfc8 	.word	0x1fffcfc8
    2fdc:	1fff91c0 	.word	0x1fff91c0
    2fe0:	1fffd00c 	.word	0x1fffd00c
    2fe4:	43fa0000 	.word	0x43fa0000
    2fe8:	c3fa0000 	.word	0xc3fa0000
    2fec:	1fffd3c0 	.word	0x1fffd3c0
    2ff0:	1fffd000 	.word	0x1fffd000
    2ff4:	1fff91e4 	.word	0x1fff91e4
    2ff8:	447a0000 	.word	0x447a0000
    2ffc:	1fff91dc 	.word	0x1fff91dc
    3000:	1fff8878 	.word	0x1fff8878
    3004:	1fffd1b8 	.word	0x1fffd1b8
    3008:	3727c5ac 	.word	0x3727c5ac
    300c:	00015030 	.word	0x00015030
    3010:	1fff89fc 	.word	0x1fff89fc
    3014:	000143bc 	.word	0x000143bc
    3018:	000143c0 	.word	0x000143c0
    301c:	00013d38 	.word	0x00013d38
        sensor = 2;
    3020:	4f9f      	ldr	r7, [pc, #636]	; (32a0 <getcurrent()+0x5ac>)
        adc->adc0->startContinuous(ACUR2);
    3022:	4da0      	ldr	r5, [pc, #640]	; (32a4 <getcurrent()+0x5b0>)
        sensor = 2;
    3024:	2302      	movs	r3, #2
    3026:	603b      	str	r3, [r7, #0]
        adc->adc0->startContinuous(ACUR2);
    3028:	682b      	ldr	r3, [r5, #0]
    302a:	210e      	movs	r1, #14
    302c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3030:	f006 f800 	bl	9034 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    3034:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    3036:	4f9c      	ldr	r7, [pc, #624]	; (32a8 <getcurrent()+0x5b4>)
    if (sensor == 1) {
    3038:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    303a:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    303c:	f47f aed4 	bne.w	2de8 <getcurrent()+0xf4>
      if (debugCur != 0) {
    3040:	2b00      	cmp	r3, #0
    3042:	f040 80e5 	bne.w	3210 <getcurrent()+0x51c>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3046:	682b      	ldr	r3, [r5, #0]
    3048:	f8df 9260 	ldr.w	r9, [pc, #608]	; 32ac <getcurrent()+0x5b8>
    304c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3050:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3052:	691e      	ldr	r6, [r3, #16]
    3054:	b2b6      	uxth	r6, r6
    3056:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    305a:	f005 fd33 	bl	8ac4 <ADC_Module::getMaxValue()>
    305e:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    3062:	f640 4ae4 	movw	sl, #3300	; 0xce4
    3066:	fb0a f606 	mul.w	r6, sl, r6
    306a:	fbb6 f6f0 	udiv	r6, r6, r0
    306e:	1af0      	subs	r0, r6, r3
    3070:	b200      	sxth	r0, r0
    3072:	f009 ff59 	bl	cf28 <__aeabi_i2f>
    3076:	498e      	ldr	r1, [pc, #568]	; (32b0 <getcurrent()+0x5bc>)
    3078:	4606      	mov	r6, r0
    307a:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    307e:	f009 ffa7 	bl	cfd0 <__aeabi_fmul>
    3082:	4601      	mov	r1, r0
    3084:	4630      	mov	r0, r6
    3086:	f00a f857 	bl	d138 <__aeabi_fdiv>
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    308a:	682b      	ldr	r3, [r5, #0]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    308c:	4e89      	ldr	r6, [pc, #548]	; (32b4 <getcurrent()+0x5c0>)
    308e:	4602      	mov	r2, r0
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    3090:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3094:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    3098:	6032      	str	r2, [r6, #0]
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    309a:	fb0a fa03 	mul.w	sl, sl, r3
    309e:	f005 fd11 	bl	8ac4 <ADC_Module::getMaxValue()>
    30a2:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
    30a6:	fbba f3f0 	udiv	r3, sl, r0
    30aa:	b21b      	sxth	r3, r3
    30ac:	1a9b      	subs	r3, r3, r2
    30ae:	2b00      	cmp	r3, #0
    30b0:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
    30b4:	bfb8      	it	lt
    30b6:	425b      	neglt	r3, r3
    30b8:	429a      	cmp	r2, r3
        RawCur = 0;
    30ba:	bfc4      	itt	gt
    30bc:	2300      	movgt	r3, #0
    30be:	6033      	strgt	r3, [r6, #0]
      if (debugCur != 0) {
    30c0:	683b      	ldr	r3, [r7, #0]
    30c2:	2b00      	cmp	r3, #0
    30c4:	f43f ae25 	beq.w	2d12 <getcurrent()+0x1e>
    30c8:	2102      	movs	r1, #2
    30ca:	487b      	ldr	r0, [pc, #492]	; (32b8 <getcurrent()+0x5c4>)
    30cc:	f009 f8a0 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1);
    30d0:	682b      	ldr	r3, [r5, #0]
    30d2:	f8d9 5000 	ldr.w	r5, [r9]
    30d6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    30da:	f640 43e4 	movw	r3, #3300	; 0xce4
    30de:	fb03 f505 	mul.w	r5, r3, r5
    30e2:	f005 fcef 	bl	8ac4 <ADC_Module::getMaxValue()>
    30e6:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
    30ea:	fbb5 f5f0 	udiv	r5, r5, r0
    30ee:	b22d      	sxth	r5, r5
	size_t print(int n)				{ return print((long)n); }
    30f0:	1a69      	subs	r1, r5, r1
    30f2:	4872      	ldr	r0, [pc, #456]	; (32bc <getcurrent()+0x5c8>)
    30f4:	f006 fb34 	bl	9760 <Print::print(long)>
    30f8:	2102      	movs	r1, #2
    30fa:	486f      	ldr	r0, [pc, #444]	; (32b8 <getcurrent()+0x5c4>)
    30fc:	f009 f888 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    3100:	6830      	ldr	r0, [r6, #0]
    3102:	f009 fd41 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3106:	2502      	movs	r5, #2
    3108:	4602      	mov	r2, r0
    310a:	460b      	mov	r3, r1
    310c:	9500      	str	r5, [sp, #0]
    310e:	486b      	ldr	r0, [pc, #428]	; (32bc <getcurrent()+0x5c8>)
    3110:	f006 fb52 	bl	97b8 <Print::printFloat(double, unsigned char)>
    3114:	2103      	movs	r1, #3
    3116:	486a      	ldr	r0, [pc, #424]	; (32c0 <getcurrent()+0x5cc>)
    3118:	f009 f87a 	bl	c210 <usb_serial_write>
    311c:	4629      	mov	r1, r5
    311e:	4866      	ldr	r0, [pc, #408]	; (32b8 <getcurrent()+0x5c4>)
    3120:	f009 f876 	bl	c210 <usb_serial_write>
    3124:	e5f5      	b.n	2d12 <getcurrent()+0x1e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3126:	4b67      	ldr	r3, [pc, #412]	; (32c4 <getcurrent()+0x5d0>)
    3128:	681b      	ldr	r3, [r3, #0]
    312a:	930b      	str	r3, [sp, #44]	; 0x2c
      lasttime = millis();
    312c:	4b66      	ldr	r3, [pc, #408]	; (32c8 <getcurrent()+0x5d4>)
	return ret;
    312e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    3130:	601a      	str	r2, [r3, #0]
    3132:	e639      	b.n	2da8 <getcurrent()+0xb4>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    3134:	682b      	ldr	r3, [r5, #0]
    3136:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    313a:	f005 fcc3 	bl	8ac4 <ADC_Module::getMaxValue()>
    313e:	f8d9 3000 	ldr.w	r3, [r9]
    3142:	3864      	subs	r0, #100	; 0x64
    3144:	4298      	cmp	r0, r3
    3146:	f4ff ae7b 	bcc.w	2e40 <getcurrent()+0x14c>
    314a:	e67b      	b.n	2e44 <getcurrent()+0x150>
        SERIALCONSOLE.println();
    314c:	485b      	ldr	r0, [pc, #364]	; (32bc <getcurrent()+0x5c8>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    314e:	f8df 915c 	ldr.w	r9, [pc, #348]	; 32ac <getcurrent()+0x5b8>
        SERIALCONSOLE.println();
    3152:	f006 fb0d 	bl	9770 <Print::println()>
    3156:	210c      	movs	r1, #12
    3158:	485c      	ldr	r0, [pc, #368]	; (32cc <getcurrent()+0x5d8>)
    315a:	f009 f859 	bl	c210 <usb_serial_write>
    315e:	485c      	ldr	r0, [pc, #368]	; (32d0 <getcurrent()+0x5dc>)
    3160:	210c      	movs	r1, #12
    3162:	f009 f855 	bl	c210 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3166:	682b      	ldr	r3, [r5, #0]
      if (debugCur != 0) {
    3168:	683a      	ldr	r2, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    316a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    316e:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3170:	691e      	ldr	r6, [r3, #16]
    3172:	b2b6      	uxth	r6, r6
    3174:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    3178:	2a00      	cmp	r2, #0
    317a:	f43f ae42 	beq.w	2e02 <getcurrent()+0x10e>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset2)
    317e:	f005 fca1 	bl	8ac4 <ADC_Module::getMaxValue()>
    3182:	f640 42e4 	movw	r2, #3300	; 0xce4
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3186:	2300      	movs	r3, #0
    3188:	fb06 f202 	mul.w	r2, r6, r2
    318c:	fbb2 f1f0 	udiv	r1, r2, r0
    3190:	220a      	movs	r2, #10
    3192:	484a      	ldr	r0, [pc, #296]	; (32bc <getcurrent()+0x5c8>)
    3194:	f006 fb04 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3198:	2102      	movs	r1, #2
    319a:	4847      	ldr	r0, [pc, #284]	; (32b8 <getcurrent()+0x5c4>)
    319c:	f009 f838 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    31a0:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
    31a4:	4845      	ldr	r0, [pc, #276]	; (32bc <getcurrent()+0x5c8>)
    31a6:	f006 fadb 	bl	9760 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    31aa:	682b      	ldr	r3, [r5, #0]
    31ac:	f8d9 6000 	ldr.w	r6, [r9]
    31b0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    31b4:	e625      	b.n	2e02 <getcurrent()+0x10e>
      if (currentact > 500 || currentact < -500) {
    31b6:	4947      	ldr	r1, [pc, #284]	; (32d4 <getcurrent()+0x5e0>)
    31b8:	4628      	mov	r0, r5
    31ba:	f00a f8c5 	bl	d348 <__aeabi_fcmpgt>
    31be:	b928      	cbnz	r0, 31cc <getcurrent()+0x4d8>
    31c0:	4945      	ldr	r1, [pc, #276]	; (32d8 <getcurrent()+0x5e4>)
    31c2:	4628      	mov	r0, r5
    31c4:	f00a f8a2 	bl	d30c <__aeabi_fcmplt>
    31c8:	2800      	cmp	r0, #0
    31ca:	d05b      	beq.n	3284 <getcurrent()+0x590>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    31cc:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 32c4 <getcurrent()+0x5d0>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    31d0:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 32c8 <getcurrent()+0x5d4>
    31d4:	f8da 3000 	ldr.w	r3, [sl]
    31d8:	9304      	str	r3, [sp, #16]
	return ret;
    31da:	9804      	ldr	r0, [sp, #16]
    31dc:	f8d9 3000 	ldr.w	r3, [r9]
    31e0:	4f3e      	ldr	r7, [pc, #248]	; (32dc <getcurrent()+0x5e8>)
    31e2:	1ac0      	subs	r0, r0, r3
    31e4:	f009 fe9c 	bl	cf20 <__aeabi_ui2f>
    31e8:	4629      	mov	r1, r5
    31ea:	f009 fef1 	bl	cfd0 <__aeabi_fmul>
    31ee:	493c      	ldr	r1, [pc, #240]	; (32e0 <getcurrent()+0x5ec>)
    31f0:	f009 ffa2 	bl	d138 <__aeabi_fdiv>
    31f4:	493a      	ldr	r1, [pc, #232]	; (32e0 <getcurrent()+0x5ec>)
    31f6:	f009 ff9f 	bl	d138 <__aeabi_fdiv>
    31fa:	6839      	ldr	r1, [r7, #0]
    31fc:	f009 fde0 	bl	cdc0 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3200:	f8da 3000 	ldr.w	r3, [sl]
    3204:	9303      	str	r3, [sp, #12]
	return ret;
    3206:	9b03      	ldr	r3, [sp, #12]
    3208:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    320a:	f8c9 3000 	str.w	r3, [r9]
    320e:	e5cb      	b.n	2da8 <getcurrent()+0xb4>
        SERIALCONSOLE.println();
    3210:	482a      	ldr	r0, [pc, #168]	; (32bc <getcurrent()+0x5c8>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3212:	f8df 9098 	ldr.w	r9, [pc, #152]	; 32ac <getcurrent()+0x5b8>
        SERIALCONSOLE.println();
    3216:	f006 faab 	bl	9770 <Print::println()>
        if (settings.cursens == Analoguedual) {
    321a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    321e:	2b01      	cmp	r3, #1
    3220:	bf0c      	ite	eq
    3222:	4830      	ldreq	r0, [pc, #192]	; (32e4 <getcurrent()+0x5f0>)
    3224:	4830      	ldrne	r0, [pc, #192]	; (32e8 <getcurrent()+0x5f4>)
    3226:	210b      	movs	r1, #11
    3228:	f008 fff2 	bl	c210 <usb_serial_write>
    322c:	4828      	ldr	r0, [pc, #160]	; (32d0 <getcurrent()+0x5dc>)
    322e:	210c      	movs	r1, #12
    3230:	f008 ffee 	bl	c210 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3234:	682a      	ldr	r2, [r5, #0]
      if (debugCur != 0) {
    3236:	683b      	ldr	r3, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3238:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    323c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    323e:	6916      	ldr	r6, [r2, #16]
    3240:	b2b6      	uxth	r6, r6
    3242:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    3246:	2b00      	cmp	r3, #0
    3248:	f43f af07 	beq.w	305a <getcurrent()+0x366>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset1)
    324c:	f005 fc3a 	bl	8ac4 <ADC_Module::getMaxValue()>
    3250:	f640 43e4 	movw	r3, #3300	; 0xce4
    3254:	fb06 f303 	mul.w	r3, r6, r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3258:	220a      	movs	r2, #10
    325a:	fbb3 f1f0 	udiv	r1, r3, r0
    325e:	2300      	movs	r3, #0
    3260:	4816      	ldr	r0, [pc, #88]	; (32bc <getcurrent()+0x5c8>)
    3262:	f006 fa9d 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3266:	2101      	movs	r1, #1
    3268:	4820      	ldr	r0, [pc, #128]	; (32ec <getcurrent()+0x5f8>)
    326a:	f008 ffd1 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    326e:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
    3272:	4812      	ldr	r0, [pc, #72]	; (32bc <getcurrent()+0x5c8>)
    3274:	f006 fa74 	bl	9760 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    3278:	682b      	ldr	r3, [r5, #0]
    327a:	f8d9 6000 	ldr.w	r6, [r9]
    327e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3282:	e6ea      	b.n	305a <getcurrent()+0x366>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3284:	4b0f      	ldr	r3, [pc, #60]	; (32c4 <getcurrent()+0x5d0>)
    3286:	681b      	ldr	r3, [r3, #0]
    3288:	9305      	str	r3, [sp, #20]
        lasttime = millis();
    328a:	4b0f      	ldr	r3, [pc, #60]	; (32c8 <getcurrent()+0x5d4>)
	return ret;
    328c:	9a05      	ldr	r2, [sp, #20]
    328e:	601a      	str	r2, [r3, #0]
    3290:	e58a      	b.n	2da8 <getcurrent()+0xb4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3292:	4b0c      	ldr	r3, [pc, #48]	; (32c4 <getcurrent()+0x5d0>)
    3294:	681b      	ldr	r3, [r3, #0]
    3296:	9308      	str	r3, [sp, #32]
        lasttime = millis();
    3298:	4b0b      	ldr	r3, [pc, #44]	; (32c8 <getcurrent()+0x5d4>)
	return ret;
    329a:	9a08      	ldr	r2, [sp, #32]
    329c:	601a      	str	r2, [r3, #0]
    329e:	e583      	b.n	2da8 <getcurrent()+0xb4>
    32a0:	1fff8878 	.word	0x1fff8878
    32a4:	1fff91dc 	.word	0x1fff91dc
    32a8:	1fffcfc8 	.word	0x1fffcfc8
    32ac:	1fffd1b8 	.word	0x1fffd1b8
    32b0:	3727c5ac 	.word	0x3727c5ac
    32b4:	1fff91c0 	.word	0x1fff91c0
    32b8:	00015030 	.word	0x00015030
    32bc:	1fff89fc 	.word	0x1fff89fc
    32c0:	000143a8 	.word	0x000143a8
    32c4:	1fffd3c0 	.word	0x1fffd3c0
    32c8:	1fffd000 	.word	0x1fffd000
    32cc:	000143ac 	.word	0x000143ac
    32d0:	00014398 	.word	0x00014398
    32d4:	43fa0000 	.word	0x43fa0000
    32d8:	c3fa0000 	.word	0xc3fa0000
    32dc:	1fff91e4 	.word	0x1fff91e4
    32e0:	447a0000 	.word	0x447a0000
    32e4:	00014380 	.word	0x00014380
    32e8:	0001438c 	.word	0x0001438c
    32ec:	0001424c 	.word	0x0001424c

000032f0 <updateSOC()>:
void updateSOC() {
    32f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (SOCreset == 1) {
    32f4:	4da9      	ldr	r5, [pc, #676]	; (359c <updateSOC()+0x2ac>)
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    32f6:	4caa      	ldr	r4, [pc, #680]	; (35a0 <updateSOC()+0x2b0>)
  if (SOCreset == 1) {
    32f8:	682b      	ldr	r3, [r5, #0]
    32fa:	2b01      	cmp	r3, #1
void updateSOC() {
    32fc:	b087      	sub	sp, #28
  if (SOCreset == 1) {
    32fe:	f000 810a 	beq.w	3516 <updateSOC()+0x226>
    3302:	4ea8      	ldr	r6, [pc, #672]	; (35a4 <updateSOC()+0x2b4>)
    3304:	4fa8      	ldr	r7, [pc, #672]	; (35a8 <updateSOC()+0x2b8>)
  if (SOCset == 0 && SOCmem == 0) {
    3306:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 35ac <updateSOC()+0x2bc>
    330a:	f8d9 3000 	ldr.w	r3, [r9]
    330e:	2b00      	cmp	r3, #0
    3310:	f000 80a6 	beq.w	3460 <updateSOC()+0x170>
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    3314:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    3318:	6da5      	ldr	r5, [r4, #88]	; 0x58
    331a:	f8df 8294 	ldr.w	r8, [pc, #660]	; 35b0 <updateSOC()+0x2c0>
    331e:	49a5      	ldr	r1, [pc, #660]	; (35b4 <updateSOC()+0x2c4>)
    3320:	6838      	ldr	r0, [r7, #0]
    3322:	f009 fe55 	bl	cfd0 <__aeabi_fmul>
    3326:	fb05 f50b 	mul.w	r5, r5, fp
    332a:	4681      	mov	r9, r0
    332c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    3330:	fb05 f000 	mul.w	r0, r5, r0
    3334:	f009 fdf8 	bl	cf28 <__aeabi_i2f>
    3338:	4601      	mov	r1, r0
    333a:	4648      	mov	r0, r9
    333c:	f009 fefc 	bl	d138 <__aeabi_fdiv>
    3340:	499d      	ldr	r1, [pc, #628]	; (35b8 <updateSOC()+0x2c8>)
    3342:	f009 fe45 	bl	cfd0 <__aeabi_fmul>
    3346:	f00a f809 	bl	d35c <__aeabi_f2iz>
  if (settings.voltsoc == 1 || settings.cursens == 0) {
    334a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    334e:	6030      	str	r0, [r6, #0]
  if (settings.voltsoc == 1 || settings.cursens == 0) {
    3350:	2b01      	cmp	r3, #1
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    3352:	4605      	mov	r5, r0
  if (settings.voltsoc == 1 || settings.cursens == 0) {
    3354:	d056      	beq.n	3404 <updateSOC()+0x114>
    3356:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    335a:	2b00      	cmp	r3, #0
    335c:	d052      	beq.n	3404 <updateSOC()+0x114>
  if (SOC >= 100) {
    335e:	2d63      	cmp	r5, #99	; 0x63
    3360:	dd73      	ble.n	344a <updateSOC()+0x15a>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    3362:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3364:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    3366:	fb03 f000 	mul.w	r0, r3, r0
    336a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    336e:	fb03 f000 	mul.w	r0, r3, r0
    3372:	f009 fdd9 	bl	cf28 <__aeabi_i2f>
    3376:	498f      	ldr	r1, [pc, #572]	; (35b4 <updateSOC()+0x2c4>)
    3378:	f009 fede 	bl	d138 <__aeabi_fdiv>
    SOC = 100;
    337c:	2364      	movs	r3, #100	; 0x64
    337e:	6033      	str	r3, [r6, #0]
  if (debug != 0) {
    3380:	f8d8 3000 	ldr.w	r3, [r8]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    3384:	6038      	str	r0, [r7, #0]
  if (debug != 0) {
    3386:	2b00      	cmp	r3, #0
    3388:	d067      	beq.n	345a <updateSOC()+0x16a>
    if (settings.cursens == Analoguedual) {
    338a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    338e:	2b01      	cmp	r3, #1
    3390:	f000 80e8 	beq.w	3564 <updateSOC()+0x274>
    if (settings.cursens == Analoguesing) {
    3394:	2b03      	cmp	r3, #3
    3396:	f000 80f3 	beq.w	3580 <updateSOC()+0x290>
    if (settings.cursens == Canbus) {
    339a:	2b02      	cmp	r3, #2
    339c:	f000 80f9 	beq.w	3592 <updateSOC()+0x2a2>
    33a0:	2102      	movs	r1, #2
    33a2:	4886      	ldr	r0, [pc, #536]	; (35bc <updateSOC()+0x2cc>)
    33a4:	f008 ff34 	bl	c210 <usb_serial_write>
    SERIALCONSOLE.print(currentact);
    33a8:	4b85      	ldr	r3, [pc, #532]	; (35c0 <updateSOC()+0x2d0>)
    33aa:	6818      	ldr	r0, [r3, #0]
    33ac:	f009 fbec 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    33b0:	2402      	movs	r4, #2
    33b2:	4602      	mov	r2, r0
    33b4:	460b      	mov	r3, r1
    33b6:	9400      	str	r4, [sp, #0]
    33b8:	4882      	ldr	r0, [pc, #520]	; (35c4 <updateSOC()+0x2d4>)
    33ba:	f006 f9fd 	bl	97b8 <Print::printFloat(double, unsigned char)>
    33be:	4621      	mov	r1, r4
    33c0:	4881      	ldr	r0, [pc, #516]	; (35c8 <updateSOC()+0x2d8>)
    33c2:	f008 ff25 	bl	c210 <usb_serial_write>
    33c6:	4621      	mov	r1, r4
    33c8:	487c      	ldr	r0, [pc, #496]	; (35bc <updateSOC()+0x2cc>)
    33ca:	f008 ff21 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    33ce:	6831      	ldr	r1, [r6, #0]
    33d0:	487c      	ldr	r0, [pc, #496]	; (35c4 <updateSOC()+0x2d4>)
    33d2:	f006 f9c5 	bl	9760 <Print::print(long)>
    33d6:	2106      	movs	r1, #6
    33d8:	487c      	ldr	r0, [pc, #496]	; (35cc <updateSOC()+0x2dc>)
    33da:	f008 ff19 	bl	c210 <usb_serial_write>
    SERIALCONSOLE.print(ampsecond * 0.27777777777778, 2);
    33de:	6838      	ldr	r0, [r7, #0]
    33e0:	4974      	ldr	r1, [pc, #464]	; (35b4 <updateSOC()+0x2c4>)
    33e2:	f009 fdf5 	bl	cfd0 <__aeabi_fmul>
    33e6:	f009 fbcf 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    33ea:	9400      	str	r4, [sp, #0]
    33ec:	4602      	mov	r2, r0
    33ee:	460b      	mov	r3, r1
    33f0:	4874      	ldr	r0, [pc, #464]	; (35c4 <updateSOC()+0x2d4>)
    33f2:	f006 f9e1 	bl	97b8 <Print::printFloat(double, unsigned char)>
    33f6:	4876      	ldr	r0, [pc, #472]	; (35d0 <updateSOC()+0x2e0>)
    33f8:	2103      	movs	r1, #3
}
    33fa:	b007      	add	sp, #28
    33fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3400:	f008 bf06 	b.w	c210 <usb_serial_write>
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    3404:	4873      	ldr	r0, [pc, #460]	; (35d4 <updateSOC()+0x2e4>)
    3406:	f7fe fa91 	bl	192c <BMSModuleManager::getLowCellVolt()>
    340a:	4973      	ldr	r1, [pc, #460]	; (35d8 <updateSOC()+0x2e8>)
    340c:	f009 fde0 	bl	cfd0 <__aeabi_fmul>
    3410:	f009 ffca 	bl	d3a8 <__aeabi_f2uiz>
    3414:	6fa5      	ldr	r5, [r4, #120]	; 0x78
    3416:	6f62      	ldr	r2, [r4, #116]	; 0x74
    3418:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    341a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    341c:	9500      	str	r5, [sp, #0]
    341e:	b280      	uxth	r0, r0
    3420:	f7fe ffde 	bl	23e0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    3424:	4605      	mov	r5, r0
    3426:	6030      	str	r0, [r6, #0]
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    3428:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    342a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    342c:	fb05 f000 	mul.w	r0, r5, r0
    3430:	fb03 f000 	mul.w	r0, r3, r0
    3434:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3438:	0040      	lsls	r0, r0, #1
    343a:	f009 fd75 	bl	cf28 <__aeabi_i2f>
    343e:	495d      	ldr	r1, [pc, #372]	; (35b4 <updateSOC()+0x2c4>)
    3440:	f009 fe7a 	bl	d138 <__aeabi_fdiv>
  if (SOC >= 100) {
    3444:	2d63      	cmp	r5, #99	; 0x63
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    3446:	6038      	str	r0, [r7, #0]
  if (SOC >= 100) {
    3448:	dc8b      	bgt.n	3362 <updateSOC()+0x72>
  if (SOC < 0) {
    344a:	2d00      	cmp	r5, #0
    SOC = 0;  //reset SOC this way the can messages remain in range for other devices. Ampseconds will keep counting.
    344c:	bfbc      	itt	lt
    344e:	2300      	movlt	r3, #0
    3450:	6033      	strlt	r3, [r6, #0]
  if (debug != 0) {
    3452:	f8d8 3000 	ldr.w	r3, [r8]
    3456:	2b00      	cmp	r3, #0
    3458:	d197      	bne.n	338a <updateSOC()+0x9a>
}
    345a:	b007      	add	sp, #28
    345c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (SOCset == 0 && SOCmem == 0) {
    3460:	f8df a178 	ldr.w	sl, [pc, #376]	; 35dc <updateSOC()+0x2ec>
    3464:	f8da 3000 	ldr.w	r3, [sl]
    3468:	2b00      	cmp	r3, #0
    346a:	d037      	beq.n	34dc <updateSOC()+0x1ec>
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    346c:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    3470:	6da5      	ldr	r5, [r4, #88]	; 0x58
    3472:	f8df 813c 	ldr.w	r8, [pc, #316]	; 35b0 <updateSOC()+0x2c0>
  if (SOCset == 0 && SOCmem == 1) {
    3476:	2b01      	cmp	r3, #1
    3478:	f47f af51 	bne.w	331e <updateSOC()+0x2e>
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    347c:	6830      	ldr	r0, [r6, #0]
    347e:	fb00 f00b 	mul.w	r0, r0, fp
    3482:	fb05 f000 	mul.w	r0, r5, r0
    3486:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    348a:	4d55      	ldr	r5, [pc, #340]	; (35e0 <updateSOC()+0x2f0>)
    348c:	0040      	lsls	r0, r0, #1
    348e:	f009 fd4b 	bl	cf28 <__aeabi_i2f>
    3492:	4948      	ldr	r1, [pc, #288]	; (35b4 <updateSOC()+0x2c4>)
    3494:	f009 fe50 	bl	d138 <__aeabi_fdiv>
    3498:	682b      	ldr	r3, [r5, #0]
    349a:	9304      	str	r3, [sp, #16]
	return ret;
    349c:	9a04      	ldr	r2, [sp, #16]
    349e:	6038      	str	r0, [r7, #0]
    if (millis() > 9000) {
    34a0:	f242 3328 	movw	r3, #9000	; 0x2328
    34a4:	429a      	cmp	r2, r3
    34a6:	f200 80e2 	bhi.w	366e <updateSOC()+0x37e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34aa:	682b      	ldr	r3, [r5, #0]
    34ac:	9305      	str	r3, [sp, #20]
	return ret;
    34ae:	9a05      	ldr	r2, [sp, #20]
    if (millis() > 10000) {
    34b0:	f242 7310 	movw	r3, #10000	; 0x2710
    34b4:	429a      	cmp	r2, r3
    34b6:	d90d      	bls.n	34d4 <updateSOC()+0x1e4>
      if (debug != 0) {
    34b8:	f8d8 3000 	ldr.w	r3, [r8]
      SOCset = 1;
    34bc:	2201      	movs	r2, #1
    34be:	f8c9 2000 	str.w	r2, [r9]
      if (debug != 0) {
    34c2:	2b00      	cmp	r3, #0
    34c4:	f040 80db 	bne.w	367e <updateSOC()+0x38e>
      if (settings.ESSmode == 1) {
    34c8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    34cc:	2b01      	cmp	r3, #1
        bmsstatus = Ready;
    34ce:	bf04      	itt	eq
    34d0:	4a44      	ldreq	r2, [pc, #272]	; (35e4 <updateSOC()+0x2f4>)
    34d2:	7013      	strbeq	r3, [r2, #0]
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    34d4:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    34d8:	6da5      	ldr	r5, [r4, #88]	; 0x58
    34da:	e720      	b.n	331e <updateSOC()+0x2e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34dc:	4d40      	ldr	r5, [pc, #256]	; (35e0 <updateSOC()+0x2f0>)
    34de:	682a      	ldr	r2, [r5, #0]
    34e0:	9202      	str	r2, [sp, #8]
	return ret;
    34e2:	9a02      	ldr	r2, [sp, #8]
    if (millis() > 9000) {
    34e4:	f242 3328 	movw	r3, #9000	; 0x2328
    34e8:	429a      	cmp	r2, r3
    34ea:	f200 80b8 	bhi.w	365e <updateSOC()+0x36e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    34ee:	682b      	ldr	r3, [r5, #0]
    34f0:	9303      	str	r3, [sp, #12]
	return ret;
    34f2:	9a03      	ldr	r2, [sp, #12]
    if (millis() > 10000) {
    34f4:	f242 7310 	movw	r3, #10000	; 0x2710
    34f8:	429a      	cmp	r2, r3
    34fa:	d87f      	bhi.n	35fc <updateSOC()+0x30c>
  if (SOCset == 0 && SOCmem == 1) {
    34fc:	f8d9 3000 	ldr.w	r3, [r9]
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    3500:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    3504:	6da5      	ldr	r5, [r4, #88]	; 0x58
    3506:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 35b0 <updateSOC()+0x2c0>
  if (SOCset == 0 && SOCmem == 1) {
    350a:	2b00      	cmp	r3, #0
    350c:	f47f af07 	bne.w	331e <updateSOC()+0x2e>
    3510:	f8da 3000 	ldr.w	r3, [sl]
    3514:	e7af      	b.n	3476 <updateSOC()+0x186>
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    3516:	482f      	ldr	r0, [pc, #188]	; (35d4 <updateSOC()+0x2e4>)
    3518:	f7fe fa08 	bl	192c <BMSModuleManager::getLowCellVolt()>
    351c:	492e      	ldr	r1, [pc, #184]	; (35d8 <updateSOC()+0x2e8>)
    351e:	6f66      	ldr	r6, [r4, #116]	; 0x74
    3520:	6f27      	ldr	r7, [r4, #112]	; 0x70
    3522:	f009 fd55 	bl	cfd0 <__aeabi_fmul>
    3526:	f009 ff3f 	bl	d3a8 <__aeabi_f2uiz>
    352a:	4632      	mov	r2, r6
    352c:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    352e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    3530:	9600      	str	r6, [sp, #0]
    3532:	463b      	mov	r3, r7
    3534:	b280      	uxth	r0, r0
    3536:	f7fe ff53 	bl	23e0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    353a:	4e1a      	ldr	r6, [pc, #104]	; (35a4 <updateSOC()+0x2b4>)
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    353c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    353e:	6030      	str	r0, [r6, #0]
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    3540:	fb03 f000 	mul.w	r0, r3, r0
    3544:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3546:	4f18      	ldr	r7, [pc, #96]	; (35a8 <updateSOC()+0x2b8>)
    3548:	fb03 f000 	mul.w	r0, r3, r0
    354c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3550:	0040      	lsls	r0, r0, #1
    3552:	f009 fce9 	bl	cf28 <__aeabi_i2f>
    3556:	4917      	ldr	r1, [pc, #92]	; (35b4 <updateSOC()+0x2c4>)
    3558:	f009 fdee 	bl	d138 <__aeabi_fdiv>
    SOCreset = 0;
    355c:	2300      	movs	r3, #0
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    355e:	6038      	str	r0, [r7, #0]
    SOCreset = 0;
    3560:	602b      	str	r3, [r5, #0]
    3562:	e6d0      	b.n	3306 <updateSOC()+0x16>
      if (sensor == 1) {
    3564:	4b20      	ldr	r3, [pc, #128]	; (35e8 <updateSOC()+0x2f8>)
    3566:	681b      	ldr	r3, [r3, #0]
    3568:	2b01      	cmp	r3, #1
    356a:	bf0c      	ite	eq
    356c:	481f      	ldreq	r0, [pc, #124]	; (35ec <updateSOC()+0x2fc>)
    356e:	4820      	ldrne	r0, [pc, #128]	; (35f0 <updateSOC()+0x300>)
    3570:	210a      	movs	r1, #10
    3572:	f008 fe4d 	bl	c210 <usb_serial_write>
    if (settings.cursens == Analoguesing) {
    3576:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    357a:	2b03      	cmp	r3, #3
    357c:	f47f af0d 	bne.w	339a <updateSOC()+0xaa>
    3580:	481c      	ldr	r0, [pc, #112]	; (35f4 <updateSOC()+0x304>)
    3582:	2110      	movs	r1, #16
    3584:	f008 fe44 	bl	c210 <usb_serial_write>
    if (settings.cursens == Canbus) {
    3588:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    358c:	2b02      	cmp	r3, #2
    358e:	f47f af07 	bne.w	33a0 <updateSOC()+0xb0>
    3592:	2107      	movs	r1, #7
    3594:	4818      	ldr	r0, [pc, #96]	; (35f8 <updateSOC()+0x308>)
    3596:	f008 fe3b 	bl	c210 <usb_serial_write>
    359a:	e701      	b.n	33a0 <updateSOC()+0xb0>
    359c:	1fff91c8 	.word	0x1fff91c8
    35a0:	1fffd0d8 	.word	0x1fffd0d8
    35a4:	1fff8828 	.word	0x1fff8828
    35a8:	1fff91e4 	.word	0x1fff91e4
    35ac:	1fff91cc 	.word	0x1fff91cc
    35b0:	1fff884c 	.word	0x1fff884c
    35b4:	3e8e38e4 	.word	0x3e8e38e4
    35b8:	42c80000 	.word	0x42c80000
    35bc:	00015030 	.word	0x00015030
    35c0:	1fffcfc4 	.word	0x1fffcfc4
    35c4:	1fff89fc 	.word	0x1fff89fc
    35c8:	000143bc 	.word	0x000143bc
    35cc:	00014458 	.word	0x00014458
    35d0:	00014460 	.word	0x00014460
    35d4:	1fff91f0 	.word	0x1fff91f0
    35d8:	447a0000 	.word	0x447a0000
    35dc:	1fff91c4 	.word	0x1fff91c4
    35e0:	1fffd3c0 	.word	0x1fffd3c0
    35e4:	1fffcf34 	.word	0x1fffcf34
    35e8:	1fff8878 	.word	0x1fff8878
    35ec:	00014424 	.word	0x00014424
    35f0:	00014430 	.word	0x00014430
    35f4:	0001443c 	.word	0x0001443c
    35f8:	00014450 	.word	0x00014450
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    35fc:	4834      	ldr	r0, [pc, #208]	; (36d0 <updateSOC()+0x3e0>)
      if (debug != 0) {
    35fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 36d4 <updateSOC()+0x3e4>
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    3602:	f7fe f993 	bl	192c <BMSModuleManager::getLowCellVolt()>
    3606:	4934      	ldr	r1, [pc, #208]	; (36d8 <updateSOC()+0x3e8>)
    3608:	f009 fce2 	bl	cfd0 <__aeabi_fmul>
    360c:	f009 fecc 	bl	d3a8 <__aeabi_f2uiz>
    3610:	6fa5      	ldr	r5, [r4, #120]	; 0x78
    3612:	6f23      	ldr	r3, [r4, #112]	; 0x70
    3614:	6f62      	ldr	r2, [r4, #116]	; 0x74
    3616:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    3618:	9500      	str	r5, [sp, #0]
    361a:	b280      	uxth	r0, r0
    361c:	f7fe fee0 	bl	23e0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    3620:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    3624:	6da5      	ldr	r5, [r4, #88]	; 0x58
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    3626:	6030      	str	r0, [r6, #0]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    3628:	fb0b f000 	mul.w	r0, fp, r0
    362c:	fb05 f000 	mul.w	r0, r5, r0
    3630:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3634:	0040      	lsls	r0, r0, #1
    3636:	f009 fc77 	bl	cf28 <__aeabi_i2f>
    363a:	4928      	ldr	r1, [pc, #160]	; (36dc <updateSOC()+0x3ec>)
    363c:	f009 fd7c 	bl	d138 <__aeabi_fdiv>
      if (debug != 0) {
    3640:	f8d8 3000 	ldr.w	r3, [r8]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    3644:	6038      	str	r0, [r7, #0]
      SOCset = 1;
    3646:	2201      	movs	r2, #1
    3648:	f8c9 2000 	str.w	r2, [r9]
      if (debug != 0) {
    364c:	bb33      	cbnz	r3, 369c <updateSOC()+0x3ac>
      if (settings.ESSmode == 1) {
    364e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    3652:	2b01      	cmp	r3, #1
    3654:	f47f ae63 	bne.w	331e <updateSOC()+0x2e>
        bmsstatus = Ready;
    3658:	4a21      	ldr	r2, [pc, #132]	; (36e0 <updateSOC()+0x3f0>)
    365a:	7013      	strb	r3, [r2, #0]
  if (SOCset == 0 && SOCmem == 1) {
    365c:	e65f      	b.n	331e <updateSOC()+0x2e>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    365e:	6d23      	ldr	r3, [r4, #80]	; 0x50
    3660:	6c62      	ldr	r2, [r4, #68]	; 0x44
    3662:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    3666:	481a      	ldr	r0, [pc, #104]	; (36d0 <updateSOC()+0x3e0>)
    3668:	f7fe f9b4 	bl	19d4 <BMSModuleManager::setSensors(int, float, float)>
    366c:	e73f      	b.n	34ee <updateSOC()+0x1fe>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    366e:	6d23      	ldr	r3, [r4, #80]	; 0x50
    3670:	6c62      	ldr	r2, [r4, #68]	; 0x44
    3672:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    3676:	4816      	ldr	r0, [pc, #88]	; (36d0 <updateSOC()+0x3e0>)
    3678:	f7fe f9ac 	bl	19d4 <BMSModuleManager::setSensors(int, float, float)>
    367c:	e715      	b.n	34aa <updateSOC()+0x1ba>
    367e:	2102      	movs	r1, #2
    3680:	4818      	ldr	r0, [pc, #96]	; (36e4 <updateSOC()+0x3f4>)
    3682:	f008 fdc5 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3686:	4818      	ldr	r0, [pc, #96]	; (36e8 <updateSOC()+0x3f8>)
    3688:	f006 f872 	bl	9770 <Print::println()>
    368c:	2159      	movs	r1, #89	; 0x59
    368e:	4817      	ldr	r0, [pc, #92]	; (36ec <updateSOC()+0x3fc>)
    3690:	f008 fdbe 	bl	c210 <usb_serial_write>
    3694:	4814      	ldr	r0, [pc, #80]	; (36e8 <updateSOC()+0x3f8>)
    3696:	f006 f86b 	bl	9770 <Print::println()>
    369a:	e715      	b.n	34c8 <updateSOC()+0x1d8>
    369c:	2102      	movs	r1, #2
    369e:	4811      	ldr	r0, [pc, #68]	; (36e4 <updateSOC()+0x3f4>)
    36a0:	f008 fdb6 	bl	c210 <usb_serial_write>
    36a4:	4810      	ldr	r0, [pc, #64]	; (36e8 <updateSOC()+0x3f8>)
    36a6:	f006 f863 	bl	9770 <Print::println()>
    36aa:	2159      	movs	r1, #89	; 0x59
    36ac:	480f      	ldr	r0, [pc, #60]	; (36ec <updateSOC()+0x3fc>)
    36ae:	f008 fdaf 	bl	c210 <usb_serial_write>
    36b2:	480d      	ldr	r0, [pc, #52]	; (36e8 <updateSOC()+0x3f8>)
    36b4:	f006 f85c 	bl	9770 <Print::println()>
      if (settings.ESSmode == 1) {
    36b8:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    36bc:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    36c0:	6da5      	ldr	r5, [r4, #88]	; 0x58
      if (settings.ESSmode == 1) {
    36c2:	2b01      	cmp	r3, #1
        bmsstatus = Ready;
    36c4:	bf04      	itt	eq
    36c6:	4a06      	ldreq	r2, [pc, #24]	; (36e0 <updateSOC()+0x3f0>)
    36c8:	7013      	strbeq	r3, [r2, #0]
  if (SOCset == 0 && SOCmem == 1) {
    36ca:	f8d9 3000 	ldr.w	r3, [r9]
    36ce:	e71c      	b.n	350a <updateSOC()+0x21a>
    36d0:	1fff91f0 	.word	0x1fff91f0
    36d4:	1fff884c 	.word	0x1fff884c
    36d8:	447a0000 	.word	0x447a0000
    36dc:	3e8e38e4 	.word	0x3e8e38e4
    36e0:	1fffcf34 	.word	0x1fffcf34
    36e4:	00015030 	.word	0x00015030
    36e8:	1fff89fc 	.word	0x1fff89fc
    36ec:	000143c8 	.word	0x000143c8

000036f0 <Prechargecon()>:
void Prechargecon() {
    36f0:	b530      	push	{r4, r5, lr}
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    36f2:	2011      	movs	r0, #17
void Prechargecon() {
    36f4:	b083      	sub	sp, #12
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    36f6:	f006 ff3d 	bl	a574 <digitalRead>
    36fa:	2801      	cmp	r0, #1
    36fc:	d004      	beq.n	3708 <Prechargecon()+0x18>
    36fe:	2012      	movs	r0, #18
    3700:	f006 ff38 	bl	a574 <digitalRead>
    3704:	2801      	cmp	r0, #1
    3706:	d122      	bne.n	374e <Prechargecon()+0x5e>
    digitalWrite(OUT4, HIGH);  //Negative Contactor Close
    3708:	2101      	movs	r1, #1
    370a:	2015      	movs	r0, #21
    370c:	f006 ff0c 	bl	a528 <digitalWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3710:	4b2a      	ldr	r3, [pc, #168]	; (37bc <Prechargecon()+0xcc>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    3712:	4a2b      	ldr	r2, [pc, #172]	; (37c0 <Prechargecon()+0xd0>)
    3714:	4c2b      	ldr	r4, [pc, #172]	; (37c4 <Prechargecon()+0xd4>)
    3716:	681b      	ldr	r3, [r3, #0]
    contctrl = 2;
    3718:	4d2b      	ldr	r5, [pc, #172]	; (37c8 <Prechargecon()+0xd8>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    371a:	6811      	ldr	r1, [r2, #0]
    371c:	9301      	str	r3, [sp, #4]
    contctrl = 2;
    371e:	2202      	movs	r2, #2
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    3720:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    contctrl = 2;
    3724:	602a      	str	r2, [r5, #0]
	return ret;
    3726:	9a01      	ldr	r2, [sp, #4]
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    3728:	440b      	add	r3, r1
    372a:	4293      	cmp	r3, r2
    372c:	d808      	bhi.n	3740 <Prechargecon()+0x50>
    372e:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    3732:	f009 fbf9 	bl	cf28 <__aeabi_i2f>
    3736:	4b25      	ldr	r3, [pc, #148]	; (37cc <Prechargecon()+0xdc>)
    3738:	6819      	ldr	r1, [r3, #0]
    373a:	f009 fde7 	bl	d30c <__aeabi_fcmplt>
    373e:	b1d0      	cbz	r0, 3776 <Prechargecon()+0x86>
      digitalWrite(OUT2, HIGH);  //precharge
    3740:	2101      	movs	r1, #1
      digitalWrite(OUT2, LOW);
    3742:	200c      	movs	r0, #12
}
    3744:	b003      	add	sp, #12
    3746:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    374a:	f006 beed 	b.w	a528 <digitalWrite>
    digitalWrite(OUT1, LOW);
    374e:	2100      	movs	r1, #0
    3750:	200b      	movs	r0, #11
    3752:	f006 fee9 	bl	a528 <digitalWrite>
    digitalWrite(OUT2, LOW);
    3756:	2100      	movs	r1, #0
    3758:	200c      	movs	r0, #12
    375a:	f006 fee5 	bl	a528 <digitalWrite>
    digitalWrite(OUT4, LOW);
    375e:	2100      	movs	r1, #0
    3760:	2015      	movs	r0, #21
    3762:	f006 fee1 	bl	a528 <digitalWrite>
    bmsstatus = Ready;
    3766:	491a      	ldr	r1, [pc, #104]	; (37d0 <Prechargecon()+0xe0>)
    contctrl = 0;
    3768:	4b17      	ldr	r3, [pc, #92]	; (37c8 <Prechargecon()+0xd8>)
    bmsstatus = Ready;
    376a:	2001      	movs	r0, #1
    contctrl = 0;
    376c:	2200      	movs	r2, #0
    bmsstatus = Ready;
    376e:	7008      	strb	r0, [r1, #0]
    contctrl = 0;
    3770:	601a      	str	r2, [r3, #0]
}
    3772:	b003      	add	sp, #12
    3774:	bd30      	pop	{r4, r5, pc}
      digitalWrite(OUT1, HIGH);  //Positive Contactor Close
    3776:	2101      	movs	r1, #1
    3778:	200b      	movs	r0, #11
    377a:	f006 fed5 	bl	a528 <digitalWrite>
      if (settings.ChargerDirect == 1) {
    377e:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
      contctrl = 3;
    3782:	2403      	movs	r4, #3
    3784:	602c      	str	r4, [r5, #0]
      if (settings.ChargerDirect == 1) {
    3786:	b14b      	cbz	r3, 379c <Prechargecon()+0xac>
        bmsstatus = Drive;
    3788:	4b11      	ldr	r3, [pc, #68]	; (37d0 <Prechargecon()+0xe0>)
    378a:	2202      	movs	r2, #2
    378c:	701a      	strb	r2, [r3, #0]
      digitalWrite(OUT2, LOW);
    378e:	2100      	movs	r1, #0
    3790:	200c      	movs	r0, #12
}
    3792:	b003      	add	sp, #12
    3794:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    3798:	f006 bec6 	b.w	a528 <digitalWrite>
        if (digitalRead(IN3) == HIGH) {
    379c:	2012      	movs	r0, #18
    379e:	f006 fee9 	bl	a574 <digitalRead>
    37a2:	2801      	cmp	r0, #1
          bmsstatus = Charge;
    37a4:	bf08      	it	eq
    37a6:	4b0a      	ldreq	r3, [pc, #40]	; (37d0 <Prechargecon()+0xe0>)
        if (digitalRead(IN1) == HIGH) {
    37a8:	f04f 0011 	mov.w	r0, #17
          bmsstatus = Charge;
    37ac:	bf08      	it	eq
    37ae:	701c      	strbeq	r4, [r3, #0]
        if (digitalRead(IN1) == HIGH) {
    37b0:	f006 fee0 	bl	a574 <digitalRead>
    37b4:	2801      	cmp	r0, #1
    37b6:	d1ea      	bne.n	378e <Prechargecon()+0x9e>
    37b8:	e7e6      	b.n	3788 <Prechargecon()+0x98>
    37ba:	bf00      	nop
    37bc:	1fffd3c0 	.word	0x1fffd3c0
    37c0:	1fff91b8 	.word	0x1fff91b8
    37c4:	1fffd0d8 	.word	0x1fffd0d8
    37c8:	1fffcfb0 	.word	0x1fffcfb0
    37cc:	1fffcfc4 	.word	0x1fffcfc4
    37d0:	1fffcf34 	.word	0x1fffcf34

000037d4 <contcon()>:
void contcon() {
    37d4:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (contctrl != contstat)  //check for contactor request change
    37d6:	4e71      	ldr	r6, [pc, #452]	; (399c <contcon()+0x1c8>)
    37d8:	4c71      	ldr	r4, [pc, #452]	; (39a0 <contcon()+0x1cc>)
    37da:	6833      	ldr	r3, [r6, #0]
    37dc:	6825      	ldr	r5, [r4, #0]
    37de:	42ab      	cmp	r3, r5
void contcon() {
    37e0:	b087      	sub	sp, #28
  if (contctrl != contstat)  //check for contactor request change
    37e2:	d02d      	beq.n	3840 <contcon()+0x6c>
    if ((contctrl & 1) == 0) {
    37e4:	f013 0101 	ands.w	r1, r3, #1
    37e8:	d04b      	beq.n	3882 <contcon()+0xae>
    if ((contctrl & 2) == 0) {
    37ea:	f013 0102 	ands.w	r1, r3, #2
    37ee:	d05f      	beq.n	38b0 <contcon()+0xdc>
    if ((contctrl & 4) == 0) {
    37f0:	f013 0104 	ands.w	r1, r3, #4
    37f4:	d051      	beq.n	389a <contcon()+0xc6>
    if ((contctrl & 1) == 1) {
    37f6:	07da      	lsls	r2, r3, #31
    37f8:	d50e      	bpl.n	3818 <contcon()+0x44>
      if ((contstat & 1) != 1) {
    37fa:	6822      	ldr	r2, [r4, #0]
    37fc:	07d7      	lsls	r7, r2, #31
    37fe:	d40b      	bmi.n	3818 <contcon()+0x44>
        if (conttimer1 == 0) {
    3800:	4d68      	ldr	r5, [pc, #416]	; (39a4 <contcon()+0x1d0>)
    3802:	682a      	ldr	r2, [r5, #0]
    3804:	2a00      	cmp	r2, #0
    3806:	f000 8093 	beq.w	3930 <contcon()+0x15c>
    380a:	4b67      	ldr	r3, [pc, #412]	; (39a8 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    380c:	681b      	ldr	r3, [r3, #0]
    380e:	9301      	str	r3, [sp, #4]
	return ret;
    3810:	9b01      	ldr	r3, [sp, #4]
        if (conttimer1 < millis()) {
    3812:	4293      	cmp	r3, r2
    3814:	d87f      	bhi.n	3916 <contcon()+0x142>
    if ((contctrl & 2) == 2) {
    3816:	6833      	ldr	r3, [r6, #0]
    3818:	079d      	lsls	r5, r3, #30
    381a:	d414      	bmi.n	3846 <contcon()+0x72>
    if ((contctrl & 4) == 4) {
    381c:	0759      	lsls	r1, r3, #29
    381e:	d522      	bpl.n	3866 <contcon()+0x92>
      if ((contstat & 4) != 4) {
    3820:	6822      	ldr	r2, [r4, #0]
    3822:	0752      	lsls	r2, r2, #29
    3824:	d40d      	bmi.n	3842 <contcon()+0x6e>
        if (conttimer3 == 0) {
    3826:	4f61      	ldr	r7, [pc, #388]	; (39ac <contcon()+0x1d8>)
    3828:	683a      	ldr	r2, [r7, #0]
    382a:	2a00      	cmp	r2, #0
    382c:	f000 809e 	beq.w	396c <contcon()+0x198>
    3830:	4b5d      	ldr	r3, [pc, #372]	; (39a8 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3832:	681b      	ldr	r3, [r3, #0]
    3834:	9305      	str	r3, [sp, #20]
	return ret;
    3836:	9b05      	ldr	r3, [sp, #20]
        if (conttimer3 < millis()) {
    3838:	4293      	cmp	r3, r2
    383a:	f200 8086 	bhi.w	394a <contcon()+0x176>
  if (contctrl == 0) {
    383e:	6835      	ldr	r5, [r6, #0]
    3840:	b1a5      	cbz	r5, 386c <contcon()+0x98>
}
    3842:	b007      	add	sp, #28
    3844:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((contstat & 2) != 2) {
    3846:	6822      	ldr	r2, [r4, #0]
    3848:	0790      	lsls	r0, r2, #30
    384a:	d43d      	bmi.n	38c8 <contcon()+0xf4>
        if (conttimer2 == 0) {
    384c:	4d58      	ldr	r5, [pc, #352]	; (39b0 <contcon()+0x1dc>)
    384e:	682a      	ldr	r2, [r5, #0]
    3850:	2a00      	cmp	r2, #0
    3852:	d049      	beq.n	38e8 <contcon()+0x114>
    3854:	4b54      	ldr	r3, [pc, #336]	; (39a8 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3856:	681b      	ldr	r3, [r3, #0]
    3858:	9303      	str	r3, [sp, #12]
	return ret;
    385a:	9b03      	ldr	r3, [sp, #12]
        if (conttimer2 < millis()) {
    385c:	429a      	cmp	r2, r3
    385e:	d336      	bcc.n	38ce <contcon()+0xfa>
    if ((contctrl & 4) == 4) {
    3860:	6833      	ldr	r3, [r6, #0]
    3862:	0759      	lsls	r1, r3, #29
    3864:	d4dc      	bmi.n	3820 <contcon()+0x4c>
    3866:	461d      	mov	r5, r3
  if (contctrl == 0) {
    3868:	2d00      	cmp	r5, #0
    386a:	d1ea      	bne.n	3842 <contcon()+0x6e>
    analogWrite(OUT5, 0);
    386c:	4629      	mov	r1, r5
    386e:	2016      	movs	r0, #22
    3870:	f006 fcde 	bl	a230 <analogWrite>
    analogWrite(OUT6, 0);
    3874:	4629      	mov	r1, r5
    3876:	2017      	movs	r0, #23
}
    3878:	b007      	add	sp, #28
    387a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    analogWrite(OUT6, 0);
    387e:	f006 bcd7 	b.w	a230 <analogWrite>
      analogWrite(OUT5, 0);
    3882:	2016      	movs	r0, #22
    3884:	f006 fcd4 	bl	a230 <analogWrite>
      contstat = contstat & 254;
    3888:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    388a:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 254;
    388c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if ((contctrl & 2) == 0) {
    3890:	f013 0102 	ands.w	r1, r3, #2
      contstat = contstat & 254;
    3894:	6022      	str	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    3896:	d1ab      	bne.n	37f0 <contcon()+0x1c>
    3898:	e00a      	b.n	38b0 <contcon()+0xdc>
      analogWrite(OUT7, 0);
    389a:	2005      	movs	r0, #5
    389c:	f006 fcc8 	bl	a230 <analogWrite>
      contstat = contstat & 251;
    38a0:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    38a2:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 251;
    38a4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    38a8:	6022      	str	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    38aa:	07da      	lsls	r2, r3, #31
    38ac:	d5b4      	bpl.n	3818 <contcon()+0x44>
    38ae:	e7a4      	b.n	37fa <contcon()+0x26>
      analogWrite(OUT6, 0);
    38b0:	2017      	movs	r0, #23
    38b2:	f006 fcbd 	bl	a230 <analogWrite>
      contstat = contstat & 253;
    38b6:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    38b8:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 253;
    38ba:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    if ((contctrl & 4) == 0) {
    38be:	f013 0104 	ands.w	r1, r3, #4
      contstat = contstat & 253;
    38c2:	6022      	str	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    38c4:	d197      	bne.n	37f6 <contcon()+0x22>
    38c6:	e7e8      	b.n	389a <contcon()+0xc6>
    if ((contctrl & 4) == 4) {
    38c8:	075b      	lsls	r3, r3, #29
    38ca:	d4aa      	bmi.n	3822 <contcon()+0x4e>
    38cc:	e7b9      	b.n	3842 <contcon()+0x6e>
          analogWrite(OUT6, settings.conthold);
    38ce:	4b39      	ldr	r3, [pc, #228]	; (39b4 <contcon()+0x1e0>)
    38d0:	2017      	movs	r0, #23
    38d2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    38d6:	f006 fcab 	bl	a230 <analogWrite>
          contstat = contstat | 2;
    38da:	6823      	ldr	r3, [r4, #0]
          conttimer2 = 0;
    38dc:	2200      	movs	r2, #0
          contstat = contstat | 2;
    38de:	f043 0302 	orr.w	r3, r3, #2
    38e2:	6023      	str	r3, [r4, #0]
          conttimer2 = 0;
    38e4:	602a      	str	r2, [r5, #0]
    38e6:	e7bb      	b.n	3860 <contcon()+0x8c>
          Serial.println();
    38e8:	4833      	ldr	r0, [pc, #204]	; (39b8 <contcon()+0x1e4>)
    38ea:	f005 ff41 	bl	9770 <Print::println()>
    38ee:	210c      	movs	r1, #12
    38f0:	4832      	ldr	r0, [pc, #200]	; (39bc <contcon()+0x1e8>)
    38f2:	f008 fc8d 	bl	c210 <usb_serial_write>
    38f6:	4830      	ldr	r0, [pc, #192]	; (39b8 <contcon()+0x1e4>)
    38f8:	f005 ff3a 	bl	9770 <Print::println()>
          analogWrite(OUT6, 255);
    38fc:	21ff      	movs	r1, #255	; 0xff
    38fe:	2017      	movs	r0, #23
    3900:	f006 fc96 	bl	a230 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3904:	4b28      	ldr	r3, [pc, #160]	; (39a8 <contcon()+0x1d4>)
          conttimer2 = millis() + pulltime;
    3906:	492e      	ldr	r1, [pc, #184]	; (39c0 <contcon()+0x1ec>)
    3908:	681a      	ldr	r2, [r3, #0]
    390a:	9202      	str	r2, [sp, #8]
	return ret;
    390c:	9a02      	ldr	r2, [sp, #8]
    390e:	6809      	ldr	r1, [r1, #0]
    3910:	440a      	add	r2, r1
    3912:	602a      	str	r2, [r5, #0]
    3914:	e79f      	b.n	3856 <contcon()+0x82>
          analogWrite(OUT5, settings.conthold);
    3916:	4b27      	ldr	r3, [pc, #156]	; (39b4 <contcon()+0x1e0>)
    3918:	2016      	movs	r0, #22
    391a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    391e:	f006 fc87 	bl	a230 <analogWrite>
          contstat = contstat | 1;
    3922:	6823      	ldr	r3, [r4, #0]
          conttimer1 = 0;
    3924:	2200      	movs	r2, #0
          contstat = contstat | 1;
    3926:	f043 0301 	orr.w	r3, r3, #1
    392a:	6023      	str	r3, [r4, #0]
          conttimer1 = 0;
    392c:	602a      	str	r2, [r5, #0]
    392e:	e772      	b.n	3816 <contcon()+0x42>
          analogWrite(OUT5, 255);
    3930:	21ff      	movs	r1, #255	; 0xff
    3932:	2016      	movs	r0, #22
    3934:	f006 fc7c 	bl	a230 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3938:	4b1b      	ldr	r3, [pc, #108]	; (39a8 <contcon()+0x1d4>)
          conttimer1 = millis() + pulltime;
    393a:	4921      	ldr	r1, [pc, #132]	; (39c0 <contcon()+0x1ec>)
    393c:	681a      	ldr	r2, [r3, #0]
    393e:	9200      	str	r2, [sp, #0]
	return ret;
    3940:	9a00      	ldr	r2, [sp, #0]
    3942:	6809      	ldr	r1, [r1, #0]
    3944:	440a      	add	r2, r1
    3946:	602a      	str	r2, [r5, #0]
    3948:	e760      	b.n	380c <contcon()+0x38>
          analogWrite(OUT7, settings.conthold);
    394a:	4b1a      	ldr	r3, [pc, #104]	; (39b4 <contcon()+0x1e0>)
    394c:	2005      	movs	r0, #5
    394e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    3952:	f006 fc6d 	bl	a230 <analogWrite>
          contstat = contstat | 4;
    3956:	6823      	ldr	r3, [r4, #0]
  if (contctrl == 0) {
    3958:	6835      	ldr	r5, [r6, #0]
          conttimer3 = 0;
    395a:	2200      	movs	r2, #0
          contstat = contstat | 4;
    395c:	f043 0304 	orr.w	r3, r3, #4
    3960:	6023      	str	r3, [r4, #0]
          conttimer3 = 0;
    3962:	603a      	str	r2, [r7, #0]
  if (contctrl == 0) {
    3964:	2d00      	cmp	r5, #0
    3966:	f47f af6c 	bne.w	3842 <contcon()+0x6e>
    396a:	e77f      	b.n	386c <contcon()+0x98>
          Serial.println();
    396c:	4812      	ldr	r0, [pc, #72]	; (39b8 <contcon()+0x1e4>)
    396e:	f005 feff 	bl	9770 <Print::println()>
    3972:	210c      	movs	r1, #12
    3974:	4813      	ldr	r0, [pc, #76]	; (39c4 <contcon()+0x1f0>)
    3976:	f008 fc4b 	bl	c210 <usb_serial_write>
    397a:	480f      	ldr	r0, [pc, #60]	; (39b8 <contcon()+0x1e4>)
    397c:	f005 fef8 	bl	9770 <Print::println()>
          analogWrite(OUT7, 255);
    3980:	21ff      	movs	r1, #255	; 0xff
    3982:	2005      	movs	r0, #5
    3984:	f006 fc54 	bl	a230 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3988:	4b07      	ldr	r3, [pc, #28]	; (39a8 <contcon()+0x1d4>)
          conttimer3 = millis() + pulltime;
    398a:	490d      	ldr	r1, [pc, #52]	; (39c0 <contcon()+0x1ec>)
    398c:	681a      	ldr	r2, [r3, #0]
    398e:	9204      	str	r2, [sp, #16]
	return ret;
    3990:	9a04      	ldr	r2, [sp, #16]
    3992:	6809      	ldr	r1, [r1, #0]
    3994:	440a      	add	r2, r1
    3996:	603a      	str	r2, [r7, #0]
    3998:	e74b      	b.n	3832 <contcon()+0x5e>
    399a:	bf00      	nop
    399c:	1fffcfb0 	.word	0x1fffcfb0
    39a0:	1fffcfb4 	.word	0x1fffcfb4
    39a4:	1fffcfb8 	.word	0x1fffcfb8
    39a8:	1fffd3c0 	.word	0x1fffd3c0
    39ac:	1fffcfc0 	.word	0x1fffcfc0
    39b0:	1fffcfbc 	.word	0x1fffcfbc
    39b4:	1fffd0d8 	.word	0x1fffd0d8
    39b8:	1fff89fc 	.word	0x1fff89fc
    39bc:	00014464 	.word	0x00014464
    39c0:	1fff8868 	.word	0x1fff8868
    39c4:	00014474 	.word	0x00014474

000039c8 <calcur()>:
void calcur() {
    39c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  adc->adc0->startContinuous(ACUR1);
    39cc:	4e54      	ldr	r6, [pc, #336]	; (3b20 <calcur()+0x158>)
  sensor = 1;
    39ce:	f8df a154 	ldr.w	sl, [pc, #340]	; 3b24 <calcur()+0x15c>
  adc->adc0->startContinuous(ACUR1);
    39d2:	6833      	ldr	r3, [r6, #0]
  x = 0;
    39d4:	f8df 9150 	ldr.w	r9, [pc, #336]	; 3b28 <calcur()+0x160>
  adc->adc0->startContinuous(ACUR1);
    39d8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    39dc:	4d53      	ldr	r5, [pc, #332]	; (3b2c <calcur()+0x164>)
    39de:	210f      	movs	r1, #15
    39e0:	f005 fb28 	bl	9034 <ADC_Module::startContinuous(unsigned char)>
  sensor = 1;
    39e4:	2301      	movs	r3, #1
    39e6:	f8ca 3000 	str.w	r3, [sl]
    39ea:	4851      	ldr	r0, [pc, #324]	; (3b30 <calcur()+0x168>)
  x = 0;
    39ec:	2300      	movs	r3, #0
    39ee:	2122      	movs	r1, #34	; 0x22
    39f0:	f8c9 3000 	str.w	r3, [r9]
    39f4:	f008 fc0c 	bl	c210 <usb_serial_write>
  while (x < 20) {
    39f8:	f8d9 3000 	ldr.w	r3, [r9]
    39fc:	2b13      	cmp	r3, #19
    39fe:	dc21      	bgt.n	3a44 <calcur()+0x7c>
    3a00:	4f4c      	ldr	r7, [pc, #304]	; (3b34 <calcur()+0x16c>)
    settings.offset1 = settings.offset1 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    3a02:	f640 48e4 	movw	r8, #3300	; 0xce4
    3a06:	6833      	ldr	r3, [r6, #0]
    3a08:	f8b5 b088 	ldrh.w	fp, [r5, #136]	; 0x88
    3a0c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3a10:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3a12:	691c      	ldr	r4, [r3, #16]
    3a14:	f005 f856 	bl	8ac4 <ADC_Module::getMaxValue()>
    3a18:	b2a4      	uxth	r4, r4
    3a1a:	2101      	movs	r1, #1
    3a1c:	fb08 f404 	mul.w	r4, r8, r4
    3a20:	fbb4 f4f0 	udiv	r4, r4, r0
    3a24:	4638      	mov	r0, r7
    3a26:	44a3      	add	fp, r4
    3a28:	f8a5 b088 	strh.w	fp, [r5, #136]	; 0x88
    3a2c:	f008 fbf0 	bl	c210 <usb_serial_write>
    delay(100);
    3a30:	2064      	movs	r0, #100	; 0x64
    3a32:	f006 fe09 	bl	a648 <delay>
    x++;
    3a36:	f8d9 3000 	ldr.w	r3, [r9]
    3a3a:	3301      	adds	r3, #1
  while (x < 20) {
    3a3c:	2b13      	cmp	r3, #19
    x++;
    3a3e:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    3a42:	dde0      	ble.n	3a06 <calcur()+0x3e>
  settings.offset1 = settings.offset1 / 21;
    3a44:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    3a48:	493b      	ldr	r1, [pc, #236]	; (3b38 <calcur()+0x170>)
	size_t print(int n)				{ return print((long)n); }
    3a4a:	483c      	ldr	r0, [pc, #240]	; (3b3c <calcur()+0x174>)
    3a4c:	fba1 2103 	umull	r2, r1, r1, r3
    3a50:	1a5b      	subs	r3, r3, r1
    3a52:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    3a56:	f3c1 110f 	ubfx	r1, r1, #4, #16
    3a5a:	f8a5 1088 	strh.w	r1, [r5, #136]	; 0x88
    3a5e:	f005 fe7f 	bl	9760 <Print::print(long)>
    3a62:	211d      	movs	r1, #29
    3a64:	4836      	ldr	r0, [pc, #216]	; (3b40 <calcur()+0x178>)
    3a66:	f008 fbd3 	bl	c210 <usb_serial_write>
    3a6a:	2102      	movs	r1, #2
    3a6c:	4835      	ldr	r0, [pc, #212]	; (3b44 <calcur()+0x17c>)
    3a6e:	f008 fbcf 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3a72:	4832      	ldr	r0, [pc, #200]	; (3b3c <calcur()+0x174>)
    3a74:	f005 fe7c 	bl	9770 <Print::println()>
  x = 0;
    3a78:	2300      	movs	r3, #0
    3a7a:	f8c9 3000 	str.w	r3, [r9]
  adc->adc0->startContinuous(ACUR2);
    3a7e:	6833      	ldr	r3, [r6, #0]
    3a80:	210e      	movs	r1, #14
    3a82:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3a86:	f005 fad5 	bl	9034 <ADC_Module::startContinuous(unsigned char)>
  sensor = 2;
    3a8a:	2302      	movs	r3, #2
    3a8c:	4828      	ldr	r0, [pc, #160]	; (3b30 <calcur()+0x168>)
    3a8e:	f8ca 3000 	str.w	r3, [sl]
    3a92:	2122      	movs	r1, #34	; 0x22
    3a94:	f008 fbbc 	bl	c210 <usb_serial_write>
  while (x < 20) {
    3a98:	f8d9 3000 	ldr.w	r3, [r9]
    3a9c:	2b13      	cmp	r3, #19
    3a9e:	dc22      	bgt.n	3ae6 <calcur()+0x11e>
    3aa0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3b34 <calcur()+0x16c>
    settings.offset2 = settings.offset2 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    3aa4:	f640 47e4 	movw	r7, #3300	; 0xce4
    3aa8:	6833      	ldr	r3, [r6, #0]
    3aaa:	f8b5 a08a 	ldrh.w	sl, [r5, #138]	; 0x8a
    3aae:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3ab2:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3ab4:	691c      	ldr	r4, [r3, #16]
    3ab6:	f005 f805 	bl	8ac4 <ADC_Module::getMaxValue()>
    3aba:	b2a4      	uxth	r4, r4
    3abc:	2101      	movs	r1, #1
    3abe:	fb07 f404 	mul.w	r4, r7, r4
    3ac2:	fbb4 f4f0 	udiv	r4, r4, r0
    3ac6:	4640      	mov	r0, r8
    3ac8:	44a2      	add	sl, r4
    3aca:	f8a5 a08a 	strh.w	sl, [r5, #138]	; 0x8a
    3ace:	f008 fb9f 	bl	c210 <usb_serial_write>
    delay(100);
    3ad2:	2064      	movs	r0, #100	; 0x64
    3ad4:	f006 fdb8 	bl	a648 <delay>
    x++;
    3ad8:	f8d9 3000 	ldr.w	r3, [r9]
    3adc:	3301      	adds	r3, #1
  while (x < 20) {
    3ade:	2b13      	cmp	r3, #19
    x++;
    3ae0:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    3ae4:	dde0      	ble.n	3aa8 <calcur()+0xe0>
  settings.offset2 = settings.offset2 / 21;
    3ae6:	f8b5 308a 	ldrh.w	r3, [r5, #138]	; 0x8a
    3aea:	4913      	ldr	r1, [pc, #76]	; (3b38 <calcur()+0x170>)
	size_t print(int n)				{ return print((long)n); }
    3aec:	4813      	ldr	r0, [pc, #76]	; (3b3c <calcur()+0x174>)
    3aee:	fba1 2103 	umull	r2, r1, r1, r3
    3af2:	1a5b      	subs	r3, r3, r1
    3af4:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    3af8:	f3c1 110f 	ubfx	r1, r1, #4, #16
    3afc:	f8a5 108a 	strh.w	r1, [r5, #138]	; 0x8a
    3b00:	f005 fe2e 	bl	9760 <Print::print(long)>
    3b04:	211d      	movs	r1, #29
    3b06:	4810      	ldr	r0, [pc, #64]	; (3b48 <calcur()+0x180>)
    3b08:	f008 fb82 	bl	c210 <usb_serial_write>
    3b0c:	480d      	ldr	r0, [pc, #52]	; (3b44 <calcur()+0x17c>)
    3b0e:	2102      	movs	r1, #2
    3b10:	f008 fb7e 	bl	c210 <usb_serial_write>
}
    3b14:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    3b18:	4808      	ldr	r0, [pc, #32]	; (3b3c <calcur()+0x174>)
    3b1a:	f005 be29 	b.w	9770 <Print::println()>
    3b1e:	bf00      	nop
    3b20:	1fff91dc 	.word	0x1fff91dc
    3b24:	1fff8878 	.word	0x1fff8878
    3b28:	1fffd1c8 	.word	0x1fffd1c8
    3b2c:	1fffd0d8 	.word	0x1fffd0d8
    3b30:	00014484 	.word	0x00014484
    3b34:	000144a8 	.word	0x000144a8
    3b38:	86186187 	.word	0x86186187
    3b3c:	1fff89fc 	.word	0x1fff89fc
    3b40:	000144ac 	.word	0x000144ac
    3b44:	00015030 	.word	0x00015030
    3b48:	000144cc 	.word	0x000144cc

00003b4c <VEcan()>:
{
    3b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (settings.chargertype == Pylon) {
    3b4e:	4d9f      	ldr	r5, [pc, #636]	; (3dcc <VEcan()+0x280>)
    3b50:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
    3b54:	2b07      	cmp	r3, #7
    3b56:	f000 815d 	beq.w	3e14 <VEcan()+0x2c8>
    if (storagemode == 0) {
    3b5a:	4b9d      	ldr	r3, [pc, #628]	; (3dd0 <VEcan()+0x284>)
    msg.id = 0x351;
    3b5c:	4c9d      	ldr	r4, [pc, #628]	; (3dd4 <VEcan()+0x288>)
    if (storagemode == 0) {
    3b5e:	681b      	ldr	r3, [r3, #0]
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3b60:	6d68      	ldr	r0, [r5, #84]	; 0x54
    msg.id = 0x351;
    3b62:	f240 3151 	movw	r1, #849	; 0x351
    msg.len = 8;
    3b66:	2208      	movs	r2, #8
    msg.id = 0x351;
    3b68:	6021      	str	r1, [r4, #0]
    msg.len = 8;
    3b6a:	71e2      	strb	r2, [r4, #7]
    if (storagemode == 0) {
    3b6c:	2b00      	cmp	r3, #0
    3b6e:	f000 8128 	beq.w	3dc2 <VEcan()+0x276>
      msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3b72:	f009 f9d9 	bl	cf28 <__aeabi_i2f>
    3b76:	6a29      	ldr	r1, [r5, #32]
    3b78:	4606      	mov	r6, r0
    3b7a:	f009 fa29 	bl	cfd0 <__aeabi_fmul>
    3b7e:	4996      	ldr	r1, [pc, #600]	; (3dd8 <VEcan()+0x28c>)
    3b80:	f009 fa26 	bl	cfd0 <__aeabi_fmul>
    3b84:	f009 fc10 	bl	d3a8 <__aeabi_f2uiz>
    3b88:	b2c2      	uxtb	r2, r0
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3b8a:	7222      	strb	r2, [r4, #8]
    msg.buf[2] = lowByte(chargecurrent);
    3b8c:	4a93      	ldr	r2, [pc, #588]	; (3ddc <VEcan()+0x290>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3b8e:	69a9      	ldr	r1, [r5, #24]
      msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3b90:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3b94:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = lowByte(chargecurrent);
    3b96:	8813      	ldrh	r3, [r2, #0]
    3b98:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = lowByte(discurrent);
    3b9a:	4b91      	ldr	r3, [pc, #580]	; (3de0 <VEcan()+0x294>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3b9c:	4630      	mov	r0, r6
    msg.buf[4] = lowByte(discurrent);
    3b9e:	881b      	ldrh	r3, [r3, #0]
    3ba0:	81a3      	strh	r3, [r4, #12]
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3ba2:	f009 fa15 	bl	cfd0 <__aeabi_fmul>
    3ba6:	498c      	ldr	r1, [pc, #560]	; (3dd8 <VEcan()+0x28c>)
    3ba8:	f009 fa12 	bl	cfd0 <__aeabi_fmul>
    3bac:	f009 fbfc 	bl	d3a8 <__aeabi_f2uiz>
    Can0.write(msg);
    3bb0:	4988      	ldr	r1, [pc, #544]	; (3dd4 <VEcan()+0x288>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3bb2:	4603      	mov	r3, r0
    Can0.write(msg);
    3bb4:	488b      	ldr	r0, [pc, #556]	; (3de4 <VEcan()+0x298>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3bb6:	81e3      	strh	r3, [r4, #14]
    Can0.write(msg);
    3bb8:	f004 fd0a 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    msg.buf[0] = lowByte(SOC);
    3bbc:	4a8a      	ldr	r2, [pc, #552]	; (3de8 <VEcan()+0x29c>)
    Can0.write(msg);
    3bbe:	4889      	ldr	r0, [pc, #548]	; (3de4 <VEcan()+0x298>)
    msg.buf[0] = lowByte(SOC);
    3bc0:	6813      	ldr	r3, [r2, #0]
    3bc2:	8812      	ldrh	r2, [r2, #0]
    3bc4:	8122      	strh	r2, [r4, #8]
    msg.buf[4] = lowByte(SOC * 10);
    3bc6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    msg.buf[2] = lowByte(SOH);
    3bca:	4a88      	ldr	r2, [pc, #544]	; (3dec <VEcan()+0x2a0>)
    msg.len = 8;
    3bcc:	2608      	movs	r6, #8
    msg.buf[4] = lowByte(SOC * 10);
    3bce:	005b      	lsls	r3, r3, #1
    msg.id = 0x355;
    3bd0:	f240 3155 	movw	r1, #853	; 0x355
    msg.buf[2] = lowByte(SOH);
    3bd4:	8812      	ldrh	r2, [r2, #0]
    msg.id = 0x355;
    3bd6:	6021      	str	r1, [r4, #0]
    msg.buf[6] = 0;
    3bd8:	2700      	movs	r7, #0
    Can0.write(msg);
    3bda:	497e      	ldr	r1, [pc, #504]	; (3dd4 <VEcan()+0x288>)
    msg.buf[4] = lowByte(SOC * 10);
    3bdc:	7323      	strb	r3, [r4, #12]
    msg.buf[5] = highByte(SOC * 10);
    3bde:	4133      	asrs	r3, r6
    msg.buf[2] = lowByte(SOH);
    3be0:	8162      	strh	r2, [r4, #10]
    msg.buf[5] = highByte(SOC * 10);
    3be2:	7363      	strb	r3, [r4, #13]
    msg.len = 8;
    3be4:	71e6      	strb	r6, [r4, #7]
    msg.buf[6] = 0;
    3be6:	81e7      	strh	r7, [r4, #14]
    Can0.write(msg);
    3be8:	f004 fcf2 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    msg.id = 0x356;
    3bec:	f240 3356 	movw	r3, #854	; 0x356
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3bf0:	487f      	ldr	r0, [pc, #508]	; (3df0 <VEcan()+0x2a4>)
    msg.id = 0x356;
    3bf2:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    3bf4:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3bf6:	f7fd fee3 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    3bfa:	497e      	ldr	r1, [pc, #504]	; (3df4 <VEcan()+0x2a8>)
    3bfc:	f009 f9e8 	bl	cfd0 <__aeabi_fmul>
    3c00:	f009 fbd2 	bl	d3a8 <__aeabi_f2uiz>
    3c04:	7220      	strb	r0, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3c06:	487a      	ldr	r0, [pc, #488]	; (3df0 <VEcan()+0x2a4>)
    3c08:	f7fd feda 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    3c0c:	4979      	ldr	r1, [pc, #484]	; (3df4 <VEcan()+0x2a8>)
    3c0e:	f009 f9df 	bl	cfd0 <__aeabi_fmul>
    3c12:	f009 fbc9 	bl	d3a8 <__aeabi_f2uiz>
    msg.buf[2] = lowByte(long(currentact / 100));
    3c16:	4b78      	ldr	r3, [pc, #480]	; (3df8 <VEcan()+0x2ac>)
    3c18:	4976      	ldr	r1, [pc, #472]	; (3df4 <VEcan()+0x2a8>)
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3c1a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    3c1e:	7260      	strb	r0, [r4, #9]
    msg.buf[2] = lowByte(long(currentact / 100));
    3c20:	6818      	ldr	r0, [r3, #0]
    3c22:	f009 fa89 	bl	d138 <__aeabi_fdiv>
    3c26:	f009 fb99 	bl	d35c <__aeabi_f2iz>
    3c2a:	8160      	strh	r0, [r4, #10]
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3c2c:	4870      	ldr	r0, [pc, #448]	; (3df0 <VEcan()+0x2a4>)
    3c2e:	f7fd fef5 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    3c32:	4969      	ldr	r1, [pc, #420]	; (3dd8 <VEcan()+0x28c>)
    3c34:	f009 f9cc 	bl	cfd0 <__aeabi_fmul>
    3c38:	f009 fb90 	bl	d35c <__aeabi_f2iz>
    3c3c:	7320      	strb	r0, [r4, #12]
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3c3e:	486c      	ldr	r0, [pc, #432]	; (3df0 <VEcan()+0x2a4>)
    3c40:	f7fd feec 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    3c44:	4964      	ldr	r1, [pc, #400]	; (3dd8 <VEcan()+0x28c>)
    3c46:	f009 f9c3 	bl	cfd0 <__aeabi_fmul>
    3c4a:	f009 fb87 	bl	d35c <__aeabi_f2iz>
    3c4e:	f340 2007 	sbfx	r0, r0, #8, #8
    Can0.write(msg);
    3c52:	4960      	ldr	r1, [pc, #384]	; (3dd4 <VEcan()+0x288>)
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3c54:	7360      	strb	r0, [r4, #13]
    Can0.write(msg);
    3c56:	4863      	ldr	r0, [pc, #396]	; (3de4 <VEcan()+0x298>)
    msg.buf[6] = 0;
    3c58:	81e7      	strh	r7, [r4, #14]
    Can0.write(msg);
    3c5a:	f004 fcb9 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3c5e:	2002      	movs	r0, #2
    3c60:	f006 fcf2 	bl	a648 <delay>
    msg.id = 0x35A;
    3c64:	f240 335a 	movw	r3, #858	; 0x35a
    3c68:	6023      	str	r3, [r4, #0]
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3c6a:	4b64      	ldr	r3, [pc, #400]	; (3dfc <VEcan()+0x2b0>)
    Can0.write(msg);
    3c6c:	4959      	ldr	r1, [pc, #356]	; (3dd4 <VEcan()+0x288>)
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3c6e:	681b      	ldr	r3, [r3, #0]
    3c70:	60a3      	str	r3, [r4, #8]
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3c72:	4b63      	ldr	r3, [pc, #396]	; (3e00 <VEcan()+0x2b4>)
    Can0.write(msg);
    3c74:	485b      	ldr	r0, [pc, #364]	; (3de4 <VEcan()+0x298>)
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3c76:	681b      	ldr	r3, [r3, #0]
    3c78:	60e3      	str	r3, [r4, #12]
    msg.len = 8;
    3c7a:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3c7c:	f004 fca8 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    msg.id = 0x35E;
    3c80:	f240 335e 	movw	r3, #862	; 0x35e
    3c84:	6023      	str	r3, [r4, #0]
    msg.buf[0] = bmsname[0];
    3c86:	4b5f      	ldr	r3, [pc, #380]	; (3e04 <VEcan()+0x2b8>)
    Can0.write(msg);
    3c88:	4952      	ldr	r1, [pc, #328]	; (3dd4 <VEcan()+0x288>)
    msg.buf[0] = bmsname[0];
    3c8a:	681a      	ldr	r2, [r3, #0]
    Can0.write(msg);
    3c8c:	4855      	ldr	r0, [pc, #340]	; (3de4 <VEcan()+0x298>)
    msg.buf[4] = bmsname[4];
    3c8e:	685b      	ldr	r3, [r3, #4]
    msg.buf[0] = bmsname[0];
    3c90:	60a2      	str	r2, [r4, #8]
    msg.buf[4] = bmsname[4];
    3c92:	60e3      	str	r3, [r4, #12]
    msg.len = 8;
    3c94:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3c96:	f004 fc9b 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3c9a:	2002      	movs	r0, #2
    3c9c:	f006 fcd4 	bl	a648 <delay>
    msg.id = 0x370;
    3ca0:	f44f 735c 	mov.w	r3, #880	; 0x370
    3ca4:	6023      	str	r3, [r4, #0]
    msg.buf[0] = bmsmanu[0];
    3ca6:	4b58      	ldr	r3, [pc, #352]	; (3e08 <VEcan()+0x2bc>)
    Can0.write(msg);
    3ca8:	494a      	ldr	r1, [pc, #296]	; (3dd4 <VEcan()+0x288>)
    msg.buf[0] = bmsmanu[0];
    3caa:	681a      	ldr	r2, [r3, #0]
    Can0.write(msg);
    3cac:	484d      	ldr	r0, [pc, #308]	; (3de4 <VEcan()+0x298>)
    msg.buf[4] = bmsmanu[4];
    3cae:	685b      	ldr	r3, [r3, #4]
    msg.buf[0] = bmsmanu[0];
    3cb0:	60a2      	str	r2, [r4, #8]
    msg.buf[4] = bmsmanu[4];
    3cb2:	60e3      	str	r3, [r4, #12]
    msg.len = 8;
    3cb4:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3cb6:	f004 fc8b 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3cba:	2002      	movs	r0, #2
    3cbc:	f006 fcc4 	bl	a648 <delay>
    msg.id = 0x373;
    3cc0:	f240 3373 	movw	r3, #883	; 0x373
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    3cc4:	484a      	ldr	r0, [pc, #296]	; (3df0 <VEcan()+0x2a4>)
    msg.id = 0x373;
    3cc6:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    3cc8:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    3cca:	f7fd fe2f 	bl	192c <BMSModuleManager::getLowCellVolt()>
    3cce:	494f      	ldr	r1, [pc, #316]	; (3e0c <VEcan()+0x2c0>)
    3cd0:	f009 f97e 	bl	cfd0 <__aeabi_fmul>
    3cd4:	f009 fb68 	bl	d3a8 <__aeabi_f2uiz>
    3cd8:	7220      	strb	r0, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    3cda:	4845      	ldr	r0, [pc, #276]	; (3df0 <VEcan()+0x2a4>)
    3cdc:	f7fd fe26 	bl	192c <BMSModuleManager::getLowCellVolt()>
    3ce0:	494a      	ldr	r1, [pc, #296]	; (3e0c <VEcan()+0x2c0>)
    3ce2:	f009 f975 	bl	cfd0 <__aeabi_fmul>
    3ce6:	f009 fb5f 	bl	d3a8 <__aeabi_f2uiz>
    3cea:	f3c0 2007 	ubfx	r0, r0, #8, #8
    3cee:	7260      	strb	r0, [r4, #9]
    msg.buf[2] = lowByte(uint16_t(bms.getHighCellVolt() * 1000));
    3cf0:	483f      	ldr	r0, [pc, #252]	; (3df0 <VEcan()+0x2a4>)
    3cf2:	f7fd fe41 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    3cf6:	4945      	ldr	r1, [pc, #276]	; (3e0c <VEcan()+0x2c0>)
    3cf8:	f009 f96a 	bl	cfd0 <__aeabi_fmul>
    3cfc:	f009 fb54 	bl	d3a8 <__aeabi_f2uiz>
    3d00:	72a0      	strb	r0, [r4, #10]
    msg.buf[3] = highByte(uint16_t(bms.getHighCellVolt() * 1000));
    3d02:	483b      	ldr	r0, [pc, #236]	; (3df0 <VEcan()+0x2a4>)
    3d04:	f7fd fe38 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    3d08:	4940      	ldr	r1, [pc, #256]	; (3e0c <VEcan()+0x2c0>)
    3d0a:	f009 f961 	bl	cfd0 <__aeabi_fmul>
    3d0e:	f009 fb4b 	bl	d3a8 <__aeabi_f2uiz>
    3d12:	f3c0 2007 	ubfx	r0, r0, #8, #8
    3d16:	72e0      	strb	r0, [r4, #11]
    msg.buf[4] = lowByte(uint16_t(bms.getLowTemperature() + 273.15));
    3d18:	4835      	ldr	r0, [pc, #212]	; (3df0 <VEcan()+0x2a4>)
    3d1a:	f7fd fedf 	bl	1adc <BMSModuleManager::getLowTemperature()>
    3d1e:	493c      	ldr	r1, [pc, #240]	; (3e10 <VEcan()+0x2c4>)
    3d20:	f009 f84e 	bl	cdc0 <__addsf3>
    3d24:	f009 fb40 	bl	d3a8 <__aeabi_f2uiz>
    3d28:	7320      	strb	r0, [r4, #12]
    msg.buf[5] = highByte(uint16_t(bms.getLowTemperature() + 273.15));
    3d2a:	4831      	ldr	r0, [pc, #196]	; (3df0 <VEcan()+0x2a4>)
    3d2c:	f7fd fed6 	bl	1adc <BMSModuleManager::getLowTemperature()>
    3d30:	4937      	ldr	r1, [pc, #220]	; (3e10 <VEcan()+0x2c4>)
    3d32:	f009 f845 	bl	cdc0 <__addsf3>
    3d36:	f009 fb37 	bl	d3a8 <__aeabi_f2uiz>
    3d3a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    3d3e:	7360      	strb	r0, [r4, #13]
    msg.buf[6] = lowByte(uint16_t(bms.getHighTemperature() + 273.15));
    3d40:	482b      	ldr	r0, [pc, #172]	; (3df0 <VEcan()+0x2a4>)
    3d42:	f7fd fec9 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    3d46:	4932      	ldr	r1, [pc, #200]	; (3e10 <VEcan()+0x2c4>)
    3d48:	f009 f83a 	bl	cdc0 <__addsf3>
    3d4c:	f009 fb2c 	bl	d3a8 <__aeabi_f2uiz>
    3d50:	73a0      	strb	r0, [r4, #14]
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    3d52:	4827      	ldr	r0, [pc, #156]	; (3df0 <VEcan()+0x2a4>)
    3d54:	f7fd fec0 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    3d58:	492d      	ldr	r1, [pc, #180]	; (3e10 <VEcan()+0x2c4>)
    3d5a:	f009 f831 	bl	cdc0 <__addsf3>
    3d5e:	f009 fb23 	bl	d3a8 <__aeabi_f2uiz>
    3d62:	f3c0 2007 	ubfx	r0, r0, #8, #8
    Can0.write(msg);
    3d66:	491b      	ldr	r1, [pc, #108]	; (3dd4 <VEcan()+0x288>)
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    3d68:	73e0      	strb	r0, [r4, #15]
    Can0.write(msg);
    3d6a:	481e      	ldr	r0, [pc, #120]	; (3de4 <VEcan()+0x298>)
    3d6c:	f004 fc30 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3d70:	2002      	movs	r0, #2
    3d72:	f006 fc69 	bl	a648 <delay>
    msg.id = 0x379;  //Installed capacity
    3d76:	f240 3379 	movw	r3, #889	; 0x379
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    3d7a:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    msg.id = 0x379;  //Installed capacity
    3d7c:	6023      	str	r3, [r4, #0]
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    3d7e:	6dab      	ldr	r3, [r5, #88]	; 0x58
    3d80:	fb13 f302 	smulbb	r3, r3, r2
    msg.len = 2;
    3d84:	2002      	movs	r0, #2
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    3d86:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    3d88:	f3c3 2307 	ubfx	r3, r3, #8, #8
    msg.len = 2;
    3d8c:	71e0      	strb	r0, [r4, #7]
    msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    3d8e:	7263      	strb	r3, [r4, #9]
    delay(2);
    3d90:	f006 fc5a 	bl	a648 <delay>
    msg.id = 0x372;
    3d94:	f240 3372 	movw	r3, #882	; 0x372
    msg.buf[0] = lowByte(bms.getNumModules());
    3d98:	4815      	ldr	r0, [pc, #84]	; (3df0 <VEcan()+0x2a4>)
    msg.id = 0x372;
    3d9a:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    3d9c:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(bms.getNumModules());
    3d9e:	f7fd fe11 	bl	19c4 <BMSModuleManager::getNumModules()>
    3da2:	4603      	mov	r3, r0
    msg.buf[1] = highByte(bms.getNumModules());
    3da4:	4812      	ldr	r0, [pc, #72]	; (3df0 <VEcan()+0x2a4>)
    msg.buf[0] = lowByte(bms.getNumModules());
    3da6:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(bms.getNumModules());
    3da8:	f7fd fe0c 	bl	19c4 <BMSModuleManager::getNumModules()>
    3dac:	fa40 f306 	asr.w	r3, r0, r6
    3db0:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = 0x00;
    3db2:	8167      	strh	r7, [r4, #10]
    msg.buf[4] = 0x00;
    3db4:	60e7      	str	r7, [r4, #12]
    Can0.write(msg);
    3db6:	4907      	ldr	r1, [pc, #28]	; (3dd4 <VEcan()+0x288>)
    3db8:	480a      	ldr	r0, [pc, #40]	; (3de4 <VEcan()+0x298>)
}
    3dba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Can0.write(msg);
    3dbe:	f004 bc07 	b.w	85d0 <FlexCAN::write(CAN_message_t const&)>
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3dc2:	f009 f8b1 	bl	cf28 <__aeabi_i2f>
    3dc6:	6969      	ldr	r1, [r5, #20]
    3dc8:	e6d6      	b.n	3b78 <VEcan()+0x2c>
    3dca:	bf00      	nop
    3dcc:	1fffd0d8 	.word	0x1fffd0d8
    3dd0:	1fffd1b0 	.word	0x1fffd1b0
    3dd4:	1fffd034 	.word	0x1fffd034
    3dd8:	41200000 	.word	0x41200000
    3ddc:	1fffcf40 	.word	0x1fffcf40
    3de0:	1fffcfcc 	.word	0x1fffcfcc
    3de4:	1fffd1cc 	.word	0x1fffd1cc
    3de8:	1fff8828 	.word	0x1fff8828
    3dec:	1fff882c 	.word	0x1fff882c
    3df0:	1fff91f0 	.word	0x1fff91f0
    3df4:	42c80000 	.word	0x42c80000
    3df8:	1fffcfc4 	.word	0x1fffcfc4
    3dfc:	1fff91e0 	.word	0x1fff91e0
    3e00:	1fffd1c4 	.word	0x1fffd1c4
    3e04:	1fff8838 	.word	0x1fff8838
    3e08:	1fff8830 	.word	0x1fff8830
    3e0c:	447a0000 	.word	0x447a0000
    3e10:	43889333 	.word	0x43889333
    msg.id = 0x359;
    3e14:	4c55      	ldr	r4, [pc, #340]	; (3f6c <VEcan()+0x420>)
    msg.buf[4] = 0x01;  //number of modules fixed for now
    3e16:	4b56      	ldr	r3, [pc, #344]	; (3f70 <VEcan()+0x424>)
    3e18:	60e3      	str	r3, [r4, #12]
    msg.id = 0x359;
    3e1a:	f240 3259 	movw	r2, #857	; 0x359
    msg.buf[0] = 0x00;  //protection to be translated later date
    3e1e:	2300      	movs	r3, #0
    msg.len = 8;
    3e20:	2608      	movs	r6, #8
    Can0.write(msg);
    3e22:	4621      	mov	r1, r4
    3e24:	4853      	ldr	r0, [pc, #332]	; (3f74 <VEcan()+0x428>)
    msg.id = 0x359;
    3e26:	6022      	str	r2, [r4, #0]
    msg.buf[0] = 0x00;  //protection to be translated later date
    3e28:	60a3      	str	r3, [r4, #8]
    msg.len = 8;
    3e2a:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3e2c:	f004 fbd0 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3e30:	2002      	movs	r0, #2
    3e32:	f006 fc09 	bl	a648 <delay>
    if (storagemode == 0) {
    3e36:	4b50      	ldr	r3, [pc, #320]	; (3f78 <VEcan()+0x42c>)
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3e38:	6d68      	ldr	r0, [r5, #84]	; 0x54
    if (storagemode == 0) {
    3e3a:	681b      	ldr	r3, [r3, #0]
    msg.len = 8;
    3e3c:	71e6      	strb	r6, [r4, #7]
    msg.id = 0x351;
    3e3e:	f240 3251 	movw	r2, #849	; 0x351
    3e42:	6022      	str	r2, [r4, #0]
    if (storagemode == 0) {
    3e44:	2b00      	cmp	r3, #0
    3e46:	f000 808d 	beq.w	3f64 <VEcan()+0x418>
      msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3e4a:	f009 f86d 	bl	cf28 <__aeabi_i2f>
    3e4e:	6a29      	ldr	r1, [r5, #32]
    3e50:	f009 f8be 	bl	cfd0 <__aeabi_fmul>
    3e54:	4949      	ldr	r1, [pc, #292]	; (3f7c <VEcan()+0x430>)
    3e56:	f009 f8bb 	bl	cfd0 <__aeabi_fmul>
    3e5a:	f009 faa5 	bl	d3a8 <__aeabi_f2uiz>
    msg.buf[2] = lowByte(chargecurrent);
    3e5e:	4a48      	ldr	r2, [pc, #288]	; (3f80 <VEcan()+0x434>)
    msg.buf[4] = lowByte(discurrent);
    3e60:	4b48      	ldr	r3, [pc, #288]	; (3f84 <VEcan()+0x438>)
    msg.buf[2] = lowByte(chargecurrent);
    3e62:	8812      	ldrh	r2, [r2, #0]
    msg.buf[4] = lowByte(discurrent);
    3e64:	881b      	ldrh	r3, [r3, #0]
    msg.buf[2] = lowByte(chargecurrent);
    3e66:	8162      	strh	r2, [r4, #10]
      msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3e68:	b2c1      	uxtb	r1, r0
      msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3e6a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    msg.buf[6] = 0x00;
    3e6e:	2500      	movs	r5, #0
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3e70:	7221      	strb	r1, [r4, #8]
      msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3e72:	7260      	strb	r0, [r4, #9]
    Can0.write(msg);
    3e74:	493d      	ldr	r1, [pc, #244]	; (3f6c <VEcan()+0x420>)
    3e76:	483f      	ldr	r0, [pc, #252]	; (3f74 <VEcan()+0x428>)
    msg.buf[4] = lowByte(discurrent);
    3e78:	81a3      	strh	r3, [r4, #12]
    msg.buf[6] = 0x00;
    3e7a:	81e5      	strh	r5, [r4, #14]
    Can0.write(msg);
    3e7c:	f004 fba8 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3e80:	2002      	movs	r0, #2
    3e82:	f006 fbe1 	bl	a648 <delay>
    msg.buf[2] = lowByte(SOH);   //static for now
    3e86:	4b40      	ldr	r3, [pc, #256]	; (3f88 <VEcan()+0x43c>)
    msg.buf[0] = lowByte(SOC);
    3e88:	4a40      	ldr	r2, [pc, #256]	; (3f8c <VEcan()+0x440>)
    msg.buf[2] = lowByte(SOH);   //static for now
    3e8a:	881b      	ldrh	r3, [r3, #0]
    msg.buf[0] = lowByte(SOC);
    3e8c:	8812      	ldrh	r2, [r2, #0]
    Can0.write(msg);
    3e8e:	4937      	ldr	r1, [pc, #220]	; (3f6c <VEcan()+0x420>)
    msg.buf[2] = lowByte(SOH);   //static for now
    3e90:	8163      	strh	r3, [r4, #10]
    msg.len = 8;
    3e92:	2608      	movs	r6, #8
    msg.id = 0x355;
    3e94:	f240 3355 	movw	r3, #853	; 0x355
    Can0.write(msg);
    3e98:	4836      	ldr	r0, [pc, #216]	; (3f74 <VEcan()+0x428>)
    msg.buf[0] = lowByte(SOC);
    3e9a:	8122      	strh	r2, [r4, #8]
    msg.id = 0x355;
    3e9c:	6023      	str	r3, [r4, #0]
    msg.buf[4] = 0x00;
    3e9e:	60e5      	str	r5, [r4, #12]
    msg.len = 8;
    3ea0:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3ea2:	f004 fb95 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3ea6:	2002      	movs	r0, #2
    3ea8:	f006 fbce 	bl	a648 <delay>
    msg.id = 0x356;
    3eac:	f240 3356 	movw	r3, #854	; 0x356
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3eb0:	4837      	ldr	r0, [pc, #220]	; (3f90 <VEcan()+0x444>)
    msg.id = 0x356;
    3eb2:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    3eb4:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3eb6:	f7fd fd83 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    3eba:	4936      	ldr	r1, [pc, #216]	; (3f94 <VEcan()+0x448>)
    3ebc:	f009 f888 	bl	cfd0 <__aeabi_fmul>
    3ec0:	f009 fa72 	bl	d3a8 <__aeabi_f2uiz>
    3ec4:	4603      	mov	r3, r0
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3ec6:	4832      	ldr	r0, [pc, #200]	; (3f90 <VEcan()+0x444>)
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3ec8:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3eca:	f7fd fd79 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    3ece:	4931      	ldr	r1, [pc, #196]	; (3f94 <VEcan()+0x448>)
    3ed0:	f009 f87e 	bl	cfd0 <__aeabi_fmul>
    3ed4:	f009 fa68 	bl	d3a8 <__aeabi_f2uiz>
    msg.buf[2] = lowByte(long(currentact / 100));
    3ed8:	4a2f      	ldr	r2, [pc, #188]	; (3f98 <VEcan()+0x44c>)
    3eda:	492e      	ldr	r1, [pc, #184]	; (3f94 <VEcan()+0x448>)
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3edc:	4603      	mov	r3, r0
    3ede:	f3c3 2307 	ubfx	r3, r3, #8, #8
    msg.buf[2] = lowByte(long(currentact / 100));
    3ee2:	6810      	ldr	r0, [r2, #0]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3ee4:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = lowByte(long(currentact / 100));
    3ee6:	f009 f927 	bl	d138 <__aeabi_fdiv>
    3eea:	f009 fa37 	bl	d35c <__aeabi_f2iz>
    3eee:	4603      	mov	r3, r0
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3ef0:	4827      	ldr	r0, [pc, #156]	; (3f90 <VEcan()+0x444>)
    msg.buf[2] = lowByte(long(currentact / 100));
    3ef2:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3ef4:	f7fd fd92 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    3ef8:	4920      	ldr	r1, [pc, #128]	; (3f7c <VEcan()+0x430>)
    3efa:	f009 f869 	bl	cfd0 <__aeabi_fmul>
    3efe:	f009 fa2d 	bl	d35c <__aeabi_f2iz>
    3f02:	4603      	mov	r3, r0
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3f04:	4822      	ldr	r0, [pc, #136]	; (3f90 <VEcan()+0x444>)
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3f06:	7323      	strb	r3, [r4, #12]
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3f08:	f7fd fd88 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    3f0c:	491b      	ldr	r1, [pc, #108]	; (3f7c <VEcan()+0x430>)
    3f0e:	f009 f85f 	bl	cfd0 <__aeabi_fmul>
    3f12:	f009 fa23 	bl	d35c <__aeabi_f2iz>
    Can0.write(msg);
    3f16:	4915      	ldr	r1, [pc, #84]	; (3f6c <VEcan()+0x420>)
    msg.buf[6] = 0;
    3f18:	81e5      	strh	r5, [r4, #14]
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3f1a:	f340 2307 	sbfx	r3, r0, #8, #8
    Can0.write(msg);
    3f1e:	4815      	ldr	r0, [pc, #84]	; (3f74 <VEcan()+0x428>)
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3f20:	7363      	strb	r3, [r4, #13]
    Can0.write(msg);
    3f22:	f004 fb55 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3f26:	2002      	movs	r0, #2
    3f28:	f006 fb8e 	bl	a648 <delay>
    msg.id = 0x35C;
    3f2c:	f44f 7357 	mov.w	r3, #860	; 0x35c
    msg.len = 2;
    3f30:	2502      	movs	r5, #2
    Can0.write(msg);
    3f32:	490e      	ldr	r1, [pc, #56]	; (3f6c <VEcan()+0x420>)
    msg.id = 0x35C;
    3f34:	6023      	str	r3, [r4, #0]
    Can0.write(msg);
    3f36:	480f      	ldr	r0, [pc, #60]	; (3f74 <VEcan()+0x428>)
    msg.len = 2;
    3f38:	71e5      	strb	r5, [r4, #7]
    msg.buf[0] = 0xC0;  //fixed charge and discharge enable for verifcation
    3f3a:	23c0      	movs	r3, #192	; 0xc0
    3f3c:	8123      	strh	r3, [r4, #8]
    Can0.write(msg);
    3f3e:	f004 fb47 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3f42:	4628      	mov	r0, r5
    3f44:	f006 fb80 	bl	a648 <delay>
    msg.buf[1] = "P";  //No idea how the naming works
    3f48:	4b14      	ldr	r3, [pc, #80]	; (3f9c <VEcan()+0x450>)
    msg.buf[0] = "T";  //No idea how the naming works
    3f4a:	4a15      	ldr	r2, [pc, #84]	; (3fa0 <VEcan()+0x454>)
    msg.len = 2;
    3f4c:	71e5      	strb	r5, [r4, #7]
    msg.id = 0x35E;
    3f4e:	f240 315e 	movw	r1, #862	; 0x35e
    3f52:	6021      	str	r1, [r4, #0]
    msg.buf[0] = "T";  //No idea how the naming works
    3f54:	7222      	strb	r2, [r4, #8]
    msg.buf[1] = "P";  //No idea how the naming works
    3f56:	7263      	strb	r3, [r4, #9]
    Can0.write(msg);
    3f58:	4904      	ldr	r1, [pc, #16]	; (3f6c <VEcan()+0x420>)
    3f5a:	4806      	ldr	r0, [pc, #24]	; (3f74 <VEcan()+0x428>)
}
    3f5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Can0.write(msg);
    3f60:	f004 bb36 	b.w	85d0 <FlexCAN::write(CAN_message_t const&)>
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3f64:	f008 ffe0 	bl	cf28 <__aeabi_i2f>
    3f68:	6969      	ldr	r1, [r5, #20]
    3f6a:	e771      	b.n	3e50 <VEcan()+0x304>
    3f6c:	1fffd034 	.word	0x1fffd034
    3f70:	004e5001 	.word	0x004e5001
    3f74:	1fffd1cc 	.word	0x1fffd1cc
    3f78:	1fffd1b0 	.word	0x1fffd1b0
    3f7c:	41200000 	.word	0x41200000
    3f80:	1fffcf40 	.word	0x1fffcf40
    3f84:	1fffcfcc 	.word	0x1fffcfcc
    3f88:	1fff882c 	.word	0x1fff882c
    3f8c:	1fff8828 	.word	0x1fff8828
    3f90:	1fff91f0 	.word	0x1fff91f0
    3f94:	42c80000 	.word	0x42c80000
    3f98:	1fffcfc4 	.word	0x1fffcfc4
    3f9c:	000144ec 	.word	0x000144ec
    3fa0:	000141d4 	.word	0x000141d4

00003fa4 <menu()>:
void menu() {
    3fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (menuload == 4) {
    3fa8:	4ca6      	ldr	r4, [pc, #664]	; (4244 <menu()+0x2a0>)
  incomingByte = Serial.read();  // read the incoming byte:
    3faa:	4da7      	ldr	r5, [pc, #668]	; (4248 <menu()+0x2a4>)
void menu() {
    3fac:	b082      	sub	sp, #8
        virtual int read() { return usb_serial_getchar(); }
    3fae:	f008 f8c1 	bl	c134 <usb_serial_getchar>
  if (menuload == 4) {
    3fb2:	6823      	ldr	r3, [r4, #0]
  incomingByte = Serial.read();  // read the incoming byte:
    3fb4:	6028      	str	r0, [r5, #0]
  if (menuload == 4) {
    3fb6:	2b04      	cmp	r3, #4
    3fb8:	d05d      	beq.n	4076 <menu()+0xd2>
  if (menuload == 2) {
    3fba:	2b02      	cmp	r3, #2
    3fbc:	f040 8166 	bne.w	428c <menu()+0x2e8>
    switch (incomingByte) {
    3fc0:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
    3fc4:	2a42      	cmp	r2, #66	; 0x42
    3fc6:	d84a      	bhi.n	405e <menu()+0xba>
    3fc8:	e8df f012 	tbh	[pc, r2, lsl #1]
    3fcc:	051a049e 	.word	0x051a049e
    3fd0:	05270550 	.word	0x05270550
    3fd4:	056a0541 	.word	0x056a0541
    3fd8:	055d0577 	.word	0x055d0577
    3fdc:	00490049 	.word	0x00490049
    3fe0:	00490049 	.word	0x00490049
    3fe4:	00490049 	.word	0x00490049
    3fe8:	00490049 	.word	0x00490049
    3fec:	00490049 	.word	0x00490049
    3ff0:	00490049 	.word	0x00490049
    3ff4:	00490049 	.word	0x00490049
    3ff8:	00490049 	.word	0x00490049
    3ffc:	00490049 	.word	0x00490049
    4000:	00490049 	.word	0x00490049
    4004:	00490049 	.word	0x00490049
    4008:	00490049 	.word	0x00490049
    400c:	00490049 	.word	0x00490049
    4010:	00490049 	.word	0x00490049
    4014:	00490049 	.word	0x00490049
    4018:	00490049 	.word	0x00490049
    401c:	00490049 	.word	0x00490049
    4020:	00490049 	.word	0x00490049
    4024:	00490049 	.word	0x00490049
    4028:	00490049 	.word	0x00490049
    402c:	00490049 	.word	0x00490049
    4030:	0049015c 	.word	0x0049015c
    4034:	00490049 	.word	0x00490049
    4038:	00490049 	.word	0x00490049
    403c:	00490049 	.word	0x00490049
    4040:	00490049 	.word	0x00490049
    4044:	00490049 	.word	0x00490049
    4048:	00490049 	.word	0x00490049
    404c:	00490045 	.word	0x00490045
    4050:	0585      	.short	0x0585
    switch (incomingByte) {
    4052:	2871      	cmp	r0, #113	; 0x71
    4054:	d103      	bne.n	405e <menu()+0xba>
          menuload = 1;
    4056:	2300      	movs	r3, #0
          incomingByte = 'i';
    4058:	2073      	movs	r0, #115	; 0x73
          menuload = 1;
    405a:	6023      	str	r3, [r4, #0]
          incomingByte = 'i';
    405c:	6028      	str	r0, [r5, #0]
  if (incomingByte == 115 & menuload == 0) {
    405e:	2b00      	cmp	r3, #0
    4060:	bf08      	it	eq
    4062:	2873      	cmpeq	r0, #115	; 0x73
    4064:	bf0c      	ite	eq
    4066:	2301      	moveq	r3, #1
    4068:	2300      	movne	r3, #0
    406a:	2b00      	cmp	r3, #0
    406c:	f040 808c 	bne.w	4188 <menu()+0x1e4>
}
    4070:	b002      	add	sp, #8
    4072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (incomingByte) {
    4076:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
    407a:	2a40      	cmp	r2, #64	; 0x40
    407c:	d8ef      	bhi.n	405e <menu()+0xba>
    407e:	a101      	add	r1, pc, #4	; (adr r1, 4084 <menu()+0xe0>)
    4080:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4084:	00004905 	.word	0x00004905
    4088:	000047f7 	.word	0x000047f7
    408c:	00004881 	.word	0x00004881
    4090:	0000489d 	.word	0x0000489d
    4094:	000048a1 	.word	0x000048a1
    4098:	000048bb 	.word	0x000048bb
    409c:	000048db 	.word	0x000048db
    40a0:	000048df 	.word	0x000048df
    40a4:	000048e3 	.word	0x000048e3
    40a8:	0000405f 	.word	0x0000405f
    40ac:	0000405f 	.word	0x0000405f
    40b0:	0000405f 	.word	0x0000405f
    40b4:	0000405f 	.word	0x0000405f
    40b8:	0000405f 	.word	0x0000405f
    40bc:	0000405f 	.word	0x0000405f
    40c0:	0000405f 	.word	0x0000405f
    40c4:	0000405f 	.word	0x0000405f
    40c8:	0000405f 	.word	0x0000405f
    40cc:	0000405f 	.word	0x0000405f
    40d0:	0000405f 	.word	0x0000405f
    40d4:	0000405f 	.word	0x0000405f
    40d8:	0000405f 	.word	0x0000405f
    40dc:	0000405f 	.word	0x0000405f
    40e0:	0000405f 	.word	0x0000405f
    40e4:	0000405f 	.word	0x0000405f
    40e8:	0000405f 	.word	0x0000405f
    40ec:	0000405f 	.word	0x0000405f
    40f0:	0000405f 	.word	0x0000405f
    40f4:	0000405f 	.word	0x0000405f
    40f8:	0000405f 	.word	0x0000405f
    40fc:	0000405f 	.word	0x0000405f
    4100:	0000405f 	.word	0x0000405f
    4104:	0000405f 	.word	0x0000405f
    4108:	0000405f 	.word	0x0000405f
    410c:	0000405f 	.word	0x0000405f
    4110:	0000405f 	.word	0x0000405f
    4114:	0000405f 	.word	0x0000405f
    4118:	0000405f 	.word	0x0000405f
    411c:	0000405f 	.word	0x0000405f
    4120:	0000405f 	.word	0x0000405f
    4124:	0000405f 	.word	0x0000405f
    4128:	0000405f 	.word	0x0000405f
    412c:	0000405f 	.word	0x0000405f
    4130:	0000405f 	.word	0x0000405f
    4134:	0000405f 	.word	0x0000405f
    4138:	0000405f 	.word	0x0000405f
    413c:	0000405f 	.word	0x0000405f
    4140:	0000405f 	.word	0x0000405f
    4144:	0000405f 	.word	0x0000405f
    4148:	0000465d 	.word	0x0000465d
    414c:	0000405f 	.word	0x0000405f
    4150:	0000405f 	.word	0x0000405f
    4154:	0000405f 	.word	0x0000405f
    4158:	0000405f 	.word	0x0000405f
    415c:	0000405f 	.word	0x0000405f
    4160:	0000405f 	.word	0x0000405f
    4164:	0000405f 	.word	0x0000405f
    4168:	0000405f 	.word	0x0000405f
    416c:	0000405f 	.word	0x0000405f
    4170:	0000405f 	.word	0x0000405f
    4174:	0000405f 	.word	0x0000405f
    4178:	0000405f 	.word	0x0000405f
    417c:	0000405f 	.word	0x0000405f
    4180:	0000405f 	.word	0x0000405f
    4184:	00004057 	.word	0x00004057
    4188:	4e30      	ldr	r6, [pc, #192]	; (424c <menu()+0x2a8>)
    SERIALCONSOLE.println();
    418a:	4831      	ldr	r0, [pc, #196]	; (4250 <menu()+0x2ac>)
    418c:	f005 faf0 	bl	9770 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4190:	2104      	movs	r1, #4
    4192:	4830      	ldr	r0, [pc, #192]	; (4254 <menu()+0x2b0>)
    4194:	f008 f83c 	bl	c210 <usb_serial_write>
    4198:	482d      	ldr	r0, [pc, #180]	; (4250 <menu()+0x2ac>)
    419a:	f005 fae9 	bl	9770 <Print::println()>
    419e:	2110      	movs	r1, #16
    41a0:	482d      	ldr	r0, [pc, #180]	; (4258 <menu()+0x2b4>)
    41a2:	f008 f835 	bl	c210 <usb_serial_write>
    41a6:	482a      	ldr	r0, [pc, #168]	; (4250 <menu()+0x2ac>)
    41a8:	f005 fae2 	bl	9770 <Print::println()>
    41ac:	2113      	movs	r1, #19
    41ae:	482b      	ldr	r0, [pc, #172]	; (425c <menu()+0x2b8>)
    41b0:	f008 f82e 	bl	c210 <usb_serial_write>
    SERIALCONSOLE.println(firmver);
    41b4:	4b2a      	ldr	r3, [pc, #168]	; (4260 <menu()+0x2bc>)
	size_t print(int n)				{ return print((long)n); }
    41b6:	4826      	ldr	r0, [pc, #152]	; (4250 <menu()+0x2ac>)
    41b8:	6819      	ldr	r1, [r3, #0]
    41ba:	f005 fad1 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    41be:	4824      	ldr	r0, [pc, #144]	; (4250 <menu()+0x2ac>)
    41c0:	f005 fad6 	bl	9770 <Print::println()>
    41c4:	2114      	movs	r1, #20
    41c6:	4827      	ldr	r0, [pc, #156]	; (4264 <menu()+0x2c0>)
    41c8:	f008 f822 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    41cc:	4820      	ldr	r0, [pc, #128]	; (4250 <menu()+0x2ac>)
    41ce:	f005 facf 	bl	9770 <Print::println()>
    41d2:	211e      	movs	r1, #30
    41d4:	4824      	ldr	r0, [pc, #144]	; (4268 <menu()+0x2c4>)
    41d6:	f008 f81b 	bl	c210 <usb_serial_write>
    41da:	481d      	ldr	r0, [pc, #116]	; (4250 <menu()+0x2ac>)
    41dc:	f005 fac8 	bl	9770 <Print::println()>
    41e0:	2115      	movs	r1, #21
    41e2:	4822      	ldr	r0, [pc, #136]	; (426c <menu()+0x2c8>)
    41e4:	f008 f814 	bl	c210 <usb_serial_write>
    41e8:	4819      	ldr	r0, [pc, #100]	; (4250 <menu()+0x2ac>)
    41ea:	f005 fac1 	bl	9770 <Print::println()>
    41ee:	211e      	movs	r1, #30
    41f0:	481f      	ldr	r0, [pc, #124]	; (4270 <menu()+0x2cc>)
    41f2:	f008 f80d 	bl	c210 <usb_serial_write>
    41f6:	4816      	ldr	r0, [pc, #88]	; (4250 <menu()+0x2ac>)
    41f8:	f005 faba 	bl	9770 <Print::println()>
    41fc:	2120      	movs	r1, #32
    41fe:	481d      	ldr	r0, [pc, #116]	; (4274 <menu()+0x2d0>)
    4200:	f008 f806 	bl	c210 <usb_serial_write>
    4204:	4812      	ldr	r0, [pc, #72]	; (4250 <menu()+0x2ac>)
    4206:	f005 fab3 	bl	9770 <Print::println()>
    420a:	2119      	movs	r1, #25
    420c:	481a      	ldr	r0, [pc, #104]	; (4278 <menu()+0x2d4>)
    420e:	f007 ffff 	bl	c210 <usb_serial_write>
    4212:	480f      	ldr	r0, [pc, #60]	; (4250 <menu()+0x2ac>)
    4214:	f005 faac 	bl	9770 <Print::println()>
    4218:	2112      	movs	r1, #18
    421a:	4818      	ldr	r0, [pc, #96]	; (427c <menu()+0x2d8>)
    421c:	f007 fff8 	bl	c210 <usb_serial_write>
    4220:	480b      	ldr	r0, [pc, #44]	; (4250 <menu()+0x2ac>)
    4222:	f005 faa5 	bl	9770 <Print::println()>
    4226:	210d      	movs	r1, #13
    4228:	4815      	ldr	r0, [pc, #84]	; (4280 <menu()+0x2dc>)
    422a:	f007 fff1 	bl	c210 <usb_serial_write>
    422e:	4808      	ldr	r0, [pc, #32]	; (4250 <menu()+0x2ac>)
    4230:	f005 fa9e 	bl	9770 <Print::println()>
    debug = 0;
    4234:	2200      	movs	r2, #0
    menuload = 1;
    4236:	2301      	movs	r3, #1
    debug = 0;
    4238:	6032      	str	r2, [r6, #0]
    menuload = 1;
    423a:	6023      	str	r3, [r4, #0]
}
    423c:	b002      	add	sp, #8
    423e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4242:	bf00      	nop
    4244:	1fffd030 	.word	0x1fffd030
    4248:	1fffcff4 	.word	0x1fffcff4
    424c:	1fff884c 	.word	0x1fff884c
    4250:	1fff89fc 	.word	0x1fff89fc
    4254:	00014ebc 	.word	0x00014ebc
    4258:	00014ec4 	.word	0x00014ec4
    425c:	00014ed8 	.word	0x00014ed8
    4260:	1fff8858 	.word	0x1fff8858
    4264:	00014eec 	.word	0x00014eec
    4268:	00014f04 	.word	0x00014f04
    426c:	00014f24 	.word	0x00014f24
    4270:	00014f3c 	.word	0x00014f3c
    4274:	00014f5c 	.word	0x00014f5c
    4278:	00014f80 	.word	0x00014f80
    427c:	00014f9c 	.word	0x00014f9c
    4280:	00014fb0 	.word	0x00014fb0
        calcur();
    4284:	f7ff fba0 	bl	39c8 <calcur()>
  if (menuload == 8) {
    4288:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    428a:	6828      	ldr	r0, [r5, #0]
  if (menuload == 8) {
    428c:	2b08      	cmp	r3, #8
    428e:	d171      	bne.n	4374 <menu()+0x3d0>
    switch (incomingByte) {
    4290:	2832      	cmp	r0, #50	; 0x32
    4292:	d068      	beq.n	4366 <menu()+0x3c2>
    4294:	2871      	cmp	r0, #113	; 0x71
    4296:	f43f aede 	beq.w	4056 <menu()+0xb2>
    429a:	2831      	cmp	r0, #49	; 0x31
    429c:	f47f aedf 	bne.w	405e <menu()+0xba>
        virtual int available() { return usb_serial_available(); }
    42a0:	f007 ff84 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    42a4:	2800      	cmp	r0, #0
    42a6:	f300 81c5 	bgt.w	4634 <menu()+0x690>
        if (settings.IgnoreTemp > 3) {
    42aa:	4e97      	ldr	r6, [pc, #604]	; (4508 <menu()+0x564>)
    42ac:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
        bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    42b0:	6d33      	ldr	r3, [r6, #80]	; 0x50
    42b2:	6c72      	ldr	r2, [r6, #68]	; 0x44
        if (settings.IgnoreTemp > 3) {
    42b4:	2903      	cmp	r1, #3
          settings.IgnoreTemp = 0;
    42b6:	bf84      	itt	hi
    42b8:	2100      	movhi	r1, #0
    42ba:	f886 1040 	strbhi.w	r1, [r6, #64]	; 0x40
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    42be:	4893      	ldr	r0, [pc, #588]	; (450c <menu()+0x568>)
    42c0:	f7fd fb88 	bl	19d4 <BMSModuleManager::setSensors(int, float, float)>
          menuload = 1;
    42c4:	2201      	movs	r2, #1
          incomingByte = 'i';
    42c6:	2369      	movs	r3, #105	; 0x69
          menuload = 1;
    42c8:	6022      	str	r2, [r4, #0]
          incomingByte = 'i';
    42ca:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    42cc:	e001      	b.n	42d2 <menu()+0x32e>
        virtual int read() { return usb_serial_getchar(); }
    42ce:	f007 ff31 	bl	c134 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    42d2:	f007 ff6b 	bl	c1ac <usb_serial_available>
        while (Serial.available()) {
    42d6:	4605      	mov	r5, r0
    42d8:	2800      	cmp	r0, #0
    42da:	d1f8      	bne.n	42ce <menu()+0x32a>
        SERIALCONSOLE.println();
    42dc:	488c      	ldr	r0, [pc, #560]	; (4510 <menu()+0x56c>)
    42de:	f005 fa47 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    42e2:	488b      	ldr	r0, [pc, #556]	; (4510 <menu()+0x56c>)
    42e4:	f005 fa44 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    42e8:	4889      	ldr	r0, [pc, #548]	; (4510 <menu()+0x56c>)
    42ea:	f005 fa41 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    42ee:	4888      	ldr	r0, [pc, #544]	; (4510 <menu()+0x56c>)
    42f0:	f005 fa3e 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    42f4:	4886      	ldr	r0, [pc, #536]	; (4510 <menu()+0x56c>)
    42f6:	f005 fa3b 	bl	9770 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    42fa:	2115      	movs	r1, #21
    42fc:	4885      	ldr	r0, [pc, #532]	; (4514 <menu()+0x570>)
    42fe:	f007 ff87 	bl	c210 <usb_serial_write>
    4302:	4883      	ldr	r0, [pc, #524]	; (4510 <menu()+0x56c>)
    4304:	f005 fa34 	bl	9770 <Print::println()>
    4308:	2118      	movs	r1, #24
    430a:	4883      	ldr	r0, [pc, #524]	; (4518 <menu()+0x574>)
    430c:	f007 ff80 	bl	c210 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4310:	462b      	mov	r3, r5
    4312:	220a      	movs	r2, #10
    4314:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
    4318:	487d      	ldr	r0, [pc, #500]	; (4510 <menu()+0x56c>)
    431a:	f005 fa41 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
    431e:	487c      	ldr	r0, [pc, #496]	; (4510 <menu()+0x56c>)
    4320:	f005 fa26 	bl	9770 <Print::println()>
    4324:	2128      	movs	r1, #40	; 0x28
    4326:	487d      	ldr	r0, [pc, #500]	; (451c <menu()+0x578>)
    4328:	f007 ff72 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.IgnoreVolt * 1000, 0);
    432c:	6c70      	ldr	r0, [r6, #68]	; 0x44
    432e:	497c      	ldr	r1, [pc, #496]	; (4520 <menu()+0x57c>)
    4330:	f008 fe4e 	bl	cfd0 <__aeabi_fmul>
    4334:	f008 fc28 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4338:	9500      	str	r5, [sp, #0]
    433a:	460b      	mov	r3, r1
    433c:	4602      	mov	r2, r0
    433e:	4874      	ldr	r0, [pc, #464]	; (4510 <menu()+0x56c>)
    4340:	f005 fa3a 	bl	97b8 <Print::printFloat(double, unsigned char)>
    4344:	2102      	movs	r1, #2
    4346:	4877      	ldr	r0, [pc, #476]	; (4524 <menu()+0x580>)
    4348:	f007 ff62 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    434c:	4870      	ldr	r0, [pc, #448]	; (4510 <menu()+0x56c>)
    434e:	f005 fa0f 	bl	9770 <Print::println()>
    4352:	2113      	movs	r1, #19
    4354:	4874      	ldr	r0, [pc, #464]	; (4528 <menu()+0x584>)
    4356:	f007 ff5b 	bl	c210 <usb_serial_write>
    435a:	486d      	ldr	r0, [pc, #436]	; (4510 <menu()+0x56c>)
    435c:	f005 fa08 	bl	9770 <Print::println()>
        menuload = 8;
    4360:	2308      	movs	r3, #8
    4362:	6023      	str	r3, [r4, #0]
        break;
    4364:	e684      	b.n	4070 <menu()+0xcc>
        virtual int available() { return usb_serial_available(); }
    4366:	f007 ff21 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    436a:	2800      	cmp	r0, #0
    436c:	f300 8153 	bgt.w	4616 <menu()+0x672>
  if (menuload == 7) {
    4370:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4372:	6828      	ldr	r0, [r5, #0]
  if (menuload == 7) {
    4374:	2b07      	cmp	r3, #7
    4376:	d114      	bne.n	43a2 <menu()+0x3fe>
    switch (incomingByte) {
    4378:	2834      	cmp	r0, #52	; 0x34
    437a:	f73f ae6a 	bgt.w	4052 <menu()+0xae>
    437e:	2830      	cmp	r0, #48	; 0x30
    4380:	f77f ae6d 	ble.w	405e <menu()+0xba>
    4384:	3832      	subs	r0, #50	; 0x32
    4386:	2802      	cmp	r0, #2
    4388:	f201 8493 	bhi.w	5cb2 <menu()+0x1d0e>
    438c:	e8df f000 	tbb	[pc, r0]
    4390:	0298      	.short	0x0298
    4392:	ac          	.byte	0xac
    4393:	00          	.byte	0x00
    4394:	f007 ff0a 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4398:	2800      	cmp	r0, #0
    439a:	f300 8153 	bgt.w	4644 <menu()+0x6a0>
  if (menuload == 6)  //Charging settings
    439e:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    43a0:	6828      	ldr	r0, [r5, #0]
  if (menuload == 6)  //Charging settings
    43a2:	2b06      	cmp	r3, #6
    43a4:	f040 83ac 	bne.w	4b00 <menu()+0xb5c>
    switch (incomingByte) {
    43a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    43ac:	2b41      	cmp	r3, #65	; 0x41
    43ae:	f200 8674 	bhi.w	509a <menu()+0x10f6>
    43b2:	a201      	add	r2, pc, #4	; (adr r2, 43b8 <menu()+0x414>)
    43b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    43b8:	00004f4b 	.word	0x00004f4b
    43bc:	00004df7 	.word	0x00004df7
    43c0:	00004af3 	.word	0x00004af3
    43c4:	00005077 	.word	0x00005077
    43c8:	00005053 	.word	0x00005053
    43cc:	00005037 	.word	0x00005037
    43d0:	00005017 	.word	0x00005017
    43d4:	00005001 	.word	0x00005001
    43d8:	0000509b 	.word	0x0000509b
    43dc:	00004fd1 	.word	0x00004fd1
    43e0:	0000509b 	.word	0x0000509b
    43e4:	0000509b 	.word	0x0000509b
    43e8:	0000509b 	.word	0x0000509b
    43ec:	0000509b 	.word	0x0000509b
    43f0:	0000509b 	.word	0x0000509b
    43f4:	0000509b 	.word	0x0000509b
    43f8:	0000509b 	.word	0x0000509b
    43fc:	0000509b 	.word	0x0000509b
    4400:	0000509b 	.word	0x0000509b
    4404:	0000509b 	.word	0x0000509b
    4408:	0000509b 	.word	0x0000509b
    440c:	0000509b 	.word	0x0000509b
    4410:	0000509b 	.word	0x0000509b
    4414:	0000509b 	.word	0x0000509b
    4418:	0000509b 	.word	0x0000509b
    441c:	0000509b 	.word	0x0000509b
    4420:	0000509b 	.word	0x0000509b
    4424:	0000509b 	.word	0x0000509b
    4428:	0000509b 	.word	0x0000509b
    442c:	0000509b 	.word	0x0000509b
    4430:	0000509b 	.word	0x0000509b
    4434:	0000509b 	.word	0x0000509b
    4438:	0000509b 	.word	0x0000509b
    443c:	0000509b 	.word	0x0000509b
    4440:	0000509b 	.word	0x0000509b
    4444:	0000509b 	.word	0x0000509b
    4448:	0000509b 	.word	0x0000509b
    444c:	0000509b 	.word	0x0000509b
    4450:	0000509b 	.word	0x0000509b
    4454:	0000509b 	.word	0x0000509b
    4458:	0000509b 	.word	0x0000509b
    445c:	0000509b 	.word	0x0000509b
    4460:	0000509b 	.word	0x0000509b
    4464:	0000509b 	.word	0x0000509b
    4468:	0000509b 	.word	0x0000509b
    446c:	0000509b 	.word	0x0000509b
    4470:	0000509b 	.word	0x0000509b
    4474:	0000509b 	.word	0x0000509b
    4478:	0000509b 	.word	0x0000509b
    447c:	0000509b 	.word	0x0000509b
    4480:	0000509b 	.word	0x0000509b
    4484:	0000509b 	.word	0x0000509b
    4488:	0000509b 	.word	0x0000509b
    448c:	0000509b 	.word	0x0000509b
    4490:	0000509b 	.word	0x0000509b
    4494:	0000509b 	.word	0x0000509b
    4498:	0000509b 	.word	0x0000509b
    449c:	0000509b 	.word	0x0000509b
    44a0:	0000509b 	.word	0x0000509b
    44a4:	0000509b 	.word	0x0000509b
    44a8:	0000509b 	.word	0x0000509b
    44ac:	0000509b 	.word	0x0000509b
    44b0:	0000509b 	.word	0x0000509b
    44b4:	0000509b 	.word	0x0000509b
    44b8:	0000509b 	.word	0x0000509b
    44bc:	00004057 	.word	0x00004057
    44c0:	f007 fe74 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    44c4:	2800      	cmp	r0, #0
    44c6:	f77f af6a 	ble.w	439e <menu()+0x3fa>
          settings.CellGap = Serial.parseInt();
    44ca:	4811      	ldr	r0, [pc, #68]	; (4510 <menu()+0x56c>)
          settings.CellGap = settings.CellGap * 0.001;
    44cc:	4e0e      	ldr	r6, [pc, #56]	; (4508 <menu()+0x564>)
          settings.CellGap = Serial.parseInt();
    44ce:	f005 faaf 	bl	9a30 <Stream::parseInt()>
    44d2:	f008 fd29 	bl	cf28 <__aeabi_i2f>
          settings.CellGap = settings.CellGap * 0.001;
    44d6:	4915      	ldr	r1, [pc, #84]	; (452c <menu()+0x588>)
    44d8:	f008 fd7a 	bl	cfd0 <__aeabi_fmul>
          menuload = 1;
    44dc:	2301      	movs	r3, #1
    44de:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    44e0:	2361      	movs	r3, #97	; 0x61
          settings.CellGap = settings.CellGap * 0.001;
    44e2:	63f0      	str	r0, [r6, #60]	; 0x3c
          incomingByte = 'a';
    44e4:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    44e6:	e025      	b.n	4534 <menu()+0x590>
    44e8:	f007 fe60 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    44ec:	2800      	cmp	r0, #0
    44ee:	f77f af56 	ble.w	439e <menu()+0x3fa>
          settings.triptime = Serial.parseInt();
    44f2:	4807      	ldr	r0, [pc, #28]	; (4510 <menu()+0x56c>)
    44f4:	4e04      	ldr	r6, [pc, #16]	; (4508 <menu()+0x564>)
    44f6:	f005 fa9b 	bl	9a30 <Stream::parseInt()>
          menuload = 1;
    44fa:	2301      	movs	r3, #1
    44fc:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    44fe:	2361      	movs	r3, #97	; 0x61
          settings.triptime = Serial.parseInt();
    4500:	f8a6 00ca 	strh.w	r0, [r6, #202]	; 0xca
          incomingByte = 'a';
    4504:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4506:	e015      	b.n	4534 <menu()+0x590>
    4508:	1fffd0d8 	.word	0x1fffd0d8
    450c:	1fff91f0 	.word	0x1fff91f0
    4510:	1fff89fc 	.word	0x1fff89fc
    4514:	00014f84 	.word	0x00014f84
    4518:	00014514 	.word	0x00014514
    451c:	00014530 	.word	0x00014530
    4520:	447a0000 	.word	0x447a0000
    4524:	0001455c 	.word	0x0001455c
    4528:	00014560 	.word	0x00014560
    452c:	3a83126f 	.word	0x3a83126f
        virtual int read() { return usb_serial_getchar(); }
    4530:	f007 fe00 	bl	c134 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4534:	f007 fe3a 	bl	c1ac <usb_serial_available>
        while (Serial.available()) {
    4538:	4605      	mov	r5, r0
    453a:	2800      	cmp	r0, #0
    453c:	d1f8      	bne.n	4530 <menu()+0x58c>
        SERIALCONSOLE.println();
    453e:	48af      	ldr	r0, [pc, #700]	; (47fc <menu()+0x858>)
    4540:	f005 f916 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4544:	48ad      	ldr	r0, [pc, #692]	; (47fc <menu()+0x858>)
    4546:	f005 f913 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    454a:	48ac      	ldr	r0, [pc, #688]	; (47fc <menu()+0x858>)
    454c:	f005 f910 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4550:	48aa      	ldr	r0, [pc, #680]	; (47fc <menu()+0x858>)
    4552:	f005 f90d 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4556:	48a9      	ldr	r0, [pc, #676]	; (47fc <menu()+0x858>)
    4558:	f005 f90a 	bl	9770 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    455c:	211f      	movs	r1, #31
    455e:	48a8      	ldr	r0, [pc, #672]	; (4800 <menu()+0x85c>)
    4560:	f007 fe56 	bl	c210 <usb_serial_write>
    4564:	48a5      	ldr	r0, [pc, #660]	; (47fc <menu()+0x858>)
    4566:	f005 f903 	bl	9770 <Print::println()>
    456a:	211c      	movs	r1, #28
    456c:	48a5      	ldr	r0, [pc, #660]	; (4804 <menu()+0x860>)
    456e:	f007 fe4f 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnOff * 1000, 0);
    4572:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4574:	49a4      	ldr	r1, [pc, #656]	; (4808 <menu()+0x864>)
    4576:	f008 fd2b 	bl	cfd0 <__aeabi_fmul>
    457a:	f008 fb05 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    457e:	9500      	str	r5, [sp, #0]
    4580:	4602      	mov	r2, r0
    4582:	460b      	mov	r3, r1
    4584:	489d      	ldr	r0, [pc, #628]	; (47fc <menu()+0x858>)
    4586:	f005 f917 	bl	97b8 <Print::printFloat(double, unsigned char)>
    458a:	2102      	movs	r1, #2
    458c:	489f      	ldr	r0, [pc, #636]	; (480c <menu()+0x868>)
    458e:	f007 fe3f 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4592:	489a      	ldr	r0, [pc, #616]	; (47fc <menu()+0x858>)
    4594:	f005 f8ec 	bl	9770 <Print::println()>
    4598:	2123      	movs	r1, #35	; 0x23
    459a:	489d      	ldr	r0, [pc, #628]	; (4810 <menu()+0x86c>)
    459c:	f007 fe38 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.CellGap * 1000, 0);
    45a0:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    45a2:	4999      	ldr	r1, [pc, #612]	; (4808 <menu()+0x864>)
    45a4:	f008 fd14 	bl	cfd0 <__aeabi_fmul>
    45a8:	f008 faee 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    45ac:	9500      	str	r5, [sp, #0]
    45ae:	4602      	mov	r2, r0
    45b0:	460b      	mov	r3, r1
    45b2:	4892      	ldr	r0, [pc, #584]	; (47fc <menu()+0x858>)
    45b4:	f005 f900 	bl	97b8 <Print::printFloat(double, unsigned char)>
    45b8:	2102      	movs	r1, #2
    45ba:	4894      	ldr	r0, [pc, #592]	; (480c <menu()+0x868>)
    45bc:	f007 fe28 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    45c0:	488e      	ldr	r0, [pc, #568]	; (47fc <menu()+0x858>)
    45c2:	f005 f8d5 	bl	9770 <Print::println()>
    45c6:	2119      	movs	r1, #25
    45c8:	4892      	ldr	r0, [pc, #584]	; (4814 <menu()+0x870>)
    45ca:	f007 fe21 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnToff);
    45ce:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    45d0:	f008 fada 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    45d4:	2502      	movs	r5, #2
    45d6:	460b      	mov	r3, r1
    45d8:	4602      	mov	r2, r0
    45da:	9500      	str	r5, [sp, #0]
    45dc:	4887      	ldr	r0, [pc, #540]	; (47fc <menu()+0x858>)
    45de:	f005 f8eb 	bl	97b8 <Print::printFloat(double, unsigned char)>
    45e2:	4629      	mov	r1, r5
    45e4:	488c      	ldr	r0, [pc, #560]	; (4818 <menu()+0x874>)
    45e6:	f007 fe13 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    45ea:	4884      	ldr	r0, [pc, #528]	; (47fc <menu()+0x858>)
    45ec:	f005 f8c0 	bl	9770 <Print::println()>
    45f0:	2122      	movs	r1, #34	; 0x22
    45f2:	488a      	ldr	r0, [pc, #552]	; (481c <menu()+0x878>)
    45f4:	f007 fe0c 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    45f8:	f8b6 10ca 	ldrh.w	r1, [r6, #202]	; 0xca
    45fc:	487f      	ldr	r0, [pc, #508]	; (47fc <menu()+0x858>)
    45fe:	f005 f8af 	bl	9760 <Print::print(long)>
    4602:	2103      	movs	r1, #3
    4604:	4886      	ldr	r0, [pc, #536]	; (4820 <menu()+0x87c>)
    4606:	f007 fe03 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    460a:	487c      	ldr	r0, [pc, #496]	; (47fc <menu()+0x858>)
    460c:	f005 f8b0 	bl	9770 <Print::println()>
        menuload = 7;
    4610:	2307      	movs	r3, #7
    4612:	6023      	str	r3, [r4, #0]
        break;
    4614:	e52c      	b.n	4070 <menu()+0xcc>
          settings.IgnoreVolt = Serial.parseInt();
    4616:	4879      	ldr	r0, [pc, #484]	; (47fc <menu()+0x858>)
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    4618:	4e82      	ldr	r6, [pc, #520]	; (4824 <menu()+0x880>)
          settings.IgnoreVolt = Serial.parseInt();
    461a:	f005 fa09 	bl	9a30 <Stream::parseInt()>
    461e:	f008 fc83 	bl	cf28 <__aeabi_i2f>
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    4622:	4981      	ldr	r1, [pc, #516]	; (4828 <menu()+0x884>)
    4624:	f008 fcd4 	bl	cfd0 <__aeabi_fmul>
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    4628:	6d33      	ldr	r3, [r6, #80]	; 0x50
    462a:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    462e:	6470      	str	r0, [r6, #68]	; 0x44
    4630:	4602      	mov	r2, r0
    4632:	e644      	b.n	42be <menu()+0x31a>
          settings.IgnoreTemp = Serial.parseInt();
    4634:	4871      	ldr	r0, [pc, #452]	; (47fc <menu()+0x858>)
    4636:	4e7b      	ldr	r6, [pc, #492]	; (4824 <menu()+0x880>)
    4638:	f005 f9fa 	bl	9a30 <Stream::parseInt()>
    463c:	b2c1      	uxtb	r1, r0
    463e:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    4642:	e635      	b.n	42b0 <menu()+0x30c>
          settings.WarnToff = Serial.parseInt();
    4644:	486d      	ldr	r0, [pc, #436]	; (47fc <menu()+0x858>)
    4646:	4e77      	ldr	r6, [pc, #476]	; (4824 <menu()+0x880>)
    4648:	f005 f9f2 	bl	9a30 <Stream::parseInt()>
    464c:	f008 fc6c 	bl	cf28 <__aeabi_i2f>
          menuload = 1;
    4650:	2301      	movs	r3, #1
    4652:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4654:	2361      	movs	r3, #97	; 0x61
          settings.WarnToff = Serial.parseInt();
    4656:	63b0      	str	r0, [r6, #56]	; 0x38
          incomingByte = 'a';
    4658:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    465a:	e76b      	b.n	4534 <menu()+0x590>
        balon = !balon;
    465c:	4a73      	ldr	r2, [pc, #460]	; (482c <menu()+0x888>)
        gaugedebug = !gaugedebug;
    465e:	6813      	ldr	r3, [r2, #0]
    4660:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    4664:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    4666:	2101      	movs	r1, #1
        gaugedebug = !gaugedebug;
    4668:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    466a:	6021      	str	r1, [r4, #0]
        gaugedebug = !gaugedebug;
    466c:	6013      	str	r3, [r2, #0]
        incomingByte = 'd';
    466e:	6028      	str	r0, [r5, #0]
    switch (incomingByte) {
    4670:	f1a0 0352 	sub.w	r3, r0, #82	; 0x52
    4674:	2b1f      	cmp	r3, #31
    4676:	f200 80bc 	bhi.w	47f2 <menu()+0x84e>
    467a:	e8df f013 	tbh	[pc, r3, lsl #1]
    467e:	05b4      	.short	0x05b4
    4680:	00ba00ba 	.word	0x00ba00ba
    4684:	00ba00ba 	.word	0x00ba00ba
    4688:	00ba00ba 	.word	0x00ba00ba
    468c:	00ba00ba 	.word	0x00ba00ba
    4690:	00ba00ba 	.word	0x00ba00ba
    4694:	00ba00ba 	.word	0x00ba00ba
    4698:	00ba00ba 	.word	0x00ba00ba
    469c:	05b605b1 	.word	0x05b605b1
    46a0:	00220b03 	.word	0x00220b03
    46a4:	00ba0afa 	.word	0x00ba0afa
    46a8:	00ba00ba 	.word	0x00ba00ba
    46ac:	00ba0af7 	.word	0x00ba0af7
    46b0:	00ba0b06 	.word	0x00ba0b06
    46b4:	00ba00ba 	.word	0x00ba00ba
    46b8:	00ba00ba 	.word	0x00ba00ba
    46bc:	05a1      	.short	0x05a1
        virtual int read() { return usb_serial_getchar(); }
    46be:	f007 fd39 	bl	c134 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    46c2:	f007 fd73 	bl	c1ac <usb_serial_available>
        while (Serial.available()) {
    46c6:	2800      	cmp	r0, #0
    46c8:	d1f9      	bne.n	46be <menu()+0x71a>
        SERIALCONSOLE.println();
    46ca:	484c      	ldr	r0, [pc, #304]	; (47fc <menu()+0x858>)
    46cc:	f005 f850 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    46d0:	484a      	ldr	r0, [pc, #296]	; (47fc <menu()+0x858>)
    46d2:	f005 f84d 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    46d6:	4849      	ldr	r0, [pc, #292]	; (47fc <menu()+0x858>)
    46d8:	f005 f84a 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    46dc:	4847      	ldr	r0, [pc, #284]	; (47fc <menu()+0x858>)
    46de:	f005 f847 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    46e2:	4846      	ldr	r0, [pc, #280]	; (47fc <menu()+0x858>)
    46e4:	f005 f844 	bl	9770 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    46e8:	2113      	movs	r1, #19
    46ea:	4851      	ldr	r0, [pc, #324]	; (4830 <menu()+0x88c>)
    46ec:	f007 fd90 	bl	c210 <usb_serial_write>
    46f0:	4842      	ldr	r0, [pc, #264]	; (47fc <menu()+0x858>)
    46f2:	f005 f83d 	bl	9770 <Print::println()>
    46f6:	210d      	movs	r1, #13
    46f8:	484e      	ldr	r0, [pc, #312]	; (4834 <menu()+0x890>)
    46fa:	f007 fd89 	bl	c210 <usb_serial_write>
    46fe:	483f      	ldr	r0, [pc, #252]	; (47fc <menu()+0x858>)
    4700:	f005 f836 	bl	9770 <Print::println()>
    4704:	210f      	movs	r1, #15
    4706:	484c      	ldr	r0, [pc, #304]	; (4838 <menu()+0x894>)
    4708:	f007 fd82 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.println(candebug);
    470c:	4b4b      	ldr	r3, [pc, #300]	; (483c <menu()+0x898>)
	size_t print(int n)				{ return print((long)n); }
    470e:	483b      	ldr	r0, [pc, #236]	; (47fc <menu()+0x858>)
    4710:	6819      	ldr	r1, [r3, #0]
    4712:	f005 f825 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4716:	4839      	ldr	r0, [pc, #228]	; (47fc <menu()+0x858>)
    4718:	f005 f82a 	bl	9770 <Print::println()>
    471c:	2113      	movs	r1, #19
    471e:	4848      	ldr	r0, [pc, #288]	; (4840 <menu()+0x89c>)
    4720:	f007 fd76 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.println(debugCur);
    4724:	4b47      	ldr	r3, [pc, #284]	; (4844 <menu()+0x8a0>)
	size_t print(int n)				{ return print((long)n); }
    4726:	4835      	ldr	r0, [pc, #212]	; (47fc <menu()+0x858>)
    4728:	6819      	ldr	r1, [r3, #0]
    472a:	f005 f819 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    472e:	4833      	ldr	r0, [pc, #204]	; (47fc <menu()+0x858>)
    4730:	f005 f81e 	bl	9770 <Print::println()>
    4734:	2112      	movs	r1, #18
    4736:	4844      	ldr	r0, [pc, #272]	; (4848 <menu()+0x8a4>)
    4738:	f007 fd6a 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.println(outputcheck);
    473c:	4b43      	ldr	r3, [pc, #268]	; (484c <menu()+0x8a8>)
	size_t print(int n)				{ return print((long)n); }
    473e:	482f      	ldr	r0, [pc, #188]	; (47fc <menu()+0x858>)
    4740:	6819      	ldr	r1, [r3, #0]
    4742:	f005 f80d 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4746:	482d      	ldr	r0, [pc, #180]	; (47fc <menu()+0x858>)
    4748:	f005 f812 	bl	9770 <Print::println()>
    474c:	2111      	movs	r1, #17
    474e:	4840      	ldr	r0, [pc, #256]	; (4850 <menu()+0x8ac>)
    4750:	f007 fd5e 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.println(inputcheck);
    4754:	4b3f      	ldr	r3, [pc, #252]	; (4854 <menu()+0x8b0>)
	size_t print(int n)				{ return print((long)n); }
    4756:	4829      	ldr	r0, [pc, #164]	; (47fc <menu()+0x858>)
    4758:	6819      	ldr	r1, [r3, #0]
    475a:	f005 f801 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    475e:	4827      	ldr	r0, [pc, #156]	; (47fc <menu()+0x858>)
    4760:	f005 f806 	bl	9770 <Print::println()>
    4764:	210e      	movs	r1, #14
    4766:	483c      	ldr	r0, [pc, #240]	; (4858 <menu()+0x8b4>)
    4768:	f007 fd52 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.println(settings.ESSmode);
    476c:	4b2d      	ldr	r3, [pc, #180]	; (4824 <menu()+0x880>)
	size_t print(int n)				{ return print((long)n); }
    476e:	4823      	ldr	r0, [pc, #140]	; (47fc <menu()+0x858>)
    4770:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    4774:	f004 fff4 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4778:	4820      	ldr	r0, [pc, #128]	; (47fc <menu()+0x858>)
    477a:	f004 fff9 	bl	9770 <Print::println()>
    477e:	2119      	movs	r1, #25
    4780:	4836      	ldr	r0, [pc, #216]	; (485c <menu()+0x8b8>)
    4782:	f007 fd45 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.println(cellspresent);
    4786:	4b36      	ldr	r3, [pc, #216]	; (4860 <menu()+0x8bc>)
	size_t print(int n)				{ return print((long)n); }
    4788:	481c      	ldr	r0, [pc, #112]	; (47fc <menu()+0x858>)
    478a:	6819      	ldr	r1, [r3, #0]
    478c:	f004 ffe8 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4790:	481a      	ldr	r0, [pc, #104]	; (47fc <menu()+0x858>)
    4792:	f004 ffed 	bl	9770 <Print::println()>
    4796:	2111      	movs	r1, #17
    4798:	4832      	ldr	r0, [pc, #200]	; (4864 <menu()+0x8c0>)
    479a:	f007 fd39 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.println(gaugedebug);
    479e:	4b32      	ldr	r3, [pc, #200]	; (4868 <menu()+0x8c4>)
	size_t print(int n)				{ return print((long)n); }
    47a0:	4816      	ldr	r0, [pc, #88]	; (47fc <menu()+0x858>)
    47a2:	6819      	ldr	r1, [r3, #0]
    47a4:	f004 ffdc 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    47a8:	4814      	ldr	r0, [pc, #80]	; (47fc <menu()+0x858>)
    47aa:	f004 ffe1 	bl	9770 <Print::println()>
    47ae:	2110      	movs	r1, #16
    47b0:	482e      	ldr	r0, [pc, #184]	; (486c <menu()+0x8c8>)
    47b2:	f007 fd2d 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.println(CSVdebug);
    47b6:	4b2e      	ldr	r3, [pc, #184]	; (4870 <menu()+0x8cc>)
	size_t print(int n)				{ return print((long)n); }
    47b8:	4810      	ldr	r0, [pc, #64]	; (47fc <menu()+0x858>)
    47ba:	6819      	ldr	r1, [r3, #0]
    47bc:	f004 ffd0 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    47c0:	480e      	ldr	r0, [pc, #56]	; (47fc <menu()+0x858>)
    47c2:	f004 ffd5 	bl	9770 <Print::println()>
    47c6:	211c      	movs	r1, #28
    47c8:	482a      	ldr	r0, [pc, #168]	; (4874 <menu()+0x8d0>)
    47ca:	f007 fd21 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.println(debugdigits);
    47ce:	4b2a      	ldr	r3, [pc, #168]	; (4878 <menu()+0x8d4>)
	size_t print(int n)				{ return print((long)n); }
    47d0:	480a      	ldr	r0, [pc, #40]	; (47fc <menu()+0x858>)
    47d2:	6819      	ldr	r1, [r3, #0]
    47d4:	f004 ffc4 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    47d8:	4808      	ldr	r0, [pc, #32]	; (47fc <menu()+0x858>)
    47da:	f004 ffc9 	bl	9770 <Print::println()>
    47de:	2113      	movs	r1, #19
    47e0:	4826      	ldr	r0, [pc, #152]	; (487c <menu()+0x8d8>)
    47e2:	f007 fd15 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    47e6:	4805      	ldr	r0, [pc, #20]	; (47fc <menu()+0x858>)
    47e8:	f004 ffc2 	bl	9770 <Print::println()>
        menuload = 4;
    47ec:	2304      	movs	r3, #4
    47ee:	6023      	str	r3, [r4, #0]
        break;
    47f0:	e43e      	b.n	4070 <menu()+0xcc>
  if (incomingByte == 115 & menuload == 0) {
    47f2:	6823      	ldr	r3, [r4, #0]
    47f4:	e433      	b.n	405e <menu()+0xba>
        debugCur = !debugCur;
    47f6:	4a13      	ldr	r2, [pc, #76]	; (4844 <menu()+0x8a0>)
    47f8:	e731      	b.n	465e <menu()+0x6ba>
    47fa:	bf00      	nop
    47fc:	1fff89fc 	.word	0x1fff89fc
    4800:	00014748 	.word	0x00014748
    4804:	00014768 	.word	0x00014768
    4808:	447a0000 	.word	0x447a0000
    480c:	0001455c 	.word	0x0001455c
    4810:	00014788 	.word	0x00014788
    4814:	000147ac 	.word	0x000147ac
    4818:	00014724 	.word	0x00014724
    481c:	000147c8 	.word	0x000147c8
    4820:	000147ec 	.word	0x000147ec
    4824:	1fffd0d8 	.word	0x1fffd0d8
    4828:	3a83126f 	.word	0x3a83126f
    482c:	1fff91ec 	.word	0x1fff91ec
    4830:	000148fc 	.word	0x000148fc
    4834:	00014910 	.word	0x00014910
    4838:	00014920 	.word	0x00014920
    483c:	1fffcf38 	.word	0x1fffcf38
    4840:	00014930 	.word	0x00014930
    4844:	1fffcfc8 	.word	0x1fffcfc8
    4848:	00014944 	.word	0x00014944
    484c:	1fffd0c4 	.word	0x1fffd0c4
    4850:	00014958 	.word	0x00014958
    4854:	1fffcff8 	.word	0x1fffcff8
    4858:	0001496c 	.word	0x0001496c
    485c:	0001497c 	.word	0x0001497c
    4860:	1fffcf3c 	.word	0x1fffcf3c
    4864:	00014998 	.word	0x00014998
    4868:	1fffcfdc 	.word	0x1fffcfdc
    486c:	000149ac 	.word	0x000149ac
    4870:	1fff91a4 	.word	0x1fff91a4
    4874:	000149c0 	.word	0x000149c0
    4878:	1fff8850 	.word	0x1fff8850
    487c:	00014560 	.word	0x00014560
        outputcheck = !outputcheck;
    4880:	4ba9      	ldr	r3, [pc, #676]	; (4b28 <menu()+0xb84>)
    4882:	681a      	ldr	r2, [r3, #0]
        menuload = 1;
    4884:	2101      	movs	r1, #1
        outputcheck = !outputcheck;
    4886:	2a00      	cmp	r2, #0
    4888:	bf0c      	ite	eq
    488a:	460a      	moveq	r2, r1
    488c:	2200      	movne	r2, #0
        menuload = 1;
    488e:	6021      	str	r1, [r4, #0]
        outputcheck = !outputcheck;
    4890:	601a      	str	r2, [r3, #0]
        if (outputcheck == 0) {
    4892:	f041 8150 	bne.w	5b36 <menu()+0x1b92>
        incomingByte = 'd';
    4896:	2064      	movs	r0, #100	; 0x64
    4898:	6028      	str	r0, [r5, #0]
  if (menuload == 5) {
    489a:	e6e9      	b.n	4670 <menu()+0x6cc>
        inputcheck = !inputcheck;
    489c:	4aa3      	ldr	r2, [pc, #652]	; (4b2c <menu()+0xb88>)
    489e:	e6de      	b.n	465e <menu()+0x6ba>
        settings.ESSmode = !settings.ESSmode;
    48a0:	4ea3      	ldr	r6, [pc, #652]	; (4b30 <menu()+0xb8c>)
    48a2:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
    48a6:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    48aa:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    48ac:	2201      	movs	r2, #1
        settings.ESSmode = !settings.ESSmode;
    48ae:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    48b0:	6022      	str	r2, [r4, #0]
        settings.ESSmode = !settings.ESSmode;
    48b2:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
        incomingByte = 'd';
    48b6:	6028      	str	r0, [r5, #0]
  if (menuload == 5) {
    48b8:	e6da      	b.n	4670 <menu()+0x6cc>
        menuload = 1;
    48ba:	2301      	movs	r3, #1
        cellspresent = bms.seriescells();
    48bc:	489d      	ldr	r0, [pc, #628]	; (4b34 <menu()+0xb90>)
        menuload = 1;
    48be:	6023      	str	r3, [r4, #0]
        cellspresent = bms.seriescells();
    48c0:	f7fc fd7c 	bl	13bc <BMSModuleManager::seriescells()>
    48c4:	4b9c      	ldr	r3, [pc, #624]	; (4b38 <menu()+0xb94>)
        incomingByte = 'd';
    48c6:	2264      	movs	r2, #100	; 0x64
        cellspresent = bms.seriescells();
    48c8:	6018      	str	r0, [r3, #0]
  if (menuload == 2) {
    48ca:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    48cc:	602a      	str	r2, [r5, #0]
  if (menuload == 8) {
    48ce:	2b08      	cmp	r3, #8
    48d0:	f040 8723 	bne.w	571a <menu()+0x1776>
    48d4:	2064      	movs	r0, #100	; 0x64
  if (menuload == 3) {
    48d6:	f7ff bbc2 	b.w	405e <menu()+0xba>
        gaugedebug = !gaugedebug;
    48da:	4a98      	ldr	r2, [pc, #608]	; (4b3c <menu()+0xb98>)
    48dc:	e6bf      	b.n	465e <menu()+0x6ba>
        CSVdebug = !CSVdebug;
    48de:	4a98      	ldr	r2, [pc, #608]	; (4b40 <menu()+0xb9c>)
    48e0:	e6bd      	b.n	465e <menu()+0x6ba>
        menuload = 1;
    48e2:	2301      	movs	r3, #1
    48e4:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    48e6:	f007 fc61 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    48ea:	2800      	cmp	r0, #0
    48ec:	f301 8114 	bgt.w	5b18 <menu()+0x1b74>
        if (debugdigits > 4) {
    48f0:	4b94      	ldr	r3, [pc, #592]	; (4b44 <menu()+0xba0>)
    48f2:	6818      	ldr	r0, [r3, #0]
    48f4:	2804      	cmp	r0, #4
          debugdigits = 2;
    48f6:	bfc4      	itt	gt
    48f8:	2202      	movgt	r2, #2
    48fa:	601a      	strgt	r2, [r3, #0]
        incomingByte = 'd';
    48fc:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    48fe:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    4900:	602a      	str	r2, [r5, #0]
        break;
    4902:	e7e4      	b.n	48ce <menu()+0x92a>
        candebug = !candebug;
    4904:	4a90      	ldr	r2, [pc, #576]	; (4b48 <menu()+0xba4>)
    4906:	e6aa      	b.n	465e <menu()+0x6ba>
        settings.invertcur = !settings.invertcur;
    4908:	4e89      	ldr	r6, [pc, #548]	; (4b30 <menu()+0xb8c>)
    490a:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    490c:	fab3 f383 	clz	r3, r3
    4910:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4912:	2201      	movs	r2, #1
        settings.invertcur = !settings.invertcur;
    4914:	67f3      	str	r3, [r6, #124]	; 0x7c
        incomingByte = 'c';
    4916:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    4918:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    491a:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    491c:	e001      	b.n	4922 <menu()+0x97e>
        virtual int read() { return usb_serial_getchar(); }
    491e:	f007 fc09 	bl	c134 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4922:	f007 fc43 	bl	c1ac <usb_serial_available>
        while (Serial.available()) {
    4926:	2800      	cmp	r0, #0
    4928:	d1f9      	bne.n	491e <menu()+0x97a>
        SERIALCONSOLE.println();
    492a:	4888      	ldr	r0, [pc, #544]	; (4b4c <menu()+0xba8>)
    492c:	f004 ff20 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4930:	4886      	ldr	r0, [pc, #536]	; (4b4c <menu()+0xba8>)
    4932:	f004 ff1d 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4936:	4885      	ldr	r0, [pc, #532]	; (4b4c <menu()+0xba8>)
    4938:	f004 ff1a 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    493c:	4883      	ldr	r0, [pc, #524]	; (4b4c <menu()+0xba8>)
    493e:	f004 ff17 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4942:	4882      	ldr	r0, [pc, #520]	; (4b4c <menu()+0xba8>)
    4944:	f004 ff14 	bl	9770 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4948:	211f      	movs	r1, #31
    494a:	4881      	ldr	r0, [pc, #516]	; (4b50 <menu()+0xbac>)
    494c:	f007 fc60 	bl	c210 <usb_serial_write>
    4950:	487e      	ldr	r0, [pc, #504]	; (4b4c <menu()+0xba8>)
    4952:	f004 ff0d 	bl	9770 <Print::println()>
    4956:	211e      	movs	r1, #30
    4958:	487e      	ldr	r0, [pc, #504]	; (4b54 <menu()+0xbb0>)
    495a:	f007 fc59 	bl	c210 <usb_serial_write>
    495e:	487b      	ldr	r0, [pc, #492]	; (4b4c <menu()+0xba8>)
    4960:	f004 ff06 	bl	9770 <Print::println()>
    4964:	487c      	ldr	r0, [pc, #496]	; (4b58 <menu()+0xbb4>)
    4966:	211a      	movs	r1, #26
    4968:	f007 fc52 	bl	c210 <usb_serial_write>
        switch (settings.cursens) {
    496c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    4970:	2b02      	cmp	r3, #2
    4972:	f001 810a 	beq.w	5b8a <menu()+0x1be6>
    4976:	2b03      	cmp	r3, #3
    4978:	f001 80fe 	beq.w	5b78 <menu()+0x1bd4>
    497c:	2b01      	cmp	r3, #1
    497e:	f001 80f2 	beq.w	5b66 <menu()+0x1bc2>
    4982:	4876      	ldr	r0, [pc, #472]	; (4b5c <menu()+0xbb8>)
    4984:	2109      	movs	r1, #9
    4986:	f007 fc43 	bl	c210 <usb_serial_write>
    498a:	4870      	ldr	r0, [pc, #448]	; (4b4c <menu()+0xba8>)
    498c:	f004 fef0 	bl	9770 <Print::println()>
    4990:	2114      	movs	r1, #20
    4992:	4873      	ldr	r0, [pc, #460]	; (4b60 <menu()+0xbbc>)
    4994:	f007 fc3c 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4998:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    499a:	486c      	ldr	r0, [pc, #432]	; (4b4c <menu()+0xba8>)
    499c:	f004 fee0 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    49a0:	486a      	ldr	r0, [pc, #424]	; (4b4c <menu()+0xba8>)
    49a2:	f004 fee5 	bl	9770 <Print::println()>
    49a6:	211c      	movs	r1, #28
    49a8:	486e      	ldr	r0, [pc, #440]	; (4b64 <menu()+0xbc0>)
    49aa:	f007 fc31 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    49ae:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
    49b2:	4866      	ldr	r0, [pc, #408]	; (4b4c <menu()+0xba8>)
    49b4:	f004 fed4 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    49b8:	4864      	ldr	r0, [pc, #400]	; (4b4c <menu()+0xba8>)
    49ba:	f004 fed9 	bl	9770 <Print::println()>
    49be:	211c      	movs	r1, #28
    49c0:	4869      	ldr	r0, [pc, #420]	; (4b68 <menu()+0xbc4>)
    49c2:	f007 fc25 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    49c6:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
    49ca:	4860      	ldr	r0, [pc, #384]	; (4b4c <menu()+0xba8>)
    49cc:	f004 fec8 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    49d0:	485e      	ldr	r0, [pc, #376]	; (4b4c <menu()+0xba8>)
    49d2:	f004 fecd 	bl	9770 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    49d6:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    49da:	f025 0702 	bic.w	r7, r5, #2
    49de:	2f01      	cmp	r7, #1
    49e0:	f000 86b7 	beq.w	5752 <menu()+0x17ae>
        if (settings.cursens == Canbus) {
    49e4:	2d02      	cmp	r5, #2
    49e6:	f001 80d9 	beq.w	5b9c <menu()+0x1bf8>
    49ea:	2113      	movs	r1, #19
    49ec:	485f      	ldr	r0, [pc, #380]	; (4b6c <menu()+0xbc8>)
    49ee:	f007 fc0f 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    49f2:	4856      	ldr	r0, [pc, #344]	; (4b4c <menu()+0xba8>)
    49f4:	f004 febc 	bl	9770 <Print::println()>
        menuload = 2;
    49f8:	2302      	movs	r3, #2
    49fa:	6023      	str	r3, [r4, #0]
        break;
    49fc:	f7ff bb38 	b.w	4070 <menu()+0xcc>
        settings.voltsoc = !settings.voltsoc;
    4a00:	4e4b      	ldr	r6, [pc, #300]	; (4b30 <menu()+0xb8c>)
    4a02:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
    4a06:	fab3 f383 	clz	r3, r3
    4a0a:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4a0c:	2201      	movs	r2, #1
        settings.voltsoc = !settings.voltsoc;
    4a0e:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        incomingByte = 'c';
    4a12:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    4a14:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    4a16:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4a18:	e783      	b.n	4922 <menu()+0x97e>
        menuload = 1;
    4a1a:	2301      	movs	r3, #1
    4a1c:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    4a1e:	f007 fbc5 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4a22:	2800      	cmp	r0, #0
    4a24:	dd07      	ble.n	4a36 <menu()+0xa92>
          settings.convlow = Serial.parseInt();
    4a26:	4849      	ldr	r0, [pc, #292]	; (4b4c <menu()+0xba8>)
    4a28:	4e41      	ldr	r6, [pc, #260]	; (4b30 <menu()+0xb8c>)
    4a2a:	f005 f801 	bl	9a30 <Stream::parseInt()>
    4a2e:	f008 fa7b 	bl	cf28 <__aeabi_i2f>
    4a32:	f8c6 0094 	str.w	r0, [r6, #148]	; 0x94
  if (menuload == 8) {
    4a36:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'c';
    4a38:	2063      	movs	r0, #99	; 0x63
  if (menuload == 7) {
    4a3a:	2b07      	cmp	r3, #7
        incomingByte = 'c';
    4a3c:	6028      	str	r0, [r5, #0]
  if (menuload == 7) {
    4a3e:	f43f ab0e 	beq.w	405e <menu()+0xba>
  if (menuload == 5) {
    4a42:	2b05      	cmp	r3, #5
    4a44:	f041 8118 	bne.w	5c78 <menu()+0x1cd4>
          incomingByte = 'i';
    4a48:	2305      	movs	r3, #5
    4a4a:	f7ff bb08 	b.w	405e <menu()+0xba>
        menuload = 1;
    4a4e:	2301      	movs	r3, #1
    4a50:	6023      	str	r3, [r4, #0]
    4a52:	f007 fbab 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4a56:	2800      	cmp	r0, #0
    4a58:	dded      	ble.n	4a36 <menu()+0xa92>
          settings.convhigh = Serial.parseInt();
    4a5a:	483c      	ldr	r0, [pc, #240]	; (4b4c <menu()+0xba8>)
    4a5c:	4e34      	ldr	r6, [pc, #208]	; (4b30 <menu()+0xb8c>)
    4a5e:	f004 ffe7 	bl	9a30 <Stream::parseInt()>
    4a62:	f008 fa61 	bl	cf28 <__aeabi_i2f>
    4a66:	f8c6 0090 	str.w	r0, [r6, #144]	; 0x90
    4a6a:	e7e4      	b.n	4a36 <menu()+0xa92>
        menuload = 1;
    4a6c:	2301      	movs	r3, #1
    4a6e:	6023      	str	r3, [r4, #0]
    4a70:	f007 fb9c 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4a74:	2800      	cmp	r0, #0
    4a76:	f301 8056 	bgt.w	5b26 <menu()+0x1b82>
    4a7a:	4e2d      	ldr	r6, [pc, #180]	; (4b30 <menu()+0xb8c>)
        menuload = 1;
    4a7c:	2201      	movs	r2, #1
        incomingByte = 'c';
    4a7e:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    4a80:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    4a82:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4a84:	e74d      	b.n	4922 <menu()+0x97e>
        menuload = 1;
    4a86:	2301      	movs	r3, #1
    4a88:	6023      	str	r3, [r4, #0]
    4a8a:	f007 fb8f 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4a8e:	2800      	cmp	r0, #0
    4a90:	ddf3      	ble.n	4a7a <menu()+0xad6>
          settings.changecur = Serial.parseInt();
    4a92:	482e      	ldr	r0, [pc, #184]	; (4b4c <menu()+0xba8>)
    4a94:	4e26      	ldr	r6, [pc, #152]	; (4b30 <menu()+0xb8c>)
    4a96:	f004 ffcb 	bl	9a30 <Stream::parseInt()>
    4a9a:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c
    4a9e:	e7ed      	b.n	4a7c <menu()+0xad8>
        menuload = 1;
    4aa0:	2301      	movs	r3, #1
    4aa2:	6023      	str	r3, [r4, #0]
    4aa4:	f007 fb82 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4aa8:	2800      	cmp	r0, #0
    4aaa:	ddc4      	ble.n	4a36 <menu()+0xa92>
          settings.CurDead = Serial.parseInt();
    4aac:	4827      	ldr	r0, [pc, #156]	; (4b4c <menu()+0xba8>)
    4aae:	4e20      	ldr	r6, [pc, #128]	; (4b30 <menu()+0xb8c>)
    4ab0:	f004 ffbe 	bl	9a30 <Stream::parseInt()>
    4ab4:	f8a6 00c2 	strh.w	r0, [r6, #194]	; 0xc2
    4ab8:	e7bd      	b.n	4a36 <menu()+0xa92>
        settings.curcan++;
    4aba:	4e1d      	ldr	r6, [pc, #116]	; (4b30 <menu()+0xb8c>)
    4abc:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
        menuload = 1;
    4ac0:	2201      	movs	r2, #1
        settings.curcan++;
    4ac2:	4413      	add	r3, r2
          settings.curcan = 1;
    4ac4:	2b05      	cmp	r3, #5
    4ac6:	bfa8      	it	ge
    4ac8:	4613      	movge	r3, r2
        menuload = 1;
    4aca:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    4acc:	2263      	movs	r2, #99	; 0x63
    4ace:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
    4ad2:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    4ad4:	e725      	b.n	4922 <menu()+0x97e>
        settings.cursens++;
    4ad6:	4e16      	ldr	r6, [pc, #88]	; (4b30 <menu()+0xb8c>)
    4ad8:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
        menuload = 1;
    4adc:	2201      	movs	r2, #1
        settings.cursens++;
    4ade:	4413      	add	r3, r2
          settings.cursens = 0;
    4ae0:	2b04      	cmp	r3, #4
        menuload = 1;
    4ae2:	6022      	str	r2, [r4, #0]
          settings.cursens = 0;
    4ae4:	bfa8      	it	ge
    4ae6:	2300      	movge	r3, #0
        incomingByte = 'c';
    4ae8:	2263      	movs	r2, #99	; 0x63
    4aea:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
    4aee:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    4af0:	e717      	b.n	4922 <menu()+0x97e>
    4af2:	f007 fb5b 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4af6:	2800      	cmp	r0, #0
    4af8:	f300 87fe 	bgt.w	5af8 <menu()+0x1b54>
  if (menuload == 5) {
    4afc:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4afe:	6828      	ldr	r0, [r5, #0]
  if (menuload == 5) {
    4b00:	2b05      	cmp	r3, #5
    4b02:	d13c      	bne.n	4b7e <menu()+0xbda>
    switch (incomingByte) {
    4b04:	2836      	cmp	r0, #54	; 0x36
    4b06:	f300 85cd 	bgt.w	56a4 <menu()+0x1700>
    4b0a:	2830      	cmp	r0, #48	; 0x30
    4b0c:	f77f aaa7 	ble.w	405e <menu()+0xba>
    4b10:	3832      	subs	r0, #50	; 0x32
    4b12:	2804      	cmp	r0, #4
    4b14:	f201 80bc 	bhi.w	5c90 <menu()+0x1cec>
    4b18:	e8df f010 	tbh	[pc, r0, lsl #1]
    4b1c:	0140015d 	.word	0x0140015d
    4b20:	002a00c2 	.word	0x002a00c2
    4b24:	0150      	.short	0x0150
    4b26:	bf00      	nop
    4b28:	1fffd0c4 	.word	0x1fffd0c4
    4b2c:	1fffcff8 	.word	0x1fffcff8
    4b30:	1fffd0d8 	.word	0x1fffd0d8
    4b34:	1fff91f0 	.word	0x1fff91f0
    4b38:	1fffcf3c 	.word	0x1fffcf3c
    4b3c:	1fffcfdc 	.word	0x1fffcfdc
    4b40:	1fff91a4 	.word	0x1fff91a4
    4b44:	1fff8850 	.word	0x1fff8850
    4b48:	1fffcf38 	.word	0x1fffcf38
    4b4c:	1fff89fc 	.word	0x1fff89fc
    4b50:	000149e0 	.word	0x000149e0
    4b54:	00014a00 	.word	0x00014a00
    4b58:	00014a20 	.word	0x00014a20
    4b5c:	00014a98 	.word	0x00014a98
    4b60:	00014aa4 	.word	0x00014aa4
    4b64:	00014abc 	.word	0x00014abc
    4b68:	00014adc 	.word	0x00014adc
    4b6c:	00014560 	.word	0x00014560
    4b70:	f007 fb1c 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4b74:	2800      	cmp	r0, #0
    4b76:	f300 865b 	bgt.w	5830 <menu()+0x188c>
  if (menuload == 3) {
    4b7a:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4b7c:	6828      	ldr	r0, [r5, #0]
  if (menuload == 3) {
    4b7e:	2b03      	cmp	r3, #3
    4b80:	f040 85c6 	bne.w	5710 <menu()+0x176c>
    switch (incomingByte) {
    4b84:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    4b88:	2a42      	cmp	r2, #66	; 0x42
    4b8a:	f63f aa68 	bhi.w	405e <menu()+0xba>
    4b8e:	a101      	add	r1, pc, #4	; (adr r1, 4b94 <menu()+0xbf0>)
    4b90:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4b94:	0000599f 	.word	0x0000599f
    4b98:	000059c9 	.word	0x000059c9
    4b9c:	0000597f 	.word	0x0000597f
    4ba0:	00005ac5 	.word	0x00005ac5
    4ba4:	00005aab 	.word	0x00005aab
    4ba8:	00005a8b 	.word	0x00005a8b
    4bac:	00005a51 	.word	0x00005a51
    4bb0:	00005a3b 	.word	0x00005a3b
    4bb4:	00005a1f 	.word	0x00005a1f
    4bb8:	000059ff 	.word	0x000059ff
    4bbc:	0000405f 	.word	0x0000405f
    4bc0:	0000405f 	.word	0x0000405f
    4bc4:	0000405f 	.word	0x0000405f
    4bc8:	0000405f 	.word	0x0000405f
    4bcc:	0000405f 	.word	0x0000405f
    4bd0:	0000405f 	.word	0x0000405f
    4bd4:	0000405f 	.word	0x0000405f
    4bd8:	0000405f 	.word	0x0000405f
    4bdc:	0000405f 	.word	0x0000405f
    4be0:	0000405f 	.word	0x0000405f
    4be4:	0000405f 	.word	0x0000405f
    4be8:	0000405f 	.word	0x0000405f
    4bec:	0000405f 	.word	0x0000405f
    4bf0:	0000405f 	.word	0x0000405f
    4bf4:	0000405f 	.word	0x0000405f
    4bf8:	0000405f 	.word	0x0000405f
    4bfc:	0000405f 	.word	0x0000405f
    4c00:	0000405f 	.word	0x0000405f
    4c04:	0000405f 	.word	0x0000405f
    4c08:	0000405f 	.word	0x0000405f
    4c0c:	0000405f 	.word	0x0000405f
    4c10:	0000405f 	.word	0x0000405f
    4c14:	0000405f 	.word	0x0000405f
    4c18:	0000405f 	.word	0x0000405f
    4c1c:	0000405f 	.word	0x0000405f
    4c20:	0000405f 	.word	0x0000405f
    4c24:	0000405f 	.word	0x0000405f
    4c28:	0000405f 	.word	0x0000405f
    4c2c:	0000405f 	.word	0x0000405f
    4c30:	0000405f 	.word	0x0000405f
    4c34:	0000405f 	.word	0x0000405f
    4c38:	0000405f 	.word	0x0000405f
    4c3c:	0000405f 	.word	0x0000405f
    4c40:	0000405f 	.word	0x0000405f
    4c44:	0000405f 	.word	0x0000405f
    4c48:	0000405f 	.word	0x0000405f
    4c4c:	0000405f 	.word	0x0000405f
    4c50:	0000405f 	.word	0x0000405f
    4c54:	0000405f 	.word	0x0000405f
    4c58:	000059e9 	.word	0x000059e9
    4c5c:	00005705 	.word	0x00005705
    4c60:	00005873 	.word	0x00005873
    4c64:	0000589f 	.word	0x0000589f
    4c68:	00005889 	.word	0x00005889
    4c6c:	00005911 	.word	0x00005911
    4c70:	000056bb 	.word	0x000056bb
    4c74:	000056df 	.word	0x000056df
    4c78:	0000405f 	.word	0x0000405f
    4c7c:	00005adf 	.word	0x00005adf
    4c80:	0000595d 	.word	0x0000595d
    4c84:	0000405f 	.word	0x0000405f
    4c88:	0000405f 	.word	0x0000405f
    4c8c:	0000405f 	.word	0x0000405f
    4c90:	0000405f 	.word	0x0000405f
    4c94:	0000405f 	.word	0x0000405f
    4c98:	0000594f 	.word	0x0000594f
    4c9c:	00005845 	.word	0x00005845
    4ca0:	f007 fa84 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4ca4:	2800      	cmp	r0, #0
    4ca6:	f77f af68 	ble.w	4b7a <menu()+0xbd6>
          settings.gaugelow = Serial.parseInt();
    4caa:	48b4      	ldr	r0, [pc, #720]	; (4f7c <menu()+0xfd8>)
    4cac:	4eb4      	ldr	r6, [pc, #720]	; (4f80 <menu()+0xfdc>)
    4cae:	f004 febf 	bl	9a30 <Stream::parseInt()>
          gaugedebug = 2;
    4cb2:	4bb4      	ldr	r3, [pc, #720]	; (4f84 <menu()+0xfe0>)
          settings.gaugelow = Serial.parseInt();
    4cb4:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
          gaugedebug = 2;
    4cb8:	2202      	movs	r2, #2
          gaugedebug = 3;
    4cba:	601a      	str	r2, [r3, #0]
          gaugeupdate();
    4cbc:	f7fd fd3c 	bl	2738 <gaugeupdate()>
          menuload = 1;
    4cc0:	2201      	movs	r2, #1
          incomingByte = 'k';
    4cc2:	236b      	movs	r3, #107	; 0x6b
          menuload = 1;
    4cc4:	6022      	str	r2, [r4, #0]
          incomingByte = 'k';
    4cc6:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4cc8:	e001      	b.n	4cce <menu()+0xd2a>
        virtual int read() { return usb_serial_getchar(); }
    4cca:	f007 fa33 	bl	c134 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4cce:	f007 fa6d 	bl	c1ac <usb_serial_available>
        while (Serial.available()) {
    4cd2:	2800      	cmp	r0, #0
    4cd4:	d1f9      	bne.n	4cca <menu()+0xd26>
        SERIALCONSOLE.println();
    4cd6:	48a9      	ldr	r0, [pc, #676]	; (4f7c <menu()+0xfd8>)
    4cd8:	f004 fd4a 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4cdc:	48a7      	ldr	r0, [pc, #668]	; (4f7c <menu()+0xfd8>)
    4cde:	f004 fd47 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4ce2:	48a6      	ldr	r0, [pc, #664]	; (4f7c <menu()+0xfd8>)
    4ce4:	f004 fd44 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4ce8:	48a4      	ldr	r0, [pc, #656]	; (4f7c <menu()+0xfd8>)
    4cea:	f004 fd41 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4cee:	48a3      	ldr	r0, [pc, #652]	; (4f7c <menu()+0xfd8>)
    4cf0:	f004 fd3e 	bl	9770 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4cf4:	2121      	movs	r1, #33	; 0x21
    4cf6:	48a4      	ldr	r0, [pc, #656]	; (4f88 <menu()+0xfe4>)
    4cf8:	f007 fa8a 	bl	c210 <usb_serial_write>
    4cfc:	489f      	ldr	r0, [pc, #636]	; (4f7c <menu()+0xfd8>)
    4cfe:	f004 fd37 	bl	9770 <Print::println()>
    4d02:	2115      	movs	r1, #21
    4d04:	48a1      	ldr	r0, [pc, #644]	; (4f8c <menu()+0xfe8>)
    4d06:	f007 fa83 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4d0a:	f8d6 1098 	ldr.w	r1, [r6, #152]	; 0x98
    4d0e:	489b      	ldr	r0, [pc, #620]	; (4f7c <menu()+0xfd8>)
    4d10:	f004 fd26 	bl	9760 <Print::print(long)>
    4d14:	2102      	movs	r1, #2
    4d16:	489e      	ldr	r0, [pc, #632]	; (4f90 <menu()+0xfec>)
    4d18:	f007 fa7a 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4d1c:	4897      	ldr	r0, [pc, #604]	; (4f7c <menu()+0xfd8>)
    4d1e:	f004 fd27 	bl	9770 <Print::println()>
    4d22:	211e      	movs	r1, #30
    4d24:	489b      	ldr	r0, [pc, #620]	; (4f94 <menu()+0xff0>)
    4d26:	f007 fa73 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4d2a:	f8d6 10a0 	ldr.w	r1, [r6, #160]	; 0xa0
    4d2e:	4893      	ldr	r0, [pc, #588]	; (4f7c <menu()+0xfd8>)
    4d30:	f004 fd16 	bl	9760 <Print::print(long)>
    4d34:	2103      	movs	r1, #3
    4d36:	4898      	ldr	r0, [pc, #608]	; (4f98 <menu()+0xff4>)
    4d38:	f007 fa6a 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4d3c:	488f      	ldr	r0, [pc, #572]	; (4f7c <menu()+0xfd8>)
    4d3e:	f004 fd17 	bl	9770 <Print::println()>
    4d42:	211e      	movs	r1, #30
    4d44:	4895      	ldr	r0, [pc, #596]	; (4f9c <menu()+0xff8>)
    4d46:	f007 fa63 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4d4a:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    4d4e:	488b      	ldr	r0, [pc, #556]	; (4f7c <menu()+0xfd8>)
    4d50:	f004 fd06 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4d54:	4889      	ldr	r0, [pc, #548]	; (4f7c <menu()+0xfd8>)
    4d56:	f004 fd0b 	bl	9770 <Print::println()>
    4d5a:	211d      	movs	r1, #29
    4d5c:	4890      	ldr	r0, [pc, #576]	; (4fa0 <menu()+0xffc>)
    4d5e:	f007 fa57 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4d62:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
    4d66:	4885      	ldr	r0, [pc, #532]	; (4f7c <menu()+0xfd8>)
    4d68:	f004 fcfa 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4d6c:	4883      	ldr	r0, [pc, #524]	; (4f7c <menu()+0xfd8>)
    4d6e:	f004 fcff 	bl	9770 <Print::println()>
    4d72:	211e      	movs	r1, #30
    4d74:	488b      	ldr	r0, [pc, #556]	; (4fa4 <menu()+0x1000>)
    4d76:	f007 fa4b 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4d7a:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
    4d7e:	487f      	ldr	r0, [pc, #508]	; (4f7c <menu()+0xfd8>)
    4d80:	f004 fcee 	bl	9760 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4d84:	487d      	ldr	r0, [pc, #500]	; (4f7c <menu()+0xfd8>)
    4d86:	f004 fcf3 	bl	9770 <Print::println()>
        if (settings.ESSmode == 1) {
    4d8a:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
    4d8e:	2b01      	cmp	r3, #1
    4d90:	f000 8719 	beq.w	5bc6 <menu()+0x1c22>
        menuload = 5;
    4d94:	2305      	movs	r3, #5
    4d96:	6023      	str	r3, [r4, #0]
        break;
    4d98:	f7ff b96a 	b.w	4070 <menu()+0xcc>
        virtual int available() { return usb_serial_available(); }
    4d9c:	f007 fa06 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4da0:	2800      	cmp	r0, #0
    4da2:	f77f aeea 	ble.w	4b7a <menu()+0xbd6>
          settings.conthold = Serial.parseInt();
    4da6:	4875      	ldr	r0, [pc, #468]	; (4f7c <menu()+0xfd8>)
    4da8:	4e75      	ldr	r6, [pc, #468]	; (4f80 <menu()+0xfdc>)
    4daa:	f004 fe41 	bl	9a30 <Stream::parseInt()>
          menuload = 1;
    4dae:	2301      	movs	r3, #1
    4db0:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    4db2:	236b      	movs	r3, #107	; 0x6b
          settings.conthold = Serial.parseInt();
    4db4:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
          incomingByte = 'k';
    4db8:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4dba:	e788      	b.n	4cce <menu()+0xd2a>
        settings.tripcont = !settings.tripcont;
    4dbc:	4e70      	ldr	r6, [pc, #448]	; (4f80 <menu()+0xfdc>)
    4dbe:	f896 30c9 	ldrb.w	r3, [r6, #201]	; 0xc9
          menuload = 1;
    4dc2:	2201      	movs	r2, #1
        settings.tripcont = !settings.tripcont;
    4dc4:	fab3 f383 	clz	r3, r3
          menuload = 1;
    4dc8:	6022      	str	r2, [r4, #0]
        settings.tripcont = !settings.tripcont;
    4dca:	095b      	lsrs	r3, r3, #5
          incomingByte = 'k';
    4dcc:	226b      	movs	r2, #107	; 0x6b
        settings.tripcont = !settings.tripcont;
    4dce:	f886 30c9 	strb.w	r3, [r6, #201]	; 0xc9
          incomingByte = 'k';
    4dd2:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    4dd4:	e77b      	b.n	4cce <menu()+0xd2a>
    4dd6:	f007 f9e9 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4dda:	2800      	cmp	r0, #0
    4ddc:	f77f aecd 	ble.w	4b7a <menu()+0xbd6>
          settings.Precurrent = Serial.parseInt();
    4de0:	4866      	ldr	r0, [pc, #408]	; (4f7c <menu()+0xfd8>)
    4de2:	4e67      	ldr	r6, [pc, #412]	; (4f80 <menu()+0xfdc>)
    4de4:	f004 fe24 	bl	9a30 <Stream::parseInt()>
          menuload = 1;
    4de8:	2301      	movs	r3, #1
    4dea:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    4dec:	236b      	movs	r3, #107	; 0x6b
          settings.Precurrent = Serial.parseInt();
    4dee:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
          incomingByte = 'k';
    4df2:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4df4:	e76b      	b.n	4cce <menu()+0xd2a>
    4df6:	f007 f9d9 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4dfa:	2800      	cmp	r0, #0
    4dfc:	f77f ae7e 	ble.w	4afc <menu()+0xb58>
          settings.ChargeVsetpoint = Serial.parseInt();
    4e00:	485e      	ldr	r0, [pc, #376]	; (4f7c <menu()+0xfd8>)
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    4e02:	4e5f      	ldr	r6, [pc, #380]	; (4f80 <menu()+0xfdc>)
          settings.ChargeVsetpoint = Serial.parseInt();
    4e04:	f004 fe14 	bl	9a30 <Stream::parseInt()>
    4e08:	f008 f88e 	bl	cf28 <__aeabi_i2f>
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    4e0c:	4966      	ldr	r1, [pc, #408]	; (4fa8 <menu()+0x1004>)
    4e0e:	f008 f993 	bl	d138 <__aeabi_fdiv>
          menuload = 1;
    4e12:	2301      	movs	r3, #1
    4e14:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    4e16:	2365      	movs	r3, #101	; 0x65
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    4e18:	6170      	str	r0, [r6, #20]
          incomingByte = 'e';
    4e1a:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4e1c:	e001      	b.n	4e22 <menu()+0xe7e>
        virtual int read() { return usb_serial_getchar(); }
    4e1e:	f007 f989 	bl	c134 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4e22:	f007 f9c3 	bl	c1ac <usb_serial_available>
        while (Serial.available()) {
    4e26:	4605      	mov	r5, r0
    4e28:	2800      	cmp	r0, #0
    4e2a:	d1f8      	bne.n	4e1e <menu()+0xe7a>
        SERIALCONSOLE.println();
    4e2c:	4853      	ldr	r0, [pc, #332]	; (4f7c <menu()+0xfd8>)
    4e2e:	f004 fc9f 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4e32:	4852      	ldr	r0, [pc, #328]	; (4f7c <menu()+0xfd8>)
    4e34:	f004 fc9c 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4e38:	4850      	ldr	r0, [pc, #320]	; (4f7c <menu()+0xfd8>)
    4e3a:	f004 fc99 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4e3e:	484f      	ldr	r0, [pc, #316]	; (4f7c <menu()+0xfd8>)
    4e40:	f004 fc96 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    4e44:	484d      	ldr	r0, [pc, #308]	; (4f7c <menu()+0xfd8>)
    4e46:	f004 fc93 	bl	9770 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4e4a:	2111      	movs	r1, #17
    4e4c:	4857      	ldr	r0, [pc, #348]	; (4fac <menu()+0x1008>)
    4e4e:	f007 f9df 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4e52:	484a      	ldr	r0, [pc, #296]	; (4f7c <menu()+0xfd8>)
    4e54:	f004 fc8c 	bl	9770 <Print::println()>
    4e58:	2128      	movs	r1, #40	; 0x28
    4e5a:	4855      	ldr	r0, [pc, #340]	; (4fb0 <menu()+0x100c>)
    4e5c:	f007 f9d8 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeVsetpoint * 1000, 0);
    4e60:	6970      	ldr	r0, [r6, #20]
    4e62:	4951      	ldr	r1, [pc, #324]	; (4fa8 <menu()+0x1004>)
    4e64:	f008 f8b4 	bl	cfd0 <__aeabi_fmul>
    4e68:	f007 fe8e 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4e6c:	9500      	str	r5, [sp, #0]
    4e6e:	4602      	mov	r2, r0
    4e70:	460b      	mov	r3, r1
    4e72:	4842      	ldr	r0, [pc, #264]	; (4f7c <menu()+0xfd8>)
    4e74:	f004 fca0 	bl	97b8 <Print::printFloat(double, unsigned char)>
    4e78:	2102      	movs	r1, #2
    4e7a:	484e      	ldr	r0, [pc, #312]	; (4fb4 <menu()+0x1010>)
    4e7c:	f007 f9c8 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4e80:	483e      	ldr	r0, [pc, #248]	; (4f7c <menu()+0xfd8>)
    4e82:	f004 fc75 	bl	9770 <Print::println()>
    4e86:	2116      	movs	r1, #22
    4e88:	484b      	ldr	r0, [pc, #300]	; (4fb8 <menu()+0x1014>)
    4e8a:	f007 f9c1 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeHys * 1000, 0);
    4e8e:	69f0      	ldr	r0, [r6, #28]
    4e90:	4945      	ldr	r1, [pc, #276]	; (4fa8 <menu()+0x1004>)
    4e92:	f008 f89d 	bl	cfd0 <__aeabi_fmul>
    4e96:	f007 fe77 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4e9a:	9500      	str	r5, [sp, #0]
    4e9c:	460b      	mov	r3, r1
    4e9e:	4602      	mov	r2, r0
    4ea0:	4836      	ldr	r0, [pc, #216]	; (4f7c <menu()+0xfd8>)
    4ea2:	f004 fc89 	bl	97b8 <Print::printFloat(double, unsigned char)>
    4ea6:	2102      	movs	r1, #2
    4ea8:	4842      	ldr	r0, [pc, #264]	; (4fb4 <menu()+0x1010>)
    4eaa:	f007 f9b1 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4eae:	4833      	ldr	r0, [pc, #204]	; (4f7c <menu()+0xfd8>)
    4eb0:	f004 fc5e 	bl	9770 <Print::println()>
        if (settings.chargertype > 0) {
    4eb4:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
    4eb8:	2b00      	cmp	r3, #0
    4eba:	dd32      	ble.n	4f22 <menu()+0xf7e>
    4ebc:	211d      	movs	r1, #29
    4ebe:	483f      	ldr	r0, [pc, #252]	; (4fbc <menu()+0x1018>)
    4ec0:	f007 f9a6 	bl	c210 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentmax * 0.1);
    4ec4:	6e30      	ldr	r0, [r6, #96]	; 0x60
    4ec6:	f008 f82f 	bl	cf28 <__aeabi_i2f>
    4eca:	493d      	ldr	r1, [pc, #244]	; (4fc0 <menu()+0x101c>)
    4ecc:	f008 f880 	bl	cfd0 <__aeabi_fmul>
    4ed0:	f007 fe5a 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4ed4:	2502      	movs	r5, #2
    4ed6:	4602      	mov	r2, r0
    4ed8:	460b      	mov	r3, r1
    4eda:	4828      	ldr	r0, [pc, #160]	; (4f7c <menu()+0xfd8>)
    4edc:	9500      	str	r5, [sp, #0]
    4ede:	f004 fc6b 	bl	97b8 <Print::printFloat(double, unsigned char)>
    4ee2:	2101      	movs	r1, #1
    4ee4:	4837      	ldr	r0, [pc, #220]	; (4fc4 <menu()+0x1020>)
    4ee6:	f007 f993 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4eea:	4824      	ldr	r0, [pc, #144]	; (4f7c <menu()+0xfd8>)
    4eec:	f004 fc40 	bl	9770 <Print::println()>
    4ef0:	211f      	movs	r1, #31
    4ef2:	4835      	ldr	r0, [pc, #212]	; (4fc8 <menu()+0x1024>)
    4ef4:	f007 f98c 	bl	c210 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentend * 0.1);
    4ef8:	6e70      	ldr	r0, [r6, #100]	; 0x64
    4efa:	f008 f815 	bl	cf28 <__aeabi_i2f>
    4efe:	4930      	ldr	r1, [pc, #192]	; (4fc0 <menu()+0x101c>)
    4f00:	f008 f866 	bl	cfd0 <__aeabi_fmul>
    4f04:	f007 fe40 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4f08:	9500      	str	r5, [sp, #0]
    4f0a:	4602      	mov	r2, r0
    4f0c:	460b      	mov	r3, r1
    4f0e:	481b      	ldr	r0, [pc, #108]	; (4f7c <menu()+0xfd8>)
    4f10:	f004 fc52 	bl	97b8 <Print::printFloat(double, unsigned char)>
    4f14:	482b      	ldr	r0, [pc, #172]	; (4fc4 <menu()+0x1020>)
    4f16:	2101      	movs	r1, #1
    4f18:	f007 f97a 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4f1c:	4817      	ldr	r0, [pc, #92]	; (4f7c <menu()+0xfd8>)
    4f1e:	f004 fc27 	bl	9770 <Print::println()>
    4f22:	482a      	ldr	r0, [pc, #168]	; (4fcc <menu()+0x1028>)
    4f24:	2111      	movs	r1, #17
    4f26:	f007 f973 	bl	c210 <usb_serial_write>
        switch (settings.chargertype) {
    4f2a:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
    4f2e:	2b08      	cmp	r3, #8
    4f30:	f200 80ba 	bhi.w	50a8 <menu()+0x1104>
    4f34:	e8df f013 	tbh	[pc, r3, lsl #1]
    4f38:	013f013a 	.word	0x013f013a
    4f3c:	01300135 	.word	0x01300135
    4f40:	0126012b 	.word	0x0126012b
    4f44:	011c0121 	.word	0x011c0121
    4f48:	00b4      	.short	0x00b4
        virtual int available() { return usb_serial_available(); }
    4f4a:	f007 f92f 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4f4e:	2800      	cmp	r0, #0
    4f50:	f77f add4 	ble.w	4afc <menu()+0xb58>
          settings.chargecurrentcold = Serial.parseInt() * 10;
    4f54:	4809      	ldr	r0, [pc, #36]	; (4f7c <menu()+0xfd8>)
    4f56:	4e0a      	ldr	r6, [pc, #40]	; (4f80 <menu()+0xfdc>)
    4f58:	f004 fd6a 	bl	9a30 <Stream::parseInt()>
    4f5c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
          if (settings.chargecurrentcold > settings.chargecurrentmax) {
    4f60:	6e32      	ldr	r2, [r6, #96]	; 0x60
          settings.chargecurrentcold = Serial.parseInt() * 10;
    4f62:	0043      	lsls	r3, r0, #1
    4f64:	b21b      	sxth	r3, r3
          if (settings.chargecurrentcold > settings.chargecurrentmax) {
    4f66:	4293      	cmp	r3, r2
          settings.chargecurrentcold = Serial.parseInt() * 10;
    4f68:	f8a6 30d0 	strh.w	r3, [r6, #208]	; 0xd0
            settings.chargecurrentcold = settings.chargecurrentmax;
    4f6c:	bfc8      	it	gt
    4f6e:	f8a6 20d0 	strhgt.w	r2, [r6, #208]	; 0xd0
          incomingByte = 'e';
    4f72:	2365      	movs	r3, #101	; 0x65
          menuload = 1;
    4f74:	2201      	movs	r2, #1
    4f76:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    4f78:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4f7a:	e752      	b.n	4e22 <menu()+0xe7e>
    4f7c:	1fff89fc 	.word	0x1fff89fc
    4f80:	1fffd0d8 	.word	0x1fffd0d8
    4f84:	1fffcfdc 	.word	0x1fffcfdc
    4f88:	000147f0 	.word	0x000147f0
    4f8c:	00014814 	.word	0x00014814
    4f90:	000146b8 	.word	0x000146b8
    4f94:	0001482c 	.word	0x0001482c
    4f98:	000143a8 	.word	0x000143a8
    4f9c:	0001484c 	.word	0x0001484c
    4fa0:	0001486c 	.word	0x0001486c
    4fa4:	0001488c 	.word	0x0001488c
    4fa8:	447a0000 	.word	0x447a0000
    4fac:	00014f28 	.word	0x00014f28
    4fb0:	00014574 	.word	0x00014574
    4fb4:	0001455c 	.word	0x0001455c
    4fb8:	000145a0 	.word	0x000145a0
    4fbc:	000145b8 	.word	0x000145b8
    4fc0:	3dcccccd 	.word	0x3dcccccd
    4fc4:	00014b20 	.word	0x00014b20
    4fc8:	000145d8 	.word	0x000145d8
    4fcc:	000145f8 	.word	0x000145f8
    4fd0:	f007 f8ec 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    4fd4:	2800      	cmp	r0, #0
    4fd6:	f77f ad91 	ble.w	4afc <menu()+0xb58>
          settings.ChargeTSetpoint = Serial.parseInt();
    4fda:	4885      	ldr	r0, [pc, #532]	; (51f0 <menu()+0x124c>)
          if (settings.ChargeTSetpoint < settings.UnderTSetpoint) {
    4fdc:	4e85      	ldr	r6, [pc, #532]	; (51f4 <menu()+0x1250>)
          settings.ChargeTSetpoint = Serial.parseInt();
    4fde:	f004 fd27 	bl	9a30 <Stream::parseInt()>
    4fe2:	f007 ffa1 	bl	cf28 <__aeabi_i2f>
          if (settings.ChargeTSetpoint < settings.UnderTSetpoint) {
    4fe6:	6af7      	ldr	r7, [r6, #44]	; 0x2c
    4fe8:	4639      	mov	r1, r7
          settings.ChargeTSetpoint = Serial.parseInt();
    4fea:	4680      	mov	r8, r0
          if (settings.ChargeTSetpoint < settings.UnderTSetpoint) {
    4fec:	f008 f98e 	bl	d30c <__aeabi_fcmplt>
    4ff0:	b900      	cbnz	r0, 4ff4 <menu()+0x1050>
            settings.ChargeTSetpoint = settings.UnderTSetpoint;
    4ff2:	4647      	mov	r7, r8
          menuload = 1;
    4ff4:	2301      	movs	r3, #1
    4ff6:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    4ff8:	2365      	movs	r3, #101	; 0x65
    4ffa:	6337      	str	r7, [r6, #48]	; 0x30
    4ffc:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4ffe:	e710      	b.n	4e22 <menu()+0xe7e>
        if (settings.ChargerDirect == 1) {
    5000:	4e7c      	ldr	r6, [pc, #496]	; (51f4 <menu()+0x1250>)
    5002:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
          menuload = 1;
    5006:	2201      	movs	r2, #1
        if (settings.ChargerDirect == 1) {
    5008:	4053      	eors	r3, r2
          menuload = 1;
    500a:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    500c:	2265      	movs	r2, #101	; 0x65
    500e:	f886 30c8 	strb.w	r3, [r6, #200]	; 0xc8
    5012:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    5014:	e705      	b.n	4e22 <menu()+0xe7e>
    5016:	f007 f8c9 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    501a:	2800      	cmp	r0, #0
    501c:	f77f ad6e 	ble.w	4afc <menu()+0xb58>
          settings.chargerspd = Serial.parseInt();
    5020:	4873      	ldr	r0, [pc, #460]	; (51f0 <menu()+0x124c>)
    5022:	4e74      	ldr	r6, [pc, #464]	; (51f4 <menu()+0x1250>)
    5024:	f004 fd04 	bl	9a30 <Stream::parseInt()>
          menuload = 1;
    5028:	2301      	movs	r3, #1
    502a:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    502c:	2365      	movs	r3, #101	; 0x65
          settings.chargerspd = Serial.parseInt();
    502e:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
          incomingByte = 'e';
    5032:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5034:	e6f5      	b.n	4e22 <menu()+0xe7e>
        settings.chargertype = settings.chargertype + 1;
    5036:	4e6f      	ldr	r6, [pc, #444]	; (51f4 <menu()+0x1250>)
    5038:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
          menuload = 1;
    503c:	2201      	movs	r2, #1
        settings.chargertype = settings.chargertype + 1;
    503e:	4413      	add	r3, r2
          settings.chargertype = 0;
    5040:	2b09      	cmp	r3, #9
          menuload = 1;
    5042:	6022      	str	r2, [r4, #0]
          settings.chargertype = 0;
    5044:	bfa8      	it	ge
    5046:	2300      	movge	r3, #0
          incomingByte = 'e';
    5048:	2265      	movs	r2, #101	; 0x65
    504a:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
    504e:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    5050:	e6e7      	b.n	4e22 <menu()+0xe7e>
    5052:	f007 f8ab 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5056:	2800      	cmp	r0, #0
    5058:	f77f ad50 	ble.w	4afc <menu()+0xb58>
          settings.chargecurrentend = Serial.parseInt() * 10;
    505c:	4864      	ldr	r0, [pc, #400]	; (51f0 <menu()+0x124c>)
    505e:	4e65      	ldr	r6, [pc, #404]	; (51f4 <menu()+0x1250>)
    5060:	f004 fce6 	bl	9a30 <Stream::parseInt()>
    5064:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5068:	0040      	lsls	r0, r0, #1
          menuload = 1;
    506a:	2201      	movs	r2, #1
          incomingByte = 'e';
    506c:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentend = Serial.parseInt() * 10;
    506e:	6670      	str	r0, [r6, #100]	; 0x64
          menuload = 1;
    5070:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    5072:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5074:	e6d5      	b.n	4e22 <menu()+0xe7e>
    5076:	f007 f899 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    507a:	2800      	cmp	r0, #0
    507c:	f77f ad3e 	ble.w	4afc <menu()+0xb58>
          settings.chargecurrentmax = Serial.parseInt() * 10;
    5080:	485b      	ldr	r0, [pc, #364]	; (51f0 <menu()+0x124c>)
    5082:	4e5c      	ldr	r6, [pc, #368]	; (51f4 <menu()+0x1250>)
    5084:	f004 fcd4 	bl	9a30 <Stream::parseInt()>
    5088:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    508c:	0040      	lsls	r0, r0, #1
          menuload = 1;
    508e:	2201      	movs	r2, #1
          incomingByte = 'e';
    5090:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentmax = Serial.parseInt() * 10;
    5092:	6630      	str	r0, [r6, #96]	; 0x60
          menuload = 1;
    5094:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    5096:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5098:	e6c3      	b.n	4e22 <menu()+0xe7e>
  if (menuload == 5) {
    509a:	2306      	movs	r3, #6
    509c:	f7fe bfdf 	b.w	405e <menu()+0xba>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    50a0:	4855      	ldr	r0, [pc, #340]	; (51f8 <menu()+0x1254>)
    50a2:	2111      	movs	r1, #17
    50a4:	f007 f8b4 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.println();
    50a8:	4851      	ldr	r0, [pc, #324]	; (51f0 <menu()+0x124c>)
    50aa:	f004 fb61 	bl	9770 <Print::println()>
        if (settings.chargertype > 0) {
    50ae:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
    50b2:	2b00      	cmp	r3, #0
    50b4:	dd12      	ble.n	50dc <menu()+0x1138>
    50b6:	2118      	movs	r1, #24
    50b8:	4850      	ldr	r0, [pc, #320]	; (51fc <menu()+0x1258>)
    50ba:	f007 f8a9 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    50be:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
    50c2:	484b      	ldr	r0, [pc, #300]	; (51f0 <menu()+0x124c>)
    50c4:	f004 fb4c 	bl	9760 <Print::print(long)>
    50c8:	2102      	movs	r1, #2
    50ca:	484d      	ldr	r0, [pc, #308]	; (5200 <menu()+0x125c>)
    50cc:	f007 f8a0 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    50d0:	4847      	ldr	r0, [pc, #284]	; (51f0 <menu()+0x124c>)
    50d2:	f004 fb4d 	bl	9770 <Print::println()>
          SERIALCONSOLE.println();
    50d6:	4846      	ldr	r0, [pc, #280]	; (51f0 <menu()+0x124c>)
    50d8:	f004 fb4a 	bl	9770 <Print::println()>
    50dc:	4849      	ldr	r0, [pc, #292]	; (5204 <menu()+0x1260>)
    50de:	211b      	movs	r1, #27
    50e0:	f007 f896 	bl	c210 <usb_serial_write>
        switch (settings.ChargerDirect) {
    50e4:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
    50e8:	2b00      	cmp	r3, #0
    50ea:	f040 8323 	bne.w	5734 <menu()+0x1790>
    50ee:	4846      	ldr	r0, [pc, #280]	; (5208 <menu()+0x1264>)
    50f0:	2112      	movs	r1, #18
    50f2:	f007 f88d 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.println();
    50f6:	483e      	ldr	r0, [pc, #248]	; (51f0 <menu()+0x124c>)
    50f8:	f004 fb3a 	bl	9770 <Print::println()>
    50fc:	211f      	movs	r1, #31
    50fe:	4843      	ldr	r0, [pc, #268]	; (520c <menu()+0x1268>)
    5100:	f007 f886 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeTSetpoint);
    5104:	6b30      	ldr	r0, [r6, #48]	; 0x30
    5106:	f007 fd3f 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    510a:	2502      	movs	r5, #2
    510c:	4602      	mov	r2, r0
    510e:	460b      	mov	r3, r1
    5110:	4837      	ldr	r0, [pc, #220]	; (51f0 <menu()+0x124c>)
    5112:	9500      	str	r5, [sp, #0]
    5114:	f004 fb50 	bl	97b8 <Print::printFloat(double, unsigned char)>
    5118:	4629      	mov	r1, r5
    511a:	483d      	ldr	r0, [pc, #244]	; (5210 <menu()+0x126c>)
    511c:	f007 f878 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5120:	4833      	ldr	r0, [pc, #204]	; (51f0 <menu()+0x124c>)
    5122:	f004 fb25 	bl	9770 <Print::println()>
    5126:	211e      	movs	r1, #30
    5128:	483a      	ldr	r0, [pc, #232]	; (5214 <menu()+0x1270>)
    512a:	f007 f871 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.chargecurrentcold * 0.1);
    512e:	f9b6 00d0 	ldrsh.w	r0, [r6, #208]	; 0xd0
    5132:	f007 fef9 	bl	cf28 <__aeabi_i2f>
    5136:	4938      	ldr	r1, [pc, #224]	; (5218 <menu()+0x1274>)
    5138:	f007 ff4a 	bl	cfd0 <__aeabi_fmul>
    513c:	f007 fd24 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5140:	9500      	str	r5, [sp, #0]
    5142:	460b      	mov	r3, r1
    5144:	4602      	mov	r2, r0
    5146:	482a      	ldr	r0, [pc, #168]	; (51f0 <menu()+0x124c>)
    5148:	f004 fb36 	bl	97b8 <Print::printFloat(double, unsigned char)>
    514c:	2101      	movs	r1, #1
    514e:	4833      	ldr	r0, [pc, #204]	; (521c <menu()+0x1278>)
    5150:	f007 f85e 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5154:	4826      	ldr	r0, [pc, #152]	; (51f0 <menu()+0x124c>)
    5156:	f004 fb0b 	bl	9770 <Print::println()>
    515a:	2113      	movs	r1, #19
    515c:	4830      	ldr	r0, [pc, #192]	; (5220 <menu()+0x127c>)
    515e:	f007 f857 	bl	c210 <usb_serial_write>
    5162:	4823      	ldr	r0, [pc, #140]	; (51f0 <menu()+0x124c>)
    5164:	f004 fb04 	bl	9770 <Print::println()>
        menuload = 6;
    5168:	2306      	movs	r3, #6
    516a:	6023      	str	r3, [r4, #0]
        break;
    516c:	f7fe bf80 	b.w	4070 <menu()+0xcc>
    5170:	2114      	movs	r1, #20
    5172:	482c      	ldr	r0, [pc, #176]	; (5224 <menu()+0x1280>)
    5174:	f007 f84c 	bl	c210 <usb_serial_write>
    5178:	e796      	b.n	50a8 <menu()+0x1104>
    517a:	2104      	movs	r1, #4
    517c:	482a      	ldr	r0, [pc, #168]	; (5228 <menu()+0x1284>)
    517e:	f007 f847 	bl	c210 <usb_serial_write>
    5182:	e791      	b.n	50a8 <menu()+0x1104>
    5184:	210b      	movs	r1, #11
    5186:	4829      	ldr	r0, [pc, #164]	; (522c <menu()+0x1288>)
    5188:	f007 f842 	bl	c210 <usb_serial_write>
    518c:	e78c      	b.n	50a8 <menu()+0x1104>
    518e:	210d      	movs	r1, #13
    5190:	4827      	ldr	r0, [pc, #156]	; (5230 <menu()+0x128c>)
    5192:	f007 f83d 	bl	c210 <usb_serial_write>
    5196:	e787      	b.n	50a8 <menu()+0x1104>
    5198:	210d      	movs	r1, #13
    519a:	4826      	ldr	r0, [pc, #152]	; (5234 <menu()+0x1290>)
    519c:	f007 f838 	bl	c210 <usb_serial_write>
    51a0:	e782      	b.n	50a8 <menu()+0x1104>
    51a2:	210c      	movs	r1, #12
    51a4:	4824      	ldr	r0, [pc, #144]	; (5238 <menu()+0x1294>)
    51a6:	f007 f833 	bl	c210 <usb_serial_write>
    51aa:	e77d      	b.n	50a8 <menu()+0x1104>
    51ac:	210d      	movs	r1, #13
    51ae:	4823      	ldr	r0, [pc, #140]	; (523c <menu()+0x1298>)
    51b0:	f007 f82e 	bl	c210 <usb_serial_write>
    51b4:	e778      	b.n	50a8 <menu()+0x1104>
    51b6:	210c      	movs	r1, #12
    51b8:	4821      	ldr	r0, [pc, #132]	; (5240 <menu()+0x129c>)
    51ba:	f007 f829 	bl	c210 <usb_serial_write>
    51be:	e773      	b.n	50a8 <menu()+0x1104>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value, "You can not use this type with EEPROM.put"); // the code below only makes sense if you can "memcpy" T
        #endif
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    51c0:	22d8      	movs	r2, #216	; 0xd8
    51c2:	2100      	movs	r1, #0
    51c4:	480b      	ldr	r0, [pc, #44]	; (51f4 <menu()+0x1250>)
        debug = 1;
    51c6:	4e1f      	ldr	r6, [pc, #124]	; (5244 <menu()+0x12a0>)
    51c8:	f004 fd2e 	bl	9c28 <eeprom_write_block>
  if (incomingByte == 115 & menuload == 0) {
    51cc:	682b      	ldr	r3, [r5, #0]
        menuload = 0;
    51ce:	2100      	movs	r1, #0
        debug = 1;
    51d0:	2201      	movs	r2, #1
  if (incomingByte == 115 & menuload == 0) {
    51d2:	2b73      	cmp	r3, #115	; 0x73
        menuload = 0;
    51d4:	6021      	str	r1, [r4, #0]
        debug = 1;
    51d6:	6032      	str	r2, [r6, #0]
  if (incomingByte == 115 & menuload == 0) {
    51d8:	f47e af4a 	bne.w	4070 <menu()+0xcc>
    51dc:	f7fe bfd5 	b.w	418a <menu()+0x1e6>
    51e0:	4e04      	ldr	r6, [pc, #16]	; (51f4 <menu()+0x1250>)
    51e2:	f7ff b9a7 	b.w	4534 <menu()+0x590>
        CPU_REBOOT;
    51e6:	f006 fb49 	bl	b87c <_reboot_Teensyduino_>
    51ea:	4e02      	ldr	r6, [pc, #8]	; (51f4 <menu()+0x1250>)
    51ec:	e02e      	b.n	524c <menu()+0x12a8>
    51ee:	bf00      	nop
    51f0:	1fff89fc 	.word	0x1fff89fc
    51f4:	1fffd0d8 	.word	0x1fffd0d8
    51f8:	00014688 	.word	0x00014688
    51fc:	0001469c 	.word	0x0001469c
    5200:	000146b8 	.word	0x000146b8
    5204:	000146bc 	.word	0x000146bc
    5208:	000146d8 	.word	0x000146d8
    520c:	00014704 	.word	0x00014704
    5210:	00014724 	.word	0x00014724
    5214:	00014728 	.word	0x00014728
    5218:	3dcccccd 	.word	0x3dcccccd
    521c:	00014b20 	.word	0x00014b20
    5220:	00014560 	.word	0x00014560
    5224:	00014670 	.word	0x00014670
    5228:	00014668 	.word	0x00014668
    522c:	0001465c 	.word	0x0001465c
    5230:	0001464c 	.word	0x0001464c
    5234:	0001463c 	.word	0x0001463c
    5238:	0001462c 	.word	0x0001462c
    523c:	0001460c 	.word	0x0001460c
    5240:	0001461c 	.word	0x0001461c
    5244:	1fff884c 	.word	0x1fff884c
        virtual int read() { return usb_serial_getchar(); }
    5248:	f006 ff74 	bl	c134 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    524c:	f006 ffae 	bl	c1ac <usb_serial_available>
        while (Serial.available()) {
    5250:	4605      	mov	r5, r0
    5252:	2800      	cmp	r0, #0
    5254:	d1f8      	bne.n	5248 <menu()+0x12a4>
        SERIALCONSOLE.println();
    5256:	48c2      	ldr	r0, [pc, #776]	; (5560 <menu()+0x15bc>)
    5258:	f004 fa8a 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    525c:	48c0      	ldr	r0, [pc, #768]	; (5560 <menu()+0x15bc>)
    525e:	f004 fa87 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    5262:	48bf      	ldr	r0, [pc, #764]	; (5560 <menu()+0x15bc>)
    5264:	f004 fa84 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    5268:	48bd      	ldr	r0, [pc, #756]	; (5560 <menu()+0x15bc>)
    526a:	f004 fa81 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    526e:	48bc      	ldr	r0, [pc, #752]	; (5560 <menu()+0x15bc>)
    5270:	f004 fa7e 	bl	9770 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5274:	2115      	movs	r1, #21
    5276:	48bb      	ldr	r0, [pc, #748]	; (5564 <menu()+0x15c0>)
    5278:	f006 ffca 	bl	c210 <usb_serial_write>
    527c:	48b8      	ldr	r0, [pc, #736]	; (5560 <menu()+0x15bc>)
    527e:	f004 fa77 	bl	9770 <Print::println()>
    5282:	2114      	movs	r1, #20
    5284:	48b8      	ldr	r0, [pc, #736]	; (5568 <menu()+0x15c4>)
    5286:	f006 ffc3 	bl	c210 <usb_serial_write>
    528a:	48b5      	ldr	r0, [pc, #724]	; (5560 <menu()+0x15bc>)
    528c:	f004 fa70 	bl	9770 <Print::println()>
    5290:	211b      	movs	r1, #27
    5292:	48b6      	ldr	r0, [pc, #728]	; (556c <menu()+0x15c8>)
    5294:	f006 ffbc 	bl	c210 <usb_serial_write>
    5298:	48b1      	ldr	r0, [pc, #708]	; (5560 <menu()+0x15bc>)
    529a:	f004 fa69 	bl	9770 <Print::println()>
    529e:	2113      	movs	r1, #19
    52a0:	48b3      	ldr	r0, [pc, #716]	; (5570 <menu()+0x15cc>)
    52a2:	f006 ffb5 	bl	c210 <usb_serial_write>
    52a6:	48ae      	ldr	r0, [pc, #696]	; (5560 <menu()+0x15bc>)
    52a8:	f004 fa62 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    52ac:	48ac      	ldr	r0, [pc, #688]	; (5560 <menu()+0x15bc>)
    52ae:	f004 fa5f 	bl	9770 <Print::println()>
        SERIALCONSOLE.println();
    52b2:	48ab      	ldr	r0, [pc, #684]	; (5560 <menu()+0x15bc>)
    52b4:	f004 fa5c 	bl	9770 <Print::println()>
    52b8:	2120      	movs	r1, #32
    52ba:	48ae      	ldr	r0, [pc, #696]	; (5574 <menu()+0x15d0>)
    52bc:	f006 ffa8 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverVSetpoint * 1000, 0);
    52c0:	68f0      	ldr	r0, [r6, #12]
    52c2:	49ad      	ldr	r1, [pc, #692]	; (5578 <menu()+0x15d4>)
    52c4:	f007 fe84 	bl	cfd0 <__aeabi_fmul>
    52c8:	f007 fc5e 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    52cc:	9500      	str	r5, [sp, #0]
    52ce:	4602      	mov	r2, r0
    52d0:	460b      	mov	r3, r1
    52d2:	48a3      	ldr	r0, [pc, #652]	; (5560 <menu()+0x15bc>)
    52d4:	f004 fa70 	bl	97b8 <Print::printFloat(double, unsigned char)>
    52d8:	2102      	movs	r1, #2
    52da:	48a8      	ldr	r0, [pc, #672]	; (557c <menu()+0x15d8>)
    52dc:	f006 ff98 	bl	c210 <usb_serial_write>
    52e0:	2102      	movs	r1, #2
    52e2:	48a7      	ldr	r0, [pc, #668]	; (5580 <menu()+0x15dc>)
    52e4:	f006 ff94 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    52e8:	489d      	ldr	r0, [pc, #628]	; (5560 <menu()+0x15bc>)
    52ea:	f004 fa41 	bl	9770 <Print::println()>
    52ee:	2121      	movs	r1, #33	; 0x21
    52f0:	48a4      	ldr	r0, [pc, #656]	; (5584 <menu()+0x15e0>)
    52f2:	f006 ff8d 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderVSetpoint * 1000, 0);
    52f6:	6930      	ldr	r0, [r6, #16]
    52f8:	499f      	ldr	r1, [pc, #636]	; (5578 <menu()+0x15d4>)
    52fa:	f007 fe69 	bl	cfd0 <__aeabi_fmul>
    52fe:	f007 fc43 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5302:	9500      	str	r5, [sp, #0]
    5304:	4602      	mov	r2, r0
    5306:	460b      	mov	r3, r1
    5308:	4895      	ldr	r0, [pc, #596]	; (5560 <menu()+0x15bc>)
    530a:	f004 fa55 	bl	97b8 <Print::printFloat(double, unsigned char)>
    530e:	2102      	movs	r1, #2
    5310:	489a      	ldr	r0, [pc, #616]	; (557c <menu()+0x15d8>)
    5312:	f006 ff7d 	bl	c210 <usb_serial_write>
    5316:	2102      	movs	r1, #2
    5318:	4899      	ldr	r0, [pc, #612]	; (5580 <menu()+0x15dc>)
    531a:	f006 ff79 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    531e:	4890      	ldr	r0, [pc, #576]	; (5560 <menu()+0x15bc>)
    5320:	f004 fa26 	bl	9770 <Print::println()>
    5324:	211f      	movs	r1, #31
    5326:	4898      	ldr	r0, [pc, #608]	; (5588 <menu()+0x15e4>)
    5328:	f006 ff72 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverTSetpoint);
    532c:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    532e:	f007 fc2b 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5332:	2702      	movs	r7, #2
    5334:	4602      	mov	r2, r0
    5336:	460b      	mov	r3, r1
    5338:	4889      	ldr	r0, [pc, #548]	; (5560 <menu()+0x15bc>)
    533a:	9700      	str	r7, [sp, #0]
    533c:	f004 fa3c 	bl	97b8 <Print::printFloat(double, unsigned char)>
    5340:	2101      	movs	r1, #1
    5342:	4892      	ldr	r0, [pc, #584]	; (558c <menu()+0x15e8>)
    5344:	f006 ff64 	bl	c210 <usb_serial_write>
    5348:	4639      	mov	r1, r7
    534a:	488d      	ldr	r0, [pc, #564]	; (5580 <menu()+0x15dc>)
    534c:	f006 ff60 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5350:	4883      	ldr	r0, [pc, #524]	; (5560 <menu()+0x15bc>)
    5352:	f004 fa0d 	bl	9770 <Print::println()>
    5356:	2120      	movs	r1, #32
    5358:	488d      	ldr	r0, [pc, #564]	; (5590 <menu()+0x15ec>)
    535a:	f006 ff59 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderTSetpoint);
    535e:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    5360:	f007 fc12 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5364:	9700      	str	r7, [sp, #0]
    5366:	4602      	mov	r2, r0
    5368:	460b      	mov	r3, r1
    536a:	487d      	ldr	r0, [pc, #500]	; (5560 <menu()+0x15bc>)
    536c:	f004 fa24 	bl	97b8 <Print::printFloat(double, unsigned char)>
    5370:	2101      	movs	r1, #1
    5372:	4886      	ldr	r0, [pc, #536]	; (558c <menu()+0x15e8>)
    5374:	f006 ff4c 	bl	c210 <usb_serial_write>
    5378:	4639      	mov	r1, r7
    537a:	4881      	ldr	r0, [pc, #516]	; (5580 <menu()+0x15dc>)
    537c:	f006 ff48 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5380:	4877      	ldr	r0, [pc, #476]	; (5560 <menu()+0x15bc>)
    5382:	f004 f9f5 	bl	9770 <Print::println()>
    5386:	2123      	movs	r1, #35	; 0x23
    5388:	4882      	ldr	r0, [pc, #520]	; (5594 <menu()+0x15f0>)
    538a:	f006 ff41 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceVoltage * 1000, 0);
    538e:	6cb0      	ldr	r0, [r6, #72]	; 0x48
    5390:	4979      	ldr	r1, [pc, #484]	; (5578 <menu()+0x15d4>)
    5392:	f007 fe1d 	bl	cfd0 <__aeabi_fmul>
    5396:	f007 fbf7 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    539a:	9500      	str	r5, [sp, #0]
    539c:	4602      	mov	r2, r0
    539e:	460b      	mov	r3, r1
    53a0:	486f      	ldr	r0, [pc, #444]	; (5560 <menu()+0x15bc>)
    53a2:	f004 fa09 	bl	97b8 <Print::printFloat(double, unsigned char)>
    53a6:	4639      	mov	r1, r7
    53a8:	4874      	ldr	r0, [pc, #464]	; (557c <menu()+0x15d8>)
    53aa:	f006 ff31 	bl	c210 <usb_serial_write>
    53ae:	4639      	mov	r1, r7
    53b0:	4873      	ldr	r0, [pc, #460]	; (5580 <menu()+0x15dc>)
    53b2:	f006 ff2d 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    53b6:	486a      	ldr	r0, [pc, #424]	; (5560 <menu()+0x15bc>)
    53b8:	f004 f9da 	bl	9770 <Print::println()>
    53bc:	211f      	movs	r1, #31
    53be:	4876      	ldr	r0, [pc, #472]	; (5598 <menu()+0x15f4>)
    53c0:	f006 ff26 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceHyst * 1000, 0);
    53c4:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    53c6:	496c      	ldr	r1, [pc, #432]	; (5578 <menu()+0x15d4>)
    53c8:	f007 fe02 	bl	cfd0 <__aeabi_fmul>
    53cc:	f007 fbdc 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    53d0:	9500      	str	r5, [sp, #0]
    53d2:	4602      	mov	r2, r0
    53d4:	460b      	mov	r3, r1
    53d6:	4862      	ldr	r0, [pc, #392]	; (5560 <menu()+0x15bc>)
    53d8:	f004 f9ee 	bl	97b8 <Print::printFloat(double, unsigned char)>
    53dc:	4639      	mov	r1, r7
    53de:	4867      	ldr	r0, [pc, #412]	; (557c <menu()+0x15d8>)
    53e0:	f006 ff16 	bl	c210 <usb_serial_write>
    53e4:	4639      	mov	r1, r7
    53e6:	4866      	ldr	r0, [pc, #408]	; (5580 <menu()+0x15dc>)
    53e8:	f006 ff12 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    53ec:	485c      	ldr	r0, [pc, #368]	; (5560 <menu()+0x15bc>)
    53ee:	f004 f9bf 	bl	9770 <Print::println()>
    53f2:	2119      	movs	r1, #25
    53f4:	4869      	ldr	r0, [pc, #420]	; (559c <menu()+0x15f8>)
    53f6:	f006 ff0b 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    53fa:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    53fc:	4858      	ldr	r0, [pc, #352]	; (5560 <menu()+0x15bc>)
    53fe:	f004 f9af 	bl	9760 <Print::print(long)>
    5402:	4639      	mov	r1, r7
    5404:	4866      	ldr	r0, [pc, #408]	; (55a0 <menu()+0x15fc>)
    5406:	f006 ff03 	bl	c210 <usb_serial_write>
    540a:	4639      	mov	r1, r7
    540c:	485c      	ldr	r0, [pc, #368]	; (5580 <menu()+0x15dc>)
    540e:	f006 feff 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5412:	4853      	ldr	r0, [pc, #332]	; (5560 <menu()+0x15bc>)
    5414:	f004 f9ac 	bl	9770 <Print::println()>
    5418:	2118      	movs	r1, #24
    541a:	4862      	ldr	r0, [pc, #392]	; (55a4 <menu()+0x1600>)
    541c:	f006 fef8 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.discurrentmax * 0.1);
    5420:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    5422:	f007 fd81 	bl	cf28 <__aeabi_i2f>
    5426:	4960      	ldr	r1, [pc, #384]	; (55a8 <menu()+0x1604>)
    5428:	f007 fdd2 	bl	cfd0 <__aeabi_fmul>
    542c:	f007 fbac 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5430:	9700      	str	r7, [sp, #0]
    5432:	4602      	mov	r2, r0
    5434:	460b      	mov	r3, r1
    5436:	484a      	ldr	r0, [pc, #296]	; (5560 <menu()+0x15bc>)
    5438:	f004 f9be 	bl	97b8 <Print::printFloat(double, unsigned char)>
    543c:	2101      	movs	r1, #1
    543e:	485b      	ldr	r0, [pc, #364]	; (55ac <menu()+0x1608>)
    5440:	f006 fee6 	bl	c210 <usb_serial_write>
    5444:	4639      	mov	r1, r7
    5446:	484e      	ldr	r0, [pc, #312]	; (5580 <menu()+0x15dc>)
    5448:	f006 fee2 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    544c:	4844      	ldr	r0, [pc, #272]	; (5560 <menu()+0x15bc>)
    544e:	f004 f98f 	bl	9770 <Print::println()>
    5452:	212b      	movs	r1, #43	; 0x2b
    5454:	4856      	ldr	r0, [pc, #344]	; (55b0 <menu()+0x160c>)
    5456:	f006 fedb 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischVsetpoint * 1000, 0);
    545a:	69b0      	ldr	r0, [r6, #24]
    545c:	4946      	ldr	r1, [pc, #280]	; (5578 <menu()+0x15d4>)
    545e:	f007 fdb7 	bl	cfd0 <__aeabi_fmul>
    5462:	f007 fb91 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5466:	9500      	str	r5, [sp, #0]
    5468:	4602      	mov	r2, r0
    546a:	460b      	mov	r3, r1
    546c:	483c      	ldr	r0, [pc, #240]	; (5560 <menu()+0x15bc>)
    546e:	f004 f9a3 	bl	97b8 <Print::printFloat(double, unsigned char)>
    5472:	4639      	mov	r1, r7
    5474:	4841      	ldr	r0, [pc, #260]	; (557c <menu()+0x15d8>)
    5476:	f006 fecb 	bl	c210 <usb_serial_write>
    547a:	4639      	mov	r1, r7
    547c:	4840      	ldr	r0, [pc, #256]	; (5580 <menu()+0x15dc>)
    547e:	f006 fec7 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5482:	4837      	ldr	r0, [pc, #220]	; (5560 <menu()+0x15bc>)
    5484:	f004 f974 	bl	9770 <Print::println()>
    5488:	211f      	movs	r1, #31
    548a:	484a      	ldr	r0, [pc, #296]	; (55b4 <menu()+0x1610>)
    548c:	f006 fec0 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5490:	6db1      	ldr	r1, [r6, #88]	; 0x58
    5492:	4833      	ldr	r0, [pc, #204]	; (5560 <menu()+0x15bc>)
    5494:	f004 f964 	bl	9760 <Print::print(long)>
    5498:	4639      	mov	r1, r7
    549a:	4839      	ldr	r0, [pc, #228]	; (5580 <menu()+0x15dc>)
    549c:	f006 feb8 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    54a0:	482f      	ldr	r0, [pc, #188]	; (5560 <menu()+0x15bc>)
    54a2:	f004 f965 	bl	9770 <Print::println()>
    54a6:	2120      	movs	r1, #32
    54a8:	4843      	ldr	r0, [pc, #268]	; (55b8 <menu()+0x1614>)
    54aa:	f006 feb1 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    54ae:	6d71      	ldr	r1, [r6, #84]	; 0x54
    54b0:	482b      	ldr	r0, [pc, #172]	; (5560 <menu()+0x15bc>)
    54b2:	f004 f955 	bl	9760 <Print::print(long)>
    54b6:	4639      	mov	r1, r7
    54b8:	4831      	ldr	r0, [pc, #196]	; (5580 <menu()+0x15dc>)
    54ba:	f006 fea9 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    54be:	4828      	ldr	r0, [pc, #160]	; (5560 <menu()+0x15bc>)
    54c0:	f004 f956 	bl	9770 <Print::println()>
    54c4:	2110      	movs	r1, #16
    54c6:	483d      	ldr	r0, [pc, #244]	; (55bc <menu()+0x1618>)
    54c8:	f006 fea2 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    54cc:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
    54ce:	4824      	ldr	r0, [pc, #144]	; (5560 <menu()+0x15bc>)
    54d0:	f004 f946 	bl	9760 <Print::print(long)>
    54d4:	4639      	mov	r1, r7
    54d6:	4829      	ldr	r0, [pc, #164]	; (557c <menu()+0x15d8>)
    54d8:	f006 fe9a 	bl	c210 <usb_serial_write>
    54dc:	4639      	mov	r1, r7
    54de:	4828      	ldr	r0, [pc, #160]	; (5580 <menu()+0x15dc>)
    54e0:	f006 fe96 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    54e4:	481e      	ldr	r0, [pc, #120]	; (5560 <menu()+0x15bc>)
    54e6:	f004 f943 	bl	9770 <Print::println()>
    54ea:	2113      	movs	r1, #19
    54ec:	4834      	ldr	r0, [pc, #208]	; (55c0 <menu()+0x161c>)
    54ee:	f006 fe8f 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    54f2:	6f31      	ldr	r1, [r6, #112]	; 0x70
    54f4:	481a      	ldr	r0, [pc, #104]	; (5560 <menu()+0x15bc>)
    54f6:	f004 f933 	bl	9760 <Print::print(long)>
    54fa:	2101      	movs	r1, #1
    54fc:	4831      	ldr	r0, [pc, #196]	; (55c4 <menu()+0x1620>)
    54fe:	f006 fe87 	bl	c210 <usb_serial_write>
    5502:	4639      	mov	r1, r7
    5504:	481e      	ldr	r0, [pc, #120]	; (5580 <menu()+0x15dc>)
    5506:	f006 fe83 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    550a:	4815      	ldr	r0, [pc, #84]	; (5560 <menu()+0x15bc>)
    550c:	f004 f930 	bl	9770 <Print::println()>
    5510:	2110      	movs	r1, #16
    5512:	482d      	ldr	r0, [pc, #180]	; (55c8 <menu()+0x1624>)
    5514:	f006 fe7c 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5518:	6f71      	ldr	r1, [r6, #116]	; 0x74
    551a:	4811      	ldr	r0, [pc, #68]	; (5560 <menu()+0x15bc>)
    551c:	f004 f920 	bl	9760 <Print::print(long)>
    5520:	4639      	mov	r1, r7
    5522:	4816      	ldr	r0, [pc, #88]	; (557c <menu()+0x15d8>)
    5524:	f006 fe74 	bl	c210 <usb_serial_write>
    5528:	4639      	mov	r1, r7
    552a:	4815      	ldr	r0, [pc, #84]	; (5580 <menu()+0x15dc>)
    552c:	f006 fe70 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5530:	480b      	ldr	r0, [pc, #44]	; (5560 <menu()+0x15bc>)
    5532:	f004 f91d 	bl	9770 <Print::println()>
    5536:	2114      	movs	r1, #20
    5538:	4824      	ldr	r0, [pc, #144]	; (55cc <menu()+0x1628>)
    553a:	f006 fe69 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    553e:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    5540:	4807      	ldr	r0, [pc, #28]	; (5560 <menu()+0x15bc>)
    5542:	f004 f90d 	bl	9760 <Print::print(long)>
    5546:	2101      	movs	r1, #1
    5548:	481e      	ldr	r0, [pc, #120]	; (55c4 <menu()+0x1620>)
    554a:	f006 fe61 	bl	c210 <usb_serial_write>
    554e:	4639      	mov	r1, r7
    5550:	480b      	ldr	r0, [pc, #44]	; (5580 <menu()+0x15dc>)
    5552:	f006 fe5d 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5556:	4802      	ldr	r0, [pc, #8]	; (5560 <menu()+0x15bc>)
    5558:	f004 f90a 	bl	9770 <Print::println()>
    555c:	2116      	movs	r1, #22
    555e:	e037      	b.n	55d0 <menu()+0x162c>
    5560:	1fff89fc 	.word	0x1fff89fc
    5564:	00014c04 	.word	0x00014c04
    5568:	00014c1c 	.word	0x00014c1c
    556c:	00014c34 	.word	0x00014c34
    5570:	00014560 	.word	0x00014560
    5574:	00014c50 	.word	0x00014c50
    5578:	447a0000 	.word	0x447a0000
    557c:	0001455c 	.word	0x0001455c
    5580:	00015030 	.word	0x00015030
    5584:	00014c74 	.word	0x00014c74
    5588:	00014c98 	.word	0x00014c98
    558c:	00014cb8 	.word	0x00014cb8
    5590:	00014cbc 	.word	0x00014cbc
    5594:	00014ce0 	.word	0x00014ce0
    5598:	00014d04 	.word	0x00014d04
    559c:	00014d24 	.word	0x00014d24
    55a0:	00014d40 	.word	0x00014d40
    55a4:	00014d44 	.word	0x00014d44
    55a8:	3dcccccd 	.word	0x3dcccccd
    55ac:	00014b20 	.word	0x00014b20
    55b0:	00014d60 	.word	0x00014d60
    55b4:	00014d8c 	.word	0x00014d8c
    55b8:	00014dac 	.word	0x00014dac
    55bc:	00014dd0 	.word	0x00014dd0
    55c0:	00014de4 	.word	0x00014de4
    55c4:	00014df8 	.word	0x00014df8
    55c8:	00014dfc 	.word	0x00014dfc
    55cc:	00014e10 	.word	0x00014e10
    55d0:	48b8      	ldr	r0, [pc, #736]	; (58b4 <menu()+0x1910>)
    55d2:	f006 fe1d 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.StoreVsetpoint * 1000, 0);
    55d6:	6a30      	ldr	r0, [r6, #32]
    55d8:	49b7      	ldr	r1, [pc, #732]	; (58b8 <menu()+0x1914>)
    55da:	f007 fcf9 	bl	cfd0 <__aeabi_fmul>
    55de:	f007 fad3 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    55e2:	9500      	str	r5, [sp, #0]
    55e4:	4602      	mov	r2, r0
    55e6:	460b      	mov	r3, r1
    55e8:	48b4      	ldr	r0, [pc, #720]	; (58bc <menu()+0x1918>)
    55ea:	f004 f8e5 	bl	97b8 <Print::printFloat(double, unsigned char)>
    55ee:	4639      	mov	r1, r7
    55f0:	48b3      	ldr	r0, [pc, #716]	; (58c0 <menu()+0x191c>)
    55f2:	f006 fe0d 	bl	c210 <usb_serial_write>
    55f6:	4639      	mov	r1, r7
    55f8:	48b2      	ldr	r0, [pc, #712]	; (58c4 <menu()+0x1920>)
    55fa:	f006 fe09 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    55fe:	48af      	ldr	r0, [pc, #700]	; (58bc <menu()+0x1918>)
    5600:	f004 f8b6 	bl	9770 <Print::println()>
    5604:	2124      	movs	r1, #36	; 0x24
    5606:	48b0      	ldr	r0, [pc, #704]	; (58c8 <menu()+0x1924>)
    5608:	f006 fe02 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTaper * 1000, 0);
    560c:	f8d6 00c4 	ldr.w	r0, [r6, #196]	; 0xc4
    5610:	49a9      	ldr	r1, [pc, #676]	; (58b8 <menu()+0x1914>)
    5612:	f007 fcdd 	bl	cfd0 <__aeabi_fmul>
    5616:	f007 fab7 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    561a:	9500      	str	r5, [sp, #0]
    561c:	4602      	mov	r2, r0
    561e:	460b      	mov	r3, r1
    5620:	48a6      	ldr	r0, [pc, #664]	; (58bc <menu()+0x1918>)
    5622:	f004 f8c9 	bl	97b8 <Print::printFloat(double, unsigned char)>
    5626:	4639      	mov	r1, r7
    5628:	48a5      	ldr	r0, [pc, #660]	; (58c0 <menu()+0x191c>)
    562a:	f006 fdf1 	bl	c210 <usb_serial_write>
    562e:	4639      	mov	r1, r7
    5630:	48a4      	ldr	r0, [pc, #656]	; (58c4 <menu()+0x1920>)
    5632:	f006 fded 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5636:	48a1      	ldr	r0, [pc, #644]	; (58bc <menu()+0x1918>)
    5638:	f004 f89a 	bl	9770 <Print::println()>
    563c:	212b      	movs	r1, #43	; 0x2b
    563e:	48a3      	ldr	r0, [pc, #652]	; (58cc <menu()+0x1928>)
    5640:	f006 fde6 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTSetpoint);
    5644:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5646:	f007 fa9f 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    564a:	9700      	str	r7, [sp, #0]
    564c:	4602      	mov	r2, r0
    564e:	460b      	mov	r3, r1
    5650:	489a      	ldr	r0, [pc, #616]	; (58bc <menu()+0x1918>)
    5652:	f004 f8b1 	bl	97b8 <Print::printFloat(double, unsigned char)>
    5656:	2101      	movs	r1, #1
    5658:	489d      	ldr	r0, [pc, #628]	; (58d0 <menu()+0x192c>)
    565a:	f006 fdd9 	bl	c210 <usb_serial_write>
    565e:	4639      	mov	r1, r7
    5660:	4898      	ldr	r0, [pc, #608]	; (58c4 <menu()+0x1920>)
    5662:	f006 fdd5 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5666:	4895      	ldr	r0, [pc, #596]	; (58bc <menu()+0x1918>)
    5668:	f004 f882 	bl	9770 <Print::println()>
    566c:	2127      	movs	r1, #39	; 0x27
    566e:	4899      	ldr	r0, [pc, #612]	; (58d4 <menu()+0x1930>)
    5670:	f006 fdce 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischHys * 1000, 0);
    5674:	f8d6 00cc 	ldr.w	r0, [r6, #204]	; 0xcc
    5678:	498f      	ldr	r1, [pc, #572]	; (58b8 <menu()+0x1914>)
    567a:	f007 fca9 	bl	cfd0 <__aeabi_fmul>
    567e:	f007 fa83 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5682:	9500      	str	r5, [sp, #0]
    5684:	460b      	mov	r3, r1
    5686:	4602      	mov	r2, r0
    5688:	488c      	ldr	r0, [pc, #560]	; (58bc <menu()+0x1918>)
    568a:	f004 f895 	bl	97b8 <Print::printFloat(double, unsigned char)>
    568e:	4639      	mov	r1, r7
    5690:	488b      	ldr	r0, [pc, #556]	; (58c0 <menu()+0x191c>)
    5692:	f006 fdbd 	bl	c210 <usb_serial_write>
        SERIALCONSOLE.println();
    5696:	4889      	ldr	r0, [pc, #548]	; (58bc <menu()+0x1918>)
    5698:	f004 f86a 	bl	9770 <Print::println()>
        menuload = 3;
    569c:	2303      	movs	r3, #3
    569e:	6023      	str	r3, [r4, #0]
        break;
    56a0:	f7fe bce6 	b.w	4070 <menu()+0xcc>
    switch (incomingByte) {
    56a4:	2871      	cmp	r0, #113	; 0x71
    56a6:	f47f a9cf 	bne.w	4a48 <menu()+0xaa4>
        gaugedebug = 0;
    56aa:	4a8b      	ldr	r2, [pc, #556]	; (58d8 <menu()+0x1934>)
    56ac:	2300      	movs	r3, #0
          incomingByte = 'k';
    56ae:	2073      	movs	r0, #115	; 0x73
        gaugedebug = 0;
    56b0:	6013      	str	r3, [r2, #0]
          menuload = 1;
    56b2:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    56b4:	6028      	str	r0, [r5, #0]
  if (menuload == 1) {
    56b6:	f7fe bcd2 	b.w	405e <menu()+0xba>
        virtual int available() { return usb_serial_available(); }
    56ba:	f006 fd77 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    56be:	2800      	cmp	r0, #0
    56c0:	dd0d      	ble.n	56de <menu()+0x173a>
          settings.StoreVsetpoint = Serial.parseInt();
    56c2:	487e      	ldr	r0, [pc, #504]	; (58bc <menu()+0x1918>)
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    56c4:	4e85      	ldr	r6, [pc, #532]	; (58dc <menu()+0x1938>)
          settings.StoreVsetpoint = Serial.parseInt();
    56c6:	f004 f9b3 	bl	9a30 <Stream::parseInt()>
    56ca:	f007 fc2d 	bl	cf28 <__aeabi_i2f>
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    56ce:	497a      	ldr	r1, [pc, #488]	; (58b8 <menu()+0x1914>)
    56d0:	f007 fd32 	bl	d138 <__aeabi_fdiv>
          menuload = 1;
    56d4:	2201      	movs	r2, #1
          incomingByte = 'b';
    56d6:	2362      	movs	r3, #98	; 0x62
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    56d8:	6230      	str	r0, [r6, #32]
          menuload = 1;
    56da:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    56dc:	602b      	str	r3, [r5, #0]
    56de:	f006 fd65 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    56e2:	2800      	cmp	r0, #0
    56e4:	dd0e      	ble.n	5704 <menu()+0x1760>
          settings.DisTaper = Serial.parseInt();
    56e6:	4875      	ldr	r0, [pc, #468]	; (58bc <menu()+0x1918>)
          settings.DisTaper = settings.DisTaper / 1000;
    56e8:	4e7c      	ldr	r6, [pc, #496]	; (58dc <menu()+0x1938>)
          settings.DisTaper = Serial.parseInt();
    56ea:	f004 f9a1 	bl	9a30 <Stream::parseInt()>
    56ee:	f007 fc1b 	bl	cf28 <__aeabi_i2f>
          settings.DisTaper = settings.DisTaper / 1000;
    56f2:	4971      	ldr	r1, [pc, #452]	; (58b8 <menu()+0x1914>)
    56f4:	f007 fd20 	bl	d138 <__aeabi_fdiv>
          menuload = 1;
    56f8:	2201      	movs	r2, #1
          incomingByte = 'b';
    56fa:	2362      	movs	r3, #98	; 0x62
          settings.DisTaper = settings.DisTaper / 1000;
    56fc:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
          menuload = 1;
    5700:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    5702:	602b      	str	r3, [r5, #0]
    5704:	f006 fd52 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5708:	2800      	cmp	r0, #0
    570a:	dc18      	bgt.n	573e <menu()+0x179a>
  if (menuload == 1) {
    570c:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    570e:	6828      	ldr	r0, [r5, #0]
  if (menuload == 1) {
    5710:	2b01      	cmp	r3, #1
    5712:	f47e aca4 	bne.w	405e <menu()+0xba>
    5716:	f7fe bfab 	b.w	4670 <menu()+0x6cc>
  if (menuload == 7) {
    571a:	2b07      	cmp	r3, #7
    571c:	f43f a8da 	beq.w	48d4 <menu()+0x930>
  if (menuload == 6)  //Charging settings
    5720:	2b06      	cmp	r3, #6
    5722:	f04f 0064 	mov.w	r0, #100	; 0x64
    5726:	f43f acb8 	beq.w	509a <menu()+0x10f6>
  if (menuload == 5) {
    572a:	2b05      	cmp	r3, #5
    572c:	f43f a98c 	beq.w	4a48 <menu()+0xaa4>
    5730:	f7ff ba25 	b.w	4b7e <menu()+0xbda>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5734:	2114      	movs	r1, #20
    5736:	486a      	ldr	r0, [pc, #424]	; (58e0 <menu()+0x193c>)
    5738:	f006 fd6a 	bl	c210 <usb_serial_write>
    573c:	e4db      	b.n	50f6 <menu()+0x1152>
          settings.socvolt[0] = Serial.parseInt();
    573e:	485f      	ldr	r0, [pc, #380]	; (58bc <menu()+0x1918>)
    5740:	4e66      	ldr	r6, [pc, #408]	; (58dc <menu()+0x1938>)
    5742:	f004 f975 	bl	9a30 <Stream::parseInt()>
    5746:	66f0      	str	r0, [r6, #108]	; 0x6c
        menuload = 1;
    5748:	2201      	movs	r2, #1
        incomingByte = 'b';
    574a:	2362      	movs	r3, #98	; 0x62
        menuload = 1;
    574c:	6022      	str	r2, [r4, #0]
        incomingByte = 'b';
    574e:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5750:	e57c      	b.n	524c <menu()+0x12a8>
    5752:	211c      	movs	r1, #28
    5754:	4863      	ldr	r0, [pc, #396]	; (58e4 <menu()+0x1940>)
    5756:	f006 fd5b 	bl	c210 <usb_serial_write>
          SERIALCONSOLE.print(settings.convlow * 0.1, 1);
    575a:	f8d6 0094 	ldr.w	r0, [r6, #148]	; 0x94
    575e:	4962      	ldr	r1, [pc, #392]	; (58e8 <menu()+0x1944>)
    5760:	f007 fc36 	bl	cfd0 <__aeabi_fmul>
    5764:	f007 fa10 	bl	cb88 <__aeabi_f2d>
    5768:	9700      	str	r7, [sp, #0]
    576a:	4602      	mov	r2, r0
    576c:	460b      	mov	r3, r1
    576e:	4853      	ldr	r0, [pc, #332]	; (58bc <menu()+0x1918>)
    5770:	f004 f822 	bl	97b8 <Print::printFloat(double, unsigned char)>
    5774:	2105      	movs	r1, #5
    5776:	485d      	ldr	r0, [pc, #372]	; (58ec <menu()+0x1948>)
    5778:	f006 fd4a 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    577c:	484f      	ldr	r0, [pc, #316]	; (58bc <menu()+0x1918>)
    577e:	f003 fff7 	bl	9770 <Print::println()>
        if (settings.cursens == Analoguedual) {
    5782:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    5786:	2d01      	cmp	r5, #1
    5788:	d119      	bne.n	57be <menu()+0x181a>
    578a:	211d      	movs	r1, #29
    578c:	4858      	ldr	r0, [pc, #352]	; (58f0 <menu()+0x194c>)
    578e:	f006 fd3f 	bl	c210 <usb_serial_write>
          SERIALCONSOLE.print(settings.convhigh * 0.1, 1);
    5792:	f8d6 0090 	ldr.w	r0, [r6, #144]	; 0x90
    5796:	4954      	ldr	r1, [pc, #336]	; (58e8 <menu()+0x1944>)
    5798:	f007 fc1a 	bl	cfd0 <__aeabi_fmul>
    579c:	f007 f9f4 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    57a0:	9500      	str	r5, [sp, #0]
    57a2:	4602      	mov	r2, r0
    57a4:	460b      	mov	r3, r1
    57a6:	4845      	ldr	r0, [pc, #276]	; (58bc <menu()+0x1918>)
    57a8:	f004 f806 	bl	97b8 <Print::printFloat(double, unsigned char)>
    57ac:	2105      	movs	r1, #5
    57ae:	484f      	ldr	r0, [pc, #316]	; (58ec <menu()+0x1948>)
    57b0:	f006 fd2e 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    57b4:	4841      	ldr	r0, [pc, #260]	; (58bc <menu()+0x1918>)
    57b6:	f003 ffdb 	bl	9770 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    57ba:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    57be:	f025 0302 	bic.w	r3, r5, #2
    57c2:	2b01      	cmp	r3, #1
    57c4:	f47f a90e 	bne.w	49e4 <menu()+0xa40>
    57c8:	211c      	movs	r1, #28
    57ca:	484a      	ldr	r0, [pc, #296]	; (58f4 <menu()+0x1950>)
    57cc:	f006 fd20 	bl	c210 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    57d0:	f8b6 10c2 	ldrh.w	r1, [r6, #194]	; 0xc2
    57d4:	4839      	ldr	r0, [pc, #228]	; (58bc <menu()+0x1918>)
    57d6:	f003 ffc3 	bl	9760 <Print::print(long)>
    57da:	2103      	movs	r1, #3
    57dc:	4846      	ldr	r0, [pc, #280]	; (58f8 <menu()+0x1954>)
    57de:	f006 fd17 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    57e2:	4836      	ldr	r0, [pc, #216]	; (58bc <menu()+0x1918>)
    57e4:	f003 ffc4 	bl	9770 <Print::println()>
        if (settings.cursens == Analoguedual) {
    57e8:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    57ec:	2d01      	cmp	r5, #1
    57ee:	f47f a8f9 	bne.w	49e4 <menu()+0xa40>
    57f2:	211f      	movs	r1, #31
    57f4:	4841      	ldr	r0, [pc, #260]	; (58fc <menu()+0x1958>)
    57f6:	f006 fd0b 	bl	c210 <usb_serial_write>
          SERIALCONSOLE.print(settings.changecur * 0.001);
    57fa:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
    57fe:	f007 fb93 	bl	cf28 <__aeabi_i2f>
    5802:	493f      	ldr	r1, [pc, #252]	; (5900 <menu()+0x195c>)
    5804:	f007 fbe4 	bl	cfd0 <__aeabi_fmul>
    5808:	f007 f9be 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    580c:	2502      	movs	r5, #2
    580e:	4602      	mov	r2, r0
    5810:	460b      	mov	r3, r1
    5812:	9500      	str	r5, [sp, #0]
    5814:	4829      	ldr	r0, [pc, #164]	; (58bc <menu()+0x1918>)
    5816:	f003 ffcf 	bl	97b8 <Print::printFloat(double, unsigned char)>
    581a:	4629      	mov	r1, r5
    581c:	4839      	ldr	r0, [pc, #228]	; (5904 <menu()+0x1960>)
    581e:	f006 fcf7 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5822:	4826      	ldr	r0, [pc, #152]	; (58bc <menu()+0x1918>)
    5824:	f003 ffa4 	bl	9770 <Print::println()>
        if (settings.cursens == Canbus) {
    5828:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    582c:	f7ff b8da 	b.w	49e4 <menu()+0xa40>
          settings.gaugehigh = Serial.parseInt();
    5830:	4822      	ldr	r0, [pc, #136]	; (58bc <menu()+0x1918>)
    5832:	4e2a      	ldr	r6, [pc, #168]	; (58dc <menu()+0x1938>)
    5834:	f004 f8fc 	bl	9a30 <Stream::parseInt()>
          gaugedebug = 3;
    5838:	4b27      	ldr	r3, [pc, #156]	; (58d8 <menu()+0x1934>)
          settings.gaugehigh = Serial.parseInt();
    583a:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
          gaugedebug = 3;
    583e:	2203      	movs	r2, #3
    5840:	f7ff ba3b 	b.w	4cba <menu()+0xd16>
        SOCreset = 1;
    5844:	4b30      	ldr	r3, [pc, #192]	; (5908 <menu()+0x1964>)
    5846:	481f      	ldr	r0, [pc, #124]	; (58c4 <menu()+0x1920>)
    5848:	2102      	movs	r1, #2
    584a:	2201      	movs	r2, #1
    584c:	601a      	str	r2, [r3, #0]
    584e:	f006 fcdf 	bl	c210 <usb_serial_write>
    5852:	481a      	ldr	r0, [pc, #104]	; (58bc <menu()+0x1918>)
    5854:	f003 ff8c 	bl	9770 <Print::println()>
    5858:	482c      	ldr	r0, [pc, #176]	; (590c <menu()+0x1968>)
    585a:	210b      	movs	r1, #11
    585c:	f006 fcd8 	bl	c210 <usb_serial_write>
    5860:	2102      	movs	r1, #2
    5862:	4818      	ldr	r0, [pc, #96]	; (58c4 <menu()+0x1920>)
    5864:	4e1d      	ldr	r6, [pc, #116]	; (58dc <menu()+0x1938>)
    5866:	f006 fcd3 	bl	c210 <usb_serial_write>
    586a:	4814      	ldr	r0, [pc, #80]	; (58bc <menu()+0x1918>)
    586c:	f003 ff80 	bl	9770 <Print::println()>
        break;
    5870:	e76a      	b.n	5748 <menu()+0x17a4>
        virtual int available() { return usb_serial_available(); }
    5872:	f006 fc9b 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5876:	2800      	cmp	r0, #0
    5878:	f77f af48 	ble.w	570c <menu()+0x1768>
          settings.socvolt[1] = Serial.parseInt();
    587c:	480f      	ldr	r0, [pc, #60]	; (58bc <menu()+0x1918>)
    587e:	4e17      	ldr	r6, [pc, #92]	; (58dc <menu()+0x1938>)
    5880:	f004 f8d6 	bl	9a30 <Stream::parseInt()>
    5884:	6730      	str	r0, [r6, #112]	; 0x70
          incomingByte = 'b';
    5886:	e75f      	b.n	5748 <menu()+0x17a4>
    5888:	f006 fc90 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    588c:	2800      	cmp	r0, #0
    588e:	f77f af3d 	ble.w	570c <menu()+0x1768>
          settings.socvolt[3] = Serial.parseInt();
    5892:	480a      	ldr	r0, [pc, #40]	; (58bc <menu()+0x1918>)
    5894:	4e11      	ldr	r6, [pc, #68]	; (58dc <menu()+0x1938>)
    5896:	f004 f8cb 	bl	9a30 <Stream::parseInt()>
    589a:	67b0      	str	r0, [r6, #120]	; 0x78
          incomingByte = 'b';
    589c:	e754      	b.n	5748 <menu()+0x17a4>
    589e:	f006 fc85 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    58a2:	2800      	cmp	r0, #0
    58a4:	f77f af32 	ble.w	570c <menu()+0x1768>
          settings.socvolt[2] = Serial.parseInt();
    58a8:	4804      	ldr	r0, [pc, #16]	; (58bc <menu()+0x1918>)
    58aa:	4e0c      	ldr	r6, [pc, #48]	; (58dc <menu()+0x1938>)
    58ac:	f004 f8c0 	bl	9a30 <Stream::parseInt()>
    58b0:	6770      	str	r0, [r6, #116]	; 0x74
          incomingByte = 'b';
    58b2:	e749      	b.n	5748 <menu()+0x17a4>
    58b4:	00014e28 	.word	0x00014e28
    58b8:	447a0000 	.word	0x447a0000
    58bc:	1fff89fc 	.word	0x1fff89fc
    58c0:	0001455c 	.word	0x0001455c
    58c4:	00015030 	.word	0x00015030
    58c8:	00014e40 	.word	0x00014e40
    58cc:	00014e68 	.word	0x00014e68
    58d0:	00014cb8 	.word	0x00014cb8
    58d4:	00014e94 	.word	0x00014e94
    58d8:	1fffcfdc 	.word	0x1fffcfdc
    58dc:	1fffd0d8 	.word	0x1fffd0d8
    58e0:	000146ec 	.word	0x000146ec
    58e4:	00014afc 	.word	0x00014afc
    58e8:	3dcccccd 	.word	0x3dcccccd
    58ec:	00014b1c 	.word	0x00014b1c
    58f0:	00014b24 	.word	0x00014b24
    58f4:	00014b44 	.word	0x00014b44
    58f8:	00014b64 	.word	0x00014b64
    58fc:	00014b68 	.word	0x00014b68
    5900:	3a83126f 	.word	0x3a83126f
    5904:	00014b88 	.word	0x00014b88
    5908:	1fff91c8 	.word	0x1fff91c8
    590c:	00014508 	.word	0x00014508
        loadSettings();
    5910:	f7fc fdce 	bl	24b0 <loadSettings()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5914:	2102      	movs	r1, #2
    5916:	48b8      	ldr	r0, [pc, #736]	; (5bf8 <menu()+0x1c54>)
    5918:	f006 fc7a 	bl	c210 <usb_serial_write>
    591c:	48b7      	ldr	r0, [pc, #732]	; (5bfc <menu()+0x1c58>)
    591e:	f003 ff27 	bl	9770 <Print::println()>
    5922:	2102      	movs	r1, #2
    5924:	48b4      	ldr	r0, [pc, #720]	; (5bf8 <menu()+0x1c54>)
    5926:	f006 fc73 	bl	c210 <usb_serial_write>
    592a:	48b4      	ldr	r0, [pc, #720]	; (5bfc <menu()+0x1c58>)
    592c:	f003 ff20 	bl	9770 <Print::println()>
    5930:	2102      	movs	r1, #2
    5932:	48b1      	ldr	r0, [pc, #708]	; (5bf8 <menu()+0x1c54>)
    5934:	f006 fc6c 	bl	c210 <usb_serial_write>
    5938:	48b0      	ldr	r0, [pc, #704]	; (5bfc <menu()+0x1c58>)
    593a:	f003 ff19 	bl	9770 <Print::println()>
    593e:	2117      	movs	r1, #23
    5940:	48af      	ldr	r0, [pc, #700]	; (5c00 <menu()+0x1c5c>)
    5942:	f006 fc65 	bl	c210 <usb_serial_write>
    5946:	48ad      	ldr	r0, [pc, #692]	; (5bfc <menu()+0x1c58>)
    5948:	f003 ff12 	bl	9770 <Print::println()>
    594c:	e788      	b.n	5860 <menu()+0x18bc>
        menuload = 0;
    594e:	2200      	movs	r2, #0
        incomingByte = 115;
    5950:	2373      	movs	r3, #115	; 0x73
    5952:	4eac      	ldr	r6, [pc, #688]	; (5c04 <menu()+0x1c60>)
        menuload = 0;
    5954:	6022      	str	r2, [r4, #0]
        incomingByte = 115;
    5956:	602b      	str	r3, [r5, #0]
  if (incomingByte == 115 & menuload == 0) {
    5958:	f7fe bc17 	b.w	418a <menu()+0x1e6>
        virtual int available() { return usb_serial_available(); }
    595c:	f006 fc26 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5960:	2800      	cmp	r0, #0
    5962:	f77f aed3 	ble.w	570c <menu()+0x1768>
          settings.DischHys = Serial.parseInt();
    5966:	48a5      	ldr	r0, [pc, #660]	; (5bfc <menu()+0x1c58>)
          settings.DischHys = settings.DischHys / 1000;
    5968:	4ea7      	ldr	r6, [pc, #668]	; (5c08 <menu()+0x1c64>)
          settings.DischHys = Serial.parseInt();
    596a:	f004 f861 	bl	9a30 <Stream::parseInt()>
    596e:	f007 fadb 	bl	cf28 <__aeabi_i2f>
          settings.DischHys = settings.DischHys / 1000;
    5972:	49a6      	ldr	r1, [pc, #664]	; (5c0c <menu()+0x1c68>)
    5974:	f007 fbe0 	bl	d138 <__aeabi_fdiv>
    5978:	f8c6 00cc 	str.w	r0, [r6, #204]	; 0xcc
          incomingByte = 'b';
    597c:	e6e4      	b.n	5748 <menu()+0x17a4>
    597e:	f006 fc15 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5982:	2800      	cmp	r0, #0
    5984:	f77f aec2 	ble.w	570c <menu()+0x1768>
          settings.UnderVSetpoint = Serial.parseInt();
    5988:	489c      	ldr	r0, [pc, #624]	; (5bfc <menu()+0x1c58>)
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    598a:	4e9f      	ldr	r6, [pc, #636]	; (5c08 <menu()+0x1c64>)
          settings.UnderVSetpoint = Serial.parseInt();
    598c:	f004 f850 	bl	9a30 <Stream::parseInt()>
    5990:	f007 faca 	bl	cf28 <__aeabi_i2f>
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    5994:	499d      	ldr	r1, [pc, #628]	; (5c0c <menu()+0x1c68>)
    5996:	f007 fbcf 	bl	d138 <__aeabi_fdiv>
    599a:	6130      	str	r0, [r6, #16]
          incomingByte = 'b';
    599c:	e6d4      	b.n	5748 <menu()+0x17a4>
    599e:	f006 fc05 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    59a2:	2800      	cmp	r0, #0
    59a4:	f77f aeb2 	ble.w	570c <menu()+0x1768>
          settings.Pstrings = Serial.parseInt();
    59a8:	4894      	ldr	r0, [pc, #592]	; (5bfc <menu()+0x1c58>)
    59aa:	4e97      	ldr	r6, [pc, #604]	; (5c08 <menu()+0x1c64>)
    59ac:	f004 f840 	bl	9a30 <Stream::parseInt()>
          menuload = 1;
    59b0:	2301      	movs	r3, #1
          settings.Pstrings = Serial.parseInt();
    59b2:	4601      	mov	r1, r0
          menuload = 1;
    59b4:	6023      	str	r3, [r4, #0]
          bms.setPstrings(settings.Pstrings);
    59b6:	4896      	ldr	r0, [pc, #600]	; (5c10 <menu()+0x1c6c>)
          settings.Pstrings = Serial.parseInt();
    59b8:	65b1      	str	r1, [r6, #88]	; 0x58
          incomingByte = 'b';
    59ba:	2362      	movs	r3, #98	; 0x62
    59bc:	602b      	str	r3, [r5, #0]
          bms.setPstrings(settings.Pstrings);
    59be:	f7fc f807 	bl	19d0 <BMSModuleManager::setPstrings(int)>
  if (menuload == 1) {
    59c2:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    59c4:	6828      	ldr	r0, [r5, #0]
    59c6:	e6a3      	b.n	5710 <menu()+0x176c>
    59c8:	f006 fbf0 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    59cc:	2800      	cmp	r0, #0
    59ce:	f77f ae9d 	ble.w	570c <menu()+0x1768>
          settings.OverVSetpoint = Serial.parseInt();
    59d2:	488a      	ldr	r0, [pc, #552]	; (5bfc <menu()+0x1c58>)
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    59d4:	4e8c      	ldr	r6, [pc, #560]	; (5c08 <menu()+0x1c64>)
          settings.OverVSetpoint = Serial.parseInt();
    59d6:	f004 f82b 	bl	9a30 <Stream::parseInt()>
    59da:	f007 faa5 	bl	cf28 <__aeabi_i2f>
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    59de:	498b      	ldr	r1, [pc, #556]	; (5c0c <menu()+0x1c68>)
    59e0:	f007 fbaa 	bl	d138 <__aeabi_fdiv>
    59e4:	60f0      	str	r0, [r6, #12]
          incomingByte = 'b';
    59e6:	e6af      	b.n	5748 <menu()+0x17a4>
    59e8:	f006 fbe0 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    59ec:	2800      	cmp	r0, #0
    59ee:	f77f ae8d 	ble.w	570c <menu()+0x1768>
          settings.Scells = Serial.parseInt();
    59f2:	4882      	ldr	r0, [pc, #520]	; (5bfc <menu()+0x1c58>)
    59f4:	4e84      	ldr	r6, [pc, #528]	; (5c08 <menu()+0x1c64>)
    59f6:	f004 f81b 	bl	9a30 <Stream::parseInt()>
    59fa:	6570      	str	r0, [r6, #84]	; 0x54
          incomingByte = 'b';
    59fc:	e6a4      	b.n	5748 <menu()+0x17a4>
    59fe:	f006 fbd5 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5a02:	2800      	cmp	r0, #0
    5a04:	f77f ae82 	ble.w	570c <menu()+0x1768>
          settings.DischVsetpoint = Serial.parseInt();
    5a08:	487c      	ldr	r0, [pc, #496]	; (5bfc <menu()+0x1c58>)
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    5a0a:	4e7f      	ldr	r6, [pc, #508]	; (5c08 <menu()+0x1c64>)
          settings.DischVsetpoint = Serial.parseInt();
    5a0c:	f004 f810 	bl	9a30 <Stream::parseInt()>
    5a10:	f007 fa8a 	bl	cf28 <__aeabi_i2f>
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    5a14:	497d      	ldr	r1, [pc, #500]	; (5c0c <menu()+0x1c68>)
    5a16:	f007 fb8f 	bl	d138 <__aeabi_fdiv>
    5a1a:	61b0      	str	r0, [r6, #24]
          incomingByte = 'b';
    5a1c:	e694      	b.n	5748 <menu()+0x17a4>
    5a1e:	f006 fbc5 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5a22:	2800      	cmp	r0, #0
    5a24:	f77f ae72 	ble.w	570c <menu()+0x1768>
          settings.discurrentmax = Serial.parseInt() * 10;
    5a28:	4874      	ldr	r0, [pc, #464]	; (5bfc <menu()+0x1c58>)
    5a2a:	4e77      	ldr	r6, [pc, #476]	; (5c08 <menu()+0x1c64>)
    5a2c:	f004 f800 	bl	9a30 <Stream::parseInt()>
    5a30:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5a34:	0040      	lsls	r0, r0, #1
    5a36:	66b0      	str	r0, [r6, #104]	; 0x68
          incomingByte = 'b';
    5a38:	e686      	b.n	5748 <menu()+0x17a4>
    5a3a:	f006 fbb7 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5a3e:	2800      	cmp	r0, #0
    5a40:	f77f ae64 	ble.w	570c <menu()+0x1768>
          settings.CAP = Serial.parseInt();
    5a44:	486d      	ldr	r0, [pc, #436]	; (5bfc <menu()+0x1c58>)
    5a46:	4e70      	ldr	r6, [pc, #448]	; (5c08 <menu()+0x1c64>)
    5a48:	f003 fff2 	bl	9a30 <Stream::parseInt()>
    5a4c:	65f0      	str	r0, [r6, #92]	; 0x5c
          incomingByte = 'b';
    5a4e:	e67b      	b.n	5748 <menu()+0x17a4>
    5a50:	f006 fbac 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5a54:	2800      	cmp	r0, #0
    5a56:	f77f ae59 	ble.w	570c <menu()+0x1768>
          settings.balanceHyst = Serial.parseInt();
    5a5a:	4868      	ldr	r0, [pc, #416]	; (5bfc <menu()+0x1c58>)
          settings.balanceHyst = settings.balanceHyst / 1000;
    5a5c:	4e6a      	ldr	r6, [pc, #424]	; (5c08 <menu()+0x1c64>)
          settings.balanceHyst = Serial.parseInt();
    5a5e:	f003 ffe7 	bl	9a30 <Stream::parseInt()>
    5a62:	f007 fa61 	bl	cf28 <__aeabi_i2f>
          settings.balanceHyst = settings.balanceHyst / 1000;
    5a66:	4969      	ldr	r1, [pc, #420]	; (5c0c <menu()+0x1c68>)
    5a68:	f007 fb66 	bl	d138 <__aeabi_fdiv>
          menuload = 1;
    5a6c:	2301      	movs	r3, #1
          settings.balanceHyst = settings.balanceHyst / 1000;
    5a6e:	4601      	mov	r1, r0
    5a70:	64f0      	str	r0, [r6, #76]	; 0x4c
          bms.setBalanceHyst(settings.balanceHyst);
    5a72:	4867      	ldr	r0, [pc, #412]	; (5c10 <menu()+0x1c6c>)
          menuload = 1;
    5a74:	6023      	str	r3, [r4, #0]
          bms.setBalanceHyst(settings.balanceHyst);
    5a76:	f7fb f9c3 	bl	e00 <BMSModuleManager::setBalanceHyst(float)>
  if (menuload == 1) {
    5a7a:	6823      	ldr	r3, [r4, #0]
          incomingByte = 'b';
    5a7c:	2262      	movs	r2, #98	; 0x62
  if (menuload == 1) {
    5a7e:	2b01      	cmp	r3, #1
          incomingByte = 'b';
    5a80:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    5a82:	f47e aaf5 	bne.w	4070 <menu()+0xcc>
    5a86:	f7ff bbe1 	b.w	524c <menu()+0x12a8>
    5a8a:	f006 fb8f 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5a8e:	2800      	cmp	r0, #0
    5a90:	f77f ae3c 	ble.w	570c <menu()+0x1768>
          settings.balanceVoltage = Serial.parseInt();
    5a94:	4859      	ldr	r0, [pc, #356]	; (5bfc <menu()+0x1c58>)
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    5a96:	4e5c      	ldr	r6, [pc, #368]	; (5c08 <menu()+0x1c64>)
          settings.balanceVoltage = Serial.parseInt();
    5a98:	f003 ffca 	bl	9a30 <Stream::parseInt()>
    5a9c:	f007 fa44 	bl	cf28 <__aeabi_i2f>
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    5aa0:	495a      	ldr	r1, [pc, #360]	; (5c0c <menu()+0x1c68>)
    5aa2:	f007 fb49 	bl	d138 <__aeabi_fdiv>
    5aa6:	64b0      	str	r0, [r6, #72]	; 0x48
          incomingByte = 'b';
    5aa8:	e64e      	b.n	5748 <menu()+0x17a4>
    5aaa:	f006 fb7f 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5aae:	2800      	cmp	r0, #0
    5ab0:	f77f ae2c 	ble.w	570c <menu()+0x1768>
          settings.UnderTSetpoint = Serial.parseInt();
    5ab4:	4851      	ldr	r0, [pc, #324]	; (5bfc <menu()+0x1c58>)
    5ab6:	4e54      	ldr	r6, [pc, #336]	; (5c08 <menu()+0x1c64>)
    5ab8:	f003 ffba 	bl	9a30 <Stream::parseInt()>
    5abc:	f007 fa34 	bl	cf28 <__aeabi_i2f>
    5ac0:	62f0      	str	r0, [r6, #44]	; 0x2c
          incomingByte = 'b';
    5ac2:	e641      	b.n	5748 <menu()+0x17a4>
    5ac4:	f006 fb72 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5ac8:	2800      	cmp	r0, #0
    5aca:	f77f ae1f 	ble.w	570c <menu()+0x1768>
          settings.OverTSetpoint = Serial.parseInt();
    5ace:	484b      	ldr	r0, [pc, #300]	; (5bfc <menu()+0x1c58>)
    5ad0:	4e4d      	ldr	r6, [pc, #308]	; (5c08 <menu()+0x1c64>)
    5ad2:	f003 ffad 	bl	9a30 <Stream::parseInt()>
    5ad6:	f007 fa27 	bl	cf28 <__aeabi_i2f>
    5ada:	62b0      	str	r0, [r6, #40]	; 0x28
          incomingByte = 'b';
    5adc:	e634      	b.n	5748 <menu()+0x17a4>
    5ade:	f006 fb65 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5ae2:	2800      	cmp	r0, #0
    5ae4:	f77f ae12 	ble.w	570c <menu()+0x1768>
          settings.DisTSetpoint = Serial.parseInt();
    5ae8:	4844      	ldr	r0, [pc, #272]	; (5bfc <menu()+0x1c58>)
    5aea:	4e47      	ldr	r6, [pc, #284]	; (5c08 <menu()+0x1c64>)
    5aec:	f003 ffa0 	bl	9a30 <Stream::parseInt()>
    5af0:	f007 fa1a 	bl	cf28 <__aeabi_i2f>
    5af4:	6370      	str	r0, [r6, #52]	; 0x34
          incomingByte = 'b';
    5af6:	e627      	b.n	5748 <menu()+0x17a4>
          settings.ChargeHys = Serial.parseInt();
    5af8:	4840      	ldr	r0, [pc, #256]	; (5bfc <menu()+0x1c58>)
          settings.ChargeHys = settings.ChargeHys / 1000;
    5afa:	4e43      	ldr	r6, [pc, #268]	; (5c08 <menu()+0x1c64>)
          settings.ChargeHys = Serial.parseInt();
    5afc:	f003 ff98 	bl	9a30 <Stream::parseInt()>
    5b00:	f007 fa12 	bl	cf28 <__aeabi_i2f>
          settings.ChargeHys = settings.ChargeHys / 1000;
    5b04:	4941      	ldr	r1, [pc, #260]	; (5c0c <menu()+0x1c68>)
    5b06:	f007 fb17 	bl	d138 <__aeabi_fdiv>
          menuload = 1;
    5b0a:	2301      	movs	r3, #1
    5b0c:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    5b0e:	2365      	movs	r3, #101	; 0x65
          settings.ChargeHys = settings.ChargeHys / 1000;
    5b10:	61f0      	str	r0, [r6, #28]
          incomingByte = 'e';
    5b12:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5b14:	f7ff b985 	b.w	4e22 <menu()+0xe7e>
          debugdigits = Serial.parseInt();
    5b18:	4838      	ldr	r0, [pc, #224]	; (5bfc <menu()+0x1c58>)
    5b1a:	f003 ff89 	bl	9a30 <Stream::parseInt()>
    5b1e:	4b3d      	ldr	r3, [pc, #244]	; (5c14 <menu()+0x1c70>)
    5b20:	6018      	str	r0, [r3, #0]
    5b22:	f7fe bee7 	b.w	48f4 <menu()+0x950>
          settings.ncur = Serial.parseInt();
    5b26:	4835      	ldr	r0, [pc, #212]	; (5bfc <menu()+0x1c58>)
    5b28:	4e37      	ldr	r6, [pc, #220]	; (5c08 <menu()+0x1c64>)
    5b2a:	f003 ff81 	bl	9a30 <Stream::parseInt()>
    5b2e:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
    5b32:	f7fe bfa3 	b.w	4a7c <menu()+0xad8>
          contctrl = 0;
    5b36:	4b38      	ldr	r3, [pc, #224]	; (5c18 <menu()+0x1c74>)
    5b38:	2600      	movs	r6, #0
          digitalWrite(OUT1, LOW);
    5b3a:	200b      	movs	r0, #11
    5b3c:	4631      	mov	r1, r6
          contctrl = 0;
    5b3e:	601e      	str	r6, [r3, #0]
          digitalWrite(OUT1, LOW);
    5b40:	f004 fcf2 	bl	a528 <digitalWrite>
          digitalWrite(OUT2, LOW);
    5b44:	4631      	mov	r1, r6
    5b46:	200c      	movs	r0, #12
    5b48:	f004 fcee 	bl	a528 <digitalWrite>
          digitalWrite(OUT3, LOW);
    5b4c:	4631      	mov	r1, r6
    5b4e:	2014      	movs	r0, #20
    5b50:	f004 fcea 	bl	a528 <digitalWrite>
          digitalWrite(OUT4, LOW);
    5b54:	4631      	mov	r1, r6
    5b56:	2015      	movs	r0, #21
    5b58:	f004 fce6 	bl	a528 <digitalWrite>
        incomingByte = 'd';
    5b5c:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    5b5e:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    5b60:	602a      	str	r2, [r5, #0]
        break;
    5b62:	f7fe beb4 	b.w	48ce <menu()+0x92a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5b66:	211e      	movs	r1, #30
    5b68:	482c      	ldr	r0, [pc, #176]	; (5c1c <menu()+0x1c78>)
    5b6a:	f006 fb51 	bl	c210 <usb_serial_write>
    5b6e:	4823      	ldr	r0, [pc, #140]	; (5bfc <menu()+0x1c58>)
    5b70:	f003 fdfe 	bl	9770 <Print::println()>
    5b74:	f7fe bf0c 	b.w	4990 <menu()+0x9ec>
    5b78:	2120      	movs	r1, #32
    5b7a:	4829      	ldr	r0, [pc, #164]	; (5c20 <menu()+0x1c7c>)
    5b7c:	f006 fb48 	bl	c210 <usb_serial_write>
    5b80:	481e      	ldr	r0, [pc, #120]	; (5bfc <menu()+0x1c58>)
    5b82:	f003 fdf5 	bl	9770 <Print::println()>
    5b86:	f7fe bf03 	b.w	4990 <menu()+0x9ec>
    5b8a:	2117      	movs	r1, #23
    5b8c:	4825      	ldr	r0, [pc, #148]	; (5c24 <menu()+0x1c80>)
    5b8e:	f006 fb3f 	bl	c210 <usb_serial_write>
    5b92:	481a      	ldr	r0, [pc, #104]	; (5bfc <menu()+0x1c58>)
    5b94:	f003 fdec 	bl	9770 <Print::println()>
    5b98:	f7fe befa 	b.w	4990 <menu()+0x9ec>
    5b9c:	4822      	ldr	r0, [pc, #136]	; (5c28 <menu()+0x1c84>)
    5b9e:	2117      	movs	r1, #23
    5ba0:	f006 fb36 	bl	c210 <usb_serial_write>
          if (settings.curcan == LemCAB300) {
    5ba4:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
    5ba8:	2b01      	cmp	r3, #1
    5baa:	d047      	beq.n	5c3c <menu()+0x1c98>
          } else if (settings.curcan == LemCAB500) {
    5bac:	2b02      	cmp	r3, #2
    5bae:	d04e      	beq.n	5c4e <menu()+0x1caa>
          } else if (settings.curcan == IsaScale) {
    5bb0:	2b03      	cmp	r3, #3
    5bb2:	d055      	beq.n	5c60 <menu()+0x1cbc>
          } else if (settings.curcan == VictronLynx) {
    5bb4:	2b04      	cmp	r3, #4
    5bb6:	f47e af18 	bne.w	49ea <menu()+0xa46>
            SERIALCONSOLE.println(" Victron Lynx VE.CAN Shunt");
    5bba:	491c      	ldr	r1, [pc, #112]	; (5c2c <menu()+0x1c88>)
    5bbc:	480f      	ldr	r0, [pc, #60]	; (5bfc <menu()+0x1c58>)
    5bbe:	f7fc fc65 	bl	248c <Print::println(char const*) [clone .isra.0]>
    5bc2:	f7fe bf12 	b.w	49ea <menu()+0xa46>
    5bc6:	481a      	ldr	r0, [pc, #104]	; (5c30 <menu()+0x1c8c>)
    5bc8:	2120      	movs	r1, #32
    5bca:	f006 fb21 	bl	c210 <usb_serial_write>
          if (settings.tripcont == 0) {
    5bce:	f896 30c9 	ldrb.w	r3, [r6, #201]	; 0xc9
    5bd2:	b943      	cbnz	r3, 5be6 <menu()+0x1c42>
    5bd4:	210a      	movs	r1, #10
    5bd6:	4817      	ldr	r0, [pc, #92]	; (5c34 <menu()+0x1c90>)
    5bd8:	f006 fb1a 	bl	c210 <usb_serial_write>
    5bdc:	4807      	ldr	r0, [pc, #28]	; (5bfc <menu()+0x1c58>)
    5bde:	f003 fdc7 	bl	9770 <Print::println()>
    5be2:	f7ff b8d7 	b.w	4d94 <menu()+0xdf0>
    5be6:	211c      	movs	r1, #28
    5be8:	4813      	ldr	r0, [pc, #76]	; (5c38 <menu()+0x1c94>)
    5bea:	f006 fb11 	bl	c210 <usb_serial_write>
    5bee:	4803      	ldr	r0, [pc, #12]	; (5bfc <menu()+0x1c58>)
    5bf0:	f003 fdbe 	bl	9770 <Print::println()>
    5bf4:	f7ff b8ce 	b.w	4d94 <menu()+0xdf0>
    5bf8:	00015030 	.word	0x00015030
    5bfc:	1fff89fc 	.word	0x1fff89fc
    5c00:	000144f0 	.word	0x000144f0
    5c04:	1fff884c 	.word	0x1fff884c
    5c08:	1fffd0d8 	.word	0x1fffd0d8
    5c0c:	447a0000 	.word	0x447a0000
    5c10:	1fff91f0 	.word	0x1fff91f0
    5c14:	1fff8850 	.word	0x1fff8850
    5c18:	1fffcfb0 	.word	0x1fffcfb0
    5c1c:	00014a3c 	.word	0x00014a3c
    5c20:	00014a5c 	.word	0x00014a5c
    5c24:	00014a80 	.word	0x00014a80
    5c28:	00014b8c 	.word	0x00014b8c
    5c2c:	00014be8 	.word	0x00014be8
    5c30:	000148ac 	.word	0x000148ac
    5c34:	000148d0 	.word	0x000148d0
    5c38:	000148dc 	.word	0x000148dc
    5c3c:	2117      	movs	r1, #23
    5c3e:	4827      	ldr	r0, [pc, #156]	; (5cdc <menu()+0x1d38>)
    5c40:	f006 fae6 	bl	c210 <usb_serial_write>
    5c44:	4826      	ldr	r0, [pc, #152]	; (5ce0 <menu()+0x1d3c>)
    5c46:	f003 fd93 	bl	9770 <Print::println()>
    5c4a:	f7fe bece 	b.w	49ea <menu()+0xa46>
    5c4e:	2114      	movs	r1, #20
    5c50:	4824      	ldr	r0, [pc, #144]	; (5ce4 <menu()+0x1d40>)
    5c52:	f006 fadd 	bl	c210 <usb_serial_write>
    5c56:	4822      	ldr	r0, [pc, #136]	; (5ce0 <menu()+0x1d3c>)
    5c58:	f003 fd8a 	bl	9770 <Print::println()>
    5c5c:	f7fe bec5 	b.w	49ea <menu()+0xa46>
            SERIALCONSOLE.println(" IsaScale IVT-S ");
    5c60:	4921      	ldr	r1, [pc, #132]	; (5ce8 <menu()+0x1d44>)
    5c62:	481f      	ldr	r0, [pc, #124]	; (5ce0 <menu()+0x1d3c>)
    5c64:	f7fc fc12 	bl	248c <Print::println(char const*) [clone .isra.0]>
    5c68:	f7fe bebf 	b.w	49ea <menu()+0xa46>
    5c6c:	4e1f      	ldr	r6, [pc, #124]	; (5cec <menu()+0x1d48>)
    5c6e:	f7fe bb30 	b.w	42d2 <menu()+0x32e>
    5c72:	4e1e      	ldr	r6, [pc, #120]	; (5cec <menu()+0x1d48>)
    5c74:	f7ff b8d5 	b.w	4e22 <menu()+0xe7e>
  if (menuload == 3) {
    5c78:	2b03      	cmp	r3, #3
    5c7a:	f43f adfa 	beq.w	5872 <menu()+0x18ce>
  if (menuload == 1) {
    5c7e:	2b01      	cmp	r3, #1
    5c80:	f47e a9ed 	bne.w	405e <menu()+0xba>
    5c84:	4e19      	ldr	r6, [pc, #100]	; (5cec <menu()+0x1d48>)
    5c86:	f7fe be4c 	b.w	4922 <menu()+0x97e>
    5c8a:	4e18      	ldr	r6, [pc, #96]	; (5cec <menu()+0x1d48>)
    5c8c:	f7ff b81f 	b.w	4cce <menu()+0xd2a>
        virtual int available() { return usb_serial_available(); }
    5c90:	f006 fa8c 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5c94:	2800      	cmp	r0, #0
    5c96:	f77e af70 	ble.w	4b7a <menu()+0xbd6>
          settings.Pretime = Serial.parseInt();
    5c9a:	4811      	ldr	r0, [pc, #68]	; (5ce0 <menu()+0x1d3c>)
    5c9c:	4e13      	ldr	r6, [pc, #76]	; (5cec <menu()+0x1d48>)
    5c9e:	f003 fec7 	bl	9a30 <Stream::parseInt()>
          menuload = 1;
    5ca2:	2301      	movs	r3, #1
    5ca4:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    5ca6:	236b      	movs	r3, #107	; 0x6b
          settings.Pretime = Serial.parseInt();
    5ca8:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
          incomingByte = 'k';
    5cac:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5cae:	f7ff b80e 	b.w	4cce <menu()+0xd2a>
    5cb2:	f006 fa7b 	bl	c1ac <usb_serial_available>
        if (Serial.available() > 0) {
    5cb6:	2800      	cmp	r0, #0
    5cb8:	f77e ab71 	ble.w	439e <menu()+0x3fa>
          settings.WarnOff = Serial.parseInt();
    5cbc:	4808      	ldr	r0, [pc, #32]	; (5ce0 <menu()+0x1d3c>)
          settings.WarnOff = settings.WarnOff * 0.001;
    5cbe:	4e0b      	ldr	r6, [pc, #44]	; (5cec <menu()+0x1d48>)
          settings.WarnOff = Serial.parseInt();
    5cc0:	f003 feb6 	bl	9a30 <Stream::parseInt()>
    5cc4:	f007 f930 	bl	cf28 <__aeabi_i2f>
          settings.WarnOff = settings.WarnOff * 0.001;
    5cc8:	4909      	ldr	r1, [pc, #36]	; (5cf0 <menu()+0x1d4c>)
    5cca:	f007 f981 	bl	cfd0 <__aeabi_fmul>
          menuload = 1;
    5cce:	2301      	movs	r3, #1
    5cd0:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    5cd2:	2361      	movs	r3, #97	; 0x61
          settings.WarnOff = settings.WarnOff * 0.001;
    5cd4:	6270      	str	r0, [r6, #36]	; 0x24
          incomingByte = 'a';
    5cd6:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5cd8:	f7fe bc2c 	b.w	4534 <menu()+0x590>
    5cdc:	00014ba4 	.word	0x00014ba4
    5ce0:	1fff89fc 	.word	0x1fff89fc
    5ce4:	00014bbc 	.word	0x00014bbc
    5ce8:	00014bd4 	.word	0x00014bd4
    5cec:	1fffd0d8 	.word	0x1fffd0d8
    5cf0:	3a83126f 	.word	0x3a83126f

00005cf4 <CAB300()>:
void CAB300() {
    5cf4:	b538      	push	{r3, r4, r5, lr}
    5cf6:	4c18      	ldr	r4, [pc, #96]	; (5d58 <CAB300()+0x64>)
    5cf8:	4b18      	ldr	r3, [pc, #96]	; (5d5c <CAB300()+0x68>)
    5cfa:	6822      	ldr	r2, [r4, #0]
    5cfc:	1d18      	adds	r0, r3, #4
    inbox = (inbox << 8) | inMsg.buf[i];
    5cfe:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for (int i = 0; i < 4; i++) {
    5d02:	4298      	cmp	r0, r3
    inbox = (inbox << 8) | inMsg.buf[i];
    5d04:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  for (int i = 0; i < 4; i++) {
    5d08:	d1f9      	bne.n	5cfe <CAB300()+0xa>
  if (settings.cursens == Canbus) {
    5d0a:	4b15      	ldr	r3, [pc, #84]	; (5d60 <CAB300()+0x6c>)
    5d0c:	4d15      	ldr	r5, [pc, #84]	; (5d64 <CAB300()+0x70>)
    5d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    5d12:	6022      	str	r2, [r4, #0]
    CANmilliamps = (0x80000000 - CANmilliamps) * -1;
    5d14:	f102 4000 	add.w	r0, r2, #2147483648	; 0x80000000
  if (settings.cursens == Canbus) {
    5d18:	2b02      	cmp	r3, #2
    5d1a:	6028      	str	r0, [r5, #0]
    5d1c:	d004      	beq.n	5d28 <CAB300()+0x34>
  if (candebug == 1) {
    5d1e:	4b12      	ldr	r3, [pc, #72]	; (5d68 <CAB300()+0x74>)
    5d20:	681b      	ldr	r3, [r3, #0]
    5d22:	2b01      	cmp	r3, #1
    5d24:	d00a      	beq.n	5d3c <CAB300()+0x48>
}
    5d26:	bd38      	pop	{r3, r4, r5, pc}
    RawCur = CANmilliamps;
    5d28:	f007 f8fe 	bl	cf28 <__aeabi_i2f>
    5d2c:	4c0f      	ldr	r4, [pc, #60]	; (5d6c <CAB300()+0x78>)
    5d2e:	6020      	str	r0, [r4, #0]
    getcurrent();
    5d30:	f7fc ffe0 	bl	2cf4 <getcurrent()>
  if (candebug == 1) {
    5d34:	4b0c      	ldr	r3, [pc, #48]	; (5d68 <CAB300()+0x74>)
    5d36:	681b      	ldr	r3, [r3, #0]
    5d38:	2b01      	cmp	r3, #1
    5d3a:	d1f4      	bne.n	5d26 <CAB300()+0x32>
    Serial.println();
    5d3c:	480c      	ldr	r0, [pc, #48]	; (5d70 <CAB300()+0x7c>)
    5d3e:	f003 fd17 	bl	9770 <Print::println()>
    Serial.print(CANmilliamps);
    5d42:	6829      	ldr	r1, [r5, #0]
    5d44:	480a      	ldr	r0, [pc, #40]	; (5d70 <CAB300()+0x7c>)
    5d46:	f003 fd0b 	bl	9760 <Print::print(long)>
}
    5d4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5d4e:	4809      	ldr	r0, [pc, #36]	; (5d74 <CAB300()+0x80>)
    5d50:	2103      	movs	r1, #3
    5d52:	f006 ba5d 	b.w	c210 <usb_serial_write>
    5d56:	bf00      	nop
    5d58:	1fffcff0 	.word	0x1fffcff0
    5d5c:	1fffcfe7 	.word	0x1fffcfe7
    5d60:	1fffd0d8 	.word	0x1fffd0d8
    5d64:	1fff91a0 	.word	0x1fff91a0
    5d68:	1fffcf38 	.word	0x1fffcf38
    5d6c:	1fff91c0 	.word	0x1fff91c0
    5d70:	1fff89fc 	.word	0x1fff89fc
    5d74:	00014fc0 	.word	0x00014fc0

00005d78 <CAB500()>:
void CAB500() {
    5d78:	b570      	push	{r4, r5, r6, lr}
    inbox = (inbox << 8) | inMsg.buf[i];
    5d7a:	4b1e      	ldr	r3, [pc, #120]	; (5df4 <CAB500()+0x7c>)
  if (candebug == 1) {
    5d7c:	4c1e      	ldr	r4, [pc, #120]	; (5df8 <CAB500()+0x80>)
    inbox = (inbox << 8) | inMsg.buf[i];
    5d7e:	7a59      	ldrb	r1, [r3, #9]
    5d80:	7a9a      	ldrb	r2, [r3, #10]
    5d82:	7adb      	ldrb	r3, [r3, #11]
  CANmilliamps = inbox;
    5d84:	4d1d      	ldr	r5, [pc, #116]	; (5dfc <CAB500()+0x84>)
    inbox = (inbox << 8) | inMsg.buf[i];
    5d86:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5d8a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (candebug == 1) {
    5d8e:	6822      	ldr	r2, [r4, #0]
    5d90:	491b      	ldr	r1, [pc, #108]	; (5e00 <CAB500()+0x88>)
  CANmilliamps = inbox;
    5d92:	602b      	str	r3, [r5, #0]
  if (candebug == 1) {
    5d94:	2a01      	cmp	r2, #1
    5d96:	600b      	str	r3, [r1, #0]
    5d98:	d00c      	beq.n	5db4 <CAB500()+0x3c>
    5d9a:	4618      	mov	r0, r3
  if (settings.cursens == Canbus) {
    5d9c:	4b19      	ldr	r3, [pc, #100]	; (5e04 <CAB500()+0x8c>)
    5d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    CANmilliamps = (0x800000 - CANmilliamps) * -1;
    5da2:	f5a0 0000 	sub.w	r0, r0, #8388608	; 0x800000
  if (settings.cursens == Canbus) {
    5da6:	2b02      	cmp	r3, #2
    5da8:	6028      	str	r0, [r5, #0]
    5daa:	d01b      	beq.n	5de4 <CAB500()+0x6c>
  if (candebug == 1) {
    5dac:	6823      	ldr	r3, [r4, #0]
    5dae:	2b01      	cmp	r3, #1
    5db0:	d00b      	beq.n	5dca <CAB500()+0x52>
}
    5db2:	bd70      	pop	{r4, r5, r6, pc}
    Serial.println();
    5db4:	4814      	ldr	r0, [pc, #80]	; (5e08 <CAB500()+0x90>)
    5db6:	f003 fcdb 	bl	9770 <Print::println()>
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    5dba:	6829      	ldr	r1, [r5, #0]
    5dbc:	4812      	ldr	r0, [pc, #72]	; (5e08 <CAB500()+0x90>)
    5dbe:	2300      	movs	r3, #0
    5dc0:	2210      	movs	r2, #16
    5dc2:	f003 fced 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  if (CANmilliamps > 0x800000) {
    5dc6:	6828      	ldr	r0, [r5, #0]
    5dc8:	e7e8      	b.n	5d9c <CAB500()+0x24>
    Serial.println();
    5dca:	480f      	ldr	r0, [pc, #60]	; (5e08 <CAB500()+0x90>)
    5dcc:	f003 fcd0 	bl	9770 <Print::println()>
    Serial.print(CANmilliamps);
    5dd0:	6829      	ldr	r1, [r5, #0]
    5dd2:	480d      	ldr	r0, [pc, #52]	; (5e08 <CAB500()+0x90>)
    5dd4:	f003 fcc4 	bl	9760 <Print::print(long)>
}
    5dd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5ddc:	480b      	ldr	r0, [pc, #44]	; (5e0c <CAB500()+0x94>)
    5dde:	2103      	movs	r1, #3
    5de0:	f006 ba16 	b.w	c210 <usb_serial_write>
    RawCur = CANmilliamps;
    5de4:	f007 f8a0 	bl	cf28 <__aeabi_i2f>
    5de8:	4e09      	ldr	r6, [pc, #36]	; (5e10 <CAB500()+0x98>)
    5dea:	6030      	str	r0, [r6, #0]
    getcurrent();
    5dec:	f7fc ff82 	bl	2cf4 <getcurrent()>
    5df0:	e7dc      	b.n	5dac <CAB500()+0x34>
    5df2:	bf00      	nop
    5df4:	1fffcfe0 	.word	0x1fffcfe0
    5df8:	1fffcf38 	.word	0x1fffcf38
    5dfc:	1fff91a0 	.word	0x1fff91a0
    5e00:	1fffcff0 	.word	0x1fffcff0
    5e04:	1fffd0d8 	.word	0x1fffd0d8
    5e08:	1fff89fc 	.word	0x1fff89fc
    5e0c:	00014fc0 	.word	0x00014fc0
    5e10:	1fff91c0 	.word	0x1fff91c0

00005e14 <handleVictronLynx()>:
void handleVictronLynx() {
    5e14:	b538      	push	{r3, r4, r5, lr}
  if (inMsg.buf[4] == 0xff && inMsg.buf[3] == 0xff) return;
    5e16:	4b17      	ldr	r3, [pc, #92]	; (5e74 <handleVictronLynx()+0x60>)
    5e18:	7b1a      	ldrb	r2, [r3, #12]
    5e1a:	7adb      	ldrb	r3, [r3, #11]
    5e1c:	ea02 0103 	and.w	r1, r2, r3
    5e20:	29ff      	cmp	r1, #255	; 0xff
    5e22:	d012      	beq.n	5e4a <handleVictronLynx()+0x36>
  current |= inMsg.buf[3];
    5e24:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
  if (settings.cursens == Canbus) {
    5e28:	4b13      	ldr	r3, [pc, #76]	; (5e78 <handleVictronLynx()+0x64>)
  CANmilliamps = current * 100;
    5e2a:	4c14      	ldr	r4, [pc, #80]	; (5e7c <handleVictronLynx()+0x68>)
  if (settings.cursens == Canbus) {
    5e2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  CANmilliamps = current * 100;
    5e30:	b200      	sxth	r0, r0
    5e32:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5e36:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5e3a:	0080      	lsls	r0, r0, #2
  if (settings.cursens == Canbus) {
    5e3c:	2b02      	cmp	r3, #2
  CANmilliamps = current * 100;
    5e3e:	6020      	str	r0, [r4, #0]
  if (settings.cursens == Canbus) {
    5e40:	d011      	beq.n	5e66 <handleVictronLynx()+0x52>
  if (candebug == 1) {
    5e42:	4b0f      	ldr	r3, [pc, #60]	; (5e80 <handleVictronLynx()+0x6c>)
    5e44:	681b      	ldr	r3, [r3, #0]
    5e46:	2b01      	cmp	r3, #1
    5e48:	d000      	beq.n	5e4c <handleVictronLynx()+0x38>
}
    5e4a:	bd38      	pop	{r3, r4, r5, pc}
    Serial.println();
    5e4c:	480d      	ldr	r0, [pc, #52]	; (5e84 <handleVictronLynx()+0x70>)
    5e4e:	f003 fc8f 	bl	9770 <Print::println()>
    Serial.print(CANmilliamps);
    5e52:	6821      	ldr	r1, [r4, #0]
    5e54:	480b      	ldr	r0, [pc, #44]	; (5e84 <handleVictronLynx()+0x70>)
    5e56:	f003 fc83 	bl	9760 <Print::print(long)>
}
    5e5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5e5e:	480a      	ldr	r0, [pc, #40]	; (5e88 <handleVictronLynx()+0x74>)
    5e60:	2103      	movs	r1, #3
    5e62:	f006 b9d5 	b.w	c210 <usb_serial_write>
    RawCur = CANmilliamps;
    5e66:	f007 f85f 	bl	cf28 <__aeabi_i2f>
    5e6a:	4d08      	ldr	r5, [pc, #32]	; (5e8c <handleVictronLynx()+0x78>)
    5e6c:	6028      	str	r0, [r5, #0]
    getcurrent();
    5e6e:	f7fc ff41 	bl	2cf4 <getcurrent()>
    5e72:	e7e6      	b.n	5e42 <handleVictronLynx()+0x2e>
    5e74:	1fffcfe0 	.word	0x1fffcfe0
    5e78:	1fffd0d8 	.word	0x1fffd0d8
    5e7c:	1fff91a0 	.word	0x1fff91a0
    5e80:	1fffcf38 	.word	0x1fffcf38
    5e84:	1fff89fc 	.word	0x1fff89fc
    5e88:	00014fc0 	.word	0x00014fc0
    5e8c:	1fff91c0 	.word	0x1fff91c0

00005e90 <canread()>:
void canread() {
    5e90:	b5f0      	push	{r4, r5, r6, r7, lr}
  Can0.read(inMsg);
    5e92:	4c85      	ldr	r4, [pc, #532]	; (60a8 <canread()+0x218>)
  if (settings.cursens == Canbus) {
    5e94:	4d85      	ldr	r5, [pc, #532]	; (60ac <canread()+0x21c>)
  Can0.read(inMsg);
    5e96:	4886      	ldr	r0, [pc, #536]	; (60b0 <canread()+0x220>)
void canread() {
    5e98:	b083      	sub	sp, #12
  Can0.read(inMsg);
    5e9a:	4621      	mov	r1, r4
    5e9c:	f002 fadc 	bl	8458 <FlexCAN::read(CAN_message_t&)>
  if (settings.cursens == Canbus) {
    5ea0:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    5ea4:	2b02      	cmp	r3, #2
    5ea6:	d033      	beq.n	5f10 <canread()+0x80>
  if (inMsg.id < 0x300)  //do VW BMS magic if ids are ones identified to be modules
    5ea8:	6823      	ldr	r3, [r4, #0]
    if (candebug == 1) {
    5eaa:	4d82      	ldr	r5, [pc, #520]	; (60b4 <canread()+0x224>)
  if (inMsg.id < 0x300)  //do VW BMS magic if ids are ones identified to be modules
    5eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    5eb0:	d208      	bcs.n	5ec4 <canread()+0x34>
    if (candebug == 1) {
    5eb2:	682a      	ldr	r2, [r5, #0]
      bms.decodecan(inMsg, 1);  //do VW BMS if ids are ones identified to be modules
    5eb4:	497c      	ldr	r1, [pc, #496]	; (60a8 <canread()+0x218>)
    5eb6:	4880      	ldr	r0, [pc, #512]	; (60b8 <canread()+0x228>)
    if (candebug == 1) {
    5eb8:	2a01      	cmp	r2, #1
      bms.decodecan(inMsg, 0);  //do VW BMS if ids are ones identified to be modules
    5eba:	bf18      	it	ne
    5ebc:	2200      	movne	r2, #0
    5ebe:	f7fb fb11 	bl	14e4 <BMSModuleManager::decodecan(CAN_message_t&, int)>
  if ((inMsg.id & 0x1FFFFFFF) < 0x1A555440 && (inMsg.id & 0x1FFFFFFF) > 0x1A555400)  // Determine if ID is Temperature CAN-ID
    5ec2:	6823      	ldr	r3, [r4, #0]
    5ec4:	4a7d      	ldr	r2, [pc, #500]	; (60bc <canread()+0x22c>)
    5ec6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    5eca:	441a      	add	r2, r3
    5ecc:	2a3e      	cmp	r2, #62	; 0x3e
    5ece:	d80c      	bhi.n	5eea <canread()+0x5a>
    if (candebug == 1) {
    5ed0:	682b      	ldr	r3, [r5, #0]
    5ed2:	2b01      	cmp	r3, #1
    5ed4:	f000 808f 	beq.w	5ff6 <canread()+0x166>
      bms.decodetemp(inMsg, 0, 1);
    5ed8:	2301      	movs	r3, #1
    5eda:	4973      	ldr	r1, [pc, #460]	; (60a8 <canread()+0x218>)
    5edc:	4876      	ldr	r0, [pc, #472]	; (60b8 <canread()+0x228>)
    5ede:	2200      	movs	r2, #0
    5ee0:	f7fb fa8e 	bl	1400 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>
  if ((inMsg.id & 0x1FFFFFFF) < 0x1A5555FF && (inMsg.id & 0x1FFFFFFF) > 0x1A5555EF)  // Determine if ID is Temperature CAN-ID FOR MEB
    5ee4:	6823      	ldr	r3, [r4, #0]
    5ee6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    5eea:	4a75      	ldr	r2, [pc, #468]	; (60c0 <canread()+0x230>)
    5eec:	441a      	add	r2, r3
    5eee:	2a0e      	cmp	r2, #14
    5ef0:	d809      	bhi.n	5f06 <canread()+0x76>
    if (candebug == 1) {
    5ef2:	682a      	ldr	r2, [r5, #0]
      bms.decodetemp(inMsg, 1, 2);
    5ef4:	496c      	ldr	r1, [pc, #432]	; (60a8 <canread()+0x218>)
    5ef6:	4870      	ldr	r0, [pc, #448]	; (60b8 <canread()+0x228>)
    if (candebug == 1) {
    5ef8:	2a01      	cmp	r2, #1
      bms.decodetemp(inMsg, 1, 2);
    5efa:	f04f 0302 	mov.w	r3, #2
      bms.decodetemp(inMsg, 0, 2);
    5efe:	bf18      	it	ne
    5f00:	2200      	movne	r2, #0
    5f02:	f7fb fa7d 	bl	1400 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>
  if (candebug == 1) {
    5f06:	682b      	ldr	r3, [r5, #0]
    5f08:	2b01      	cmp	r3, #1
    5f0a:	d038      	beq.n	5f7e <canread()+0xee>
}
    5f0c:	b003      	add	sp, #12
    5f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (settings.curcan == 1) {
    5f10:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    5f14:	6823      	ldr	r3, [r4, #0]
    if (settings.curcan == 1) {
    5f16:	2a01      	cmp	r2, #1
    5f18:	f000 8095 	beq.w	6046 <canread()+0x1b6>
    if (settings.curcan == 2) {
    5f1c:	2a02      	cmp	r2, #2
    5f1e:	d073      	beq.n	6008 <canread()+0x178>
    if (settings.curcan == 3) {
    5f20:	2a03      	cmp	r2, #3
    5f22:	d121      	bne.n	5f68 <canread()+0xd8>
      switch (inMsg.id) {
    5f24:	f240 5222 	movw	r2, #1314	; 0x522
    5f28:	4293      	cmp	r3, r2
    5f2a:	f000 80b3 	beq.w	6094 <canread()+0x204>
    5f2e:	f240 5223 	movw	r2, #1315	; 0x523
    5f32:	4293      	cmp	r3, r2
    5f34:	f000 80a5 	beq.w	6082 <canread()+0x1f2>
    5f38:	f240 5221 	movw	r2, #1313	; 0x521
    5f3c:	4293      	cmp	r3, r2
    5f3e:	d1b4      	bne.n	5eaa <canread()+0x1a>
          CANmilliamps = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    5f40:	89a2      	ldrh	r2, [r4, #12]
    5f42:	8960      	ldrh	r0, [r4, #10]
    5f44:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    5f48:	4a5e      	ldr	r2, [pc, #376]	; (60c4 <canread()+0x234>)
    5f4a:	ba00      	rev	r0, r0
    5f4c:	6010      	str	r0, [r2, #0]
          if (settings.cursens == Canbus) {
    5f4e:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    5f52:	2a02      	cmp	r2, #2
    5f54:	d111      	bne.n	5f7a <canread()+0xea>
            RawCur = CANmilliamps;
    5f56:	f006 ffe7 	bl	cf28 <__aeabi_i2f>
    5f5a:	4e5b      	ldr	r6, [pc, #364]	; (60c8 <canread()+0x238>)
    5f5c:	6030      	str	r0, [r6, #0]
            getcurrent();
    5f5e:	f7fc fec9 	bl	2cf4 <getcurrent()>
    if (settings.curcan == 4) {
    5f62:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    5f66:	6823      	ldr	r3, [r4, #0]
    if (settings.curcan == 4) {
    5f68:	2a04      	cmp	r2, #4
    5f6a:	d19e      	bne.n	5eaa <canread()+0x1a>
  if ((canId & 0x10000000) == 0x10000000) {
    5f6c:	00d9      	lsls	r1, r3, #3
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    5f6e:	4a57      	ldr	r2, [pc, #348]	; (60cc <canread()+0x23c>)
  if ((canId & 0x10000000) == 0x10000000) {
    5f70:	d578      	bpl.n	6064 <canread()+0x1d4>
    return (canId & 0x03FFFF00) >> 8;
    5f72:	f3c3 2111 	ubfx	r1, r3, #8, #18
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    5f76:	4291      	cmp	r1, r2
    5f78:	d077      	beq.n	606a <canread()+0x1da>
    5f7a:	4d4e      	ldr	r5, [pc, #312]	; (60b4 <canread()+0x224>)
    5f7c:	e7a2      	b.n	5ec4 <canread()+0x34>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5f7e:	4b54      	ldr	r3, [pc, #336]	; (60d0 <canread()+0x240>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    5f80:	4854      	ldr	r0, [pc, #336]	; (60d4 <canread()+0x244>)
    5f82:	681b      	ldr	r3, [r3, #0]
    5f84:	9301      	str	r3, [sp, #4]
	return ret;
    5f86:	9901      	ldr	r1, [sp, #4]
    5f88:	2300      	movs	r3, #0
    5f8a:	220a      	movs	r2, #10
    5f8c:	f003 fc08 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    5f90:	6822      	ldr	r2, [r4, #0]
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    5f92:	79e3      	ldrb	r3, [r4, #7]
      sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    5f94:	4850      	ldr	r0, [pc, #320]	; (60d8 <canread()+0x248>)
    if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    5f96:	2a00      	cmp	r2, #0
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    5f98:	bfb6      	itet	lt
    5f9a:	4950      	ldrlt	r1, [pc, #320]	; (60dc <canread()+0x24c>)
      sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    5f9c:	4950      	ldrge	r1, [pc, #320]	; (60e0 <canread()+0x250>)
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    5f9e:	f022 4260 	biclt.w	r2, r2, #3758096384	; 0xe0000000
      sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    5fa2:	f007 ffb5 	bl	df10 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    5fa6:	484c      	ldr	r0, [pc, #304]	; (60d8 <canread()+0x248>)
    5fa8:	f008 f9ca 	bl	e340 <strlen>
    5fac:	4601      	mov	r1, r0
    5fae:	484a      	ldr	r0, [pc, #296]	; (60d8 <canread()+0x248>)
    5fb0:	f006 f92e 	bl	c210 <usb_serial_write>
    if ((inMsg.id & 0x40000000) == 0x40000000) {  // Determine if message is a remote request frame.
    5fb4:	6825      	ldr	r5, [r4, #0]
    5fb6:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    5fba:	d131      	bne.n	6020 <canread()+0x190>
      for (byte i = 0; i < inMsg.len; i++) {
    5fbc:	79e3      	ldrb	r3, [r4, #7]
    5fbe:	b1a3      	cbz	r3, 5fea <canread()+0x15a>
        sprintf(msgString, ", 0x%.2X", inMsg.buf[i]);
    5fc0:	4f48      	ldr	r7, [pc, #288]	; (60e4 <canread()+0x254>)
    5fc2:	4e45      	ldr	r6, [pc, #276]	; (60d8 <canread()+0x248>)
    5fc4:	462b      	mov	r3, r5
    5fc6:	4423      	add	r3, r4
    5fc8:	4639      	mov	r1, r7
    5fca:	7a1a      	ldrb	r2, [r3, #8]
    5fcc:	4630      	mov	r0, r6
    5fce:	f007 ff9f 	bl	df10 <sprintf>
    5fd2:	4630      	mov	r0, r6
    5fd4:	f008 f9b4 	bl	e340 <strlen>
    5fd8:	4601      	mov	r1, r0
    5fda:	4630      	mov	r0, r6
    5fdc:	f006 f918 	bl	c210 <usb_serial_write>
      for (byte i = 0; i < inMsg.len; i++) {
    5fe0:	3501      	adds	r5, #1
    5fe2:	79e2      	ldrb	r2, [r4, #7]
    5fe4:	b2eb      	uxtb	r3, r5
    5fe6:	429a      	cmp	r2, r3
    5fe8:	d8ed      	bhi.n	5fc6 <canread()+0x136>
    Serial.println();
    5fea:	483a      	ldr	r0, [pc, #232]	; (60d4 <canread()+0x244>)
}
    5fec:	b003      	add	sp, #12
    5fee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Serial.println();
    5ff2:	f003 bbbd 	b.w	9770 <Print::println()>
      bms.decodetemp(inMsg, 1, 1);
    5ff6:	461a      	mov	r2, r3
    5ff8:	492b      	ldr	r1, [pc, #172]	; (60a8 <canread()+0x218>)
    5ffa:	482f      	ldr	r0, [pc, #188]	; (60b8 <canread()+0x228>)
    5ffc:	f7fb fa00 	bl	1400 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>
  if ((inMsg.id & 0x1FFFFFFF) < 0x1A5555FF && (inMsg.id & 0x1FFFFFFF) > 0x1A5555EF)  // Determine if ID is Temperature CAN-ID FOR MEB
    6000:	6823      	ldr	r3, [r4, #0]
    6002:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    6006:	e770      	b.n	5eea <canread()+0x5a>
      switch (inMsg.id) {
    6008:	f46f 7070 	mvn.w	r0, #960	; 0x3c0
    600c:	181a      	adds	r2, r3, r0
    600e:	2a01      	cmp	r2, #1
    6010:	f63f af4b 	bhi.w	5eaa <canread()+0x1a>
          CAB500();
    6014:	f7ff feb0 	bl	5d78 <CAB500()>
    if (settings.curcan == 3) {
    6018:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    601c:	6823      	ldr	r3, [r4, #0]
          break;
    601e:	e77f      	b.n	5f20 <canread()+0x90>
      sprintf(msgString, " REMOTE REQUEST FRAME");
    6020:	4d31      	ldr	r5, [pc, #196]	; (60e8 <canread()+0x258>)
    6022:	4c2d      	ldr	r4, [pc, #180]	; (60d8 <canread()+0x248>)
    6024:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    6026:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    6028:	e895 0003 	ldmia.w	r5, {r0, r1}
    602c:	f844 0b04 	str.w	r0, [r4], #4
    6030:	4620      	mov	r0, r4
    6032:	f820 1914 	strh.w	r1, [r0], #-20
    6036:	f008 f983 	bl	e340 <strlen>
    603a:	4601      	mov	r1, r0
    603c:	f1a4 0014 	sub.w	r0, r4, #20
    6040:	f006 f8e6 	bl	c210 <usb_serial_write>
    6044:	e7d1      	b.n	5fea <canread()+0x15a>
      switch (inMsg.id) {
    6046:	f240 32c1 	movw	r2, #961	; 0x3c1
    604a:	4293      	cmp	r3, r2
    604c:	d013      	beq.n	6076 <canread()+0x1e6>
    604e:	f240 32c2 	movw	r2, #962	; 0x3c2
    6052:	4293      	cmp	r3, r2
    6054:	f47f af29 	bne.w	5eaa <canread()+0x1a>
          CAB300();
    6058:	f7ff fe4c 	bl	5cf4 <CAB300()>
    if (settings.curcan == 2) {
    605c:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    6060:	6823      	ldr	r3, [r4, #0]
          break;
    6062:	e75b      	b.n	5f1c <canread()+0x8c>
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    6064:	4293      	cmp	r3, r2
    6066:	f47f af20 	bne.w	5eaa <canread()+0x1a>
    606a:	7a22      	ldrb	r2, [r4, #8]
    606c:	2a00      	cmp	r2, #0
    606e:	d184      	bne.n	5f7a <canread()+0xea>
        handleVictronLynx();
    6070:	f7ff fed0 	bl	5e14 <handleVictronLynx()>
    6074:	e718      	b.n	5ea8 <canread()+0x18>
          CAB500();
    6076:	f7ff fe7f 	bl	5d78 <CAB500()>
    if (settings.curcan == 2) {
    607a:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    607e:	6823      	ldr	r3, [r4, #0]
          break;
    6080:	e74c      	b.n	5f1c <canread()+0x8c>
          voltage2 = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    6082:	8962      	ldrh	r2, [r4, #10]
    6084:	89a0      	ldrh	r0, [r4, #12]
    6086:	4919      	ldr	r1, [pc, #100]	; (60ec <canread()+0x25c>)
    6088:	4d0a      	ldr	r5, [pc, #40]	; (60b4 <canread()+0x224>)
    608a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    608e:	ba12      	rev	r2, r2
    6090:	600a      	str	r2, [r1, #0]
          break;
    6092:	e717      	b.n	5ec4 <canread()+0x34>
          voltage1 = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    6094:	8962      	ldrh	r2, [r4, #10]
    6096:	89a0      	ldrh	r0, [r4, #12]
    6098:	4915      	ldr	r1, [pc, #84]	; (60f0 <canread()+0x260>)
    609a:	4d06      	ldr	r5, [pc, #24]	; (60b4 <canread()+0x224>)
    609c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    60a0:	ba12      	rev	r2, r2
    60a2:	600a      	str	r2, [r1, #0]
          break;
    60a4:	e70e      	b.n	5ec4 <canread()+0x34>
    60a6:	bf00      	nop
    60a8:	1fffcfe0 	.word	0x1fffcfe0
    60ac:	1fffd0d8 	.word	0x1fffd0d8
    60b0:	1fffd1cc 	.word	0x1fffd1cc
    60b4:	1fffcf38 	.word	0x1fffcf38
    60b8:	1fff91f0 	.word	0x1fff91f0
    60bc:	e5aaabff 	.word	0xe5aaabff
    60c0:	e5aaaa10 	.word	0xe5aaaa10
    60c4:	1fff91a0 	.word	0x1fff91a0
    60c8:	1fff91c0 	.word	0x1fff91c0
    60cc:	0001f214 	.word	0x0001f214
    60d0:	1fffd3c0 	.word	0x1fffd3c0
    60d4:	1fff89fc 	.word	0x1fff89fc
    60d8:	1fffd044 	.word	0x1fffd044
    60dc:	00014fc4 	.word	0x00014fc4
    60e0:	00014fec 	.word	0x00014fec
    60e4:	00015018 	.word	0x00015018
    60e8:	00015000 	.word	0x00015000
    60ec:	1fffd1c0 	.word	0x1fffd1c0
    60f0:	1fffd1bc 	.word	0x1fffd1bc

000060f4 <currentlimit()>:
void currentlimit() {
    60f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (bmsstatus == Error) {
    60f8:	4b8f      	ldr	r3, [pc, #572]	; (6338 <currentlimit()+0x244>)
    60fa:	781b      	ldrb	r3, [r3, #0]
    60fc:	2b05      	cmp	r3, #5
    60fe:	d106      	bne.n	610e <currentlimit()+0x1a>
    discurrent = 0;
    6100:	498e      	ldr	r1, [pc, #568]	; (633c <currentlimit()+0x248>)
    chargecurrent = 0;
    6102:	4a8f      	ldr	r2, [pc, #572]	; (6340 <currentlimit()+0x24c>)
    discurrent = 0;
    6104:	2300      	movs	r3, #0
    6106:	600b      	str	r3, [r1, #0]
    chargecurrent = 0;
    6108:	6013      	str	r3, [r2, #0]
}
    610a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    discurrent = settings.discurrentmax;
    610e:	4c8d      	ldr	r4, [pc, #564]	; (6344 <currentlimit()+0x250>)
    6110:	4e8a      	ldr	r6, [pc, #552]	; (633c <currentlimit()+0x248>)
    chargecurrent = settings.chargecurrentmax;
    6112:	4d8b      	ldr	r5, [pc, #556]	; (6340 <currentlimit()+0x24c>)
    discurrent = settings.discurrentmax;
    6114:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    chargecurrent = settings.chargecurrentmax;
    6116:	6e23      	ldr	r3, [r4, #96]	; 0x60
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    6118:	488b      	ldr	r0, [pc, #556]	; (6348 <currentlimit()+0x254>)
    discurrent = settings.discurrentmax;
    611a:	6032      	str	r2, [r6, #0]
    chargecurrent = settings.chargecurrentmax;
    611c:	602b      	str	r3, [r5, #0]
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    611e:	f7fb fcdd 	bl	1adc <BMSModuleManager::getLowTemperature()>
    6122:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    6124:	f007 f8f2 	bl	d30c <__aeabi_fcmplt>
    6128:	b110      	cbz	r0, 6130 <currentlimit()+0x3c>
      chargecurrent = settings.chargecurrentcold;
    612a:	f9b4 30d0 	ldrsh.w	r3, [r4, #208]	; 0xd0
    612e:	602b      	str	r3, [r5, #0]
    if (bms.getHighTemperature() > settings.OverTSetpoint) {
    6130:	4885      	ldr	r0, [pc, #532]	; (6348 <currentlimit()+0x254>)
    6132:	f7fb fcd1 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    6136:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    6138:	f007 f906 	bl	d348 <__aeabi_fcmpgt>
    613c:	b110      	cbz	r0, 6144 <currentlimit()+0x50>
      discurrent = 0;
    613e:	2300      	movs	r3, #0
    6140:	6033      	str	r3, [r6, #0]
      chargecurrent = 0;
    6142:	602b      	str	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    6144:	4880      	ldr	r0, [pc, #512]	; (6348 <currentlimit()+0x254>)
    6146:	f7fb fc17 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    614a:	68e1      	ldr	r1, [r4, #12]
    614c:	f007 f8fc 	bl	d348 <__aeabi_fcmpgt>
    6150:	b108      	cbz	r0, 6156 <currentlimit()+0x62>
      chargecurrent = 0;
    6152:	2300      	movs	r3, #0
    6154:	602b      	str	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    6156:	487c      	ldr	r0, [pc, #496]	; (6348 <currentlimit()+0x254>)
    6158:	f7fb fc0e 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    615c:	68e1      	ldr	r1, [r4, #12]
    615e:	f007 f8f3 	bl	d348 <__aeabi_fcmpgt>
    6162:	b108      	cbz	r0, 6168 <currentlimit()+0x74>
      chargecurrent = 0;
    6164:	2300      	movs	r3, #0
    6166:	602b      	str	r3, [r5, #0]
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    6168:	4877      	ldr	r0, [pc, #476]	; (6348 <currentlimit()+0x254>)
    616a:	f7fb fbdf 	bl	192c <BMSModuleManager::getLowCellVolt()>
    616e:	6921      	ldr	r1, [r4, #16]
    6170:	f007 f8cc 	bl	d30c <__aeabi_fcmplt>
    6174:	b198      	cbz	r0, 619e <currentlimit()+0xaa>
      discurrent = 0;
    6176:	2300      	movs	r3, #0
    6178:	6033      	str	r3, [r6, #0]
    if (chargecurrent > settings.chargecurrentcold) {
    617a:	f9b4 20d0 	ldrsh.w	r2, [r4, #208]	; 0xd0
    617e:	682b      	ldr	r3, [r5, #0]
    6180:	429a      	cmp	r2, r3
    6182:	db62      	blt.n	624a <currentlimit()+0x156>
  if (discurrent < 0) {
    6184:	6833      	ldr	r3, [r6, #0]
    6186:	2b00      	cmp	r3, #0
  if (chargecurrent < 0) {
    6188:	bfb7      	itett	lt
    618a:	682b      	ldrlt	r3, [r5, #0]
    618c:	682b      	ldrge	r3, [r5, #0]
    discurrent = 0;
    618e:	2200      	movlt	r2, #0
    6190:	6032      	strlt	r2, [r6, #0]
  if (chargecurrent < 0) {
    6192:	2b00      	cmp	r3, #0
    chargecurrent = 0;
    6194:	bfbc      	itt	lt
    6196:	2300      	movlt	r3, #0
    6198:	602b      	strlt	r3, [r5, #0]
}
    619a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    619e:	486a      	ldr	r0, [pc, #424]	; (6348 <currentlimit()+0x254>)
    61a0:	f7fb fbc4 	bl	192c <BMSModuleManager::getLowCellVolt()>
    61a4:	69a1      	ldr	r1, [r4, #24]
    61a6:	f007 f8b1 	bl	d30c <__aeabi_fcmplt>
    61aa:	2800      	cmp	r0, #0
    61ac:	d1e3      	bne.n	6176 <currentlimit()+0x82>
    if (discurrent > 0) {
    61ae:	6833      	ldr	r3, [r6, #0]
    61b0:	2b00      	cmp	r3, #0
    61b2:	dde2      	ble.n	617a <currentlimit()+0x86>
      if (bms.getHighTemperature() > settings.DisTSetpoint) {
    61b4:	4864      	ldr	r0, [pc, #400]	; (6348 <currentlimit()+0x254>)
    61b6:	f7fb fc8f 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    61ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
    61bc:	f007 f8c4 	bl	d348 <__aeabi_fcmpgt>
    61c0:	2800      	cmp	r0, #0
    61c2:	f040 808e 	bne.w	62e2 <currentlimit()+0x1ee>
      if (bms.getLowCellVolt() < (settings.DischVsetpoint + settings.DisTaper)) {
    61c6:	4860      	ldr	r0, [pc, #384]	; (6348 <currentlimit()+0x254>)
    61c8:	f7fb fbb0 	bl	192c <BMSModuleManager::getLowCellVolt()>
    61cc:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    61d0:	4607      	mov	r7, r0
    61d2:	69a0      	ldr	r0, [r4, #24]
    61d4:	f006 fdf4 	bl	cdc0 <__addsf3>
    61d8:	4601      	mov	r1, r0
    61da:	4638      	mov	r0, r7
    61dc:	f007 f896 	bl	d30c <__aeabi_fcmplt>
    61e0:	2800      	cmp	r0, #0
    61e2:	d0ca      	beq.n	617a <currentlimit()+0x86>
        discurrent = discurrent - map(bms.getLowCellVolt(), settings.DischVsetpoint, (settings.DischVsetpoint + settings.DisTaper), settings.discurrentmax, 0);
    61e4:	6830      	ldr	r0, [r6, #0]
    61e6:	f006 fe9f 	bl	cf28 <__aeabi_i2f>
    61ea:	4680      	mov	r8, r0
    61ec:	4856      	ldr	r0, [pc, #344]	; (6348 <currentlimit()+0x254>)
    61ee:	f7fb fb9d 	bl	192c <BMSModuleManager::getLowCellVolt()>
    61f2:	4681      	mov	r9, r0
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    61f4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    61f6:	f8d4 a018 	ldr.w	sl, [r4, #24]
    61fa:	f006 fe95 	bl	cf28 <__aeabi_i2f>
    61fe:	4651      	mov	r1, sl
    6200:	4607      	mov	r7, r0
    6202:	4648      	mov	r0, r9
    6204:	f006 fdda 	bl	cdbc <__aeabi_fsub>
    6208:	4639      	mov	r1, r7
    620a:	4681      	mov	r9, r0
    620c:	2000      	movs	r0, #0
    620e:	f006 fdd5 	bl	cdbc <__aeabi_fsub>
    6212:	4601      	mov	r1, r0
    6214:	4648      	mov	r0, r9
    6216:	f006 fedb 	bl	cfd0 <__aeabi_fmul>
    621a:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    621e:	4681      	mov	r9, r0
    6220:	4650      	mov	r0, sl
    6222:	f006 fdcd 	bl	cdc0 <__addsf3>
    6226:	4651      	mov	r1, sl
    6228:	f006 fdc8 	bl	cdbc <__aeabi_fsub>
    622c:	4601      	mov	r1, r0
    622e:	4648      	mov	r0, r9
    6230:	f006 ff82 	bl	d138 <__aeabi_fdiv>
    6234:	4639      	mov	r1, r7
    6236:	f006 fdc3 	bl	cdc0 <__addsf3>
    623a:	4601      	mov	r1, r0
    623c:	4640      	mov	r0, r8
    623e:	f006 fdbd 	bl	cdbc <__aeabi_fsub>
    6242:	f007 f88b 	bl	d35c <__aeabi_f2iz>
    6246:	6030      	str	r0, [r6, #0]
    6248:	e797      	b.n	617a <currentlimit()+0x86>
      if (bms.getLowTemperature() < settings.ChargeTSetpoint) {
    624a:	483f      	ldr	r0, [pc, #252]	; (6348 <currentlimit()+0x254>)
    624c:	f7fb fc46 	bl	1adc <BMSModuleManager::getLowTemperature()>
    6250:	6b21      	ldr	r1, [r4, #48]	; 0x30
    6252:	f007 f85b 	bl	d30c <__aeabi_fcmplt>
    6256:	2800      	cmp	r0, #0
    6258:	f040 80be 	bne.w	63d8 <currentlimit()+0x2e4>
      if (storagemode == 1) {
    625c:	4b3b      	ldr	r3, [pc, #236]	; (634c <currentlimit()+0x258>)
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    625e:	483a      	ldr	r0, [pc, #232]	; (6348 <currentlimit()+0x254>)
      if (storagemode == 1) {
    6260:	681b      	ldr	r3, [r3, #0]
    6262:	2b01      	cmp	r3, #1
    6264:	d074      	beq.n	6350 <currentlimit()+0x25c>
        if (bms.getHighCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    6266:	f7fb fb87 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    626a:	69e1      	ldr	r1, [r4, #28]
    626c:	4607      	mov	r7, r0
    626e:	6960      	ldr	r0, [r4, #20]
    6270:	f006 fda4 	bl	cdbc <__aeabi_fsub>
    6274:	4601      	mov	r1, r0
    6276:	4638      	mov	r0, r7
    6278:	f007 f866 	bl	d348 <__aeabi_fcmpgt>
    627c:	2800      	cmp	r0, #0
    627e:	d081      	beq.n	6184 <currentlimit()+0x90>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.ChargeVsetpoint - settings.ChargeHys), settings.ChargeVsetpoint, 0, (settings.chargecurrentmax - settings.chargecurrentend));
    6280:	6828      	ldr	r0, [r5, #0]
    6282:	f006 fe51 	bl	cf28 <__aeabi_i2f>
    6286:	4680      	mov	r8, r0
    6288:	482f      	ldr	r0, [pc, #188]	; (6348 <currentlimit()+0x254>)
    628a:	f7fb fb75 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    628e:	f8d4 9014 	ldr.w	r9, [r4, #20]
    6292:	69e1      	ldr	r1, [r4, #28]
    6294:	4682      	mov	sl, r0
    6296:	4648      	mov	r0, r9
    6298:	f006 fd90 	bl	cdbc <__aeabi_fsub>
    629c:	6e63      	ldr	r3, [r4, #100]	; 0x64
    629e:	4607      	mov	r7, r0
    62a0:	6e20      	ldr	r0, [r4, #96]	; 0x60
    62a2:	1ac0      	subs	r0, r0, r3
    62a4:	f006 fe40 	bl	cf28 <__aeabi_i2f>
    62a8:	4639      	mov	r1, r7
    62aa:	4604      	mov	r4, r0
    62ac:	4650      	mov	r0, sl
    62ae:	f006 fd85 	bl	cdbc <__aeabi_fsub>
    62b2:	4601      	mov	r1, r0
    62b4:	4620      	mov	r0, r4
    62b6:	f006 fe8b 	bl	cfd0 <__aeabi_fmul>
    62ba:	4639      	mov	r1, r7
    62bc:	4604      	mov	r4, r0
    62be:	4648      	mov	r0, r9
    62c0:	f006 fd7c 	bl	cdbc <__aeabi_fsub>
    62c4:	4601      	mov	r1, r0
    62c6:	4620      	mov	r0, r4
    62c8:	f006 ff36 	bl	d138 <__aeabi_fdiv>
    62cc:	2100      	movs	r1, #0
    62ce:	f006 fd77 	bl	cdc0 <__addsf3>
    62d2:	4601      	mov	r1, r0
    62d4:	4640      	mov	r0, r8
    62d6:	f006 fd71 	bl	cdbc <__aeabi_fsub>
    62da:	f007 f83f 	bl	d35c <__aeabi_f2iz>
    62de:	6028      	str	r0, [r5, #0]
    62e0:	e750      	b.n	6184 <currentlimit()+0x90>
        discurrent = discurrent - map(bms.getHighTemperature(), settings.DisTSetpoint, settings.OverTSetpoint, 0, settings.discurrentmax);
    62e2:	6830      	ldr	r0, [r6, #0]
    62e4:	f006 fe20 	bl	cf28 <__aeabi_i2f>
    62e8:	4607      	mov	r7, r0
    62ea:	4817      	ldr	r0, [pc, #92]	; (6348 <currentlimit()+0x254>)
    62ec:	f7fb fbf4 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    62f0:	4681      	mov	r9, r0
    62f2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    62f4:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
    62f8:	f006 fe16 	bl	cf28 <__aeabi_i2f>
    62fc:	4651      	mov	r1, sl
    62fe:	4680      	mov	r8, r0
    6300:	4648      	mov	r0, r9
    6302:	f006 fd5b 	bl	cdbc <__aeabi_fsub>
    6306:	4601      	mov	r1, r0
    6308:	4640      	mov	r0, r8
    630a:	f006 fe61 	bl	cfd0 <__aeabi_fmul>
    630e:	4651      	mov	r1, sl
    6310:	4680      	mov	r8, r0
    6312:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6314:	f006 fd52 	bl	cdbc <__aeabi_fsub>
    6318:	4601      	mov	r1, r0
    631a:	4640      	mov	r0, r8
    631c:	f006 ff0c 	bl	d138 <__aeabi_fdiv>
    6320:	2100      	movs	r1, #0
    6322:	f006 fd4d 	bl	cdc0 <__addsf3>
    6326:	4601      	mov	r1, r0
    6328:	4638      	mov	r0, r7
    632a:	f006 fd47 	bl	cdbc <__aeabi_fsub>
    632e:	f007 f815 	bl	d35c <__aeabi_f2iz>
    6332:	6030      	str	r0, [r6, #0]
    6334:	e747      	b.n	61c6 <currentlimit()+0xd2>
    6336:	bf00      	nop
    6338:	1fffcf34 	.word	0x1fffcf34
    633c:	1fffcfcc 	.word	0x1fffcfcc
    6340:	1fffcf40 	.word	0x1fffcf40
    6344:	1fffd0d8 	.word	0x1fffd0d8
    6348:	1fff91f0 	.word	0x1fff91f0
    634c:	1fffd1b0 	.word	0x1fffd1b0
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    6350:	f7fb fb12 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6354:	69e1      	ldr	r1, [r4, #28]
    6356:	4607      	mov	r7, r0
    6358:	6a20      	ldr	r0, [r4, #32]
    635a:	f006 fd2f 	bl	cdbc <__aeabi_fsub>
    635e:	4601      	mov	r1, r0
    6360:	4638      	mov	r0, r7
    6362:	f006 fff1 	bl	d348 <__aeabi_fcmpgt>
    6366:	2800      	cmp	r0, #0
    6368:	f43f af0c 	beq.w	6184 <currentlimit()+0x90>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.StoreVsetpoint - settings.ChargeHys), settings.StoreVsetpoint, settings.chargecurrentend, settings.chargecurrentmax);
    636c:	6828      	ldr	r0, [r5, #0]
    636e:	f006 fddb 	bl	cf28 <__aeabi_i2f>
    6372:	4681      	mov	r9, r0
    6374:	4831      	ldr	r0, [pc, #196]	; (643c <currentlimit()+0x348>)
    6376:	f7fb faff 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    637a:	f8d4 a020 	ldr.w	sl, [r4, #32]
    637e:	69e1      	ldr	r1, [r4, #28]
    6380:	4683      	mov	fp, r0
    6382:	4650      	mov	r0, sl
    6384:	f006 fd1a 	bl	cdbc <__aeabi_fsub>
    6388:	4680      	mov	r8, r0
    638a:	6e60      	ldr	r0, [r4, #100]	; 0x64
    638c:	f006 fdcc 	bl	cf28 <__aeabi_i2f>
    6390:	4607      	mov	r7, r0
    6392:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6394:	f006 fdc8 	bl	cf28 <__aeabi_i2f>
    6398:	4639      	mov	r1, r7
    639a:	f006 fd0f 	bl	cdbc <__aeabi_fsub>
    639e:	4641      	mov	r1, r8
    63a0:	4604      	mov	r4, r0
    63a2:	4658      	mov	r0, fp
    63a4:	f006 fd0a 	bl	cdbc <__aeabi_fsub>
    63a8:	4601      	mov	r1, r0
    63aa:	4620      	mov	r0, r4
    63ac:	f006 fe10 	bl	cfd0 <__aeabi_fmul>
    63b0:	4641      	mov	r1, r8
    63b2:	4604      	mov	r4, r0
    63b4:	4650      	mov	r0, sl
    63b6:	f006 fd01 	bl	cdbc <__aeabi_fsub>
    63ba:	4601      	mov	r1, r0
    63bc:	4620      	mov	r0, r4
    63be:	f006 febb 	bl	d138 <__aeabi_fdiv>
    63c2:	4639      	mov	r1, r7
    63c4:	f006 fcfc 	bl	cdc0 <__addsf3>
    63c8:	4601      	mov	r1, r0
    63ca:	4648      	mov	r0, r9
    63cc:	f006 fcf6 	bl	cdbc <__aeabi_fsub>
    63d0:	f006 ffc4 	bl	d35c <__aeabi_f2iz>
    63d4:	6028      	str	r0, [r5, #0]
    63d6:	e6d5      	b.n	6184 <currentlimit()+0x90>
        chargecurrent = chargecurrent - map(bms.getLowTemperature(), settings.UnderTSetpoint, settings.ChargeTSetpoint, (settings.chargecurrentmax - settings.chargecurrentcold), 0);
    63d8:	6828      	ldr	r0, [r5, #0]
    63da:	f006 fda5 	bl	cf28 <__aeabi_i2f>
    63de:	4680      	mov	r8, r0
    63e0:	4816      	ldr	r0, [pc, #88]	; (643c <currentlimit()+0x348>)
    63e2:	f7fb fb7b 	bl	1adc <BMSModuleManager::getLowTemperature()>
    63e6:	f9b4 30d0 	ldrsh.w	r3, [r4, #208]	; 0xd0
    63ea:	4681      	mov	r9, r0
    63ec:	6e20      	ldr	r0, [r4, #96]	; 0x60
    63ee:	1ac0      	subs	r0, r0, r3
    63f0:	f006 fd9a 	bl	cf28 <__aeabi_i2f>
    63f4:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
    63f8:	4607      	mov	r7, r0
    63fa:	4651      	mov	r1, sl
    63fc:	4648      	mov	r0, r9
    63fe:	f006 fcdd 	bl	cdbc <__aeabi_fsub>
    6402:	4639      	mov	r1, r7
    6404:	4681      	mov	r9, r0
    6406:	2000      	movs	r0, #0
    6408:	f006 fcd8 	bl	cdbc <__aeabi_fsub>
    640c:	4601      	mov	r1, r0
    640e:	4648      	mov	r0, r9
    6410:	f006 fdde 	bl	cfd0 <__aeabi_fmul>
    6414:	4651      	mov	r1, sl
    6416:	4681      	mov	r9, r0
    6418:	6b20      	ldr	r0, [r4, #48]	; 0x30
    641a:	f006 fccf 	bl	cdbc <__aeabi_fsub>
    641e:	4601      	mov	r1, r0
    6420:	4648      	mov	r0, r9
    6422:	f006 fe89 	bl	d138 <__aeabi_fdiv>
    6426:	4639      	mov	r1, r7
    6428:	f006 fcca 	bl	cdc0 <__addsf3>
    642c:	4601      	mov	r1, r0
    642e:	4640      	mov	r0, r8
    6430:	f006 fcc4 	bl	cdbc <__aeabi_fsub>
    6434:	f006 ff92 	bl	d35c <__aeabi_f2iz>
    6438:	6028      	str	r0, [r5, #0]
    643a:	e70f      	b.n	625c <currentlimit()+0x168>
    643c:	1fff91f0 	.word	0x1fff91f0

00006440 <inputdebug()>:
void inputdebug() {
    6440:	b508      	push	{r3, lr}
  Serial.println();
    6442:	4828      	ldr	r0, [pc, #160]	; (64e4 <inputdebug()+0xa4>)
    6444:	f003 f994 	bl	9770 <Print::println()>
    6448:	4827      	ldr	r0, [pc, #156]	; (64e8 <inputdebug()+0xa8>)
    644a:	2107      	movs	r1, #7
    644c:	f005 fee0 	bl	c210 <usb_serial_write>
  if (digitalRead(IN1)) {
    6450:	2011      	movs	r0, #17
    6452:	f004 f88f 	bl	a574 <digitalRead>
    6456:	b300      	cbz	r0, 649a <inputdebug()+0x5a>
    6458:	4824      	ldr	r0, [pc, #144]	; (64ec <inputdebug()+0xac>)
    645a:	2106      	movs	r1, #6
    645c:	f005 fed8 	bl	c210 <usb_serial_write>
  if (digitalRead(IN3)) {
    6460:	2012      	movs	r0, #18
    6462:	f004 f887 	bl	a574 <digitalRead>
    6466:	b308      	cbz	r0, 64ac <inputdebug()+0x6c>
    6468:	4821      	ldr	r0, [pc, #132]	; (64f0 <inputdebug()+0xb0>)
    646a:	2106      	movs	r1, #6
    646c:	f005 fed0 	bl	c210 <usb_serial_write>
  if (digitalRead(IN3)) {
    6470:	2012      	movs	r0, #18
    6472:	f004 f87f 	bl	a574 <digitalRead>
    6476:	b310      	cbz	r0, 64be <inputdebug()+0x7e>
    6478:	481e      	ldr	r0, [pc, #120]	; (64f4 <inputdebug()+0xb4>)
    647a:	2106      	movs	r1, #6
    647c:	f005 fec8 	bl	c210 <usb_serial_write>
  if (digitalRead(IN4)) {
    6480:	2013      	movs	r0, #19
    6482:	f004 f877 	bl	a574 <digitalRead>
    6486:	b318      	cbz	r0, 64d0 <inputdebug()+0x90>
    6488:	481b      	ldr	r0, [pc, #108]	; (64f8 <inputdebug()+0xb8>)
    648a:	2106      	movs	r1, #6
    648c:	f005 fec0 	bl	c210 <usb_serial_write>
}
    6490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    6494:	4813      	ldr	r0, [pc, #76]	; (64e4 <inputdebug()+0xa4>)
    6496:	f003 b96b 	b.w	9770 <Print::println()>
    649a:	4818      	ldr	r0, [pc, #96]	; (64fc <inputdebug()+0xbc>)
    649c:	2106      	movs	r1, #6
    649e:	f005 feb7 	bl	c210 <usb_serial_write>
  if (digitalRead(IN3)) {
    64a2:	2012      	movs	r0, #18
    64a4:	f004 f866 	bl	a574 <digitalRead>
    64a8:	2800      	cmp	r0, #0
    64aa:	d1dd      	bne.n	6468 <inputdebug()+0x28>
    64ac:	4814      	ldr	r0, [pc, #80]	; (6500 <inputdebug()+0xc0>)
    64ae:	2106      	movs	r1, #6
    64b0:	f005 feae 	bl	c210 <usb_serial_write>
  if (digitalRead(IN3)) {
    64b4:	2012      	movs	r0, #18
    64b6:	f004 f85d 	bl	a574 <digitalRead>
    64ba:	2800      	cmp	r0, #0
    64bc:	d1dc      	bne.n	6478 <inputdebug()+0x38>
    64be:	4811      	ldr	r0, [pc, #68]	; (6504 <inputdebug()+0xc4>)
    64c0:	2106      	movs	r1, #6
    64c2:	f005 fea5 	bl	c210 <usb_serial_write>
  if (digitalRead(IN4)) {
    64c6:	2013      	movs	r0, #19
    64c8:	f004 f854 	bl	a574 <digitalRead>
    64cc:	2800      	cmp	r0, #0
    64ce:	d1db      	bne.n	6488 <inputdebug()+0x48>
    64d0:	480d      	ldr	r0, [pc, #52]	; (6508 <inputdebug()+0xc8>)
    64d2:	2106      	movs	r1, #6
    64d4:	f005 fe9c 	bl	c210 <usb_serial_write>
}
    64d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    64dc:	4801      	ldr	r0, [pc, #4]	; (64e4 <inputdebug()+0xa4>)
    64de:	f003 b947 	b.w	9770 <Print::println()>
    64e2:	bf00      	nop
    64e4:	1fff89fc 	.word	0x1fff89fc
    64e8:	00015024 	.word	0x00015024
    64ec:	0001502c 	.word	0x0001502c
    64f0:	0001503c 	.word	0x0001503c
    64f4:	0001504c 	.word	0x0001504c
    64f8:	0001505c 	.word	0x0001505c
    64fc:	00015034 	.word	0x00015034
    6500:	00015044 	.word	0x00015044
    6504:	00015054 	.word	0x00015054
    6508:	00015064 	.word	0x00015064

0000650c <outputdebug()>:
void outputdebug() {
    650c:	b510      	push	{r4, lr}
  if (outputstate < 5) {
    650e:	4c29      	ldr	r4, [pc, #164]	; (65b4 <outputdebug()+0xa8>)
    6510:	6823      	ldr	r3, [r4, #0]
    6512:	2b04      	cmp	r3, #4
    6514:	dc26      	bgt.n	6564 <outputdebug()+0x58>
    digitalWrite(OUT1, HIGH);
    6516:	2101      	movs	r1, #1
    6518:	200b      	movs	r0, #11
    651a:	f004 f805 	bl	a528 <digitalWrite>
    digitalWrite(OUT2, HIGH);
    651e:	2101      	movs	r1, #1
    6520:	200c      	movs	r0, #12
    6522:	f004 f801 	bl	a528 <digitalWrite>
    digitalWrite(OUT3, HIGH);
    6526:	2101      	movs	r1, #1
    6528:	2014      	movs	r0, #20
    652a:	f003 fffd 	bl	a528 <digitalWrite>
    digitalWrite(OUT4, HIGH);
    652e:	2101      	movs	r1, #1
    6530:	2015      	movs	r0, #21
    6532:	f003 fff9 	bl	a528 <digitalWrite>
    analogWrite(OUT5, 255);
    6536:	21ff      	movs	r1, #255	; 0xff
    6538:	2016      	movs	r0, #22
    653a:	f003 fe79 	bl	a230 <analogWrite>
    analogWrite(OUT6, 255);
    653e:	21ff      	movs	r1, #255	; 0xff
    6540:	2017      	movs	r0, #23
    6542:	f003 fe75 	bl	a230 <analogWrite>
    analogWrite(OUT7, 255);
    6546:	21ff      	movs	r1, #255	; 0xff
    6548:	2005      	movs	r0, #5
    654a:	f003 fe71 	bl	a230 <analogWrite>
    analogWrite(OUT8, 255);
    654e:	21ff      	movs	r1, #255	; 0xff
    6550:	2006      	movs	r0, #6
    6552:	f003 fe6d 	bl	a230 <analogWrite>
    outputstate++;
    6556:	6823      	ldr	r3, [r4, #0]
    6558:	3301      	adds	r3, #1
  if (outputstate > 10) {
    655a:	2b0a      	cmp	r3, #10
    outputstate = 0;
    655c:	bfc8      	it	gt
    655e:	2300      	movgt	r3, #0
    6560:	6023      	str	r3, [r4, #0]
}
    6562:	bd10      	pop	{r4, pc}
    digitalWrite(OUT1, LOW);
    6564:	2100      	movs	r1, #0
    6566:	200b      	movs	r0, #11
    6568:	f003 ffde 	bl	a528 <digitalWrite>
    digitalWrite(OUT2, LOW);
    656c:	2100      	movs	r1, #0
    656e:	200c      	movs	r0, #12
    6570:	f003 ffda 	bl	a528 <digitalWrite>
    digitalWrite(OUT3, LOW);
    6574:	2100      	movs	r1, #0
    6576:	2014      	movs	r0, #20
    6578:	f003 ffd6 	bl	a528 <digitalWrite>
    digitalWrite(OUT4, LOW);
    657c:	2100      	movs	r1, #0
    657e:	2015      	movs	r0, #21
    6580:	f003 ffd2 	bl	a528 <digitalWrite>
    analogWrite(OUT5, 0);
    6584:	2100      	movs	r1, #0
    6586:	2016      	movs	r0, #22
    6588:	f003 fe52 	bl	a230 <analogWrite>
    analogWrite(OUT6, 0);
    658c:	2100      	movs	r1, #0
    658e:	2017      	movs	r0, #23
    6590:	f003 fe4e 	bl	a230 <analogWrite>
    analogWrite(OUT7, 0);
    6594:	2100      	movs	r1, #0
    6596:	2005      	movs	r0, #5
    6598:	f003 fe4a 	bl	a230 <analogWrite>
    analogWrite(OUT8, 0);
    659c:	2100      	movs	r1, #0
    659e:	2006      	movs	r0, #6
    65a0:	f003 fe46 	bl	a230 <analogWrite>
    outputstate++;
    65a4:	6823      	ldr	r3, [r4, #0]
    65a6:	3301      	adds	r3, #1
  if (outputstate > 10) {
    65a8:	2b0a      	cmp	r3, #10
    outputstate = 0;
    65aa:	bfc8      	it	gt
    65ac:	2300      	movgt	r3, #0
    65ae:	6023      	str	r3, [r4, #0]
}
    65b0:	bd10      	pop	{r4, pc}
    65b2:	bf00      	nop
    65b4:	1fffd0c8 	.word	0x1fffd0c8

000065b8 <sendcommand()>:
void sendcommand() {
    65b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg.id = controlid;
    65ba:	4f0f      	ldr	r7, [pc, #60]	; (65f8 <sendcommand()+0x40>)
    65bc:	4c0f      	ldr	r4, [pc, #60]	; (65fc <sendcommand()+0x44>)
  Can0.write(msg);
    65be:	4e10      	ldr	r6, [pc, #64]	; (6600 <sendcommand()+0x48>)
  msg.id = controlid;
    65c0:	683b      	ldr	r3, [r7, #0]
    65c2:	6023      	str	r3, [r4, #0]
  Can0.write(msg);
    65c4:	4621      	mov	r1, r4
  msg.buf[0] = 0x00;
    65c6:	2300      	movs	r3, #0
  msg.len = 8;
    65c8:	2508      	movs	r5, #8
  Can0.write(msg);
    65ca:	4630      	mov	r0, r6
  msg.buf[0] = 0x00;
    65cc:	60a3      	str	r3, [r4, #8]
  msg.buf[4] = 0x00;
    65ce:	60e3      	str	r3, [r4, #12]
  msg.len = 8;
    65d0:	71e5      	strb	r5, [r4, #7]
  Can0.write(msg);
    65d2:	f001 fffd 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
  delay(1);
    65d6:	2001      	movs	r0, #1
    65d8:	f004 f836 	bl	a648 <delay>
  msg.id = controlid;
    65dc:	683b      	ldr	r3, [r7, #0]
    65de:	6023      	str	r3, [r4, #0]
  msg.buf[0] = 0x45;
    65e0:	4a08      	ldr	r2, [pc, #32]	; (6604 <sendcommand()+0x4c>)
  msg.len = 8;
    65e2:	71e5      	strb	r5, [r4, #7]
  msg.buf[4] = 0x00;
    65e4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  Can0.write(msg);
    65e8:	4630      	mov	r0, r6
    65ea:	4621      	mov	r1, r4
  msg.buf[0] = 0x45;
    65ec:	60a2      	str	r2, [r4, #8]
  msg.buf[4] = 0x00;
    65ee:	60e3      	str	r3, [r4, #12]
}
    65f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Can0.write(msg);
    65f4:	f001 bfec 	b.w	85d0 <FlexCAN::write(CAN_message_t const&)>
    65f8:	1fff8848 	.word	0x1fff8848
    65fc:	1fffd034 	.word	0x1fffd034
    6600:	1fffd1cc 	.word	0x1fffd1cc
    6604:	00280145 	.word	0x00280145

00006608 <dashupdate()>:
void dashupdate() {
    6608:	b530      	push	{r4, r5, lr}
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial2_write((const uint8_t *)str, len);
    660a:	48af      	ldr	r0, [pc, #700]	; (68c8 <dashupdate()+0x2c0>)
    660c:	b083      	sub	sp, #12
    660e:	2109      	movs	r1, #9
    6610:	f004 fad0 	bl	abb4 <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6614:	2022      	movs	r0, #34	; 0x22
    6616:	f004 fa51 	bl	aabc <serial2_putchar>
  if (settings.ESSmode == 1) {
    661a:	4bac      	ldr	r3, [pc, #688]	; (68cc <dashupdate()+0x2c4>)
    661c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    6620:	2b01      	cmp	r3, #1
    switch (bmsstatus) {
    6622:	4bab      	ldr	r3, [pc, #684]	; (68d0 <dashupdate()+0x2c8>)
    6624:	781b      	ldrb	r3, [r3, #0]
  if (settings.ESSmode == 1) {
    6626:	d009      	beq.n	663c <dashupdate()+0x34>
    switch (bmsstatus) {
    6628:	2b05      	cmp	r3, #5
    662a:	d810      	bhi.n	664e <dashupdate()+0x46>
    662c:	e8df f013 	tbh	[pc, r3, lsl #1]
    6630:	01370132 	.word	0x01370132
    6634:	0141013c 	.word	0x0141013c
    6638:	000b012d 	.word	0x000b012d
    switch (bmsstatus) {
    663c:	2b00      	cmp	r3, #0
    663e:	f000 813d 	beq.w	68bc <dashupdate()+0x2b4>
    6642:	2b05      	cmp	r3, #5
    6644:	d103      	bne.n	664e <dashupdate()+0x46>
					{ serial2_write(buffer, size); return size; }
    6646:	48a3      	ldr	r0, [pc, #652]	; (68d4 <dashupdate()+0x2cc>)
    6648:	2107      	movs	r1, #7
    664a:	f004 fab3 	bl	abb4 <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    664e:	2022      	movs	r0, #34	; 0x22
    6650:	f004 fa34 	bl	aabc <serial2_putchar>
    6654:	20ff      	movs	r0, #255	; 0xff
    6656:	f004 fa31 	bl	aabc <serial2_putchar>
    665a:	20ff      	movs	r0, #255	; 0xff
    665c:	f004 fa2e 	bl	aabc <serial2_putchar>
  Serial2.print(SOC);
    6660:	4c9d      	ldr	r4, [pc, #628]	; (68d8 <dashupdate()+0x2d0>)
    6662:	20ff      	movs	r0, #255	; 0xff
    6664:	f004 fa2a 	bl	aabc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6668:	489c      	ldr	r0, [pc, #624]	; (68dc <dashupdate()+0x2d4>)
    666a:	2108      	movs	r1, #8
    666c:	f004 faa2 	bl	abb4 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    6670:	6821      	ldr	r1, [r4, #0]
    6672:	489b      	ldr	r0, [pc, #620]	; (68e0 <dashupdate()+0x2d8>)
    6674:	f003 f874 	bl	9760 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6678:	20ff      	movs	r0, #255	; 0xff
    667a:	f004 fa1f 	bl	aabc <serial2_putchar>
    667e:	20ff      	movs	r0, #255	; 0xff
    6680:	f004 fa1c 	bl	aabc <serial2_putchar>
    6684:	20ff      	movs	r0, #255	; 0xff
    6686:	f004 fa19 	bl	aabc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    668a:	4896      	ldr	r0, [pc, #600]	; (68e4 <dashupdate()+0x2dc>)
    668c:	2109      	movs	r1, #9
    668e:	f004 fa91 	bl	abb4 <serial2_write>
    6692:	6821      	ldr	r1, [r4, #0]
    6694:	4892      	ldr	r0, [pc, #584]	; (68e0 <dashupdate()+0x2d8>)
    6696:	f003 f863 	bl	9760 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    669a:	20ff      	movs	r0, #255	; 0xff
    669c:	f004 fa0e 	bl	aabc <serial2_putchar>
    66a0:	20ff      	movs	r0, #255	; 0xff
    66a2:	f004 fa0b 	bl	aabc <serial2_putchar>
    66a6:	20ff      	movs	r0, #255	; 0xff
    66a8:	f004 fa08 	bl	aabc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    66ac:	488e      	ldr	r0, [pc, #568]	; (68e8 <dashupdate()+0x2e0>)
    66ae:	210c      	movs	r1, #12
    66b0:	f004 fa80 	bl	abb4 <serial2_write>
  Serial2.print(currentact / 100, 0);
    66b4:	4b8d      	ldr	r3, [pc, #564]	; (68ec <dashupdate()+0x2e4>)
    66b6:	498e      	ldr	r1, [pc, #568]	; (68f0 <dashupdate()+0x2e8>)
    66b8:	6818      	ldr	r0, [r3, #0]
    66ba:	f006 fd3d 	bl	d138 <__aeabi_fdiv>
    66be:	f006 fa63 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    66c2:	2400      	movs	r4, #0
    66c4:	4602      	mov	r2, r0
    66c6:	460b      	mov	r3, r1
    66c8:	9400      	str	r4, [sp, #0]
    66ca:	4885      	ldr	r0, [pc, #532]	; (68e0 <dashupdate()+0x2d8>)
    66cc:	f003 f874 	bl	97b8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    66d0:	20ff      	movs	r0, #255	; 0xff
    66d2:	f004 f9f3 	bl	aabc <serial2_putchar>
    66d6:	20ff      	movs	r0, #255	; 0xff
    66d8:	f004 f9f0 	bl	aabc <serial2_putchar>
    66dc:	20ff      	movs	r0, #255	; 0xff
    66de:	f004 f9ed 	bl	aabc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    66e2:	2109      	movs	r1, #9
    66e4:	4883      	ldr	r0, [pc, #524]	; (68f4 <dashupdate()+0x2ec>)
    66e6:	f004 fa65 	bl	abb4 <serial2_write>
  Serial2.print(bms.getAvgTemperature(), 0);
    66ea:	4883      	ldr	r0, [pc, #524]	; (68f8 <dashupdate()+0x2f0>)
    66ec:	f7fb f996 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    66f0:	f006 fa4a 	bl	cb88 <__aeabi_f2d>
    66f4:	9400      	str	r4, [sp, #0]
    66f6:	4602      	mov	r2, r0
    66f8:	460b      	mov	r3, r1
    66fa:	4879      	ldr	r0, [pc, #484]	; (68e0 <dashupdate()+0x2d8>)
    66fc:	f003 f85c 	bl	97b8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6700:	20ff      	movs	r0, #255	; 0xff
    6702:	f004 f9db 	bl	aabc <serial2_putchar>
    6706:	20ff      	movs	r0, #255	; 0xff
    6708:	f004 f9d8 	bl	aabc <serial2_putchar>
    670c:	20ff      	movs	r0, #255	; 0xff
    670e:	f004 f9d5 	bl	aabc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6712:	210c      	movs	r1, #12
    6714:	4879      	ldr	r0, [pc, #484]	; (68fc <dashupdate()+0x2f4>)
    6716:	f004 fa4d 	bl	abb4 <serial2_write>
  Serial2.print(bms.getLowTemperature(), 0);
    671a:	4877      	ldr	r0, [pc, #476]	; (68f8 <dashupdate()+0x2f0>)
    671c:	f7fb f9de 	bl	1adc <BMSModuleManager::getLowTemperature()>
    6720:	f006 fa32 	bl	cb88 <__aeabi_f2d>
    6724:	9400      	str	r4, [sp, #0]
    6726:	4602      	mov	r2, r0
    6728:	460b      	mov	r3, r1
    672a:	486d      	ldr	r0, [pc, #436]	; (68e0 <dashupdate()+0x2d8>)
    672c:	f003 f844 	bl	97b8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6730:	20ff      	movs	r0, #255	; 0xff
    6732:	f004 f9c3 	bl	aabc <serial2_putchar>
    6736:	20ff      	movs	r0, #255	; 0xff
    6738:	f004 f9c0 	bl	aabc <serial2_putchar>
    673c:	20ff      	movs	r0, #255	; 0xff
    673e:	f004 f9bd 	bl	aabc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6742:	210d      	movs	r1, #13
    6744:	486e      	ldr	r0, [pc, #440]	; (6900 <dashupdate()+0x2f8>)
    6746:	f004 fa35 	bl	abb4 <serial2_write>
  Serial2.print(bms.getHighTemperature(), 0);
    674a:	486b      	ldr	r0, [pc, #428]	; (68f8 <dashupdate()+0x2f0>)
    674c:	f7fb f9c4 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    6750:	f006 fa1a 	bl	cb88 <__aeabi_f2d>
    6754:	9400      	str	r4, [sp, #0]
    6756:	4602      	mov	r2, r0
    6758:	460b      	mov	r3, r1
    675a:	4861      	ldr	r0, [pc, #388]	; (68e0 <dashupdate()+0x2d8>)
    675c:	f003 f82c 	bl	97b8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6760:	20ff      	movs	r0, #255	; 0xff
    6762:	f004 f9ab 	bl	aabc <serial2_putchar>
    6766:	20ff      	movs	r0, #255	; 0xff
    6768:	f004 f9a8 	bl	aabc <serial2_putchar>
    676c:	20ff      	movs	r0, #255	; 0xff
    676e:	f004 f9a5 	bl	aabc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6772:	2109      	movs	r1, #9
    6774:	4863      	ldr	r0, [pc, #396]	; (6904 <dashupdate()+0x2fc>)
    6776:	f004 fa1d 	bl	abb4 <serial2_write>
  Serial2.print(bms.getPackVoltage() * 10, 0);
    677a:	485f      	ldr	r0, [pc, #380]	; (68f8 <dashupdate()+0x2f0>)
    677c:	f7fb f920 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    6780:	4961      	ldr	r1, [pc, #388]	; (6908 <dashupdate()+0x300>)
    6782:	f006 fc25 	bl	cfd0 <__aeabi_fmul>
    6786:	f006 f9ff 	bl	cb88 <__aeabi_f2d>
    678a:	9400      	str	r4, [sp, #0]
    678c:	4602      	mov	r2, r0
    678e:	460b      	mov	r3, r1
    6790:	4853      	ldr	r0, [pc, #332]	; (68e0 <dashupdate()+0x2d8>)
    6792:	f003 f811 	bl	97b8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6796:	20ff      	movs	r0, #255	; 0xff
    6798:	f004 f990 	bl	aabc <serial2_putchar>
    679c:	20ff      	movs	r0, #255	; 0xff
    679e:	f004 f98d 	bl	aabc <serial2_putchar>
    67a2:	20ff      	movs	r0, #255	; 0xff
    67a4:	f004 f98a 	bl	aabc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    67a8:	210c      	movs	r1, #12
    67aa:	4858      	ldr	r0, [pc, #352]	; (690c <dashupdate()+0x304>)
    67ac:	f004 fa02 	bl	abb4 <serial2_write>
  Serial2.print(bms.getLowCellVolt() * 1000, 0);
    67b0:	4851      	ldr	r0, [pc, #324]	; (68f8 <dashupdate()+0x2f0>)
    67b2:	f7fb f8bb 	bl	192c <BMSModuleManager::getLowCellVolt()>
    67b6:	4956      	ldr	r1, [pc, #344]	; (6910 <dashupdate()+0x308>)
    67b8:	f006 fc0a 	bl	cfd0 <__aeabi_fmul>
    67bc:	f006 f9e4 	bl	cb88 <__aeabi_f2d>
    67c0:	9400      	str	r4, [sp, #0]
    67c2:	4602      	mov	r2, r0
    67c4:	460b      	mov	r3, r1
    67c6:	4846      	ldr	r0, [pc, #280]	; (68e0 <dashupdate()+0x2d8>)
    67c8:	f002 fff6 	bl	97b8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    67cc:	20ff      	movs	r0, #255	; 0xff
    67ce:	f004 f975 	bl	aabc <serial2_putchar>
    67d2:	20ff      	movs	r0, #255	; 0xff
    67d4:	f004 f972 	bl	aabc <serial2_putchar>
    67d8:	20ff      	movs	r0, #255	; 0xff
    67da:	f004 f96f 	bl	aabc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    67de:	210d      	movs	r1, #13
    67e0:	484c      	ldr	r0, [pc, #304]	; (6914 <dashupdate()+0x30c>)
    67e2:	f004 f9e7 	bl	abb4 <serial2_write>
  Serial2.print(bms.getHighCellVolt() * 1000, 0);
    67e6:	4844      	ldr	r0, [pc, #272]	; (68f8 <dashupdate()+0x2f0>)
    67e8:	f7fb f8c6 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    67ec:	4948      	ldr	r1, [pc, #288]	; (6910 <dashupdate()+0x308>)
    67ee:	f006 fbef 	bl	cfd0 <__aeabi_fmul>
    67f2:	f006 f9c9 	bl	cb88 <__aeabi_f2d>
    67f6:	9400      	str	r4, [sp, #0]
    67f8:	4602      	mov	r2, r0
    67fa:	460b      	mov	r3, r1
    67fc:	4838      	ldr	r0, [pc, #224]	; (68e0 <dashupdate()+0x2d8>)
    67fe:	f002 ffdb 	bl	97b8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6802:	20ff      	movs	r0, #255	; 0xff
    6804:	f004 f95a 	bl	aabc <serial2_putchar>
    6808:	20ff      	movs	r0, #255	; 0xff
    680a:	f004 f957 	bl	aabc <serial2_putchar>
    680e:	20ff      	movs	r0, #255	; 0xff
    6810:	f004 f954 	bl	aabc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6814:	4840      	ldr	r0, [pc, #256]	; (6918 <dashupdate()+0x310>)
    6816:	2109      	movs	r1, #9
    6818:	f004 f9cc 	bl	abb4 <serial2_write>
  Serial2.print(firmver);
    681c:	4b3f      	ldr	r3, [pc, #252]	; (691c <dashupdate()+0x314>)
	size_t print(int n)				{ return print((long)n); }
    681e:	4830      	ldr	r0, [pc, #192]	; (68e0 <dashupdate()+0x2d8>)
    6820:	6819      	ldr	r1, [r3, #0]
    6822:	f002 ff9d 	bl	9760 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6826:	20ff      	movs	r0, #255	; 0xff
    6828:	f004 f948 	bl	aabc <serial2_putchar>
    682c:	20ff      	movs	r0, #255	; 0xff
    682e:	f004 f945 	bl	aabc <serial2_putchar>
    6832:	20ff      	movs	r0, #255	; 0xff
    6834:	f004 f942 	bl	aabc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6838:	210e      	movs	r1, #14
    683a:	4839      	ldr	r0, [pc, #228]	; (6920 <dashupdate()+0x318>)
    683c:	f004 f9ba 	bl	abb4 <serial2_write>
  Serial2.print((bms.getHighCellVolt() - bms.getLowCellVolt()) * 1000, 0);
    6840:	482d      	ldr	r0, [pc, #180]	; (68f8 <dashupdate()+0x2f0>)
    6842:	f7fb f899 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6846:	4605      	mov	r5, r0
    6848:	482b      	ldr	r0, [pc, #172]	; (68f8 <dashupdate()+0x2f0>)
    684a:	f7fb f86f 	bl	192c <BMSModuleManager::getLowCellVolt()>
    684e:	4601      	mov	r1, r0
    6850:	4628      	mov	r0, r5
    6852:	f006 fab3 	bl	cdbc <__aeabi_fsub>
    6856:	492e      	ldr	r1, [pc, #184]	; (6910 <dashupdate()+0x308>)
    6858:	f006 fbba 	bl	cfd0 <__aeabi_fmul>
    685c:	f006 f994 	bl	cb88 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    6860:	9400      	str	r4, [sp, #0]
    6862:	4602      	mov	r2, r0
    6864:	460b      	mov	r3, r1
    6866:	481e      	ldr	r0, [pc, #120]	; (68e0 <dashupdate()+0x2d8>)
    6868:	f002 ffa6 	bl	97b8 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    686c:	20ff      	movs	r0, #255	; 0xff
    686e:	f004 f925 	bl	aabc <serial2_putchar>
    6872:	20ff      	movs	r0, #255	; 0xff
    6874:	f004 f922 	bl	aabc <serial2_putchar>
    6878:	20ff      	movs	r0, #255	; 0xff
    687a:	f004 f91f 	bl	aabc <serial2_putchar>
    687e:	20ff      	movs	r0, #255	; 0xff
}
    6880:	b003      	add	sp, #12
    6882:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    6886:	f004 b919 	b.w	aabc <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    688a:	4826      	ldr	r0, [pc, #152]	; (6924 <dashupdate()+0x31c>)
    688c:	210b      	movs	r1, #11
    688e:	f004 f991 	bl	abb4 <serial2_write>
    6892:	e6dc      	b.n	664e <dashupdate()+0x46>
    6894:	4824      	ldr	r0, [pc, #144]	; (6928 <dashupdate()+0x320>)
    6896:	2106      	movs	r1, #6
    6898:	f004 f98c 	bl	abb4 <serial2_write>
    689c:	e6d7      	b.n	664e <dashupdate()+0x46>
    689e:	4823      	ldr	r0, [pc, #140]	; (692c <dashupdate()+0x324>)
    68a0:	2107      	movs	r1, #7
    68a2:	f004 f987 	bl	abb4 <serial2_write>
    68a6:	e6d2      	b.n	664e <dashupdate()+0x46>
    68a8:	4821      	ldr	r0, [pc, #132]	; (6930 <dashupdate()+0x328>)
    68aa:	2107      	movs	r1, #7
    68ac:	f004 f982 	bl	abb4 <serial2_write>
    68b0:	e6cd      	b.n	664e <dashupdate()+0x46>
    68b2:	4820      	ldr	r0, [pc, #128]	; (6934 <dashupdate()+0x32c>)
    68b4:	2108      	movs	r1, #8
    68b6:	f004 f97d 	bl	abb4 <serial2_write>
    68ba:	e6c8      	b.n	664e <dashupdate()+0x46>
    68bc:	481e      	ldr	r0, [pc, #120]	; (6938 <dashupdate()+0x330>)
    68be:	2108      	movs	r1, #8
    68c0:	f004 f978 	bl	abb4 <serial2_write>
    68c4:	e6c3      	b.n	664e <dashupdate()+0x46>
    68c6:	bf00      	nop
    68c8:	0001506c 	.word	0x0001506c
    68cc:	1fffd0d8 	.word	0x1fffd0d8
    68d0:	1fffcf34 	.word	0x1fffcf34
    68d4:	00014328 	.word	0x00014328
    68d8:	1fff8828 	.word	0x1fff8828
    68dc:	00015084 	.word	0x00015084
    68e0:	1fff88bc 	.word	0x1fff88bc
    68e4:	00015090 	.word	0x00015090
    68e8:	0001509c 	.word	0x0001509c
    68ec:	1fffcfc4 	.word	0x1fffcfc4
    68f0:	42c80000 	.word	0x42c80000
    68f4:	000150ac 	.word	0x000150ac
    68f8:	1fff91f0 	.word	0x1fff91f0
    68fc:	000150b8 	.word	0x000150b8
    6900:	000150c8 	.word	0x000150c8
    6904:	000150d8 	.word	0x000150d8
    6908:	41200000 	.word	0x41200000
    690c:	000150e4 	.word	0x000150e4
    6910:	447a0000 	.word	0x447a0000
    6914:	000150f4 	.word	0x000150f4
    6918:	00015104 	.word	0x00015104
    691c:	1fff8858 	.word	0x1fff8858
    6920:	00015110 	.word	0x00015110
    6924:	00014308 	.word	0x00014308
    6928:	000142f8 	.word	0x000142f8
    692c:	00014300 	.word	0x00014300
    6930:	00014314 	.word	0x00014314
    6934:	0001431c 	.word	0x0001431c
    6938:	00015078 	.word	0x00015078

0000693c <chargercomms()>:
void chargercomms() {
    693c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (settings.chargertype == Elcon) {
    693e:	4eab      	ldr	r6, [pc, #684]	; (6bec <chargercomms()+0x2b0>)
    6940:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    6944:	2d04      	cmp	r5, #4
    6946:	f000 816f 	beq.w	6c28 <chargercomms()+0x2ec>
  if (settings.chargertype == Eltek) {
    694a:	2d03      	cmp	r5, #3
    694c:	f000 8124 	beq.w	6b98 <chargercomms()+0x25c>
  if (settings.chargertype == BrusaNLG5) {
    6950:	2d01      	cmp	r5, #1
    6952:	f000 80ae 	beq.w	6ab2 <chargercomms()+0x176>
  if (settings.chargertype == ChevyVolt) {
    6956:	2d02      	cmp	r5, #2
    6958:	d078      	beq.n	6a4c <chargercomms()+0x110>
  if (settings.chargertype == Coda) {
    695a:	2d06      	cmp	r5, #6
    695c:	d002      	beq.n	6964 <chargercomms()+0x28>
  if (settings.chargertype == Outlander) {
    695e:	2d08      	cmp	r5, #8
    6960:	d03e      	beq.n	69e0 <chargercomms()+0xa4>
}
    6962:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    msg.id = 0x050;
    6964:	4ca2      	ldr	r4, [pc, #648]	; (6bf0 <chargercomms()+0x2b4>)
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    6966:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.len = 8;
    6968:	2308      	movs	r3, #8
    msg.id = 0x050;
    696a:	2250      	movs	r2, #80	; 0x50
    msg.len = 8;
    696c:	71e3      	strb	r3, [r4, #7]
    msg.buf[0] = 0x00;
    696e:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
    msg.id = 0x050;
    6972:	6022      	str	r2, [r4, #0]
    msg.buf[0] = 0x00;
    6974:	8123      	strh	r3, [r4, #8]
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    6976:	f006 fad7 	bl	cf28 <__aeabi_i2f>
    697a:	6971      	ldr	r1, [r6, #20]
    697c:	f006 fb28 	bl	cfd0 <__aeabi_fmul>
    6980:	499c      	ldr	r1, [pc, #624]	; (6bf4 <chargercomms()+0x2b8>)
    6982:	4605      	mov	r5, r0
    6984:	f006 fce0 	bl	d348 <__aeabi_fcmpgt>
    6988:	2800      	cmp	r0, #0
    698a:	f040 817a 	bne.w	6c82 <chargercomms()+0x346>
    698e:	2201      	movs	r2, #1
    6990:	2390      	movs	r3, #144	; 0x90
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    6992:	72a2      	strb	r2, [r4, #10]
    if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    6994:	4a98      	ldr	r2, [pc, #608]	; (6bf8 <chargercomms()+0x2bc>)
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    6996:	72e3      	strb	r3, [r4, #11]
    msg.buf[4] = 0x00;
    6998:	2100      	movs	r1, #0
    if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    699a:	6810      	ldr	r0, [r2, #0]
    msg.buf[4] = 0x00;
    699c:	7321      	strb	r1, [r4, #12]
    if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    699e:	f006 fac3 	bl	cf28 <__aeabi_i2f>
    69a2:	4629      	mov	r1, r5
    69a4:	f006 fb14 	bl	cfd0 <__aeabi_fmul>
    69a8:	4994      	ldr	r1, [pc, #592]	; (6bfc <chargercomms()+0x2c0>)
    69aa:	4605      	mov	r5, r0
    69ac:	f006 fcae 	bl	d30c <__aeabi_fcmplt>
    69b0:	2800      	cmp	r0, #0
    69b2:	f000 817c 	beq.w	6cae <chargercomms()+0x372>
      msg.buf[5] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    69b6:	4992      	ldr	r1, [pc, #584]	; (6c00 <chargercomms()+0x2c4>)
    69b8:	4628      	mov	r0, r5
    69ba:	f006 fbbd 	bl	d138 <__aeabi_fdiv>
    69be:	f006 fcf3 	bl	d3a8 <__aeabi_f2uiz>
    69c2:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[6] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    69c6:	4618      	mov	r0, r3
    msg.buf[7] = 0x01;  //HV charging
    69c8:	2201      	movs	r2, #1
      msg.buf[5] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    69ca:	7360      	strb	r0, [r4, #13]
    Can0.write(msg);
    69cc:	4988      	ldr	r1, [pc, #544]	; (6bf0 <chargercomms()+0x2b4>)
    69ce:	488d      	ldr	r0, [pc, #564]	; (6c04 <chargercomms()+0x2c8>)
    msg.buf[7] = 0x01;  //HV charging
    69d0:	73e2      	strb	r2, [r4, #15]
      msg.buf[6] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    69d2:	73a3      	strb	r3, [r4, #14]
    Can0.write(msg);
    69d4:	f001 fdfc 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == Outlander) {
    69d8:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    69dc:	2d08      	cmp	r5, #8
    69de:	d1c0      	bne.n	6962 <chargercomms()+0x26>
    msg.id = 0x285;
    69e0:	4c83      	ldr	r4, [pc, #524]	; (6bf0 <chargercomms()+0x2b4>)
    Can0.write(msg);
    69e2:	4888      	ldr	r0, [pc, #544]	; (6c04 <chargercomms()+0x2c8>)
    msg.len = 8;
    69e4:	71e5      	strb	r5, [r4, #7]
    msg.id = 0x285;
    69e6:	f240 2385 	movw	r3, #645	; 0x285
    msg.buf[4] = 0x0;
    69ea:	2700      	movs	r7, #0
    Can0.write(msg);
    69ec:	4621      	mov	r1, r4
    msg.id = 0x285;
    69ee:	6023      	str	r3, [r4, #0]
    msg.buf[0] = 0x0;
    69f0:	f44f 0336 	mov.w	r3, #11927552	; 0xb60000
    69f4:	60a3      	str	r3, [r4, #8]
    msg.buf[4] = 0x0;
    69f6:	81a7      	strh	r7, [r4, #12]
    msg.buf[6] = 0x0;
    69f8:	73a7      	strb	r7, [r4, #14]
    Can0.write(msg);
    69fa:	f001 fde9 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    69fe:	2002      	movs	r0, #2
    6a00:	f003 fe22 	bl	a648 <delay>
    msg.id = 0x286;
    6a04:	f240 2386 	movw	r3, #646	; 0x286
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));  //volage
    6a08:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.id = 0x286;
    6a0a:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    6a0c:	71e5      	strb	r5, [r4, #7]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));  //volage
    6a0e:	f006 fa8b 	bl	cf28 <__aeabi_i2f>
    6a12:	6971      	ldr	r1, [r6, #20]
    6a14:	f006 fadc 	bl	cfd0 <__aeabi_fmul>
    6a18:	497b      	ldr	r1, [pc, #492]	; (6c08 <chargercomms()+0x2cc>)
    6a1a:	f006 fad9 	bl	cfd0 <__aeabi_fmul>
    6a1e:	f006 fcc3 	bl	d3a8 <__aeabi_f2uiz>
    if (chargecurrent / ncharger > 120) {
    6a22:	4a7a      	ldr	r2, [pc, #488]	; (6c0c <chargercomms()+0x2d0>)
    6a24:	4b74      	ldr	r3, [pc, #464]	; (6bf8 <chargercomms()+0x2bc>)
    6a26:	6811      	ldr	r1, [r2, #0]
    6a28:	681b      	ldr	r3, [r3, #0]
    6a2a:	fb93 f3f1 	sdiv	r3, r3, r1
    6a2e:	2b78      	cmp	r3, #120	; 0x78
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));  //volage
    6a30:	ba42      	rev16	r2, r0
    6a32:	bfa8      	it	ge
    6a34:	2378      	movge	r3, #120	; 0x78
    Can0.write(msg);
    6a36:	4621      	mov	r1, r4
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));  //volage
    6a38:	8122      	strh	r2, [r4, #8]
    if (chargecurrent / ncharger > 120) {
    6a3a:	72a3      	strb	r3, [r4, #10]
    msg.buf[3] = 0x0;
    6a3c:	72e7      	strb	r7, [r4, #11]
    msg.buf[4] = 0x0;
    6a3e:	81a7      	strh	r7, [r4, #12]
    msg.buf[6] = 0x0;
    6a40:	73a7      	strb	r7, [r4, #14]
    Can0.write(msg);
    6a42:	4870      	ldr	r0, [pc, #448]	; (6c04 <chargercomms()+0x2c8>)
}
    6a44:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Can0.write(msg);
    6a48:	f001 bdc2 	b.w	85d0 <FlexCAN::write(CAN_message_t const&)>
    msg.id = 0x30E;
    6a4c:	4c68      	ldr	r4, [pc, #416]	; (6bf0 <chargercomms()+0x2b4>)
    Can0.write(msg);
    6a4e:	486d      	ldr	r0, [pc, #436]	; (6c04 <chargercomms()+0x2c8>)
    msg.buf[0] = 0x02;  //only HV charging , 0x03 hv and 12V charging
    6a50:	7225      	strb	r5, [r4, #8]
    msg.id = 0x30E;
    6a52:	f240 330e 	movw	r3, #782	; 0x30e
    6a56:	6023      	str	r3, [r4, #0]
    Can0.write(msg);
    6a58:	4621      	mov	r1, r4
    msg.len = 1;
    6a5a:	2301      	movs	r3, #1
    6a5c:	71e3      	strb	r3, [r4, #7]
    Can0.write(msg);
    6a5e:	f001 fdb7 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    if ((chargecurrent * 2) > 255) {
    6a62:	4b65      	ldr	r3, [pc, #404]	; (6bf8 <chargercomms()+0x2bc>)
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    6a64:	6d70      	ldr	r0, [r6, #84]	; 0x54
    if ((chargecurrent * 2) > 255) {
    6a66:	681b      	ldr	r3, [r3, #0]
    6a68:	005b      	lsls	r3, r3, #1
    6a6a:	2bff      	cmp	r3, #255	; 0xff
    msg.len = 4;
    6a6c:	f04f 0204 	mov.w	r2, #4
      msg.buf[1] = (chargecurrent * 2);
    6a70:	bfd4      	ite	le
    6a72:	b2db      	uxtble	r3, r3
      msg.buf[1] = 255;
    6a74:	23ff      	movgt	r3, #255	; 0xff
    msg.id = 0x304;
    6a76:	f44f 7141 	mov.w	r1, #772	; 0x304
    msg.len = 4;
    6a7a:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x40;  //fixed
    6a7c:	2240      	movs	r2, #64	; 0x40
    msg.id = 0x304;
    6a7e:	6021      	str	r1, [r4, #0]
    msg.buf[0] = 0x40;  //fixed
    6a80:	7222      	strb	r2, [r4, #8]
      msg.buf[1] = (chargecurrent * 2);
    6a82:	7263      	strb	r3, [r4, #9]
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    6a84:	f006 fa50 	bl	cf28 <__aeabi_i2f>
    6a88:	6971      	ldr	r1, [r6, #20]
    6a8a:	f006 faa1 	bl	cfd0 <__aeabi_fmul>
    6a8e:	4959      	ldr	r1, [pc, #356]	; (6bf4 <chargercomms()+0x2b8>)
    6a90:	4605      	mov	r5, r0
    6a92:	f006 fc59 	bl	d348 <__aeabi_fcmpgt>
    6a96:	2800      	cmp	r0, #0
    6a98:	f040 80ff 	bne.w	6c9a <chargercomms()+0x35e>
    6a9c:	2301      	movs	r3, #1
    6a9e:	2090      	movs	r0, #144	; 0x90
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6aa0:	72e0      	strb	r0, [r4, #11]
    Can0.write(msg);
    6aa2:	4953      	ldr	r1, [pc, #332]	; (6bf0 <chargercomms()+0x2b4>)
    6aa4:	4857      	ldr	r0, [pc, #348]	; (6c04 <chargercomms()+0x2c8>)
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6aa6:	72a3      	strb	r3, [r4, #10]
    Can0.write(msg);
    6aa8:	f001 fd92 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == Coda) {
    6aac:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    6ab0:	e753      	b.n	695a <chargercomms()+0x1e>
    msg.id = chargerid1;
    6ab2:	4b57      	ldr	r3, [pc, #348]	; (6c10 <chargercomms()+0x2d4>)
    6ab4:	4c4e      	ldr	r4, [pc, #312]	; (6bf0 <chargercomms()+0x2b4>)
    6ab6:	6819      	ldr	r1, [r3, #0]
    6ab8:	6021      	str	r1, [r4, #0]
    msg.len = 7;
    6aba:	2207      	movs	r2, #7
    msg.buf[0] = 0x80;
    6abc:	2380      	movs	r3, #128	; 0x80
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6abe:	2010      	movs	r0, #16
    msg.len = 7;
    6ac0:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x80;
    6ac2:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6ac4:	f003 fd56 	bl	a574 <digitalRead>
    6ac8:	2800      	cmp	r0, #0
    6aca:	f000 80e4 	beq.w	6c96 <chargercomms()+0x35a>
      msg.buf[1] = highByte(maxac2 * 10);
    6ace:	4b51      	ldr	r3, [pc, #324]	; (6c14 <chargercomms()+0x2d8>)
    6ad0:	681b      	ldr	r3, [r3, #0]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6ad2:	4d49      	ldr	r5, [pc, #292]	; (6bf8 <chargercomms()+0x2bc>)
    6ad4:	4f4d      	ldr	r7, [pc, #308]	; (6c0c <chargercomms()+0x2d0>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6ad6:	6d70      	ldr	r0, [r6, #84]	; 0x54
      msg.buf[1] = highByte(maxac2 * 10);
    6ad8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6adc:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    6ade:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    6ae0:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[1] = highByte(maxac1 * 10);
    6ae4:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = lowByte(maxac1 * 10);
    6ae6:	72a2      	strb	r2, [r4, #10]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6ae8:	682b      	ldr	r3, [r5, #0]
    6aea:	683a      	ldr	r2, [r7, #0]
    6aec:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    6af0:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6af2:	121b      	asrs	r3, r3, #8
    6af4:	7363      	strb	r3, [r4, #13]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6af6:	f006 fa17 	bl	cf28 <__aeabi_i2f>
    6afa:	6971      	ldr	r1, [r6, #20]
    6afc:	f006 fa68 	bl	cfd0 <__aeabi_fmul>
    6b00:	4b45      	ldr	r3, [pc, #276]	; (6c18 <chargercomms()+0x2dc>)
    6b02:	6819      	ldr	r1, [r3, #0]
    6b04:	f006 f95a 	bl	cdbc <__aeabi_fsub>
    6b08:	493f      	ldr	r1, [pc, #252]	; (6c08 <chargercomms()+0x2cc>)
    6b0a:	f006 fa61 	bl	cfd0 <__aeabi_fmul>
    6b0e:	f006 fc4b 	bl	d3a8 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6b12:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6b14:	f3c0 2007 	ubfx	r0, r0, #8, #8
    Can0.write(msg);
    6b18:	4935      	ldr	r1, [pc, #212]	; (6bf0 <chargercomms()+0x2b4>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6b1a:	72e0      	strb	r0, [r4, #11]
    Can0.write(msg);
    6b1c:	4839      	ldr	r0, [pc, #228]	; (6c04 <chargercomms()+0x2c8>)
    6b1e:	f001 fd57 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    6b22:	2002      	movs	r0, #2
    6b24:	f003 fd90 	bl	a648 <delay>
    msg.id = chargerid2;
    6b28:	4b3c      	ldr	r3, [pc, #240]	; (6c1c <chargercomms()+0x2e0>)
    6b2a:	681b      	ldr	r3, [r3, #0]
    6b2c:	6023      	str	r3, [r4, #0]
    msg.len = 7;
    6b2e:	2307      	movs	r3, #7
    6b30:	71e3      	strb	r3, [r4, #7]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6b32:	2010      	movs	r0, #16
    msg.buf[0] = 0x80;
    6b34:	2380      	movs	r3, #128	; 0x80
    6b36:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6b38:	f003 fd1c 	bl	a574 <digitalRead>
    6b3c:	2800      	cmp	r0, #0
    6b3e:	f040 80b8 	bne.w	6cb2 <chargercomms()+0x376>
      msg.buf[1] = highByte(maxac1 * 10);
    6b42:	4b37      	ldr	r3, [pc, #220]	; (6c20 <chargercomms()+0x2e4>)
      msg.buf[1] = highByte(maxac2 * 10);
    6b44:	681b      	ldr	r3, [r3, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6b46:	6d70      	ldr	r0, [r6, #84]	; 0x54
      msg.buf[1] = highByte(maxac2 * 10);
    6b48:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6b4c:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    6b4e:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    6b50:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[2] = lowByte(maxac1 * 10);
    6b54:	72a2      	strb	r2, [r4, #10]
      msg.buf[1] = highByte(maxac1 * 10);
    6b56:	7263      	strb	r3, [r4, #9]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6b58:	f006 f9e6 	bl	cf28 <__aeabi_i2f>
    6b5c:	6971      	ldr	r1, [r6, #20]
    6b5e:	f006 fa37 	bl	cfd0 <__aeabi_fmul>
    6b62:	4b30      	ldr	r3, [pc, #192]	; (6c24 <chargercomms()+0x2e8>)
    6b64:	6819      	ldr	r1, [r3, #0]
    6b66:	f006 f929 	bl	cdbc <__aeabi_fsub>
    6b6a:	4927      	ldr	r1, [pc, #156]	; (6c08 <chargercomms()+0x2cc>)
    6b6c:	f006 fa30 	bl	cfd0 <__aeabi_fmul>
    6b70:	f006 fc1a 	bl	d3a8 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6b74:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6b76:	f3c0 2007 	ubfx	r0, r0, #8, #8
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6b7a:	682b      	ldr	r3, [r5, #0]
    6b7c:	683a      	ldr	r2, [r7, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6b7e:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6b80:	fb93 f3f2 	sdiv	r3, r3, r2
    Can0.write(msg);
    6b84:	491a      	ldr	r1, [pc, #104]	; (6bf0 <chargercomms()+0x2b4>)
    6b86:	481f      	ldr	r0, [pc, #124]	; (6c04 <chargercomms()+0x2c8>)
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    6b88:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6b8a:	121a      	asrs	r2, r3, #8
    6b8c:	7362      	strb	r2, [r4, #13]
    Can0.write(msg);
    6b8e:	f001 fd1f 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == ChevyVolt) {
    6b92:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    6b96:	e6de      	b.n	6956 <chargercomms()+0x1a>
    msg.id = 0x2FF;  //broadcast to all Elteks
    6b98:	4c15      	ldr	r4, [pc, #84]	; (6bf0 <chargercomms()+0x2b4>)
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6b9a:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.buf[2] = highByte(1000);
    6b9c:	72a5      	strb	r5, [r4, #10]
    msg.id = 0x2FF;  //broadcast to all Elteks
    6b9e:	f240 23ff 	movw	r3, #767	; 0x2ff
    msg.len = 7;
    6ba2:	2207      	movs	r2, #7
    msg.id = 0x2FF;  //broadcast to all Elteks
    6ba4:	6023      	str	r3, [r4, #0]
    msg.buf[0] = 0x01;
    6ba6:	f64e 0301 	movw	r3, #59393	; 0xe801
    msg.len = 7;
    6baa:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x01;
    6bac:	8123      	strh	r3, [r4, #8]
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6bae:	f006 f9bb 	bl	cf28 <__aeabi_i2f>
    6bb2:	6971      	ldr	r1, [r6, #20]
    6bb4:	f006 fa0c 	bl	cfd0 <__aeabi_fmul>
    6bb8:	4913      	ldr	r1, [pc, #76]	; (6c08 <chargercomms()+0x2cc>)
    6bba:	f006 fa09 	bl	cfd0 <__aeabi_fmul>
    6bbe:	f006 fbf3 	bl	d3a8 <__aeabi_f2uiz>
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    6bc2:	4a12      	ldr	r2, [pc, #72]	; (6c0c <chargercomms()+0x2d0>)
    6bc4:	4b0c      	ldr	r3, [pc, #48]	; (6bf8 <chargercomms()+0x2bc>)
    6bc6:	6811      	ldr	r1, [r2, #0]
    6bc8:	681b      	ldr	r3, [r3, #0]
    6bca:	fb93 f3f1 	sdiv	r3, r3, r1
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6bce:	b280      	uxth	r0, r0
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6bd0:	0a02      	lsrs	r2, r0, #8
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6bd2:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    6bd4:	7363      	strb	r3, [r4, #13]
    Can0.write(msg);
    6bd6:	480b      	ldr	r0, [pc, #44]	; (6c04 <chargercomms()+0x2c8>)
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6bd8:	7322      	strb	r2, [r4, #12]
    msg.buf[6] = highByte(chargecurrent / ncharger);
    6bda:	121b      	asrs	r3, r3, #8
    Can0.write(msg);
    6bdc:	4621      	mov	r1, r4
    msg.buf[6] = highByte(chargecurrent / ncharger);
    6bde:	73a3      	strb	r3, [r4, #14]
    Can0.write(msg);
    6be0:	f001 fcf6 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == BrusaNLG5) {
    6be4:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    6be8:	e6b2      	b.n	6950 <chargercomms()+0x14>
    6bea:	bf00      	nop
    6bec:	1fffd0d8 	.word	0x1fffd0d8
    6bf0:	1fffd034 	.word	0x1fffd034
    6bf4:	43480000 	.word	0x43480000
    6bf8:	1fffcf40 	.word	0x1fffcf40
    6bfc:	454e4000 	.word	0x454e4000
    6c00:	43700000 	.word	0x43700000
    6c04:	1fffd1cc 	.word	0x1fffd1cc
    6c08:	41200000 	.word	0x41200000
    6c0c:	1fff8864 	.word	0x1fff8864
    6c10:	1fff8840 	.word	0x1fff8840
    6c14:	1fff8860 	.word	0x1fff8860
    6c18:	1fffcf48 	.word	0x1fffcf48
    6c1c:	1fff8844 	.word	0x1fff8844
    6c20:	1fff885c 	.word	0x1fff885c
    6c24:	1fffcf44 	.word	0x1fffcf44
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    6c28:	4c23      	ldr	r4, [pc, #140]	; (6cb8 <chargercomms()+0x37c>)
    6c2a:	4a24      	ldr	r2, [pc, #144]	; (6cbc <chargercomms()+0x380>)
    msg.ext = 1;
    6c2c:	88e3      	ldrh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6c2e:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    6c30:	6022      	str	r2, [r4, #0]
    msg.ext = 1;
    6c32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    6c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    6c3a:	f043 0301 	orr.w	r3, r3, #1
    6c3e:	80e3      	strh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6c40:	f006 f972 	bl	cf28 <__aeabi_i2f>
    6c44:	6971      	ldr	r1, [r6, #20]
    6c46:	f006 f9c3 	bl	cfd0 <__aeabi_fmul>
    6c4a:	491d      	ldr	r1, [pc, #116]	; (6cc0 <chargercomms()+0x384>)
    6c4c:	f006 f9c0 	bl	cfd0 <__aeabi_fmul>
    6c50:	f006 fbaa 	bl	d3a8 <__aeabi_f2uiz>
    msg.buf[2] = highByte(chargecurrent / ncharger);
    6c54:	4b1b      	ldr	r3, [pc, #108]	; (6cc4 <chargercomms()+0x388>)
    6c56:	4a1c      	ldr	r2, [pc, #112]	; (6cc8 <chargercomms()+0x38c>)
    6c58:	681b      	ldr	r3, [r3, #0]
    6c5a:	6812      	ldr	r2, [r2, #0]
    6c5c:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6c60:	ba40      	rev16	r0, r0
    msg.buf[2] = highByte(chargecurrent / ncharger);
    6c62:	ba5b      	rev16	r3, r3
    msg.buf[4] = 0x00;
    6c64:	2700      	movs	r7, #0
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6c66:	8120      	strh	r0, [r4, #8]
    Can0.write(msg);
    6c68:	4621      	mov	r1, r4
    6c6a:	4818      	ldr	r0, [pc, #96]	; (6ccc <chargercomms()+0x390>)
    msg.buf[2] = highByte(chargecurrent / ncharger);
    6c6c:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = 0x00;
    6c6e:	60e7      	str	r7, [r4, #12]
    Can0.write(msg);
    6c70:	f001 fcae 	bl	85d0 <FlexCAN::write(CAN_message_t const&)>
    msg.ext = 0;
    6c74:	79a3      	ldrb	r3, [r4, #6]
  if (settings.chargertype == Eltek) {
    6c76:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    msg.ext = 0;
    6c7a:	f367 0300 	bfi	r3, r7, #0, #1
    6c7e:	71a3      	strb	r3, [r4, #6]
    6c80:	e663      	b.n	694a <chargercomms()+0xe>
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    6c82:	490f      	ldr	r1, [pc, #60]	; (6cc0 <chargercomms()+0x384>)
    6c84:	4628      	mov	r0, r5
    6c86:	f006 f9a3 	bl	cfd0 <__aeabi_fmul>
    6c8a:	f006 fb8d 	bl	d3a8 <__aeabi_f2uiz>
    6c8e:	f3c0 2207 	ubfx	r2, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    6c92:	b2c3      	uxtb	r3, r0
    6c94:	e67d      	b.n	6992 <chargercomms()+0x56>
      msg.buf[1] = highByte(maxac1 * 10);
    6c96:	4b0e      	ldr	r3, [pc, #56]	; (6cd0 <chargercomms()+0x394>)
    6c98:	e71a      	b.n	6ad0 <chargercomms()+0x194>
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6c9a:	4629      	mov	r1, r5
    6c9c:	4628      	mov	r0, r5
    6c9e:	f006 f88f 	bl	cdc0 <__addsf3>
    6ca2:	f006 fb81 	bl	d3a8 <__aeabi_f2uiz>
    6ca6:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6caa:	b2c0      	uxtb	r0, r0
    6cac:	e6f8      	b.n	6aa0 <chargercomms()+0x164>
    6cae:	2396      	movs	r3, #150	; 0x96
    6cb0:	e68a      	b.n	69c8 <chargercomms()+0x8c>
      msg.buf[1] = highByte(maxac2 * 10);
    6cb2:	4b08      	ldr	r3, [pc, #32]	; (6cd4 <chargercomms()+0x398>)
    6cb4:	e746      	b.n	6b44 <chargercomms()+0x208>
    6cb6:	bf00      	nop
    6cb8:	1fffd034 	.word	0x1fffd034
    6cbc:	1806e5f4 	.word	0x1806e5f4
    6cc0:	41200000 	.word	0x41200000
    6cc4:	1fffcf40 	.word	0x1fffcf40
    6cc8:	1fff8864 	.word	0x1fff8864
    6ccc:	1fffd1cc 	.word	0x1fffd1cc
    6cd0:	1fff885c 	.word	0x1fff885c
    6cd4:	1fff8860 	.word	0x1fff8860

00006cd8 <loop>:
void loop() {
    6cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (Can0.available()) {
    6cdc:	4c99      	ldr	r4, [pc, #612]	; (6f44 <loop+0x26c>)
void loop() {
    6cde:	b097      	sub	sp, #92	; 0x5c
  while (Can0.available()) {
    6ce0:	e001      	b.n	6ce6 <loop+0xe>
    canread();
    6ce2:	f7ff f8d5 	bl	5e90 <canread()>
  while (Can0.available()) {
    6ce6:	4620      	mov	r0, r4
    6ce8:	f001 fb84 	bl	83f4 <FlexCAN::available()>
    6cec:	2800      	cmp	r0, #0
    6cee:	d1f8      	bne.n	6ce2 <loop+0xa>
        virtual int available() { return usb_serial_available(); }
    6cf0:	f005 fa5c 	bl	c1ac <usb_serial_available>
  if (SERIALCONSOLE.available() > 0) {
    6cf4:	2800      	cmp	r0, #0
    6cf6:	dd01      	ble.n	6cfc <loop+0x24>
    menu();
    6cf8:	f7fd f954 	bl	3fa4 <menu()>
  if (outputcheck != 1) {
    6cfc:	4e92      	ldr	r6, [pc, #584]	; (6f48 <loop+0x270>)
    if (settings.ESSmode == 1) {
    6cfe:	4d93      	ldr	r5, [pc, #588]	; (6f4c <loop+0x274>)
  if (outputcheck != 1) {
    6d00:	6833      	ldr	r3, [r6, #0]
    6d02:	2b01      	cmp	r3, #1
    6d04:	d12e      	bne.n	6d64 <loop+0x8c>
    6d06:	4c92      	ldr	r4, [pc, #584]	; (6f50 <loop+0x278>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d08:	6823      	ldr	r3, [r4, #0]
  if (millis() - looptime > 500) {
    6d0a:	4a92      	ldr	r2, [pc, #584]	; (6f54 <loop+0x27c>)
    6d0c:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    6d0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6d10:	6811      	ldr	r1, [r2, #0]
    6d12:	1a5b      	subs	r3, r3, r1
    6d14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    6d18:	d850      	bhi.n	6dbc <loop+0xe4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d1a:	6823      	ldr	r3, [r4, #0]
  if (millis() - cleartime > 20000) {
    6d1c:	4e8e      	ldr	r6, [pc, #568]	; (6f58 <loop+0x280>)
    6d1e:	9312      	str	r3, [sp, #72]	; 0x48
    6d20:	6832      	ldr	r2, [r6, #0]
	return ret;
    6d22:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6d24:	1a9b      	subs	r3, r3, r2
    6d26:	f644 6220 	movw	r2, #20000	; 0x4e20
    6d2a:	4293      	cmp	r3, r2
    6d2c:	d82e      	bhi.n	6d8c <loop+0xb4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d2e:	6823      	ldr	r3, [r4, #0]
  if (millis() - looptime1 > settings.chargerspd) {
    6d30:	4a8a      	ldr	r2, [pc, #552]	; (6f5c <loop+0x284>)
    6d32:	9314      	str	r3, [sp, #80]	; 0x50
    6d34:	6811      	ldr	r1, [r2, #0]
	return ret;
    6d36:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6d38:	1a5b      	subs	r3, r3, r1
    6d3a:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
    6d3e:	428b      	cmp	r3, r1
    6d40:	d90d      	bls.n	6d5e <loop+0x86>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d42:	6823      	ldr	r3, [r4, #0]
    6d44:	9315      	str	r3, [sp, #84]	; 0x54
    if (settings.ESSmode == 1) {
    6d46:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	return ret;
    6d4a:	9915      	ldr	r1, [sp, #84]	; 0x54
    looptime1 = millis();
    6d4c:	6011      	str	r1, [r2, #0]
    if (settings.ESSmode == 1) {
    6d4e:	2b01      	cmp	r3, #1
    6d50:	f000 80d6 	beq.w	6f00 <loop+0x228>
      if (bmsstatus == Charge) {
    6d54:	4b82      	ldr	r3, [pc, #520]	; (6f60 <loop+0x288>)
    6d56:	781b      	ldrb	r3, [r3, #0]
    6d58:	2b03      	cmp	r3, #3
    6d5a:	f000 80d1 	beq.w	6f00 <loop+0x228>
}
    6d5e:	b017      	add	sp, #92	; 0x5c
    6d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    contcon();
    6d64:	f7fc fd36 	bl	37d4 <contcon()>
    if (settings.ESSmode == 1) {
    6d68:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
      if (bmsstatus != Error && bmsstatus != Boot) {
    6d6c:	4f7c      	ldr	r7, [pc, #496]	; (6f60 <loop+0x288>)
    if (settings.ESSmode == 1) {
    6d6e:	2c01      	cmp	r4, #1
      if (bmsstatus != Error && bmsstatus != Boot) {
    6d70:	783b      	ldrb	r3, [r7, #0]
    if (settings.ESSmode == 1) {
    6d72:	f000 810d 	beq.w	6f90 <loop+0x2b8>
      switch (bmsstatus) {
    6d76:	2b05      	cmp	r3, #5
    6d78:	f200 80a8 	bhi.w	6ecc <loop+0x1f4>
    6d7c:	e8df f013 	tbh	[pc, r3, lsl #1]
    6d80:	022f0216 	.word	0x022f0216
    6d84:	02e50296 	.word	0x02e50296
    6d88:	02b7020f 	.word	0x02b7020f
    if (bms.checkcomms()) {
    6d8c:	4875      	ldr	r0, [pc, #468]	; (6f64 <loop+0x28c>)
    6d8e:	f7fa f811 	bl	db4 <BMSModuleManager::checkcomms()>
    6d92:	2800      	cmp	r0, #0
    6d94:	f040 80a5 	bne.w	6ee2 <loop+0x20a>
      if (debug != 0) {
    6d98:	4b73      	ldr	r3, [pc, #460]	; (6f68 <loop+0x290>)
    6d9a:	681b      	ldr	r3, [r3, #0]
    6d9c:	2b00      	cmp	r3, #0
    6d9e:	f040 81eb 	bne.w	7178 <loop+0x4a0>
      bmsstatus = Error;
    6da2:	4b6f      	ldr	r3, [pc, #444]	; (6f60 <loop+0x288>)
    6da4:	2205      	movs	r2, #5
    6da6:	701a      	strb	r2, [r3, #0]
      ErrorReason = ErrorReason | 0x08;
    6da8:	4a70      	ldr	r2, [pc, #448]	; (6f6c <loop+0x294>)
    6daa:	6813      	ldr	r3, [r2, #0]
    6dac:	f043 0308 	orr.w	r3, r3, #8
    6db0:	6013      	str	r3, [r2, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6db2:	6823      	ldr	r3, [r4, #0]
    6db4:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    6db6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cleartime = millis();
    6db8:	6033      	str	r3, [r6, #0]
    6dba:	e7b8      	b.n	6d2e <loop+0x56>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6dbc:	6823      	ldr	r3, [r4, #0]
    6dbe:	930c      	str	r3, [sp, #48]	; 0x30
    if (SOCset == 1 && balancecells == 1) {
    6dc0:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 6f70 <loop+0x298>
	return ret;
    6dc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bms.getAllVoltTemp();
    6dc6:	4867      	ldr	r0, [pc, #412]	; (6f64 <loop+0x28c>)
    looptime = millis();
    6dc8:	6013      	str	r3, [r2, #0]
    bms.getAllVoltTemp();
    6dca:	f7fa fceb 	bl	17a4 <BMSModuleManager::getAllVoltTemp()>
    if (SOCset == 1 && balancecells == 1) {
    6dce:	f8da 3000 	ldr.w	r3, [sl]
    6dd2:	2b01      	cmp	r3, #1
    6dd4:	f000 815c 	beq.w	7090 <loop+0x3b8>
    if (settings.ESSmode == 1) {
    6dd8:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
    6ddc:	2a01      	cmp	r2, #1
    6dde:	f000 8094 	beq.w	6f0a <loop+0x232>
      if (SOCset != 0) {
    6de2:	2b00      	cmp	r3, #0
    6de4:	f040 815e 	bne.w	70a4 <loop+0x3cc>
    if (debug != 0) {
    6de8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 6f68 <loop+0x290>
    6dec:	4f5c      	ldr	r7, [pc, #368]	; (6f60 <loop+0x288>)
    6dee:	f8d9 3000 	ldr.w	r3, [r9]
    6df2:	b133      	cbz	r3, 6e02 <loop+0x12a>
      printbmsstat();
    6df4:	f7fb fdb8 	bl	2968 <printbmsstat()>
      bms.printPackDetails(debugdigits);
    6df8:	4b5e      	ldr	r3, [pc, #376]	; (6f74 <loop+0x29c>)
    6dfa:	485a      	ldr	r0, [pc, #360]	; (6f64 <loop+0x28c>)
    6dfc:	6819      	ldr	r1, [r3, #0]
    6dfe:	f7fa fea9 	bl	1b54 <BMSModuleManager::printPackDetails(int)>
    if (CSVdebug != 0) {
    6e02:	f8df 8174 	ldr.w	r8, [pc, #372]	; 6f78 <loop+0x2a0>
    6e06:	f8d8 3000 	ldr.w	r3, [r8]
    6e0a:	2b00      	cmp	r3, #0
    6e0c:	f040 8189 	bne.w	7122 <loop+0x44a>
    if (inputcheck != 0) {
    6e10:	4b5a      	ldr	r3, [pc, #360]	; (6f7c <loop+0x2a4>)
    6e12:	681b      	ldr	r3, [r3, #0]
    6e14:	2b00      	cmp	r3, #0
    6e16:	f040 8181 	bne.w	711c <loop+0x444>
    if (outputcheck != 0) {
    6e1a:	6833      	ldr	r3, [r6, #0]
    6e1c:	2b00      	cmp	r3, #0
    6e1e:	f000 8134 	beq.w	708a <loop+0x3b2>
      outputdebug();
    6e22:	f7ff fb73 	bl	650c <outputdebug()>
    if (cellspresent == 0 && SOCset == 1) {
    6e26:	4e56      	ldr	r6, [pc, #344]	; (6f80 <loop+0x2a8>)
    updateSOC();
    6e28:	f7fc fa62 	bl	32f0 <updateSOC()>
    currentlimit();
    6e2c:	f7ff f962 	bl	60f4 <currentlimit()>
    VEcan();
    6e30:	f7fc fe8c 	bl	3b4c <VEcan()>
    sendcommand();
    6e34:	f7ff fbc0 	bl	65b8 <sendcommand()>
    if (cellspresent == 0 && SOCset == 1) {
    6e38:	6833      	ldr	r3, [r6, #0]
      cellspresent = bms.seriescells();
    6e3a:	484a      	ldr	r0, [pc, #296]	; (6f64 <loop+0x28c>)
    if (cellspresent == 0 && SOCset == 1) {
    6e3c:	b923      	cbnz	r3, 6e48 <loop+0x170>
    6e3e:	f8da 3000 	ldr.w	r3, [sl]
    6e42:	2b01      	cmp	r3, #1
    6e44:	f000 830f 	beq.w	7466 <loop+0x78e>
      if (cellspresent != bms.seriescells() || cellspresent != (settings.Scells * settings.Pstrings))  //detect a fault in cells detected
    6e48:	f7fa fab8 	bl	13bc <BMSModuleManager::seriescells()>
    6e4c:	6833      	ldr	r3, [r6, #0]
    6e4e:	4298      	cmp	r0, r3
    6e50:	f000 8172 	beq.w	7138 <loop+0x460>
        if (debug != 0) {
    6e54:	f8d9 3000 	ldr.w	r3, [r9]
    6e58:	2b00      	cmp	r3, #0
    6e5a:	f040 817a 	bne.w	7152 <loop+0x47a>
        ErrorReason = ErrorReason | 0x04;
    6e5e:	4a43      	ldr	r2, [pc, #268]	; (6f6c <loop+0x294>)
        bmsstatus = Error;
    6e60:	2305      	movs	r3, #5
    6e62:	703b      	strb	r3, [r7, #0]
        ErrorReason = ErrorReason | 0x04;
    6e64:	6813      	ldr	r3, [r2, #0]
    6e66:	f043 0304 	orr.w	r3, r3, #4
    6e6a:	6013      	str	r3, [r2, #0]
    alarmupdate();
    6e6c:	f7fb fbd0 	bl	2610 <alarmupdate()>
    if (CSVdebug != 1) {
    6e70:	f8d8 3000 	ldr.w	r3, [r8]
    6e74:	2b01      	cmp	r3, #1
    6e76:	d001      	beq.n	6e7c <loop+0x1a4>
      dashupdate();
    6e78:	f7ff fbc6 	bl	6608 <dashupdate()>
    if (bmsstatus == Error && ErrorReason == 0) {
    6e7c:	783b      	ldrb	r3, [r7, #0]
    6e7e:	2b05      	cmp	r3, #5
    6e80:	f000 8145 	beq.w	710e <loop+0x436>
  noInterrupts();  //   No - reset WDT
    6e84:	b672      	cpsid	i
  WDOG_REFRESH = 0xA602;
    6e86:	4b3f      	ldr	r3, [pc, #252]	; (6f84 <loop+0x2ac>)
    6e88:	f24a 6102 	movw	r1, #42498	; 0xa602
  WDOG_REFRESH = 0xB480;
    6e8c:	f24b 4280 	movw	r2, #46208	; 0xb480
  WDOG_REFRESH = 0xA602;
    6e90:	8199      	strh	r1, [r3, #12]
  WDOG_REFRESH = 0xB480;
    6e92:	819a      	strh	r2, [r3, #12]
  interrupts();
    6e94:	b662      	cpsie	i
}
    6e96:	e740      	b.n	6d1a <loop+0x42>
        Discharge = 0;
    6e98:	4b3b      	ldr	r3, [pc, #236]	; (6f88 <loop+0x2b0>)
    6e9a:	2400      	movs	r4, #0
        digitalWrite(OUT4, LOW);
    6e9c:	4621      	mov	r1, r4
    6e9e:	2015      	movs	r0, #21
        Discharge = 0;
    6ea0:	601c      	str	r4, [r3, #0]
        digitalWrite(OUT4, LOW);
    6ea2:	f003 fb41 	bl	a528 <digitalWrite>
        digitalWrite(OUT3, LOW);  //turn off charger
    6ea6:	4621      	mov	r1, r4
    6ea8:	2014      	movs	r0, #20
    6eaa:	f003 fb3d 	bl	a528 <digitalWrite>
        digitalWrite(OUT2, LOW);
    6eae:	4621      	mov	r1, r4
    6eb0:	200c      	movs	r0, #12
    6eb2:	f003 fb39 	bl	a528 <digitalWrite>
        digitalWrite(OUT1, LOW);  //turn off discharge
    6eb6:	4621      	mov	r1, r4
    6eb8:	200b      	movs	r0, #11
    6eba:	f003 fb35 	bl	a528 <digitalWrite>
        contctrl = 0;             //turn off out 5 and 6
    6ebe:	4b33      	ldr	r3, [pc, #204]	; (6f8c <loop+0x2b4>)
    6ec0:	601c      	str	r4, [r3, #0]
        if (SOCset == 1) {
    6ec2:	4b2b      	ldr	r3, [pc, #172]	; (6f70 <loop+0x298>)
    6ec4:	6819      	ldr	r1, [r3, #0]
    6ec6:	2901      	cmp	r1, #1
    6ec8:	f000 826b 	beq.w	73a2 <loop+0x6ca>
    6ecc:	4c20      	ldr	r4, [pc, #128]	; (6f50 <loop+0x278>)
    if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    6ece:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    6ed2:	f023 0302 	bic.w	r3, r3, #2
    6ed6:	2b01      	cmp	r3, #1
    6ed8:	f47f af16 	bne.w	6d08 <loop+0x30>
      getcurrent();
    6edc:	f7fb ff0a 	bl	2cf4 <getcurrent()>
    6ee0:	e712      	b.n	6d08 <loop+0x30>
      ErrorReason = ErrorReason & ~0x08;
    6ee2:	4a22      	ldr	r2, [pc, #136]	; (6f6c <loop+0x294>)
    6ee4:	6813      	ldr	r3, [r2, #0]
    6ee6:	f023 0308 	bic.w	r3, r3, #8
    6eea:	6013      	str	r3, [r2, #0]
      if (bmsstatus == Error && ErrorReason == 0) {
    6eec:	4a1c      	ldr	r2, [pc, #112]	; (6f60 <loop+0x288>)
    6eee:	7811      	ldrb	r1, [r2, #0]
    6ef0:	2905      	cmp	r1, #5
    6ef2:	f47f af5e 	bne.w	6db2 <loop+0xda>
    6ef6:	2b00      	cmp	r3, #0
    6ef8:	f47f af5b 	bne.w	6db2 <loop+0xda>
        bmsstatus = Boot;
    6efc:	7013      	strb	r3, [r2, #0]
    6efe:	e758      	b.n	6db2 <loop+0xda>
}
    6f00:	b017      	add	sp, #92	; 0x5c
    6f02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      chargercomms();
    6f06:	f7ff bd19 	b.w	693c <chargercomms()>
      if (SOCset != 0) {
    6f0a:	2b00      	cmp	r3, #0
    6f0c:	f43f af6c 	beq.w	6de8 <loop+0x110>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    6f10:	4814      	ldr	r0, [pc, #80]	; (6f64 <loop+0x28c>)
    6f12:	f7fa fd0b 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6f16:	6929      	ldr	r1, [r5, #16]
    6f18:	f006 f9f8 	bl	d30c <__aeabi_fcmplt>
    6f1c:	2800      	cmp	r0, #0
    6f1e:	f000 83d0 	beq.w	76c2 <loop+0x9ea>
          if (debug != 0) {
    6f22:	f8df 9044 	ldr.w	r9, [pc, #68]	; 6f68 <loop+0x290>
    6f26:	f8d9 3000 	ldr.w	r3, [r9]
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	f040 8429 	bne.w	7782 <loop+0xaaa>
          ErrorReason = ErrorReason | 0x01;
    6f30:	4a0e      	ldr	r2, [pc, #56]	; (6f6c <loop+0x294>)
          bmsstatus = Error;
    6f32:	4f0b      	ldr	r7, [pc, #44]	; (6f60 <loop+0x288>)
          ErrorReason = ErrorReason | 0x01;
    6f34:	6813      	ldr	r3, [r2, #0]
    6f36:	f043 0301 	orr.w	r3, r3, #1
    6f3a:	6013      	str	r3, [r2, #0]
          bmsstatus = Error;
    6f3c:	2305      	movs	r3, #5
    6f3e:	703b      	strb	r3, [r7, #0]
    if (debug != 0) {
    6f40:	e75f      	b.n	6e02 <loop+0x12a>
    6f42:	bf00      	nop
    6f44:	1fffd1cc 	.word	0x1fffd1cc
    6f48:	1fffd0c4 	.word	0x1fffd0c4
    6f4c:	1fffd0d8 	.word	0x1fffd0d8
    6f50:	1fffd3c0 	.word	0x1fffd3c0
    6f54:	1fffd004 	.word	0x1fffd004
    6f58:	1fffcf4c 	.word	0x1fffcf4c
    6f5c:	1fffd008 	.word	0x1fffd008
    6f60:	1fffcf34 	.word	0x1fffcf34
    6f64:	1fff91f0 	.word	0x1fff91f0
    6f68:	1fff884c 	.word	0x1fff884c
    6f6c:	1fff91b0 	.word	0x1fff91b0
    6f70:	1fff91cc 	.word	0x1fff91cc
    6f74:	1fff8850 	.word	0x1fff8850
    6f78:	1fff91a4 	.word	0x1fff91a4
    6f7c:	1fffcff8 	.word	0x1fffcff8
    6f80:	1fffcf3c 	.word	0x1fffcf3c
    6f84:	40052000 	.word	0x40052000
    6f88:	1fff91ac 	.word	0x1fff91ac
    6f8c:	1fffcfb0 	.word	0x1fffcfb0
      if (bmsstatus != Error && bmsstatus != Boot) {
    6f90:	2b05      	cmp	r3, #5
    6f92:	d081      	beq.n	6e98 <loop+0x1c0>
    6f94:	2b00      	cmp	r3, #0
    6f96:	f43f af7f 	beq.w	6e98 <loop+0x1c0>
        contctrl = contctrl | 4;  //turn on negative contactor
    6f9a:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 725c <loop+0x584>
        if (settings.tripcont != 0) {
    6f9e:	f895 20c9 	ldrb.w	r2, [r5, #201]	; 0xc9
        contctrl = contctrl | 4;  //turn on negative contactor
    6fa2:	f8d8 3000 	ldr.w	r3, [r8]
    6fa6:	f043 0304 	orr.w	r3, r3, #4
    6faa:	f8c8 3000 	str.w	r3, [r8]
        if (settings.tripcont != 0) {
    6fae:	2a00      	cmp	r2, #0
    6fb0:	f040 8235 	bne.w	741e <loop+0x746>
    6fb4:	4caa      	ldr	r4, [pc, #680]	; (7260 <loop+0x588>)
          if (storagemode == 1) {
    6fb6:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 7264 <loop+0x58c>
        if (digitalRead(IN1) == LOW)  //Key OFF
    6fba:	2011      	movs	r0, #17
    6fbc:	f003 fada 	bl	a574 <digitalRead>
          if (storagemode == 1) {
    6fc0:	f8d9 3000 	ldr.w	r3, [r9]
        if (digitalRead(IN1) == LOW)  //Key OFF
    6fc4:	2800      	cmp	r0, #0
    6fc6:	f000 8224 	beq.w	7412 <loop+0x73a>
          if (storagemode == 0) {
    6fca:	b913      	cbnz	r3, 6fd2 <loop+0x2fa>
            storagemode = 1;
    6fcc:	2301      	movs	r3, #1
    6fce:	f8c9 3000 	str.w	r3, [r9]
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    6fd2:	48a5      	ldr	r0, [pc, #660]	; (7268 <loop+0x590>)
    6fd4:	f7fa fcd0 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6fd8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    6fda:	f006 f9b5 	bl	d348 <__aeabi_fcmpgt>
    6fde:	2800      	cmp	r0, #0
    6fe0:	f040 8277 	bne.w	74d2 <loop+0x7fa>
        if (storagemode == 1) {
    6fe4:	f8d9 9000 	ldr.w	r9, [r9]
    6fe8:	4ba0      	ldr	r3, [pc, #640]	; (726c <loop+0x594>)
    6fea:	f1b9 0f01 	cmp.w	r9, #1
    6fee:	6018      	str	r0, [r3, #0]
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0) {
    6ff0:	489d      	ldr	r0, [pc, #628]	; (7268 <loop+0x590>)
        if (storagemode == 1) {
    6ff2:	f000 8254 	beq.w	749e <loop+0x7c6>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0) {
    6ff6:	f7fa fcbf 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6ffa:	68e9      	ldr	r1, [r5, #12]
    6ffc:	f006 f9a4 	bl	d348 <__aeabi_fcmpgt>
    7000:	2800      	cmp	r0, #0
    7002:	f000 82f7 	beq.w	75f4 <loop+0x91c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7006:	6823      	ldr	r3, [r4, #0]
    7008:	9305      	str	r3, [sp, #20]
            if ((millis() - overtriptimer) > settings.triptime) {
    700a:	4b99      	ldr	r3, [pc, #612]	; (7270 <loop+0x598>)
    700c:	681a      	ldr	r2, [r3, #0]
	return ret;
    700e:	9b05      	ldr	r3, [sp, #20]
    7010:	1a9b      	subs	r3, r3, r2
    7012:	f8b5 20ca 	ldrh.w	r2, [r5, #202]	; 0xca
    7016:	4293      	cmp	r3, r2
    7018:	f200 8331 	bhi.w	767e <loop+0x9a6>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    701c:	4892      	ldr	r0, [pc, #584]	; (7268 <loop+0x590>)
    701e:	f7fa fc85 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7022:	6929      	ldr	r1, [r5, #16]
    7024:	f006 f972 	bl	d30c <__aeabi_fcmplt>
    7028:	b940      	cbnz	r0, 703c <loop+0x364>
    702a:	488f      	ldr	r0, [pc, #572]	; (7268 <loop+0x590>)
    702c:	f7fa fc7e 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7030:	69a9      	ldr	r1, [r5, #24]
    7032:	f006 f96b 	bl	d30c <__aeabi_fcmplt>
    7036:	2800      	cmp	r0, #0
    7038:	f000 8358 	beq.w	76ec <loop+0xa14>
          if (digitalRead(OUT1) == 1) {
    703c:	200b      	movs	r0, #11
    703e:	f003 fa99 	bl	a574 <digitalRead>
    7042:	2801      	cmp	r0, #1
    7044:	f000 8257 	beq.w	74f6 <loop+0x81e>
        if (SOCset == 1) {
    7048:	4b8a      	ldr	r3, [pc, #552]	; (7274 <loop+0x59c>)
    704a:	681b      	ldr	r3, [r3, #0]
    704c:	2b01      	cmp	r3, #1
    704e:	f47f af3e 	bne.w	6ece <loop+0x1f6>
          if (settings.tripcont == 0) {
    7052:	f895 30c9 	ldrb.w	r3, [r5, #201]	; 0xc9
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    7056:	4884      	ldr	r0, [pc, #528]	; (7268 <loop+0x590>)
          if (settings.tripcont == 0) {
    7058:	2b00      	cmp	r3, #0
    705a:	f040 8371 	bne.w	7740 <loop+0xa68>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    705e:	f7fa fc65 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7062:	6929      	ldr	r1, [r5, #16]
    7064:	f006 f952 	bl	d30c <__aeabi_fcmplt>
    7068:	b940      	cbnz	r0, 707c <loop+0x3a4>
    706a:	487f      	ldr	r0, [pc, #508]	; (7268 <loop+0x590>)
    706c:	f7fa fc84 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7070:	68e9      	ldr	r1, [r5, #12]
    7072:	f006 f969 	bl	d348 <__aeabi_fcmpgt>
    7076:	2800      	cmp	r0, #0
    7078:	f000 8424 	beq.w	78c4 <loop+0xbec>
              digitalWrite(OUT2, HIGH);  //trip breaker
    707c:	2101      	movs	r1, #1
    707e:	200c      	movs	r0, #12
    7080:	f003 fa52 	bl	a528 <digitalWrite>
              bmsstatus = Error;
    7084:	2305      	movs	r3, #5
    7086:	703b      	strb	r3, [r7, #0]
    7088:	e721      	b.n	6ece <loop+0x1f6>
      gaugeupdate();
    708a:	f7fb fb55 	bl	2738 <gaugeupdate()>
    708e:	e6ca      	b.n	6e26 <loop+0x14e>
    if (SOCset == 1 && balancecells == 1) {
    7090:	4b76      	ldr	r3, [pc, #472]	; (726c <loop+0x594>)
    7092:	681b      	ldr	r3, [r3, #0]
    7094:	2b01      	cmp	r3, #1
    7096:	f000 81fb 	beq.w	7490 <loop+0x7b8>
    if (settings.ESSmode == 1) {
    709a:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    709e:	2b01      	cmp	r3, #1
    70a0:	f43f af36 	beq.w	6f10 <loop+0x238>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    70a4:	4870      	ldr	r0, [pc, #448]	; (7268 <loop+0x590>)
    70a6:	f7fa fc41 	bl	192c <BMSModuleManager::getLowCellVolt()>
    70aa:	6929      	ldr	r1, [r5, #16]
    70ac:	f006 f92e 	bl	d30c <__aeabi_fcmplt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    70b0:	6823      	ldr	r3, [r4, #0]
    70b2:	2800      	cmp	r0, #0
    70b4:	f040 816b 	bne.w	738e <loop+0x6b6>
    70b8:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
    70ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
          UnderTime = millis() + settings.triptime;
    70bc:	f8b5 30ca 	ldrh.w	r3, [r5, #202]	; 0xca
    70c0:	4f6d      	ldr	r7, [pc, #436]	; (7278 <loop+0x5a0>)
    70c2:	4413      	add	r3, r2
    70c4:	4a6d      	ldr	r2, [pc, #436]	; (727c <loop+0x5a4>)
    70c6:	6013      	str	r3, [r2, #0]
        if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    70c8:	4867      	ldr	r0, [pc, #412]	; (7268 <loop+0x590>)
    70ca:	f7fa fc55 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    70ce:	6929      	ldr	r1, [r5, #16]
    70d0:	f006 f91c 	bl	d30c <__aeabi_fcmplt>
    70d4:	2800      	cmp	r0, #0
    70d6:	f000 81d1 	beq.w	747c <loop+0x7a4>
          bmsstatus = Error;
    70da:	2305      	movs	r3, #5
    70dc:	703b      	strb	r3, [r7, #0]
        if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    70de:	4862      	ldr	r0, [pc, #392]	; (7268 <loop+0x590>)
    70e0:	f7fa fc4a 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    70e4:	68e9      	ldr	r1, [r5, #12]
    70e6:	f006 f92f 	bl	d348 <__aeabi_fcmpgt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    70ea:	6823      	ldr	r3, [r4, #0]
    70ec:	2800      	cmp	r0, #0
    70ee:	f000 81ae 	beq.w	744e <loop+0x776>
    70f2:	930f      	str	r3, [sp, #60]	; 0x3c
          if (OverTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    70f4:	4b62      	ldr	r3, [pc, #392]	; (7280 <loop+0x5a8>)
    if (debug != 0) {
    70f6:	f8df 918c 	ldr.w	r9, [pc, #396]	; 7284 <loop+0x5ac>
          if (OverTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    70fa:	681a      	ldr	r2, [r3, #0]
	return ret;
    70fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    70fe:	429a      	cmp	r2, r3
    7100:	f080 81ae 	bcs.w	7460 <loop+0x788>
            bmsstatus = Error;
    7104:	2305      	movs	r3, #5
    7106:	703b      	strb	r3, [r7, #0]
    if (debug != 0) {
    7108:	f8d9 3000 	ldr.w	r3, [r9]
    710c:	e671      	b.n	6df2 <loop+0x11a>
    if (bmsstatus == Error && ErrorReason == 0) {
    710e:	4b5e      	ldr	r3, [pc, #376]	; (7288 <loop+0x5b0>)
    7110:	681b      	ldr	r3, [r3, #0]
    7112:	2b00      	cmp	r3, #0
    7114:	f47f aeb6 	bne.w	6e84 <loop+0x1ac>
      bmsstatus = Boot;
    7118:	703b      	strb	r3, [r7, #0]
    711a:	e6b3      	b.n	6e84 <loop+0x1ac>
      inputdebug();
    711c:	f7ff f990 	bl	6440 <inputdebug()>
    7120:	e67b      	b.n	6e1a <loop+0x142>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7122:	6823      	ldr	r3, [r4, #0]
    7124:	9311      	str	r3, [sp, #68]	; 0x44
      bms.printAllCSV(millis(), currentact, SOC);
    7126:	4a59      	ldr	r2, [pc, #356]	; (728c <loop+0x5b4>)
    7128:	4b59      	ldr	r3, [pc, #356]	; (7290 <loop+0x5b8>)
	return ret;
    712a:	9911      	ldr	r1, [sp, #68]	; 0x44
    712c:	681b      	ldr	r3, [r3, #0]
    712e:	6812      	ldr	r2, [r2, #0]
    7130:	484d      	ldr	r0, [pc, #308]	; (7268 <loop+0x590>)
    7132:	f7fa fe79 	bl	1e28 <BMSModuleManager::printAllCSV(unsigned long, float, int)>
    7136:	e66b      	b.n	6e10 <loop+0x138>
      if (cellspresent != bms.seriescells() || cellspresent != (settings.Scells * settings.Pstrings))  //detect a fault in cells detected
    7138:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    713a:	6daa      	ldr	r2, [r5, #88]	; 0x58
    713c:	fb02 f303 	mul.w	r3, r2, r3
    7140:	4298      	cmp	r0, r3
    7142:	f47f ae87 	bne.w	6e54 <loop+0x17c>
        ErrorReason = ErrorReason & ~0x04;
    7146:	4a50      	ldr	r2, [pc, #320]	; (7288 <loop+0x5b0>)
    7148:	6813      	ldr	r3, [r2, #0]
    714a:	f023 0304 	bic.w	r3, r3, #4
    714e:	6013      	str	r3, [r2, #0]
    7150:	e68c      	b.n	6e6c <loop+0x194>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7152:	2102      	movs	r1, #2
    7154:	484f      	ldr	r0, [pc, #316]	; (7294 <loop+0x5bc>)
    7156:	f005 f85b 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    715a:	484f      	ldr	r0, [pc, #316]	; (7298 <loop+0x5c0>)
    715c:	f002 fb08 	bl	9770 <Print::println()>
    7160:	211d      	movs	r1, #29
    7162:	484e      	ldr	r0, [pc, #312]	; (729c <loop+0x5c4>)
    7164:	f005 f854 	bl	c210 <usb_serial_write>
    7168:	2102      	movs	r1, #2
    716a:	484a      	ldr	r0, [pc, #296]	; (7294 <loop+0x5bc>)
    716c:	f005 f850 	bl	c210 <usb_serial_write>
    7170:	4849      	ldr	r0, [pc, #292]	; (7298 <loop+0x5c0>)
    7172:	f002 fafd 	bl	9770 <Print::println()>
    7176:	e672      	b.n	6e5e <loop+0x186>
    7178:	2102      	movs	r1, #2
    717a:	4846      	ldr	r0, [pc, #280]	; (7294 <loop+0x5bc>)
    717c:	f005 f848 	bl	c210 <usb_serial_write>
    7180:	4845      	ldr	r0, [pc, #276]	; (7298 <loop+0x5c0>)
    7182:	f002 faf5 	bl	9770 <Print::println()>
    7186:	2119      	movs	r1, #25
    7188:	4845      	ldr	r0, [pc, #276]	; (72a0 <loop+0x5c8>)
    718a:	f005 f841 	bl	c210 <usb_serial_write>
    718e:	2102      	movs	r1, #2
    7190:	4840      	ldr	r0, [pc, #256]	; (7294 <loop+0x5bc>)
    7192:	f005 f83d 	bl	c210 <usb_serial_write>
    7196:	4840      	ldr	r0, [pc, #256]	; (7298 <loop+0x5c0>)
    7198:	f002 faea 	bl	9770 <Print::println()>
    719c:	e601      	b.n	6da2 <loop+0xca>
          Discharge = 0;
    719e:	4b41      	ldr	r3, [pc, #260]	; (72a4 <loop+0x5cc>)
    71a0:	4c2f      	ldr	r4, [pc, #188]	; (7260 <loop+0x588>)
    71a2:	2200      	movs	r2, #0
    71a4:	601a      	str	r2, [r3, #0]
          Prechargecon();
    71a6:	f7fc faa3 	bl	36f0 <Prechargecon()>
          break;
    71aa:	e690      	b.n	6ece <loop+0x1f6>
          Discharge = 0;
    71ac:	4b3d      	ldr	r3, [pc, #244]	; (72a4 <loop+0x5cc>)
    71ae:	2400      	movs	r4, #0
          digitalWrite(OUT4, LOW);
    71b0:	4621      	mov	r1, r4
    71b2:	2015      	movs	r0, #21
          Discharge = 0;
    71b4:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    71b6:	f003 f9b7 	bl	a528 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    71ba:	4621      	mov	r1, r4
    71bc:	2014      	movs	r0, #20
    71be:	f003 f9b3 	bl	a528 <digitalWrite>
          digitalWrite(OUT2, LOW);
    71c2:	4621      	mov	r1, r4
    71c4:	200c      	movs	r0, #12
    71c6:	f003 f9af 	bl	a528 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    71ca:	4621      	mov	r1, r4
    71cc:	200b      	movs	r0, #11
    71ce:	f003 f9ab 	bl	a528 <digitalWrite>
          contctrl = 0;
    71d2:	4b22      	ldr	r3, [pc, #136]	; (725c <loop+0x584>)
    71d4:	601c      	str	r4, [r3, #0]
          bmsstatus = Ready;
    71d6:	2301      	movs	r3, #1
    71d8:	4c21      	ldr	r4, [pc, #132]	; (7260 <loop+0x588>)
    71da:	703b      	strb	r3, [r7, #0]
          break;
    71dc:	e677      	b.n	6ece <loop+0x1f6>
          Discharge = 0;
    71de:	4b31      	ldr	r3, [pc, #196]	; (72a4 <loop+0x5cc>)
    71e0:	2400      	movs	r4, #0
          digitalWrite(OUT4, LOW);
    71e2:	4621      	mov	r1, r4
    71e4:	2015      	movs	r0, #21
          Discharge = 0;
    71e6:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    71e8:	f003 f99e 	bl	a528 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    71ec:	4621      	mov	r1, r4
    71ee:	2014      	movs	r0, #20
    71f0:	f003 f99a 	bl	a528 <digitalWrite>
          digitalWrite(OUT2, LOW);
    71f4:	4621      	mov	r1, r4
    71f6:	200c      	movs	r0, #12
    71f8:	f003 f996 	bl	a528 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    71fc:	4621      	mov	r1, r4
    71fe:	200b      	movs	r0, #11
    7200:	f003 f992 	bl	a528 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    7204:	4b15      	ldr	r3, [pc, #84]	; (725c <loop+0x584>)
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    7206:	4818      	ldr	r0, [pc, #96]	; (7268 <loop+0x590>)
          contctrl = 0;             //turn off out 5 and 6
    7208:	601c      	str	r4, [r3, #0]
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    720a:	f7fa fbb5 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    720e:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    7210:	f006 f89a 	bl	d348 <__aeabi_fcmpgt>
    7214:	2800      	cmp	r0, #0
    7216:	f040 81db 	bne.w	75d0 <loop+0x8f8>
    721a:	4b14      	ldr	r3, [pc, #80]	; (726c <loop+0x594>)
    721c:	6018      	str	r0, [r3, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    721e:	2012      	movs	r0, #18
    7220:	f003 f9a8 	bl	a574 <digitalRead>
    7224:	2801      	cmp	r0, #1
    7226:	f000 82ca 	beq.w	77be <loop+0xae6>
    722a:	4c0d      	ldr	r4, [pc, #52]	; (7260 <loop+0x588>)
          if (digitalRead(IN1) == HIGH && bms.getLowCellVolt() > settings.DischVsetpoint)  //detect Key ON
    722c:	2011      	movs	r0, #17
    722e:	f003 f9a1 	bl	a574 <digitalRead>
    7232:	2801      	cmp	r0, #1
    7234:	f47f ae4b 	bne.w	6ece <loop+0x1f6>
    7238:	480b      	ldr	r0, [pc, #44]	; (7268 <loop+0x590>)
    723a:	f7fa fb77 	bl	192c <BMSModuleManager::getLowCellVolt()>
    723e:	69a9      	ldr	r1, [r5, #24]
    7240:	f006 f882 	bl	d348 <__aeabi_fcmpgt>
    7244:	2800      	cmp	r0, #0
    7246:	f43f ae42 	beq.w	6ece <loop+0x1f6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    724a:	6822      	ldr	r2, [r4, #0]
    724c:	920a      	str	r2, [sp, #40]	; 0x28
            bmsstatus = Precharge;
    724e:	2304      	movs	r3, #4
    7250:	703b      	strb	r3, [r7, #0]
            Pretimer = millis();
    7252:	4b15      	ldr	r3, [pc, #84]	; (72a8 <loop+0x5d0>)
	return ret;
    7254:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    7256:	601a      	str	r2, [r3, #0]
    7258:	e639      	b.n	6ece <loop+0x1f6>
    725a:	bf00      	nop
    725c:	1fffcfb0 	.word	0x1fffcfb0
    7260:	1fffd3c0 	.word	0x1fffd3c0
    7264:	1fffd1b0 	.word	0x1fffd1b0
    7268:	1fff91f0 	.word	0x1fff91f0
    726c:	1fff91e8 	.word	0x1fff91e8
    7270:	1fffd0cc 	.word	0x1fffd0cc
    7274:	1fff91cc 	.word	0x1fff91cc
    7278:	1fffcf34 	.word	0x1fffcf34
    727c:	1fff91d4 	.word	0x1fff91d4
    7280:	1fff91b4 	.word	0x1fff91b4
    7284:	1fff884c 	.word	0x1fff884c
    7288:	1fff91b0 	.word	0x1fff91b0
    728c:	1fffcfc4 	.word	0x1fffcfc4
    7290:	1fff8828 	.word	0x1fff8828
    7294:	00015030 	.word	0x00015030
    7298:	1fff89fc 	.word	0x1fff89fc
    729c:	000151c4 	.word	0x000151c4
    72a0:	000151e4 	.word	0x000151e4
    72a4:	1fff91ac 	.word	0x1fff91ac
    72a8:	1fff91b8 	.word	0x1fff91b8
          Discharge = 1;
    72ac:	4ba3      	ldr	r3, [pc, #652]	; (753c <loop+0x864>)
    72ae:	2401      	movs	r4, #1
          if (digitalRead(IN1) == LOW)  //Key OFF
    72b0:	2011      	movs	r0, #17
          Discharge = 1;
    72b2:	601c      	str	r4, [r3, #0]
          if (digitalRead(IN1) == LOW)  //Key OFF
    72b4:	f003 f95e 	bl	a574 <digitalRead>
    72b8:	b900      	cbnz	r0, 72bc <loop+0x5e4>
            bmsstatus = Ready;
    72ba:	703c      	strb	r4, [r7, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    72bc:	2012      	movs	r0, #18
    72be:	f003 f959 	bl	a574 <digitalRead>
    72c2:	2801      	cmp	r0, #1
    72c4:	f47f ae02 	bne.w	6ecc <loop+0x1f4>
    72c8:	489d      	ldr	r0, [pc, #628]	; (7540 <loop+0x868>)
    72ca:	f7fa fb55 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    72ce:	69e9      	ldr	r1, [r5, #28]
    72d0:	4604      	mov	r4, r0
    72d2:	6968      	ldr	r0, [r5, #20]
    72d4:	f005 fd72 	bl	cdbc <__aeabi_fsub>
    72d8:	4601      	mov	r1, r0
    72da:	4620      	mov	r0, r4
    72dc:	f006 f816 	bl	d30c <__aeabi_fcmplt>
    72e0:	2800      	cmp	r0, #0
    72e2:	f43f adf3 	beq.w	6ecc <loop+0x1f4>
            bmsstatus = Charge;
    72e6:	2303      	movs	r3, #3
    72e8:	4c96      	ldr	r4, [pc, #600]	; (7544 <loop+0x86c>)
    72ea:	703b      	strb	r3, [r7, #0]
    72ec:	e5ef      	b.n	6ece <loop+0x1f6>
          Discharge = 0;
    72ee:	4b93      	ldr	r3, [pc, #588]	; (753c <loop+0x864>)
    72f0:	2400      	movs	r4, #0
          digitalWrite(OUT4, LOW);
    72f2:	4621      	mov	r1, r4
    72f4:	2015      	movs	r0, #21
          Discharge = 0;
    72f6:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    72f8:	f003 f916 	bl	a528 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    72fc:	4621      	mov	r1, r4
    72fe:	2014      	movs	r0, #20
    7300:	f003 f912 	bl	a528 <digitalWrite>
          digitalWrite(OUT2, LOW);
    7304:	4621      	mov	r1, r4
    7306:	200c      	movs	r0, #12
    7308:	f003 f90e 	bl	a528 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    730c:	4621      	mov	r1, r4
    730e:	200b      	movs	r0, #11
    7310:	f003 f90a 	bl	a528 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    7314:	4b8c      	ldr	r3, [pc, #560]	; (7548 <loop+0x870>)
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    7316:	488a      	ldr	r0, [pc, #552]	; (7540 <loop+0x868>)
          contctrl = 0;             //turn off out 5 and 6
    7318:	601c      	str	r4, [r3, #0]
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    731a:	f7fa fb07 	bl	192c <BMSModuleManager::getLowCellVolt()>
    731e:	6929      	ldr	r1, [r5, #16]
    7320:	f006 f808 	bl	d334 <__aeabi_fcmpge>
    7324:	2800      	cmp	r0, #0
    7326:	f43f add1 	beq.w	6ecc <loop+0x1f4>
    732a:	4885      	ldr	r0, [pc, #532]	; (7540 <loop+0x868>)
    732c:	f7fa fb24 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7330:	68e9      	ldr	r1, [r5, #12]
    7332:	f005 fff5 	bl	d320 <__aeabi_fcmple>
    7336:	2800      	cmp	r0, #0
    7338:	f43f adc8 	beq.w	6ecc <loop+0x1f4>
    733c:	2011      	movs	r0, #17
    733e:	f003 f919 	bl	a574 <digitalRead>
    7342:	2800      	cmp	r0, #0
    7344:	f43f af47 	beq.w	71d6 <loop+0x4fe>
    7348:	e5c0      	b.n	6ecc <loop+0x1f4>
          Discharge = 0;
    734a:	4b7c      	ldr	r3, [pc, #496]	; (753c <loop+0x864>)
    734c:	4c7f      	ldr	r4, [pc, #508]	; (754c <loop+0x874>)
    734e:	2200      	movs	r2, #0
          digitalWrite(OUT3, HIGH);  //enable charger
    7350:	2101      	movs	r1, #1
    7352:	2014      	movs	r0, #20
          Discharge = 0;
    7354:	601a      	str	r2, [r3, #0]
          digitalWrite(OUT3, HIGH);  //enable charger
    7356:	f003 f8e7 	bl	a528 <digitalWrite>
          if (bms.getHighCellVolt() > settings.balanceVoltage) {
    735a:	4879      	ldr	r0, [pc, #484]	; (7540 <loop+0x868>)
    735c:	f7fa fb0c 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7360:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    7362:	f005 fff1 	bl	d348 <__aeabi_fcmpgt>
    7366:	3800      	subs	r0, #0
    7368:	bf18      	it	ne
    736a:	2001      	movne	r0, #1
    736c:	6020      	str	r0, [r4, #0]
          if (bms.getHighCellVolt() > settings.ChargeVsetpoint) {
    736e:	4874      	ldr	r0, [pc, #464]	; (7540 <loop+0x868>)
    7370:	f7fa fb02 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7374:	6969      	ldr	r1, [r5, #20]
    7376:	f005 ffe7 	bl	d348 <__aeabi_fcmpgt>
    737a:	2800      	cmp	r0, #0
    737c:	f040 8100 	bne.w	7580 <loop+0x8a8>
          if (digitalRead(IN3) == LOW)  //detect AC not present for charging
    7380:	2012      	movs	r0, #18
    7382:	f003 f8f7 	bl	a574 <digitalRead>
    7386:	2800      	cmp	r0, #0
    7388:	f43f af25 	beq.w	71d6 <loop+0x4fe>
    738c:	e59e      	b.n	6ecc <loop+0x1f4>
          if (UnderTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    738e:	4a70      	ldr	r2, [pc, #448]	; (7550 <loop+0x878>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7390:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    7392:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7394:	6812      	ldr	r2, [r2, #0]
            bmsstatus = Error;
    7396:	4f6f      	ldr	r7, [pc, #444]	; (7554 <loop+0x87c>)
          if (UnderTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    7398:	429a      	cmp	r2, r3
            bmsstatus = Error;
    739a:	bf3c      	itt	cc
    739c:	2305      	movcc	r3, #5
    739e:	703b      	strbcc	r3, [r7, #0]
    73a0:	e692      	b.n	70c8 <loop+0x3f0>
          if (settings.tripcont == 0) {
    73a2:	f895 30c9 	ldrb.w	r3, [r5, #201]	; 0xc9
    73a6:	2b00      	cmp	r3, #0
    73a8:	f040 80bf 	bne.w	752a <loop+0x852>
            digitalWrite(OUT2, HIGH);  //trip breaker
    73ac:	200c      	movs	r0, #12
    73ae:	f003 f8bb 	bl	a528 <digitalWrite>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint && bms.getHighTemperature() < settings.OverTSetpoint && cellspresent == bms.seriescells() && cellspresent == (settings.Scells * settings.Pstrings)) {
    73b2:	4863      	ldr	r0, [pc, #396]	; (7540 <loop+0x868>)
    73b4:	f7fa faba 	bl	192c <BMSModuleManager::getLowCellVolt()>
    73b8:	6929      	ldr	r1, [r5, #16]
    73ba:	f005 ffc5 	bl	d348 <__aeabi_fcmpgt>
    73be:	2800      	cmp	r0, #0
    73c0:	f43f ad84 	beq.w	6ecc <loop+0x1f4>
    73c4:	485e      	ldr	r0, [pc, #376]	; (7540 <loop+0x868>)
    73c6:	f7fa fad7 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    73ca:	68e9      	ldr	r1, [r5, #12]
    73cc:	f005 ff9e 	bl	d30c <__aeabi_fcmplt>
    73d0:	2800      	cmp	r0, #0
    73d2:	f43f ad7b 	beq.w	6ecc <loop+0x1f4>
    73d6:	485a      	ldr	r0, [pc, #360]	; (7540 <loop+0x868>)
    73d8:	f7fa fb7e 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    73dc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    73de:	f005 ff95 	bl	d30c <__aeabi_fcmplt>
    73e2:	2800      	cmp	r0, #0
    73e4:	f43f ad72 	beq.w	6ecc <loop+0x1f4>
    73e8:	4855      	ldr	r0, [pc, #340]	; (7540 <loop+0x868>)
    73ea:	f7f9 ffe7 	bl	13bc <BMSModuleManager::seriescells()>
    73ee:	4a5a      	ldr	r2, [pc, #360]	; (7558 <loop+0x880>)
    73f0:	6812      	ldr	r2, [r2, #0]
    73f2:	4290      	cmp	r0, r2
    73f4:	f47f ad6a 	bne.w	6ecc <loop+0x1f4>
    73f8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    73fa:	6da9      	ldr	r1, [r5, #88]	; 0x58
    73fc:	fb01 f202 	mul.w	r2, r1, r2
    7400:	4290      	cmp	r0, r2
    7402:	f47f ad63 	bne.w	6ecc <loop+0x1f4>
            if (ErrorReason == 0) {
    7406:	4b55      	ldr	r3, [pc, #340]	; (755c <loop+0x884>)
    7408:	681b      	ldr	r3, [r3, #0]
    740a:	2b00      	cmp	r3, #0
    740c:	f43f aee3 	beq.w	71d6 <loop+0x4fe>
    7410:	e55c      	b.n	6ecc <loop+0x1f4>
          if (storagemode == 1) {
    7412:	2b01      	cmp	r3, #1
    7414:	f47f addd 	bne.w	6fd2 <loop+0x2fa>
            storagemode = 0;
    7418:	f8c9 0000 	str.w	r0, [r9]
    741c:	e5d9      	b.n	6fd2 <loop+0x2fa>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    741e:	4848      	ldr	r0, [pc, #288]	; (7540 <loop+0x868>)
    7420:	f7fa fa84 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7424:	6929      	ldr	r1, [r5, #16]
    7426:	f005 ff8f 	bl	d348 <__aeabi_fcmpgt>
    742a:	b140      	cbz	r0, 743e <loop+0x766>
    742c:	4844      	ldr	r0, [pc, #272]	; (7540 <loop+0x868>)
    742e:	f7fa faa3 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7432:	68e9      	ldr	r1, [r5, #12]
    7434:	f005 ff6a 	bl	d30c <__aeabi_fcmplt>
    7438:	2800      	cmp	r0, #0
    743a:	f040 81d8 	bne.w	77ee <loop+0xb16>
            digitalWrite(OUT4, LOW);  //ensure precharge is low
    743e:	2100      	movs	r1, #0
    7440:	2015      	movs	r0, #21
    7442:	f003 f871 	bl	a528 <digitalWrite>
            mainconttimer = 0;
    7446:	4b46      	ldr	r3, [pc, #280]	; (7560 <loop+0x888>)
    7448:	2200      	movs	r2, #0
    744a:	601a      	str	r2, [r3, #0]
    744c:	e5b2      	b.n	6fb4 <loop+0x2dc>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    744e:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    7450:	9a10      	ldr	r2, [sp, #64]	; 0x40
          OverTime = millis() + settings.triptime;
    7452:	f8b5 30ca 	ldrh.w	r3, [r5, #202]	; 0xca
    if (debug != 0) {
    7456:	f8df 910c 	ldr.w	r9, [pc, #268]	; 7564 <loop+0x88c>
          OverTime = millis() + settings.triptime;
    745a:	4413      	add	r3, r2
    745c:	4a42      	ldr	r2, [pc, #264]	; (7568 <loop+0x890>)
    745e:	6013      	str	r3, [r2, #0]
    if (debug != 0) {
    7460:	f8d9 3000 	ldr.w	r3, [r9]
    7464:	e4c5      	b.n	6df2 <loop+0x11a>
      cellspresent = bms.seriescells();
    7466:	f7f9 ffa9 	bl	13bc <BMSModuleManager::seriescells()>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    746a:	6d2b      	ldr	r3, [r5, #80]	; 0x50
      cellspresent = bms.seriescells();
    746c:	6030      	str	r0, [r6, #0]
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    746e:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    7470:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    7474:	4832      	ldr	r0, [pc, #200]	; (7540 <loop+0x868>)
    7476:	f7fa faad 	bl	19d4 <BMSModuleManager::setSensors(int, float, float)>
    747a:	e4f7      	b.n	6e6c <loop+0x194>
        if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    747c:	4830      	ldr	r0, [pc, #192]	; (7540 <loop+0x868>)
    747e:	f7fa fb2b 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    7482:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    7484:	f005 ff60 	bl	d348 <__aeabi_fcmpgt>
    7488:	2800      	cmp	r0, #0
    748a:	f47f ae26 	bne.w	70da <loop+0x402>
    748e:	e626      	b.n	70de <loop+0x406>
      bms.balanceCells(0);  //1 is debug
    7490:	482b      	ldr	r0, [pc, #172]	; (7540 <loop+0x868>)
    7492:	2100      	movs	r1, #0
    7494:	f7f9 fcb6 	bl	e04 <BMSModuleManager::balanceCells(int)>
      if (SOCset != 0) {
    7498:	f8da 3000 	ldr.w	r3, [sl]
    749c:	e49c      	b.n	6dd8 <loop+0x100>
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0) {
    749e:	f7fa fa6b 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    74a2:	6a29      	ldr	r1, [r5, #32]
    74a4:	f005 ff50 	bl	d348 <__aeabi_fcmpgt>
    74a8:	4682      	mov	sl, r0
    74aa:	2800      	cmp	r0, #0
    74ac:	f040 80cb 	bne.w	7646 <loop+0x96e>
    74b0:	4b2e      	ldr	r3, [pc, #184]	; (756c <loop+0x894>)
    74b2:	681b      	ldr	r3, [r3, #0]
    74b4:	2b00      	cmp	r3, #0
    74b6:	f000 80c6 	beq.w	7646 <loop+0x96e>
            if (Charged == 1) {
    74ba:	4b2d      	ldr	r3, [pc, #180]	; (7570 <loop+0x898>)
    74bc:	f8d3 b000 	ldr.w	fp, [r3]
    74c0:	f1bb 0f01 	cmp.w	fp, #1
    74c4:	f000 81e6 	beq.w	7894 <loop+0xbbc>
                digitalWrite(OUT3, HIGH);  //turn on charger
    74c8:	2101      	movs	r1, #1
    74ca:	2014      	movs	r0, #20
    74cc:	f003 f82c 	bl	a528 <digitalWrite>
    74d0:	e5a4      	b.n	701c <loop+0x344>
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    74d2:	481b      	ldr	r0, [pc, #108]	; (7540 <loop+0x868>)
    74d4:	f7fa fa50 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    74d8:	4682      	mov	sl, r0
    74da:	4819      	ldr	r0, [pc, #100]	; (7540 <loop+0x868>)
    74dc:	f7fa fa26 	bl	192c <BMSModuleManager::getLowCellVolt()>
    74e0:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    74e2:	f005 fc6d 	bl	cdc0 <__addsf3>
    74e6:	4601      	mov	r1, r0
    74e8:	4650      	mov	r0, sl
    74ea:	f005 ff2d 	bl	d348 <__aeabi_fcmpgt>
    74ee:	3800      	subs	r0, #0
    74f0:	bf18      	it	ne
    74f2:	2001      	movne	r0, #1
    74f4:	e576      	b.n	6fe4 <loop+0x30c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    74f6:	6823      	ldr	r3, [r4, #0]
    74f8:	9307      	str	r3, [sp, #28]
            if ((millis() - undertriptimer) > settings.triptime) {
    74fa:	4b1e      	ldr	r3, [pc, #120]	; (7574 <loop+0x89c>)
    74fc:	681a      	ldr	r2, [r3, #0]
	return ret;
    74fe:	9b07      	ldr	r3, [sp, #28]
    7500:	1a9b      	subs	r3, r3, r2
    7502:	f8b5 20ca 	ldrh.w	r2, [r5, #202]	; 0xca
    7506:	4293      	cmp	r3, r2
    7508:	f67f ad9e 	bls.w	7048 <loop+0x370>
              Serial.println();
    750c:	481a      	ldr	r0, [pc, #104]	; (7578 <loop+0x8a0>)
    750e:	f002 f92f 	bl	9770 <Print::println()>
    7512:	2112      	movs	r1, #18
    7514:	4819      	ldr	r0, [pc, #100]	; (757c <loop+0x8a4>)
    7516:	f004 fe7b 	bl	c210 <usb_serial_write>
    751a:	4817      	ldr	r0, [pc, #92]	; (7578 <loop+0x8a0>)
    751c:	f002 f928 	bl	9770 <Print::println()>
              digitalWrite(OUT1, LOW);  //turn off discharge
    7520:	2100      	movs	r1, #0
    7522:	200b      	movs	r0, #11
    7524:	f003 f800 	bl	a528 <digitalWrite>
    7528:	e58e      	b.n	7048 <loop+0x370>
            digitalWrite(OUT2, LOW);  //turn off contactor
    752a:	4621      	mov	r1, r4
    752c:	200c      	movs	r0, #12
    752e:	f002 fffb 	bl	a528 <digitalWrite>
            digitalWrite(OUT4, LOW);  //ensure precharge is low
    7532:	4621      	mov	r1, r4
    7534:	2015      	movs	r0, #21
    7536:	f002 fff7 	bl	a528 <digitalWrite>
    753a:	e73a      	b.n	73b2 <loop+0x6da>
    753c:	1fff91ac 	.word	0x1fff91ac
    7540:	1fff91f0 	.word	0x1fff91f0
    7544:	1fffd3c0 	.word	0x1fffd3c0
    7548:	1fffcfb0 	.word	0x1fffcfb0
    754c:	1fff91e8 	.word	0x1fff91e8
    7550:	1fff91d4 	.word	0x1fff91d4
    7554:	1fffcf34 	.word	0x1fffcf34
    7558:	1fffcf3c 	.word	0x1fffcf3c
    755c:	1fff91b0 	.word	0x1fff91b0
    7560:	1fffd02c 	.word	0x1fffd02c
    7564:	1fff884c 	.word	0x1fff884c
    7568:	1fff91b4 	.word	0x1fff91b4
    756c:	1fffcf40 	.word	0x1fffcf40
    7570:	1fff91a8 	.word	0x1fff91a8
    7574:	1fffd1b4 	.word	0x1fffd1b4
    7578:	1fff89fc 	.word	0x1fff89fc
    757c:	00015174 	.word	0x00015174
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    7580:	48b0      	ldr	r0, [pc, #704]	; (7844 <loop+0xb6c>)
    7582:	f7fa faad 	bl	1ae0 <BMSModuleManager::getAvgCellVolt()>
    7586:	69e9      	ldr	r1, [r5, #28]
    7588:	4604      	mov	r4, r0
    758a:	6968      	ldr	r0, [r5, #20]
    758c:	f005 fc16 	bl	cdbc <__aeabi_fsub>
    7590:	4601      	mov	r1, r0
    7592:	4620      	mov	r0, r4
    7594:	f005 fed8 	bl	d348 <__aeabi_fcmpgt>
    SOC = 100;
    7598:	4bab      	ldr	r3, [pc, #684]	; (7848 <loop+0xb70>)
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    759a:	2800      	cmp	r0, #0
    759c:	f000 8125 	beq.w	77ea <loop+0xb12>
    SOC = 100;
    75a0:	2264      	movs	r2, #100	; 0x64
    SOC = 95;
    75a2:	601a      	str	r2, [r3, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    75a4:	6daa      	ldr	r2, [r5, #88]	; 0x58
    75a6:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    75a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    75ac:	fb02 f303 	mul.w	r3, r2, r3
    75b0:	fb03 f000 	mul.w	r0, r3, r0
    75b4:	f005 fcb8 	bl	cf28 <__aeabi_i2f>
    75b8:	49a4      	ldr	r1, [pc, #656]	; (784c <loop+0xb74>)
    75ba:	f005 fdbd 	bl	d138 <__aeabi_fdiv>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    75be:	4aa4      	ldr	r2, [pc, #656]	; (7850 <loop+0xb78>)
            digitalWrite(OUT3, LOW);  //turn off charger
    75c0:	2100      	movs	r1, #0
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    75c2:	6010      	str	r0, [r2, #0]
            digitalWrite(OUT3, LOW);  //turn off charger
    75c4:	2014      	movs	r0, #20
    75c6:	f002 ffaf 	bl	a528 <digitalWrite>
            bmsstatus = Ready;
    75ca:	2301      	movs	r3, #1
    75cc:	703b      	strb	r3, [r7, #0]
    75ce:	e6d7      	b.n	7380 <loop+0x6a8>
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    75d0:	489c      	ldr	r0, [pc, #624]	; (7844 <loop+0xb6c>)
    75d2:	f7fa f9d1 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    75d6:	4604      	mov	r4, r0
    75d8:	489a      	ldr	r0, [pc, #616]	; (7844 <loop+0xb6c>)
    75da:	f7fa f9a7 	bl	192c <BMSModuleManager::getLowCellVolt()>
    75de:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    75e0:	f005 fbee 	bl	cdc0 <__addsf3>
    75e4:	4601      	mov	r1, r0
    75e6:	4620      	mov	r0, r4
    75e8:	f005 feae 	bl	d348 <__aeabi_fcmpgt>
    75ec:	3800      	subs	r0, #0
    75ee:	bf18      	it	ne
    75f0:	2001      	movne	r0, #1
    75f2:	e612      	b.n	721a <loop+0x542>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0) {
    75f4:	4893      	ldr	r0, [pc, #588]	; (7844 <loop+0xb6c>)
    75f6:	f7fa f9bf 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    75fa:	6969      	ldr	r1, [r5, #20]
    75fc:	f005 fea4 	bl	d348 <__aeabi_fcmpgt>
    7600:	2800      	cmp	r0, #0
    7602:	f47f ad00 	bne.w	7006 <loop+0x32e>
    7606:	4b93      	ldr	r3, [pc, #588]	; (7854 <loop+0xb7c>)
    7608:	681b      	ldr	r3, [r3, #0]
    760a:	2b00      	cmp	r3, #0
    760c:	f43f acfb 	beq.w	7006 <loop+0x32e>
            if (Charged == 1) {
    7610:	f8df b244 	ldr.w	fp, [pc, #580]	; 7858 <loop+0xb80>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7614:	6823      	ldr	r3, [r4, #0]
    7616:	f8db a000 	ldr.w	sl, [fp]
    761a:	9306      	str	r3, [sp, #24]
            overtriptimer = millis();
    761c:	4b8f      	ldr	r3, [pc, #572]	; (785c <loop+0xb84>)
	return ret;
    761e:	9a06      	ldr	r2, [sp, #24]
    7620:	601a      	str	r2, [r3, #0]
            if (Charged == 1) {
    7622:	f1ba 0f01 	cmp.w	sl, #1
    7626:	f000 8167 	beq.w	78f8 <loop+0xc20>
              if (digitalRead(OUT3) == 0) {
    762a:	2014      	movs	r0, #20
    762c:	f002 ffa2 	bl	a574 <digitalRead>
    7630:	2800      	cmp	r0, #0
    7632:	f47f acf3 	bne.w	701c <loop+0x344>
                Serial.println();
    7636:	488a      	ldr	r0, [pc, #552]	; (7860 <loop+0xb88>)
    7638:	f002 f89a 	bl	9770 <Print::println()>
                Serial.println("Reset Over Voltage Trip Not Charged");
    763c:	4989      	ldr	r1, [pc, #548]	; (7864 <loop+0xb8c>)
    763e:	4888      	ldr	r0, [pc, #544]	; (7860 <loop+0xb88>)
    7640:	f7fa ff24 	bl	248c <Print::println(char const*) [clone .isra.0]>
    7644:	e740      	b.n	74c8 <loop+0x7f0>
            digitalWrite(OUT3, LOW);  //turn off charger
    7646:	2100      	movs	r1, #0
    7648:	2014      	movs	r0, #20
    764a:	f002 ff6d 	bl	a528 <digitalWrite>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    764e:	6daa      	ldr	r2, [r5, #88]	; 0x58
    7650:	6deb      	ldr	r3, [r5, #92]	; 0x5c
            Charged = 1;
    7652:	4981      	ldr	r1, [pc, #516]	; (7858 <loop+0xb80>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7654:	fb02 f303 	mul.w	r3, r2, r3
    7658:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    765c:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    7660:	4a79      	ldr	r2, [pc, #484]	; (7848 <loop+0xb70>)
            Charged = 1;
    7662:	2301      	movs	r3, #1
    7664:	600b      	str	r3, [r1, #0]
    SOC = 100;
    7666:	2364      	movs	r3, #100	; 0x64
    7668:	6013      	str	r3, [r2, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    766a:	f005 fc5d 	bl	cf28 <__aeabi_i2f>
    766e:	4977      	ldr	r1, [pc, #476]	; (784c <loop+0xb74>)
    7670:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 7850 <loop+0xb78>
    7674:	f005 fd60 	bl	d138 <__aeabi_fdiv>
    7678:	f8c9 0000 	str.w	r0, [r9]
    767c:	e4ce      	b.n	701c <loop+0x344>
              if (digitalRead(OUT3) == 1) {
    767e:	2014      	movs	r0, #20
    7680:	f002 ff78 	bl	a574 <digitalRead>
    7684:	2801      	cmp	r0, #1
    7686:	4681      	mov	r9, r0
    7688:	f47f acc8 	bne.w	701c <loop+0x344>
                Serial.println();
    768c:	4874      	ldr	r0, [pc, #464]	; (7860 <loop+0xb88>)
    768e:	f002 f86f 	bl	9770 <Print::println()>
    7692:	2111      	movs	r1, #17
    7694:	4874      	ldr	r0, [pc, #464]	; (7868 <loop+0xb90>)
    7696:	f004 fdbb 	bl	c210 <usb_serial_write>
    769a:	4871      	ldr	r0, [pc, #452]	; (7860 <loop+0xb88>)
    769c:	f002 f868 	bl	9770 <Print::println()>
                digitalWrite(OUT3, LOW);  //turn off charger
    76a0:	2014      	movs	r0, #20
    76a2:	2100      	movs	r1, #0
    76a4:	f002 ff40 	bl	a528 <digitalWrite>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    76a8:	6daa      	ldr	r2, [r5, #88]	; 0x58
    76aa:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    76ac:	fb02 f303 	mul.w	r3, r2, r3
                Charged = 1;
    76b0:	4a69      	ldr	r2, [pc, #420]	; (7858 <loop+0xb80>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    76b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
                Charged = 1;
    76b6:	f8c2 9000 	str.w	r9, [r2]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    76ba:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    76be:	4a62      	ldr	r2, [pc, #392]	; (7848 <loop+0xb70>)
    76c0:	e7d1      	b.n	7666 <loop+0x98e>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    76c2:	4860      	ldr	r0, [pc, #384]	; (7844 <loop+0xb6c>)
    76c4:	f7fa f958 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    76c8:	6929      	ldr	r1, [r5, #16]
    76ca:	f005 fe1f 	bl	d30c <__aeabi_fcmplt>
    76ce:	2800      	cmp	r0, #0
    76d0:	f47f ac27 	bne.w	6f22 <loop+0x24a>
          ErrorReason = ErrorReason & ~0x01;
    76d4:	4a65      	ldr	r2, [pc, #404]	; (786c <loop+0xb94>)
          if (debug != 0) {
    76d6:	f8df 9198 	ldr.w	r9, [pc, #408]	; 7870 <loop+0xb98>
          ErrorReason = ErrorReason & ~0x01;
    76da:	6813      	ldr	r3, [r2, #0]
    76dc:	4f65      	ldr	r7, [pc, #404]	; (7874 <loop+0xb9c>)
    76de:	f023 0301 	bic.w	r3, r3, #1
    76e2:	6013      	str	r3, [r2, #0]
          if (debug != 0) {
    76e4:	f8d9 3000 	ldr.w	r3, [r9]
    76e8:	f7ff bb83 	b.w	6df2 <loop+0x11a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76ec:	6823      	ldr	r3, [r4, #0]
    76ee:	9308      	str	r3, [sp, #32]
          undertriptimer = millis();
    76f0:	4b61      	ldr	r3, [pc, #388]	; (7878 <loop+0xba0>)
	return ret;
    76f2:	9a08      	ldr	r2, [sp, #32]
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys) {
    76f4:	4853      	ldr	r0, [pc, #332]	; (7844 <loop+0xb6c>)
          undertriptimer = millis();
    76f6:	601a      	str	r2, [r3, #0]
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys) {
    76f8:	f7fa f918 	bl	192c <BMSModuleManager::getLowCellVolt()>
    76fc:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
    7700:	4681      	mov	r9, r0
    7702:	69a8      	ldr	r0, [r5, #24]
    7704:	f005 fb5c 	bl	cdc0 <__addsf3>
    7708:	4601      	mov	r1, r0
    770a:	4648      	mov	r0, r9
    770c:	f005 fe1c 	bl	d348 <__aeabi_fcmpgt>
    7710:	2800      	cmp	r0, #0
    7712:	f43f ac99 	beq.w	7048 <loop+0x370>
            if (digitalRead(OUT1) == 0) {
    7716:	200b      	movs	r0, #11
    7718:	f002 ff2c 	bl	a574 <digitalRead>
    771c:	2800      	cmp	r0, #0
    771e:	f47f ac93 	bne.w	7048 <loop+0x370>
              Serial.println();
    7722:	484f      	ldr	r0, [pc, #316]	; (7860 <loop+0xb88>)
    7724:	f002 f824 	bl	9770 <Print::println()>
    7728:	2118      	movs	r1, #24
    772a:	4854      	ldr	r0, [pc, #336]	; (787c <loop+0xba4>)
    772c:	f004 fd70 	bl	c210 <usb_serial_write>
    7730:	484b      	ldr	r0, [pc, #300]	; (7860 <loop+0xb88>)
    7732:	f002 f81d 	bl	9770 <Print::println()>
              digitalWrite(OUT1, HIGH);  //turn on discharge
    7736:	2101      	movs	r1, #1
    7738:	200b      	movs	r0, #11
    773a:	f002 fef5 	bl	a528 <digitalWrite>
    773e:	e483      	b.n	7048 <loop+0x370>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    7740:	f7fa f8f4 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7744:	6929      	ldr	r1, [r5, #16]
    7746:	f005 fde1 	bl	d30c <__aeabi_fcmplt>
    774a:	b940      	cbnz	r0, 775e <loop+0xa86>
    774c:	483d      	ldr	r0, [pc, #244]	; (7844 <loop+0xb6c>)
    774e:	f7fa f913 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7752:	68e9      	ldr	r1, [r5, #12]
    7754:	f005 fdf8 	bl	d348 <__aeabi_fcmpgt>
    7758:	2800      	cmp	r0, #0
    775a:	f000 80c2 	beq.w	78e2 <loop+0xc0a>
              digitalWrite(OUT2, LOW);    //turn off contactor
    775e:	2100      	movs	r1, #0
    7760:	200c      	movs	r0, #12
    7762:	f002 fee1 	bl	a528 <digitalWrite>
              contctrl = contctrl & 253;  //turn off contactor
    7766:	f8d8 3000 	ldr.w	r3, [r8]
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    776a:	2100      	movs	r1, #0
              contctrl = contctrl & 253;  //turn off contactor
    776c:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    7770:	2015      	movs	r0, #21
              contctrl = contctrl & 253;  //turn off contactor
    7772:	f8c8 3000 	str.w	r3, [r8]
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    7776:	f002 fed7 	bl	a528 <digitalWrite>
              bmsstatus = Error;
    777a:	2305      	movs	r3, #5
    777c:	703b      	strb	r3, [r7, #0]
    777e:	f7ff bba6 	b.w	6ece <loop+0x1f6>
    7782:	2102      	movs	r1, #2
    7784:	483e      	ldr	r0, [pc, #248]	; (7880 <loop+0xba8>)
          bmsstatus = Error;
    7786:	4f3b      	ldr	r7, [pc, #236]	; (7874 <loop+0xb9c>)
    7788:	f004 fd42 	bl	c210 <usb_serial_write>
    778c:	4834      	ldr	r0, [pc, #208]	; (7860 <loop+0xb88>)
    778e:	f001 ffef 	bl	9770 <Print::println()>
    7792:	211d      	movs	r1, #29
    7794:	483b      	ldr	r0, [pc, #236]	; (7884 <loop+0xbac>)
    7796:	f004 fd3b 	bl	c210 <usb_serial_write>
    779a:	2102      	movs	r1, #2
    779c:	4838      	ldr	r0, [pc, #224]	; (7880 <loop+0xba8>)
    779e:	f004 fd37 	bl	c210 <usb_serial_write>
    77a2:	482f      	ldr	r0, [pc, #188]	; (7860 <loop+0xb88>)
    77a4:	f001 ffe4 	bl	9770 <Print::println()>
          ErrorReason = ErrorReason | 0x01;
    77a8:	4a30      	ldr	r2, [pc, #192]	; (786c <loop+0xb94>)
    77aa:	6813      	ldr	r3, [r2, #0]
    77ac:	f043 0301 	orr.w	r3, r3, #1
    77b0:	6013      	str	r3, [r2, #0]
          bmsstatus = Error;
    77b2:	2305      	movs	r3, #5
    77b4:	703b      	strb	r3, [r7, #0]
    if (debug != 0) {
    77b6:	f8d9 3000 	ldr.w	r3, [r9]
          ErrorReason = ErrorReason | 0x01;
    77ba:	f7ff bb1a 	b.w	6df2 <loop+0x11a>
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    77be:	4821      	ldr	r0, [pc, #132]	; (7844 <loop+0xb6c>)
    77c0:	f7fa f8da 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    77c4:	69e9      	ldr	r1, [r5, #28]
    77c6:	4604      	mov	r4, r0
    77c8:	6968      	ldr	r0, [r5, #20]
    77ca:	f005 faf7 	bl	cdbc <__aeabi_fsub>
    77ce:	4601      	mov	r1, r0
    77d0:	4620      	mov	r0, r4
    77d2:	f005 fd9b 	bl	d30c <__aeabi_fcmplt>
    77d6:	2800      	cmp	r0, #0
    77d8:	f43f ad27 	beq.w	722a <loop+0x552>
            if (settings.ChargerDirect == 1) {
    77dc:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    77e0:	b33b      	cbz	r3, 7832 <loop+0xb5a>
              bmsstatus = Charge;
    77e2:	2303      	movs	r3, #3
    77e4:	4c28      	ldr	r4, [pc, #160]	; (7888 <loop+0xbb0>)
    77e6:	703b      	strb	r3, [r7, #0]
    77e8:	e520      	b.n	722c <loop+0x554>
    SOC = 95;
    77ea:	225f      	movs	r2, #95	; 0x5f
    77ec:	e6d9      	b.n	75a2 <loop+0x8ca>
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW) {
    77ee:	200c      	movs	r0, #12
    77f0:	f002 fec0 	bl	a574 <digitalRead>
    77f4:	2800      	cmp	r0, #0
    77f6:	f000 80c0 	beq.w	797a <loop+0xca2>
    77fa:	f8df 9090 	ldr.w	r9, [pc, #144]	; 788c <loop+0xbb4>
    77fe:	4c22      	ldr	r4, [pc, #136]	; (7888 <loop+0xbb0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7800:	6823      	ldr	r3, [r4, #0]
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent) {
    7802:	f8d9 2000 	ldr.w	r2, [r9]
    7806:	9302      	str	r3, [sp, #8]
    7808:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    780c:	4413      	add	r3, r2
	return ret;
    780e:	9a02      	ldr	r2, [sp, #8]
    7810:	4293      	cmp	r3, r2
    7812:	f0c0 8096 	bcc.w	7942 <loop+0xc6a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7816:	6822      	ldr	r2, [r4, #0]
    7818:	9204      	str	r2, [sp, #16]
	return ret;
    781a:	9a04      	ldr	r2, [sp, #16]
            if (mainconttimer + settings.Pretime + 1000 < millis()) {
    781c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    7820:	4293      	cmp	r3, r2
    7822:	f4bf abc8 	bcs.w	6fb6 <loop+0x2de>
              digitalWrite(OUT4, LOW);  //ensure precharge is low
    7826:	2100      	movs	r1, #0
    7828:	2015      	movs	r0, #21
    782a:	f002 fe7d 	bl	a528 <digitalWrite>
    782e:	f7ff bbc2 	b.w	6fb6 <loop+0x2de>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7832:	4c15      	ldr	r4, [pc, #84]	; (7888 <loop+0xbb0>)
              bmsstatus = Precharge;
    7834:	2304      	movs	r3, #4
    7836:	703b      	strb	r3, [r7, #0]
    7838:	6823      	ldr	r3, [r4, #0]
    783a:	9309      	str	r3, [sp, #36]	; 0x24
              Pretimer = millis();
    783c:	4b14      	ldr	r3, [pc, #80]	; (7890 <loop+0xbb8>)
	return ret;
    783e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    7840:	601a      	str	r2, [r3, #0]
    7842:	e4f3      	b.n	722c <loop+0x554>
    7844:	1fff91f0 	.word	0x1fff91f0
    7848:	1fff8828 	.word	0x1fff8828
    784c:	3e8e38e4 	.word	0x3e8e38e4
    7850:	1fff91e4 	.word	0x1fff91e4
    7854:	1fffcf40 	.word	0x1fffcf40
    7858:	1fff91a8 	.word	0x1fff91a8
    785c:	1fffd0cc 	.word	0x1fffd0cc
    7860:	1fff89fc 	.word	0x1fff89fc
    7864:	00015150 	.word	0x00015150
    7868:	0001513c 	.word	0x0001513c
    786c:	1fff91b0 	.word	0x1fff91b0
    7870:	1fff884c 	.word	0x1fff884c
    7874:	1fffcf34 	.word	0x1fffcf34
    7878:	1fffd1b4 	.word	0x1fffd1b4
    787c:	00015188 	.word	0x00015188
    7880:	00015030 	.word	0x00015030
    7884:	000151a4 	.word	0x000151a4
    7888:	1fffd3c0 	.word	0x1fffd3c0
    788c:	1fffd02c 	.word	0x1fffd02c
    7890:	1fff91b8 	.word	0x1fff91b8
              if (bms.getHighCellVolt() < (settings.StoreVsetpoint - settings.ChargeHys)) {
    7894:	485c      	ldr	r0, [pc, #368]	; (7a08 <loop+0xd30>)
    7896:	f7fa f86f 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    789a:	69e9      	ldr	r1, [r5, #28]
    789c:	4681      	mov	r9, r0
    789e:	6a28      	ldr	r0, [r5, #32]
    78a0:	f005 fa8c 	bl	cdbc <__aeabi_fsub>
    78a4:	4601      	mov	r1, r0
    78a6:	4648      	mov	r0, r9
    78a8:	f005 fd30 	bl	d30c <__aeabi_fcmplt>
    78ac:	4b57      	ldr	r3, [pc, #348]	; (7a0c <loop+0xd34>)
    78ae:	2800      	cmp	r0, #0
    78b0:	f43f abb4 	beq.w	701c <loop+0x344>
                digitalWrite(OUT3, HIGH);  //turn on charger
    78b4:	4659      	mov	r1, fp
    78b6:	2014      	movs	r0, #20
                Charged = 0;
    78b8:	f8c3 a000 	str.w	sl, [r3]
                digitalWrite(OUT3, HIGH);  //turn on charger
    78bc:	f002 fe34 	bl	a528 <digitalWrite>
    78c0:	f7ff bbac 	b.w	701c <loop+0x344>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    78c4:	4850      	ldr	r0, [pc, #320]	; (7a08 <loop+0xd30>)
    78c6:	f7fa f907 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    78ca:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    78cc:	f005 fd3c 	bl	d348 <__aeabi_fcmpgt>
    78d0:	4601      	mov	r1, r0
    78d2:	2800      	cmp	r0, #0
    78d4:	f47f abd2 	bne.w	707c <loop+0x3a4>
              digitalWrite(OUT2, LOW);  //trip breaker
    78d8:	200c      	movs	r0, #12
    78da:	f002 fe25 	bl	a528 <digitalWrite>
    78de:	f7ff baf6 	b.w	6ece <loop+0x1f6>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    78e2:	4849      	ldr	r0, [pc, #292]	; (7a08 <loop+0xd30>)
    78e4:	f7fa f8f8 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    78e8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    78ea:	f005 fd2d 	bl	d348 <__aeabi_fcmpgt>
    78ee:	2800      	cmp	r0, #0
    78f0:	f47f af35 	bne.w	775e <loop+0xa86>
    78f4:	f7ff baeb 	b.w	6ece <loop+0x1f6>
              if (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) {
    78f8:	4843      	ldr	r0, [pc, #268]	; (7a08 <loop+0xd30>)
    78fa:	f7fa f83d 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    78fe:	69e9      	ldr	r1, [r5, #28]
    7900:	4681      	mov	r9, r0
    7902:	6968      	ldr	r0, [r5, #20]
    7904:	f005 fa5a 	bl	cdbc <__aeabi_fsub>
    7908:	4601      	mov	r1, r0
    790a:	4648      	mov	r0, r9
    790c:	f005 fcfe 	bl	d30c <__aeabi_fcmplt>
    7910:	2800      	cmp	r0, #0
    7912:	f43f ab83 	beq.w	701c <loop+0x344>
                if (digitalRead(OUT3) == 0) {
    7916:	2014      	movs	r0, #20
    7918:	f002 fe2c 	bl	a574 <digitalRead>
    791c:	4681      	mov	r9, r0
    791e:	2800      	cmp	r0, #0
    7920:	f47f ab7c 	bne.w	701c <loop+0x344>
                  Serial.println();
    7924:	483a      	ldr	r0, [pc, #232]	; (7a10 <loop+0xd38>)
    7926:	f001 ff23 	bl	9770 <Print::println()>
                  Serial.println("Reset Over Voltage Trip Not Charged");
    792a:	493a      	ldr	r1, [pc, #232]	; (7a14 <loop+0xd3c>)
    792c:	4838      	ldr	r0, [pc, #224]	; (7a10 <loop+0xd38>)
    792e:	f7fa fdad 	bl	248c <Print::println(char const*) [clone .isra.0]>
                  digitalWrite(OUT3, HIGH);  //turn on charger
    7932:	4651      	mov	r1, sl
    7934:	2014      	movs	r0, #20
                  Charged = 0;
    7936:	f8cb 9000 	str.w	r9, [fp]
                  digitalWrite(OUT3, HIGH);  //turn on charger
    793a:	f002 fdf5 	bl	a528 <digitalWrite>
    793e:	f7ff bb6d 	b.w	701c <loop+0x344>
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent) {
    7942:	200c      	movs	r0, #12
    7944:	f002 fe16 	bl	a574 <digitalRead>
    7948:	b988      	cbnz	r0, 796e <loop+0xc96>
    794a:	4b33      	ldr	r3, [pc, #204]	; (7a18 <loop+0xd40>)
    794c:	f8d3 a000 	ldr.w	sl, [r3]
    7950:	2100      	movs	r1, #0
    7952:	4650      	mov	r0, sl
    7954:	f005 fcf8 	bl	d348 <__aeabi_fcmpgt>
    7958:	b908      	cbnz	r0, 795e <loop+0xc86>
    795a:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    795e:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    7962:	f005 fae1 	bl	cf28 <__aeabi_i2f>
    7966:	4651      	mov	r1, sl
    7968:	f005 fcee 	bl	d348 <__aeabi_fcmpgt>
    796c:	bb68      	cbnz	r0, 79ca <loop+0xcf2>
            if (mainconttimer + settings.Pretime + 1000 < millis()) {
    796e:	f8d9 2000 	ldr.w	r2, [r9]
    7972:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    7976:	4413      	add	r3, r2
    7978:	e74d      	b.n	7816 <loop+0xb3e>
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW) {
    797a:	2015      	movs	r0, #21
    797c:	f002 fdfa 	bl	a574 <digitalRead>
    7980:	4682      	mov	sl, r0
    7982:	2800      	cmp	r0, #0
    7984:	f47f af39 	bne.w	77fa <loop+0xb22>
              digitalWrite(OUT4, HIGH);  //Precharge start
    7988:	4621      	mov	r1, r4
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    798a:	4c24      	ldr	r4, [pc, #144]	; (7a1c <loop+0xd44>)
              mainconttimer = millis();
    798c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 7a20 <loop+0xd48>
    7990:	6823      	ldr	r3, [r4, #0]
    7992:	9301      	str	r3, [sp, #4]
	return ret;
    7994:	9b01      	ldr	r3, [sp, #4]
    7996:	f8c9 3000 	str.w	r3, [r9]
              digitalWrite(OUT4, HIGH);  //Precharge start
    799a:	2015      	movs	r0, #21
    799c:	f002 fdc4 	bl	a528 <digitalWrite>
              Serial.println();
    79a0:	481b      	ldr	r0, [pc, #108]	; (7a10 <loop+0xd38>)
    79a2:	f001 fee5 	bl	9770 <Print::println()>
              Serial.println("Precharge!!!");
    79a6:	491f      	ldr	r1, [pc, #124]	; (7a24 <loop+0xd4c>)
    79a8:	4819      	ldr	r0, [pc, #100]	; (7a10 <loop+0xd38>)
    79aa:	f7fa fd6f 	bl	248c <Print::println(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    79ae:	f8d9 1000 	ldr.w	r1, [r9]
    79b2:	4817      	ldr	r0, [pc, #92]	; (7a10 <loop+0xd38>)
    79b4:	4653      	mov	r3, sl
    79b6:	220a      	movs	r2, #10
    79b8:	f001 fef2 	bl	97a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    79bc:	4814      	ldr	r0, [pc, #80]	; (7a10 <loop+0xd38>)
    79be:	f001 fed7 	bl	9770 <Print::println()>
              Serial.println();
    79c2:	4813      	ldr	r0, [pc, #76]	; (7a10 <loop+0xd38>)
    79c4:	f001 fed4 	bl	9770 <Print::println()>
    79c8:	e71a      	b.n	7800 <loop+0xb28>
              digitalWrite(OUT2, HIGH);  //turn on contactor
    79ca:	2101      	movs	r1, #1
    79cc:	200c      	movs	r0, #12
    79ce:	f002 fdab 	bl	a528 <digitalWrite>
              contctrl = contctrl | 2;   //turn on contactor
    79d2:	f8d8 3000 	ldr.w	r3, [r8]
              Serial.println();
    79d6:	480e      	ldr	r0, [pc, #56]	; (7a10 <loop+0xd38>)
              contctrl = contctrl | 2;   //turn on contactor
    79d8:	f043 0302 	orr.w	r3, r3, #2
    79dc:	f8c8 3000 	str.w	r3, [r8]
              Serial.println();
    79e0:	f001 fec6 	bl	9770 <Print::println()>
              Serial.println("Main On!!!");
    79e4:	4910      	ldr	r1, [pc, #64]	; (7a28 <loop+0xd50>)
    79e6:	480a      	ldr	r0, [pc, #40]	; (7a10 <loop+0xd38>)
    79e8:	f7fa fd50 	bl	248c <Print::println(char const*) [clone .isra.0]>
              Serial.println();
    79ec:	4808      	ldr	r0, [pc, #32]	; (7a10 <loop+0xd38>)
    79ee:	f001 febf 	bl	9770 <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    79f2:	6823      	ldr	r3, [r4, #0]
    79f4:	9303      	str	r3, [sp, #12]
	return ret;
    79f6:	9a03      	ldr	r2, [sp, #12]
              mainconttimer = millis() + settings.Pretime;
    79f8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    79fc:	441a      	add	r2, r3
    79fe:	f8c9 2000 	str.w	r2, [r9]
    7a02:	4413      	add	r3, r2
    7a04:	e707      	b.n	7816 <loop+0xb3e>
    7a06:	bf00      	nop
    7a08:	1fff91f0 	.word	0x1fff91f0
    7a0c:	1fff91a8 	.word	0x1fff91a8
    7a10:	1fff89fc 	.word	0x1fff89fc
    7a14:	00015150 	.word	0x00015150
    7a18:	1fffcfc4 	.word	0x1fffcfc4
    7a1c:	1fffd3c0 	.word	0x1fffd3c0
    7a20:	1fffd02c 	.word	0x1fffd02c
    7a24:	00015120 	.word	0x00015120
    7a28:	00015130 	.word	0x00015130

00007a2c <_GLOBAL__sub_I_bms>:
}
    7a2c:	b510      	push	{r4, lr}
    EEPROMClass()                        { eeprom_initialize(); }
    7a2e:	f002 f885 	bl	9b3c <eeprom_initialize>
BMSModuleManager bms;
    7a32:	480b      	ldr	r0, [pc, #44]	; (7a60 <_GLOBAL__sub_I_bms+0x34>)
    7a34:	f7f9 f98a 	bl	d4c <BMSModuleManager::BMSModuleManager()>
SerialConsole console;
    7a38:	480a      	ldr	r0, [pc, #40]	; (7a64 <_GLOBAL__sub_I_bms+0x38>)
    7a3a:	f7fa fc8d 	bl	2358 <SerialConsole::SerialConsole()>
FilterOnePole lowpassFilter(LOWPASS, filterFrequency);
    7a3e:	4a0a      	ldr	r2, [pc, #40]	; (7a68 <_GLOBAL__sub_I_bms+0x3c>)
    7a40:	480a      	ldr	r0, [pc, #40]	; (7a6c <_GLOBAL__sub_I_bms+0x40>)
    7a42:	6812      	ldr	r2, [r2, #0]
    7a44:	2300      	movs	r3, #0
    7a46:	2101      	movs	r1, #1
    7a48:	f001 fbec 	bl	9224 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>
ADC* adc = new ADC();  // adc object
    7a4c:	2094      	movs	r0, #148	; 0x94
    7a4e:	f002 fabf 	bl	9fd0 <operator new(unsigned int)>
    7a52:	4604      	mov	r4, r0
    7a54:	f000 ffb2 	bl	89bc <ADC::ADC()>
    7a58:	4b05      	ldr	r3, [pc, #20]	; (7a70 <_GLOBAL__sub_I_bms+0x44>)
    7a5a:	601c      	str	r4, [r3, #0]
}
    7a5c:	bd10      	pop	{r4, pc}
    7a5e:	bf00      	nop
    7a60:	1fff91f0 	.word	0x1fff91f0
    7a64:	1fffcf50 	.word	0x1fffcf50
    7a68:	1fff8854 	.word	0x1fff8854
    7a6c:	1fffd00c 	.word	0x1fffd00c
    7a70:	1fff91dc 	.word	0x1fff91dc

00007a74 <setup>:
void setup() {
    7a74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  delay(4000);  //just for easy debugging. It takes a few seconds for USB to come up properly on most OS's
    7a78:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
void setup() {
    7a7c:	b087      	sub	sp, #28
  delay(4000);  //just for easy debugging. It takes a few seconds for USB to come up properly on most OS's
    7a7e:	f002 fde3 	bl	a648 <delay>
  pinMode(ACUR1, INPUT);
    7a82:	2100      	movs	r1, #0
    7a84:	200f      	movs	r0, #15
    7a86:	f002 fd83 	bl	a590 <pinMode>
  pinMode(ACUR2, INPUT);
    7a8a:	2100      	movs	r1, #0
    7a8c:	200e      	movs	r0, #14
    7a8e:	f002 fd7f 	bl	a590 <pinMode>
  pinMode(IN1, INPUT);
    7a92:	2100      	movs	r1, #0
    7a94:	2011      	movs	r0, #17
    7a96:	f002 fd7b 	bl	a590 <pinMode>
  pinMode(IN2, INPUT);
    7a9a:	2100      	movs	r1, #0
    7a9c:	2010      	movs	r0, #16
    7a9e:	f002 fd77 	bl	a590 <pinMode>
  pinMode(IN3, INPUT);
    7aa2:	2100      	movs	r1, #0
    7aa4:	2012      	movs	r0, #18
    7aa6:	f002 fd73 	bl	a590 <pinMode>
  pinMode(IN4, INPUT);
    7aaa:	2100      	movs	r1, #0
    7aac:	2013      	movs	r0, #19
    7aae:	f002 fd6f 	bl	a590 <pinMode>
  pinMode(OUT1, OUTPUT);  // drive contactor
    7ab2:	2101      	movs	r1, #1
    7ab4:	200b      	movs	r0, #11
    7ab6:	f002 fd6b 	bl	a590 <pinMode>
  digitalWrite(OUT1, LOW);
    7aba:	2100      	movs	r1, #0
    7abc:	200b      	movs	r0, #11
    7abe:	f002 fd33 	bl	a528 <digitalWrite>
  pinMode(OUT2, OUTPUT);  // precharge
    7ac2:	2101      	movs	r1, #1
    7ac4:	200c      	movs	r0, #12
    7ac6:	f002 fd63 	bl	a590 <pinMode>
  digitalWrite(OUT2, LOW);
    7aca:	2100      	movs	r1, #0
    7acc:	200c      	movs	r0, #12
    7ace:	f002 fd2b 	bl	a528 <digitalWrite>
  pinMode(OUT3, OUTPUT);  // charge relay
    7ad2:	2101      	movs	r1, #1
    7ad4:	2014      	movs	r0, #20
    7ad6:	f002 fd5b 	bl	a590 <pinMode>
  digitalWrite(OUT3, LOW);
    7ada:	2100      	movs	r1, #0
    7adc:	2014      	movs	r0, #20
    7ade:	f002 fd23 	bl	a528 <digitalWrite>
  pinMode(OUT4, OUTPUT);  // Negative contactor
    7ae2:	2101      	movs	r1, #1
    7ae4:	2015      	movs	r0, #21
    7ae6:	f002 fd53 	bl	a590 <pinMode>
  digitalWrite(OUT4, LOW);
    7aea:	2100      	movs	r1, #0
    7aec:	2015      	movs	r0, #21
    7aee:	f002 fd1b 	bl	a528 <digitalWrite>
  pinMode(OUT5, OUTPUT);  // pwm driver output
    7af2:	2101      	movs	r1, #1
    7af4:	2016      	movs	r0, #22
    7af6:	f002 fd4b 	bl	a590 <pinMode>
  digitalWrite(OUT5, LOW);
    7afa:	2100      	movs	r1, #0
    7afc:	2016      	movs	r0, #22
    7afe:	f002 fd13 	bl	a528 <digitalWrite>
  pinMode(OUT6, OUTPUT);  // pwm driver output
    7b02:	2101      	movs	r1, #1
    7b04:	2017      	movs	r0, #23
    7b06:	f002 fd43 	bl	a590 <pinMode>
  digitalWrite(OUT6, LOW);
    7b0a:	2100      	movs	r1, #0
    7b0c:	2017      	movs	r0, #23
    7b0e:	f002 fd0b 	bl	a528 <digitalWrite>
  pinMode(OUT7, OUTPUT);  // pwm driver output
    7b12:	2101      	movs	r1, #1
    7b14:	2005      	movs	r0, #5
    7b16:	f002 fd3b 	bl	a590 <pinMode>
  digitalWrite(OUT7, LOW);
    7b1a:	2100      	movs	r1, #0
    7b1c:	2005      	movs	r0, #5
    7b1e:	f002 fd03 	bl	a528 <digitalWrite>
  pinMode(OUT8, OUTPUT);  // pwm driver output
    7b22:	2101      	movs	r1, #1
    7b24:	2006      	movs	r0, #6
    7b26:	f002 fd33 	bl	a590 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    7b2a:	4cb2      	ldr	r4, [pc, #712]	; (7df4 <L_29174_delayMicroseconds+0x10e>)
    7b2c:	4db2      	ldr	r5, [pc, #712]	; (7df8 <L_29174_delayMicroseconds+0x112>)
    Can0.setFilter(filter, i);
    7b2e:	4eb3      	ldr	r6, [pc, #716]	; (7dfc <L_29174_delayMicroseconds+0x116>)
  digitalWrite(OUT8, LOW);
    7b30:	2100      	movs	r1, #0
    7b32:	2006      	movs	r0, #6
    7b34:	f002 fcf8 	bl	a528 <digitalWrite>
  pinMode(led, OUTPUT);
    7b38:	2101      	movs	r1, #1
    7b3a:	200d      	movs	r0, #13
    7b3c:	f002 fd28 	bl	a590 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    7b40:	8820      	ldrh	r0, [r4, #0]
    7b42:	f005 f9ed 	bl	cf20 <__aeabi_ui2f>
    7b46:	4601      	mov	r1, r0
    7b48:	2016      	movs	r0, #22
    7b4a:	f002 fc83 	bl	a454 <analogWriteFrequency>
  analogWriteFrequency(OUT6, pwmfreq);
    7b4e:	8820      	ldrh	r0, [r4, #0]
    7b50:	f005 f9e6 	bl	cf20 <__aeabi_ui2f>
    7b54:	4601      	mov	r1, r0
    7b56:	2017      	movs	r0, #23
    7b58:	f002 fc7c 	bl	a454 <analogWriteFrequency>
  analogWriteFrequency(OUT7, pwmfreq);
    7b5c:	8820      	ldrh	r0, [r4, #0]
    7b5e:	f005 f9df 	bl	cf20 <__aeabi_ui2f>
    7b62:	4601      	mov	r1, r0
    7b64:	2005      	movs	r0, #5
    7b66:	f002 fc75 	bl	a454 <analogWriteFrequency>
  analogWriteFrequency(OUT8, pwmfreq);
    7b6a:	8820      	ldrh	r0, [r4, #0]
    7b6c:	f005 f9d8 	bl	cf20 <__aeabi_ui2f>
  Can0.begin(500000);
    7b70:	2400      	movs	r4, #0
  analogWriteFrequency(OUT8, pwmfreq);
    7b72:	4601      	mov	r1, r0
    7b74:	2006      	movs	r0, #6
    7b76:	f002 fc6d 	bl	a454 <analogWriteFrequency>
  Can0.begin(500000);
    7b7a:	4aa1      	ldr	r2, [pc, #644]	; (7e00 <L_29174_delayMicroseconds+0x11a>)
    7b7c:	49a1      	ldr	r1, [pc, #644]	; (7e04 <L_29174_delayMicroseconds+0x11e>)
    7b7e:	489f      	ldr	r0, [pc, #636]	; (7dfc <L_29174_delayMicroseconds+0x116>)
    7b80:	9400      	str	r4, [sp, #0]
    7b82:	4623      	mov	r3, r4
    7b84:	f000 fb5a 	bl	823c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>
    filter.flags.extended = 0;
    7b88:	792b      	ldrb	r3, [r5, #4]
    Can0.setFilter(filter, i);
    7b8a:	b2e2      	uxtb	r2, r4
    filter.flags.extended = 0;
    7b8c:	f36f 0300 	bfc	r3, #0, #1
    Can0.setFilter(filter, i);
    7b90:	4629      	mov	r1, r5
    7b92:	4630      	mov	r0, r6
  for (int i = 0; i < 8; i++) {
    7b94:	3401      	adds	r4, #1
    filter.flags.extended = 0;
    7b96:	712b      	strb	r3, [r5, #4]
    Can0.setFilter(filter, i);
    7b98:	f000 fadc 	bl	8154 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 0; i < 8; i++) {
    7b9c:	2c08      	cmp	r4, #8
    7b9e:	d1f3      	bne.n	7b88 <setup+0x114>
    Can0.setFilter(filter, i);
    7ba0:	4f95      	ldr	r7, [pc, #596]	; (7df8 <L_29174_delayMicroseconds+0x112>)
    7ba2:	4e96      	ldr	r6, [pc, #600]	; (7dfc <L_29174_delayMicroseconds+0x116>)
  for (int i = 9; i < 13; i++) {
    7ba4:	2409      	movs	r4, #9
    filter.flags.extended = 1;
    7ba6:	792b      	ldrb	r3, [r5, #4]
    Can0.setFilter(filter, i);
    7ba8:	b2e2      	uxtb	r2, r4
    filter.flags.extended = 1;
    7baa:	f043 0301 	orr.w	r3, r3, #1
    Can0.setFilter(filter, i);
    7bae:	4639      	mov	r1, r7
    7bb0:	4630      	mov	r0, r6
  for (int i = 9; i < 13; i++) {
    7bb2:	3401      	adds	r4, #1
    filter.flags.extended = 1;
    7bb4:	712b      	strb	r3, [r5, #4]
    Can0.setFilter(filter, i);
    7bb6:	f000 facd 	bl	8154 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 9; i < 13; i++) {
    7bba:	2c0d      	cmp	r4, #13
    7bbc:	d1f3      	bne.n	7ba6 <setup+0x132>
  adc->adc0->setAveraging(16);   // set number of averages
    7bbe:	4c92      	ldr	r4, [pc, #584]	; (7e08 <L_29174_delayMicroseconds+0x122>)
		uint32_t millis_begin = systick_millis_count;
    7bc0:	4f92      	ldr	r7, [pc, #584]	; (7e0c <L_29174_delayMicroseconds+0x126>)
    7bc2:	6823      	ldr	r3, [r4, #0]
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7bc4:	4e92      	ldr	r6, [pc, #584]	; (7e10 <L_29174_delayMicroseconds+0x12a>)
    7bc6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    7bca:	f8df 9248 	ldr.w	r9, [pc, #584]	; 7e14 <L_29174_delayMicroseconds+0x12e>
    7bce:	2110      	movs	r1, #16
    7bd0:	f001 f9cc 	bl	8f6c <ADC_Module::setAveraging(unsigned char)>
  adc->adc0->setResolution(16);  // set bits of resolution
    7bd4:	6823      	ldr	r3, [r4, #0]
    7bd6:	2110      	movs	r1, #16
    7bd8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7bdc:	f001 f88c 	bl	8cf8 <ADC_Module::setResolution(unsigned char)>
  adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    7be0:	6823      	ldr	r3, [r4, #0]
    7be2:	2102      	movs	r1, #2
    7be4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7be8:	f000 ff6e 	bl	8ac8 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
  adc->adc0->setSamplingSpeed(ADC_SAMPLING_SPEED::MED_SPEED);
    7bec:	6823      	ldr	r3, [r4, #0]
    7bee:	2102      	movs	r1, #2
    7bf0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7bf4:	f001 f966 	bl	8ec4 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
  adc->adc0->startContinuous(ACUR1);
    7bf8:	6823      	ldr	r3, [r4, #0]
    7bfa:	4c87      	ldr	r4, [pc, #540]	; (7e18 <L_29174_delayMicroseconds+0x132>)
    7bfc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7c00:	210f      	movs	r1, #15
    7c02:	f001 fa17 	bl	9034 <ADC_Module::startContinuous(unsigned char)>
		uint32_t millis_begin = systick_millis_count;
    7c06:	683d      	ldr	r5, [r7, #0]
				if (elapsed > 750) break;
    7c08:	f240 28ee 	movw	r8, #750	; 0x2ee
		yield();
    7c0c:	f004 fc06 	bl	c41c <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7c10:	7823      	ldrb	r3, [r4, #0]
    7c12:	2b00      	cmp	r3, #0
    7c14:	f000 8145 	beq.w	7ea2 <L_29174_delayMicroseconds+0x1bc>
    7c18:	7833      	ldrb	r3, [r6, #0]
    7c1a:	07d8      	lsls	r0, r3, #31
    7c1c:	f140 8141 	bpl.w	7ea2 <L_29174_delayMicroseconds+0x1bc>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    7c20:	683b      	ldr	r3, [r7, #0]
    7c22:	f8d9 2000 	ldr.w	r2, [r9]
    7c26:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7c28:	2b0e      	cmp	r3, #14
    7c2a:	f240 813a 	bls.w	7ea2 <L_29174_delayMicroseconds+0x1bc>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7c2e:	210c      	movs	r1, #12
    7c30:	487a      	ldr	r0, [pc, #488]	; (7e1c <L_29174_delayMicroseconds+0x136>)
    7c32:	f004 faed 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    7c36:	487a      	ldr	r0, [pc, #488]	; (7e20 <L_29174_delayMicroseconds+0x13a>)
    7c38:	f001 fd9a 	bl	9770 <Print::println()>
    7c3c:	210d      	movs	r1, #13
    7c3e:	4879      	ldr	r0, [pc, #484]	; (7e24 <L_29174_delayMicroseconds+0x13e>)
    7c40:	f004 fae6 	bl	c210 <usb_serial_write>
    7c44:	4876      	ldr	r0, [pc, #472]	; (7e20 <L_29174_delayMicroseconds+0x13a>)
    7c46:	f001 fd93 	bl	9770 <Print::println()>
  Serial2.begin(115200);
    7c4a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    7c4e:	4876      	ldr	r0, [pc, #472]	; (7e28 <L_29174_delayMicroseconds+0x142>)
    7c50:	f001 fbd4 	bl	93fc <HardwareSerial2::begin(unsigned long)>
  Serial.println();
    7c54:	4872      	ldr	r0, [pc, #456]	; (7e20 <L_29174_delayMicroseconds+0x13a>)
    7c56:	f001 fd8b 	bl	9770 <Print::println()>
    7c5a:	2117      	movs	r1, #23
    7c5c:	4873      	ldr	r0, [pc, #460]	; (7e2c <L_29174_delayMicroseconds+0x146>)
    7c5e:	f004 fad7 	bl	c210 <usb_serial_write>
    7c62:	486f      	ldr	r0, [pc, #444]	; (7e20 <L_29174_delayMicroseconds+0x13a>)
    7c64:	f001 fd84 	bl	9770 <Print::println()>
  if (RCM_SRS1 & RCM_SRS1_SACKERR) Serial.println("Stop Mode Acknowledge Error Reset");
    7c68:	4b71      	ldr	r3, [pc, #452]	; (7e30 <L_29174_delayMicroseconds+0x14a>)
    7c6a:	785b      	ldrb	r3, [r3, #1]
    7c6c:	0699      	lsls	r1, r3, #26
    7c6e:	f100 8172 	bmi.w	7f56 <L_29174_delayMicroseconds+0x270>
  if (RCM_SRS1 & RCM_SRS1_MDM_AP) Serial.println("MDM-AP Reset");
    7c72:	4b6f      	ldr	r3, [pc, #444]	; (7e30 <L_29174_delayMicroseconds+0x14a>)
    7c74:	785b      	ldrb	r3, [r3, #1]
    7c76:	071a      	lsls	r2, r3, #28
    7c78:	f100 8165 	bmi.w	7f46 <L_29174_delayMicroseconds+0x260>
  if (RCM_SRS1 & RCM_SRS1_SW) Serial.println("Software Reset");  // reboot with SCB_AIRCR = 0x05FA0004
    7c7c:	4b6c      	ldr	r3, [pc, #432]	; (7e30 <L_29174_delayMicroseconds+0x14a>)
    7c7e:	785b      	ldrb	r3, [r3, #1]
    7c80:	075b      	lsls	r3, r3, #29
    7c82:	f100 8158 	bmi.w	7f36 <L_29174_delayMicroseconds+0x250>
  if (RCM_SRS1 & RCM_SRS1_LOCKUP) Serial.println("Core Lockup Event Reset");
    7c86:	4b6a      	ldr	r3, [pc, #424]	; (7e30 <L_29174_delayMicroseconds+0x14a>)
    7c88:	785b      	ldrb	r3, [r3, #1]
    7c8a:	079e      	lsls	r6, r3, #30
    7c8c:	f100 813f 	bmi.w	7f0e <L_29174_delayMicroseconds+0x228>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    7c90:	4b67      	ldr	r3, [pc, #412]	; (7e30 <L_29174_delayMicroseconds+0x14a>)
    7c92:	781b      	ldrb	r3, [r3, #0]
    7c94:	061d      	lsls	r5, r3, #24
    7c96:	f100 8146 	bmi.w	7f26 <L_29174_delayMicroseconds+0x240>
  if (RCM_SRS0 & RCM_SRS0_PIN) Serial.println("External Pin Reset");    // Reboot with software download
    7c9a:	4b65      	ldr	r3, [pc, #404]	; (7e30 <L_29174_delayMicroseconds+0x14a>)
    7c9c:	781b      	ldrb	r3, [r3, #0]
    7c9e:	065c      	lsls	r4, r3, #25
    7ca0:	f100 812d 	bmi.w	7efe <L_29174_delayMicroseconds+0x218>
  if (RCM_SRS0 & RCM_SRS0_WDOG) Serial.println("Watchdog(COP) Reset");  // WDT timed out
    7ca4:	4b62      	ldr	r3, [pc, #392]	; (7e30 <L_29174_delayMicroseconds+0x14a>)
    7ca6:	781b      	ldrb	r3, [r3, #0]
    7ca8:	0698      	lsls	r0, r3, #26
    7caa:	f100 8120 	bmi.w	7eee <L_29174_delayMicroseconds+0x208>
  if (RCM_SRS0 & RCM_SRS0_LOC) Serial.println("Loss of External Clock Reset");
    7cae:	4b60      	ldr	r3, [pc, #384]	; (7e30 <L_29174_delayMicroseconds+0x14a>)
    7cb0:	781b      	ldrb	r3, [r3, #0]
    7cb2:	0759      	lsls	r1, r3, #29
    7cb4:	f100 8113 	bmi.w	7ede <L_29174_delayMicroseconds+0x1f8>
  if (RCM_SRS0 & RCM_SRS0_LOL) Serial.println("Loss of Lock in PLL Reset");
    7cb8:	4b5d      	ldr	r3, [pc, #372]	; (7e30 <L_29174_delayMicroseconds+0x14a>)
    7cba:	781b      	ldrb	r3, [r3, #0]
    7cbc:	071a      	lsls	r2, r3, #28
    7cbe:	f100 8106 	bmi.w	7ece <L_29174_delayMicroseconds+0x1e8>
  if (RCM_SRS0 & RCM_SRS0_LVD) Serial.println("Low-voltage Detect Reset");
    7cc2:	4b5b      	ldr	r3, [pc, #364]	; (7e30 <L_29174_delayMicroseconds+0x14a>)
    7cc4:	781b      	ldrb	r3, [r3, #0]
    7cc6:	079b      	lsls	r3, r3, #30
    7cc8:	f100 80f9 	bmi.w	7ebe <L_29174_delayMicroseconds+0x1d8>
  Serial.println();
    7ccc:	4854      	ldr	r0, [pc, #336]	; (7e20 <L_29174_delayMicroseconds+0x13a>)
    7cce:	f001 fd4f 	bl	9770 <Print::println()>
  noInterrupts();                  // don't allow interrupts while setting up WDOG
    7cd2:	b672      	cpsid	i
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    7cd4:	4b57      	ldr	r3, [pc, #348]	; (7e34 <L_29174_delayMicroseconds+0x14e>)
    7cd6:	f24c 5120 	movw	r1, #50464	; 0xc520
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    7cda:	f64d 1228 	movw	r2, #55592	; 0xd928
#elif F_CPU == 2000000
	uint32_t n = usec >> 1;
#endif
    // changed because a delay of 1 micro Sec @ 2MHz will be 0
	if (n == 0) return;
	__asm__ volatile(
    7cde:	2420      	movs	r4, #32
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    7ce0:	81d9      	strh	r1, [r3, #14]
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    7ce2:	81da      	strh	r2, [r3, #14]
    7ce4:	4622      	mov	r2, r4

00007ce6 <L_29174_delayMicroseconds>:
    7ce6:	3a01      	subs	r2, #1
    7ce8:	d1fd      	bne.n	7ce6 <L_29174_delayMicroseconds>
  WDOG_TOVALL = 0x0000;
    7cea:	2200      	movs	r2, #0
  WDOG_TOVALH = 0x1000;
    7cec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7cf0:	8099      	strh	r1, [r3, #4]
  WDOG_TOVALL = 0x0000;
    7cf2:	80da      	strh	r2, [r3, #6]
  WDOG_PRESC = 0;
    7cf4:	82da      	strh	r2, [r3, #22]
  WDOG_STCTRLH |= WDOG_STCTRLH_ALLOWUPDATE | WDOG_STCTRLH_WDOGEN | WDOG_STCTRLH_WAITEN | WDOG_STCTRLH_STOPEN | WDOG_STCTRLH_CLKSRC;
    7cf6:	881a      	ldrh	r2, [r3, #0]
    7cf8:	b292      	uxth	r2, r2
    7cfa:	f042 02d3 	orr.w	r2, r2, #211	; 0xd3
    7cfe:	801a      	strh	r2, [r3, #0]
  interrupts();
    7d00:	b662      	cpsie	i
  SERIALBMS.begin(115200);
    7d02:	484d      	ldr	r0, [pc, #308]	; (7e38 <L_29174_delayMicroseconds+0x152>)
    7d04:	f8df 8134 	ldr.w	r8, [pc, #308]	; 7e3c <L_29174_delayMicroseconds+0x156>
    7d08:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    7d0c:	f001 fc2e 	bl	956c <HardwareSerial3::begin(unsigned long)>
    7d10:	4621      	mov	r1, r4
    7d12:	484b      	ldr	r0, [pc, #300]	; (7e40 <L_29174_delayMicroseconds+0x15a>)
    7d14:	f004 fa7c 	bl	c210 <usb_serial_write>
    7d18:	4841      	ldr	r0, [pc, #260]	; (7e20 <L_29174_delayMicroseconds+0x13a>)
    7d1a:	f001 fd29 	bl	9770 <Print::println()>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    7d1e:	f108 34ff 	add.w	r4, r8, #4294967295
    7d22:	f108 06d7 	add.w	r6, r8, #215	; 0xd7
    7d26:	f1c8 0501 	rsb	r5, r8, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7d2a:	1928      	adds	r0, r5, r4
    7d2c:	f001 ff3c 	bl	9ba8 <eeprom_read_byte>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    7d30:	f804 0f01 	strb.w	r0, [r4, #1]!
    7d34:	42b4      	cmp	r4, r6
    7d36:	d1f8      	bne.n	7d2a <L_29174_delayMicroseconds+0x44>
  if (settings.version != EEPROM_VERSION) {
    7d38:	f898 3000 	ldrb.w	r3, [r8]
    7d3c:	2b12      	cmp	r3, #18
    7d3e:	d004      	beq.n	7d4a <L_29174_delayMicroseconds+0x64>
    Serial.println();
    7d40:	4837      	ldr	r0, [pc, #220]	; (7e20 <L_29174_delayMicroseconds+0x13a>)
    7d42:	f001 fd15 	bl	9770 <Print::println()>
    loadSettings();
    7d46:	f7fa fbb3 	bl	24b0 <loadSettings()>
  Logger::setLoglevel(Logger::Off);  //Debug = 0, Info = 1, Warn = 2, Error = 3, Off = 4
    7d4a:	2004      	movs	r0, #4
    7d4c:	f7fa f99c 	bl	2088 <Logger::setLoglevel(Logger::LogLevel)>
  lastUpdate = 0;
    7d50:	4b3c      	ldr	r3, [pc, #240]	; (7e44 <L_29174_delayMicroseconds+0x15e>)
  SOC = (EEPROM.read(1000));
    7d52:	4c3d      	ldr	r4, [pc, #244]	; (7e48 <L_29174_delayMicroseconds+0x162>)
  lastUpdate = 0;
    7d54:	2200      	movs	r2, #0
  digitalWrite(led, HIGH);
    7d56:	2101      	movs	r1, #1
    7d58:	200d      	movs	r0, #13
  lastUpdate = 0;
    7d5a:	601a      	str	r2, [r3, #0]
  digitalWrite(led, HIGH);
    7d5c:	f002 fbe4 	bl	a528 <digitalWrite>
  bms.setPstrings(settings.Pstrings);
    7d60:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
    7d64:	4839      	ldr	r0, [pc, #228]	; (7e4c <L_29174_delayMicroseconds+0x166>)
    7d66:	f7f9 fe33 	bl	19d0 <BMSModuleManager::setPstrings(int)>
  bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    7d6a:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    7d6e:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
    7d72:	f898 1040 	ldrb.w	r1, [r8, #64]	; 0x40
    7d76:	4835      	ldr	r0, [pc, #212]	; (7e4c <L_29174_delayMicroseconds+0x166>)
    7d78:	f7f9 fe2c 	bl	19d4 <BMSModuleManager::setSensors(int, float, float)>
  bms.setBalanceHyst(settings.balanceHyst);
    7d7c:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
    7d80:	4832      	ldr	r0, [pc, #200]	; (7e4c <L_29174_delayMicroseconds+0x166>)
    7d82:	f7f9 f83d 	bl	e00 <BMSModuleManager::setBalanceHyst(float)>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7d86:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7d8a:	f001 ff0d 	bl	9ba8 <eeprom_read_byte>
  if (settings.voltsoc == 1) {
    7d8e:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
  SOC = (EEPROM.read(1000));
    7d92:	6020      	str	r0, [r4, #0]
  if (settings.voltsoc == 1) {
    7d94:	2b01      	cmp	r3, #1
    7d96:	d001      	beq.n	7d9c <L_29174_delayMicroseconds+0xb6>
    if (SOC > 100) {
    7d98:	2864      	cmp	r0, #100	; 0x64
    7d9a:	dd02      	ble.n	7da2 <L_29174_delayMicroseconds+0xbc>
    SOCmem = 0;
    7d9c:	4b2c      	ldr	r3, [pc, #176]	; (7e50 <L_29174_delayMicroseconds+0x16a>)
    7d9e:	2200      	movs	r2, #0
    7da0:	601a      	str	r2, [r3, #0]
    7da2:	210e      	movs	r1, #14
    7da4:	482b      	ldr	r0, [pc, #172]	; (7e54 <L_29174_delayMicroseconds+0x16e>)
    7da6:	f004 fa33 	bl	c210 <usb_serial_write>
    7daa:	481d      	ldr	r0, [pc, #116]	; (7e20 <L_29174_delayMicroseconds+0x13a>)
    7dac:	f001 fce0 	bl	9770 <Print::println()>
	size_t print(int n)				{ return print((long)n); }
    7db0:	6821      	ldr	r1, [r4, #0]
    7db2:	481b      	ldr	r0, [pc, #108]	; (7e20 <L_29174_delayMicroseconds+0x13a>)
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    7db4:	4c28      	ldr	r4, [pc, #160]	; (7e58 <L_29174_delayMicroseconds+0x172>)
    7db6:	f001 fcd3 	bl	9760 <Print::print(long)>
    7dba:	4b28      	ldr	r3, [pc, #160]	; (7e5c <L_29174_delayMicroseconds+0x176>)
    7dbc:	4a28      	ldr	r2, [pc, #160]	; (7e60 <L_29174_delayMicroseconds+0x17a>)
    7dbe:	681b      	ldr	r3, [r3, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7dc0:	6839      	ldr	r1, [r7, #0]
    7dc2:	9105      	str	r1, [sp, #20]
    7dc4:	fb82 0203 	smull	r0, r2, r2, r3
    7dc8:	17db      	asrs	r3, r3, #31
    7dca:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    7dce:	4a25      	ldr	r2, [pc, #148]	; (7e64 <L_29174_delayMicroseconds+0x17e>)
	return ret;
    7dd0:	9905      	ldr	r1, [sp, #20]
    7dd2:	6812      	ldr	r2, [r2, #0]
    7dd4:	fb13 f302 	smulbb	r3, r3, r2
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7dd8:	683a      	ldr	r2, [r7, #0]
    7dda:	9204      	str	r2, [sp, #16]
    7ddc:	8023      	strh	r3, [r4, #0]
  Pretimer = millis();
    7dde:	4a22      	ldr	r2, [pc, #136]	; (7e68 <L_29174_delayMicroseconds+0x182>)
  Pretimer1 = millis();
    7de0:	4b22      	ldr	r3, [pc, #136]	; (7e6c <L_29174_delayMicroseconds+0x186>)
	return ret;
    7de2:	9804      	ldr	r0, [sp, #16]
  Pretimer = millis();
    7de4:	6011      	str	r1, [r2, #0]
  Pretimer1 = millis();
    7de6:	6018      	str	r0, [r3, #0]
  attachInterrupt(IN4, isrCP, CHANGE);  // attach BUTTON 1 interrupt handler [ pin# 7 ]
    7de8:	4921      	ldr	r1, [pc, #132]	; (7e70 <L_29174_delayMicroseconds+0x18a>)
    7dea:	2204      	movs	r2, #4
    7dec:	2013      	movs	r0, #19
    7dee:	f002 f94d 	bl	a08c <attachInterrupt>
    7df2:	e03f      	b.n	7e74 <L_29174_delayMicroseconds+0x18e>
    7df4:	1fff8874 	.word	0x1fff8874
    7df8:	1fffcfd4 	.word	0x1fffcfd4
    7dfc:	1fffd1cc 	.word	0x1fffd1cc
    7e00:	1fffd368 	.word	0x1fffd368
    7e04:	0007a120 	.word	0x0007a120
    7e08:	1fff91dc 	.word	0x1fff91dc
    7e0c:	1fffd3c0 	.word	0x1fffd3c0
    7e10:	1fffd5dc 	.word	0x1fffd5dc
    7e14:	1fffd5e0 	.word	0x1fffd5e0
    7e18:	1fffd5b8 	.word	0x1fffd5b8
    7e1c:	00015200 	.word	0x00015200
    7e20:	1fff89fc 	.word	0x1fff89fc
    7e24:	00015210 	.word	0x00015210
    7e28:	1fff88bc 	.word	0x1fff88bc
    7e2c:	00015220 	.word	0x00015220
    7e30:	4007f000 	.word	0x4007f000
    7e34:	40052000 	.word	0x40052000
    7e38:	1fff88d0 	.word	0x1fff88d0
    7e3c:	1fffd0d8 	.word	0x1fffd0d8
    7e40:	00015324 	.word	0x00015324
    7e44:	1fffcffc 	.word	0x1fffcffc
    7e48:	1fff8828 	.word	0x1fff8828
    7e4c:	1fff91f0 	.word	0x1fff91f0
    7e50:	1fff91c4 	.word	0x1fff91c4
    7e54:	00015348 	.word	0x00015348
    7e58:	1fffd0d4 	.word	0x1fffd0d4
    7e5c:	1fff8870 	.word	0x1fff8870
    7e60:	51eb851f 	.word	0x51eb851f
    7e64:	1fff886c 	.word	0x1fff886c
    7e68:	1fff91b8 	.word	0x1fff91b8
    7e6c:	1fff91bc 	.word	0x1fff91bc
    7e70:	00002385 	.word	0x00002385
  PMC_LVDSC1 = PMC_LVDSC1_LVDV(1);                     // enable hi v
    7e74:	4b3c      	ldr	r3, [pc, #240]	; (7f68 <L_29174_delayMicroseconds+0x282>)
  PMC_LVDSC2 = PMC_LVDSC2_LVWIE | PMC_LVDSC2_LVWV(3);  // 2.92-3.08v
    7e76:	2223      	movs	r2, #35	; 0x23
  PMC_LVDSC1 = PMC_LVDSC1_LVDV(1);                     // enable hi v
    7e78:	2101      	movs	r1, #1
    7e7a:	7019      	strb	r1, [r3, #0]
  attachInterruptVector(IRQ_LOW_VOLTAGE, low_voltage_isr);
    7e7c:	2014      	movs	r0, #20
  PMC_LVDSC2 = PMC_LVDSC2_LVWIE | PMC_LVDSC2_LVWV(3);  // 2.92-3.08v
    7e7e:	705a      	strb	r2, [r3, #1]
  attachInterruptVector(IRQ_LOW_VOLTAGE, low_voltage_isr);
    7e80:	493a      	ldr	r1, [pc, #232]	; (7f6c <L_29174_delayMicroseconds+0x286>)
    7e82:	f002 f8fb 	bl	a07c <attachInterruptVector>
  NVIC_ENABLE_IRQ(IRQ_LOW_VOLTAGE);
    7e86:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    7e8a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    7e8e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7e92:	683a      	ldr	r2, [r7, #0]
    7e94:	9203      	str	r2, [sp, #12]
  cleartime = millis();
    7e96:	4b36      	ldr	r3, [pc, #216]	; (7f70 <L_29174_delayMicroseconds+0x28a>)
	return ret;
    7e98:	9a03      	ldr	r2, [sp, #12]
    7e9a:	601a      	str	r2, [r3, #0]
}
    7e9c:	b007      	add	sp, #28
    7e9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
    7ea2:	683b      	ldr	r3, [r7, #0]
			if (usb_configuration) {
    7ea4:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    7ea6:	1b5b      	subs	r3, r3, r5
			if (usb_configuration) {
    7ea8:	b132      	cbz	r2, 7eb8 <L_29174_delayMicroseconds+0x1d2>
				if (elapsed > 2000) break;
    7eaa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    7eae:	f63f aebe 	bhi.w	7c2e <setup+0x1ba>
			yield();
    7eb2:	f004 fab3 	bl	c41c <yield>
    7eb6:	e6a9      	b.n	7c0c <setup+0x198>
				if (elapsed > 750) break;
    7eb8:	4543      	cmp	r3, r8
    7eba:	d9fa      	bls.n	7eb2 <L_29174_delayMicroseconds+0x1cc>
    7ebc:	e6b7      	b.n	7c2e <setup+0x1ba>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7ebe:	2118      	movs	r1, #24
    7ec0:	482c      	ldr	r0, [pc, #176]	; (7f74 <L_29174_delayMicroseconds+0x28e>)
    7ec2:	f004 f9a5 	bl	c210 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    7ec6:	482c      	ldr	r0, [pc, #176]	; (7f78 <L_29174_delayMicroseconds+0x292>)
    7ec8:	f001 fc52 	bl	9770 <Print::println()>
    7ecc:	e6fe      	b.n	7ccc <setup+0x258>
    7ece:	2119      	movs	r1, #25
    7ed0:	482a      	ldr	r0, [pc, #168]	; (7f7c <L_29174_delayMicroseconds+0x296>)
    7ed2:	f004 f99d 	bl	c210 <usb_serial_write>
    7ed6:	4828      	ldr	r0, [pc, #160]	; (7f78 <L_29174_delayMicroseconds+0x292>)
    7ed8:	f001 fc4a 	bl	9770 <Print::println()>
    7edc:	e6f1      	b.n	7cc2 <setup+0x24e>
    7ede:	211c      	movs	r1, #28
    7ee0:	4827      	ldr	r0, [pc, #156]	; (7f80 <L_29174_delayMicroseconds+0x29a>)
    7ee2:	f004 f995 	bl	c210 <usb_serial_write>
    7ee6:	4824      	ldr	r0, [pc, #144]	; (7f78 <L_29174_delayMicroseconds+0x292>)
    7ee8:	f001 fc42 	bl	9770 <Print::println()>
    7eec:	e6e4      	b.n	7cb8 <setup+0x244>
    7eee:	2113      	movs	r1, #19
    7ef0:	4824      	ldr	r0, [pc, #144]	; (7f84 <L_29174_delayMicroseconds+0x29e>)
    7ef2:	f004 f98d 	bl	c210 <usb_serial_write>
    7ef6:	4820      	ldr	r0, [pc, #128]	; (7f78 <L_29174_delayMicroseconds+0x292>)
    7ef8:	f001 fc3a 	bl	9770 <Print::println()>
    7efc:	e6d7      	b.n	7cae <setup+0x23a>
    7efe:	2112      	movs	r1, #18
    7f00:	4821      	ldr	r0, [pc, #132]	; (7f88 <L_29174_delayMicroseconds+0x2a2>)
    7f02:	f004 f985 	bl	c210 <usb_serial_write>
    7f06:	481c      	ldr	r0, [pc, #112]	; (7f78 <L_29174_delayMicroseconds+0x292>)
    7f08:	f001 fc32 	bl	9770 <Print::println()>
    7f0c:	e6ca      	b.n	7ca4 <setup+0x230>
    7f0e:	2117      	movs	r1, #23
    7f10:	481e      	ldr	r0, [pc, #120]	; (7f8c <L_29174_delayMicroseconds+0x2a6>)
    7f12:	f004 f97d 	bl	c210 <usb_serial_write>
    7f16:	4818      	ldr	r0, [pc, #96]	; (7f78 <L_29174_delayMicroseconds+0x292>)
    7f18:	f001 fc2a 	bl	9770 <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    7f1c:	4b1c      	ldr	r3, [pc, #112]	; (7f90 <L_29174_delayMicroseconds+0x2aa>)
    7f1e:	781b      	ldrb	r3, [r3, #0]
    7f20:	061d      	lsls	r5, r3, #24
    7f22:	f57f aeba 	bpl.w	7c9a <setup+0x226>
    7f26:	210e      	movs	r1, #14
    7f28:	481a      	ldr	r0, [pc, #104]	; (7f94 <L_29174_delayMicroseconds+0x2ae>)
    7f2a:	f004 f971 	bl	c210 <usb_serial_write>
    7f2e:	4812      	ldr	r0, [pc, #72]	; (7f78 <L_29174_delayMicroseconds+0x292>)
    7f30:	f001 fc1e 	bl	9770 <Print::println()>
    7f34:	e6b1      	b.n	7c9a <setup+0x226>
    7f36:	210e      	movs	r1, #14
    7f38:	4817      	ldr	r0, [pc, #92]	; (7f98 <L_29174_delayMicroseconds+0x2b2>)
    7f3a:	f004 f969 	bl	c210 <usb_serial_write>
    7f3e:	480e      	ldr	r0, [pc, #56]	; (7f78 <L_29174_delayMicroseconds+0x292>)
    7f40:	f001 fc16 	bl	9770 <Print::println()>
    7f44:	e69f      	b.n	7c86 <setup+0x212>
    7f46:	210c      	movs	r1, #12
    7f48:	4814      	ldr	r0, [pc, #80]	; (7f9c <L_29174_delayMicroseconds+0x2b6>)
    7f4a:	f004 f961 	bl	c210 <usb_serial_write>
    7f4e:	480a      	ldr	r0, [pc, #40]	; (7f78 <L_29174_delayMicroseconds+0x292>)
    7f50:	f001 fc0e 	bl	9770 <Print::println()>
    7f54:	e692      	b.n	7c7c <setup+0x208>
    7f56:	2121      	movs	r1, #33	; 0x21
    7f58:	4811      	ldr	r0, [pc, #68]	; (7fa0 <L_29174_delayMicroseconds+0x2ba>)
    7f5a:	f004 f959 	bl	c210 <usb_serial_write>
    7f5e:	4806      	ldr	r0, [pc, #24]	; (7f78 <L_29174_delayMicroseconds+0x292>)
    7f60:	f001 fc06 	bl	9770 <Print::println()>
    7f64:	e685      	b.n	7c72 <setup+0x1fe>
    7f66:	bf00      	nop
    7f68:	4007d000 	.word	0x4007d000
    7f6c:	00002435 	.word	0x00002435
    7f70:	1fffcf4c 	.word	0x1fffcf4c
    7f74:	00015308 	.word	0x00015308
    7f78:	1fff89fc 	.word	0x1fff89fc
    7f7c:	000152ec 	.word	0x000152ec
    7f80:	000152cc 	.word	0x000152cc
    7f84:	000152b8 	.word	0x000152b8
    7f88:	000152a4 	.word	0x000152a4
    7f8c:	0001527c 	.word	0x0001527c
    7f90:	4007f000 	.word	0x4007f000
    7f94:	00015294 	.word	0x00015294
    7f98:	0001526c 	.word	0x0001526c
    7f9c:	0001525c 	.word	0x0001525c
    7fa0:	00015238 	.word	0x00015238

00007fa4 <CANListener::frameHandler(CAN_message_t&, int, unsigned char)>:
{

    /* default implementation that doesn't handle frames */

    return (false);
}
    7fa4:	2000      	movs	r0, #0
    7fa6:	4770      	bx	lr

00007fa8 <CANListener::txHandler(int, unsigned char)>:
 */

void CANListener::txHandler (int /*mailbox*/, uint8_t /*controller*/)
{

}
    7fa8:	4770      	bx	lr
    7faa:	bf00      	nop

00007fac <FlexCAN::FlexCAN(unsigned char)>:
FlexCAN::FlexCAN (uint8_t id)
    7fac:	b538      	push	{r3, r4, r5, lr}
    defaultMask.id = 0;
    7fae:	4b1b      	ldr	r3, [pc, #108]	; (801c <FlexCAN::FlexCAN(unsigned char)+0x70>)
    flexcanBase = FLEXCAN0_BASE;
    7fb0:	491b      	ldr	r1, [pc, #108]	; (8020 <FlexCAN::FlexCAN(unsigned char)+0x74>)
    defaultMask.flags.extended = 0;
    7fb2:	791a      	ldrb	r2, [r3, #4]
FlexCAN::FlexCAN (uint8_t id)
    7fb4:	4604      	mov	r4, r0
    defaultMask.id = 0;
    7fb6:	2500      	movs	r5, #0
    flexcanBase = FLEXCAN0_BASE;
    7fb8:	6021      	str	r1, [r4, #0]
    defaultMask.flags.extended = 0;
    7fba:	f022 0203 	bic.w	r2, r2, #3
    IrqMessage=IRQ_CAN_MESSAGE;
    7fbe:	211d      	movs	r1, #29
    7fc0:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
    defaultMask.id = 0;
    7fc4:	601d      	str	r5, [r3, #0]
    defaultMask.flags.extended = 0;
    7fc6:	711a      	strb	r2, [r3, #4]
    numTxMailboxes=2;
    7fc8:	2002      	movs	r0, #2
    sizeTxBuffer=SIZE_TX_BUFFER;
    7fca:	2310      	movs	r3, #16
    sizeRxBuffer=SIZE_RX_BUFFER;
    7fcc:	2120      	movs	r1, #32
    sizeTxBuffer=SIZE_TX_BUFFER;
    7fce:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
    numTxMailboxes=2;
    7fd2:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    sizeRxBuffer=SIZE_RX_BUFFER;
    7fd6:	f8a4 1196 	strh.w	r1, [r4, #406]	; 0x196
    tx_buffer=0;
    7fda:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
      txRings[i]=0;
    7fde:	4629      	mov	r1, r5
    rx_buffer=0;
    7fe0:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
      txRings[i]=0;
    7fe4:	2240      	movs	r2, #64	; 0x40
    7fe6:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    7fea:	f006 f873 	bl	e0d4 <memset>
        listener[i] = NULL;
    7fee:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    7ff2:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    7ff6:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
    7ffa:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    memset (&stats, 0, sizeof(stats));
    7ffe:	2298      	movs	r2, #152	; 0x98
    8000:	4629      	mov	r1, r5
    8002:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
    8006:	f006 f865 	bl	e0d4 <memset>
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    800a:	221f      	movs	r2, #31
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    800c:	230f      	movs	r3, #15
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    800e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    8012:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
}
    8016:	4620      	mov	r0, r4
    8018:	bd38      	pop	{r3, r4, r5, pc}
    801a:	bf00      	nop
    801c:	1fffd368 	.word	0x1fffd368
    8020:	40024000 	.word	0x40024000

00008024 <FlexCAN::setBaudRate(unsigned long)>:
void FlexCAN::setBaudRate(uint32_t baud) {
    8024:	b570      	push	{r4, r5, r6, lr}
    uint32_t result = 16000000 / baud / (divisor + 1);
    8026:	4e2d      	ldr	r6, [pc, #180]	; (80dc <FlexCAN::setBaudRate(unsigned long)+0xb8>)
    8028:	fbb6 fcf1 	udiv	ip, r6, r1
    while (result > 5) {
    802c:	f1bc 0f05 	cmp.w	ip, #5
    int error = baud - (16000000 / (result * (divisor + 1)));
    8030:	fbb6 f4fc 	udiv	r4, r6, ip
    uint32_t bestDivisor = 0;
    8034:	f04f 0500 	mov.w	r5, #0
    int error = baud - (16000000 / (result * (divisor + 1)));
    8038:	eba1 0404 	sub.w	r4, r1, r4
    while (result > 5) {
    803c:	d921      	bls.n	8082 <FlexCAN::setBaudRate(unsigned long)+0x5e>
    uint32_t divisor = 0;
    803e:	462b      	mov	r3, r5
        divisor++;
    8040:	f103 0e01 	add.w	lr, r3, #1
        result = 16000000 / baud / (divisor + 1);
    8044:	3302      	adds	r3, #2
    8046:	fbbc f2f3 	udiv	r2, ip, r3
        if (result <= 25) {
    804a:	2a19      	cmp	r2, #25
            error = baud - (16000000 / (result * (divisor + 1)));
    804c:	fb02 f303 	mul.w	r3, r2, r3
        if (result <= 25) {
    8050:	d80f      	bhi.n	8072 <FlexCAN::setBaudRate(unsigned long)+0x4e>
            error = baud - (16000000 / (result * (divisor + 1)));
    8052:	fbb6 f3f3 	udiv	r3, r6, r3
    8056:	1acb      	subs	r3, r1, r3
            if (error < 0)
    8058:	2b00      	cmp	r3, #0
    805a:	bfb8      	it	lt
    805c:	425b      	neglt	r3, r3
            if (error < bestError) {
    805e:	42a3      	cmp	r3, r4
    8060:	da09      	bge.n	8076 <FlexCAN::setBaudRate(unsigned long)+0x52>
    8062:	461c      	mov	r4, r3
                bestDivisor = divisor;
    8064:	4675      	mov	r5, lr
            if ((error == bestError) && (result > 11) && (result < 19)) {
    8066:	2a0b      	cmp	r2, #11
    8068:	d906      	bls.n	8078 <FlexCAN::setBaudRate(unsigned long)+0x54>
    806a:	2a12      	cmp	r2, #18
    806c:	bf9c      	itt	ls
    806e:	461c      	movls	r4, r3
    8070:	4675      	movls	r5, lr
void FlexCAN::setBaudRate(uint32_t baud) {
    8072:	4673      	mov	r3, lr
    8074:	e7e4      	b.n	8040 <FlexCAN::setBaudRate(unsigned long)+0x1c>
            if ((error == bestError) && (result > 11) && (result < 19)) {
    8076:	d0f6      	beq.n	8066 <FlexCAN::setBaudRate(unsigned long)+0x42>
    while (result > 5) {
    8078:	2a05      	cmp	r2, #5
    807a:	d8fa      	bhi.n	8072 <FlexCAN::setBaudRate(unsigned long)+0x4e>
    result = 16000000 / baud / (divisor + 1);
    807c:	1c6b      	adds	r3, r5, #1
    807e:	fbbc fcf3 	udiv	ip, ip, r3
    if ((result < 5) || (result > 25) || (bestError > 300)) {
    8082:	f1ac 0c05 	sub.w	ip, ip, #5
    8086:	f1bc 0f14 	cmp.w	ip, #20
    808a:	d81e      	bhi.n	80ca <FlexCAN::setBaudRate(unsigned long)+0xa6>
    808c:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    8090:	dc1b      	bgt.n	80ca <FlexCAN::setBaudRate(unsigned long)+0xa6>
    uint8_t pSeg1   = bitTimingTable[result][1];
    8092:	4b13      	ldr	r3, [pc, #76]	; (80e0 <FlexCAN::setBaudRate(unsigned long)+0xbc>)
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    8094:	6800      	ldr	r0, [r0, #0]
    uint8_t pSeg1   = bitTimingTable[result][1];
    8096:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    809a:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    809e:	f813 100c 	ldrb.w	r1, [r3, ip]
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    80a2:	7853      	ldrb	r3, [r2, #1]
    80a4:	7892      	ldrb	r2, [r2, #2]
    80a6:	04db      	lsls	r3, r3, #19
    80a8:	0412      	lsls	r2, r2, #16
    80aa:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
    80ae:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    80b2:	f001 0107 	and.w	r1, r1, #7
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    80b6:	4313      	orrs	r3, r2
    80b8:	430b      	orrs	r3, r1
    80ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    80be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    80c2:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    80c6:	6043      	str	r3, [r0, #4]
}
    80c8:	bd70      	pop	{r4, r5, r6, pc}
    80ca:	4806      	ldr	r0, [pc, #24]	; (80e4 <FlexCAN::setBaudRate(unsigned long)+0xc0>)
    80cc:	2139      	movs	r1, #57	; 0x39
    80ce:	f004 f89f 	bl	c210 <usb_serial_write>
    80d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    80d6:	4804      	ldr	r0, [pc, #16]	; (80e8 <FlexCAN::setBaudRate(unsigned long)+0xc4>)
    80d8:	f001 bb4a 	b.w	9770 <Print::println()>
    80dc:	00f42400 	.word	0x00f42400
    80e0:	1fff887c 	.word	0x1fff887c
    80e4:	00015358 	.word	0x00015358
    80e8:	1fff89fc 	.word	0x1fff89fc

000080ec <FlexCAN::setNumTxBoxes(unsigned char)>:
{
    80ec:	b530      	push	{r4, r5, lr}
    80ee:	2901      	cmp	r1, #1
    80f0:	4604      	mov	r4, r0
    80f2:	bf38      	it	cc
    80f4:	2101      	movcc	r1, #1
    80f6:	290f      	cmp	r1, #15
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    80f8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    80fc:	4608      	mov	r0, r1
    80fe:	bf28      	it	cs
    8100:	200f      	movcs	r0, #15
    numTxMailboxes = txboxes;
    8102:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    8106:	b31b      	cbz	r3, 8150 <FlexCAN::setNumTxBoxes(unsigned char)+0x64>
    void setMailBoxTxBufferSize(uint8_t mbox, uint16_t size);

    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    inline uint8_t getLastTxBox() { return getNumMailBoxes()-1; }
    inline uint8_t getNumMailBoxes() { return NUM_MAILBOXES; }
    inline uint8_t getNumRxBoxes() { return getNumMailBoxes()-numTxMailboxes; }
    8108:	f1c0 0e10 	rsb	lr, r0, #16
    810c:	fa5f f58e 	uxtb.w	r5, lr
    8110:	46ae      	mov	lr, r5
    8112:	2200      	movs	r2, #0
    8114:	012d      	lsls	r5, r5, #4
        oldIde = FLEXCANb_MBn_CS(flexcanBase, c) & FLEXCAN_MB_CS_IDE;
    8116:	6823      	ldr	r3, [r4, #0]
    8118:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    811c:	f85c 3002 	ldr.w	r3, [ip, r2]
    8120:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | oldIde;
    8124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    8128:	f84c 3002 	str.w	r3, [ip, r2]
    for (c = 0; c < getNumRxBoxes(); c++) {
    812c:	3210      	adds	r2, #16
    812e:	4295      	cmp	r5, r2
    8130:	d1f1      	bne.n	8116 <FlexCAN::setNumTxBoxes(unsigned char)+0x2a>
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    8132:	2510      	movs	r5, #16
    8134:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    8138:	6823      	ldr	r3, [r4, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    813a:	f10e 0201 	add.w	r2, lr, #1
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    813e:	3380      	adds	r3, #128	; 0x80
    8140:	fb15 330e 	smlabb	r3, r5, lr, r3
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    8144:	fa5f fe82 	uxtb.w	lr, r2
    8148:	f1be 0f10 	cmp.w	lr, #16
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    814c:	6019      	str	r1, [r3, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    814e:	d1f3      	bne.n	8138 <FlexCAN::setNumTxBoxes(unsigned char)+0x4c>
}
    8150:	bd30      	pop	{r4, r5, pc}
    8152:	bf00      	nop

00008154 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>:
    8154:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    8158:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    815c:	b2db      	uxtb	r3, r3
    815e:	429a      	cmp	r2, r3
    8160:	d222      	bcs.n	81a8 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x54>
{
    8162:	b510      	push	{r4, lr}
    8164:	468c      	mov	ip, r1
    8166:	4686      	mov	lr, r0
        MBFilters[mbox] = filter;
    8168:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    816c:	e9d1 0100 	ldrd	r0, r1, [r1]
    8170:	3304      	adds	r3, #4
    8172:	e883 0003 	stmia.w	r3, {r0, r1}
        if (filter.flags.extended) {
    8176:	f89c 3004 	ldrb.w	r3, [ip, #4]
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    817a:	f8de 1000 	ldr.w	r1, [lr]
        if (filter.flags.extended) {
    817e:	07db      	lsls	r3, r3, #31
    8180:	d513      	bpl.n	81aa <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x56>
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    8182:	f8dc 0000 	ldr.w	r0, [ip]
    8186:	2310      	movs	r3, #16
    8188:	3184      	adds	r1, #132	; 0x84
    818a:	fb13 1102 	smlabb	r1, r3, r2, r1
    818e:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
    8192:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) |= FLEXCAN_MB_CS_IDE;
    8194:	f8de 1000 	ldr.w	r1, [lr]
    8198:	3180      	adds	r1, #128	; 0x80
    819a:	fb13 1302 	smlabb	r3, r3, r2, r1
    819e:	681a      	ldr	r2, [r3, #0]
    81a0:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    81a4:	601a      	str	r2, [r3, #0]
}
    81a6:	bd10      	pop	{r4, pc}
    81a8:	4770      	bx	lr
            FLEXCANb_MBn_ID(flexcanBase, mbox) = FLEXCAN_MB_ID_IDSTD(filter.id);
    81aa:	f8dc 4000 	ldr.w	r4, [ip]
    81ae:	4809      	ldr	r0, [pc, #36]	; (81d4 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x80>)
    81b0:	2310      	movs	r3, #16
    81b2:	3184      	adds	r1, #132	; 0x84
    81b4:	fb13 1102 	smlabb	r1, r3, r2, r1
    81b8:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    81bc:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) &= ~FLEXCAN_MB_CS_IDE;
    81be:	f8de 1000 	ldr.w	r1, [lr]
    81c2:	3180      	adds	r1, #128	; 0x80
    81c4:	fb13 1302 	smlabb	r3, r3, r2, r1
    81c8:	681a      	ldr	r2, [r3, #0]
    81ca:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    81ce:	601a      	str	r2, [r3, #0]
}
    81d0:	bd10      	pop	{r4, pc}
    81d2:	bf00      	nop
    81d4:	1ffc0000 	.word	0x1ffc0000

000081d8 <FlexCAN::setMask(unsigned long, unsigned char)>:
    81d8:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    81dc:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    81e0:	b2db      	uxtb	r3, r3
    81e2:	429a      	cmp	r2, r3
    81e4:	d221      	bcs.n	822a <FlexCAN::setMask(unsigned long, unsigned char)+0x52>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    81e6:	6803      	ldr	r3, [r0, #0]
{
    81e8:	b410      	push	{r4}
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    81ea:	681c      	ldr	r4, [r3, #0]
      if (!wasFrozen) {
    81ec:	01e4      	lsls	r4, r4, #7
    81ee:	d41d      	bmi.n	822c <FlexCAN::setMask(unsigned long, unsigned char)+0x54>
  FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_FRZ;
    81f0:	681c      	ldr	r4, [r3, #0]
    81f2:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    81f6:	601c      	str	r4, [r3, #0]
    FLEXCANb_MCR(flexcanBase) |= (FLEXCAN_MCR_HALT);
    81f8:	6804      	ldr	r4, [r0, #0]
    81fa:	6823      	ldr	r3, [r4, #0]
    81fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    8200:	6023      	str	r3, [r4, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    8202:	6804      	ldr	r4, [r0, #0]
    8204:	6823      	ldr	r3, [r4, #0]
  while (!isFrozen());
    8206:	01db      	lsls	r3, r3, #7
    8208:	d5fc      	bpl.n	8204 <FlexCAN::setMask(unsigned long, unsigned char)+0x2c>
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    820a:	f504 6408 	add.w	r4, r4, #2176	; 0x880
    820e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    8212:	6021      	str	r1, [r4, #0]
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    8214:	6802      	ldr	r2, [r0, #0]
    8216:	6813      	ldr	r3, [r2, #0]
    8218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    821c:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    821e:	6802      	ldr	r2, [r0, #0]
    8220:	6813      	ldr	r3, [r2, #0]
  while (isFrozen());
    8222:	01db      	lsls	r3, r3, #7
    8224:	d4fc      	bmi.n	8220 <FlexCAN::setMask(unsigned long, unsigned char)+0x48>
}
    8226:	bc10      	pop	{r4}
    8228:	4770      	bx	lr
    822a:	4770      	bx	lr
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    822c:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    8230:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
    8234:	bc10      	pop	{r4}
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    8236:	6019      	str	r1, [r3, #0]
}
    8238:	4770      	bx	lr
    823a:	bf00      	nop

0000823c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>:
{
    823c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8240:	4617      	mov	r7, r2
    if ( isInitialized() ) return;
    8242:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
{
    8246:	f89d 8018 	ldrb.w	r8, [sp, #24]
    824a:	4606      	mov	r6, r0
    824c:	460d      	mov	r5, r1
    824e:	461c      	mov	r4, r3
    if ( isInitialized() ) return;
    8250:	2a00      	cmp	r2, #0
    8252:	f000 808f 	beq.w	8374 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x138>
    if (flexcanBase == FLEXCAN0_BASE) {
    8256:	4a63      	ldr	r2, [pc, #396]	; (83e4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a8>)
    8258:	6831      	ldr	r1, [r6, #0]
    825a:	4291      	cmp	r1, r2
    825c:	d07c      	beq.n	8358 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x11c>
    OSC0_CR |= OSC_ERCLKEN;
    825e:	4a62      	ldr	r2, [pc, #392]	; (83e8 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1ac>)
    8260:	7813      	ldrb	r3, [r2, #0]
    8262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    8266:	7013      	strb	r3, [r2, #0]
    if (flexcanBase == FLEXCAN0_BASE) {
    8268:	6833      	ldr	r3, [r6, #0]
    826a:	f5a2 2282 	sub.w	r2, r2, #266240	; 0x41000
    826e:	4293      	cmp	r3, r2
    8270:	d106      	bne.n	8280 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x44>
        SIM_SCGC6 |=  SIM_SCGC6_FLEXCAN0;
    8272:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    8276:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    8278:	f043 0310 	orr.w	r3, r3, #16
    827c:	63d3      	str	r3, [r2, #60]	; 0x3c
    FLEXCANb_CTRL1(flexcanBase) &= ~FLEXCAN_CTRL_CLK_SRC;
    827e:	6833      	ldr	r3, [r6, #0]
    8280:	685a      	ldr	r2, [r3, #4]
    8282:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    8286:	605a      	str	r2, [r3, #4]
    FLEXCANb_MCR (flexcanBase) |=  FLEXCAN_MCR_FRZ;
    8288:	6832      	ldr	r2, [r6, #0]
    828a:	6813      	ldr	r3, [r2, #0]
    828c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    8290:	6013      	str	r3, [r2, #0]
    FLEXCANb_MCR (flexcanBase) &= ~FLEXCAN_MCR_MDIS;
    8292:	6832      	ldr	r2, [r6, #0]
    8294:	6813      	ldr	r3, [r2, #0]
    8296:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    829a:	6013      	str	r3, [r2, #0]
    while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_LPM_ACK)
    829c:	6832      	ldr	r2, [r6, #0]
    829e:	6813      	ldr	r3, [r2, #0]
    82a0:	02d9      	lsls	r1, r3, #11
    82a2:	d4fc      	bmi.n	829e <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x62>
  FLEXCANb_MCR (flexcanBase) ^=  FLEXCAN_MCR_SOFT_RST;
    82a4:	6813      	ldr	r3, [r2, #0]
    82a6:	f083 7300 	eor.w	r3, r3, #33554432	; 0x2000000
    82aa:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR (flexcanBase) & FLEXCAN_MCR_SOFT_RST)
    82ac:	6833      	ldr	r3, [r6, #0]
    82ae:	681c      	ldr	r4, [r3, #0]
    82b0:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
    82b4:	d1fb      	bne.n	82ae <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x72>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    82b6:	681a      	ldr	r2, [r3, #0]
  while (!isFrozen());
    82b8:	01d2      	lsls	r2, r2, #7
    82ba:	d5fc      	bpl.n	82b6 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x7a>
    FLEXCANb_MCR (flexcanBase) |= FLEXCAN_MCR_SRX_DIS;
    82bc:	681a      	ldr	r2, [r3, #0]
    82be:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    82c2:	601a      	str	r2, [r3, #0]
    setBaudRate(baud);
    82c4:	4629      	mov	r1, r5
    82c6:	4630      	mov	r0, r6
    82c8:	f7ff feac 	bl	8024 <FlexCAN::setBaudRate(unsigned long)>
    FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_IRMQ;
    82cc:	6832      	ldr	r2, [r6, #0]
    82ce:	6813      	ldr	r3, [r2, #0]
    82d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    82d4:	6013      	str	r3, [r2, #0]
    82d6:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    82da:	2910      	cmp	r1, #16
    82dc:	d012      	beq.n	8304 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xc8>
    82de:	2500      	movs	r5, #0
        setMask (0, c);
    82e0:	462a      	mov	r2, r5
    82e2:	4630      	mov	r0, r6
    82e4:	2100      	movs	r1, #0
    82e6:	f7ff ff77 	bl	81d8 <FlexCAN::setMask(unsigned long, unsigned char)>
        setFilter (mask, c);
    82ea:	462a      	mov	r2, r5
    82ec:	4639      	mov	r1, r7
    82ee:	f7ff ff31 	bl	8154 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
    82f2:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    82f6:	3401      	adds	r4, #1
    82f8:	f1c1 0310 	rsb	r3, r1, #16
    82fc:	b2e5      	uxtb	r5, r4
    82fe:	b2db      	uxtb	r3, r3
    8300:	429d      	cmp	r5, r3
    8302:	d3ed      	bcc.n	82e0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xa4>
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    8304:	6832      	ldr	r2, [r6, #0]
    8306:	6813      	ldr	r3, [r2, #0]
    8308:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    830c:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    830e:	6833      	ldr	r3, [r6, #0]
    8310:	681a      	ldr	r2, [r3, #0]
  while (isFrozen());
    8312:	01d0      	lsls	r0, r2, #7
    8314:	d4fc      	bmi.n	8310 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xd4>
  while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_NOT_RDY);
    8316:	681a      	ldr	r2, [r3, #0]
    8318:	0112      	lsls	r2, r2, #4
    831a:	d4fc      	bmi.n	8316 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xda>
    setNumTxBoxes (numTxMailboxes);
    831c:	4630      	mov	r0, r6
    831e:	f7ff fee5 	bl	80ec <FlexCAN::setNumTxBoxes(unsigned char)>
    NVIC_SET_PRIORITY (IrqMessage, IRQ_PRIORITY);
    8322:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    8326:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    832a:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    832e:	2240      	movs	r2, #64	; 0x40
    8330:	701a      	strb	r2, [r3, #0]
    NVIC_ENABLE_IRQ (IrqMessage);
    8332:	f8d6 20f8 	ldr.w	r2, [r6, #248]	; 0xf8
    8336:	0953      	lsrs	r3, r2, #5
    8338:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    833c:	3340      	adds	r3, #64	; 0x40
    833e:	009b      	lsls	r3, r3, #2
    8340:	2101      	movs	r1, #1
    8342:	f002 021f 	and.w	r2, r2, #31
    8346:	fa01 f202 	lsl.w	r2, r1, r2
    834a:	601a      	str	r2, [r3, #0]
    FLEXCANb_IMASK1 (flexcanBase) = 0xFFFF;
    834c:	6833      	ldr	r3, [r6, #0]
    834e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    8352:	6298      	str	r0, [r3, #40]	; 0x28
}
    8354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (txAlt == 1)
    8358:	2c01      	cmp	r4, #1
    835a:	d02b      	beq.n	83b4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x178>
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    835c:	4b23      	ldr	r3, [pc, #140]	; (83ec <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    835e:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    8362:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    8366:	631a      	str	r2, [r3, #48]	; 0x30
        if (rxAlt == 1)
    8368:	d02b      	beq.n	83c2 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x186>
            CORE_PIN4_CONFIG = PORT_PCR_MUX(2);
    836a:	4b20      	ldr	r3, [pc, #128]	; (83ec <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    836c:	f44f 7200 	mov.w	r2, #512	; 0x200
    8370:	635a      	str	r2, [r3, #52]	; 0x34
    8372:	e774      	b.n	825e <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    8374:	f8b0 0198 	ldrh.w	r0, [r0, #408]	; 0x198
    8378:	0100      	lsls	r0, r0, #4
    837a:	f001 fe2b 	bl	9fd4 <operator new[](unsigned int)>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    837e:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    8382:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    8386:	b30b      	cbz	r3, 83cc <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x190>
    ring.buffer = buffer;
    8388:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
    ring.head = 0;
    838c:	2300      	movs	r3, #0
    838e:	f8a6 3094 	strh.w	r3, [r6, #148]	; 0x94
    ring.tail = 0;
    8392:	f8a6 3096 	strh.w	r3, [r6, #150]	; 0x96
    ring.head = 0;
    8396:	f8a6 30a4 	strh.w	r3, [r6, #164]	; 0xa4
    ring.tail = 0;
    839a:	f8a6 30a6 	strh.w	r3, [r6, #166]	; 0xa6
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    839e:	f8b6 3198 	ldrh.w	r3, [r6, #408]	; 0x198
    ring.size = size;
    83a2:	f8a6 3098 	strh.w	r3, [r6, #152]	; 0x98
    initRingBuffer (rxRing, rx_buffer, sizeRxBuffer);
    83a6:	f8b6 3196 	ldrh.w	r3, [r6, #406]	; 0x196
    ring.buffer = buffer;
    83aa:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
    ring.size = size;
    83ae:	f8a6 30a8 	strh.w	r3, [r6, #168]	; 0xa8
    ring.tail = 0;
    83b2:	e750      	b.n	8256 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a>
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    83b4:	4b0e      	ldr	r3, [pc, #56]	; (83f0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    83b6:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    83ba:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    83be:	649a      	str	r2, [r3, #72]	; 0x48
        if (rxAlt == 1)
    83c0:	d1d3      	bne.n	836a <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x12e>
            CORE_PIN25_CONFIG = PORT_PCR_MUX(2);
    83c2:	4b0b      	ldr	r3, [pc, #44]	; (83f0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    83c4:	f44f 7200 	mov.w	r2, #512	; 0x200
    83c8:	64da      	str	r2, [r3, #76]	; 0x4c
    83ca:	e748      	b.n	825e <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    83cc:	f8b6 0196 	ldrh.w	r0, [r6, #406]	; 0x196
    83d0:	0100      	lsls	r0, r0, #4
    83d2:	f001 fdff 	bl	9fd4 <operator new[](unsigned int)>
    83d6:	4603      	mov	r3, r0
    83d8:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    83dc:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
    83e0:	e7d2      	b.n	8388 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x14c>
    83e2:	bf00      	nop
    83e4:	40024000 	.word	0x40024000
    83e8:	40065000 	.word	0x40065000
    83ec:	40049000 	.word	0x40049000
    83f0:	4004a000 	.word	0x4004a000

000083f4 <FlexCAN::available()>:
{
    83f4:	b410      	push	{r4}
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    83f6:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    83fa:	0963      	lsrs	r3, r4, #5
    83fc:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8400:	3340      	adds	r3, #64	; 0x40
    8402:	009b      	lsls	r3, r3, #2
    8404:	4602      	mov	r2, r0
    8406:	f004 041f 	and.w	r4, r4, #31
    840a:	6818      	ldr	r0, [r3, #0]
    840c:	2101      	movs	r1, #1
    840e:	40a1      	lsls	r1, r4
    8410:	ea10 0401 	ands.w	r4, r0, r1
    8414:	bf14      	ite	ne
    8416:	2001      	movne	r0, #1
    8418:	2000      	moveq	r0, #0
    841a:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    841e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    entries = ring.head - ring.tail;
    8422:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
    8426:	f8b2 30a6 	ldrh.w	r3, [r2, #166]	; 0xa6
    842a:	b280      	uxth	r0, r0
    842c:	b29b      	uxth	r3, r3
    if (entries < 0) {
    842e:	1ac0      	subs	r0, r0, r3
        entries += ring.size;
    8430:	bf44      	itt	mi
    8432:	f8b2 30a8 	ldrhmi.w	r3, [r2, #168]	; 0xa8
    8436:	18c0      	addmi	r0, r0, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    8438:	b164      	cbz	r4, 8454 <FlexCAN::available()+0x60>
    843a:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
    843e:	0953      	lsrs	r3, r2, #5
    8440:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8444:	3340      	adds	r3, #64	; 0x40
    8446:	2101      	movs	r1, #1
    8448:	009b      	lsls	r3, r3, #2
    844a:	f002 021f 	and.w	r2, r2, #31
    844e:	fa01 f202 	lsl.w	r2, r1, r2
    8452:	601a      	str	r2, [r3, #0]
}
    8454:	bc10      	pop	{r4}
    8456:	4770      	bx	lr

00008458 <FlexCAN::read(CAN_message_t&)>:
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    8458:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
{
    845c:	b538      	push	{r3, r4, r5, lr}
    845e:	0953      	lsrs	r3, r2, #5
    8460:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8464:	3340      	adds	r3, #64	; 0x40
    8466:	009b      	lsls	r3, r3, #2
    8468:	4604      	mov	r4, r0
    846a:	2501      	movs	r5, #1
    846c:	4608      	mov	r0, r1
    846e:	f002 021f 	and.w	r2, r2, #31
    8472:	6819      	ldr	r1, [r3, #0]
    8474:	fa05 f202 	lsl.w	r2, r5, r2
    8478:	4211      	tst	r1, r2
    847a:	bf14      	ite	ne
    847c:	4629      	movne	r1, r5
    847e:	2100      	moveq	r1, #0
    8480:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
    8484:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    8488:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    848c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8490:	b292      	uxth	r2, r2
    8492:	b29b      	uxth	r3, r3
    8494:	429a      	cmp	r2, r3
    8496:	d028      	beq.n	84ea <FlexCAN::read(CAN_message_t&)+0x92>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    8498:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    849c:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    84a0:	b29b      	uxth	r3, r3
    84a2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    84a6:	2210      	movs	r2, #16
    84a8:	f001 fc44 	bl	9d34 <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    84ac:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    84b0:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
    84b4:	b29b      	uxth	r3, r3
    84b6:	442b      	add	r3, r5
    84b8:	fbb3 f1f2 	udiv	r1, r3, r2
    84bc:	fb02 3311 	mls	r3, r2, r1, r3
    84c0:	b29b      	uxth	r3, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    84c2:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    84c6:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
        result=1;
    84ca:	4628      	mov	r0, r5
    84cc:	b161      	cbz	r1, 84e8 <FlexCAN::read(CAN_message_t&)+0x90>
    84ce:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    84d2:	0953      	lsrs	r3, r2, #5
    84d4:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    84d8:	3340      	adds	r3, #64	; 0x40
    84da:	2101      	movs	r1, #1
    84dc:	009b      	lsls	r3, r3, #2
    84de:	f002 021f 	and.w	r2, r2, #31
    84e2:	fa01 f202 	lsl.w	r2, r1, r2
    84e6:	601a      	str	r2, [r3, #0]
}
    84e8:	bd38      	pop	{r3, r4, r5, pc}
    int result=0;
    84ea:	2000      	movs	r0, #0
    84ec:	e7ee      	b.n	84cc <FlexCAN::read(CAN_message_t&)+0x74>
    84ee:	bf00      	nop

000084f0 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>:
{
    84f0:	b530      	push	{r4, r5, lr}
    if (msg.flags.extended) {
    84f2:	798b      	ldrb	r3, [r1, #6]
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    84f4:	6804      	ldr	r4, [r0, #0]
    84f6:	f04f 0e10 	mov.w	lr, #16
    84fa:	f104 0c84 	add.w	ip, r4, #132	; 0x84
    if (msg.flags.extended) {
    84fe:	07dc      	lsls	r4, r3, #31
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    8500:	fb1e cc02 	smlabb	ip, lr, r2, ip
    if (msg.flags.extended) {
    8504:	d525      	bpl.n	8552 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0x62>
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    8506:	680c      	ldr	r4, [r1, #0]
    8508:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    850c:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    8510:	6804      	ldr	r4, [r0, #0]
    8512:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    8516:	688c      	ldr	r4, [r1, #8]
    8518:	fb1e cc02 	smlabb	ip, lr, r2, ip
    851c:	ba24      	rev	r4, r4
    851e:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    8522:	6804      	ldr	r4, [r0, #0]
    8524:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    8528:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    852c:	fb12 fe0e 	smulbb	lr, r2, lr
    8530:	68ca      	ldr	r2, [r1, #12]
    8532:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    8534:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    8538:	079a      	lsls	r2, r3, #30
    853a:	d53c      	bpl.n	85b6 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xc6>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    853c:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    853e:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8540:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8542:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8544:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                                                   FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_RTR;
    8548:	f043 6347 	orr.w	r3, r3, #208666624	; 0xc700000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    854c:	f842 300e 	str.w	r3, [r2, lr]
}
    8550:	bd30      	pop	{r4, r5, pc}
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    8552:	680d      	ldr	r5, [r1, #0]
    8554:	4c1d      	ldr	r4, [pc, #116]	; (85cc <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xdc>)
    8556:	ea04 4485 	and.w	r4, r4, r5, lsl #18
    855a:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    855e:	6804      	ldr	r4, [r0, #0]
    8560:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    8564:	688c      	ldr	r4, [r1, #8]
    8566:	fb1e cc02 	smlabb	ip, lr, r2, ip
    856a:	ba24      	rev	r4, r4
    856c:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    8570:	6804      	ldr	r4, [r0, #0]
    8572:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    8576:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    857a:	fb12 fe0e 	smulbb	lr, r2, lr
    857e:	68ca      	ldr	r2, [r1, #12]
        if (msg.flags.remote) {
    8580:	079b      	lsls	r3, r3, #30
    8582:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    8584:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    8588:	d50a      	bpl.n	85a0 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xb0>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    858a:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    858c:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    858e:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8590:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    8592:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    8596:	f043 6341 	orr.w	r3, r3, #202375168	; 0xc100000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    859a:	f842 300e 	str.w	r3, [r2, lr]
}
    859e:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    85a0:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    85a2:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    85a4:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    85a6:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    85a8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    85ac:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
    85b0:	f842 300e 	str.w	r3, [r2, lr]
}
    85b4:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    85b6:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    85b8:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    85ba:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    85bc:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    85be:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    85c2:	f043 6346 	orr.w	r3, r3, #207618048	; 0xc600000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    85c6:	f842 300e 	str.w	r3, [r2, lr]
}
    85ca:	bd30      	pop	{r4, r5, pc}
    85cc:	1ffc0000 	.word	0x1ffc0000

000085d0 <FlexCAN::write(CAN_message_t const&)>:
{
    85d0:	b570      	push	{r4, r5, r6, lr}
    85d2:	4604      	mov	r4, r0
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    85d4:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
    85d8:	0943      	lsrs	r3, r0, #5
    85da:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    85de:	3340      	adds	r3, #64	; 0x40
    85e0:	009b      	lsls	r3, r3, #2
    85e2:	f000 001f 	and.w	r0, r0, #31
    85e6:	681d      	ldr	r5, [r3, #0]
    85e8:	2201      	movs	r2, #1
    85ea:	4082      	lsls	r2, r0
    85ec:	4215      	tst	r5, r2
    85ee:	bf14      	ite	ne
    85f0:	2501      	movne	r5, #1
    85f2:	2500      	moveq	r5, #0
    85f4:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
    85f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    85fc:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    8600:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    8604:	b29b      	uxth	r3, r3
    8606:	b292      	uxth	r2, r2
    8608:	429a      	cmp	r2, r3
    860a:	d02d      	beq.n	8668 <FlexCAN::write(CAN_message_t const&)+0x98>
    nextEntry = (ring.head + 1) % ring.size;
    860c:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    8610:	f8b4 0098 	ldrh.w	r0, [r4, #152]	; 0x98
    if (nextEntry == ring.tail) {
    8614:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    nextEntry = (ring.head + 1) % ring.size;
    8618:	b29b      	uxth	r3, r3
    861a:	3301      	adds	r3, #1
    861c:	fbb3 f6f0 	udiv	r6, r3, r0
    8620:	fb00 3316 	mls	r3, r0, r6, r3
    if (nextEntry == ring.tail) {
    8624:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    8626:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    8628:	4296      	cmp	r6, r2
    862a:	d042      	beq.n	86b2 <FlexCAN::write(CAN_message_t const&)+0xe2>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    862c:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    8630:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    8634:	b29b      	uxth	r3, r3
    8636:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    863a:	2210      	movs	r2, #16
    863c:	f001 fb7a 	bl	9d34 <memcpy>
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    8640:	f894 50f4 	ldrb.w	r5, [r4, #244]	; 0xf4
    ring.head = nextEntry;
    8644:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
            result=1;
    8648:	2001      	movs	r0, #1
    864a:	b165      	cbz	r5, 8666 <FlexCAN::write(CAN_message_t const&)+0x96>
    864c:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    8650:	0953      	lsrs	r3, r2, #5
    8652:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8656:	3340      	adds	r3, #64	; 0x40
    8658:	2101      	movs	r1, #1
    865a:	009b      	lsls	r3, r3, #2
    865c:	f002 021f 	and.w	r2, r2, #31
    8660:	fa01 f202 	lsl.w	r2, r1, r2
    8664:	601a      	str	r2, [r3, #0]
}
    8666:	bd70      	pop	{r4, r5, r6, pc}
    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    8668:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    866c:	f1c2 0210 	rsb	r2, r2, #16
      for (index = getFirstTxBox(); index < getNumMailBoxes(); index++) {
    8670:	b2d2      	uxtb	r2, r2
    8672:	2a0f      	cmp	r2, #15
    8674:	d8ca      	bhi.n	860c <FlexCAN::write(CAN_message_t const&)+0x3c>
    8676:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    867a:	332c      	adds	r3, #44	; 0x2c
    867c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8680:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
    8684:	e003      	b.n	868e <FlexCAN::write(CAN_message_t const&)+0xbe>
    8686:	4563      	cmp	r3, ip
    8688:	f102 0201 	add.w	r2, r2, #1
    868c:	d0be      	beq.n	860c <FlexCAN::write(CAN_message_t const&)+0x3c>
    bool usesGlobalTxRing(uint8_t mbox) { return (mbox<getNumMailBoxes()?txRings[mbox]==0:true); }
    868e:	f853 0f04 	ldr.w	r0, [r3, #4]!
    8692:	2800      	cmp	r0, #0
    8694:	d1f7      	bne.n	8686 <FlexCAN::write(CAN_message_t const&)+0xb6>
          if ( usesGlobalTxRing(index) && FLEXCAN_get_code(FLEXCANb_MBn_CS(flexcanBase, index)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    8696:	6826      	ldr	r6, [r4, #0]
    8698:	0110      	lsls	r0, r2, #4
    869a:	3680      	adds	r6, #128	; 0x80
    869c:	5830      	ldr	r0, [r6, r0]
    869e:	f3c0 6003 	ubfx	r0, r0, #24, #4
    86a2:	2808      	cmp	r0, #8
    86a4:	d1ef      	bne.n	8686 <FlexCAN::write(CAN_message_t const&)+0xb6>
        writeTxRegisters (msg, index);
    86a6:	4620      	mov	r0, r4
    86a8:	b2d2      	uxtb	r2, r2
    86aa:	f7ff ff21 	bl	84f0 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
        result=1;
    86ae:	2001      	movs	r0, #1
    86b0:	e7cb      	b.n	864a <FlexCAN::write(CAN_message_t const&)+0x7a>
    int result=0;
    86b2:	2000      	movs	r0, #0
    86b4:	e7c9      	b.n	864a <FlexCAN::write(CAN_message_t const&)+0x7a>
    86b6:	bf00      	nop

000086b8 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>:
{
    86b8:	460b      	mov	r3, r1
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    86ba:	6801      	ldr	r1, [r0, #0]
    86bc:	f04f 0c10 	mov.w	ip, #16
    86c0:	3180      	adds	r1, #128	; 0x80
    86c2:	fb1c 1102 	smlabb	r1, ip, r2, r1
{
    86c6:	b570      	push	{r4, r5, r6, lr}
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    86c8:	6809      	ldr	r1, [r1, #0]
    msg.timestamp = FLEXCAN_get_timestamp (mb_CS);
    86ca:	8099      	strh	r1, [r3, #4]
    msg.len = FLEXCAN_get_length (mb_CS);
    86cc:	f3c1 4603 	ubfx	r6, r1, #16, #4
    86d0:	71de      	strb	r6, [r3, #7]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    86d2:	6804      	ldr	r4, [r0, #0]
    86d4:	3484      	adds	r4, #132	; 0x84
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    86d6:	fb12 fe0c 	smulbb	lr, r2, ip
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    86da:	fb1c 4c02 	smlabb	ip, ip, r2, r4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    86de:	f3c1 5500 	ubfx	r5, r1, #20, #1
    86e2:	f3c1 5240 	ubfx	r2, r1, #21, #1
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    86e6:	f8dc 4000 	ldr.w	r4, [ip]
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    86ea:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    86ee:	f3c1 6c03 	ubfx	ip, r1, #24, #4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    86f2:	719a      	strb	r2, [r3, #6]
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    86f4:	f1ac 0c06 	sub.w	ip, ip, #6
    if (!msg.flags.extended) {
    86f8:	b2d2      	uxtb	r2, r2
    86fa:	07d2      	lsls	r2, r2, #31
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    86fc:	fabc fc8c 	clz	ip, ip
    8700:	799a      	ldrb	r2, [r3, #6]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8702:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    8706:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    870a:	601c      	str	r4, [r3, #0]
    870c:	f36c 0282 	bfi	r2, ip, #2, #1
        msg.id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    8710:	bf5c      	itt	pl
    8712:	0ca4      	lsrpl	r4, r4, #18
    8714:	601c      	strpl	r4, [r3, #0]
    8716:	719a      	strb	r2, [r3, #6]
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    8718:	6802      	ldr	r2, [r0, #0]
    871a:	3288      	adds	r2, #136	; 0x88
    if (msg.len > 4) {
    871c:	2e04      	cmp	r6, #4
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    871e:	f852 200e 	ldr.w	r2, [r2, lr]
    msg.buf[0] = dataIn;
    8722:	ba12      	rev	r2, r2
    msg.len = FLEXCAN_get_length (mb_CS);
    8724:	f3c1 4507 	ubfx	r5, r1, #16, #8
    msg.buf[0] = dataIn;
    8728:	609a      	str	r2, [r3, #8]
    if (msg.len > 4) {
    872a:	d905      	bls.n	8738 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x80>
        dataIn = FLEXCANb_MBn_WORD1(flexcanBase, buffer);
    872c:	6802      	ldr	r2, [r0, #0]
    872e:	328c      	adds	r2, #140	; 0x8c
    8730:	f852 200e 	ldr.w	r2, [r2, lr]
        msg.buf[4] = dataIn;
    8734:	ba12      	rev	r2, r2
    8736:	60da      	str	r2, [r3, #12]
    for (uint32_t loop=msg.len; loop < 8; loop++ ) {
    8738:	f015 0108 	ands.w	r1, r5, #8
    873c:	d108      	bne.n	8750 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x98>
        msg.buf[loop] = 0;
    873e:	f106 0008 	add.w	r0, r6, #8
    8742:	f1c6 0208 	rsb	r2, r6, #8
    8746:	4418      	add	r0, r3
}
    8748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        msg.buf[loop] = 0;
    874c:	f005 bcc2 	b.w	e0d4 <memset>
}
    8750:	bd70      	pop	{r4, r5, r6, pc}
    8752:	bf00      	nop

00008754 <FlexCAN::message_isr()>:
{
    8754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    8758:	4683      	mov	fp, r0
{
    875a:	b089      	sub	sp, #36	; 0x24
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    875c:	f85b 2bb4 	ldr.w	r2, [fp], #180
    8760:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
    8764:	f8cd 900c 	str.w	r9, [sp, #12]
{
    8768:	4605      	mov	r5, r0
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    876a:	4682      	mov	sl, r0
    for (i = 0; i < getNumMailBoxes(); i++) {
    876c:	2400      	movs	r4, #0
    876e:	e008      	b.n	8782 <FlexCAN::message_isr()+0x2e>
        switch (code) {
    8770:	2b02      	cmp	r3, #2
    8772:	d04c      	beq.n	880e <FlexCAN::message_isr()+0xba>
    for (i = 0; i < getNumMailBoxes(); i++) {
    8774:	3401      	adds	r4, #1
    8776:	2c10      	cmp	r4, #16
    8778:	f10a 0a08 	add.w	sl, sl, #8
    877c:	f10b 0b04 	add.w	fp, fp, #4
    8780:	d040      	beq.n	8804 <FlexCAN::message_isr()+0xb0>
        if ((status & (1UL << i)) == 0) {
    8782:	fa29 f304 	lsr.w	r3, r9, r4
    8786:	07d9      	lsls	r1, r3, #31
    8788:	d5f4      	bpl.n	8774 <FlexCAN::message_isr()+0x20>
        uint32_t code = FLEXCAN_get_code (FLEXCANb_MBn_CS(flexcanBase, i));
    878a:	0127      	lsls	r7, r4, #4
    878c:	f102 0380 	add.w	r3, r2, #128	; 0x80
    8790:	59db      	ldr	r3, [r3, r7]
    8792:	f3c3 6303 	ubfx	r3, r3, #24, #4
        switch (code) {
    8796:	2b06      	cmp	r3, #6
    8798:	d039      	beq.n	880e <FlexCAN::message_isr()+0xba>
    879a:	2b08      	cmp	r3, #8
    879c:	d1e8      	bne.n	8770 <FlexCAN::message_isr()+0x1c>
    879e:	f8db 6000 	ldr.w	r6, [fp]
    87a2:	2e00      	cmp	r6, #0
    87a4:	f000 80b9 	beq.w	891a <FlexCAN::message_isr()+0x1c6>
    if (ring.head == ring.tail) {
    87a8:	8831      	ldrh	r1, [r6, #0]
    87aa:	8873      	ldrh	r3, [r6, #2]
    87ac:	b289      	uxth	r1, r1
    87ae:	b29b      	uxth	r3, r3
    87b0:	4299      	cmp	r1, r3
    87b2:	f000 80be 	beq.w	8932 <FlexCAN::message_isr()+0x1de>
    87b6:	8831      	ldrh	r1, [r6, #0]
    87b8:	8873      	ldrh	r3, [r6, #2]
    87ba:	b289      	uxth	r1, r1
    87bc:	b29b      	uxth	r3, r3
    87be:	4299      	cmp	r1, r3
    87c0:	d0d8      	beq.n	8774 <FlexCAN::message_isr()+0x20>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    87c2:	8873      	ldrh	r3, [r6, #2]
    87c4:	68b1      	ldr	r1, [r6, #8]
    87c6:	b29b      	uxth	r3, r3
    87c8:	2210      	movs	r2, #16
    87ca:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    87ce:	eb0d 0002 	add.w	r0, sp, r2
    87d2:	f001 faaf 	bl	9d34 <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    87d6:	8873      	ldrh	r3, [r6, #2]
    87d8:	88b2      	ldrh	r2, [r6, #4]
    87da:	b29b      	uxth	r3, r3
    87dc:	3301      	adds	r3, #1
    87de:	fbb3 f1f2 	udiv	r1, r3, r2
    87e2:	fb02 3311 	mls	r3, r2, r1, r3
    87e6:	b29b      	uxth	r3, r3
                    writeTxRegisters (msg, i);
    87e8:	b2e2      	uxtb	r2, r4
    ring.tail = (ring.tail + 1) % ring.size;
    87ea:	8073      	strh	r3, [r6, #2]
                    writeTxRegisters (msg, i);
    87ec:	a904      	add	r1, sp, #16
    87ee:	4628      	mov	r0, r5
    for (i = 0; i < getNumMailBoxes(); i++) {
    87f0:	3401      	adds	r4, #1
                    writeTxRegisters (msg, i);
    87f2:	f7ff fe7d 	bl	84f0 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
    for (i = 0; i < getNumMailBoxes(); i++) {
    87f6:	2c10      	cmp	r4, #16
    FLEXCANb_IFLAG1(flexcanBase) = status;
    87f8:	682a      	ldr	r2, [r5, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    87fa:	f10a 0a08 	add.w	sl, sl, #8
    87fe:	f10b 0b04 	add.w	fp, fp, #4
    8802:	d1be      	bne.n	8782 <FlexCAN::message_isr()+0x2e>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    8804:	9b03      	ldr	r3, [sp, #12]
    8806:	6313      	str	r3, [r2, #48]	; 0x30
}
    8808:	b009      	add	sp, #36	; 0x24
    880a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            readRxRegisters (msg, i);
    880e:	b2e2      	uxtb	r2, r4
    8810:	a904      	add	r1, sp, #16
    8812:	4628      	mov	r0, r5
    8814:	f7ff ff50 	bl	86b8 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>
            if (stats.enabled == true) {
    8818:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    881c:	b16b      	cbz	r3, 883a <FlexCAN::message_isr()+0xe6>
                stats.mb[i].refCount++;
    881e:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
    8822:	3301      	adds	r3, #1
    8824:	f8ca 3114 	str.w	r3, [sl, #276]	; 0x114
                if (msg.flags.overrun) {
    8828:	f89d 3016 	ldrb.w	r3, [sp, #22]
    882c:	075b      	lsls	r3, r3, #29
    882e:	d504      	bpl.n	883a <FlexCAN::message_isr()+0xe6>
                    stats.mb[i].overrunCount++;
    8830:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    8834:	3301      	adds	r3, #1
    8836:	f8ca 3118 	str.w	r3, [sl, #280]	; 0x118
    883a:	2301      	movs	r3, #1
    883c:	40a3      	lsls	r3, r4
    883e:	9300      	str	r3, [sp, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    8840:	2300      	movs	r3, #0
    8842:	f105 0680 	add.w	r6, r5, #128	; 0x80
    8846:	f105 0890 	add.w	r8, r5, #144	; 0x90
    884a:	9301      	str	r3, [sp, #4]
    884c:	f8cd b008 	str.w	fp, [sp, #8]
                thisListener = listener[listenerPos];
    8850:	f856 0f04 	ldr.w	r0, [r6, #4]!
                if (thisListener != NULL) {
    8854:	b148      	cbz	r0, 886a <FlexCAN::message_isr()+0x116>
                    if (thisListener->callbacksActive & (1UL << i)) {
    8856:	6842      	ldr	r2, [r0, #4]
    8858:	9b00      	ldr	r3, [sp, #0]
    885a:	4013      	ands	r3, r2
    885c:	d033      	beq.n	88c6 <FlexCAN::message_isr()+0x172>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    885e:	6803      	ldr	r3, [r0, #0]
    8860:	f8d3 b000 	ldr.w	fp, [r3]
    8864:	4b45      	ldr	r3, [pc, #276]	; (897c <FlexCAN::message_isr()+0x228>)
    8866:	459b      	cmp	fp, r3
    8868:	d15a      	bne.n	8920 <FlexCAN::message_isr()+0x1cc>
            for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    886a:	45b0      	cmp	r8, r6
    886c:	d1f0      	bne.n	8850 <FlexCAN::message_isr()+0xfc>
            if (handledFrame == false) {
    886e:	9b01      	ldr	r3, [sp, #4]
    8870:	f8dd b008 	ldr.w	fp, [sp, #8]
    8874:	b393      	cbz	r3, 88dc <FlexCAN::message_isr()+0x188>
            if (stats.enabled == true) {
    8876:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    887a:	b183      	cbz	r3, 889e <FlexCAN::message_isr()+0x14a>
    entries = ring.head - ring.tail;
    887c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    8880:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    8884:	b29b      	uxth	r3, r3
    8886:	b292      	uxth	r2, r2
    if (entries < 0) {
    8888:	1a9b      	subs	r3, r3, r2
        entries += ring.size;
    888a:	bf44      	itt	mi
    888c:	f8b5 20a8 	ldrhmi.w	r2, [r5, #168]	; 0xa8
    8890:	189b      	addmi	r3, r3, r2
                if (stats.ringRxHighWater < rxEntries) {
    8892:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    8896:	429a      	cmp	r2, r3
                    stats.ringRxHighWater = rxEntries;
    8898:	bf38      	it	cc
    889a:	f8c5 3104 	strcc.w	r3, [r5, #260]	; 0x104
            if (MBFilters[i].flags.extended) {
    889e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    88a2:	f8da 2004 	ldr.w	r2, [sl, #4]
            if (MBFilters[i].flags.extended) {
    88a6:	7a1b      	ldrb	r3, [r3, #8]
    88a8:	f013 0f01 	tst.w	r3, #1
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    88ac:	682b      	ldr	r3, [r5, #0]
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    88ae:	bf08      	it	eq
    88b0:	4933      	ldreq	r1, [pc, #204]	; (8980 <FlexCAN::message_isr()+0x22c>)
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    88b2:	f103 0384 	add.w	r3, r3, #132	; 0x84
    88b6:	bf14      	ite	ne
    88b8:	f022 4260 	bicne.w	r2, r2, #3758096384	; 0xe0000000
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    88bc:	ea01 4282 	andeq.w	r2, r1, r2, lsl #18
    88c0:	51da      	str	r2, [r3, r7]
    FLEXCANb_IFLAG1(flexcanBase) = status;
    88c2:	682a      	ldr	r2, [r5, #0]
    88c4:	e756      	b.n	8774 <FlexCAN::message_isr()+0x20>
                    } else if (thisListener->callbacksActive & (1UL << 31)) {
    88c6:	2a00      	cmp	r2, #0
    88c8:	dacf      	bge.n	886a <FlexCAN::message_isr()+0x116>
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    88ca:	6802      	ldr	r2, [r0, #0]
    88cc:	f8d2 b000 	ldr.w	fp, [r2]
    88d0:	4a2a      	ldr	r2, [pc, #168]	; (897c <FlexCAN::message_isr()+0x228>)
    88d2:	4593      	cmp	fp, r2
    88d4:	d0c9      	beq.n	886a <FlexCAN::message_isr()+0x116>
    88d6:	f04f 32ff 	mov.w	r2, #4294967295
    88da:	e023      	b.n	8924 <FlexCAN::message_isr()+0x1d0>
    nextEntry = (ring.head + 1) % ring.size;
    88dc:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    88e0:	f8b5 10a8 	ldrh.w	r1, [r5, #168]	; 0xa8
    if (nextEntry == ring.tail) {
    88e4:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    nextEntry = (ring.head + 1) % ring.size;
    88e8:	b29b      	uxth	r3, r3
    88ea:	3301      	adds	r3, #1
    88ec:	fbb3 f0f1 	udiv	r0, r3, r1
    88f0:	fb01 3310 	mls	r3, r1, r0, r3
    if (nextEntry == ring.tail) {
    88f4:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    88f6:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    88f8:	4296      	cmp	r6, r2
    88fa:	d031      	beq.n	8960 <FlexCAN::message_isr()+0x20c>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    88fc:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    8900:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
    8904:	b29b      	uxth	r3, r3
    8906:	2210      	movs	r2, #16
    8908:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    890c:	eb0d 0102 	add.w	r1, sp, r2
    8910:	f001 fa10 	bl	9d34 <memcpy>
    ring.head = nextEntry;
    8914:	f8a5 60a4 	strh.w	r6, [r5, #164]	; 0xa4
    return (true);
    8918:	e7ad      	b.n	8876 <FlexCAN::message_isr()+0x122>
            pRing=( usesGlobalTxRing(i) ? &txRing : txRings[i] );
    891a:	f105 0694 	add.w	r6, r5, #148	; 0x94
    891e:	e743      	b.n	87a8 <FlexCAN::message_isr()+0x54>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    8920:	2300      	movs	r3, #0
    8922:	4622      	mov	r2, r4
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    8924:	a904      	add	r1, sp, #16
    8926:	47d8      	blx	fp
    8928:	9b01      	ldr	r3, [sp, #4]
    892a:	4318      	orrs	r0, r3
    892c:	b2c3      	uxtb	r3, r0
    892e:	9301      	str	r3, [sp, #4]
    8930:	e79b      	b.n	886a <FlexCAN::message_isr()+0x116>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    8932:	2701      	movs	r7, #1
    8934:	40a7      	lsls	r7, r4
    8936:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
    893a:	f105 0680 	add.w	r6, r5, #128	; 0x80
    893e:	f105 0890 	add.w	r8, r5, #144	; 0x90
                    thisListener = listener[listenerPos];
    8942:	f856 0f04 	ldr.w	r0, [r6, #4]!
                    if (thisListener != NULL) {
    8946:	b138      	cbz	r0, 8958 <FlexCAN::message_isr()+0x204>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    8948:	6843      	ldr	r3, [r0, #4]
    894a:	421f      	tst	r7, r3
    894c:	d004      	beq.n	8958 <FlexCAN::message_isr()+0x204>
                            thisListener->txHandler (i, controller);
    894e:	6803      	ldr	r3, [r0, #0]
    8950:	4a0c      	ldr	r2, [pc, #48]	; (8984 <FlexCAN::message_isr()+0x230>)
    8952:	685b      	ldr	r3, [r3, #4]
    8954:	4293      	cmp	r3, r2
    8956:	d10d      	bne.n	8974 <FlexCAN::message_isr()+0x220>
                for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    8958:	45b0      	cmp	r8, r6
    895a:	d1f2      	bne.n	8942 <FlexCAN::message_isr()+0x1ee>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    895c:	682a      	ldr	r2, [r5, #0]
    895e:	e709      	b.n	8774 <FlexCAN::message_isr()+0x20>
                    if (stats.enabled == true) {
    8960:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    8964:	2b00      	cmp	r3, #0
    8966:	d09a      	beq.n	889e <FlexCAN::message_isr()+0x14a>
                        stats.ringRxFramesLost++;
    8968:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    896c:	3301      	adds	r3, #1
    896e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            if (stats.enabled == true) {
    8972:	e783      	b.n	887c <FlexCAN::message_isr()+0x128>
                            thisListener->txHandler (i, controller);
    8974:	2200      	movs	r2, #0
    8976:	4621      	mov	r1, r4
    8978:	4798      	blx	r3
    897a:	e7ed      	b.n	8958 <FlexCAN::message_isr()+0x204>
    897c:	00007fa5 	.word	0x00007fa5
    8980:	1ffc0000 	.word	0x1ffc0000
    8984:	00007fa9 	.word	0x00007fa9

00008988 <can0_message_isr>:
    Can0.message_isr ();
    8988:	4801      	ldr	r0, [pc, #4]	; (8990 <can0_message_isr+0x8>)
    898a:	f7ff bee3 	b.w	8754 <FlexCAN::message_isr()>
    898e:	bf00      	nop
    8990:	1fffd1cc 	.word	0x1fffd1cc

00008994 <can0_bus_off_isr>:
}
    8994:	4770      	bx	lr
    8996:	bf00      	nop

00008998 <can0_error_isr>:
    uint32_t status = FLEXCANb_ESR1 (flexcanBase);
    8998:	4b01      	ldr	r3, [pc, #4]	; (89a0 <can0_error_isr+0x8>)
    899a:	681b      	ldr	r3, [r3, #0]
    899c:	6a1b      	ldr	r3, [r3, #32]
}
    899e:	4770      	bx	lr
    89a0:	1fffd1cc 	.word	0x1fffd1cc

000089a4 <can0_tx_warn_isr>:
    89a4:	4770      	bx	lr
    89a6:	bf00      	nop

000089a8 <can0_rx_warn_isr>:
    89a8:	4770      	bx	lr
    89aa:	bf00      	nop

000089ac <can0_wakeup_isr>:
    89ac:	4770      	bx	lr
    89ae:	bf00      	nop

000089b0 <_GLOBAL__sub_I_Can0>:
FlexCAN Can0 (0);
    89b0:	4801      	ldr	r0, [pc, #4]	; (89b8 <_GLOBAL__sub_I_Can0+0x8>)
    89b2:	2100      	movs	r1, #0
    89b4:	f7ff bafa 	b.w	7fac <FlexCAN::FlexCAN(unsigned char)>
    89b8:	1fffd1cc 	.word	0x1fffd1cc

000089bc <ADC::ADC()>:
    0, 0, 0, 0, 0, 0                                    //22-27
};
#endif

// Constructor
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    89bc:	b530      	push	{r4, r5, lr}
    89be:	b083      	sub	sp, #12
#if ADC_DIFF_PAIRS > 0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    89c0:	490f      	ldr	r1, [pc, #60]	; (8a00 <ADC::ADC()+0x44>)
    89c2:	9100      	str	r1, [sp, #0]
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    89c4:	4604      	mov	r4, r0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    89c6:	4b0f      	ldr	r3, [pc, #60]	; (8a04 <ADC::ADC()+0x48>)
    89c8:	4a0f      	ldr	r2, [pc, #60]	; (8a08 <ADC::ADC()+0x4c>)
    89ca:	2100      	movs	r1, #0
    89cc:	f000 fa60 	bl	8e90 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
#ifdef ADC_DUAL_ADCS
             ,
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    89d0:	f104 0540 	add.w	r5, r4, #64	; 0x40
    89d4:	490d      	ldr	r1, [pc, #52]	; (8a0c <ADC::ADC()+0x50>)
    89d6:	9100      	str	r1, [sp, #0]
    89d8:	4b0d      	ldr	r3, [pc, #52]	; (8a10 <ADC::ADC()+0x54>)
    89da:	4a0e      	ldr	r2, [pc, #56]	; (8a14 <ADC::ADC()+0x58>)
    89dc:	2101      	movs	r1, #1
    89de:	4628      	mov	r0, r5
    89e0:	f000 fa56 	bl	8e90 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
    89e4:	2302      	movs	r3, #2
#endif
{
    //ctor

    //digitalWriteFast(LED_BUILTIN, HIGH);
}
    89e6:	4620      	mov	r0, r4
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    89e8:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    89ec:	f8c4 4084 	str.w	r4, [r4, #132]	; 0x84
    89f0:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    89f4:	f8c4 408c 	str.w	r4, [r4, #140]	; 0x8c
    89f8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
    89fc:	b003      	add	sp, #12
    89fe:	bd30      	pop	{r4, r5, pc}
    8a00:	4003b000 	.word	0x4003b000
    8a04:	00015394 	.word	0x00015394
    8a08:	0001539c 	.word	0x0001539c
    8a0c:	400bb000 	.word	0x400bb000
    8a10:	00015398 	.word	0x00015398
    8a14:	000153c8 	.word	0x000153c8

00008a18 <ADC::startContinuous(unsigned char, signed char)>:
#ifdef ADC_SINGLE_ADC
    return adc0->startContinuous(pin); // use ADC0
#else
    /* Teensy 3.1
    */
    if (adc_num == -1)
    8a18:	1c53      	adds	r3, r2, #1
{
    8a1a:	b570      	push	{r4, r5, r6, lr}
    8a1c:	4604      	mov	r4, r0
    if (adc_num == -1)
    8a1e:	d011      	beq.n	8a44 <ADC::startContinuous(unsigned char, signed char)+0x2c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
            return false; // all others are invalid
        }
    }
    else if (adc_num == 0)
    8a20:	b152      	cbz	r2, 8a38 <ADC::startContinuous(unsigned char, signed char)+0x20>
    { // user wants ADC0
        return adc0->startContinuous(pin);
    }
    else if (adc_num == 1)
    8a22:	2a01      	cmp	r2, #1
    8a24:	d029      	beq.n	8a7a <ADC::startContinuous(unsigned char, signed char)+0x62>
    { // user wants ADC 1
        return adc1->startContinuous(pin);
    }
    adc0->fail_flag |= ADC_ERROR::OTHER;
    8a26:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    8a2a:	8ad3      	ldrh	r3, [r2, #22]
    8a2c:	b29b      	uxth	r3, r3
    8a2e:	f043 0301 	orr.w	r3, r3, #1
    8a32:	82d3      	strh	r3, [r2, #22]
    return false;
#endif
}
    8a34:	2000      	movs	r0, #0
    8a36:	bd70      	pop	{r4, r5, r6, pc}
    8a38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc0->startContinuous(pin);
    8a3c:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    8a40:	f000 baf8 	b.w	9034 <ADC_Module::startContinuous(unsigned char)>
        bool adc0Pin = adc0->checkPin(pin);
    8a44:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    8a48:	460d      	mov	r5, r1
    8a4a:	f000 fac9 	bl	8fe0 <ADC_Module::checkPin(unsigned char)>
        bool adc1Pin = adc1->checkPin(pin);
    8a4e:	4629      	mov	r1, r5
        bool adc0Pin = adc0->checkPin(pin);
    8a50:	4606      	mov	r6, r0
        bool adc1Pin = adc1->checkPin(pin);
    8a52:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8a56:	f000 fac3 	bl	8fe0 <ADC_Module::checkPin(unsigned char)>
        if (adc0Pin && adc1Pin)
    8a5a:	b1a6      	cbz	r6, 8a86 <ADC::startContinuous(unsigned char, signed char)+0x6e>
    8a5c:	b318      	cbz	r0, 8aa6 <ADC::startContinuous(unsigned char, signed char)+0x8e>
            if ((adc0->num_measurements) > (adc1->num_measurements))
    8a5e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    8a62:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8a66:	7d59      	ldrb	r1, [r3, #21]
    8a68:	7d42      	ldrb	r2, [r0, #21]
    8a6a:	4291      	cmp	r1, r2
                return adc1->startContinuous(pin);
    8a6c:	4629      	mov	r1, r5
            if ((adc0->num_measurements) > (adc1->num_measurements))
    8a6e:	d806      	bhi.n	8a7e <ADC::startContinuous(unsigned char, signed char)+0x66>
}
    8a70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                return adc0->startContinuous(pin);
    8a74:	4618      	mov	r0, r3
    8a76:	f000 badd 	b.w	9034 <ADC_Module::startContinuous(unsigned char)>
        return adc1->startContinuous(pin);
    8a7a:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
}
    8a7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc1->startContinuous(pin);
    8a82:	f000 bad7 	b.w	9034 <ADC_Module::startContinuous(unsigned char)>
        else if (adc1Pin)
    8a86:	b9a8      	cbnz	r0, 8ab4 <ADC::startContinuous(unsigned char, signed char)+0x9c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
    8a88:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
    8a8c:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    8a90:	8acb      	ldrh	r3, [r1, #22]
    8a92:	b29b      	uxth	r3, r3
    8a94:	f043 0304 	orr.w	r3, r3, #4
    8a98:	82cb      	strh	r3, [r1, #22]
    8a9a:	8ad3      	ldrh	r3, [r2, #22]
    8a9c:	b29b      	uxth	r3, r3
    8a9e:	f043 0304 	orr.w	r3, r3, #4
    8aa2:	82d3      	strh	r3, [r2, #22]
            return false; // all others are invalid
    8aa4:	e7c6      	b.n	8a34 <ADC::startContinuous(unsigned char, signed char)+0x1c>
            return adc0->startContinuous(pin);
    8aa6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    8aaa:	4629      	mov	r1, r5
}
    8aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc0->startContinuous(pin);
    8ab0:	f000 bac0 	b.w	9034 <ADC_Module::startContinuous(unsigned char)>
            return adc1->startContinuous(pin);
    8ab4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8ab8:	4629      	mov	r1, r5
}
    8aba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc1->startContinuous(pin);
    8abe:	f000 bab9 	b.w	9034 <ADC_Module::startContinuous(unsigned char)>
    8ac2:	bf00      	nop

00008ac4 <ADC_Module::getMaxValue()>:
*
*/
uint32_t ADC_Module::getMaxValue()
{
    return analog_max_val;
}
    8ac4:	69c0      	ldr	r0, [r0, #28]
    8ac6:	4770      	bx	lr

00008ac8 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setConversionSpeed(ADC_CONVERSION_SPEED speed)
{

    if (speed == conversion_speed)
    8ac8:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    8acc:	428b      	cmp	r3, r1
    8ace:	d00a      	beq.n	8ae6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e>
{
    8ad0:	b470      	push	{r4, r5, r6}
    //if (calibrating) wait_for_cal();

    bool is_adack = false;
    uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

    switch (speed)
    8ad2:	2909      	cmp	r1, #9
    8ad4:	f200 8093 	bhi.w	8bfe <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x136>
    8ad8:	e8df f001 	tbb	[pc, r1]
    8adc:	06612f2f 	.word	0x06612f2f
    8ae0:	8e817106 	.word	0x8e817106
    8ae4:	5440      	.short	0x5440
    8ae6:	4770      	bx	lr
    case ADC_CONVERSION_SPEED::HIGH_SPEED:
#ifdef ADC_TEENSY_4
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
#else
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8ae8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    *   \return A pointer to the aliased address of the bit of reg
    */
    template <typename T>
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    {
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8aea:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8aee:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8af2:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8af6:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, bit) = 0;
    }
    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8afa:	2400      	movs	r4, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8afc:	2201      	movs	r2, #1
    8afe:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b02:	4626      	mov	r6, r4
    8b04:	61dc      	str	r4, [r3, #28]
    8b06:	2500      	movs	r5, #0
    8b08:	f8cc 500c 	str.w	r5, [ip, #12]
        bitband_address(reg, bit) = state;
    }
    template <typename T>
    __attribute__((always_inline)) inline void changeBitFlag(volatile T &reg, T flag, T state)
    {
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8b0c:	601e      	str	r6, [r3, #0]
        if (__builtin_popcount(flag) > 1)
        {
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8b0e:	605d      	str	r5, [r3, #4]
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8b10:	615c      	str	r4, [r3, #20]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8b12:	619a      	str	r2, [r3, #24]
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADICLK(3), ADC_CFG1_speed & ADC_CFG1_ADICLK(3));
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADIV(3), ADC_CFG1_speed & ADC_CFG1_ADIV(3));
#endif
    }

    conversion_speed = speed;
    8b14:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    __disable_irq();
    8b18:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8b1a:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b1c:	015b      	lsls	r3, r3, #5
    8b1e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    calibrating = 1;
    8b22:	2201      	movs	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b24:	2100      	movs	r1, #0
    8b26:	7642      	strb	r2, [r0, #25]
    8b28:	f8c3 149c 	str.w	r1, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b2c:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    8b30:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    8b34:	b662      	cpsie	i
    calibrate();
}
    8b36:	bc70      	pop	{r4, r5, r6}
    8b38:	4770      	bx	lr
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8b3a:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b3c:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8b40:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8b44:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8b48:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b4c:	2200      	movs	r2, #0
    8b4e:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b52:	2201      	movs	r2, #1
    8b54:	61da      	str	r2, [r3, #28]
    8b56:	4614      	mov	r4, r2
    8b58:	4616      	mov	r6, r2
    8b5a:	e7d4      	b.n	8b06 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8b5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b5e:	2400      	movs	r4, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b60:	015a      	lsls	r2, r3, #5
    8b62:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8b66:	f502 7380 	add.w	r3, r2, #256	; 0x100
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b6a:	f8c2 4188 	str.w	r4, [r2, #392]	; 0x188
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b6e:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b72:	61dc      	str	r4, [r3, #28]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b74:	2401      	movs	r4, #1
    8b76:	60d4      	str	r4, [r2, #12]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b78:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b7a:	605c      	str	r4, [r3, #4]
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8b7c:	601c      	str	r4, [r3, #0]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b7e:	619a      	str	r2, [r3, #24]
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8b80:	615a      	str	r2, [r3, #20]
    }
    8b82:	e7c7      	b.n	8b14 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x4c>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8b84:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b86:	015a      	lsls	r2, r3, #5
    8b88:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8b8c:	f502 7380 	add.w	r3, r2, #256	; 0x100
    8b90:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b94:	2401      	movs	r4, #1
    8b96:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b98:	2400      	movs	r4, #0
    8b9a:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    8b9c:	e7ea      	b.n	8b74 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8b9e:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8ba0:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8ba4:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8ba8:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8bac:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8bb0:	2600      	movs	r6, #0
    8bb2:	2201      	movs	r2, #1
    8bb4:	f8cc 6008 	str.w	r6, [ip, #8]
    8bb8:	4614      	mov	r4, r2
    8bba:	61de      	str	r6, [r3, #28]
    if (is_adack)
    8bbc:	e7a3      	b.n	8b06 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8bbe:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8bc0:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8bc4:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8bc8:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8bcc:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8bd0:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8bd2:	2401      	movs	r4, #1
    8bd4:	f8cc 4008 	str.w	r4, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8bd8:	4616      	mov	r6, r2
    8bda:	61da      	str	r2, [r3, #28]
    if (is_adack)
    8bdc:	e793      	b.n	8b06 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8bde:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8be0:	015a      	lsls	r2, r3, #5
    8be2:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8be6:	f502 7380 	add.w	r3, r2, #256	; 0x100
    8bea:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8bee:	2400      	movs	r4, #0
    8bf0:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8bf2:	2401      	movs	r4, #1
    8bf4:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    8bf6:	e7bd      	b.n	8b74 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8bf8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8bfa:	2401      	movs	r4, #1
    8bfc:	e7b0      	b.n	8b60 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x98>
    8bfe:	8ac3      	ldrh	r3, [r0, #22]
    8c00:	b29b      	uxth	r3, r3
    8c02:	f043 0301 	orr.w	r3, r3, #1
    8c06:	82c3      	strh	r3, [r0, #22]
    8c08:	e795      	b.n	8b36 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x6e>
    8c0a:	bf00      	nop

00008c0c <ADC_Module::wait_for_cal()>:
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8c0c:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8c0e:	015b      	lsls	r3, r3, #5
    8c10:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
{
    8c14:	b510      	push	{r4, lr}
        return (volatile bool)bitband_address(reg, bit);
    }
    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    8c16:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8c1a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    8c1e:	4604      	mov	r4, r0
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8c20:	b152      	cbz	r2, 8c38 <ADC_Module::wait_for_cal()+0x2c>
        yield();
    8c22:	f003 fbfb 	bl	c41c <yield>
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8c26:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8c28:	015b      	lsls	r3, r3, #5
    8c2a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    8c2e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    8c32:	69da      	ldr	r2, [r3, #28]
    8c34:	2a00      	cmp	r2, #0
    8c36:	d1f4      	bne.n	8c22 <ADC_Module::wait_for_cal()+0x16>
    8c38:	699b      	ldr	r3, [r3, #24]
    if (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CALF))
    8c3a:	b123      	cbz	r3, 8c46 <ADC_Module::wait_for_cal()+0x3a>
    8c3c:	8ae3      	ldrh	r3, [r4, #22]
    8c3e:	b29b      	uxth	r3, r3
    8c40:	f043 0302 	orr.w	r3, r3, #2
    8c44:	82e3      	strh	r3, [r4, #22]
    __disable_irq();
    8c46:	b672      	cpsid	i
    if (calibrating)
    8c48:	7e63      	ldrb	r3, [r4, #25]
    8c4a:	b303      	cbz	r3, 8c8e <ADC_Module::wait_for_cal()+0x82>
        sum = adc_regs.CLPS + adc_regs.CLP4 + adc_regs.CLP3 + adc_regs.CLP2 + adc_regs.CLP1 + adc_regs.CLP0;
    8c4c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8c4e:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8c50:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    8c52:	440b      	add	r3, r1
    8c54:	6c11      	ldr	r1, [r2, #64]	; 0x40
    8c56:	6c50      	ldr	r0, [r2, #68]	; 0x44
    8c58:	440b      	add	r3, r1
    8c5a:	6c91      	ldr	r1, [r2, #72]	; 0x48
    8c5c:	4403      	add	r3, r0
    8c5e:	440b      	add	r3, r1
    8c60:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    8c62:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    8c64:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.PG = sum;
    8c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8c6c:	62d3      	str	r3, [r2, #44]	; 0x2c
        sum = adc_regs.CLMS + adc_regs.CLM4 + adc_regs.CLM3 + adc_regs.CLM2 + adc_regs.CLM1 + adc_regs.CLM0;
    8c6e:	6d93      	ldr	r3, [r2, #88]	; 0x58
    8c70:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    8c72:	440b      	add	r3, r1
    8c74:	6e11      	ldr	r1, [r2, #96]	; 0x60
    8c76:	6e50      	ldr	r0, [r2, #100]	; 0x64
    8c78:	440b      	add	r3, r1
    8c7a:	6e91      	ldr	r1, [r2, #104]	; 0x68
    8c7c:	4403      	add	r3, r0
    8c7e:	440b      	add	r3, r1
    8c80:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    8c82:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    8c84:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.MG = sum;
    8c88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8c8c:	6313      	str	r3, [r2, #48]	; 0x30
    __enable_irq();
    8c8e:	b662      	cpsie	i
    if (init_calib)
    8c90:	7ea3      	ldrb	r3, [r4, #26]
    calibrating = 0;
    8c92:	2200      	movs	r2, #0
    8c94:	7662      	strb	r2, [r4, #25]
    if (init_calib)
    8c96:	b903      	cbnz	r3, 8c9a <ADC_Module::wait_for_cal()+0x8e>
}
    8c98:	bd10      	pop	{r4, pc}
        setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    8c9a:	2102      	movs	r1, #2
    8c9c:	4620      	mov	r0, r4
    8c9e:	f7ff ff13 	bl	8ac8 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setSamplingSpeed(ADC_SAMPLING_SPEED speed)
{
    if (calibrating)
    8ca2:	7e63      	ldrb	r3, [r4, #25]
    8ca4:	bb03      	cbnz	r3, 8ce8 <ADC_Module::wait_for_cal()+0xdc>
    case ADC_SAMPLING_SPEED::LOW_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
        atomic::changeBitFlag(adc_regs.CFG2, ADC_CFG2_ADLSTS(3), ADC_CFG2_ADLSTS(1)); // high sampling time (+16 ADCK)
        break;
    case ADC_SAMPLING_SPEED::MED_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8ca6:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8ca8:	0159      	lsls	r1, r3, #5
    8caa:	f101 4284 	add.w	r2, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8cae:	2001      	movs	r0, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8cb0:	2100      	movs	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8cb2:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8cb6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8cba:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
*
*/
void ADC_Module::setAveraging(uint8_t num)
{

    if (calibrating)
    8cbe:	7e62      	ldrb	r2, [r4, #25]
    sampling_speed = speed;
    8cc0:	2102      	movs	r1, #2
    8cc2:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if (calibrating)
    8cc6:	b992      	cbnz	r2, 8cee <ADC_Module::wait_for_cal()+0xe2>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8cc8:	015b      	lsls	r3, r3, #5
    8cca:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8cce:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8cd0:	2001      	movs	r0, #1
#else
            atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGS(3));
#endif
        }
    }
    analog_num_average = num;
    8cd2:	2104      	movs	r1, #4
    8cd4:	f8c3 0488 	str.w	r0, [r3, #1160]	; 0x488
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8cd8:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8cdc:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    8ce0:	f884 1020 	strb.w	r1, [r4, #32]
        init_calib = 0; // clear
    8ce4:	76a2      	strb	r2, [r4, #26]
}
    8ce6:	bd10      	pop	{r4, pc}
        wait_for_cal();
    8ce8:	f7ff ff90 	bl	8c0c <ADC_Module::wait_for_cal()>
    8cec:	e7db      	b.n	8ca6 <ADC_Module::wait_for_cal()+0x9a>
        wait_for_cal();
    8cee:	4620      	mov	r0, r4
    8cf0:	f7ff ff8c 	bl	8c0c <ADC_Module::wait_for_cal()>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8cf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8cf6:	e7e7      	b.n	8cc8 <ADC_Module::wait_for_cal()+0xbc>

00008cf8 <ADC_Module::setResolution(unsigned char)>:
{
    8cf8:	b538      	push	{r3, r4, r5, lr}
    if (analog_res_bits == bits)
    8cfa:	7ec3      	ldrb	r3, [r0, #27]
    8cfc:	428b      	cmp	r3, r1
    8cfe:	d012      	beq.n	8d26 <ADC_Module::setResolution(unsigned char)+0x2e>
    if (calibrating)
    8d00:	7e43      	ldrb	r3, [r0, #25]
    8d02:	4604      	mov	r4, r0
    8d04:	460d      	mov	r5, r1
    8d06:	bb0b      	cbnz	r3, 8d4c <ADC_Module::setResolution(unsigned char)+0x54>
    if (bits <= 9)
    8d08:	2d09      	cmp	r5, #9
    8d0a:	d80d      	bhi.n	8d28 <ADC_Module::setResolution(unsigned char)+0x30>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    8d0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8d0e:	015b      	lsls	r3, r3, #5
    8d10:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8d14:	2000      	movs	r0, #0
    8d16:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    8d1a:	21ff      	movs	r1, #255	; 0xff
        config = 8;
    8d1c:	2208      	movs	r2, #8
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8d1e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    8d22:	61e1      	str	r1, [r4, #28]
    analog_res_bits = config;
    8d24:	76e2      	strb	r2, [r4, #27]
}
    8d26:	bd38      	pop	{r3, r4, r5, pc}
    else if (bits <= 11)
    8d28:	2d0b      	cmp	r5, #11
    8d2a:	d912      	bls.n	8d52 <ADC_Module::setResolution(unsigned char)+0x5a>
    else if (bits <= 13)
    8d2c:	2d0d      	cmp	r5, #13
    8d2e:	d81e      	bhi.n	8d6e <ADC_Module::setResolution(unsigned char)+0x76>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(1));
    8d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8d32:	015b      	lsls	r3, r3, #5
    8d34:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8d38:	2200      	movs	r2, #0
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8d3a:	2001      	movs	r0, #1
    8d3c:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    8d40:	f640 71ff 	movw	r1, #4095	; 0xfff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8d44:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 12;
    8d48:	220c      	movs	r2, #12
    8d4a:	e7ea      	b.n	8d22 <ADC_Module::setResolution(unsigned char)+0x2a>
        wait_for_cal();
    8d4c:	f7ff ff5e 	bl	8c0c <ADC_Module::wait_for_cal()>
    8d50:	e7da      	b.n	8d08 <ADC_Module::setResolution(unsigned char)+0x10>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(2));
    8d52:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8d54:	015b      	lsls	r3, r3, #5
    8d56:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8d5a:	2201      	movs	r2, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8d5c:	2000      	movs	r0, #0
    8d5e:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    8d62:	f240 31ff 	movw	r1, #1023	; 0x3ff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8d66:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 10;
    8d6a:	220a      	movs	r2, #10
    8d6c:	e7d9      	b.n	8d22 <ADC_Module::setResolution(unsigned char)+0x2a>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    8d6e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8d70:	015b      	lsls	r3, r3, #5
    8d72:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8d76:	2001      	movs	r0, #1
    8d78:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8d7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
        config = 16;
    8d80:	2210      	movs	r2, #16
    8d82:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 65535;
    8d86:	e7cc      	b.n	8d22 <ADC_Module::setResolution(unsigned char)+0x2a>

00008d88 <ADC_Module::analog_init()>:
{
    8d88:	b538      	push	{r3, r4, r5, lr}
        else
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
        }
#else
        if (ADC_num == 0)
    8d8a:	7e03      	ldrb	r3, [r0, #24]
        {
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    8d8c:	4a3d      	ldr	r2, [pc, #244]	; (8e84 <ADC_Module::analog_init()+0xfc>)
    8d8e:	4604      	mov	r4, r0
        if (ADC_num == 0)
    8d90:	2b00      	cmp	r3, #0
    8d92:	d16a      	bne.n	8e6a <ADC_Module::analog_init()+0xe2>
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    8d94:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    8d96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    8d9a:	63d3      	str	r3, [r2, #60]	; 0x3c
    atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    8d9c:	6b62      	ldr	r2, [r4, #52]	; 0x34
    //! Stops the internal reference
    /** This is called automatically by ADC_Module::setReference(ref) when ref is any other than REF_1V2
    */
    __attribute__((always_inline)) inline void stop()
    {
        VREF_SC = 0;
    8d9e:	483a      	ldr	r0, [pc, #232]	; (8e88 <ADC_Module::analog_init()+0x100>)
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8da0:	493a      	ldr	r1, [pc, #232]	; (8e8c <ADC_Module::analog_init()+0x104>)
    pga_value = 1;
    8da2:	f240 4501 	movw	r5, #1025	; 0x401
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8da6:	0152      	lsls	r2, r2, #5
    8da8:	8465      	strh	r5, [r4, #34]	; 0x22
    8daa:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    8dae:	2504      	movs	r5, #4
    analog_res_bits = 0;
    8db0:	2300      	movs	r3, #0
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    8db2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8db6:	2501      	movs	r5, #1
    analog_res_bits = 0;
    8db8:	76e3      	strb	r3, [r4, #27]
    analog_max_val = 0;
    8dba:	61e3      	str	r3, [r4, #28]
    analog_num_average = 0;
    8dbc:	f884 3020 	strb.w	r3, [r4, #32]
    interrupts_enabled = false;
    8dc0:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    calibrating = 0;
    8dc4:	7663      	strb	r3, [r4, #25]
    fail_flag = ADC_ERROR::CLEAR; // clear all errors
    8dc6:	82e3      	strh	r3, [r4, #22]
    num_measurements = 0;
    8dc8:	7563      	strb	r3, [r4, #21]
    8dca:	f8c2 5190 	str.w	r5, [r2, #400]	; 0x190
    8dce:	7043      	strb	r3, [r0, #1]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8dd0:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
        atomic::clearBitFlag(adc_regs.SC2, ADC_SC2_REFSEL(1));
    8dd4:	6b62      	ldr	r2, [r4, #52]	; 0x34
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    8dd6:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8dda:	0152      	lsls	r2, r2, #5
    8ddc:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8de0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
    __disable_irq();
    8de4:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8de6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    calibrating = 1;
    8de8:	7665      	strb	r5, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8dea:	0152      	lsls	r2, r2, #5
    8dec:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8df0:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8df4:	f8c2 5498 	str.w	r5, [r2, #1176]	; 0x498
    8df8:	f8c2 549c 	str.w	r5, [r2, #1180]	; 0x49c
    __enable_irq();
    8dfc:	b662      	cpsie	i
    setResolution(10);
    8dfe:	210a      	movs	r1, #10
    8e00:	4620      	mov	r0, r4
    8e02:	f7ff ff79 	bl	8cf8 <ADC_Module::setResolution(unsigned char)>
    if (calibrating)
    8e06:	7e63      	ldrb	r3, [r4, #25]
    init_calib = 1;
    8e08:	76a5      	strb	r5, [r4, #26]
    if (calibrating)
    8e0a:	bb9b      	cbnz	r3, 8e74 <ADC_Module::analog_init()+0xec>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8e0c:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8e0e:	015b      	lsls	r3, r3, #5
    8e10:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8e14:	2101      	movs	r1, #1
    analog_num_average = num;
    8e16:	2220      	movs	r2, #32
    8e18:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    8e1c:	4620      	mov	r0, r4
    8e1e:	f8c3 1484 	str.w	r1, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8e22:	f8c3 1480 	str.w	r1, [r3, #1152]	; 0x480
    analog_num_average = num;
    8e26:	f884 2020 	strb.w	r2, [r4, #32]
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    8e2a:	f7ff fe4d 	bl	8ac8 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    if (calibrating)
    8e2e:	7e63      	ldrb	r3, [r4, #25]
    8e30:	bb23      	cbnz	r3, 8e7c <ADC_Module::analog_init()+0xf4>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8e32:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8e34:	0159      	lsls	r1, r3, #5
    8e36:	f101 4384 	add.w	r3, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8e3a:	2201      	movs	r2, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8e3c:	2000      	movs	r0, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8e3e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8e42:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8e46:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    sampling_speed = speed;
    8e4a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __disable_irq();
    8e4e:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8e50:	6b63      	ldr	r3, [r4, #52]	; 0x34
    calibrating = 1;
    8e52:	7662      	strb	r2, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8e54:	015b      	lsls	r3, r3, #5
    8e56:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8e5a:	f8c3 049c 	str.w	r0, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8e5e:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    8e62:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    8e66:	b662      	cpsie	i
}
    8e68:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
            SIM_SCGC3 |= SIM_SCGC3_ADC1;
    8e6a:	6b13      	ldr	r3, [r2, #48]	; 0x30
    8e6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    8e70:	6313      	str	r3, [r2, #48]	; 0x30
    8e72:	e793      	b.n	8d9c <ADC_Module::analog_init()+0x14>
        wait_for_cal();
    8e74:	4620      	mov	r0, r4
    8e76:	f7ff fec9 	bl	8c0c <ADC_Module::wait_for_cal()>
    8e7a:	e7c7      	b.n	8e0c <ADC_Module::analog_init()+0x84>
        wait_for_cal();
    8e7c:	f7ff fec6 	bl	8c0c <ADC_Module::wait_for_cal()>
    8e80:	e7d7      	b.n	8e32 <ADC_Module::analog_init()+0xaa>
    8e82:	bf00      	nop
    8e84:	40048000 	.word	0x40048000
    8e88:	40074000 	.word	0x40074000
    8e8c:	42fa0000 	.word	0x42fa0000

00008e90 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>:
ADC_Module::ADC_Module(uint8_t ADC_number,
    8e90:	b510      	push	{r4, lr}
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8e92:	2900      	cmp	r1, #0
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    8e94:	6282      	str	r2, [r0, #40]	; 0x28
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8e96:	4a09      	ldr	r2, [pc, #36]	; (8ebc <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x2c>)
                                                 diff_table(a_diff_table)
    8e98:	6303      	str	r3, [r0, #48]	; 0x30
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8e9a:	bf0c      	ite	eq
    8e9c:	2339      	moveq	r3, #57	; 0x39
    8e9e:	233a      	movne	r3, #58	; 0x3a
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    8ea0:	7601      	strb	r1, [r0, #24]
                                                 IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC1 : IRQ_NUMBER_t::IRQ_ADC0)
    8ea2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8ea6:	4906      	ldr	r1, [pc, #24]	; (8ec0 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x30>)
ADC_Module::ADC_Module(uint8_t ADC_number,
    8ea8:	9b02      	ldr	r3, [sp, #8]
                                                 adc_regs(a_adc_regs)
    8eaa:	6343      	str	r3, [r0, #52]	; 0x34
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8eac:	bf18      	it	ne
    8eae:	4611      	movne	r1, r2
ADC_Module::ADC_Module(uint8_t ADC_number,
    8eb0:	4604      	mov	r4, r0
    8eb2:	6381      	str	r1, [r0, #56]	; 0x38
    analog_init();
    8eb4:	f7ff ff68 	bl	8d88 <ADC_Module::analog_init()>
}
    8eb8:	4620      	mov	r0, r4
    8eba:	bd10      	pop	{r4, pc}
    8ebc:	40036038 	.word	0x40036038
    8ec0:	40036010 	.word	0x40036010

00008ec4 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
{
    8ec4:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    8ec6:	7e43      	ldrb	r3, [r0, #25]
{
    8ec8:	4605      	mov	r5, r0
    8eca:	460c      	mov	r4, r1
    if (calibrating)
    8ecc:	b9a3      	cbnz	r3, 8ef8 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x34>
    switch (speed)
    8ece:	2c04      	cmp	r4, #4
    8ed0:	d80f      	bhi.n	8ef2 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x2e>
    8ed2:	e8df f004 	tbb	[pc, r4]
    8ed6:	2d1e      	.short	0x2d1e
    8ed8:	033c      	.short	0x033c
    8eda:	14          	.byte	0x14
    8edb:	00          	.byte	0x00
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);    // long sampling time enable
    8edc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8ede:	015a      	lsls	r2, r3, #5
    8ee0:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ee4:	2101      	movs	r1, #1
    8ee6:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
    8eea:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8eee:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    8ef2:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8ef6:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    8ef8:	f7ff fe88 	bl	8c0c <ADC_Module::wait_for_cal()>
    8efc:	e7e7      	b.n	8ece <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP); // shortest sampling time
    8efe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f00:	015b      	lsls	r3, r3, #5
    8f02:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8f06:	2200      	movs	r2, #0
    8f08:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    sampling_speed = speed;
    8f0c:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8f10:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);      // long sampling time enable
    8f12:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f14:	015a      	lsls	r2, r3, #5
    8f16:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f1a:	2101      	movs	r1, #1
    8f1c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8f20:	2100      	movs	r1, #0
    8f22:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8f26:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    8f2a:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8f2e:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8f30:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f32:	015a      	lsls	r2, r3, #5
    8f34:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f38:	2101      	movs	r1, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8f3a:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f3c:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8f40:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8f44:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    sampling_speed = speed;
    8f48:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8f4c:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8f4e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f50:	015a      	lsls	r2, r3, #5
    8f52:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f56:	2101      	movs	r1, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8f58:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f5a:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8f5e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8f62:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    sampling_speed = speed;
    8f66:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8f6a:	bd38      	pop	{r3, r4, r5, pc}

00008f6c <ADC_Module::setAveraging(unsigned char)>:
{
    8f6c:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    8f6e:	7e43      	ldrb	r3, [r0, #25]
{
    8f70:	4604      	mov	r4, r0
    8f72:	460d      	mov	r5, r1
    if (calibrating)
    8f74:	bb2b      	cbnz	r3, 8fc2 <ADC_Module::setAveraging(unsigned char)+0x56>
    if (num <= 1)
    8f76:	2d01      	cmp	r5, #1
        atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8f78:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (num <= 1)
    8f7a:	d918      	bls.n	8fae <ADC_Module::setAveraging(unsigned char)+0x42>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f7c:	015b      	lsls	r3, r3, #5
    8f7e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    8f82:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f86:	2101      	movs	r1, #1
        if (num <= 4)
    8f88:	2d04      	cmp	r5, #4
    8f8a:	6099      	str	r1, [r3, #8]
    8f8c:	d806      	bhi.n	8f9c <ADC_Module::setAveraging(unsigned char)+0x30>
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8f8e:	2100      	movs	r1, #0
    8f90:	6059      	str	r1, [r3, #4]
            num = 4;
    8f92:	2204      	movs	r2, #4
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8f94:	6019      	str	r1, [r3, #0]
    analog_num_average = num;
    8f96:	f884 2020 	strb.w	r2, [r4, #32]
}
    8f9a:	bd38      	pop	{r3, r4, r5, pc}
        else if (num <= 8)
    8f9c:	2d08      	cmp	r5, #8
    8f9e:	d913      	bls.n	8fc8 <ADC_Module::setAveraging(unsigned char)+0x5c>
        else if (num <= 16)
    8fa0:	2d10      	cmp	r5, #16
    8fa2:	d818      	bhi.n	8fd6 <ADC_Module::setAveraging(unsigned char)+0x6a>
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8fa4:	2200      	movs	r2, #0
    8fa6:	601a      	str	r2, [r3, #0]
            num = 16;
    8fa8:	2210      	movs	r2, #16
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8faa:	6059      	str	r1, [r3, #4]
    }
    8fac:	e7f3      	b.n	8f96 <ADC_Module::setAveraging(unsigned char)+0x2a>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8fae:	015b      	lsls	r3, r3, #5
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8fb0:	2100      	movs	r1, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8fb2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        num = 0;
    8fb6:	460a      	mov	r2, r1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8fb8:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    analog_num_average = num;
    8fbc:	f884 2020 	strb.w	r2, [r4, #32]
}
    8fc0:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    8fc2:	f7ff fe23 	bl	8c0c <ADC_Module::wait_for_cal()>
    8fc6:	e7d6      	b.n	8f76 <ADC_Module::setAveraging(unsigned char)+0xa>
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8fc8:	2000      	movs	r0, #0
            num = 8;
    8fca:	2208      	movs	r2, #8
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8fcc:	6019      	str	r1, [r3, #0]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8fce:	6058      	str	r0, [r3, #4]
    analog_num_average = num;
    8fd0:	f884 2020 	strb.w	r2, [r4, #32]
}
    8fd4:	bd38      	pop	{r3, r4, r5, pc}
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8fd6:	6059      	str	r1, [r3, #4]
            num = 32;
    8fd8:	2220      	movs	r2, #32
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8fda:	6019      	str	r1, [r3, #0]
    }
    8fdc:	e7db      	b.n	8f96 <ADC_Module::setAveraging(unsigned char)+0x2a>
    8fde:	bf00      	nop

00008fe0 <ADC_Module::checkPin(unsigned char)>:

// check whether the pin is a valid analog pin
bool ADC_Module::checkPin(uint8_t pin)
{

    if (pin > ADC_MAX_PIN)
    8fe0:	292b      	cmp	r1, #43	; 0x2b
    8fe2:	d807      	bhi.n	8ff4 <ADC_Module::checkPin(unsigned char)+0x14>
    {
        return false; // all others are invalid
    }

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8fe4:	6a83      	ldr	r3, [r0, #40]	; 0x28

    // check for valid pin
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    8fe6:	5c58      	ldrb	r0, [r3, r1]
    8fe8:	f000 001f 	and.w	r0, r0, #31
    8fec:	381f      	subs	r0, #31
    8fee:	bf18      	it	ne
    8ff0:	2001      	movne	r0, #1
    8ff2:	4770      	bx	lr
        return false; // all others are invalid
    8ff4:	2000      	movs	r0, #0
    {
        return false; // all others are invalid
    }

    return true;
}
    8ff6:	4770      	bx	lr

00008ff8 <ADC_Module::startReadFast(unsigned char)>:
// It doesn't change the continuous conversion bit
void ADC_Module::startReadFast(uint8_t pin)
{

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8ff8:	6a83      	ldr	r3, [r0, #40]	; 0x28

#ifdef ADC_TEENSY_4
// Teensy 4 has no a or b channels
#else
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    8ffa:	565a      	ldrsb	r2, [r3, r1]
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8ffc:	5c5b      	ldrb	r3, [r3, r1]
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    8ffe:	2a00      	cmp	r2, #0
    { // mux a
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    9000:	6b42      	ldr	r2, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9002:	ea4f 1242 	mov.w	r2, r2, lsl #5
    9006:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    900a:	bfb4      	ite	lt
    900c:	2100      	movlt	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    900e:	2101      	movge	r1, #1
    9010:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    }
#endif

    // select pin for single-ended mode and start conversion, enable interrupts if requested
    __disable_irq();
    9014:	b672      	cpsid	i
#ifdef ADC_TEENSY_4
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
#else
    adc_regs.SC1A = (sc1a_pin & ADC_SC1A_CHANNELS) + atomic::getBitFlag(adc_regs.SC1A, ADC_SC1_AIEN) * ADC_SC1_AIEN;
    9016:	6b41      	ldr	r1, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9018:	014a      	lsls	r2, r1, #5
    901a:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    901e:	f003 031f 	and.w	r3, r3, #31
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    9022:	6992      	ldr	r2, [r2, #24]
    9024:	3a00      	subs	r2, #0
    9026:	bf18      	it	ne
    9028:	2201      	movne	r2, #1
    902a:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    902e:	600b      	str	r3, [r1, #0]
#endif
    __enable_irq();
    9030:	b662      	cpsie	i
}
    9032:	4770      	bx	lr

00009034 <ADC_Module::startContinuous(unsigned char)>:
/* Starts continuous conversion on the pin
 * It returns as soon as the ADC is set, use analogReadContinuous() to read the values
 * Set the resolution, number of averages and voltage reference using the appropriate functions BEFORE calling this function
*/
bool ADC_Module::startContinuous(uint8_t pin)
{
    9034:	b550      	push	{r4, r6, lr}
    if (pin > ADC_MAX_PIN)
    9036:	292b      	cmp	r1, #43	; 0x2b
{
    9038:	b083      	sub	sp, #12
    903a:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
    903c:	d817      	bhi.n	906e <ADC_Module::startContinuous(unsigned char)+0x3a>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    903e:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    9040:	5c5b      	ldrb	r3, [r3, r1]
    9042:	f003 031f 	and.w	r3, r3, #31
    9046:	2b1f      	cmp	r3, #31
    9048:	d011      	beq.n	906e <ADC_Module::startContinuous(unsigned char)+0x3a>
        fail_flag |= ADC_ERROR::WRONG_PIN;
        return false;
    }

    // check for calibration before setting channels,
    if (calibrating)
    904a:	7e43      	ldrb	r3, [r0, #25]
    904c:	b9bb      	cbnz	r3, 907e <ADC_Module::startContinuous(unsigned char)+0x4a>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_ADCO);
    904e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        wait_for_cal();

    // increase the counter of measurements
    num_measurements++;
    9050:	7d62      	ldrb	r2, [r4, #21]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    9052:	015b      	lsls	r3, r3, #5
    9054:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    9058:	3201      	adds	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    905a:	2601      	movs	r6, #1
    905c:	7562      	strb	r2, [r4, #21]

    // set continuous conversion flag
    continuousMode();

    startReadFast(pin);
    905e:	4620      	mov	r0, r4
    9060:	f8c3 648c 	str.w	r6, [r3, #1164]	; 0x48c
    9064:	f7ff ffc8 	bl	8ff8 <ADC_Module::startReadFast(unsigned char)>

    return true;
    9068:	4630      	mov	r0, r6
}
    906a:	b003      	add	sp, #12
    906c:	bd50      	pop	{r4, r6, pc}
    906e:	8ae3      	ldrh	r3, [r4, #22]
    9070:	b29b      	uxth	r3, r3
        return false;
    9072:	2000      	movs	r0, #0
    9074:	f043 0304 	orr.w	r3, r3, #4
    9078:	82e3      	strh	r3, [r4, #22]
}
    907a:	b003      	add	sp, #12
    907c:	bd50      	pop	{r4, r6, pc}
    907e:	9101      	str	r1, [sp, #4]
        wait_for_cal();
    9080:	f7ff fdc4 	bl	8c0c <ADC_Module::wait_for_cal()>
    9084:	9901      	ldr	r1, [sp, #4]
    9086:	e7e2      	b.n	904e <ADC_Module::startContinuous(unsigned char)+0x1a>

00009088 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9088:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    908c:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    908e:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    9092:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    9094:	d101      	bne.n	909a <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    9096:	6883      	ldr	r3, [r0, #8]
    9098:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    909a:	f000 b941 	b.w	9320 <EventResponder::triggerEventNotImmediate()>
    909e:	bf00      	nop

000090a0 <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
    90a0:	b470      	push	{r4, r5, r6}
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    90a2:	6b01      	ldr	r1, [r0, #48]	; 0x30
    90a4:	4a4a      	ldr	r2, [pc, #296]	; (91d0 <SPIClass::dma_rxisr()+0x130>)
    90a6:	7909      	ldrb	r1, [r1, #4]
    90a8:	77d1      	strb	r1, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    90aa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    90ac:	7909      	ldrb	r1, [r1, #4]
    90ae:	7711      	strb	r1, [r2, #28]
    90b0:	6b01      	ldr	r1, [r0, #48]	; 0x30
    90b2:	7909      	ldrb	r1, [r1, #4]
    90b4:	7711      	strb	r1, [r2, #28]
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    90b6:	6a82      	ldr	r2, [r0, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
    90b8:	4603      	mov	r3, r0
	if (_dma_count_remaining) {
    90ba:	b32a      	cbz	r2, 9108 <SPIClass::dma_rxisr()+0x68>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    90bc:	6841      	ldr	r1, [r0, #4]
    90be:	68c9      	ldr	r1, [r1, #12]
    90c0:	428a      	cmp	r2, r1
    90c2:	d943      	bls.n	914c <SPIClass::dma_rxisr()+0xac>
			_dma_count_remaining -= hardware().max_dma_count;
    90c4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    90c6:	6b00      	ldr	r0, [r0, #48]	; 0x30
			_dma_count_remaining -= hardware().max_dma_count;
    90c8:	1a52      	subs	r2, r2, r1
    90ca:	6821      	ldr	r1, [r4, #0]
    90cc:	629a      	str	r2, [r3, #40]	; 0x28
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    90ce:	680d      	ldr	r5, [r1, #0]
    90d0:	f103 0424 	add.w	r4, r3, #36	; 0x24
    90d4:	42a5      	cmp	r5, r4
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    90d6:	f04f 0201 	mov.w	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    90da:	d059      	beq.n	9190 <SPIClass::dma_rxisr()+0xf0>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    90dc:	681c      	ldr	r4, [r3, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    90de:	68e5      	ldr	r5, [r4, #12]
    90e0:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    90e4:	680d      	ldr	r5, [r1, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    90e6:	d129      	bne.n	913c <SPIClass::dma_rxisr()+0x9c>
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    90e8:	782d      	ldrb	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    90ea:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    90ec:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    90f0:	3601      	adds	r6, #1
    90f2:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    90f4:	6365      	str	r5, [r4, #52]	; 0x34
		DMA_SERQ = channel;
    90f6:	4936      	ldr	r1, [pc, #216]	; (91d0 <SPIClass::dma_rxisr()+0x130>)
    90f8:	7900      	ldrb	r0, [r0, #4]
    90fa:	76c8      	strb	r0, [r1, #27]
			}
		}
		_dmaRX->enable();
		if (should_reenable_tx)
    90fc:	b112      	cbz	r2, 9104 <SPIClass::dma_rxisr()+0x64>
    90fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    9100:	791b      	ldrb	r3, [r3, #4]
    9102:	76cb      	strb	r3, [r1, #27]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();

	}
}
    9104:	bc70      	pop	{r4, r5, r6}
    9106:	4770      	bx	lr
    9108:	6801      	ldr	r1, [r0, #0]
		port().SR = 0xFF0F0000;
    910a:	4c32      	ldr	r4, [pc, #200]	; (91d4 <SPIClass::dma_rxisr()+0x134>)
		_dma_event_responder->triggerEvent();
    910c:	6b40      	ldr	r0, [r0, #52]	; 0x34
		port().RSER = 0;
    910e:	630a      	str	r2, [r1, #48]	; 0x30
		port().SR = 0xFF0F0000;
    9110:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    9112:	68cc      	ldr	r4, [r1, #12]
    9114:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
    9118:	60cc      	str	r4, [r1, #12]
		_dma_event_responder->triggerEvent();
    911a:	6804      	ldr	r4, [r0, #0]
    911c:	492e      	ldr	r1, [pc, #184]	; (91d8 <SPIClass::dma_rxisr()+0x138>)
    911e:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    9120:	f04f 0c03 	mov.w	ip, #3
    9124:	428c      	cmp	r4, r1
    9126:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
		_dma_event_responder->triggerEvent();
    912a:	d139      	bne.n	91a0 <SPIClass::dma_rxisr()+0x100>
		if (_type == EventTypeImmediate) {
    912c:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    912e:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    9130:	2b02      	cmp	r3, #2
		_data = data;
    9132:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    9134:	d138      	bne.n	91a8 <SPIClass::dma_rxisr()+0x108>
}
    9136:	bc70      	pop	{r4, r5, r6}
			(*_function)(*this);
    9138:	6883      	ldr	r3, [r0, #8]
    913a:	4718      	bx	r3
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    913c:	882d      	ldrh	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    913e:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    9140:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    9144:	3602      	adds	r6, #2
    9146:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    9148:	6365      	str	r5, [r4, #52]	; 0x34
    914a:	e7d4      	b.n	90f6 <SPIClass::dma_rxisr()+0x56>
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    914c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    914e:	6809      	ldr	r1, [r1, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9150:	8bcc      	ldrh	r4, [r1, #30]
    9152:	0426      	lsls	r6, r4, #16
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    9154:	f102 30ff 	add.w	r0, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9158:	d431      	bmi.n	91be <SPIClass::dma_rxisr()+0x11e>
		tcd->BITER = len & 0x7fff;
    915a:	f3c0 000e 	ubfx	r0, r0, #0, #15
    915e:	83c8      	strh	r0, [r1, #30]
	tcd->CITER = tcd->BITER; 
    9160:	8bcc      	ldrh	r4, [r1, #30]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    9162:	6b18      	ldr	r0, [r3, #48]	; 0x30
	tcd->CITER = tcd->BITER; 
    9164:	b2a4      	uxth	r4, r4
    9166:	82cc      	strh	r4, [r1, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    9168:	6804      	ldr	r4, [r0, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    916a:	8be5      	ldrh	r5, [r4, #30]
    916c:	042d      	lsls	r5, r5, #16
    916e:	d41e      	bmi.n	91ae <SPIClass::dma_rxisr()+0x10e>
		tcd->BITER = len & 0x7fff;
    9170:	f3c2 050e 	ubfx	r5, r2, #0, #15
    9174:	83e5      	strh	r5, [r4, #30]
	tcd->CITER = tcd->BITER; 
    9176:	8be5      	ldrh	r5, [r4, #30]
    9178:	b2ad      	uxth	r5, r5
    917a:	82e5      	strh	r5, [r4, #22]
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    917c:	680d      	ldr	r5, [r1, #0]
			_dma_count_remaining = 0;
    917e:	2400      	movs	r4, #0
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    9180:	3a01      	subs	r2, #1
			_dma_count_remaining = 0;
    9182:	629c      	str	r4, [r3, #40]	; 0x28
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    9184:	f103 0424 	add.w	r4, r3, #36	; 0x24
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    9188:	bf18      	it	ne
    918a:	2201      	movne	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    918c:	42a5      	cmp	r5, r4
    918e:	d1a5      	bne.n	90dc <SPIClass::dma_rxisr()+0x3c>
    9190:	6819      	ldr	r1, [r3, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    9192:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    9194:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
    9198:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    919c:	634c      	str	r4, [r1, #52]	; 0x34
    919e:	e7aa      	b.n	90f6 <SPIClass::dma_rxisr()+0x56>
		_dma_event_responder->triggerEvent();
    91a0:	4623      	mov	r3, r4
    91a2:	4611      	mov	r1, r2
}
    91a4:	bc70      	pop	{r4, r5, r6}
		_dma_event_responder->triggerEvent();
    91a6:	4718      	bx	r3
}
    91a8:	bc70      	pop	{r4, r5, r6}
			triggerEventNotImmediate();
    91aa:	f000 b8b9 	b.w	9320 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    91ae:	8be5      	ldrh	r5, [r4, #30]
    91b0:	f3c2 0608 	ubfx	r6, r2, #0, #9
    91b4:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
    91b8:	4335      	orrs	r5, r6
    91ba:	83e5      	strh	r5, [r4, #30]
    91bc:	e7db      	b.n	9176 <SPIClass::dma_rxisr()+0xd6>
    91be:	8bcc      	ldrh	r4, [r1, #30]
    91c0:	f3c0 0008 	ubfx	r0, r0, #0, #9
    91c4:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    91c8:	4320      	orrs	r0, r4
    91ca:	83c8      	strh	r0, [r1, #30]
    91cc:	e7c8      	b.n	9160 <SPIClass::dma_rxisr()+0xc0>
    91ce:	bf00      	nop
    91d0:	40008000 	.word	0x40008000
    91d4:	ff0f0000 	.word	0xff0f0000
    91d8:	00009089 	.word	0x00009089

000091dc <_spi_dma_rxISR0()>:
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    91dc:	b508      	push	{r3, lr}
    91de:	4802      	ldr	r0, [pc, #8]	; (91e8 <_spi_dma_rxISR0()+0xc>)
    91e0:	f7ff ff5e 	bl	90a0 <SPIClass::dma_rxisr()>
    91e4:	bd08      	pop	{r3, pc}
    91e6:	bf00      	nop
    91e8:	1fffd370 	.word	0x1fffd370

000091ec <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v>:
		: port_addr(myport), hardware_addr(myhardware) {
    91ec:	4a0a      	ldr	r2, [pc, #40]	; (9218 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x2c>)
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);
    91ee:	490b      	ldr	r1, [pc, #44]	; (921c <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x30>)
    91f0:	2300      	movs	r3, #0
}
    91f2:	b410      	push	{r4}
    91f4:	4c0a      	ldr	r4, [pc, #40]	; (9220 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x34>)
    91f6:	6093      	str	r3, [r2, #8]
    91f8:	8493      	strh	r3, [r2, #36]	; 0x24
    91fa:	6014      	str	r4, [r2, #0]
    91fc:	6051      	str	r1, [r2, #4]
    91fe:	bc10      	pop	{r4}
    9200:	60d3      	str	r3, [r2, #12]
    9202:	6193      	str	r3, [r2, #24]
    9204:	6293      	str	r3, [r2, #40]	; 0x28
    9206:	62d3      	str	r3, [r2, #44]	; 0x2c
    9208:	6313      	str	r3, [r2, #48]	; 0x30
    920a:	6353      	str	r3, [r2, #52]	; 0x34
    920c:	6113      	str	r3, [r2, #16]
    920e:	6153      	str	r3, [r2, #20]
    9210:	61d3      	str	r3, [r2, #28]
    9212:	6213      	str	r3, [r2, #32]
    9214:	4770      	bx	lr
    9216:	bf00      	nop
    9218:	1fffd370 	.word	0x1fffd370
    921c:	000153f4 	.word	0x000153f4
    9220:	4002c000 	.word	0x4002c000

00009224 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>:
#include "FilterOnePole.h"
#include "FloatDefine.h"

FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    9224:	b538      	push	{r3, r4, r5, lr}
    9226:	4604      	mov	r4, r0
    9228:	4608      	mov	r0, r1
  setFilter( ft, fc, initialValue );
}

void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
  FT = ft;
    922a:	7020      	strb	r0, [r4, #0]

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    922c:	490a      	ldr	r1, [pc, #40]	; (9258 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x34>)
    922e:	4610      	mov	r0, r2
FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    9230:	461d      	mov	r5, r3
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    9232:	f003 fecd 	bl	cfd0 <__aeabi_fmul>
    9236:	4601      	mov	r1, r0
    9238:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    923c:	f003 ff7c 	bl	d138 <__aeabi_fdiv>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    9240:	4906      	ldr	r1, [pc, #24]	; (925c <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x38>)
    9242:	f003 fec5 	bl	cfd0 <__aeabi_fmul>
  Y = initialValue;
    9246:	60e5      	str	r5, [r4, #12]
  TauUS = newTau * 1e6;
    9248:	6060      	str	r0, [r4, #4]
  Ylast = initialValue;
    924a:	6125      	str	r5, [r4, #16]
  X = initialValue;
    924c:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    924e:	f001 f9db 	bl	a608 <micros>
    9252:	61e0      	str	r0, [r4, #28]
}
    9254:	4620      	mov	r0, r4
    9256:	bd38      	pop	{r3, r4, r5, pc}
    9258:	40c90fdb 	.word	0x40c90fdb
    925c:	49742400 	.word	0x49742400

00009260 <FilterOnePole::output()>:
}

float FilterOnePole::output() {
    // figure out which button to read
  switch (FT) {
    9260:	7803      	ldrb	r3, [r0, #0]
float FilterOnePole::output() {
    9262:	b510      	push	{r4, lr}
    9264:	4604      	mov	r4, r0
  switch (FT) {
    9266:	2b03      	cmp	r3, #3
    9268:	d821      	bhi.n	92ae <FilterOnePole::output()+0x4e>
    926a:	e8df f003 	tbb	[pc, r3]
    926e:	1e19      	.short	0x1e19
    9270:	0211      	.short	0x0211
      // highpass is the _difference_
      return X-Y;
      break;
    case DIFFERENTIATOR:
      // like a highpass, but normalize
      return (X-Y)/(TauUS/1.0e6);
    9272:	68c1      	ldr	r1, [r0, #12]
    9274:	6940      	ldr	r0, [r0, #20]
    9276:	f003 fda1 	bl	cdbc <__aeabi_fsub>
    927a:	490e      	ldr	r1, [pc, #56]	; (92b4 <FilterOnePole::output()+0x54>)
    927c:	4603      	mov	r3, r0
    927e:	6860      	ldr	r0, [r4, #4]
    9280:	461c      	mov	r4, r3
    9282:	f003 ff59 	bl	d138 <__aeabi_fdiv>
    9286:	4601      	mov	r1, r0
    9288:	4620      	mov	r0, r4
    928a:	f003 ff55 	bl	d138 <__aeabi_fdiv>
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    928e:	bd10      	pop	{r4, pc}
      return Y * (TauUS/1.0e6);
    9290:	4908      	ldr	r1, [pc, #32]	; (92b4 <FilterOnePole::output()+0x54>)
    9292:	6840      	ldr	r0, [r0, #4]
    9294:	f003 ff50 	bl	d138 <__aeabi_fdiv>
    9298:	68e1      	ldr	r1, [r4, #12]
    929a:	f003 fe99 	bl	cfd0 <__aeabi_fmul>
}
    929e:	bd10      	pop	{r4, pc}
      return X-Y;
    92a0:	68c1      	ldr	r1, [r0, #12]
    92a2:	6940      	ldr	r0, [r0, #20]
    92a4:	f003 fd8a 	bl	cdbc <__aeabi_fsub>
}
    92a8:	bd10      	pop	{r4, pc}
      return Y; 
    92aa:	68c0      	ldr	r0, [r0, #12]
}
    92ac:	bd10      	pop	{r4, pc}
  switch (FT) {
    92ae:	2000      	movs	r0, #0
}
    92b0:	bd10      	pop	{r4, pc}
    92b2:	bf00      	nop
    92b4:	49742400 	.word	0x49742400

000092b8 <FilterOnePole::input(float)>:
float FilterOnePole::input( float inVal ) {
    92b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    92ba:	4604      	mov	r4, r0
    92bc:	460e      	mov	r6, r1
  long time = micros();
    92be:	f001 f9a3 	bl	a608 <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    92c2:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    92c4:	4605      	mov	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    92c6:	1ac0      	subs	r0, r0, r3
    92c8:	f003 fe2e 	bl	cf28 <__aeabi_i2f>
  Ylast = Y;
    92cc:	68e7      	ldr	r7, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    92ce:	61a0      	str	r0, [r4, #24]
    92d0:	4601      	mov	r1, r0
  LastUS = time;                      // update this now
    92d2:	61e5      	str	r5, [r4, #28]
  TauSamps = TauUS / ElapsedUS;
    92d4:	6860      	ldr	r0, [r4, #4]
  X = inVal;                          // this is now the most recent input value
    92d6:	6166      	str	r6, [r4, #20]
  Ylast = Y;
    92d8:	6127      	str	r7, [r4, #16]
  TauSamps = TauUS / ElapsedUS;
    92da:	f003 ff2d 	bl	d138 <__aeabi_fdiv>
    92de:	4601      	mov	r1, r0
    92e0:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    92e2:	480e      	ldr	r0, [pc, #56]	; (931c <FilterOnePole::input(float)+0x64>)
    92e4:	f003 ff28 	bl	d138 <__aeabi_fdiv>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    92e8:	f003 f972 	bl	c5d0 <expf>
    92ec:	4605      	mov	r5, r0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    92ee:	4601      	mov	r1, r0
    92f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    92f4:	f003 fd62 	bl	cdbc <__aeabi_fsub>
    92f8:	4631      	mov	r1, r6
    92fa:	f003 fe69 	bl	cfd0 <__aeabi_fmul>
    92fe:	4629      	mov	r1, r5
    9300:	4606      	mov	r6, r0
    9302:	4638      	mov	r0, r7
    9304:	f003 fe64 	bl	cfd0 <__aeabi_fmul>
    9308:	4601      	mov	r1, r0
    930a:	4630      	mov	r0, r6
    930c:	f003 fd58 	bl	cdc0 <__addsf3>
    9310:	60e0      	str	r0, [r4, #12]
  return output();
    9312:	4620      	mov	r0, r4
}
    9314:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return output();
    9318:	f7ff bfa2 	b.w	9260 <FilterOnePole::output()>
    931c:	bf800000 	.word	0xbf800000

00009320 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9320:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    9324:	b672      	cpsid	i
extern const uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    9326:	7f43      	ldrb	r3, [r0, #29]
    9328:	b95b      	cbnz	r3, 9342 <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    932a:	7f01      	ldrb	r1, [r0, #28]
    932c:	2901      	cmp	r1, #1
{
    932e:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    9330:	d00b      	beq.n	934a <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    9332:	2903      	cmp	r1, #3
    9334:	d013      	beq.n	935e <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    9336:	2301      	movs	r3, #1
    9338:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    933a:	b902      	cbnz	r2, 933e <EventResponder::triggerEventNotImmediate()+0x1e>
    933c:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    933e:	bc30      	pop	{r4, r5}
    9340:	4770      	bx	lr
    9342:	b90a      	cbnz	r2, 9348 <EventResponder::triggerEventNotImmediate()+0x28>
    9344:	b662      	cpsie	i
    9346:	4770      	bx	lr
    9348:	4770      	bx	lr
			if (firstYield == nullptr) {
    934a:	4c12      	ldr	r4, [pc, #72]	; (9394 <EventResponder::triggerEventNotImmediate()+0x74>)
    934c:	6821      	ldr	r1, [r4, #0]
    934e:	b1b1      	cbz	r1, 937e <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    9350:	4911      	ldr	r1, [pc, #68]	; (9398 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    9352:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    9354:	680b      	ldr	r3, [r1, #0]
    9356:	6183      	str	r3, [r0, #24]
				lastYield = this;
    9358:	6008      	str	r0, [r1, #0]
				_prev->_next = this;
    935a:	6158      	str	r0, [r3, #20]
				lastYield = this;
    935c:	e7eb      	b.n	9336 <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    935e:	4d0f      	ldr	r5, [pc, #60]	; (939c <EventResponder::triggerEventNotImmediate()+0x7c>)
    9360:	490f      	ldr	r1, [pc, #60]	; (93a0 <EventResponder::triggerEventNotImmediate()+0x80>)
    9362:	682c      	ldr	r4, [r5, #0]
    9364:	b18c      	cbz	r4, 938a <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    9366:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    9368:	680b      	ldr	r3, [r1, #0]
    936a:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    936c:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    936e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    9372:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    9376:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9378:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    937c:	e7db      	b.n	9336 <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    937e:	4b06      	ldr	r3, [pc, #24]	; (9398 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    9380:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    9382:	6181      	str	r1, [r0, #24]
				firstYield = this;
    9384:	6020      	str	r0, [r4, #0]
				lastYield = this;
    9386:	6018      	str	r0, [r3, #0]
    9388:	e7d5      	b.n	9336 <EventResponder::triggerEventNotImmediate()+0x16>
				_next = nullptr;
    938a:	6144      	str	r4, [r0, #20]
				_prev = nullptr;
    938c:	6184      	str	r4, [r0, #24]
				firstInterrupt = this;
    938e:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    9390:	e7ed      	b.n	936e <EventResponder::triggerEventNotImmediate()+0x4e>
    9392:	bf00      	nop
    9394:	1fffd3a8 	.word	0x1fffd3a8
    9398:	1fffd3b8 	.word	0x1fffd3b8
    939c:	1fffd3b0 	.word	0x1fffd3b0
    93a0:	1fffd3ac 	.word	0x1fffd3ac

000093a4 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    93a4:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    93a6:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    93aa:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    93ac:	4c0c      	ldr	r4, [pc, #48]	; (93e0 <EventResponder::runFromInterrupt()+0x3c>)
    93ae:	6820      	ldr	r0, [r4, #0]
		if (first) {
    93b0:	b180      	cbz	r0, 93d4 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    93b2:	4e0c      	ldr	r6, [pc, #48]	; (93e4 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    93b4:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    93b6:	6943      	ldr	r3, [r0, #20]
    93b8:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    93ba:	b173      	cbz	r3, 93da <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    93bc:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    93be:	b902      	cbnz	r2, 93c2 <EventResponder::runFromInterrupt()+0x1e>
    93c0:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    93c2:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    93c4:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    93c6:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    93c8:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    93cc:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    93ce:	6820      	ldr	r0, [r4, #0]
		if (first) {
    93d0:	2800      	cmp	r0, #0
    93d2:	d1f0      	bne.n	93b6 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    93d4:	b902      	cbnz	r2, 93d8 <EventResponder::runFromInterrupt()+0x34>
    93d6:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    93d8:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    93da:	6033      	str	r3, [r6, #0]
    93dc:	e7ef      	b.n	93be <EventResponder::runFromInterrupt()+0x1a>
    93de:	bf00      	nop
    93e0:	1fffd3b0 	.word	0x1fffd3b0
    93e4:	1fffd3ac 	.word	0x1fffd3ac

000093e8 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    93e8:	f7ff bfdc 	b.w	93a4 <EventResponder::runFromInterrupt()>

000093ec <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    93ec:	4a02      	ldr	r2, [pc, #8]	; (93f8 <systick_isr+0xc>)
    93ee:	6813      	ldr	r3, [r2, #0]
    93f0:	3301      	adds	r3, #1
    93f2:	6013      	str	r3, [r2, #0]
}
    93f4:	4770      	bx	lr
    93f6:	bf00      	nop
    93f8:	1fffd3c0 	.word	0x1fffd3c0

000093fc <HardwareSerial2::begin(unsigned long)>:
HardwareSerial2 Serial2(&serialEvent2);

uint8_t _serialEvent2_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial2::begin(uint32_t baud) {
	serial2_begin(BAUD2DIV2(baud));
    93fc:	084b      	lsrs	r3, r1, #1
    93fe:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
    9402:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
void HardwareSerial2::begin(uint32_t baud) {
    9406:	b510      	push	{r4, lr}
    9408:	4604      	mov	r4, r0
	serial2_begin(BAUD2DIV2(baud));
    940a:	fbb3 f0f1 	udiv	r0, r3, r1
    940e:	f001 f967 	bl	a6e0 <serial2_begin>
	if (!_serialEvent2_default) addToSerialEventsList();
    9412:	4b04      	ldr	r3, [pc, #16]	; (9424 <HardwareSerial2::begin(unsigned long)+0x28>)
    9414:	781b      	ldrb	r3, [r3, #0]
    9416:	b103      	cbz	r3, 941a <HardwareSerial2::begin(unsigned long)+0x1e>
}
    9418:	bd10      	pop	{r4, pc}
	if (!_serialEvent2_default) addToSerialEventsList();
    941a:	4620      	mov	r0, r4
}
    941c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent2_default) addToSerialEventsList();
    9420:	f003 b874 	b.w	c50c <HardwareSerial::addToSerialEventsList()>
    9424:	1fff89f9 	.word	0x1fff89f9

00009428 <HardwareSerial2::write9bit(unsigned long)>:
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    9428:	b508      	push	{r3, lr}
    942a:	4608      	mov	r0, r1
    942c:	f001 fb46 	bl	aabc <serial2_putchar>
    9430:	2001      	movs	r0, #1
    9432:	bd08      	pop	{r3, pc}

00009434 <HardwareSerial2::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    9434:	b508      	push	{r3, lr}
    9436:	4608      	mov	r0, r1
    9438:	f001 fb40 	bl	aabc <serial2_putchar>
    943c:	2001      	movs	r0, #1
    943e:	bd08      	pop	{r3, pc}

00009440 <HardwareSerial2::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    9440:	b538      	push	{r3, r4, r5, lr}
    9442:	4608      	mov	r0, r1
    9444:	460d      	mov	r5, r1
    9446:	f004 ff7b 	bl	e340 <strlen>
    944a:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    944c:	4601      	mov	r1, r0
    944e:	4628      	mov	r0, r5
    9450:	f001 fbb0 	bl	abb4 <serial2_write>
					  return len; }
    9454:	4620      	mov	r0, r4
    9456:	bd38      	pop	{r3, r4, r5, pc}

00009458 <HardwareSerial2::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    9458:	b510      	push	{r4, lr}
    945a:	4608      	mov	r0, r1
    945c:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    945e:	4611      	mov	r1, r2
    9460:	f001 fba8 	bl	abb4 <serial2_write>
    9464:	4620      	mov	r0, r4
    9466:	bd10      	pop	{r4, pc}

00009468 <HardwareSerial2::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial2_add_memory_for_write(buffer, length);}
    9468:	4608      	mov	r0, r1
    946a:	4611      	mov	r1, r2
    946c:	f001 bdd0 	b.w	b010 <serial2_add_memory_for_write>

00009470 <HardwareSerial2::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial2_add_memory_for_read(buffer, length);}
    9470:	4608      	mov	r0, r1
    9472:	4611      	mov	r1, r2
    9474:	f001 bdb0 	b.w	afd8 <serial2_add_memory_for_read>

00009478 <HardwareSerial2::clear()>:
	virtual void clear(void)	{ serial2_clear(); }
    9478:	f001 bcc8 	b.w	ae0c <serial2_clear>

0000947c <HardwareSerial2::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
    947c:	b508      	push	{r3, lr}
    947e:	4608      	mov	r0, r1
    9480:	f001 fafc 	bl	aa7c <serial2_set_cts>
    9484:	3800      	subs	r0, #0
    9486:	bf18      	it	ne
    9488:	2001      	movne	r0, #1
    948a:	bd08      	pop	{r3, pc}

0000948c <HardwareSerial2::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
    948c:	b508      	push	{r3, lr}
    948e:	4608      	mov	r0, r1
    9490:	f001 fad2 	bl	aa38 <serial2_set_rts>
    9494:	3800      	subs	r0, #0
    9496:	bf18      	it	ne
    9498:	2001      	movne	r0, #1
    949a:	bd08      	pop	{r3, pc}

0000949c <HardwareSerial2::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
    949c:	4608      	mov	r0, r1
    949e:	4611      	mov	r1, r2
    94a0:	f001 ba5e 	b.w	a960 <serial2_set_tx>

000094a4 <HardwareSerial2::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
    94a4:	4608      	mov	r0, r1
    94a6:	f001 ba99 	b.w	a9dc <serial2_set_rx>
    94aa:	bf00      	nop

000094ac <HardwareSerial2::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
    94ac:	4608      	mov	r0, r1
    94ae:	f001 ba3b 	b.w	a928 <serial2_set_transmit_pin>
    94b2:	bf00      	nop

000094b4 <HardwareSerial2::end()>:
	virtual void end(void)		{ serial2_end(); }
    94b4:	f001 b9d0 	b.w	a858 <serial2_end>

000094b8 <HardwareSerial2::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    94b8:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV2(baud));
    94ba:	084b      	lsrs	r3, r1, #1
    94bc:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
	virtual void begin(uint32_t baud, uint32_t format) {
    94c0:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV2(baud));
    94c2:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
    94c6:	fbb3 f0f1 	udiv	r0, r3, r1
    94ca:	f001 f909 	bl	a6e0 <serial2_begin>
					  serial2_format(format); }
    94ce:	4620      	mov	r0, r4
    94d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    94d4:	f001 b972 	b.w	a7bc <serial2_format>

000094d8 <HardwareSerial2::peek()>:
	virtual int peek(void)          { return serial2_peek(); }
    94d8:	f001 bc72 	b.w	adc0 <serial2_peek>

000094dc <HardwareSerial2::read()>:
	virtual int read(void)          { return serial2_getchar(); }
    94dc:	f001 bc2a 	b.w	ad34 <serial2_getchar>

000094e0 <HardwareSerial2::available()>:
	virtual int available(void)     { return serial2_available(); }
    94e0:	f001 bc14 	b.w	ad0c <serial2_available>

000094e4 <HardwareSerial2::flush()>:
	virtual void flush(void)        { serial2_flush(); }
    94e4:	f001 bbee 	b.w	acc4 <serial2_flush>

000094e8 <HardwareSerial2::availableForWrite()>:
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
    94e8:	f001 bbf8 	b.w	acdc <serial2_write_buffer_free>

000094ec <HardwareSerial2::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    94ec:	6803      	ldr	r3, [r0, #0]
    94ee:	4a06      	ldr	r2, [pc, #24]	; (9508 <HardwareSerial2::write(int)+0x1c>)
    94f0:	681b      	ldr	r3, [r3, #0]
    94f2:	4293      	cmp	r3, r2
    94f4:	d105      	bne.n	9502 <HardwareSerial2::write(int)+0x16>
    94f6:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    94f8:	b2c8      	uxtb	r0, r1
    94fa:	f001 fadf 	bl	aabc <serial2_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    94fe:	2001      	movs	r0, #1
    9500:	bd10      	pop	{r4, pc}
    9502:	b2c9      	uxtb	r1, r1
    9504:	4718      	bx	r3
    9506:	bf00      	nop
    9508:	00009435 	.word	0x00009435

0000950c <HardwareSerial2::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    950c:	6803      	ldr	r3, [r0, #0]
    950e:	4a06      	ldr	r2, [pc, #24]	; (9528 <HardwareSerial2::write(unsigned long)+0x1c>)
    9510:	681b      	ldr	r3, [r3, #0]
    9512:	4293      	cmp	r3, r2
    9514:	d105      	bne.n	9522 <HardwareSerial2::write(unsigned long)+0x16>
    9516:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    9518:	b2c8      	uxtb	r0, r1
    951a:	f001 facf 	bl	aabc <serial2_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    951e:	2001      	movs	r0, #1
    9520:	bd10      	pop	{r4, pc}
    9522:	b2c9      	uxtb	r1, r1
    9524:	4718      	bx	r3
    9526:	bf00      	nop
    9528:	00009435 	.word	0x00009435

0000952c <HardwareSerial2::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    952c:	6803      	ldr	r3, [r0, #0]
    952e:	4a06      	ldr	r2, [pc, #24]	; (9548 <HardwareSerial2::write(long)+0x1c>)
    9530:	681b      	ldr	r3, [r3, #0]
    9532:	4293      	cmp	r3, r2
    9534:	d105      	bne.n	9542 <HardwareSerial2::write(long)+0x16>
    9536:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    9538:	b2c8      	uxtb	r0, r1
    953a:	f001 fabf 	bl	aabc <serial2_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    953e:	2001      	movs	r0, #1
    9540:	bd10      	pop	{r4, pc}
    9542:	b2c9      	uxtb	r1, r1
    9544:	4718      	bx	r3
    9546:	bf00      	nop
    9548:	00009435 	.word	0x00009435

0000954c <HardwareSerial2::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    954c:	6803      	ldr	r3, [r0, #0]
    954e:	4a06      	ldr	r2, [pc, #24]	; (9568 <HardwareSerial2::write(unsigned int)+0x1c>)
    9550:	681b      	ldr	r3, [r3, #0]
    9552:	4293      	cmp	r3, r2
    9554:	d105      	bne.n	9562 <HardwareSerial2::write(unsigned int)+0x16>
    9556:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    9558:	b2c8      	uxtb	r0, r1
    955a:	f001 faaf 	bl	aabc <serial2_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    955e:	2001      	movs	r0, #1
    9560:	bd10      	pop	{r4, pc}
    9562:	b2c9      	uxtb	r1, r1
    9564:	4718      	bx	r3
    9566:	bf00      	nop
    9568:	00009435 	.word	0x00009435

0000956c <HardwareSerial3::begin(unsigned long)>:
HardwareSerial3 Serial3(&serialEvent3);

uint8_t _serialEvent3_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial3::begin(uint32_t baud) { 
	serial3_begin(BAUD2DIV3(baud));
    956c:	084b      	lsrs	r3, r1, #1
    956e:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
    9572:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
void HardwareSerial3::begin(uint32_t baud) { 
    9576:	b510      	push	{r4, lr}
    9578:	4604      	mov	r4, r0
	serial3_begin(BAUD2DIV3(baud));
    957a:	fbb3 f0f1 	udiv	r0, r3, r1
    957e:	f001 fdcd 	bl	b11c <serial3_begin>
	if (!_serialEvent3_default) addToSerialEventsList();
    9582:	4b04      	ldr	r3, [pc, #16]	; (9594 <HardwareSerial3::begin(unsigned long)+0x28>)
    9584:	781b      	ldrb	r3, [r3, #0]
    9586:	b103      	cbz	r3, 958a <HardwareSerial3::begin(unsigned long)+0x1e>
}
    9588:	bd10      	pop	{r4, pc}
	if (!_serialEvent3_default) addToSerialEventsList();
    958a:	4620      	mov	r0, r4
}
    958c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent3_default) addToSerialEventsList();
    9590:	f002 bfbc 	b.w	c50c <HardwareSerial::addToSerialEventsList()>
    9594:	1fff89fa 	.word	0x1fff89fa

00009598 <HardwareSerial3::write9bit(unsigned long)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    9598:	b508      	push	{r3, lr}
    959a:	4608      	mov	r0, r1
    959c:	f001 ff1a 	bl	b3d4 <serial3_putchar>
    95a0:	2001      	movs	r0, #1
    95a2:	bd08      	pop	{r3, pc}

000095a4 <HardwareSerial3::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    95a4:	b508      	push	{r3, lr}
    95a6:	4608      	mov	r0, r1
    95a8:	f001 ff14 	bl	b3d4 <serial3_putchar>
    95ac:	2001      	movs	r0, #1
    95ae:	bd08      	pop	{r3, pc}

000095b0 <HardwareSerial3::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    95b0:	b538      	push	{r3, r4, r5, lr}
    95b2:	4608      	mov	r0, r1
    95b4:	460d      	mov	r5, r1
    95b6:	f004 fec3 	bl	e340 <strlen>
    95ba:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    95bc:	4601      	mov	r1, r0
    95be:	4628      	mov	r0, r5
    95c0:	f001 ff12 	bl	b3e8 <serial3_write>
					  return len; }
    95c4:	4620      	mov	r0, r4
    95c6:	bd38      	pop	{r3, r4, r5, pc}

000095c8 <HardwareSerial3::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    95c8:	b510      	push	{r4, lr}
    95ca:	4608      	mov	r0, r1
    95cc:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    95ce:	4611      	mov	r1, r2
    95d0:	f001 ff0a 	bl	b3e8 <serial3_write>
    95d4:	4620      	mov	r0, r4
    95d6:	bd10      	pop	{r4, pc}

000095d8 <HardwareSerial3::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial3_add_memory_for_write(buffer, length);}
    95d8:	4608      	mov	r0, r1
    95da:	4611      	mov	r1, r2
    95dc:	f002 b87e 	b.w	b6dc <serial3_add_memory_for_write>

000095e0 <HardwareSerial3::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial3_add_memory_for_read(buffer, length);}
    95e0:	4608      	mov	r0, r1
    95e2:	4611      	mov	r1, r2
    95e4:	f002 b85e 	b.w	b6a4 <serial3_add_memory_for_read>

000095e8 <HardwareSerial3::clear()>:
	virtual void clear(void)	{ serial3_clear(); }
    95e8:	f001 bfb6 	b.w	b558 <serial3_clear>

000095ec <HardwareSerial3::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
    95ec:	b508      	push	{r3, lr}
    95ee:	4608      	mov	r0, r1
    95f0:	f001 fed0 	bl	b394 <serial3_set_cts>
    95f4:	3800      	subs	r0, #0
    95f6:	bf18      	it	ne
    95f8:	2001      	movne	r0, #1
    95fa:	bd08      	pop	{r3, pc}

000095fc <HardwareSerial3::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
    95fc:	b508      	push	{r3, lr}
    95fe:	4608      	mov	r0, r1
    9600:	f001 fea6 	bl	b350 <serial3_set_rts>
    9604:	3800      	subs	r0, #0
    9606:	bf18      	it	ne
    9608:	2001      	movne	r0, #1
    960a:	bd08      	pop	{r3, pc}

0000960c <HardwareSerial3::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
    960c:	4608      	mov	r0, r1
    960e:	4611      	mov	r1, r2
    9610:	f001 be70 	b.w	b2f4 <serial3_set_tx>

00009614 <HardwareSerial3::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
    9614:	4608      	mov	r0, r1
    9616:	f001 be99 	b.w	b34c <serial3_set_rx>
    961a:	bf00      	nop

0000961c <HardwareSerial3::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
    961c:	4608      	mov	r0, r1
    961e:	f001 be4d 	b.w	b2bc <serial3_set_transmit_pin>
    9622:	bf00      	nop

00009624 <HardwareSerial3::end()>:
	virtual void end(void)          { serial3_end(); }
    9624:	f001 be14 	b.w	b250 <serial3_end>

00009628 <HardwareSerial3::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    9628:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    962a:	084b      	lsrs	r3, r1, #1
    962c:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
	virtual void begin(uint32_t baud, uint32_t format) {
    9630:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    9632:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    9636:	fbb3 f0f1 	udiv	r0, r3, r1
    963a:	f001 fd6f 	bl	b11c <serial3_begin>
					  serial3_format(format); }
    963e:	4620      	mov	r0, r4
    9640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9644:	f001 bdb6 	b.w	b1b4 <serial3_format>

00009648 <HardwareSerial3::peek()>:
	virtual int peek(void)          { return serial3_peek(); }
    9648:	f001 bf60 	b.w	b50c <serial3_peek>

0000964c <HardwareSerial3::read()>:
	virtual int read(void)          { return serial3_getchar(); }
    964c:	f001 bf18 	b.w	b480 <serial3_getchar>

00009650 <HardwareSerial3::available()>:
	virtual int available(void)     { return serial3_available(); }
    9650:	f001 bf02 	b.w	b458 <serial3_available>

00009654 <HardwareSerial3::flush()>:
	virtual void flush(void)        { serial3_flush(); }
    9654:	f001 bedc 	b.w	b410 <serial3_flush>

00009658 <HardwareSerial3::availableForWrite()>:
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
    9658:	f001 bee6 	b.w	b428 <serial3_write_buffer_free>

0000965c <HardwareSerial3::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    965c:	6803      	ldr	r3, [r0, #0]
    965e:	4a06      	ldr	r2, [pc, #24]	; (9678 <HardwareSerial3::write(int)+0x1c>)
    9660:	681b      	ldr	r3, [r3, #0]
    9662:	4293      	cmp	r3, r2
    9664:	d105      	bne.n	9672 <HardwareSerial3::write(int)+0x16>
    9666:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9668:	b2c8      	uxtb	r0, r1
    966a:	f001 feb3 	bl	b3d4 <serial3_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    966e:	2001      	movs	r0, #1
    9670:	bd10      	pop	{r4, pc}
    9672:	b2c9      	uxtb	r1, r1
    9674:	4718      	bx	r3
    9676:	bf00      	nop
    9678:	000095a5 	.word	0x000095a5

0000967c <HardwareSerial3::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    967c:	6803      	ldr	r3, [r0, #0]
    967e:	4a06      	ldr	r2, [pc, #24]	; (9698 <HardwareSerial3::write(unsigned long)+0x1c>)
    9680:	681b      	ldr	r3, [r3, #0]
    9682:	4293      	cmp	r3, r2
    9684:	d105      	bne.n	9692 <HardwareSerial3::write(unsigned long)+0x16>
    9686:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9688:	b2c8      	uxtb	r0, r1
    968a:	f001 fea3 	bl	b3d4 <serial3_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    968e:	2001      	movs	r0, #1
    9690:	bd10      	pop	{r4, pc}
    9692:	b2c9      	uxtb	r1, r1
    9694:	4718      	bx	r3
    9696:	bf00      	nop
    9698:	000095a5 	.word	0x000095a5

0000969c <HardwareSerial3::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    969c:	6803      	ldr	r3, [r0, #0]
    969e:	4a06      	ldr	r2, [pc, #24]	; (96b8 <HardwareSerial3::write(long)+0x1c>)
    96a0:	681b      	ldr	r3, [r3, #0]
    96a2:	4293      	cmp	r3, r2
    96a4:	d105      	bne.n	96b2 <HardwareSerial3::write(long)+0x16>
    96a6:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    96a8:	b2c8      	uxtb	r0, r1
    96aa:	f001 fe93 	bl	b3d4 <serial3_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    96ae:	2001      	movs	r0, #1
    96b0:	bd10      	pop	{r4, pc}
    96b2:	b2c9      	uxtb	r1, r1
    96b4:	4718      	bx	r3
    96b6:	bf00      	nop
    96b8:	000095a5 	.word	0x000095a5

000096bc <HardwareSerial3::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    96bc:	6803      	ldr	r3, [r0, #0]
    96be:	4a06      	ldr	r2, [pc, #24]	; (96d8 <HardwareSerial3::write(unsigned int)+0x1c>)
    96c0:	681b      	ldr	r3, [r3, #0]
    96c2:	4293      	cmp	r3, r2
    96c4:	d105      	bne.n	96d2 <HardwareSerial3::write(unsigned int)+0x16>
    96c6:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    96c8:	b2c8      	uxtb	r0, r1
    96ca:	f001 fe83 	bl	b3d4 <serial3_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    96ce:	2001      	movs	r0, #1
    96d0:	bd10      	pop	{r4, pc}
    96d2:	b2c9      	uxtb	r1, r1
    96d4:	4718      	bx	r3
    96d6:	bf00      	nop
    96d8:	000095a5 	.word	0x000095a5

000096dc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
        return write(p, sizeof(buf) - (p - buf));
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    96dc:	b570      	push	{r4, r5, r6, lr}
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    96de:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    96e0:	b08a      	sub	sp, #40	; 0x28
		base = 10;
    96e2:	bf08      	it	eq
    96e4:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    96e6:	b3a1      	cbz	r1, 9752 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    96e8:	f04f 0e21 	mov.w	lr, #33	; 0x21
    96ec:	e002      	b.n	96f4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    96ee:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
    96f2:	4629      	mov	r1, r5
			digit = n % base;
    96f4:	fbb1 f5f2 	udiv	r5, r1, r2
    96f8:	fb02 1415 	mls	r4, r2, r5, r1
    96fc:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9700:	2c09      	cmp	r4, #9
    9702:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    9706:	bf98      	it	ls
    9708:	fa5f fc84 	uxtbls.w	ip, r4
    970c:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    9710:	bf88      	it	hi
    9712:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
    9716:	446c      	add	r4, sp
    9718:	bf88      	it	hi
    971a:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
    971e:	4291      	cmp	r1, r2
			i--;
    9720:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9724:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    9728:	d2e1      	bcs.n	96ee <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    972a:	b14b      	cbz	r3, 9740 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
    972c:	f10e 3eff 	add.w	lr, lr, #4294967295
    9730:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    9734:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    9738:	446b      	add	r3, sp
    973a:	222d      	movs	r2, #45	; 0x2d
    973c:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    9740:	6803      	ldr	r3, [r0, #0]
    9742:	a901      	add	r1, sp, #4
    9744:	685b      	ldr	r3, [r3, #4]
    9746:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    974a:	4471      	add	r1, lr
    974c:	4798      	blx	r3
}
    974e:	b00a      	add	sp, #40	; 0x28
    9750:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    9752:	2230      	movs	r2, #48	; 0x30
    9754:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    9758:	f04f 0e21 	mov.w	lr, #33	; 0x21
    975c:	e7e5      	b.n	972a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
    975e:	bf00      	nop

00009760 <Print::print(long)>:
	if (n < 0) {
    9760:	2900      	cmp	r1, #0
		n = -n;
    9762:	bfba      	itte	lt
    9764:	4249      	neglt	r1, r1
		sign = '-';
    9766:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    9768:	2300      	movge	r3, #0
	if (base == 0) {
    976a:	220a      	movs	r2, #10
    976c:	f7ff bfb6 	b.w	96dc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00009770 <Print::println()>:
{
    9770:	b500      	push	{lr}
	return write(buf, 2);
    9772:	6803      	ldr	r3, [r0, #0]
{
    9774:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    9776:	f640 220d 	movw	r2, #2573	; 0xa0d
    977a:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    977e:	685b      	ldr	r3, [r3, #4]
    9780:	2202      	movs	r2, #2
    9782:	a901      	add	r1, sp, #4
    9784:	4798      	blx	r3
}
    9786:	b003      	add	sp, #12
    9788:	f85d fb04 	ldr.w	pc, [sp], #4

0000978c <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    978c:	4b03      	ldr	r3, [pc, #12]	; (979c <_write+0x10>)
    978e:	2802      	cmp	r0, #2
    9790:	bf88      	it	hi
    9792:	4603      	movhi	r3, r0
    9794:	4618      	mov	r0, r3
    9796:	681b      	ldr	r3, [r3, #0]
    9798:	685b      	ldr	r3, [r3, #4]
    979a:	4718      	bx	r3
    979c:	1fff89fc 	.word	0x1fff89fc

000097a0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    97a0:	b932      	cbnz	r2, 97b0 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    97a2:	6803      	ldr	r3, [r0, #0]
{
    97a4:	b500      	push	{lr}
		return write((uint8_t)n);
    97a6:	681b      	ldr	r3, [r3, #0]
}
    97a8:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    97ac:	b2c9      	uxtb	r1, r1
    97ae:	4718      	bx	r3
    97b0:	f7ff bf94 	b.w	96dc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    97b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

000097b8 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    97b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    97bc:	4619      	mov	r1, r3
{
    97be:	b087      	sub	sp, #28
    97c0:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    97c2:	4610      	mov	r0, r2
{
    97c4:	4614      	mov	r4, r2
    97c6:	469a      	mov	sl, r3
	if (isnan(number)) return print("nan");
    97c8:	f003 fabe 	bl	cd48 <__aeabi_dcmpun>
{
    97cc:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
	if (isnan(number)) return print("nan");
    97d0:	2800      	cmp	r0, #0
    97d2:	f040 80a9 	bne.w	9928 <Print::printFloat(double, unsigned char)+0x170>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    97d6:	f02a 4500 	bic.w	r5, sl, #2147483648	; 0x80000000
    	if (isinf(number)) return print("inf");
    97da:	4b5f      	ldr	r3, [pc, #380]	; (9958 <Print::printFloat(double, unsigned char)+0x1a0>)
    97dc:	4620      	mov	r0, r4
    97de:	4629      	mov	r1, r5
    97e0:	f04f 32ff 	mov.w	r2, #4294967295
    97e4:	f003 fab0 	bl	cd48 <__aeabi_dcmpun>
    97e8:	b948      	cbnz	r0, 97fe <Print::printFloat(double, unsigned char)+0x46>
    97ea:	4b5b      	ldr	r3, [pc, #364]	; (9958 <Print::printFloat(double, unsigned char)+0x1a0>)
    97ec:	4620      	mov	r0, r4
    97ee:	4629      	mov	r1, r5
    97f0:	f04f 32ff 	mov.w	r2, #4294967295
    97f4:	f003 fa8a 	bl	cd0c <__aeabi_dcmple>
    97f8:	2800      	cmp	r0, #0
    97fa:	f000 808e 	beq.w	991a <Print::printFloat(double, unsigned char)+0x162>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    97fe:	4b57      	ldr	r3, [pc, #348]	; (995c <Print::printFloat(double, unsigned char)+0x1a4>)
    9800:	4620      	mov	r0, r4
    9802:	4651      	mov	r1, sl
    9804:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    9808:	f003 fa94 	bl	cd34 <__aeabi_dcmpgt>
    980c:	2800      	cmp	r0, #0
    980e:	d17b      	bne.n	9908 <Print::printFloat(double, unsigned char)+0x150>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    9810:	4b53      	ldr	r3, [pc, #332]	; (9960 <Print::printFloat(double, unsigned char)+0x1a8>)
    9812:	4620      	mov	r0, r4
    9814:	4651      	mov	r1, sl
    9816:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    981a:	f003 fa6d 	bl	ccf8 <__aeabi_dcmplt>
    981e:	2800      	cmp	r0, #0
    9820:	d172      	bne.n	9908 <Print::printFloat(double, unsigned char)+0x150>
	
	// Handle negative numbers
	if (number < 0.0) {
    9822:	4620      	mov	r0, r4
    9824:	4651      	mov	r1, sl
    9826:	2200      	movs	r2, #0
    9828:	2300      	movs	r3, #0
    982a:	f003 fa65 	bl	ccf8 <__aeabi_dcmplt>
    982e:	4605      	mov	r5, r0
    9830:	2800      	cmp	r0, #0
    9832:	d175      	bne.n	9920 <Print::printFloat(double, unsigned char)+0x168>
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    9834:	2f00      	cmp	r7, #0
    9836:	d07a      	beq.n	992e <Print::printFloat(double, unsigned char)+0x176>
		rounding *= 0.1;
    9838:	f20f 1914 	addw	r9, pc, #276	; 0x114
    983c:	e9d9 8900 	ldrd	r8, r9, [r9]
	double rounding = 0.5;
    9840:	4948      	ldr	r1, [pc, #288]	; (9964 <Print::printFloat(double, unsigned char)+0x1ac>)
	for (uint8_t i=0; i<digits; ++i) {
    9842:	f04f 0b00 	mov.w	fp, #0
	double rounding = 0.5;
    9846:	2000      	movs	r0, #0
		rounding *= 0.1;
    9848:	464b      	mov	r3, r9
	for (uint8_t i=0; i<digits; ++i) {
    984a:	f10b 0b01 	add.w	fp, fp, #1
		rounding *= 0.1;
    984e:	4642      	mov	r2, r8
    9850:	f00a f822 	bl	13898 <__aeabi_dmul>
	for (uint8_t i=0; i<digits; ++i) {
    9854:	fa5f f38b 	uxtb.w	r3, fp
    9858:	42bb      	cmp	r3, r7
    985a:	d3f5      	bcc.n	9848 <Print::printFloat(double, unsigned char)+0x90>
	}
	number += rounding;
    985c:	4602      	mov	r2, r0
    985e:	460b      	mov	r3, r1
    9860:	4620      	mov	r0, r4
    9862:	4651      	mov	r1, sl
    9864:	f003 f832 	bl	c8cc <__adddf3>
    9868:	4689      	mov	r9, r1
    986a:	4680      	mov	r8, r0

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    986c:	f003 fa82 	bl	cd74 <__aeabi_d2uiz>
    9870:	2f0f      	cmp	r7, #15
    9872:	bf28      	it	cs
    9874:	270f      	movcs	r7, #15
    9876:	4682      	mov	sl, r0
	double remainder = number - (double)int_part;
    9878:	9701      	str	r7, [sp, #4]
    987a:	f003 f963 	bl	cb44 <__aeabi_ui2d>
    987e:	4602      	mov	r2, r0
    9880:	460b      	mov	r3, r1
    9882:	4640      	mov	r0, r8
    9884:	4649      	mov	r1, r9
    9886:	f003 f81f 	bl	c8c8 <__aeabi_dsub>
    988a:	462b      	mov	r3, r5
    988c:	4680      	mov	r8, r0
    988e:	4689      	mov	r9, r1
    9890:	220a      	movs	r2, #10
    9892:	4651      	mov	r1, sl
    9894:	4630      	mov	r0, r6
    9896:	f7ff ff21 	bl	96dc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    989a:	232e      	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    989c:	464d      	mov	r5, r9
		buf[0] = '.';
    989e:	f88d 3008 	strb.w	r3, [sp, #8]
    98a2:	f10d 0209 	add.w	r2, sp, #9

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    98a6:	1e7b      	subs	r3, r7, #1
			remainder *= 10.0;
    98a8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 9968 <Print::printFloat(double, unsigned char)+0x1b0>
	double remainder = number - (double)int_part;
    98ac:	4644      	mov	r4, r8
	if (base == 0) {
    98ae:	4683      	mov	fp, r0
		while (digits-- > 0) {
    98b0:	fa52 fa83 	uxtab	sl, r2, r3
    98b4:	af02      	add	r7, sp, #8
			remainder *= 10.0;
    98b6:	f04f 0800 	mov.w	r8, #0
    98ba:	4642      	mov	r2, r8
    98bc:	464b      	mov	r3, r9
    98be:	4620      	mov	r0, r4
    98c0:	4629      	mov	r1, r5
    98c2:	f009 ffe9 	bl	13898 <__aeabi_dmul>
    98c6:	460d      	mov	r5, r1
    98c8:	4604      	mov	r4, r0
			n = (uint8_t)(remainder);
    98ca:	f003 fa53 	bl	cd74 <__aeabi_d2uiz>
    98ce:	b2c0      	uxtb	r0, r0
			buf[count++] = '0' + n;
    98d0:	f100 0330 	add.w	r3, r0, #48	; 0x30
    98d4:	f807 3f01 	strb.w	r3, [r7, #1]!
			remainder -= n; 
    98d8:	f003 f944 	bl	cb64 <__aeabi_i2d>
    98dc:	4602      	mov	r2, r0
    98de:	460b      	mov	r3, r1
    98e0:	4620      	mov	r0, r4
    98e2:	4629      	mov	r1, r5
    98e4:	f002 fff0 	bl	c8c8 <__aeabi_dsub>
		while (digits-- > 0) {
    98e8:	45ba      	cmp	sl, r7
			remainder -= n; 
    98ea:	4604      	mov	r4, r0
    98ec:	460d      	mov	r5, r1
		while (digits-- > 0) {
    98ee:	d1e4      	bne.n	98ba <Print::printFloat(double, unsigned char)+0x102>
			buf[count++] = '0' + n;
    98f0:	9a01      	ldr	r2, [sp, #4]
		}
		count += write(buf, count);
    98f2:	6833      	ldr	r3, [r6, #0]
			buf[count++] = '0' + n;
    98f4:	3201      	adds	r2, #1
		count += write(buf, count);
    98f6:	685b      	ldr	r3, [r3, #4]
    98f8:	b2d2      	uxtb	r2, r2
    98fa:	a902      	add	r1, sp, #8
    98fc:	4630      	mov	r0, r6
    98fe:	4798      	blx	r3
	}
	return count;
}
    9900:	4658      	mov	r0, fp
    9902:	b007      	add	sp, #28
    9904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    9908:	6833      	ldr	r3, [r6, #0]
    990a:	4918      	ldr	r1, [pc, #96]	; (996c <Print::printFloat(double, unsigned char)+0x1b4>)
    990c:	685b      	ldr	r3, [r3, #4]
    990e:	2203      	movs	r2, #3
    9910:	4630      	mov	r0, r6
    9912:	b007      	add	sp, #28
    9914:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9918:	4718      	bx	r3
    991a:	6833      	ldr	r3, [r6, #0]
    991c:	4914      	ldr	r1, [pc, #80]	; (9970 <Print::printFloat(double, unsigned char)+0x1b8>)
    991e:	e7f5      	b.n	990c <Print::printFloat(double, unsigned char)+0x154>
		number = -number;
    9920:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
		sign = 1;
    9924:	2501      	movs	r5, #1
    9926:	e785      	b.n	9834 <Print::printFloat(double, unsigned char)+0x7c>
    9928:	6833      	ldr	r3, [r6, #0]
    992a:	4912      	ldr	r1, [pc, #72]	; (9974 <Print::printFloat(double, unsigned char)+0x1bc>)
    992c:	e7ee      	b.n	990c <Print::printFloat(double, unsigned char)+0x154>
	number += rounding;
    992e:	4b0d      	ldr	r3, [pc, #52]	; (9964 <Print::printFloat(double, unsigned char)+0x1ac>)
    9930:	2200      	movs	r2, #0
    9932:	4620      	mov	r0, r4
    9934:	4651      	mov	r1, sl
    9936:	f002 ffc9 	bl	c8cc <__adddf3>
	unsigned long int_part = (unsigned long)number;
    993a:	f003 fa1b 	bl	cd74 <__aeabi_d2uiz>
    993e:	462b      	mov	r3, r5
    9940:	4601      	mov	r1, r0
    9942:	220a      	movs	r2, #10
    9944:	4630      	mov	r0, r6
}
    9946:	b007      	add	sp, #28
    9948:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    994c:	f7ff bec6 	b.w	96dc <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    9950:	a0000000 	.word	0xa0000000
    9954:	3fb99999 	.word	0x3fb99999
    9958:	7fefffff 	.word	0x7fefffff
    995c:	41efffff 	.word	0x41efffff
    9960:	c1efffff 	.word	0xc1efffff
    9964:	3fe00000 	.word	0x3fe00000
    9968:	40240000 	.word	0x40240000
    996c:	00015548 	.word	0x00015548
    9970:	00015544 	.word	0x00015544
    9974:	00015540 	.word	0x00015540

00009978 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    9978:	b570      	push	{r4, r5, r6, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    997a:	4d0e      	ldr	r5, [pc, #56]	; (99b4 <Stream::timedPeek()+0x3c>)
    997c:	b082      	sub	sp, #8
    997e:	682b      	ldr	r3, [r5, #0]
    9980:	9300      	str	r3, [sp, #0]
	return ret;
    9982:	9e00      	ldr	r6, [sp, #0]
    9984:	4604      	mov	r4, r0
    9986:	e008      	b.n	999a <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    9988:	f002 fd48 	bl	c41c <yield>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    998c:	682b      	ldr	r3, [r5, #0]
    998e:	9301      	str	r3, [sp, #4]
	return ret;
    9990:	9b01      	ldr	r3, [sp, #4]
  } while(millis() - startMillis < _timeout);
    9992:	68a2      	ldr	r2, [r4, #8]
    9994:	1b9b      	subs	r3, r3, r6
    9996:	4293      	cmp	r3, r2
    9998:	d207      	bcs.n	99aa <Stream::timedPeek()+0x32>
    c = peek();
    999a:	6823      	ldr	r3, [r4, #0]
    999c:	4620      	mov	r0, r4
    999e:	699b      	ldr	r3, [r3, #24]
    99a0:	4798      	blx	r3
    if (c >= 0) return c;
    99a2:	2800      	cmp	r0, #0
    99a4:	dbf0      	blt.n	9988 <Stream::timedPeek()+0x10>
  return -1;     // -1 indicates timeout
}
    99a6:	b002      	add	sp, #8
    99a8:	bd70      	pop	{r4, r5, r6, pc}
  return -1;     // -1 indicates timeout
    99aa:	f04f 30ff 	mov.w	r0, #4294967295
}
    99ae:	b002      	add	sp, #8
    99b0:	bd70      	pop	{r4, r5, r6, pc}
    99b2:	bf00      	nop
    99b4:	1fffd3c0 	.word	0x1fffd3c0

000099b8 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    99b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99ba:	4604      	mov	r4, r0
    99bc:	460d      	mov	r5, r1
int Stream::peekNextDigit()
    99be:	e006      	b.n	99ce <Stream::parseInt(char)+0x16>
    if (c == '-') return c;
    99c0:	2b2d      	cmp	r3, #45	; 0x2d
    99c2:	d00f      	beq.n	99e4 <Stream::parseInt(char)+0x2c>
    if (c >= '0' && c <= '9') return c;
    99c4:	2a09      	cmp	r2, #9
    99c6:	d90d      	bls.n	99e4 <Stream::parseInt(char)+0x2c>
    read();  // discard non-numeric
    99c8:	6823      	ldr	r3, [r4, #0]
    99ca:	695b      	ldr	r3, [r3, #20]
    99cc:	4798      	blx	r3
    c = timedPeek();
    99ce:	4620      	mov	r0, r4
    99d0:	f7ff ffd2 	bl	9978 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    99d4:	1e03      	subs	r3, r0, #0
    if (c >= '0' && c <= '9') return c;
    99d6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    99da:	4620      	mov	r0, r4
    if (c < 0) return c;  // timeout
    99dc:	daf0      	bge.n	99c0 <Stream::parseInt(char)+0x8>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    99de:	2700      	movs	r7, #0
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    99e0:	4638      	mov	r0, r7
    99e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(c == skipChar)
    99e4:	2700      	movs	r7, #0
    99e6:	463e      	mov	r6, r7
    99e8:	42ab      	cmp	r3, r5
    99ea:	d00b      	beq.n	9a04 <Stream::parseInt(char)+0x4c>
    else if(c == '-')
    99ec:	2b2d      	cmp	r3, #45	; 0x2d
    99ee:	d01c      	beq.n	9a2a <Stream::parseInt(char)+0x72>
    else if(c >= '0' && c <= '9')        // is c a digit?
    99f0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    99f4:	2a09      	cmp	r2, #9
    99f6:	d805      	bhi.n	9a04 <Stream::parseInt(char)+0x4c>
      value = value * 10 + c - '0';
    99f8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    99fc:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    9a00:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
    read();  // consume the character we got with peek
    9a04:	6823      	ldr	r3, [r4, #0]
    9a06:	4620      	mov	r0, r4
    9a08:	695b      	ldr	r3, [r3, #20]
    9a0a:	4798      	blx	r3
    c = timedPeek();
    9a0c:	4620      	mov	r0, r4
    9a0e:	f7ff ffb3 	bl	9978 <Stream::timedPeek()>
  while( (c >= '0' && c <= '9') || c == skipChar );
    9a12:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    9a16:	2a09      	cmp	r2, #9
    c = timedPeek();
    9a18:	4603      	mov	r3, r0
  while( (c >= '0' && c <= '9') || c == skipChar );
    9a1a:	d9e5      	bls.n	99e8 <Stream::parseInt(char)+0x30>
    9a1c:	42a8      	cmp	r0, r5
    9a1e:	d0f1      	beq.n	9a04 <Stream::parseInt(char)+0x4c>
  if(isNegative)
    9a20:	2e00      	cmp	r6, #0
    9a22:	d0dd      	beq.n	99e0 <Stream::parseInt(char)+0x28>
    value = -value;
    9a24:	427f      	negs	r7, r7
}
    9a26:	4638      	mov	r0, r7
    9a28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      isNegative = true;
    9a2a:	2601      	movs	r6, #1
    9a2c:	e7ea      	b.n	9a04 <Stream::parseInt(char)+0x4c>
    9a2e:	bf00      	nop

00009a30 <Stream::parseInt()>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    9a30:	2101      	movs	r1, #1
    9a32:	f7ff bfc1 	b.w	99b8 <Stream::parseInt(char)>
    9a36:	bf00      	nop

00009a38 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    9a38:	4b2a      	ldr	r3, [pc, #168]	; (9ae4 <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    9a3a:	4a2b      	ldr	r2, [pc, #172]	; (9ae8 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    9a3c:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    9a3e:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    9a40:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    9a42:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    9a44:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    9a46:	4829      	ldr	r0, [pc, #164]	; (9aec <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    9a48:	2b08      	cmp	r3, #8
    9a4a:	d034      	beq.n	9ab6 <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    9a4c:	2b0a      	cmp	r3, #10
    9a4e:	d020      	beq.n	9a92 <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    9a50:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    9a52:	4b27      	ldr	r3, [pc, #156]	; (9af0 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    9a54:	bf0c      	ite	eq
    9a56:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    9a58:	213d      	movne	r1, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    9a5a:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    9a5c:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    9a5e:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    9a60:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    9a62:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    9a64:	4b23      	ldr	r3, [pc, #140]	; (9af4 <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    9a66:	4921      	ldr	r1, [pc, #132]	; (9aec <analog_init+0xb4>)
	if (analog_reference_internal) {
    9a68:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    9a6a:	4a21      	ldr	r2, [pc, #132]	; (9af0 <analog_init+0xb8>)
	if (analog_reference_internal) {
    9a6c:	b1cb      	cbz	r3, 9aa2 <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    9a6e:	2301      	movs	r3, #1
    9a70:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    9a72:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    9a74:	4b20      	ldr	r3, [pc, #128]	; (9af8 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    9a76:	491d      	ldr	r1, [pc, #116]	; (9aec <analog_init+0xb4>)
	num = analog_num_average;
    9a78:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    9a7a:	4a1d      	ldr	r2, [pc, #116]	; (9af0 <analog_init+0xb8>)
	if (num <= 1) {
    9a7c:	2b01      	cmp	r3, #1
    9a7e:	d913      	bls.n	9aa8 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    9a80:	2b04      	cmp	r3, #4
    9a82:	d81b      	bhi.n	9abc <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    9a84:	2384      	movs	r3, #132	; 0x84
    9a86:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    9a88:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    9a8a:	4b1c      	ldr	r3, [pc, #112]	; (9afc <analog_init+0xc4>)
    9a8c:	2201      	movs	r2, #1
    9a8e:	701a      	strb	r2, [r3, #0]
}
    9a90:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9a92:	4b17      	ldr	r3, [pc, #92]	; (9af0 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9a94:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    9a96:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9a98:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    9a9a:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9a9c:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    9a9e:	60da      	str	r2, [r3, #12]
    9aa0:	e7e0      	b.n	9a64 <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    9aa2:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    9aa4:	6213      	str	r3, [r2, #32]
    9aa6:	e7e5      	b.n	9a74 <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    9aa8:	2380      	movs	r3, #128	; 0x80
    9aaa:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    9aac:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    9aae:	4b13      	ldr	r3, [pc, #76]	; (9afc <analog_init+0xc4>)
    9ab0:	2201      	movs	r2, #1
    9ab2:	701a      	strb	r2, [r3, #0]
}
    9ab4:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    9ab6:	4b0e      	ldr	r3, [pc, #56]	; (9af0 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    9ab8:	2101      	movs	r1, #1
    9aba:	e7ec      	b.n	9a96 <analog_init+0x5e>
	} else if (num <= 8) {
    9abc:	2b08      	cmp	r3, #8
    9abe:	d806      	bhi.n	9ace <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    9ac0:	2385      	movs	r3, #133	; 0x85
    9ac2:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    9ac4:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    9ac6:	4b0d      	ldr	r3, [pc, #52]	; (9afc <analog_init+0xc4>)
    9ac8:	2201      	movs	r2, #1
    9aca:	701a      	strb	r2, [r3, #0]
}
    9acc:	4770      	bx	lr
	} else if (num <= 16) {
    9ace:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    9ad0:	bf94      	ite	ls
    9ad2:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    9ad4:	2387      	movhi	r3, #135	; 0x87
    9ad6:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    9ad8:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    9ada:	4b08      	ldr	r3, [pc, #32]	; (9afc <analog_init+0xc4>)
    9adc:	2201      	movs	r2, #1
    9ade:	701a      	strb	r2, [r3, #0]
}
    9ae0:	4770      	bx	lr
    9ae2:	bf00      	nop
    9ae4:	40074000 	.word	0x40074000
    9ae8:	1fff88e4 	.word	0x1fff88e4
    9aec:	4003b000 	.word	0x4003b000
    9af0:	400bb000 	.word	0x400bb000
    9af4:	1fffd3bc 	.word	0x1fffd3bc
    9af8:	1fff88e5 	.word	0x1fff88e5
    9afc:	1fffd3bd 	.word	0x1fffd3bd

00009b00 <analogWriteDAC0>:
typedef int16_t __attribute__((__may_alias__)) aliased_int16_t;

void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    9b00:	4a0b      	ldr	r2, [pc, #44]	; (9b30 <analogWriteDAC0+0x30>)
	if (analog_reference_internal) {
    9b02:	490c      	ldr	r1, [pc, #48]	; (9b34 <analogWriteDAC0+0x34>)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    9b04:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    9b06:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    9b0a:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (analog_reference_internal) {
    9b0c:	780b      	ldrb	r3, [r1, #0]
    9b0e:	b14b      	cbz	r3, 9b24 <analogWriteDAC0+0x24>
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
    9b10:	4b09      	ldr	r3, [pc, #36]	; (9b38 <analogWriteDAC0+0x38>)
    9b12:	2280      	movs	r2, #128	; 0x80
    9b14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    9b18:	4b07      	ldr	r3, [pc, #28]	; (9b38 <analogWriteDAC0+0x38>)
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095
    9b1a:	f380 000c 	usat	r0, #12, r0
	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    9b1e:	b200      	sxth	r0, r0
    9b20:	8018      	strh	r0, [r3, #0]
	if (val < 0) val = 0;
	else if (val > 4095) val = 4095;

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
#endif
}
    9b22:	4770      	bx	lr
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
    9b24:	4b04      	ldr	r3, [pc, #16]	; (9b38 <analogWriteDAC0+0x38>)
    9b26:	22c0      	movs	r2, #192	; 0xc0
    9b28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    9b2c:	e7f4      	b.n	9b18 <analogWriteDAC0+0x18>
    9b2e:	bf00      	nop
    9b30:	40048000 	.word	0x40048000
    9b34:	1fffd3bc 	.word	0x1fffd3bc
    9b38:	400cc000 	.word	0x400cc000

00009b3c <eeprom_initialize>:
//
#define HANDLE_UNALIGNED_WRITES


void eeprom_initialize(void)
{
    9b3c:	b510      	push	{r4, lr}
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    9b3e:	4b17      	ldr	r3, [pc, #92]	; (9b9c <eeprom_initialize+0x60>)
    9b40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
    9b42:	b084      	sub	sp, #16
	uint16_t do_flash_cmd[] = {
    9b44:	46ec      	mov	ip, sp
    9b46:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    9b4a:	4b15      	ldr	r3, [pc, #84]	; (9ba0 <eeprom_initialize+0x64>)
    9b4c:	785a      	ldrb	r2, [r3, #1]
    9b4e:	0791      	lsls	r1, r2, #30
    9b50:	d517      	bpl.n	9b82 <eeprom_initialize+0x46>
		uint8_t stat = FTFL_FSTAT & 0x70;
    9b52:	781a      	ldrb	r2, [r3, #0]
		if (stat) FTFL_FSTAT = stat;
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    9b54:	4c12      	ldr	r4, [pc, #72]	; (9ba0 <eeprom_initialize+0x64>)
		if (stat) FTFL_FSTAT = stat;
    9b56:	f012 0270 	ands.w	r2, r2, #112	; 0x70
    9b5a:	bf18      	it	ne
    9b5c:	701a      	strbne	r2, [r3, #0]
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    9b5e:	2180      	movs	r1, #128	; 0x80
		FTFL_FCCOB3 = 0;
    9b60:	2300      	movs	r3, #0
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    9b62:	71e1      	strb	r1, [r4, #7]
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    9b64:	2233      	movs	r2, #51	; 0x33
		FTFL_FCCOB3 = 0;
    9b66:	7123      	strb	r3, [r4, #4]
		FTFL_FCCOB5 = EEPARTITION;
    9b68:	2303      	movs	r3, #3
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    9b6a:	72e2      	strb	r2, [r4, #11]
		FTFL_FCCOB5 = EEPARTITION;
    9b6c:	72a3      	strb	r3, [r4, #10]
		__disable_irq();
    9b6e:	b672      	cpsid	i
		// do_flash_cmd() must execute from RAM.  Luckily the C syntax is simple...
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
    9b70:	f04c 0301 	orr.w	r3, ip, #1
    9b74:	4620      	mov	r0, r4
    9b76:	4798      	blx	r3
		__enable_irq();
    9b78:	b662      	cpsie	i
		kinetis_hsrun_enable();
		status = FTFL_FSTAT;
    9b7a:	7823      	ldrb	r3, [r4, #0]
		if (status & 0x70) {
    9b7c:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    9b80:	d109      	bne.n	9b96 <eeprom_initialize+0x5a>
{
    9b82:	4b08      	ldr	r3, [pc, #32]	; (9ba4 <eeprom_initialize+0x68>)
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9b84:	4906      	ldr	r1, [pc, #24]	; (9ba0 <eeprom_initialize+0x64>)
    9b86:	e001      	b.n	9b8c <eeprom_initialize+0x50>
		if (++count > 200000) break;
    9b88:	3b01      	subs	r3, #1
    9b8a:	d002      	beq.n	9b92 <eeprom_initialize+0x56>
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9b8c:	784a      	ldrb	r2, [r1, #1]
    9b8e:	07d2      	lsls	r2, r2, #31
    9b90:	d5fa      	bpl.n	9b88 <eeprom_initialize+0x4c>
	}
}
    9b92:	b004      	add	sp, #16
    9b94:	bd10      	pop	{r4, pc}
			FTFL_FSTAT = (status & 0x70);
    9b96:	7023      	strb	r3, [r4, #0]
}
    9b98:	b004      	add	sp, #16
    9b9a:	bd10      	pop	{r4, pc}
    9b9c:	0001554c 	.word	0x0001554c
    9ba0:	40020000 	.word	0x40020000
    9ba4:	00030d41 	.word	0x00030d41

00009ba8 <eeprom_read_byte>:
#define FlexRAM ((volatile uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    9ba8:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    9bac:	d211      	bcs.n	9bd2 <eeprom_read_byte+0x2a>
{
    9bae:	b510      	push	{r4, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9bb0:	4b09      	ldr	r3, [pc, #36]	; (9bd8 <eeprom_read_byte+0x30>)
    9bb2:	785b      	ldrb	r3, [r3, #1]
    9bb4:	07db      	lsls	r3, r3, #31
    9bb6:	4604      	mov	r4, r0
    9bb8:	d504      	bpl.n	9bc4 <eeprom_read_byte+0x1c>
	return FlexRAM[offset];
    9bba:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    9bbe:	7820      	ldrb	r0, [r4, #0]
    9bc0:	b2c0      	uxtb	r0, r0
}
    9bc2:	bd10      	pop	{r4, pc}
	return FlexRAM[offset];
    9bc4:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9bc8:	f7ff ffb8 	bl	9b3c <eeprom_initialize>
	return FlexRAM[offset];
    9bcc:	7820      	ldrb	r0, [r4, #0]
    9bce:	b2c0      	uxtb	r0, r0
}
    9bd0:	bd10      	pop	{r4, pc}
	if (offset >= EEPROM_SIZE) return 0;
    9bd2:	2000      	movs	r0, #0
}
    9bd4:	4770      	bx	lr
    9bd6:	bf00      	nop
    9bd8:	40020000 	.word	0x40020000

00009bdc <eeprom_write_byte>:

void eeprom_write_byte(uint8_t *addr, uint8_t value)
{
	uint32_t offset = (uint32_t)addr;

	if (offset >= EEPROM_SIZE) return;
    9bdc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    9be0:	d21f      	bcs.n	9c22 <eeprom_write_byte+0x46>
{
    9be2:	b538      	push	{r3, r4, r5, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9be4:	4b0f      	ldr	r3, [pc, #60]	; (9c24 <eeprom_write_byte+0x48>)
    9be6:	785b      	ldrb	r3, [r3, #1]
    9be8:	07da      	lsls	r2, r3, #31
    9bea:	4604      	mov	r4, r0
    9bec:	460d      	mov	r5, r1
    9bee:	d510      	bpl.n	9c12 <eeprom_write_byte+0x36>
	if (FlexRAM[offset] != value) {
    9bf0:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    9bf4:	7823      	ldrb	r3, [r4, #0]
    9bf6:	42ab      	cmp	r3, r5
    9bf8:	d00a      	beq.n	9c10 <eeprom_write_byte+0x34>
		kinetis_hsrun_disable();
		uint8_t stat = FTFL_FSTAT & 0x70;
    9bfa:	4a0a      	ldr	r2, [pc, #40]	; (9c24 <eeprom_write_byte+0x48>)
    9bfc:	7813      	ldrb	r3, [r2, #0]
		if (stat) FTFL_FSTAT = stat;
    9bfe:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    9c02:	bf18      	it	ne
    9c04:	7013      	strbne	r3, [r2, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9c06:	4a07      	ldr	r2, [pc, #28]	; (9c24 <eeprom_write_byte+0x48>)
		FlexRAM[offset] = value;
    9c08:	7025      	strb	r5, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9c0a:	7853      	ldrb	r3, [r2, #1]
    9c0c:	07db      	lsls	r3, r3, #31
    9c0e:	d5fc      	bpl.n	9c0a <eeprom_write_byte+0x2e>
		flexram_wait();
		kinetis_hsrun_enable();
	}
}
    9c10:	bd38      	pop	{r3, r4, r5, pc}
	if (FlexRAM[offset] != value) {
    9c12:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9c16:	f7ff ff91 	bl	9b3c <eeprom_initialize>
	if (FlexRAM[offset] != value) {
    9c1a:	7823      	ldrb	r3, [r4, #0]
    9c1c:	42ab      	cmp	r3, r5
    9c1e:	d1ec      	bne.n	9bfa <eeprom_write_byte+0x1e>
    9c20:	e7f6      	b.n	9c10 <eeprom_write_byte+0x34>
    9c22:	4770      	bx	lr
    9c24:	40020000 	.word	0x40020000

00009c28 <eeprom_write_block>:
void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint32_t offset = (uint32_t)addr;
	const uint8_t *src = (const uint8_t *)buf;

	if (offset >= EEPROM_SIZE) return;
    9c28:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    9c2c:	d276      	bcs.n	9d1c <eeprom_write_block+0xf4>
{
    9c2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9c30:	4b3b      	ldr	r3, [pc, #236]	; (9d20 <eeprom_write_block+0xf8>)
    9c32:	785b      	ldrb	r3, [r3, #1]
    9c34:	07db      	lsls	r3, r3, #31
    9c36:	460e      	mov	r6, r1
    9c38:	4604      	mov	r4, r0
    9c3a:	4617      	mov	r7, r2
    9c3c:	460d      	mov	r5, r1
    9c3e:	d51f      	bpl.n	9c80 <eeprom_write_block+0x58>
	if (len >= EEPROM_SIZE) len = EEPROM_SIZE;
    9c40:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
    9c44:	4638      	mov	r0, r7
    9c46:	bf28      	it	cs
    9c48:	f44f 6000 	movcs.w	r0, #2048	; 0x800
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    9c4c:	1833      	adds	r3, r6, r0
    9c4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    9c52:	d212      	bcs.n	9c7a <eeprom_write_block+0x52>
	while (len > 0) {
    9c54:	b187      	cbz	r7, 9c78 <eeprom_write_block+0x50>
		} else {
			// write 8 bits
			uint8_t val8 = *src++;
			if (FlexRAM[offset] != val8) {
				kinetis_hsrun_disable();
				uint8_t stat = FTFL_FSTAT & 0x70;
    9c56:	4a32      	ldr	r2, [pc, #200]	; (9d20 <eeprom_write_block+0xf8>)
		if (lsb == 0 && len >= 4) {
    9c58:	f015 0303 	ands.w	r3, r5, #3
    9c5c:	d026      	beq.n	9cac <eeprom_write_block+0x84>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    9c5e:	2b02      	cmp	r3, #2
    9c60:	d011      	beq.n	9c86 <eeprom_write_block+0x5e>
			if (FlexRAM[offset] != val8) {
    9c62:	f105 53a0 	add.w	r3, r5, #335544320	; 0x14000000
			uint8_t val8 = *src++;
    9c66:	f814 1b01 	ldrb.w	r1, [r4], #1
			if (FlexRAM[offset] != val8) {
    9c6a:	781e      	ldrb	r6, [r3, #0]
    9c6c:	428e      	cmp	r6, r1
    9c6e:	d137      	bne.n	9ce0 <eeprom_write_block+0xb8>
				FlexRAM[offset] = val8;
				flexram_wait();
				kinetis_hsrun_enable();
			}
			offset++;
			len--;
    9c70:	3801      	subs	r0, #1
			offset++;
    9c72:	3501      	adds	r5, #1
	while (len > 0) {
    9c74:	2800      	cmp	r0, #0
    9c76:	d1ef      	bne.n	9c58 <eeprom_write_block+0x30>
		}
	}
}
    9c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    9c7a:	f5c6 6000 	rsb	r0, r6, #2048	; 0x800
	while (len > 0) {
    9c7e:	e7ea      	b.n	9c56 <eeprom_write_block+0x2e>
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9c80:	f7ff ff5c 	bl	9b3c <eeprom_initialize>
    9c84:	e7dc      	b.n	9c40 <eeprom_write_block+0x18>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    9c86:	2801      	cmp	r0, #1
    9c88:	d0eb      	beq.n	9c62 <eeprom_write_block+0x3a>
			val16 |= (*src++ << 8);
    9c8a:	4621      	mov	r1, r4
			if (*(uint16_t *)(&FlexRAM[offset]) != val16) {
    9c8c:	f105 56a0 	add.w	r6, r5, #335544320	; 0x14000000
    9c90:	7867      	ldrb	r7, [r4, #1]
    9c92:	f811 3b02 	ldrb.w	r3, [r1], #2
    9c96:	8834      	ldrh	r4, [r6, #0]
    9c98:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    9c9c:	429c      	cmp	r4, r3
    9c9e:	d129      	bne.n	9cf4 <eeprom_write_block+0xcc>
			len -= 2;
    9ca0:	3802      	subs	r0, #2
			offset += 2;
    9ca2:	3502      	adds	r5, #2
			val16 |= (*src++ << 8);
    9ca4:	460c      	mov	r4, r1
	while (len > 0) {
    9ca6:	2800      	cmp	r0, #0
    9ca8:	d1d6      	bne.n	9c58 <eeprom_write_block+0x30>
    9caa:	e7e5      	b.n	9c78 <eeprom_write_block+0x50>
		if (lsb == 0 && len >= 4) {
    9cac:	2803      	cmp	r0, #3
    9cae:	d9ea      	bls.n	9c86 <eeprom_write_block+0x5e>
			val32 |= (*src++ << 24);
    9cb0:	4621      	mov	r1, r4
    9cb2:	f894 c001 	ldrb.w	ip, [r4, #1]
    9cb6:	f811 3b04 	ldrb.w	r3, [r1], #4
    9cba:	78a7      	ldrb	r7, [r4, #2]
    9cbc:	78e6      	ldrb	r6, [r4, #3]
    9cbe:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    9cc2:	f105 54a0 	add.w	r4, r5, #335544320	; 0x14000000
			val32 |= (*src++ << 24);
    9cc6:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    9cca:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    9cce:	6826      	ldr	r6, [r4, #0]
    9cd0:	429e      	cmp	r6, r3
    9cd2:	d119      	bne.n	9d08 <eeprom_write_block+0xe0>
			len -= 4;
    9cd4:	3804      	subs	r0, #4
			offset += 4;
    9cd6:	3504      	adds	r5, #4
			val32 |= (*src++ << 24);
    9cd8:	460c      	mov	r4, r1
	while (len > 0) {
    9cda:	2800      	cmp	r0, #0
    9cdc:	d1bc      	bne.n	9c58 <eeprom_write_block+0x30>
    9cde:	e7cb      	b.n	9c78 <eeprom_write_block+0x50>
				uint8_t stat = FTFL_FSTAT & 0x70;
    9ce0:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    9ce2:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    9ce6:	bf18      	it	ne
    9ce8:	7016      	strbne	r6, [r2, #0]
				FlexRAM[offset] = val8;
    9cea:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9cec:	7853      	ldrb	r3, [r2, #1]
    9cee:	07db      	lsls	r3, r3, #31
    9cf0:	d5fc      	bpl.n	9cec <eeprom_write_block+0xc4>
    9cf2:	e7bd      	b.n	9c70 <eeprom_write_block+0x48>
				uint8_t stat = FTFL_FSTAT & 0x70;
    9cf4:	7814      	ldrb	r4, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    9cf6:	f014 0470 	ands.w	r4, r4, #112	; 0x70
    9cfa:	bf18      	it	ne
    9cfc:	7014      	strbne	r4, [r2, #0]
				*(uint16_t *)(&FlexRAM[offset]) = val16;
    9cfe:	8033      	strh	r3, [r6, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9d00:	7853      	ldrb	r3, [r2, #1]
    9d02:	07dc      	lsls	r4, r3, #31
    9d04:	d5fc      	bpl.n	9d00 <eeprom_write_block+0xd8>
    9d06:	e7cb      	b.n	9ca0 <eeprom_write_block+0x78>
				uint8_t stat = FTFL_FSTAT & 0x70;
    9d08:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    9d0a:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    9d0e:	bf18      	it	ne
    9d10:	7016      	strbne	r6, [r2, #0]
				*(uint32_t *)(&FlexRAM[offset]) = val32;
    9d12:	6023      	str	r3, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9d14:	7853      	ldrb	r3, [r2, #1]
    9d16:	07de      	lsls	r6, r3, #31
    9d18:	d5fc      	bpl.n	9d14 <eeprom_write_block+0xec>
    9d1a:	e7db      	b.n	9cd4 <eeprom_write_block+0xac>
    9d1c:	4770      	bx	lr
    9d1e:	bf00      	nop
    9d20:	40020000 	.word	0x40020000

00009d24 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    9d24:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    9d26:	f7fd fea5 	bl	7a74 <setup>
	while (1) {
		loop();
    9d2a:	f7fc ffd5 	bl	6cd8 <loop>
		yield();
    9d2e:	f002 fb75 	bl	c41c <yield>
	while (1) {
    9d32:	e7fa      	b.n	9d2a <main+0x6>

00009d34 <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    9d34:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    9d36:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9d3a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9d3e:	d16f      	bne.n	9e20 <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9d40:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9d42:	d341      	bcc.n	9dc8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9d44:	f851 3b04 	ldr.w	r3, [r1], #4
    9d48:	f840 3b04 	str.w	r3, [r0], #4
    9d4c:	f851 3b04 	ldr.w	r3, [r1], #4
    9d50:	f840 3b04 	str.w	r3, [r0], #4
    9d54:	f851 3b04 	ldr.w	r3, [r1], #4
    9d58:	f840 3b04 	str.w	r3, [r0], #4
    9d5c:	f851 3b04 	ldr.w	r3, [r1], #4
    9d60:	f840 3b04 	str.w	r3, [r0], #4
    9d64:	f851 3b04 	ldr.w	r3, [r1], #4
    9d68:	f840 3b04 	str.w	r3, [r0], #4
    9d6c:	f851 3b04 	ldr.w	r3, [r1], #4
    9d70:	f840 3b04 	str.w	r3, [r0], #4
    9d74:	f851 3b04 	ldr.w	r3, [r1], #4
    9d78:	f840 3b04 	str.w	r3, [r0], #4
    9d7c:	f851 3b04 	ldr.w	r3, [r1], #4
    9d80:	f840 3b04 	str.w	r3, [r0], #4
    9d84:	f851 3b04 	ldr.w	r3, [r1], #4
    9d88:	f840 3b04 	str.w	r3, [r0], #4
    9d8c:	f851 3b04 	ldr.w	r3, [r1], #4
    9d90:	f840 3b04 	str.w	r3, [r0], #4
    9d94:	f851 3b04 	ldr.w	r3, [r1], #4
    9d98:	f840 3b04 	str.w	r3, [r0], #4
    9d9c:	f851 3b04 	ldr.w	r3, [r1], #4
    9da0:	f840 3b04 	str.w	r3, [r0], #4
    9da4:	f851 3b04 	ldr.w	r3, [r1], #4
    9da8:	f840 3b04 	str.w	r3, [r0], #4
    9dac:	f851 3b04 	ldr.w	r3, [r1], #4
    9db0:	f840 3b04 	str.w	r3, [r0], #4
    9db4:	f851 3b04 	ldr.w	r3, [r1], #4
    9db8:	f840 3b04 	str.w	r3, [r0], #4
    9dbc:	f851 3b04 	ldr.w	r3, [r1], #4
    9dc0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9dc4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9dc6:	d2bd      	bcs.n	9d44 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9dc8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9dca:	d311      	bcc.n	9df0 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9dcc:	f851 3b04 	ldr.w	r3, [r1], #4
    9dd0:	f840 3b04 	str.w	r3, [r0], #4
    9dd4:	f851 3b04 	ldr.w	r3, [r1], #4
    9dd8:	f840 3b04 	str.w	r3, [r0], #4
    9ddc:	f851 3b04 	ldr.w	r3, [r1], #4
    9de0:	f840 3b04 	str.w	r3, [r0], #4
    9de4:	f851 3b04 	ldr.w	r3, [r1], #4
    9de8:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9dec:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    9dee:	d2ed      	bcs.n	9dcc <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9df0:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    9df2:	d305      	bcc.n	9e00 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9df4:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9df8:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    9dfc:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9dfe:	d2f9      	bcs.n	9df4 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9e00:	3204      	adds	r2, #4
	beq	.Ldone
    9e02:	d00a      	beq.n	9e1a <memcpy+0xe6>

	lsls	r2, r2, #31
    9e04:	07d2      	lsls	r2, r2, #31
	itt ne
    9e06:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9e08:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9e0c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9e10:	d303      	bcc.n	9e1a <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    9e12:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9e14:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9e16:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9e18:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    9e1a:	bc01      	pop	{r0}
#endif
	bx	lr
    9e1c:	4770      	bx	lr
    9e1e:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    9e20:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    9e22:	d34a      	bcc.n	9eba <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9e24:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9e28:	d011      	beq.n	9e4e <memcpy+0x11a>

	rsb	r3, #4
    9e2a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    9e2e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    9e30:	07db      	lsls	r3, r3, #31
	itt ne
    9e32:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9e34:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9e38:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9e3c:	d307      	bcc.n	9e4e <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    9e3e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9e42:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    9e46:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9e4a:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    9e4e:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    9e52:	f43f af75 	beq.w	9d40 <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    9e56:	b430      	push	{r4, r5}
	subs	r2, #4
    9e58:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    9e5a:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    9e5c:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    9e60:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    9e64:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    9e66:	d019      	beq.n	9e9c <memcpy+0x168>
	cmp	r3, #3
    9e68:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    9e6a:	d00b      	beq.n	9e84 <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    9e6c:	0a24      	lsrs	r4, r4, #8
    9e6e:	f851 3b04 	ldr.w	r3, [r1], #4
    9e72:	061d      	lsls	r5, r3, #24
    9e74:	ea44 0405 	orr.w	r4, r4, r5
    9e78:	f840 4b04 	str.w	r4, [r0], #4
    9e7c:	461c      	mov	r4, r3
    9e7e:	3a04      	subs	r2, #4
    9e80:	d2f4      	bcs.n	9e6c <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    9e82:	e016      	b.n	9eb2 <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    9e84:	0e24      	lsrs	r4, r4, #24
    9e86:	f851 3b04 	ldr.w	r3, [r1], #4
    9e8a:	021d      	lsls	r5, r3, #8
    9e8c:	ea44 0405 	orr.w	r4, r4, r5
    9e90:	f840 4b04 	str.w	r4, [r0], #4
    9e94:	461c      	mov	r4, r3
    9e96:	3a04      	subs	r2, #4
    9e98:	d2f4      	bcs.n	9e84 <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    9e9a:	e00a      	b.n	9eb2 <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    9e9c:	0c24      	lsrs	r4, r4, #16
    9e9e:	f851 3b04 	ldr.w	r3, [r1], #4
    9ea2:	041d      	lsls	r5, r3, #16
    9ea4:	ea44 0405 	orr.w	r4, r4, r5
    9ea8:	f840 4b04 	str.w	r4, [r0], #4
    9eac:	461c      	mov	r4, r3
    9eae:	3a04      	subs	r2, #4
    9eb0:	d2f4      	bcs.n	9e9c <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    9eb2:	3204      	adds	r2, #4
	subs	r1, ip
    9eb4:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    9eb8:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9eba:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    9ebc:	d3a0      	bcc.n	9e00 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9ebe:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    9ec0:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9ec4:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9ec8:	d2f9      	bcs.n	9ebe <memcpy+0x18a>

	ldrb	r3, [r1]
    9eca:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9ecc:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9ece:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9ed0:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9ed2:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9ed4:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    9ed6:	bc01      	pop	{r0}
#endif
	bx	lr
    9ed8:	4770      	bx	lr
    9eda:	bf00      	nop

00009edc <fault_isr>:
{
    9edc:	b508      	push	{r3, lr}
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9ede:	4c0f      	ldr	r4, [pc, #60]	; (9f1c <fault_isr+0x40>)
    9ee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9ee2:	0358      	lsls	r0, r3, #13
    9ee4:	d40d      	bmi.n	9f02 <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9ee6:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9ee8:	0559      	lsls	r1, r3, #21
    9eea:	d40f      	bmi.n	9f0c <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9eec:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9eee:	051a      	lsls	r2, r3, #20
    9ef0:	d411      	bmi.n	9f16 <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    9ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9ef4:	04db      	lsls	r3, r3, #19
    9ef6:	d5f3      	bpl.n	9ee0 <fault_isr+0x4>
    9ef8:	f001 fb40 	bl	b57c <uart2_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9efc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9efe:	0358      	lsls	r0, r3, #13
    9f00:	d5f1      	bpl.n	9ee6 <fault_isr+0xa>
    9f02:	f001 fcbd 	bl	b880 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9f06:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9f08:	0559      	lsls	r1, r3, #21
    9f0a:	d5ef      	bpl.n	9eec <fault_isr+0x10>
    9f0c:	f000 f808 	bl	9f20 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9f10:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9f12:	051a      	lsls	r2, r3, #20
    9f14:	d5ed      	bpl.n	9ef2 <fault_isr+0x16>
    9f16:	f000 ff9d 	bl	ae54 <uart1_status_isr>
    9f1a:	e7ea      	b.n	9ef2 <fault_isr+0x16>
    9f1c:	40048000 	.word	0x40048000

00009f20 <unused_isr>:
{
    9f20:	b508      	push	{r3, lr}
	fault_isr();
    9f22:	f7ff ffdb 	bl	9edc <fault_isr>
    9f26:	bf00      	nop

00009f28 <startup_early_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    9f28:	4b01      	ldr	r3, [pc, #4]	; (9f30 <startup_early_hook+0x8>)
    9f2a:	2210      	movs	r2, #16
    9f2c:	801a      	strh	r2, [r3, #0]
}
    9f2e:	4770      	bx	lr
    9f30:	40052000 	.word	0x40052000

00009f34 <startup_late_hook>:
static void startup_default_late_hook(void) {}
    9f34:	4770      	bx	lr
    9f36:	bf00      	nop

00009f38 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    9f38:	4a09      	ldr	r2, [pc, #36]	; (9f60 <_sbrk+0x28>)
{
    9f3a:	b508      	push	{r3, lr}
    9f3c:	4603      	mov	r3, r0
	prev = __brkval;
    9f3e:	6810      	ldr	r0, [r2, #0]
	if (incr != 0) {
    9f40:	b133      	cbz	r3, 9f50 <_sbrk+0x18>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    9f42:	4669      	mov	r1, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    9f44:	4403      	add	r3, r0
    9f46:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    9f4a:	428b      	cmp	r3, r1
    9f4c:	d201      	bcs.n	9f52 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9f4e:	6013      	str	r3, [r2, #0]
	}
	return prev;
}
    9f50:	bd08      	pop	{r3, pc}
			errno = ENOMEM;
    9f52:	f004 f9af 	bl	e2b4 <__errno>
    9f56:	230c      	movs	r3, #12
    9f58:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    9f5a:	f04f 30ff 	mov.w	r0, #4294967295
}
    9f5e:	bd08      	pop	{r3, pc}
    9f60:	1fff88e8 	.word	0x1fff88e8

00009f64 <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    9f64:	2000      	movs	r0, #0
    9f66:	4770      	bx	lr

00009f68 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    9f68:	f04f 30ff 	mov.w	r0, #4294967295
    9f6c:	4770      	bx	lr
    9f6e:	bf00      	nop

00009f70 <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    9f70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9f74:	604b      	str	r3, [r1, #4]
	return 0;
}
    9f76:	2000      	movs	r0, #0
    9f78:	4770      	bx	lr
    9f7a:	bf00      	nop

00009f7c <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    9f7c:	2001      	movs	r0, #1
    9f7e:	4770      	bx	lr

00009f80 <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    9f80:	f04f 30ff 	mov.w	r0, #4294967295
    9f84:	4770      	bx	lr
    9f86:	bf00      	nop

00009f88 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) ;
    9f88:	e7fe      	b.n	9f88 <abort>
    9f8a:	Address 0x00009f8a is out of bounds.


00009f8c <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    9f8c:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    9f90:	b9cb      	cbnz	r3, 9fc6 <nvic_execution_priority+0x3a>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9f92:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    9f96:	b9a0      	cbnz	r0, 9fc2 <nvic_execution_priority+0x36>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9f98:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    9f9c:	b943      	cbnz	r3, 9fb0 <nvic_execution_priority+0x24>
	uint32_t priority=256;
    9f9e:	f44f 7080 	mov.w	r0, #256	; 0x100
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    9fa2:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    9fa6:	b15b      	cbz	r3, 9fc0 <nvic_execution_priority+0x34>
    9fa8:	4298      	cmp	r0, r3
    9faa:	bf28      	it	cs
    9fac:	4618      	movcs	r0, r3
	return priority;
    9fae:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    9fb0:	2b0f      	cmp	r3, #15
    9fb2:	d9f6      	bls.n	9fa2 <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    9fb4:	4a05      	ldr	r2, [pc, #20]	; (9fcc <nvic_execution_priority+0x40>)
    9fb6:	5cd0      	ldrb	r0, [r2, r3]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    9fb8:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    9fbc:	2b00      	cmp	r3, #0
    9fbe:	d1f3      	bne.n	9fa8 <nvic_execution_priority+0x1c>
}
    9fc0:	4770      	bx	lr
	if (primask) return 0;
    9fc2:	4618      	mov	r0, r3
}
    9fc4:	4770      	bx	lr
	if (faultmask) return -1;
    9fc6:	f04f 30ff 	mov.w	r0, #4294967295
    9fca:	4770      	bx	lr
    9fcc:	e000e3f0 	.word	0xe000e3f0

00009fd0 <operator new(unsigned int)>:

#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    9fd0:	f003 ba0a 	b.w	d3e8 <malloc>

00009fd4 <operator new[](unsigned int)>:
    9fd4:	f003 ba08 	b.w	d3e8 <malloc>

00009fd8 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    9fd8:	f101 3cff 	add.w	ip, r1, #4294967295
{
    9fdc:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    9fde:	4665      	mov	r5, ip
	int i=0, j;
    9fe0:	2400      	movs	r4, #0
    9fe2:	e001      	b.n	9fe8 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    9fe4:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    9fe6:	3401      	adds	r4, #1
		digit = val % radix;
    9fe8:	fbb0 fef2 	udiv	lr, r0, r2
    9fec:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9ff0:	2b09      	cmp	r3, #9
    9ff2:	f103 0630 	add.w	r6, r3, #48	; 0x30
    9ff6:	bf8a      	itet	hi
    9ff8:	3337      	addhi	r3, #55	; 0x37
    9ffa:	b2f3      	uxtbls	r3, r6
    9ffc:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    9ffe:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a000:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    a004:	d2ee      	bcs.n	9fe4 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    a006:	1c63      	adds	r3, r4, #1
    a008:	2200      	movs	r2, #0
    a00a:	54ca      	strb	r2, [r1, r3]
    a00c:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    a00e:	b17c      	cbz	r4, a030 <ultoa+0x58>
		t = buf[j];
    a010:	4662      	mov	r2, ip
    a012:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    a016:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    a01a:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    a01e:	eba1 030c 	sub.w	r3, r1, ip
    a022:	3202      	adds	r2, #2
    a024:	3b01      	subs	r3, #1
    a026:	1a52      	subs	r2, r2, r1
    a028:	4423      	add	r3, r4
    a02a:	429a      	cmp	r2, r3
		buf[i] = t;
    a02c:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    a02e:	dbef      	blt.n	a010 <ultoa+0x38>
	}
	return buf;
}
    a030:	4608      	mov	r0, r1
    a032:	bd70      	pop	{r4, r5, r6, pc}

0000a034 <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    a034:	4770      	bx	lr
    a036:	bf00      	nop

0000a038 <digitalWrite.part.0>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    a038:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    a03a:	4b0f      	ldr	r3, [pc, #60]	; (a078 <digitalWrite.part.0+0x40>)
    a03c:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    a040:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    a044:	b12c      	cbz	r4, a052 <digitalWrite.part.0+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    a046:	2301      	movs	r3, #1
		if (val) {
    a048:	b191      	cbz	r1, a070 <digitalWrite.part.0+0x38>
			*portSetRegister(pin) = 1;
    a04a:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    a04e:	bc10      	pop	{r4}
    a050:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    a052:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    a056:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a058:	681a      	ldr	r2, [r3, #0]
		if (val) {
    a05a:	b921      	cbnz	r1, a066 <digitalWrite.part.0+0x2e>
			*config &= ~(PORT_PCR_PE);
    a05c:	f022 0202 	bic.w	r2, r2, #2
}
    a060:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    a062:	601a      	str	r2, [r3, #0]
}
    a064:	4770      	bx	lr
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a066:	f042 0203 	orr.w	r2, r2, #3
}
    a06a:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a06c:	601a      	str	r2, [r3, #0]
}
    a06e:	4770      	bx	lr
			*portClearRegister(pin) = 1;
    a070:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    a074:	bc10      	pop	{r4}
    a076:	4770      	bx	lr
    a078:	00015570 	.word	0x00015570

0000a07c <attachInterruptVector>:
	_VectorsRam[irq + 16] = function;
    a07c:	4b02      	ldr	r3, [pc, #8]	; (a088 <attachInterruptVector+0xc>)
    a07e:	3010      	adds	r0, #16
    a080:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    a084:	4770      	bx	lr
    a086:	bf00      	nop
    a088:	1fff8200 	.word	0x1fff8200

0000a08c <attachInterrupt>:
	if (pin >= CORE_NUM_DIGITAL) return;
    a08c:	2821      	cmp	r0, #33	; 0x21
    a08e:	d835      	bhi.n	a0fc <attachInterrupt+0x70>
	switch (mode) {
    a090:	2a04      	cmp	r2, #4
    a092:	d833      	bhi.n	a0fc <attachInterrupt+0x70>
{
    a094:	b430      	push	{r4, r5}
	mask = (mask << 16) | 0x01000000;
    a096:	4b2a      	ldr	r3, [pc, #168]	; (a140 <attachInterrupt+0xb4>)
	config = portConfigRegister(pin);
    a098:	4d2a      	ldr	r5, [pc, #168]	; (a144 <attachInterrupt+0xb8>)
	mask = (mask << 16) | 0x01000000;
    a09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	config = portConfigRegister(pin);
    a09e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
	mask = (mask << 16) | 0x01000000;
    a0a2:	041b      	lsls	r3, r3, #16
	config = portConfigRegister(pin);
    a0a4:	6854      	ldr	r4, [r2, #4]
	if ((*config & 0x00000700) == 0) {
    a0a6:	6822      	ldr	r2, [r4, #0]
    a0a8:	f412 62e0 	ands.w	r2, r2, #1792	; 0x700
    a0ac:	d039      	beq.n	a122 <attachInterrupt+0x96>
	_VectorsRam[irq + 16] = function;
    a0ae:	4a26      	ldr	r2, [pc, #152]	; (a148 <attachInterrupt+0xbc>)
    a0b0:	4826      	ldr	r0, [pc, #152]	; (a14c <attachInterrupt+0xc0>)
    a0b2:	f8c2 019c 	str.w	r0, [r2, #412]	; 0x19c
    a0b6:	4826      	ldr	r0, [pc, #152]	; (a150 <attachInterrupt+0xc4>)
    a0b8:	f8c2 01a0 	str.w	r0, [r2, #416]	; 0x1a0
    a0bc:	4825      	ldr	r0, [pc, #148]	; (a154 <attachInterrupt+0xc8>)
    a0be:	f8c2 01a4 	str.w	r0, [r2, #420]	; 0x1a4
    a0c2:	4825      	ldr	r0, [pc, #148]	; (a158 <attachInterrupt+0xcc>)
    a0c4:	f8c2 01a8 	str.w	r0, [r2, #424]	; 0x1a8
    a0c8:	4824      	ldr	r0, [pc, #144]	; (a15c <attachInterrupt+0xd0>)
    a0ca:	f8c2 01ac 	str.w	r0, [r2, #428]	; 0x1ac
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    a0ce:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
    a0d2:	f5a2 2092 	sub.w	r0, r2, #299008	; 0x49000
    a0d6:	287c      	cmp	r0, #124	; 0x7c
    a0d8:	d811      	bhi.n	a0fe <attachInterrupt+0x72>
    a0da:	4821      	ldr	r0, [pc, #132]	; (a160 <attachInterrupt+0xd4>)
	__disable_irq();
    a0dc:	b672      	cpsid	i
	cfg = *config;
    a0de:	6822      	ldr	r2, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    a0e0:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
	*config = cfg;
    a0e4:	6022      	str	r2, [r4, #0]
    a0e6:	4313      	orrs	r3, r2
	return (v % 128) / 4;
    a0e8:	f3c4 0284 	ubfx	r2, r4, #2, #5
	cfg |= mask;
    a0ec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	isr_table[pin_index] = function;	// set the function pointer
    a0f0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	*config = cfg;			// enable the new interrupt
    a0f4:	6023      	str	r3, [r4, #0]
	__enable_irq();
    a0f6:	b662      	cpsie	i
}
    a0f8:	bc30      	pop	{r4, r5}
    a0fa:	4770      	bx	lr
    a0fc:	4770      	bx	lr
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    a0fe:	f5a2 2094 	sub.w	r0, r2, #303104	; 0x4a000
    a102:	287c      	cmp	r0, #124	; 0x7c
    a104:	d915      	bls.n	a132 <attachInterrupt+0xa6>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    a106:	f5a2 2096 	sub.w	r0, r2, #307200	; 0x4b000
    a10a:	287c      	cmp	r0, #124	; 0x7c
    a10c:	d913      	bls.n	a136 <attachInterrupt+0xaa>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    a10e:	f5a2 2098 	sub.w	r0, r2, #311296	; 0x4c000
    a112:	287c      	cmp	r0, #124	; 0x7c
    a114:	d911      	bls.n	a13a <attachInterrupt+0xae>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    a116:	f5a2 229a 	sub.w	r2, r2, #315392	; 0x4d000
    a11a:	2a7c      	cmp	r2, #124	; 0x7c
    a11c:	d8ec      	bhi.n	a0f8 <attachInterrupt+0x6c>
    a11e:	4811      	ldr	r0, [pc, #68]	; (a164 <attachInterrupt+0xd8>)
    a120:	e7dc      	b.n	a0dc <attachInterrupt+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    a122:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
    a126:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    a12a:	f44f 7280 	mov.w	r2, #256	; 0x100
    a12e:	6022      	str	r2, [r4, #0]
    a130:	e7bd      	b.n	a0ae <attachInterrupt+0x22>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    a132:	480d      	ldr	r0, [pc, #52]	; (a168 <attachInterrupt+0xdc>)
    a134:	e7d2      	b.n	a0dc <attachInterrupt+0x50>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    a136:	480d      	ldr	r0, [pc, #52]	; (a16c <attachInterrupt+0xe0>)
    a138:	e7d0      	b.n	a0dc <attachInterrupt+0x50>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    a13a:	480d      	ldr	r0, [pc, #52]	; (a170 <attachInterrupt+0xe4>)
    a13c:	e7ce      	b.n	a0dc <attachInterrupt+0x50>
    a13e:	bf00      	nop
    a140:	0001555c 	.word	0x0001555c
    a144:	00015570 	.word	0x00015570
    a148:	1fff8200 	.word	0x1fff8200
    a14c:	1fff87f1 	.word	0x1fff87f1
    a150:	1fff87bd 	.word	0x1fff87bd
    a154:	1fff8789 	.word	0x1fff8789
    a158:	1fff8755 	.word	0x1fff8755
    a15c:	1fff8721 	.word	0x1fff8721
    a160:	1fff88f0 	.word	0x1fff88f0
    a164:	1fff89c8 	.word	0x1fff89c8
    a168:	1fff8928 	.word	0x1fff8928
    a16c:	1fff8978 	.word	0x1fff8978
    a170:	1fff89a8 	.word	0x1fff89a8

0000a174 <rtc_set>:
	RTC_SR = 0;
    a174:	4b03      	ldr	r3, [pc, #12]	; (a184 <rtc_set+0x10>)
    a176:	2200      	movs	r2, #0
	RTC_SR = RTC_SR_TCE;
    a178:	2110      	movs	r1, #16
	RTC_SR = 0;
    a17a:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    a17c:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    a17e:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    a180:	6159      	str	r1, [r3, #20]
}
    a182:	4770      	bx	lr
    a184:	4003d000 	.word	0x4003d000

0000a188 <startup_middle_hook>:
static void startup_default_middle_hook(void) {}
    a188:	4770      	bx	lr
    a18a:	bf00      	nop

0000a18c <_init_Teensyduino_internal_>:
{
    a18c:	b5f0      	push	{r4, r5, r6, r7, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    a18e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    a192:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    a196:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    a19a:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    a19e:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    a1a2:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    a1a6:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_CNT = 0;
    a1aa:	4a1d      	ldr	r2, [pc, #116]	; (a220 <_init_Teensyduino_internal_+0x94>)
	FTM1_CNT = 0;
    a1ac:	481d      	ldr	r0, [pc, #116]	; (a224 <_init_Teensyduino_internal_+0x98>)
	FTM2_CNT = 0;
    a1ae:	491e      	ldr	r1, [pc, #120]	; (a228 <_init_Teensyduino_internal_+0x9c>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    a1b0:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
    a1b4:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    a1b8:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    a1ba:	2700      	movs	r7, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    a1bc:	f64b 76ff 	movw	r6, #49151	; 0xbfff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a1c0:	2509      	movs	r5, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    a1c2:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    a1c6:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
{
    a1ca:	b083      	sub	sp, #12
	FTM0_CNT = 0;
    a1cc:	6057      	str	r7, [r2, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    a1ce:	6096      	str	r6, [r2, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    a1d0:	60d3      	str	r3, [r2, #12]
	FTM0_C1SC = 0x28;
    a1d2:	6153      	str	r3, [r2, #20]
	FTM0_C2SC = 0x28;
    a1d4:	61d3      	str	r3, [r2, #28]
	FTM0_C3SC = 0x28;
    a1d6:	6253      	str	r3, [r2, #36]	; 0x24
	FTM0_C4SC = 0x28;
    a1d8:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    a1da:	6353      	str	r3, [r2, #52]	; 0x34
	FTM0_C6SC = 0x28;
    a1dc:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    a1de:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a1e0:	6015      	str	r5, [r2, #0]
	FTM1_CNT = 0;
    a1e2:	6047      	str	r7, [r0, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    a1e4:	6086      	str	r6, [r0, #8]
	FTM1_C0SC = 0x28;
    a1e6:	60c3      	str	r3, [r0, #12]
	FTM1_C1SC = 0x28;
    a1e8:	6143      	str	r3, [r0, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a1ea:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
    a1ec:	604f      	str	r7, [r1, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    a1ee:	608e      	str	r6, [r1, #8]
	FTM2_C0SC = 0x28;
    a1f0:	60cb      	str	r3, [r1, #12]
	FTM2_C1SC = 0x28;
    a1f2:	614b      	str	r3, [r1, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a1f4:	600d      	str	r5, [r1, #0]
	analog_init();
    a1f6:	f7ff fc1f 	bl	9a38 <analog_init>
	startup_middle_hook();
    a1fa:	f7ff ffc5 	bl	a188 <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    a1fe:	4c0b      	ldr	r4, [pc, #44]	; (a22c <_init_Teensyduino_internal_+0xa0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a200:	6823      	ldr	r3, [r4, #0]
    a202:	9300      	str	r3, [sp, #0]
	return ret;
    a204:	9b00      	ldr	r3, [sp, #0]
    a206:	2b13      	cmp	r3, #19
    a208:	d9fa      	bls.n	a200 <_init_Teensyduino_internal_+0x74>
	usb_init();
    a20a:	f001 fef3 	bl	bff4 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a20e:	6823      	ldr	r3, [r4, #0]
    a210:	9301      	str	r3, [sp, #4]
	return ret;
    a212:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    a214:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    a218:	d3f9      	bcc.n	a20e <_init_Teensyduino_internal_+0x82>
}
    a21a:	b003      	add	sp, #12
    a21c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a21e:	bf00      	nop
    a220:	40038000 	.word	0x40038000
    a224:	40039000 	.word	0x40039000
    a228:	400b8000 	.word	0x400b8000
    a22c:	1fffd3c0 	.word	0x1fffd3c0

0000a230 <analogWrite>:
	if (pin == A14) {
    a230:	2828      	cmp	r0, #40	; 0x28
		uint8_t res = analog_write_res;
    a232:	4b7f      	ldr	r3, [pc, #508]	; (a430 <analogWrite+0x200>)
	if (pin == A14) {
    a234:	d036      	beq.n	a2a4 <analogWrite+0x74>
	if (val <= 0) {
    a236:	2900      	cmp	r1, #0
	max = 1 << analog_write_res;
    a238:	781b      	ldrb	r3, [r3, #0]
	if (val <= 0) {
    a23a:	dd3f      	ble.n	a2bc <analogWrite+0x8c>
	max = 1 << analog_write_res;
    a23c:	2201      	movs	r2, #1
    a23e:	fa02 fc03 	lsl.w	ip, r2, r3
	} else if (val >= max) {
    a242:	4561      	cmp	r1, ip
{
    a244:	b510      	push	{r4, lr}
	} else if (val >= max) {
    a246:	d254      	bcs.n	a2f2 <analogWrite+0xc2>
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    a248:	1ec2      	subs	r2, r0, #3
    a24a:	2a01      	cmp	r2, #1
    a24c:	d970      	bls.n	a330 <analogWrite+0x100>
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
    a24e:	2820      	cmp	r0, #32
    a250:	d067      	beq.n	a322 <analogWrite+0xf2>
    a252:	2819      	cmp	r0, #25
    a254:	d065      	beq.n	a322 <analogWrite+0xf2>
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
    a256:	4a77      	ldr	r2, [pc, #476]	; (a434 <analogWrite+0x204>)
    a258:	6892      	ldr	r2, [r2, #8]
    a25a:	fb02 1201 	mla	r2, r2, r1, r1
    a25e:	fa22 f303 	lsr.w	r3, r2, r3
	switch (pin) {
    a262:	1f42      	subs	r2, r0, #5
    a264:	2a1b      	cmp	r2, #27
    a266:	d87d      	bhi.n	a364 <analogWrite+0x134>
    a268:	e8df f012 	tbh	[pc, r2, lsl #1]
    a26c:	00bf00c6 	.word	0x00bf00c6
    a270:	007c007c 	.word	0x007c007c
    a274:	00b100b8 	.word	0x00b100b8
    a278:	007c007c 	.word	0x007c007c
    a27c:	007c007c 	.word	0x007c007c
    a280:	007c007c 	.word	0x007c007c
    a284:	007c007c 	.word	0x007c007c
    a288:	00aa007c 	.word	0x00aa007c
    a28c:	009c00a3 	.word	0x009c00a3
    a290:	007c0095 	.word	0x007c0095
    a294:	007c00cd 	.word	0x007c00cd
    a298:	007c007c 	.word	0x007c007c
    a29c:	007c007c 	.word	0x007c007c
    a2a0:	00d4007c 	.word	0x00d4007c
		uint8_t res = analog_write_res;
    a2a4:	7818      	ldrb	r0, [r3, #0]
		if (res < 12) {
    a2a6:	280b      	cmp	r0, #11
			val <<= 12 - res;
    a2a8:	bf95      	itete	ls
    a2aa:	f1c0 000c 	rsbls	r0, r0, #12
			val >>= res - 12;
    a2ae:	380c      	subhi	r0, #12
			val <<= 12 - res;
    a2b0:	fa01 f000 	lslls.w	r0, r1, r0
			val >>= res - 12;
    a2b4:	fa41 f000 	asrhi.w	r0, r1, r0
		analogWriteDAC0(val);
    a2b8:	f7ff bc22 	b.w	9b00 <analogWriteDAC0>
	if (pin >= CORE_NUM_DIGITAL) return;
    a2bc:	2821      	cmp	r0, #33	; 0x21
    a2be:	d817      	bhi.n	a2f0 <analogWrite+0xc0>
	if (*portModeRegister(pin)) {
    a2c0:	4b5d      	ldr	r3, [pc, #372]	; (a438 <analogWrite+0x208>)
    a2c2:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    a2c6:	f892 1280 	ldrb.w	r1, [r2, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    a2ca:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    a2ce:	2900      	cmp	r1, #0
    a2d0:	d03c      	beq.n	a34c <analogWrite+0x11c>
			*portClearRegister(pin) = 1;
    a2d2:	2101      	movs	r1, #1
		volatile uint32_t *config = portConfigRegister(pin);
    a2d4:	685b      	ldr	r3, [r3, #4]
			*portClearRegister(pin) = 1;
    a2d6:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		*portModeRegister(pin) = 1;
    a2da:	2001      	movs	r0, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a2dc:	f44f 71a2 	mov.w	r1, #324	; 0x144
		*portModeRegister(pin) = 1;
    a2e0:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a2e4:	6019      	str	r1, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a2e6:	681a      	ldr	r2, [r3, #0]
    a2e8:	f022 0220 	bic.w	r2, r2, #32
    a2ec:	601a      	str	r2, [r3, #0]
    a2ee:	4770      	bx	lr
    a2f0:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
    a2f2:	2821      	cmp	r0, #33	; 0x21
    a2f4:	d814      	bhi.n	a320 <analogWrite+0xf0>
	if (*portModeRegister(pin)) {
    a2f6:	4b50      	ldr	r3, [pc, #320]	; (a438 <analogWrite+0x208>)
    a2f8:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
    a2fc:	f891 4280 	ldrb.w	r4, [r1, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    a300:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    a304:	b344      	cbz	r4, a358 <analogWrite+0x128>
		volatile uint32_t *config = portConfigRegister(pin);
    a306:	685b      	ldr	r3, [r3, #4]
			*portSetRegister(pin) = 1;
    a308:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a30c:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a310:	2001      	movs	r0, #1
    a312:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a316:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a318:	681a      	ldr	r2, [r3, #0]
    a31a:	f022 0220 	bic.w	r2, r2, #32
    a31e:	601a      	str	r2, [r3, #0]
}
    a320:	bd10      	pop	{r4, pc}
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
    a322:	4a46      	ldr	r2, [pc, #280]	; (a43c <analogWrite+0x20c>)
    a324:	6892      	ldr	r2, [r2, #8]
    a326:	fb02 1201 	mla	r2, r2, r1, r1
    a32a:	fa22 f303 	lsr.w	r3, r2, r3
    a32e:	e798      	b.n	a262 <analogWrite+0x32>
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    a330:	4c43      	ldr	r4, [pc, #268]	; (a440 <analogWrite+0x210>)
    a332:	68a2      	ldr	r2, [r4, #8]
	switch (pin) {
    a334:	2804      	cmp	r0, #4
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    a336:	fb02 1201 	mla	r2, r2, r1, r1
    a33a:	fa22 f203 	lsr.w	r2, r2, r3
	switch (pin) {
    a33e:	d170      	bne.n	a422 <analogWrite+0x1f2>
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a340:	4b40      	ldr	r3, [pc, #256]	; (a444 <analogWrite+0x214>)
		FTM1_C1V = cval;
    a342:	61a2      	str	r2, [r4, #24]
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a344:	f44f 7151 	mov.w	r1, #836	; 0x344
    a348:	6359      	str	r1, [r3, #52]	; 0x34
}
    a34a:	bd10      	pop	{r4, pc}
		volatile uint32_t *config = portConfigRegister(pin);
    a34c:	685b      	ldr	r3, [r3, #4]
			*config &= ~(PORT_PCR_PE);
    a34e:	6819      	ldr	r1, [r3, #0]
    a350:	f021 0102 	bic.w	r1, r1, #2
    a354:	6019      	str	r1, [r3, #0]
    a356:	e7c0      	b.n	a2da <analogWrite+0xaa>
		volatile uint32_t *config = portConfigRegister(pin);
    a358:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a35a:	681a      	ldr	r2, [r3, #0]
    a35c:	f042 0203 	orr.w	r2, r2, #3
    a360:	601a      	str	r2, [r3, #0]
    a362:	e7d3      	b.n	a30c <analogWrite+0xdc>
	if (pin >= CORE_NUM_DIGITAL) return;
    a364:	2821      	cmp	r0, #33	; 0x21
    a366:	d8db      	bhi.n	a320 <analogWrite+0xf0>
    a368:	297f      	cmp	r1, #127	; 0x7f
    a36a:	bfd4      	ite	le
    a36c:	2100      	movle	r1, #0
    a36e:	2101      	movgt	r1, #1
    a370:	f7ff fe62 	bl	a038 <digitalWrite.part.0>
	config = portConfigRegister(pin);
    a374:	4b30      	ldr	r3, [pc, #192]	; (a438 <analogWrite+0x208>)
    a376:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
		*portModeRegister(pin) = 1;
    a37a:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
	config = portConfigRegister(pin);
    a37e:	6853      	ldr	r3, [r2, #4]
		*portModeRegister(pin) = 1;
    a380:	2401      	movs	r4, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a382:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a386:	f881 4280 	strb.w	r4, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a38a:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a38c:	681a      	ldr	r2, [r3, #0]
    a38e:	f022 0220 	bic.w	r2, r2, #32
    a392:	601a      	str	r2, [r3, #0]
}
    a394:	bd10      	pop	{r4, pc}
		FTM0_C1V = cval;
    a396:	4827      	ldr	r0, [pc, #156]	; (a434 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a398:	4a2b      	ldr	r2, [pc, #172]	; (a448 <analogWrite+0x218>)
		FTM0_C1V = cval;
    a39a:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a39c:	f240 4144 	movw	r1, #1092	; 0x444
    a3a0:	6091      	str	r1, [r2, #8]
}
    a3a2:	bd10      	pop	{r4, pc}
		FTM0_C0V = cval;
    a3a4:	4823      	ldr	r0, [pc, #140]	; (a434 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3a6:	4a28      	ldr	r2, [pc, #160]	; (a448 <analogWrite+0x218>)
		FTM0_C0V = cval;
    a3a8:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3aa:	f240 4144 	movw	r1, #1092	; 0x444
    a3ae:	6051      	str	r1, [r2, #4]
}
    a3b0:	bd10      	pop	{r4, pc}
		FTM0_C6V = cval;
    a3b2:	4820      	ldr	r0, [pc, #128]	; (a434 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3b4:	4a25      	ldr	r2, [pc, #148]	; (a44c <analogWrite+0x21c>)
		FTM0_C6V = cval;
    a3b6:	6403      	str	r3, [r0, #64]	; 0x40
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3b8:	f240 4144 	movw	r1, #1092	; 0x444
    a3bc:	6191      	str	r1, [r2, #24]
}
    a3be:	bd10      	pop	{r4, pc}
		FTM0_C5V = cval;
    a3c0:	481c      	ldr	r0, [pc, #112]	; (a434 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3c2:	4a22      	ldr	r2, [pc, #136]	; (a44c <analogWrite+0x21c>)
		FTM0_C5V = cval;
    a3c4:	6383      	str	r3, [r0, #56]	; 0x38
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3c6:	f240 4144 	movw	r1, #1092	; 0x444
    a3ca:	6151      	str	r1, [r2, #20]
}
    a3cc:	bd10      	pop	{r4, pc}
		FTM0_C3V = cval;
    a3ce:	4819      	ldr	r0, [pc, #100]	; (a434 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3d0:	4a1d      	ldr	r2, [pc, #116]	; (a448 <analogWrite+0x218>)
		FTM0_C3V = cval;
    a3d2:	6283      	str	r3, [r0, #40]	; 0x28
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3d4:	f240 4144 	movw	r1, #1092	; 0x444
    a3d8:	6111      	str	r1, [r2, #16]
}
    a3da:	bd10      	pop	{r4, pc}
		FTM0_C2V = cval;
    a3dc:	4815      	ldr	r0, [pc, #84]	; (a434 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3de:	4a1a      	ldr	r2, [pc, #104]	; (a448 <analogWrite+0x218>)
		FTM0_C2V = cval;
    a3e0:	6203      	str	r3, [r0, #32]
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3e2:	f240 4144 	movw	r1, #1092	; 0x444
    a3e6:	60d1      	str	r1, [r2, #12]
}
    a3e8:	bd10      	pop	{r4, pc}
		FTM0_C4V = cval;
    a3ea:	4812      	ldr	r0, [pc, #72]	; (a434 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3ec:	4a17      	ldr	r2, [pc, #92]	; (a44c <analogWrite+0x21c>)
		FTM0_C4V = cval;
    a3ee:	6303      	str	r3, [r0, #48]	; 0x30
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3f0:	f240 4144 	movw	r1, #1092	; 0x444
    a3f4:	6111      	str	r1, [r2, #16]
}
    a3f6:	bd10      	pop	{r4, pc}
		FTM0_C7V = cval;
    a3f8:	480e      	ldr	r0, [pc, #56]	; (a434 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3fa:	4a14      	ldr	r2, [pc, #80]	; (a44c <analogWrite+0x21c>)
		FTM0_C7V = cval;
    a3fc:	6483      	str	r3, [r0, #72]	; 0x48
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3fe:	f240 4144 	movw	r1, #1092	; 0x444
    a402:	61d1      	str	r1, [r2, #28]
}
    a404:	bd10      	pop	{r4, pc}
		FTM2_C1V = cval;
    a406:	480d      	ldr	r0, [pc, #52]	; (a43c <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a408:	4a11      	ldr	r2, [pc, #68]	; (a450 <analogWrite+0x220>)
		FTM2_C1V = cval;
    a40a:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a40c:	f44f 7151 	mov.w	r1, #836	; 0x344
    a410:	64d1      	str	r1, [r2, #76]	; 0x4c
}
    a412:	bd10      	pop	{r4, pc}
		FTM2_C0V = cval;
    a414:	4809      	ldr	r0, [pc, #36]	; (a43c <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a416:	4a0e      	ldr	r2, [pc, #56]	; (a450 <analogWrite+0x220>)
		FTM2_C0V = cval;
    a418:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a41a:	f44f 7151 	mov.w	r1, #836	; 0x344
    a41e:	6491      	str	r1, [r2, #72]	; 0x48
}
    a420:	bd10      	pop	{r4, pc}
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a422:	4b08      	ldr	r3, [pc, #32]	; (a444 <analogWrite+0x214>)
		FTM1_C0V = cval;
    a424:	6122      	str	r2, [r4, #16]
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a426:	f44f 7151 	mov.w	r1, #836	; 0x344
    a42a:	6319      	str	r1, [r3, #48]	; 0x30
}
    a42c:	bd10      	pop	{r4, pc}
    a42e:	bf00      	nop
    a430:	1fff88ec 	.word	0x1fff88ec
    a434:	40038000 	.word	0x40038000
    a438:	00015570 	.word	0x00015570
    a43c:	400b8000 	.word	0x400b8000
    a440:	40039000 	.word	0x40039000
    a444:	40049000 	.word	0x40049000
    a448:	4004b000 	.word	0x4004b000
    a44c:	4004c000 	.word	0x4004c000
    a450:	4004a000 	.word	0x4004a000

0000a454 <analogWriteFrequency>:
{
    a454:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a458:	460e      	mov	r6, r1
    a45a:	4680      	mov	r8, r0
	if (frequency < (float)(F_TIMER >> 7) / 65536.0f) {
    a45c:	492c      	ldr	r1, [pc, #176]	; (a510 <analogWriteFrequency+0xbc>)
    a45e:	4630      	mov	r0, r6
    a460:	f002 ff54 	bl	d30c <__aeabi_fcmplt>
		ftmClockSource = 1; 	// Use default F_TIMER clock source
    a464:	4b2b      	ldr	r3, [pc, #172]	; (a514 <analogWriteFrequency+0xc0>)
    a466:	2800      	cmp	r0, #0
    a468:	f647 2712 	movw	r7, #31250	; 0x7a12
    a46c:	bf12      	itee	ne
    a46e:	f04f 0a02 	movne.w	sl, #2
    a472:	f04f 0a01 	moveq.w	sl, #1
    a476:	461f      	moveq	r7, r3
	for (prescale = 0; prescale < 7; prescale++) {
    a478:	2400      	movs	r4, #0
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
    a47a:	f04f 595e 	mov.w	r9, #931135488	; 0x37800000
    a47e:	fa27 f004 	lsr.w	r0, r7, r4
    a482:	f002 fd4d 	bl	cf20 <__aeabi_ui2f>
    a486:	4649      	mov	r1, r9
    a488:	4605      	mov	r5, r0
    a48a:	f002 fda1 	bl	cfd0 <__aeabi_fmul>
    a48e:	4601      	mov	r1, r0
		if (frequency >= minfreq) break;
    a490:	4630      	mov	r0, r6
    a492:	f002 ff4f 	bl	d334 <__aeabi_fcmpge>
    a496:	b930      	cbnz	r0, a4a6 <analogWriteFrequency+0x52>
	for (prescale = 0; prescale < 7; prescale++) {
    a498:	3401      	adds	r4, #1
    a49a:	2c07      	cmp	r4, #7
    a49c:	d1ef      	bne.n	a47e <analogWriteFrequency+0x2a>
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
    a49e:	09f8      	lsrs	r0, r7, #7
    a4a0:	f002 fd3e 	bl	cf20 <__aeabi_ui2f>
    a4a4:	4605      	mov	r5, r0
    a4a6:	4631      	mov	r1, r6
    a4a8:	4628      	mov	r0, r5
    a4aa:	f002 fe45 	bl	d138 <__aeabi_fdiv>
    a4ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    a4b2:	f002 fc83 	bl	cdbc <__aeabi_fsub>
    a4b6:	f002 ff77 	bl	d3a8 <__aeabi_f2uiz>
    a4ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a4be:	4298      	cmp	r0, r3
    a4c0:	bf28      	it	cs
    a4c2:	4618      	movcs	r0, r3
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    a4c4:	f1a8 0303 	sub.w	r3, r8, #3
    a4c8:	2b01      	cmp	r3, #1
    a4ca:	d911      	bls.n	a4f0 <analogWriteFrequency+0x9c>
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
    a4cc:	f1a8 0805 	sub.w	r8, r8, #5
    a4d0:	fa5f f888 	uxtb.w	r8, r8
    a4d4:	f1b8 0f1b 	cmp.w	r8, #27
    a4d8:	d808      	bhi.n	a4ec <analogWriteFrequency+0x98>
    a4da:	4a0f      	ldr	r2, [pc, #60]	; (a518 <analogWriteFrequency+0xc4>)
    a4dc:	2301      	movs	r3, #1
    a4de:	fa03 f308 	lsl.w	r3, r3, r8
    a4e2:	401a      	ands	r2, r3
    a4e4:	d110      	bne.n	a508 <analogWriteFrequency+0xb4>
    a4e6:	f013 6f01 	tst.w	r3, #135266304	; 0x8100000
    a4ea:	d10b      	bne.n	a504 <analogWriteFrequency+0xb0>
}
    a4ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM1_SC = 0;
    a4f0:	4b0a      	ldr	r3, [pc, #40]	; (a51c <analogWriteFrequency+0xc8>)
    a4f2:	2200      	movs	r2, #0
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    a4f4:	ea44 04ca 	orr.w	r4, r4, sl, lsl #3
		FTM2_SC = 0;
    a4f8:	601a      	str	r2, [r3, #0]
		FTM2_CNT = 0;
    a4fa:	605a      	str	r2, [r3, #4]
		FTM2_MOD = mod;
    a4fc:	6098      	str	r0, [r3, #8]
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    a4fe:	601c      	str	r4, [r3, #0]
}
    a500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM2_SC = 0;
    a504:	4b06      	ldr	r3, [pc, #24]	; (a520 <analogWriteFrequency+0xcc>)
    a506:	e7f5      	b.n	a4f4 <analogWriteFrequency+0xa0>
		FTM0_SC = 0;
    a508:	4b06      	ldr	r3, [pc, #24]	; (a524 <analogWriteFrequency+0xd0>)
    a50a:	2200      	movs	r2, #0
    a50c:	e7f2      	b.n	a4f4 <analogWriteFrequency+0xa0>
    a50e:	bf00      	nop
    a510:	40b71b00 	.word	0x40b71b00
    a514:	02dc6c00 	.word	0x02dc6c00
    a518:	00078033 	.word	0x00078033
    a51c:	40039000 	.word	0x40039000
    a520:	400b8000 	.word	0x400b8000
    a524:	40038000 	.word	0x40038000

0000a528 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    a528:	2821      	cmp	r0, #33	; 0x21
    a52a:	d816      	bhi.n	a55a <digitalWrite+0x32>
{
    a52c:	b410      	push	{r4}
	if (*portModeRegister(pin)) {
    a52e:	4b10      	ldr	r3, [pc, #64]	; (a570 <digitalWrite+0x48>)
    a530:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    a534:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    a538:	b12c      	cbz	r4, a546 <digitalWrite+0x1e>
			*portSetRegister(pin) = 1;
    a53a:	2301      	movs	r3, #1
		if (val) {
    a53c:	b971      	cbnz	r1, a55c <digitalWrite+0x34>
			*portClearRegister(pin) = 1;
    a53e:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    a542:	bc10      	pop	{r4}
    a544:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    a546:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    a54a:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a54c:	681a      	ldr	r2, [r3, #0]
		if (val) {
    a54e:	b149      	cbz	r1, a564 <digitalWrite+0x3c>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a550:	f042 0203 	orr.w	r2, r2, #3
}
    a554:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a556:	601a      	str	r2, [r3, #0]
}
    a558:	4770      	bx	lr
    a55a:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    a55c:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    a560:	bc10      	pop	{r4}
    a562:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    a564:	f022 0202 	bic.w	r2, r2, #2
}
    a568:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    a56a:	601a      	str	r2, [r3, #0]
}
    a56c:	4770      	bx	lr
    a56e:	bf00      	nop
    a570:	00015570 	.word	0x00015570

0000a574 <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
    a574:	2821      	cmp	r0, #33	; 0x21
    a576:	d806      	bhi.n	a586 <digitalRead+0x12>
	return *portInputRegister(pin);
    a578:	4b04      	ldr	r3, [pc, #16]	; (a58c <digitalRead+0x18>)
    a57a:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    a57e:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    a582:	b2c0      	uxtb	r0, r0
    a584:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    a586:	2000      	movs	r0, #0
}
    a588:	4770      	bx	lr
    a58a:	bf00      	nop
    a58c:	00015570 	.word	0x00015570

0000a590 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    a590:	2821      	cmp	r0, #33	; 0x21
    a592:	d820      	bhi.n	a5d6 <pinMode+0x46>
	config = portConfigRegister(pin);
    a594:	4a1b      	ldr	r2, [pc, #108]	; (a604 <pinMode+0x74>)
    a596:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a59a:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    a59c:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a59e:	d00f      	beq.n	a5c0 <pinMode+0x30>
    a5a0:	2904      	cmp	r1, #4
    a5a2:	d01d      	beq.n	a5e0 <pinMode+0x50>
		*portModeRegister(pin) = 0;
    a5a4:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    a5a8:	2200      	movs	r2, #0
    a5aa:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
		if (mode == INPUT) {
    a5ae:	b199      	cbz	r1, a5d8 <pinMode+0x48>
		} else if (mode == INPUT_PULLUP) {
    a5b0:	2902      	cmp	r1, #2
    a5b2:	d022      	beq.n	a5fa <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    a5b4:	2903      	cmp	r1, #3
    a5b6:	d10d      	bne.n	a5d4 <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    a5b8:	f44f 7281 	mov.w	r2, #258	; 0x102
    a5bc:	601a      	str	r2, [r3, #0]
    a5be:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    a5c0:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a5c4:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a5c8:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a5cc:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a5ce:	681a      	ldr	r2, [r3, #0]
    a5d0:	f022 0220 	bic.w	r2, r2, #32
    a5d4:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    a5d6:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    a5d8:	f44f 7280 	mov.w	r2, #256	; 0x100
    a5dc:	601a      	str	r2, [r3, #0]
    a5de:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    a5e0:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a5e4:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a5e8:	2001      	movs	r0, #1
    a5ea:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a5ee:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    a5f0:	681a      	ldr	r2, [r3, #0]
    a5f2:	f042 0220 	orr.w	r2, r2, #32
    a5f6:	601a      	str	r2, [r3, #0]
    a5f8:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    a5fa:	f240 1203 	movw	r2, #259	; 0x103
    a5fe:	601a      	str	r2, [r3, #0]
    a600:	4770      	bx	lr
    a602:	bf00      	nop
    a604:	00015570 	.word	0x00015570

0000a608 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    a608:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    a60a:	490d      	ldr	r1, [pc, #52]	; (a640 <micros+0x38>)
	current = SYST_CVR;
    a60c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a610:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    a612:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a614:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    a618:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a61a:	0152      	lsls	r2, r2, #5
    a61c:	d502      	bpl.n	a624 <micros+0x1c>
    a61e:	2b32      	cmp	r3, #50	; 0x32
    a620:	bf88      	it	hi
    a622:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    a624:	4a07      	ldr	r2, [pc, #28]	; (a644 <micros+0x3c>)
	current = ((F_CPU / 1000) - 1) - current;
    a626:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
	return count * 1000 + current / (F_CPU / 1000000);
    a62a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	current = ((F_CPU / 1000) - 1) - current;
    a62e:	33ff      	adds	r3, #255	; 0xff
	return count * 1000 + current / (F_CPU / 1000000);
    a630:	fba2 2303 	umull	r2, r3, r2, r3
    a634:	fb01 f000 	mul.w	r0, r1, r0
}
    a638:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    a63c:	4770      	bx	lr
    a63e:	bf00      	nop
    a640:	1fffd3c0 	.word	0x1fffd3c0
    a644:	aaaaaaab 	.word	0xaaaaaaab

0000a648 <delay>:

void delay(uint32_t ms)
{
    a648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a64c:	4604      	mov	r4, r0
	__disable_irq();
    a64e:	b672      	cpsid	i
	count = systick_millis_count;
    a650:	4f20      	ldr	r7, [pc, #128]	; (a6d4 <delay+0x8c>)
	current = SYST_CVR;
    a652:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a656:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    a658:	683d      	ldr	r5, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a65a:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    a65e:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a660:	0152      	lsls	r2, r2, #5
    a662:	d502      	bpl.n	a66a <delay+0x22>
    a664:	2b32      	cmp	r3, #50	; 0x32
    a666:	bf88      	it	hi
    a668:	3501      	addhi	r5, #1
	uint32_t start = micros();

	if (ms > 0) {
    a66a:	b90c      	cbnz	r4, a670 <delay+0x28>
				start += 1000;
			}
			yield();
		}
	}
}
    a66c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	current = ((F_CPU / 1000) - 1) - current;
    a670:	f8df 9064 	ldr.w	r9, [pc, #100]	; a6d8 <delay+0x90>
	return count * 1000 + current / (F_CPU / 1000000);
    a674:	f8df 8064 	ldr.w	r8, [pc, #100]	; a6dc <delay+0x94>
	current = ((F_CPU / 1000) - 1) - current;
    a678:	eba9 0303 	sub.w	r3, r9, r3
	return count * 1000 + current / (F_CPU / 1000000);
    a67c:	fba8 2303 	umull	r2, r3, r8, r3
    a680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a684:	fb02 f505 	mul.w	r5, r2, r5
    a688:	eb05 1593 	add.w	r5, r5, r3, lsr #6
	current = SYST_CVR;
    a68c:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
	__disable_irq();
    a690:	b672      	cpsid	i
	current = SYST_CVR;
    a692:	69b1      	ldr	r1, [r6, #24]
	count = systick_millis_count;
    a694:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a696:	f8d6 cd04 	ldr.w	ip, [r6, #3332]	; 0xd04
	__enable_irq();
    a69a:	b662      	cpsie	i
	current = ((F_CPU / 1000) - 1) - current;
    a69c:	eba9 0301 	sub.w	r3, r9, r1
	return count * 1000 + current / (F_CPU / 1000000);
    a6a0:	fba8 0303 	umull	r0, r3, r8, r3
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a6a4:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
			while ((micros() - start) >= 1000) {
    a6a8:	ebc5 1393 	rsb	r3, r5, r3, lsr #6
	return count * 1000 + current / (F_CPU / 1000000);
    a6ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a6b0:	d002      	beq.n	a6b8 <delay+0x70>
    a6b2:	2932      	cmp	r1, #50	; 0x32
    a6b4:	bf88      	it	hi
    a6b6:	3201      	addhi	r2, #1
			while ((micros() - start) >= 1000) {
    a6b8:	fb00 3302 	mla	r3, r0, r2, r3
    a6bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    a6c0:	d304      	bcc.n	a6cc <delay+0x84>
				if (ms == 0) return;
    a6c2:	3c01      	subs	r4, #1
    a6c4:	d0d2      	beq.n	a66c <delay+0x24>
				start += 1000;
    a6c6:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    a6ca:	e7e1      	b.n	a690 <delay+0x48>
			yield();
    a6cc:	f001 fea6 	bl	c41c <yield>
			while ((micros() - start) >= 1000) {
    a6d0:	e7de      	b.n	a690 <delay+0x48>
    a6d2:	bf00      	nop
    a6d4:	1fffd3c0 	.word	0x1fffd3c0
    a6d8:	000176ff 	.word	0x000176ff
    a6dc:	aaaaaaab 	.word	0xaaaaaaab

0000a6e0 <serial2_begin>:
#define GPIO_BITBAND_PTR(reg, bit) ((uint32_t *)GPIO_BITBAND_ADDR((reg), (bit)))
#define C3_TXDIR_BIT 5

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a6e0:	4a2a      	ldr	r2, [pc, #168]	; (a78c <serial2_begin+0xac>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    a6e2:	492b      	ldr	r1, [pc, #172]	; (a790 <serial2_begin+0xb0>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a6e4:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    a6e6:	b470      	push	{r4, r5, r6}
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a6e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	rx_buffer_head = 0;
    a6ec:	4d29      	ldr	r5, [pc, #164]	; (a794 <serial2_begin+0xb4>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a6ee:	6353      	str	r3, [r2, #52]	; 0x34
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	switch (rx_pin_num) {
    a6f0:	4e29      	ldr	r6, [pc, #164]	; (a798 <serial2_begin+0xb8>)
	tx_buffer_head = 0;
    a6f2:	4c2a      	ldr	r4, [pc, #168]	; (a79c <serial2_begin+0xbc>)
	switch (rx_pin_num) {
    a6f4:	7832      	ldrb	r2, [r6, #0]
	rx_buffer_head = 0;
    a6f6:	2300      	movs	r3, #0
    a6f8:	702b      	strb	r3, [r5, #0]
	rx_buffer_tail = 0;
    a6fa:	700b      	strb	r3, [r1, #0]
	tx_buffer_tail = 0;
    a6fc:	4928      	ldr	r1, [pc, #160]	; (a7a0 <serial2_begin+0xc0>)
	tx_buffer_head = 0;
    a6fe:	7023      	strb	r3, [r4, #0]
	tx_buffer_tail = 0;
    a700:	700b      	strb	r3, [r1, #0]
	transmitting = 0;
    a702:	4928      	ldr	r1, [pc, #160]	; (a7a4 <serial2_begin+0xc4>)
	switch (rx_pin_num) {
    a704:	2a09      	cmp	r2, #9
	transmitting = 0;
    a706:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    a708:	d033      	beq.n	a772 <serial2_begin+0x92>
    a70a:	2a1a      	cmp	r2, #26
    a70c:	d103      	bne.n	a716 <serial2_begin+0x36>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a70e:	4b26      	ldr	r3, [pc, #152]	; (a7a8 <serial2_begin+0xc8>)
    a710:	f240 3213 	movw	r2, #787	; 0x313
    a714:	605a      	str	r2, [r3, #4]
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    a716:	4b25      	ldr	r3, [pc, #148]	; (a7ac <serial2_begin+0xcc>)
    a718:	781b      	ldrb	r3, [r3, #0]
    a71a:	2b0a      	cmp	r3, #10
    a71c:	d031      	beq.n	a782 <serial2_begin+0xa2>
    a71e:	2b1f      	cmp	r3, #31
    a720:	d103      	bne.n	a72a <serial2_begin+0x4a>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    a722:	4b21      	ldr	r3, [pc, #132]	; (a7a8 <serial2_begin+0xc8>)
    a724:	f44f 7251 	mov.w	r2, #836	; 0x344
    a728:	601a      	str	r2, [r3, #0]
#elif defined(KINETISL)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
#endif
#if defined(HAS_KINETISK_UART1)
	if (divisor < 32) divisor = 32;
    a72a:	2820      	cmp	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    a72c:	4b20      	ldr	r3, [pc, #128]	; (a7b0 <serial2_begin+0xd0>)
	UART1_BDH = (divisor >> 8) & 0x1F;
	UART1_BDL = divisor & 0xFF;
	UART1_C1 = 0;
#endif
	UART1_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a72e:	4c21      	ldr	r4, [pc, #132]	; (a7b4 <serial2_begin+0xd4>)
    a730:	bf38      	it	cc
    a732:	2020      	movcc	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    a734:	f3c0 3c44 	ubfx	ip, r0, #13, #5
    a738:	f883 c000 	strb.w	ip, [r3]
	UART1_BDL = (divisor >> 5) & 0xFF;
    a73c:	f3c0 1c47 	ubfx	ip, r0, #5, #8
	UART1_C4 = divisor & 0x1F;
    a740:	f000 001f 	and.w	r0, r0, #31
	UART1_BDL = (divisor >> 5) & 0xFF;
    a744:	f883 c001 	strb.w	ip, [r3, #1]
	UART1_C1 = UART_C1_ILT;
    a748:	2204      	movs	r2, #4
	UART1_C4 = divisor & 0x1F;
    a74a:	7298      	strb	r0, [r3, #10]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    a74c:	2002      	movs	r0, #2
	UART1_C1 = UART_C1_ILT;
    a74e:	709a      	strb	r2, [r3, #2]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    a750:	74d8      	strb	r0, [r3, #19]
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    a752:	2088      	movs	r0, #136	; 0x88
	UART1_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    a754:	755a      	strb	r2, [r3, #21]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a756:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    a75a:	7418      	strb	r0, [r3, #16]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a75c:	2240      	movs	r2, #64	; 0x40
	UART1_C2 = C2_TX_INACTIVE;
    a75e:	203c      	movs	r0, #60	; 0x3c
    a760:	70d8      	strb	r0, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a762:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
    a76a:	bc70      	pop	{r4, r5, r6}
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a76c:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
}
    a770:	4770      	bx	lr
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a772:	4b11      	ldr	r3, [pc, #68]	; (a7b8 <serial2_begin+0xd8>)
    a774:	f240 3213 	movw	r2, #787	; 0x313
    a778:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num) {
    a77a:	4b0c      	ldr	r3, [pc, #48]	; (a7ac <serial2_begin+0xcc>)
    a77c:	781b      	ldrb	r3, [r3, #0]
    a77e:	2b0a      	cmp	r3, #10
    a780:	d1cd      	bne.n	a71e <serial2_begin+0x3e>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    a782:	4b0d      	ldr	r3, [pc, #52]	; (a7b8 <serial2_begin+0xd8>)
    a784:	f44f 7251 	mov.w	r2, #836	; 0x344
    a788:	611a      	str	r2, [r3, #16]
    a78a:	e7ce      	b.n	a72a <serial2_begin+0x4a>
    a78c:	40048000 	.word	0x40048000
    a790:	1fffd410 	.word	0x1fffd410
    a794:	1fffd408 	.word	0x1fffd408
    a798:	1fff89dc 	.word	0x1fff89dc
    a79c:	1fffd444 	.word	0x1fffd444
    a7a0:	1fffd44c 	.word	0x1fffd44c
    a7a4:	1fffd418 	.word	0x1fffd418
    a7a8:	4004d000 	.word	0x4004d000
    a7ac:	1fff89e4 	.word	0x1fff89e4
    a7b0:	4006b000 	.word	0x4006b000
    a7b4:	e000e400 	.word	0xe000e400
    a7b8:	4004b000 	.word	0x4004b000

0000a7bc <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    a7bc:	4b21      	ldr	r3, [pc, #132]	; (a844 <serial2_format+0x88>)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
    a7be:	4921      	ldr	r1, [pc, #132]	; (a844 <serial2_format+0x88>)
	c = UART1_C1;
    a7c0:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    a7c2:	f000 0203 	and.w	r2, r0, #3
    a7c6:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    a7ca:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    a7cc:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a7ce:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    a7d2:	bf48      	it	mi
    a7d4:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a7d8:	2a04      	cmp	r2, #4
	UART1_C1 = c;
    a7da:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a7dc:	d103      	bne.n	a7e6 <serial2_format+0x2a>
    a7de:	798b      	ldrb	r3, [r1, #6]
    a7e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a7e4:	718b      	strb	r3, [r1, #6]
	c = UART1_S2 & ~0x10;
    a7e6:	4b17      	ldr	r3, [pc, #92]	; (a844 <serial2_format+0x88>)
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
    a7e8:	4a16      	ldr	r2, [pc, #88]	; (a844 <serial2_format+0x88>)
	c = UART1_S2 & ~0x10;
    a7ea:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    a7ec:	06c1      	lsls	r1, r0, #27
	c = UART1_S2 & ~0x10;
    a7ee:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    a7f2:	bf48      	it	mi
    a7f4:	f043 0310 	orrmi.w	r3, r3, #16
	UART1_S2 = c;
    a7f8:	7153      	strb	r3, [r2, #5]
	c = UART1_C3 & ~0x10;
    a7fa:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    a7fc:	0682      	lsls	r2, r0, #26
	c = UART1_C3 & ~0x10;
    a7fe:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART1_C3 = c;
    a802:	4a10      	ldr	r2, [pc, #64]	; (a844 <serial2_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    a804:	bf48      	it	mi
    a806:	f043 0310 	orrmi.w	r3, r3, #16
		UART1_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
		UART1_BDL = bdl;		// Says BDH not acted on until BDL is written
	}
#endif
	// process request for half duplex.
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    a80a:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART1_C3 = c;
    a80e:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    a810:	d010      	beq.n	a834 <serial2_format+0x78>
		c = UART1_C1;
    a812:	7893      	ldrb	r3, [r2, #2]
		#if defined(KINETISL)
		//CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
		half_duplex_mode = 1;
		#else
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a814:	490c      	ldr	r1, [pc, #48]	; (a848 <serial2_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    a816:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART1_C1 = c;
    a81a:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a81c:	7809      	ldrb	r1, [r1, #0]
    a81e:	4b0b      	ldr	r3, [pc, #44]	; (a84c <serial2_format+0x90>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a820:	4a0b      	ldr	r2, [pc, #44]	; (a850 <serial2_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a822:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    a826:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a82a:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a82c:	4909      	ldr	r1, [pc, #36]	; (a854 <serial2_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    a82e:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a830:	6011      	str	r1, [r2, #0]
    a832:	4770      	bx	lr

	} else {
		#if defined(KINETISL)
		half_duplex_mode = 0;
		#else
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    a834:	4b06      	ldr	r3, [pc, #24]	; (a850 <serial2_format+0x94>)
    a836:	4a07      	ldr	r2, [pc, #28]	; (a854 <serial2_format+0x98>)
    a838:	6819      	ldr	r1, [r3, #0]
    a83a:	4291      	cmp	r1, r2
    a83c:	bf08      	it	eq
    a83e:	6018      	streq	r0, [r3, #0]
		#endif
	}
}
    a840:	4770      	bx	lr
    a842:	bf00      	nop
    a844:	4006b000 	.word	0x4006b000
    a848:	1fff89e4 	.word	0x1fff89e4
    a84c:	00015570 	.word	0x00015570
    a850:	1fffd414 	.word	0x1fffd414
    a854:	42d600d4 	.word	0x42d600d4

0000a858 <serial2_end>:

void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    a858:	4b29      	ldr	r3, [pc, #164]	; (a900 <serial2_end+0xa8>)
    a85a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a85c:	051b      	lsls	r3, r3, #20
    a85e:	d54d      	bpl.n	a8fc <serial2_end+0xa4>
{
    a860:	b510      	push	{r4, lr}
	while (transmitting) yield();  // wait for buffered data to send
    a862:	4c28      	ldr	r4, [pc, #160]	; (a904 <serial2_end+0xac>)
    a864:	7823      	ldrb	r3, [r4, #0]
    a866:	b123      	cbz	r3, a872 <serial2_end+0x1a>
    a868:	f001 fdd8 	bl	c41c <yield>
    a86c:	7823      	ldrb	r3, [r4, #0]
    a86e:	2b00      	cmp	r3, #0
    a870:	d1fa      	bne.n	a868 <serial2_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    a872:	4a25      	ldr	r2, [pc, #148]	; (a908 <serial2_end+0xb0>)
#if defined(KINETISK)
	switch (rx_pin_num) {
    a874:	4b25      	ldr	r3, [pc, #148]	; (a90c <serial2_end+0xb4>)
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    a876:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    a87a:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	UART1_C2 = 0;
    a87e:	2100      	movs	r1, #0
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    a880:	f8c0 4184 	str.w	r4, [r0, #388]	; 0x184
	UART1_C2 = 0;
    a884:	70d1      	strb	r1, [r2, #3]
	switch (rx_pin_num) {
    a886:	781b      	ldrb	r3, [r3, #0]
    a888:	2b09      	cmp	r3, #9
    a88a:	d02c      	beq.n	a8e6 <serial2_end+0x8e>
    a88c:	2b1a      	cmp	r3, #26
    a88e:	d01b      	beq.n	a8c8 <serial2_end+0x70>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
		#endif
	}
	switch (tx_pin_num & 127) {
    a890:	4b1f      	ldr	r3, [pc, #124]	; (a910 <serial2_end+0xb8>)
    a892:	781b      	ldrb	r3, [r3, #0]
    a894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a898:	2b0a      	cmp	r3, #10
    a89a:	d01f      	beq.n	a8dc <serial2_end+0x84>
    a89c:	2b1f      	cmp	r3, #31
    a89e:	d00e      	beq.n	a8be <serial2_end+0x66>
#endif
	UART1_S1;
	UART1_D; // clear leftover error status
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    a8a0:	4b1c      	ldr	r3, [pc, #112]	; (a914 <serial2_end+0xbc>)
	UART1_S1;
    a8a2:	4a19      	ldr	r2, [pc, #100]	; (a908 <serial2_end+0xb0>)
	rx_buffer_head = 0;
    a8a4:	4c1c      	ldr	r4, [pc, #112]	; (a918 <serial2_end+0xc0>)
	rx_buffer_tail = 0;
    a8a6:	481d      	ldr	r0, [pc, #116]	; (a91c <serial2_end+0xc4>)
	if (rts_pin) rts_deassert();
    a8a8:	6819      	ldr	r1, [r3, #0]
	UART1_S1;
    a8aa:	f892 c004 	ldrb.w	ip, [r2, #4]
	UART1_D; // clear leftover error status
    a8ae:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    a8b0:	2300      	movs	r3, #0
    a8b2:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    a8b4:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    a8b6:	b109      	cbz	r1, a8bc <serial2_end+0x64>
    a8b8:	2301      	movs	r3, #1
    a8ba:	700b      	strb	r3, [r1, #0]
}
    a8bc:	bd10      	pop	{r4, pc}
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE0
    a8be:	4b18      	ldr	r3, [pc, #96]	; (a920 <serial2_end+0xc8>)
    a8c0:	f240 1203 	movw	r2, #259	; 0x103
    a8c4:	601a      	str	r2, [r3, #0]
    a8c6:	e7eb      	b.n	a8a0 <serial2_end+0x48>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
    a8c8:	4b15      	ldr	r3, [pc, #84]	; (a920 <serial2_end+0xc8>)
    a8ca:	f240 1203 	movw	r2, #259	; 0x103
    a8ce:	605a      	str	r2, [r3, #4]
	switch (tx_pin_num & 127) {
    a8d0:	4b0f      	ldr	r3, [pc, #60]	; (a910 <serial2_end+0xb8>)
    a8d2:	781b      	ldrb	r3, [r3, #0]
    a8d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a8d8:	2b0a      	cmp	r3, #10
    a8da:	d1df      	bne.n	a89c <serial2_end+0x44>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    a8dc:	4b11      	ldr	r3, [pc, #68]	; (a924 <serial2_end+0xcc>)
    a8de:	f240 1203 	movw	r2, #259	; 0x103
    a8e2:	611a      	str	r2, [r3, #16]
    a8e4:	e7dc      	b.n	a8a0 <serial2_end+0x48>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    a8e6:	4b0f      	ldr	r3, [pc, #60]	; (a924 <serial2_end+0xcc>)
    a8e8:	f240 1203 	movw	r2, #259	; 0x103
    a8ec:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num & 127) {
    a8ee:	4b08      	ldr	r3, [pc, #32]	; (a910 <serial2_end+0xb8>)
    a8f0:	781b      	ldrb	r3, [r3, #0]
    a8f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a8f6:	2b0a      	cmp	r3, #10
    a8f8:	d1d0      	bne.n	a89c <serial2_end+0x44>
    a8fa:	e7ef      	b.n	a8dc <serial2_end+0x84>
    a8fc:	4770      	bx	lr
    a8fe:	bf00      	nop
    a900:	40048000 	.word	0x40048000
    a904:	1fffd418 	.word	0x1fffd418
    a908:	4006b000 	.word	0x4006b000
    a90c:	1fff89dc 	.word	0x1fff89dc
    a910:	1fff89e4 	.word	0x1fff89e4
    a914:	1fffd3c4 	.word	0x1fffd3c4
    a918:	1fffd408 	.word	0x1fffd408
    a91c:	1fffd410 	.word	0x1fffd410
    a920:	4004d000 	.word	0x4004d000
    a924:	4004b000 	.word	0x4004b000

0000a928 <serial2_set_transmit_pin>:

void serial2_set_transmit_pin(uint8_t pin)
{
	while (transmitting) ;
    a928:	4a0a      	ldr	r2, [pc, #40]	; (a954 <serial2_set_transmit_pin+0x2c>)
{
    a92a:	b538      	push	{r3, r4, r5, lr}
    a92c:	4605      	mov	r5, r0
	while (transmitting) ;
    a92e:	7813      	ldrb	r3, [r2, #0]
    a930:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    a934:	2b00      	cmp	r3, #0
    a936:	d1fa      	bne.n	a92e <serial2_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    a938:	2101      	movs	r1, #1
    a93a:	4628      	mov	r0, r5
    a93c:	f7ff fe28 	bl	a590 <pinMode>
	digitalWrite(pin, LOW);
    a940:	4621      	mov	r1, r4
    a942:	4628      	mov	r0, r5
    a944:	f7ff fdf0 	bl	a528 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    a948:	4a03      	ldr	r2, [pc, #12]	; (a958 <serial2_set_transmit_pin+0x30>)
    a94a:	4b04      	ldr	r3, [pc, #16]	; (a95c <serial2_set_transmit_pin+0x34>)
    a94c:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    a950:	601a      	str	r2, [r3, #0]
	#if defined(KINETISL)
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}
    a952:	bd38      	pop	{r3, r4, r5, pc}
    a954:	1fffd418 	.word	0x1fffd418
    a958:	00015570 	.word	0x00015570
    a95c:	1fffd414 	.word	0x1fffd414

0000a960 <serial2_set_tx>:
void serial2_set_tx(uint8_t pin, uint8_t opendrain)
{
	#if defined(KINETISK)
	uint32_t cfg;

	if (opendrain) pin |= 128;
    a960:	b109      	cbz	r1, a966 <serial2_set_tx+0x6>
    a962:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    a966:	4a19      	ldr	r2, [pc, #100]	; (a9cc <serial2_set_tx+0x6c>)
    a968:	7813      	ldrb	r3, [r2, #0]
    a96a:	4283      	cmp	r3, r0
    a96c:	d017      	beq.n	a99e <serial2_set_tx+0x3e>
{
    a96e:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    a970:	4c17      	ldr	r4, [pc, #92]	; (a9d0 <serial2_set_tx+0x70>)
    a972:	6b64      	ldr	r4, [r4, #52]	; 0x34
    a974:	0524      	lsls	r4, r4, #20
    a976:	d50f      	bpl.n	a998 <serial2_set_tx+0x38>
		switch (tx_pin_num & 127) {
    a978:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a97c:	2b0a      	cmp	r3, #10
    a97e:	d021      	beq.n	a9c4 <serial2_set_tx+0x64>
    a980:	2b1f      	cmp	r3, #31
    a982:	d014      	beq.n	a9ae <serial2_set_tx+0x4e>
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    a984:	2900      	cmp	r1, #0
    a986:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    a98a:	bf14      	ite	ne
    a98c:	2160      	movne	r1, #96	; 0x60
    a98e:	2144      	moveq	r1, #68	; 0x44
		}
		switch (pin & 127) {
    a990:	2b0a      	cmp	r3, #10
    a992:	d010      	beq.n	a9b6 <serial2_set_tx+0x56>
    a994:	2b1f      	cmp	r3, #31
    a996:	d003      	beq.n	a9a0 <serial2_set_tx+0x40>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	tx_pin_num = pin;
    a998:	7010      	strb	r0, [r2, #0]
	#endif
}
    a99a:	bc10      	pop	{r4}
    a99c:	4770      	bx	lr
    a99e:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = cfg | PORT_PCR_MUX(3); break;
    a9a0:	4b0c      	ldr	r3, [pc, #48]	; (a9d4 <serial2_set_tx+0x74>)
    a9a2:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    a9a6:	6019      	str	r1, [r3, #0]
	tx_pin_num = pin;
    a9a8:	7010      	strb	r0, [r2, #0]
}
    a9aa:	bc10      	pop	{r4}
    a9ac:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = 0; break; // PTE0
    a9ae:	4b09      	ldr	r3, [pc, #36]	; (a9d4 <serial2_set_tx+0x74>)
    a9b0:	2400      	movs	r4, #0
    a9b2:	601c      	str	r4, [r3, #0]
    a9b4:	e7e6      	b.n	a984 <serial2_set_tx+0x24>
			case 10: CORE_PIN10_CONFIG = cfg | PORT_PCR_MUX(3); break;
    a9b6:	4b08      	ldr	r3, [pc, #32]	; (a9d8 <serial2_set_tx+0x78>)
    a9b8:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    a9bc:	6119      	str	r1, [r3, #16]
	tx_pin_num = pin;
    a9be:	7010      	strb	r0, [r2, #0]
}
    a9c0:	bc10      	pop	{r4}
    a9c2:	4770      	bx	lr
			case 10: CORE_PIN10_CONFIG = 0; break; // PTC4
    a9c4:	4b04      	ldr	r3, [pc, #16]	; (a9d8 <serial2_set_tx+0x78>)
    a9c6:	2400      	movs	r4, #0
    a9c8:	611c      	str	r4, [r3, #16]
    a9ca:	e7db      	b.n	a984 <serial2_set_tx+0x24>
    a9cc:	1fff89e4 	.word	0x1fff89e4
    a9d0:	40048000 	.word	0x40048000
    a9d4:	4004d000 	.word	0x4004d000
    a9d8:	4004b000 	.word	0x4004b000

0000a9dc <serial2_set_rx>:

void serial2_set_rx(uint8_t pin)
{
	#if defined(KINETISK)
	if (pin == rx_pin_num) return;
    a9dc:	4b12      	ldr	r3, [pc, #72]	; (aa28 <serial2_set_rx+0x4c>)
    a9de:	781a      	ldrb	r2, [r3, #0]
    a9e0:	4282      	cmp	r2, r0
    a9e2:	d00c      	beq.n	a9fe <serial2_set_rx+0x22>
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    a9e4:	4911      	ldr	r1, [pc, #68]	; (aa2c <serial2_set_rx+0x50>)
    a9e6:	6b49      	ldr	r1, [r1, #52]	; 0x34
    a9e8:	0509      	lsls	r1, r1, #20
    a9ea:	d507      	bpl.n	a9fc <serial2_set_rx+0x20>
		switch (rx_pin_num) {
    a9ec:	2a09      	cmp	r2, #9
    a9ee:	d016      	beq.n	aa1e <serial2_set_rx+0x42>
    a9f0:	2a1a      	cmp	r2, #26
    a9f2:	d00a      	beq.n	aa0a <serial2_set_rx+0x2e>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
			#endif
		}
		switch (pin) {
    a9f4:	2809      	cmp	r0, #9
    a9f6:	d00d      	beq.n	aa14 <serial2_set_rx+0x38>
    a9f8:	281a      	cmp	r0, #26
    a9fa:	d001      	beq.n	aa00 <serial2_set_rx+0x24>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	rx_pin_num = pin;
    a9fc:	7018      	strb	r0, [r3, #0]
	#endif
}
    a9fe:	4770      	bx	lr
			case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    aa00:	4a0b      	ldr	r2, [pc, #44]	; (aa30 <serial2_set_rx+0x54>)
    aa02:	f240 3113 	movw	r1, #787	; 0x313
    aa06:	6051      	str	r1, [r2, #4]
    aa08:	e7f8      	b.n	a9fc <serial2_set_rx+0x20>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    aa0a:	4a09      	ldr	r2, [pc, #36]	; (aa30 <serial2_set_rx+0x54>)
    aa0c:	2100      	movs	r1, #0
		switch (pin) {
    aa0e:	2809      	cmp	r0, #9
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    aa10:	6051      	str	r1, [r2, #4]
		switch (pin) {
    aa12:	d1f1      	bne.n	a9f8 <serial2_set_rx+0x1c>
			case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    aa14:	4a07      	ldr	r2, [pc, #28]	; (aa34 <serial2_set_rx+0x58>)
    aa16:	f240 3113 	movw	r1, #787	; 0x313
    aa1a:	60d1      	str	r1, [r2, #12]
    aa1c:	e7ee      	b.n	a9fc <serial2_set_rx+0x20>
			case 9: CORE_PIN9_CONFIG = 0; break; // PTC3
    aa1e:	4a05      	ldr	r2, [pc, #20]	; (aa34 <serial2_set_rx+0x58>)
    aa20:	2100      	movs	r1, #0
    aa22:	60d1      	str	r1, [r2, #12]
    aa24:	e7e6      	b.n	a9f4 <serial2_set_rx+0x18>
    aa26:	bf00      	nop
    aa28:	1fff89dc 	.word	0x1fff89dc
    aa2c:	40048000 	.word	0x40048000
    aa30:	4004d000 	.word	0x4004d000
    aa34:	4004b000 	.word	0x4004b000

0000aa38 <serial2_set_rts>:

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    aa38:	4b0d      	ldr	r3, [pc, #52]	; (aa70 <serial2_set_rts+0x38>)
    aa3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    aa3c:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    aa40:	d013      	beq.n	aa6a <serial2_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    aa42:	2821      	cmp	r0, #33	; 0x21
    aa44:	d903      	bls.n	aa4e <serial2_set_rts+0x16>
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    aa46:	4b0b      	ldr	r3, [pc, #44]	; (aa74 <serial2_set_rts+0x3c>)
    aa48:	2000      	movs	r0, #0
    aa4a:	6018      	str	r0, [r3, #0]
		return 0;
    aa4c:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    aa4e:	4b0a      	ldr	r3, [pc, #40]	; (aa78 <serial2_set_rts+0x40>)
{
    aa50:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    aa52:	4c08      	ldr	r4, [pc, #32]	; (aa74 <serial2_set_rts+0x3c>)
    aa54:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    aa58:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    aa5a:	2101      	movs	r1, #1
    aa5c:	f7ff fd98 	bl	a590 <pinMode>
		rts_assert();
    aa60:	6823      	ldr	r3, [r4, #0]
    aa62:	2200      	movs	r2, #0
    aa64:	701a      	strb	r2, [r3, #0]
		UART1_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    aa66:	2001      	movs	r0, #1
}
    aa68:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    aa6a:	4618      	mov	r0, r3
}
    aa6c:	4770      	bx	lr
    aa6e:	bf00      	nop
    aa70:	40048000 	.word	0x40048000
    aa74:	1fffd3c4 	.word	0x1fffd3c4
    aa78:	00015570 	.word	0x00015570

0000aa7c <serial2_set_cts>:

int serial2_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    aa7c:	4b0c      	ldr	r3, [pc, #48]	; (aab0 <serial2_set_cts+0x34>)
    aa7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    aa80:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    aa84:	d012      	beq.n	aaac <serial2_set_cts+0x30>
	if (pin == 23) {
    aa86:	2817      	cmp	r0, #23
    aa88:	d109      	bne.n	aa9e <serial2_set_cts+0x22>
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    aa8a:	4b0a      	ldr	r3, [pc, #40]	; (aab4 <serial2_set_cts+0x38>)
	#endif
	} else {
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_TXCTSE;
    aa8c:	4a0a      	ldr	r2, [pc, #40]	; (aab8 <serial2_set_cts+0x3c>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    aa8e:	f240 3102 	movw	r1, #770	; 0x302
    aa92:	6099      	str	r1, [r3, #8]
	UART1_MODEM |= UART_MODEM_TXCTSE;
    aa94:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    aa96:	2001      	movs	r0, #1
	UART1_MODEM |= UART_MODEM_TXCTSE;
    aa98:	4303      	orrs	r3, r0
    aa9a:	7353      	strb	r3, [r2, #13]
	return 1;
    aa9c:	4770      	bx	lr
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    aa9e:	4a06      	ldr	r2, [pc, #24]	; (aab8 <serial2_set_cts+0x3c>)
    aaa0:	7b53      	ldrb	r3, [r2, #13]
    aaa2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    aaa6:	2000      	movs	r0, #0
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    aaa8:	7353      	strb	r3, [r2, #13]
		return 0;
    aaaa:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    aaac:	4618      	mov	r0, r3
#else
	return 0;
#endif
}
    aaae:	4770      	bx	lr
    aab0:	40048000 	.word	0x40048000
    aab4:	4004b000 	.word	0x4004b000
    aab8:	4006b000 	.word	0x4006b000

0000aabc <serial2_putchar>:

void serial2_putchar(uint32_t c)
{
    aabc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    aac0:	4b33      	ldr	r3, [pc, #204]	; (ab90 <serial2_putchar+0xd4>)
    aac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    aac4:	051a      	lsls	r2, r3, #20
    aac6:	d53a      	bpl.n	ab3e <serial2_putchar+0x82>
	if (transmit_pin) transmit_assert();
    aac8:	4b32      	ldr	r3, [pc, #200]	; (ab94 <serial2_putchar+0xd8>)
    aaca:	681b      	ldr	r3, [r3, #0]
    aacc:	4606      	mov	r6, r0
    aace:	b10b      	cbz	r3, aad4 <serial2_putchar+0x18>
    aad0:	2201      	movs	r2, #1
    aad2:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART1_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    aad4:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ab98 <serial2_putchar+0xdc>
	if (++head >= tx_buffer_total_size_) head = 0;
    aad8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; ab9c <serial2_putchar+0xe0>
	head = tx_buffer_head;
    aadc:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    aae0:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    aae4:	4d2e      	ldr	r5, [pc, #184]	; (aba0 <serial2_putchar+0xe4>)
	if (++head >= tx_buffer_total_size_) head = 0;
    aae6:	3401      	adds	r4, #1
    aae8:	42a3      	cmp	r3, r4
	while (tx_buffer_tail == head) {
    aaea:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    aaec:	d929      	bls.n	ab42 <serial2_putchar+0x86>
	while (tx_buffer_tail == head) {
    aaee:	429c      	cmp	r4, r3
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
	}
	transmitting = 1;
	tx_buffer_head = head;
    aaf0:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    aaf4:	d114      	bne.n	ab20 <serial2_putchar+0x64>
			if ((UART1_S1 & UART_S1_TDRE)) {
    aaf6:	4f2b      	ldr	r7, [pc, #172]	; (aba4 <serial2_putchar+0xe8>)
					n = tx_buffer[tail];
    aaf8:	f8df b0ac 	ldr.w	fp, [pc, #172]	; aba8 <serial2_putchar+0xec>
    aafc:	e005      	b.n	ab0a <serial2_putchar+0x4e>
			if ((UART1_S1 & UART_S1_TDRE)) {
    aafe:	793b      	ldrb	r3, [r7, #4]
    ab00:	061b      	lsls	r3, r3, #24
    ab02:	d423      	bmi.n	ab4c <serial2_putchar+0x90>
	while (tx_buffer_tail == head) {
    ab04:	782b      	ldrb	r3, [r5, #0]
    ab06:	42a3      	cmp	r3, r4
    ab08:	d10a      	bne.n	ab20 <serial2_putchar+0x64>
		int priority = nvic_execution_priority();
    ab0a:	f7ff fa3f 	bl	9f8c <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    ab0e:	2840      	cmp	r0, #64	; 0x40
    ab10:	ddf5      	ble.n	aafe <serial2_putchar+0x42>
		} else if (priority >= 256) {
    ab12:	28ff      	cmp	r0, #255	; 0xff
    ab14:	ddf6      	ble.n	ab04 <serial2_putchar+0x48>
			yield(); // wait
    ab16:	f001 fc81 	bl	c41c <yield>
	while (tx_buffer_tail == head) {
    ab1a:	782b      	ldrb	r3, [r5, #0]
    ab1c:	42a3      	cmp	r3, r4
    ab1e:	d0f4      	beq.n	ab0a <serial2_putchar+0x4e>
	if (head < SERIAL2_TX_BUFFER_SIZE) {
    ab20:	2c27      	cmp	r4, #39	; 0x27
    ab22:	d929      	bls.n	ab78 <serial2_putchar+0xbc>
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
    ab24:	4b21      	ldr	r3, [pc, #132]	; (abac <serial2_putchar+0xf0>)
    ab26:	3c28      	subs	r4, #40	; 0x28
    ab28:	681b      	ldr	r3, [r3, #0]
    ab2a:	b2f6      	uxtb	r6, r6
    ab2c:	551e      	strb	r6, [r3, r4]
	transmitting = 1;
    ab2e:	4a20      	ldr	r2, [pc, #128]	; (abb0 <serial2_putchar+0xf4>)
	UART1_C2 = C2_TX_ACTIVE;
    ab30:	4b1c      	ldr	r3, [pc, #112]	; (aba4 <serial2_putchar+0xe8>)
	transmitting = 1;
    ab32:	2101      	movs	r1, #1
    ab34:	7011      	strb	r1, [r2, #0]
	UART1_C2 = C2_TX_ACTIVE;
    ab36:	22bc      	movs	r2, #188	; 0xbc
	tx_buffer_head = head;
    ab38:	f889 a000 	strb.w	sl, [r9]
	UART1_C2 = C2_TX_ACTIVE;
    ab3c:	70da      	strb	r2, [r3, #3]
}
    ab3e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    ab42:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    ab46:	b9a3      	cbnz	r3, ab72 <serial2_putchar+0xb6>
	if (++head >= tx_buffer_total_size_) head = 0;
    ab48:	4654      	mov	r4, sl
    ab4a:	e7d4      	b.n	aaf6 <serial2_putchar+0x3a>
				uint32_t tail = tx_buffer_tail;
    ab4c:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    ab4e:	f8d8 1000 	ldr.w	r1, [r8]
    ab52:	1c5a      	adds	r2, r3, #1
    ab54:	4291      	cmp	r1, r2
				uint32_t tail = tx_buffer_tail;
    ab56:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    ab58:	d908      	bls.n	ab6c <serial2_putchar+0xb0>
				if (tail < SERIAL2_TX_BUFFER_SIZE) {
    ab5a:	2a27      	cmp	r2, #39	; 0x27
    ab5c:	d810      	bhi.n	ab80 <serial2_putchar+0xc4>
				tx_buffer_tail = tail;
    ab5e:	b2d1      	uxtb	r1, r2
					n = tx_buffer[tail];
    ab60:	f81b 3002 	ldrb.w	r3, [fp, r2]
    ab64:	b2db      	uxtb	r3, r3
				UART1_D = n;
    ab66:	71fb      	strb	r3, [r7, #7]
				tx_buffer_tail = tail;
    ab68:	7029      	strb	r1, [r5, #0]
    ab6a:	e7cb      	b.n	ab04 <serial2_putchar+0x48>
    ab6c:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    ab6e:	460a      	mov	r2, r1
    ab70:	e7f6      	b.n	ab60 <serial2_putchar+0xa4>
	while (tx_buffer_tail == head) {
    ab72:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    ab76:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    ab78:	4b0b      	ldr	r3, [pc, #44]	; (aba8 <serial2_putchar+0xec>)
    ab7a:	b2f6      	uxtb	r6, r6
    ab7c:	551e      	strb	r6, [r3, r4]
    ab7e:	e7d6      	b.n	ab2e <serial2_putchar+0x72>
				tx_buffer_tail = tail;
    ab80:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    ab82:	4a0a      	ldr	r2, [pc, #40]	; (abac <serial2_putchar+0xf0>)
    ab84:	3b27      	subs	r3, #39	; 0x27
    ab86:	6812      	ldr	r2, [r2, #0]
    ab88:	5cd3      	ldrb	r3, [r2, r3]
    ab8a:	b2db      	uxtb	r3, r3
    ab8c:	e7eb      	b.n	ab66 <serial2_putchar+0xaa>
    ab8e:	bf00      	nop
    ab90:	40048000 	.word	0x40048000
    ab94:	1fffd414 	.word	0x1fffd414
    ab98:	1fffd444 	.word	0x1fffd444
    ab9c:	1fff89e0 	.word	0x1fff89e0
    aba0:	1fffd44c 	.word	0x1fffd44c
    aba4:	4006b000 	.word	0x4006b000
    aba8:	1fffd41c 	.word	0x1fffd41c
    abac:	1fffd448 	.word	0x1fffd448
    abb0:	1fffd418 	.word	0x1fffd418

0000abb4 <serial2_write>:

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
    abb4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    abb8:	4b39      	ldr	r3, [pc, #228]	; (aca0 <serial2_write+0xec>)
    abba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    abbc:	051a      	lsls	r2, r3, #20
    abbe:	d53c      	bpl.n	ac3a <serial2_write+0x86>
	if (transmit_pin) transmit_assert();
    abc0:	4b38      	ldr	r3, [pc, #224]	; (aca4 <serial2_write+0xf0>)
    abc2:	681b      	ldr	r3, [r3, #0]
    abc4:	b10b      	cbz	r3, abca <serial2_write+0x16>
    abc6:	2201      	movs	r2, #1
    abc8:	701a      	strb	r2, [r3, #0]
	const uint8_t *end = p + count;
    abca:	1847      	adds	r7, r0, r1
	while (p < end) {
    abcc:	42b8      	cmp	r0, r7
    abce:	d231      	bcs.n	ac34 <serial2_write+0x80>
    abd0:	4e35      	ldr	r6, [pc, #212]	; (aca8 <serial2_write+0xf4>)
    abd2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; acac <serial2_write+0xf8>
    abd6:	4c36      	ldr	r4, [pc, #216]	; (acb0 <serial2_write+0xfc>)
		head = tx_buffer_head;
		if (++head >= tx_buffer_total_size_) head = 0;
		if (tx_buffer_tail == head) {
			UART1_C2 = C2_TX_ACTIVE;
    abd8:	f8df 90d8 	ldr.w	r9, [pc, #216]	; acb4 <serial2_write+0x100>
    abdc:	f100 0a01 	add.w	sl, r0, #1
    abe0:	e013      	b.n	ac0a <serial2_write+0x56>
		if (tx_buffer_tail == head) {
    abe2:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    abe6:	b353      	cbz	r3, ac3e <serial2_write+0x8a>
    abe8:	f04f 0b00 	mov.w	fp, #0
    abec:	465d      	mov	r5, fp
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		if (head < SERIAL2_TX_BUFFER_SIZE) {
			tx_buffer[head] = *p++;
    abee:	4a32      	ldr	r2, [pc, #200]	; (acb8 <serial2_write+0x104>)
    abf0:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    abf4:	5553      	strb	r3, [r2, r5]
    abf6:	4652      	mov	r2, sl
		} else {
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
		}
		transmitting = 1;
    abf8:	4930      	ldr	r1, [pc, #192]	; (acbc <serial2_write+0x108>)
    abfa:	2301      	movs	r3, #1
	while (p < end) {
    abfc:	42ba      	cmp	r2, r7
		transmitting = 1;
    abfe:	700b      	strb	r3, [r1, #0]
	while (p < end) {
    ac00:	f10a 0a01 	add.w	sl, sl, #1
		tx_buffer_head = head;
    ac04:	f886 b000 	strb.w	fp, [r6]
	while (p < end) {
    ac08:	d214      	bcs.n	ac34 <serial2_write+0x80>
		head = tx_buffer_head;
    ac0a:	7835      	ldrb	r5, [r6, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    ac0c:	f8d8 3000 	ldr.w	r3, [r8]
    ac10:	3501      	adds	r5, #1
    ac12:	42ab      	cmp	r3, r5
		if (tx_buffer_tail == head) {
    ac14:	7823      	ldrb	r3, [r4, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    ac16:	d9e4      	bls.n	abe2 <serial2_write+0x2e>
		if (tx_buffer_tail == head) {
    ac18:	42ab      	cmp	r3, r5
		tx_buffer_head = head;
    ac1a:	fa5f fb85 	uxtb.w	fp, r5
		if (tx_buffer_tail == head) {
    ac1e:	d00f      	beq.n	ac40 <serial2_write+0x8c>
		if (head < SERIAL2_TX_BUFFER_SIZE) {
    ac20:	2d27      	cmp	r5, #39	; 0x27
    ac22:	d9e4      	bls.n	abee <serial2_write+0x3a>
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
    ac24:	4b26      	ldr	r3, [pc, #152]	; (acc0 <serial2_write+0x10c>)
    ac26:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    ac2a:	681b      	ldr	r3, [r3, #0]
    ac2c:	3d28      	subs	r5, #40	; 0x28
    ac2e:	555a      	strb	r2, [r3, r5]
    ac30:	4652      	mov	r2, sl
    ac32:	e7e1      	b.n	abf8 <serial2_write+0x44>
	}
	UART1_C2 = C2_TX_ACTIVE;
    ac34:	4b1f      	ldr	r3, [pc, #124]	; (acb4 <serial2_write+0x100>)
    ac36:	22bc      	movs	r2, #188	; 0xbc
    ac38:	70da      	strb	r2, [r3, #3]
}
    ac3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (tx_buffer_tail == head) {
    ac3e:	465d      	mov	r5, fp
			UART1_C2 = C2_TX_ACTIVE;
    ac40:	f06f 0343 	mvn.w	r3, #67	; 0x43
    ac44:	f889 3003 	strb.w	r3, [r9, #3]
    ac48:	e006      	b.n	ac58 <serial2_write+0xa4>
					if ((UART1_S1 & UART_S1_TDRE)) {
    ac4a:	f899 3004 	ldrb.w	r3, [r9, #4]
    ac4e:	061b      	lsls	r3, r3, #24
    ac50:	d40b      	bmi.n	ac6a <serial2_write+0xb6>
			} while (tx_buffer_tail == head);
    ac52:	7823      	ldrb	r3, [r4, #0]
    ac54:	42ab      	cmp	r3, r5
    ac56:	d1e3      	bne.n	ac20 <serial2_write+0x6c>
				int priority = nvic_execution_priority();
    ac58:	f7ff f998 	bl	9f8c <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    ac5c:	2840      	cmp	r0, #64	; 0x40
    ac5e:	ddf4      	ble.n	ac4a <serial2_write+0x96>
				} else if (priority >= 256) {
    ac60:	28ff      	cmp	r0, #255	; 0xff
    ac62:	ddf6      	ble.n	ac52 <serial2_write+0x9e>
					yield();
    ac64:	f001 fbda 	bl	c41c <yield>
    ac68:	e7f3      	b.n	ac52 <serial2_write+0x9e>
						uint32_t tail = tx_buffer_tail;
    ac6a:	7823      	ldrb	r3, [r4, #0]
						if (++tail >= tx_buffer_total_size_) tail = 0;
    ac6c:	f8d8 1000 	ldr.w	r1, [r8]
    ac70:	1c5a      	adds	r2, r3, #1
    ac72:	4291      	cmp	r1, r2
						uint32_t tail = tx_buffer_tail;
    ac74:	b2db      	uxtb	r3, r3
						if (++tail >= tx_buffer_total_size_) tail = 0;
    ac76:	d903      	bls.n	ac80 <serial2_write+0xcc>
						if (tail < SERIAL2_TX_BUFFER_SIZE) {
    ac78:	2a27      	cmp	r2, #39	; 0x27
    ac7a:	d80a      	bhi.n	ac92 <serial2_write+0xde>
						tx_buffer_tail = tail;
    ac7c:	b2d1      	uxtb	r1, r2
    ac7e:	e001      	b.n	ac84 <serial2_write+0xd0>
    ac80:	2100      	movs	r1, #0
						if (++tail >= tx_buffer_total_size_) tail = 0;
    ac82:	460a      	mov	r2, r1
							n = tx_buffer[tail];
    ac84:	4b0c      	ldr	r3, [pc, #48]	; (acb8 <serial2_write+0x104>)
    ac86:	5c9b      	ldrb	r3, [r3, r2]
    ac88:	b2db      	uxtb	r3, r3
						UART1_D = n;
    ac8a:	f889 3007 	strb.w	r3, [r9, #7]
						tx_buffer_tail = tail;
    ac8e:	7021      	strb	r1, [r4, #0]
    ac90:	e7df      	b.n	ac52 <serial2_write+0x9e>
    ac92:	b2d1      	uxtb	r1, r2
							n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    ac94:	4a0a      	ldr	r2, [pc, #40]	; (acc0 <serial2_write+0x10c>)
    ac96:	3b27      	subs	r3, #39	; 0x27
    ac98:	6812      	ldr	r2, [r2, #0]
    ac9a:	5cd3      	ldrb	r3, [r2, r3]
    ac9c:	b2db      	uxtb	r3, r3
    ac9e:	e7f4      	b.n	ac8a <serial2_write+0xd6>
    aca0:	40048000 	.word	0x40048000
    aca4:	1fffd414 	.word	0x1fffd414
    aca8:	1fffd444 	.word	0x1fffd444
    acac:	1fff89e0 	.word	0x1fff89e0
    acb0:	1fffd44c 	.word	0x1fffd44c
    acb4:	4006b000 	.word	0x4006b000
    acb8:	1fffd41c 	.word	0x1fffd41c
    acbc:	1fffd418 	.word	0x1fffd418
    acc0:	1fffd448 	.word	0x1fffd448

0000acc4 <serial2_flush>:
	while (count-- > 0) serial2_putchar(*p++);
}
#endif

void serial2_flush(void)
{
    acc4:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    acc6:	4c04      	ldr	r4, [pc, #16]	; (acd8 <serial2_flush+0x14>)
    acc8:	7823      	ldrb	r3, [r4, #0]
    acca:	b123      	cbz	r3, acd6 <serial2_flush+0x12>
    accc:	f001 fba6 	bl	c41c <yield>
    acd0:	7823      	ldrb	r3, [r4, #0]
    acd2:	2b00      	cmp	r3, #0
    acd4:	d1fa      	bne.n	accc <serial2_flush+0x8>
}
    acd6:	bd10      	pop	{r4, pc}
    acd8:	1fffd418 	.word	0x1fffd418

0000acdc <serial2_write_buffer_free>:

int serial2_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    acdc:	4a08      	ldr	r2, [pc, #32]	; (ad00 <serial2_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    acde:	4b09      	ldr	r3, [pc, #36]	; (ad04 <serial2_write_buffer_free+0x28>)
	head = tx_buffer_head;
    ace0:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    ace2:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ace4:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    ace6:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    ace8:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    acea:	d202      	bcs.n	acf2 <serial2_write_buffer_free+0x16>
	return tail - head - 1;
    acec:	3b01      	subs	r3, #1
    acee:	1a18      	subs	r0, r3, r0
}
    acf0:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    acf2:	4a05      	ldr	r2, [pc, #20]	; (ad08 <serial2_write_buffer_free+0x2c>)
    acf4:	6812      	ldr	r2, [r2, #0]
    acf6:	3a01      	subs	r2, #1
    acf8:	4413      	add	r3, r2
    acfa:	1a18      	subs	r0, r3, r0
    acfc:	4770      	bx	lr
    acfe:	bf00      	nop
    ad00:	1fffd444 	.word	0x1fffd444
    ad04:	1fffd44c 	.word	0x1fffd44c
    ad08:	1fff89e0 	.word	0x1fff89e0

0000ad0c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ad0c:	4a06      	ldr	r2, [pc, #24]	; (ad28 <serial2_available+0x1c>)
	tail = rx_buffer_tail;
    ad0e:	4b07      	ldr	r3, [pc, #28]	; (ad2c <serial2_available+0x20>)
	head = rx_buffer_head;
    ad10:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    ad12:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    ad14:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    ad16:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    ad18:	bf3c      	itt	cc
    ad1a:	4a05      	ldrcc	r2, [pc, #20]	; (ad30 <serial2_available+0x24>)
    ad1c:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    ad1e:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    ad20:	bf38      	it	cc
    ad22:	189b      	addcc	r3, r3, r2
    ad24:	1a18      	subs	r0, r3, r0
}
    ad26:	4770      	bx	lr
    ad28:	1fffd408 	.word	0x1fffd408
    ad2c:	1fffd410 	.word	0x1fffd410
    ad30:	1fff89d8 	.word	0x1fff89d8

0000ad34 <serial2_getchar>:
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    ad34:	4b1b      	ldr	r3, [pc, #108]	; (ada4 <serial2_getchar+0x70>)
	tail = rx_buffer_tail;
    ad36:	491c      	ldr	r1, [pc, #112]	; (ada8 <serial2_getchar+0x74>)
	head = rx_buffer_head;
    ad38:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    ad3a:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    ad3c:	429a      	cmp	r2, r3
    ad3e:	d02e      	beq.n	ad9e <serial2_getchar+0x6a>
{
    ad40:	b510      	push	{r4, lr}
    ad42:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    ad46:	4a19      	ldr	r2, [pc, #100]	; (adac <serial2_getchar+0x78>)
    ad48:	b2d8      	uxtb	r0, r3
    ad4a:	6812      	ldr	r2, [r2, #0]
    ad4c:	1c43      	adds	r3, r0, #1
    ad4e:	429a      	cmp	r2, r3
    ad50:	d919      	bls.n	ad86 <serial2_getchar+0x52>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    ad52:	2b3f      	cmp	r3, #63	; 0x3f
    ad54:	d81b      	bhi.n	ad8e <serial2_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    ad56:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    ad5a:	4815      	ldr	r0, [pc, #84]	; (adb0 <serial2_getchar+0x7c>)
    ad5c:	5cc0      	ldrb	r0, [r0, r3]
    ad5e:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    ad60:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    ad64:	4913      	ldr	r1, [pc, #76]	; (adb4 <serial2_getchar+0x80>)
    ad66:	6809      	ldr	r1, [r1, #0]
    ad68:	b161      	cbz	r1, ad84 <serial2_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    ad6a:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    ad6c:	bf3c      	itt	cc
    ad6e:	4472      	addcc	r2, lr
    ad70:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    ad72:	4a11      	ldr	r2, [pc, #68]	; (adb8 <serial2_getchar+0x84>)
    ad74:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    ad76:	bf28      	it	cs
    ad78:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    ad7c:	429a      	cmp	r2, r3
    ad7e:	d301      	bcc.n	ad84 <serial2_getchar+0x50>
    ad80:	2300      	movs	r3, #0
    ad82:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    ad84:	bd10      	pop	{r4, pc}
    ad86:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    ad8a:	4663      	mov	r3, ip
    ad8c:	e7e5      	b.n	ad5a <serial2_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    ad8e:	4c0b      	ldr	r4, [pc, #44]	; (adbc <serial2_getchar+0x88>)
    ad90:	383f      	subs	r0, #63	; 0x3f
    ad92:	6824      	ldr	r4, [r4, #0]
    ad94:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    ad96:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    ad9a:	b2c0      	uxtb	r0, r0
    ad9c:	e7e0      	b.n	ad60 <serial2_getchar+0x2c>
	if (head == tail) return -1;
    ad9e:	f04f 30ff 	mov.w	r0, #4294967295
}
    ada2:	4770      	bx	lr
    ada4:	1fffd408 	.word	0x1fffd408
    ada8:	1fffd410 	.word	0x1fffd410
    adac:	1fff89d8 	.word	0x1fff89d8
    adb0:	1fffd3c8 	.word	0x1fffd3c8
    adb4:	1fffd3c4 	.word	0x1fffd3c4
    adb8:	1fff89d4 	.word	0x1fff89d4
    adbc:	1fffd40c 	.word	0x1fffd40c

0000adc0 <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    adc0:	4a0d      	ldr	r2, [pc, #52]	; (adf8 <serial2_peek+0x38>)
	tail = rx_buffer_tail;
    adc2:	4b0e      	ldr	r3, [pc, #56]	; (adfc <serial2_peek+0x3c>)
	head = rx_buffer_head;
    adc4:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    adc6:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    adc8:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    adca:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    adcc:	d011      	beq.n	adf2 <serial2_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    adce:	490c      	ldr	r1, [pc, #48]	; (ae00 <serial2_peek+0x40>)
    add0:	6809      	ldr	r1, [r1, #0]
    add2:	1c53      	adds	r3, r2, #1
    add4:	4299      	cmp	r1, r3
    add6:	d907      	bls.n	ade8 <serial2_peek+0x28>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    add8:	2b3f      	cmp	r3, #63	; 0x3f
    adda:	d906      	bls.n	adea <serial2_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    addc:	4b09      	ldr	r3, [pc, #36]	; (ae04 <serial2_peek+0x44>)
    adde:	3a3f      	subs	r2, #63	; 0x3f
    ade0:	681b      	ldr	r3, [r3, #0]
    ade2:	5c98      	ldrb	r0, [r3, r2]
    ade4:	b2c0      	uxtb	r0, r0
    ade6:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    ade8:	2300      	movs	r3, #0
		return rx_buffer[tail];
    adea:	4a07      	ldr	r2, [pc, #28]	; (ae08 <serial2_peek+0x48>)
    adec:	5cd0      	ldrb	r0, [r2, r3]
    adee:	b2c0      	uxtb	r0, r0
    adf0:	4770      	bx	lr
	if (head == tail) return -1;
    adf2:	f04f 30ff 	mov.w	r0, #4294967295
}
    adf6:	4770      	bx	lr
    adf8:	1fffd408 	.word	0x1fffd408
    adfc:	1fffd410 	.word	0x1fffd410
    ae00:	1fff89d8 	.word	0x1fff89d8
    ae04:	1fffd40c 	.word	0x1fffd40c
    ae08:	1fffd3c8 	.word	0x1fffd3c8

0000ae0c <serial2_clear>:

void serial2_clear(void)
{
#ifdef HAS_KINETISK_UART1_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    ae0c:	4b0c      	ldr	r3, [pc, #48]	; (ae40 <serial2_clear+0x34>)
    ae0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ae10:	051b      	lsls	r3, r3, #20
    ae12:	d514      	bpl.n	ae3e <serial2_clear+0x32>
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    ae14:	4b0b      	ldr	r3, [pc, #44]	; (ae44 <serial2_clear+0x38>)
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    ae16:	480c      	ldr	r0, [pc, #48]	; (ae48 <serial2_clear+0x3c>)
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    ae18:	78da      	ldrb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    ae1a:	2140      	movs	r1, #64	; 0x40
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    ae1c:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    ae20:	70da      	strb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    ae22:	7459      	strb	r1, [r3, #17]
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    ae24:	78da      	ldrb	r2, [r3, #3]
	rx_buffer_head = rx_buffer_tail;
    ae26:	4909      	ldr	r1, [pc, #36]	; (ae4c <serial2_clear+0x40>)
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    ae28:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    ae2c:	70da      	strb	r2, [r3, #3]
	if (rts_pin) rts_assert();
    ae2e:	4a08      	ldr	r2, [pc, #32]	; (ae50 <serial2_clear+0x44>)
	rx_buffer_head = rx_buffer_tail;
    ae30:	7803      	ldrb	r3, [r0, #0]
	if (rts_pin) rts_assert();
    ae32:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    ae34:	b2db      	uxtb	r3, r3
    ae36:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    ae38:	b10a      	cbz	r2, ae3e <serial2_clear+0x32>
    ae3a:	2300      	movs	r3, #0
    ae3c:	7013      	strb	r3, [r2, #0]
}
    ae3e:	4770      	bx	lr
    ae40:	40048000 	.word	0x40048000
    ae44:	4006b000 	.word	0x4006b000
    ae48:	1fffd410 	.word	0x1fffd410
    ae4c:	1fffd408 	.word	0x1fffd408
    ae50:	1fffd3c4 	.word	0x1fffd3c4

0000ae54 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    ae54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    ae58:	4c50      	ldr	r4, [pc, #320]	; (af9c <uart1_status_isr+0x148>)
    ae5a:	7923      	ldrb	r3, [r4, #4]
    ae5c:	f013 0f30 	tst.w	r3, #48	; 0x30
    ae60:	d047      	beq.n	aef2 <uart1_status_isr+0x9e>
		__disable_irq();
    ae62:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    ae64:	7da3      	ldrb	r3, [r4, #22]
		if (avail == 0) {
    ae66:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    ae6a:	2b00      	cmp	r3, #0
    ae6c:	d058      	beq.n	af20 <uart1_status_isr+0xcc>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    ae6e:	b662      	cpsie	i
			head = rx_buffer_head;
    ae70:	f8df 812c 	ldr.w	r8, [pc, #300]	; afa0 <uart1_status_isr+0x14c>
			tail = rx_buffer_tail;
    ae74:	484b      	ldr	r0, [pc, #300]	; (afa4 <uart1_status_isr+0x150>)
			head = rx_buffer_head;
    ae76:	f898 3000 	ldrb.w	r3, [r8]
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    ae7a:	4a4b      	ldr	r2, [pc, #300]	; (afa8 <uart1_status_isr+0x154>)
			tail = rx_buffer_tail;
    ae7c:	7805      	ldrb	r5, [r0, #0]
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    ae7e:	6816      	ldr	r6, [r2, #0]
				if (newhead != tail) {
					head = newhead;
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
						rx_buffer[head] = n;
    ae80:	4f4a      	ldr	r7, [pc, #296]	; (afac <uart1_status_isr+0x158>)
			head = rx_buffer_head;
    ae82:	fa5f fc83 	uxtb.w	ip, r3
					} else {
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ae86:	4b4a      	ldr	r3, [pc, #296]	; (afb0 <uart1_status_isr+0x15c>)
			tail = rx_buffer_tail;
    ae88:	b2ed      	uxtb	r5, r5
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ae8a:	f8d3 e000 	ldr.w	lr, [r3]
    ae8e:	e008      	b.n	aea2 <uart1_status_isr+0x4e>
				if (newhead != tail) {
    ae90:	b11d      	cbz	r5, ae9a <uart1_status_isr+0x46>
    ae92:	f04f 0c00 	mov.w	ip, #0
						rx_buffer[head] = n;
    ae96:	f807 300c 	strb.w	r3, [r7, ip]
					}
				}
			} while (--avail > 0);
    ae9a:	1e4a      	subs	r2, r1, #1
    ae9c:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
    aea0:	d012      	beq.n	aec8 <uart1_status_isr+0x74>
					n = UART1_D;
    aea2:	79e3      	ldrb	r3, [r4, #7]
				newhead = head + 1;
    aea4:	f10c 0201 	add.w	r2, ip, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    aea8:	4296      	cmp	r6, r2
					n = UART1_D;
    aeaa:	b2db      	uxtb	r3, r3
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    aeac:	d9f0      	bls.n	ae90 <uart1_status_isr+0x3c>
				if (newhead != tail) {
    aeae:	4295      	cmp	r5, r2
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    aeb0:	f1ac 003f 	sub.w	r0, ip, #63	; 0x3f
				if (newhead != tail) {
    aeb4:	d0f1      	beq.n	ae9a <uart1_status_isr+0x46>
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
    aeb6:	2a3f      	cmp	r2, #63	; 0x3f
    aeb8:	d96d      	bls.n	af96 <uart1_status_isr+0x142>
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    aeba:	4694      	mov	ip, r2
			} while (--avail > 0);
    aebc:	1e4a      	subs	r2, r1, #1
    aebe:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    aec2:	f80e 3000 	strb.w	r3, [lr, r0]
			} while (--avail > 0);
    aec6:	d1ec      	bne.n	aea2 <uart1_status_isr+0x4e>
			rx_buffer_head = head;
    aec8:	fa5f f38c 	uxtb.w	r3, ip
    aecc:	f888 3000 	strb.w	r3, [r8]
			if (rts_pin) {
    aed0:	4b38      	ldr	r3, [pc, #224]	; (afb4 <uart1_status_isr+0x160>)
    aed2:	6819      	ldr	r1, [r3, #0]
    aed4:	b169      	cbz	r1, aef2 <uart1_status_isr+0x9e>
				int avail;
				if (head >= tail) avail = head - tail;
    aed6:	45ac      	cmp	ip, r5
				else avail = rx_buffer_total_size_ + head - tail;
    aed8:	bf3c      	itt	cc
    aeda:	1b72      	subcc	r2, r6, r5
    aedc:	eb02 030c 	addcc.w	r3, r2, ip
				if (avail >= rts_high_watermark_) rts_deassert();
    aee0:	4a35      	ldr	r2, [pc, #212]	; (afb8 <uart1_status_isr+0x164>)
    aee2:	6812      	ldr	r2, [r2, #0]
				if (head >= tail) avail = head - tail;
    aee4:	bf28      	it	cs
    aee6:	ebac 0305 	subcs.w	r3, ip, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    aeea:	429a      	cmp	r2, r3
    aeec:	bf9c      	itt	ls
    aeee:	2301      	movls	r3, #1
    aef0:	700b      	strbls	r3, [r1, #0]
			}
		}
	}
	c = UART1_C2;
    aef2:	482a      	ldr	r0, [pc, #168]	; (af9c <uart1_status_isr+0x148>)
    aef4:	78c3      	ldrb	r3, [r0, #3]
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    aef6:	061e      	lsls	r6, r3, #24
	c = UART1_C2;
    aef8:	b2dd      	uxtb	r5, r3
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    aefa:	d416      	bmi.n	af2a <uart1_status_isr+0xd6>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    aefc:	066a      	lsls	r2, r5, #25
    aefe:	d50d      	bpl.n	af1c <uart1_status_isr+0xc8>
    af00:	4b26      	ldr	r3, [pc, #152]	; (af9c <uart1_status_isr+0x148>)
    af02:	791b      	ldrb	r3, [r3, #4]
    af04:	065b      	lsls	r3, r3, #25
    af06:	d509      	bpl.n	af1c <uart1_status_isr+0xc8>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    af08:	4b2c      	ldr	r3, [pc, #176]	; (afbc <uart1_status_isr+0x168>)
		transmitting = 0;
    af0a:	492d      	ldr	r1, [pc, #180]	; (afc0 <uart1_status_isr+0x16c>)
		if (transmit_pin) transmit_deassert();
    af0c:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    af0e:	2200      	movs	r2, #0
    af10:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    af12:	b103      	cbz	r3, af16 <uart1_status_isr+0xc2>
    af14:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART1_C3 = reg;
			__enable_irq();
		}
		#endif		
		UART1_C2 = C2_TX_INACTIVE;
    af16:	4b21      	ldr	r3, [pc, #132]	; (af9c <uart1_status_isr+0x148>)
    af18:	223c      	movs	r2, #60	; 0x3c
    af1a:	70da      	strb	r2, [r3, #3]
	}
}
    af1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    af20:	2340      	movs	r3, #64	; 0x40
			c = UART1_D;
    af22:	79e2      	ldrb	r2, [r4, #7]
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    af24:	7463      	strb	r3, [r4, #17]
			__enable_irq();
    af26:	b662      	cpsie	i
    af28:	e7e3      	b.n	aef2 <uart1_status_isr+0x9e>
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    af2a:	7903      	ldrb	r3, [r0, #4]
    af2c:	061c      	lsls	r4, r3, #24
    af2e:	d5e5      	bpl.n	aefc <uart1_status_isr+0xa8>
		head = tx_buffer_head;
    af30:	4b24      	ldr	r3, [pc, #144]	; (afc4 <uart1_status_isr+0x170>)
			if (++tail >= tx_buffer_total_size_) tail = 0;
    af32:	4a25      	ldr	r2, [pc, #148]	; (afc8 <uart1_status_isr+0x174>)
		tail = tx_buffer_tail;
    af34:	f8df e094 	ldr.w	lr, [pc, #148]	; afcc <uart1_status_isr+0x178>
		head = tx_buffer_head;
    af38:	781c      	ldrb	r4, [r3, #0]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    af3a:	6816      	ldr	r6, [r2, #0]
		tail = tx_buffer_tail;
    af3c:	f89e 3000 	ldrb.w	r3, [lr]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    af40:	4a23      	ldr	r2, [pc, #140]	; (afd0 <uart1_status_isr+0x17c>)
				n = tx_buffer[tail];
    af42:	4f24      	ldr	r7, [pc, #144]	; (afd4 <uart1_status_isr+0x180>)
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    af44:	f8d2 c000 	ldr.w	ip, [r2]
		head = tx_buffer_head;
    af48:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    af4a:	b2db      	uxtb	r3, r3
    af4c:	e007      	b.n	af5e <uart1_status_isr+0x10a>
			avail = UART1_S1;
    af4e:	7903      	ldrb	r3, [r0, #4]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    af50:	2300      	movs	r3, #0
				n = tx_buffer[tail];
    af52:	5cfa      	ldrb	r2, [r7, r3]
    af54:	b2d2      	uxtb	r2, r2
			UART1_D = n;
    af56:	71c2      	strb	r2, [r0, #7]
		} while (UART1_TCFIFO < 8);
    af58:	7d02      	ldrb	r2, [r0, #20]
    af5a:	2a07      	cmp	r2, #7
    af5c:	d811      	bhi.n	af82 <uart1_status_isr+0x12e>
			if (tail == head) break;
    af5e:	42a3      	cmp	r3, r4
			if (++tail >= tx_buffer_total_size_) tail = 0;
    af60:	f103 0101 	add.w	r1, r3, #1
			if (tail == head) break;
    af64:	d00e      	beq.n	af84 <uart1_status_isr+0x130>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    af66:	428e      	cmp	r6, r1
    af68:	d9f1      	bls.n	af4e <uart1_status_isr+0xfa>
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    af6a:	2927      	cmp	r1, #39	; 0x27
			avail = UART1_S1;
    af6c:	7902      	ldrb	r2, [r0, #4]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    af6e:	f1a3 0327 	sub.w	r3, r3, #39	; 0x27
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    af72:	d801      	bhi.n	af78 <uart1_status_isr+0x124>
    af74:	460b      	mov	r3, r1
    af76:	e7ec      	b.n	af52 <uart1_status_isr+0xfe>
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    af78:	f81c 2003 	ldrb.w	r2, [ip, r3]
    af7c:	460b      	mov	r3, r1
    af7e:	b2d2      	uxtb	r2, r2
    af80:	e7e9      	b.n	af56 <uart1_status_isr+0x102>
		tx_buffer_tail = tail;
    af82:	b2dc      	uxtb	r4, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    af84:	4b05      	ldr	r3, [pc, #20]	; (af9c <uart1_status_isr+0x148>)
		tx_buffer_tail = tail;
    af86:	f88e 4000 	strb.w	r4, [lr]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    af8a:	791a      	ldrb	r2, [r3, #4]
    af8c:	0611      	lsls	r1, r2, #24
    af8e:	bf44      	itt	mi
    af90:	227c      	movmi	r2, #124	; 0x7c
    af92:	70da      	strbmi	r2, [r3, #3]
    af94:	e7b2      	b.n	aefc <uart1_status_isr+0xa8>
    af96:	4694      	mov	ip, r2
    af98:	e77d      	b.n	ae96 <uart1_status_isr+0x42>
    af9a:	bf00      	nop
    af9c:	4006b000 	.word	0x4006b000
    afa0:	1fffd408 	.word	0x1fffd408
    afa4:	1fffd410 	.word	0x1fffd410
    afa8:	1fff89d8 	.word	0x1fff89d8
    afac:	1fffd3c8 	.word	0x1fffd3c8
    afb0:	1fffd40c 	.word	0x1fffd40c
    afb4:	1fffd3c4 	.word	0x1fffd3c4
    afb8:	1fff89d0 	.word	0x1fff89d0
    afbc:	1fffd414 	.word	0x1fffd414
    afc0:	1fffd418 	.word	0x1fffd418
    afc4:	1fffd444 	.word	0x1fffd444
    afc8:	1fff89e0 	.word	0x1fff89e0
    afcc:	1fffd44c 	.word	0x1fffd44c
    afd0:	1fffd448 	.word	0x1fffd448
    afd4:	1fffd41c 	.word	0x1fffd41c

0000afd8 <serial2_add_memory_for_read>:

void serial2_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    afd8:	4b09      	ldr	r3, [pc, #36]	; (b000 <serial2_add_memory_for_read+0x28>)
{
    afda:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    afdc:	6018      	str	r0, [r3, #0]
	if (buffer) {
    afde:	b160      	cbz	r0, affa <serial2_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE + length;
    afe0:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    afe4:	4b07      	ldr	r3, [pc, #28]	; (b004 <serial2_add_memory_for_read+0x2c>)
    afe6:	4808      	ldr	r0, [pc, #32]	; (b008 <serial2_add_memory_for_read+0x30>)
    afe8:	f101 021a 	add.w	r2, r1, #26
    afec:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    afee:	4b07      	ldr	r3, [pc, #28]	; (b00c <serial2_add_memory_for_read+0x34>)
    aff0:	6004      	str	r4, [r0, #0]
    aff2:	3128      	adds	r1, #40	; 0x28
}
    aff4:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    aff6:	6019      	str	r1, [r3, #0]
}
    aff8:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
    affa:	2440      	movs	r4, #64	; 0x40
    affc:	e7f2      	b.n	afe4 <serial2_add_memory_for_read+0xc>
    affe:	bf00      	nop
    b000:	1fffd40c 	.word	0x1fffd40c
    b004:	1fff89d4 	.word	0x1fff89d4
    b008:	1fff89d8 	.word	0x1fff89d8
    b00c:	1fff89d0 	.word	0x1fff89d0

0000b010 <serial2_add_memory_for_write>:

void serial2_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    b010:	4b05      	ldr	r3, [pc, #20]	; (b028 <serial2_add_memory_for_write+0x18>)
    b012:	6018      	str	r0, [r3, #0]
	if (buffer) {
    b014:	b118      	cbz	r0, b01e <serial2_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE + length;
    b016:	4b05      	ldr	r3, [pc, #20]	; (b02c <serial2_add_memory_for_write+0x1c>)
    b018:	3128      	adds	r1, #40	; 0x28
    b01a:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
	} 
}
    b01c:	4770      	bx	lr
    b01e:	4b03      	ldr	r3, [pc, #12]	; (b02c <serial2_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
    b020:	2128      	movs	r1, #40	; 0x28
    b022:	6019      	str	r1, [r3, #0]
}
    b024:	4770      	bx	lr
    b026:	bf00      	nop
    b028:	1fffd448 	.word	0x1fffd448
    b02c:	1fff89e0 	.word	0x1fff89e0

0000b030 <serial3_putchar.part.0>:
#else
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
    b030:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
    b034:	4b31      	ldr	r3, [pc, #196]	; (b0fc <serial3_putchar.part.0+0xcc>)
    b036:	681b      	ldr	r3, [r3, #0]
void serial3_putchar(uint32_t c)
    b038:	4607      	mov	r7, r0
	if (transmit_pin) transmit_assert();
    b03a:	b10b      	cbz	r3, b040 <serial3_putchar.part.0+0x10>
    b03c:	2201      	movs	r2, #1
    b03e:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART2_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    b040:	f8df 90bc 	ldr.w	r9, [pc, #188]	; b100 <serial3_putchar.part.0+0xd0>
	if (++head >= tx_buffer_total_size_) head = 0;
    b044:	f8df 80bc 	ldr.w	r8, [pc, #188]	; b104 <serial3_putchar.part.0+0xd4>
	head = tx_buffer_head;
    b048:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    b04c:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    b050:	4d2d      	ldr	r5, [pc, #180]	; (b108 <serial3_putchar.part.0+0xd8>)
	if (++head >= tx_buffer_total_size_) head = 0;
    b052:	3401      	adds	r4, #1
    b054:	429c      	cmp	r4, r3
	while (tx_buffer_tail == head) {
    b056:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    b058:	d32a      	bcc.n	b0b0 <serial3_putchar.part.0+0x80>
	while (tx_buffer_tail == head) {
    b05a:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    b05e:	2b00      	cmp	r3, #0
    b060:	d13e      	bne.n	b0e0 <serial3_putchar.part.0+0xb0>
	if (++head >= tx_buffer_total_size_) head = 0;
    b062:	4654      	mov	r4, sl
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
    b064:	4e29      	ldr	r6, [pc, #164]	; (b10c <serial3_putchar.part.0+0xdc>)
				uint32_t tail = tx_buffer_tail;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
					n = tx_buffer[tail];
    b066:	f8df b0a8 	ldr.w	fp, [pc, #168]	; b110 <serial3_putchar.part.0+0xe0>
    b06a:	e005      	b.n	b078 <serial3_putchar.part.0+0x48>
			if ((UART2_S1 & UART_S1_TDRE)) {
    b06c:	7933      	ldrb	r3, [r6, #4]
    b06e:	061b      	lsls	r3, r3, #24
    b070:	d423      	bmi.n	b0ba <serial3_putchar.part.0+0x8a>
	while (tx_buffer_tail == head) {
    b072:	782b      	ldrb	r3, [r5, #0]
    b074:	42a3      	cmp	r3, r4
    b076:	d10a      	bne.n	b08e <serial3_putchar.part.0+0x5e>
		int priority = nvic_execution_priority();
    b078:	f7fe ff88 	bl	9f8c <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    b07c:	2840      	cmp	r0, #64	; 0x40
    b07e:	ddf5      	ble.n	b06c <serial3_putchar.part.0+0x3c>
				}
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    b080:	28ff      	cmp	r0, #255	; 0xff
    b082:	ddf6      	ble.n	b072 <serial3_putchar.part.0+0x42>
			yield(); // wait
    b084:	f001 f9ca 	bl	c41c <yield>
	while (tx_buffer_tail == head) {
    b088:	782b      	ldrb	r3, [r5, #0]
    b08a:	42a3      	cmp	r3, r4
    b08c:	d0f4      	beq.n	b078 <serial3_putchar.part.0+0x48>
		}
	}
	if (head < SERIAL3_TX_BUFFER_SIZE) {
    b08e:	2c27      	cmp	r4, #39	; 0x27
    b090:	d929      	bls.n	b0e6 <serial3_putchar.part.0+0xb6>
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL3_TX_BUFFER_SIZE] = c;
    b092:	4b20      	ldr	r3, [pc, #128]	; (b114 <serial3_putchar.part.0+0xe4>)
    b094:	3c28      	subs	r4, #40	; 0x28
    b096:	681b      	ldr	r3, [r3, #0]
    b098:	b2ff      	uxtb	r7, r7
    b09a:	551f      	strb	r7, [r3, r4]
	}
	transmitting = 1;
    b09c:	4a1e      	ldr	r2, [pc, #120]	; (b118 <serial3_putchar.part.0+0xe8>)
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    b09e:	4b1b      	ldr	r3, [pc, #108]	; (b10c <serial3_putchar.part.0+0xdc>)
	transmitting = 1;
    b0a0:	2101      	movs	r1, #1
    b0a2:	7011      	strb	r1, [r2, #0]
	UART2_C2 = C2_TX_ACTIVE;
    b0a4:	22ac      	movs	r2, #172	; 0xac
	tx_buffer_head = head;
    b0a6:	f889 a000 	strb.w	sl, [r9]
	UART2_C2 = C2_TX_ACTIVE;
    b0aa:	70da      	strb	r2, [r3, #3]
}
    b0ac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    b0b0:	429c      	cmp	r4, r3
	tx_buffer_head = head;
    b0b2:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    b0b6:	d0d5      	beq.n	b064 <serial3_putchar.part.0+0x34>
    b0b8:	e7e9      	b.n	b08e <serial3_putchar.part.0+0x5e>
				uint32_t tail = tx_buffer_tail;
    b0ba:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b0bc:	f8d8 1000 	ldr.w	r1, [r8]
    b0c0:	1c5a      	adds	r2, r3, #1
    b0c2:	428a      	cmp	r2, r1
				uint32_t tail = tx_buffer_tail;
    b0c4:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b0c6:	d203      	bcs.n	b0d0 <serial3_putchar.part.0+0xa0>
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
    b0c8:	2a27      	cmp	r2, #39	; 0x27
    b0ca:	d810      	bhi.n	b0ee <serial3_putchar.part.0+0xbe>
				tx_buffer_tail = tail;
    b0cc:	b2d1      	uxtb	r1, r2
    b0ce:	e001      	b.n	b0d4 <serial3_putchar.part.0+0xa4>
    b0d0:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b0d2:	460a      	mov	r2, r1
					n = tx_buffer[tail];
    b0d4:	f81b 3002 	ldrb.w	r3, [fp, r2]
    b0d8:	b2db      	uxtb	r3, r3
				UART2_D = n;
    b0da:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    b0dc:	7029      	strb	r1, [r5, #0]
    b0de:	e7c8      	b.n	b072 <serial3_putchar.part.0+0x42>
	while (tx_buffer_tail == head) {
    b0e0:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    b0e4:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    b0e6:	4b0a      	ldr	r3, [pc, #40]	; (b110 <serial3_putchar.part.0+0xe0>)
    b0e8:	b2ff      	uxtb	r7, r7
    b0ea:	551f      	strb	r7, [r3, r4]
    b0ec:	e7d6      	b.n	b09c <serial3_putchar.part.0+0x6c>
				tx_buffer_tail = tail;
    b0ee:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    b0f0:	4a08      	ldr	r2, [pc, #32]	; (b114 <serial3_putchar.part.0+0xe4>)
    b0f2:	3b27      	subs	r3, #39	; 0x27
    b0f4:	6812      	ldr	r2, [r2, #0]
    b0f6:	5cd3      	ldrb	r3, [r2, r3]
    b0f8:	b2db      	uxtb	r3, r3
    b0fa:	e7ee      	b.n	b0da <serial3_putchar.part.0+0xaa>
    b0fc:	1fffd4a0 	.word	0x1fffd4a0
    b100:	1fffd4d0 	.word	0x1fffd4d0
    b104:	1fff89f4 	.word	0x1fff89f4
    b108:	1fffd4d8 	.word	0x1fffd4d8
    b10c:	4006c000 	.word	0x4006c000
    b110:	1fffd4a8 	.word	0x1fffd4a8
    b114:	1fffd4d4 	.word	0x1fffd4d4
    b118:	1fffd4a4 	.word	0x1fffd4a4

0000b11c <serial3_begin>:
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    b11c:	4a1d      	ldr	r2, [pc, #116]	; (b194 <serial3_begin+0x78>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    b11e:	491e      	ldr	r1, [pc, #120]	; (b198 <serial3_begin+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    b120:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    b122:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    b126:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	transmitting = 0;
    b12a:	4d1c      	ldr	r5, [pc, #112]	; (b19c <serial3_begin+0x80>)
	rx_buffer_head = 0;
    b12c:	f8df 8070 	ldr.w	r8, [pc, #112]	; b1a0 <serial3_begin+0x84>
	rx_buffer_tail = 0;
    b130:	f8df 9070 	ldr.w	r9, [pc, #112]	; b1a4 <serial3_begin+0x88>
	tx_buffer_head = 0;
    b134:	4f1c      	ldr	r7, [pc, #112]	; (b1a8 <serial3_begin+0x8c>)
	tx_buffer_tail = 0;
    b136:	4e1d      	ldr	r6, [pc, #116]	; (b1ac <serial3_begin+0x90>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    b138:	6353      	str	r3, [r2, #52]	; 0x34
	rx_buffer_head = 0;
    b13a:	2300      	movs	r3, #0
    b13c:	f888 3000 	strb.w	r3, [r8]
	rx_buffer_tail = 0;
    b140:	2820      	cmp	r0, #32
    b142:	f889 3000 	strb.w	r3, [r9]
	tx_buffer_head = 0;
    b146:	703b      	strb	r3, [r7, #0]
	tx_buffer_tail = 0;
    b148:	7033      	strb	r3, [r6, #0]
	transmitting = 0;
    b14a:	702b      	strb	r3, [r5, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    b14c:	f240 3513 	movw	r5, #787	; 0x313
    b150:	608d      	str	r5, [r1, #8]
	UART2_BDH = (divisor >> 13) & 0x1F;
    b152:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    b156:	bf38      	it	cc
    b158:	2020      	movcc	r0, #32
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    b15a:	f44f 7551 	mov.w	r5, #836	; 0x344
    b15e:	60cd      	str	r5, [r1, #12]
	UART2_BDH = (divisor >> 13) & 0x1F;
    b160:	f3c0 3144 	ubfx	r1, r0, #13, #5
    b164:	7011      	strb	r1, [r2, #0]
	UART2_BDL = (divisor >> 5) & 0xFF;
    b166:	f3c0 1e47 	ubfx	lr, r0, #5, #8
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    b16a:	4c11      	ldr	r4, [pc, #68]	; (b1b0 <serial3_begin+0x94>)
	UART2_BDL = (divisor >> 5) & 0xFF;
    b16c:	f882 e001 	strb.w	lr, [r2, #1]
	UART2_C4 = divisor & 0x1F;
    b170:	f000 001f 	and.w	r0, r0, #31
	UART2_C2 = C2_TX_INACTIVE;
    b174:	212c      	movs	r1, #44	; 0x2c
	UART2_C4 = divisor & 0x1F;
    b176:	7290      	strb	r0, [r2, #10]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    b178:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
	UART2_C1 = 0;
    b17c:	7093      	strb	r3, [r2, #2]
	UART2_PFIFO = 0;
    b17e:	7413      	strb	r3, [r2, #16]
	UART2_C2 = C2_TX_INACTIVE;
    b180:	70d1      	strb	r1, [r2, #3]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    b182:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    b184:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    b188:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    b18c:	f8cc 3104 	str.w	r3, [ip, #260]	; 0x104
}
    b190:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b194:	40048000 	.word	0x40048000
    b198:	4004c000 	.word	0x4004c000
    b19c:	1fffd4a4 	.word	0x1fffd4a4
    b1a0:	1fffd494 	.word	0x1fffd494
    b1a4:	1fffd49c 	.word	0x1fffd49c
    b1a8:	1fffd4d0 	.word	0x1fffd4d0
    b1ac:	1fffd4d8 	.word	0x1fffd4d8
    b1b0:	e000e400 	.word	0xe000e400

0000b1b4 <serial3_format>:
	c = UART2_C1;
    b1b4:	4b21      	ldr	r3, [pc, #132]	; (b23c <serial3_format+0x88>)
	UART2_C1 = c;
    b1b6:	4921      	ldr	r1, [pc, #132]	; (b23c <serial3_format+0x88>)
	c = UART2_C1;
    b1b8:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    b1ba:	f000 0203 	and.w	r2, r0, #3
    b1be:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    b1c2:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    b1c4:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b1c6:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    b1ca:	bf48      	it	mi
    b1cc:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b1d0:	2a04      	cmp	r2, #4
	UART2_C1 = c;
    b1d2:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b1d4:	d103      	bne.n	b1de <serial3_format+0x2a>
    b1d6:	798b      	ldrb	r3, [r1, #6]
    b1d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b1dc:	718b      	strb	r3, [r1, #6]
	c = UART2_S2 & ~0x10;
    b1de:	4b17      	ldr	r3, [pc, #92]	; (b23c <serial3_format+0x88>)
	UART2_S2 = c;
    b1e0:	4a16      	ldr	r2, [pc, #88]	; (b23c <serial3_format+0x88>)
	c = UART2_S2 & ~0x10;
    b1e2:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    b1e4:	06c1      	lsls	r1, r0, #27
	c = UART2_S2 & ~0x10;
    b1e6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    b1ea:	bf48      	it	mi
    b1ec:	f043 0310 	orrmi.w	r3, r3, #16
	UART2_S2 = c;
    b1f0:	7153      	strb	r3, [r2, #5]
	c = UART2_C3 & ~0x10;
    b1f2:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    b1f4:	0682      	lsls	r2, r0, #26
	c = UART2_C3 & ~0x10;
    b1f6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART2_C3 = c;
    b1fa:	4a10      	ldr	r2, [pc, #64]	; (b23c <serial3_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    b1fc:	bf48      	it	mi
    b1fe:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    b202:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART2_C3 = c;
    b206:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    b208:	d010      	beq.n	b22c <serial3_format+0x78>
		c = UART2_C1;
    b20a:	7893      	ldrb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b20c:	490c      	ldr	r1, [pc, #48]	; (b240 <serial3_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    b20e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART2_C1 = c;
    b212:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b214:	7809      	ldrb	r1, [r1, #0]
    b216:	4b0b      	ldr	r3, [pc, #44]	; (b244 <serial3_format+0x90>)
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    b218:	4a0b      	ldr	r2, [pc, #44]	; (b248 <serial3_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b21a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    b21e:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b222:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    b224:	4909      	ldr	r1, [pc, #36]	; (b24c <serial3_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    b226:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    b228:	6011      	str	r1, [r2, #0]
    b22a:	4770      	bx	lr
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    b22c:	4b06      	ldr	r3, [pc, #24]	; (b248 <serial3_format+0x94>)
    b22e:	4a07      	ldr	r2, [pc, #28]	; (b24c <serial3_format+0x98>)
    b230:	6819      	ldr	r1, [r3, #0]
    b232:	4291      	cmp	r1, r2
    b234:	bf08      	it	eq
    b236:	6018      	streq	r0, [r3, #0]
}
    b238:	4770      	bx	lr
    b23a:	bf00      	nop
    b23c:	4006c000 	.word	0x4006c000
    b240:	1fff89f8 	.word	0x1fff89f8
    b244:	00015570 	.word	0x00015570
    b248:	1fffd4a0 	.word	0x1fffd4a0
    b24c:	42d800d4 	.word	0x42d800d4

0000b250 <serial3_end>:
{
    b250:	b538      	push	{r3, r4, r5, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b252:	4b13      	ldr	r3, [pc, #76]	; (b2a0 <serial3_end+0x50>)
    b254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b256:	04db      	lsls	r3, r3, #19
    b258:	d520      	bpl.n	b29c <serial3_end+0x4c>
	while (transmitting) yield();  // wait for buffered data to send
    b25a:	4c12      	ldr	r4, [pc, #72]	; (b2a4 <serial3_end+0x54>)
    b25c:	7823      	ldrb	r3, [r4, #0]
    b25e:	b123      	cbz	r3, b26a <serial3_end+0x1a>
    b260:	f001 f8dc 	bl	c41c <yield>
    b264:	7823      	ldrb	r3, [r4, #0]
    b266:	2b00      	cmp	r3, #0
    b268:	d1fa      	bne.n	b260 <serial3_end+0x10>
	UART2_C2 = 0;
    b26a:	4a0f      	ldr	r2, [pc, #60]	; (b2a8 <serial3_end+0x58>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b26c:	490f      	ldr	r1, [pc, #60]	; (b2ac <serial3_end+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    b26e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	UART2_C2 = 0;
    b272:	2300      	movs	r3, #0
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b274:	f240 1003 	movw	r0, #259	; 0x103
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    b278:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    b27c:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
	UART2_C2 = 0;
    b280:	70d3      	strb	r3, [r2, #3]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b282:	6088      	str	r0, [r1, #8]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b284:	60c8      	str	r0, [r1, #12]
	if (rts_pin) rts_deassert();
    b286:	490a      	ldr	r1, [pc, #40]	; (b2b0 <serial3_end+0x60>)
	rx_buffer_head = 0;
    b288:	4c0a      	ldr	r4, [pc, #40]	; (b2b4 <serial3_end+0x64>)
	rx_buffer_tail = 0;
    b28a:	480b      	ldr	r0, [pc, #44]	; (b2b8 <serial3_end+0x68>)
	if (rts_pin) rts_deassert();
    b28c:	6809      	ldr	r1, [r1, #0]
	UART2_S1;
    b28e:	7915      	ldrb	r5, [r2, #4]
	UART2_D; // clear leftover error status
    b290:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    b292:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    b294:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    b296:	b109      	cbz	r1, b29c <serial3_end+0x4c>
    b298:	2301      	movs	r3, #1
    b29a:	700b      	strb	r3, [r1, #0]
}
    b29c:	bd38      	pop	{r3, r4, r5, pc}
    b29e:	bf00      	nop
    b2a0:	40048000 	.word	0x40048000
    b2a4:	1fffd4a4 	.word	0x1fffd4a4
    b2a8:	4006c000 	.word	0x4006c000
    b2ac:	4004c000 	.word	0x4004c000
    b2b0:	1fffd450 	.word	0x1fffd450
    b2b4:	1fffd494 	.word	0x1fffd494
    b2b8:	1fffd49c 	.word	0x1fffd49c

0000b2bc <serial3_set_transmit_pin>:
	while (transmitting) ;
    b2bc:	4a0a      	ldr	r2, [pc, #40]	; (b2e8 <serial3_set_transmit_pin+0x2c>)
{
    b2be:	b538      	push	{r3, r4, r5, lr}
    b2c0:	4605      	mov	r5, r0
	while (transmitting) ;
    b2c2:	7813      	ldrb	r3, [r2, #0]
    b2c4:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    b2c8:	2b00      	cmp	r3, #0
    b2ca:	d1fa      	bne.n	b2c2 <serial3_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    b2cc:	2101      	movs	r1, #1
    b2ce:	4628      	mov	r0, r5
    b2d0:	f7ff f95e 	bl	a590 <pinMode>
	digitalWrite(pin, LOW);
    b2d4:	4621      	mov	r1, r4
    b2d6:	4628      	mov	r0, r5
    b2d8:	f7ff f926 	bl	a528 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    b2dc:	4a03      	ldr	r2, [pc, #12]	; (b2ec <serial3_set_transmit_pin+0x30>)
    b2de:	4b04      	ldr	r3, [pc, #16]	; (b2f0 <serial3_set_transmit_pin+0x34>)
    b2e0:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    b2e4:	601a      	str	r2, [r3, #0]
}
    b2e6:	bd38      	pop	{r3, r4, r5, pc}
    b2e8:	1fffd4a4 	.word	0x1fffd4a4
    b2ec:	00015570 	.word	0x00015570
    b2f0:	1fffd4a0 	.word	0x1fffd4a0

0000b2f4 <serial3_set_tx>:
	if (opendrain) pin |= 128;
    b2f4:	b109      	cbz	r1, b2fa <serial3_set_tx+0x6>
    b2f6:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    b2fa:	4a11      	ldr	r2, [pc, #68]	; (b340 <serial3_set_tx+0x4c>)
    b2fc:	7813      	ldrb	r3, [r2, #0]
    b2fe:	4283      	cmp	r3, r0
    b300:	d016      	beq.n	b330 <serial3_set_tx+0x3c>
{
    b302:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART2)) {
    b304:	4c0f      	ldr	r4, [pc, #60]	; (b344 <serial3_set_tx+0x50>)
    b306:	6b64      	ldr	r4, [r4, #52]	; 0x34
    b308:	04e4      	lsls	r4, r4, #19
    b30a:	d50e      	bpl.n	b32a <serial3_set_tx+0x36>
		switch (tx_pin_num & 127) {
    b30c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b310:	2b08      	cmp	r3, #8
    b312:	d102      	bne.n	b31a <serial3_set_tx+0x26>
			case 8:  CORE_PIN8_CONFIG = 0; break; // PTD3
    b314:	4b0c      	ldr	r3, [pc, #48]	; (b348 <serial3_set_tx+0x54>)
    b316:	2400      	movs	r4, #0
    b318:	60dc      	str	r4, [r3, #12]
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    b31a:	2900      	cmp	r1, #0
		switch (pin & 127) {
    b31c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    b320:	bf14      	ite	ne
    b322:	2160      	movne	r1, #96	; 0x60
    b324:	2144      	moveq	r1, #68	; 0x44
		switch (pin & 127) {
    b326:	2b08      	cmp	r3, #8
    b328:	d003      	beq.n	b332 <serial3_set_tx+0x3e>
	tx_pin_num = pin;
    b32a:	7010      	strb	r0, [r2, #0]
}
    b32c:	bc10      	pop	{r4}
    b32e:	4770      	bx	lr
    b330:	4770      	bx	lr
			case 8:  CORE_PIN8_CONFIG = cfg | PORT_PCR_MUX(3); break;
    b332:	4b05      	ldr	r3, [pc, #20]	; (b348 <serial3_set_tx+0x54>)
    b334:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    b338:	60d9      	str	r1, [r3, #12]
	tx_pin_num = pin;
    b33a:	7010      	strb	r0, [r2, #0]
}
    b33c:	bc10      	pop	{r4}
    b33e:	4770      	bx	lr
    b340:	1fff89f8 	.word	0x1fff89f8
    b344:	40048000 	.word	0x40048000
    b348:	4004c000 	.word	0x4004c000

0000b34c <serial3_set_rx>:
}
    b34c:	4770      	bx	lr
    b34e:	bf00      	nop

0000b350 <serial3_set_rts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b350:	4b0d      	ldr	r3, [pc, #52]	; (b388 <serial3_set_rts+0x38>)
    b352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b354:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    b358:	d013      	beq.n	b382 <serial3_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    b35a:	2821      	cmp	r0, #33	; 0x21
    b35c:	d903      	bls.n	b366 <serial3_set_rts+0x16>
		rts_pin = NULL;
    b35e:	4b0b      	ldr	r3, [pc, #44]	; (b38c <serial3_set_rts+0x3c>)
    b360:	2000      	movs	r0, #0
    b362:	6018      	str	r0, [r3, #0]
		return 0;
    b364:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    b366:	4b0a      	ldr	r3, [pc, #40]	; (b390 <serial3_set_rts+0x40>)
{
    b368:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    b36a:	4c08      	ldr	r4, [pc, #32]	; (b38c <serial3_set_rts+0x3c>)
    b36c:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    b370:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    b372:	2101      	movs	r1, #1
    b374:	f7ff f90c 	bl	a590 <pinMode>
		rts_assert();
    b378:	6823      	ldr	r3, [r4, #0]
    b37a:	2200      	movs	r2, #0
    b37c:	701a      	strb	r2, [r3, #0]
	return 1;
    b37e:	2001      	movs	r0, #1
}
    b380:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b382:	4618      	mov	r0, r3
}
    b384:	4770      	bx	lr
    b386:	bf00      	nop
    b388:	40048000 	.word	0x40048000
    b38c:	1fffd450 	.word	0x1fffd450
    b390:	00015570 	.word	0x00015570

0000b394 <serial3_set_cts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b394:	4b0c      	ldr	r3, [pc, #48]	; (b3c8 <serial3_set_cts+0x34>)
    b396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b398:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    b39c:	d012      	beq.n	b3c4 <serial3_set_cts+0x30>
	if (pin == 14) {
    b39e:	280e      	cmp	r0, #14
    b3a0:	d109      	bne.n	b3b6 <serial3_set_cts+0x22>
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    b3a2:	4b0a      	ldr	r3, [pc, #40]	; (b3cc <serial3_set_cts+0x38>)
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b3a4:	4a0a      	ldr	r2, [pc, #40]	; (b3d0 <serial3_set_cts+0x3c>)
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    b3a6:	f240 3102 	movw	r1, #770	; 0x302
    b3aa:	6059      	str	r1, [r3, #4]
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b3ac:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    b3ae:	2001      	movs	r0, #1
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b3b0:	4303      	orrs	r3, r0
    b3b2:	7353      	strb	r3, [r2, #13]
	return 1;
    b3b4:	4770      	bx	lr
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    b3b6:	4a06      	ldr	r2, [pc, #24]	; (b3d0 <serial3_set_cts+0x3c>)
    b3b8:	7b53      	ldrb	r3, [r2, #13]
    b3ba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    b3be:	2000      	movs	r0, #0
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    b3c0:	7353      	strb	r3, [r2, #13]
		return 0;
    b3c2:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b3c4:	4618      	mov	r0, r3
}
    b3c6:	4770      	bx	lr
    b3c8:	40048000 	.word	0x40048000
    b3cc:	4004c000 	.word	0x4004c000
    b3d0:	4006c000 	.word	0x4006c000

0000b3d4 <serial3_putchar>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b3d4:	4b03      	ldr	r3, [pc, #12]	; (b3e4 <serial3_putchar+0x10>)
    b3d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b3d8:	04db      	lsls	r3, r3, #19
    b3da:	d501      	bpl.n	b3e0 <serial3_putchar+0xc>
    b3dc:	f7ff be28 	b.w	b030 <serial3_putchar.part.0>
}
    b3e0:	4770      	bx	lr
    b3e2:	bf00      	nop
    b3e4:	40048000 	.word	0x40048000

0000b3e8 <serial3_write>:

void serial3_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    b3e8:	b179      	cbz	r1, b40a <serial3_write+0x22>
{
    b3ea:	b570      	push	{r4, r5, r6, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b3ec:	4e07      	ldr	r6, [pc, #28]	; (b40c <serial3_write+0x24>)
    b3ee:	4604      	mov	r4, r0
    b3f0:	1845      	adds	r5, r0, r1
    b3f2:	6b73      	ldr	r3, [r6, #52]	; 0x34
    b3f4:	04db      	lsls	r3, r3, #19
	while (count-- > 0) serial3_putchar(*p++);
    b3f6:	f104 0401 	add.w	r4, r4, #1
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b3fa:	d503      	bpl.n	b404 <serial3_write+0x1c>
    b3fc:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    b400:	f7ff fe16 	bl	b030 <serial3_putchar.part.0>
	while (count-- > 0) serial3_putchar(*p++);
    b404:	42ac      	cmp	r4, r5
    b406:	d1f4      	bne.n	b3f2 <serial3_write+0xa>
}
    b408:	bd70      	pop	{r4, r5, r6, pc}
    b40a:	4770      	bx	lr
    b40c:	40048000 	.word	0x40048000

0000b410 <serial3_flush>:

void serial3_flush(void)
{
    b410:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    b412:	4c04      	ldr	r4, [pc, #16]	; (b424 <serial3_flush+0x14>)
    b414:	7823      	ldrb	r3, [r4, #0]
    b416:	b123      	cbz	r3, b422 <serial3_flush+0x12>
    b418:	f001 f800 	bl	c41c <yield>
    b41c:	7823      	ldrb	r3, [r4, #0]
    b41e:	2b00      	cmp	r3, #0
    b420:	d1fa      	bne.n	b418 <serial3_flush+0x8>
}
    b422:	bd10      	pop	{r4, pc}
    b424:	1fffd4a4 	.word	0x1fffd4a4

0000b428 <serial3_write_buffer_free>:

int serial3_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    b428:	4a08      	ldr	r2, [pc, #32]	; (b44c <serial3_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    b42a:	4b09      	ldr	r3, [pc, #36]	; (b450 <serial3_write_buffer_free+0x28>)
	head = tx_buffer_head;
    b42c:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    b42e:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b430:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    b432:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    b434:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b436:	d202      	bcs.n	b43e <serial3_write_buffer_free+0x16>
	return tail - head - 1;
    b438:	3b01      	subs	r3, #1
    b43a:	1a18      	subs	r0, r3, r0
}
    b43c:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b43e:	4a05      	ldr	r2, [pc, #20]	; (b454 <serial3_write_buffer_free+0x2c>)
    b440:	6812      	ldr	r2, [r2, #0]
    b442:	3a01      	subs	r2, #1
    b444:	4413      	add	r3, r2
    b446:	1a18      	subs	r0, r3, r0
    b448:	4770      	bx	lr
    b44a:	bf00      	nop
    b44c:	1fffd4d0 	.word	0x1fffd4d0
    b450:	1fffd4d8 	.word	0x1fffd4d8
    b454:	1fff89f4 	.word	0x1fff89f4

0000b458 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    b458:	4a06      	ldr	r2, [pc, #24]	; (b474 <serial3_available+0x1c>)
	tail = rx_buffer_tail;
    b45a:	4b07      	ldr	r3, [pc, #28]	; (b478 <serial3_available+0x20>)
	head = rx_buffer_head;
    b45c:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    b45e:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    b460:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    b462:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    b464:	bf3c      	itt	cc
    b466:	4a05      	ldrcc	r2, [pc, #20]	; (b47c <serial3_available+0x24>)
    b468:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    b46a:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    b46c:	bf38      	it	cc
    b46e:	189b      	addcc	r3, r3, r2
    b470:	1a18      	subs	r0, r3, r0
}
    b472:	4770      	bx	lr
    b474:	1fffd494 	.word	0x1fffd494
    b478:	1fffd49c 	.word	0x1fffd49c
    b47c:	1fff89f0 	.word	0x1fff89f0

0000b480 <serial3_getchar>:
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    b480:	4b1b      	ldr	r3, [pc, #108]	; (b4f0 <serial3_getchar+0x70>)
	tail = rx_buffer_tail;
    b482:	491c      	ldr	r1, [pc, #112]	; (b4f4 <serial3_getchar+0x74>)
	head = rx_buffer_head;
    b484:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    b486:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    b488:	429a      	cmp	r2, r3
    b48a:	d02e      	beq.n	b4ea <serial3_getchar+0x6a>
{
    b48c:	b510      	push	{r4, lr}
    b48e:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b492:	4a19      	ldr	r2, [pc, #100]	; (b4f8 <serial3_getchar+0x78>)
    b494:	b2d8      	uxtb	r0, r3
    b496:	6812      	ldr	r2, [r2, #0]
    b498:	1c43      	adds	r3, r0, #1
    b49a:	429a      	cmp	r2, r3
    b49c:	d919      	bls.n	b4d2 <serial3_getchar+0x52>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    b49e:	2b3f      	cmp	r3, #63	; 0x3f
    b4a0:	d81b      	bhi.n	b4da <serial3_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    b4a2:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    b4a6:	4815      	ldr	r0, [pc, #84]	; (b4fc <serial3_getchar+0x7c>)
    b4a8:	5cc0      	ldrb	r0, [r0, r3]
    b4aa:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    b4ac:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    b4b0:	4913      	ldr	r1, [pc, #76]	; (b500 <serial3_getchar+0x80>)
    b4b2:	6809      	ldr	r1, [r1, #0]
    b4b4:	b161      	cbz	r1, b4d0 <serial3_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    b4b6:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    b4b8:	bf3c      	itt	cc
    b4ba:	4472      	addcc	r2, lr
    b4bc:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    b4be:	4a11      	ldr	r2, [pc, #68]	; (b504 <serial3_getchar+0x84>)
    b4c0:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    b4c2:	bf28      	it	cs
    b4c4:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    b4c8:	429a      	cmp	r2, r3
    b4ca:	d301      	bcc.n	b4d0 <serial3_getchar+0x50>
    b4cc:	2300      	movs	r3, #0
    b4ce:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    b4d0:	bd10      	pop	{r4, pc}
    b4d2:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b4d6:	4663      	mov	r3, ip
    b4d8:	e7e5      	b.n	b4a6 <serial3_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b4da:	4c0b      	ldr	r4, [pc, #44]	; (b508 <serial3_getchar+0x88>)
    b4dc:	383f      	subs	r0, #63	; 0x3f
    b4de:	6824      	ldr	r4, [r4, #0]
    b4e0:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    b4e2:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b4e6:	b2c0      	uxtb	r0, r0
    b4e8:	e7e0      	b.n	b4ac <serial3_getchar+0x2c>
	if (head == tail) return -1;
    b4ea:	f04f 30ff 	mov.w	r0, #4294967295
}
    b4ee:	4770      	bx	lr
    b4f0:	1fffd494 	.word	0x1fffd494
    b4f4:	1fffd49c 	.word	0x1fffd49c
    b4f8:	1fff89f0 	.word	0x1fff89f0
    b4fc:	1fffd454 	.word	0x1fffd454
    b500:	1fffd450 	.word	0x1fffd450
    b504:	1fff89ec 	.word	0x1fff89ec
    b508:	1fffd498 	.word	0x1fffd498

0000b50c <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    b50c:	4a0d      	ldr	r2, [pc, #52]	; (b544 <serial3_peek+0x38>)
	tail = rx_buffer_tail;
    b50e:	4b0e      	ldr	r3, [pc, #56]	; (b548 <serial3_peek+0x3c>)
	head = rx_buffer_head;
    b510:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    b512:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    b514:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    b516:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    b518:	d011      	beq.n	b53e <serial3_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b51a:	490c      	ldr	r1, [pc, #48]	; (b54c <serial3_peek+0x40>)
    b51c:	6809      	ldr	r1, [r1, #0]
    b51e:	1c53      	adds	r3, r2, #1
    b520:	4299      	cmp	r1, r3
    b522:	d907      	bls.n	b534 <serial3_peek+0x28>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    b524:	2b3f      	cmp	r3, #63	; 0x3f
    b526:	d906      	bls.n	b536 <serial3_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b528:	4b09      	ldr	r3, [pc, #36]	; (b550 <serial3_peek+0x44>)
    b52a:	3a3f      	subs	r2, #63	; 0x3f
    b52c:	681b      	ldr	r3, [r3, #0]
    b52e:	5c98      	ldrb	r0, [r3, r2]
    b530:	b2c0      	uxtb	r0, r0
    b532:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b534:	2300      	movs	r3, #0
		return rx_buffer[tail];
    b536:	4a07      	ldr	r2, [pc, #28]	; (b554 <serial3_peek+0x48>)
    b538:	5cd0      	ldrb	r0, [r2, r3]
    b53a:	b2c0      	uxtb	r0, r0
    b53c:	4770      	bx	lr
	if (head == tail) return -1;
    b53e:	f04f 30ff 	mov.w	r0, #4294967295
}
    b542:	4770      	bx	lr
    b544:	1fffd494 	.word	0x1fffd494
    b548:	1fffd49c 	.word	0x1fffd49c
    b54c:	1fff89f0 	.word	0x1fff89f0
    b550:	1fffd498 	.word	0x1fffd498
    b554:	1fffd454 	.word	0x1fffd454

0000b558 <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    b558:	4b05      	ldr	r3, [pc, #20]	; (b570 <serial3_clear+0x18>)
	if (rts_pin) rts_assert();
    b55a:	4a06      	ldr	r2, [pc, #24]	; (b574 <serial3_clear+0x1c>)
	rx_buffer_head = rx_buffer_tail;
    b55c:	781b      	ldrb	r3, [r3, #0]
    b55e:	4906      	ldr	r1, [pc, #24]	; (b578 <serial3_clear+0x20>)
	if (rts_pin) rts_assert();
    b560:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    b562:	b2db      	uxtb	r3, r3
    b564:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    b566:	b10a      	cbz	r2, b56c <serial3_clear+0x14>
    b568:	2300      	movs	r3, #0
    b56a:	7013      	strb	r3, [r2, #0]
}
    b56c:	4770      	bx	lr
    b56e:	bf00      	nop
    b570:	1fffd49c 	.word	0x1fffd49c
    b574:	1fffd450 	.word	0x1fffd450
    b578:	1fffd494 	.word	0x1fffd494

0000b57c <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    b57c:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    b57e:	4b3a      	ldr	r3, [pc, #232]	; (b668 <uart2_status_isr+0xec>)
    b580:	791a      	ldrb	r2, [r3, #4]
    b582:	0695      	lsls	r5, r2, #26
    b584:	d524      	bpl.n	b5d0 <uart2_status_isr+0x54>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    b586:	4d39      	ldr	r5, [pc, #228]	; (b66c <uart2_status_isr+0xf0>)
		if (head >= rx_buffer_total_size_) head = 0;
    b588:	4939      	ldr	r1, [pc, #228]	; (b670 <uart2_status_isr+0xf4>)
			n = UART2_D;
    b58a:	79db      	ldrb	r3, [r3, #7]
		head = rx_buffer_head + 1;
    b58c:	782a      	ldrb	r2, [r5, #0]
		if (head >= rx_buffer_total_size_) head = 0;
    b58e:	680c      	ldr	r4, [r1, #0]
			n = UART2_D;
    b590:	b2d8      	uxtb	r0, r3
		head = rx_buffer_head + 1;
    b592:	1c53      	adds	r3, r2, #1
		if (head >= rx_buffer_total_size_) head = 0;
    b594:	429c      	cmp	r4, r3
		head = rx_buffer_head + 1;
    b596:	b2d2      	uxtb	r2, r2
		if (head >= rx_buffer_total_size_) head = 0;
    b598:	d831      	bhi.n	b5fe <uart2_status_isr+0x82>
		if (head != rx_buffer_tail) {
    b59a:	4b36      	ldr	r3, [pc, #216]	; (b674 <uart2_status_isr+0xf8>)
    b59c:	781a      	ldrb	r2, [r3, #0]
    b59e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b5a2:	b122      	cbz	r2, b5ae <uart2_status_isr+0x32>
    b5a4:	2200      	movs	r2, #0
    b5a6:	4613      	mov	r3, r2
			if (head < SERIAL3_RX_BUFFER_SIZE) {
				rx_buffer[head] = n;
    b5a8:	4933      	ldr	r1, [pc, #204]	; (b678 <uart2_status_isr+0xfc>)
    b5aa:	54c8      	strb	r0, [r1, r3]
			} else {
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
			}

			rx_buffer_head = head;
    b5ac:	702a      	strb	r2, [r5, #0]
		}
		if (rts_pin) {
    b5ae:	4933      	ldr	r1, [pc, #204]	; (b67c <uart2_status_isr+0x100>)
    b5b0:	6809      	ldr	r1, [r1, #0]
    b5b2:	b169      	cbz	r1, b5d0 <uart2_status_isr+0x54>
			int avail;
			tail = tx_buffer_tail;
    b5b4:	4a32      	ldr	r2, [pc, #200]	; (b680 <uart2_status_isr+0x104>)
    b5b6:	7810      	ldrb	r0, [r2, #0]
			if (head >= tail) avail = head - tail;
    b5b8:	4298      	cmp	r0, r3
			tail = tx_buffer_tail;
    b5ba:	b2c2      	uxtb	r2, r0
			else avail = rx_buffer_total_size_ + head - tail;
    b5bc:	bf8a      	itet	hi
    b5be:	1aa2      	subhi	r2, r4, r2
			if (head >= tail) avail = head - tail;
    b5c0:	1a9b      	subls	r3, r3, r2
			else avail = rx_buffer_total_size_ + head - tail;
    b5c2:	189b      	addhi	r3, r3, r2
			if (avail >= rts_high_watermark_) rts_deassert();
    b5c4:	4a2f      	ldr	r2, [pc, #188]	; (b684 <uart2_status_isr+0x108>)
    b5c6:	6812      	ldr	r2, [r2, #0]
    b5c8:	429a      	cmp	r2, r3
    b5ca:	bf9c      	itt	ls
    b5cc:	2301      	movls	r3, #1
    b5ce:	700b      	strbls	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    b5d0:	4a25      	ldr	r2, [pc, #148]	; (b668 <uart2_status_isr+0xec>)
    b5d2:	78d3      	ldrb	r3, [r2, #3]
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b5d4:	061c      	lsls	r4, r3, #24
	c = UART2_C2;
    b5d6:	b2d9      	uxtb	r1, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b5d8:	d41e      	bmi.n	b618 <uart2_status_isr+0x9c>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    b5da:	064a      	lsls	r2, r1, #25
    b5dc:	d50d      	bpl.n	b5fa <uart2_status_isr+0x7e>
    b5de:	4b22      	ldr	r3, [pc, #136]	; (b668 <uart2_status_isr+0xec>)
    b5e0:	791b      	ldrb	r3, [r3, #4]
    b5e2:	065b      	lsls	r3, r3, #25
    b5e4:	d509      	bpl.n	b5fa <uart2_status_isr+0x7e>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    b5e6:	4b28      	ldr	r3, [pc, #160]	; (b688 <uart2_status_isr+0x10c>)
		transmitting = 0;
    b5e8:	4928      	ldr	r1, [pc, #160]	; (b68c <uart2_status_isr+0x110>)
		if (transmit_pin) transmit_deassert();
    b5ea:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    b5ec:	2200      	movs	r2, #0
    b5ee:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    b5f0:	b103      	cbz	r3, b5f4 <uart2_status_isr+0x78>
    b5f2:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART2_C3 = reg;
			__enable_irq();
		}
		#endif
		UART2_C2 = C2_TX_INACTIVE;
    b5f4:	4b1c      	ldr	r3, [pc, #112]	; (b668 <uart2_status_isr+0xec>)
    b5f6:	222c      	movs	r2, #44	; 0x2c
    b5f8:	70da      	strb	r2, [r3, #3]
	}
}
    b5fa:	bc30      	pop	{r4, r5}
    b5fc:	4770      	bx	lr
		if (head != rx_buffer_tail) {
    b5fe:	491d      	ldr	r1, [pc, #116]	; (b674 <uart2_status_isr+0xf8>)
    b600:	7809      	ldrb	r1, [r1, #0]
    b602:	4299      	cmp	r1, r3
    b604:	d0d3      	beq.n	b5ae <uart2_status_isr+0x32>
			if (head < SERIAL3_RX_BUFFER_SIZE) {
    b606:	2b3f      	cmp	r3, #63	; 0x3f
    b608:	d92c      	bls.n	b664 <uart2_status_isr+0xe8>
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
    b60a:	4921      	ldr	r1, [pc, #132]	; (b690 <uart2_status_isr+0x114>)
    b60c:	3a3f      	subs	r2, #63	; 0x3f
    b60e:	6809      	ldr	r1, [r1, #0]
    b610:	5488      	strb	r0, [r1, r2]
			rx_buffer_head = head;
    b612:	b2da      	uxtb	r2, r3
    b614:	702a      	strb	r2, [r5, #0]
    b616:	e7ca      	b.n	b5ae <uart2_status_isr+0x32>
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b618:	7913      	ldrb	r3, [r2, #4]
    b61a:	0618      	lsls	r0, r3, #24
    b61c:	d5dd      	bpl.n	b5da <uart2_status_isr+0x5e>
		head = tx_buffer_head;
    b61e:	4b1d      	ldr	r3, [pc, #116]	; (b694 <uart2_status_isr+0x118>)
		tail = tx_buffer_tail;
    b620:	4817      	ldr	r0, [pc, #92]	; (b680 <uart2_status_isr+0x104>)
		head = tx_buffer_head;
    b622:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    b624:	7803      	ldrb	r3, [r0, #0]
		if (head == tail) {
    b626:	429d      	cmp	r5, r3
		tail = tx_buffer_tail;
    b628:	b2dc      	uxtb	r4, r3
		if (head == tail) {
    b62a:	d008      	beq.n	b63e <uart2_status_isr+0xc2>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b62c:	4a1a      	ldr	r2, [pc, #104]	; (b698 <uart2_status_isr+0x11c>)
    b62e:	6812      	ldr	r2, [r2, #0]
    b630:	1c63      	adds	r3, r4, #1
    b632:	429a      	cmp	r2, r3
    b634:	d906      	bls.n	b644 <uart2_status_isr+0xc8>
			if (tail < SERIAL3_TX_BUFFER_SIZE) {
    b636:	2b27      	cmp	r3, #39	; 0x27
    b638:	d80d      	bhi.n	b656 <uart2_status_isr+0xda>
			tx_buffer_tail = tail;
    b63a:	b2da      	uxtb	r2, r3
    b63c:	e004      	b.n	b648 <uart2_status_isr+0xcc>
			UART2_C2 = C2_TX_COMPLETING;
    b63e:	236c      	movs	r3, #108	; 0x6c
    b640:	70d3      	strb	r3, [r2, #3]
    b642:	e7ca      	b.n	b5da <uart2_status_isr+0x5e>
    b644:	2200      	movs	r2, #0
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b646:	4613      	mov	r3, r2
				n = tx_buffer[tail];
    b648:	4c14      	ldr	r4, [pc, #80]	; (b69c <uart2_status_isr+0x120>)
    b64a:	5ce3      	ldrb	r3, [r4, r3]
    b64c:	b2db      	uxtb	r3, r3
			UART2_D = n;
    b64e:	4c06      	ldr	r4, [pc, #24]	; (b668 <uart2_status_isr+0xec>)
    b650:	71e3      	strb	r3, [r4, #7]
			tx_buffer_tail = tail;
    b652:	7002      	strb	r2, [r0, #0]
    b654:	e7c1      	b.n	b5da <uart2_status_isr+0x5e>
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    b656:	4a12      	ldr	r2, [pc, #72]	; (b6a0 <uart2_status_isr+0x124>)
    b658:	3c27      	subs	r4, #39	; 0x27
    b65a:	6815      	ldr	r5, [r2, #0]
			tx_buffer_tail = tail;
    b65c:	b2da      	uxtb	r2, r3
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    b65e:	5d2b      	ldrb	r3, [r5, r4]
    b660:	b2db      	uxtb	r3, r3
    b662:	e7f4      	b.n	b64e <uart2_status_isr+0xd2>
			rx_buffer_head = head;
    b664:	b2da      	uxtb	r2, r3
    b666:	e79f      	b.n	b5a8 <uart2_status_isr+0x2c>
    b668:	4006c000 	.word	0x4006c000
    b66c:	1fffd494 	.word	0x1fffd494
    b670:	1fff89f0 	.word	0x1fff89f0
    b674:	1fffd49c 	.word	0x1fffd49c
    b678:	1fffd454 	.word	0x1fffd454
    b67c:	1fffd450 	.word	0x1fffd450
    b680:	1fffd4d8 	.word	0x1fffd4d8
    b684:	1fff89e8 	.word	0x1fff89e8
    b688:	1fffd4a0 	.word	0x1fffd4a0
    b68c:	1fffd4a4 	.word	0x1fffd4a4
    b690:	1fffd498 	.word	0x1fffd498
    b694:	1fffd4d0 	.word	0x1fffd4d0
    b698:	1fff89f4 	.word	0x1fff89f4
    b69c:	1fffd4a8 	.word	0x1fffd4a8
    b6a0:	1fffd4d4 	.word	0x1fffd4d4

0000b6a4 <serial3_add_memory_for_read>:

void serial3_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    b6a4:	4b09      	ldr	r3, [pc, #36]	; (b6cc <serial3_add_memory_for_read+0x28>)
{
    b6a6:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    b6a8:	6018      	str	r0, [r3, #0]
	if (buffer) {
    b6aa:	b160      	cbz	r0, b6c6 <serial3_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE + length;
    b6ac:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    b6b0:	4b07      	ldr	r3, [pc, #28]	; (b6d0 <serial3_add_memory_for_read+0x2c>)
    b6b2:	4808      	ldr	r0, [pc, #32]	; (b6d4 <serial3_add_memory_for_read+0x30>)
    b6b4:	f101 021a 	add.w	r2, r1, #26
    b6b8:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    b6ba:	4b07      	ldr	r3, [pc, #28]	; (b6d8 <serial3_add_memory_for_read+0x34>)
    b6bc:	6004      	str	r4, [r0, #0]
    b6be:	3128      	adds	r1, #40	; 0x28
}
    b6c0:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    b6c2:	6019      	str	r1, [r3, #0]
}
    b6c4:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
    b6c6:	2440      	movs	r4, #64	; 0x40
    b6c8:	e7f2      	b.n	b6b0 <serial3_add_memory_for_read+0xc>
    b6ca:	bf00      	nop
    b6cc:	1fffd498 	.word	0x1fffd498
    b6d0:	1fff89ec 	.word	0x1fff89ec
    b6d4:	1fff89f0 	.word	0x1fff89f0
    b6d8:	1fff89e8 	.word	0x1fff89e8

0000b6dc <serial3_add_memory_for_write>:

void serial3_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    b6dc:	4b05      	ldr	r3, [pc, #20]	; (b6f4 <serial3_add_memory_for_write+0x18>)
    b6de:	6018      	str	r0, [r3, #0]
	if (buffer) {
    b6e0:	b118      	cbz	r0, b6ea <serial3_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE + length;
    b6e2:	4b05      	ldr	r3, [pc, #20]	; (b6f8 <serial3_add_memory_for_write+0x1c>)
    b6e4:	3128      	adds	r1, #40	; 0x28
    b6e6:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
	} 
}
    b6e8:	4770      	bx	lr
    b6ea:	4b03      	ldr	r3, [pc, #12]	; (b6f8 <serial3_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
    b6ec:	2128      	movs	r1, #40	; 0x28
    b6ee:	6019      	str	r1, [r3, #0]
}
    b6f0:	4770      	bx	lr
    b6f2:	bf00      	nop
    b6f4:	1fffd4d4 	.word	0x1fffd4d4
    b6f8:	1fff89f4 	.word	0x1fff89f4

0000b6fc <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    b6fc:	4770      	bx	lr
    b6fe:	bf00      	nop

0000b700 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    b700:	4770      	bx	lr
    b702:	bf00      	nop

0000b704 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    b704:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b706:	2b03      	cmp	r3, #3
    b708:	d817      	bhi.n	b73a <usb_rx+0x36>
	__disable_irq();
    b70a:	b672      	cpsid	i
	ret = rx_first[endpoint];
    b70c:	490c      	ldr	r1, [pc, #48]	; (b740 <usb_rx+0x3c>)
    b70e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    b712:	b180      	cbz	r0, b736 <usb_rx+0x32>
{
    b714:	b410      	push	{r4}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b716:	4c0b      	ldr	r4, [pc, #44]	; (b744 <usb_rx+0x40>)
    b718:	f8b0 c000 	ldrh.w	ip, [r0]
    b71c:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    b720:	eba2 020c 	sub.w	r2, r2, ip
		rx_first[endpoint] = ret->next;
    b724:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b728:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b72c:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    b730:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    b732:	bc10      	pop	{r4}
    b734:	4770      	bx	lr
	__enable_irq();
    b736:	b662      	cpsie	i
}
    b738:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b73a:	2000      	movs	r0, #0
    b73c:	4770      	bx	lr
    b73e:	bf00      	nop
    b740:	1fffd56c 	.word	0x1fffd56c
    b744:	1fffd5bc 	.word	0x1fffd5bc

0000b748 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    b748:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b74a:	2803      	cmp	r0, #3
    b74c:	d80b      	bhi.n	b766 <usb_tx_packet_count+0x1e>
	__disable_irq();
    b74e:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    b750:	4b07      	ldr	r3, [pc, #28]	; (b770 <usb_tx_packet_count+0x28>)
    b752:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    b756:	b143      	cbz	r3, b76a <usb_tx_packet_count+0x22>
	uint32_t count=0;
    b758:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    b75a:	685b      	ldr	r3, [r3, #4]
    b75c:	3001      	adds	r0, #1
    b75e:	2b00      	cmp	r3, #0
    b760:	d1fb      	bne.n	b75a <usb_tx_packet_count+0x12>
	__enable_irq();
    b762:	b662      	cpsie	i
	return count;
    b764:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b766:	2000      	movs	r0, #0
}
    b768:	4770      	bx	lr
	uint32_t count=0;
    b76a:	4618      	mov	r0, r3
    b76c:	e7f9      	b.n	b762 <usb_tx_packet_count+0x1a>
    b76e:	bf00      	nop
    b770:	1fffd594 	.word	0x1fffd594

0000b774 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    b774:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    b776:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    b778:	4a19      	ldr	r2, [pc, #100]	; (b7e0 <usb_rx_memory+0x6c>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    b77a:	4c1a      	ldr	r4, [pc, #104]	; (b7e4 <usb_rx_memory+0x70>)
	__disable_irq();
    b77c:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b77e:	f812 1b01 	ldrb.w	r1, [r2], #1
    b782:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b784:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b788:	d505      	bpl.n	b796 <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b78a:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    b78e:	b161      	cbz	r1, b7aa <usb_rx_memory+0x36>
			if (table[index(i, RX, ODD)].desc == 0) {
    b790:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    b794:	b1b9      	cbz	r1, b7c6 <usb_rx_memory+0x52>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    b796:	3304      	adds	r3, #4
    b798:	2b14      	cmp	r3, #20
    b79a:	d1f0      	bne.n	b77e <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    b79c:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    b79e:	4b12      	ldr	r3, [pc, #72]	; (b7e8 <usb_rx_memory+0x74>)
    b7a0:	2200      	movs	r2, #0
    b7a2:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    b7a4:	bc10      	pop	{r4}
	usb_free(packet);
    b7a6:	f000 bc9d 	b.w	c0e4 <usb_free>
				usb_rx_memory_needed--;
    b7aa:	490f      	ldr	r1, [pc, #60]	; (b7e8 <usb_rx_memory+0x74>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    b7ac:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    b7b0:	3008      	adds	r0, #8
    b7b2:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    b7b4:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    b7b6:	480d      	ldr	r0, [pc, #52]	; (b7ec <usb_rx_memory+0x78>)
    b7b8:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    b7bc:	3a01      	subs	r2, #1
    b7be:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    b7c0:	b662      	cpsie	i
}
    b7c2:	bc10      	pop	{r4}
    b7c4:	4770      	bx	lr
				usb_rx_memory_needed--;
    b7c6:	4a08      	ldr	r2, [pc, #32]	; (b7e8 <usb_rx_memory+0x74>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b7c8:	4909      	ldr	r1, [pc, #36]	; (b7f0 <usb_rx_memory+0x7c>)
				table[index(i, RX, ODD)].addr = packet->buf;
    b7ca:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    b7ce:	3008      	adds	r0, #8
    b7d0:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    b7d2:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b7d4:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    b7d8:	3b01      	subs	r3, #1
    b7da:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    b7dc:	b662      	cpsie	i
				return;
    b7de:	e7f0      	b.n	b7c2 <usb_rx_memory+0x4e>
    b7e0:	000156fc 	.word	0x000156fc
    b7e4:	1fff8000 	.word	0x1fff8000
    b7e8:	1fffd5c4 	.word	0x1fffd5c4
    b7ec:	00400088 	.word	0x00400088
    b7f0:	004000c8 	.word	0x004000c8

0000b7f4 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    b7f4:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    b7f6:	2a03      	cmp	r2, #3
    b7f8:	d80e      	bhi.n	b818 <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    b7fa:	4b1c      	ldr	r3, [pc, #112]	; (b86c <usb_tx+0x78>)
    b7fc:	0140      	lsls	r0, r0, #5
    b7fe:	f040 0010 	orr.w	r0, r0, #16
{
    b802:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    b804:	4403      	add	r3, r0
	__disable_irq();
    b806:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    b808:	4c19      	ldr	r4, [pc, #100]	; (b870 <usb_tx+0x7c>)
    b80a:	5ca0      	ldrb	r0, [r4, r2]
    b80c:	2803      	cmp	r0, #3
    b80e:	d81c      	bhi.n	b84a <usb_tx+0x56>
    b810:	e8df f000 	tbb	[pc, r0]
    b814:	18031513 	.word	0x18031513
    b818:	4770      	bx	lr
    b81a:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    b81c:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b81e:	f013 0f08 	tst.w	r3, #8
    b822:	8808      	ldrh	r0, [r1, #0]
    b824:	bf14      	ite	ne
    b826:	22c8      	movne	r2, #200	; 0xc8
    b828:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    b82a:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b82c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    b830:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b832:	601a      	str	r2, [r3, #0]
	__enable_irq();
    b834:	b662      	cpsie	i
}
    b836:	bc10      	pop	{r4}
    b838:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    b83a:	2003      	movs	r0, #3
    b83c:	e7ee      	b.n	b81c <usb_tx+0x28>
		b++;
    b83e:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    b840:	2002      	movs	r0, #2
		break;
    b842:	e7eb      	b.n	b81c <usb_tx+0x28>
		b++;
    b844:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    b846:	2004      	movs	r0, #4
		break;
    b848:	e7e8      	b.n	b81c <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    b84a:	4b0a      	ldr	r3, [pc, #40]	; (b874 <usb_tx+0x80>)
    b84c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b850:	b138      	cbz	r0, b862 <usb_tx+0x6e>
			tx_last[endpoint]->next = packet;
    b852:	4b09      	ldr	r3, [pc, #36]	; (b878 <usb_tx+0x84>)
    b854:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b858:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    b85a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    b85e:	b662      	cpsie	i
		return;
    b860:	e7e9      	b.n	b836 <usb_tx+0x42>
			tx_first[endpoint] = packet;
    b862:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    b866:	4b04      	ldr	r3, [pc, #16]	; (b878 <usb_tx+0x84>)
    b868:	e7f7      	b.n	b85a <usb_tx+0x66>
    b86a:	bf00      	nop
    b86c:	1fff8000 	.word	0x1fff8000
    b870:	1fffd5b4 	.word	0x1fffd5b4
    b874:	1fffd594 	.word	0x1fffd594
    b878:	1fffd5a4 	.word	0x1fffd5a4

0000b87c <_reboot_Teensyduino_>:


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    b87c:	be00      	bkpt	0x0000
    b87e:	bf00      	nop

0000b880 <usb_isr>:
}



void usb_isr(void)
{
    b880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    b884:	f8df a2cc 	ldr.w	sl, [pc, #716]	; bb54 <usb_isr+0x2d4>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b888:	f8df b2cc 	ldr.w	fp, [pc, #716]	; bb58 <usb_isr+0x2d8>
{
    b88c:	b085      	sub	sp, #20
    b88e:	e03d      	b.n	b90c <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    b890:	4db2      	ldr	r5, [pc, #712]	; (bb5c <usb_isr+0x2dc>)
    b892:	089e      	lsrs	r6, r3, #2
    b894:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    b898:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    b89a:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    b89c:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    b8a0:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    b8a2:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    b8a6:	f040 80b8 	bne.w	ba1a <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    b8aa:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    b8ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    b8b2:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    b8b4:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    b8b8:	f000 80a7 	beq.w	ba0a <usb_isr+0x18a>
					packet->index = 0;
    b8bc:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    b8c0:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    b8c4:	4ba6      	ldr	r3, [pc, #664]	; (bb60 <usb_isr+0x2e0>)
    b8c6:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    b8ca:	2a00      	cmp	r2, #0
    b8cc:	f000 8201 	beq.w	bcd2 <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    b8d0:	4ba4      	ldr	r3, [pc, #656]	; (bb64 <usb_isr+0x2e4>)
    b8d2:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    b8d6:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    b8d8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    b8dc:	4ba2      	ldr	r3, [pc, #648]	; (bb68 <usb_isr+0x2e8>)
    b8de:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    b8e2:	4494      	add	ip, r2
    b8e4:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    b8e8:	f000 fbdc 	bl	c0a4 <usb_malloc>
					if (packet) {
    b8ec:	2800      	cmp	r0, #0
    b8ee:	f000 81e9 	beq.w	bcc4 <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    b8f2:	f017 0f08 	tst.w	r7, #8
    b8f6:	4b9d      	ldr	r3, [pc, #628]	; (bb6c <usb_isr+0x2ec>)
						b->addr = packet->buf;
    b8f8:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    b8fc:	bf18      	it	ne
    b8fe:	465b      	movne	r3, fp
						b->addr = packet->buf;
    b900:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    b902:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    b906:	2308      	movs	r3, #8
    b908:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    b90c:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    b910:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    b912:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    b914:	d51b      	bpl.n	b94e <usb_isr+0xce>
		if (usb_configuration) {
    b916:	4b96      	ldr	r3, [pc, #600]	; (bb70 <usb_isr+0x2f0>)
    b918:	781b      	ldrb	r3, [r3, #0]
    b91a:	b1ab      	cbz	r3, b948 <usb_isr+0xc8>
			t = usb_reboot_timer;
    b91c:	4995      	ldr	r1, [pc, #596]	; (bb74 <usb_isr+0x2f4>)
    b91e:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    b920:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b924:	b12a      	cbz	r2, b932 <usb_isr+0xb2>
				usb_reboot_timer = --t;
    b926:	3b01      	subs	r3, #1
    b928:	b2db      	uxtb	r3, r3
    b92a:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    b92c:	2b00      	cmp	r3, #0
    b92e:	f000 8346 	beq.w	bfbe <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    b932:	4991      	ldr	r1, [pc, #580]	; (bb78 <usb_isr+0x2f8>)
    b934:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    b936:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b93a:	b12a      	cbz	r2, b948 <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    b93c:	3b01      	subs	r3, #1
    b93e:	b2db      	uxtb	r3, r3
    b940:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    b942:	2b00      	cmp	r3, #0
    b944:	f000 81eb 	beq.w	bd1e <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    b948:	2304      	movs	r3, #4
    b94a:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    b94e:	f014 0208 	ands.w	r2, r4, #8
    b952:	f000 81cc 	beq.w	bcee <usb_isr+0x46e>
		stat = USB0_STAT;
    b956:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    b95a:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    b95c:	0912      	lsrs	r2, r2, #4
    b95e:	d197      	bne.n	b890 <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    b960:	f8df 91f8 	ldr.w	r9, [pc, #504]	; bb5c <usb_isr+0x2dc>
    b964:	089b      	lsrs	r3, r3, #2
    b966:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    b96a:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    b96e:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    b970:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    b974:	2809      	cmp	r0, #9
    b976:	d07c      	beq.n	ba72 <usb_isr+0x1f2>
    b978:	d80f      	bhi.n	b99a <usb_isr+0x11a>
    b97a:	3801      	subs	r0, #1
    b97c:	2801      	cmp	r0, #1
    b97e:	d808      	bhi.n	b992 <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b980:	4a7e      	ldr	r2, [pc, #504]	; (bb7c <usb_isr+0x2fc>)
    b982:	8815      	ldrh	r5, [r2, #0]
    b984:	f242 0021 	movw	r0, #8225	; 0x2021
    b988:	4285      	cmp	r5, r0
    b98a:	f000 81fb 	beq.w	bd84 <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    b98e:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b992:	2301      	movs	r3, #1
    b994:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    b998:	e7b5      	b.n	b906 <usb_isr+0x86>
	switch (pid) {
    b99a:	280d      	cmp	r0, #13
    b99c:	d1f9      	bne.n	b992 <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    b99e:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    b9a2:	4d77      	ldr	r5, [pc, #476]	; (bb80 <usb_isr+0x300>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    b9a4:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    b9a8:	4e74      	ldr	r6, [pc, #464]	; (bb7c <usb_isr+0x2fc>)
		ep0_tx_data_toggle = 1;
    b9aa:	4c76      	ldr	r4, [pc, #472]	; (bb84 <usb_isr+0x304>)
		table[index(0, TX, EVEN)].desc = 0;
    b9ac:	f8c9 2010 	str.w	r2, [r9, #16]
    b9b0:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    b9b2:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    b9b6:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    b9ba:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    b9bc:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    b9be:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    b9c2:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    b9c6:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    b9c8:	f200 80ff 	bhi.w	bbca <usb_isr+0x34a>
    b9cc:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    b9d0:	f080 82cb 	bcs.w	bf6a <usb_isr+0x6ea>
    b9d4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    b9d8:	f000 8226 	beq.w	be28 <usb_isr+0x5a8>
    b9dc:	f240 80de 	bls.w	bb9c <usb_isr+0x31c>
    b9e0:	f240 3202 	movw	r2, #770	; 0x302
    b9e4:	4293      	cmp	r3, r2
    b9e6:	d17b      	bne.n	bae0 <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    b9e8:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    b9ec:	2f04      	cmp	r7, #4
    b9ee:	f200 8108 	bhi.w	bc02 <usb_isr+0x382>
    b9f2:	0c02      	lsrs	r2, r0, #16
    b9f4:	f040 8105 	bne.w	bc02 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    b9f8:	4963      	ldr	r1, [pc, #396]	; (bb88 <usb_isr+0x308>)
    b9fa:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    b9fe:	f043 0302 	orr.w	r3, r3, #2
    ba02:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    ba06:	4613      	mov	r3, r2
		break;
    ba08:	e070      	b.n	baec <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    ba0a:	f017 0f08 	tst.w	r7, #8
    ba0e:	4b57      	ldr	r3, [pc, #348]	; (bb6c <usb_isr+0x2ec>)
    ba10:	bf18      	it	ne
    ba12:	465b      	movne	r3, fp
    ba14:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    ba18:	e775      	b.n	b906 <usb_isr+0x86>
				usb_free(packet);
    ba1a:	f000 fb63 	bl	c0e4 <usb_free>
				packet = tx_first[endpoint];
    ba1e:	495b      	ldr	r1, [pc, #364]	; (bb8c <usb_isr+0x30c>)
					switch (tx_state[endpoint]) {
    ba20:	4a5b      	ldr	r2, [pc, #364]	; (bb90 <usb_isr+0x310>)
				packet = tx_first[endpoint];
    ba22:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    ba26:	2b00      	cmp	r3, #0
    ba28:	f000 8157 	beq.w	bcda <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    ba2c:	6858      	ldr	r0, [r3, #4]
    ba2e:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    ba32:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    ba34:	f103 0008 	add.w	r0, r3, #8
    ba38:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    ba3a:	2903      	cmp	r1, #3
    ba3c:	d805      	bhi.n	ba4a <usb_isr+0x1ca>
    ba3e:	e8df f001 	tbb	[pc, r1]
    ba42:	0f12      	.short	0x0f12
    ba44:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    ba46:	2104      	movs	r1, #4
    ba48:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    ba4a:	881a      	ldrh	r2, [r3, #0]
    ba4c:	f017 0f08 	tst.w	r7, #8
    ba50:	bf14      	ite	ne
    ba52:	23c8      	movne	r3, #200	; 0xc8
    ba54:	2388      	moveq	r3, #136	; 0x88
    ba56:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    ba5a:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    ba5e:	e752      	b.n	b906 <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    ba60:	2102      	movs	r1, #2
    ba62:	5511      	strb	r1, [r2, r4]
						break;
    ba64:	e7f1      	b.n	ba4a <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    ba66:	2103      	movs	r1, #3
    ba68:	5511      	strb	r1, [r2, r4]
						break;
    ba6a:	e7ee      	b.n	ba4a <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    ba6c:	2105      	movs	r1, #5
    ba6e:	5511      	strb	r1, [r2, r4]
						break;
    ba70:	e7eb      	b.n	ba4a <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    ba72:	4d43      	ldr	r5, [pc, #268]	; (bb80 <usb_isr+0x300>)
    ba74:	682a      	ldr	r2, [r5, #0]
		if (data) {
    ba76:	b33a      	cbz	r2, bac8 <usb_isr+0x248>
			size = ep0_tx_len;
    ba78:	4946      	ldr	r1, [pc, #280]	; (bb94 <usb_isr+0x314>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba7a:	4c42      	ldr	r4, [pc, #264]	; (bb84 <usb_isr+0x304>)
			size = ep0_tx_len;
    ba7c:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ba7e:	4846      	ldr	r0, [pc, #280]	; (bb98 <usb_isr+0x318>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba80:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ba84:	7806      	ldrb	r6, [r0, #0]
    ba86:	2f40      	cmp	r7, #64	; 0x40
    ba88:	463b      	mov	r3, r7
    ba8a:	bf28      	it	cs
    ba8c:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba8e:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    ba92:	f08e 0e01 	eor.w	lr, lr, #1
    ba96:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ba9a:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    ba9e:	f086 0601 	eor.w	r6, r6, #1
    baa2:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    baa4:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    baa8:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    baaa:	bf14      	ite	ne
    baac:	20c8      	movne	r0, #200	; 0xc8
    baae:	2088      	moveq	r0, #136	; 0x88
    bab0:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    bab4:	441a      	add	r2, r3
			ep0_tx_len -= size;
    bab6:	1afb      	subs	r3, r7, r3
    bab8:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    baba:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    babe:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    bac0:	2b00      	cmp	r3, #0
    bac2:	f000 8136 	beq.w	bd32 <usb_isr+0x4b2>
    bac6:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    bac8:	4b2c      	ldr	r3, [pc, #176]	; (bb7c <usb_isr+0x2fc>)
    baca:	881a      	ldrh	r2, [r3, #0]
    bacc:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    bad0:	f47f af5f 	bne.w	b992 <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    bad4:	789a      	ldrb	r2, [r3, #2]
    bad6:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    bada:	2200      	movs	r2, #0
    badc:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    bade:	e758      	b.n	b992 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    bae0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    bae4:	f040 808d 	bne.w	bc02 <usb_isr+0x382>
	uint32_t datalen = 0;
    bae8:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    baea:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    baec:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    baf0:	4829      	ldr	r0, [pc, #164]	; (bb98 <usb_isr+0x318>)
    baf2:	4594      	cmp	ip, r2
    baf4:	bf28      	it	cs
    baf6:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    baf8:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bafa:	7802      	ldrb	r2, [r0, #0]
    bafc:	2f40      	cmp	r7, #64	; 0x40
    bafe:	bf28      	it	cs
    bb00:	2740      	movcs	r7, #64	; 0x40
    bb02:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bb06:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bb08:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bb0c:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bb10:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bb14:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    bb18:	2600      	movs	r6, #0
	data += size;
    bb1a:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    bb1c:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    bb1e:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    bb22:	f082 0601 	eor.w	r6, r2, #1
    bb26:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    bb28:	f040 8111 	bne.w	bd4e <usb_isr+0x4ce>
    bb2c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    bb30:	f04f 0501 	mov.w	r5, #1
    bb34:	d909      	bls.n	bb4a <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bb36:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    bb3a:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bb3c:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    bb40:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bb42:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bb44:	2388      	movs	r3, #136	; 0x88
    bb46:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    bb4a:	2301      	movs	r3, #1
    bb4c:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    bb50:	e71f      	b.n	b992 <usb_isr+0x112>
    bb52:	bf00      	nop
    bb54:	40072000 	.word	0x40072000
    bb58:	004000c8 	.word	0x004000c8
    bb5c:	1fff8000 	.word	0x1fff8000
    bb60:	1fffd56c 	.word	0x1fffd56c
    bb64:	1fffd57c 	.word	0x1fffd57c
    bb68:	1fffd5bc 	.word	0x1fffd5bc
    bb6c:	00400088 	.word	0x00400088
    bb70:	1fffd5b8 	.word	0x1fffd5b8
    bb74:	1fffd5b9 	.word	0x1fffd5b9
    bb78:	1fffd5e4 	.word	0x1fffd5e4
    bb7c:	1fffd58c 	.word	0x1fffd58c
    bb80:	1fffd560 	.word	0x1fffd560
    bb84:	1fffd55d 	.word	0x1fffd55d
    bb88:	400720c0 	.word	0x400720c0
    bb8c:	1fffd594 	.word	0x1fffd594
    bb90:	1fffd5b4 	.word	0x1fffd5b4
    bb94:	1fffd55e 	.word	0x1fffd55e
    bb98:	1fffd55c 	.word	0x1fffd55c
	switch (setup.wRequestAndType) {
    bb9c:	2b80      	cmp	r3, #128	; 0x80
    bb9e:	f000 818b 	beq.w	beb8 <usb_isr+0x638>
    bba2:	2b82      	cmp	r3, #130	; 0x82
    bba4:	d12d      	bne.n	bc02 <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    bba6:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    bbaa:	2f04      	cmp	r7, #4
    bbac:	d829      	bhi.n	bc02 <usb_isr+0x382>
		reply_buffer[0] = 0;
    bbae:	4aa7      	ldr	r2, [pc, #668]	; (be4c <usb_isr+0x5cc>)
    bbb0:	2300      	movs	r3, #0
    bbb2:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    bbb4:	4ba6      	ldr	r3, [pc, #664]	; (be50 <usb_isr+0x5d0>)
    bbb6:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    bbba:	079f      	lsls	r7, r3, #30
    bbbc:	f140 81fc 	bpl.w	bfb8 <usb_isr+0x738>
    bbc0:	2301      	movs	r3, #1
    bbc2:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    bbc4:	4ba1      	ldr	r3, [pc, #644]	; (be4c <usb_isr+0x5cc>)
		datalen = 2;
    bbc6:	2202      	movs	r2, #2
    bbc8:	e790      	b.n	baec <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    bbca:	f242 0c21 	movw	ip, #8225	; 0x2021
    bbce:	4563      	cmp	r3, ip
    bbd0:	d0bb      	beq.n	bb4a <usb_isr+0x2ca>
    bbd2:	d91d      	bls.n	bc10 <usb_isr+0x390>
    bbd4:	f242 2221 	movw	r2, #8737	; 0x2221
    bbd8:	4293      	cmp	r3, r2
    bbda:	d10d      	bne.n	bbf8 <usb_isr+0x378>
		switch (setup.wIndex) {
    bbdc:	b2bf      	uxth	r7, r7
    bbde:	2f00      	cmp	r7, #0
    bbe0:	d182      	bne.n	bae8 <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    bbe2:	4b9c      	ldr	r3, [pc, #624]	; (be54 <usb_isr+0x5d4>)
    bbe4:	681a      	ldr	r2, [r3, #0]
    bbe6:	4b9c      	ldr	r3, [pc, #624]	; (be58 <usb_isr+0x5d8>)
    bbe8:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    bbea:	4b9c      	ldr	r3, [pc, #624]	; (be5c <usb_isr+0x5dc>)
    bbec:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    bbf0:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    bbf2:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    bbf4:	4613      	mov	r3, r2
			break;
    bbf6:	e779      	b.n	baec <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    bbf8:	f242 3221 	movw	r2, #8993	; 0x2321
    bbfc:	4293      	cmp	r3, r2
    bbfe:	f43f af73 	beq.w	bae8 <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bc02:	230f      	movs	r3, #15
    bc04:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    bc08:	2301      	movs	r3, #1
    bc0a:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    bc0e:	e6c0      	b.n	b992 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    bc10:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    bc14:	f000 814a 	beq.w	beac <usb_isr+0x62c>
    bc18:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    bc1c:	d1f1      	bne.n	bc02 <usb_isr+0x382>
		usb_configuration = setup.wValue;
    bc1e:	4b90      	ldr	r3, [pc, #576]	; (be60 <usb_isr+0x5e0>)
    bc20:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    bc24:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    bc26:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    bc28:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    bc2c:	061a      	lsls	r2, r3, #24
    bc2e:	d406      	bmi.n	bc3e <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    bc30:	3501      	adds	r5, #1
    bc32:	2d14      	cmp	r5, #20
    bc34:	d00c      	beq.n	bc50 <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    bc36:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    bc3a:	061a      	lsls	r2, r3, #24
    bc3c:	d5f8      	bpl.n	bc30 <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    bc3e:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    bc42:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    bc44:	6858      	ldr	r0, [r3, #4]
    bc46:	3808      	subs	r0, #8
    bc48:	f000 fa4c 	bl	c0e4 <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    bc4c:	2d14      	cmp	r5, #20
    bc4e:	d1f2      	bne.n	bc36 <usb_isr+0x3b6>
    bc50:	4a84      	ldr	r2, [pc, #528]	; (be64 <usb_isr+0x5e4>)
    bc52:	4b85      	ldr	r3, [pc, #532]	; (be68 <usb_isr+0x5e8>)
    bc54:	9202      	str	r2, [sp, #8]
    bc56:	4a85      	ldr	r2, [pc, #532]	; (be6c <usb_isr+0x5ec>)
    bc58:	9201      	str	r2, [sp, #4]
    bc5a:	4e85      	ldr	r6, [pc, #532]	; (be70 <usb_isr+0x5f0>)
    bc5c:	4a85      	ldr	r2, [pc, #532]	; (be74 <usb_isr+0x5f4>)
    bc5e:	f8df 8218 	ldr.w	r8, [pc, #536]	; be78 <usb_isr+0x5f8>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bc62:	9403      	str	r4, [sp, #12]
    bc64:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    bc66:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bc68:	461c      	mov	r4, r3
			p = rx_first[i];
    bc6a:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    bc6e:	b12f      	cbz	r7, bc7c <usb_isr+0x3fc>
				n = p->next;
    bc70:	4638      	mov	r0, r7
    bc72:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    bc74:	f000 fa36 	bl	c0e4 <usb_free>
			while (p) {
    bc78:	2f00      	cmp	r7, #0
    bc7a:	d1f9      	bne.n	bc70 <usb_isr+0x3f0>
			rx_last[i] = NULL;
    bc7c:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    bc7e:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    bc82:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    bc86:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    bc8a:	9300      	str	r3, [sp, #0]
			while (p) {
    bc8c:	b12f      	cbz	r7, bc9a <usb_isr+0x41a>
				n = p->next;
    bc8e:	4638      	mov	r0, r7
    bc90:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    bc92:	f000 fa27 	bl	c0e4 <usb_free>
			while (p) {
    bc96:	2f00      	cmp	r7, #0
    bc98:	d1f9      	bne.n	bc8e <usb_isr+0x40e>
			tx_last[i] = NULL;
    bc9a:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    bc9c:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    bca0:	f843 5b04 	str.w	r5, [r3], #4
    bca4:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    bca6:	9b01      	ldr	r3, [sp, #4]
    bca8:	f823 5b02 	strh.w	r5, [r3], #2
    bcac:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    bcae:	7823      	ldrb	r3, [r4, #0]
    bcb0:	3b02      	subs	r3, #2
    bcb2:	2b03      	cmp	r3, #3
    bcb4:	f200 8109 	bhi.w	beca <usb_isr+0x64a>
    bcb8:	e8df f013 	tbh	[pc, r3, lsl #1]
    bcbc:	0104013f 	.word	0x0104013f
    bcc0:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    bcc4:	4a6d      	ldr	r2, [pc, #436]	; (be7c <usb_isr+0x5fc>)
						b->desc = 0;
    bcc6:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    bcca:	7813      	ldrb	r3, [r2, #0]
    bccc:	3301      	adds	r3, #1
    bcce:	7013      	strb	r3, [r2, #0]
    bcd0:	e619      	b.n	b906 <usb_isr+0x86>
						rx_first[endpoint] = packet;
    bcd2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    bcd6:	4b67      	ldr	r3, [pc, #412]	; (be74 <usb_isr+0x5f4>)
    bcd8:	e5fe      	b.n	b8d8 <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    bcda:	5d11      	ldrb	r1, [r2, r4]
    bcdc:	2902      	cmp	r1, #2
    bcde:	d026      	beq.n	bd2e <usb_isr+0x4ae>
    bce0:	f67f ae11 	bls.w	b906 <usb_isr+0x86>
    bce4:	2903      	cmp	r1, #3
    bce6:	d11d      	bne.n	bd24 <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bce8:	2301      	movs	r3, #1
    bcea:	5513      	strb	r3, [r2, r4]
						break;
    bcec:	e60b      	b.n	b906 <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    bcee:	07e0      	lsls	r0, r4, #31
    bcf0:	d46e      	bmi.n	bdd0 <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    bcf2:	0621      	lsls	r1, r4, #24
    bcf4:	d421      	bmi.n	bd3a <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    bcf6:	07a2      	lsls	r2, r4, #30
    bcf8:	d508      	bpl.n	bd0c <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    bcfa:	4b61      	ldr	r3, [pc, #388]	; (be80 <usb_isr+0x600>)
    bcfc:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    bd00:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    bd02:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    bd04:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    bd08:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    bd0c:	06e3      	lsls	r3, r4, #27
    bd0e:	d503      	bpl.n	bd18 <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    bd10:	4b5b      	ldr	r3, [pc, #364]	; (be80 <usb_isr+0x600>)
    bd12:	2210      	movs	r2, #16
    bd14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    bd18:	b005      	add	sp, #20
    bd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    bd1e:	f000 fb59 	bl	c3d4 <usb_serial_flush_callback>
    bd22:	e611      	b.n	b948 <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    bd24:	f017 0f08 	tst.w	r7, #8
    bd28:	bf14      	ite	ne
    bd2a:	2303      	movne	r3, #3
    bd2c:	2302      	moveq	r3, #2
    bd2e:	5513      	strb	r3, [r2, r4]
						break;
    bd30:	e5e9      	b.n	b906 <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    bd32:	2f3f      	cmp	r7, #63	; 0x3f
    bd34:	bf98      	it	ls
    bd36:	2200      	movls	r2, #0
    bd38:	e6c5      	b.n	bac6 <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bd3a:	4b51      	ldr	r3, [pc, #324]	; (be80 <usb_isr+0x600>)
		USB0_ISTAT = USB_ISTAT_STALL;
    bd3c:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bd3e:	210d      	movs	r1, #13
    bd40:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    bd44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    bd48:	07a2      	lsls	r2, r4, #30
    bd4a:	d5df      	bpl.n	bd0c <usb_isr+0x48c>
    bd4c:	e7d5      	b.n	bcfa <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bd4e:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    bd52:	7002      	strb	r2, [r0, #0]
    bd54:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bd56:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    bd5a:	463a      	mov	r2, r7
    bd5c:	bf28      	it	cs
    bd5e:	2240      	movcs	r2, #64	; 0x40
    bd60:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd62:	0410      	lsls	r0, r2, #16
	data += size;
    bd64:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd66:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    bd6a:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    bd6c:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd6e:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    bd72:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    bd74:	d055      	beq.n	be22 <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    bd76:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    bd78:	4b42      	ldr	r3, [pc, #264]	; (be84 <usb_isr+0x604>)
    bd7a:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    bd7c:	2301      	movs	r3, #1
    bd7e:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    bd82:	e606      	b.n	b992 <usb_isr+0x112>
			switch (setup.wIndex) {
    bd84:	8892      	ldrh	r2, [r2, #4]
    bd86:	b95a      	cbnz	r2, bda0 <usb_isr+0x520>
    bd88:	4a3f      	ldr	r2, [pc, #252]	; (be88 <usb_isr+0x608>)
    bd8a:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    bd8c:	f814 1b01 	ldrb.w	r1, [r4], #1
    bd90:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    bd94:	42ac      	cmp	r4, r5
    bd96:	d1f9      	bne.n	bd8c <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    bd98:	4a3c      	ldr	r2, [pc, #240]	; (be8c <usb_isr+0x60c>)
    bd9a:	6812      	ldr	r2, [r2, #0]
    bd9c:	2a86      	cmp	r2, #134	; 0x86
    bd9e:	d03c      	beq.n	be1a <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bda0:	4c3b      	ldr	r4, [pc, #236]	; (be90 <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bda2:	483c      	ldr	r0, [pc, #240]	; (be94 <usb_isr+0x614>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bda4:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bda6:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bda8:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    bdaa:	f085 0501 	eor.w	r5, r5, #1
    bdae:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bdb0:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    bdb4:	f082 0201 	eor.w	r2, r2, #1
    bdb8:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bdba:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    bdbe:	f04f 0000 	mov.w	r0, #0
    bdc2:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bdc4:	bf14      	ite	ne
    bdc6:	22c8      	movne	r2, #200	; 0xc8
    bdc8:	2288      	moveq	r2, #136	; 0x88
    bdca:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    bdce:	e5de      	b.n	b98e <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    bdd0:	4b2b      	ldr	r3, [pc, #172]	; (be80 <usb_isr+0x600>)
		ep0_tx_bdt_bank = 0;
    bdd2:	4830      	ldr	r0, [pc, #192]	; (be94 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    bdd4:	4930      	ldr	r1, [pc, #192]	; (be98 <usb_isr+0x618>)
    bdd6:	4c31      	ldr	r4, [pc, #196]	; (be9c <usb_isr+0x61c>)
		USB0_CTL = USB_CTL_ODDRST;
    bdd8:	2502      	movs	r5, #2
    bdda:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    bdde:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    bde0:	482f      	ldr	r0, [pc, #188]	; (bea0 <usb_isr+0x620>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    bde2:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    bde4:	4d2f      	ldr	r5, [pc, #188]	; (bea4 <usb_isr+0x624>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    bde6:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    bde8:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bdea:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    bdec:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    bdee:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    bdf0:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    bdf2:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bdf4:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    bdf8:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    bdfa:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    bdfc:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    be00:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    be04:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    be08:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    be0c:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    be10:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    be14:	b005      	add	sp, #20
    be16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    be1a:	4a23      	ldr	r2, [pc, #140]	; (bea8 <usb_isr+0x628>)
    be1c:	200f      	movs	r0, #15
    be1e:	7010      	strb	r0, [r2, #0]
    be20:	e7be      	b.n	bda0 <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    be22:	2f3f      	cmp	r7, #63	; 0x3f
    be24:	d8a7      	bhi.n	bd76 <usb_isr+0x4f6>
    be26:	e690      	b.n	bb4a <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    be28:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    be2c:	2f04      	cmp	r7, #4
    be2e:	f63f aee8 	bhi.w	bc02 <usb_isr+0x382>
    be32:	0c00      	lsrs	r0, r0, #16
    be34:	f47f aee5 	bne.w	bc02 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    be38:	4a05      	ldr	r2, [pc, #20]	; (be50 <usb_isr+0x5d0>)
    be3a:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    be3e:	f023 0302 	bic.w	r3, r3, #2
    be42:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    be46:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    be48:	4613      	mov	r3, r2
		break;
    be4a:	e64f      	b.n	baec <usb_isr+0x26c>
    be4c:	1fffd564 	.word	0x1fffd564
    be50:	400720c0 	.word	0x400720c0
    be54:	1fffd3c0 	.word	0x1fffd3c0
    be58:	1fffd5e0 	.word	0x1fffd5e0
    be5c:	1fffd5dc 	.word	0x1fffd5dc
    be60:	1fffd5b8 	.word	0x1fffd5b8
    be64:	1fffd5a4 	.word	0x1fffd5a4
    be68:	1fffd5b4 	.word	0x1fffd5b4
    be6c:	1fffd5bc 	.word	0x1fffd5bc
    be70:	1fffd56c 	.word	0x1fffd56c
    be74:	1fffd57c 	.word	0x1fffd57c
    be78:	1fffd594 	.word	0x1fffd594
    be7c:	1fffd5c4 	.word	0x1fffd5c4
    be80:	40072000 	.word	0x40072000
    be84:	1fffd55e 	.word	0x1fffd55e
    be88:	1fffd5d3 	.word	0x1fffd5d3
    be8c:	1fffd5d4 	.word	0x1fffd5d4
    be90:	1fffd55d 	.word	0x1fffd55d
    be94:	1fffd55c 	.word	0x1fffd55c
    be98:	1fff8000 	.word	0x1fff8000
    be9c:	00400088 	.word	0x00400088
    bea0:	1fffd4dc 	.word	0x1fffd4dc
    bea4:	1fffd51c 	.word	0x1fffd51c
    bea8:	1fffd5b9 	.word	0x1fffd5b9
		reply_buffer[0] = usb_configuration;
    beac:	4b48      	ldr	r3, [pc, #288]	; (bfd0 <usb_isr+0x750>)
    beae:	4949      	ldr	r1, [pc, #292]	; (bfd4 <usb_isr+0x754>)
    beb0:	781b      	ldrb	r3, [r3, #0]
    beb2:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    beb4:	460b      	mov	r3, r1
		break;
    beb6:	e619      	b.n	baec <usb_isr+0x26c>
		reply_buffer[0] = 0;
    beb8:	4a46      	ldr	r2, [pc, #280]	; (bfd4 <usb_isr+0x754>)
    beba:	2300      	movs	r3, #0
    bebc:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    bebe:	4b45      	ldr	r3, [pc, #276]	; (bfd4 <usb_isr+0x754>)
		datalen = 2;
    bec0:	2202      	movs	r2, #2
		break;
    bec2:	e613      	b.n	baec <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bec4:	f04f 0301 	mov.w	r3, #1
    bec8:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    beca:	4b43      	ldr	r3, [pc, #268]	; (bfd8 <usb_isr+0x758>)
    becc:	42b3      	cmp	r3, r6
    bece:	f104 0401 	add.w	r4, r4, #1
    bed2:	f47f aeca 	bne.w	bc6a <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    bed6:	4e41      	ldr	r6, [pc, #260]	; (bfdc <usb_isr+0x75c>)
    bed8:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    beda:	f8df 8104 	ldr.w	r8, [pc, #260]	; bfe0 <usb_isr+0x760>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bede:	4f41      	ldr	r7, [pc, #260]	; (bfe4 <usb_isr+0x764>)
		usb_rx_memory_needed = 0;
    bee0:	2300      	movs	r3, #0
    bee2:	7033      	strb	r3, [r6, #0]
    bee4:	2504      	movs	r5, #4
			epconf = *cfg++;
    bee6:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    beea:	4a3f      	ldr	r2, [pc, #252]	; (bfe8 <usb_isr+0x768>)
    beec:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    beee:	071b      	lsls	r3, r3, #28
    bef0:	d425      	bmi.n	bf3e <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    bef2:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    bef6:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    befa:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    befc:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    befe:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    bf00:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    bf04:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    bf08:	d1ed      	bne.n	bee6 <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bf0a:	4f38      	ldr	r7, [pc, #224]	; (bfec <usb_isr+0x76c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf0c:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bf0e:	783a      	ldrb	r2, [r7, #0]
    bf10:	f042 0002 	orr.w	r0, r2, #2
    bf14:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    bf18:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bf1c:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf20:	2d00      	cmp	r5, #0
    bf22:	d14d      	bne.n	bfc0 <usb_isr+0x740>
    bf24:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    bf26:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    bf2a:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    bf2c:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf2e:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    bf32:	2301      	movs	r3, #1
    bf34:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    bf38:	e52b      	b.n	b992 <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    bf3a:	7025      	strb	r5, [r4, #0]
				break;
    bf3c:	e7c5      	b.n	beca <usb_isr+0x64a>
				p = usb_malloc();
    bf3e:	f000 f8b1 	bl	c0a4 <usb_malloc>
				if (p) {
    bf42:	2800      	cmp	r0, #0
    bf44:	d032      	beq.n	bfac <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    bf46:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    bf4a:	3008      	adds	r0, #8
    bf4c:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bf4e:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    bf52:	f000 f8a7 	bl	c0a4 <usb_malloc>
				if (p) {
    bf56:	b308      	cbz	r0, bf9c <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    bf58:	f045 0301 	orr.w	r3, r5, #1
    bf5c:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    bf60:	3008      	adds	r0, #8
    bf62:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    bf64:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    bf68:	e7c3      	b.n	bef2 <usb_isr+0x672>
			if (list->addr == NULL) break;
    bf6a:	4a21      	ldr	r2, [pc, #132]	; (bff0 <usb_isr+0x770>)
    bf6c:	6853      	ldr	r3, [r2, #4]
    bf6e:	2b00      	cmp	r3, #0
    bf70:	f43f ae47 	beq.w	bc02 <usb_isr+0x382>
    bf74:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    bf76:	b2bf      	uxth	r7, r7
    bf78:	e004      	b.n	bf84 <usb_isr+0x704>
			if (list->addr == NULL) break;
    bf7a:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    bf7c:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    bf7e:	2b00      	cmp	r3, #0
    bf80:	f43f ae3f 	beq.w	bc02 <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    bf84:	8811      	ldrh	r1, [r2, #0]
    bf86:	4281      	cmp	r1, r0
    bf88:	d1f7      	bne.n	bf7a <usb_isr+0x6fa>
    bf8a:	8851      	ldrh	r1, [r2, #2]
    bf8c:	42b9      	cmp	r1, r7
    bf8e:	d1f4      	bne.n	bf7a <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    bf90:	0a00      	lsrs	r0, r0, #8
    bf92:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    bf94:	bf0c      	ite	eq
    bf96:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    bf98:	8912      	ldrhne	r2, [r2, #8]
    bf9a:	e5a7      	b.n	baec <usb_isr+0x26c>
					usb_rx_memory_needed++;
    bf9c:	7833      	ldrb	r3, [r6, #0]
    bf9e:	3301      	adds	r3, #1
    bfa0:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    bfa2:	f045 0301 	orr.w	r3, r5, #1
    bfa6:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    bfaa:	e7a2      	b.n	bef2 <usb_isr+0x672>
					usb_rx_memory_needed++;
    bfac:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    bfae:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    bfb2:	3301      	adds	r3, #1
    bfb4:	7033      	strb	r3, [r6, #0]
    bfb6:	e7cc      	b.n	bf52 <usb_isr+0x6d2>
		data = reply_buffer;
    bfb8:	4b06      	ldr	r3, [pc, #24]	; (bfd4 <usb_isr+0x754>)
		datalen = 2;
    bfba:	2202      	movs	r2, #2
    bfbc:	e596      	b.n	baec <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    bfbe:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    bfc0:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bfc2:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    bfc4:	f082 0601 	eor.w	r6, r2, #1
    bfc8:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bfca:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    bfce:	e5bc      	b.n	bb4a <usb_isr+0x2ca>
    bfd0:	1fffd5b8 	.word	0x1fffd5b8
    bfd4:	1fffd564 	.word	0x1fffd564
    bfd8:	1fffd57c 	.word	0x1fffd57c
    bfdc:	1fffd5c4 	.word	0x1fffd5c4
    bfe0:	000156fc 	.word	0x000156fc
    bfe4:	00400088 	.word	0x00400088
    bfe8:	400720c0 	.word	0x400720c0
    bfec:	1fffd55c 	.word	0x1fffd55c
    bff0:	000156a8 	.word	0x000156a8

0000bff4 <usb_init>:



void usb_init(void)
{
    bff4:	b570      	push	{r4, r5, r6, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    bff6:	f000 fab3 	bl	c560 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    bffa:	2300      	movs	r3, #0
    bffc:	4a1a      	ldr	r2, [pc, #104]	; (c068 <usb_init+0x74>)
		table[i].desc = 0;
    bffe:	4619      	mov	r1, r3
    c000:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    c004:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    c008:	3301      	adds	r3, #1
    c00a:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    c00c:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    c00e:	d1f7      	bne.n	c000 <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c010:	4c16      	ldr	r4, [pc, #88]	; (c06c <usb_init+0x78>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    c012:	4b17      	ldr	r3, [pc, #92]	; (c070 <usb_init+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c014:	6b60      	ldr	r0, [r4, #52]	; 0x34

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    c016:	4d17      	ldr	r5, [pc, #92]	; (c074 <usb_init+0x80>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    c018:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    c01c:	6360      	str	r0, [r4, #52]	; 0x34
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    c01e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    c022:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_USBCTRL = 0;
    c026:	4c14      	ldr	r4, [pc, #80]	; (c078 <usb_init+0x84>)
	USB0_ISTAT = 0xFF;
    c028:	20ff      	movs	r0, #255	; 0xff
	USB0_CTL = USB_CTL_USBENSOFEN;
    c02a:	f04f 0c01 	mov.w	ip, #1
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    c02e:	f3c2 4607 	ubfx	r6, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    c032:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    c034:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c038:	f04f 2ee0 	mov.w	lr, #3758153728	; 0xe000e000
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    c03c:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_ISTAT = 0xFF;
    c040:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
	USB0_ERRSTAT = 0xFF;
    c044:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    c048:	7418      	strb	r0, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    c04a:	f883 c094 	strb.w	ip, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    c04e:	7021      	strb	r1, [r4, #0]
	USB0_INTEN = USB_INTEN_USBRSTEN;
    c050:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    c054:	2370      	movs	r3, #112	; 0x70
    c056:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c05a:	f44f 7200 	mov.w	r2, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c05e:	2310      	movs	r3, #16
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c060:	f8ce 2108 	str.w	r2, [lr, #264]	; 0x108
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c064:	7223      	strb	r3, [r4, #8]
}
    c066:	bd70      	pop	{r4, r5, r6, pc}
    c068:	1fff8000 	.word	0x1fff8000
    c06c:	40048000 	.word	0x40048000
    c070:	40072000 	.word	0x40072000
    c074:	e000e400 	.word	0xe000e400
    c078:	40072100 	.word	0x40072100

0000c07c <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c07c:	f000 b8ac 	b.w	c1d8 <usb_serial_flush_input>

0000c080 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c080:	f000 b87c 	b.w	c17c <usb_serial_peekchar>

0000c084 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c084:	f000 b856 	b.w	c134 <usb_serial_getchar>

0000c088 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c088:	f000 b890 	b.w	c1ac <usb_serial_available>

0000c08c <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c08c:	f000 b976 	b.w	c37c <usb_serial_flush_output>

0000c090 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c090:	f000 b950 	b.w	c334 <usb_serial_write_buffer_free>

0000c094 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c094:	4608      	mov	r0, r1
    c096:	4611      	mov	r1, r2
    c098:	f000 b8ba 	b.w	c210 <usb_serial_write>

0000c09c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c09c:	4608      	mov	r0, r1
    c09e:	f000 b93b 	b.w	c318 <usb_serial_putchar>
    c0a2:	bf00      	nop

0000c0a4 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    c0a4:	b672      	cpsid	i
	avail = usb_buffer_available;
    c0a6:	490d      	ldr	r1, [pc, #52]	; (c0dc <usb_malloc+0x38>)
    c0a8:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    c0aa:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    c0ae:	280b      	cmp	r0, #11
    c0b0:	dc10      	bgt.n	c0d4 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    c0b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    c0b6:	40c2      	lsrs	r2, r0
    c0b8:	ea23 0302 	bic.w	r3, r3, r2
    c0bc:	600b      	str	r3, [r1, #0]
	__enable_irq();
    c0be:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    c0c0:	4a07      	ldr	r2, [pc, #28]	; (c0e0 <usb_malloc+0x3c>)
    c0c2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    c0c6:	00c1      	lsls	r1, r0, #3
    c0c8:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    c0cc:	2300      	movs	r3, #0
    c0ce:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    c0d0:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    c0d2:	4770      	bx	lr
		__enable_irq();
    c0d4:	b662      	cpsie	i
		return NULL;
    c0d6:	2000      	movs	r0, #0
    c0d8:	4770      	bx	lr
    c0da:	bf00      	nop
    c0dc:	1fff8a0c 	.word	0x1fff8a0c
    c0e0:	1fff83bc 	.word	0x1fff83bc

0000c0e4 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c0e4:	4b0e      	ldr	r3, [pc, #56]	; (c120 <usb_free+0x3c>)
    c0e6:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    c0e8:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    c0ec:	d210      	bcs.n	c110 <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    c0ee:	4a0d      	ldr	r2, [pc, #52]	; (c124 <usb_free+0x40>)
    c0f0:	7812      	ldrb	r2, [r2, #0]
    c0f2:	b972      	cbnz	r2, c112 <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    c0f4:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c0f6:	4a0c      	ldr	r2, [pc, #48]	; (c128 <usb_free+0x44>)
	usb_buffer_available |= mask;
    c0f8:	490c      	ldr	r1, [pc, #48]	; (c12c <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c0fa:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    c0fe:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    c100:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c104:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    c106:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    c10a:	4303      	orrs	r3, r0
    c10c:	600b      	str	r3, [r1, #0]
	__enable_irq();
    c10e:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    c110:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    c112:	4a07      	ldr	r2, [pc, #28]	; (c130 <usb_free+0x4c>)
    c114:	7812      	ldrb	r2, [r2, #0]
    c116:	2a00      	cmp	r2, #0
    c118:	d0ec      	beq.n	c0f4 <usb_free+0x10>
		usb_rx_memory(p);
    c11a:	f7ff bb2b 	b.w	b774 <usb_rx_memory>
    c11e:	bf00      	nop
    c120:	1fff83bc 	.word	0x1fff83bc
    c124:	1fffd5c4 	.word	0x1fffd5c4
    c128:	38e38e39 	.word	0x38e38e39
    c12c:	1fff8a0c 	.word	0x1fff8a0c
    c130:	1fffd5b8 	.word	0x1fffd5b8

0000c134 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    c134:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    c136:	4c0f      	ldr	r4, [pc, #60]	; (c174 <usb_serial_getchar+0x40>)
    c138:	6820      	ldr	r0, [r4, #0]
    c13a:	b178      	cbz	r0, c15c <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    c13c:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    c13e:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    c140:	18c1      	adds	r1, r0, r3
    c142:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    c144:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    c146:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    c148:	d902      	bls.n	c150 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    c14a:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    c14c:	4628      	mov	r0, r5
    c14e:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    c150:	f7ff ffc8 	bl	c0e4 <usb_free>
		rx_packet = NULL;
    c154:	2300      	movs	r3, #0
    c156:	6023      	str	r3, [r4, #0]
}
    c158:	4628      	mov	r0, r5
    c15a:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    c15c:	4b06      	ldr	r3, [pc, #24]	; (c178 <usb_serial_getchar+0x44>)
    c15e:	781b      	ldrb	r3, [r3, #0]
    c160:	b12b      	cbz	r3, c16e <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    c162:	2003      	movs	r0, #3
    c164:	f7ff face 	bl	b704 <usb_rx>
    c168:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    c16a:	2800      	cmp	r0, #0
    c16c:	d1e6      	bne.n	c13c <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    c16e:	f04f 35ff 	mov.w	r5, #4294967295
    c172:	e7eb      	b.n	c14c <usb_serial_getchar+0x18>
    c174:	1fffd5c8 	.word	0x1fffd5c8
    c178:	1fffd5b8 	.word	0x1fffd5b8

0000c17c <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    c17c:	b510      	push	{r4, lr}
	if (!rx_packet) {
    c17e:	4c09      	ldr	r4, [pc, #36]	; (c1a4 <usb_serial_peekchar+0x28>)
    c180:	6820      	ldr	r0, [r4, #0]
    c182:	b118      	cbz	r0, c18c <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    c184:	8843      	ldrh	r3, [r0, #2]
    c186:	4418      	add	r0, r3
    c188:	7a00      	ldrb	r0, [r0, #8]
}
    c18a:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    c18c:	4b06      	ldr	r3, [pc, #24]	; (c1a8 <usb_serial_peekchar+0x2c>)
    c18e:	781b      	ldrb	r3, [r3, #0]
    c190:	b12b      	cbz	r3, c19e <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    c192:	2003      	movs	r0, #3
    c194:	f7ff fab6 	bl	b704 <usb_rx>
    c198:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    c19a:	2800      	cmp	r0, #0
    c19c:	d1f2      	bne.n	c184 <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    c19e:	f04f 30ff 	mov.w	r0, #4294967295
}
    c1a2:	bd10      	pop	{r4, pc}
    c1a4:	1fffd5c8 	.word	0x1fffd5c8
    c1a8:	1fffd5b8 	.word	0x1fffd5b8

0000c1ac <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c1ac:	4b08      	ldr	r3, [pc, #32]	; (c1d0 <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    c1ae:	4a09      	ldr	r2, [pc, #36]	; (c1d4 <usb_serial_available+0x28>)
    c1b0:	681b      	ldr	r3, [r3, #0]
{
    c1b2:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    c1b4:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c1b6:	b11b      	cbz	r3, c1c0 <usb_serial_available+0x14>
    c1b8:	881a      	ldrh	r2, [r3, #0]
    c1ba:	885b      	ldrh	r3, [r3, #2]
    c1bc:	1ad3      	subs	r3, r2, r3
    c1be:	441c      	add	r4, r3
	if (count == 0) yield();
    c1c0:	b10c      	cbz	r4, c1c6 <usb_serial_available+0x1a>
	return count;
}
    c1c2:	4620      	mov	r0, r4
    c1c4:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    c1c6:	f000 f929 	bl	c41c <yield>
}
    c1ca:	4620      	mov	r0, r4
    c1cc:	bd10      	pop	{r4, pc}
    c1ce:	bf00      	nop
    c1d0:	1fffd5c8 	.word	0x1fffd5c8
    c1d4:	1fffd5bc 	.word	0x1fffd5bc

0000c1d8 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    c1d8:	4b0b      	ldr	r3, [pc, #44]	; (c208 <usb_serial_flush_input+0x30>)
    c1da:	781b      	ldrb	r3, [r3, #0]
    c1dc:	b19b      	cbz	r3, c206 <usb_serial_flush_input+0x2e>
{
    c1de:	b510      	push	{r4, lr}
	if (rx_packet) {
    c1e0:	4c0a      	ldr	r4, [pc, #40]	; (c20c <usb_serial_flush_input+0x34>)
    c1e2:	6820      	ldr	r0, [r4, #0]
    c1e4:	b148      	cbz	r0, c1fa <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    c1e6:	f7ff ff7d 	bl	c0e4 <usb_free>
		rx_packet = NULL;
    c1ea:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    c1ec:	2003      	movs	r0, #3
		rx_packet = NULL;
    c1ee:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    c1f0:	f7ff fa88 	bl	b704 <usb_rx>
		if (!rx) break;
    c1f4:	b130      	cbz	r0, c204 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    c1f6:	f7ff ff75 	bl	c0e4 <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    c1fa:	2003      	movs	r0, #3
    c1fc:	f7ff fa82 	bl	b704 <usb_rx>
		if (!rx) break;
    c200:	2800      	cmp	r0, #0
    c202:	d1f8      	bne.n	c1f6 <usb_serial_flush_input+0x1e>
	}
}
    c204:	bd10      	pop	{r4, pc}
    c206:	4770      	bx	lr
    c208:	1fffd5b8 	.word	0x1fffd5b8
    c20c:	1fffd5c8 	.word	0x1fffd5c8

0000c210 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    c210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    c214:	f8df 90ec 	ldr.w	r9, [pc, #236]	; c304 <usb_serial_write+0xf4>
{
    c218:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    c21a:	2201      	movs	r2, #1
    c21c:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    c220:	9101      	str	r1, [sp, #4]
    c222:	b379      	cbz	r1, c284 <usb_serial_write+0x74>
    c224:	4f38      	ldr	r7, [pc, #224]	; (c308 <usb_serial_write+0xf8>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    c226:	f8df 80e4 	ldr.w	r8, [pc, #228]	; c30c <usb_serial_write+0xfc>
	while (size > 0) {
    c22a:	9d01      	ldr	r5, [sp, #4]
    c22c:	4e38      	ldr	r6, [pc, #224]	; (c310 <usb_serial_write+0x100>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    c22e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c314 <usb_serial_write+0x104>
    c232:	4683      	mov	fp, r0
		if (!tx_packet) {
    c234:	6839      	ldr	r1, [r7, #0]
    c236:	b3a1      	cbz	r1, c2a2 <usb_serial_write+0x92>
		len = CDC_TX_SIZE - tx_packet->index;
    c238:	f8b1 e002 	ldrh.w	lr, [r1, #2]
    c23c:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    c240:	45ac      	cmp	ip, r5
    c242:	bf28      	it	cs
    c244:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    c246:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    c24a:	2200      	movs	r2, #0
		tx_packet->index += len;
    c24c:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    c24e:	7032      	strb	r2, [r6, #0]
		size -= len;
    c250:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    c254:	804c      	strh	r4, [r1, #2]
		dest = tx_packet->buf + tx_packet->index;
    c256:	f101 0208 	add.w	r2, r1, #8
		while (len-- > 0) *dest++ = *src++;
    c25a:	f1bc 0f00 	cmp.w	ip, #0
    c25e:	d00a      	beq.n	c276 <usb_serial_write+0x66>
    c260:	f10e 3eff 	add.w	lr, lr, #4294967295
    c264:	4472      	add	r2, lr
    c266:	44dc      	add	ip, fp
    c268:	f81b 4b01 	ldrb.w	r4, [fp], #1
    c26c:	f802 4f01 	strb.w	r4, [r2, #1]!
    c270:	45dc      	cmp	ip, fp
    c272:	d1f9      	bne.n	c268 <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    c274:	884c      	ldrh	r4, [r1, #2]
    c276:	2c3f      	cmp	r4, #63	; 0x3f
    c278:	d80b      	bhi.n	c292 <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    c27a:	2205      	movs	r2, #5
    c27c:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    c280:	2d00      	cmp	r5, #0
    c282:	d1d7      	bne.n	c234 <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    c284:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    c286:	2300      	movs	r3, #0
    c288:	f889 3000 	strb.w	r3, [r9]
}
    c28c:	b003      	add	sp, #12
    c28e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    c292:	2240      	movs	r2, #64	; 0x40
    c294:	800a      	strh	r2, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c296:	2004      	movs	r0, #4
    c298:	f7ff faac 	bl	b7f4 <usb_tx>
			tx_packet = NULL;
    c29c:	2200      	movs	r2, #0
    c29e:	603a      	str	r2, [r7, #0]
    c2a0:	e7eb      	b.n	c27a <usb_serial_write+0x6a>
				if (!usb_configuration) {
    c2a2:	f898 2000 	ldrb.w	r2, [r8]
    c2a6:	b32a      	cbz	r2, c2f4 <usb_serial_write+0xe4>
    c2a8:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
    c2ac:	e008      	b.n	c2c0 <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c2ae:	3c01      	subs	r4, #1
    c2b0:	d019      	beq.n	c2e6 <usb_serial_write+0xd6>
    c2b2:	7832      	ldrb	r2, [r6, #0]
    c2b4:	b9ba      	cbnz	r2, c2e6 <usb_serial_write+0xd6>
				yield();
    c2b6:	f000 f8b1 	bl	c41c <yield>
				if (!usb_configuration) {
    c2ba:	f898 2000 	ldrb.w	r2, [r8]
    c2be:	b1ca      	cbz	r2, c2f4 <usb_serial_write+0xe4>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    c2c0:	2004      	movs	r0, #4
    c2c2:	f7ff fa41 	bl	b748 <usb_tx_packet_count>
    c2c6:	2807      	cmp	r0, #7
    c2c8:	d8f1      	bhi.n	c2ae <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    c2ca:	f04f 0301 	mov.w	r3, #1
    c2ce:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    c2d2:	f7ff fee7 	bl	c0a4 <usb_malloc>
    c2d6:	4601      	mov	r1, r0
    c2d8:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    c2da:	2800      	cmp	r0, #0
    c2dc:	d1ac      	bne.n	c238 <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c2de:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    c2e0:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c2e4:	d1e5      	bne.n	c2b2 <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    c2e6:	2301      	movs	r3, #1
					return -1;
    c2e8:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    c2ec:	7033      	strb	r3, [r6, #0]
}
    c2ee:	b003      	add	sp, #12
    c2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    c2f4:	2300      	movs	r3, #0
					return -1;
    c2f6:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    c2fa:	f889 3000 	strb.w	r3, [r9]
}
    c2fe:	b003      	add	sp, #12
    c300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c304:	1fffd5cd 	.word	0x1fffd5cd
    c308:	1fffd5d0 	.word	0x1fffd5d0
    c30c:	1fffd5b8 	.word	0x1fffd5b8
    c310:	1fffd5cc 	.word	0x1fffd5cc
    c314:	1fffd5e4 	.word	0x1fffd5e4

0000c318 <usb_serial_putchar>:
{
    c318:	b500      	push	{lr}
    c31a:	b083      	sub	sp, #12
    c31c:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    c31e:	2101      	movs	r1, #1
    c320:	f10d 0007 	add.w	r0, sp, #7
{
    c324:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    c328:	f7ff ff72 	bl	c210 <usb_serial_write>
}
    c32c:	b003      	add	sp, #12
    c32e:	f85d fb04 	ldr.w	pc, [sp], #4
    c332:	bf00      	nop

0000c334 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    c334:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    c336:	4d0e      	ldr	r5, [pc, #56]	; (c370 <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    c338:	4c0e      	ldr	r4, [pc, #56]	; (c374 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    c33a:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    c33c:	2301      	movs	r3, #1
    c33e:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    c340:	b128      	cbz	r0, c34e <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    c342:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    c344:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    c346:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    c34a:	7023      	strb	r3, [r4, #0]
	return len;
}
    c34c:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    c34e:	4b0a      	ldr	r3, [pc, #40]	; (c378 <usb_serial_write_buffer_free+0x44>)
    c350:	781b      	ldrb	r3, [r3, #0]
    c352:	b913      	cbnz	r3, c35a <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    c354:	2000      	movs	r0, #0
    c356:	7020      	strb	r0, [r4, #0]
}
    c358:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    c35a:	2004      	movs	r0, #4
    c35c:	f7ff f9f4 	bl	b748 <usb_tx_packet_count>
		if (!usb_configuration ||
    c360:	2807      	cmp	r0, #7
    c362:	d8f7      	bhi.n	c354 <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    c364:	f7ff fe9e 	bl	c0a4 <usb_malloc>
    c368:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    c36a:	2800      	cmp	r0, #0
    c36c:	d1e9      	bne.n	c342 <usb_serial_write_buffer_free+0xe>
    c36e:	e7f1      	b.n	c354 <usb_serial_write_buffer_free+0x20>
    c370:	1fffd5d0 	.word	0x1fffd5d0
    c374:	1fffd5cd 	.word	0x1fffd5cd
    c378:	1fffd5b8 	.word	0x1fffd5b8

0000c37c <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    c37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    c37e:	4b11      	ldr	r3, [pc, #68]	; (c3c4 <usb_serial_flush_output+0x48>)
    c380:	781b      	ldrb	r3, [r3, #0]
    c382:	b18b      	cbz	r3, c3a8 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    c384:	4e10      	ldr	r6, [pc, #64]	; (c3c8 <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    c386:	4d11      	ldr	r5, [pc, #68]	; (c3cc <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    c388:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    c38a:	2701      	movs	r7, #1
    c38c:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    c38e:	b164      	cbz	r4, c3aa <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    c390:	4b0f      	ldr	r3, [pc, #60]	; (c3d0 <usb_serial_flush_output+0x54>)
    c392:	2700      	movs	r7, #0
    c394:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    c396:	8863      	ldrh	r3, [r4, #2]
    c398:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c39a:	4621      	mov	r1, r4
    c39c:	2004      	movs	r0, #4
    c39e:	f7ff fa29 	bl	b7f4 <usb_tx>
		tx_packet = NULL;
    c3a2:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    c3a4:	2300      	movs	r3, #0
    c3a6:	702b      	strb	r3, [r5, #0]
}
    c3a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    c3aa:	f7ff fe7b 	bl	c0a4 <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    c3ae:	4b08      	ldr	r3, [pc, #32]	; (c3d0 <usb_serial_flush_output+0x54>)
		if (tx) {
    c3b0:	4601      	mov	r1, r0
    c3b2:	b120      	cbz	r0, c3be <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    c3b4:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    c3b6:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    c3b8:	f7ff fa1c 	bl	b7f4 <usb_tx>
    c3bc:	e7f2      	b.n	c3a4 <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    c3be:	701f      	strb	r7, [r3, #0]
    c3c0:	e7f0      	b.n	c3a4 <usb_serial_flush_output+0x28>
    c3c2:	bf00      	nop
    c3c4:	1fffd5b8 	.word	0x1fffd5b8
    c3c8:	1fffd5d0 	.word	0x1fffd5d0
    c3cc:	1fffd5cd 	.word	0x1fffd5cd
    c3d0:	1fffd5e4 	.word	0x1fffd5e4

0000c3d4 <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    c3d4:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    c3d6:	4b0e      	ldr	r3, [pc, #56]	; (c410 <usb_serial_flush_callback+0x3c>)
    c3d8:	781b      	ldrb	r3, [r3, #0]
    c3da:	b953      	cbnz	r3, c3f2 <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    c3dc:	4c0d      	ldr	r4, [pc, #52]	; (c414 <usb_serial_flush_callback+0x40>)
    c3de:	6821      	ldr	r1, [r4, #0]
    c3e0:	b141      	cbz	r1, c3f4 <usb_serial_flush_callback+0x20>
    c3e2:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    c3e6:	884b      	ldrh	r3, [r1, #2]
    c3e8:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c3ea:	2004      	movs	r0, #4
    c3ec:	f7ff fa02 	bl	b7f4 <usb_tx>
		tx_packet = NULL;
    c3f0:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    c3f2:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    c3f4:	f7ff fe56 	bl	c0a4 <usb_malloc>
		if (tx) {
    c3f8:	4601      	mov	r1, r0
    c3fa:	b120      	cbz	r0, c406 <usb_serial_flush_callback+0x32>
}
    c3fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    c400:	2004      	movs	r0, #4
    c402:	f7ff b9f7 	b.w	b7f4 <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    c406:	4b04      	ldr	r3, [pc, #16]	; (c418 <usb_serial_flush_callback+0x44>)
    c408:	2201      	movs	r2, #1
    c40a:	701a      	strb	r2, [r3, #0]
}
    c40c:	bd38      	pop	{r3, r4, r5, pc}
    c40e:	bf00      	nop
    c410:	1fffd5cd 	.word	0x1fffd5cd
    c414:	1fffd5d0 	.word	0x1fffd5d0
    c418:	1fffd5e4 	.word	0x1fffd5e4

0000c41c <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    c41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    c420:	4e32      	ldr	r6, [pc, #200]	; (c4ec <yield+0xd0>)
    c422:	7833      	ldrb	r3, [r6, #0]
    c424:	b163      	cbz	r3, c440 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    c426:	4f32      	ldr	r7, [pc, #200]	; (c4f0 <yield+0xd4>)
    c428:	783a      	ldrb	r2, [r7, #0]
    c42a:	b94a      	cbnz	r2, c440 <yield+0x24>
	running = 1;
    c42c:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c42e:	07d9      	lsls	r1, r3, #31
	running = 1;
    c430:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c432:	d443      	bmi.n	c4bc <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c434:	079a      	lsls	r2, r3, #30
    c436:	d426      	bmi.n	c486 <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    c438:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c43a:	075b      	lsls	r3, r3, #29
	running = 0;
    c43c:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c43e:	d401      	bmi.n	c444 <yield+0x28>
	
};
    c440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    c444:	4b2b      	ldr	r3, [pc, #172]	; (c4f4 <yield+0xd8>)
    c446:	681a      	ldr	r2, [r3, #0]
    c448:	2a00      	cmp	r2, #0
    c44a:	d0f9      	beq.n	c440 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c44c:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    c450:	2a00      	cmp	r2, #0
    c452:	d1f5      	bne.n	c440 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c454:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    c458:	b672      	cpsid	i
		EventResponder *first = firstYield;
    c45a:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    c45c:	2800      	cmp	r0, #0
    c45e:	d03a      	beq.n	c4d6 <yield+0xba>
		if (runningFromYield) {
    c460:	4c25      	ldr	r4, [pc, #148]	; (c4f8 <yield+0xdc>)
    c462:	7821      	ldrb	r1, [r4, #0]
    c464:	2900      	cmp	r1, #0
    c466:	d136      	bne.n	c4d6 <yield+0xba>
		firstYield = first->_next;
    c468:	6942      	ldr	r2, [r0, #20]
    c46a:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    c46c:	2301      	movs	r3, #1
    c46e:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    c470:	2a00      	cmp	r2, #0
    c472:	d037      	beq.n	c4e4 <yield+0xc8>
			firstYield->_prev = nullptr;
    c474:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    c476:	b905      	cbnz	r5, c47a <yield+0x5e>
    c478:	b662      	cpsie	i
		first->_triggered = false;
    c47a:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    c47c:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    c47e:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c480:	4798      	blx	r3
		runningFromYield = false;
    c482:	7025      	strb	r5, [r4, #0]
    c484:	e7dc      	b.n	c440 <yield+0x24>
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c486:	f8df 8074 	ldr.w	r8, [pc, #116]	; c4fc <yield+0xe0>
    c48a:	f898 2000 	ldrb.w	r2, [r8]
    c48e:	2a00      	cmp	r2, #0
    c490:	d0d2      	beq.n	c438 <yield+0x1c>
    c492:	2500      	movs	r5, #0
    c494:	f8df 9068 	ldr.w	r9, [pc, #104]	; c500 <yield+0xe4>
    c498:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    c49a:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		if (available()) (*_serialEvent)();
    c49e:	6823      	ldr	r3, [r4, #0]
    c4a0:	4620      	mov	r0, r4
    c4a2:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c4a4:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    c4a6:	4798      	blx	r3
    c4a8:	b108      	cbz	r0, c4ae <yield+0x92>
    c4aa:	6923      	ldr	r3, [r4, #16]
    c4ac:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c4ae:	f898 2000 	ldrb.w	r2, [r8]
    c4b2:	b2eb      	uxtb	r3, r5
    c4b4:	429a      	cmp	r2, r3
    c4b6:	d8f0      	bhi.n	c49a <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c4b8:	7833      	ldrb	r3, [r6, #0]
    c4ba:	e7bd      	b.n	c438 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    c4bc:	f7ff fe76 	bl	c1ac <usb_serial_available>
		if (Serial.available()) serialEvent();
    c4c0:	b968      	cbnz	r0, c4de <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    c4c2:	4b10      	ldr	r3, [pc, #64]	; (c504 <yield+0xe8>)
    c4c4:	781b      	ldrb	r3, [r3, #0]
    c4c6:	b90b      	cbnz	r3, c4cc <yield+0xb0>
    c4c8:	7833      	ldrb	r3, [r6, #0]
    c4ca:	e7b3      	b.n	c434 <yield+0x18>
    c4cc:	7833      	ldrb	r3, [r6, #0]
    c4ce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    c4d2:	7033      	strb	r3, [r6, #0]
    c4d4:	e7ae      	b.n	c434 <yield+0x18>
		if (doit) __enable_irq();
    c4d6:	2d00      	cmp	r5, #0
    c4d8:	d1b2      	bne.n	c440 <yield+0x24>
    c4da:	b662      	cpsie	i
    c4dc:	e7b0      	b.n	c440 <yield+0x24>
		if (Serial.available()) serialEvent();
    c4de:	f000 f83d 	bl	c55c <serialEvent()>
    c4e2:	e7ee      	b.n	c4c2 <yield+0xa6>
			lastYield = nullptr;
    c4e4:	4b08      	ldr	r3, [pc, #32]	; (c508 <yield+0xec>)
    c4e6:	601a      	str	r2, [r3, #0]
    c4e8:	e7c5      	b.n	c476 <yield+0x5a>
    c4ea:	bf00      	nop
    c4ec:	1fff8a10 	.word	0x1fff8a10
    c4f0:	1fffd5e5 	.word	0x1fffd5e5
    c4f4:	1fffd3a8 	.word	0x1fffd3a8
    c4f8:	1fffd3b4 	.word	0x1fffd3b4
    c4fc:	1fffd5f4 	.word	0x1fffd5f4
    c500:	1fffd5e8 	.word	0x1fffd5e8
    c504:	0001546c 	.word	0x0001546c
    c508:	1fffd3b8 	.word	0x1fffd3b8

0000c50c <HardwareSerial::addToSerialEventsList()>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
    c50c:	b470      	push	{r4, r5, r6}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c50e:	4e10      	ldr	r6, [pc, #64]	; (c550 <HardwareSerial::addToSerialEventsList()+0x44>)
    c510:	4d10      	ldr	r5, [pc, #64]	; (c554 <HardwareSerial::addToSerialEventsList()+0x48>)
    c512:	7834      	ldrb	r4, [r6, #0]
    c514:	b1d4      	cbz	r4, c54c <HardwareSerial::addToSerialEventsList()+0x40>
    c516:	1e62      	subs	r2, r4, #1
    c518:	b2d2      	uxtb	r2, r2
    c51a:	1d29      	adds	r1, r5, #4
    c51c:	462b      	mov	r3, r5
    c51e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    c522:	e001      	b.n	c528 <HardwareSerial::addToSerialEventsList()+0x1c>
    c524:	428b      	cmp	r3, r1
    c526:	d005      	beq.n	c534 <HardwareSerial::addToSerialEventsList()+0x28>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    c528:	f853 2b04 	ldr.w	r2, [r3], #4
    c52c:	4282      	cmp	r2, r0
    c52e:	d1f9      	bne.n	c524 <HardwareSerial::addToSerialEventsList()+0x18>
	}

	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
    c530:	bc70      	pop	{r4, r5, r6}
    c532:	4770      	bx	lr
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c534:	1c63      	adds	r3, r4, #1
    c536:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c538:	4a07      	ldr	r2, [pc, #28]	; (c558 <HardwareSerial::addToSerialEventsList()+0x4c>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c53a:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c53c:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c53e:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c542:	f043 0302 	orr.w	r3, r3, #2
    c546:	7013      	strb	r3, [r2, #0]
}
    c548:	bc70      	pop	{r4, r5, r6}
    c54a:	4770      	bx	lr
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c54c:	2301      	movs	r3, #1
    c54e:	e7f3      	b.n	c538 <HardwareSerial::addToSerialEventsList()+0x2c>
    c550:	1fffd5f4 	.word	0x1fffd5f4
    c554:	1fffd5e8 	.word	0x1fffd5e8
    c558:	1fff8a10 	.word	0x1fff8a10

0000c55c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    c55c:	4770      	bx	lr
    c55e:	bf00      	nop

0000c560 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    c560:	b510      	push	{r4, lr}
    c562:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    c564:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    c566:	4a17      	ldr	r2, [pc, #92]	; (c5c4 <usb_init_serialnumber+0x64>)
    c568:	2470      	movs	r4, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    c56a:	2041      	movs	r0, #65	; 0x41
	FTFL_FCCOB1 = 15;
    c56c:	210f      	movs	r1, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    c56e:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    c570:	7014      	strb	r4, [r2, #0]
	FTFL_FCCOB0 = 0x41;
    c572:	71d0      	strb	r0, [r2, #7]
	FTFL_FCCOB1 = 15;
    c574:	7191      	strb	r1, [r2, #6]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    c576:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    c578:	7813      	ldrb	r3, [r2, #0]
    c57a:	061b      	lsls	r3, r3, #24
    c57c:	d5fc      	bpl.n	c578 <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOB7;
    c57e:	6890      	ldr	r0, [r2, #8]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    c580:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c582:	4b11      	ldr	r3, [pc, #68]	; (c5c8 <usb_init_serialnumber+0x68>)
    c584:	4c11      	ldr	r4, [pc, #68]	; (c5cc <usb_init_serialnumber+0x6c>)
    c586:	4298      	cmp	r0, r3
    c588:	bf38      	it	cc
    c58a:	eb00 0080 	addcc.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    c58e:	a901      	add	r1, sp, #4
	if (num < 10000000) num = num * 10;
    c590:	bf38      	it	cc
    c592:	0040      	lslcc	r0, r0, #1
	ultoa(num, buf, 10);
    c594:	220a      	movs	r2, #10
    c596:	f7fd fd1f 	bl	9fd8 <ultoa>
	for (i=0; i<10; i++) {
    c59a:	a901      	add	r1, sp, #4
    c59c:	4620      	mov	r0, r4
    c59e:	2300      	movs	r3, #0
		char c = buf[i];
    c5a0:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    c5a4:	3301      	adds	r3, #1
		if (!c) break;
    c5a6:	b13a      	cbz	r2, c5b8 <usb_init_serialnumber+0x58>
	for (i=0; i<10; i++) {
    c5a8:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    c5aa:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    c5ae:	d1f7      	bne.n	c5a0 <usb_init_serialnumber+0x40>
    c5b0:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c5b2:	7023      	strb	r3, [r4, #0]
}
    c5b4:	b004      	add	sp, #16
    c5b6:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c5b8:	005b      	lsls	r3, r3, #1
    c5ba:	b2db      	uxtb	r3, r3
    c5bc:	7023      	strb	r3, [r4, #0]
}
    c5be:	b004      	add	sp, #16
    c5c0:	bd10      	pop	{r4, pc}
    c5c2:	bf00      	nop
    c5c4:	40020000 	.word	0x40020000
    c5c8:	00989680 	.word	0x00989680
    c5cc:	1fff8aa0 	.word	0x1fff8aa0

0000c5d0 <expf>:
    c5d0:	b538      	push	{r3, r4, r5, lr}
    c5d2:	4604      	mov	r4, r0
    c5d4:	f000 f82c 	bl	c630 <__ieee754_expf>
    c5d8:	4605      	mov	r5, r0
    c5da:	4620      	mov	r0, r4
    c5dc:	f000 f820 	bl	c620 <finitef>
    c5e0:	b148      	cbz	r0, c5f6 <expf+0x26>
    c5e2:	490d      	ldr	r1, [pc, #52]	; (c618 <expf+0x48>)
    c5e4:	4620      	mov	r0, r4
    c5e6:	f000 feaf 	bl	d348 <__aeabi_fcmpgt>
    c5ea:	b930      	cbnz	r0, c5fa <expf+0x2a>
    c5ec:	490b      	ldr	r1, [pc, #44]	; (c61c <expf+0x4c>)
    c5ee:	4620      	mov	r0, r4
    c5f0:	f000 fe8c 	bl	d30c <__aeabi_fcmplt>
    c5f4:	b948      	cbnz	r0, c60a <expf+0x3a>
    c5f6:	4628      	mov	r0, r5
    c5f8:	bd38      	pop	{r3, r4, r5, pc}
    c5fa:	f001 fe5b 	bl	e2b4 <__errno>
    c5fe:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
    c602:	2322      	movs	r3, #34	; 0x22
    c604:	6003      	str	r3, [r0, #0]
    c606:	4628      	mov	r0, r5
    c608:	bd38      	pop	{r3, r4, r5, pc}
    c60a:	f001 fe53 	bl	e2b4 <__errno>
    c60e:	2322      	movs	r3, #34	; 0x22
    c610:	2500      	movs	r5, #0
    c612:	6003      	str	r3, [r0, #0]
    c614:	e7ef      	b.n	c5f6 <expf+0x26>
    c616:	bf00      	nop
    c618:	42b17217 	.word	0x42b17217
    c61c:	c2cff1b5 	.word	0xc2cff1b5

0000c620 <finitef>:
    c620:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    c624:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
    c628:	bfac      	ite	ge
    c62a:	2000      	movge	r0, #0
    c62c:	2001      	movlt	r0, #1
    c62e:	4770      	bx	lr

0000c630 <__ieee754_expf>:
    c630:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
    c634:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    c638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c63c:	4604      	mov	r4, r0
    c63e:	d86c      	bhi.n	c71a <__ieee754_expf+0xea>
    c640:	ea4f 75d0 	mov.w	r5, r0, lsr #31
    c644:	f000 80c6 	beq.w	c7d4 <__ieee754_expf+0x1a4>
    c648:	497a      	ldr	r1, [pc, #488]	; (c834 <__ieee754_expf+0x204>)
    c64a:	4288      	cmp	r0, r1
    c64c:	f300 80b4 	bgt.w	c7b8 <__ieee754_expf+0x188>
    c650:	2800      	cmp	r0, #0
    c652:	f2c0 80b6 	blt.w	c7c2 <__ieee754_expf+0x192>
    c656:	4b78      	ldr	r3, [pc, #480]	; (c838 <__ieee754_expf+0x208>)
    c658:	429a      	cmp	r2, r3
    c65a:	d963      	bls.n	c724 <__ieee754_expf+0xf4>
    c65c:	4b77      	ldr	r3, [pc, #476]	; (c83c <__ieee754_expf+0x20c>)
    c65e:	429a      	cmp	r2, r3
    c660:	f200 80c5 	bhi.w	c7ee <__ieee754_expf+0x1be>
    c664:	4b76      	ldr	r3, [pc, #472]	; (c840 <__ieee754_expf+0x210>)
    c666:	4620      	mov	r0, r4
    c668:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    c66c:	f000 fba6 	bl	cdbc <__aeabi_fsub>
    c670:	4b74      	ldr	r3, [pc, #464]	; (c844 <__ieee754_expf+0x214>)
    c672:	f1c5 0601 	rsb	r6, r5, #1
    c676:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
    c67a:	4680      	mov	r8, r0
    c67c:	1b76      	subs	r6, r6, r5
    c67e:	4649      	mov	r1, r9
    c680:	4640      	mov	r0, r8
    c682:	f000 fb9b 	bl	cdbc <__aeabi_fsub>
    c686:	4601      	mov	r1, r0
    c688:	4605      	mov	r5, r0
    c68a:	f000 fca1 	bl	cfd0 <__aeabi_fmul>
    c68e:	496e      	ldr	r1, [pc, #440]	; (c848 <__ieee754_expf+0x218>)
    c690:	4604      	mov	r4, r0
    c692:	f000 fc9d 	bl	cfd0 <__aeabi_fmul>
    c696:	496d      	ldr	r1, [pc, #436]	; (c84c <__ieee754_expf+0x21c>)
    c698:	f000 fb90 	bl	cdbc <__aeabi_fsub>
    c69c:	4621      	mov	r1, r4
    c69e:	f000 fc97 	bl	cfd0 <__aeabi_fmul>
    c6a2:	496b      	ldr	r1, [pc, #428]	; (c850 <__ieee754_expf+0x220>)
    c6a4:	f000 fb8c 	bl	cdc0 <__addsf3>
    c6a8:	4621      	mov	r1, r4
    c6aa:	f000 fc91 	bl	cfd0 <__aeabi_fmul>
    c6ae:	4969      	ldr	r1, [pc, #420]	; (c854 <__ieee754_expf+0x224>)
    c6b0:	f000 fb84 	bl	cdbc <__aeabi_fsub>
    c6b4:	4621      	mov	r1, r4
    c6b6:	f000 fc8b 	bl	cfd0 <__aeabi_fmul>
    c6ba:	4967      	ldr	r1, [pc, #412]	; (c858 <__ieee754_expf+0x228>)
    c6bc:	f000 fb80 	bl	cdc0 <__addsf3>
    c6c0:	4621      	mov	r1, r4
    c6c2:	f000 fc85 	bl	cfd0 <__aeabi_fmul>
    c6c6:	4601      	mov	r1, r0
    c6c8:	4628      	mov	r0, r5
    c6ca:	f000 fb77 	bl	cdbc <__aeabi_fsub>
    c6ce:	462c      	mov	r4, r5
    c6d0:	4607      	mov	r7, r0
    c6d2:	4682      	mov	sl, r0
    c6d4:	2e00      	cmp	r6, #0
    c6d6:	d057      	beq.n	c788 <__ieee754_expf+0x158>
    c6d8:	4639      	mov	r1, r7
    c6da:	4628      	mov	r0, r5
    c6dc:	f000 fc78 	bl	cfd0 <__aeabi_fmul>
    c6e0:	4639      	mov	r1, r7
    c6e2:	4604      	mov	r4, r0
    c6e4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c6e8:	f000 fb68 	bl	cdbc <__aeabi_fsub>
    c6ec:	4601      	mov	r1, r0
    c6ee:	4620      	mov	r0, r4
    c6f0:	f000 fd22 	bl	d138 <__aeabi_fdiv>
    c6f4:	4601      	mov	r1, r0
    c6f6:	4648      	mov	r0, r9
    c6f8:	f000 fb60 	bl	cdbc <__aeabi_fsub>
    c6fc:	4641      	mov	r1, r8
    c6fe:	f000 fb5d 	bl	cdbc <__aeabi_fsub>
    c702:	4601      	mov	r1, r0
    c704:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    c708:	f000 fb58 	bl	cdbc <__aeabi_fsub>
    c70c:	f116 0f7d 	cmn.w	r6, #125	; 0x7d
    c710:	db64      	blt.n	c7dc <__ieee754_expf+0x1ac>
    c712:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    c716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c71a:	4601      	mov	r1, r0
    c71c:	f000 fb50 	bl	cdc0 <__addsf3>
    c720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c724:	f1b2 5f50 	cmp.w	r2, #872415232	; 0x34000000
    c728:	d209      	bcs.n	c73e <__ieee754_expf+0x10e>
    c72a:	494c      	ldr	r1, [pc, #304]	; (c85c <__ieee754_expf+0x22c>)
    c72c:	4620      	mov	r0, r4
    c72e:	f000 fb47 	bl	cdc0 <__addsf3>
    c732:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c736:	f000 fe07 	bl	d348 <__aeabi_fcmpgt>
    c73a:	2800      	cmp	r0, #0
    c73c:	d174      	bne.n	c828 <__ieee754_expf+0x1f8>
    c73e:	4621      	mov	r1, r4
    c740:	4620      	mov	r0, r4
    c742:	f000 fc45 	bl	cfd0 <__aeabi_fmul>
    c746:	4940      	ldr	r1, [pc, #256]	; (c848 <__ieee754_expf+0x218>)
    c748:	4605      	mov	r5, r0
    c74a:	f000 fc41 	bl	cfd0 <__aeabi_fmul>
    c74e:	493f      	ldr	r1, [pc, #252]	; (c84c <__ieee754_expf+0x21c>)
    c750:	f000 fb34 	bl	cdbc <__aeabi_fsub>
    c754:	4629      	mov	r1, r5
    c756:	f000 fc3b 	bl	cfd0 <__aeabi_fmul>
    c75a:	493d      	ldr	r1, [pc, #244]	; (c850 <__ieee754_expf+0x220>)
    c75c:	f000 fb30 	bl	cdc0 <__addsf3>
    c760:	4629      	mov	r1, r5
    c762:	f000 fc35 	bl	cfd0 <__aeabi_fmul>
    c766:	493b      	ldr	r1, [pc, #236]	; (c854 <__ieee754_expf+0x224>)
    c768:	f000 fb28 	bl	cdbc <__aeabi_fsub>
    c76c:	4629      	mov	r1, r5
    c76e:	f000 fc2f 	bl	cfd0 <__aeabi_fmul>
    c772:	4939      	ldr	r1, [pc, #228]	; (c858 <__ieee754_expf+0x228>)
    c774:	f000 fb24 	bl	cdc0 <__addsf3>
    c778:	4629      	mov	r1, r5
    c77a:	f000 fc29 	bl	cfd0 <__aeabi_fmul>
    c77e:	4601      	mov	r1, r0
    c780:	4620      	mov	r0, r4
    c782:	f000 fb1b 	bl	cdbc <__aeabi_fsub>
    c786:	4682      	mov	sl, r0
    c788:	4651      	mov	r1, sl
    c78a:	4620      	mov	r0, r4
    c78c:	f000 fc20 	bl	cfd0 <__aeabi_fmul>
    c790:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c794:	4605      	mov	r5, r0
    c796:	4650      	mov	r0, sl
    c798:	f000 fb10 	bl	cdbc <__aeabi_fsub>
    c79c:	4601      	mov	r1, r0
    c79e:	4628      	mov	r0, r5
    c7a0:	f000 fcca 	bl	d138 <__aeabi_fdiv>
    c7a4:	4621      	mov	r1, r4
    c7a6:	f000 fb09 	bl	cdbc <__aeabi_fsub>
    c7aa:	4601      	mov	r1, r0
    c7ac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    c7b0:	f000 fb04 	bl	cdbc <__aeabi_fsub>
    c7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c7bc:	2000      	movs	r0, #0
    c7be:	f000 b87b 	b.w	c8b8 <__math_oflowf>
    c7c2:	4b27      	ldr	r3, [pc, #156]	; (c860 <__ieee754_expf+0x230>)
    c7c4:	429a      	cmp	r2, r3
    c7c6:	f67f af46 	bls.w	c656 <__ieee754_expf+0x26>
    c7ca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c7ce:	2000      	movs	r0, #0
    c7d0:	f000 b86e 	b.w	c8b0 <__math_uflowf>
    c7d4:	2d00      	cmp	r5, #0
    c7d6:	d0a3      	beq.n	c720 <__ieee754_expf+0xf0>
    c7d8:	2000      	movs	r0, #0
    c7da:	e7a1      	b.n	c720 <__ieee754_expf+0xf0>
    c7dc:	3664      	adds	r6, #100	; 0x64
    c7de:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
    c7e2:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    c7e6:	f000 fbf3 	bl	cfd0 <__aeabi_fmul>
    c7ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c7ee:	491d      	ldr	r1, [pc, #116]	; (c864 <__ieee754_expf+0x234>)
    c7f0:	4620      	mov	r0, r4
    c7f2:	f000 fbed 	bl	cfd0 <__aeabi_fmul>
    c7f6:	4b1c      	ldr	r3, [pc, #112]	; (c868 <__ieee754_expf+0x238>)
    c7f8:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    c7fc:	f000 fae0 	bl	cdc0 <__addsf3>
    c800:	f000 fdac 	bl	d35c <__aeabi_f2iz>
    c804:	4606      	mov	r6, r0
    c806:	f000 fb8f 	bl	cf28 <__aeabi_i2f>
    c80a:	4918      	ldr	r1, [pc, #96]	; (c86c <__ieee754_expf+0x23c>)
    c80c:	4605      	mov	r5, r0
    c80e:	f000 fbdf 	bl	cfd0 <__aeabi_fmul>
    c812:	4601      	mov	r1, r0
    c814:	4620      	mov	r0, r4
    c816:	f000 fad1 	bl	cdbc <__aeabi_fsub>
    c81a:	4915      	ldr	r1, [pc, #84]	; (c870 <__ieee754_expf+0x240>)
    c81c:	4680      	mov	r8, r0
    c81e:	4628      	mov	r0, r5
    c820:	f000 fbd6 	bl	cfd0 <__aeabi_fmul>
    c824:	4681      	mov	r9, r0
    c826:	e72a      	b.n	c67e <__ieee754_expf+0x4e>
    c828:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c82c:	4620      	mov	r0, r4
    c82e:	f000 fac7 	bl	cdc0 <__addsf3>
    c832:	e775      	b.n	c720 <__ieee754_expf+0xf0>
    c834:	42b17217 	.word	0x42b17217
    c838:	3eb17218 	.word	0x3eb17218
    c83c:	3f851591 	.word	0x3f851591
    c840:	00015708 	.word	0x00015708
    c844:	00015710 	.word	0x00015710
    c848:	3331bb4c 	.word	0x3331bb4c
    c84c:	35ddea0e 	.word	0x35ddea0e
    c850:	388ab355 	.word	0x388ab355
    c854:	3b360b61 	.word	0x3b360b61
    c858:	3e2aaaab 	.word	0x3e2aaaab
    c85c:	7149f2ca 	.word	0x7149f2ca
    c860:	42cff1b5 	.word	0x42cff1b5
    c864:	3fb8aa3b 	.word	0x3fb8aa3b
    c868:	00015700 	.word	0x00015700
    c86c:	3f317180 	.word	0x3f317180
    c870:	3717f7d1 	.word	0x3717f7d1

0000c874 <with_errnof>:
    c874:	b538      	push	{r3, r4, r5, lr}
    c876:	4605      	mov	r5, r0
    c878:	460c      	mov	r4, r1
    c87a:	f001 fd1b 	bl	e2b4 <__errno>
    c87e:	4603      	mov	r3, r0
    c880:	4628      	mov	r0, r5
    c882:	601c      	str	r4, [r3, #0]
    c884:	bd38      	pop	{r3, r4, r5, pc}
    c886:	bf00      	nop

0000c888 <xflowf>:
    c888:	b508      	push	{r3, lr}
    c88a:	b140      	cbz	r0, c89e <xflowf+0x16>
    c88c:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
    c890:	f000 fb9e 	bl	cfd0 <__aeabi_fmul>
    c894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c898:	2122      	movs	r1, #34	; 0x22
    c89a:	f7ff bfeb 	b.w	c874 <with_errnof>
    c89e:	4608      	mov	r0, r1
    c8a0:	f000 fb96 	bl	cfd0 <__aeabi_fmul>
    c8a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c8a8:	2122      	movs	r1, #34	; 0x22
    c8aa:	f7ff bfe3 	b.w	c874 <with_errnof>
    c8ae:	bf00      	nop

0000c8b0 <__math_uflowf>:
    c8b0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    c8b4:	f7ff bfe8 	b.w	c888 <xflowf>

0000c8b8 <__math_oflowf>:
    c8b8:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
    c8bc:	f7ff bfe4 	b.w	c888 <xflowf>

0000c8c0 <__aeabi_drsub>:
    c8c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c8c4:	e002      	b.n	c8cc <__adddf3>
    c8c6:	bf00      	nop

0000c8c8 <__aeabi_dsub>:
    c8c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c8cc <__adddf3>:
    c8cc:	b530      	push	{r4, r5, lr}
    c8ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c8d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c8d6:	ea94 0f05 	teq	r4, r5
    c8da:	bf08      	it	eq
    c8dc:	ea90 0f02 	teqeq	r0, r2
    c8e0:	bf1f      	itttt	ne
    c8e2:	ea54 0c00 	orrsne.w	ip, r4, r0
    c8e6:	ea55 0c02 	orrsne.w	ip, r5, r2
    c8ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c8ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c8f2:	f000 80e2 	beq.w	caba <__adddf3+0x1ee>
    c8f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c8fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c8fe:	bfb8      	it	lt
    c900:	426d      	neglt	r5, r5
    c902:	dd0c      	ble.n	c91e <__adddf3+0x52>
    c904:	442c      	add	r4, r5
    c906:	ea80 0202 	eor.w	r2, r0, r2
    c90a:	ea81 0303 	eor.w	r3, r1, r3
    c90e:	ea82 0000 	eor.w	r0, r2, r0
    c912:	ea83 0101 	eor.w	r1, r3, r1
    c916:	ea80 0202 	eor.w	r2, r0, r2
    c91a:	ea81 0303 	eor.w	r3, r1, r3
    c91e:	2d36      	cmp	r5, #54	; 0x36
    c920:	bf88      	it	hi
    c922:	bd30      	pophi	{r4, r5, pc}
    c924:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c928:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c92c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c930:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c934:	d002      	beq.n	c93c <__adddf3+0x70>
    c936:	4240      	negs	r0, r0
    c938:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c93c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c940:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c944:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c948:	d002      	beq.n	c950 <__adddf3+0x84>
    c94a:	4252      	negs	r2, r2
    c94c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c950:	ea94 0f05 	teq	r4, r5
    c954:	f000 80a7 	beq.w	caa6 <__adddf3+0x1da>
    c958:	f1a4 0401 	sub.w	r4, r4, #1
    c95c:	f1d5 0e20 	rsbs	lr, r5, #32
    c960:	db0d      	blt.n	c97e <__adddf3+0xb2>
    c962:	fa02 fc0e 	lsl.w	ip, r2, lr
    c966:	fa22 f205 	lsr.w	r2, r2, r5
    c96a:	1880      	adds	r0, r0, r2
    c96c:	f141 0100 	adc.w	r1, r1, #0
    c970:	fa03 f20e 	lsl.w	r2, r3, lr
    c974:	1880      	adds	r0, r0, r2
    c976:	fa43 f305 	asr.w	r3, r3, r5
    c97a:	4159      	adcs	r1, r3
    c97c:	e00e      	b.n	c99c <__adddf3+0xd0>
    c97e:	f1a5 0520 	sub.w	r5, r5, #32
    c982:	f10e 0e20 	add.w	lr, lr, #32
    c986:	2a01      	cmp	r2, #1
    c988:	fa03 fc0e 	lsl.w	ip, r3, lr
    c98c:	bf28      	it	cs
    c98e:	f04c 0c02 	orrcs.w	ip, ip, #2
    c992:	fa43 f305 	asr.w	r3, r3, r5
    c996:	18c0      	adds	r0, r0, r3
    c998:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c99c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c9a0:	d507      	bpl.n	c9b2 <__adddf3+0xe6>
    c9a2:	f04f 0e00 	mov.w	lr, #0
    c9a6:	f1dc 0c00 	rsbs	ip, ip, #0
    c9aa:	eb7e 0000 	sbcs.w	r0, lr, r0
    c9ae:	eb6e 0101 	sbc.w	r1, lr, r1
    c9b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c9b6:	d31b      	bcc.n	c9f0 <__adddf3+0x124>
    c9b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c9bc:	d30c      	bcc.n	c9d8 <__adddf3+0x10c>
    c9be:	0849      	lsrs	r1, r1, #1
    c9c0:	ea5f 0030 	movs.w	r0, r0, rrx
    c9c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c9c8:	f104 0401 	add.w	r4, r4, #1
    c9cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c9d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c9d4:	f080 809a 	bcs.w	cb0c <__adddf3+0x240>
    c9d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c9dc:	bf08      	it	eq
    c9de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c9e2:	f150 0000 	adcs.w	r0, r0, #0
    c9e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c9ea:	ea41 0105 	orr.w	r1, r1, r5
    c9ee:	bd30      	pop	{r4, r5, pc}
    c9f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c9f4:	4140      	adcs	r0, r0
    c9f6:	eb41 0101 	adc.w	r1, r1, r1
    c9fa:	3c01      	subs	r4, #1
    c9fc:	bf28      	it	cs
    c9fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    ca02:	d2e9      	bcs.n	c9d8 <__adddf3+0x10c>
    ca04:	f091 0f00 	teq	r1, #0
    ca08:	bf04      	itt	eq
    ca0a:	4601      	moveq	r1, r0
    ca0c:	2000      	moveq	r0, #0
    ca0e:	fab1 f381 	clz	r3, r1
    ca12:	bf08      	it	eq
    ca14:	3320      	addeq	r3, #32
    ca16:	f1a3 030b 	sub.w	r3, r3, #11
    ca1a:	f1b3 0220 	subs.w	r2, r3, #32
    ca1e:	da0c      	bge.n	ca3a <__adddf3+0x16e>
    ca20:	320c      	adds	r2, #12
    ca22:	dd08      	ble.n	ca36 <__adddf3+0x16a>
    ca24:	f102 0c14 	add.w	ip, r2, #20
    ca28:	f1c2 020c 	rsb	r2, r2, #12
    ca2c:	fa01 f00c 	lsl.w	r0, r1, ip
    ca30:	fa21 f102 	lsr.w	r1, r1, r2
    ca34:	e00c      	b.n	ca50 <__adddf3+0x184>
    ca36:	f102 0214 	add.w	r2, r2, #20
    ca3a:	bfd8      	it	le
    ca3c:	f1c2 0c20 	rsble	ip, r2, #32
    ca40:	fa01 f102 	lsl.w	r1, r1, r2
    ca44:	fa20 fc0c 	lsr.w	ip, r0, ip
    ca48:	bfdc      	itt	le
    ca4a:	ea41 010c 	orrle.w	r1, r1, ip
    ca4e:	4090      	lslle	r0, r2
    ca50:	1ae4      	subs	r4, r4, r3
    ca52:	bfa2      	ittt	ge
    ca54:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    ca58:	4329      	orrge	r1, r5
    ca5a:	bd30      	popge	{r4, r5, pc}
    ca5c:	ea6f 0404 	mvn.w	r4, r4
    ca60:	3c1f      	subs	r4, #31
    ca62:	da1c      	bge.n	ca9e <__adddf3+0x1d2>
    ca64:	340c      	adds	r4, #12
    ca66:	dc0e      	bgt.n	ca86 <__adddf3+0x1ba>
    ca68:	f104 0414 	add.w	r4, r4, #20
    ca6c:	f1c4 0220 	rsb	r2, r4, #32
    ca70:	fa20 f004 	lsr.w	r0, r0, r4
    ca74:	fa01 f302 	lsl.w	r3, r1, r2
    ca78:	ea40 0003 	orr.w	r0, r0, r3
    ca7c:	fa21 f304 	lsr.w	r3, r1, r4
    ca80:	ea45 0103 	orr.w	r1, r5, r3
    ca84:	bd30      	pop	{r4, r5, pc}
    ca86:	f1c4 040c 	rsb	r4, r4, #12
    ca8a:	f1c4 0220 	rsb	r2, r4, #32
    ca8e:	fa20 f002 	lsr.w	r0, r0, r2
    ca92:	fa01 f304 	lsl.w	r3, r1, r4
    ca96:	ea40 0003 	orr.w	r0, r0, r3
    ca9a:	4629      	mov	r1, r5
    ca9c:	bd30      	pop	{r4, r5, pc}
    ca9e:	fa21 f004 	lsr.w	r0, r1, r4
    caa2:	4629      	mov	r1, r5
    caa4:	bd30      	pop	{r4, r5, pc}
    caa6:	f094 0f00 	teq	r4, #0
    caaa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    caae:	bf06      	itte	eq
    cab0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    cab4:	3401      	addeq	r4, #1
    cab6:	3d01      	subne	r5, #1
    cab8:	e74e      	b.n	c958 <__adddf3+0x8c>
    caba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cabe:	bf18      	it	ne
    cac0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    cac4:	d029      	beq.n	cb1a <__adddf3+0x24e>
    cac6:	ea94 0f05 	teq	r4, r5
    caca:	bf08      	it	eq
    cacc:	ea90 0f02 	teqeq	r0, r2
    cad0:	d005      	beq.n	cade <__adddf3+0x212>
    cad2:	ea54 0c00 	orrs.w	ip, r4, r0
    cad6:	bf04      	itt	eq
    cad8:	4619      	moveq	r1, r3
    cada:	4610      	moveq	r0, r2
    cadc:	bd30      	pop	{r4, r5, pc}
    cade:	ea91 0f03 	teq	r1, r3
    cae2:	bf1e      	ittt	ne
    cae4:	2100      	movne	r1, #0
    cae6:	2000      	movne	r0, #0
    cae8:	bd30      	popne	{r4, r5, pc}
    caea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    caee:	d105      	bne.n	cafc <__adddf3+0x230>
    caf0:	0040      	lsls	r0, r0, #1
    caf2:	4149      	adcs	r1, r1
    caf4:	bf28      	it	cs
    caf6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    cafa:	bd30      	pop	{r4, r5, pc}
    cafc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    cb00:	bf3c      	itt	cc
    cb02:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    cb06:	bd30      	popcc	{r4, r5, pc}
    cb08:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cb0c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    cb10:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cb14:	f04f 0000 	mov.w	r0, #0
    cb18:	bd30      	pop	{r4, r5, pc}
    cb1a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cb1e:	bf1a      	itte	ne
    cb20:	4619      	movne	r1, r3
    cb22:	4610      	movne	r0, r2
    cb24:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    cb28:	bf1c      	itt	ne
    cb2a:	460b      	movne	r3, r1
    cb2c:	4602      	movne	r2, r0
    cb2e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cb32:	bf06      	itte	eq
    cb34:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    cb38:	ea91 0f03 	teqeq	r1, r3
    cb3c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    cb40:	bd30      	pop	{r4, r5, pc}
    cb42:	bf00      	nop

0000cb44 <__aeabi_ui2d>:
    cb44:	f090 0f00 	teq	r0, #0
    cb48:	bf04      	itt	eq
    cb4a:	2100      	moveq	r1, #0
    cb4c:	4770      	bxeq	lr
    cb4e:	b530      	push	{r4, r5, lr}
    cb50:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cb54:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cb58:	f04f 0500 	mov.w	r5, #0
    cb5c:	f04f 0100 	mov.w	r1, #0
    cb60:	e750      	b.n	ca04 <__adddf3+0x138>
    cb62:	bf00      	nop

0000cb64 <__aeabi_i2d>:
    cb64:	f090 0f00 	teq	r0, #0
    cb68:	bf04      	itt	eq
    cb6a:	2100      	moveq	r1, #0
    cb6c:	4770      	bxeq	lr
    cb6e:	b530      	push	{r4, r5, lr}
    cb70:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cb74:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cb78:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    cb7c:	bf48      	it	mi
    cb7e:	4240      	negmi	r0, r0
    cb80:	f04f 0100 	mov.w	r1, #0
    cb84:	e73e      	b.n	ca04 <__adddf3+0x138>
    cb86:	bf00      	nop

0000cb88 <__aeabi_f2d>:
    cb88:	0042      	lsls	r2, r0, #1
    cb8a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    cb8e:	ea4f 0131 	mov.w	r1, r1, rrx
    cb92:	ea4f 7002 	mov.w	r0, r2, lsl #28
    cb96:	bf1f      	itttt	ne
    cb98:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    cb9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    cba0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    cba4:	4770      	bxne	lr
    cba6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    cbaa:	bf08      	it	eq
    cbac:	4770      	bxeq	lr
    cbae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    cbb2:	bf04      	itt	eq
    cbb4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    cbb8:	4770      	bxeq	lr
    cbba:	b530      	push	{r4, r5, lr}
    cbbc:	f44f 7460 	mov.w	r4, #896	; 0x380
    cbc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cbc4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cbc8:	e71c      	b.n	ca04 <__adddf3+0x138>
    cbca:	bf00      	nop

0000cbcc <__aeabi_ul2d>:
    cbcc:	ea50 0201 	orrs.w	r2, r0, r1
    cbd0:	bf08      	it	eq
    cbd2:	4770      	bxeq	lr
    cbd4:	b530      	push	{r4, r5, lr}
    cbd6:	f04f 0500 	mov.w	r5, #0
    cbda:	e00a      	b.n	cbf2 <__aeabi_l2d+0x16>

0000cbdc <__aeabi_l2d>:
    cbdc:	ea50 0201 	orrs.w	r2, r0, r1
    cbe0:	bf08      	it	eq
    cbe2:	4770      	bxeq	lr
    cbe4:	b530      	push	{r4, r5, lr}
    cbe6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    cbea:	d502      	bpl.n	cbf2 <__aeabi_l2d+0x16>
    cbec:	4240      	negs	r0, r0
    cbee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cbf2:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cbf6:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cbfa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    cbfe:	f43f aed8 	beq.w	c9b2 <__adddf3+0xe6>
    cc02:	f04f 0203 	mov.w	r2, #3
    cc06:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cc0a:	bf18      	it	ne
    cc0c:	3203      	addne	r2, #3
    cc0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cc12:	bf18      	it	ne
    cc14:	3203      	addne	r2, #3
    cc16:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    cc1a:	f1c2 0320 	rsb	r3, r2, #32
    cc1e:	fa00 fc03 	lsl.w	ip, r0, r3
    cc22:	fa20 f002 	lsr.w	r0, r0, r2
    cc26:	fa01 fe03 	lsl.w	lr, r1, r3
    cc2a:	ea40 000e 	orr.w	r0, r0, lr
    cc2e:	fa21 f102 	lsr.w	r1, r1, r2
    cc32:	4414      	add	r4, r2
    cc34:	e6bd      	b.n	c9b2 <__adddf3+0xe6>
    cc36:	bf00      	nop

0000cc38 <__gedf2>:
    cc38:	f04f 3cff 	mov.w	ip, #4294967295
    cc3c:	e006      	b.n	cc4c <__cmpdf2+0x4>
    cc3e:	bf00      	nop

0000cc40 <__ledf2>:
    cc40:	f04f 0c01 	mov.w	ip, #1
    cc44:	e002      	b.n	cc4c <__cmpdf2+0x4>
    cc46:	bf00      	nop

0000cc48 <__cmpdf2>:
    cc48:	f04f 0c01 	mov.w	ip, #1
    cc4c:	f84d cd04 	str.w	ip, [sp, #-4]!
    cc50:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cc54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cc58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cc5c:	bf18      	it	ne
    cc5e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    cc62:	d01b      	beq.n	cc9c <__cmpdf2+0x54>
    cc64:	b001      	add	sp, #4
    cc66:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    cc6a:	bf0c      	ite	eq
    cc6c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    cc70:	ea91 0f03 	teqne	r1, r3
    cc74:	bf02      	ittt	eq
    cc76:	ea90 0f02 	teqeq	r0, r2
    cc7a:	2000      	moveq	r0, #0
    cc7c:	4770      	bxeq	lr
    cc7e:	f110 0f00 	cmn.w	r0, #0
    cc82:	ea91 0f03 	teq	r1, r3
    cc86:	bf58      	it	pl
    cc88:	4299      	cmppl	r1, r3
    cc8a:	bf08      	it	eq
    cc8c:	4290      	cmpeq	r0, r2
    cc8e:	bf2c      	ite	cs
    cc90:	17d8      	asrcs	r0, r3, #31
    cc92:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    cc96:	f040 0001 	orr.w	r0, r0, #1
    cc9a:	4770      	bx	lr
    cc9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cca0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cca4:	d102      	bne.n	ccac <__cmpdf2+0x64>
    cca6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    ccaa:	d107      	bne.n	ccbc <__cmpdf2+0x74>
    ccac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    ccb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ccb4:	d1d6      	bne.n	cc64 <__cmpdf2+0x1c>
    ccb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    ccba:	d0d3      	beq.n	cc64 <__cmpdf2+0x1c>
    ccbc:	f85d 0b04 	ldr.w	r0, [sp], #4
    ccc0:	4770      	bx	lr
    ccc2:	bf00      	nop

0000ccc4 <__aeabi_cdrcmple>:
    ccc4:	4684      	mov	ip, r0
    ccc6:	4610      	mov	r0, r2
    ccc8:	4662      	mov	r2, ip
    ccca:	468c      	mov	ip, r1
    cccc:	4619      	mov	r1, r3
    ccce:	4663      	mov	r3, ip
    ccd0:	e000      	b.n	ccd4 <__aeabi_cdcmpeq>
    ccd2:	bf00      	nop

0000ccd4 <__aeabi_cdcmpeq>:
    ccd4:	b501      	push	{r0, lr}
    ccd6:	f7ff ffb7 	bl	cc48 <__cmpdf2>
    ccda:	2800      	cmp	r0, #0
    ccdc:	bf48      	it	mi
    ccde:	f110 0f00 	cmnmi.w	r0, #0
    cce2:	bd01      	pop	{r0, pc}

0000cce4 <__aeabi_dcmpeq>:
    cce4:	f84d ed08 	str.w	lr, [sp, #-8]!
    cce8:	f7ff fff4 	bl	ccd4 <__aeabi_cdcmpeq>
    ccec:	bf0c      	ite	eq
    ccee:	2001      	moveq	r0, #1
    ccf0:	2000      	movne	r0, #0
    ccf2:	f85d fb08 	ldr.w	pc, [sp], #8
    ccf6:	bf00      	nop

0000ccf8 <__aeabi_dcmplt>:
    ccf8:	f84d ed08 	str.w	lr, [sp, #-8]!
    ccfc:	f7ff ffea 	bl	ccd4 <__aeabi_cdcmpeq>
    cd00:	bf34      	ite	cc
    cd02:	2001      	movcc	r0, #1
    cd04:	2000      	movcs	r0, #0
    cd06:	f85d fb08 	ldr.w	pc, [sp], #8
    cd0a:	bf00      	nop

0000cd0c <__aeabi_dcmple>:
    cd0c:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd10:	f7ff ffe0 	bl	ccd4 <__aeabi_cdcmpeq>
    cd14:	bf94      	ite	ls
    cd16:	2001      	movls	r0, #1
    cd18:	2000      	movhi	r0, #0
    cd1a:	f85d fb08 	ldr.w	pc, [sp], #8
    cd1e:	bf00      	nop

0000cd20 <__aeabi_dcmpge>:
    cd20:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd24:	f7ff ffce 	bl	ccc4 <__aeabi_cdrcmple>
    cd28:	bf94      	ite	ls
    cd2a:	2001      	movls	r0, #1
    cd2c:	2000      	movhi	r0, #0
    cd2e:	f85d fb08 	ldr.w	pc, [sp], #8
    cd32:	bf00      	nop

0000cd34 <__aeabi_dcmpgt>:
    cd34:	f84d ed08 	str.w	lr, [sp, #-8]!
    cd38:	f7ff ffc4 	bl	ccc4 <__aeabi_cdrcmple>
    cd3c:	bf34      	ite	cc
    cd3e:	2001      	movcc	r0, #1
    cd40:	2000      	movcs	r0, #0
    cd42:	f85d fb08 	ldr.w	pc, [sp], #8
    cd46:	bf00      	nop

0000cd48 <__aeabi_dcmpun>:
    cd48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cd4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cd50:	d102      	bne.n	cd58 <__aeabi_dcmpun+0x10>
    cd52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cd56:	d10a      	bne.n	cd6e <__aeabi_dcmpun+0x26>
    cd58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cd5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cd60:	d102      	bne.n	cd68 <__aeabi_dcmpun+0x20>
    cd62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cd66:	d102      	bne.n	cd6e <__aeabi_dcmpun+0x26>
    cd68:	f04f 0000 	mov.w	r0, #0
    cd6c:	4770      	bx	lr
    cd6e:	f04f 0001 	mov.w	r0, #1
    cd72:	4770      	bx	lr

0000cd74 <__aeabi_d2uiz>:
    cd74:	004a      	lsls	r2, r1, #1
    cd76:	d211      	bcs.n	cd9c <__aeabi_d2uiz+0x28>
    cd78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    cd7c:	d211      	bcs.n	cda2 <__aeabi_d2uiz+0x2e>
    cd7e:	d50d      	bpl.n	cd9c <__aeabi_d2uiz+0x28>
    cd80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    cd84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    cd88:	d40e      	bmi.n	cda8 <__aeabi_d2uiz+0x34>
    cd8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cd8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cd92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    cd96:	fa23 f002 	lsr.w	r0, r3, r2
    cd9a:	4770      	bx	lr
    cd9c:	f04f 0000 	mov.w	r0, #0
    cda0:	4770      	bx	lr
    cda2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    cda6:	d102      	bne.n	cdae <__aeabi_d2uiz+0x3a>
    cda8:	f04f 30ff 	mov.w	r0, #4294967295
    cdac:	4770      	bx	lr
    cdae:	f04f 0000 	mov.w	r0, #0
    cdb2:	4770      	bx	lr

0000cdb4 <__aeabi_frsub>:
    cdb4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    cdb8:	e002      	b.n	cdc0 <__addsf3>
    cdba:	bf00      	nop

0000cdbc <__aeabi_fsub>:
    cdbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000cdc0 <__addsf3>:
    cdc0:	0042      	lsls	r2, r0, #1
    cdc2:	bf1f      	itttt	ne
    cdc4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    cdc8:	ea92 0f03 	teqne	r2, r3
    cdcc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    cdd0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    cdd4:	d06a      	beq.n	ceac <__addsf3+0xec>
    cdd6:	ea4f 6212 	mov.w	r2, r2, lsr #24
    cdda:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    cdde:	bfc1      	itttt	gt
    cde0:	18d2      	addgt	r2, r2, r3
    cde2:	4041      	eorgt	r1, r0
    cde4:	4048      	eorgt	r0, r1
    cde6:	4041      	eorgt	r1, r0
    cde8:	bfb8      	it	lt
    cdea:	425b      	neglt	r3, r3
    cdec:	2b19      	cmp	r3, #25
    cdee:	bf88      	it	hi
    cdf0:	4770      	bxhi	lr
    cdf2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    cdf6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cdfa:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cdfe:	bf18      	it	ne
    ce00:	4240      	negne	r0, r0
    ce02:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    ce06:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    ce0a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    ce0e:	bf18      	it	ne
    ce10:	4249      	negne	r1, r1
    ce12:	ea92 0f03 	teq	r2, r3
    ce16:	d03f      	beq.n	ce98 <__addsf3+0xd8>
    ce18:	f1a2 0201 	sub.w	r2, r2, #1
    ce1c:	fa41 fc03 	asr.w	ip, r1, r3
    ce20:	eb10 000c 	adds.w	r0, r0, ip
    ce24:	f1c3 0320 	rsb	r3, r3, #32
    ce28:	fa01 f103 	lsl.w	r1, r1, r3
    ce2c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    ce30:	d502      	bpl.n	ce38 <__addsf3+0x78>
    ce32:	4249      	negs	r1, r1
    ce34:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    ce38:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ce3c:	d313      	bcc.n	ce66 <__addsf3+0xa6>
    ce3e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    ce42:	d306      	bcc.n	ce52 <__addsf3+0x92>
    ce44:	0840      	lsrs	r0, r0, #1
    ce46:	ea4f 0131 	mov.w	r1, r1, rrx
    ce4a:	f102 0201 	add.w	r2, r2, #1
    ce4e:	2afe      	cmp	r2, #254	; 0xfe
    ce50:	d251      	bcs.n	cef6 <__addsf3+0x136>
    ce52:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    ce56:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    ce5a:	bf08      	it	eq
    ce5c:	f020 0001 	biceq.w	r0, r0, #1
    ce60:	ea40 0003 	orr.w	r0, r0, r3
    ce64:	4770      	bx	lr
    ce66:	0049      	lsls	r1, r1, #1
    ce68:	eb40 0000 	adc.w	r0, r0, r0
    ce6c:	3a01      	subs	r2, #1
    ce6e:	bf28      	it	cs
    ce70:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    ce74:	d2ed      	bcs.n	ce52 <__addsf3+0x92>
    ce76:	fab0 fc80 	clz	ip, r0
    ce7a:	f1ac 0c08 	sub.w	ip, ip, #8
    ce7e:	ebb2 020c 	subs.w	r2, r2, ip
    ce82:	fa00 f00c 	lsl.w	r0, r0, ip
    ce86:	bfaa      	itet	ge
    ce88:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    ce8c:	4252      	neglt	r2, r2
    ce8e:	4318      	orrge	r0, r3
    ce90:	bfbc      	itt	lt
    ce92:	40d0      	lsrlt	r0, r2
    ce94:	4318      	orrlt	r0, r3
    ce96:	4770      	bx	lr
    ce98:	f092 0f00 	teq	r2, #0
    ce9c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    cea0:	bf06      	itte	eq
    cea2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    cea6:	3201      	addeq	r2, #1
    cea8:	3b01      	subne	r3, #1
    ceaa:	e7b5      	b.n	ce18 <__addsf3+0x58>
    ceac:	ea4f 0341 	mov.w	r3, r1, lsl #1
    ceb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    ceb4:	bf18      	it	ne
    ceb6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    ceba:	d021      	beq.n	cf00 <__addsf3+0x140>
    cebc:	ea92 0f03 	teq	r2, r3
    cec0:	d004      	beq.n	cecc <__addsf3+0x10c>
    cec2:	f092 0f00 	teq	r2, #0
    cec6:	bf08      	it	eq
    cec8:	4608      	moveq	r0, r1
    ceca:	4770      	bx	lr
    cecc:	ea90 0f01 	teq	r0, r1
    ced0:	bf1c      	itt	ne
    ced2:	2000      	movne	r0, #0
    ced4:	4770      	bxne	lr
    ced6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    ceda:	d104      	bne.n	cee6 <__addsf3+0x126>
    cedc:	0040      	lsls	r0, r0, #1
    cede:	bf28      	it	cs
    cee0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    cee4:	4770      	bx	lr
    cee6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    ceea:	bf3c      	itt	cc
    ceec:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    cef0:	4770      	bxcc	lr
    cef2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    cef6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    cefa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cefe:	4770      	bx	lr
    cf00:	ea7f 6222 	mvns.w	r2, r2, asr #24
    cf04:	bf16      	itet	ne
    cf06:	4608      	movne	r0, r1
    cf08:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    cf0c:	4601      	movne	r1, r0
    cf0e:	0242      	lsls	r2, r0, #9
    cf10:	bf06      	itte	eq
    cf12:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    cf16:	ea90 0f01 	teqeq	r0, r1
    cf1a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    cf1e:	4770      	bx	lr

0000cf20 <__aeabi_ui2f>:
    cf20:	f04f 0300 	mov.w	r3, #0
    cf24:	e004      	b.n	cf30 <__aeabi_i2f+0x8>
    cf26:	bf00      	nop

0000cf28 <__aeabi_i2f>:
    cf28:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    cf2c:	bf48      	it	mi
    cf2e:	4240      	negmi	r0, r0
    cf30:	ea5f 0c00 	movs.w	ip, r0
    cf34:	bf08      	it	eq
    cf36:	4770      	bxeq	lr
    cf38:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    cf3c:	4601      	mov	r1, r0
    cf3e:	f04f 0000 	mov.w	r0, #0
    cf42:	e01c      	b.n	cf7e <__aeabi_l2f+0x2a>

0000cf44 <__aeabi_ul2f>:
    cf44:	ea50 0201 	orrs.w	r2, r0, r1
    cf48:	bf08      	it	eq
    cf4a:	4770      	bxeq	lr
    cf4c:	f04f 0300 	mov.w	r3, #0
    cf50:	e00a      	b.n	cf68 <__aeabi_l2f+0x14>
    cf52:	bf00      	nop

0000cf54 <__aeabi_l2f>:
    cf54:	ea50 0201 	orrs.w	r2, r0, r1
    cf58:	bf08      	it	eq
    cf5a:	4770      	bxeq	lr
    cf5c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    cf60:	d502      	bpl.n	cf68 <__aeabi_l2f+0x14>
    cf62:	4240      	negs	r0, r0
    cf64:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cf68:	ea5f 0c01 	movs.w	ip, r1
    cf6c:	bf02      	ittt	eq
    cf6e:	4684      	moveq	ip, r0
    cf70:	4601      	moveq	r1, r0
    cf72:	2000      	moveq	r0, #0
    cf74:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    cf78:	bf08      	it	eq
    cf7a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    cf7e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    cf82:	fabc f28c 	clz	r2, ip
    cf86:	3a08      	subs	r2, #8
    cf88:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    cf8c:	db10      	blt.n	cfb0 <__aeabi_l2f+0x5c>
    cf8e:	fa01 fc02 	lsl.w	ip, r1, r2
    cf92:	4463      	add	r3, ip
    cf94:	fa00 fc02 	lsl.w	ip, r0, r2
    cf98:	f1c2 0220 	rsb	r2, r2, #32
    cf9c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    cfa0:	fa20 f202 	lsr.w	r2, r0, r2
    cfa4:	eb43 0002 	adc.w	r0, r3, r2
    cfa8:	bf08      	it	eq
    cfaa:	f020 0001 	biceq.w	r0, r0, #1
    cfae:	4770      	bx	lr
    cfb0:	f102 0220 	add.w	r2, r2, #32
    cfb4:	fa01 fc02 	lsl.w	ip, r1, r2
    cfb8:	f1c2 0220 	rsb	r2, r2, #32
    cfbc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    cfc0:	fa21 f202 	lsr.w	r2, r1, r2
    cfc4:	eb43 0002 	adc.w	r0, r3, r2
    cfc8:	bf08      	it	eq
    cfca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    cfce:	4770      	bx	lr

0000cfd0 <__aeabi_fmul>:
    cfd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cfd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    cfd8:	bf1e      	ittt	ne
    cfda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    cfde:	ea92 0f0c 	teqne	r2, ip
    cfe2:	ea93 0f0c 	teqne	r3, ip
    cfe6:	d06f      	beq.n	d0c8 <__aeabi_fmul+0xf8>
    cfe8:	441a      	add	r2, r3
    cfea:	ea80 0c01 	eor.w	ip, r0, r1
    cfee:	0240      	lsls	r0, r0, #9
    cff0:	bf18      	it	ne
    cff2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    cff6:	d01e      	beq.n	d036 <__aeabi_fmul+0x66>
    cff8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    cffc:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    d000:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    d004:	fba0 3101 	umull	r3, r1, r0, r1
    d008:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    d00c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    d010:	bf3e      	ittt	cc
    d012:	0049      	lslcc	r1, r1, #1
    d014:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    d018:	005b      	lslcc	r3, r3, #1
    d01a:	ea40 0001 	orr.w	r0, r0, r1
    d01e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    d022:	2afd      	cmp	r2, #253	; 0xfd
    d024:	d81d      	bhi.n	d062 <__aeabi_fmul+0x92>
    d026:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    d02a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    d02e:	bf08      	it	eq
    d030:	f020 0001 	biceq.w	r0, r0, #1
    d034:	4770      	bx	lr
    d036:	f090 0f00 	teq	r0, #0
    d03a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    d03e:	bf08      	it	eq
    d040:	0249      	lsleq	r1, r1, #9
    d042:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    d046:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    d04a:	3a7f      	subs	r2, #127	; 0x7f
    d04c:	bfc2      	ittt	gt
    d04e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    d052:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    d056:	4770      	bxgt	lr
    d058:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d05c:	f04f 0300 	mov.w	r3, #0
    d060:	3a01      	subs	r2, #1
    d062:	dc5d      	bgt.n	d120 <__aeabi_fmul+0x150>
    d064:	f112 0f19 	cmn.w	r2, #25
    d068:	bfdc      	itt	le
    d06a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    d06e:	4770      	bxle	lr
    d070:	f1c2 0200 	rsb	r2, r2, #0
    d074:	0041      	lsls	r1, r0, #1
    d076:	fa21 f102 	lsr.w	r1, r1, r2
    d07a:	f1c2 0220 	rsb	r2, r2, #32
    d07e:	fa00 fc02 	lsl.w	ip, r0, r2
    d082:	ea5f 0031 	movs.w	r0, r1, rrx
    d086:	f140 0000 	adc.w	r0, r0, #0
    d08a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    d08e:	bf08      	it	eq
    d090:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    d094:	4770      	bx	lr
    d096:	f092 0f00 	teq	r2, #0
    d09a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    d09e:	bf02      	ittt	eq
    d0a0:	0040      	lsleq	r0, r0, #1
    d0a2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    d0a6:	3a01      	subeq	r2, #1
    d0a8:	d0f9      	beq.n	d09e <__aeabi_fmul+0xce>
    d0aa:	ea40 000c 	orr.w	r0, r0, ip
    d0ae:	f093 0f00 	teq	r3, #0
    d0b2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    d0b6:	bf02      	ittt	eq
    d0b8:	0049      	lsleq	r1, r1, #1
    d0ba:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    d0be:	3b01      	subeq	r3, #1
    d0c0:	d0f9      	beq.n	d0b6 <__aeabi_fmul+0xe6>
    d0c2:	ea41 010c 	orr.w	r1, r1, ip
    d0c6:	e78f      	b.n	cfe8 <__aeabi_fmul+0x18>
    d0c8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    d0cc:	ea92 0f0c 	teq	r2, ip
    d0d0:	bf18      	it	ne
    d0d2:	ea93 0f0c 	teqne	r3, ip
    d0d6:	d00a      	beq.n	d0ee <__aeabi_fmul+0x11e>
    d0d8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    d0dc:	bf18      	it	ne
    d0de:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    d0e2:	d1d8      	bne.n	d096 <__aeabi_fmul+0xc6>
    d0e4:	ea80 0001 	eor.w	r0, r0, r1
    d0e8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    d0ec:	4770      	bx	lr
    d0ee:	f090 0f00 	teq	r0, #0
    d0f2:	bf17      	itett	ne
    d0f4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    d0f8:	4608      	moveq	r0, r1
    d0fa:	f091 0f00 	teqne	r1, #0
    d0fe:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    d102:	d014      	beq.n	d12e <__aeabi_fmul+0x15e>
    d104:	ea92 0f0c 	teq	r2, ip
    d108:	d101      	bne.n	d10e <__aeabi_fmul+0x13e>
    d10a:	0242      	lsls	r2, r0, #9
    d10c:	d10f      	bne.n	d12e <__aeabi_fmul+0x15e>
    d10e:	ea93 0f0c 	teq	r3, ip
    d112:	d103      	bne.n	d11c <__aeabi_fmul+0x14c>
    d114:	024b      	lsls	r3, r1, #9
    d116:	bf18      	it	ne
    d118:	4608      	movne	r0, r1
    d11a:	d108      	bne.n	d12e <__aeabi_fmul+0x15e>
    d11c:	ea80 0001 	eor.w	r0, r0, r1
    d120:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    d124:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    d128:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d12c:	4770      	bx	lr
    d12e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    d132:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    d136:	4770      	bx	lr

0000d138 <__aeabi_fdiv>:
    d138:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d13c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    d140:	bf1e      	ittt	ne
    d142:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    d146:	ea92 0f0c 	teqne	r2, ip
    d14a:	ea93 0f0c 	teqne	r3, ip
    d14e:	d069      	beq.n	d224 <__aeabi_fdiv+0xec>
    d150:	eba2 0203 	sub.w	r2, r2, r3
    d154:	ea80 0c01 	eor.w	ip, r0, r1
    d158:	0249      	lsls	r1, r1, #9
    d15a:	ea4f 2040 	mov.w	r0, r0, lsl #9
    d15e:	d037      	beq.n	d1d0 <__aeabi_fdiv+0x98>
    d160:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d164:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    d168:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    d16c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    d170:	428b      	cmp	r3, r1
    d172:	bf38      	it	cc
    d174:	005b      	lslcc	r3, r3, #1
    d176:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    d17a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    d17e:	428b      	cmp	r3, r1
    d180:	bf24      	itt	cs
    d182:	1a5b      	subcs	r3, r3, r1
    d184:	ea40 000c 	orrcs.w	r0, r0, ip
    d188:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    d18c:	bf24      	itt	cs
    d18e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    d192:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d196:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    d19a:	bf24      	itt	cs
    d19c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    d1a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d1a4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    d1a8:	bf24      	itt	cs
    d1aa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    d1ae:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d1b2:	011b      	lsls	r3, r3, #4
    d1b4:	bf18      	it	ne
    d1b6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    d1ba:	d1e0      	bne.n	d17e <__aeabi_fdiv+0x46>
    d1bc:	2afd      	cmp	r2, #253	; 0xfd
    d1be:	f63f af50 	bhi.w	d062 <__aeabi_fmul+0x92>
    d1c2:	428b      	cmp	r3, r1
    d1c4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    d1c8:	bf08      	it	eq
    d1ca:	f020 0001 	biceq.w	r0, r0, #1
    d1ce:	4770      	bx	lr
    d1d0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    d1d4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    d1d8:	327f      	adds	r2, #127	; 0x7f
    d1da:	bfc2      	ittt	gt
    d1dc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    d1e0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    d1e4:	4770      	bxgt	lr
    d1e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d1ea:	f04f 0300 	mov.w	r3, #0
    d1ee:	3a01      	subs	r2, #1
    d1f0:	e737      	b.n	d062 <__aeabi_fmul+0x92>
    d1f2:	f092 0f00 	teq	r2, #0
    d1f6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    d1fa:	bf02      	ittt	eq
    d1fc:	0040      	lsleq	r0, r0, #1
    d1fe:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    d202:	3a01      	subeq	r2, #1
    d204:	d0f9      	beq.n	d1fa <__aeabi_fdiv+0xc2>
    d206:	ea40 000c 	orr.w	r0, r0, ip
    d20a:	f093 0f00 	teq	r3, #0
    d20e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    d212:	bf02      	ittt	eq
    d214:	0049      	lsleq	r1, r1, #1
    d216:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    d21a:	3b01      	subeq	r3, #1
    d21c:	d0f9      	beq.n	d212 <__aeabi_fdiv+0xda>
    d21e:	ea41 010c 	orr.w	r1, r1, ip
    d222:	e795      	b.n	d150 <__aeabi_fdiv+0x18>
    d224:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    d228:	ea92 0f0c 	teq	r2, ip
    d22c:	d108      	bne.n	d240 <__aeabi_fdiv+0x108>
    d22e:	0242      	lsls	r2, r0, #9
    d230:	f47f af7d 	bne.w	d12e <__aeabi_fmul+0x15e>
    d234:	ea93 0f0c 	teq	r3, ip
    d238:	f47f af70 	bne.w	d11c <__aeabi_fmul+0x14c>
    d23c:	4608      	mov	r0, r1
    d23e:	e776      	b.n	d12e <__aeabi_fmul+0x15e>
    d240:	ea93 0f0c 	teq	r3, ip
    d244:	d104      	bne.n	d250 <__aeabi_fdiv+0x118>
    d246:	024b      	lsls	r3, r1, #9
    d248:	f43f af4c 	beq.w	d0e4 <__aeabi_fmul+0x114>
    d24c:	4608      	mov	r0, r1
    d24e:	e76e      	b.n	d12e <__aeabi_fmul+0x15e>
    d250:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    d254:	bf18      	it	ne
    d256:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    d25a:	d1ca      	bne.n	d1f2 <__aeabi_fdiv+0xba>
    d25c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    d260:	f47f af5c 	bne.w	d11c <__aeabi_fmul+0x14c>
    d264:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    d268:	f47f af3c 	bne.w	d0e4 <__aeabi_fmul+0x114>
    d26c:	e75f      	b.n	d12e <__aeabi_fmul+0x15e>
    d26e:	bf00      	nop

0000d270 <__gesf2>:
    d270:	f04f 3cff 	mov.w	ip, #4294967295
    d274:	e006      	b.n	d284 <__cmpsf2+0x4>
    d276:	bf00      	nop

0000d278 <__lesf2>:
    d278:	f04f 0c01 	mov.w	ip, #1
    d27c:	e002      	b.n	d284 <__cmpsf2+0x4>
    d27e:	bf00      	nop

0000d280 <__cmpsf2>:
    d280:	f04f 0c01 	mov.w	ip, #1
    d284:	f84d cd04 	str.w	ip, [sp, #-4]!
    d288:	ea4f 0240 	mov.w	r2, r0, lsl #1
    d28c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    d290:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d294:	bf18      	it	ne
    d296:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    d29a:	d011      	beq.n	d2c0 <__cmpsf2+0x40>
    d29c:	b001      	add	sp, #4
    d29e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    d2a2:	bf18      	it	ne
    d2a4:	ea90 0f01 	teqne	r0, r1
    d2a8:	bf58      	it	pl
    d2aa:	ebb2 0003 	subspl.w	r0, r2, r3
    d2ae:	bf88      	it	hi
    d2b0:	17c8      	asrhi	r0, r1, #31
    d2b2:	bf38      	it	cc
    d2b4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    d2b8:	bf18      	it	ne
    d2ba:	f040 0001 	orrne.w	r0, r0, #1
    d2be:	4770      	bx	lr
    d2c0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d2c4:	d102      	bne.n	d2cc <__cmpsf2+0x4c>
    d2c6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    d2ca:	d105      	bne.n	d2d8 <__cmpsf2+0x58>
    d2cc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    d2d0:	d1e4      	bne.n	d29c <__cmpsf2+0x1c>
    d2d2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    d2d6:	d0e1      	beq.n	d29c <__cmpsf2+0x1c>
    d2d8:	f85d 0b04 	ldr.w	r0, [sp], #4
    d2dc:	4770      	bx	lr
    d2de:	bf00      	nop

0000d2e0 <__aeabi_cfrcmple>:
    d2e0:	4684      	mov	ip, r0
    d2e2:	4608      	mov	r0, r1
    d2e4:	4661      	mov	r1, ip
    d2e6:	e7ff      	b.n	d2e8 <__aeabi_cfcmpeq>

0000d2e8 <__aeabi_cfcmpeq>:
    d2e8:	b50f      	push	{r0, r1, r2, r3, lr}
    d2ea:	f7ff ffc9 	bl	d280 <__cmpsf2>
    d2ee:	2800      	cmp	r0, #0
    d2f0:	bf48      	it	mi
    d2f2:	f110 0f00 	cmnmi.w	r0, #0
    d2f6:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000d2f8 <__aeabi_fcmpeq>:
    d2f8:	f84d ed08 	str.w	lr, [sp, #-8]!
    d2fc:	f7ff fff4 	bl	d2e8 <__aeabi_cfcmpeq>
    d300:	bf0c      	ite	eq
    d302:	2001      	moveq	r0, #1
    d304:	2000      	movne	r0, #0
    d306:	f85d fb08 	ldr.w	pc, [sp], #8
    d30a:	bf00      	nop

0000d30c <__aeabi_fcmplt>:
    d30c:	f84d ed08 	str.w	lr, [sp, #-8]!
    d310:	f7ff ffea 	bl	d2e8 <__aeabi_cfcmpeq>
    d314:	bf34      	ite	cc
    d316:	2001      	movcc	r0, #1
    d318:	2000      	movcs	r0, #0
    d31a:	f85d fb08 	ldr.w	pc, [sp], #8
    d31e:	bf00      	nop

0000d320 <__aeabi_fcmple>:
    d320:	f84d ed08 	str.w	lr, [sp, #-8]!
    d324:	f7ff ffe0 	bl	d2e8 <__aeabi_cfcmpeq>
    d328:	bf94      	ite	ls
    d32a:	2001      	movls	r0, #1
    d32c:	2000      	movhi	r0, #0
    d32e:	f85d fb08 	ldr.w	pc, [sp], #8
    d332:	bf00      	nop

0000d334 <__aeabi_fcmpge>:
    d334:	f84d ed08 	str.w	lr, [sp, #-8]!
    d338:	f7ff ffd2 	bl	d2e0 <__aeabi_cfrcmple>
    d33c:	bf94      	ite	ls
    d33e:	2001      	movls	r0, #1
    d340:	2000      	movhi	r0, #0
    d342:	f85d fb08 	ldr.w	pc, [sp], #8
    d346:	bf00      	nop

0000d348 <__aeabi_fcmpgt>:
    d348:	f84d ed08 	str.w	lr, [sp, #-8]!
    d34c:	f7ff ffc8 	bl	d2e0 <__aeabi_cfrcmple>
    d350:	bf34      	ite	cc
    d352:	2001      	movcc	r0, #1
    d354:	2000      	movcs	r0, #0
    d356:	f85d fb08 	ldr.w	pc, [sp], #8
    d35a:	bf00      	nop

0000d35c <__aeabi_f2iz>:
    d35c:	ea4f 0240 	mov.w	r2, r0, lsl #1
    d360:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    d364:	d30f      	bcc.n	d386 <__aeabi_f2iz+0x2a>
    d366:	f04f 039e 	mov.w	r3, #158	; 0x9e
    d36a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    d36e:	d90d      	bls.n	d38c <__aeabi_f2iz+0x30>
    d370:	ea4f 2300 	mov.w	r3, r0, lsl #8
    d374:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d378:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    d37c:	fa23 f002 	lsr.w	r0, r3, r2
    d380:	bf18      	it	ne
    d382:	4240      	negne	r0, r0
    d384:	4770      	bx	lr
    d386:	f04f 0000 	mov.w	r0, #0
    d38a:	4770      	bx	lr
    d38c:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d390:	d101      	bne.n	d396 <__aeabi_f2iz+0x3a>
    d392:	0242      	lsls	r2, r0, #9
    d394:	d105      	bne.n	d3a2 <__aeabi_f2iz+0x46>
    d396:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    d39a:	bf08      	it	eq
    d39c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d3a0:	4770      	bx	lr
    d3a2:	f04f 0000 	mov.w	r0, #0
    d3a6:	4770      	bx	lr

0000d3a8 <__aeabi_f2uiz>:
    d3a8:	0042      	lsls	r2, r0, #1
    d3aa:	d20e      	bcs.n	d3ca <__aeabi_f2uiz+0x22>
    d3ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    d3b0:	d30b      	bcc.n	d3ca <__aeabi_f2uiz+0x22>
    d3b2:	f04f 039e 	mov.w	r3, #158	; 0x9e
    d3b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    d3ba:	d409      	bmi.n	d3d0 <__aeabi_f2uiz+0x28>
    d3bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
    d3c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d3c4:	fa23 f002 	lsr.w	r0, r3, r2
    d3c8:	4770      	bx	lr
    d3ca:	f04f 0000 	mov.w	r0, #0
    d3ce:	4770      	bx	lr
    d3d0:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d3d4:	d101      	bne.n	d3da <__aeabi_f2uiz+0x32>
    d3d6:	0242      	lsls	r2, r0, #9
    d3d8:	d102      	bne.n	d3e0 <__aeabi_f2uiz+0x38>
    d3da:	f04f 30ff 	mov.w	r0, #4294967295
    d3de:	4770      	bx	lr
    d3e0:	f04f 0000 	mov.w	r0, #0
    d3e4:	4770      	bx	lr
    d3e6:	bf00      	nop

0000d3e8 <malloc>:
    d3e8:	4b02      	ldr	r3, [pc, #8]	; (d3f4 <malloc+0xc>)
    d3ea:	4601      	mov	r1, r0
    d3ec:	6818      	ldr	r0, [r3, #0]
    d3ee:	f000 b803 	b.w	d3f8 <_malloc_r>
    d3f2:	bf00      	nop
    d3f4:	1fff9160 	.word	0x1fff9160

0000d3f8 <_malloc_r>:
    d3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3fc:	f101 060b 	add.w	r6, r1, #11
    d400:	2e16      	cmp	r6, #22
    d402:	b083      	sub	sp, #12
    d404:	4604      	mov	r4, r0
    d406:	d824      	bhi.n	d452 <_malloc_r+0x5a>
    d408:	2910      	cmp	r1, #16
    d40a:	f200 80ba 	bhi.w	d582 <_malloc_r+0x18a>
    d40e:	f000 faa3 	bl	d958 <__malloc_lock>
    d412:	2610      	movs	r6, #16
    d414:	2218      	movs	r2, #24
    d416:	2002      	movs	r0, #2
    d418:	4fb5      	ldr	r7, [pc, #724]	; (d6f0 <_malloc_r+0x2f8>)
    d41a:	443a      	add	r2, r7
    d41c:	f1a2 0108 	sub.w	r1, r2, #8
    d420:	6853      	ldr	r3, [r2, #4]
    d422:	428b      	cmp	r3, r1
    d424:	f000 80ba 	beq.w	d59c <_malloc_r+0x1a4>
    d428:	685a      	ldr	r2, [r3, #4]
    d42a:	68d9      	ldr	r1, [r3, #12]
    d42c:	f022 0203 	bic.w	r2, r2, #3
    d430:	441a      	add	r2, r3
    d432:	689d      	ldr	r5, [r3, #8]
    d434:	60e9      	str	r1, [r5, #12]
    d436:	608d      	str	r5, [r1, #8]
    d438:	6851      	ldr	r1, [r2, #4]
    d43a:	f041 0101 	orr.w	r1, r1, #1
    d43e:	4620      	mov	r0, r4
    d440:	6051      	str	r1, [r2, #4]
    d442:	f103 0508 	add.w	r5, r3, #8
    d446:	f000 fa8d 	bl	d964 <__malloc_unlock>
    d44a:	4628      	mov	r0, r5
    d44c:	b003      	add	sp, #12
    d44e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d452:	f036 0607 	bics.w	r6, r6, #7
    d456:	f100 8094 	bmi.w	d582 <_malloc_r+0x18a>
    d45a:	42b1      	cmp	r1, r6
    d45c:	f200 8091 	bhi.w	d582 <_malloc_r+0x18a>
    d460:	f000 fa7a 	bl	d958 <__malloc_lock>
    d464:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    d468:	f0c0 819a 	bcc.w	d7a0 <_malloc_r+0x3a8>
    d46c:	0a73      	lsrs	r3, r6, #9
    d46e:	f000 808f 	beq.w	d590 <_malloc_r+0x198>
    d472:	2b04      	cmp	r3, #4
    d474:	f200 816f 	bhi.w	d756 <_malloc_r+0x35e>
    d478:	09b3      	lsrs	r3, r6, #6
    d47a:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d47e:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    d482:	00c3      	lsls	r3, r0, #3
    d484:	4f9a      	ldr	r7, [pc, #616]	; (d6f0 <_malloc_r+0x2f8>)
    d486:	443b      	add	r3, r7
    d488:	f1a3 0508 	sub.w	r5, r3, #8
    d48c:	685b      	ldr	r3, [r3, #4]
    d48e:	429d      	cmp	r5, r3
    d490:	d106      	bne.n	d4a0 <_malloc_r+0xa8>
    d492:	e00c      	b.n	d4ae <_malloc_r+0xb6>
    d494:	2900      	cmp	r1, #0
    d496:	f280 8127 	bge.w	d6e8 <_malloc_r+0x2f0>
    d49a:	68db      	ldr	r3, [r3, #12]
    d49c:	429d      	cmp	r5, r3
    d49e:	d006      	beq.n	d4ae <_malloc_r+0xb6>
    d4a0:	685a      	ldr	r2, [r3, #4]
    d4a2:	f022 0203 	bic.w	r2, r2, #3
    d4a6:	1b91      	subs	r1, r2, r6
    d4a8:	290f      	cmp	r1, #15
    d4aa:	ddf3      	ble.n	d494 <_malloc_r+0x9c>
    d4ac:	4660      	mov	r0, ip
    d4ae:	693d      	ldr	r5, [r7, #16]
    d4b0:	f8df c240 	ldr.w	ip, [pc, #576]	; d6f4 <_malloc_r+0x2fc>
    d4b4:	4565      	cmp	r5, ip
    d4b6:	d07c      	beq.n	d5b2 <_malloc_r+0x1ba>
    d4b8:	686a      	ldr	r2, [r5, #4]
    d4ba:	f022 0203 	bic.w	r2, r2, #3
    d4be:	1b93      	subs	r3, r2, r6
    d4c0:	2b0f      	cmp	r3, #15
    d4c2:	f300 817b 	bgt.w	d7bc <_malloc_r+0x3c4>
    d4c6:	2b00      	cmp	r3, #0
    d4c8:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    d4cc:	f280 816c 	bge.w	d7a8 <_malloc_r+0x3b0>
    d4d0:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    d4d4:	f080 811a 	bcs.w	d70c <_malloc_r+0x314>
    d4d8:	08d3      	lsrs	r3, r2, #3
    d4da:	6879      	ldr	r1, [r7, #4]
    d4dc:	3301      	adds	r3, #1
    d4de:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    d4e2:	2201      	movs	r2, #1
    d4e4:	fa02 f20e 	lsl.w	r2, r2, lr
    d4e8:	430a      	orrs	r2, r1
    d4ea:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    d4ee:	f8c5 e008 	str.w	lr, [r5, #8]
    d4f2:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    d4f6:	3908      	subs	r1, #8
    d4f8:	60e9      	str	r1, [r5, #12]
    d4fa:	607a      	str	r2, [r7, #4]
    d4fc:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d500:	f8ce 500c 	str.w	r5, [lr, #12]
    d504:	1083      	asrs	r3, r0, #2
    d506:	2101      	movs	r1, #1
    d508:	4099      	lsls	r1, r3
    d50a:	4291      	cmp	r1, r2
    d50c:	d857      	bhi.n	d5be <_malloc_r+0x1c6>
    d50e:	4211      	tst	r1, r2
    d510:	d106      	bne.n	d520 <_malloc_r+0x128>
    d512:	f020 0003 	bic.w	r0, r0, #3
    d516:	0049      	lsls	r1, r1, #1
    d518:	4211      	tst	r1, r2
    d51a:	f100 0004 	add.w	r0, r0, #4
    d51e:	d0fa      	beq.n	d516 <_malloc_r+0x11e>
    d520:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    d524:	464d      	mov	r5, r9
    d526:	4686      	mov	lr, r0
    d528:	f8d5 800c 	ldr.w	r8, [r5, #12]
    d52c:	4545      	cmp	r5, r8
    d52e:	d108      	bne.n	d542 <_malloc_r+0x14a>
    d530:	e11d      	b.n	d76e <_malloc_r+0x376>
    d532:	2b00      	cmp	r3, #0
    d534:	f280 8124 	bge.w	d780 <_malloc_r+0x388>
    d538:	f8d8 800c 	ldr.w	r8, [r8, #12]
    d53c:	4545      	cmp	r5, r8
    d53e:	f000 8116 	beq.w	d76e <_malloc_r+0x376>
    d542:	f8d8 2004 	ldr.w	r2, [r8, #4]
    d546:	f022 0203 	bic.w	r2, r2, #3
    d54a:	1b93      	subs	r3, r2, r6
    d54c:	2b0f      	cmp	r3, #15
    d54e:	ddf0      	ble.n	d532 <_malloc_r+0x13a>
    d550:	4620      	mov	r0, r4
    d552:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    d556:	eb08 0106 	add.w	r1, r8, r6
    d55a:	f046 0601 	orr.w	r6, r6, #1
    d55e:	f8c8 6004 	str.w	r6, [r8, #4]
    d562:	60ec      	str	r4, [r5, #12]
    d564:	60a5      	str	r5, [r4, #8]
    d566:	f043 0401 	orr.w	r4, r3, #1
    d56a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    d56e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    d572:	604c      	str	r4, [r1, #4]
    d574:	f848 3002 	str.w	r3, [r8, r2]
    d578:	f000 f9f4 	bl	d964 <__malloc_unlock>
    d57c:	f108 0508 	add.w	r5, r8, #8
    d580:	e002      	b.n	d588 <_malloc_r+0x190>
    d582:	230c      	movs	r3, #12
    d584:	6023      	str	r3, [r4, #0]
    d586:	2500      	movs	r5, #0
    d588:	4628      	mov	r0, r5
    d58a:	b003      	add	sp, #12
    d58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d590:	f44f 7300 	mov.w	r3, #512	; 0x200
    d594:	2040      	movs	r0, #64	; 0x40
    d596:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    d59a:	e773      	b.n	d484 <_malloc_r+0x8c>
    d59c:	68d3      	ldr	r3, [r2, #12]
    d59e:	429a      	cmp	r2, r3
    d5a0:	bf08      	it	eq
    d5a2:	3002      	addeq	r0, #2
    d5a4:	f47f af40 	bne.w	d428 <_malloc_r+0x30>
    d5a8:	693d      	ldr	r5, [r7, #16]
    d5aa:	f8df c148 	ldr.w	ip, [pc, #328]	; d6f4 <_malloc_r+0x2fc>
    d5ae:	4565      	cmp	r5, ip
    d5b0:	d182      	bne.n	d4b8 <_malloc_r+0xc0>
    d5b2:	687a      	ldr	r2, [r7, #4]
    d5b4:	1083      	asrs	r3, r0, #2
    d5b6:	2101      	movs	r1, #1
    d5b8:	4099      	lsls	r1, r3
    d5ba:	4291      	cmp	r1, r2
    d5bc:	d9a7      	bls.n	d50e <_malloc_r+0x116>
    d5be:	68bd      	ldr	r5, [r7, #8]
    d5c0:	686b      	ldr	r3, [r5, #4]
    d5c2:	f023 0903 	bic.w	r9, r3, #3
    d5c6:	454e      	cmp	r6, r9
    d5c8:	d803      	bhi.n	d5d2 <_malloc_r+0x1da>
    d5ca:	eba9 0306 	sub.w	r3, r9, r6
    d5ce:	2b0f      	cmp	r3, #15
    d5d0:	dc7a      	bgt.n	d6c8 <_malloc_r+0x2d0>
    d5d2:	f8df b124 	ldr.w	fp, [pc, #292]	; d6f8 <_malloc_r+0x300>
    d5d6:	4b49      	ldr	r3, [pc, #292]	; (d6fc <_malloc_r+0x304>)
    d5d8:	f8db 2000 	ldr.w	r2, [fp]
    d5dc:	681b      	ldr	r3, [r3, #0]
    d5de:	3201      	adds	r2, #1
    d5e0:	4433      	add	r3, r6
    d5e2:	eb05 0a09 	add.w	sl, r5, r9
    d5e6:	f000 8133 	beq.w	d850 <_malloc_r+0x458>
    d5ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d5ee:	330f      	adds	r3, #15
    d5f0:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    d5f4:	f028 080f 	bic.w	r8, r8, #15
    d5f8:	4641      	mov	r1, r8
    d5fa:	4620      	mov	r0, r4
    d5fc:	f000 fe32 	bl	e264 <_sbrk_r>
    d600:	1c41      	adds	r1, r0, #1
    d602:	4602      	mov	r2, r0
    d604:	f000 80f3 	beq.w	d7ee <_malloc_r+0x3f6>
    d608:	4582      	cmp	sl, r0
    d60a:	f200 80ee 	bhi.w	d7ea <_malloc_r+0x3f2>
    d60e:	4b3c      	ldr	r3, [pc, #240]	; (d700 <_malloc_r+0x308>)
    d610:	6819      	ldr	r1, [r3, #0]
    d612:	4441      	add	r1, r8
    d614:	6019      	str	r1, [r3, #0]
    d616:	4608      	mov	r0, r1
    d618:	f000 814e 	beq.w	d8b8 <_malloc_r+0x4c0>
    d61c:	f8db 1000 	ldr.w	r1, [fp]
    d620:	9301      	str	r3, [sp, #4]
    d622:	3101      	adds	r1, #1
    d624:	bf1b      	ittet	ne
    d626:	eba2 010a 	subne.w	r1, r2, sl
    d62a:	1809      	addne	r1, r1, r0
    d62c:	f8cb 2000 	streq.w	r2, [fp]
    d630:	6019      	strne	r1, [r3, #0]
    d632:	f012 0b07 	ands.w	fp, r2, #7
    d636:	f000 8117 	beq.w	d868 <_malloc_r+0x470>
    d63a:	f1cb 0108 	rsb	r1, fp, #8
    d63e:	440a      	add	r2, r1
    d640:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    d644:	4490      	add	r8, r2
    d646:	3108      	adds	r1, #8
    d648:	eba1 0108 	sub.w	r1, r1, r8
    d64c:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d650:	4651      	mov	r1, sl
    d652:	4620      	mov	r0, r4
    d654:	9200      	str	r2, [sp, #0]
    d656:	f000 fe05 	bl	e264 <_sbrk_r>
    d65a:	1c42      	adds	r2, r0, #1
    d65c:	e9dd 2300 	ldrd	r2, r3, [sp]
    d660:	f000 814f 	beq.w	d902 <_malloc_r+0x50a>
    d664:	1a80      	subs	r0, r0, r2
    d666:	eb00 080a 	add.w	r8, r0, sl
    d66a:	6819      	ldr	r1, [r3, #0]
    d66c:	60ba      	str	r2, [r7, #8]
    d66e:	f048 0001 	orr.w	r0, r8, #1
    d672:	4451      	add	r1, sl
    d674:	42bd      	cmp	r5, r7
    d676:	6050      	str	r0, [r2, #4]
    d678:	6019      	str	r1, [r3, #0]
    d67a:	f000 8129 	beq.w	d8d0 <_malloc_r+0x4d8>
    d67e:	f1b9 0f0f 	cmp.w	r9, #15
    d682:	f240 8127 	bls.w	d8d4 <_malloc_r+0x4dc>
    d686:	6868      	ldr	r0, [r5, #4]
    d688:	f1a9 0c0c 	sub.w	ip, r9, #12
    d68c:	f02c 0c07 	bic.w	ip, ip, #7
    d690:	f000 0001 	and.w	r0, r0, #1
    d694:	ea40 000c 	orr.w	r0, r0, ip
    d698:	6068      	str	r0, [r5, #4]
    d69a:	f04f 0e05 	mov.w	lr, #5
    d69e:	eb05 000c 	add.w	r0, r5, ip
    d6a2:	f1bc 0f0f 	cmp.w	ip, #15
    d6a6:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    d6aa:	f200 8132 	bhi.w	d912 <_malloc_r+0x51a>
    d6ae:	6850      	ldr	r0, [r2, #4]
    d6b0:	4615      	mov	r5, r2
    d6b2:	4b14      	ldr	r3, [pc, #80]	; (d704 <_malloc_r+0x30c>)
    d6b4:	681a      	ldr	r2, [r3, #0]
    d6b6:	428a      	cmp	r2, r1
    d6b8:	bf38      	it	cc
    d6ba:	6019      	strcc	r1, [r3, #0]
    d6bc:	4b12      	ldr	r3, [pc, #72]	; (d708 <_malloc_r+0x310>)
    d6be:	681a      	ldr	r2, [r3, #0]
    d6c0:	428a      	cmp	r2, r1
    d6c2:	bf38      	it	cc
    d6c4:	6019      	strcc	r1, [r3, #0]
    d6c6:	e094      	b.n	d7f2 <_malloc_r+0x3fa>
    d6c8:	19aa      	adds	r2, r5, r6
    d6ca:	f043 0301 	orr.w	r3, r3, #1
    d6ce:	f046 0601 	orr.w	r6, r6, #1
    d6d2:	606e      	str	r6, [r5, #4]
    d6d4:	4620      	mov	r0, r4
    d6d6:	60ba      	str	r2, [r7, #8]
    d6d8:	6053      	str	r3, [r2, #4]
    d6da:	f000 f943 	bl	d964 <__malloc_unlock>
    d6de:	3508      	adds	r5, #8
    d6e0:	4628      	mov	r0, r5
    d6e2:	b003      	add	sp, #12
    d6e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d6e8:	68d9      	ldr	r1, [r3, #12]
    d6ea:	441a      	add	r2, r3
    d6ec:	e6a1      	b.n	d432 <_malloc_r+0x3a>
    d6ee:	bf00      	nop
    d6f0:	1fff8ab8 	.word	0x1fff8ab8
    d6f4:	1fff8ac0 	.word	0x1fff8ac0
    d6f8:	1fff8ec0 	.word	0x1fff8ec0
    d6fc:	1fffd628 	.word	0x1fffd628
    d700:	1fffd5f8 	.word	0x1fffd5f8
    d704:	1fffd620 	.word	0x1fffd620
    d708:	1fffd624 	.word	0x1fffd624
    d70c:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    d710:	ea4f 2352 	mov.w	r3, r2, lsr #9
    d714:	d363      	bcc.n	d7de <_malloc_r+0x3e6>
    d716:	2b14      	cmp	r3, #20
    d718:	f200 80b7 	bhi.w	d88a <_malloc_r+0x492>
    d71c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    d720:	00c9      	lsls	r1, r1, #3
    d722:	335b      	adds	r3, #91	; 0x5b
    d724:	eb07 0e01 	add.w	lr, r7, r1
    d728:	5879      	ldr	r1, [r7, r1]
    d72a:	f1ae 0e08 	sub.w	lr, lr, #8
    d72e:	458e      	cmp	lr, r1
    d730:	f000 8091 	beq.w	d856 <_malloc_r+0x45e>
    d734:	684b      	ldr	r3, [r1, #4]
    d736:	f023 0303 	bic.w	r3, r3, #3
    d73a:	4293      	cmp	r3, r2
    d73c:	d902      	bls.n	d744 <_malloc_r+0x34c>
    d73e:	6889      	ldr	r1, [r1, #8]
    d740:	458e      	cmp	lr, r1
    d742:	d1f7      	bne.n	d734 <_malloc_r+0x33c>
    d744:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    d748:	687a      	ldr	r2, [r7, #4]
    d74a:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    d74e:	f8ce 5008 	str.w	r5, [lr, #8]
    d752:	60cd      	str	r5, [r1, #12]
    d754:	e6d6      	b.n	d504 <_malloc_r+0x10c>
    d756:	2b14      	cmp	r3, #20
    d758:	d959      	bls.n	d80e <_malloc_r+0x416>
    d75a:	2b54      	cmp	r3, #84	; 0x54
    d75c:	f200 809d 	bhi.w	d89a <_malloc_r+0x4a2>
    d760:	0b33      	lsrs	r3, r6, #12
    d762:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d766:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    d76a:	00c3      	lsls	r3, r0, #3
    d76c:	e68a      	b.n	d484 <_malloc_r+0x8c>
    d76e:	f10e 0e01 	add.w	lr, lr, #1
    d772:	f01e 0f03 	tst.w	lr, #3
    d776:	f105 0508 	add.w	r5, r5, #8
    d77a:	f47f aed5 	bne.w	d528 <_malloc_r+0x130>
    d77e:	e051      	b.n	d824 <_malloc_r+0x42c>
    d780:	4442      	add	r2, r8
    d782:	4645      	mov	r5, r8
    d784:	6853      	ldr	r3, [r2, #4]
    d786:	f8d8 100c 	ldr.w	r1, [r8, #12]
    d78a:	f043 0301 	orr.w	r3, r3, #1
    d78e:	6053      	str	r3, [r2, #4]
    d790:	f855 3f08 	ldr.w	r3, [r5, #8]!
    d794:	4620      	mov	r0, r4
    d796:	60d9      	str	r1, [r3, #12]
    d798:	608b      	str	r3, [r1, #8]
    d79a:	f000 f8e3 	bl	d964 <__malloc_unlock>
    d79e:	e6f3      	b.n	d588 <_malloc_r+0x190>
    d7a0:	08f0      	lsrs	r0, r6, #3
    d7a2:	f106 0208 	add.w	r2, r6, #8
    d7a6:	e637      	b.n	d418 <_malloc_r+0x20>
    d7a8:	442a      	add	r2, r5
    d7aa:	4620      	mov	r0, r4
    d7ac:	6853      	ldr	r3, [r2, #4]
    d7ae:	f043 0301 	orr.w	r3, r3, #1
    d7b2:	6053      	str	r3, [r2, #4]
    d7b4:	3508      	adds	r5, #8
    d7b6:	f000 f8d5 	bl	d964 <__malloc_unlock>
    d7ba:	e6e5      	b.n	d588 <_malloc_r+0x190>
    d7bc:	19a9      	adds	r1, r5, r6
    d7be:	4620      	mov	r0, r4
    d7c0:	f046 0601 	orr.w	r6, r6, #1
    d7c4:	f043 0401 	orr.w	r4, r3, #1
    d7c8:	606e      	str	r6, [r5, #4]
    d7ca:	e9c7 1104 	strd	r1, r1, [r7, #16]
    d7ce:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    d7d2:	604c      	str	r4, [r1, #4]
    d7d4:	50ab      	str	r3, [r5, r2]
    d7d6:	f000 f8c5 	bl	d964 <__malloc_unlock>
    d7da:	3508      	adds	r5, #8
    d7dc:	e6d4      	b.n	d588 <_malloc_r+0x190>
    d7de:	0993      	lsrs	r3, r2, #6
    d7e0:	f103 0139 	add.w	r1, r3, #57	; 0x39
    d7e4:	00c9      	lsls	r1, r1, #3
    d7e6:	3338      	adds	r3, #56	; 0x38
    d7e8:	e79c      	b.n	d724 <_malloc_r+0x32c>
    d7ea:	42bd      	cmp	r5, r7
    d7ec:	d05f      	beq.n	d8ae <_malloc_r+0x4b6>
    d7ee:	68bd      	ldr	r5, [r7, #8]
    d7f0:	6868      	ldr	r0, [r5, #4]
    d7f2:	f020 0803 	bic.w	r8, r0, #3
    d7f6:	4546      	cmp	r6, r8
    d7f8:	eba8 0306 	sub.w	r3, r8, r6
    d7fc:	d802      	bhi.n	d804 <_malloc_r+0x40c>
    d7fe:	2b0f      	cmp	r3, #15
    d800:	f73f af62 	bgt.w	d6c8 <_malloc_r+0x2d0>
    d804:	4620      	mov	r0, r4
    d806:	f000 f8ad 	bl	d964 <__malloc_unlock>
    d80a:	2500      	movs	r5, #0
    d80c:	e6bc      	b.n	d588 <_malloc_r+0x190>
    d80e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d812:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    d816:	00c3      	lsls	r3, r0, #3
    d818:	e634      	b.n	d484 <_malloc_r+0x8c>
    d81a:	f859 3908 	ldr.w	r3, [r9], #-8
    d81e:	454b      	cmp	r3, r9
    d820:	f040 8096 	bne.w	d950 <_malloc_r+0x558>
    d824:	f010 0f03 	tst.w	r0, #3
    d828:	f100 30ff 	add.w	r0, r0, #4294967295
    d82c:	d1f5      	bne.n	d81a <_malloc_r+0x422>
    d82e:	687b      	ldr	r3, [r7, #4]
    d830:	ea23 0301 	bic.w	r3, r3, r1
    d834:	607b      	str	r3, [r7, #4]
    d836:	0049      	lsls	r1, r1, #1
    d838:	4299      	cmp	r1, r3
    d83a:	f63f aec0 	bhi.w	d5be <_malloc_r+0x1c6>
    d83e:	b919      	cbnz	r1, d848 <_malloc_r+0x450>
    d840:	e6bd      	b.n	d5be <_malloc_r+0x1c6>
    d842:	0049      	lsls	r1, r1, #1
    d844:	f10e 0e04 	add.w	lr, lr, #4
    d848:	4219      	tst	r1, r3
    d84a:	d0fa      	beq.n	d842 <_malloc_r+0x44a>
    d84c:	4670      	mov	r0, lr
    d84e:	e667      	b.n	d520 <_malloc_r+0x128>
    d850:	f103 0810 	add.w	r8, r3, #16
    d854:	e6d0      	b.n	d5f8 <_malloc_r+0x200>
    d856:	109a      	asrs	r2, r3, #2
    d858:	f04f 0801 	mov.w	r8, #1
    d85c:	687b      	ldr	r3, [r7, #4]
    d85e:	fa08 f202 	lsl.w	r2, r8, r2
    d862:	431a      	orrs	r2, r3
    d864:	607a      	str	r2, [r7, #4]
    d866:	e770      	b.n	d74a <_malloc_r+0x352>
    d868:	eb02 0108 	add.w	r1, r2, r8
    d86c:	4249      	negs	r1, r1
    d86e:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d872:	4651      	mov	r1, sl
    d874:	4620      	mov	r0, r4
    d876:	9200      	str	r2, [sp, #0]
    d878:	f000 fcf4 	bl	e264 <_sbrk_r>
    d87c:	1c43      	adds	r3, r0, #1
    d87e:	e9dd 2300 	ldrd	r2, r3, [sp]
    d882:	f47f aeef 	bne.w	d664 <_malloc_r+0x26c>
    d886:	46da      	mov	sl, fp
    d888:	e6ef      	b.n	d66a <_malloc_r+0x272>
    d88a:	2b54      	cmp	r3, #84	; 0x54
    d88c:	d825      	bhi.n	d8da <_malloc_r+0x4e2>
    d88e:	0b13      	lsrs	r3, r2, #12
    d890:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    d894:	00c9      	lsls	r1, r1, #3
    d896:	336e      	adds	r3, #110	; 0x6e
    d898:	e744      	b.n	d724 <_malloc_r+0x32c>
    d89a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d89e:	d825      	bhi.n	d8ec <_malloc_r+0x4f4>
    d8a0:	0bf3      	lsrs	r3, r6, #15
    d8a2:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d8a6:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    d8aa:	00c3      	lsls	r3, r0, #3
    d8ac:	e5ea      	b.n	d484 <_malloc_r+0x8c>
    d8ae:	4b29      	ldr	r3, [pc, #164]	; (d954 <_malloc_r+0x55c>)
    d8b0:	6818      	ldr	r0, [r3, #0]
    d8b2:	4440      	add	r0, r8
    d8b4:	6018      	str	r0, [r3, #0]
    d8b6:	e6b1      	b.n	d61c <_malloc_r+0x224>
    d8b8:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    d8bc:	f1bc 0f00 	cmp.w	ip, #0
    d8c0:	f47f aeac 	bne.w	d61c <_malloc_r+0x224>
    d8c4:	68bd      	ldr	r5, [r7, #8]
    d8c6:	44c8      	add	r8, r9
    d8c8:	f048 0001 	orr.w	r0, r8, #1
    d8cc:	6068      	str	r0, [r5, #4]
    d8ce:	e6f0      	b.n	d6b2 <_malloc_r+0x2ba>
    d8d0:	4615      	mov	r5, r2
    d8d2:	e6ee      	b.n	d6b2 <_malloc_r+0x2ba>
    d8d4:	2301      	movs	r3, #1
    d8d6:	6053      	str	r3, [r2, #4]
    d8d8:	e794      	b.n	d804 <_malloc_r+0x40c>
    d8da:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d8de:	d823      	bhi.n	d928 <_malloc_r+0x530>
    d8e0:	0bd3      	lsrs	r3, r2, #15
    d8e2:	f103 0178 	add.w	r1, r3, #120	; 0x78
    d8e6:	00c9      	lsls	r1, r1, #3
    d8e8:	3377      	adds	r3, #119	; 0x77
    d8ea:	e71b      	b.n	d724 <_malloc_r+0x32c>
    d8ec:	f240 5254 	movw	r2, #1364	; 0x554
    d8f0:	4293      	cmp	r3, r2
    d8f2:	d823      	bhi.n	d93c <_malloc_r+0x544>
    d8f4:	0cb3      	lsrs	r3, r6, #18
    d8f6:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d8fa:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    d8fe:	00c3      	lsls	r3, r0, #3
    d900:	e5c0      	b.n	d484 <_malloc_r+0x8c>
    d902:	f1ab 0b08 	sub.w	fp, fp, #8
    d906:	44d8      	add	r8, fp
    d908:	eba8 0802 	sub.w	r8, r8, r2
    d90c:	f04f 0a00 	mov.w	sl, #0
    d910:	e6ab      	b.n	d66a <_malloc_r+0x272>
    d912:	f105 0108 	add.w	r1, r5, #8
    d916:	4620      	mov	r0, r4
    d918:	9300      	str	r3, [sp, #0]
    d91a:	f000 fddf 	bl	e4dc <_free_r>
    d91e:	68bd      	ldr	r5, [r7, #8]
    d920:	9b00      	ldr	r3, [sp, #0]
    d922:	6868      	ldr	r0, [r5, #4]
    d924:	6819      	ldr	r1, [r3, #0]
    d926:	e6c4      	b.n	d6b2 <_malloc_r+0x2ba>
    d928:	f240 5154 	movw	r1, #1364	; 0x554
    d92c:	428b      	cmp	r3, r1
    d92e:	d80b      	bhi.n	d948 <_malloc_r+0x550>
    d930:	0c93      	lsrs	r3, r2, #18
    d932:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    d936:	00c9      	lsls	r1, r1, #3
    d938:	337c      	adds	r3, #124	; 0x7c
    d93a:	e6f3      	b.n	d724 <_malloc_r+0x32c>
    d93c:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d940:	207f      	movs	r0, #127	; 0x7f
    d942:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    d946:	e59d      	b.n	d484 <_malloc_r+0x8c>
    d948:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    d94c:	237e      	movs	r3, #126	; 0x7e
    d94e:	e6e9      	b.n	d724 <_malloc_r+0x32c>
    d950:	687b      	ldr	r3, [r7, #4]
    d952:	e770      	b.n	d836 <_malloc_r+0x43e>
    d954:	1fffd5f8 	.word	0x1fffd5f8

0000d958 <__malloc_lock>:
    d958:	4801      	ldr	r0, [pc, #4]	; (d960 <__malloc_lock+0x8>)
    d95a:	f000 bcd9 	b.w	e310 <__retarget_lock_acquire_recursive>
    d95e:	bf00      	nop
    d960:	1fffd770 	.word	0x1fffd770

0000d964 <__malloc_unlock>:
    d964:	4801      	ldr	r0, [pc, #4]	; (d96c <__malloc_unlock+0x8>)
    d966:	f000 bcd5 	b.w	e314 <__retarget_lock_release_recursive>
    d96a:	bf00      	nop
    d96c:	1fffd770 	.word	0x1fffd770

0000d970 <_realloc_r>:
    d970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d974:	4617      	mov	r7, r2
    d976:	2900      	cmp	r1, #0
    d978:	f000 8098 	beq.w	daac <_realloc_r+0x13c>
    d97c:	460c      	mov	r4, r1
    d97e:	f107 050b 	add.w	r5, r7, #11
    d982:	4680      	mov	r8, r0
    d984:	f7ff ffe8 	bl	d958 <__malloc_lock>
    d988:	2d16      	cmp	r5, #22
    d98a:	f854 1c04 	ldr.w	r1, [r4, #-4]
    d98e:	d85b      	bhi.n	da48 <_realloc_r+0xd8>
    d990:	2510      	movs	r5, #16
    d992:	462a      	mov	r2, r5
    d994:	42af      	cmp	r7, r5
    d996:	d85c      	bhi.n	da52 <_realloc_r+0xe2>
    d998:	f021 0603 	bic.w	r6, r1, #3
    d99c:	4296      	cmp	r6, r2
    d99e:	f1a4 0908 	sub.w	r9, r4, #8
    d9a2:	da62      	bge.n	da6a <_realloc_r+0xfa>
    d9a4:	4bbc      	ldr	r3, [pc, #752]	; (dc98 <_realloc_r+0x328>)
    d9a6:	f8d3 c008 	ldr.w	ip, [r3, #8]
    d9aa:	eb09 0006 	add.w	r0, r9, r6
    d9ae:	4584      	cmp	ip, r0
    d9b0:	f000 8097 	beq.w	dae2 <_realloc_r+0x172>
    d9b4:	f8d0 c004 	ldr.w	ip, [r0, #4]
    d9b8:	f02c 0301 	bic.w	r3, ip, #1
    d9bc:	4403      	add	r3, r0
    d9be:	685b      	ldr	r3, [r3, #4]
    d9c0:	07db      	lsls	r3, r3, #31
    d9c2:	d468      	bmi.n	da96 <_realloc_r+0x126>
    d9c4:	f02c 0c03 	bic.w	ip, ip, #3
    d9c8:	eb06 030c 	add.w	r3, r6, ip
    d9cc:	4293      	cmp	r3, r2
    d9ce:	da47      	bge.n	da60 <_realloc_r+0xf0>
    d9d0:	07cb      	lsls	r3, r1, #31
    d9d2:	d410      	bmi.n	d9f6 <_realloc_r+0x86>
    d9d4:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d9d8:	eba9 0a03 	sub.w	sl, r9, r3
    d9dc:	f8da 3004 	ldr.w	r3, [sl, #4]
    d9e0:	f023 0103 	bic.w	r1, r3, #3
    d9e4:	448c      	add	ip, r1
    d9e6:	44b4      	add	ip, r6
    d9e8:	4594      	cmp	ip, r2
    d9ea:	f280 8111 	bge.w	dc10 <_realloc_r+0x2a0>
    d9ee:	1873      	adds	r3, r6, r1
    d9f0:	4293      	cmp	r3, r2
    d9f2:	f280 80e8 	bge.w	dbc6 <_realloc_r+0x256>
    d9f6:	4639      	mov	r1, r7
    d9f8:	4640      	mov	r0, r8
    d9fa:	f7ff fcfd 	bl	d3f8 <_malloc_r>
    d9fe:	4607      	mov	r7, r0
    da00:	b1e0      	cbz	r0, da3c <_realloc_r+0xcc>
    da02:	f854 3c04 	ldr.w	r3, [r4, #-4]
    da06:	f023 0301 	bic.w	r3, r3, #1
    da0a:	444b      	add	r3, r9
    da0c:	f1a0 0208 	sub.w	r2, r0, #8
    da10:	4293      	cmp	r3, r2
    da12:	f000 80d2 	beq.w	dbba <_realloc_r+0x24a>
    da16:	1f32      	subs	r2, r6, #4
    da18:	2a24      	cmp	r2, #36	; 0x24
    da1a:	f200 80f5 	bhi.w	dc08 <_realloc_r+0x298>
    da1e:	2a13      	cmp	r2, #19
    da20:	f200 80ac 	bhi.w	db7c <_realloc_r+0x20c>
    da24:	4603      	mov	r3, r0
    da26:	4622      	mov	r2, r4
    da28:	6811      	ldr	r1, [r2, #0]
    da2a:	6019      	str	r1, [r3, #0]
    da2c:	6851      	ldr	r1, [r2, #4]
    da2e:	6059      	str	r1, [r3, #4]
    da30:	6892      	ldr	r2, [r2, #8]
    da32:	609a      	str	r2, [r3, #8]
    da34:	4621      	mov	r1, r4
    da36:	4640      	mov	r0, r8
    da38:	f000 fd50 	bl	e4dc <_free_r>
    da3c:	4640      	mov	r0, r8
    da3e:	f7ff ff91 	bl	d964 <__malloc_unlock>
    da42:	4638      	mov	r0, r7
    da44:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da48:	f025 0507 	bic.w	r5, r5, #7
    da4c:	2d00      	cmp	r5, #0
    da4e:	462a      	mov	r2, r5
    da50:	daa0      	bge.n	d994 <_realloc_r+0x24>
    da52:	230c      	movs	r3, #12
    da54:	f8c8 3000 	str.w	r3, [r8]
    da58:	2700      	movs	r7, #0
    da5a:	4638      	mov	r0, r7
    da5c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da60:	461e      	mov	r6, r3
    da62:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    da66:	60d3      	str	r3, [r2, #12]
    da68:	609a      	str	r2, [r3, #8]
    da6a:	1b73      	subs	r3, r6, r5
    da6c:	2b0f      	cmp	r3, #15
    da6e:	d822      	bhi.n	dab6 <_realloc_r+0x146>
    da70:	f8d9 3004 	ldr.w	r3, [r9, #4]
    da74:	f003 0301 	and.w	r3, r3, #1
    da78:	4333      	orrs	r3, r6
    da7a:	444e      	add	r6, r9
    da7c:	f8c9 3004 	str.w	r3, [r9, #4]
    da80:	6873      	ldr	r3, [r6, #4]
    da82:	f043 0301 	orr.w	r3, r3, #1
    da86:	6073      	str	r3, [r6, #4]
    da88:	4640      	mov	r0, r8
    da8a:	4627      	mov	r7, r4
    da8c:	f7ff ff6a 	bl	d964 <__malloc_unlock>
    da90:	4638      	mov	r0, r7
    da92:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da96:	07c9      	lsls	r1, r1, #31
    da98:	d4ad      	bmi.n	d9f6 <_realloc_r+0x86>
    da9a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    da9e:	eba9 0a03 	sub.w	sl, r9, r3
    daa2:	f8da 1004 	ldr.w	r1, [sl, #4]
    daa6:	f021 0103 	bic.w	r1, r1, #3
    daaa:	e7a0      	b.n	d9ee <_realloc_r+0x7e>
    daac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dab0:	4611      	mov	r1, r2
    dab2:	f7ff bca1 	b.w	d3f8 <_malloc_r>
    dab6:	f8d9 2004 	ldr.w	r2, [r9, #4]
    daba:	eb09 0105 	add.w	r1, r9, r5
    dabe:	f002 0201 	and.w	r2, r2, #1
    dac2:	444e      	add	r6, r9
    dac4:	f043 0301 	orr.w	r3, r3, #1
    dac8:	432a      	orrs	r2, r5
    daca:	f8c9 2004 	str.w	r2, [r9, #4]
    dace:	604b      	str	r3, [r1, #4]
    dad0:	6873      	ldr	r3, [r6, #4]
    dad2:	f043 0301 	orr.w	r3, r3, #1
    dad6:	3108      	adds	r1, #8
    dad8:	6073      	str	r3, [r6, #4]
    dada:	4640      	mov	r0, r8
    dadc:	f000 fcfe 	bl	e4dc <_free_r>
    dae0:	e7d2      	b.n	da88 <_realloc_r+0x118>
    dae2:	f8dc 0004 	ldr.w	r0, [ip, #4]
    dae6:	f020 0b03 	bic.w	fp, r0, #3
    daea:	eb06 0c0b 	add.w	ip, r6, fp
    daee:	f105 0010 	add.w	r0, r5, #16
    daf2:	4584      	cmp	ip, r0
    daf4:	da4d      	bge.n	db92 <_realloc_r+0x222>
    daf6:	07c9      	lsls	r1, r1, #31
    daf8:	f53f af7d 	bmi.w	d9f6 <_realloc_r+0x86>
    dafc:	f854 1c08 	ldr.w	r1, [r4, #-8]
    db00:	eba9 0a01 	sub.w	sl, r9, r1
    db04:	f8da 1004 	ldr.w	r1, [sl, #4]
    db08:	f021 0103 	bic.w	r1, r1, #3
    db0c:	448b      	add	fp, r1
    db0e:	44b3      	add	fp, r6
    db10:	4558      	cmp	r0, fp
    db12:	f73f af6c 	bgt.w	d9ee <_realloc_r+0x7e>
    db16:	4657      	mov	r7, sl
    db18:	f8da 100c 	ldr.w	r1, [sl, #12]
    db1c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    db20:	1f32      	subs	r2, r6, #4
    db22:	2a24      	cmp	r2, #36	; 0x24
    db24:	60c1      	str	r1, [r0, #12]
    db26:	6088      	str	r0, [r1, #8]
    db28:	f200 80db 	bhi.w	dce2 <_realloc_r+0x372>
    db2c:	2a13      	cmp	r2, #19
    db2e:	f240 80d6 	bls.w	dcde <_realloc_r+0x36e>
    db32:	6821      	ldr	r1, [r4, #0]
    db34:	f8ca 1008 	str.w	r1, [sl, #8]
    db38:	6861      	ldr	r1, [r4, #4]
    db3a:	f8ca 100c 	str.w	r1, [sl, #12]
    db3e:	2a1b      	cmp	r2, #27
    db40:	f200 80df 	bhi.w	dd02 <_realloc_r+0x392>
    db44:	3408      	adds	r4, #8
    db46:	f10a 0210 	add.w	r2, sl, #16
    db4a:	6821      	ldr	r1, [r4, #0]
    db4c:	6011      	str	r1, [r2, #0]
    db4e:	6861      	ldr	r1, [r4, #4]
    db50:	6051      	str	r1, [r2, #4]
    db52:	68a1      	ldr	r1, [r4, #8]
    db54:	6091      	str	r1, [r2, #8]
    db56:	eb0a 0105 	add.w	r1, sl, r5
    db5a:	ebab 0205 	sub.w	r2, fp, r5
    db5e:	f042 0201 	orr.w	r2, r2, #1
    db62:	6099      	str	r1, [r3, #8]
    db64:	604a      	str	r2, [r1, #4]
    db66:	f8da 3004 	ldr.w	r3, [sl, #4]
    db6a:	f003 0301 	and.w	r3, r3, #1
    db6e:	432b      	orrs	r3, r5
    db70:	4640      	mov	r0, r8
    db72:	f8ca 3004 	str.w	r3, [sl, #4]
    db76:	f7ff fef5 	bl	d964 <__malloc_unlock>
    db7a:	e76e      	b.n	da5a <_realloc_r+0xea>
    db7c:	6823      	ldr	r3, [r4, #0]
    db7e:	6003      	str	r3, [r0, #0]
    db80:	6863      	ldr	r3, [r4, #4]
    db82:	6043      	str	r3, [r0, #4]
    db84:	2a1b      	cmp	r2, #27
    db86:	d868      	bhi.n	dc5a <_realloc_r+0x2ea>
    db88:	f104 0208 	add.w	r2, r4, #8
    db8c:	f100 0308 	add.w	r3, r0, #8
    db90:	e74a      	b.n	da28 <_realloc_r+0xb8>
    db92:	eb09 0205 	add.w	r2, r9, r5
    db96:	609a      	str	r2, [r3, #8]
    db98:	ebac 0305 	sub.w	r3, ip, r5
    db9c:	f043 0301 	orr.w	r3, r3, #1
    dba0:	6053      	str	r3, [r2, #4]
    dba2:	f854 3c04 	ldr.w	r3, [r4, #-4]
    dba6:	f003 0301 	and.w	r3, r3, #1
    dbaa:	432b      	orrs	r3, r5
    dbac:	4640      	mov	r0, r8
    dbae:	f844 3c04 	str.w	r3, [r4, #-4]
    dbb2:	f7ff fed7 	bl	d964 <__malloc_unlock>
    dbb6:	4627      	mov	r7, r4
    dbb8:	e74f      	b.n	da5a <_realloc_r+0xea>
    dbba:	f850 3c04 	ldr.w	r3, [r0, #-4]
    dbbe:	f023 0303 	bic.w	r3, r3, #3
    dbc2:	441e      	add	r6, r3
    dbc4:	e751      	b.n	da6a <_realloc_r+0xfa>
    dbc6:	4657      	mov	r7, sl
    dbc8:	f8da 100c 	ldr.w	r1, [sl, #12]
    dbcc:	f857 0f08 	ldr.w	r0, [r7, #8]!
    dbd0:	1f32      	subs	r2, r6, #4
    dbd2:	2a24      	cmp	r2, #36	; 0x24
    dbd4:	60c1      	str	r1, [r0, #12]
    dbd6:	6088      	str	r0, [r1, #8]
    dbd8:	d84c      	bhi.n	dc74 <_realloc_r+0x304>
    dbda:	2a13      	cmp	r2, #19
    dbdc:	d948      	bls.n	dc70 <_realloc_r+0x300>
    dbde:	6821      	ldr	r1, [r4, #0]
    dbe0:	f8ca 1008 	str.w	r1, [sl, #8]
    dbe4:	6861      	ldr	r1, [r4, #4]
    dbe6:	f8ca 100c 	str.w	r1, [sl, #12]
    dbea:	2a1b      	cmp	r2, #27
    dbec:	d856      	bhi.n	dc9c <_realloc_r+0x32c>
    dbee:	3408      	adds	r4, #8
    dbf0:	f10a 0210 	add.w	r2, sl, #16
    dbf4:	461e      	mov	r6, r3
    dbf6:	6823      	ldr	r3, [r4, #0]
    dbf8:	6013      	str	r3, [r2, #0]
    dbfa:	6863      	ldr	r3, [r4, #4]
    dbfc:	6053      	str	r3, [r2, #4]
    dbfe:	68a3      	ldr	r3, [r4, #8]
    dc00:	6093      	str	r3, [r2, #8]
    dc02:	46d1      	mov	r9, sl
    dc04:	463c      	mov	r4, r7
    dc06:	e730      	b.n	da6a <_realloc_r+0xfa>
    dc08:	4621      	mov	r1, r4
    dc0a:	f000 f9e7 	bl	dfdc <memmove>
    dc0e:	e711      	b.n	da34 <_realloc_r+0xc4>
    dc10:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    dc14:	4657      	mov	r7, sl
    dc16:	60cb      	str	r3, [r1, #12]
    dc18:	6099      	str	r1, [r3, #8]
    dc1a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    dc1e:	f8da 300c 	ldr.w	r3, [sl, #12]
    dc22:	60cb      	str	r3, [r1, #12]
    dc24:	1f32      	subs	r2, r6, #4
    dc26:	2a24      	cmp	r2, #36	; 0x24
    dc28:	6099      	str	r1, [r3, #8]
    dc2a:	d82d      	bhi.n	dc88 <_realloc_r+0x318>
    dc2c:	2a13      	cmp	r2, #19
    dc2e:	d929      	bls.n	dc84 <_realloc_r+0x314>
    dc30:	6823      	ldr	r3, [r4, #0]
    dc32:	f8ca 3008 	str.w	r3, [sl, #8]
    dc36:	6863      	ldr	r3, [r4, #4]
    dc38:	f8ca 300c 	str.w	r3, [sl, #12]
    dc3c:	2a1b      	cmp	r2, #27
    dc3e:	d842      	bhi.n	dcc6 <_realloc_r+0x356>
    dc40:	3408      	adds	r4, #8
    dc42:	f10a 0310 	add.w	r3, sl, #16
    dc46:	6822      	ldr	r2, [r4, #0]
    dc48:	601a      	str	r2, [r3, #0]
    dc4a:	6862      	ldr	r2, [r4, #4]
    dc4c:	605a      	str	r2, [r3, #4]
    dc4e:	68a2      	ldr	r2, [r4, #8]
    dc50:	609a      	str	r2, [r3, #8]
    dc52:	4666      	mov	r6, ip
    dc54:	46d1      	mov	r9, sl
    dc56:	463c      	mov	r4, r7
    dc58:	e707      	b.n	da6a <_realloc_r+0xfa>
    dc5a:	68a3      	ldr	r3, [r4, #8]
    dc5c:	6083      	str	r3, [r0, #8]
    dc5e:	68e3      	ldr	r3, [r4, #12]
    dc60:	60c3      	str	r3, [r0, #12]
    dc62:	2a24      	cmp	r2, #36	; 0x24
    dc64:	d026      	beq.n	dcb4 <_realloc_r+0x344>
    dc66:	f104 0210 	add.w	r2, r4, #16
    dc6a:	f100 0310 	add.w	r3, r0, #16
    dc6e:	e6db      	b.n	da28 <_realloc_r+0xb8>
    dc70:	463a      	mov	r2, r7
    dc72:	e7bf      	b.n	dbf4 <_realloc_r+0x284>
    dc74:	4621      	mov	r1, r4
    dc76:	4638      	mov	r0, r7
    dc78:	461e      	mov	r6, r3
    dc7a:	46d1      	mov	r9, sl
    dc7c:	f000 f9ae 	bl	dfdc <memmove>
    dc80:	463c      	mov	r4, r7
    dc82:	e6f2      	b.n	da6a <_realloc_r+0xfa>
    dc84:	463b      	mov	r3, r7
    dc86:	e7de      	b.n	dc46 <_realloc_r+0x2d6>
    dc88:	4621      	mov	r1, r4
    dc8a:	4638      	mov	r0, r7
    dc8c:	4666      	mov	r6, ip
    dc8e:	46d1      	mov	r9, sl
    dc90:	f000 f9a4 	bl	dfdc <memmove>
    dc94:	463c      	mov	r4, r7
    dc96:	e6e8      	b.n	da6a <_realloc_r+0xfa>
    dc98:	1fff8ab8 	.word	0x1fff8ab8
    dc9c:	68a1      	ldr	r1, [r4, #8]
    dc9e:	f8ca 1010 	str.w	r1, [sl, #16]
    dca2:	68e1      	ldr	r1, [r4, #12]
    dca4:	f8ca 1014 	str.w	r1, [sl, #20]
    dca8:	2a24      	cmp	r2, #36	; 0x24
    dcaa:	d020      	beq.n	dcee <_realloc_r+0x37e>
    dcac:	3410      	adds	r4, #16
    dcae:	f10a 0218 	add.w	r2, sl, #24
    dcb2:	e79f      	b.n	dbf4 <_realloc_r+0x284>
    dcb4:	6923      	ldr	r3, [r4, #16]
    dcb6:	6103      	str	r3, [r0, #16]
    dcb8:	6961      	ldr	r1, [r4, #20]
    dcba:	6141      	str	r1, [r0, #20]
    dcbc:	f104 0218 	add.w	r2, r4, #24
    dcc0:	f100 0318 	add.w	r3, r0, #24
    dcc4:	e6b0      	b.n	da28 <_realloc_r+0xb8>
    dcc6:	68a3      	ldr	r3, [r4, #8]
    dcc8:	f8ca 3010 	str.w	r3, [sl, #16]
    dccc:	68e3      	ldr	r3, [r4, #12]
    dcce:	f8ca 3014 	str.w	r3, [sl, #20]
    dcd2:	2a24      	cmp	r2, #36	; 0x24
    dcd4:	d021      	beq.n	dd1a <_realloc_r+0x3aa>
    dcd6:	3410      	adds	r4, #16
    dcd8:	f10a 0318 	add.w	r3, sl, #24
    dcdc:	e7b3      	b.n	dc46 <_realloc_r+0x2d6>
    dcde:	463a      	mov	r2, r7
    dce0:	e733      	b.n	db4a <_realloc_r+0x1da>
    dce2:	4621      	mov	r1, r4
    dce4:	4638      	mov	r0, r7
    dce6:	f000 f979 	bl	dfdc <memmove>
    dcea:	4b16      	ldr	r3, [pc, #88]	; (dd44 <_realloc_r+0x3d4>)
    dcec:	e733      	b.n	db56 <_realloc_r+0x1e6>
    dcee:	6922      	ldr	r2, [r4, #16]
    dcf0:	f8ca 2018 	str.w	r2, [sl, #24]
    dcf4:	6962      	ldr	r2, [r4, #20]
    dcf6:	f8ca 201c 	str.w	r2, [sl, #28]
    dcfa:	3418      	adds	r4, #24
    dcfc:	f10a 0220 	add.w	r2, sl, #32
    dd00:	e778      	b.n	dbf4 <_realloc_r+0x284>
    dd02:	68a1      	ldr	r1, [r4, #8]
    dd04:	f8ca 1010 	str.w	r1, [sl, #16]
    dd08:	68e1      	ldr	r1, [r4, #12]
    dd0a:	f8ca 1014 	str.w	r1, [sl, #20]
    dd0e:	2a24      	cmp	r2, #36	; 0x24
    dd10:	d00d      	beq.n	dd2e <_realloc_r+0x3be>
    dd12:	3410      	adds	r4, #16
    dd14:	f10a 0218 	add.w	r2, sl, #24
    dd18:	e717      	b.n	db4a <_realloc_r+0x1da>
    dd1a:	6923      	ldr	r3, [r4, #16]
    dd1c:	f8ca 3018 	str.w	r3, [sl, #24]
    dd20:	6963      	ldr	r3, [r4, #20]
    dd22:	f8ca 301c 	str.w	r3, [sl, #28]
    dd26:	3418      	adds	r4, #24
    dd28:	f10a 0320 	add.w	r3, sl, #32
    dd2c:	e78b      	b.n	dc46 <_realloc_r+0x2d6>
    dd2e:	6922      	ldr	r2, [r4, #16]
    dd30:	f8ca 2018 	str.w	r2, [sl, #24]
    dd34:	6962      	ldr	r2, [r4, #20]
    dd36:	f8ca 201c 	str.w	r2, [sl, #28]
    dd3a:	3418      	adds	r4, #24
    dd3c:	f10a 0220 	add.w	r2, sl, #32
    dd40:	e703      	b.n	db4a <_realloc_r+0x1da>
    dd42:	bf00      	nop
    dd44:	1fff8ab8 	.word	0x1fff8ab8

0000dd48 <stdio_exit_handler>:
    dd48:	4a02      	ldr	r2, [pc, #8]	; (dd54 <stdio_exit_handler+0xc>)
    dd4a:	4903      	ldr	r1, [pc, #12]	; (dd58 <stdio_exit_handler+0x10>)
    dd4c:	4803      	ldr	r0, [pc, #12]	; (dd5c <stdio_exit_handler+0x14>)
    dd4e:	f000 b8bb 	b.w	dec8 <_fwalk_sglue>
    dd52:	bf00      	nop
    dd54:	1fff8ec8 	.word	0x1fff8ec8
    dd58:	00010a31 	.word	0x00010a31
    dd5c:	1fff9040 	.word	0x1fff9040

0000dd60 <cleanup_stdio>:
    dd60:	4b0c      	ldr	r3, [pc, #48]	; (dd94 <cleanup_stdio+0x34>)
    dd62:	6841      	ldr	r1, [r0, #4]
    dd64:	4299      	cmp	r1, r3
    dd66:	b510      	push	{r4, lr}
    dd68:	4604      	mov	r4, r0
    dd6a:	d001      	beq.n	dd70 <cleanup_stdio+0x10>
    dd6c:	f002 fe60 	bl	10a30 <_fclose_r>
    dd70:	68a1      	ldr	r1, [r4, #8]
    dd72:	4b09      	ldr	r3, [pc, #36]	; (dd98 <cleanup_stdio+0x38>)
    dd74:	4299      	cmp	r1, r3
    dd76:	d002      	beq.n	dd7e <cleanup_stdio+0x1e>
    dd78:	4620      	mov	r0, r4
    dd7a:	f002 fe59 	bl	10a30 <_fclose_r>
    dd7e:	68e1      	ldr	r1, [r4, #12]
    dd80:	4b06      	ldr	r3, [pc, #24]	; (dd9c <cleanup_stdio+0x3c>)
    dd82:	4299      	cmp	r1, r3
    dd84:	d004      	beq.n	dd90 <cleanup_stdio+0x30>
    dd86:	4620      	mov	r0, r4
    dd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd8c:	f002 be50 	b.w	10a30 <_fclose_r>
    dd90:	bd10      	pop	{r4, pc}
    dd92:	bf00      	nop
    dd94:	1fffd62c 	.word	0x1fffd62c
    dd98:	1fffd694 	.word	0x1fffd694
    dd9c:	1fffd6fc 	.word	0x1fffd6fc

0000dda0 <global_stdio_init.part.0>:
    dda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dda4:	4c2a      	ldr	r4, [pc, #168]	; (de50 <global_stdio_init.part.0+0xb0>)
    dda6:	4b2b      	ldr	r3, [pc, #172]	; (de54 <global_stdio_init.part.0+0xb4>)
    dda8:	482b      	ldr	r0, [pc, #172]	; (de58 <global_stdio_init.part.0+0xb8>)
    ddaa:	f8df 90b0 	ldr.w	r9, [pc, #176]	; de5c <global_stdio_init.part.0+0xbc>
    ddae:	f8df 80b0 	ldr.w	r8, [pc, #176]	; de60 <global_stdio_init.part.0+0xc0>
    ddb2:	4f2c      	ldr	r7, [pc, #176]	; (de64 <global_stdio_init.part.0+0xc4>)
    ddb4:	6018      	str	r0, [r3, #0]
    ddb6:	2500      	movs	r5, #0
    ddb8:	2304      	movs	r3, #4
    ddba:	2208      	movs	r2, #8
    ddbc:	4629      	mov	r1, r5
    ddbe:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    ddc2:	4e29      	ldr	r6, [pc, #164]	; (de68 <global_stdio_init.part.0+0xc8>)
    ddc4:	6665      	str	r5, [r4, #100]	; 0x64
    ddc6:	e9c4 5302 	strd	r5, r3, [r4, #8]
    ddca:	e9c4 5500 	strd	r5, r5, [r4]
    ddce:	e9c4 5504 	strd	r5, r5, [r4, #16]
    ddd2:	61a5      	str	r5, [r4, #24]
    ddd4:	f000 f97e 	bl	e0d4 <memset>
    ddd8:	4b24      	ldr	r3, [pc, #144]	; (de6c <global_stdio_init.part.0+0xcc>)
    ddda:	6763      	str	r3, [r4, #116]	; 0x74
    dddc:	2208      	movs	r2, #8
    ddde:	4629      	mov	r1, r5
    dde0:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    dde4:	e9c4 4907 	strd	r4, r9, [r4, #28]
    dde8:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    ddec:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    ddf0:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    ddf4:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    ddf8:	6725      	str	r5, [r4, #112]	; 0x70
    ddfa:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    ddfe:	62e6      	str	r6, [r4, #44]	; 0x2c
    de00:	f000 f968 	bl	e0d4 <memset>
    de04:	4b1a      	ldr	r3, [pc, #104]	; (de70 <global_stdio_init.part.0+0xd0>)
    de06:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    de0a:	4629      	mov	r1, r5
    de0c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    de10:	2208      	movs	r2, #8
    de12:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    de16:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    de1a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    de1e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    de22:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    de26:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    de2a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    de2e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    de32:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    de36:	f000 f94d 	bl	e0d4 <memset>
    de3a:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    de3e:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    de42:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    de46:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    de4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    de4e:	bf00      	nop
    de50:	1fffd62c 	.word	0x1fffd62c
    de54:	1fffd764 	.word	0x1fffd764
    de58:	0000dd49 	.word	0x0000dd49
    de5c:	0000df51 	.word	0x0000df51
    de60:	0000df75 	.word	0x0000df75
    de64:	0000dfb5 	.word	0x0000dfb5
    de68:	0000dfd5 	.word	0x0000dfd5
    de6c:	00010009 	.word	0x00010009
    de70:	00020012 	.word	0x00020012

0000de74 <__sinit>:
    de74:	b510      	push	{r4, lr}
    de76:	4604      	mov	r4, r0
    de78:	480a      	ldr	r0, [pc, #40]	; (dea4 <__sinit+0x30>)
    de7a:	f000 fa49 	bl	e310 <__retarget_lock_acquire_recursive>
    de7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    de80:	b923      	cbnz	r3, de8c <__sinit+0x18>
    de82:	4b09      	ldr	r3, [pc, #36]	; (dea8 <__sinit+0x34>)
    de84:	4a09      	ldr	r2, [pc, #36]	; (deac <__sinit+0x38>)
    de86:	681b      	ldr	r3, [r3, #0]
    de88:	6362      	str	r2, [r4, #52]	; 0x34
    de8a:	b123      	cbz	r3, de96 <__sinit+0x22>
    de8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de90:	4804      	ldr	r0, [pc, #16]	; (dea4 <__sinit+0x30>)
    de92:	f000 ba3f 	b.w	e314 <__retarget_lock_release_recursive>
    de96:	f7ff ff83 	bl	dda0 <global_stdio_init.part.0>
    de9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de9e:	4801      	ldr	r0, [pc, #4]	; (dea4 <__sinit+0x30>)
    dea0:	f000 ba38 	b.w	e314 <__retarget_lock_release_recursive>
    dea4:	1fffd774 	.word	0x1fffd774
    dea8:	1fffd764 	.word	0x1fffd764
    deac:	0000dd61 	.word	0x0000dd61

0000deb0 <__sfp_lock_acquire>:
    deb0:	4801      	ldr	r0, [pc, #4]	; (deb8 <__sfp_lock_acquire+0x8>)
    deb2:	f000 ba2d 	b.w	e310 <__retarget_lock_acquire_recursive>
    deb6:	bf00      	nop
    deb8:	1fffd774 	.word	0x1fffd774

0000debc <__sfp_lock_release>:
    debc:	4801      	ldr	r0, [pc, #4]	; (dec4 <__sfp_lock_release+0x8>)
    debe:	f000 ba29 	b.w	e314 <__retarget_lock_release_recursive>
    dec2:	bf00      	nop
    dec4:	1fffd774 	.word	0x1fffd774

0000dec8 <_fwalk_sglue>:
    dec8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    decc:	4680      	mov	r8, r0
    dece:	460f      	mov	r7, r1
    ded0:	4616      	mov	r6, r2
    ded2:	f04f 0900 	mov.w	r9, #0
    ded6:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    deda:	3d01      	subs	r5, #1
    dedc:	d411      	bmi.n	df02 <_fwalk_sglue+0x3a>
    dede:	89a3      	ldrh	r3, [r4, #12]
    dee0:	2b01      	cmp	r3, #1
    dee2:	f105 35ff 	add.w	r5, r5, #4294967295
    dee6:	d908      	bls.n	defa <_fwalk_sglue+0x32>
    dee8:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    deec:	3301      	adds	r3, #1
    deee:	4621      	mov	r1, r4
    def0:	d003      	beq.n	defa <_fwalk_sglue+0x32>
    def2:	4640      	mov	r0, r8
    def4:	47b8      	blx	r7
    def6:	ea49 0900 	orr.w	r9, r9, r0
    defa:	1c6b      	adds	r3, r5, #1
    defc:	f104 0468 	add.w	r4, r4, #104	; 0x68
    df00:	d1ed      	bne.n	dede <_fwalk_sglue+0x16>
    df02:	6836      	ldr	r6, [r6, #0]
    df04:	2e00      	cmp	r6, #0
    df06:	d1e6      	bne.n	ded6 <_fwalk_sglue+0xe>
    df08:	4648      	mov	r0, r9
    df0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    df0e:	bf00      	nop

0000df10 <sprintf>:
    df10:	b40e      	push	{r1, r2, r3}
    df12:	b510      	push	{r4, lr}
    df14:	b09d      	sub	sp, #116	; 0x74
    df16:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    df1a:	ab1f      	add	r3, sp, #124	; 0x7c
    df1c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    df20:	9104      	str	r1, [sp, #16]
    df22:	4909      	ldr	r1, [pc, #36]	; (df48 <sprintf+0x38>)
    df24:	f853 2b04 	ldr.w	r2, [r3], #4
    df28:	9002      	str	r0, [sp, #8]
    df2a:	4c08      	ldr	r4, [pc, #32]	; (df4c <sprintf+0x3c>)
    df2c:	6808      	ldr	r0, [r1, #0]
    df2e:	9301      	str	r3, [sp, #4]
    df30:	a902      	add	r1, sp, #8
    df32:	9405      	str	r4, [sp, #20]
    df34:	f000 ffaa 	bl	ee8c <_svfprintf_r>
    df38:	9b02      	ldr	r3, [sp, #8]
    df3a:	2200      	movs	r2, #0
    df3c:	701a      	strb	r2, [r3, #0]
    df3e:	b01d      	add	sp, #116	; 0x74
    df40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df44:	b003      	add	sp, #12
    df46:	4770      	bx	lr
    df48:	1fff9160 	.word	0x1fff9160
    df4c:	ffff0208 	.word	0xffff0208

0000df50 <__sread>:
    df50:	b510      	push	{r4, lr}
    df52:	460c      	mov	r4, r1
    df54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    df58:	f000 f96e 	bl	e238 <_read_r>
    df5c:	2800      	cmp	r0, #0
    df5e:	db03      	blt.n	df68 <__sread+0x18>
    df60:	6d23      	ldr	r3, [r4, #80]	; 0x50
    df62:	4403      	add	r3, r0
    df64:	6523      	str	r3, [r4, #80]	; 0x50
    df66:	bd10      	pop	{r4, pc}
    df68:	89a3      	ldrh	r3, [r4, #12]
    df6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    df6e:	81a3      	strh	r3, [r4, #12]
    df70:	bd10      	pop	{r4, pc}
    df72:	bf00      	nop

0000df74 <__swrite>:
    df74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df78:	460c      	mov	r4, r1
    df7a:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    df7e:	461f      	mov	r7, r3
    df80:	05cb      	lsls	r3, r1, #23
    df82:	4605      	mov	r5, r0
    df84:	4616      	mov	r6, r2
    df86:	d40b      	bmi.n	dfa0 <__swrite+0x2c>
    df88:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    df8c:	81a1      	strh	r1, [r4, #12]
    df8e:	463b      	mov	r3, r7
    df90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    df94:	4632      	mov	r2, r6
    df96:	4628      	mov	r0, r5
    df98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    df9c:	f000 b974 	b.w	e288 <_write_r>
    dfa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    dfa4:	2302      	movs	r3, #2
    dfa6:	2200      	movs	r2, #0
    dfa8:	f000 f930 	bl	e20c <_lseek_r>
    dfac:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    dfb0:	e7ea      	b.n	df88 <__swrite+0x14>
    dfb2:	bf00      	nop

0000dfb4 <__sseek>:
    dfb4:	b510      	push	{r4, lr}
    dfb6:	460c      	mov	r4, r1
    dfb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    dfbc:	f000 f926 	bl	e20c <_lseek_r>
    dfc0:	89a3      	ldrh	r3, [r4, #12]
    dfc2:	1c42      	adds	r2, r0, #1
    dfc4:	bf0e      	itee	eq
    dfc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    dfca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    dfce:	6520      	strne	r0, [r4, #80]	; 0x50
    dfd0:	81a3      	strh	r3, [r4, #12]
    dfd2:	bd10      	pop	{r4, pc}

0000dfd4 <__sclose>:
    dfd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    dfd8:	f000 b906 	b.w	e1e8 <_close_r>

0000dfdc <memmove>:
    dfdc:	4288      	cmp	r0, r1
    dfde:	d90d      	bls.n	dffc <memmove+0x20>
    dfe0:	188b      	adds	r3, r1, r2
    dfe2:	4283      	cmp	r3, r0
    dfe4:	d90a      	bls.n	dffc <memmove+0x20>
    dfe6:	eb00 0c02 	add.w	ip, r0, r2
    dfea:	b1ba      	cbz	r2, e01c <memmove+0x40>
    dfec:	4662      	mov	r2, ip
    dfee:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    dff2:	f802 cd01 	strb.w	ip, [r2, #-1]!
    dff6:	4299      	cmp	r1, r3
    dff8:	d1f9      	bne.n	dfee <memmove+0x12>
    dffa:	4770      	bx	lr
    dffc:	2a0f      	cmp	r2, #15
    dffe:	d80e      	bhi.n	e01e <memmove+0x42>
    e000:	4603      	mov	r3, r0
    e002:	f102 3cff 	add.w	ip, r2, #4294967295
    e006:	b14a      	cbz	r2, e01c <memmove+0x40>
    e008:	f10c 0c01 	add.w	ip, ip, #1
    e00c:	3b01      	subs	r3, #1
    e00e:	448c      	add	ip, r1
    e010:	f811 2b01 	ldrb.w	r2, [r1], #1
    e014:	f803 2f01 	strb.w	r2, [r3, #1]!
    e018:	4561      	cmp	r1, ip
    e01a:	d1f9      	bne.n	e010 <memmove+0x34>
    e01c:	4770      	bx	lr
    e01e:	ea40 0301 	orr.w	r3, r0, r1
    e022:	079b      	lsls	r3, r3, #30
    e024:	d150      	bne.n	e0c8 <memmove+0xec>
    e026:	f1a2 0310 	sub.w	r3, r2, #16
    e02a:	b570      	push	{r4, r5, r6, lr}
    e02c:	f101 0c20 	add.w	ip, r1, #32
    e030:	f023 050f 	bic.w	r5, r3, #15
    e034:	f101 0e10 	add.w	lr, r1, #16
    e038:	f100 0410 	add.w	r4, r0, #16
    e03c:	44ac      	add	ip, r5
    e03e:	091b      	lsrs	r3, r3, #4
    e040:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    e044:	f844 5c10 	str.w	r5, [r4, #-16]
    e048:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    e04c:	f844 5c0c 	str.w	r5, [r4, #-12]
    e050:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    e054:	f844 5c08 	str.w	r5, [r4, #-8]
    e058:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    e05c:	f844 5c04 	str.w	r5, [r4, #-4]
    e060:	f10e 0e10 	add.w	lr, lr, #16
    e064:	45e6      	cmp	lr, ip
    e066:	f104 0410 	add.w	r4, r4, #16
    e06a:	d1e9      	bne.n	e040 <memmove+0x64>
    e06c:	3301      	adds	r3, #1
    e06e:	f012 0f0c 	tst.w	r2, #12
    e072:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    e076:	f002 040f 	and.w	r4, r2, #15
    e07a:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    e07e:	d027      	beq.n	e0d0 <memmove+0xf4>
    e080:	3c04      	subs	r4, #4
    e082:	f024 0603 	bic.w	r6, r4, #3
    e086:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    e08a:	441e      	add	r6, r3
    e08c:	1f1c      	subs	r4, r3, #4
    e08e:	468e      	mov	lr, r1
    e090:	f85e 5b04 	ldr.w	r5, [lr], #4
    e094:	f844 5f04 	str.w	r5, [r4, #4]!
    e098:	42b4      	cmp	r4, r6
    e09a:	d1f9      	bne.n	e090 <memmove+0xb4>
    e09c:	f10c 0401 	add.w	r4, ip, #1
    e0a0:	f002 0203 	and.w	r2, r2, #3
    e0a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    e0a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    e0ac:	f102 3cff 	add.w	ip, r2, #4294967295
    e0b0:	b14a      	cbz	r2, e0c6 <memmove+0xea>
    e0b2:	f10c 0c01 	add.w	ip, ip, #1
    e0b6:	3b01      	subs	r3, #1
    e0b8:	448c      	add	ip, r1
    e0ba:	f811 2b01 	ldrb.w	r2, [r1], #1
    e0be:	f803 2f01 	strb.w	r2, [r3, #1]!
    e0c2:	4561      	cmp	r1, ip
    e0c4:	d1f9      	bne.n	e0ba <memmove+0xde>
    e0c6:	bd70      	pop	{r4, r5, r6, pc}
    e0c8:	f102 3cff 	add.w	ip, r2, #4294967295
    e0cc:	4603      	mov	r3, r0
    e0ce:	e79b      	b.n	e008 <memmove+0x2c>
    e0d0:	4622      	mov	r2, r4
    e0d2:	e7eb      	b.n	e0ac <memmove+0xd0>

0000e0d4 <memset>:
    e0d4:	0783      	lsls	r3, r0, #30
    e0d6:	b530      	push	{r4, r5, lr}
    e0d8:	d048      	beq.n	e16c <memset+0x98>
    e0da:	1e54      	subs	r4, r2, #1
    e0dc:	2a00      	cmp	r2, #0
    e0de:	d03f      	beq.n	e160 <memset+0x8c>
    e0e0:	b2ca      	uxtb	r2, r1
    e0e2:	4603      	mov	r3, r0
    e0e4:	e001      	b.n	e0ea <memset+0x16>
    e0e6:	3c01      	subs	r4, #1
    e0e8:	d33a      	bcc.n	e160 <memset+0x8c>
    e0ea:	f803 2b01 	strb.w	r2, [r3], #1
    e0ee:	079d      	lsls	r5, r3, #30
    e0f0:	d1f9      	bne.n	e0e6 <memset+0x12>
    e0f2:	2c03      	cmp	r4, #3
    e0f4:	d92d      	bls.n	e152 <memset+0x7e>
    e0f6:	b2cd      	uxtb	r5, r1
    e0f8:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e0fc:	2c0f      	cmp	r4, #15
    e0fe:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e102:	d936      	bls.n	e172 <memset+0x9e>
    e104:	f1a4 0210 	sub.w	r2, r4, #16
    e108:	f022 0c0f 	bic.w	ip, r2, #15
    e10c:	f103 0e20 	add.w	lr, r3, #32
    e110:	44e6      	add	lr, ip
    e112:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    e116:	f103 0210 	add.w	r2, r3, #16
    e11a:	e942 5504 	strd	r5, r5, [r2, #-16]
    e11e:	e942 5502 	strd	r5, r5, [r2, #-8]
    e122:	3210      	adds	r2, #16
    e124:	4572      	cmp	r2, lr
    e126:	d1f8      	bne.n	e11a <memset+0x46>
    e128:	f10c 0201 	add.w	r2, ip, #1
    e12c:	f014 0f0c 	tst.w	r4, #12
    e130:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    e134:	f004 0c0f 	and.w	ip, r4, #15
    e138:	d013      	beq.n	e162 <memset+0x8e>
    e13a:	f1ac 0304 	sub.w	r3, ip, #4
    e13e:	f023 0303 	bic.w	r3, r3, #3
    e142:	3304      	adds	r3, #4
    e144:	4413      	add	r3, r2
    e146:	f842 5b04 	str.w	r5, [r2], #4
    e14a:	4293      	cmp	r3, r2
    e14c:	d1fb      	bne.n	e146 <memset+0x72>
    e14e:	f00c 0403 	and.w	r4, ip, #3
    e152:	b12c      	cbz	r4, e160 <memset+0x8c>
    e154:	b2c9      	uxtb	r1, r1
    e156:	441c      	add	r4, r3
    e158:	f803 1b01 	strb.w	r1, [r3], #1
    e15c:	429c      	cmp	r4, r3
    e15e:	d1fb      	bne.n	e158 <memset+0x84>
    e160:	bd30      	pop	{r4, r5, pc}
    e162:	4664      	mov	r4, ip
    e164:	4613      	mov	r3, r2
    e166:	2c00      	cmp	r4, #0
    e168:	d1f4      	bne.n	e154 <memset+0x80>
    e16a:	e7f9      	b.n	e160 <memset+0x8c>
    e16c:	4603      	mov	r3, r0
    e16e:	4614      	mov	r4, r2
    e170:	e7bf      	b.n	e0f2 <memset+0x1e>
    e172:	461a      	mov	r2, r3
    e174:	46a4      	mov	ip, r4
    e176:	e7e0      	b.n	e13a <memset+0x66>

0000e178 <strncpy>:
    e178:	ea40 0301 	orr.w	r3, r0, r1
    e17c:	079b      	lsls	r3, r3, #30
    e17e:	b530      	push	{r4, r5, lr}
    e180:	d101      	bne.n	e186 <strncpy+0xe>
    e182:	2a03      	cmp	r2, #3
    e184:	d80f      	bhi.n	e1a6 <strncpy+0x2e>
    e186:	4684      	mov	ip, r0
    e188:	f101 3eff 	add.w	lr, r1, #4294967295
    e18c:	e007      	b.n	e19e <strncpy+0x26>
    e18e:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    e192:	f803 1b01 	strb.w	r1, [r3], #1
    e196:	1e54      	subs	r4, r2, #1
    e198:	b1c1      	cbz	r1, e1cc <strncpy+0x54>
    e19a:	469c      	mov	ip, r3
    e19c:	4622      	mov	r2, r4
    e19e:	4663      	mov	r3, ip
    e1a0:	2a00      	cmp	r2, #0
    e1a2:	d1f4      	bne.n	e18e <strncpy+0x16>
    e1a4:	bd30      	pop	{r4, r5, pc}
    e1a6:	460b      	mov	r3, r1
    e1a8:	4684      	mov	ip, r0
    e1aa:	4619      	mov	r1, r3
    e1ac:	f853 5b04 	ldr.w	r5, [r3], #4
    e1b0:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    e1b4:	ea24 0405 	bic.w	r4, r4, r5
    e1b8:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    e1bc:	d1e4      	bne.n	e188 <strncpy+0x10>
    e1be:	3a04      	subs	r2, #4
    e1c0:	2a03      	cmp	r2, #3
    e1c2:	f84c 5b04 	str.w	r5, [ip], #4
    e1c6:	4619      	mov	r1, r3
    e1c8:	d8ef      	bhi.n	e1aa <strncpy+0x32>
    e1ca:	e7dd      	b.n	e188 <strncpy+0x10>
    e1cc:	4494      	add	ip, r2
    e1ce:	2c00      	cmp	r4, #0
    e1d0:	d0e8      	beq.n	e1a4 <strncpy+0x2c>
    e1d2:	f803 1b01 	strb.w	r1, [r3], #1
    e1d6:	4563      	cmp	r3, ip
    e1d8:	d1fb      	bne.n	e1d2 <strncpy+0x5a>
    e1da:	bd30      	pop	{r4, r5, pc}

0000e1dc <__locale_mb_cur_max>:
    e1dc:	4b01      	ldr	r3, [pc, #4]	; (e1e4 <__locale_mb_cur_max+0x8>)
    e1de:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    e1e2:	4770      	bx	lr
    e1e4:	1fff8ed4 	.word	0x1fff8ed4

0000e1e8 <_close_r>:
    e1e8:	b538      	push	{r3, r4, r5, lr}
    e1ea:	4d07      	ldr	r5, [pc, #28]	; (e208 <_close_r+0x20>)
    e1ec:	2200      	movs	r2, #0
    e1ee:	4604      	mov	r4, r0
    e1f0:	4608      	mov	r0, r1
    e1f2:	602a      	str	r2, [r5, #0]
    e1f4:	f7fb feb8 	bl	9f68 <_close>
    e1f8:	1c43      	adds	r3, r0, #1
    e1fa:	d000      	beq.n	e1fe <_close_r+0x16>
    e1fc:	bd38      	pop	{r3, r4, r5, pc}
    e1fe:	682b      	ldr	r3, [r5, #0]
    e200:	2b00      	cmp	r3, #0
    e202:	d0fb      	beq.n	e1fc <_close_r+0x14>
    e204:	6023      	str	r3, [r4, #0]
    e206:	bd38      	pop	{r3, r4, r5, pc}
    e208:	1fffd768 	.word	0x1fffd768

0000e20c <_lseek_r>:
    e20c:	b538      	push	{r3, r4, r5, lr}
    e20e:	460c      	mov	r4, r1
    e210:	4d08      	ldr	r5, [pc, #32]	; (e234 <_lseek_r+0x28>)
    e212:	4684      	mov	ip, r0
    e214:	4611      	mov	r1, r2
    e216:	4620      	mov	r0, r4
    e218:	461a      	mov	r2, r3
    e21a:	2300      	movs	r3, #0
    e21c:	602b      	str	r3, [r5, #0]
    e21e:	4664      	mov	r4, ip
    e220:	f7fb feae 	bl	9f80 <_lseek>
    e224:	1c43      	adds	r3, r0, #1
    e226:	d000      	beq.n	e22a <_lseek_r+0x1e>
    e228:	bd38      	pop	{r3, r4, r5, pc}
    e22a:	682b      	ldr	r3, [r5, #0]
    e22c:	2b00      	cmp	r3, #0
    e22e:	d0fb      	beq.n	e228 <_lseek_r+0x1c>
    e230:	6023      	str	r3, [r4, #0]
    e232:	bd38      	pop	{r3, r4, r5, pc}
    e234:	1fffd768 	.word	0x1fffd768

0000e238 <_read_r>:
    e238:	b538      	push	{r3, r4, r5, lr}
    e23a:	460c      	mov	r4, r1
    e23c:	4d08      	ldr	r5, [pc, #32]	; (e260 <_read_r+0x28>)
    e23e:	4684      	mov	ip, r0
    e240:	4611      	mov	r1, r2
    e242:	4620      	mov	r0, r4
    e244:	461a      	mov	r2, r3
    e246:	2300      	movs	r3, #0
    e248:	602b      	str	r3, [r5, #0]
    e24a:	4664      	mov	r4, ip
    e24c:	f7fb fe8a 	bl	9f64 <_read>
    e250:	1c43      	adds	r3, r0, #1
    e252:	d000      	beq.n	e256 <_read_r+0x1e>
    e254:	bd38      	pop	{r3, r4, r5, pc}
    e256:	682b      	ldr	r3, [r5, #0]
    e258:	2b00      	cmp	r3, #0
    e25a:	d0fb      	beq.n	e254 <_read_r+0x1c>
    e25c:	6023      	str	r3, [r4, #0]
    e25e:	bd38      	pop	{r3, r4, r5, pc}
    e260:	1fffd768 	.word	0x1fffd768

0000e264 <_sbrk_r>:
    e264:	b538      	push	{r3, r4, r5, lr}
    e266:	4d07      	ldr	r5, [pc, #28]	; (e284 <_sbrk_r+0x20>)
    e268:	2200      	movs	r2, #0
    e26a:	4604      	mov	r4, r0
    e26c:	4608      	mov	r0, r1
    e26e:	602a      	str	r2, [r5, #0]
    e270:	f7fb fe62 	bl	9f38 <_sbrk>
    e274:	1c43      	adds	r3, r0, #1
    e276:	d000      	beq.n	e27a <_sbrk_r+0x16>
    e278:	bd38      	pop	{r3, r4, r5, pc}
    e27a:	682b      	ldr	r3, [r5, #0]
    e27c:	2b00      	cmp	r3, #0
    e27e:	d0fb      	beq.n	e278 <_sbrk_r+0x14>
    e280:	6023      	str	r3, [r4, #0]
    e282:	bd38      	pop	{r3, r4, r5, pc}
    e284:	1fffd768 	.word	0x1fffd768

0000e288 <_write_r>:
    e288:	b538      	push	{r3, r4, r5, lr}
    e28a:	460c      	mov	r4, r1
    e28c:	4d08      	ldr	r5, [pc, #32]	; (e2b0 <_write_r+0x28>)
    e28e:	4684      	mov	ip, r0
    e290:	4611      	mov	r1, r2
    e292:	4620      	mov	r0, r4
    e294:	461a      	mov	r2, r3
    e296:	2300      	movs	r3, #0
    e298:	602b      	str	r3, [r5, #0]
    e29a:	4664      	mov	r4, ip
    e29c:	f7fb fa76 	bl	978c <_write>
    e2a0:	1c43      	adds	r3, r0, #1
    e2a2:	d000      	beq.n	e2a6 <_write_r+0x1e>
    e2a4:	bd38      	pop	{r3, r4, r5, pc}
    e2a6:	682b      	ldr	r3, [r5, #0]
    e2a8:	2b00      	cmp	r3, #0
    e2aa:	d0fb      	beq.n	e2a4 <_write_r+0x1c>
    e2ac:	6023      	str	r3, [r4, #0]
    e2ae:	bd38      	pop	{r3, r4, r5, pc}
    e2b0:	1fffd768 	.word	0x1fffd768

0000e2b4 <__errno>:
    e2b4:	4b01      	ldr	r3, [pc, #4]	; (e2bc <__errno+0x8>)
    e2b6:	6818      	ldr	r0, [r3, #0]
    e2b8:	4770      	bx	lr
    e2ba:	bf00      	nop
    e2bc:	1fff9160 	.word	0x1fff9160

0000e2c0 <__libc_init_array>:
    e2c0:	b570      	push	{r4, r5, r6, lr}
    e2c2:	4e0d      	ldr	r6, [pc, #52]	; (e2f8 <__libc_init_array+0x38>)
    e2c4:	4d0d      	ldr	r5, [pc, #52]	; (e2fc <__libc_init_array+0x3c>)
    e2c6:	1b76      	subs	r6, r6, r5
    e2c8:	10b6      	asrs	r6, r6, #2
    e2ca:	d006      	beq.n	e2da <__libc_init_array+0x1a>
    e2cc:	2400      	movs	r4, #0
    e2ce:	f855 3b04 	ldr.w	r3, [r5], #4
    e2d2:	3401      	adds	r4, #1
    e2d4:	4798      	blx	r3
    e2d6:	42a6      	cmp	r6, r4
    e2d8:	d1f9      	bne.n	e2ce <__libc_init_array+0xe>
    e2da:	4e09      	ldr	r6, [pc, #36]	; (e300 <__libc_init_array+0x40>)
    e2dc:	4d09      	ldr	r5, [pc, #36]	; (e304 <__libc_init_array+0x44>)
    e2de:	1b76      	subs	r6, r6, r5
    e2e0:	f007 fc06 	bl	15af0 <_init>
    e2e4:	10b6      	asrs	r6, r6, #2
    e2e6:	d006      	beq.n	e2f6 <__libc_init_array+0x36>
    e2e8:	2400      	movs	r4, #0
    e2ea:	f855 3b04 	ldr.w	r3, [r5], #4
    e2ee:	3401      	adds	r4, #1
    e2f0:	4798      	blx	r3
    e2f2:	42a6      	cmp	r6, r4
    e2f4:	d1f9      	bne.n	e2ea <__libc_init_array+0x2a>
    e2f6:	bd70      	pop	{r4, r5, r6, pc}
    e2f8:	00015afc 	.word	0x00015afc
    e2fc:	00015afc 	.word	0x00015afc
    e300:	00015b10 	.word	0x00015b10
    e304:	00015afc 	.word	0x00015afc

0000e308 <__retarget_lock_init_recursive>:
    e308:	4770      	bx	lr
    e30a:	bf00      	nop

0000e30c <__retarget_lock_close_recursive>:
    e30c:	4770      	bx	lr
    e30e:	bf00      	nop

0000e310 <__retarget_lock_acquire_recursive>:
    e310:	4770      	bx	lr
    e312:	bf00      	nop

0000e314 <__retarget_lock_release_recursive>:
    e314:	4770      	bx	lr
    e316:	bf00      	nop
    e318:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e31c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e320:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e324:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e328:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e32c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e330:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e334:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e338:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e33c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000e340 <strlen>:
    e340:	f890 f000 	pld	[r0]
    e344:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    e348:	f020 0107 	bic.w	r1, r0, #7
    e34c:	f06f 0c00 	mvn.w	ip, #0
    e350:	f010 0407 	ands.w	r4, r0, #7
    e354:	f891 f020 	pld	[r1, #32]
    e358:	f040 8049 	bne.w	e3ee <strlen+0xae>
    e35c:	f04f 0400 	mov.w	r4, #0
    e360:	f06f 0007 	mvn.w	r0, #7
    e364:	e9d1 2300 	ldrd	r2, r3, [r1]
    e368:	f891 f040 	pld	[r1, #64]	; 0x40
    e36c:	f100 0008 	add.w	r0, r0, #8
    e370:	fa82 f24c 	uadd8	r2, r2, ip
    e374:	faa4 f28c 	sel	r2, r4, ip
    e378:	fa83 f34c 	uadd8	r3, r3, ip
    e37c:	faa2 f38c 	sel	r3, r2, ip
    e380:	bb4b      	cbnz	r3, e3d6 <strlen+0x96>
    e382:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    e386:	fa82 f24c 	uadd8	r2, r2, ip
    e38a:	f100 0008 	add.w	r0, r0, #8
    e38e:	faa4 f28c 	sel	r2, r4, ip
    e392:	fa83 f34c 	uadd8	r3, r3, ip
    e396:	faa2 f38c 	sel	r3, r2, ip
    e39a:	b9e3      	cbnz	r3, e3d6 <strlen+0x96>
    e39c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    e3a0:	fa82 f24c 	uadd8	r2, r2, ip
    e3a4:	f100 0008 	add.w	r0, r0, #8
    e3a8:	faa4 f28c 	sel	r2, r4, ip
    e3ac:	fa83 f34c 	uadd8	r3, r3, ip
    e3b0:	faa2 f38c 	sel	r3, r2, ip
    e3b4:	b97b      	cbnz	r3, e3d6 <strlen+0x96>
    e3b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    e3ba:	f101 0120 	add.w	r1, r1, #32
    e3be:	fa82 f24c 	uadd8	r2, r2, ip
    e3c2:	f100 0008 	add.w	r0, r0, #8
    e3c6:	faa4 f28c 	sel	r2, r4, ip
    e3ca:	fa83 f34c 	uadd8	r3, r3, ip
    e3ce:	faa2 f38c 	sel	r3, r2, ip
    e3d2:	2b00      	cmp	r3, #0
    e3d4:	d0c6      	beq.n	e364 <strlen+0x24>
    e3d6:	2a00      	cmp	r2, #0
    e3d8:	bf04      	itt	eq
    e3da:	3004      	addeq	r0, #4
    e3dc:	461a      	moveq	r2, r3
    e3de:	ba12      	rev	r2, r2
    e3e0:	fab2 f282 	clz	r2, r2
    e3e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    e3e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    e3ec:	4770      	bx	lr
    e3ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    e3f2:	f004 0503 	and.w	r5, r4, #3
    e3f6:	f1c4 0000 	rsb	r0, r4, #0
    e3fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    e3fe:	f014 0f04 	tst.w	r4, #4
    e402:	f891 f040 	pld	[r1, #64]	; 0x40
    e406:	fa0c f505 	lsl.w	r5, ip, r5
    e40a:	ea62 0205 	orn	r2, r2, r5
    e40e:	bf1c      	itt	ne
    e410:	ea63 0305 	ornne	r3, r3, r5
    e414:	4662      	movne	r2, ip
    e416:	f04f 0400 	mov.w	r4, #0
    e41a:	e7a9      	b.n	e370 <strlen+0x30>

0000e41c <register_fini>:
    e41c:	4b02      	ldr	r3, [pc, #8]	; (e428 <register_fini+0xc>)
    e41e:	b113      	cbz	r3, e426 <register_fini+0xa>
    e420:	4802      	ldr	r0, [pc, #8]	; (e42c <register_fini+0x10>)
    e422:	f000 b805 	b.w	e430 <atexit>
    e426:	4770      	bx	lr
    e428:	00000000 	.word	0x00000000
    e42c:	00010c75 	.word	0x00010c75

0000e430 <atexit>:
    e430:	2300      	movs	r3, #0
    e432:	4601      	mov	r1, r0
    e434:	461a      	mov	r2, r3
    e436:	4618      	mov	r0, r3
    e438:	f002 bcba 	b.w	10db0 <__register_exitproc>

0000e43c <_malloc_trim_r>:
    e43c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e43e:	4f24      	ldr	r7, [pc, #144]	; (e4d0 <_malloc_trim_r+0x94>)
    e440:	460c      	mov	r4, r1
    e442:	4606      	mov	r6, r0
    e444:	f7ff fa88 	bl	d958 <__malloc_lock>
    e448:	68bb      	ldr	r3, [r7, #8]
    e44a:	685d      	ldr	r5, [r3, #4]
    e44c:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    e450:	310f      	adds	r1, #15
    e452:	f025 0503 	bic.w	r5, r5, #3
    e456:	194b      	adds	r3, r1, r5
    e458:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    e45c:	f023 030f 	bic.w	r3, r3, #15
    e460:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    e464:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    e468:	db07      	blt.n	e47a <_malloc_trim_r+0x3e>
    e46a:	2100      	movs	r1, #0
    e46c:	4630      	mov	r0, r6
    e46e:	f7ff fef9 	bl	e264 <_sbrk_r>
    e472:	68bb      	ldr	r3, [r7, #8]
    e474:	442b      	add	r3, r5
    e476:	4298      	cmp	r0, r3
    e478:	d004      	beq.n	e484 <_malloc_trim_r+0x48>
    e47a:	4630      	mov	r0, r6
    e47c:	f7ff fa72 	bl	d964 <__malloc_unlock>
    e480:	2000      	movs	r0, #0
    e482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e484:	4261      	negs	r1, r4
    e486:	4630      	mov	r0, r6
    e488:	f7ff feec 	bl	e264 <_sbrk_r>
    e48c:	3001      	adds	r0, #1
    e48e:	d00d      	beq.n	e4ac <_malloc_trim_r+0x70>
    e490:	4a10      	ldr	r2, [pc, #64]	; (e4d4 <_malloc_trim_r+0x98>)
    e492:	68bb      	ldr	r3, [r7, #8]
    e494:	1b2d      	subs	r5, r5, r4
    e496:	f045 0501 	orr.w	r5, r5, #1
    e49a:	605d      	str	r5, [r3, #4]
    e49c:	6813      	ldr	r3, [r2, #0]
    e49e:	4630      	mov	r0, r6
    e4a0:	1b1b      	subs	r3, r3, r4
    e4a2:	6013      	str	r3, [r2, #0]
    e4a4:	f7ff fa5e 	bl	d964 <__malloc_unlock>
    e4a8:	2001      	movs	r0, #1
    e4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e4ac:	2100      	movs	r1, #0
    e4ae:	4630      	mov	r0, r6
    e4b0:	f7ff fed8 	bl	e264 <_sbrk_r>
    e4b4:	68ba      	ldr	r2, [r7, #8]
    e4b6:	1a83      	subs	r3, r0, r2
    e4b8:	2b0f      	cmp	r3, #15
    e4ba:	ddde      	ble.n	e47a <_malloc_trim_r+0x3e>
    e4bc:	f043 0301 	orr.w	r3, r3, #1
    e4c0:	6053      	str	r3, [r2, #4]
    e4c2:	4b05      	ldr	r3, [pc, #20]	; (e4d8 <_malloc_trim_r+0x9c>)
    e4c4:	4903      	ldr	r1, [pc, #12]	; (e4d4 <_malloc_trim_r+0x98>)
    e4c6:	681b      	ldr	r3, [r3, #0]
    e4c8:	1ac0      	subs	r0, r0, r3
    e4ca:	6008      	str	r0, [r1, #0]
    e4cc:	e7d5      	b.n	e47a <_malloc_trim_r+0x3e>
    e4ce:	bf00      	nop
    e4d0:	1fff8ab8 	.word	0x1fff8ab8
    e4d4:	1fffd5f8 	.word	0x1fffd5f8
    e4d8:	1fff8ec0 	.word	0x1fff8ec0

0000e4dc <_free_r>:
    e4dc:	2900      	cmp	r1, #0
    e4de:	d061      	beq.n	e5a4 <_free_r+0xc8>
    e4e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e4e2:	460c      	mov	r4, r1
    e4e4:	4606      	mov	r6, r0
    e4e6:	f7ff fa37 	bl	d958 <__malloc_lock>
    e4ea:	f854 2c04 	ldr.w	r2, [r4, #-4]
    e4ee:	4f7b      	ldr	r7, [pc, #492]	; (e6dc <_free_r+0x200>)
    e4f0:	f1a4 0508 	sub.w	r5, r4, #8
    e4f4:	f022 0101 	bic.w	r1, r2, #1
    e4f8:	eb05 0c01 	add.w	ip, r5, r1
    e4fc:	68b8      	ldr	r0, [r7, #8]
    e4fe:	f8dc 3004 	ldr.w	r3, [ip, #4]
    e502:	4560      	cmp	r0, ip
    e504:	f023 0303 	bic.w	r3, r3, #3
    e508:	f000 808b 	beq.w	e622 <_free_r+0x146>
    e50c:	07d2      	lsls	r2, r2, #31
    e50e:	f8cc 3004 	str.w	r3, [ip, #4]
    e512:	d432      	bmi.n	e57a <_free_r+0x9e>
    e514:	f854 2c08 	ldr.w	r2, [r4, #-8]
    e518:	1aad      	subs	r5, r5, r2
    e51a:	4411      	add	r1, r2
    e51c:	68aa      	ldr	r2, [r5, #8]
    e51e:	f107 0008 	add.w	r0, r7, #8
    e522:	4282      	cmp	r2, r0
    e524:	d06a      	beq.n	e5fc <_free_r+0x120>
    e526:	eb0c 0403 	add.w	r4, ip, r3
    e52a:	f8d4 e004 	ldr.w	lr, [r4, #4]
    e52e:	68ec      	ldr	r4, [r5, #12]
    e530:	60d4      	str	r4, [r2, #12]
    e532:	f01e 0f01 	tst.w	lr, #1
    e536:	60a2      	str	r2, [r4, #8]
    e538:	f000 8097 	beq.w	e66a <_free_r+0x18e>
    e53c:	f041 0301 	orr.w	r3, r1, #1
    e540:	606b      	str	r3, [r5, #4]
    e542:	f8cc 1000 	str.w	r1, [ip]
    e546:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e54a:	d235      	bcs.n	e5b8 <_free_r+0xdc>
    e54c:	6878      	ldr	r0, [r7, #4]
    e54e:	08cb      	lsrs	r3, r1, #3
    e550:	2201      	movs	r2, #1
    e552:	0949      	lsrs	r1, r1, #5
    e554:	3301      	adds	r3, #1
    e556:	408a      	lsls	r2, r1
    e558:	4302      	orrs	r2, r0
    e55a:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    e55e:	607a      	str	r2, [r7, #4]
    e560:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    e564:	3a08      	subs	r2, #8
    e566:	e9c5 1202 	strd	r1, r2, [r5, #8]
    e56a:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    e56e:	60cd      	str	r5, [r1, #12]
    e570:	4630      	mov	r0, r6
    e572:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e576:	f7ff b9f5 	b.w	d964 <__malloc_unlock>
    e57a:	eb0c 0203 	add.w	r2, ip, r3
    e57e:	6852      	ldr	r2, [r2, #4]
    e580:	07d0      	lsls	r0, r2, #31
    e582:	d410      	bmi.n	e5a6 <_free_r+0xca>
    e584:	4419      	add	r1, r3
    e586:	f107 0008 	add.w	r0, r7, #8
    e58a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    e58e:	4283      	cmp	r3, r0
    e590:	d073      	beq.n	e67a <_free_r+0x19e>
    e592:	f8dc 200c 	ldr.w	r2, [ip, #12]
    e596:	60da      	str	r2, [r3, #12]
    e598:	6093      	str	r3, [r2, #8]
    e59a:	f041 0301 	orr.w	r3, r1, #1
    e59e:	606b      	str	r3, [r5, #4]
    e5a0:	5069      	str	r1, [r5, r1]
    e5a2:	e7d0      	b.n	e546 <_free_r+0x6a>
    e5a4:	4770      	bx	lr
    e5a6:	f041 0301 	orr.w	r3, r1, #1
    e5aa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e5ae:	f844 3c04 	str.w	r3, [r4, #-4]
    e5b2:	f8cc 1000 	str.w	r1, [ip]
    e5b6:	d3c9      	bcc.n	e54c <_free_r+0x70>
    e5b8:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    e5bc:	ea4f 2351 	mov.w	r3, r1, lsr #9
    e5c0:	d248      	bcs.n	e654 <_free_r+0x178>
    e5c2:	098b      	lsrs	r3, r1, #6
    e5c4:	f103 0039 	add.w	r0, r3, #57	; 0x39
    e5c8:	f103 0238 	add.w	r2, r3, #56	; 0x38
    e5cc:	00c3      	lsls	r3, r0, #3
    e5ce:	18f8      	adds	r0, r7, r3
    e5d0:	58fb      	ldr	r3, [r7, r3]
    e5d2:	3808      	subs	r0, #8
    e5d4:	4298      	cmp	r0, r3
    e5d6:	d059      	beq.n	e68c <_free_r+0x1b0>
    e5d8:	685a      	ldr	r2, [r3, #4]
    e5da:	f022 0203 	bic.w	r2, r2, #3
    e5de:	428a      	cmp	r2, r1
    e5e0:	d902      	bls.n	e5e8 <_free_r+0x10c>
    e5e2:	689b      	ldr	r3, [r3, #8]
    e5e4:	4298      	cmp	r0, r3
    e5e6:	d1f7      	bne.n	e5d8 <_free_r+0xfc>
    e5e8:	68d8      	ldr	r0, [r3, #12]
    e5ea:	e9c5 3002 	strd	r3, r0, [r5, #8]
    e5ee:	6085      	str	r5, [r0, #8]
    e5f0:	60dd      	str	r5, [r3, #12]
    e5f2:	4630      	mov	r0, r6
    e5f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e5f8:	f7ff b9b4 	b.w	d964 <__malloc_unlock>
    e5fc:	eb0c 0203 	add.w	r2, ip, r3
    e600:	6852      	ldr	r2, [r2, #4]
    e602:	07d2      	lsls	r2, r2, #31
    e604:	d463      	bmi.n	e6ce <_free_r+0x1f2>
    e606:	440b      	add	r3, r1
    e608:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    e60c:	60ca      	str	r2, [r1, #12]
    e60e:	6091      	str	r1, [r2, #8]
    e610:	f043 0201 	orr.w	r2, r3, #1
    e614:	606a      	str	r2, [r5, #4]
    e616:	4630      	mov	r0, r6
    e618:	50eb      	str	r3, [r5, r3]
    e61a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e61e:	f7ff b9a1 	b.w	d964 <__malloc_unlock>
    e622:	440b      	add	r3, r1
    e624:	07d1      	lsls	r1, r2, #31
    e626:	d407      	bmi.n	e638 <_free_r+0x15c>
    e628:	f854 2c08 	ldr.w	r2, [r4, #-8]
    e62c:	1aad      	subs	r5, r5, r2
    e62e:	4413      	add	r3, r2
    e630:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    e634:	60ca      	str	r2, [r1, #12]
    e636:	6091      	str	r1, [r2, #8]
    e638:	f043 0201 	orr.w	r2, r3, #1
    e63c:	606a      	str	r2, [r5, #4]
    e63e:	4a28      	ldr	r2, [pc, #160]	; (e6e0 <_free_r+0x204>)
    e640:	60bd      	str	r5, [r7, #8]
    e642:	6812      	ldr	r2, [r2, #0]
    e644:	429a      	cmp	r2, r3
    e646:	d893      	bhi.n	e570 <_free_r+0x94>
    e648:	4b26      	ldr	r3, [pc, #152]	; (e6e4 <_free_r+0x208>)
    e64a:	4630      	mov	r0, r6
    e64c:	6819      	ldr	r1, [r3, #0]
    e64e:	f7ff fef5 	bl	e43c <_malloc_trim_r>
    e652:	e78d      	b.n	e570 <_free_r+0x94>
    e654:	2b14      	cmp	r3, #20
    e656:	d90a      	bls.n	e66e <_free_r+0x192>
    e658:	2b54      	cmp	r3, #84	; 0x54
    e65a:	d81f      	bhi.n	e69c <_free_r+0x1c0>
    e65c:	0b0b      	lsrs	r3, r1, #12
    e65e:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    e662:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    e666:	00c3      	lsls	r3, r0, #3
    e668:	e7b1      	b.n	e5ce <_free_r+0xf2>
    e66a:	4419      	add	r1, r3
    e66c:	e78d      	b.n	e58a <_free_r+0xae>
    e66e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    e672:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    e676:	00c3      	lsls	r3, r0, #3
    e678:	e7a9      	b.n	e5ce <_free_r+0xf2>
    e67a:	f041 0301 	orr.w	r3, r1, #1
    e67e:	e9c7 5504 	strd	r5, r5, [r7, #16]
    e682:	e9c5 0002 	strd	r0, r0, [r5, #8]
    e686:	606b      	str	r3, [r5, #4]
    e688:	5069      	str	r1, [r5, r1]
    e68a:	e771      	b.n	e570 <_free_r+0x94>
    e68c:	6879      	ldr	r1, [r7, #4]
    e68e:	1092      	asrs	r2, r2, #2
    e690:	2401      	movs	r4, #1
    e692:	fa04 f202 	lsl.w	r2, r4, r2
    e696:	430a      	orrs	r2, r1
    e698:	607a      	str	r2, [r7, #4]
    e69a:	e7a6      	b.n	e5ea <_free_r+0x10e>
    e69c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    e6a0:	d806      	bhi.n	e6b0 <_free_r+0x1d4>
    e6a2:	0bcb      	lsrs	r3, r1, #15
    e6a4:	f103 0078 	add.w	r0, r3, #120	; 0x78
    e6a8:	f103 0277 	add.w	r2, r3, #119	; 0x77
    e6ac:	00c3      	lsls	r3, r0, #3
    e6ae:	e78e      	b.n	e5ce <_free_r+0xf2>
    e6b0:	f240 5254 	movw	r2, #1364	; 0x554
    e6b4:	4293      	cmp	r3, r2
    e6b6:	d806      	bhi.n	e6c6 <_free_r+0x1ea>
    e6b8:	0c8b      	lsrs	r3, r1, #18
    e6ba:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    e6be:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    e6c2:	00c3      	lsls	r3, r0, #3
    e6c4:	e783      	b.n	e5ce <_free_r+0xf2>
    e6c6:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    e6ca:	227e      	movs	r2, #126	; 0x7e
    e6cc:	e77f      	b.n	e5ce <_free_r+0xf2>
    e6ce:	f041 0301 	orr.w	r3, r1, #1
    e6d2:	606b      	str	r3, [r5, #4]
    e6d4:	f8cc 1000 	str.w	r1, [ip]
    e6d8:	e74a      	b.n	e570 <_free_r+0x94>
    e6da:	bf00      	nop
    e6dc:	1fff8ab8 	.word	0x1fff8ab8
    e6e0:	1fff8ec4 	.word	0x1fff8ec4
    e6e4:	1fffd628 	.word	0x1fffd628

0000e6e8 <__ascii_mbtowc>:
    e6e8:	b082      	sub	sp, #8
    e6ea:	b149      	cbz	r1, e700 <__ascii_mbtowc+0x18>
    e6ec:	b15a      	cbz	r2, e706 <__ascii_mbtowc+0x1e>
    e6ee:	b16b      	cbz	r3, e70c <__ascii_mbtowc+0x24>
    e6f0:	7813      	ldrb	r3, [r2, #0]
    e6f2:	600b      	str	r3, [r1, #0]
    e6f4:	7812      	ldrb	r2, [r2, #0]
    e6f6:	1e10      	subs	r0, r2, #0
    e6f8:	bf18      	it	ne
    e6fa:	2001      	movne	r0, #1
    e6fc:	b002      	add	sp, #8
    e6fe:	4770      	bx	lr
    e700:	a901      	add	r1, sp, #4
    e702:	2a00      	cmp	r2, #0
    e704:	d1f3      	bne.n	e6ee <__ascii_mbtowc+0x6>
    e706:	4610      	mov	r0, r2
    e708:	b002      	add	sp, #8
    e70a:	4770      	bx	lr
    e70c:	f06f 0001 	mvn.w	r0, #1
    e710:	e7f4      	b.n	e6fc <__ascii_mbtowc+0x14>
    e712:	bf00      	nop

0000e714 <_Balloc>:
    e714:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e716:	b570      	push	{r4, r5, r6, lr}
    e718:	4605      	mov	r5, r0
    e71a:	460c      	mov	r4, r1
    e71c:	b14b      	cbz	r3, e732 <_Balloc+0x1e>
    e71e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    e722:	b180      	cbz	r0, e746 <_Balloc+0x32>
    e724:	6802      	ldr	r2, [r0, #0]
    e726:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    e72a:	2300      	movs	r3, #0
    e72c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    e730:	bd70      	pop	{r4, r5, r6, pc}
    e732:	2221      	movs	r2, #33	; 0x21
    e734:	2104      	movs	r1, #4
    e736:	f002 fb9f 	bl	10e78 <_calloc_r>
    e73a:	4603      	mov	r3, r0
    e73c:	6468      	str	r0, [r5, #68]	; 0x44
    e73e:	2800      	cmp	r0, #0
    e740:	d1ed      	bne.n	e71e <_Balloc+0xa>
    e742:	2000      	movs	r0, #0
    e744:	bd70      	pop	{r4, r5, r6, pc}
    e746:	2101      	movs	r1, #1
    e748:	fa01 f604 	lsl.w	r6, r1, r4
    e74c:	1d72      	adds	r2, r6, #5
    e74e:	0092      	lsls	r2, r2, #2
    e750:	4628      	mov	r0, r5
    e752:	f002 fb91 	bl	10e78 <_calloc_r>
    e756:	2800      	cmp	r0, #0
    e758:	d0f3      	beq.n	e742 <_Balloc+0x2e>
    e75a:	e9c0 4601 	strd	r4, r6, [r0, #4]
    e75e:	e7e4      	b.n	e72a <_Balloc+0x16>

0000e760 <_Bfree>:
    e760:	b131      	cbz	r1, e770 <_Bfree+0x10>
    e762:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e764:	684a      	ldr	r2, [r1, #4]
    e766:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e76a:	6008      	str	r0, [r1, #0]
    e76c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    e770:	4770      	bx	lr
    e772:	bf00      	nop

0000e774 <__multadd>:
    e774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e778:	690d      	ldr	r5, [r1, #16]
    e77a:	4607      	mov	r7, r0
    e77c:	460e      	mov	r6, r1
    e77e:	461c      	mov	r4, r3
    e780:	f101 0e14 	add.w	lr, r1, #20
    e784:	2000      	movs	r0, #0
    e786:	f8de 1000 	ldr.w	r1, [lr]
    e78a:	b28b      	uxth	r3, r1
    e78c:	fb02 4303 	mla	r3, r2, r3, r4
    e790:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    e794:	0c09      	lsrs	r1, r1, #16
    e796:	fb02 cc01 	mla	ip, r2, r1, ip
    e79a:	3001      	adds	r0, #1
    e79c:	b29b      	uxth	r3, r3
    e79e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
    e7a2:	4285      	cmp	r5, r0
    e7a4:	f84e 3b04 	str.w	r3, [lr], #4
    e7a8:	ea4f 441c 	mov.w	r4, ip, lsr #16
    e7ac:	dceb      	bgt.n	e786 <__multadd+0x12>
    e7ae:	b13c      	cbz	r4, e7c0 <__multadd+0x4c>
    e7b0:	68b3      	ldr	r3, [r6, #8]
    e7b2:	42ab      	cmp	r3, r5
    e7b4:	dd07      	ble.n	e7c6 <__multadd+0x52>
    e7b6:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    e7ba:	3501      	adds	r5, #1
    e7bc:	615c      	str	r4, [r3, #20]
    e7be:	6135      	str	r5, [r6, #16]
    e7c0:	4630      	mov	r0, r6
    e7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e7c6:	6871      	ldr	r1, [r6, #4]
    e7c8:	4638      	mov	r0, r7
    e7ca:	3101      	adds	r1, #1
    e7cc:	f7ff ffa2 	bl	e714 <_Balloc>
    e7d0:	4680      	mov	r8, r0
    e7d2:	b1a8      	cbz	r0, e800 <__multadd+0x8c>
    e7d4:	6932      	ldr	r2, [r6, #16]
    e7d6:	3202      	adds	r2, #2
    e7d8:	f106 010c 	add.w	r1, r6, #12
    e7dc:	0092      	lsls	r2, r2, #2
    e7de:	300c      	adds	r0, #12
    e7e0:	f7fb faa8 	bl	9d34 <memcpy>
    e7e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e7e6:	6872      	ldr	r2, [r6, #4]
    e7e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e7ec:	6031      	str	r1, [r6, #0]
    e7ee:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    e7f2:	4646      	mov	r6, r8
    e7f4:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    e7f8:	3501      	adds	r5, #1
    e7fa:	615c      	str	r4, [r3, #20]
    e7fc:	6135      	str	r5, [r6, #16]
    e7fe:	e7df      	b.n	e7c0 <__multadd+0x4c>
    e800:	4b02      	ldr	r3, [pc, #8]	; (e80c <__multadd+0x98>)
    e802:	4803      	ldr	r0, [pc, #12]	; (e810 <__multadd+0x9c>)
    e804:	4642      	mov	r2, r8
    e806:	21ba      	movs	r1, #186	; 0xba
    e808:	f002 fb16 	bl	10e38 <__assert_func>
    e80c:	00015860 	.word	0x00015860
    e810:	00015874 	.word	0x00015874

0000e814 <__hi0bits>:
    e814:	0c02      	lsrs	r2, r0, #16
    e816:	0412      	lsls	r2, r2, #16
    e818:	4603      	mov	r3, r0
    e81a:	b9ca      	cbnz	r2, e850 <__hi0bits+0x3c>
    e81c:	0403      	lsls	r3, r0, #16
    e81e:	2010      	movs	r0, #16
    e820:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    e824:	bf04      	itt	eq
    e826:	021b      	lsleq	r3, r3, #8
    e828:	3008      	addeq	r0, #8
    e82a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    e82e:	bf04      	itt	eq
    e830:	011b      	lsleq	r3, r3, #4
    e832:	3004      	addeq	r0, #4
    e834:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    e838:	bf04      	itt	eq
    e83a:	009b      	lsleq	r3, r3, #2
    e83c:	3002      	addeq	r0, #2
    e83e:	2b00      	cmp	r3, #0
    e840:	db05      	blt.n	e84e <__hi0bits+0x3a>
    e842:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    e846:	f100 0001 	add.w	r0, r0, #1
    e84a:	bf08      	it	eq
    e84c:	2020      	moveq	r0, #32
    e84e:	4770      	bx	lr
    e850:	2000      	movs	r0, #0
    e852:	e7e5      	b.n	e820 <__hi0bits+0xc>

0000e854 <__lo0bits>:
    e854:	6803      	ldr	r3, [r0, #0]
    e856:	f013 0207 	ands.w	r2, r3, #7
    e85a:	4601      	mov	r1, r0
    e85c:	d007      	beq.n	e86e <__lo0bits+0x1a>
    e85e:	07da      	lsls	r2, r3, #31
    e860:	d41f      	bmi.n	e8a2 <__lo0bits+0x4e>
    e862:	0798      	lsls	r0, r3, #30
    e864:	d521      	bpl.n	e8aa <__lo0bits+0x56>
    e866:	085b      	lsrs	r3, r3, #1
    e868:	600b      	str	r3, [r1, #0]
    e86a:	2001      	movs	r0, #1
    e86c:	4770      	bx	lr
    e86e:	b298      	uxth	r0, r3
    e870:	b1a0      	cbz	r0, e89c <__lo0bits+0x48>
    e872:	4610      	mov	r0, r2
    e874:	b2da      	uxtb	r2, r3
    e876:	b90a      	cbnz	r2, e87c <__lo0bits+0x28>
    e878:	3008      	adds	r0, #8
    e87a:	0a1b      	lsrs	r3, r3, #8
    e87c:	071a      	lsls	r2, r3, #28
    e87e:	bf04      	itt	eq
    e880:	091b      	lsreq	r3, r3, #4
    e882:	3004      	addeq	r0, #4
    e884:	079a      	lsls	r2, r3, #30
    e886:	bf04      	itt	eq
    e888:	089b      	lsreq	r3, r3, #2
    e88a:	3002      	addeq	r0, #2
    e88c:	07da      	lsls	r2, r3, #31
    e88e:	d403      	bmi.n	e898 <__lo0bits+0x44>
    e890:	085b      	lsrs	r3, r3, #1
    e892:	f100 0001 	add.w	r0, r0, #1
    e896:	d006      	beq.n	e8a6 <__lo0bits+0x52>
    e898:	600b      	str	r3, [r1, #0]
    e89a:	4770      	bx	lr
    e89c:	0c1b      	lsrs	r3, r3, #16
    e89e:	2010      	movs	r0, #16
    e8a0:	e7e8      	b.n	e874 <__lo0bits+0x20>
    e8a2:	2000      	movs	r0, #0
    e8a4:	4770      	bx	lr
    e8a6:	2020      	movs	r0, #32
    e8a8:	4770      	bx	lr
    e8aa:	089b      	lsrs	r3, r3, #2
    e8ac:	600b      	str	r3, [r1, #0]
    e8ae:	2002      	movs	r0, #2
    e8b0:	4770      	bx	lr
    e8b2:	bf00      	nop

0000e8b4 <__i2b>:
    e8b4:	b538      	push	{r3, r4, r5, lr}
    e8b6:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e8b8:	4604      	mov	r4, r0
    e8ba:	460d      	mov	r5, r1
    e8bc:	b14b      	cbz	r3, e8d2 <__i2b+0x1e>
    e8be:	6858      	ldr	r0, [r3, #4]
    e8c0:	b1b0      	cbz	r0, e8f0 <__i2b+0x3c>
    e8c2:	6802      	ldr	r2, [r0, #0]
    e8c4:	605a      	str	r2, [r3, #4]
    e8c6:	2200      	movs	r2, #0
    e8c8:	2301      	movs	r3, #1
    e8ca:	e9c0 3504 	strd	r3, r5, [r0, #16]
    e8ce:	60c2      	str	r2, [r0, #12]
    e8d0:	bd38      	pop	{r3, r4, r5, pc}
    e8d2:	2221      	movs	r2, #33	; 0x21
    e8d4:	2104      	movs	r1, #4
    e8d6:	f002 facf 	bl	10e78 <_calloc_r>
    e8da:	4603      	mov	r3, r0
    e8dc:	6460      	str	r0, [r4, #68]	; 0x44
    e8de:	2800      	cmp	r0, #0
    e8e0:	d1ed      	bne.n	e8be <__i2b+0xa>
    e8e2:	4b09      	ldr	r3, [pc, #36]	; (e908 <__i2b+0x54>)
    e8e4:	4809      	ldr	r0, [pc, #36]	; (e90c <__i2b+0x58>)
    e8e6:	2200      	movs	r2, #0
    e8e8:	f240 1145 	movw	r1, #325	; 0x145
    e8ec:	f002 faa4 	bl	10e38 <__assert_func>
    e8f0:	221c      	movs	r2, #28
    e8f2:	2101      	movs	r1, #1
    e8f4:	4620      	mov	r0, r4
    e8f6:	f002 fabf 	bl	10e78 <_calloc_r>
    e8fa:	2800      	cmp	r0, #0
    e8fc:	d0f1      	beq.n	e8e2 <__i2b+0x2e>
    e8fe:	2201      	movs	r2, #1
    e900:	2302      	movs	r3, #2
    e902:	e9c0 2301 	strd	r2, r3, [r0, #4]
    e906:	e7de      	b.n	e8c6 <__i2b+0x12>
    e908:	00015860 	.word	0x00015860
    e90c:	00015874 	.word	0x00015874

0000e910 <__multiply>:
    e910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e914:	690e      	ldr	r6, [r1, #16]
    e916:	6915      	ldr	r5, [r2, #16]
    e918:	42ae      	cmp	r6, r5
    e91a:	b085      	sub	sp, #20
    e91c:	4688      	mov	r8, r1
    e91e:	4614      	mov	r4, r2
    e920:	db05      	blt.n	e92e <__multiply+0x1e>
    e922:	462a      	mov	r2, r5
    e924:	4623      	mov	r3, r4
    e926:	4635      	mov	r5, r6
    e928:	460c      	mov	r4, r1
    e92a:	4616      	mov	r6, r2
    e92c:	4698      	mov	r8, r3
    e92e:	68a3      	ldr	r3, [r4, #8]
    e930:	6861      	ldr	r1, [r4, #4]
    e932:	19af      	adds	r7, r5, r6
    e934:	42bb      	cmp	r3, r7
    e936:	bfb8      	it	lt
    e938:	3101      	addlt	r1, #1
    e93a:	f7ff feeb 	bl	e714 <_Balloc>
    e93e:	9001      	str	r0, [sp, #4]
    e940:	2800      	cmp	r0, #0
    e942:	f000 8087 	beq.w	ea54 <__multiply+0x144>
    e946:	9b01      	ldr	r3, [sp, #4]
    e948:	f103 0914 	add.w	r9, r3, #20
    e94c:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    e950:	45d1      	cmp	r9, sl
    e952:	d205      	bcs.n	e960 <__multiply+0x50>
    e954:	464b      	mov	r3, r9
    e956:	2200      	movs	r2, #0
    e958:	f843 2b04 	str.w	r2, [r3], #4
    e95c:	459a      	cmp	sl, r3
    e95e:	d8fb      	bhi.n	e958 <__multiply+0x48>
    e960:	f108 0814 	add.w	r8, r8, #20
    e964:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    e968:	f104 0314 	add.w	r3, r4, #20
    e96c:	45d8      	cmp	r8, fp
    e96e:	461a      	mov	r2, r3
    e970:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    e974:	d25f      	bcs.n	ea36 <__multiply+0x126>
    e976:	1b2b      	subs	r3, r5, r4
    e978:	3b15      	subs	r3, #21
    e97a:	f023 0303 	bic.w	r3, r3, #3
    e97e:	3304      	adds	r3, #4
    e980:	3415      	adds	r4, #21
    e982:	42a5      	cmp	r5, r4
    e984:	bf38      	it	cc
    e986:	2304      	movcc	r3, #4
    e988:	e9cd a702 	strd	sl, r7, [sp, #8]
    e98c:	46ac      	mov	ip, r5
    e98e:	461f      	mov	r7, r3
    e990:	4692      	mov	sl, r2
    e992:	e005      	b.n	e9a0 <__multiply+0x90>
    e994:	0c09      	lsrs	r1, r1, #16
    e996:	d129      	bne.n	e9ec <__multiply+0xdc>
    e998:	45c3      	cmp	fp, r8
    e99a:	f109 0904 	add.w	r9, r9, #4
    e99e:	d948      	bls.n	ea32 <__multiply+0x122>
    e9a0:	f858 1b04 	ldr.w	r1, [r8], #4
    e9a4:	b28d      	uxth	r5, r1
    e9a6:	2d00      	cmp	r5, #0
    e9a8:	d0f4      	beq.n	e994 <__multiply+0x84>
    e9aa:	4656      	mov	r6, sl
    e9ac:	464c      	mov	r4, r9
    e9ae:	2300      	movs	r3, #0
    e9b0:	f856 1b04 	ldr.w	r1, [r6], #4
    e9b4:	6822      	ldr	r2, [r4, #0]
    e9b6:	fa1f fe81 	uxth.w	lr, r1
    e9ba:	b290      	uxth	r0, r2
    e9bc:	0c09      	lsrs	r1, r1, #16
    e9be:	fb05 000e 	mla	r0, r5, lr, r0
    e9c2:	0c12      	lsrs	r2, r2, #16
    e9c4:	4403      	add	r3, r0
    e9c6:	fb05 2201 	mla	r2, r5, r1, r2
    e9ca:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e9ce:	b29b      	uxth	r3, r3
    e9d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    e9d4:	45b4      	cmp	ip, r6
    e9d6:	f844 3b04 	str.w	r3, [r4], #4
    e9da:	ea4f 4312 	mov.w	r3, r2, lsr #16
    e9de:	d8e7      	bhi.n	e9b0 <__multiply+0xa0>
    e9e0:	f849 3007 	str.w	r3, [r9, r7]
    e9e4:	f858 1c04 	ldr.w	r1, [r8, #-4]
    e9e8:	0c09      	lsrs	r1, r1, #16
    e9ea:	d0d5      	beq.n	e998 <__multiply+0x88>
    e9ec:	f8d9 3000 	ldr.w	r3, [r9]
    e9f0:	4650      	mov	r0, sl
    e9f2:	461a      	mov	r2, r3
    e9f4:	464c      	mov	r4, r9
    e9f6:	2600      	movs	r6, #0
    e9f8:	8805      	ldrh	r5, [r0, #0]
    e9fa:	0c12      	lsrs	r2, r2, #16
    e9fc:	fb01 2205 	mla	r2, r1, r5, r2
    ea00:	4416      	add	r6, r2
    ea02:	b29b      	uxth	r3, r3
    ea04:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    ea08:	f844 3b04 	str.w	r3, [r4], #4
    ea0c:	f850 5b04 	ldr.w	r5, [r0], #4
    ea10:	6822      	ldr	r2, [r4, #0]
    ea12:	0c2d      	lsrs	r5, r5, #16
    ea14:	b293      	uxth	r3, r2
    ea16:	fb01 3305 	mla	r3, r1, r5, r3
    ea1a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    ea1e:	4584      	cmp	ip, r0
    ea20:	ea4f 4613 	mov.w	r6, r3, lsr #16
    ea24:	d8e8      	bhi.n	e9f8 <__multiply+0xe8>
    ea26:	45c3      	cmp	fp, r8
    ea28:	f849 3007 	str.w	r3, [r9, r7]
    ea2c:	f109 0904 	add.w	r9, r9, #4
    ea30:	d8b6      	bhi.n	e9a0 <__multiply+0x90>
    ea32:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    ea36:	2f00      	cmp	r7, #0
    ea38:	dc02      	bgt.n	ea40 <__multiply+0x130>
    ea3a:	e005      	b.n	ea48 <__multiply+0x138>
    ea3c:	3f01      	subs	r7, #1
    ea3e:	d003      	beq.n	ea48 <__multiply+0x138>
    ea40:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    ea44:	2b00      	cmp	r3, #0
    ea46:	d0f9      	beq.n	ea3c <__multiply+0x12c>
    ea48:	9b01      	ldr	r3, [sp, #4]
    ea4a:	4618      	mov	r0, r3
    ea4c:	611f      	str	r7, [r3, #16]
    ea4e:	b005      	add	sp, #20
    ea50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ea54:	4b03      	ldr	r3, [pc, #12]	; (ea64 <__multiply+0x154>)
    ea56:	4804      	ldr	r0, [pc, #16]	; (ea68 <__multiply+0x158>)
    ea58:	9a01      	ldr	r2, [sp, #4]
    ea5a:	f44f 71b1 	mov.w	r1, #354	; 0x162
    ea5e:	f002 f9eb 	bl	10e38 <__assert_func>
    ea62:	bf00      	nop
    ea64:	00015860 	.word	0x00015860
    ea68:	00015874 	.word	0x00015874

0000ea6c <__pow5mult>:
    ea6c:	f012 0303 	ands.w	r3, r2, #3
    ea70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ea74:	4614      	mov	r4, r2
    ea76:	4606      	mov	r6, r0
    ea78:	d132      	bne.n	eae0 <__pow5mult+0x74>
    ea7a:	460d      	mov	r5, r1
    ea7c:	10a4      	asrs	r4, r4, #2
    ea7e:	d020      	beq.n	eac2 <__pow5mult+0x56>
    ea80:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    ea84:	f1b8 0f00 	cmp.w	r8, #0
    ea88:	d033      	beq.n	eaf2 <__pow5mult+0x86>
    ea8a:	07e3      	lsls	r3, r4, #31
    ea8c:	f04f 0700 	mov.w	r7, #0
    ea90:	d407      	bmi.n	eaa2 <__pow5mult+0x36>
    ea92:	1064      	asrs	r4, r4, #1
    ea94:	d015      	beq.n	eac2 <__pow5mult+0x56>
    ea96:	f8d8 0000 	ldr.w	r0, [r8]
    ea9a:	b1a8      	cbz	r0, eac8 <__pow5mult+0x5c>
    ea9c:	4680      	mov	r8, r0
    ea9e:	07e3      	lsls	r3, r4, #31
    eaa0:	d5f7      	bpl.n	ea92 <__pow5mult+0x26>
    eaa2:	4642      	mov	r2, r8
    eaa4:	4629      	mov	r1, r5
    eaa6:	4630      	mov	r0, r6
    eaa8:	f7ff ff32 	bl	e910 <__multiply>
    eaac:	b1b5      	cbz	r5, eadc <__pow5mult+0x70>
    eaae:	6869      	ldr	r1, [r5, #4]
    eab0:	6c73      	ldr	r3, [r6, #68]	; 0x44
    eab2:	1064      	asrs	r4, r4, #1
    eab4:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    eab8:	602a      	str	r2, [r5, #0]
    eaba:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    eabe:	4605      	mov	r5, r0
    eac0:	d1e9      	bne.n	ea96 <__pow5mult+0x2a>
    eac2:	4628      	mov	r0, r5
    eac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    eac8:	4642      	mov	r2, r8
    eaca:	4641      	mov	r1, r8
    eacc:	4630      	mov	r0, r6
    eace:	f7ff ff1f 	bl	e910 <__multiply>
    ead2:	f8c8 0000 	str.w	r0, [r8]
    ead6:	6007      	str	r7, [r0, #0]
    ead8:	4680      	mov	r8, r0
    eada:	e7e0      	b.n	ea9e <__pow5mult+0x32>
    eadc:	4605      	mov	r5, r0
    eade:	e7d8      	b.n	ea92 <__pow5mult+0x26>
    eae0:	3b01      	subs	r3, #1
    eae2:	4a0f      	ldr	r2, [pc, #60]	; (eb20 <__pow5mult+0xb4>)
    eae4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    eae8:	2300      	movs	r3, #0
    eaea:	f7ff fe43 	bl	e774 <__multadd>
    eaee:	4605      	mov	r5, r0
    eaf0:	e7c4      	b.n	ea7c <__pow5mult+0x10>
    eaf2:	2101      	movs	r1, #1
    eaf4:	4630      	mov	r0, r6
    eaf6:	f7ff fe0d 	bl	e714 <_Balloc>
    eafa:	4680      	mov	r8, r0
    eafc:	b140      	cbz	r0, eb10 <__pow5mult+0xa4>
    eafe:	2301      	movs	r3, #1
    eb00:	f240 2271 	movw	r2, #625	; 0x271
    eb04:	e9c0 3204 	strd	r3, r2, [r0, #16]
    eb08:	2300      	movs	r3, #0
    eb0a:	6430      	str	r0, [r6, #64]	; 0x40
    eb0c:	6003      	str	r3, [r0, #0]
    eb0e:	e7bc      	b.n	ea8a <__pow5mult+0x1e>
    eb10:	4b04      	ldr	r3, [pc, #16]	; (eb24 <__pow5mult+0xb8>)
    eb12:	4805      	ldr	r0, [pc, #20]	; (eb28 <__pow5mult+0xbc>)
    eb14:	4642      	mov	r2, r8
    eb16:	f240 1145 	movw	r1, #325	; 0x145
    eb1a:	f002 f98d 	bl	10e38 <__assert_func>
    eb1e:	bf00      	nop
    eb20:	000159c0 	.word	0x000159c0
    eb24:	00015860 	.word	0x00015860
    eb28:	00015874 	.word	0x00015874

0000eb2c <__lshift>:
    eb2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eb30:	460c      	mov	r4, r1
    eb32:	4690      	mov	r8, r2
    eb34:	6926      	ldr	r6, [r4, #16]
    eb36:	68a3      	ldr	r3, [r4, #8]
    eb38:	6849      	ldr	r1, [r1, #4]
    eb3a:	eb06 1662 	add.w	r6, r6, r2, asr #5
    eb3e:	1c75      	adds	r5, r6, #1
    eb40:	429d      	cmp	r5, r3
    eb42:	4607      	mov	r7, r0
    eb44:	ea4f 1962 	mov.w	r9, r2, asr #5
    eb48:	dd04      	ble.n	eb54 <__lshift+0x28>
    eb4a:	005b      	lsls	r3, r3, #1
    eb4c:	429d      	cmp	r5, r3
    eb4e:	f101 0101 	add.w	r1, r1, #1
    eb52:	dcfa      	bgt.n	eb4a <__lshift+0x1e>
    eb54:	4638      	mov	r0, r7
    eb56:	f7ff fddd 	bl	e714 <_Balloc>
    eb5a:	4684      	mov	ip, r0
    eb5c:	2800      	cmp	r0, #0
    eb5e:	d051      	beq.n	ec04 <__lshift+0xd8>
    eb60:	f1b9 0f00 	cmp.w	r9, #0
    eb64:	f100 0014 	add.w	r0, r0, #20
    eb68:	dd0e      	ble.n	eb88 <__lshift+0x5c>
    eb6a:	f109 0205 	add.w	r2, r9, #5
    eb6e:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    eb72:	4603      	mov	r3, r0
    eb74:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    eb78:	2100      	movs	r1, #0
    eb7a:	f843 1b04 	str.w	r1, [r3], #4
    eb7e:	4293      	cmp	r3, r2
    eb80:	d1fb      	bne.n	eb7a <__lshift+0x4e>
    eb82:	f1ae 0314 	sub.w	r3, lr, #20
    eb86:	4418      	add	r0, r3
    eb88:	6921      	ldr	r1, [r4, #16]
    eb8a:	f104 0314 	add.w	r3, r4, #20
    eb8e:	f018 081f 	ands.w	r8, r8, #31
    eb92:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    eb96:	d02d      	beq.n	ebf4 <__lshift+0xc8>
    eb98:	f1c8 0920 	rsb	r9, r8, #32
    eb9c:	4686      	mov	lr, r0
    eb9e:	f04f 0a00 	mov.w	sl, #0
    eba2:	681a      	ldr	r2, [r3, #0]
    eba4:	fa02 f208 	lsl.w	r2, r2, r8
    eba8:	ea42 020a 	orr.w	r2, r2, sl
    ebac:	f84e 2b04 	str.w	r2, [lr], #4
    ebb0:	f853 2b04 	ldr.w	r2, [r3], #4
    ebb4:	4299      	cmp	r1, r3
    ebb6:	fa22 fa09 	lsr.w	sl, r2, r9
    ebba:	d8f2      	bhi.n	eba2 <__lshift+0x76>
    ebbc:	1b0b      	subs	r3, r1, r4
    ebbe:	3b15      	subs	r3, #21
    ebc0:	f023 0303 	bic.w	r3, r3, #3
    ebc4:	3304      	adds	r3, #4
    ebc6:	f104 0215 	add.w	r2, r4, #21
    ebca:	4291      	cmp	r1, r2
    ebcc:	bf38      	it	cc
    ebce:	2304      	movcc	r3, #4
    ebd0:	f1ba 0f00 	cmp.w	sl, #0
    ebd4:	bf18      	it	ne
    ebd6:	462e      	movne	r6, r5
    ebd8:	f840 a003 	str.w	sl, [r0, r3]
    ebdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ebde:	6862      	ldr	r2, [r4, #4]
    ebe0:	f8cc 6010 	str.w	r6, [ip, #16]
    ebe4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    ebe8:	6021      	str	r1, [r4, #0]
    ebea:	4660      	mov	r0, ip
    ebec:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    ebf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ebf4:	3804      	subs	r0, #4
    ebf6:	f853 2b04 	ldr.w	r2, [r3], #4
    ebfa:	f840 2f04 	str.w	r2, [r0, #4]!
    ebfe:	4299      	cmp	r1, r3
    ec00:	d8f9      	bhi.n	ebf6 <__lshift+0xca>
    ec02:	e7eb      	b.n	ebdc <__lshift+0xb0>
    ec04:	4b03      	ldr	r3, [pc, #12]	; (ec14 <__lshift+0xe8>)
    ec06:	4804      	ldr	r0, [pc, #16]	; (ec18 <__lshift+0xec>)
    ec08:	4662      	mov	r2, ip
    ec0a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    ec0e:	f002 f913 	bl	10e38 <__assert_func>
    ec12:	bf00      	nop
    ec14:	00015860 	.word	0x00015860
    ec18:	00015874 	.word	0x00015874

0000ec1c <__mcmp>:
    ec1c:	690b      	ldr	r3, [r1, #16]
    ec1e:	4684      	mov	ip, r0
    ec20:	6900      	ldr	r0, [r0, #16]
    ec22:	1ac0      	subs	r0, r0, r3
    ec24:	d115      	bne.n	ec52 <__mcmp+0x36>
    ec26:	f10c 0c14 	add.w	ip, ip, #20
    ec2a:	3114      	adds	r1, #20
    ec2c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    ec30:	b410      	push	{r4}
    ec32:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    ec36:	e001      	b.n	ec3c <__mcmp+0x20>
    ec38:	4594      	cmp	ip, r2
    ec3a:	d208      	bcs.n	ec4e <__mcmp+0x32>
    ec3c:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    ec40:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    ec44:	428c      	cmp	r4, r1
    ec46:	d0f7      	beq.n	ec38 <__mcmp+0x1c>
    ec48:	d204      	bcs.n	ec54 <__mcmp+0x38>
    ec4a:	f04f 30ff 	mov.w	r0, #4294967295
    ec4e:	bc10      	pop	{r4}
    ec50:	4770      	bx	lr
    ec52:	4770      	bx	lr
    ec54:	2001      	movs	r0, #1
    ec56:	bc10      	pop	{r4}
    ec58:	4770      	bx	lr
    ec5a:	bf00      	nop

0000ec5c <__mdiff>:
    ec5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec60:	690f      	ldr	r7, [r1, #16]
    ec62:	6913      	ldr	r3, [r2, #16]
    ec64:	1aff      	subs	r7, r7, r3
    ec66:	2f00      	cmp	r7, #0
    ec68:	460e      	mov	r6, r1
    ec6a:	4690      	mov	r8, r2
    ec6c:	d17f      	bne.n	ed6e <__mdiff+0x112>
    ec6e:	f101 0514 	add.w	r5, r1, #20
    ec72:	3214      	adds	r2, #20
    ec74:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    ec78:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    ec7c:	e001      	b.n	ec82 <__mdiff+0x26>
    ec7e:	429d      	cmp	r5, r3
    ec80:	d278      	bcs.n	ed74 <__mdiff+0x118>
    ec82:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    ec86:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    ec8a:	42a1      	cmp	r1, r4
    ec8c:	d0f7      	beq.n	ec7e <__mdiff+0x22>
    ec8e:	d369      	bcc.n	ed64 <__mdiff+0x108>
    ec90:	6871      	ldr	r1, [r6, #4]
    ec92:	f7ff fd3f 	bl	e714 <_Balloc>
    ec96:	4681      	mov	r9, r0
    ec98:	2800      	cmp	r0, #0
    ec9a:	d077      	beq.n	ed8c <__mdiff+0x130>
    ec9c:	6935      	ldr	r5, [r6, #16]
    ec9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    eca2:	60c7      	str	r7, [r0, #12]
    eca4:	f108 0e14 	add.w	lr, r8, #20
    eca8:	f106 0014 	add.w	r0, r6, #20
    ecac:	f109 0a14 	add.w	sl, r9, #20
    ecb0:	f106 0110 	add.w	r1, r6, #16
    ecb4:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    ecb8:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    ecbc:	4656      	mov	r6, sl
    ecbe:	f04f 0c00 	mov.w	ip, #0
    ecc2:	f85e 4b04 	ldr.w	r4, [lr], #4
    ecc6:	f851 bf04 	ldr.w	fp, [r1, #4]!
    ecca:	b2a3      	uxth	r3, r4
    eccc:	fa1c fc8b 	uxtah	ip, ip, fp
    ecd0:	ebac 0303 	sub.w	r3, ip, r3
    ecd4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    ecd8:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    ecdc:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    ece0:	b29b      	uxth	r3, r3
    ece2:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    ece6:	4572      	cmp	r2, lr
    ece8:	f846 3b04 	str.w	r3, [r6], #4
    ecec:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    ecf0:	d8e7      	bhi.n	ecc2 <__mdiff+0x66>
    ecf2:	eba2 0108 	sub.w	r1, r2, r8
    ecf6:	3915      	subs	r1, #21
    ecf8:	f108 0815 	add.w	r8, r8, #21
    ecfc:	4542      	cmp	r2, r8
    ecfe:	f021 0403 	bic.w	r4, r1, #3
    ed02:	f104 0404 	add.w	r4, r4, #4
    ed06:	bf38      	it	cc
    ed08:	2404      	movcc	r4, #4
    ed0a:	4420      	add	r0, r4
    ed0c:	f021 0203 	bic.w	r2, r1, #3
    ed10:	bf38      	it	cc
    ed12:	2200      	movcc	r2, #0
    ed14:	4287      	cmp	r7, r0
    ed16:	4452      	add	r2, sl
    ed18:	4454      	add	r4, sl
    ed1a:	d918      	bls.n	ed4e <__mdiff+0xf2>
    ed1c:	4626      	mov	r6, r4
    ed1e:	4601      	mov	r1, r0
    ed20:	f851 3b04 	ldr.w	r3, [r1], #4
    ed24:	fa1c fc83 	uxtah	ip, ip, r3
    ed28:	ea4f 422c 	mov.w	r2, ip, asr #16
    ed2c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    ed30:	fa1f fc8c 	uxth.w	ip, ip
    ed34:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    ed38:	428f      	cmp	r7, r1
    ed3a:	f846 3b04 	str.w	r3, [r6], #4
    ed3e:	ea4f 4c22 	mov.w	ip, r2, asr #16
    ed42:	d8ed      	bhi.n	ed20 <__mdiff+0xc4>
    ed44:	3f01      	subs	r7, #1
    ed46:	1a3f      	subs	r7, r7, r0
    ed48:	f027 0703 	bic.w	r7, r7, #3
    ed4c:	19e2      	adds	r2, r4, r7
    ed4e:	b923      	cbnz	r3, ed5a <__mdiff+0xfe>
    ed50:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    ed54:	3d01      	subs	r5, #1
    ed56:	2b00      	cmp	r3, #0
    ed58:	d0fa      	beq.n	ed50 <__mdiff+0xf4>
    ed5a:	f8c9 5010 	str.w	r5, [r9, #16]
    ed5e:	4648      	mov	r0, r9
    ed60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed64:	4633      	mov	r3, r6
    ed66:	2701      	movs	r7, #1
    ed68:	4646      	mov	r6, r8
    ed6a:	4698      	mov	r8, r3
    ed6c:	e790      	b.n	ec90 <__mdiff+0x34>
    ed6e:	dbf9      	blt.n	ed64 <__mdiff+0x108>
    ed70:	2700      	movs	r7, #0
    ed72:	e78d      	b.n	ec90 <__mdiff+0x34>
    ed74:	2100      	movs	r1, #0
    ed76:	f7ff fccd 	bl	e714 <_Balloc>
    ed7a:	4681      	mov	r9, r0
    ed7c:	b168      	cbz	r0, ed9a <__mdiff+0x13e>
    ed7e:	2201      	movs	r2, #1
    ed80:	2300      	movs	r3, #0
    ed82:	e9c9 2304 	strd	r2, r3, [r9, #16]
    ed86:	4648      	mov	r0, r9
    ed88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed8c:	4b06      	ldr	r3, [pc, #24]	; (eda8 <__mdiff+0x14c>)
    ed8e:	4807      	ldr	r0, [pc, #28]	; (edac <__mdiff+0x150>)
    ed90:	464a      	mov	r2, r9
    ed92:	f240 2145 	movw	r1, #581	; 0x245
    ed96:	f002 f84f 	bl	10e38 <__assert_func>
    ed9a:	4b03      	ldr	r3, [pc, #12]	; (eda8 <__mdiff+0x14c>)
    ed9c:	4803      	ldr	r0, [pc, #12]	; (edac <__mdiff+0x150>)
    ed9e:	464a      	mov	r2, r9
    eda0:	f240 2137 	movw	r1, #567	; 0x237
    eda4:	f002 f848 	bl	10e38 <__assert_func>
    eda8:	00015860 	.word	0x00015860
    edac:	00015874 	.word	0x00015874

0000edb0 <__d2b>:
    edb0:	b570      	push	{r4, r5, r6, lr}
    edb2:	2101      	movs	r1, #1
    edb4:	b082      	sub	sp, #8
    edb6:	4616      	mov	r6, r2
    edb8:	461d      	mov	r5, r3
    edba:	f7ff fcab 	bl	e714 <_Balloc>
    edbe:	4604      	mov	r4, r0
    edc0:	2800      	cmp	r0, #0
    edc2:	d04a      	beq.n	ee5a <__d2b+0xaa>
    edc4:	462b      	mov	r3, r5
    edc6:	f3c5 550a 	ubfx	r5, r5, #20, #11
    edca:	f3c3 0313 	ubfx	r3, r3, #0, #20
    edce:	b10d      	cbz	r5, edd4 <__d2b+0x24>
    edd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    edd4:	2e00      	cmp	r6, #0
    edd6:	9301      	str	r3, [sp, #4]
    edd8:	d114      	bne.n	ee04 <__d2b+0x54>
    edda:	a801      	add	r0, sp, #4
    eddc:	f7ff fd3a 	bl	e854 <__lo0bits>
    ede0:	9b01      	ldr	r3, [sp, #4]
    ede2:	6163      	str	r3, [r4, #20]
    ede4:	2101      	movs	r1, #1
    ede6:	3020      	adds	r0, #32
    ede8:	6121      	str	r1, [r4, #16]
    edea:	b315      	cbz	r5, ee32 <__d2b+0x82>
    edec:	9b06      	ldr	r3, [sp, #24]
    edee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    edf2:	4405      	add	r5, r0
    edf4:	601d      	str	r5, [r3, #0]
    edf6:	9b07      	ldr	r3, [sp, #28]
    edf8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    edfc:	6018      	str	r0, [r3, #0]
    edfe:	4620      	mov	r0, r4
    ee00:	b002      	add	sp, #8
    ee02:	bd70      	pop	{r4, r5, r6, pc}
    ee04:	4668      	mov	r0, sp
    ee06:	9600      	str	r6, [sp, #0]
    ee08:	f7ff fd24 	bl	e854 <__lo0bits>
    ee0c:	b308      	cbz	r0, ee52 <__d2b+0xa2>
    ee0e:	9b01      	ldr	r3, [sp, #4]
    ee10:	9900      	ldr	r1, [sp, #0]
    ee12:	f1c0 0220 	rsb	r2, r0, #32
    ee16:	fa03 f202 	lsl.w	r2, r3, r2
    ee1a:	430a      	orrs	r2, r1
    ee1c:	40c3      	lsrs	r3, r0
    ee1e:	9301      	str	r3, [sp, #4]
    ee20:	6162      	str	r2, [r4, #20]
    ee22:	2b00      	cmp	r3, #0
    ee24:	bf14      	ite	ne
    ee26:	2102      	movne	r1, #2
    ee28:	2101      	moveq	r1, #1
    ee2a:	61a3      	str	r3, [r4, #24]
    ee2c:	6121      	str	r1, [r4, #16]
    ee2e:	2d00      	cmp	r5, #0
    ee30:	d1dc      	bne.n	edec <__d2b+0x3c>
    ee32:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    ee36:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
    ee3a:	6910      	ldr	r0, [r2, #16]
    ee3c:	9a06      	ldr	r2, [sp, #24]
    ee3e:	6013      	str	r3, [r2, #0]
    ee40:	f7ff fce8 	bl	e814 <__hi0bits>
    ee44:	9b07      	ldr	r3, [sp, #28]
    ee46:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    ee4a:	6018      	str	r0, [r3, #0]
    ee4c:	4620      	mov	r0, r4
    ee4e:	b002      	add	sp, #8
    ee50:	bd70      	pop	{r4, r5, r6, pc}
    ee52:	e9dd 2300 	ldrd	r2, r3, [sp]
    ee56:	6162      	str	r2, [r4, #20]
    ee58:	e7e3      	b.n	ee22 <__d2b+0x72>
    ee5a:	4b03      	ldr	r3, [pc, #12]	; (ee68 <__d2b+0xb8>)
    ee5c:	4803      	ldr	r0, [pc, #12]	; (ee6c <__d2b+0xbc>)
    ee5e:	4622      	mov	r2, r4
    ee60:	f240 310f 	movw	r1, #783	; 0x30f
    ee64:	f001 ffe8 	bl	10e38 <__assert_func>
    ee68:	00015860 	.word	0x00015860
    ee6c:	00015874 	.word	0x00015874

0000ee70 <__ascii_wctomb>:
    ee70:	b149      	cbz	r1, ee86 <__ascii_wctomb+0x16>
    ee72:	2aff      	cmp	r2, #255	; 0xff
    ee74:	d802      	bhi.n	ee7c <__ascii_wctomb+0xc>
    ee76:	700a      	strb	r2, [r1, #0]
    ee78:	2001      	movs	r0, #1
    ee7a:	4770      	bx	lr
    ee7c:	238a      	movs	r3, #138	; 0x8a
    ee7e:	6003      	str	r3, [r0, #0]
    ee80:	f04f 30ff 	mov.w	r0, #4294967295
    ee84:	4770      	bx	lr
    ee86:	4608      	mov	r0, r1
    ee88:	4770      	bx	lr
    ee8a:	bf00      	nop

0000ee8c <_svfprintf_r>:
    ee8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee90:	b0d9      	sub	sp, #356	; 0x164
    ee92:	460c      	mov	r4, r1
    ee94:	910c      	str	r1, [sp, #48]	; 0x30
    ee96:	4690      	mov	r8, r2
    ee98:	930e      	str	r3, [sp, #56]	; 0x38
    ee9a:	4682      	mov	sl, r0
    ee9c:	f001 fee6 	bl	10c6c <_localeconv_r>
    eea0:	6803      	ldr	r3, [r0, #0]
    eea2:	9319      	str	r3, [sp, #100]	; 0x64
    eea4:	4618      	mov	r0, r3
    eea6:	f7ff fa4b 	bl	e340 <strlen>
    eeaa:	2208      	movs	r2, #8
    eeac:	9017      	str	r0, [sp, #92]	; 0x5c
    eeae:	2100      	movs	r1, #0
    eeb0:	a828      	add	r0, sp, #160	; 0xa0
    eeb2:	f7ff f90f 	bl	e0d4 <memset>
    eeb6:	89a3      	ldrh	r3, [r4, #12]
    eeb8:	061f      	lsls	r7, r3, #24
    eeba:	d503      	bpl.n	eec4 <_svfprintf_r+0x38>
    eebc:	6923      	ldr	r3, [r4, #16]
    eebe:	2b00      	cmp	r3, #0
    eec0:	f000 873f 	beq.w	fd42 <_svfprintf_r+0xeb6>
    eec4:	2300      	movs	r3, #0
    eec6:	aa2f      	add	r2, sp, #188	; 0xbc
    eec8:	2400      	movs	r4, #0
    eeca:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
    eece:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    eed2:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
    eed6:	9313      	str	r3, [sp, #76]	; 0x4c
    eed8:	9318      	str	r3, [sp, #96]	; 0x60
    eeda:	9309      	str	r3, [sp, #36]	; 0x24
    eedc:	2300      	movs	r3, #0
    eede:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    eee2:	922c      	str	r2, [sp, #176]	; 0xb0
    eee4:	4691      	mov	r9, r2
    eee6:	4644      	mov	r4, r8
    eee8:	46a0      	mov	r8, r4
    eeea:	4b78      	ldr	r3, [pc, #480]	; (f0cc <_svfprintf_r+0x240>)
    eeec:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    eef0:	f7ff f974 	bl	e1dc <__locale_mb_cur_max>
    eef4:	4603      	mov	r3, r0
    eef6:	a828      	add	r0, sp, #160	; 0xa0
    eef8:	9000      	str	r0, [sp, #0]
    eefa:	4642      	mov	r2, r8
    eefc:	a924      	add	r1, sp, #144	; 0x90
    eefe:	4650      	mov	r0, sl
    ef00:	47a8      	blx	r5
    ef02:	2800      	cmp	r0, #0
    ef04:	f000 80b0 	beq.w	f068 <_svfprintf_r+0x1dc>
    ef08:	f2c0 80a6 	blt.w	f058 <_svfprintf_r+0x1cc>
    ef0c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    ef0e:	2a25      	cmp	r2, #37	; 0x25
    ef10:	4603      	mov	r3, r0
    ef12:	d001      	beq.n	ef18 <_svfprintf_r+0x8c>
    ef14:	4498      	add	r8, r3
    ef16:	e7e8      	b.n	eeea <_svfprintf_r+0x5e>
    ef18:	ebb8 0704 	subs.w	r7, r8, r4
    ef1c:	4606      	mov	r6, r0
    ef1e:	f040 80a7 	bne.w	f070 <_svfprintf_r+0x1e4>
    ef22:	2300      	movs	r3, #0
    ef24:	f04f 32ff 	mov.w	r2, #4294967295
    ef28:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    ef2c:	469b      	mov	fp, r3
    ef2e:	930b      	str	r3, [sp, #44]	; 0x2c
    ef30:	f108 0801 	add.w	r8, r8, #1
    ef34:	f898 3000 	ldrb.w	r3, [r8]
    ef38:	9208      	str	r2, [sp, #32]
    ef3a:	252b      	movs	r5, #43	; 0x2b
    ef3c:	2620      	movs	r6, #32
    ef3e:	f108 0801 	add.w	r8, r8, #1
    ef42:	f1a3 0220 	sub.w	r2, r3, #32
    ef46:	2a5a      	cmp	r2, #90	; 0x5a
    ef48:	f200 80c2 	bhi.w	f0d0 <_svfprintf_r+0x244>
    ef4c:	e8df f012 	tbh	[pc, r2, lsl #1]
    ef50:	00c002e6 	.word	0x00c002e6
    ef54:	02e100c0 	.word	0x02e100c0
    ef58:	00c000c0 	.word	0x00c000c0
    ef5c:	006a00c0 	.word	0x006a00c0
    ef60:	00c000c0 	.word	0x00c000c0
    ef64:	02840208 	.word	0x02840208
    ef68:	021300c0 	.word	0x021300c0
    ef6c:	00c002c7 	.word	0x00c002c7
    ef70:	005b02c2 	.word	0x005b02c2
    ef74:	005b005b 	.word	0x005b005b
    ef78:	005b005b 	.word	0x005b005b
    ef7c:	005b005b 	.word	0x005b005b
    ef80:	005b005b 	.word	0x005b005b
    ef84:	00c000c0 	.word	0x00c000c0
    ef88:	00c000c0 	.word	0x00c000c0
    ef8c:	00c000c0 	.word	0x00c000c0
    ef90:	014300c0 	.word	0x014300c0
    ef94:	018900c0 	.word	0x018900c0
    ef98:	0143021d 	.word	0x0143021d
    ef9c:	01430143 	.word	0x01430143
    efa0:	00c000c0 	.word	0x00c000c0
    efa4:	00c000c0 	.word	0x00c000c0
    efa8:	00c00218 	.word	0x00c00218
    efac:	029600c0 	.word	0x029600c0
    efb0:	00c000c0 	.word	0x00c000c0
    efb4:	01b100c0 	.word	0x01b100c0
    efb8:	02a900c0 	.word	0x02a900c0
    efbc:	00c000c0 	.word	0x00c000c0
    efc0:	00c006dd 	.word	0x00c006dd
    efc4:	00c000c0 	.word	0x00c000c0
    efc8:	00c000c0 	.word	0x00c000c0
    efcc:	00c000c0 	.word	0x00c000c0
    efd0:	014300c0 	.word	0x014300c0
    efd4:	018900c0 	.word	0x018900c0
    efd8:	014301e2 	.word	0x014301e2
    efdc:	01430143 	.word	0x01430143
    efe0:	01e20277 	.word	0x01e20277
    efe4:	00c0007f 	.word	0x00c0007f
    efe8:	00c00289 	.word	0x00c00289
    efec:	06da025f 	.word	0x06da025f
    eff0:	007f0232 	.word	0x007f0232
    eff4:	01b100c0 	.word	0x01b100c0
    eff8:	06b4007c 	.word	0x06b4007c
    effc:	00c000c0 	.word	0x00c000c0
    f000:	00c006b8 	.word	0x00c006b8
    f004:	007c      	.short	0x007c
    f006:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f00a:	2100      	movs	r1, #0
    f00c:	f818 3b01 	ldrb.w	r3, [r8], #1
    f010:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f014:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    f018:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f01c:	2a09      	cmp	r2, #9
    f01e:	d9f5      	bls.n	f00c <_svfprintf_r+0x180>
    f020:	910b      	str	r1, [sp, #44]	; 0x2c
    f022:	e78e      	b.n	ef42 <_svfprintf_r+0xb6>
    f024:	4650      	mov	r0, sl
    f026:	f001 fe21 	bl	10c6c <_localeconv_r>
    f02a:	6843      	ldr	r3, [r0, #4]
    f02c:	931c      	str	r3, [sp, #112]	; 0x70
    f02e:	4618      	mov	r0, r3
    f030:	f7ff f986 	bl	e340 <strlen>
    f034:	901d      	str	r0, [sp, #116]	; 0x74
    f036:	4607      	mov	r7, r0
    f038:	4650      	mov	r0, sl
    f03a:	f001 fe17 	bl	10c6c <_localeconv_r>
    f03e:	6883      	ldr	r3, [r0, #8]
    f040:	931a      	str	r3, [sp, #104]	; 0x68
    f042:	2f00      	cmp	r7, #0
    f044:	f040 85b1 	bne.w	fbaa <_svfprintf_r+0xd1e>
    f048:	f898 3000 	ldrb.w	r3, [r8]
    f04c:	e777      	b.n	ef3e <_svfprintf_r+0xb2>
    f04e:	f898 3000 	ldrb.w	r3, [r8]
    f052:	f04b 0b20 	orr.w	fp, fp, #32
    f056:	e772      	b.n	ef3e <_svfprintf_r+0xb2>
    f058:	2208      	movs	r2, #8
    f05a:	2100      	movs	r1, #0
    f05c:	a828      	add	r0, sp, #160	; 0xa0
    f05e:	f7ff f839 	bl	e0d4 <memset>
    f062:	2301      	movs	r3, #1
    f064:	4498      	add	r8, r3
    f066:	e740      	b.n	eeea <_svfprintf_r+0x5e>
    f068:	ebb8 0704 	subs.w	r7, r8, r4
    f06c:	4606      	mov	r6, r0
    f06e:	d011      	beq.n	f094 <_svfprintf_r+0x208>
    f070:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    f072:	443b      	add	r3, r7
    f074:	932e      	str	r3, [sp, #184]	; 0xb8
    f076:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f078:	3301      	adds	r3, #1
    f07a:	2b07      	cmp	r3, #7
    f07c:	e9c9 4700 	strd	r4, r7, [r9]
    f080:	932d      	str	r3, [sp, #180]	; 0xb4
    f082:	dc19      	bgt.n	f0b8 <_svfprintf_r+0x22c>
    f084:	f109 0908 	add.w	r9, r9, #8
    f088:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f08a:	443b      	add	r3, r7
    f08c:	9309      	str	r3, [sp, #36]	; 0x24
    f08e:	2e00      	cmp	r6, #0
    f090:	f47f af47 	bne.w	ef22 <_svfprintf_r+0x96>
    f094:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    f096:	2b00      	cmp	r3, #0
    f098:	f041 8201 	bne.w	1049e <_svfprintf_r+0x1612>
    f09c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f09e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    f0a2:	f013 0f40 	tst.w	r3, #64	; 0x40
    f0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f0a8:	bf18      	it	ne
    f0aa:	f04f 33ff 	movne.w	r3, #4294967295
    f0ae:	9309      	str	r3, [sp, #36]	; 0x24
    f0b0:	9809      	ldr	r0, [sp, #36]	; 0x24
    f0b2:	b059      	add	sp, #356	; 0x164
    f0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f0b8:	990c      	ldr	r1, [sp, #48]	; 0x30
    f0ba:	aa2c      	add	r2, sp, #176	; 0xb0
    f0bc:	4650      	mov	r0, sl
    f0be:	f002 ff4f 	bl	11f60 <__ssprint_r>
    f0c2:	2800      	cmp	r0, #0
    f0c4:	d1ea      	bne.n	f09c <_svfprintf_r+0x210>
    f0c6:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f0ca:	e7dd      	b.n	f088 <_svfprintf_r+0x1fc>
    f0cc:	1fff8ed4 	.word	0x1fff8ed4
    f0d0:	9310      	str	r3, [sp, #64]	; 0x40
    f0d2:	2b00      	cmp	r3, #0
    f0d4:	d0de      	beq.n	f094 <_svfprintf_r+0x208>
    f0d6:	2200      	movs	r2, #0
    f0d8:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
    f0dc:	2301      	movs	r3, #1
    f0de:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    f0e2:	9307      	str	r3, [sp, #28]
    f0e4:	920d      	str	r2, [sp, #52]	; 0x34
    f0e6:	930a      	str	r3, [sp, #40]	; 0x28
    f0e8:	9208      	str	r2, [sp, #32]
    f0ea:	9212      	str	r2, [sp, #72]	; 0x48
    f0ec:	9216      	str	r2, [sp, #88]	; 0x58
    f0ee:	9211      	str	r2, [sp, #68]	; 0x44
    f0f0:	ac3f      	add	r4, sp, #252	; 0xfc
    f0f2:	f01b 0302 	ands.w	r3, fp, #2
    f0f6:	d002      	beq.n	f0fe <_svfprintf_r+0x272>
    f0f8:	9907      	ldr	r1, [sp, #28]
    f0fa:	3102      	adds	r1, #2
    f0fc:	9107      	str	r1, [sp, #28]
    f0fe:	f01b 0184 	ands.w	r1, fp, #132	; 0x84
    f102:	910f      	str	r1, [sp, #60]	; 0x3c
    f104:	d105      	bne.n	f112 <_svfprintf_r+0x286>
    f106:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f108:	9807      	ldr	r0, [sp, #28]
    f10a:	1a0f      	subs	r7, r1, r0
    f10c:	2f00      	cmp	r7, #0
    f10e:	f300 8382 	bgt.w	f816 <_svfprintf_r+0x98a>
    f112:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f114:	b182      	cbz	r2, f138 <_svfprintf_r+0x2ac>
    f116:	2201      	movs	r2, #1
    f118:	f8c9 2004 	str.w	r2, [r9, #4]
    f11c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f11e:	3201      	adds	r2, #1
    f120:	3601      	adds	r6, #1
    f122:	f10d 0187 	add.w	r1, sp, #135	; 0x87
    f126:	2a07      	cmp	r2, #7
    f128:	962e      	str	r6, [sp, #184]	; 0xb8
    f12a:	922d      	str	r2, [sp, #180]	; 0xb4
    f12c:	f8c9 1000 	str.w	r1, [r9]
    f130:	f300 83bd 	bgt.w	f8ae <_svfprintf_r+0xa22>
    f134:	f109 0908 	add.w	r9, r9, #8
    f138:	b183      	cbz	r3, f15c <_svfprintf_r+0x2d0>
    f13a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f13c:	aa22      	add	r2, sp, #136	; 0x88
    f13e:	3301      	adds	r3, #1
    f140:	3602      	adds	r6, #2
    f142:	f8c9 2000 	str.w	r2, [r9]
    f146:	2b07      	cmp	r3, #7
    f148:	f04f 0202 	mov.w	r2, #2
    f14c:	962e      	str	r6, [sp, #184]	; 0xb8
    f14e:	932d      	str	r3, [sp, #180]	; 0xb4
    f150:	f8c9 2004 	str.w	r2, [r9, #4]
    f154:	f300 83c0 	bgt.w	f8d8 <_svfprintf_r+0xa4c>
    f158:	f109 0908 	add.w	r9, r9, #8
    f15c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f15e:	2b80      	cmp	r3, #128	; 0x80
    f160:	f000 8281 	beq.w	f666 <_svfprintf_r+0x7da>
    f164:	9b08      	ldr	r3, [sp, #32]
    f166:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f168:	1a9f      	subs	r7, r3, r2
    f16a:	2f00      	cmp	r7, #0
    f16c:	f300 82bc 	bgt.w	f6e8 <_svfprintf_r+0x85c>
    f170:	f41b 7f80 	tst.w	fp, #256	; 0x100
    f174:	f040 821e 	bne.w	f5b4 <_svfprintf_r+0x728>
    f178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f17a:	f8c9 3004 	str.w	r3, [r9, #4]
    f17e:	441e      	add	r6, r3
    f180:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f182:	f8c9 4000 	str.w	r4, [r9]
    f186:	3301      	adds	r3, #1
    f188:	2b07      	cmp	r3, #7
    f18a:	962e      	str	r6, [sp, #184]	; 0xb8
    f18c:	932d      	str	r3, [sp, #180]	; 0xb4
    f18e:	f300 8337 	bgt.w	f800 <_svfprintf_r+0x974>
    f192:	f109 0908 	add.w	r9, r9, #8
    f196:	f01b 0f04 	tst.w	fp, #4
    f19a:	d005      	beq.n	f1a8 <_svfprintf_r+0x31c>
    f19c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f19e:	9a07      	ldr	r2, [sp, #28]
    f1a0:	1a9c      	subs	r4, r3, r2
    f1a2:	2c00      	cmp	r4, #0
    f1a4:	f300 83a4 	bgt.w	f8f0 <_svfprintf_r+0xa64>
    f1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f1aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f1ac:	9907      	ldr	r1, [sp, #28]
    f1ae:	428a      	cmp	r2, r1
    f1b0:	bfac      	ite	ge
    f1b2:	189b      	addge	r3, r3, r2
    f1b4:	185b      	addlt	r3, r3, r1
    f1b6:	9309      	str	r3, [sp, #36]	; 0x24
    f1b8:	2e00      	cmp	r6, #0
    f1ba:	f040 82ca 	bne.w	f752 <_svfprintf_r+0x8c6>
    f1be:	2300      	movs	r3, #0
    f1c0:	932d      	str	r3, [sp, #180]	; 0xb4
    f1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f1c4:	b11b      	cbz	r3, f1ce <_svfprintf_r+0x342>
    f1c6:	990d      	ldr	r1, [sp, #52]	; 0x34
    f1c8:	4650      	mov	r0, sl
    f1ca:	f7ff f987 	bl	e4dc <_free_r>
    f1ce:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f1d2:	4644      	mov	r4, r8
    f1d4:	e688      	b.n	eee8 <_svfprintf_r+0x5c>
    f1d6:	9310      	str	r3, [sp, #64]	; 0x40
    f1d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f1da:	3307      	adds	r3, #7
    f1dc:	f023 0107 	bic.w	r1, r3, #7
    f1e0:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    f1e4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    f1e8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    f1ec:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    f1f0:	910e      	str	r1, [sp, #56]	; 0x38
    f1f2:	4616      	mov	r6, r2
    f1f4:	4610      	mov	r0, r2
    f1f6:	4bb3      	ldr	r3, [pc, #716]	; (f4c4 <_svfprintf_r+0x638>)
    f1f8:	4629      	mov	r1, r5
    f1fa:	f04f 32ff 	mov.w	r2, #4294967295
    f1fe:	f7fd fda3 	bl	cd48 <__aeabi_dcmpun>
    f202:	2800      	cmp	r0, #0
    f204:	f040 84fc 	bne.w	fc00 <_svfprintf_r+0xd74>
    f208:	4bae      	ldr	r3, [pc, #696]	; (f4c4 <_svfprintf_r+0x638>)
    f20a:	4630      	mov	r0, r6
    f20c:	4629      	mov	r1, r5
    f20e:	f04f 32ff 	mov.w	r2, #4294967295
    f212:	f7fd fd7b 	bl	cd0c <__aeabi_dcmple>
    f216:	2800      	cmp	r0, #0
    f218:	f040 84f2 	bne.w	fc00 <_svfprintf_r+0xd74>
    f21c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f220:	2200      	movs	r2, #0
    f222:	2300      	movs	r3, #0
    f224:	f7fd fd68 	bl	ccf8 <__aeabi_dcmplt>
    f228:	2800      	cmp	r0, #0
    f22a:	f041 8038 	bne.w	1029e <_svfprintf_r+0x1412>
    f22e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f232:	4ca5      	ldr	r4, [pc, #660]	; (f4c8 <_svfprintf_r+0x63c>)
    f234:	4ba5      	ldr	r3, [pc, #660]	; (f4cc <_svfprintf_r+0x640>)
    f236:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    f23a:	9910      	ldr	r1, [sp, #64]	; 0x40
    f23c:	2947      	cmp	r1, #71	; 0x47
    f23e:	bfc8      	it	gt
    f240:	461c      	movgt	r4, r3
    f242:	2300      	movs	r3, #0
    f244:	2103      	movs	r1, #3
    f246:	930d      	str	r3, [sp, #52]	; 0x34
    f248:	9107      	str	r1, [sp, #28]
    f24a:	910a      	str	r1, [sp, #40]	; 0x28
    f24c:	9308      	str	r3, [sp, #32]
    f24e:	9312      	str	r3, [sp, #72]	; 0x48
    f250:	9316      	str	r3, [sp, #88]	; 0x58
    f252:	9311      	str	r3, [sp, #68]	; 0x44
    f254:	2a00      	cmp	r2, #0
    f256:	f43f af4c 	beq.w	f0f2 <_svfprintf_r+0x266>
    f25a:	9b07      	ldr	r3, [sp, #28]
    f25c:	3301      	adds	r3, #1
    f25e:	9307      	str	r3, [sp, #28]
    f260:	e747      	b.n	f0f2 <_svfprintf_r+0x266>
    f262:	2b43      	cmp	r3, #67	; 0x43
    f264:	9310      	str	r3, [sp, #64]	; 0x40
    f266:	d003      	beq.n	f270 <_svfprintf_r+0x3e4>
    f268:	f01b 0f10 	tst.w	fp, #16
    f26c:	f000 8551 	beq.w	fd12 <_svfprintf_r+0xe86>
    f270:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    f272:	2208      	movs	r2, #8
    f274:	2100      	movs	r1, #0
    f276:	a82a      	add	r0, sp, #168	; 0xa8
    f278:	ac3f      	add	r4, sp, #252	; 0xfc
    f27a:	f7fe ff2b 	bl	e0d4 <memset>
    f27e:	ab2a      	add	r3, sp, #168	; 0xa8
    f280:	f856 2b04 	ldr.w	r2, [r6], #4
    f284:	4621      	mov	r1, r4
    f286:	4650      	mov	r0, sl
    f288:	f002 fe22 	bl	11ed0 <_wcrtomb_r>
    f28c:	4603      	mov	r3, r0
    f28e:	3301      	adds	r3, #1
    f290:	900a      	str	r0, [sp, #40]	; 0x28
    f292:	f001 82c3 	beq.w	1081c <_svfprintf_r+0x1990>
    f296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f298:	960e      	str	r6, [sp, #56]	; 0x38
    f29a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f29e:	9307      	str	r3, [sp, #28]
    f2a0:	2200      	movs	r2, #0
    f2a2:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    f2a6:	920d      	str	r2, [sp, #52]	; 0x34
    f2a8:	9208      	str	r2, [sp, #32]
    f2aa:	9212      	str	r2, [sp, #72]	; 0x48
    f2ac:	9216      	str	r2, [sp, #88]	; 0x58
    f2ae:	9211      	str	r2, [sp, #68]	; 0x44
    f2b0:	e71f      	b.n	f0f2 <_svfprintf_r+0x266>
    f2b2:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    f2b4:	9310      	str	r3, [sp, #64]	; 0x40
    f2b6:	f857 4b04 	ldr.w	r4, [r7], #4
    f2ba:	2300      	movs	r3, #0
    f2bc:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    f2c0:	2c00      	cmp	r4, #0
    f2c2:	f000 854d 	beq.w	fd60 <_svfprintf_r+0xed4>
    f2c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f2c8:	2b53      	cmp	r3, #83	; 0x53
    f2ca:	f000 86d4 	beq.w	10076 <_svfprintf_r+0x11ea>
    f2ce:	f01b 0310 	ands.w	r3, fp, #16
    f2d2:	9311      	str	r3, [sp, #68]	; 0x44
    f2d4:	f040 86cf 	bne.w	10076 <_svfprintf_r+0x11ea>
    f2d8:	9b08      	ldr	r3, [sp, #32]
    f2da:	1c5d      	adds	r5, r3, #1
    f2dc:	f001 80cc 	beq.w	10478 <_svfprintf_r+0x15ec>
    f2e0:	9911      	ldr	r1, [sp, #68]	; 0x44
    f2e2:	461a      	mov	r2, r3
    f2e4:	4620      	mov	r0, r4
    f2e6:	f001 fcdb 	bl	10ca0 <memchr>
    f2ea:	900d      	str	r0, [sp, #52]	; 0x34
    f2ec:	2800      	cmp	r0, #0
    f2ee:	f001 8351 	beq.w	10994 <_svfprintf_r+0x1b08>
    f2f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f2f4:	9911      	ldr	r1, [sp, #68]	; 0x44
    f2f6:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f2fa:	970e      	str	r7, [sp, #56]	; 0x38
    f2fc:	1b1b      	subs	r3, r3, r4
    f2fe:	930a      	str	r3, [sp, #40]	; 0x28
    f300:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f304:	9307      	str	r3, [sp, #28]
    f306:	2373      	movs	r3, #115	; 0x73
    f308:	9108      	str	r1, [sp, #32]
    f30a:	9112      	str	r1, [sp, #72]	; 0x48
    f30c:	9116      	str	r1, [sp, #88]	; 0x58
    f30e:	910d      	str	r1, [sp, #52]	; 0x34
    f310:	9310      	str	r3, [sp, #64]	; 0x40
    f312:	e79f      	b.n	f254 <_svfprintf_r+0x3c8>
    f314:	f01b 0f20 	tst.w	fp, #32
    f318:	9310      	str	r3, [sp, #64]	; 0x40
    f31a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f31c:	d03c      	beq.n	f398 <_svfprintf_r+0x50c>
    f31e:	3307      	adds	r3, #7
    f320:	f023 0307 	bic.w	r3, r3, #7
    f324:	461a      	mov	r2, r3
    f326:	4611      	mov	r1, r2
    f328:	685b      	ldr	r3, [r3, #4]
    f32a:	f851 2b08 	ldr.w	r2, [r1], #8
    f32e:	910e      	str	r1, [sp, #56]	; 0x38
    f330:	4619      	mov	r1, r3
    f332:	2b00      	cmp	r3, #0
    f334:	f2c0 8401 	blt.w	fb3a <_svfprintf_r+0xcae>
    f338:	9b08      	ldr	r3, [sp, #32]
    f33a:	3301      	adds	r3, #1
    f33c:	f000 82a8 	beq.w	f890 <_svfprintf_r+0xa04>
    f340:	ea52 0301 	orrs.w	r3, r2, r1
    f344:	f02b 0580 	bic.w	r5, fp, #128	; 0x80
    f348:	f040 82a3 	bne.w	f892 <_svfprintf_r+0xa06>
    f34c:	9b08      	ldr	r3, [sp, #32]
    f34e:	2b00      	cmp	r3, #0
    f350:	f040 82a4 	bne.w	f89c <_svfprintf_r+0xa10>
    f354:	46ab      	mov	fp, r5
    f356:	2300      	movs	r3, #0
    f358:	9308      	str	r3, [sp, #32]
    f35a:	930a      	str	r3, [sp, #40]	; 0x28
    f35c:	ac58      	add	r4, sp, #352	; 0x160
    f35e:	e0ff      	b.n	f560 <_svfprintf_r+0x6d4>
    f360:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f362:	f853 2b04 	ldr.w	r2, [r3], #4
    f366:	920b      	str	r2, [sp, #44]	; 0x2c
    f368:	2a00      	cmp	r2, #0
    f36a:	f280 840c 	bge.w	fb86 <_svfprintf_r+0xcfa>
    f36e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f370:	930e      	str	r3, [sp, #56]	; 0x38
    f372:	4252      	negs	r2, r2
    f374:	920b      	str	r2, [sp, #44]	; 0x2c
    f376:	f898 3000 	ldrb.w	r3, [r8]
    f37a:	f04b 0b04 	orr.w	fp, fp, #4
    f37e:	e5de      	b.n	ef3e <_svfprintf_r+0xb2>
    f380:	f898 3000 	ldrb.w	r3, [r8]
    f384:	f04b 0b08 	orr.w	fp, fp, #8
    f388:	e5d9      	b.n	ef3e <_svfprintf_r+0xb2>
    f38a:	f04b 0b10 	orr.w	fp, fp, #16
    f38e:	f01b 0f20 	tst.w	fp, #32
    f392:	9310      	str	r3, [sp, #64]	; 0x40
    f394:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f396:	d1c2      	bne.n	f31e <_svfprintf_r+0x492>
    f398:	f01b 0f10 	tst.w	fp, #16
    f39c:	f040 83fe 	bne.w	fb9c <_svfprintf_r+0xd10>
    f3a0:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f3a4:	f000 83f6 	beq.w	fb94 <_svfprintf_r+0xd08>
    f3a8:	f933 2b04 	ldrsh.w	r2, [r3], #4
    f3ac:	930e      	str	r3, [sp, #56]	; 0x38
    f3ae:	17d1      	asrs	r1, r2, #31
    f3b0:	460b      	mov	r3, r1
    f3b2:	e7be      	b.n	f332 <_svfprintf_r+0x4a6>
    f3b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f3b6:	f853 2b04 	ldr.w	r2, [r3], #4
    f3ba:	930e      	str	r3, [sp, #56]	; 0x38
    f3bc:	f647 0330 	movw	r3, #30768	; 0x7830
    f3c0:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    f3c4:	2078      	movs	r0, #120	; 0x78
    f3c6:	4b42      	ldr	r3, [pc, #264]	; (f4d0 <_svfprintf_r+0x644>)
    f3c8:	9318      	str	r3, [sp, #96]	; 0x60
    f3ca:	f04b 0502 	orr.w	r5, fp, #2
    f3ce:	2100      	movs	r1, #0
    f3d0:	2302      	movs	r3, #2
    f3d2:	9010      	str	r0, [sp, #64]	; 0x40
    f3d4:	2000      	movs	r0, #0
    f3d6:	9c08      	ldr	r4, [sp, #32]
    f3d8:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    f3dc:	1c60      	adds	r0, r4, #1
    f3de:	f000 80a8 	beq.w	f532 <_svfprintf_r+0x6a6>
    f3e2:	ea52 0001 	orrs.w	r0, r2, r1
    f3e6:	f025 0b80 	bic.w	fp, r5, #128	; 0x80
    f3ea:	f040 80a1 	bne.w	f530 <_svfprintf_r+0x6a4>
    f3ee:	2c00      	cmp	r4, #0
    f3f0:	f040 8695 	bne.w	1011e <_svfprintf_r+0x1292>
    f3f4:	2b00      	cmp	r3, #0
    f3f6:	d1ae      	bne.n	f356 <_svfprintf_r+0x4ca>
    f3f8:	f015 0301 	ands.w	r3, r5, #1
    f3fc:	930a      	str	r3, [sp, #40]	; 0x28
    f3fe:	f000 83c7 	beq.w	fb90 <_svfprintf_r+0xd04>
    f402:	2330      	movs	r3, #48	; 0x30
    f404:	f88d 315f 	strb.w	r3, [sp, #351]	; 0x15f
    f408:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    f40c:	e0a8      	b.n	f560 <_svfprintf_r+0x6d4>
    f40e:	f01b 0f20 	tst.w	fp, #32
    f412:	f040 83e5 	bne.w	fbe0 <_svfprintf_r+0xd54>
    f416:	f01b 0f10 	tst.w	fp, #16
    f41a:	f040 8686 	bne.w	1012a <_svfprintf_r+0x129e>
    f41e:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f422:	f040 877f 	bne.w	10324 <_svfprintf_r+0x1498>
    f426:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f42a:	f000 867e 	beq.w	1012a <_svfprintf_r+0x129e>
    f42e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f430:	9909      	ldr	r1, [sp, #36]	; 0x24
    f432:	f853 2b04 	ldr.w	r2, [r3], #4
    f436:	930e      	str	r3, [sp, #56]	; 0x38
    f438:	7011      	strb	r1, [r2, #0]
    f43a:	4644      	mov	r4, r8
    f43c:	e554      	b.n	eee8 <_svfprintf_r+0x5c>
    f43e:	f898 3000 	ldrb.w	r3, [r8]
    f442:	2b68      	cmp	r3, #104	; 0x68
    f444:	bf03      	ittte	eq
    f446:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    f44a:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
    f44e:	f108 0801 	addeq.w	r8, r8, #1
    f452:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
    f456:	e572      	b.n	ef3e <_svfprintf_r+0xb2>
    f458:	f898 3000 	ldrb.w	r3, [r8]
    f45c:	f88d 5087 	strb.w	r5, [sp, #135]	; 0x87
    f460:	e56d      	b.n	ef3e <_svfprintf_r+0xb2>
    f462:	f898 3000 	ldrb.w	r3, [r8]
    f466:	2b6c      	cmp	r3, #108	; 0x6c
    f468:	bf03      	ittte	eq
    f46a:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    f46e:	f04b 0b20 	orreq.w	fp, fp, #32
    f472:	f108 0801 	addeq.w	r8, r8, #1
    f476:	f04b 0b10 	orrne.w	fp, fp, #16
    f47a:	e560      	b.n	ef3e <_svfprintf_r+0xb2>
    f47c:	9310      	str	r3, [sp, #64]	; 0x40
    f47e:	f04b 0b10 	orr.w	fp, fp, #16
    f482:	f01b 0120 	ands.w	r1, fp, #32
    f486:	f000 834a 	beq.w	fb1e <_svfprintf_r+0xc92>
    f48a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f48c:	3307      	adds	r3, #7
    f48e:	f023 0307 	bic.w	r3, r3, #7
    f492:	6859      	ldr	r1, [r3, #4]
    f494:	f853 2b08 	ldr.w	r2, [r3], #8
    f498:	930e      	str	r3, [sp, #56]	; 0x38
    f49a:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    f49e:	2300      	movs	r3, #0
    f4a0:	e798      	b.n	f3d4 <_svfprintf_r+0x548>
    f4a2:	9310      	str	r3, [sp, #64]	; 0x40
    f4a4:	f04b 0510 	orr.w	r5, fp, #16
    f4a8:	f015 0120 	ands.w	r1, r5, #32
    f4ac:	f000 8328 	beq.w	fb00 <_svfprintf_r+0xc74>
    f4b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f4b2:	3307      	adds	r3, #7
    f4b4:	f023 0307 	bic.w	r3, r3, #7
    f4b8:	6859      	ldr	r1, [r3, #4]
    f4ba:	f853 2b08 	ldr.w	r2, [r3], #8
    f4be:	930e      	str	r3, [sp, #56]	; 0x38
    f4c0:	2301      	movs	r3, #1
    f4c2:	e787      	b.n	f3d4 <_svfprintf_r+0x548>
    f4c4:	7fefffff 	.word	0x7fefffff
    f4c8:	000159cc 	.word	0x000159cc
    f4cc:	00015544 	.word	0x00015544
    f4d0:	000159d4 	.word	0x000159d4
    f4d4:	f898 3000 	ldrb.w	r3, [r8]
    f4d8:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    f4dc:	e52f      	b.n	ef3e <_svfprintf_r+0xb2>
    f4de:	4641      	mov	r1, r8
    f4e0:	f811 3b01 	ldrb.w	r3, [r1], #1
    f4e4:	2b2a      	cmp	r3, #42	; 0x2a
    f4e6:	f001 827f 	beq.w	109e8 <_svfprintf_r+0x1b5c>
    f4ea:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f4ee:	2a09      	cmp	r2, #9
    f4f0:	4688      	mov	r8, r1
    f4f2:	bf98      	it	ls
    f4f4:	2100      	movls	r1, #0
    f4f6:	f201 8176 	bhi.w	107e6 <_svfprintf_r+0x195a>
    f4fa:	f818 3b01 	ldrb.w	r3, [r8], #1
    f4fe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f502:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    f506:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f50a:	2a09      	cmp	r2, #9
    f50c:	d9f5      	bls.n	f4fa <_svfprintf_r+0x66e>
    f50e:	9108      	str	r1, [sp, #32]
    f510:	e517      	b.n	ef42 <_svfprintf_r+0xb6>
    f512:	f898 3000 	ldrb.w	r3, [r8]
    f516:	f04b 0b01 	orr.w	fp, fp, #1
    f51a:	e510      	b.n	ef3e <_svfprintf_r+0xb2>
    f51c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    f520:	2b00      	cmp	r3, #0
    f522:	f47f ad91 	bne.w	f048 <_svfprintf_r+0x1bc>
    f526:	f898 3000 	ldrb.w	r3, [r8]
    f52a:	f88d 6087 	strb.w	r6, [sp, #135]	; 0x87
    f52e:	e506      	b.n	ef3e <_svfprintf_r+0xb2>
    f530:	465d      	mov	r5, fp
    f532:	2b01      	cmp	r3, #1
    f534:	f000 81ad 	beq.w	f892 <_svfprintf_r+0xa06>
    f538:	2b02      	cmp	r3, #2
    f53a:	ac58      	add	r4, sp, #352	; 0x160
    f53c:	d11f      	bne.n	f57e <_svfprintf_r+0x6f2>
    f53e:	9818      	ldr	r0, [sp, #96]	; 0x60
    f540:	f002 030f 	and.w	r3, r2, #15
    f544:	0912      	lsrs	r2, r2, #4
    f546:	5cc3      	ldrb	r3, [r0, r3]
    f548:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f54c:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    f550:	0909      	lsrs	r1, r1, #4
    f552:	ea52 0301 	orrs.w	r3, r2, r1
    f556:	d1f3      	bne.n	f540 <_svfprintf_r+0x6b4>
    f558:	ab58      	add	r3, sp, #352	; 0x160
    f55a:	1b1b      	subs	r3, r3, r4
    f55c:	46ab      	mov	fp, r5
    f55e:	930a      	str	r3, [sp, #40]	; 0x28
    f560:	990a      	ldr	r1, [sp, #40]	; 0x28
    f562:	9808      	ldr	r0, [sp, #32]
    f564:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f568:	4281      	cmp	r1, r0
    f56a:	f04f 0300 	mov.w	r3, #0
    f56e:	bfb8      	it	lt
    f570:	4601      	movlt	r1, r0
    f572:	930d      	str	r3, [sp, #52]	; 0x34
    f574:	9107      	str	r1, [sp, #28]
    f576:	9312      	str	r3, [sp, #72]	; 0x48
    f578:	9316      	str	r3, [sp, #88]	; 0x58
    f57a:	9311      	str	r3, [sp, #68]	; 0x44
    f57c:	e66a      	b.n	f254 <_svfprintf_r+0x3c8>
    f57e:	f002 0307 	and.w	r3, r2, #7
    f582:	08d2      	lsrs	r2, r2, #3
    f584:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    f588:	08c9      	lsrs	r1, r1, #3
    f58a:	3330      	adds	r3, #48	; 0x30
    f58c:	ea52 0601 	orrs.w	r6, r2, r1
    f590:	4620      	mov	r0, r4
    f592:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f596:	d1f2      	bne.n	f57e <_svfprintf_r+0x6f2>
    f598:	07e9      	lsls	r1, r5, #31
    f59a:	d5dd      	bpl.n	f558 <_svfprintf_r+0x6cc>
    f59c:	2b30      	cmp	r3, #48	; 0x30
    f59e:	d0db      	beq.n	f558 <_svfprintf_r+0x6cc>
    f5a0:	2330      	movs	r3, #48	; 0x30
    f5a2:	3802      	subs	r0, #2
    f5a4:	f804 3c01 	strb.w	r3, [r4, #-1]
    f5a8:	ab58      	add	r3, sp, #352	; 0x160
    f5aa:	1a1b      	subs	r3, r3, r0
    f5ac:	46ab      	mov	fp, r5
    f5ae:	930a      	str	r3, [sp, #40]	; 0x28
    f5b0:	4604      	mov	r4, r0
    f5b2:	e7d5      	b.n	f560 <_svfprintf_r+0x6d4>
    f5b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f5b6:	2b65      	cmp	r3, #101	; 0x65
    f5b8:	f340 80dc 	ble.w	f774 <_svfprintf_r+0x8e8>
    f5bc:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f5c0:	2200      	movs	r2, #0
    f5c2:	2300      	movs	r3, #0
    f5c4:	f7fd fb8e 	bl	cce4 <__aeabi_dcmpeq>
    f5c8:	2800      	cmp	r0, #0
    f5ca:	f000 81c8 	beq.w	f95e <_svfprintf_r+0xad2>
    f5ce:	2301      	movs	r3, #1
    f5d0:	f8c9 3004 	str.w	r3, [r9, #4]
    f5d4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f5d6:	4abd      	ldr	r2, [pc, #756]	; (f8cc <_svfprintf_r+0xa40>)
    f5d8:	f8c9 2000 	str.w	r2, [r9]
    f5dc:	3301      	adds	r3, #1
    f5de:	3601      	adds	r6, #1
    f5e0:	2b07      	cmp	r3, #7
    f5e2:	962e      	str	r6, [sp, #184]	; 0xb8
    f5e4:	932d      	str	r3, [sp, #180]	; 0xb4
    f5e6:	f300 8539 	bgt.w	1005c <_svfprintf_r+0x11d0>
    f5ea:	f109 0908 	add.w	r9, r9, #8
    f5ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f5f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f5f2:	4293      	cmp	r3, r2
    f5f4:	f280 82c2 	bge.w	fb7c <_svfprintf_r+0xcf0>
    f5f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f5fa:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f5fc:	441e      	add	r6, r3
    f5fe:	e9c9 2300 	strd	r2, r3, [r9]
    f602:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f604:	962e      	str	r6, [sp, #184]	; 0xb8
    f606:	3301      	adds	r3, #1
    f608:	2b07      	cmp	r3, #7
    f60a:	932d      	str	r3, [sp, #180]	; 0xb4
    f60c:	f300 838d 	bgt.w	fd2a <_svfprintf_r+0xe9e>
    f610:	f109 0908 	add.w	r9, r9, #8
    f614:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f616:	1e5c      	subs	r4, r3, #1
    f618:	2c00      	cmp	r4, #0
    f61a:	f77f adbc 	ble.w	f196 <_svfprintf_r+0x30a>
    f61e:	2c10      	cmp	r4, #16
    f620:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f622:	4dab      	ldr	r5, [pc, #684]	; (f8d0 <_svfprintf_r+0xa44>)
    f624:	f340 8555 	ble.w	100d2 <_svfprintf_r+0x1246>
    f628:	4632      	mov	r2, r6
    f62a:	2710      	movs	r7, #16
    f62c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f62e:	e005      	b.n	f63c <_svfprintf_r+0x7b0>
    f630:	f109 0908 	add.w	r9, r9, #8
    f634:	3c10      	subs	r4, #16
    f636:	2c10      	cmp	r4, #16
    f638:	f340 854a 	ble.w	100d0 <_svfprintf_r+0x1244>
    f63c:	3301      	adds	r3, #1
    f63e:	3210      	adds	r2, #16
    f640:	2b07      	cmp	r3, #7
    f642:	e9c9 5700 	strd	r5, r7, [r9]
    f646:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f64a:	ddf1      	ble.n	f630 <_svfprintf_r+0x7a4>
    f64c:	aa2c      	add	r2, sp, #176	; 0xb0
    f64e:	4631      	mov	r1, r6
    f650:	4650      	mov	r0, sl
    f652:	f002 fc85 	bl	11f60 <__ssprint_r>
    f656:	2800      	cmp	r0, #0
    f658:	f040 8083 	bne.w	f762 <_svfprintf_r+0x8d6>
    f65c:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f660:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f664:	e7e6      	b.n	f634 <_svfprintf_r+0x7a8>
    f666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f668:	9a07      	ldr	r2, [sp, #28]
    f66a:	1a9f      	subs	r7, r3, r2
    f66c:	2f00      	cmp	r7, #0
    f66e:	f77f ad79 	ble.w	f164 <_svfprintf_r+0x2d8>
    f672:	2f10      	cmp	r7, #16
    f674:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f676:	4d96      	ldr	r5, [pc, #600]	; (f8d0 <_svfprintf_r+0xa44>)
    f678:	dd23      	ble.n	f6c2 <_svfprintf_r+0x836>
    f67a:	4632      	mov	r2, r6
    f67c:	4626      	mov	r6, r4
    f67e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f680:	e004      	b.n	f68c <_svfprintf_r+0x800>
    f682:	3f10      	subs	r7, #16
    f684:	2f10      	cmp	r7, #16
    f686:	f109 0908 	add.w	r9, r9, #8
    f68a:	dd18      	ble.n	f6be <_svfprintf_r+0x832>
    f68c:	3301      	adds	r3, #1
    f68e:	3210      	adds	r2, #16
    f690:	2110      	movs	r1, #16
    f692:	2b07      	cmp	r3, #7
    f694:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f698:	f8c9 5000 	str.w	r5, [r9]
    f69c:	f8c9 1004 	str.w	r1, [r9, #4]
    f6a0:	ddef      	ble.n	f682 <_svfprintf_r+0x7f6>
    f6a2:	aa2c      	add	r2, sp, #176	; 0xb0
    f6a4:	4621      	mov	r1, r4
    f6a6:	4650      	mov	r0, sl
    f6a8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f6ac:	f002 fc58 	bl	11f60 <__ssprint_r>
    f6b0:	2800      	cmp	r0, #0
    f6b2:	d156      	bne.n	f762 <_svfprintf_r+0x8d6>
    f6b4:	3f10      	subs	r7, #16
    f6b6:	2f10      	cmp	r7, #16
    f6b8:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f6bc:	dce6      	bgt.n	f68c <_svfprintf_r+0x800>
    f6be:	4634      	mov	r4, r6
    f6c0:	4616      	mov	r6, r2
    f6c2:	3301      	adds	r3, #1
    f6c4:	443e      	add	r6, r7
    f6c6:	2b07      	cmp	r3, #7
    f6c8:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f6cc:	f8c9 5000 	str.w	r5, [r9]
    f6d0:	f8c9 7004 	str.w	r7, [r9, #4]
    f6d4:	f300 8516 	bgt.w	10104 <_svfprintf_r+0x1278>
    f6d8:	9b08      	ldr	r3, [sp, #32]
    f6da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f6dc:	1a9f      	subs	r7, r3, r2
    f6de:	2f00      	cmp	r7, #0
    f6e0:	f109 0908 	add.w	r9, r9, #8
    f6e4:	f77f ad44 	ble.w	f170 <_svfprintf_r+0x2e4>
    f6e8:	2f10      	cmp	r7, #16
    f6ea:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f6ec:	4d78      	ldr	r5, [pc, #480]	; (f8d0 <_svfprintf_r+0xa44>)
    f6ee:	dd22      	ble.n	f736 <_svfprintf_r+0x8aa>
    f6f0:	4632      	mov	r2, r6
    f6f2:	4626      	mov	r6, r4
    f6f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f6f6:	e004      	b.n	f702 <_svfprintf_r+0x876>
    f6f8:	3f10      	subs	r7, #16
    f6fa:	2f10      	cmp	r7, #16
    f6fc:	f109 0908 	add.w	r9, r9, #8
    f700:	dd17      	ble.n	f732 <_svfprintf_r+0x8a6>
    f702:	3301      	adds	r3, #1
    f704:	3210      	adds	r2, #16
    f706:	2110      	movs	r1, #16
    f708:	2b07      	cmp	r3, #7
    f70a:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f70e:	f8c9 5000 	str.w	r5, [r9]
    f712:	f8c9 1004 	str.w	r1, [r9, #4]
    f716:	ddef      	ble.n	f6f8 <_svfprintf_r+0x86c>
    f718:	aa2c      	add	r2, sp, #176	; 0xb0
    f71a:	4621      	mov	r1, r4
    f71c:	4650      	mov	r0, sl
    f71e:	f002 fc1f 	bl	11f60 <__ssprint_r>
    f722:	b9f0      	cbnz	r0, f762 <_svfprintf_r+0x8d6>
    f724:	3f10      	subs	r7, #16
    f726:	2f10      	cmp	r7, #16
    f728:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f72c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f730:	dce7      	bgt.n	f702 <_svfprintf_r+0x876>
    f732:	4634      	mov	r4, r6
    f734:	4616      	mov	r6, r2
    f736:	3301      	adds	r3, #1
    f738:	443e      	add	r6, r7
    f73a:	2b07      	cmp	r3, #7
    f73c:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f740:	f8c9 5000 	str.w	r5, [r9]
    f744:	f8c9 7004 	str.w	r7, [r9, #4]
    f748:	f300 81cd 	bgt.w	fae6 <_svfprintf_r+0xc5a>
    f74c:	f109 0908 	add.w	r9, r9, #8
    f750:	e50e      	b.n	f170 <_svfprintf_r+0x2e4>
    f752:	990c      	ldr	r1, [sp, #48]	; 0x30
    f754:	aa2c      	add	r2, sp, #176	; 0xb0
    f756:	4650      	mov	r0, sl
    f758:	f002 fc02 	bl	11f60 <__ssprint_r>
    f75c:	2800      	cmp	r0, #0
    f75e:	f43f ad2e 	beq.w	f1be <_svfprintf_r+0x332>
    f762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f764:	2b00      	cmp	r3, #0
    f766:	f43f ac99 	beq.w	f09c <_svfprintf_r+0x210>
    f76a:	990d      	ldr	r1, [sp, #52]	; 0x34
    f76c:	4650      	mov	r0, sl
    f76e:	f7fe feb5 	bl	e4dc <_free_r>
    f772:	e493      	b.n	f09c <_svfprintf_r+0x210>
    f774:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f776:	2b01      	cmp	r3, #1
    f778:	f340 816e 	ble.w	fa58 <_svfprintf_r+0xbcc>
    f77c:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    f77e:	f8c9 4000 	str.w	r4, [r9]
    f782:	2301      	movs	r3, #1
    f784:	441f      	add	r7, r3
    f786:	3601      	adds	r6, #1
    f788:	2f07      	cmp	r7, #7
    f78a:	f8c9 3004 	str.w	r3, [r9, #4]
    f78e:	962e      	str	r6, [sp, #184]	; 0xb8
    f790:	972d      	str	r7, [sp, #180]	; 0xb4
    f792:	f300 81d9 	bgt.w	fb48 <_svfprintf_r+0xcbc>
    f796:	f109 0908 	add.w	r9, r9, #8
    f79a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f79c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f79e:	3701      	adds	r7, #1
    f7a0:	441e      	add	r6, r3
    f7a2:	2f07      	cmp	r7, #7
    f7a4:	e9c9 2300 	strd	r2, r3, [r9]
    f7a8:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    f7ac:	f300 81d9 	bgt.w	fb62 <_svfprintf_r+0xcd6>
    f7b0:	f109 0908 	add.w	r9, r9, #8
    f7b4:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f7b8:	2200      	movs	r2, #0
    f7ba:	2300      	movs	r3, #0
    f7bc:	f7fd fa92 	bl	cce4 <__aeabi_dcmpeq>
    f7c0:	2800      	cmp	r0, #0
    f7c2:	f040 8167 	bne.w	fa94 <_svfprintf_r+0xc08>
    f7c6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f7c8:	3701      	adds	r7, #1
    f7ca:	3b01      	subs	r3, #1
    f7cc:	3401      	adds	r4, #1
    f7ce:	441e      	add	r6, r3
    f7d0:	2f07      	cmp	r7, #7
    f7d2:	f8c9 4000 	str.w	r4, [r9]
    f7d6:	972d      	str	r7, [sp, #180]	; 0xb4
    f7d8:	f8c9 3004 	str.w	r3, [r9, #4]
    f7dc:	962e      	str	r6, [sp, #184]	; 0xb8
    f7de:	f300 814c 	bgt.w	fa7a <_svfprintf_r+0xbee>
    f7e2:	f109 0908 	add.w	r9, r9, #8
    f7e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f7e8:	f8c9 3004 	str.w	r3, [r9, #4]
    f7ec:	3701      	adds	r7, #1
    f7ee:	441e      	add	r6, r3
    f7f0:	2f07      	cmp	r7, #7
    f7f2:	ab26      	add	r3, sp, #152	; 0x98
    f7f4:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    f7f8:	f8c9 3000 	str.w	r3, [r9]
    f7fc:	f77f acc9 	ble.w	f192 <_svfprintf_r+0x306>
    f800:	990c      	ldr	r1, [sp, #48]	; 0x30
    f802:	aa2c      	add	r2, sp, #176	; 0xb0
    f804:	4650      	mov	r0, sl
    f806:	f002 fbab 	bl	11f60 <__ssprint_r>
    f80a:	2800      	cmp	r0, #0
    f80c:	d1a9      	bne.n	f762 <_svfprintf_r+0x8d6>
    f80e:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f810:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f814:	e4bf      	b.n	f196 <_svfprintf_r+0x30a>
    f816:	2f10      	cmp	r7, #16
    f818:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    f81c:	4d2d      	ldr	r5, [pc, #180]	; (f8d4 <_svfprintf_r+0xa48>)
    f81e:	dd27      	ble.n	f870 <_svfprintf_r+0x9e4>
    f820:	e9cd 381e 	strd	r3, r8, [sp, #120]	; 0x78
    f824:	2610      	movs	r6, #16
    f826:	46d0      	mov	r8, sl
    f828:	46a2      	mov	sl, r4
    f82a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f82c:	e004      	b.n	f838 <_svfprintf_r+0x9ac>
    f82e:	3f10      	subs	r7, #16
    f830:	2f10      	cmp	r7, #16
    f832:	f109 0908 	add.w	r9, r9, #8
    f836:	dd16      	ble.n	f866 <_svfprintf_r+0x9da>
    f838:	3201      	adds	r2, #1
    f83a:	3110      	adds	r1, #16
    f83c:	2a07      	cmp	r2, #7
    f83e:	e9c9 5600 	strd	r5, r6, [r9]
    f842:	e9cd 212d 	strd	r2, r1, [sp, #180]	; 0xb4
    f846:	ddf2      	ble.n	f82e <_svfprintf_r+0x9a2>
    f848:	aa2c      	add	r2, sp, #176	; 0xb0
    f84a:	4621      	mov	r1, r4
    f84c:	4640      	mov	r0, r8
    f84e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f852:	f002 fb85 	bl	11f60 <__ssprint_r>
    f856:	2800      	cmp	r0, #0
    f858:	f040 83f2 	bne.w	10040 <_svfprintf_r+0x11b4>
    f85c:	3f10      	subs	r7, #16
    f85e:	2f10      	cmp	r7, #16
    f860:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    f864:	dce8      	bgt.n	f838 <_svfprintf_r+0x9ac>
    f866:	4654      	mov	r4, sl
    f868:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f86a:	46c2      	mov	sl, r8
    f86c:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
    f870:	f8c9 5000 	str.w	r5, [r9]
    f874:	3201      	adds	r2, #1
    f876:	187e      	adds	r6, r7, r1
    f878:	2a07      	cmp	r2, #7
    f87a:	e9cd 262d 	strd	r2, r6, [sp, #180]	; 0xb4
    f87e:	f8c9 7004 	str.w	r7, [r9, #4]
    f882:	f300 83cc 	bgt.w	1001e <_svfprintf_r+0x1192>
    f886:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f88a:	f109 0908 	add.w	r9, r9, #8
    f88e:	e441      	b.n	f114 <_svfprintf_r+0x288>
    f890:	465d      	mov	r5, fp
    f892:	2a0a      	cmp	r2, #10
    f894:	f171 0300 	sbcs.w	r3, r1, #0
    f898:	f080 8329 	bcs.w	feee <_svfprintf_r+0x1062>
    f89c:	3230      	adds	r2, #48	; 0x30
    f89e:	2301      	movs	r3, #1
    f8a0:	f88d 215f 	strb.w	r2, [sp, #351]	; 0x15f
    f8a4:	46ab      	mov	fp, r5
    f8a6:	930a      	str	r3, [sp, #40]	; 0x28
    f8a8:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    f8ac:	e658      	b.n	f560 <_svfprintf_r+0x6d4>
    f8ae:	990c      	ldr	r1, [sp, #48]	; 0x30
    f8b0:	931e      	str	r3, [sp, #120]	; 0x78
    f8b2:	aa2c      	add	r2, sp, #176	; 0xb0
    f8b4:	4650      	mov	r0, sl
    f8b6:	f002 fb53 	bl	11f60 <__ssprint_r>
    f8ba:	2800      	cmp	r0, #0
    f8bc:	f47f af51 	bne.w	f762 <_svfprintf_r+0x8d6>
    f8c0:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f8c2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f8c4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f8c8:	e436      	b.n	f138 <_svfprintf_r+0x2ac>
    f8ca:	bf00      	nop
    f8cc:	00014374 	.word	0x00014374
    f8d0:	00015a14 	.word	0x00015a14
    f8d4:	00015a04 	.word	0x00015a04
    f8d8:	990c      	ldr	r1, [sp, #48]	; 0x30
    f8da:	aa2c      	add	r2, sp, #176	; 0xb0
    f8dc:	4650      	mov	r0, sl
    f8de:	f002 fb3f 	bl	11f60 <__ssprint_r>
    f8e2:	2800      	cmp	r0, #0
    f8e4:	f47f af3d 	bne.w	f762 <_svfprintf_r+0x8d6>
    f8e8:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f8ea:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f8ee:	e435      	b.n	f15c <_svfprintf_r+0x2d0>
    f8f0:	2c10      	cmp	r4, #16
    f8f2:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f8f4:	4db8      	ldr	r5, [pc, #736]	; (fbd8 <_svfprintf_r+0xd4c>)
    f8f6:	dd1f      	ble.n	f938 <_svfprintf_r+0xaac>
    f8f8:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    f8fc:	2710      	movs	r7, #16
    f8fe:	e004      	b.n	f90a <_svfprintf_r+0xa7e>
    f900:	3c10      	subs	r4, #16
    f902:	2c10      	cmp	r4, #16
    f904:	f109 0908 	add.w	r9, r9, #8
    f908:	dd16      	ble.n	f938 <_svfprintf_r+0xaac>
    f90a:	3301      	adds	r3, #1
    f90c:	3610      	adds	r6, #16
    f90e:	2b07      	cmp	r3, #7
    f910:	e9c9 5700 	strd	r5, r7, [r9]
    f914:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f918:	ddf2      	ble.n	f900 <_svfprintf_r+0xa74>
    f91a:	aa2c      	add	r2, sp, #176	; 0xb0
    f91c:	4659      	mov	r1, fp
    f91e:	4650      	mov	r0, sl
    f920:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f924:	f002 fb1c 	bl	11f60 <__ssprint_r>
    f928:	2800      	cmp	r0, #0
    f92a:	f47f af1a 	bne.w	f762 <_svfprintf_r+0x8d6>
    f92e:	3c10      	subs	r4, #16
    f930:	2c10      	cmp	r4, #16
    f932:	e9dd 362d 	ldrd	r3, r6, [sp, #180]	; 0xb4
    f936:	dce8      	bgt.n	f90a <_svfprintf_r+0xa7e>
    f938:	3301      	adds	r3, #1
    f93a:	4426      	add	r6, r4
    f93c:	2b07      	cmp	r3, #7
    f93e:	e9c9 5400 	strd	r5, r4, [r9]
    f942:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f946:	f77f ac2f 	ble.w	f1a8 <_svfprintf_r+0x31c>
    f94a:	990c      	ldr	r1, [sp, #48]	; 0x30
    f94c:	aa2c      	add	r2, sp, #176	; 0xb0
    f94e:	4650      	mov	r0, sl
    f950:	f002 fb06 	bl	11f60 <__ssprint_r>
    f954:	2800      	cmp	r0, #0
    f956:	f47f af04 	bne.w	f762 <_svfprintf_r+0x8d6>
    f95a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f95c:	e424      	b.n	f1a8 <_svfprintf_r+0x31c>
    f95e:	9923      	ldr	r1, [sp, #140]	; 0x8c
    f960:	2900      	cmp	r1, #0
    f962:	f340 8327 	ble.w	ffb4 <_svfprintf_r+0x1128>
    f966:	9d11      	ldr	r5, [sp, #68]	; 0x44
    f968:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f96a:	429d      	cmp	r5, r3
    f96c:	bfa8      	it	ge
    f96e:	461d      	movge	r5, r3
    f970:	2d00      	cmp	r5, #0
    f972:	dd0b      	ble.n	f98c <_svfprintf_r+0xb00>
    f974:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f976:	3301      	adds	r3, #1
    f978:	442e      	add	r6, r5
    f97a:	2b07      	cmp	r3, #7
    f97c:	e9c9 4500 	strd	r4, r5, [r9]
    f980:	962e      	str	r6, [sp, #184]	; 0xb8
    f982:	932d      	str	r3, [sp, #180]	; 0xb4
    f984:	f300 86dd 	bgt.w	10742 <_svfprintf_r+0x18b6>
    f988:	f109 0908 	add.w	r9, r9, #8
    f98c:	9f11      	ldr	r7, [sp, #68]	; 0x44
    f98e:	2d00      	cmp	r5, #0
    f990:	bfa8      	it	ge
    f992:	1b7f      	subge	r7, r7, r5
    f994:	2f00      	cmp	r7, #0
    f996:	f300 81f4 	bgt.w	fd82 <_svfprintf_r+0xef6>
    f99a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f99c:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    f9a0:	4423      	add	r3, r4
    f9a2:	930a      	str	r3, [sp, #40]	; 0x28
    f9a4:	f040 8214 	bne.w	fdd0 <_svfprintf_r+0xf44>
    f9a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f9aa:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f9ac:	4293      	cmp	r3, r2
    f9ae:	db03      	blt.n	f9b8 <_svfprintf_r+0xb2c>
    f9b0:	f01b 0f01 	tst.w	fp, #1
    f9b4:	f000 84a5 	beq.w	10302 <_svfprintf_r+0x1476>
    f9b8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f9ba:	9919      	ldr	r1, [sp, #100]	; 0x64
    f9bc:	4416      	add	r6, r2
    f9be:	e9c9 1200 	strd	r1, r2, [r9]
    f9c2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f9c4:	962e      	str	r6, [sp, #184]	; 0xb8
    f9c6:	3201      	adds	r2, #1
    f9c8:	2a07      	cmp	r2, #7
    f9ca:	922d      	str	r2, [sp, #180]	; 0xb4
    f9cc:	f300 86c6 	bgt.w	1075c <_svfprintf_r+0x18d0>
    f9d0:	f109 0908 	add.w	r9, r9, #8
    f9d4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f9d6:	18a5      	adds	r5, r4, r2
    f9d8:	1ad4      	subs	r4, r2, r3
    f9da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f9dc:	1aed      	subs	r5, r5, r3
    f9de:	42a5      	cmp	r5, r4
    f9e0:	bfa8      	it	ge
    f9e2:	4625      	movge	r5, r4
    f9e4:	2d00      	cmp	r5, #0
    f9e6:	dd0d      	ble.n	fa04 <_svfprintf_r+0xb78>
    f9e8:	f8c9 3000 	str.w	r3, [r9]
    f9ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f9ee:	f8c9 5004 	str.w	r5, [r9, #4]
    f9f2:	3301      	adds	r3, #1
    f9f4:	442e      	add	r6, r5
    f9f6:	2b07      	cmp	r3, #7
    f9f8:	962e      	str	r6, [sp, #184]	; 0xb8
    f9fa:	932d      	str	r3, [sp, #180]	; 0xb4
    f9fc:	f300 86be 	bgt.w	1077c <_svfprintf_r+0x18f0>
    fa00:	f109 0908 	add.w	r9, r9, #8
    fa04:	2d00      	cmp	r5, #0
    fa06:	bfa8      	it	ge
    fa08:	1b64      	subge	r4, r4, r5
    fa0a:	2c00      	cmp	r4, #0
    fa0c:	f77f abc3 	ble.w	f196 <_svfprintf_r+0x30a>
    fa10:	2c10      	cmp	r4, #16
    fa12:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fa14:	4d71      	ldr	r5, [pc, #452]	; (fbdc <_svfprintf_r+0xd50>)
    fa16:	f340 835c 	ble.w	100d2 <_svfprintf_r+0x1246>
    fa1a:	4632      	mov	r2, r6
    fa1c:	2710      	movs	r7, #16
    fa1e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    fa20:	e005      	b.n	fa2e <_svfprintf_r+0xba2>
    fa22:	f109 0908 	add.w	r9, r9, #8
    fa26:	3c10      	subs	r4, #16
    fa28:	2c10      	cmp	r4, #16
    fa2a:	f340 8351 	ble.w	100d0 <_svfprintf_r+0x1244>
    fa2e:	3301      	adds	r3, #1
    fa30:	3210      	adds	r2, #16
    fa32:	2b07      	cmp	r3, #7
    fa34:	e9c9 5700 	strd	r5, r7, [r9]
    fa38:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    fa3c:	ddf1      	ble.n	fa22 <_svfprintf_r+0xb96>
    fa3e:	aa2c      	add	r2, sp, #176	; 0xb0
    fa40:	4631      	mov	r1, r6
    fa42:	4650      	mov	r0, sl
    fa44:	f002 fa8c 	bl	11f60 <__ssprint_r>
    fa48:	2800      	cmp	r0, #0
    fa4a:	f47f ae8a 	bne.w	f762 <_svfprintf_r+0x8d6>
    fa4e:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    fa52:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fa56:	e7e6      	b.n	fa26 <_svfprintf_r+0xb9a>
    fa58:	f01b 0f01 	tst.w	fp, #1
    fa5c:	f47f ae8e 	bne.w	f77c <_svfprintf_r+0x8f0>
    fa60:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    fa62:	f8c9 4000 	str.w	r4, [r9]
    fa66:	2301      	movs	r3, #1
    fa68:	441f      	add	r7, r3
    fa6a:	3601      	adds	r6, #1
    fa6c:	2f07      	cmp	r7, #7
    fa6e:	f8c9 3004 	str.w	r3, [r9, #4]
    fa72:	962e      	str	r6, [sp, #184]	; 0xb8
    fa74:	972d      	str	r7, [sp, #180]	; 0xb4
    fa76:	f77f aeb4 	ble.w	f7e2 <_svfprintf_r+0x956>
    fa7a:	990c      	ldr	r1, [sp, #48]	; 0x30
    fa7c:	aa2c      	add	r2, sp, #176	; 0xb0
    fa7e:	4650      	mov	r0, sl
    fa80:	f002 fa6e 	bl	11f60 <__ssprint_r>
    fa84:	2800      	cmp	r0, #0
    fa86:	f47f ae6c 	bne.w	f762 <_svfprintf_r+0x8d6>
    fa8a:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    fa8e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fa92:	e6a8      	b.n	f7e6 <_svfprintf_r+0x95a>
    fa94:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fa96:	1e5c      	subs	r4, r3, #1
    fa98:	2c00      	cmp	r4, #0
    fa9a:	f77f aea4 	ble.w	f7e6 <_svfprintf_r+0x95a>
    fa9e:	2c10      	cmp	r4, #16
    faa0:	4d4e      	ldr	r5, [pc, #312]	; (fbdc <_svfprintf_r+0xd50>)
    faa2:	f340 834c 	ble.w	1013e <_svfprintf_r+0x12b2>
    faa6:	4632      	mov	r2, r6
    faa8:	2310      	movs	r3, #16
    faaa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    faac:	e005      	b.n	faba <_svfprintf_r+0xc2e>
    faae:	f109 0908 	add.w	r9, r9, #8
    fab2:	3c10      	subs	r4, #16
    fab4:	2c10      	cmp	r4, #16
    fab6:	f340 8341 	ble.w	1013c <_svfprintf_r+0x12b0>
    faba:	3701      	adds	r7, #1
    fabc:	3210      	adds	r2, #16
    fabe:	2f07      	cmp	r7, #7
    fac0:	e9c9 5300 	strd	r5, r3, [r9]
    fac4:	e9cd 722d 	strd	r7, r2, [sp, #180]	; 0xb4
    fac8:	ddf1      	ble.n	faae <_svfprintf_r+0xc22>
    faca:	aa2c      	add	r2, sp, #176	; 0xb0
    facc:	4631      	mov	r1, r6
    face:	4650      	mov	r0, sl
    fad0:	f002 fa46 	bl	11f60 <__ssprint_r>
    fad4:	2800      	cmp	r0, #0
    fad6:	f47f ae44 	bne.w	f762 <_svfprintf_r+0x8d6>
    fada:	e9dd 722d 	ldrd	r7, r2, [sp, #180]	; 0xb4
    fade:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fae2:	2310      	movs	r3, #16
    fae4:	e7e5      	b.n	fab2 <_svfprintf_r+0xc26>
    fae6:	990c      	ldr	r1, [sp, #48]	; 0x30
    fae8:	aa2c      	add	r2, sp, #176	; 0xb0
    faea:	4650      	mov	r0, sl
    faec:	f002 fa38 	bl	11f60 <__ssprint_r>
    faf0:	2800      	cmp	r0, #0
    faf2:	f47f ae36 	bne.w	f762 <_svfprintf_r+0x8d6>
    faf6:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    faf8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fafc:	f7ff bb38 	b.w	f170 <_svfprintf_r+0x2e4>
    fb00:	f015 0310 	ands.w	r3, r5, #16
    fb04:	d160      	bne.n	fbc8 <_svfprintf_r+0xd3c>
    fb06:	f015 0240 	ands.w	r2, r5, #64	; 0x40
    fb0a:	f000 8373 	beq.w	101f4 <_svfprintf_r+0x1368>
    fb0e:	980e      	ldr	r0, [sp, #56]	; 0x38
    fb10:	f850 2b04 	ldr.w	r2, [r0], #4
    fb14:	900e      	str	r0, [sp, #56]	; 0x38
    fb16:	4619      	mov	r1, r3
    fb18:	b292      	uxth	r2, r2
    fb1a:	2301      	movs	r3, #1
    fb1c:	e45a      	b.n	f3d4 <_svfprintf_r+0x548>
    fb1e:	f01b 0310 	ands.w	r3, fp, #16
    fb22:	d168      	bne.n	fbf6 <_svfprintf_r+0xd6a>
    fb24:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    fb28:	f000 8356 	beq.w	101d8 <_svfprintf_r+0x134c>
    fb2c:	980e      	ldr	r0, [sp, #56]	; 0x38
    fb2e:	f850 2b04 	ldr.w	r2, [r0], #4
    fb32:	900e      	str	r0, [sp, #56]	; 0x38
    fb34:	4619      	mov	r1, r3
    fb36:	b292      	uxth	r2, r2
    fb38:	e4af      	b.n	f49a <_svfprintf_r+0x60e>
    fb3a:	4252      	negs	r2, r2
    fb3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    fb40:	465d      	mov	r5, fp
    fb42:	202d      	movs	r0, #45	; 0x2d
    fb44:	2301      	movs	r3, #1
    fb46:	e446      	b.n	f3d6 <_svfprintf_r+0x54a>
    fb48:	990c      	ldr	r1, [sp, #48]	; 0x30
    fb4a:	aa2c      	add	r2, sp, #176	; 0xb0
    fb4c:	4650      	mov	r0, sl
    fb4e:	f002 fa07 	bl	11f60 <__ssprint_r>
    fb52:	2800      	cmp	r0, #0
    fb54:	f47f ae05 	bne.w	f762 <_svfprintf_r+0x8d6>
    fb58:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    fb5c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fb60:	e61b      	b.n	f79a <_svfprintf_r+0x90e>
    fb62:	990c      	ldr	r1, [sp, #48]	; 0x30
    fb64:	aa2c      	add	r2, sp, #176	; 0xb0
    fb66:	4650      	mov	r0, sl
    fb68:	f002 f9fa 	bl	11f60 <__ssprint_r>
    fb6c:	2800      	cmp	r0, #0
    fb6e:	f47f adf8 	bne.w	f762 <_svfprintf_r+0x8d6>
    fb72:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    fb76:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fb7a:	e61b      	b.n	f7b4 <_svfprintf_r+0x928>
    fb7c:	f01b 0f01 	tst.w	fp, #1
    fb80:	f43f ab09 	beq.w	f196 <_svfprintf_r+0x30a>
    fb84:	e538      	b.n	f5f8 <_svfprintf_r+0x76c>
    fb86:	930e      	str	r3, [sp, #56]	; 0x38
    fb88:	f898 3000 	ldrb.w	r3, [r8]
    fb8c:	f7ff b9d7 	b.w	ef3e <_svfprintf_r+0xb2>
    fb90:	ac58      	add	r4, sp, #352	; 0x160
    fb92:	e4e5      	b.n	f560 <_svfprintf_r+0x6d4>
    fb94:	f41b 7f00 	tst.w	fp, #512	; 0x200
    fb98:	f040 83bd 	bne.w	10316 <_svfprintf_r+0x148a>
    fb9c:	f853 2b04 	ldr.w	r2, [r3], #4
    fba0:	930e      	str	r3, [sp, #56]	; 0x38
    fba2:	17d1      	asrs	r1, r2, #31
    fba4:	460b      	mov	r3, r1
    fba6:	f7ff bbc4 	b.w	f332 <_svfprintf_r+0x4a6>
    fbaa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    fbac:	2b00      	cmp	r3, #0
    fbae:	f43f aa4b 	beq.w	f048 <_svfprintf_r+0x1bc>
    fbb2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    fbb4:	781b      	ldrb	r3, [r3, #0]
    fbb6:	2b00      	cmp	r3, #0
    fbb8:	f43f aa46 	beq.w	f048 <_svfprintf_r+0x1bc>
    fbbc:	f898 3000 	ldrb.w	r3, [r8]
    fbc0:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
    fbc4:	f7ff b9bb 	b.w	ef3e <_svfprintf_r+0xb2>
    fbc8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fbca:	f853 2b04 	ldr.w	r2, [r3], #4
    fbce:	930e      	str	r3, [sp, #56]	; 0x38
    fbd0:	2301      	movs	r3, #1
    fbd2:	f7ff bbff 	b.w	f3d4 <_svfprintf_r+0x548>
    fbd6:	bf00      	nop
    fbd8:	00015a04 	.word	0x00015a04
    fbdc:	00015a14 	.word	0x00015a14
    fbe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fbe2:	9809      	ldr	r0, [sp, #36]	; 0x24
    fbe4:	f853 1b04 	ldr.w	r1, [r3], #4
    fbe8:	930e      	str	r3, [sp, #56]	; 0x38
    fbea:	17c2      	asrs	r2, r0, #31
    fbec:	e9c1 0200 	strd	r0, r2, [r1]
    fbf0:	4644      	mov	r4, r8
    fbf2:	f7ff b979 	b.w	eee8 <_svfprintf_r+0x5c>
    fbf6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fbf8:	f853 2b04 	ldr.w	r2, [r3], #4
    fbfc:	930e      	str	r3, [sp, #56]	; 0x38
    fbfe:	e44c      	b.n	f49a <_svfprintf_r+0x60e>
    fc00:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    fc04:	4602      	mov	r2, r0
    fc06:	460b      	mov	r3, r1
    fc08:	f7fd f89e 	bl	cd48 <__aeabi_dcmpun>
    fc0c:	2800      	cmp	r0, #0
    fc0e:	f040 8675 	bne.w	108fc <_svfprintf_r+0x1a70>
    fc12:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fc14:	2b61      	cmp	r3, #97	; 0x61
    fc16:	f000 855b 	beq.w	106d0 <_svfprintf_r+0x1844>
    fc1a:	2b41      	cmp	r3, #65	; 0x41
    fc1c:	f000 85ac 	beq.w	10778 <_svfprintf_r+0x18ec>
    fc20:	9b08      	ldr	r3, [sp, #32]
    fc22:	3301      	adds	r3, #1
    fc24:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fc26:	f023 0320 	bic.w	r3, r3, #32
    fc2a:	9307      	str	r3, [sp, #28]
    fc2c:	f000 8463 	beq.w	104f6 <_svfprintf_r+0x166a>
    fc30:	2b47      	cmp	r3, #71	; 0x47
    fc32:	d104      	bne.n	fc3e <_svfprintf_r+0xdb2>
    fc34:	9b08      	ldr	r3, [sp, #32]
    fc36:	2b00      	cmp	r3, #0
    fc38:	bf08      	it	eq
    fc3a:	2301      	moveq	r3, #1
    fc3c:	9308      	str	r3, [sp, #32]
    fc3e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    fc42:	460a      	mov	r2, r1
    fc44:	2a00      	cmp	r2, #0
    fc46:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    fc4a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
    fc4e:	f2c0 85e1 	blt.w	10814 <_svfprintf_r+0x1988>
    fc52:	469b      	mov	fp, r3
    fc54:	2300      	movs	r3, #0
    fc56:	4616      	mov	r6, r2
    fc58:	931e      	str	r3, [sp, #120]	; 0x78
    fc5a:	4607      	mov	r7, r0
    fc5c:	930d      	str	r3, [sp, #52]	; 0x34
    fc5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fc60:	3b41      	subs	r3, #65	; 0x41
    fc62:	2b25      	cmp	r3, #37	; 0x25
    fc64:	f200 8367 	bhi.w	10336 <_svfprintf_r+0x14aa>
    fc68:	e8df f013 	tbh	[pc, r3, lsl #1]
    fc6c:	03650452 	.word	0x03650452
    fc70:	03650365 	.word	0x03650365
    fc74:	044e0449 	.word	0x044e0449
    fc78:	03650365 	.word	0x03650365
    fc7c:	03650365 	.word	0x03650365
    fc80:	03650365 	.word	0x03650365
    fc84:	03650365 	.word	0x03650365
    fc88:	03650365 	.word	0x03650365
    fc8c:	03650365 	.word	0x03650365
    fc90:	03650365 	.word	0x03650365
    fc94:	03650365 	.word	0x03650365
    fc98:	03650365 	.word	0x03650365
    fc9c:	03650365 	.word	0x03650365
    fca0:	03650365 	.word	0x03650365
    fca4:	03650365 	.word	0x03650365
    fca8:	03650365 	.word	0x03650365
    fcac:	03650365 	.word	0x03650365
    fcb0:	03650365 	.word	0x03650365
    fcb4:	044e0449 	.word	0x044e0449
    fcb8:	9310      	str	r3, [sp, #64]	; 0x40
    fcba:	465d      	mov	r5, fp
    fcbc:	f7ff bbf4 	b.w	f4a8 <_svfprintf_r+0x61c>
    fcc0:	9310      	str	r3, [sp, #64]	; 0x40
    fcc2:	4bb7      	ldr	r3, [pc, #732]	; (ffa0 <_svfprintf_r+0x1114>)
    fcc4:	9318      	str	r3, [sp, #96]	; 0x60
    fcc6:	f01b 0120 	ands.w	r1, fp, #32
    fcca:	f000 80fc 	beq.w	fec6 <_svfprintf_r+0x103a>
    fcce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fcd0:	3307      	adds	r3, #7
    fcd2:	f023 0307 	bic.w	r3, r3, #7
    fcd6:	6859      	ldr	r1, [r3, #4]
    fcd8:	f853 2b08 	ldr.w	r2, [r3], #8
    fcdc:	930e      	str	r3, [sp, #56]	; 0x38
    fcde:	f01b 0f01 	tst.w	fp, #1
    fce2:	d00a      	beq.n	fcfa <_svfprintf_r+0xe6e>
    fce4:	ea52 0301 	orrs.w	r3, r2, r1
    fce8:	d007      	beq.n	fcfa <_svfprintf_r+0xe6e>
    fcea:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fcec:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
    fcf0:	2330      	movs	r3, #48	; 0x30
    fcf2:	f04b 0b02 	orr.w	fp, fp, #2
    fcf6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    fcfa:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    fcfe:	2302      	movs	r3, #2
    fd00:	f7ff bb68 	b.w	f3d4 <_svfprintf_r+0x548>
    fd04:	9310      	str	r3, [sp, #64]	; 0x40
    fd06:	f7ff bbbc 	b.w	f482 <_svfprintf_r+0x5f6>
    fd0a:	9310      	str	r3, [sp, #64]	; 0x40
    fd0c:	4ba5      	ldr	r3, [pc, #660]	; (ffa4 <_svfprintf_r+0x1118>)
    fd0e:	9318      	str	r3, [sp, #96]	; 0x60
    fd10:	e7d9      	b.n	fcc6 <_svfprintf_r+0xe3a>
    fd12:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fd14:	2101      	movs	r1, #1
    fd16:	f853 2b04 	ldr.w	r2, [r3], #4
    fd1a:	9107      	str	r1, [sp, #28]
    fd1c:	f88d 20fc 	strb.w	r2, [sp, #252]	; 0xfc
    fd20:	930e      	str	r3, [sp, #56]	; 0x38
    fd22:	910a      	str	r1, [sp, #40]	; 0x28
    fd24:	ac3f      	add	r4, sp, #252	; 0xfc
    fd26:	f7ff babb 	b.w	f2a0 <_svfprintf_r+0x414>
    fd2a:	990c      	ldr	r1, [sp, #48]	; 0x30
    fd2c:	aa2c      	add	r2, sp, #176	; 0xb0
    fd2e:	4650      	mov	r0, sl
    fd30:	f002 f916 	bl	11f60 <__ssprint_r>
    fd34:	2800      	cmp	r0, #0
    fd36:	f47f ad14 	bne.w	f762 <_svfprintf_r+0x8d6>
    fd3a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fd3c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fd40:	e468      	b.n	f614 <_svfprintf_r+0x788>
    fd42:	2140      	movs	r1, #64	; 0x40
    fd44:	4650      	mov	r0, sl
    fd46:	f7fd fb57 	bl	d3f8 <_malloc_r>
    fd4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fd4c:	6018      	str	r0, [r3, #0]
    fd4e:	6118      	str	r0, [r3, #16]
    fd50:	2800      	cmp	r0, #0
    fd52:	f000 8660 	beq.w	10a16 <_svfprintf_r+0x1b8a>
    fd56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fd58:	2340      	movs	r3, #64	; 0x40
    fd5a:	6153      	str	r3, [r2, #20]
    fd5c:	f7ff b8b2 	b.w	eec4 <_svfprintf_r+0x38>
    fd60:	9b08      	ldr	r3, [sp, #32]
    fd62:	940d      	str	r4, [sp, #52]	; 0x34
    fd64:	2b06      	cmp	r3, #6
    fd66:	4621      	mov	r1, r4
    fd68:	bf28      	it	cs
    fd6a:	2306      	movcs	r3, #6
    fd6c:	9408      	str	r4, [sp, #32]
    fd6e:	4622      	mov	r2, r4
    fd70:	9307      	str	r3, [sp, #28]
    fd72:	4c8d      	ldr	r4, [pc, #564]	; (ffa8 <_svfprintf_r+0x111c>)
    fd74:	970e      	str	r7, [sp, #56]	; 0x38
    fd76:	930a      	str	r3, [sp, #40]	; 0x28
    fd78:	9112      	str	r1, [sp, #72]	; 0x48
    fd7a:	9116      	str	r1, [sp, #88]	; 0x58
    fd7c:	9111      	str	r1, [sp, #68]	; 0x44
    fd7e:	f7ff ba69 	b.w	f254 <_svfprintf_r+0x3c8>
    fd82:	2f10      	cmp	r7, #16
    fd84:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fd86:	4d89      	ldr	r5, [pc, #548]	; (ffac <_svfprintf_r+0x1120>)
    fd88:	f340 8245 	ble.w	10216 <_svfprintf_r+0x138a>
    fd8c:	4632      	mov	r2, r6
    fd8e:	4626      	mov	r6, r4
    fd90:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    fd92:	e005      	b.n	fda0 <_svfprintf_r+0xf14>
    fd94:	f109 0908 	add.w	r9, r9, #8
    fd98:	3f10      	subs	r7, #16
    fd9a:	2f10      	cmp	r7, #16
    fd9c:	f340 8239 	ble.w	10212 <_svfprintf_r+0x1386>
    fda0:	3301      	adds	r3, #1
    fda2:	3210      	adds	r2, #16
    fda4:	2110      	movs	r1, #16
    fda6:	2b07      	cmp	r3, #7
    fda8:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    fdac:	f8c9 5000 	str.w	r5, [r9]
    fdb0:	f8c9 1004 	str.w	r1, [r9, #4]
    fdb4:	ddee      	ble.n	fd94 <_svfprintf_r+0xf08>
    fdb6:	aa2c      	add	r2, sp, #176	; 0xb0
    fdb8:	4621      	mov	r1, r4
    fdba:	4650      	mov	r0, sl
    fdbc:	f002 f8d0 	bl	11f60 <__ssprint_r>
    fdc0:	2800      	cmp	r0, #0
    fdc2:	f47f acce 	bne.w	f762 <_svfprintf_r+0x8d6>
    fdc6:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    fdca:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fdce:	e7e3      	b.n	fd98 <_svfprintf_r+0xf0c>
    fdd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fdd2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    fdd4:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    fdd8:	464a      	mov	r2, r9
    fdda:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    fdde:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    fde2:	18e3      	adds	r3, r4, r3
    fde4:	9308      	str	r3, [sp, #32]
    fde6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    fde8:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
    fdec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    fdf0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fdf2:	9410      	str	r4, [sp, #64]	; 0x40
    fdf4:	4631      	mov	r1, r6
    fdf6:	f1b9 0f00 	cmp.w	r9, #0
    fdfa:	d02e      	beq.n	fe5a <_svfprintf_r+0xfce>
    fdfc:	bb83      	cbnz	r3, fe60 <_svfprintf_r+0xfd4>
    fdfe:	3f01      	subs	r7, #1
    fe00:	f109 39ff 	add.w	r9, r9, #4294967295
    fe04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    fe06:	e9c2 3b00 	strd	r3, fp, [r2]
    fe0a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fe0c:	3301      	adds	r3, #1
    fe0e:	4459      	add	r1, fp
    fe10:	2b07      	cmp	r3, #7
    fe12:	912e      	str	r1, [sp, #184]	; 0xb8
    fe14:	932d      	str	r3, [sp, #180]	; 0xb4
    fe16:	dc5f      	bgt.n	fed8 <_svfprintf_r+0x104c>
    fe18:	3208      	adds	r2, #8
    fe1a:	9b08      	ldr	r3, [sp, #32]
    fe1c:	7838      	ldrb	r0, [r7, #0]
    fe1e:	1b5b      	subs	r3, r3, r5
    fe20:	4283      	cmp	r3, r0
    fe22:	bfa8      	it	ge
    fe24:	4603      	movge	r3, r0
    fe26:	2b00      	cmp	r3, #0
    fe28:	461e      	mov	r6, r3
    fe2a:	dd0b      	ble.n	fe44 <_svfprintf_r+0xfb8>
    fe2c:	982d      	ldr	r0, [sp, #180]	; 0xb4
    fe2e:	3001      	adds	r0, #1
    fe30:	4419      	add	r1, r3
    fe32:	2807      	cmp	r0, #7
    fe34:	e9c2 5300 	strd	r5, r3, [r2]
    fe38:	912e      	str	r1, [sp, #184]	; 0xb8
    fe3a:	902d      	str	r0, [sp, #180]	; 0xb4
    fe3c:	f300 8156 	bgt.w	100ec <_svfprintf_r+0x1260>
    fe40:	7838      	ldrb	r0, [r7, #0]
    fe42:	3208      	adds	r2, #8
    fe44:	2e00      	cmp	r6, #0
    fe46:	bfac      	ite	ge
    fe48:	1b84      	subge	r4, r0, r6
    fe4a:	4604      	movlt	r4, r0
    fe4c:	2c00      	cmp	r4, #0
    fe4e:	dc0b      	bgt.n	fe68 <_svfprintf_r+0xfdc>
    fe50:	4405      	add	r5, r0
    fe52:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fe54:	f1b9 0f00 	cmp.w	r9, #0
    fe58:	d1d0      	bne.n	fdfc <_svfprintf_r+0xf70>
    fe5a:	2b00      	cmp	r3, #0
    fe5c:	f000 83d4 	beq.w	10608 <_svfprintf_r+0x177c>
    fe60:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fe62:	3b01      	subs	r3, #1
    fe64:	9312      	str	r3, [sp, #72]	; 0x48
    fe66:	e7cd      	b.n	fe04 <_svfprintf_r+0xf78>
    fe68:	2c10      	cmp	r4, #16
    fe6a:	982d      	ldr	r0, [sp, #180]	; 0xb4
    fe6c:	dd1d      	ble.n	feaa <_svfprintf_r+0x101e>
    fe6e:	2610      	movs	r6, #16
    fe70:	e004      	b.n	fe7c <_svfprintf_r+0xff0>
    fe72:	3c10      	subs	r4, #16
    fe74:	2c10      	cmp	r4, #16
    fe76:	f102 0208 	add.w	r2, r2, #8
    fe7a:	dd16      	ble.n	feaa <_svfprintf_r+0x101e>
    fe7c:	3001      	adds	r0, #1
    fe7e:	4b4b      	ldr	r3, [pc, #300]	; (ffac <_svfprintf_r+0x1120>)
    fe80:	3110      	adds	r1, #16
    fe82:	2807      	cmp	r0, #7
    fe84:	e9c2 3600 	strd	r3, r6, [r2]
    fe88:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    fe8c:	ddf1      	ble.n	fe72 <_svfprintf_r+0xfe6>
    fe8e:	aa2c      	add	r2, sp, #176	; 0xb0
    fe90:	4641      	mov	r1, r8
    fe92:	4650      	mov	r0, sl
    fe94:	f002 f864 	bl	11f60 <__ssprint_r>
    fe98:	2800      	cmp	r0, #0
    fe9a:	f47f ac62 	bne.w	f762 <_svfprintf_r+0x8d6>
    fe9e:	3c10      	subs	r4, #16
    fea0:	2c10      	cmp	r4, #16
    fea2:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	; 0xb4
    fea6:	aa2f      	add	r2, sp, #188	; 0xbc
    fea8:	dce8      	bgt.n	fe7c <_svfprintf_r+0xff0>
    feaa:	3001      	adds	r0, #1
    feac:	4b3f      	ldr	r3, [pc, #252]	; (ffac <_svfprintf_r+0x1120>)
    feae:	6054      	str	r4, [r2, #4]
    feb0:	4421      	add	r1, r4
    feb2:	2807      	cmp	r0, #7
    feb4:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    feb8:	6013      	str	r3, [r2, #0]
    feba:	f300 83fb 	bgt.w	106b4 <_svfprintf_r+0x1828>
    febe:	7838      	ldrb	r0, [r7, #0]
    fec0:	3208      	adds	r2, #8
    fec2:	4405      	add	r5, r0
    fec4:	e7c5      	b.n	fe52 <_svfprintf_r+0xfc6>
    fec6:	f01b 0310 	ands.w	r3, fp, #16
    feca:	f000 80bc 	beq.w	10046 <_svfprintf_r+0x11ba>
    fece:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fed0:	f853 2b04 	ldr.w	r2, [r3], #4
    fed4:	930e      	str	r3, [sp, #56]	; 0x38
    fed6:	e702      	b.n	fcde <_svfprintf_r+0xe52>
    fed8:	aa2c      	add	r2, sp, #176	; 0xb0
    feda:	4641      	mov	r1, r8
    fedc:	4650      	mov	r0, sl
    fede:	f002 f83f 	bl	11f60 <__ssprint_r>
    fee2:	2800      	cmp	r0, #0
    fee4:	f47f ac3d 	bne.w	f762 <_svfprintf_r+0x8d6>
    fee8:	992e      	ldr	r1, [sp, #184]	; 0xb8
    feea:	aa2f      	add	r2, sp, #188	; 0xbc
    feec:	e795      	b.n	fe1a <_svfprintf_r+0xf8e>
    feee:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    fef2:	4b2f      	ldr	r3, [pc, #188]	; (ffb0 <_svfprintf_r+0x1124>)
    fef4:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    fef8:	f8cd 801c 	str.w	r8, [sp, #28]
    fefc:	f405 6780 	and.w	r7, r5, #1024	; 0x400
    ff00:	f04f 0c00 	mov.w	ip, #0
    ff04:	ac58      	add	r4, sp, #352	; 0x160
    ff06:	f04f 3bcc 	mov.w	fp, #3435973836	; 0xcccccccc
    ff0a:	950a      	str	r5, [sp, #40]	; 0x28
    ff0c:	e005      	b.n	ff1a <_svfprintf_r+0x108e>
    ff0e:	2a0a      	cmp	r2, #10
    ff10:	f171 0100 	sbcs.w	r1, r1, #0
    ff14:	d334      	bcc.n	ff80 <_svfprintf_r+0x10f4>
    ff16:	4642      	mov	r2, r8
    ff18:	4631      	mov	r1, r6
    ff1a:	1850      	adds	r0, r2, r1
    ff1c:	f140 0000 	adc.w	r0, r0, #0
    ff20:	fba3 5600 	umull	r5, r6, r3, r0
    ff24:	f026 0503 	bic.w	r5, r6, #3
    ff28:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    ff2c:	1b40      	subs	r0, r0, r5
    ff2e:	1a15      	subs	r5, r2, r0
    ff30:	f161 0e00 	sbc.w	lr, r1, #0
    ff34:	fb0b f605 	mul.w	r6, fp, r5
    ff38:	fb03 660e 	mla	r6, r3, lr, r6
    ff3c:	fba5 8503 	umull	r8, r5, r5, r3
    ff40:	442e      	add	r6, r5
    ff42:	f008 0e01 	and.w	lr, r8, #1
    ff46:	2505      	movs	r5, #5
    ff48:	fbae 5e05 	umull	r5, lr, lr, r5
    ff4c:	182d      	adds	r5, r5, r0
    ff4e:	ea4f 0858 	mov.w	r8, r8, lsr #1
    ff52:	3530      	adds	r5, #48	; 0x30
    ff54:	f804 5c01 	strb.w	r5, [r4, #-1]
    ff58:	ea48 78c6 	orr.w	r8, r8, r6, lsl #31
    ff5c:	f10c 0c01 	add.w	ip, ip, #1
    ff60:	3c01      	subs	r4, #1
    ff62:	0876      	lsrs	r6, r6, #1
    ff64:	2f00      	cmp	r7, #0
    ff66:	d0d2      	beq.n	ff0e <_svfprintf_r+0x1082>
    ff68:	f899 0000 	ldrb.w	r0, [r9]
    ff6c:	4584      	cmp	ip, r0
    ff6e:	d1ce      	bne.n	ff0e <_svfprintf_r+0x1082>
    ff70:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    ff74:	d0cb      	beq.n	ff0e <_svfprintf_r+0x1082>
    ff76:	2a0a      	cmp	r2, #10
    ff78:	f171 0100 	sbcs.w	r1, r1, #0
    ff7c:	f080 8198 	bcs.w	102b0 <_svfprintf_r+0x1424>
    ff80:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ff82:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    ff86:	ab58      	add	r3, sp, #352	; 0x160
    ff88:	1b1b      	subs	r3, r3, r4
    ff8a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    ff8e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    ff92:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
    ff96:	46ab      	mov	fp, r5
    ff98:	930a      	str	r3, [sp, #40]	; 0x28
    ff9a:	f7ff bae1 	b.w	f560 <_svfprintf_r+0x6d4>
    ff9e:	bf00      	nop
    ffa0:	000159d4 	.word	0x000159d4
    ffa4:	000159e8 	.word	0x000159e8
    ffa8:	000159fc 	.word	0x000159fc
    ffac:	00015a14 	.word	0x00015a14
    ffb0:	cccccccd 	.word	0xcccccccd
    ffb4:	2301      	movs	r3, #1
    ffb6:	f8c9 3004 	str.w	r3, [r9, #4]
    ffba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ffbc:	4aba      	ldr	r2, [pc, #744]	; (102a8 <_svfprintf_r+0x141c>)
    ffbe:	f8c9 2000 	str.w	r2, [r9]
    ffc2:	3301      	adds	r3, #1
    ffc4:	3601      	adds	r6, #1
    ffc6:	2b07      	cmp	r3, #7
    ffc8:	962e      	str	r6, [sp, #184]	; 0xb8
    ffca:	932d      	str	r3, [sp, #180]	; 0xb4
    ffcc:	f300 818c 	bgt.w	102e8 <_svfprintf_r+0x145c>
    ffd0:	f109 0908 	add.w	r9, r9, #8
    ffd4:	2900      	cmp	r1, #0
    ffd6:	f040 80be 	bne.w	10156 <_svfprintf_r+0x12ca>
    ffda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ffdc:	f00b 0301 	and.w	r3, fp, #1
    ffe0:	4313      	orrs	r3, r2
    ffe2:	f43f a8d8 	beq.w	f196 <_svfprintf_r+0x30a>
    ffe6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ffe8:	9919      	ldr	r1, [sp, #100]	; 0x64
    ffea:	199a      	adds	r2, r3, r6
    ffec:	e9c9 1300 	strd	r1, r3, [r9]
    fff0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fff2:	922e      	str	r2, [sp, #184]	; 0xb8
    fff4:	3301      	adds	r3, #1
    fff6:	2b07      	cmp	r3, #7
    fff8:	932d      	str	r3, [sp, #180]	; 0xb4
    fffa:	f300 826e 	bgt.w	104da <_svfprintf_r+0x164e>
    fffe:	f109 0908 	add.w	r9, r9, #8
   10002:	9913      	ldr	r1, [sp, #76]	; 0x4c
   10004:	f8c9 4000 	str.w	r4, [r9]
   10008:	3301      	adds	r3, #1
   1000a:	188e      	adds	r6, r1, r2
   1000c:	2b07      	cmp	r3, #7
   1000e:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   10012:	f8c9 1004 	str.w	r1, [r9, #4]
   10016:	f77f a8bc 	ble.w	f192 <_svfprintf_r+0x306>
   1001a:	f7ff bbf1 	b.w	f800 <_svfprintf_r+0x974>
   1001e:	990c      	ldr	r1, [sp, #48]	; 0x30
   10020:	931e      	str	r3, [sp, #120]	; 0x78
   10022:	aa2c      	add	r2, sp, #176	; 0xb0
   10024:	4650      	mov	r0, sl
   10026:	f001 ff9b 	bl	11f60 <__ssprint_r>
   1002a:	2800      	cmp	r0, #0
   1002c:	f47f ab99 	bne.w	f762 <_svfprintf_r+0x8d6>
   10030:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10034:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10036:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   10038:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   1003c:	f7ff b86a 	b.w	f114 <_svfprintf_r+0x288>
   10040:	46c2      	mov	sl, r8
   10042:	f7ff bb8e 	b.w	f762 <_svfprintf_r+0x8d6>
   10046:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
   1004a:	f000 80b8 	beq.w	101be <_svfprintf_r+0x1332>
   1004e:	980e      	ldr	r0, [sp, #56]	; 0x38
   10050:	f850 2b04 	ldr.w	r2, [r0], #4
   10054:	900e      	str	r0, [sp, #56]	; 0x38
   10056:	4619      	mov	r1, r3
   10058:	b292      	uxth	r2, r2
   1005a:	e640      	b.n	fcde <_svfprintf_r+0xe52>
   1005c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1005e:	aa2c      	add	r2, sp, #176	; 0xb0
   10060:	4650      	mov	r0, sl
   10062:	f001 ff7d 	bl	11f60 <__ssprint_r>
   10066:	2800      	cmp	r0, #0
   10068:	f47f ab7b 	bne.w	f762 <_svfprintf_r+0x8d6>
   1006c:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   1006e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10072:	f7ff babc 	b.w	f5ee <_svfprintf_r+0x762>
   10076:	ae2a      	add	r6, sp, #168	; 0xa8
   10078:	2208      	movs	r2, #8
   1007a:	2100      	movs	r1, #0
   1007c:	4630      	mov	r0, r6
   1007e:	9425      	str	r4, [sp, #148]	; 0x94
   10080:	f7fe f828 	bl	e0d4 <memset>
   10084:	9b08      	ldr	r3, [sp, #32]
   10086:	1c5a      	adds	r2, r3, #1
   10088:	f000 80d4 	beq.w	10234 <_svfprintf_r+0x13a8>
   1008c:	2500      	movs	r5, #0
   1008e:	f8cd 801c 	str.w	r8, [sp, #28]
   10092:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   10096:	46a8      	mov	r8, r5
   10098:	469b      	mov	fp, r3
   1009a:	e00c      	b.n	100b6 <_svfprintf_r+0x122a>
   1009c:	a93f      	add	r1, sp, #252	; 0xfc
   1009e:	4650      	mov	r0, sl
   100a0:	f001 ff16 	bl	11ed0 <_wcrtomb_r>
   100a4:	1c43      	adds	r3, r0, #1
   100a6:	4440      	add	r0, r8
   100a8:	f000 83b8 	beq.w	1081c <_svfprintf_r+0x1990>
   100ac:	4558      	cmp	r0, fp
   100ae:	dc08      	bgt.n	100c2 <_svfprintf_r+0x1236>
   100b0:	f000 8435 	beq.w	1091e <_svfprintf_r+0x1a92>
   100b4:	4680      	mov	r8, r0
   100b6:	9a25      	ldr	r2, [sp, #148]	; 0x94
   100b8:	5952      	ldr	r2, [r2, r5]
   100ba:	4633      	mov	r3, r6
   100bc:	3504      	adds	r5, #4
   100be:	2a00      	cmp	r2, #0
   100c0:	d1ec      	bne.n	1009c <_svfprintf_r+0x1210>
   100c2:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   100c6:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   100ca:	f8dd 801c 	ldr.w	r8, [sp, #28]
   100ce:	e0be      	b.n	1024e <_svfprintf_r+0x13c2>
   100d0:	4616      	mov	r6, r2
   100d2:	3301      	adds	r3, #1
   100d4:	4426      	add	r6, r4
   100d6:	2b07      	cmp	r3, #7
   100d8:	f8c9 5000 	str.w	r5, [r9]
   100dc:	f8c9 4004 	str.w	r4, [r9, #4]
   100e0:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   100e4:	f77f a855 	ble.w	f192 <_svfprintf_r+0x306>
   100e8:	f7ff bb8a 	b.w	f800 <_svfprintf_r+0x974>
   100ec:	aa2c      	add	r2, sp, #176	; 0xb0
   100ee:	4641      	mov	r1, r8
   100f0:	4650      	mov	r0, sl
   100f2:	f001 ff35 	bl	11f60 <__ssprint_r>
   100f6:	2800      	cmp	r0, #0
   100f8:	f47f ab33 	bne.w	f762 <_svfprintf_r+0x8d6>
   100fc:	7838      	ldrb	r0, [r7, #0]
   100fe:	992e      	ldr	r1, [sp, #184]	; 0xb8
   10100:	aa2f      	add	r2, sp, #188	; 0xbc
   10102:	e69f      	b.n	fe44 <_svfprintf_r+0xfb8>
   10104:	990c      	ldr	r1, [sp, #48]	; 0x30
   10106:	aa2c      	add	r2, sp, #176	; 0xb0
   10108:	4650      	mov	r0, sl
   1010a:	f001 ff29 	bl	11f60 <__ssprint_r>
   1010e:	2800      	cmp	r0, #0
   10110:	f47f ab27 	bne.w	f762 <_svfprintf_r+0x8d6>
   10114:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10116:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   1011a:	f7ff b823 	b.w	f164 <_svfprintf_r+0x2d8>
   1011e:	2b01      	cmp	r3, #1
   10120:	465d      	mov	r5, fp
   10122:	f47f aa09 	bne.w	f538 <_svfprintf_r+0x6ac>
   10126:	f7ff bbb9 	b.w	f89c <_svfprintf_r+0xa10>
   1012a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1012c:	9909      	ldr	r1, [sp, #36]	; 0x24
   1012e:	f853 2b04 	ldr.w	r2, [r3], #4
   10132:	4644      	mov	r4, r8
   10134:	6011      	str	r1, [r2, #0]
   10136:	930e      	str	r3, [sp, #56]	; 0x38
   10138:	f7fe bed6 	b.w	eee8 <_svfprintf_r+0x5c>
   1013c:	4616      	mov	r6, r2
   1013e:	3701      	adds	r7, #1
   10140:	4426      	add	r6, r4
   10142:	2f07      	cmp	r7, #7
   10144:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
   10148:	f8c9 5000 	str.w	r5, [r9]
   1014c:	f8c9 4004 	str.w	r4, [r9, #4]
   10150:	f77f ab47 	ble.w	f7e2 <_svfprintf_r+0x956>
   10154:	e491      	b.n	fa7a <_svfprintf_r+0xbee>
   10156:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10158:	9819      	ldr	r0, [sp, #100]	; 0x64
   1015a:	199a      	adds	r2, r3, r6
   1015c:	e9c9 0300 	strd	r0, r3, [r9]
   10160:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   10162:	922e      	str	r2, [sp, #184]	; 0xb8
   10164:	3301      	adds	r3, #1
   10166:	2b07      	cmp	r3, #7
   10168:	932d      	str	r3, [sp, #180]	; 0xb4
   1016a:	f300 81b6 	bgt.w	104da <_svfprintf_r+0x164e>
   1016e:	f109 0908 	add.w	r9, r9, #8
   10172:	2900      	cmp	r1, #0
   10174:	f6bf af45 	bge.w	10002 <_svfprintf_r+0x1176>
   10178:	424f      	negs	r7, r1
   1017a:	3110      	adds	r1, #16
   1017c:	4d4b      	ldr	r5, [pc, #300]	; (102ac <_svfprintf_r+0x1420>)
   1017e:	f280 8388 	bge.w	10892 <_svfprintf_r+0x1a06>
   10182:	4649      	mov	r1, r9
   10184:	2610      	movs	r6, #16
   10186:	46a1      	mov	r9, r4
   10188:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1018a:	e004      	b.n	10196 <_svfprintf_r+0x130a>
   1018c:	3108      	adds	r1, #8
   1018e:	3f10      	subs	r7, #16
   10190:	2f10      	cmp	r7, #16
   10192:	f340 837c 	ble.w	1088e <_svfprintf_r+0x1a02>
   10196:	3301      	adds	r3, #1
   10198:	3210      	adds	r2, #16
   1019a:	2b07      	cmp	r3, #7
   1019c:	e9c1 5600 	strd	r5, r6, [r1]
   101a0:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   101a4:	ddf2      	ble.n	1018c <_svfprintf_r+0x1300>
   101a6:	aa2c      	add	r2, sp, #176	; 0xb0
   101a8:	4621      	mov	r1, r4
   101aa:	4650      	mov	r0, sl
   101ac:	f001 fed8 	bl	11f60 <__ssprint_r>
   101b0:	2800      	cmp	r0, #0
   101b2:	f47f aad6 	bne.w	f762 <_svfprintf_r+0x8d6>
   101b6:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   101ba:	a92f      	add	r1, sp, #188	; 0xbc
   101bc:	e7e7      	b.n	1018e <_svfprintf_r+0x1302>
   101be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   101c0:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
   101c4:	bf1a      	itte	ne
   101c6:	4611      	movne	r1, r2
   101c8:	f853 2b04 	ldrne.w	r2, [r3], #4
   101cc:	f853 2b04 	ldreq.w	r2, [r3], #4
   101d0:	930e      	str	r3, [sp, #56]	; 0x38
   101d2:	bf18      	it	ne
   101d4:	b2d2      	uxtbne	r2, r2
   101d6:	e582      	b.n	fcde <_svfprintf_r+0xe52>
   101d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   101da:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
   101de:	bf1a      	itte	ne
   101e0:	4611      	movne	r1, r2
   101e2:	f853 2b04 	ldrne.w	r2, [r3], #4
   101e6:	f853 2b04 	ldreq.w	r2, [r3], #4
   101ea:	930e      	str	r3, [sp, #56]	; 0x38
   101ec:	bf18      	it	ne
   101ee:	b2d2      	uxtbne	r2, r2
   101f0:	f7ff b953 	b.w	f49a <_svfprintf_r+0x60e>
   101f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   101f6:	f415 7100 	ands.w	r1, r5, #512	; 0x200
   101fa:	bf1a      	itte	ne
   101fc:	4611      	movne	r1, r2
   101fe:	f853 2b04 	ldrne.w	r2, [r3], #4
   10202:	f853 2b04 	ldreq.w	r2, [r3], #4
   10206:	930e      	str	r3, [sp, #56]	; 0x38
   10208:	bf18      	it	ne
   1020a:	b2d2      	uxtbne	r2, r2
   1020c:	2301      	movs	r3, #1
   1020e:	f7ff b8e1 	b.w	f3d4 <_svfprintf_r+0x548>
   10212:	4634      	mov	r4, r6
   10214:	4616      	mov	r6, r2
   10216:	3301      	adds	r3, #1
   10218:	443e      	add	r6, r7
   1021a:	2b07      	cmp	r3, #7
   1021c:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   10220:	f8c9 5000 	str.w	r5, [r9]
   10224:	f8c9 7004 	str.w	r7, [r9, #4]
   10228:	f300 814a 	bgt.w	104c0 <_svfprintf_r+0x1634>
   1022c:	f109 0908 	add.w	r9, r9, #8
   10230:	f7ff bbb3 	b.w	f99a <_svfprintf_r+0xb0e>
   10234:	2300      	movs	r3, #0
   10236:	4619      	mov	r1, r3
   10238:	9600      	str	r6, [sp, #0]
   1023a:	aa25      	add	r2, sp, #148	; 0x94
   1023c:	4650      	mov	r0, sl
   1023e:	f001 fe6d 	bl	11f1c <_wcsrtombs_r>
   10242:	4603      	mov	r3, r0
   10244:	3301      	adds	r3, #1
   10246:	900a      	str	r0, [sp, #40]	; 0x28
   10248:	f000 82e8 	beq.w	1081c <_svfprintf_r+0x1990>
   1024c:	9425      	str	r4, [sp, #148]	; 0x94
   1024e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10250:	2b00      	cmp	r3, #0
   10252:	d03d      	beq.n	102d0 <_svfprintf_r+0x1444>
   10254:	2b63      	cmp	r3, #99	; 0x63
   10256:	f300 8129 	bgt.w	104ac <_svfprintf_r+0x1620>
   1025a:	2300      	movs	r3, #0
   1025c:	930d      	str	r3, [sp, #52]	; 0x34
   1025e:	ac3f      	add	r4, sp, #252	; 0xfc
   10260:	2208      	movs	r2, #8
   10262:	2100      	movs	r1, #0
   10264:	4630      	mov	r0, r6
   10266:	f7fd ff35 	bl	e0d4 <memset>
   1026a:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   1026c:	9600      	str	r6, [sp, #0]
   1026e:	462b      	mov	r3, r5
   10270:	aa25      	add	r2, sp, #148	; 0x94
   10272:	4621      	mov	r1, r4
   10274:	4650      	mov	r0, sl
   10276:	f001 fe51 	bl	11f1c <_wcsrtombs_r>
   1027a:	4285      	cmp	r5, r0
   1027c:	f040 83c4 	bne.w	10a08 <_svfprintf_r+0x1b7c>
   10280:	990a      	ldr	r1, [sp, #40]	; 0x28
   10282:	970e      	str	r7, [sp, #56]	; 0x38
   10284:	2300      	movs	r3, #0
   10286:	5463      	strb	r3, [r4, r1]
   10288:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1028c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10290:	9308      	str	r3, [sp, #32]
   10292:	9107      	str	r1, [sp, #28]
   10294:	9312      	str	r3, [sp, #72]	; 0x48
   10296:	9316      	str	r3, [sp, #88]	; 0x58
   10298:	9311      	str	r3, [sp, #68]	; 0x44
   1029a:	f7fe bfdb 	b.w	f254 <_svfprintf_r+0x3c8>
   1029e:	222d      	movs	r2, #45	; 0x2d
   102a0:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   102a4:	f7fe bfc5 	b.w	f232 <_svfprintf_r+0x3a6>
   102a8:	00014374 	.word	0x00014374
   102ac:	00015a14 	.word	0x00015a14
   102b0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   102b2:	991c      	ldr	r1, [sp, #112]	; 0x70
   102b4:	1ae4      	subs	r4, r4, r3
   102b6:	461a      	mov	r2, r3
   102b8:	4620      	mov	r0, r4
   102ba:	f7fd ff5d 	bl	e178 <strncpy>
   102be:	f899 2001 	ldrb.w	r2, [r9, #1]
   102c2:	4ba5      	ldr	r3, [pc, #660]	; (10558 <_svfprintf_r+0x16cc>)
   102c4:	b10a      	cbz	r2, 102ca <_svfprintf_r+0x143e>
   102c6:	f109 0901 	add.w	r9, r9, #1
   102ca:	f04f 0c00 	mov.w	ip, #0
   102ce:	e622      	b.n	ff16 <_svfprintf_r+0x108a>
   102d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   102d2:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   102d6:	970e      	str	r7, [sp, #56]	; 0x38
   102d8:	e9cd 3307 	strd	r3, r3, [sp, #28]
   102dc:	9312      	str	r3, [sp, #72]	; 0x48
   102de:	9316      	str	r3, [sp, #88]	; 0x58
   102e0:	9311      	str	r3, [sp, #68]	; 0x44
   102e2:	930d      	str	r3, [sp, #52]	; 0x34
   102e4:	f7fe bfb6 	b.w	f254 <_svfprintf_r+0x3c8>
   102e8:	990c      	ldr	r1, [sp, #48]	; 0x30
   102ea:	aa2c      	add	r2, sp, #176	; 0xb0
   102ec:	4650      	mov	r0, sl
   102ee:	f001 fe37 	bl	11f60 <__ssprint_r>
   102f2:	2800      	cmp	r0, #0
   102f4:	f47f aa35 	bne.w	f762 <_svfprintf_r+0x8d6>
   102f8:	9923      	ldr	r1, [sp, #140]	; 0x8c
   102fa:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   102fc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10300:	e668      	b.n	ffd4 <_svfprintf_r+0x1148>
   10302:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10304:	990a      	ldr	r1, [sp, #40]	; 0x28
   10306:	18a5      	adds	r5, r4, r2
   10308:	1a6d      	subs	r5, r5, r1
   1030a:	1ad4      	subs	r4, r2, r3
   1030c:	42a5      	cmp	r5, r4
   1030e:	bfa8      	it	ge
   10310:	4625      	movge	r5, r4
   10312:	f7ff bb77 	b.w	fa04 <_svfprintf_r+0xb78>
   10316:	f913 2b04 	ldrsb.w	r2, [r3], #4
   1031a:	930e      	str	r3, [sp, #56]	; 0x38
   1031c:	17d1      	asrs	r1, r2, #31
   1031e:	460b      	mov	r3, r1
   10320:	f7ff b807 	b.w	f332 <_svfprintf_r+0x4a6>
   10324:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10326:	9909      	ldr	r1, [sp, #36]	; 0x24
   10328:	f853 2b04 	ldr.w	r2, [r3], #4
   1032c:	930e      	str	r3, [sp, #56]	; 0x38
   1032e:	8011      	strh	r1, [r2, #0]
   10330:	4644      	mov	r4, r8
   10332:	f7fe bdd9 	b.w	eee8 <_svfprintf_r+0x5c>
   10336:	9b08      	ldr	r3, [sp, #32]
   10338:	930a      	str	r3, [sp, #40]	; 0x28
   1033a:	2302      	movs	r3, #2
   1033c:	a92a      	add	r1, sp, #168	; 0xa8
   1033e:	9104      	str	r1, [sp, #16]
   10340:	a925      	add	r1, sp, #148	; 0x94
   10342:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10344:	9103      	str	r1, [sp, #12]
   10346:	a923      	add	r1, sp, #140	; 0x8c
   10348:	9300      	str	r3, [sp, #0]
   1034a:	463a      	mov	r2, r7
   1034c:	4633      	mov	r3, r6
   1034e:	9501      	str	r5, [sp, #4]
   10350:	9102      	str	r1, [sp, #8]
   10352:	4650      	mov	r0, sl
   10354:	f000 fe60 	bl	11018 <_dtoa_r>
   10358:	9b07      	ldr	r3, [sp, #28]
   1035a:	2b47      	cmp	r3, #71	; 0x47
   1035c:	4604      	mov	r4, r0
   1035e:	f000 81a3 	beq.w	106a8 <_svfprintf_r+0x181c>
   10362:	2b46      	cmp	r3, #70	; 0x46
   10364:	4405      	add	r5, r0
   10366:	d105      	bne.n	10374 <_svfprintf_r+0x14e8>
   10368:	7803      	ldrb	r3, [r0, #0]
   1036a:	2b30      	cmp	r3, #48	; 0x30
   1036c:	f000 82b8 	beq.w	108e0 <_svfprintf_r+0x1a54>
   10370:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   10372:	441d      	add	r5, r3
   10374:	4638      	mov	r0, r7
   10376:	4631      	mov	r1, r6
   10378:	2200      	movs	r2, #0
   1037a:	2300      	movs	r3, #0
   1037c:	f7fc fcb2 	bl	cce4 <__aeabi_dcmpeq>
   10380:	2800      	cmp	r0, #0
   10382:	f000 8166 	beq.w	10652 <_svfprintf_r+0x17c6>
   10386:	462b      	mov	r3, r5
   10388:	1b1b      	subs	r3, r3, r4
   1038a:	9313      	str	r3, [sp, #76]	; 0x4c
   1038c:	9b07      	ldr	r3, [sp, #28]
   1038e:	2b47      	cmp	r3, #71	; 0x47
   10390:	f000 814a 	beq.w	10628 <_svfprintf_r+0x179c>
   10394:	9b07      	ldr	r3, [sp, #28]
   10396:	2b46      	cmp	r3, #70	; 0x46
   10398:	f000 8200 	beq.w	1079c <_svfprintf_r+0x1910>
   1039c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1039e:	9311      	str	r3, [sp, #68]	; 0x44
   103a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   103a2:	9a07      	ldr	r2, [sp, #28]
   103a4:	3b01      	subs	r3, #1
   103a6:	2a41      	cmp	r2, #65	; 0x41
   103a8:	9323      	str	r3, [sp, #140]	; 0x8c
   103aa:	f000 8223 	beq.w	107f4 <_svfprintf_r+0x1968>
   103ae:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   103b2:	2100      	movs	r1, #0
   103b4:	2b00      	cmp	r3, #0
   103b6:	bfb8      	it	lt
   103b8:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
   103ba:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   103be:	bfba      	itte	lt
   103c0:	f1c3 0301 	rsblt	r3, r3, #1
   103c4:	222d      	movlt	r2, #45	; 0x2d
   103c6:	222b      	movge	r2, #43	; 0x2b
   103c8:	2b09      	cmp	r3, #9
   103ca:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   103ce:	f340 824f 	ble.w	10870 <_svfprintf_r+0x19e4>
   103d2:	f10d 05af 	add.w	r5, sp, #175	; 0xaf
   103d6:	4e61      	ldr	r6, [pc, #388]	; (1055c <_svfprintf_r+0x16d0>)
   103d8:	462a      	mov	r2, r5
   103da:	4610      	mov	r0, r2
   103dc:	fb86 2103 	smull	r2, r1, r6, r3
   103e0:	17da      	asrs	r2, r3, #31
   103e2:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   103e6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   103ea:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   103ee:	3130      	adds	r1, #48	; 0x30
   103f0:	f800 1c01 	strb.w	r1, [r0, #-1]
   103f4:	4619      	mov	r1, r3
   103f6:	2963      	cmp	r1, #99	; 0x63
   103f8:	4613      	mov	r3, r2
   103fa:	f100 32ff 	add.w	r2, r0, #4294967295
   103fe:	dcec      	bgt.n	103da <_svfprintf_r+0x154e>
   10400:	3330      	adds	r3, #48	; 0x30
   10402:	b2d9      	uxtb	r1, r3
   10404:	1e83      	subs	r3, r0, #2
   10406:	429d      	cmp	r5, r3
   10408:	f802 1c01 	strb.w	r1, [r2, #-1]
   1040c:	f240 82e9 	bls.w	109e2 <_svfprintf_r+0x1b56>
   10410:	4613      	mov	r3, r2
   10412:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   10416:	e001      	b.n	1041c <_svfprintf_r+0x1590>
   10418:	f813 1b01 	ldrb.w	r1, [r3], #1
   1041c:	f802 1b01 	strb.w	r1, [r2], #1
   10420:	429d      	cmp	r5, r3
   10422:	d1f9      	bne.n	10418 <_svfprintf_r+0x158c>
   10424:	f10d 03b1 	add.w	r3, sp, #177	; 0xb1
   10428:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   1042c:	1a1b      	subs	r3, r3, r0
   1042e:	4413      	add	r3, r2
   10430:	aa26      	add	r2, sp, #152	; 0x98
   10432:	1a9b      	subs	r3, r3, r2
   10434:	931b      	str	r3, [sp, #108]	; 0x6c
   10436:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10438:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   1043a:	2b01      	cmp	r3, #1
   1043c:	441a      	add	r2, r3
   1043e:	920a      	str	r2, [sp, #40]	; 0x28
   10440:	f340 8249 	ble.w	108d6 <_svfprintf_r+0x1a4a>
   10444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10446:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10448:	4413      	add	r3, r2
   1044a:	930a      	str	r3, [sp, #40]	; 0x28
   1044c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1044e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10450:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   10454:	f443 7b80 	orr.w	fp, r3, #256	; 0x100
   10458:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   1045c:	2300      	movs	r3, #0
   1045e:	9312      	str	r3, [sp, #72]	; 0x48
   10460:	9207      	str	r2, [sp, #28]
   10462:	9316      	str	r3, [sp, #88]	; 0x58
   10464:	9311      	str	r3, [sp, #68]	; 0x44
   10466:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   10468:	2b00      	cmp	r3, #0
   1046a:	f040 80eb 	bne.w	10644 <_svfprintf_r+0x17b8>
   1046e:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10472:	9308      	str	r3, [sp, #32]
   10474:	f7fe beee 	b.w	f254 <_svfprintf_r+0x3c8>
   10478:	4620      	mov	r0, r4
   1047a:	970e      	str	r7, [sp, #56]	; 0x38
   1047c:	f7fd ff60 	bl	e340 <strlen>
   10480:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10482:	9308      	str	r3, [sp, #32]
   10484:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   10488:	9312      	str	r3, [sp, #72]	; 0x48
   1048a:	9316      	str	r3, [sp, #88]	; 0x58
   1048c:	930d      	str	r3, [sp, #52]	; 0x34
   1048e:	2373      	movs	r3, #115	; 0x73
   10490:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10494:	900a      	str	r0, [sp, #40]	; 0x28
   10496:	9107      	str	r1, [sp, #28]
   10498:	9310      	str	r3, [sp, #64]	; 0x40
   1049a:	f7fe bedb 	b.w	f254 <_svfprintf_r+0x3c8>
   1049e:	990c      	ldr	r1, [sp, #48]	; 0x30
   104a0:	aa2c      	add	r2, sp, #176	; 0xb0
   104a2:	4650      	mov	r0, sl
   104a4:	f001 fd5c 	bl	11f60 <__ssprint_r>
   104a8:	f7fe bdf8 	b.w	f09c <_svfprintf_r+0x210>
   104ac:	1c59      	adds	r1, r3, #1
   104ae:	4650      	mov	r0, sl
   104b0:	f7fc ffa2 	bl	d3f8 <_malloc_r>
   104b4:	4604      	mov	r4, r0
   104b6:	2800      	cmp	r0, #0
   104b8:	f000 81b0 	beq.w	1081c <_svfprintf_r+0x1990>
   104bc:	900d      	str	r0, [sp, #52]	; 0x34
   104be:	e6cf      	b.n	10260 <_svfprintf_r+0x13d4>
   104c0:	990c      	ldr	r1, [sp, #48]	; 0x30
   104c2:	aa2c      	add	r2, sp, #176	; 0xb0
   104c4:	4650      	mov	r0, sl
   104c6:	f001 fd4b 	bl	11f60 <__ssprint_r>
   104ca:	2800      	cmp	r0, #0
   104cc:	f47f a949 	bne.w	f762 <_svfprintf_r+0x8d6>
   104d0:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   104d2:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   104d6:	f7ff ba60 	b.w	f99a <_svfprintf_r+0xb0e>
   104da:	990c      	ldr	r1, [sp, #48]	; 0x30
   104dc:	aa2c      	add	r2, sp, #176	; 0xb0
   104de:	4650      	mov	r0, sl
   104e0:	f001 fd3e 	bl	11f60 <__ssprint_r>
   104e4:	2800      	cmp	r0, #0
   104e6:	f47f a93c 	bne.w	f762 <_svfprintf_r+0x8d6>
   104ea:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   104ee:	9923      	ldr	r1, [sp, #140]	; 0x8c
   104f0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   104f4:	e63d      	b.n	10172 <_svfprintf_r+0x12e6>
   104f6:	2306      	movs	r3, #6
   104f8:	9308      	str	r3, [sp, #32]
   104fa:	f7ff bba0 	b.w	fc3e <_svfprintf_r+0xdb2>
   104fe:	9b08      	ldr	r3, [sp, #32]
   10500:	3301      	adds	r3, #1
   10502:	930a      	str	r3, [sp, #40]	; 0x28
   10504:	2302      	movs	r3, #2
   10506:	e719      	b.n	1033c <_svfprintf_r+0x14b0>
   10508:	9b08      	ldr	r3, [sp, #32]
   1050a:	930a      	str	r3, [sp, #40]	; 0x28
   1050c:	2303      	movs	r3, #3
   1050e:	e715      	b.n	1033c <_svfprintf_r+0x14b0>
   10510:	4638      	mov	r0, r7
   10512:	4631      	mov	r1, r6
   10514:	aa23      	add	r2, sp, #140	; 0x8c
   10516:	f000 fc13 	bl	10d40 <frexp>
   1051a:	2200      	movs	r2, #0
   1051c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   10520:	f003 f9ba 	bl	13898 <__aeabi_dmul>
   10524:	2200      	movs	r2, #0
   10526:	2300      	movs	r3, #0
   10528:	4606      	mov	r6, r0
   1052a:	460f      	mov	r7, r1
   1052c:	f7fc fbda 	bl	cce4 <__aeabi_dcmpeq>
   10530:	b108      	cbz	r0, 10536 <_svfprintf_r+0x16aa>
   10532:	2301      	movs	r3, #1
   10534:	9323      	str	r3, [sp, #140]	; 0x8c
   10536:	4b0a      	ldr	r3, [pc, #40]	; (10560 <_svfprintf_r+0x16d4>)
   10538:	930a      	str	r3, [sp, #40]	; 0x28
   1053a:	9b08      	ldr	r3, [sp, #32]
   1053c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   10540:	3b01      	subs	r3, #1
   10542:	e9cd 8b11 	strd	r8, fp, [sp, #68]	; 0x44
   10546:	4625      	mov	r5, r4
   10548:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   1054c:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
   10550:	4698      	mov	r8, r3
   10552:	941f      	str	r4, [sp, #124]	; 0x7c
   10554:	e00d      	b.n	10572 <_svfprintf_r+0x16e6>
   10556:	bf00      	nop
   10558:	cccccccd 	.word	0xcccccccd
   1055c:	66666667 	.word	0x66666667
   10560:	000159e8 	.word	0x000159e8
   10564:	2200      	movs	r2, #0
   10566:	2300      	movs	r3, #0
   10568:	f108 38ff 	add.w	r8, r8, #4294967295
   1056c:	f7fc fbba 	bl	cce4 <__aeabi_dcmpeq>
   10570:	b9e8      	cbnz	r0, 105ae <_svfprintf_r+0x1722>
   10572:	4bae      	ldr	r3, [pc, #696]	; (1082c <_svfprintf_r+0x19a0>)
   10574:	2200      	movs	r2, #0
   10576:	4630      	mov	r0, r6
   10578:	4639      	mov	r1, r7
   1057a:	f003 f98d 	bl	13898 <__aeabi_dmul>
   1057e:	460f      	mov	r7, r1
   10580:	4606      	mov	r6, r0
   10582:	f003 fb9b 	bl	13cbc <__aeabi_d2iz>
   10586:	4604      	mov	r4, r0
   10588:	f7fc faec 	bl	cb64 <__aeabi_i2d>
   1058c:	460b      	mov	r3, r1
   1058e:	4602      	mov	r2, r0
   10590:	4639      	mov	r1, r7
   10592:	4630      	mov	r0, r6
   10594:	f7fc f998 	bl	c8c8 <__aeabi_dsub>
   10598:	f81b 3004 	ldrb.w	r3, [fp, r4]
   1059c:	f1b8 3fff 	cmp.w	r8, #4294967295
   105a0:	46aa      	mov	sl, r5
   105a2:	46c1      	mov	r9, r8
   105a4:	f805 3b01 	strb.w	r3, [r5], #1
   105a8:	4606      	mov	r6, r0
   105aa:	460f      	mov	r7, r1
   105ac:	d1da      	bne.n	10564 <_svfprintf_r+0x16d8>
   105ae:	4ba0      	ldr	r3, [pc, #640]	; (10830 <_svfprintf_r+0x19a4>)
   105b0:	2200      	movs	r2, #0
   105b2:	4630      	mov	r0, r6
   105b4:	4639      	mov	r1, r7
   105b6:	e9dd 8b11 	ldrd	r8, fp, [sp, #68]	; 0x44
   105ba:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
   105be:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
   105c2:	e9cd a412 	strd	sl, r4, [sp, #72]	; 0x48
   105c6:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   105ca:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   105cc:	f7fc fbb2 	bl	cd34 <__aeabi_dcmpgt>
   105d0:	2800      	cmp	r0, #0
   105d2:	f040 8131 	bne.w	10838 <_svfprintf_r+0x19ac>
   105d6:	4b96      	ldr	r3, [pc, #600]	; (10830 <_svfprintf_r+0x19a4>)
   105d8:	4630      	mov	r0, r6
   105da:	4639      	mov	r1, r7
   105dc:	2200      	movs	r2, #0
   105de:	f7fc fb81 	bl	cce4 <__aeabi_dcmpeq>
   105e2:	b118      	cbz	r0, 105ec <_svfprintf_r+0x1760>
   105e4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   105e6:	07de      	lsls	r6, r3, #31
   105e8:	f100 8126 	bmi.w	10838 <_svfprintf_r+0x19ac>
   105ec:	9b11      	ldr	r3, [sp, #68]	; 0x44
   105ee:	2b00      	cmp	r3, #0
   105f0:	db07      	blt.n	10602 <_svfprintf_r+0x1776>
   105f2:	9b11      	ldr	r3, [sp, #68]	; 0x44
   105f4:	3301      	adds	r3, #1
   105f6:	442b      	add	r3, r5
   105f8:	2230      	movs	r2, #48	; 0x30
   105fa:	f805 2b01 	strb.w	r2, [r5], #1
   105fe:	42ab      	cmp	r3, r5
   10600:	d1fb      	bne.n	105fa <_svfprintf_r+0x176e>
   10602:	1b2b      	subs	r3, r5, r4
   10604:	9313      	str	r3, [sp, #76]	; 0x4c
   10606:	e6c1      	b.n	1038c <_svfprintf_r+0x1500>
   10608:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1060a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1060c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   10610:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   10614:	971a      	str	r7, [sp, #104]	; 0x68
   10616:	18e3      	adds	r3, r4, r3
   10618:	429d      	cmp	r5, r3
   1061a:	bf28      	it	cs
   1061c:	461d      	movcs	r5, r3
   1061e:	4691      	mov	r9, r2
   10620:	460e      	mov	r6, r1
   10622:	950a      	str	r5, [sp, #40]	; 0x28
   10624:	f7ff b9c0 	b.w	f9a8 <_svfprintf_r+0xb1c>
   10628:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1062a:	9311      	str	r3, [sp, #68]	; 0x44
   1062c:	1cdd      	adds	r5, r3, #3
   1062e:	db02      	blt.n	10636 <_svfprintf_r+0x17aa>
   10630:	9a08      	ldr	r2, [sp, #32]
   10632:	4293      	cmp	r3, r2
   10634:	dd19      	ble.n	1066a <_svfprintf_r+0x17de>
   10636:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10638:	3b02      	subs	r3, #2
   1063a:	9310      	str	r3, [sp, #64]	; 0x40
   1063c:	f023 0320 	bic.w	r3, r3, #32
   10640:	9307      	str	r3, [sp, #28]
   10642:	e6ad      	b.n	103a0 <_svfprintf_r+0x1514>
   10644:	222d      	movs	r2, #45	; 0x2d
   10646:	2300      	movs	r3, #0
   10648:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   1064c:	9308      	str	r3, [sp, #32]
   1064e:	f7fe be04 	b.w	f25a <_svfprintf_r+0x3ce>
   10652:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   10654:	42ab      	cmp	r3, r5
   10656:	f4bf ae97 	bcs.w	10388 <_svfprintf_r+0x14fc>
   1065a:	2130      	movs	r1, #48	; 0x30
   1065c:	1c5a      	adds	r2, r3, #1
   1065e:	922a      	str	r2, [sp, #168]	; 0xa8
   10660:	7019      	strb	r1, [r3, #0]
   10662:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   10664:	429d      	cmp	r5, r3
   10666:	d8f9      	bhi.n	1065c <_svfprintf_r+0x17d0>
   10668:	e68e      	b.n	10388 <_svfprintf_r+0x14fc>
   1066a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1066c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   1066e:	4293      	cmp	r3, r2
   10670:	f2c0 80c5 	blt.w	107fe <_svfprintf_r+0x1972>
   10674:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10676:	f013 0f01 	tst.w	r3, #1
   1067a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1067c:	f000 814d 	beq.w	1091a <_svfprintf_r+0x1a8e>
   10680:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10682:	4413      	add	r3, r2
   10684:	930a      	str	r3, [sp, #40]	; 0x28
   10686:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10688:	0559      	lsls	r1, r3, #21
   1068a:	d503      	bpl.n	10694 <_svfprintf_r+0x1808>
   1068c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1068e:	2b00      	cmp	r3, #0
   10690:	f300 8156 	bgt.w	10940 <_svfprintf_r+0x1ab4>
   10694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10696:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1069a:	9307      	str	r3, [sp, #28]
   1069c:	2367      	movs	r3, #103	; 0x67
   1069e:	9310      	str	r3, [sp, #64]	; 0x40
   106a0:	2300      	movs	r3, #0
   106a2:	9312      	str	r3, [sp, #72]	; 0x48
   106a4:	9316      	str	r3, [sp, #88]	; 0x58
   106a6:	e6de      	b.n	10466 <_svfprintf_r+0x15da>
   106a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   106aa:	07db      	lsls	r3, r3, #31
   106ac:	f100 809f 	bmi.w	107ee <_svfprintf_r+0x1962>
   106b0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   106b2:	e669      	b.n	10388 <_svfprintf_r+0x14fc>
   106b4:	aa2c      	add	r2, sp, #176	; 0xb0
   106b6:	4641      	mov	r1, r8
   106b8:	4650      	mov	r0, sl
   106ba:	f001 fc51 	bl	11f60 <__ssprint_r>
   106be:	2800      	cmp	r0, #0
   106c0:	f47f a84f 	bne.w	f762 <_svfprintf_r+0x8d6>
   106c4:	7838      	ldrb	r0, [r7, #0]
   106c6:	992e      	ldr	r1, [sp, #184]	; 0xb8
   106c8:	aa2f      	add	r2, sp, #188	; 0xbc
   106ca:	4405      	add	r5, r0
   106cc:	f7ff bbc1 	b.w	fe52 <_svfprintf_r+0xfc6>
   106d0:	2378      	movs	r3, #120	; 0x78
   106d2:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
   106d6:	2330      	movs	r3, #48	; 0x30
   106d8:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
   106dc:	f04b 0302 	orr.w	r3, fp, #2
   106e0:	930f      	str	r3, [sp, #60]	; 0x3c
   106e2:	9b08      	ldr	r3, [sp, #32]
   106e4:	2b63      	cmp	r3, #99	; 0x63
   106e6:	f300 80ed 	bgt.w	108c4 <_svfprintf_r+0x1a38>
   106ea:	2300      	movs	r3, #0
   106ec:	930d      	str	r3, [sp, #52]	; 0x34
   106ee:	ac3f      	add	r4, sp, #252	; 0xfc
   106f0:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   106f4:	4613      	mov	r3, r2
   106f6:	2b00      	cmp	r3, #0
   106f8:	f44b 7b81 	orr.w	fp, fp, #258	; 0x102
   106fc:	db67      	blt.n	107ce <_svfprintf_r+0x1942>
   106fe:	461e      	mov	r6, r3
   10700:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10702:	f023 0320 	bic.w	r3, r3, #32
   10706:	9307      	str	r3, [sp, #28]
   10708:	2300      	movs	r3, #0
   1070a:	460f      	mov	r7, r1
   1070c:	931e      	str	r3, [sp, #120]	; 0x78
   1070e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10710:	2b61      	cmp	r3, #97	; 0x61
   10712:	f47f aaa4 	bne.w	fc5e <_svfprintf_r+0xdd2>
   10716:	4638      	mov	r0, r7
   10718:	4631      	mov	r1, r6
   1071a:	aa23      	add	r2, sp, #140	; 0x8c
   1071c:	f000 fb10 	bl	10d40 <frexp>
   10720:	2200      	movs	r2, #0
   10722:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   10726:	f003 f8b7 	bl	13898 <__aeabi_dmul>
   1072a:	2200      	movs	r2, #0
   1072c:	2300      	movs	r3, #0
   1072e:	4606      	mov	r6, r0
   10730:	460f      	mov	r7, r1
   10732:	f7fc fad7 	bl	cce4 <__aeabi_dcmpeq>
   10736:	b108      	cbz	r0, 1073c <_svfprintf_r+0x18b0>
   10738:	2301      	movs	r3, #1
   1073a:	9323      	str	r3, [sp, #140]	; 0x8c
   1073c:	4b3d      	ldr	r3, [pc, #244]	; (10834 <_svfprintf_r+0x19a8>)
   1073e:	930a      	str	r3, [sp, #40]	; 0x28
   10740:	e6fb      	b.n	1053a <_svfprintf_r+0x16ae>
   10742:	990c      	ldr	r1, [sp, #48]	; 0x30
   10744:	aa2c      	add	r2, sp, #176	; 0xb0
   10746:	4650      	mov	r0, sl
   10748:	f001 fc0a 	bl	11f60 <__ssprint_r>
   1074c:	2800      	cmp	r0, #0
   1074e:	f47f a808 	bne.w	f762 <_svfprintf_r+0x8d6>
   10752:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10754:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10758:	f7ff b918 	b.w	f98c <_svfprintf_r+0xb00>
   1075c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1075e:	aa2c      	add	r2, sp, #176	; 0xb0
   10760:	4650      	mov	r0, sl
   10762:	f001 fbfd 	bl	11f60 <__ssprint_r>
   10766:	2800      	cmp	r0, #0
   10768:	f47e affb 	bne.w	f762 <_svfprintf_r+0x8d6>
   1076c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1076e:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10770:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10774:	f7ff b92e 	b.w	f9d4 <_svfprintf_r+0xb48>
   10778:	2358      	movs	r3, #88	; 0x58
   1077a:	e7aa      	b.n	106d2 <_svfprintf_r+0x1846>
   1077c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1077e:	aa2c      	add	r2, sp, #176	; 0xb0
   10780:	4650      	mov	r0, sl
   10782:	f001 fbed 	bl	11f60 <__ssprint_r>
   10786:	2800      	cmp	r0, #0
   10788:	f47e afeb 	bne.w	f762 <_svfprintf_r+0x8d6>
   1078c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   1078e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10790:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10792:	1b1c      	subs	r4, r3, r4
   10794:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10798:	f7ff b934 	b.w	fa04 <_svfprintf_r+0xb78>
   1079c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1079e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   107a0:	9211      	str	r2, [sp, #68]	; 0x44
   107a2:	2a00      	cmp	r2, #0
   107a4:	f003 0301 	and.w	r3, r3, #1
   107a8:	f340 8108 	ble.w	109bc <_svfprintf_r+0x1b30>
   107ac:	9908      	ldr	r1, [sp, #32]
   107ae:	430b      	orrs	r3, r1
   107b0:	f040 80fd 	bne.w	109ae <_svfprintf_r+0x1b22>
   107b4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   107b6:	930a      	str	r3, [sp, #40]	; 0x28
   107b8:	2366      	movs	r3, #102	; 0x66
   107ba:	9310      	str	r3, [sp, #64]	; 0x40
   107bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   107be:	055a      	lsls	r2, r3, #21
   107c0:	f100 80c0 	bmi.w	10944 <_svfprintf_r+0x1ab8>
   107c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   107c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   107ca:	9307      	str	r3, [sp, #28]
   107cc:	e768      	b.n	106a0 <_svfprintf_r+0x1814>
   107ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
   107d0:	f023 0320 	bic.w	r3, r3, #32
   107d4:	9307      	str	r3, [sp, #28]
   107d6:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   107da:	f103 4600 	add.w	r6, r3, #2147483648	; 0x80000000
   107de:	232d      	movs	r3, #45	; 0x2d
   107e0:	4617      	mov	r7, r2
   107e2:	931e      	str	r3, [sp, #120]	; 0x78
   107e4:	e793      	b.n	1070e <_svfprintf_r+0x1882>
   107e6:	2200      	movs	r2, #0
   107e8:	9208      	str	r2, [sp, #32]
   107ea:	f7fe bbaa 	b.w	ef42 <_svfprintf_r+0xb6>
   107ee:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   107f0:	4425      	add	r5, r4
   107f2:	e5bf      	b.n	10374 <_svfprintf_r+0x14e8>
   107f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   107f6:	320f      	adds	r2, #15
   107f8:	b2d2      	uxtb	r2, r2
   107fa:	2101      	movs	r1, #1
   107fc:	e5da      	b.n	103b4 <_svfprintf_r+0x1528>
   107fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10800:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10802:	189a      	adds	r2, r3, r2
   10804:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10806:	920a      	str	r2, [sp, #40]	; 0x28
   10808:	2b00      	cmp	r3, #0
   1080a:	f340 808f 	ble.w	1092c <_svfprintf_r+0x1aa0>
   1080e:	2367      	movs	r3, #103	; 0x67
   10810:	9310      	str	r3, [sp, #64]	; 0x40
   10812:	e7d3      	b.n	107bc <_svfprintf_r+0x1930>
   10814:	469b      	mov	fp, r3
   10816:	2300      	movs	r3, #0
   10818:	930d      	str	r3, [sp, #52]	; 0x34
   1081a:	e7dc      	b.n	107d6 <_svfprintf_r+0x194a>
   1081c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1081e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   10822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10826:	8193      	strh	r3, [r2, #12]
   10828:	f7fe bc3b 	b.w	f0a2 <_svfprintf_r+0x216>
   1082c:	40300000 	.word	0x40300000
   10830:	3fe00000 	.word	0x3fe00000
   10834:	000159d4 	.word	0x000159d4
   10838:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1083a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1083c:	932a      	str	r3, [sp, #168]	; 0xa8
   1083e:	7bd1      	ldrb	r1, [r2, #15]
   10840:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   10844:	428b      	cmp	r3, r1
   10846:	462a      	mov	r2, r5
   10848:	d109      	bne.n	1085e <_svfprintf_r+0x19d2>
   1084a:	2030      	movs	r0, #48	; 0x30
   1084c:	f802 0c01 	strb.w	r0, [r2, #-1]
   10850:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   10852:	1e53      	subs	r3, r2, #1
   10854:	932a      	str	r3, [sp, #168]	; 0xa8
   10856:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   1085a:	4299      	cmp	r1, r3
   1085c:	d0f6      	beq.n	1084c <_svfprintf_r+0x19c0>
   1085e:	2b39      	cmp	r3, #57	; 0x39
   10860:	bf0b      	itete	eq
   10862:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   10864:	3301      	addne	r3, #1
   10866:	7a9b      	ldrbeq	r3, [r3, #10]
   10868:	b2db      	uxtbne	r3, r3
   1086a:	f802 3c01 	strb.w	r3, [r2, #-1]
   1086e:	e6c8      	b.n	10602 <_svfprintf_r+0x1776>
   10870:	2900      	cmp	r1, #0
   10872:	f040 808c 	bne.w	1098e <_svfprintf_r+0x1b02>
   10876:	2230      	movs	r2, #48	; 0x30
   10878:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   1087c:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   10880:	3330      	adds	r3, #48	; 0x30
   10882:	f802 3b01 	strb.w	r3, [r2], #1
   10886:	ab26      	add	r3, sp, #152	; 0x98
   10888:	1ad3      	subs	r3, r2, r3
   1088a:	931b      	str	r3, [sp, #108]	; 0x6c
   1088c:	e5d3      	b.n	10436 <_svfprintf_r+0x15aa>
   1088e:	464c      	mov	r4, r9
   10890:	4689      	mov	r9, r1
   10892:	3301      	adds	r3, #1
   10894:	443a      	add	r2, r7
   10896:	2b07      	cmp	r3, #7
   10898:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   1089c:	f8c9 5000 	str.w	r5, [r9]
   108a0:	f8c9 7004 	str.w	r7, [r9, #4]
   108a4:	f77f abab 	ble.w	fffe <_svfprintf_r+0x1172>
   108a8:	990c      	ldr	r1, [sp, #48]	; 0x30
   108aa:	aa2c      	add	r2, sp, #176	; 0xb0
   108ac:	4650      	mov	r0, sl
   108ae:	f001 fb57 	bl	11f60 <__ssprint_r>
   108b2:	2800      	cmp	r0, #0
   108b4:	f47e af55 	bne.w	f762 <_svfprintf_r+0x8d6>
   108b8:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   108bc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   108c0:	f7ff bb9f 	b.w	10002 <_svfprintf_r+0x1176>
   108c4:	1c59      	adds	r1, r3, #1
   108c6:	4650      	mov	r0, sl
   108c8:	f7fc fd96 	bl	d3f8 <_malloc_r>
   108cc:	4604      	mov	r4, r0
   108ce:	2800      	cmp	r0, #0
   108d0:	d0a4      	beq.n	1081c <_svfprintf_r+0x1990>
   108d2:	900d      	str	r0, [sp, #52]	; 0x34
   108d4:	e70c      	b.n	106f0 <_svfprintf_r+0x1864>
   108d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   108d8:	07d8      	lsls	r0, r3, #31
   108da:	f57f adb7 	bpl.w	1044c <_svfprintf_r+0x15c0>
   108de:	e5b1      	b.n	10444 <_svfprintf_r+0x15b8>
   108e0:	4638      	mov	r0, r7
   108e2:	4631      	mov	r1, r6
   108e4:	2200      	movs	r2, #0
   108e6:	2300      	movs	r3, #0
   108e8:	f7fc f9fc 	bl	cce4 <__aeabi_dcmpeq>
   108ec:	2800      	cmp	r0, #0
   108ee:	f47f ad3f 	bne.w	10370 <_svfprintf_r+0x14e4>
   108f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   108f4:	f1c3 0301 	rsb	r3, r3, #1
   108f8:	9323      	str	r3, [sp, #140]	; 0x8c
   108fa:	e53a      	b.n	10372 <_svfprintf_r+0x14e6>
   108fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   108fe:	4c4a      	ldr	r4, [pc, #296]	; (10a28 <_svfprintf_r+0x1b9c>)
   10900:	2b00      	cmp	r3, #0
   10902:	bfb4      	ite	lt
   10904:	222d      	movlt	r2, #45	; 0x2d
   10906:	f89d 2087 	ldrbge.w	r2, [sp, #135]	; 0x87
   1090a:	4b48      	ldr	r3, [pc, #288]	; (10a2c <_svfprintf_r+0x1ba0>)
   1090c:	bfb8      	it	lt
   1090e:	f88d 2087 	strblt.w	r2, [sp, #135]	; 0x87
   10912:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10916:	f7fe bc90 	b.w	f23a <_svfprintf_r+0x3ae>
   1091a:	930a      	str	r3, [sp, #40]	; 0x28
   1091c:	e6b3      	b.n	10686 <_svfprintf_r+0x17fa>
   1091e:	9b08      	ldr	r3, [sp, #32]
   10920:	f8dd 801c 	ldr.w	r8, [sp, #28]
   10924:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   10928:	930a      	str	r3, [sp, #40]	; 0x28
   1092a:	e490      	b.n	1024e <_svfprintf_r+0x13c2>
   1092c:	f1c3 0301 	rsb	r3, r3, #1
   10930:	441a      	add	r2, r3
   10932:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10936:	9307      	str	r3, [sp, #28]
   10938:	2367      	movs	r3, #103	; 0x67
   1093a:	920a      	str	r2, [sp, #40]	; 0x28
   1093c:	9310      	str	r3, [sp, #64]	; 0x40
   1093e:	e6af      	b.n	106a0 <_svfprintf_r+0x1814>
   10940:	2367      	movs	r3, #103	; 0x67
   10942:	9310      	str	r3, [sp, #64]	; 0x40
   10944:	991a      	ldr	r1, [sp, #104]	; 0x68
   10946:	780b      	ldrb	r3, [r1, #0]
   10948:	2bff      	cmp	r3, #255	; 0xff
   1094a:	d059      	beq.n	10a00 <_svfprintf_r+0x1b74>
   1094c:	2500      	movs	r5, #0
   1094e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   10950:	4628      	mov	r0, r5
   10952:	e003      	b.n	1095c <_svfprintf_r+0x1ad0>
   10954:	3001      	adds	r0, #1
   10956:	3101      	adds	r1, #1
   10958:	2bff      	cmp	r3, #255	; 0xff
   1095a:	d008      	beq.n	1096e <_svfprintf_r+0x1ae2>
   1095c:	4293      	cmp	r3, r2
   1095e:	da06      	bge.n	1096e <_svfprintf_r+0x1ae2>
   10960:	1ad2      	subs	r2, r2, r3
   10962:	784b      	ldrb	r3, [r1, #1]
   10964:	2b00      	cmp	r3, #0
   10966:	d1f5      	bne.n	10954 <_svfprintf_r+0x1ac8>
   10968:	780b      	ldrb	r3, [r1, #0]
   1096a:	3501      	adds	r5, #1
   1096c:	e7f4      	b.n	10958 <_svfprintf_r+0x1acc>
   1096e:	9211      	str	r2, [sp, #68]	; 0x44
   10970:	911a      	str	r1, [sp, #104]	; 0x68
   10972:	9016      	str	r0, [sp, #88]	; 0x58
   10974:	9512      	str	r5, [sp, #72]	; 0x48
   10976:	9a12      	ldr	r2, [sp, #72]	; 0x48
   10978:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1097a:	991d      	ldr	r1, [sp, #116]	; 0x74
   1097c:	4413      	add	r3, r2
   1097e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10980:	fb01 2303 	mla	r3, r1, r3, r2
   10984:	930a      	str	r3, [sp, #40]	; 0x28
   10986:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1098a:	9307      	str	r3, [sp, #28]
   1098c:	e56b      	b.n	10466 <_svfprintf_r+0x15da>
   1098e:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   10992:	e775      	b.n	10880 <_svfprintf_r+0x19f4>
   10994:	9b08      	ldr	r3, [sp, #32]
   10996:	9307      	str	r3, [sp, #28]
   10998:	930a      	str	r3, [sp, #40]	; 0x28
   1099a:	2373      	movs	r3, #115	; 0x73
   1099c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   109a0:	970e      	str	r7, [sp, #56]	; 0x38
   109a2:	9008      	str	r0, [sp, #32]
   109a4:	9012      	str	r0, [sp, #72]	; 0x48
   109a6:	9016      	str	r0, [sp, #88]	; 0x58
   109a8:	9310      	str	r3, [sp, #64]	; 0x40
   109aa:	f7fe bc53 	b.w	f254 <_svfprintf_r+0x3c8>
   109ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   109b0:	18d5      	adds	r5, r2, r3
   109b2:	4429      	add	r1, r5
   109b4:	2366      	movs	r3, #102	; 0x66
   109b6:	910a      	str	r1, [sp, #40]	; 0x28
   109b8:	9310      	str	r3, [sp, #64]	; 0x40
   109ba:	e6ff      	b.n	107bc <_svfprintf_r+0x1930>
   109bc:	9a08      	ldr	r2, [sp, #32]
   109be:	4313      	orrs	r3, r2
   109c0:	d105      	bne.n	109ce <_svfprintf_r+0x1b42>
   109c2:	2301      	movs	r3, #1
   109c4:	2266      	movs	r2, #102	; 0x66
   109c6:	9307      	str	r3, [sp, #28]
   109c8:	9210      	str	r2, [sp, #64]	; 0x40
   109ca:	930a      	str	r3, [sp, #40]	; 0x28
   109cc:	e668      	b.n	106a0 <_svfprintf_r+0x1814>
   109ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   109d0:	1c5d      	adds	r5, r3, #1
   109d2:	442a      	add	r2, r5
   109d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   109d8:	9307      	str	r3, [sp, #28]
   109da:	2366      	movs	r3, #102	; 0x66
   109dc:	920a      	str	r2, [sp, #40]	; 0x28
   109de:	9310      	str	r3, [sp, #64]	; 0x40
   109e0:	e65e      	b.n	106a0 <_svfprintf_r+0x1814>
   109e2:	2302      	movs	r3, #2
   109e4:	931b      	str	r3, [sp, #108]	; 0x6c
   109e6:	e526      	b.n	10436 <_svfprintf_r+0x15aa>
   109e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   109ea:	f898 3001 	ldrb.w	r3, [r8, #1]
   109ee:	4688      	mov	r8, r1
   109f0:	f852 1b04 	ldr.w	r1, [r2], #4
   109f4:	920e      	str	r2, [sp, #56]	; 0x38
   109f6:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   109fa:	9108      	str	r1, [sp, #32]
   109fc:	f7fe ba9f 	b.w	ef3e <_svfprintf_r+0xb2>
   10a00:	2300      	movs	r3, #0
   10a02:	9312      	str	r3, [sp, #72]	; 0x48
   10a04:	9316      	str	r3, [sp, #88]	; 0x58
   10a06:	e7b6      	b.n	10976 <_svfprintf_r+0x1aea>
   10a08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   10a0a:	8993      	ldrh	r3, [r2, #12]
   10a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10a10:	8193      	strh	r3, [r2, #12]
   10a12:	f7fe bea6 	b.w	f762 <_svfprintf_r+0x8d6>
   10a16:	230c      	movs	r3, #12
   10a18:	f8ca 3000 	str.w	r3, [sl]
   10a1c:	f04f 33ff 	mov.w	r3, #4294967295
   10a20:	9309      	str	r3, [sp, #36]	; 0x24
   10a22:	f7fe bb45 	b.w	f0b0 <_svfprintf_r+0x224>
   10a26:	bf00      	nop
   10a28:	000159d0 	.word	0x000159d0
   10a2c:	00015540 	.word	0x00015540

00010a30 <_fclose_r>:
   10a30:	b570      	push	{r4, r5, r6, lr}
   10a32:	2900      	cmp	r1, #0
   10a34:	d04b      	beq.n	10ace <_fclose_r+0x9e>
   10a36:	4606      	mov	r6, r0
   10a38:	460c      	mov	r4, r1
   10a3a:	b110      	cbz	r0, 10a42 <_fclose_r+0x12>
   10a3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10a3e:	2b00      	cmp	r3, #0
   10a40:	d048      	beq.n	10ad4 <_fclose_r+0xa4>
   10a42:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10a44:	07d8      	lsls	r0, r3, #31
   10a46:	d534      	bpl.n	10ab2 <_fclose_r+0x82>
   10a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10a4c:	2b00      	cmp	r3, #0
   10a4e:	d03e      	beq.n	10ace <_fclose_r+0x9e>
   10a50:	4621      	mov	r1, r4
   10a52:	4630      	mov	r0, r6
   10a54:	f000 f850 	bl	10af8 <__sflush_r>
   10a58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   10a5a:	4605      	mov	r5, r0
   10a5c:	b133      	cbz	r3, 10a6c <_fclose_r+0x3c>
   10a5e:	69e1      	ldr	r1, [r4, #28]
   10a60:	4630      	mov	r0, r6
   10a62:	4798      	blx	r3
   10a64:	2800      	cmp	r0, #0
   10a66:	bfb8      	it	lt
   10a68:	f04f 35ff 	movlt.w	r5, #4294967295
   10a6c:	89a3      	ldrh	r3, [r4, #12]
   10a6e:	061a      	lsls	r2, r3, #24
   10a70:	d43c      	bmi.n	10aec <_fclose_r+0xbc>
   10a72:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10a74:	b141      	cbz	r1, 10a88 <_fclose_r+0x58>
   10a76:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10a7a:	4299      	cmp	r1, r3
   10a7c:	d002      	beq.n	10a84 <_fclose_r+0x54>
   10a7e:	4630      	mov	r0, r6
   10a80:	f7fd fd2c 	bl	e4dc <_free_r>
   10a84:	2300      	movs	r3, #0
   10a86:	6323      	str	r3, [r4, #48]	; 0x30
   10a88:	6c61      	ldr	r1, [r4, #68]	; 0x44
   10a8a:	b121      	cbz	r1, 10a96 <_fclose_r+0x66>
   10a8c:	4630      	mov	r0, r6
   10a8e:	f7fd fd25 	bl	e4dc <_free_r>
   10a92:	2300      	movs	r3, #0
   10a94:	6463      	str	r3, [r4, #68]	; 0x44
   10a96:	f7fd fa0b 	bl	deb0 <__sfp_lock_acquire>
   10a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10a9c:	2200      	movs	r2, #0
   10a9e:	07db      	lsls	r3, r3, #31
   10aa0:	81a2      	strh	r2, [r4, #12]
   10aa2:	d51f      	bpl.n	10ae4 <_fclose_r+0xb4>
   10aa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10aa6:	f7fd fc31 	bl	e30c <__retarget_lock_close_recursive>
   10aaa:	f7fd fa07 	bl	debc <__sfp_lock_release>
   10aae:	4628      	mov	r0, r5
   10ab0:	bd70      	pop	{r4, r5, r6, pc}
   10ab2:	89a3      	ldrh	r3, [r4, #12]
   10ab4:	0599      	lsls	r1, r3, #22
   10ab6:	d4cb      	bmi.n	10a50 <_fclose_r+0x20>
   10ab8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10aba:	f7fd fc29 	bl	e310 <__retarget_lock_acquire_recursive>
   10abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10ac2:	2b00      	cmp	r3, #0
   10ac4:	d1c4      	bne.n	10a50 <_fclose_r+0x20>
   10ac6:	6e65      	ldr	r5, [r4, #100]	; 0x64
   10ac8:	f015 0501 	ands.w	r5, r5, #1
   10acc:	d005      	beq.n	10ada <_fclose_r+0xaa>
   10ace:	2500      	movs	r5, #0
   10ad0:	4628      	mov	r0, r5
   10ad2:	bd70      	pop	{r4, r5, r6, pc}
   10ad4:	f7fd f9ce 	bl	de74 <__sinit>
   10ad8:	e7b3      	b.n	10a42 <_fclose_r+0x12>
   10ada:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10adc:	f7fd fc1a 	bl	e314 <__retarget_lock_release_recursive>
   10ae0:	4628      	mov	r0, r5
   10ae2:	bd70      	pop	{r4, r5, r6, pc}
   10ae4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10ae6:	f7fd fc15 	bl	e314 <__retarget_lock_release_recursive>
   10aea:	e7db      	b.n	10aa4 <_fclose_r+0x74>
   10aec:	6921      	ldr	r1, [r4, #16]
   10aee:	4630      	mov	r0, r6
   10af0:	f7fd fcf4 	bl	e4dc <_free_r>
   10af4:	e7bd      	b.n	10a72 <_fclose_r+0x42>
   10af6:	bf00      	nop

00010af8 <__sflush_r>:
   10af8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   10afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10afe:	460c      	mov	r4, r1
   10b00:	0711      	lsls	r1, r2, #28
   10b02:	4607      	mov	r7, r0
   10b04:	d442      	bmi.n	10b8c <__sflush_r+0x94>
   10b06:	6863      	ldr	r3, [r4, #4]
   10b08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   10b0c:	2b00      	cmp	r3, #0
   10b0e:	81a2      	strh	r2, [r4, #12]
   10b10:	dd59      	ble.n	10bc6 <__sflush_r+0xce>
   10b12:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10b14:	2d00      	cmp	r5, #0
   10b16:	d054      	beq.n	10bc2 <__sflush_r+0xca>
   10b18:	2300      	movs	r3, #0
   10b1a:	683e      	ldr	r6, [r7, #0]
   10b1c:	603b      	str	r3, [r7, #0]
   10b1e:	b293      	uxth	r3, r2
   10b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   10b24:	d153      	bne.n	10bce <__sflush_r+0xd6>
   10b26:	69e1      	ldr	r1, [r4, #28]
   10b28:	2301      	movs	r3, #1
   10b2a:	4638      	mov	r0, r7
   10b2c:	47a8      	blx	r5
   10b2e:	1c42      	adds	r2, r0, #1
   10b30:	d063      	beq.n	10bfa <__sflush_r+0x102>
   10b32:	89a3      	ldrh	r3, [r4, #12]
   10b34:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10b36:	075b      	lsls	r3, r3, #29
   10b38:	d505      	bpl.n	10b46 <__sflush_r+0x4e>
   10b3a:	6863      	ldr	r3, [r4, #4]
   10b3c:	1ac0      	subs	r0, r0, r3
   10b3e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10b40:	b10b      	cbz	r3, 10b46 <__sflush_r+0x4e>
   10b42:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10b44:	1ac0      	subs	r0, r0, r3
   10b46:	69e1      	ldr	r1, [r4, #28]
   10b48:	4602      	mov	r2, r0
   10b4a:	2300      	movs	r3, #0
   10b4c:	4638      	mov	r0, r7
   10b4e:	47a8      	blx	r5
   10b50:	1c41      	adds	r1, r0, #1
   10b52:	d13e      	bne.n	10bd2 <__sflush_r+0xda>
   10b54:	683b      	ldr	r3, [r7, #0]
   10b56:	2b00      	cmp	r3, #0
   10b58:	d03b      	beq.n	10bd2 <__sflush_r+0xda>
   10b5a:	2b1d      	cmp	r3, #29
   10b5c:	d001      	beq.n	10b62 <__sflush_r+0x6a>
   10b5e:	2b16      	cmp	r3, #22
   10b60:	d152      	bne.n	10c08 <__sflush_r+0x110>
   10b62:	89a3      	ldrh	r3, [r4, #12]
   10b64:	6922      	ldr	r2, [r4, #16]
   10b66:	6022      	str	r2, [r4, #0]
   10b68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10b6c:	2100      	movs	r1, #0
   10b6e:	6061      	str	r1, [r4, #4]
   10b70:	81a3      	strh	r3, [r4, #12]
   10b72:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10b74:	603e      	str	r6, [r7, #0]
   10b76:	b321      	cbz	r1, 10bc2 <__sflush_r+0xca>
   10b78:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10b7c:	4299      	cmp	r1, r3
   10b7e:	d002      	beq.n	10b86 <__sflush_r+0x8e>
   10b80:	4638      	mov	r0, r7
   10b82:	f7fd fcab 	bl	e4dc <_free_r>
   10b86:	2000      	movs	r0, #0
   10b88:	6320      	str	r0, [r4, #48]	; 0x30
   10b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b8c:	6926      	ldr	r6, [r4, #16]
   10b8e:	b1c6      	cbz	r6, 10bc2 <__sflush_r+0xca>
   10b90:	b293      	uxth	r3, r2
   10b92:	6825      	ldr	r5, [r4, #0]
   10b94:	6026      	str	r6, [r4, #0]
   10b96:	079a      	lsls	r2, r3, #30
   10b98:	bf0c      	ite	eq
   10b9a:	6963      	ldreq	r3, [r4, #20]
   10b9c:	2300      	movne	r3, #0
   10b9e:	1bad      	subs	r5, r5, r6
   10ba0:	60a3      	str	r3, [r4, #8]
   10ba2:	e00c      	b.n	10bbe <__sflush_r+0xc6>
   10ba4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   10ba8:	69e1      	ldr	r1, [r4, #28]
   10baa:	462b      	mov	r3, r5
   10bac:	4632      	mov	r2, r6
   10bae:	4638      	mov	r0, r7
   10bb0:	47e0      	blx	ip
   10bb2:	f1b0 0c00 	subs.w	ip, r0, #0
   10bb6:	eba5 050c 	sub.w	r5, r5, ip
   10bba:	4466      	add	r6, ip
   10bbc:	dd16      	ble.n	10bec <__sflush_r+0xf4>
   10bbe:	2d00      	cmp	r5, #0
   10bc0:	dcf0      	bgt.n	10ba4 <__sflush_r+0xac>
   10bc2:	2000      	movs	r0, #0
   10bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10bc6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10bc8:	2b00      	cmp	r3, #0
   10bca:	dca2      	bgt.n	10b12 <__sflush_r+0x1a>
   10bcc:	e7f9      	b.n	10bc2 <__sflush_r+0xca>
   10bce:	6d20      	ldr	r0, [r4, #80]	; 0x50
   10bd0:	e7b1      	b.n	10b36 <__sflush_r+0x3e>
   10bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10bd6:	6922      	ldr	r2, [r4, #16]
   10bd8:	6022      	str	r2, [r4, #0]
   10bda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10bde:	81a3      	strh	r3, [r4, #12]
   10be0:	2200      	movs	r2, #0
   10be2:	04db      	lsls	r3, r3, #19
   10be4:	6062      	str	r2, [r4, #4]
   10be6:	d5c4      	bpl.n	10b72 <__sflush_r+0x7a>
   10be8:	6520      	str	r0, [r4, #80]	; 0x50
   10bea:	e7c2      	b.n	10b72 <__sflush_r+0x7a>
   10bec:	89a3      	ldrh	r3, [r4, #12]
   10bee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10bf2:	f04f 30ff 	mov.w	r0, #4294967295
   10bf6:	81a3      	strh	r3, [r4, #12]
   10bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10bfa:	683b      	ldr	r3, [r7, #0]
   10bfc:	2b00      	cmp	r3, #0
   10bfe:	d098      	beq.n	10b32 <__sflush_r+0x3a>
   10c00:	2b1d      	cmp	r3, #29
   10c02:	d006      	beq.n	10c12 <__sflush_r+0x11a>
   10c04:	2b16      	cmp	r3, #22
   10c06:	d004      	beq.n	10c12 <__sflush_r+0x11a>
   10c08:	89a3      	ldrh	r3, [r4, #12]
   10c0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10c0e:	81a3      	strh	r3, [r4, #12]
   10c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10c12:	603e      	str	r6, [r7, #0]
   10c14:	e7d5      	b.n	10bc2 <__sflush_r+0xca>
   10c16:	bf00      	nop

00010c18 <_fflush_r>:
   10c18:	b538      	push	{r3, r4, r5, lr}
   10c1a:	460c      	mov	r4, r1
   10c1c:	4605      	mov	r5, r0
   10c1e:	b108      	cbz	r0, 10c24 <_fflush_r+0xc>
   10c20:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10c22:	b303      	cbz	r3, 10c66 <_fflush_r+0x4e>
   10c24:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10c28:	b188      	cbz	r0, 10c4e <_fflush_r+0x36>
   10c2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10c2c:	07db      	lsls	r3, r3, #31
   10c2e:	d401      	bmi.n	10c34 <_fflush_r+0x1c>
   10c30:	0581      	lsls	r1, r0, #22
   10c32:	d50f      	bpl.n	10c54 <_fflush_r+0x3c>
   10c34:	4628      	mov	r0, r5
   10c36:	4621      	mov	r1, r4
   10c38:	f7ff ff5e 	bl	10af8 <__sflush_r>
   10c3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10c3e:	07da      	lsls	r2, r3, #31
   10c40:	4605      	mov	r5, r0
   10c42:	d402      	bmi.n	10c4a <_fflush_r+0x32>
   10c44:	89a3      	ldrh	r3, [r4, #12]
   10c46:	059b      	lsls	r3, r3, #22
   10c48:	d508      	bpl.n	10c5c <_fflush_r+0x44>
   10c4a:	4628      	mov	r0, r5
   10c4c:	bd38      	pop	{r3, r4, r5, pc}
   10c4e:	4605      	mov	r5, r0
   10c50:	4628      	mov	r0, r5
   10c52:	bd38      	pop	{r3, r4, r5, pc}
   10c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10c56:	f7fd fb5b 	bl	e310 <__retarget_lock_acquire_recursive>
   10c5a:	e7eb      	b.n	10c34 <_fflush_r+0x1c>
   10c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10c5e:	f7fd fb59 	bl	e314 <__retarget_lock_release_recursive>
   10c62:	4628      	mov	r0, r5
   10c64:	bd38      	pop	{r3, r4, r5, pc}
   10c66:	f7fd f905 	bl	de74 <__sinit>
   10c6a:	e7db      	b.n	10c24 <_fflush_r+0xc>

00010c6c <_localeconv_r>:
   10c6c:	4800      	ldr	r0, [pc, #0]	; (10c70 <_localeconv_r+0x4>)
   10c6e:	4770      	bx	lr
   10c70:	1fff8fc4 	.word	0x1fff8fc4

00010c74 <__libc_fini_array>:
   10c74:	b538      	push	{r3, r4, r5, lr}
   10c76:	4d07      	ldr	r5, [pc, #28]	; (10c94 <__libc_fini_array+0x20>)
   10c78:	4c07      	ldr	r4, [pc, #28]	; (10c98 <__libc_fini_array+0x24>)
   10c7a:	1b2c      	subs	r4, r5, r4
   10c7c:	10a4      	asrs	r4, r4, #2
   10c7e:	d005      	beq.n	10c8c <__libc_fini_array+0x18>
   10c80:	3c01      	subs	r4, #1
   10c82:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   10c86:	4798      	blx	r3
   10c88:	2c00      	cmp	r4, #0
   10c8a:	d1f9      	bne.n	10c80 <__libc_fini_array+0xc>
   10c8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10c90:	f004 bf3e 	b.w	15b10 <__init_array_end>
	...
   10c9c:	ffffffff 	.word	0xffffffff

00010ca0 <memchr>:
   10ca0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   10ca4:	2a10      	cmp	r2, #16
   10ca6:	db2b      	blt.n	10d00 <memchr+0x60>
   10ca8:	f010 0f07 	tst.w	r0, #7
   10cac:	d008      	beq.n	10cc0 <memchr+0x20>
   10cae:	f810 3b01 	ldrb.w	r3, [r0], #1
   10cb2:	3a01      	subs	r2, #1
   10cb4:	428b      	cmp	r3, r1
   10cb6:	d02d      	beq.n	10d14 <memchr+0x74>
   10cb8:	f010 0f07 	tst.w	r0, #7
   10cbc:	b342      	cbz	r2, 10d10 <memchr+0x70>
   10cbe:	d1f6      	bne.n	10cae <memchr+0xe>
   10cc0:	b4f0      	push	{r4, r5, r6, r7}
   10cc2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10cc6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   10cca:	f022 0407 	bic.w	r4, r2, #7
   10cce:	f07f 0700 	mvns.w	r7, #0
   10cd2:	2300      	movs	r3, #0
   10cd4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   10cd8:	3c08      	subs	r4, #8
   10cda:	ea85 0501 	eor.w	r5, r5, r1
   10cde:	ea86 0601 	eor.w	r6, r6, r1
   10ce2:	fa85 f547 	uadd8	r5, r5, r7
   10ce6:	faa3 f587 	sel	r5, r3, r7
   10cea:	fa86 f647 	uadd8	r6, r6, r7
   10cee:	faa5 f687 	sel	r6, r5, r7
   10cf2:	b98e      	cbnz	r6, 10d18 <memchr+0x78>
   10cf4:	d1ee      	bne.n	10cd4 <memchr+0x34>
   10cf6:	bcf0      	pop	{r4, r5, r6, r7}
   10cf8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   10cfc:	f002 0207 	and.w	r2, r2, #7
   10d00:	b132      	cbz	r2, 10d10 <memchr+0x70>
   10d02:	f810 3b01 	ldrb.w	r3, [r0], #1
   10d06:	3a01      	subs	r2, #1
   10d08:	ea83 0301 	eor.w	r3, r3, r1
   10d0c:	b113      	cbz	r3, 10d14 <memchr+0x74>
   10d0e:	d1f8      	bne.n	10d02 <memchr+0x62>
   10d10:	2000      	movs	r0, #0
   10d12:	4770      	bx	lr
   10d14:	3801      	subs	r0, #1
   10d16:	4770      	bx	lr
   10d18:	2d00      	cmp	r5, #0
   10d1a:	bf06      	itte	eq
   10d1c:	4635      	moveq	r5, r6
   10d1e:	3803      	subeq	r0, #3
   10d20:	3807      	subne	r0, #7
   10d22:	f015 0f01 	tst.w	r5, #1
   10d26:	d107      	bne.n	10d38 <memchr+0x98>
   10d28:	3001      	adds	r0, #1
   10d2a:	f415 7f80 	tst.w	r5, #256	; 0x100
   10d2e:	bf02      	ittt	eq
   10d30:	3001      	addeq	r0, #1
   10d32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   10d36:	3001      	addeq	r0, #1
   10d38:	bcf0      	pop	{r4, r5, r6, r7}
   10d3a:	3801      	subs	r0, #1
   10d3c:	4770      	bx	lr
   10d3e:	bf00      	nop

00010d40 <frexp>:
   10d40:	f8df c060 	ldr.w	ip, [pc, #96]	; 10da4 <frexp+0x64>
   10d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d46:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10d4a:	2700      	movs	r7, #0
   10d4c:	4563      	cmp	r3, ip
   10d4e:	4604      	mov	r4, r0
   10d50:	460d      	mov	r5, r1
   10d52:	4616      	mov	r6, r2
   10d54:	6017      	str	r7, [r2, #0]
   10d56:	dc22      	bgt.n	10d9e <frexp+0x5e>
   10d58:	4684      	mov	ip, r0
   10d5a:	ea53 0c0c 	orrs.w	ip, r3, ip
   10d5e:	d01e      	beq.n	10d9e <frexp+0x5e>
   10d60:	f8df c044 	ldr.w	ip, [pc, #68]	; 10da8 <frexp+0x68>
   10d64:	ea01 0c0c 	and.w	ip, r1, ip
   10d68:	460a      	mov	r2, r1
   10d6a:	f1bc 0f00 	cmp.w	ip, #0
   10d6e:	d109      	bne.n	10d84 <frexp+0x44>
   10d70:	4b0e      	ldr	r3, [pc, #56]	; (10dac <frexp+0x6c>)
   10d72:	2200      	movs	r2, #0
   10d74:	f002 fd90 	bl	13898 <__aeabi_dmul>
   10d78:	f06f 0735 	mvn.w	r7, #53	; 0x35
   10d7c:	4604      	mov	r4, r0
   10d7e:	460a      	mov	r2, r1
   10d80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10d84:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   10d88:	151b      	asrs	r3, r3, #20
   10d8a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   10d8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   10d92:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10d96:	443b      	add	r3, r7
   10d98:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   10d9c:	6033      	str	r3, [r6, #0]
   10d9e:	4620      	mov	r0, r4
   10da0:	4629      	mov	r1, r5
   10da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10da4:	7fefffff 	.word	0x7fefffff
   10da8:	7ff00000 	.word	0x7ff00000
   10dac:	43500000 	.word	0x43500000

00010db0 <__register_exitproc>:
   10db0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10db4:	f8df a074 	ldr.w	sl, [pc, #116]	; 10e2c <__register_exitproc+0x7c>
   10db8:	4606      	mov	r6, r0
   10dba:	f8da 0000 	ldr.w	r0, [sl]
   10dbe:	4698      	mov	r8, r3
   10dc0:	460f      	mov	r7, r1
   10dc2:	4691      	mov	r9, r2
   10dc4:	f7fd faa4 	bl	e310 <__retarget_lock_acquire_recursive>
   10dc8:	4b19      	ldr	r3, [pc, #100]	; (10e30 <__register_exitproc+0x80>)
   10dca:	681c      	ldr	r4, [r3, #0]
   10dcc:	b324      	cbz	r4, 10e18 <__register_exitproc+0x68>
   10dce:	6865      	ldr	r5, [r4, #4]
   10dd0:	2d1f      	cmp	r5, #31
   10dd2:	dc24      	bgt.n	10e1e <__register_exitproc+0x6e>
   10dd4:	b95e      	cbnz	r6, 10dee <__register_exitproc+0x3e>
   10dd6:	1c6b      	adds	r3, r5, #1
   10dd8:	3502      	adds	r5, #2
   10dda:	f8da 0000 	ldr.w	r0, [sl]
   10dde:	6063      	str	r3, [r4, #4]
   10de0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   10de4:	f7fd fa96 	bl	e314 <__retarget_lock_release_recursive>
   10de8:	2000      	movs	r0, #0
   10dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10dee:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   10df2:	2301      	movs	r3, #1
   10df4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10df8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   10dfc:	40ab      	lsls	r3, r5
   10dfe:	431a      	orrs	r2, r3
   10e00:	2e02      	cmp	r6, #2
   10e02:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   10e06:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10e0a:	d1e4      	bne.n	10dd6 <__register_exitproc+0x26>
   10e0c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   10e10:	431a      	orrs	r2, r3
   10e12:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   10e16:	e7de      	b.n	10dd6 <__register_exitproc+0x26>
   10e18:	4c06      	ldr	r4, [pc, #24]	; (10e34 <__register_exitproc+0x84>)
   10e1a:	601c      	str	r4, [r3, #0]
   10e1c:	e7d7      	b.n	10dce <__register_exitproc+0x1e>
   10e1e:	f8da 0000 	ldr.w	r0, [sl]
   10e22:	f7fd fa77 	bl	e314 <__retarget_lock_release_recursive>
   10e26:	f04f 30ff 	mov.w	r0, #4294967295
   10e2a:	e7de      	b.n	10dea <__register_exitproc+0x3a>
   10e2c:	1fff9164 	.word	0x1fff9164
   10e30:	1fffd778 	.word	0x1fffd778
   10e34:	1fffd77c 	.word	0x1fffd77c

00010e38 <__assert_func>:
   10e38:	b500      	push	{lr}
   10e3a:	4c0b      	ldr	r4, [pc, #44]	; (10e68 <__assert_func+0x30>)
   10e3c:	6825      	ldr	r5, [r4, #0]
   10e3e:	4614      	mov	r4, r2
   10e40:	68ee      	ldr	r6, [r5, #12]
   10e42:	461a      	mov	r2, r3
   10e44:	b085      	sub	sp, #20
   10e46:	4603      	mov	r3, r0
   10e48:	460d      	mov	r5, r1
   10e4a:	b14c      	cbz	r4, 10e60 <__assert_func+0x28>
   10e4c:	4907      	ldr	r1, [pc, #28]	; (10e6c <__assert_func+0x34>)
   10e4e:	9500      	str	r5, [sp, #0]
   10e50:	e9cd 1401 	strd	r1, r4, [sp, #4]
   10e54:	4630      	mov	r0, r6
   10e56:	4906      	ldr	r1, [pc, #24]	; (10e70 <__assert_func+0x38>)
   10e58:	f001 f86e 	bl	11f38 <fiprintf>
   10e5c:	f7f9 f894 	bl	9f88 <abort>
   10e60:	4904      	ldr	r1, [pc, #16]	; (10e74 <__assert_func+0x3c>)
   10e62:	460c      	mov	r4, r1
   10e64:	e7f3      	b.n	10e4e <__assert_func+0x16>
   10e66:	bf00      	nop
   10e68:	1fff9160 	.word	0x1fff9160
   10e6c:	00015a24 	.word	0x00015a24
   10e70:	00015a34 	.word	0x00015a34
   10e74:	000143c4 	.word	0x000143c4

00010e78 <_calloc_r>:
   10e78:	b538      	push	{r3, r4, r5, lr}
   10e7a:	fba1 1402 	umull	r1, r4, r1, r2
   10e7e:	bb8c      	cbnz	r4, 10ee4 <_calloc_r+0x6c>
   10e80:	f7fc faba 	bl	d3f8 <_malloc_r>
   10e84:	4605      	mov	r5, r0
   10e86:	b1e0      	cbz	r0, 10ec2 <_calloc_r+0x4a>
   10e88:	f850 2c04 	ldr.w	r2, [r0, #-4]
   10e8c:	f022 0203 	bic.w	r2, r2, #3
   10e90:	3a04      	subs	r2, #4
   10e92:	2a24      	cmp	r2, #36	; 0x24
   10e94:	d817      	bhi.n	10ec6 <_calloc_r+0x4e>
   10e96:	2a13      	cmp	r2, #19
   10e98:	d91a      	bls.n	10ed0 <_calloc_r+0x58>
   10e9a:	2a1b      	cmp	r2, #27
   10e9c:	e9c0 4400 	strd	r4, r4, [r0]
   10ea0:	d91d      	bls.n	10ede <_calloc_r+0x66>
   10ea2:	2a24      	cmp	r2, #36	; 0x24
   10ea4:	bf14      	ite	ne
   10ea6:	f100 0210 	addne.w	r2, r0, #16
   10eaa:	f100 0218 	addeq.w	r2, r0, #24
   10eae:	f04f 0300 	mov.w	r3, #0
   10eb2:	e9c0 4402 	strd	r4, r4, [r0, #8]
   10eb6:	bf04      	itt	eq
   10eb8:	6104      	streq	r4, [r0, #16]
   10eba:	6144      	streq	r4, [r0, #20]
   10ebc:	e9c2 3300 	strd	r3, r3, [r2]
   10ec0:	6093      	str	r3, [r2, #8]
   10ec2:	4628      	mov	r0, r5
   10ec4:	bd38      	pop	{r3, r4, r5, pc}
   10ec6:	4621      	mov	r1, r4
   10ec8:	f7fd f904 	bl	e0d4 <memset>
   10ecc:	4628      	mov	r0, r5
   10ece:	bd38      	pop	{r3, r4, r5, pc}
   10ed0:	4602      	mov	r2, r0
   10ed2:	2300      	movs	r3, #0
   10ed4:	e9c2 3300 	strd	r3, r3, [r2]
   10ed8:	6093      	str	r3, [r2, #8]
   10eda:	4628      	mov	r0, r5
   10edc:	bd38      	pop	{r3, r4, r5, pc}
   10ede:	f100 0208 	add.w	r2, r0, #8
   10ee2:	e7f6      	b.n	10ed2 <_calloc_r+0x5a>
   10ee4:	f7fd f9e6 	bl	e2b4 <__errno>
   10ee8:	230c      	movs	r3, #12
   10eea:	2500      	movs	r5, #0
   10eec:	6003      	str	r3, [r0, #0]
   10eee:	e7e8      	b.n	10ec2 <_calloc_r+0x4a>

00010ef0 <quorem>:
   10ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ef4:	6903      	ldr	r3, [r0, #16]
   10ef6:	690c      	ldr	r4, [r1, #16]
   10ef8:	42a3      	cmp	r3, r4
   10efa:	b083      	sub	sp, #12
   10efc:	f2c0 8088 	blt.w	11010 <quorem+0x120>
   10f00:	3c01      	subs	r4, #1
   10f02:	f101 0514 	add.w	r5, r1, #20
   10f06:	00a3      	lsls	r3, r4, #2
   10f08:	f100 0814 	add.w	r8, r0, #20
   10f0c:	9300      	str	r3, [sp, #0]
   10f0e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   10f12:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10f16:	3301      	adds	r3, #1
   10f18:	468a      	mov	sl, r1
   10f1a:	429a      	cmp	r2, r3
   10f1c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   10f20:	4681      	mov	r9, r0
   10f22:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   10f26:	9101      	str	r1, [sp, #4]
   10f28:	fbb2 f6f3 	udiv	r6, r2, r3
   10f2c:	d33a      	bcc.n	10fa4 <quorem+0xb4>
   10f2e:	f04f 0c00 	mov.w	ip, #0
   10f32:	46ae      	mov	lr, r5
   10f34:	4640      	mov	r0, r8
   10f36:	4662      	mov	r2, ip
   10f38:	4663      	mov	r3, ip
   10f3a:	f85e bb04 	ldr.w	fp, [lr], #4
   10f3e:	6801      	ldr	r1, [r0, #0]
   10f40:	fa1f fc8b 	uxth.w	ip, fp
   10f44:	fb06 330c 	mla	r3, r6, ip, r3
   10f48:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   10f4c:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   10f50:	fb06 cc0b 	mla	ip, r6, fp, ip
   10f54:	b29b      	uxth	r3, r3
   10f56:	1ad3      	subs	r3, r2, r3
   10f58:	fa1f f28c 	uxth.w	r2, ip
   10f5c:	fa13 f381 	uxtah	r3, r3, r1
   10f60:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
   10f64:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10f68:	b29b      	uxth	r3, r3
   10f6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10f6e:	4577      	cmp	r7, lr
   10f70:	f840 3b04 	str.w	r3, [r0], #4
   10f74:	ea4f 4222 	mov.w	r2, r2, asr #16
   10f78:	ea4f 431c 	mov.w	r3, ip, lsr #16
   10f7c:	d2dd      	bcs.n	10f3a <quorem+0x4a>
   10f7e:	9b00      	ldr	r3, [sp, #0]
   10f80:	f858 3003 	ldr.w	r3, [r8, r3]
   10f84:	b973      	cbnz	r3, 10fa4 <quorem+0xb4>
   10f86:	9b01      	ldr	r3, [sp, #4]
   10f88:	3b04      	subs	r3, #4
   10f8a:	4598      	cmp	r8, r3
   10f8c:	d304      	bcc.n	10f98 <quorem+0xa8>
   10f8e:	e007      	b.n	10fa0 <quorem+0xb0>
   10f90:	4598      	cmp	r8, r3
   10f92:	f104 34ff 	add.w	r4, r4, #4294967295
   10f96:	d203      	bcs.n	10fa0 <quorem+0xb0>
   10f98:	f853 2904 	ldr.w	r2, [r3], #-4
   10f9c:	2a00      	cmp	r2, #0
   10f9e:	d0f7      	beq.n	10f90 <quorem+0xa0>
   10fa0:	f8c9 4010 	str.w	r4, [r9, #16]
   10fa4:	4651      	mov	r1, sl
   10fa6:	4648      	mov	r0, r9
   10fa8:	f7fd fe38 	bl	ec1c <__mcmp>
   10fac:	2800      	cmp	r0, #0
   10fae:	db2b      	blt.n	11008 <quorem+0x118>
   10fb0:	3601      	adds	r6, #1
   10fb2:	4641      	mov	r1, r8
   10fb4:	2300      	movs	r3, #0
   10fb6:	f855 0b04 	ldr.w	r0, [r5], #4
   10fba:	f8d1 c000 	ldr.w	ip, [r1]
   10fbe:	b282      	uxth	r2, r0
   10fc0:	1a9a      	subs	r2, r3, r2
   10fc2:	0c03      	lsrs	r3, r0, #16
   10fc4:	fa12 f28c 	uxtah	r2, r2, ip
   10fc8:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   10fcc:	eb03 4322 	add.w	r3, r3, r2, asr #16
   10fd0:	b292      	uxth	r2, r2
   10fd2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   10fd6:	42af      	cmp	r7, r5
   10fd8:	f841 2b04 	str.w	r2, [r1], #4
   10fdc:	ea4f 4323 	mov.w	r3, r3, asr #16
   10fe0:	d2e9      	bcs.n	10fb6 <quorem+0xc6>
   10fe2:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10fe6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   10fea:	b96a      	cbnz	r2, 11008 <quorem+0x118>
   10fec:	3b04      	subs	r3, #4
   10fee:	4598      	cmp	r8, r3
   10ff0:	d304      	bcc.n	10ffc <quorem+0x10c>
   10ff2:	e007      	b.n	11004 <quorem+0x114>
   10ff4:	4598      	cmp	r8, r3
   10ff6:	f104 34ff 	add.w	r4, r4, #4294967295
   10ffa:	d203      	bcs.n	11004 <quorem+0x114>
   10ffc:	f853 2904 	ldr.w	r2, [r3], #-4
   11000:	2a00      	cmp	r2, #0
   11002:	d0f7      	beq.n	10ff4 <quorem+0x104>
   11004:	f8c9 4010 	str.w	r4, [r9, #16]
   11008:	4630      	mov	r0, r6
   1100a:	b003      	add	sp, #12
   1100c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11010:	2000      	movs	r0, #0
   11012:	b003      	add	sp, #12
   11014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011018 <_dtoa_r>:
   11018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1101c:	6b81      	ldr	r1, [r0, #56]	; 0x38
   1101e:	b099      	sub	sp, #100	; 0x64
   11020:	4690      	mov	r8, r2
   11022:	4699      	mov	r9, r3
   11024:	e9cd 8904 	strd	r8, r9, [sp, #16]
   11028:	9d25      	ldr	r5, [sp, #148]	; 0x94
   1102a:	4604      	mov	r4, r0
   1102c:	b141      	cbz	r1, 11040 <_dtoa_r+0x28>
   1102e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   11030:	604a      	str	r2, [r1, #4]
   11032:	2301      	movs	r3, #1
   11034:	4093      	lsls	r3, r2
   11036:	608b      	str	r3, [r1, #8]
   11038:	f7fd fb92 	bl	e760 <_Bfree>
   1103c:	2300      	movs	r3, #0
   1103e:	63a3      	str	r3, [r4, #56]	; 0x38
   11040:	f1b9 0a00 	subs.w	sl, r9, #0
   11044:	bfb4      	ite	lt
   11046:	2301      	movlt	r3, #1
   11048:	2300      	movge	r3, #0
   1104a:	602b      	str	r3, [r5, #0]
   1104c:	4b76      	ldr	r3, [pc, #472]	; (11228 <_dtoa_r+0x210>)
   1104e:	bfbc      	itt	lt
   11050:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   11054:	f8cd a014 	strlt.w	sl, [sp, #20]
   11058:	ea33 030a 	bics.w	r3, r3, sl
   1105c:	f000 80ab 	beq.w	111b6 <_dtoa_r+0x19e>
   11060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   11064:	4610      	mov	r0, r2
   11066:	4619      	mov	r1, r3
   11068:	2200      	movs	r2, #0
   1106a:	2300      	movs	r3, #0
   1106c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   11070:	f7fb fe38 	bl	cce4 <__aeabi_dcmpeq>
   11074:	4607      	mov	r7, r0
   11076:	b178      	cbz	r0, 11098 <_dtoa_r+0x80>
   11078:	9a24      	ldr	r2, [sp, #144]	; 0x90
   1107a:	2301      	movs	r3, #1
   1107c:	6013      	str	r3, [r2, #0]
   1107e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11080:	2b00      	cmp	r3, #0
   11082:	f000 83ae 	beq.w	117e2 <_dtoa_r+0x7ca>
   11086:	4b69      	ldr	r3, [pc, #420]	; (1122c <_dtoa_r+0x214>)
   11088:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1108a:	6013      	str	r3, [r2, #0]
   1108c:	3b01      	subs	r3, #1
   1108e:	9303      	str	r3, [sp, #12]
   11090:	9803      	ldr	r0, [sp, #12]
   11092:	b019      	add	sp, #100	; 0x64
   11094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11098:	ab16      	add	r3, sp, #88	; 0x58
   1109a:	9301      	str	r3, [sp, #4]
   1109c:	ab17      	add	r3, sp, #92	; 0x5c
   1109e:	9300      	str	r3, [sp, #0]
   110a0:	4620      	mov	r0, r4
   110a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   110a6:	f7fd fe83 	bl	edb0 <__d2b>
   110aa:	ea5f 561a 	movs.w	r6, sl, lsr #20
   110ae:	4605      	mov	r5, r0
   110b0:	f040 8097 	bne.w	111e2 <_dtoa_r+0x1ca>
   110b4:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   110b8:	443e      	add	r6, r7
   110ba:	f206 4332 	addw	r3, r6, #1074	; 0x432
   110be:	2b20      	cmp	r3, #32
   110c0:	f340 83a6 	ble.w	11810 <_dtoa_r+0x7f8>
   110c4:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   110c8:	fa0a fa03 	lsl.w	sl, sl, r3
   110cc:	f206 4312 	addw	r3, r6, #1042	; 0x412
   110d0:	fa28 f003 	lsr.w	r0, r8, r3
   110d4:	ea4a 0000 	orr.w	r0, sl, r0
   110d8:	f7fb fd34 	bl	cb44 <__aeabi_ui2d>
   110dc:	2301      	movs	r3, #1
   110de:	3e01      	subs	r6, #1
   110e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   110e4:	930f      	str	r3, [sp, #60]	; 0x3c
   110e6:	4b52      	ldr	r3, [pc, #328]	; (11230 <_dtoa_r+0x218>)
   110e8:	2200      	movs	r2, #0
   110ea:	f7fb fbed 	bl	c8c8 <__aeabi_dsub>
   110ee:	a348      	add	r3, pc, #288	; (adr r3, 11210 <_dtoa_r+0x1f8>)
   110f0:	e9d3 2300 	ldrd	r2, r3, [r3]
   110f4:	f002 fbd0 	bl	13898 <__aeabi_dmul>
   110f8:	a347      	add	r3, pc, #284	; (adr r3, 11218 <_dtoa_r+0x200>)
   110fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   110fe:	f7fb fbe5 	bl	c8cc <__adddf3>
   11102:	4680      	mov	r8, r0
   11104:	4630      	mov	r0, r6
   11106:	4689      	mov	r9, r1
   11108:	f7fb fd2c 	bl	cb64 <__aeabi_i2d>
   1110c:	a344      	add	r3, pc, #272	; (adr r3, 11220 <_dtoa_r+0x208>)
   1110e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11112:	f002 fbc1 	bl	13898 <__aeabi_dmul>
   11116:	4602      	mov	r2, r0
   11118:	460b      	mov	r3, r1
   1111a:	4640      	mov	r0, r8
   1111c:	4649      	mov	r1, r9
   1111e:	f7fb fbd5 	bl	c8cc <__adddf3>
   11122:	4680      	mov	r8, r0
   11124:	4689      	mov	r9, r1
   11126:	f002 fdc9 	bl	13cbc <__aeabi_d2iz>
   1112a:	2200      	movs	r2, #0
   1112c:	4683      	mov	fp, r0
   1112e:	2300      	movs	r3, #0
   11130:	4640      	mov	r0, r8
   11132:	4649      	mov	r1, r9
   11134:	f7fb fde0 	bl	ccf8 <__aeabi_dcmplt>
   11138:	2800      	cmp	r0, #0
   1113a:	f040 8345 	bne.w	117c8 <_dtoa_r+0x7b0>
   1113e:	f1bb 0f16 	cmp.w	fp, #22
   11142:	f200 8334 	bhi.w	117ae <_dtoa_r+0x796>
   11146:	4b3b      	ldr	r3, [pc, #236]	; (11234 <_dtoa_r+0x21c>)
   11148:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   1114c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11150:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11154:	f7fb fdd0 	bl	ccf8 <__aeabi_dcmplt>
   11158:	2800      	cmp	r0, #0
   1115a:	d071      	beq.n	11240 <_dtoa_r+0x228>
   1115c:	2300      	movs	r3, #0
   1115e:	1bbf      	subs	r7, r7, r6
   11160:	930e      	str	r3, [sp, #56]	; 0x38
   11162:	1e7b      	subs	r3, r7, #1
   11164:	f10b 3bff 	add.w	fp, fp, #4294967295
   11168:	9306      	str	r3, [sp, #24]
   1116a:	f100 8327 	bmi.w	117bc <_dtoa_r+0x7a4>
   1116e:	2300      	movs	r3, #0
   11170:	9309      	str	r3, [sp, #36]	; 0x24
   11172:	f1bb 0f00 	cmp.w	fp, #0
   11176:	da6a      	bge.n	1124e <_dtoa_r+0x236>
   11178:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1117a:	f8cd b01c 	str.w	fp, [sp, #28]
   1117e:	eba3 030b 	sub.w	r3, r3, fp
   11182:	9309      	str	r3, [sp, #36]	; 0x24
   11184:	f1cb 0300 	rsb	r3, fp, #0
   11188:	930d      	str	r3, [sp, #52]	; 0x34
   1118a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1118c:	2b09      	cmp	r3, #9
   1118e:	f04f 0b00 	mov.w	fp, #0
   11192:	d865      	bhi.n	11260 <_dtoa_r+0x248>
   11194:	2b05      	cmp	r3, #5
   11196:	f340 8339 	ble.w	1180c <_dtoa_r+0x7f4>
   1119a:	3b04      	subs	r3, #4
   1119c:	9322      	str	r3, [sp, #136]	; 0x88
   1119e:	2600      	movs	r6, #0
   111a0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   111a2:	3b02      	subs	r3, #2
   111a4:	2b03      	cmp	r3, #3
   111a6:	f200 8667 	bhi.w	11e78 <_dtoa_r+0xe60>
   111aa:	e8df f013 	tbh	[pc, r3, lsl #1]
   111ae:	044e      	.short	0x044e
   111b0:	0442044b 	.word	0x0442044b
   111b4:	0425      	.short	0x0425
   111b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
   111b8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   111bc:	f242 730f 	movw	r3, #9999	; 0x270f
   111c0:	ea5a 0a08 	orrs.w	sl, sl, r8
   111c4:	6013      	str	r3, [r2, #0]
   111c6:	d11a      	bne.n	111fe <_dtoa_r+0x1e6>
   111c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   111ca:	2b00      	cmp	r3, #0
   111cc:	f000 8663 	beq.w	11e96 <_dtoa_r+0xe7e>
   111d0:	4b19      	ldr	r3, [pc, #100]	; (11238 <_dtoa_r+0x220>)
   111d2:	9303      	str	r3, [sp, #12]
   111d4:	3308      	adds	r3, #8
   111d6:	9a26      	ldr	r2, [sp, #152]	; 0x98
   111d8:	9803      	ldr	r0, [sp, #12]
   111da:	6013      	str	r3, [r2, #0]
   111dc:	b019      	add	sp, #100	; 0x64
   111de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   111e2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   111e6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   111ea:	4608      	mov	r0, r1
   111ec:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   111f0:	970f      	str	r7, [sp, #60]	; 0x3c
   111f2:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   111f6:	9f16      	ldr	r7, [sp, #88]	; 0x58
   111f8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   111fc:	e773      	b.n	110e6 <_dtoa_r+0xce>
   111fe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11200:	2b00      	cmp	r3, #0
   11202:	f040 83db 	bne.w	119bc <_dtoa_r+0x9a4>
   11206:	4b0d      	ldr	r3, [pc, #52]	; (1123c <_dtoa_r+0x224>)
   11208:	9303      	str	r3, [sp, #12]
   1120a:	e741      	b.n	11090 <_dtoa_r+0x78>
   1120c:	f3af 8000 	nop.w
   11210:	636f4361 	.word	0x636f4361
   11214:	3fd287a7 	.word	0x3fd287a7
   11218:	8b60c8b3 	.word	0x8b60c8b3
   1121c:	3fc68a28 	.word	0x3fc68a28
   11220:	509f79fb 	.word	0x509f79fb
   11224:	3fd34413 	.word	0x3fd34413
   11228:	7ff00000 	.word	0x7ff00000
   1122c:	00014375 	.word	0x00014375
   11230:	3ff80000 	.word	0x3ff80000
   11234:	000158f8 	.word	0x000158f8
   11238:	00015a64 	.word	0x00015a64
   1123c:	00015a70 	.word	0x00015a70
   11240:	1bbf      	subs	r7, r7, r6
   11242:	1e7b      	subs	r3, r7, #1
   11244:	9306      	str	r3, [sp, #24]
   11246:	f100 847e 	bmi.w	11b46 <_dtoa_r+0xb2e>
   1124a:	900e      	str	r0, [sp, #56]	; 0x38
   1124c:	9009      	str	r0, [sp, #36]	; 0x24
   1124e:	9b06      	ldr	r3, [sp, #24]
   11250:	445b      	add	r3, fp
   11252:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   11256:	2300      	movs	r3, #0
   11258:	930d      	str	r3, [sp, #52]	; 0x34
   1125a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1125c:	2b09      	cmp	r3, #9
   1125e:	d999      	bls.n	11194 <_dtoa_r+0x17c>
   11260:	2300      	movs	r3, #0
   11262:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
   11266:	2601      	movs	r6, #1
   11268:	f04f 33ff 	mov.w	r3, #4294967295
   1126c:	960c      	str	r6, [sp, #48]	; 0x30
   1126e:	9308      	str	r3, [sp, #32]
   11270:	9b08      	ldr	r3, [sp, #32]
   11272:	9312      	str	r3, [sp, #72]	; 0x48
   11274:	2100      	movs	r1, #0
   11276:	63e1      	str	r1, [r4, #60]	; 0x3c
   11278:	4620      	mov	r0, r4
   1127a:	f7fd fa4b 	bl	e714 <_Balloc>
   1127e:	9003      	str	r0, [sp, #12]
   11280:	2800      	cmp	r0, #0
   11282:	f000 8601 	beq.w	11e88 <_dtoa_r+0xe70>
   11286:	9b03      	ldr	r3, [sp, #12]
   11288:	63a3      	str	r3, [r4, #56]	; 0x38
   1128a:	9b08      	ldr	r3, [sp, #32]
   1128c:	2b0e      	cmp	r3, #14
   1128e:	f200 8113 	bhi.w	114b8 <_dtoa_r+0x4a0>
   11292:	2e00      	cmp	r6, #0
   11294:	f000 8110 	beq.w	114b8 <_dtoa_r+0x4a0>
   11298:	9907      	ldr	r1, [sp, #28]
   1129a:	2900      	cmp	r1, #0
   1129c:	f340 8455 	ble.w	11b4a <_dtoa_r+0xb32>
   112a0:	4bae      	ldr	r3, [pc, #696]	; (1155c <_dtoa_r+0x544>)
   112a2:	f001 020f 	and.w	r2, r1, #15
   112a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   112aa:	ea4f 1821 	mov.w	r8, r1, asr #4
   112ae:	05c9      	lsls	r1, r1, #23
   112b0:	e9d3 6700 	ldrd	r6, r7, [r3]
   112b4:	f140 8411 	bpl.w	11ada <_dtoa_r+0xac2>
   112b8:	4ba9      	ldr	r3, [pc, #676]	; (11560 <_dtoa_r+0x548>)
   112ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   112be:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   112c2:	f002 fc13 	bl	13aec <__aeabi_ddiv>
   112c6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   112ca:	f008 080f 	and.w	r8, r8, #15
   112ce:	f04f 0a03 	mov.w	sl, #3
   112d2:	f1b8 0f00 	cmp.w	r8, #0
   112d6:	d013      	beq.n	11300 <_dtoa_r+0x2e8>
   112d8:	f8df 9284 	ldr.w	r9, [pc, #644]	; 11560 <_dtoa_r+0x548>
   112dc:	f018 0f01 	tst.w	r8, #1
   112e0:	d009      	beq.n	112f6 <_dtoa_r+0x2de>
   112e2:	4630      	mov	r0, r6
   112e4:	4639      	mov	r1, r7
   112e6:	e9d9 2300 	ldrd	r2, r3, [r9]
   112ea:	f002 fad5 	bl	13898 <__aeabi_dmul>
   112ee:	f10a 0a01 	add.w	sl, sl, #1
   112f2:	4606      	mov	r6, r0
   112f4:	460f      	mov	r7, r1
   112f6:	ea5f 0868 	movs.w	r8, r8, asr #1
   112fa:	f109 0908 	add.w	r9, r9, #8
   112fe:	d1ed      	bne.n	112dc <_dtoa_r+0x2c4>
   11300:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11304:	4632      	mov	r2, r6
   11306:	463b      	mov	r3, r7
   11308:	f002 fbf0 	bl	13aec <__aeabi_ddiv>
   1130c:	4680      	mov	r8, r0
   1130e:	4689      	mov	r9, r1
   11310:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11312:	b143      	cbz	r3, 11326 <_dtoa_r+0x30e>
   11314:	4b93      	ldr	r3, [pc, #588]	; (11564 <_dtoa_r+0x54c>)
   11316:	2200      	movs	r2, #0
   11318:	4640      	mov	r0, r8
   1131a:	4649      	mov	r1, r9
   1131c:	f7fb fcec 	bl	ccf8 <__aeabi_dcmplt>
   11320:	2800      	cmp	r0, #0
   11322:	f040 852a 	bne.w	11d7a <_dtoa_r+0xd62>
   11326:	4650      	mov	r0, sl
   11328:	f7fb fc1c 	bl	cb64 <__aeabi_i2d>
   1132c:	4642      	mov	r2, r8
   1132e:	464b      	mov	r3, r9
   11330:	f002 fab2 	bl	13898 <__aeabi_dmul>
   11334:	4b8c      	ldr	r3, [pc, #560]	; (11568 <_dtoa_r+0x550>)
   11336:	2200      	movs	r2, #0
   11338:	f7fb fac8 	bl	c8cc <__adddf3>
   1133c:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   11340:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11344:	9311      	str	r3, [sp, #68]	; 0x44
   11346:	9b08      	ldr	r3, [sp, #32]
   11348:	2b00      	cmp	r3, #0
   1134a:	f000 8099 	beq.w	11480 <_dtoa_r+0x468>
   1134e:	9b07      	ldr	r3, [sp, #28]
   11350:	9314      	str	r3, [sp, #80]	; 0x50
   11352:	9b08      	ldr	r3, [sp, #32]
   11354:	9313      	str	r3, [sp, #76]	; 0x4c
   11356:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11358:	2b00      	cmp	r3, #0
   1135a:	f000 84a5 	beq.w	11ca8 <_dtoa_r+0xc90>
   1135e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   11360:	4b7e      	ldr	r3, [pc, #504]	; (1155c <_dtoa_r+0x544>)
   11362:	4982      	ldr	r1, [pc, #520]	; (1156c <_dtoa_r+0x554>)
   11364:	9e03      	ldr	r6, [sp, #12]
   11366:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1136a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   1136e:	2000      	movs	r0, #0
   11370:	f002 fbbc 	bl	13aec <__aeabi_ddiv>
   11374:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11378:	f7fb faa6 	bl	c8c8 <__aeabi_dsub>
   1137c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11380:	4649      	mov	r1, r9
   11382:	4640      	mov	r0, r8
   11384:	f002 fc9a 	bl	13cbc <__aeabi_d2iz>
   11388:	4607      	mov	r7, r0
   1138a:	f7fb fbeb 	bl	cb64 <__aeabi_i2d>
   1138e:	4602      	mov	r2, r0
   11390:	460b      	mov	r3, r1
   11392:	4640      	mov	r0, r8
   11394:	4649      	mov	r1, r9
   11396:	f7fb fa97 	bl	c8c8 <__aeabi_dsub>
   1139a:	3730      	adds	r7, #48	; 0x30
   1139c:	4680      	mov	r8, r0
   1139e:	4689      	mov	r9, r1
   113a0:	4602      	mov	r2, r0
   113a2:	460b      	mov	r3, r1
   113a4:	f806 7b01 	strb.w	r7, [r6], #1
   113a8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   113ac:	f7fb fcc2 	bl	cd34 <__aeabi_dcmpgt>
   113b0:	2800      	cmp	r0, #0
   113b2:	f040 8527 	bne.w	11e04 <_dtoa_r+0xdec>
   113b6:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   113ba:	2700      	movs	r7, #0
   113bc:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   113c0:	9510      	str	r5, [sp, #64]	; 0x40
   113c2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   113c4:	9413      	str	r4, [sp, #76]	; 0x4c
   113c6:	e02a      	b.n	1141e <_dtoa_r+0x406>
   113c8:	3701      	adds	r7, #1
   113ca:	42af      	cmp	r7, r5
   113cc:	f280 852a 	bge.w	11e24 <_dtoa_r+0xe0c>
   113d0:	4b67      	ldr	r3, [pc, #412]	; (11570 <_dtoa_r+0x558>)
   113d2:	4650      	mov	r0, sl
   113d4:	4659      	mov	r1, fp
   113d6:	2200      	movs	r2, #0
   113d8:	f002 fa5e 	bl	13898 <__aeabi_dmul>
   113dc:	4b64      	ldr	r3, [pc, #400]	; (11570 <_dtoa_r+0x558>)
   113de:	2200      	movs	r2, #0
   113e0:	4682      	mov	sl, r0
   113e2:	468b      	mov	fp, r1
   113e4:	4640      	mov	r0, r8
   113e6:	4649      	mov	r1, r9
   113e8:	f002 fa56 	bl	13898 <__aeabi_dmul>
   113ec:	4689      	mov	r9, r1
   113ee:	4680      	mov	r8, r0
   113f0:	f002 fc64 	bl	13cbc <__aeabi_d2iz>
   113f4:	4604      	mov	r4, r0
   113f6:	f7fb fbb5 	bl	cb64 <__aeabi_i2d>
   113fa:	4602      	mov	r2, r0
   113fc:	460b      	mov	r3, r1
   113fe:	4640      	mov	r0, r8
   11400:	4649      	mov	r1, r9
   11402:	f7fb fa61 	bl	c8c8 <__aeabi_dsub>
   11406:	3430      	adds	r4, #48	; 0x30
   11408:	f806 4b01 	strb.w	r4, [r6], #1
   1140c:	4652      	mov	r2, sl
   1140e:	465b      	mov	r3, fp
   11410:	4680      	mov	r8, r0
   11412:	4689      	mov	r9, r1
   11414:	f7fb fc70 	bl	ccf8 <__aeabi_dcmplt>
   11418:	2800      	cmp	r0, #0
   1141a:	f040 84f1 	bne.w	11e00 <_dtoa_r+0xde8>
   1141e:	4642      	mov	r2, r8
   11420:	464b      	mov	r3, r9
   11422:	4950      	ldr	r1, [pc, #320]	; (11564 <_dtoa_r+0x54c>)
   11424:	2000      	movs	r0, #0
   11426:	f7fb fa4f 	bl	c8c8 <__aeabi_dsub>
   1142a:	4652      	mov	r2, sl
   1142c:	465b      	mov	r3, fp
   1142e:	f7fb fc63 	bl	ccf8 <__aeabi_dcmplt>
   11432:	2800      	cmp	r0, #0
   11434:	d0c8      	beq.n	113c8 <_dtoa_r+0x3b0>
   11436:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   1143a:	9d10      	ldr	r5, [sp, #64]	; 0x40
   1143c:	9a03      	ldr	r2, [sp, #12]
   1143e:	9307      	str	r3, [sp, #28]
   11440:	e002      	b.n	11448 <_dtoa_r+0x430>
   11442:	42b2      	cmp	r2, r6
   11444:	f000 84c6 	beq.w	11dd4 <_dtoa_r+0xdbc>
   11448:	46b1      	mov	r9, r6
   1144a:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   1144e:	2b39      	cmp	r3, #57	; 0x39
   11450:	d0f7      	beq.n	11442 <_dtoa_r+0x42a>
   11452:	3301      	adds	r3, #1
   11454:	b2db      	uxtb	r3, r3
   11456:	7033      	strb	r3, [r6, #0]
   11458:	9b07      	ldr	r3, [sp, #28]
   1145a:	3301      	adds	r3, #1
   1145c:	9307      	str	r3, [sp, #28]
   1145e:	e192      	b.n	11786 <_dtoa_r+0x76e>
   11460:	4650      	mov	r0, sl
   11462:	f7fb fb7f 	bl	cb64 <__aeabi_i2d>
   11466:	4642      	mov	r2, r8
   11468:	464b      	mov	r3, r9
   1146a:	f002 fa15 	bl	13898 <__aeabi_dmul>
   1146e:	4b3e      	ldr	r3, [pc, #248]	; (11568 <_dtoa_r+0x550>)
   11470:	2200      	movs	r2, #0
   11472:	f7fb fa2b 	bl	c8cc <__adddf3>
   11476:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   1147a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1147e:	9311      	str	r3, [sp, #68]	; 0x44
   11480:	4b3c      	ldr	r3, [pc, #240]	; (11574 <_dtoa_r+0x55c>)
   11482:	4640      	mov	r0, r8
   11484:	4649      	mov	r1, r9
   11486:	2200      	movs	r2, #0
   11488:	f7fb fa1e 	bl	c8c8 <__aeabi_dsub>
   1148c:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   11490:	4642      	mov	r2, r8
   11492:	464b      	mov	r3, r9
   11494:	4606      	mov	r6, r0
   11496:	460f      	mov	r7, r1
   11498:	f7fb fc4c 	bl	cd34 <__aeabi_dcmpgt>
   1149c:	4682      	mov	sl, r0
   1149e:	2800      	cmp	r0, #0
   114a0:	f040 84a8 	bne.w	11df4 <_dtoa_r+0xddc>
   114a4:	4642      	mov	r2, r8
   114a6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   114aa:	4630      	mov	r0, r6
   114ac:	4639      	mov	r1, r7
   114ae:	f7fb fc23 	bl	ccf8 <__aeabi_dcmplt>
   114b2:	2800      	cmp	r0, #0
   114b4:	f040 8345 	bne.w	11b42 <_dtoa_r+0xb2a>
   114b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   114ba:	2b00      	cmp	r3, #0
   114bc:	f2c0 808c 	blt.w	115d8 <_dtoa_r+0x5c0>
   114c0:	9a07      	ldr	r2, [sp, #28]
   114c2:	2a0e      	cmp	r2, #14
   114c4:	f300 8088 	bgt.w	115d8 <_dtoa_r+0x5c0>
   114c8:	4b24      	ldr	r3, [pc, #144]	; (1155c <_dtoa_r+0x544>)
   114ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   114ce:	e9d3 ab00 	ldrd	sl, fp, [r3]
   114d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   114d4:	2b00      	cmp	r3, #0
   114d6:	da1b      	bge.n	11510 <_dtoa_r+0x4f8>
   114d8:	9b08      	ldr	r3, [sp, #32]
   114da:	2b00      	cmp	r3, #0
   114dc:	dc18      	bgt.n	11510 <_dtoa_r+0x4f8>
   114de:	f040 832e 	bne.w	11b3e <_dtoa_r+0xb26>
   114e2:	4b24      	ldr	r3, [pc, #144]	; (11574 <_dtoa_r+0x55c>)
   114e4:	4650      	mov	r0, sl
   114e6:	2200      	movs	r2, #0
   114e8:	4659      	mov	r1, fp
   114ea:	f002 f9d5 	bl	13898 <__aeabi_dmul>
   114ee:	4602      	mov	r2, r0
   114f0:	460b      	mov	r3, r1
   114f2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   114f6:	f7fb fc09 	bl	cd0c <__aeabi_dcmple>
   114fa:	f8dd a020 	ldr.w	sl, [sp, #32]
   114fe:	4656      	mov	r6, sl
   11500:	2800      	cmp	r0, #0
   11502:	f000 82b9 	beq.w	11a78 <_dtoa_r+0xa60>
   11506:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11508:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1150c:	43df      	mvns	r7, r3
   1150e:	e2bb      	b.n	11a88 <_dtoa_r+0xa70>
   11510:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   11514:	4652      	mov	r2, sl
   11516:	465b      	mov	r3, fp
   11518:	4638      	mov	r0, r7
   1151a:	4641      	mov	r1, r8
   1151c:	f002 fae6 	bl	13aec <__aeabi_ddiv>
   11520:	f002 fbcc 	bl	13cbc <__aeabi_d2iz>
   11524:	4681      	mov	r9, r0
   11526:	9009      	str	r0, [sp, #36]	; 0x24
   11528:	f7fb fb1c 	bl	cb64 <__aeabi_i2d>
   1152c:	4652      	mov	r2, sl
   1152e:	465b      	mov	r3, fp
   11530:	f002 f9b2 	bl	13898 <__aeabi_dmul>
   11534:	9e03      	ldr	r6, [sp, #12]
   11536:	460b      	mov	r3, r1
   11538:	4602      	mov	r2, r0
   1153a:	4641      	mov	r1, r8
   1153c:	4638      	mov	r0, r7
   1153e:	f7fb f9c3 	bl	c8c8 <__aeabi_dsub>
   11542:	f109 0330 	add.w	r3, r9, #48	; 0x30
   11546:	f806 3b01 	strb.w	r3, [r6], #1
   1154a:	9b08      	ldr	r3, [sp, #32]
   1154c:	2b01      	cmp	r3, #1
   1154e:	f000 835c 	beq.w	11c0a <_dtoa_r+0xbf2>
   11552:	9406      	str	r4, [sp, #24]
   11554:	2701      	movs	r7, #1
   11556:	9504      	str	r5, [sp, #16]
   11558:	461c      	mov	r4, r3
   1155a:	e02a      	b.n	115b2 <_dtoa_r+0x59a>
   1155c:	000158f8 	.word	0x000158f8
   11560:	000158d0 	.word	0x000158d0
   11564:	3ff00000 	.word	0x3ff00000
   11568:	401c0000 	.word	0x401c0000
   1156c:	3fe00000 	.word	0x3fe00000
   11570:	40240000 	.word	0x40240000
   11574:	40140000 	.word	0x40140000
   11578:	4652      	mov	r2, sl
   1157a:	465b      	mov	r3, fp
   1157c:	4640      	mov	r0, r8
   1157e:	4649      	mov	r1, r9
   11580:	f002 fab4 	bl	13aec <__aeabi_ddiv>
   11584:	f002 fb9a 	bl	13cbc <__aeabi_d2iz>
   11588:	4605      	mov	r5, r0
   1158a:	f7fb faeb 	bl	cb64 <__aeabi_i2d>
   1158e:	4652      	mov	r2, sl
   11590:	465b      	mov	r3, fp
   11592:	f002 f981 	bl	13898 <__aeabi_dmul>
   11596:	3701      	adds	r7, #1
   11598:	460b      	mov	r3, r1
   1159a:	4602      	mov	r2, r0
   1159c:	4649      	mov	r1, r9
   1159e:	4640      	mov	r0, r8
   115a0:	f7fb f992 	bl	c8c8 <__aeabi_dsub>
   115a4:	f105 0330 	add.w	r3, r5, #48	; 0x30
   115a8:	42a7      	cmp	r7, r4
   115aa:	f806 3b01 	strb.w	r3, [r6], #1
   115ae:	f000 8329 	beq.w	11c04 <_dtoa_r+0xbec>
   115b2:	4ba5      	ldr	r3, [pc, #660]	; (11848 <_dtoa_r+0x830>)
   115b4:	2200      	movs	r2, #0
   115b6:	f002 f96f 	bl	13898 <__aeabi_dmul>
   115ba:	2200      	movs	r2, #0
   115bc:	2300      	movs	r3, #0
   115be:	4680      	mov	r8, r0
   115c0:	4689      	mov	r9, r1
   115c2:	f7fb fb8f 	bl	cce4 <__aeabi_dcmpeq>
   115c6:	2800      	cmp	r0, #0
   115c8:	d0d6      	beq.n	11578 <_dtoa_r+0x560>
   115ca:	9d04      	ldr	r5, [sp, #16]
   115cc:	9c06      	ldr	r4, [sp, #24]
   115ce:	9b07      	ldr	r3, [sp, #28]
   115d0:	3301      	adds	r3, #1
   115d2:	9307      	str	r3, [sp, #28]
   115d4:	46b1      	mov	r9, r6
   115d6:	e0d6      	b.n	11786 <_dtoa_r+0x76e>
   115d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   115da:	2a00      	cmp	r2, #0
   115dc:	f000 8107 	beq.w	117ee <_dtoa_r+0x7d6>
   115e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
   115e2:	2a01      	cmp	r2, #1
   115e4:	f340 8294 	ble.w	11b10 <_dtoa_r+0xaf8>
   115e8:	9b08      	ldr	r3, [sp, #32]
   115ea:	f103 38ff 	add.w	r8, r3, #4294967295
   115ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   115f0:	4543      	cmp	r3, r8
   115f2:	f280 825e 	bge.w	11ab2 <_dtoa_r+0xa9a>
   115f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   115f8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   115fc:	eba8 0303 	sub.w	r3, r8, r3
   11600:	449b      	add	fp, r3
   11602:	f04f 0800 	mov.w	r8, #0
   11606:	9b08      	ldr	r3, [sp, #32]
   11608:	2b00      	cmp	r3, #0
   1160a:	f2c0 832f 	blt.w	11c6c <_dtoa_r+0xc54>
   1160e:	9a06      	ldr	r2, [sp, #24]
   11610:	441a      	add	r2, r3
   11612:	9206      	str	r2, [sp, #24]
   11614:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11616:	4617      	mov	r7, r2
   11618:	441a      	add	r2, r3
   1161a:	9209      	str	r2, [sp, #36]	; 0x24
   1161c:	2101      	movs	r1, #1
   1161e:	4620      	mov	r0, r4
   11620:	f7fd f948 	bl	e8b4 <__i2b>
   11624:	4606      	mov	r6, r0
   11626:	b167      	cbz	r7, 11642 <_dtoa_r+0x62a>
   11628:	9906      	ldr	r1, [sp, #24]
   1162a:	2900      	cmp	r1, #0
   1162c:	460b      	mov	r3, r1
   1162e:	dd08      	ble.n	11642 <_dtoa_r+0x62a>
   11630:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11632:	42b9      	cmp	r1, r7
   11634:	bfa8      	it	ge
   11636:	463b      	movge	r3, r7
   11638:	1ad2      	subs	r2, r2, r3
   1163a:	1aff      	subs	r7, r7, r3
   1163c:	1acb      	subs	r3, r1, r3
   1163e:	9209      	str	r2, [sp, #36]	; 0x24
   11640:	9306      	str	r3, [sp, #24]
   11642:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11644:	b163      	cbz	r3, 11660 <_dtoa_r+0x648>
   11646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11648:	2b00      	cmp	r3, #0
   1164a:	f000 82b6 	beq.w	11bba <_dtoa_r+0xba2>
   1164e:	f1b8 0f00 	cmp.w	r8, #0
   11652:	f300 8231 	bgt.w	11ab8 <_dtoa_r+0xaa0>
   11656:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11658:	ebb3 0208 	subs.w	r2, r3, r8
   1165c:	f040 8316 	bne.w	11c8c <_dtoa_r+0xc74>
   11660:	2101      	movs	r1, #1
   11662:	4620      	mov	r0, r4
   11664:	f7fd f926 	bl	e8b4 <__i2b>
   11668:	f1bb 0f00 	cmp.w	fp, #0
   1166c:	4682      	mov	sl, r0
   1166e:	f300 80d4 	bgt.w	1181a <_dtoa_r+0x802>
   11672:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11674:	2b01      	cmp	r3, #1
   11676:	f340 81a7 	ble.w	119c8 <_dtoa_r+0x9b0>
   1167a:	f04f 0900 	mov.w	r9, #0
   1167e:	2001      	movs	r0, #1
   11680:	f1bb 0f00 	cmp.w	fp, #0
   11684:	f040 80d5 	bne.w	11832 <_dtoa_r+0x81a>
   11688:	9b06      	ldr	r3, [sp, #24]
   1168a:	4418      	add	r0, r3
   1168c:	f010 001f 	ands.w	r0, r0, #31
   11690:	f000 8198 	beq.w	119c4 <_dtoa_r+0x9ac>
   11694:	f1c0 0320 	rsb	r3, r0, #32
   11698:	2b04      	cmp	r3, #4
   1169a:	f300 80ad 	bgt.w	117f8 <_dtoa_r+0x7e0>
   1169e:	f040 8224 	bne.w	11aea <_dtoa_r+0xad2>
   116a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   116a4:	2b00      	cmp	r3, #0
   116a6:	dd05      	ble.n	116b4 <_dtoa_r+0x69c>
   116a8:	4629      	mov	r1, r5
   116aa:	461a      	mov	r2, r3
   116ac:	4620      	mov	r0, r4
   116ae:	f7fd fa3d 	bl	eb2c <__lshift>
   116b2:	4605      	mov	r5, r0
   116b4:	9b06      	ldr	r3, [sp, #24]
   116b6:	2b00      	cmp	r3, #0
   116b8:	dd05      	ble.n	116c6 <_dtoa_r+0x6ae>
   116ba:	4651      	mov	r1, sl
   116bc:	461a      	mov	r2, r3
   116be:	4620      	mov	r0, r4
   116c0:	f7fd fa34 	bl	eb2c <__lshift>
   116c4:	4682      	mov	sl, r0
   116c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   116c8:	2b00      	cmp	r3, #0
   116ca:	f040 815c 	bne.w	11986 <_dtoa_r+0x96e>
   116ce:	9b08      	ldr	r3, [sp, #32]
   116d0:	2b00      	cmp	r3, #0
   116d2:	f340 8143 	ble.w	1195c <_dtoa_r+0x944>
   116d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   116d8:	2b00      	cmp	r3, #0
   116da:	f040 80c6 	bne.w	1186a <_dtoa_r+0x852>
   116de:	9b07      	ldr	r3, [sp, #28]
   116e0:	3301      	adds	r3, #1
   116e2:	9307      	str	r3, [sp, #28]
   116e4:	f8dd 800c 	ldr.w	r8, [sp, #12]
   116e8:	f8dd 9020 	ldr.w	r9, [sp, #32]
   116ec:	2701      	movs	r7, #1
   116ee:	e007      	b.n	11700 <_dtoa_r+0x6e8>
   116f0:	4629      	mov	r1, r5
   116f2:	2300      	movs	r3, #0
   116f4:	220a      	movs	r2, #10
   116f6:	4620      	mov	r0, r4
   116f8:	f7fd f83c 	bl	e774 <__multadd>
   116fc:	3701      	adds	r7, #1
   116fe:	4605      	mov	r5, r0
   11700:	4651      	mov	r1, sl
   11702:	4628      	mov	r0, r5
   11704:	f7ff fbf4 	bl	10ef0 <quorem>
   11708:	45b9      	cmp	r9, r7
   1170a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1170e:	f808 3b01 	strb.w	r3, [r8], #1
   11712:	dced      	bgt.n	116f0 <_dtoa_r+0x6d8>
   11714:	9a08      	ldr	r2, [sp, #32]
   11716:	2a00      	cmp	r2, #0
   11718:	bfc8      	it	gt
   1171a:	4693      	movgt	fp, r2
   1171c:	9a03      	ldr	r2, [sp, #12]
   1171e:	bfd8      	it	le
   11720:	f04f 0b01 	movle.w	fp, #1
   11724:	4493      	add	fp, r2
   11726:	2700      	movs	r7, #0
   11728:	4629      	mov	r1, r5
   1172a:	2201      	movs	r2, #1
   1172c:	4620      	mov	r0, r4
   1172e:	9304      	str	r3, [sp, #16]
   11730:	f7fd f9fc 	bl	eb2c <__lshift>
   11734:	4651      	mov	r1, sl
   11736:	4605      	mov	r5, r0
   11738:	f7fd fa70 	bl	ec1c <__mcmp>
   1173c:	2800      	cmp	r0, #0
   1173e:	f340 81dc 	ble.w	11afa <_dtoa_r+0xae2>
   11742:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   11746:	9a03      	ldr	r2, [sp, #12]
   11748:	f10b 3bff 	add.w	fp, fp, #4294967295
   1174c:	e004      	b.n	11758 <_dtoa_r+0x740>
   1174e:	455a      	cmp	r2, fp
   11750:	f000 81ee 	beq.w	11b30 <_dtoa_r+0xb18>
   11754:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11758:	2b39      	cmp	r3, #57	; 0x39
   1175a:	f10b 0901 	add.w	r9, fp, #1
   1175e:	d0f6      	beq.n	1174e <_dtoa_r+0x736>
   11760:	3301      	adds	r3, #1
   11762:	f88b 3000 	strb.w	r3, [fp]
   11766:	4651      	mov	r1, sl
   11768:	4620      	mov	r0, r4
   1176a:	f7fc fff9 	bl	e760 <_Bfree>
   1176e:	b156      	cbz	r6, 11786 <_dtoa_r+0x76e>
   11770:	b12f      	cbz	r7, 1177e <_dtoa_r+0x766>
   11772:	42b7      	cmp	r7, r6
   11774:	d003      	beq.n	1177e <_dtoa_r+0x766>
   11776:	4639      	mov	r1, r7
   11778:	4620      	mov	r0, r4
   1177a:	f7fc fff1 	bl	e760 <_Bfree>
   1177e:	4631      	mov	r1, r6
   11780:	4620      	mov	r0, r4
   11782:	f7fc ffed 	bl	e760 <_Bfree>
   11786:	4629      	mov	r1, r5
   11788:	4620      	mov	r0, r4
   1178a:	f7fc ffe9 	bl	e760 <_Bfree>
   1178e:	2300      	movs	r3, #0
   11790:	f889 3000 	strb.w	r3, [r9]
   11794:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11796:	9a07      	ldr	r2, [sp, #28]
   11798:	601a      	str	r2, [r3, #0]
   1179a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1179c:	2b00      	cmp	r3, #0
   1179e:	f43f ac77 	beq.w	11090 <_dtoa_r+0x78>
   117a2:	9803      	ldr	r0, [sp, #12]
   117a4:	f8c3 9000 	str.w	r9, [r3]
   117a8:	b019      	add	sp, #100	; 0x64
   117aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117ae:	2301      	movs	r3, #1
   117b0:	1bbf      	subs	r7, r7, r6
   117b2:	930e      	str	r3, [sp, #56]	; 0x38
   117b4:	1e7b      	subs	r3, r7, #1
   117b6:	9306      	str	r3, [sp, #24]
   117b8:	f57f acd9 	bpl.w	1116e <_dtoa_r+0x156>
   117bc:	f1c7 0301 	rsb	r3, r7, #1
   117c0:	9309      	str	r3, [sp, #36]	; 0x24
   117c2:	2300      	movs	r3, #0
   117c4:	9306      	str	r3, [sp, #24]
   117c6:	e4d4      	b.n	11172 <_dtoa_r+0x15a>
   117c8:	4658      	mov	r0, fp
   117ca:	f7fb f9cb 	bl	cb64 <__aeabi_i2d>
   117ce:	4642      	mov	r2, r8
   117d0:	464b      	mov	r3, r9
   117d2:	f7fb fa87 	bl	cce4 <__aeabi_dcmpeq>
   117d6:	2800      	cmp	r0, #0
   117d8:	f47f acb1 	bne.w	1113e <_dtoa_r+0x126>
   117dc:	f10b 3bff 	add.w	fp, fp, #4294967295
   117e0:	e4ad      	b.n	1113e <_dtoa_r+0x126>
   117e2:	4b1a      	ldr	r3, [pc, #104]	; (1184c <_dtoa_r+0x834>)
   117e4:	9303      	str	r3, [sp, #12]
   117e6:	9803      	ldr	r0, [sp, #12]
   117e8:	b019      	add	sp, #100	; 0x64
   117ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117ee:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   117f2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   117f4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   117f6:	e716      	b.n	11626 <_dtoa_r+0x60e>
   117f8:	f1c0 001c 	rsb	r0, r0, #28
   117fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   117fe:	4403      	add	r3, r0
   11800:	9309      	str	r3, [sp, #36]	; 0x24
   11802:	9b06      	ldr	r3, [sp, #24]
   11804:	4403      	add	r3, r0
   11806:	4407      	add	r7, r0
   11808:	9306      	str	r3, [sp, #24]
   1180a:	e74a      	b.n	116a2 <_dtoa_r+0x68a>
   1180c:	2601      	movs	r6, #1
   1180e:	e4c7      	b.n	111a0 <_dtoa_r+0x188>
   11810:	f1c3 0320 	rsb	r3, r3, #32
   11814:	fa08 f003 	lsl.w	r0, r8, r3
   11818:	e45e      	b.n	110d8 <_dtoa_r+0xc0>
   1181a:	4601      	mov	r1, r0
   1181c:	465a      	mov	r2, fp
   1181e:	4620      	mov	r0, r4
   11820:	f7fd f924 	bl	ea6c <__pow5mult>
   11824:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11826:	2b01      	cmp	r3, #1
   11828:	4682      	mov	sl, r0
   1182a:	f340 81ba 	ble.w	11ba2 <_dtoa_r+0xb8a>
   1182e:	f04f 0900 	mov.w	r9, #0
   11832:	f8da 3010 	ldr.w	r3, [sl, #16]
   11836:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   1183a:	6918      	ldr	r0, [r3, #16]
   1183c:	f7fc ffea 	bl	e814 <__hi0bits>
   11840:	f1c0 0020 	rsb	r0, r0, #32
   11844:	e720      	b.n	11688 <_dtoa_r+0x670>
   11846:	bf00      	nop
   11848:	40240000 	.word	0x40240000
   1184c:	00014374 	.word	0x00014374
   11850:	4631      	mov	r1, r6
   11852:	2300      	movs	r3, #0
   11854:	220a      	movs	r2, #10
   11856:	4620      	mov	r0, r4
   11858:	f7fc ff8c 	bl	e774 <__multadd>
   1185c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1185e:	2b00      	cmp	r3, #0
   11860:	4606      	mov	r6, r0
   11862:	f340 82f3 	ble.w	11e4c <_dtoa_r+0xe34>
   11866:	e9cd 8307 	strd	r8, r3, [sp, #28]
   1186a:	2f00      	cmp	r7, #0
   1186c:	f300 811a 	bgt.w	11aa4 <_dtoa_r+0xa8c>
   11870:	f1b9 0f00 	cmp.w	r9, #0
   11874:	f040 81e3 	bne.w	11c3e <_dtoa_r+0xc26>
   11878:	46b0      	mov	r8, r6
   1187a:	9b04      	ldr	r3, [sp, #16]
   1187c:	9f03      	ldr	r7, [sp, #12]
   1187e:	9908      	ldr	r1, [sp, #32]
   11880:	f003 0201 	and.w	r2, r3, #1
   11884:	1e7b      	subs	r3, r7, #1
   11886:	4419      	add	r1, r3
   11888:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1188a:	920c      	str	r2, [sp, #48]	; 0x30
   1188c:	4313      	orrs	r3, r2
   1188e:	9109      	str	r1, [sp, #36]	; 0x24
   11890:	930a      	str	r3, [sp, #40]	; 0x28
   11892:	4651      	mov	r1, sl
   11894:	4628      	mov	r0, r5
   11896:	f7ff fb2b 	bl	10ef0 <quorem>
   1189a:	4631      	mov	r1, r6
   1189c:	4683      	mov	fp, r0
   1189e:	4628      	mov	r0, r5
   118a0:	f7fd f9bc 	bl	ec1c <__mcmp>
   118a4:	4642      	mov	r2, r8
   118a6:	4651      	mov	r1, sl
   118a8:	4681      	mov	r9, r0
   118aa:	4620      	mov	r0, r4
   118ac:	f7fd f9d6 	bl	ec5c <__mdiff>
   118b0:	68c2      	ldr	r2, [r0, #12]
   118b2:	4601      	mov	r1, r0
   118b4:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   118b8:	2a00      	cmp	r2, #0
   118ba:	d142      	bne.n	11942 <_dtoa_r+0x92a>
   118bc:	9006      	str	r0, [sp, #24]
   118be:	4628      	mov	r0, r5
   118c0:	9308      	str	r3, [sp, #32]
   118c2:	f7fd f9ab 	bl	ec1c <__mcmp>
   118c6:	9906      	ldr	r1, [sp, #24]
   118c8:	9004      	str	r0, [sp, #16]
   118ca:	4620      	mov	r0, r4
   118cc:	f7fc ff48 	bl	e760 <_Bfree>
   118d0:	9a04      	ldr	r2, [sp, #16]
   118d2:	9b08      	ldr	r3, [sp, #32]
   118d4:	b91a      	cbnz	r2, 118de <_dtoa_r+0x8c6>
   118d6:	990a      	ldr	r1, [sp, #40]	; 0x28
   118d8:	2900      	cmp	r1, #0
   118da:	f000 82a9 	beq.w	11e30 <_dtoa_r+0xe18>
   118de:	f1b9 0f00 	cmp.w	r9, #0
   118e2:	f2c0 8171 	blt.w	11bc8 <_dtoa_r+0xbb0>
   118e6:	9922      	ldr	r1, [sp, #136]	; 0x88
   118e8:	ea49 0901 	orr.w	r9, r9, r1
   118ec:	990c      	ldr	r1, [sp, #48]	; 0x30
   118ee:	ea51 0909 	orrs.w	r9, r1, r9
   118f2:	f000 8169 	beq.w	11bc8 <_dtoa_r+0xbb0>
   118f6:	2a00      	cmp	r2, #0
   118f8:	f300 81bc 	bgt.w	11c74 <_dtoa_r+0xc5c>
   118fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   118fe:	703b      	strb	r3, [r7, #0]
   11900:	f107 0901 	add.w	r9, r7, #1
   11904:	4297      	cmp	r7, r2
   11906:	46cb      	mov	fp, r9
   11908:	f000 81ba 	beq.w	11c80 <_dtoa_r+0xc68>
   1190c:	4629      	mov	r1, r5
   1190e:	2300      	movs	r3, #0
   11910:	220a      	movs	r2, #10
   11912:	4620      	mov	r0, r4
   11914:	f7fc ff2e 	bl	e774 <__multadd>
   11918:	4546      	cmp	r6, r8
   1191a:	4605      	mov	r5, r0
   1191c:	4631      	mov	r1, r6
   1191e:	f04f 0300 	mov.w	r3, #0
   11922:	f04f 020a 	mov.w	r2, #10
   11926:	4620      	mov	r0, r4
   11928:	d012      	beq.n	11950 <_dtoa_r+0x938>
   1192a:	f7fc ff23 	bl	e774 <__multadd>
   1192e:	4641      	mov	r1, r8
   11930:	4606      	mov	r6, r0
   11932:	2300      	movs	r3, #0
   11934:	220a      	movs	r2, #10
   11936:	4620      	mov	r0, r4
   11938:	f7fc ff1c 	bl	e774 <__multadd>
   1193c:	464f      	mov	r7, r9
   1193e:	4680      	mov	r8, r0
   11940:	e7a7      	b.n	11892 <_dtoa_r+0x87a>
   11942:	4620      	mov	r0, r4
   11944:	9304      	str	r3, [sp, #16]
   11946:	f7fc ff0b 	bl	e760 <_Bfree>
   1194a:	9b04      	ldr	r3, [sp, #16]
   1194c:	2201      	movs	r2, #1
   1194e:	e7c6      	b.n	118de <_dtoa_r+0x8c6>
   11950:	f7fc ff10 	bl	e774 <__multadd>
   11954:	464f      	mov	r7, r9
   11956:	4606      	mov	r6, r0
   11958:	4680      	mov	r8, r0
   1195a:	e79a      	b.n	11892 <_dtoa_r+0x87a>
   1195c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1195e:	2b02      	cmp	r3, #2
   11960:	dc79      	bgt.n	11a56 <_dtoa_r+0xa3e>
   11962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11964:	2b00      	cmp	r3, #0
   11966:	d180      	bne.n	1186a <_dtoa_r+0x852>
   11968:	9b07      	ldr	r3, [sp, #28]
   1196a:	4651      	mov	r1, sl
   1196c:	3301      	adds	r3, #1
   1196e:	4628      	mov	r0, r5
   11970:	9307      	str	r3, [sp, #28]
   11972:	f7ff fabd 	bl	10ef0 <quorem>
   11976:	f8dd b00c 	ldr.w	fp, [sp, #12]
   1197a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1197e:	f80b 3b01 	strb.w	r3, [fp], #1
   11982:	2700      	movs	r7, #0
   11984:	e6d0      	b.n	11728 <_dtoa_r+0x710>
   11986:	4651      	mov	r1, sl
   11988:	4628      	mov	r0, r5
   1198a:	f7fd f947 	bl	ec1c <__mcmp>
   1198e:	2800      	cmp	r0, #0
   11990:	f6bf ae9d 	bge.w	116ce <_dtoa_r+0x6b6>
   11994:	4629      	mov	r1, r5
   11996:	2300      	movs	r3, #0
   11998:	220a      	movs	r2, #10
   1199a:	4620      	mov	r0, r4
   1199c:	f7fc feea 	bl	e774 <__multadd>
   119a0:	9b07      	ldr	r3, [sp, #28]
   119a2:	f103 38ff 	add.w	r8, r3, #4294967295
   119a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   119a8:	4605      	mov	r5, r0
   119aa:	2b00      	cmp	r3, #0
   119ac:	f47f af50 	bne.w	11850 <_dtoa_r+0x838>
   119b0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   119b2:	2b00      	cmp	r3, #0
   119b4:	f340 8243 	ble.w	11e3e <_dtoa_r+0xe26>
   119b8:	9308      	str	r3, [sp, #32]
   119ba:	e693      	b.n	116e4 <_dtoa_r+0x6cc>
   119bc:	4bb6      	ldr	r3, [pc, #728]	; (11c98 <_dtoa_r+0xc80>)
   119be:	9303      	str	r3, [sp, #12]
   119c0:	3303      	adds	r3, #3
   119c2:	e408      	b.n	111d6 <_dtoa_r+0x1be>
   119c4:	201c      	movs	r0, #28
   119c6:	e719      	b.n	117fc <_dtoa_r+0x7e4>
   119c8:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   119cc:	2900      	cmp	r1, #0
   119ce:	f47f ae54 	bne.w	1167a <_dtoa_r+0x662>
   119d2:	f3c2 0313 	ubfx	r3, r2, #0, #20
   119d6:	2b00      	cmp	r3, #0
   119d8:	f47f ae4f 	bne.w	1167a <_dtoa_r+0x662>
   119dc:	4baf      	ldr	r3, [pc, #700]	; (11c9c <_dtoa_r+0xc84>)
   119de:	4013      	ands	r3, r2
   119e0:	2b00      	cmp	r3, #0
   119e2:	f000 820b 	beq.w	11dfc <_dtoa_r+0xde4>
   119e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   119e8:	3301      	adds	r3, #1
   119ea:	9309      	str	r3, [sp, #36]	; 0x24
   119ec:	9b06      	ldr	r3, [sp, #24]
   119ee:	3301      	adds	r3, #1
   119f0:	9306      	str	r3, [sp, #24]
   119f2:	f04f 0901 	mov.w	r9, #1
   119f6:	e642      	b.n	1167e <_dtoa_r+0x666>
   119f8:	2301      	movs	r3, #1
   119fa:	930c      	str	r3, [sp, #48]	; 0x30
   119fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   119fe:	9a07      	ldr	r2, [sp, #28]
   11a00:	4413      	add	r3, r2
   11a02:	9312      	str	r3, [sp, #72]	; 0x48
   11a04:	3301      	adds	r3, #1
   11a06:	2b01      	cmp	r3, #1
   11a08:	461f      	mov	r7, r3
   11a0a:	9308      	str	r3, [sp, #32]
   11a0c:	bfb8      	it	lt
   11a0e:	2701      	movlt	r7, #1
   11a10:	2100      	movs	r1, #0
   11a12:	2f17      	cmp	r7, #23
   11a14:	63e1      	str	r1, [r4, #60]	; 0x3c
   11a16:	f77f ac2f 	ble.w	11278 <_dtoa_r+0x260>
   11a1a:	2201      	movs	r2, #1
   11a1c:	2304      	movs	r3, #4
   11a1e:	005b      	lsls	r3, r3, #1
   11a20:	f103 0014 	add.w	r0, r3, #20
   11a24:	42b8      	cmp	r0, r7
   11a26:	4611      	mov	r1, r2
   11a28:	f102 0201 	add.w	r2, r2, #1
   11a2c:	d9f7      	bls.n	11a1e <_dtoa_r+0xa06>
   11a2e:	63e1      	str	r1, [r4, #60]	; 0x3c
   11a30:	e422      	b.n	11278 <_dtoa_r+0x260>
   11a32:	2301      	movs	r3, #1
   11a34:	930c      	str	r3, [sp, #48]	; 0x30
   11a36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11a38:	2b00      	cmp	r3, #0
   11a3a:	dd59      	ble.n	11af0 <_dtoa_r+0xad8>
   11a3c:	9312      	str	r3, [sp, #72]	; 0x48
   11a3e:	9308      	str	r3, [sp, #32]
   11a40:	461f      	mov	r7, r3
   11a42:	e7e5      	b.n	11a10 <_dtoa_r+0x9f8>
   11a44:	2300      	movs	r3, #0
   11a46:	930c      	str	r3, [sp, #48]	; 0x30
   11a48:	e7d8      	b.n	119fc <_dtoa_r+0x9e4>
   11a4a:	2300      	movs	r3, #0
   11a4c:	930c      	str	r3, [sp, #48]	; 0x30
   11a4e:	e7f2      	b.n	11a36 <_dtoa_r+0xa1e>
   11a50:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11a52:	e9cd 8307 	strd	r8, r3, [sp, #28]
   11a56:	9b08      	ldr	r3, [sp, #32]
   11a58:	2b00      	cmp	r3, #0
   11a5a:	f47f ad54 	bne.w	11506 <_dtoa_r+0x4ee>
   11a5e:	4651      	mov	r1, sl
   11a60:	2205      	movs	r2, #5
   11a62:	4620      	mov	r0, r4
   11a64:	f7fc fe86 	bl	e774 <__multadd>
   11a68:	4601      	mov	r1, r0
   11a6a:	4682      	mov	sl, r0
   11a6c:	4628      	mov	r0, r5
   11a6e:	f7fd f8d5 	bl	ec1c <__mcmp>
   11a72:	2800      	cmp	r0, #0
   11a74:	f77f ad47 	ble.w	11506 <_dtoa_r+0x4ee>
   11a78:	9b03      	ldr	r3, [sp, #12]
   11a7a:	9f07      	ldr	r7, [sp, #28]
   11a7c:	2231      	movs	r2, #49	; 0x31
   11a7e:	4698      	mov	r8, r3
   11a80:	f803 2b01 	strb.w	r2, [r3], #1
   11a84:	3701      	adds	r7, #1
   11a86:	9303      	str	r3, [sp, #12]
   11a88:	4651      	mov	r1, sl
   11a8a:	4620      	mov	r0, r4
   11a8c:	f7fc fe68 	bl	e760 <_Bfree>
   11a90:	1c7b      	adds	r3, r7, #1
   11a92:	f8dd 900c 	ldr.w	r9, [sp, #12]
   11a96:	9307      	str	r3, [sp, #28]
   11a98:	f8cd 800c 	str.w	r8, [sp, #12]
   11a9c:	2e00      	cmp	r6, #0
   11a9e:	f47f ae6e 	bne.w	1177e <_dtoa_r+0x766>
   11aa2:	e670      	b.n	11786 <_dtoa_r+0x76e>
   11aa4:	4631      	mov	r1, r6
   11aa6:	463a      	mov	r2, r7
   11aa8:	4620      	mov	r0, r4
   11aaa:	f7fd f83f 	bl	eb2c <__lshift>
   11aae:	4606      	mov	r6, r0
   11ab0:	e6de      	b.n	11870 <_dtoa_r+0x858>
   11ab2:	eba3 0808 	sub.w	r8, r3, r8
   11ab6:	e5a6      	b.n	11606 <_dtoa_r+0x5ee>
   11ab8:	4631      	mov	r1, r6
   11aba:	4642      	mov	r2, r8
   11abc:	4620      	mov	r0, r4
   11abe:	f7fc ffd5 	bl	ea6c <__pow5mult>
   11ac2:	462a      	mov	r2, r5
   11ac4:	4601      	mov	r1, r0
   11ac6:	4606      	mov	r6, r0
   11ac8:	4620      	mov	r0, r4
   11aca:	f7fc ff21 	bl	e910 <__multiply>
   11ace:	4629      	mov	r1, r5
   11ad0:	4605      	mov	r5, r0
   11ad2:	4620      	mov	r0, r4
   11ad4:	f7fc fe44 	bl	e760 <_Bfree>
   11ad8:	e5bd      	b.n	11656 <_dtoa_r+0x63e>
   11ada:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   11ade:	f04f 0a02 	mov.w	sl, #2
   11ae2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   11ae6:	f7ff bbf4 	b.w	112d2 <_dtoa_r+0x2ba>
   11aea:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   11aee:	e685      	b.n	117fc <_dtoa_r+0x7e4>
   11af0:	2301      	movs	r3, #1
   11af2:	9323      	str	r3, [sp, #140]	; 0x8c
   11af4:	9308      	str	r3, [sp, #32]
   11af6:	f7ff bbbb 	b.w	11270 <_dtoa_r+0x258>
   11afa:	d103      	bne.n	11b04 <_dtoa_r+0xaec>
   11afc:	9b04      	ldr	r3, [sp, #16]
   11afe:	07db      	lsls	r3, r3, #31
   11b00:	f53f ae1f 	bmi.w	11742 <_dtoa_r+0x72a>
   11b04:	46d9      	mov	r9, fp
   11b06:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11b0a:	2b30      	cmp	r3, #48	; 0x30
   11b0c:	d0fa      	beq.n	11b04 <_dtoa_r+0xaec>
   11b0e:	e62a      	b.n	11766 <_dtoa_r+0x74e>
   11b10:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11b12:	2a00      	cmp	r2, #0
   11b14:	f000 812d 	beq.w	11d72 <_dtoa_r+0xd5a>
   11b18:	f203 4333 	addw	r3, r3, #1075	; 0x433
   11b1c:	9a06      	ldr	r2, [sp, #24]
   11b1e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   11b22:	441a      	add	r2, r3
   11b24:	9206      	str	r2, [sp, #24]
   11b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11b28:	4617      	mov	r7, r2
   11b2a:	441a      	add	r2, r3
   11b2c:	9209      	str	r2, [sp, #36]	; 0x24
   11b2e:	e575      	b.n	1161c <_dtoa_r+0x604>
   11b30:	9b07      	ldr	r3, [sp, #28]
   11b32:	9a03      	ldr	r2, [sp, #12]
   11b34:	3301      	adds	r3, #1
   11b36:	9307      	str	r3, [sp, #28]
   11b38:	2331      	movs	r3, #49	; 0x31
   11b3a:	7013      	strb	r3, [r2, #0]
   11b3c:	e613      	b.n	11766 <_dtoa_r+0x74e>
   11b3e:	f04f 0a00 	mov.w	sl, #0
   11b42:	4656      	mov	r6, sl
   11b44:	e4df      	b.n	11506 <_dtoa_r+0x4ee>
   11b46:	900e      	str	r0, [sp, #56]	; 0x38
   11b48:	e638      	b.n	117bc <_dtoa_r+0x7a4>
   11b4a:	f000 813d 	beq.w	11dc8 <_dtoa_r+0xdb0>
   11b4e:	9a07      	ldr	r2, [sp, #28]
   11b50:	4b53      	ldr	r3, [pc, #332]	; (11ca0 <_dtoa_r+0xc88>)
   11b52:	4256      	negs	r6, r2
   11b54:	f006 020f 	and.w	r2, r6, #15
   11b58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   11b60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11b64:	f001 fe98 	bl	13898 <__aeabi_dmul>
   11b68:	1136      	asrs	r6, r6, #4
   11b6a:	4680      	mov	r8, r0
   11b6c:	4689      	mov	r9, r1
   11b6e:	f000 8178 	beq.w	11e62 <_dtoa_r+0xe4a>
   11b72:	4f4c      	ldr	r7, [pc, #304]	; (11ca4 <_dtoa_r+0xc8c>)
   11b74:	2300      	movs	r3, #0
   11b76:	f04f 0a02 	mov.w	sl, #2
   11b7a:	07f2      	lsls	r2, r6, #31
   11b7c:	d506      	bpl.n	11b8c <_dtoa_r+0xb74>
   11b7e:	e9d7 2300 	ldrd	r2, r3, [r7]
   11b82:	f001 fe89 	bl	13898 <__aeabi_dmul>
   11b86:	f10a 0a01 	add.w	sl, sl, #1
   11b8a:	2301      	movs	r3, #1
   11b8c:	1076      	asrs	r6, r6, #1
   11b8e:	f107 0708 	add.w	r7, r7, #8
   11b92:	d1f2      	bne.n	11b7a <_dtoa_r+0xb62>
   11b94:	2b00      	cmp	r3, #0
   11b96:	f43f abbb 	beq.w	11310 <_dtoa_r+0x2f8>
   11b9a:	4680      	mov	r8, r0
   11b9c:	4689      	mov	r9, r1
   11b9e:	f7ff bbb7 	b.w	11310 <_dtoa_r+0x2f8>
   11ba2:	9b04      	ldr	r3, [sp, #16]
   11ba4:	2b00      	cmp	r3, #0
   11ba6:	f47f ae42 	bne.w	1182e <_dtoa_r+0x816>
   11baa:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11bae:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11bb2:	2b00      	cmp	r3, #0
   11bb4:	f43f af12 	beq.w	119dc <_dtoa_r+0x9c4>
   11bb8:	e639      	b.n	1182e <_dtoa_r+0x816>
   11bba:	4629      	mov	r1, r5
   11bbc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11bbe:	4620      	mov	r0, r4
   11bc0:	f7fc ff54 	bl	ea6c <__pow5mult>
   11bc4:	4605      	mov	r5, r0
   11bc6:	e54b      	b.n	11660 <_dtoa_r+0x648>
   11bc8:	2a00      	cmp	r2, #0
   11bca:	dd12      	ble.n	11bf2 <_dtoa_r+0xbda>
   11bcc:	4629      	mov	r1, r5
   11bce:	2201      	movs	r2, #1
   11bd0:	4620      	mov	r0, r4
   11bd2:	9304      	str	r3, [sp, #16]
   11bd4:	f7fc ffaa 	bl	eb2c <__lshift>
   11bd8:	4651      	mov	r1, sl
   11bda:	4605      	mov	r5, r0
   11bdc:	f7fd f81e 	bl	ec1c <__mcmp>
   11be0:	2800      	cmp	r0, #0
   11be2:	9b04      	ldr	r3, [sp, #16]
   11be4:	f340 8118 	ble.w	11e18 <_dtoa_r+0xe00>
   11be8:	2b39      	cmp	r3, #57	; 0x39
   11bea:	f000 80f9 	beq.w	11de0 <_dtoa_r+0xdc8>
   11bee:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11bf2:	46b9      	mov	r9, r7
   11bf4:	f809 3b01 	strb.w	r3, [r9], #1
   11bf8:	9b07      	ldr	r3, [sp, #28]
   11bfa:	3301      	adds	r3, #1
   11bfc:	4637      	mov	r7, r6
   11bfe:	9307      	str	r3, [sp, #28]
   11c00:	4646      	mov	r6, r8
   11c02:	e5b0      	b.n	11766 <_dtoa_r+0x74e>
   11c04:	9509      	str	r5, [sp, #36]	; 0x24
   11c06:	9c06      	ldr	r4, [sp, #24]
   11c08:	9d04      	ldr	r5, [sp, #16]
   11c0a:	4602      	mov	r2, r0
   11c0c:	460b      	mov	r3, r1
   11c0e:	f7fa fe5d 	bl	c8cc <__adddf3>
   11c12:	4652      	mov	r2, sl
   11c14:	465b      	mov	r3, fp
   11c16:	4680      	mov	r8, r0
   11c18:	4689      	mov	r9, r1
   11c1a:	f7fb f88b 	bl	cd34 <__aeabi_dcmpgt>
   11c1e:	b960      	cbnz	r0, 11c3a <_dtoa_r+0xc22>
   11c20:	4652      	mov	r2, sl
   11c22:	465b      	mov	r3, fp
   11c24:	4640      	mov	r0, r8
   11c26:	4649      	mov	r1, r9
   11c28:	f7fb f85c 	bl	cce4 <__aeabi_dcmpeq>
   11c2c:	2800      	cmp	r0, #0
   11c2e:	f43f acce 	beq.w	115ce <_dtoa_r+0x5b6>
   11c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11c34:	07d9      	lsls	r1, r3, #31
   11c36:	f57f acca 	bpl.w	115ce <_dtoa_r+0x5b6>
   11c3a:	9a03      	ldr	r2, [sp, #12]
   11c3c:	e404      	b.n	11448 <_dtoa_r+0x430>
   11c3e:	6871      	ldr	r1, [r6, #4]
   11c40:	4620      	mov	r0, r4
   11c42:	f7fc fd67 	bl	e714 <_Balloc>
   11c46:	4607      	mov	r7, r0
   11c48:	2800      	cmp	r0, #0
   11c4a:	f000 810e 	beq.w	11e6a <_dtoa_r+0xe52>
   11c4e:	6933      	ldr	r3, [r6, #16]
   11c50:	3302      	adds	r3, #2
   11c52:	009a      	lsls	r2, r3, #2
   11c54:	f106 010c 	add.w	r1, r6, #12
   11c58:	300c      	adds	r0, #12
   11c5a:	f7f8 f86b 	bl	9d34 <memcpy>
   11c5e:	4639      	mov	r1, r7
   11c60:	2201      	movs	r2, #1
   11c62:	4620      	mov	r0, r4
   11c64:	f7fc ff62 	bl	eb2c <__lshift>
   11c68:	4680      	mov	r8, r0
   11c6a:	e606      	b.n	1187a <_dtoa_r+0x862>
   11c6c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   11c70:	1a9f      	subs	r7, r3, r2
   11c72:	e4d3      	b.n	1161c <_dtoa_r+0x604>
   11c74:	2b39      	cmp	r3, #57	; 0x39
   11c76:	f000 80b3 	beq.w	11de0 <_dtoa_r+0xdc8>
   11c7a:	46b9      	mov	r9, r7
   11c7c:	3301      	adds	r3, #1
   11c7e:	e7b9      	b.n	11bf4 <_dtoa_r+0xbdc>
   11c80:	9a07      	ldr	r2, [sp, #28]
   11c82:	3201      	adds	r2, #1
   11c84:	4637      	mov	r7, r6
   11c86:	9207      	str	r2, [sp, #28]
   11c88:	4646      	mov	r6, r8
   11c8a:	e54d      	b.n	11728 <_dtoa_r+0x710>
   11c8c:	4629      	mov	r1, r5
   11c8e:	4620      	mov	r0, r4
   11c90:	f7fc feec 	bl	ea6c <__pow5mult>
   11c94:	4605      	mov	r5, r0
   11c96:	e4e3      	b.n	11660 <_dtoa_r+0x648>
   11c98:	00015a70 	.word	0x00015a70
   11c9c:	7ff00000 	.word	0x7ff00000
   11ca0:	000158f8 	.word	0x000158f8
   11ca4:	000158d0 	.word	0x000158d0
   11ca8:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   11cac:	4981      	ldr	r1, [pc, #516]	; (11eb4 <_dtoa_r+0xe9c>)
   11cae:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   11cb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11cb6:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   11cba:	f001 fded 	bl	13898 <__aeabi_dmul>
   11cbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11cc2:	4649      	mov	r1, r9
   11cc4:	4640      	mov	r0, r8
   11cc6:	f001 fff9 	bl	13cbc <__aeabi_d2iz>
   11cca:	4606      	mov	r6, r0
   11ccc:	f7fa ff4a 	bl	cb64 <__aeabi_i2d>
   11cd0:	460b      	mov	r3, r1
   11cd2:	4602      	mov	r2, r0
   11cd4:	4649      	mov	r1, r9
   11cd6:	4640      	mov	r0, r8
   11cd8:	f7fa fdf6 	bl	c8c8 <__aeabi_dsub>
   11cdc:	9f03      	ldr	r7, [sp, #12]
   11cde:	4653      	mov	r3, sl
   11ce0:	3630      	adds	r6, #48	; 0x30
   11ce2:	2b01      	cmp	r3, #1
   11ce4:	f807 6b01 	strb.w	r6, [r7], #1
   11ce8:	4680      	mov	r8, r0
   11cea:	4689      	mov	r9, r1
   11cec:	f000 80b7 	beq.w	11e5e <_dtoa_r+0xe46>
   11cf0:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   11cf2:	9b03      	ldr	r3, [sp, #12]
   11cf4:	441e      	add	r6, r3
   11cf6:	4b70      	ldr	r3, [pc, #448]	; (11eb8 <_dtoa_r+0xea0>)
   11cf8:	2200      	movs	r2, #0
   11cfa:	4640      	mov	r0, r8
   11cfc:	4649      	mov	r1, r9
   11cfe:	f001 fdcb 	bl	13898 <__aeabi_dmul>
   11d02:	4689      	mov	r9, r1
   11d04:	4680      	mov	r8, r0
   11d06:	f001 ffd9 	bl	13cbc <__aeabi_d2iz>
   11d0a:	4682      	mov	sl, r0
   11d0c:	f7fa ff2a 	bl	cb64 <__aeabi_i2d>
   11d10:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   11d14:	4602      	mov	r2, r0
   11d16:	460b      	mov	r3, r1
   11d18:	4640      	mov	r0, r8
   11d1a:	4649      	mov	r1, r9
   11d1c:	f7fa fdd4 	bl	c8c8 <__aeabi_dsub>
   11d20:	f807 ab01 	strb.w	sl, [r7], #1
   11d24:	42be      	cmp	r6, r7
   11d26:	4680      	mov	r8, r0
   11d28:	4689      	mov	r9, r1
   11d2a:	d1e4      	bne.n	11cf6 <_dtoa_r+0xcde>
   11d2c:	4b63      	ldr	r3, [pc, #396]	; (11ebc <_dtoa_r+0xea4>)
   11d2e:	2200      	movs	r2, #0
   11d30:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11d34:	f7fa fdca 	bl	c8cc <__adddf3>
   11d38:	4642      	mov	r2, r8
   11d3a:	464b      	mov	r3, r9
   11d3c:	f7fa ffdc 	bl	ccf8 <__aeabi_dcmplt>
   11d40:	2800      	cmp	r0, #0
   11d42:	d164      	bne.n	11e0e <_dtoa_r+0xdf6>
   11d44:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11d48:	495c      	ldr	r1, [pc, #368]	; (11ebc <_dtoa_r+0xea4>)
   11d4a:	2000      	movs	r0, #0
   11d4c:	f7fa fdbc 	bl	c8c8 <__aeabi_dsub>
   11d50:	4642      	mov	r2, r8
   11d52:	464b      	mov	r3, r9
   11d54:	f7fa ffee 	bl	cd34 <__aeabi_dcmpgt>
   11d58:	2800      	cmp	r0, #0
   11d5a:	f43f abad 	beq.w	114b8 <_dtoa_r+0x4a0>
   11d5e:	46b1      	mov	r9, r6
   11d60:	3e01      	subs	r6, #1
   11d62:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   11d66:	2b30      	cmp	r3, #48	; 0x30
   11d68:	d0f9      	beq.n	11d5e <_dtoa_r+0xd46>
   11d6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11d6c:	3301      	adds	r3, #1
   11d6e:	9307      	str	r3, [sp, #28]
   11d70:	e509      	b.n	11786 <_dtoa_r+0x76e>
   11d72:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11d74:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   11d78:	e6d0      	b.n	11b1c <_dtoa_r+0xb04>
   11d7a:	9b08      	ldr	r3, [sp, #32]
   11d7c:	2b00      	cmp	r3, #0
   11d7e:	f43f ab6f 	beq.w	11460 <_dtoa_r+0x448>
   11d82:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11d84:	2b00      	cmp	r3, #0
   11d86:	f77f ab97 	ble.w	114b8 <_dtoa_r+0x4a0>
   11d8a:	9a07      	ldr	r2, [sp, #28]
   11d8c:	3a01      	subs	r2, #1
   11d8e:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   11d92:	4640      	mov	r0, r8
   11d94:	4b48      	ldr	r3, [pc, #288]	; (11eb8 <_dtoa_r+0xea0>)
   11d96:	2200      	movs	r2, #0
   11d98:	4649      	mov	r1, r9
   11d9a:	f001 fd7d 	bl	13898 <__aeabi_dmul>
   11d9e:	4680      	mov	r8, r0
   11da0:	4689      	mov	r9, r1
   11da2:	f10a 0001 	add.w	r0, sl, #1
   11da6:	f7fa fedd 	bl	cb64 <__aeabi_i2d>
   11daa:	4642      	mov	r2, r8
   11dac:	464b      	mov	r3, r9
   11dae:	f001 fd73 	bl	13898 <__aeabi_dmul>
   11db2:	4b43      	ldr	r3, [pc, #268]	; (11ec0 <_dtoa_r+0xea8>)
   11db4:	2200      	movs	r2, #0
   11db6:	f7fa fd89 	bl	c8cc <__adddf3>
   11dba:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   11dbe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11dc2:	9311      	str	r3, [sp, #68]	; 0x44
   11dc4:	f7ff bac7 	b.w	11356 <_dtoa_r+0x33e>
   11dc8:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   11dcc:	f04f 0a02 	mov.w	sl, #2
   11dd0:	f7ff ba9e 	b.w	11310 <_dtoa_r+0x2f8>
   11dd4:	9b07      	ldr	r3, [sp, #28]
   11dd6:	3301      	adds	r3, #1
   11dd8:	9307      	str	r3, [sp, #28]
   11dda:	2331      	movs	r3, #49	; 0x31
   11ddc:	f7ff bb3b 	b.w	11456 <_dtoa_r+0x43e>
   11de0:	9b07      	ldr	r3, [sp, #28]
   11de2:	46bb      	mov	fp, r7
   11de4:	3301      	adds	r3, #1
   11de6:	9307      	str	r3, [sp, #28]
   11de8:	2339      	movs	r3, #57	; 0x39
   11dea:	4637      	mov	r7, r6
   11dec:	f80b 3b01 	strb.w	r3, [fp], #1
   11df0:	4646      	mov	r6, r8
   11df2:	e4a8      	b.n	11746 <_dtoa_r+0x72e>
   11df4:	f04f 0a00 	mov.w	sl, #0
   11df8:	4656      	mov	r6, sl
   11dfa:	e63d      	b.n	11a78 <_dtoa_r+0xa60>
   11dfc:	4699      	mov	r9, r3
   11dfe:	e43e      	b.n	1167e <_dtoa_r+0x666>
   11e00:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11e02:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11e04:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11e06:	3301      	adds	r3, #1
   11e08:	9307      	str	r3, [sp, #28]
   11e0a:	46b1      	mov	r9, r6
   11e0c:	e4bb      	b.n	11786 <_dtoa_r+0x76e>
   11e0e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11e10:	9a03      	ldr	r2, [sp, #12]
   11e12:	9307      	str	r3, [sp, #28]
   11e14:	f7ff bb18 	b.w	11448 <_dtoa_r+0x430>
   11e18:	f47f aeeb 	bne.w	11bf2 <_dtoa_r+0xbda>
   11e1c:	07da      	lsls	r2, r3, #31
   11e1e:	f57f aee8 	bpl.w	11bf2 <_dtoa_r+0xbda>
   11e22:	e6e1      	b.n	11be8 <_dtoa_r+0xbd0>
   11e24:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   11e28:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11e2a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11e2c:	f7ff bb44 	b.w	114b8 <_dtoa_r+0x4a0>
   11e30:	2b39      	cmp	r3, #57	; 0x39
   11e32:	d0d5      	beq.n	11de0 <_dtoa_r+0xdc8>
   11e34:	f1b9 0f00 	cmp.w	r9, #0
   11e38:	f73f aed9 	bgt.w	11bee <_dtoa_r+0xbd6>
   11e3c:	e6d9      	b.n	11bf2 <_dtoa_r+0xbda>
   11e3e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11e40:	2b02      	cmp	r3, #2
   11e42:	f73f ae05 	bgt.w	11a50 <_dtoa_r+0xa38>
   11e46:	f8cd 801c 	str.w	r8, [sp, #28]
   11e4a:	e58d      	b.n	11968 <_dtoa_r+0x950>
   11e4c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11e4e:	2b02      	cmp	r3, #2
   11e50:	f73f adfe 	bgt.w	11a50 <_dtoa_r+0xa38>
   11e54:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11e56:	f8cd 801c 	str.w	r8, [sp, #28]
   11e5a:	9308      	str	r3, [sp, #32]
   11e5c:	e505      	b.n	1186a <_dtoa_r+0x852>
   11e5e:	463e      	mov	r6, r7
   11e60:	e764      	b.n	11d2c <_dtoa_r+0xd14>
   11e62:	f04f 0a02 	mov.w	sl, #2
   11e66:	f7ff ba53 	b.w	11310 <_dtoa_r+0x2f8>
   11e6a:	4b16      	ldr	r3, [pc, #88]	; (11ec4 <_dtoa_r+0xeac>)
   11e6c:	4816      	ldr	r0, [pc, #88]	; (11ec8 <_dtoa_r+0xeb0>)
   11e6e:	463a      	mov	r2, r7
   11e70:	f240 21ef 	movw	r1, #751	; 0x2ef
   11e74:	f7fe ffe0 	bl	10e38 <__assert_func>
   11e78:	2600      	movs	r6, #0
   11e7a:	63e6      	str	r6, [r4, #60]	; 0x3c
   11e7c:	4631      	mov	r1, r6
   11e7e:	4620      	mov	r0, r4
   11e80:	f7fc fc48 	bl	e714 <_Balloc>
   11e84:	9003      	str	r0, [sp, #12]
   11e86:	b950      	cbnz	r0, 11e9e <_dtoa_r+0xe86>
   11e88:	4b0e      	ldr	r3, [pc, #56]	; (11ec4 <_dtoa_r+0xeac>)
   11e8a:	480f      	ldr	r0, [pc, #60]	; (11ec8 <_dtoa_r+0xeb0>)
   11e8c:	2200      	movs	r2, #0
   11e8e:	f240 11af 	movw	r1, #431	; 0x1af
   11e92:	f7fe ffd1 	bl	10e38 <__assert_func>
   11e96:	4b0d      	ldr	r3, [pc, #52]	; (11ecc <_dtoa_r+0xeb4>)
   11e98:	9303      	str	r3, [sp, #12]
   11e9a:	f7ff b8f9 	b.w	11090 <_dtoa_r+0x78>
   11e9e:	9b03      	ldr	r3, [sp, #12]
   11ea0:	63a3      	str	r3, [r4, #56]	; 0x38
   11ea2:	f04f 33ff 	mov.w	r3, #4294967295
   11ea6:	9312      	str	r3, [sp, #72]	; 0x48
   11ea8:	9308      	str	r3, [sp, #32]
   11eaa:	2301      	movs	r3, #1
   11eac:	9623      	str	r6, [sp, #140]	; 0x8c
   11eae:	930c      	str	r3, [sp, #48]	; 0x30
   11eb0:	f7ff bb02 	b.w	114b8 <_dtoa_r+0x4a0>
   11eb4:	000158f8 	.word	0x000158f8
   11eb8:	40240000 	.word	0x40240000
   11ebc:	3fe00000 	.word	0x3fe00000
   11ec0:	401c0000 	.word	0x401c0000
   11ec4:	00015860 	.word	0x00015860
   11ec8:	00015a74 	.word	0x00015a74
   11ecc:	00015a64 	.word	0x00015a64

00011ed0 <_wcrtomb_r>:
   11ed0:	b570      	push	{r4, r5, r6, lr}
   11ed2:	4605      	mov	r5, r0
   11ed4:	b084      	sub	sp, #16
   11ed6:	b15b      	cbz	r3, 11ef0 <_wcrtomb_r+0x20>
   11ed8:	461c      	mov	r4, r3
   11eda:	b169      	cbz	r1, 11ef8 <_wcrtomb_r+0x28>
   11edc:	4b0e      	ldr	r3, [pc, #56]	; (11f18 <_wcrtomb_r+0x48>)
   11ede:	4628      	mov	r0, r5
   11ee0:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   11ee4:	4623      	mov	r3, r4
   11ee6:	47b0      	blx	r6
   11ee8:	1c43      	adds	r3, r0, #1
   11eea:	d00f      	beq.n	11f0c <_wcrtomb_r+0x3c>
   11eec:	b004      	add	sp, #16
   11eee:	bd70      	pop	{r4, r5, r6, pc}
   11ef0:	f500 7482 	add.w	r4, r0, #260	; 0x104
   11ef4:	2900      	cmp	r1, #0
   11ef6:	d1f1      	bne.n	11edc <_wcrtomb_r+0xc>
   11ef8:	4a07      	ldr	r2, [pc, #28]	; (11f18 <_wcrtomb_r+0x48>)
   11efa:	4623      	mov	r3, r4
   11efc:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   11f00:	4628      	mov	r0, r5
   11f02:	460a      	mov	r2, r1
   11f04:	a901      	add	r1, sp, #4
   11f06:	47b0      	blx	r6
   11f08:	1c43      	adds	r3, r0, #1
   11f0a:	d1ef      	bne.n	11eec <_wcrtomb_r+0x1c>
   11f0c:	2200      	movs	r2, #0
   11f0e:	238a      	movs	r3, #138	; 0x8a
   11f10:	6022      	str	r2, [r4, #0]
   11f12:	602b      	str	r3, [r5, #0]
   11f14:	b004      	add	sp, #16
   11f16:	bd70      	pop	{r4, r5, r6, pc}
   11f18:	1fff8ed4 	.word	0x1fff8ed4

00011f1c <_wcsrtombs_r>:
   11f1c:	b500      	push	{lr}
   11f1e:	b083      	sub	sp, #12
   11f20:	f8dd c010 	ldr.w	ip, [sp, #16]
   11f24:	e9cd 3c00 	strd	r3, ip, [sp]
   11f28:	f04f 33ff 	mov.w	r3, #4294967295
   11f2c:	f001 fbb6 	bl	1369c <_wcsnrtombs_r>
   11f30:	b003      	add	sp, #12
   11f32:	f85d fb04 	ldr.w	pc, [sp], #4
   11f36:	bf00      	nop

00011f38 <fiprintf>:
   11f38:	b40e      	push	{r1, r2, r3}
   11f3a:	b510      	push	{r4, lr}
   11f3c:	b083      	sub	sp, #12
   11f3e:	ab05      	add	r3, sp, #20
   11f40:	4c06      	ldr	r4, [pc, #24]	; (11f5c <fiprintf+0x24>)
   11f42:	f853 2b04 	ldr.w	r2, [r3], #4
   11f46:	9301      	str	r3, [sp, #4]
   11f48:	4601      	mov	r1, r0
   11f4a:	6820      	ldr	r0, [r4, #0]
   11f4c:	f000 f8c4 	bl	120d8 <_vfiprintf_r>
   11f50:	b003      	add	sp, #12
   11f52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11f56:	b003      	add	sp, #12
   11f58:	4770      	bx	lr
   11f5a:	bf00      	nop
   11f5c:	1fff9160 	.word	0x1fff9160

00011f60 <__ssprint_r>:
   11f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f64:	6893      	ldr	r3, [r2, #8]
   11f66:	6817      	ldr	r7, [r2, #0]
   11f68:	b083      	sub	sp, #12
   11f6a:	4692      	mov	sl, r2
   11f6c:	2b00      	cmp	r3, #0
   11f6e:	d070      	beq.n	12052 <__ssprint_r+0xf2>
   11f70:	4681      	mov	r9, r0
   11f72:	688a      	ldr	r2, [r1, #8]
   11f74:	6808      	ldr	r0, [r1, #0]
   11f76:	460c      	mov	r4, r1
   11f78:	3708      	adds	r7, #8
   11f7a:	e043      	b.n	12004 <__ssprint_r+0xa4>
   11f7c:	89a3      	ldrh	r3, [r4, #12]
   11f7e:	f413 6f90 	tst.w	r3, #1152	; 0x480
   11f82:	d02e      	beq.n	11fe2 <__ssprint_r+0x82>
   11f84:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   11f88:	eba0 0801 	sub.w	r8, r0, r1
   11f8c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   11f90:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   11f94:	f108 0001 	add.w	r0, r8, #1
   11f98:	1076      	asrs	r6, r6, #1
   11f9a:	4428      	add	r0, r5
   11f9c:	42b0      	cmp	r0, r6
   11f9e:	4632      	mov	r2, r6
   11fa0:	bf84      	itt	hi
   11fa2:	4606      	movhi	r6, r0
   11fa4:	4632      	movhi	r2, r6
   11fa6:	055b      	lsls	r3, r3, #21
   11fa8:	d537      	bpl.n	1201a <__ssprint_r+0xba>
   11faa:	4611      	mov	r1, r2
   11fac:	4648      	mov	r0, r9
   11fae:	f7fb fa23 	bl	d3f8 <_malloc_r>
   11fb2:	9001      	str	r0, [sp, #4]
   11fb4:	2800      	cmp	r0, #0
   11fb6:	d03a      	beq.n	1202e <__ssprint_r+0xce>
   11fb8:	4642      	mov	r2, r8
   11fba:	6921      	ldr	r1, [r4, #16]
   11fbc:	f7f7 feba 	bl	9d34 <memcpy>
   11fc0:	89a2      	ldrh	r2, [r4, #12]
   11fc2:	9b01      	ldr	r3, [sp, #4]
   11fc4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   11fc8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11fcc:	81a2      	strh	r2, [r4, #12]
   11fce:	eba6 0208 	sub.w	r2, r6, r8
   11fd2:	eb03 0008 	add.w	r0, r3, r8
   11fd6:	6166      	str	r6, [r4, #20]
   11fd8:	60a2      	str	r2, [r4, #8]
   11fda:	6123      	str	r3, [r4, #16]
   11fdc:	6020      	str	r0, [r4, #0]
   11fde:	462e      	mov	r6, r5
   11fe0:	46a8      	mov	r8, r5
   11fe2:	4642      	mov	r2, r8
   11fe4:	4659      	mov	r1, fp
   11fe6:	f7fb fff9 	bl	dfdc <memmove>
   11fea:	f8da 3008 	ldr.w	r3, [sl, #8]
   11fee:	68a2      	ldr	r2, [r4, #8]
   11ff0:	6820      	ldr	r0, [r4, #0]
   11ff2:	1b92      	subs	r2, r2, r6
   11ff4:	4440      	add	r0, r8
   11ff6:	1b5b      	subs	r3, r3, r5
   11ff8:	60a2      	str	r2, [r4, #8]
   11ffa:	6020      	str	r0, [r4, #0]
   11ffc:	f8ca 3008 	str.w	r3, [sl, #8]
   12000:	b33b      	cbz	r3, 12052 <__ssprint_r+0xf2>
   12002:	3708      	adds	r7, #8
   12004:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   12008:	2d00      	cmp	r5, #0
   1200a:	d0fa      	beq.n	12002 <__ssprint_r+0xa2>
   1200c:	42aa      	cmp	r2, r5
   1200e:	4616      	mov	r6, r2
   12010:	4690      	mov	r8, r2
   12012:	d9b3      	bls.n	11f7c <__ssprint_r+0x1c>
   12014:	462e      	mov	r6, r5
   12016:	46a8      	mov	r8, r5
   12018:	e7e3      	b.n	11fe2 <__ssprint_r+0x82>
   1201a:	4648      	mov	r0, r9
   1201c:	f7fb fca8 	bl	d970 <_realloc_r>
   12020:	4603      	mov	r3, r0
   12022:	2800      	cmp	r0, #0
   12024:	d1d3      	bne.n	11fce <__ssprint_r+0x6e>
   12026:	6921      	ldr	r1, [r4, #16]
   12028:	4648      	mov	r0, r9
   1202a:	f7fc fa57 	bl	e4dc <_free_r>
   1202e:	89a3      	ldrh	r3, [r4, #12]
   12030:	220c      	movs	r2, #12
   12032:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12036:	f8c9 2000 	str.w	r2, [r9]
   1203a:	f04f 30ff 	mov.w	r0, #4294967295
   1203e:	81a3      	strh	r3, [r4, #12]
   12040:	2200      	movs	r2, #0
   12042:	2300      	movs	r3, #0
   12044:	f8ca 2008 	str.w	r2, [sl, #8]
   12048:	f8ca 3004 	str.w	r3, [sl, #4]
   1204c:	b003      	add	sp, #12
   1204e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12052:	2000      	movs	r0, #0
   12054:	2300      	movs	r3, #0
   12056:	f8ca 3004 	str.w	r3, [sl, #4]
   1205a:	b003      	add	sp, #12
   1205c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012060 <__sprint_r.part.0>:
   12060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12064:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12066:	049c      	lsls	r4, r3, #18
   12068:	4690      	mov	r8, r2
   1206a:	d52d      	bpl.n	120c8 <__sprint_r.part.0+0x68>
   1206c:	6893      	ldr	r3, [r2, #8]
   1206e:	6812      	ldr	r2, [r2, #0]
   12070:	b343      	cbz	r3, 120c4 <__sprint_r.part.0+0x64>
   12072:	468b      	mov	fp, r1
   12074:	4606      	mov	r6, r0
   12076:	f102 0908 	add.w	r9, r2, #8
   1207a:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   1207e:	ea5f 079a 	movs.w	r7, sl, lsr #2
   12082:	d015      	beq.n	120b0 <__sprint_r.part.0+0x50>
   12084:	3d04      	subs	r5, #4
   12086:	2400      	movs	r4, #0
   12088:	e001      	b.n	1208e <__sprint_r.part.0+0x2e>
   1208a:	42a7      	cmp	r7, r4
   1208c:	d00e      	beq.n	120ac <__sprint_r.part.0+0x4c>
   1208e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   12092:	465a      	mov	r2, fp
   12094:	4630      	mov	r0, r6
   12096:	f001 fa51 	bl	1353c <_fputwc_r>
   1209a:	1c43      	adds	r3, r0, #1
   1209c:	f104 0401 	add.w	r4, r4, #1
   120a0:	d1f3      	bne.n	1208a <__sprint_r.part.0+0x2a>
   120a2:	2300      	movs	r3, #0
   120a4:	e9c8 3301 	strd	r3, r3, [r8, #4]
   120a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120ac:	f8d8 3008 	ldr.w	r3, [r8, #8]
   120b0:	f02a 0a03 	bic.w	sl, sl, #3
   120b4:	eba3 030a 	sub.w	r3, r3, sl
   120b8:	f8c8 3008 	str.w	r3, [r8, #8]
   120bc:	f109 0908 	add.w	r9, r9, #8
   120c0:	2b00      	cmp	r3, #0
   120c2:	d1da      	bne.n	1207a <__sprint_r.part.0+0x1a>
   120c4:	2000      	movs	r0, #0
   120c6:	e7ec      	b.n	120a2 <__sprint_r.part.0+0x42>
   120c8:	f001 f808 	bl	130dc <__sfvwrite_r>
   120cc:	2300      	movs	r3, #0
   120ce:	e9c8 3301 	strd	r3, r3, [r8, #4]
   120d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120d6:	bf00      	nop

000120d8 <_vfiprintf_r>:
   120d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120dc:	b0c5      	sub	sp, #276	; 0x114
   120de:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   120e2:	4683      	mov	fp, r0
   120e4:	9103      	str	r1, [sp, #12]
   120e6:	4616      	mov	r6, r2
   120e8:	2100      	movs	r1, #0
   120ea:	2208      	movs	r2, #8
   120ec:	4650      	mov	r0, sl
   120ee:	461c      	mov	r4, r3
   120f0:	9307      	str	r3, [sp, #28]
   120f2:	f7fb ffef 	bl	e0d4 <memset>
   120f6:	f1bb 0f00 	cmp.w	fp, #0
   120fa:	d004      	beq.n	12106 <_vfiprintf_r+0x2e>
   120fc:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   12100:	2b00      	cmp	r3, #0
   12102:	f000 86a1 	beq.w	12e48 <_vfiprintf_r+0xd70>
   12106:	9a03      	ldr	r2, [sp, #12]
   12108:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1210a:	07db      	lsls	r3, r3, #31
   1210c:	f140 851c 	bpl.w	12b48 <_vfiprintf_r+0xa70>
   12110:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12114:	b28a      	uxth	r2, r1
   12116:	0495      	lsls	r5, r2, #18
   12118:	d409      	bmi.n	1212e <_vfiprintf_r+0x56>
   1211a:	9b03      	ldr	r3, [sp, #12]
   1211c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   12120:	8199      	strh	r1, [r3, #12]
   12122:	b28a      	uxth	r2, r1
   12124:	4619      	mov	r1, r3
   12126:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12128:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   1212c:	664b      	str	r3, [r1, #100]	; 0x64
   1212e:	0710      	lsls	r0, r2, #28
   12130:	f140 8104 	bpl.w	1233c <_vfiprintf_r+0x264>
   12134:	9b03      	ldr	r3, [sp, #12]
   12136:	691b      	ldr	r3, [r3, #16]
   12138:	2b00      	cmp	r3, #0
   1213a:	f000 80ff 	beq.w	1233c <_vfiprintf_r+0x264>
   1213e:	f002 031a 	and.w	r3, r2, #26
   12142:	2b0a      	cmp	r3, #10
   12144:	f000 8108 	beq.w	12358 <_vfiprintf_r+0x280>
   12148:	2300      	movs	r3, #0
   1214a:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   1214e:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   12152:	aa1b      	add	r2, sp, #108	; 0x6c
   12154:	930b      	str	r3, [sp, #44]	; 0x2c
   12156:	9218      	str	r2, [sp, #96]	; 0x60
   12158:	4691      	mov	r9, r2
   1215a:	930c      	str	r3, [sp, #48]	; 0x30
   1215c:	9305      	str	r3, [sp, #20]
   1215e:	46b0      	mov	r8, r6
   12160:	4644      	mov	r4, r8
   12162:	4ba6      	ldr	r3, [pc, #664]	; (123fc <_vfiprintf_r+0x324>)
   12164:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   12168:	f7fc f838 	bl	e1dc <__locale_mb_cur_max>
   1216c:	4622      	mov	r2, r4
   1216e:	4603      	mov	r3, r0
   12170:	a912      	add	r1, sp, #72	; 0x48
   12172:	f8cd a000 	str.w	sl, [sp]
   12176:	4658      	mov	r0, fp
   12178:	47a8      	blx	r5
   1217a:	2800      	cmp	r0, #0
   1217c:	f000 8140 	beq.w	12400 <_vfiprintf_r+0x328>
   12180:	f2c0 8133 	blt.w	123ea <_vfiprintf_r+0x312>
   12184:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12186:	2a25      	cmp	r2, #37	; 0x25
   12188:	4603      	mov	r3, r0
   1218a:	d001      	beq.n	12190 <_vfiprintf_r+0xb8>
   1218c:	441c      	add	r4, r3
   1218e:	e7e8      	b.n	12162 <_vfiprintf_r+0x8a>
   12190:	ebb4 0608 	subs.w	r6, r4, r8
   12194:	4605      	mov	r5, r0
   12196:	f040 8137 	bne.w	12408 <_vfiprintf_r+0x330>
   1219a:	2300      	movs	r3, #0
   1219c:	7861      	ldrb	r1, [r4, #1]
   1219e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   121a2:	f104 0801 	add.w	r8, r4, #1
   121a6:	9306      	str	r3, [sp, #24]
   121a8:	f04f 37ff 	mov.w	r7, #4294967295
   121ac:	461e      	mov	r6, r3
   121ae:	242b      	movs	r4, #43	; 0x2b
   121b0:	f108 0801 	add.w	r8, r8, #1
   121b4:	f1a1 0320 	sub.w	r3, r1, #32
   121b8:	2b5a      	cmp	r3, #90	; 0x5a
   121ba:	f200 8165 	bhi.w	12488 <_vfiprintf_r+0x3b0>
   121be:	e8df f013 	tbh	[pc, r3, lsl #1]
   121c2:	029f      	.short	0x029f
   121c4:	01630163 	.word	0x01630163
   121c8:	0163029a 	.word	0x0163029a
   121cc:	01630163 	.word	0x01630163
   121d0:	0163006a 	.word	0x0163006a
   121d4:	02670163 	.word	0x02670163
   121d8:	01630277 	.word	0x01630277
   121dc:	02810272 	.word	0x02810272
   121e0:	027c0163 	.word	0x027c0163
   121e4:	005b005b 	.word	0x005b005b
   121e8:	005b005b 	.word	0x005b005b
   121ec:	005b005b 	.word	0x005b005b
   121f0:	005b005b 	.word	0x005b005b
   121f4:	0163005b 	.word	0x0163005b
   121f8:	01630163 	.word	0x01630163
   121fc:	01630163 	.word	0x01630163
   12200:	01630163 	.word	0x01630163
   12204:	01630163 	.word	0x01630163
   12208:	00840246 	.word	0x00840246
   1220c:	01630163 	.word	0x01630163
   12210:	01630163 	.word	0x01630163
   12214:	01630163 	.word	0x01630163
   12218:	01630163 	.word	0x01630163
   1221c:	01630163 	.word	0x01630163
   12220:	016300e2 	.word	0x016300e2
   12224:	01630163 	.word	0x01630163
   12228:	0163021d 	.word	0x0163021d
   1222c:	016302c4 	.word	0x016302c4
   12230:	05940163 	.word	0x05940163
   12234:	01630163 	.word	0x01630163
   12238:	01630163 	.word	0x01630163
   1223c:	01630163 	.word	0x01630163
   12240:	01630163 	.word	0x01630163
   12244:	01630163 	.word	0x01630163
   12248:	00860246 	.word	0x00860246
   1224c:	01630163 	.word	0x01630163
   12250:	02b70163 	.word	0x02b70163
   12254:	007f0086 	.word	0x007f0086
   12258:	02aa0163 	.word	0x02aa0163
   1225c:	02e70163 	.word	0x02e70163
   12260:	02d700e4 	.word	0x02d700e4
   12264:	0163007f 	.word	0x0163007f
   12268:	007c021d 	.word	0x007c021d
   1226c:	01630572 	.word	0x01630572
   12270:	05740163 	.word	0x05740163
   12274:	007c0163 	.word	0x007c0163
   12278:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1227c:	2200      	movs	r2, #0
   1227e:	f818 1b01 	ldrb.w	r1, [r8], #1
   12282:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   12286:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1228a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1228e:	2b09      	cmp	r3, #9
   12290:	d9f5      	bls.n	1227e <_vfiprintf_r+0x1a6>
   12292:	9206      	str	r2, [sp, #24]
   12294:	e78e      	b.n	121b4 <_vfiprintf_r+0xdc>
   12296:	4658      	mov	r0, fp
   12298:	f7fe fce8 	bl	10c6c <_localeconv_r>
   1229c:	6843      	ldr	r3, [r0, #4]
   1229e:	930d      	str	r3, [sp, #52]	; 0x34
   122a0:	4618      	mov	r0, r3
   122a2:	f7fc f84d 	bl	e340 <strlen>
   122a6:	900e      	str	r0, [sp, #56]	; 0x38
   122a8:	4605      	mov	r5, r0
   122aa:	4658      	mov	r0, fp
   122ac:	f7fe fcde 	bl	10c6c <_localeconv_r>
   122b0:	6883      	ldr	r3, [r0, #8]
   122b2:	930c      	str	r3, [sp, #48]	; 0x30
   122b4:	2d00      	cmp	r5, #0
   122b6:	f040 84df 	bne.w	12c78 <_vfiprintf_r+0xba0>
   122ba:	f898 1000 	ldrb.w	r1, [r8]
   122be:	e777      	b.n	121b0 <_vfiprintf_r+0xd8>
   122c0:	f898 1000 	ldrb.w	r1, [r8]
   122c4:	f046 0620 	orr.w	r6, r6, #32
   122c8:	e772      	b.n	121b0 <_vfiprintf_r+0xd8>
   122ca:	f046 0610 	orr.w	r6, r6, #16
   122ce:	06b4      	lsls	r4, r6, #26
   122d0:	f140 8178 	bpl.w	125c4 <_vfiprintf_r+0x4ec>
   122d4:	9b07      	ldr	r3, [sp, #28]
   122d6:	3307      	adds	r3, #7
   122d8:	f023 0307 	bic.w	r3, r3, #7
   122dc:	461a      	mov	r2, r3
   122de:	6859      	ldr	r1, [r3, #4]
   122e0:	f852 3b08 	ldr.w	r3, [r2], #8
   122e4:	9207      	str	r2, [sp, #28]
   122e6:	460a      	mov	r2, r1
   122e8:	2900      	cmp	r1, #0
   122ea:	f2c0 847a 	blt.w	12be2 <_vfiprintf_r+0xb0a>
   122ee:	1c79      	adds	r1, r7, #1
   122f0:	f000 85a7 	beq.w	12e42 <_vfiprintf_r+0xd6a>
   122f4:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   122f8:	9102      	str	r1, [sp, #8]
   122fa:	ea53 0102 	orrs.w	r1, r3, r2
   122fe:	f000 8448 	beq.w	12b92 <_vfiprintf_r+0xaba>
   12302:	2b0a      	cmp	r3, #10
   12304:	f172 0100 	sbcs.w	r1, r2, #0
   12308:	f080 8549 	bcs.w	12d9e <_vfiprintf_r+0xcc6>
   1230c:	3330      	adds	r3, #48	; 0x30
   1230e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12312:	9e02      	ldr	r6, [sp, #8]
   12314:	2301      	movs	r3, #1
   12316:	9304      	str	r3, [sp, #16]
   12318:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   1231c:	9b04      	ldr	r3, [sp, #16]
   1231e:	42bb      	cmp	r3, r7
   12320:	bfb8      	it	lt
   12322:	463b      	movlt	r3, r7
   12324:	9302      	str	r3, [sp, #8]
   12326:	2300      	movs	r3, #0
   12328:	9308      	str	r3, [sp, #32]
   1232a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   1232e:	2b00      	cmp	r3, #0
   12330:	f000 80b8 	beq.w	124a4 <_vfiprintf_r+0x3cc>
   12334:	9b02      	ldr	r3, [sp, #8]
   12336:	3301      	adds	r3, #1
   12338:	9302      	str	r3, [sp, #8]
   1233a:	e0b3      	b.n	124a4 <_vfiprintf_r+0x3cc>
   1233c:	9d03      	ldr	r5, [sp, #12]
   1233e:	4658      	mov	r0, fp
   12340:	4629      	mov	r1, r5
   12342:	f001 f83f 	bl	133c4 <__swsetup_r>
   12346:	2800      	cmp	r0, #0
   12348:	f040 8656 	bne.w	12ff8 <_vfiprintf_r+0xf20>
   1234c:	89aa      	ldrh	r2, [r5, #12]
   1234e:	f002 031a 	and.w	r3, r2, #26
   12352:	2b0a      	cmp	r3, #10
   12354:	f47f aef8 	bne.w	12148 <_vfiprintf_r+0x70>
   12358:	9903      	ldr	r1, [sp, #12]
   1235a:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   1235e:	2b00      	cmp	r3, #0
   12360:	f6ff aef2 	blt.w	12148 <_vfiprintf_r+0x70>
   12364:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12366:	07db      	lsls	r3, r3, #31
   12368:	d402      	bmi.n	12370 <_vfiprintf_r+0x298>
   1236a:	0597      	lsls	r7, r2, #22
   1236c:	f140 8618 	bpl.w	12fa0 <_vfiprintf_r+0xec8>
   12370:	9903      	ldr	r1, [sp, #12]
   12372:	4623      	mov	r3, r4
   12374:	4632      	mov	r2, r6
   12376:	4658      	mov	r0, fp
   12378:	f000 fe70 	bl	1305c <__sbprintf>
   1237c:	9005      	str	r0, [sp, #20]
   1237e:	9805      	ldr	r0, [sp, #20]
   12380:	b045      	add	sp, #276	; 0x114
   12382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12386:	f046 0610 	orr.w	r6, r6, #16
   1238a:	f016 0220 	ands.w	r2, r6, #32
   1238e:	f000 8126 	beq.w	125de <_vfiprintf_r+0x506>
   12392:	9b07      	ldr	r3, [sp, #28]
   12394:	3307      	adds	r3, #7
   12396:	f023 0307 	bic.w	r3, r3, #7
   1239a:	4619      	mov	r1, r3
   1239c:	685a      	ldr	r2, [r3, #4]
   1239e:	f851 3b08 	ldr.w	r3, [r1], #8
   123a2:	9107      	str	r1, [sp, #28]
   123a4:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   123a8:	9102      	str	r1, [sp, #8]
   123aa:	2100      	movs	r1, #0
   123ac:	2000      	movs	r0, #0
   123ae:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   123b2:	1c78      	adds	r0, r7, #1
   123b4:	f000 8200 	beq.w	127b8 <_vfiprintf_r+0x6e0>
   123b8:	9802      	ldr	r0, [sp, #8]
   123ba:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   123be:	ea53 0002 	orrs.w	r0, r3, r2
   123c2:	f040 81f8 	bne.w	127b6 <_vfiprintf_r+0x6de>
   123c6:	2f00      	cmp	r7, #0
   123c8:	f040 8543 	bne.w	12e52 <_vfiprintf_r+0xd7a>
   123cc:	2900      	cmp	r1, #0
   123ce:	f040 83e4 	bne.w	12b9a <_vfiprintf_r+0xac2>
   123d2:	9b02      	ldr	r3, [sp, #8]
   123d4:	f013 0301 	ands.w	r3, r3, #1
   123d8:	9304      	str	r3, [sp, #16]
   123da:	f000 8420 	beq.w	12c1e <_vfiprintf_r+0xb46>
   123de:	2330      	movs	r3, #48	; 0x30
   123e0:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   123e4:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   123e8:	e798      	b.n	1231c <_vfiprintf_r+0x244>
   123ea:	2208      	movs	r2, #8
   123ec:	2100      	movs	r1, #0
   123ee:	4650      	mov	r0, sl
   123f0:	f7fb fe70 	bl	e0d4 <memset>
   123f4:	2301      	movs	r3, #1
   123f6:	441c      	add	r4, r3
   123f8:	e6b3      	b.n	12162 <_vfiprintf_r+0x8a>
   123fa:	bf00      	nop
   123fc:	1fff8ed4 	.word	0x1fff8ed4
   12400:	ebb4 0608 	subs.w	r6, r4, r8
   12404:	4605      	mov	r5, r0
   12406:	d01a      	beq.n	1243e <_vfiprintf_r+0x366>
   12408:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1240a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1240c:	3301      	adds	r3, #1
   1240e:	4432      	add	r2, r6
   12410:	2b07      	cmp	r3, #7
   12412:	e9c9 8600 	strd	r8, r6, [r9]
   12416:	921a      	str	r2, [sp, #104]	; 0x68
   12418:	9319      	str	r3, [sp, #100]	; 0x64
   1241a:	dd1a      	ble.n	12452 <_vfiprintf_r+0x37a>
   1241c:	2a00      	cmp	r2, #0
   1241e:	f000 83b4 	beq.w	12b8a <_vfiprintf_r+0xab2>
   12422:	9903      	ldr	r1, [sp, #12]
   12424:	aa18      	add	r2, sp, #96	; 0x60
   12426:	4658      	mov	r0, fp
   12428:	f7ff fe1a 	bl	12060 <__sprint_r.part.0>
   1242c:	b9d8      	cbnz	r0, 12466 <_vfiprintf_r+0x38e>
   1242e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12432:	9b05      	ldr	r3, [sp, #20]
   12434:	4433      	add	r3, r6
   12436:	9305      	str	r3, [sp, #20]
   12438:	2d00      	cmp	r5, #0
   1243a:	f47f aeae 	bne.w	1219a <_vfiprintf_r+0xc2>
   1243e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12440:	2b00      	cmp	r3, #0
   12442:	f040 85ca 	bne.w	12fda <_vfiprintf_r+0xf02>
   12446:	9b03      	ldr	r3, [sp, #12]
   12448:	2200      	movs	r2, #0
   1244a:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1244e:	9219      	str	r2, [sp, #100]	; 0x64
   12450:	e00c      	b.n	1246c <_vfiprintf_r+0x394>
   12452:	f109 0908 	add.w	r9, r9, #8
   12456:	e7ec      	b.n	12432 <_vfiprintf_r+0x35a>
   12458:	46b3      	mov	fp, r6
   1245a:	9b08      	ldr	r3, [sp, #32]
   1245c:	b11b      	cbz	r3, 12466 <_vfiprintf_r+0x38e>
   1245e:	9908      	ldr	r1, [sp, #32]
   12460:	4658      	mov	r0, fp
   12462:	f7fc f83b 	bl	e4dc <_free_r>
   12466:	9b03      	ldr	r3, [sp, #12]
   12468:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   1246c:	9a03      	ldr	r2, [sp, #12]
   1246e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   12470:	f012 0f01 	tst.w	r2, #1
   12474:	b29a      	uxth	r2, r3
   12476:	f000 809c 	beq.w	125b2 <_vfiprintf_r+0x4da>
   1247a:	0650      	lsls	r0, r2, #25
   1247c:	f100 85c8 	bmi.w	13010 <_vfiprintf_r+0xf38>
   12480:	9805      	ldr	r0, [sp, #20]
   12482:	b045      	add	sp, #276	; 0x114
   12484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12488:	2900      	cmp	r1, #0
   1248a:	d0d8      	beq.n	1243e <_vfiprintf_r+0x366>
   1248c:	2300      	movs	r3, #0
   1248e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12492:	2301      	movs	r3, #1
   12494:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12498:	9302      	str	r3, [sp, #8]
   1249a:	9304      	str	r3, [sp, #16]
   1249c:	ac2b      	add	r4, sp, #172	; 0xac
   1249e:	2300      	movs	r3, #0
   124a0:	9308      	str	r3, [sp, #32]
   124a2:	461f      	mov	r7, r3
   124a4:	f016 0302 	ands.w	r3, r6, #2
   124a8:	9309      	str	r3, [sp, #36]	; 0x24
   124aa:	d002      	beq.n	124b2 <_vfiprintf_r+0x3da>
   124ac:	9b02      	ldr	r3, [sp, #8]
   124ae:	3302      	adds	r3, #2
   124b0:	9302      	str	r3, [sp, #8]
   124b2:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   124b6:	930a      	str	r3, [sp, #40]	; 0x28
   124b8:	d105      	bne.n	124c6 <_vfiprintf_r+0x3ee>
   124ba:	9b06      	ldr	r3, [sp, #24]
   124bc:	9a02      	ldr	r2, [sp, #8]
   124be:	1a9d      	subs	r5, r3, r2
   124c0:	2d00      	cmp	r5, #0
   124c2:	f300 8294 	bgt.w	129ee <_vfiprintf_r+0x916>
   124c6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   124ca:	1c41      	adds	r1, r0, #1
   124cc:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   124d0:	b182      	cbz	r2, 124f4 <_vfiprintf_r+0x41c>
   124d2:	2201      	movs	r2, #1
   124d4:	3301      	adds	r3, #1
   124d6:	f8c9 2004 	str.w	r2, [r9, #4]
   124da:	2907      	cmp	r1, #7
   124dc:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   124e0:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   124e4:	f8c9 2000 	str.w	r2, [r9]
   124e8:	f300 8264 	bgt.w	129b4 <_vfiprintf_r+0x8dc>
   124ec:	4608      	mov	r0, r1
   124ee:	f109 0908 	add.w	r9, r9, #8
   124f2:	3101      	adds	r1, #1
   124f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   124f6:	b1da      	cbz	r2, 12530 <_vfiprintf_r+0x458>
   124f8:	aa11      	add	r2, sp, #68	; 0x44
   124fa:	3302      	adds	r3, #2
   124fc:	f8c9 2000 	str.w	r2, [r9]
   12500:	2907      	cmp	r1, #7
   12502:	f04f 0202 	mov.w	r2, #2
   12506:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1250a:	f8c9 2004 	str.w	r2, [r9, #4]
   1250e:	f340 8269 	ble.w	129e4 <_vfiprintf_r+0x90c>
   12512:	2b00      	cmp	r3, #0
   12514:	f000 8358 	beq.w	12bc8 <_vfiprintf_r+0xaf0>
   12518:	9903      	ldr	r1, [sp, #12]
   1251a:	aa18      	add	r2, sp, #96	; 0x60
   1251c:	4658      	mov	r0, fp
   1251e:	f7ff fd9f 	bl	12060 <__sprint_r.part.0>
   12522:	2800      	cmp	r0, #0
   12524:	d199      	bne.n	1245a <_vfiprintf_r+0x382>
   12526:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1252a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1252e:	1c41      	adds	r1, r0, #1
   12530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   12532:	2a80      	cmp	r2, #128	; 0x80
   12534:	f000 8182 	beq.w	1283c <_vfiprintf_r+0x764>
   12538:	9a04      	ldr	r2, [sp, #16]
   1253a:	1abd      	subs	r5, r7, r2
   1253c:	2d00      	cmp	r5, #0
   1253e:	f300 81e0 	bgt.w	12902 <_vfiprintf_r+0x82a>
   12542:	9a04      	ldr	r2, [sp, #16]
   12544:	f8c9 4000 	str.w	r4, [r9]
   12548:	4413      	add	r3, r2
   1254a:	2907      	cmp	r1, #7
   1254c:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12550:	f8c9 2004 	str.w	r2, [r9, #4]
   12554:	f340 816c 	ble.w	12830 <_vfiprintf_r+0x758>
   12558:	2b00      	cmp	r3, #0
   1255a:	f000 829e 	beq.w	12a9a <_vfiprintf_r+0x9c2>
   1255e:	9903      	ldr	r1, [sp, #12]
   12560:	aa18      	add	r2, sp, #96	; 0x60
   12562:	4658      	mov	r0, fp
   12564:	f7ff fd7c 	bl	12060 <__sprint_r.part.0>
   12568:	2800      	cmp	r0, #0
   1256a:	f47f af76 	bne.w	1245a <_vfiprintf_r+0x382>
   1256e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12570:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12574:	0775      	lsls	r5, r6, #29
   12576:	d505      	bpl.n	12584 <_vfiprintf_r+0x4ac>
   12578:	9a06      	ldr	r2, [sp, #24]
   1257a:	9902      	ldr	r1, [sp, #8]
   1257c:	1a54      	subs	r4, r2, r1
   1257e:	2c00      	cmp	r4, #0
   12580:	f300 8295 	bgt.w	12aae <_vfiprintf_r+0x9d6>
   12584:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12588:	9802      	ldr	r0, [sp, #8]
   1258a:	4281      	cmp	r1, r0
   1258c:	bfac      	ite	ge
   1258e:	1852      	addge	r2, r2, r1
   12590:	1812      	addlt	r2, r2, r0
   12592:	9205      	str	r2, [sp, #20]
   12594:	2b00      	cmp	r3, #0
   12596:	f040 81fe 	bne.w	12996 <_vfiprintf_r+0x8be>
   1259a:	9908      	ldr	r1, [sp, #32]
   1259c:	2300      	movs	r3, #0
   1259e:	9319      	str	r3, [sp, #100]	; 0x64
   125a0:	2900      	cmp	r1, #0
   125a2:	f000 8148 	beq.w	12836 <_vfiprintf_r+0x75e>
   125a6:	4658      	mov	r0, fp
   125a8:	f7fb ff98 	bl	e4dc <_free_r>
   125ac:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   125b0:	e5d6      	b.n	12160 <_vfiprintf_r+0x88>
   125b2:	059c      	lsls	r4, r3, #22
   125b4:	f53f af61 	bmi.w	1247a <_vfiprintf_r+0x3a2>
   125b8:	9c03      	ldr	r4, [sp, #12]
   125ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
   125bc:	f7fb feaa 	bl	e314 <__retarget_lock_release_recursive>
   125c0:	89a2      	ldrh	r2, [r4, #12]
   125c2:	e75a      	b.n	1247a <_vfiprintf_r+0x3a2>
   125c4:	06f0      	lsls	r0, r6, #27
   125c6:	9a07      	ldr	r2, [sp, #28]
   125c8:	f100 833e 	bmi.w	12c48 <_vfiprintf_r+0xb70>
   125cc:	0671      	lsls	r1, r6, #25
   125ce:	f140 8338 	bpl.w	12c42 <_vfiprintf_r+0xb6a>
   125d2:	f932 3b04 	ldrsh.w	r3, [r2], #4
   125d6:	9207      	str	r2, [sp, #28]
   125d8:	17da      	asrs	r2, r3, #31
   125da:	4611      	mov	r1, r2
   125dc:	e684      	b.n	122e8 <_vfiprintf_r+0x210>
   125de:	f016 0310 	ands.w	r3, r6, #16
   125e2:	9907      	ldr	r1, [sp, #28]
   125e4:	f040 8328 	bne.w	12c38 <_vfiprintf_r+0xb60>
   125e8:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   125ec:	f000 8320 	beq.w	12c30 <_vfiprintf_r+0xb58>
   125f0:	461a      	mov	r2, r3
   125f2:	f851 3b04 	ldr.w	r3, [r1], #4
   125f6:	9107      	str	r1, [sp, #28]
   125f8:	b29b      	uxth	r3, r3
   125fa:	e6d3      	b.n	123a4 <_vfiprintf_r+0x2cc>
   125fc:	9b07      	ldr	r3, [sp, #28]
   125fe:	461a      	mov	r2, r3
   12600:	2300      	movs	r3, #0
   12602:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12606:	4613      	mov	r3, r2
   12608:	f853 4b04 	ldr.w	r4, [r3], #4
   1260c:	9302      	str	r3, [sp, #8]
   1260e:	2c00      	cmp	r4, #0
   12610:	f000 842d 	beq.w	12e6e <_vfiprintf_r+0xd96>
   12614:	2953      	cmp	r1, #83	; 0x53
   12616:	f000 838a 	beq.w	12d2e <_vfiprintf_r+0xc56>
   1261a:	f016 0510 	ands.w	r5, r6, #16
   1261e:	f040 8386 	bne.w	12d2e <_vfiprintf_r+0xc56>
   12622:	1c7b      	adds	r3, r7, #1
   12624:	f000 84cc 	beq.w	12fc0 <_vfiprintf_r+0xee8>
   12628:	463a      	mov	r2, r7
   1262a:	4629      	mov	r1, r5
   1262c:	4620      	mov	r0, r4
   1262e:	f7fe fb37 	bl	10ca0 <memchr>
   12632:	9008      	str	r0, [sp, #32]
   12634:	2800      	cmp	r0, #0
   12636:	f000 84b8 	beq.w	12faa <_vfiprintf_r+0xed2>
   1263a:	1b03      	subs	r3, r0, r4
   1263c:	9a02      	ldr	r2, [sp, #8]
   1263e:	9304      	str	r3, [sp, #16]
   12640:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12644:	462f      	mov	r7, r5
   12646:	9207      	str	r2, [sp, #28]
   12648:	9302      	str	r3, [sp, #8]
   1264a:	9508      	str	r5, [sp, #32]
   1264c:	e66d      	b.n	1232a <_vfiprintf_r+0x252>
   1264e:	2943      	cmp	r1, #67	; 0x43
   12650:	d002      	beq.n	12658 <_vfiprintf_r+0x580>
   12652:	06f5      	lsls	r5, r6, #27
   12654:	f140 8352 	bpl.w	12cfc <_vfiprintf_r+0xc24>
   12658:	9d07      	ldr	r5, [sp, #28]
   1265a:	2208      	movs	r2, #8
   1265c:	2100      	movs	r1, #0
   1265e:	a816      	add	r0, sp, #88	; 0x58
   12660:	ac2b      	add	r4, sp, #172	; 0xac
   12662:	f7fb fd37 	bl	e0d4 <memset>
   12666:	ab16      	add	r3, sp, #88	; 0x58
   12668:	f855 2b04 	ldr.w	r2, [r5], #4
   1266c:	4621      	mov	r1, r4
   1266e:	4658      	mov	r0, fp
   12670:	f7ff fc2e 	bl	11ed0 <_wcrtomb_r>
   12674:	4603      	mov	r3, r0
   12676:	3301      	adds	r3, #1
   12678:	9004      	str	r0, [sp, #16]
   1267a:	f000 84ce 	beq.w	1301a <_vfiprintf_r+0xf42>
   1267e:	9b04      	ldr	r3, [sp, #16]
   12680:	9507      	str	r5, [sp, #28]
   12682:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12686:	9302      	str	r3, [sp, #8]
   12688:	2300      	movs	r3, #0
   1268a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1268e:	e706      	b.n	1249e <_vfiprintf_r+0x3c6>
   12690:	9b07      	ldr	r3, [sp, #28]
   12692:	f853 2b04 	ldr.w	r2, [r3], #4
   12696:	9206      	str	r2, [sp, #24]
   12698:	2a00      	cmp	r2, #0
   1269a:	f280 82bb 	bge.w	12c14 <_vfiprintf_r+0xb3c>
   1269e:	9a06      	ldr	r2, [sp, #24]
   126a0:	4252      	negs	r2, r2
   126a2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   126a6:	f898 1000 	ldrb.w	r1, [r8]
   126aa:	f046 0604 	orr.w	r6, r6, #4
   126ae:	e57f      	b.n	121b0 <_vfiprintf_r+0xd8>
   126b0:	f898 1000 	ldrb.w	r1, [r8]
   126b4:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   126b8:	e57a      	b.n	121b0 <_vfiprintf_r+0xd8>
   126ba:	f898 1000 	ldrb.w	r1, [r8]
   126be:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   126c2:	e575      	b.n	121b0 <_vfiprintf_r+0xd8>
   126c4:	4642      	mov	r2, r8
   126c6:	f812 1b01 	ldrb.w	r1, [r2], #1
   126ca:	292a      	cmp	r1, #42	; 0x2a
   126cc:	f000 84b0 	beq.w	13030 <_vfiprintf_r+0xf58>
   126d0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   126d4:	2b09      	cmp	r3, #9
   126d6:	4690      	mov	r8, r2
   126d8:	f04f 0700 	mov.w	r7, #0
   126dc:	f63f ad6a 	bhi.w	121b4 <_vfiprintf_r+0xdc>
   126e0:	f818 1b01 	ldrb.w	r1, [r8], #1
   126e4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   126e8:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   126ec:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   126f0:	2b09      	cmp	r3, #9
   126f2:	d9f5      	bls.n	126e0 <_vfiprintf_r+0x608>
   126f4:	e55e      	b.n	121b4 <_vfiprintf_r+0xdc>
   126f6:	f898 1000 	ldrb.w	r1, [r8]
   126fa:	f046 0601 	orr.w	r6, r6, #1
   126fe:	e557      	b.n	121b0 <_vfiprintf_r+0xd8>
   12700:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12704:	2b00      	cmp	r3, #0
   12706:	f47f add8 	bne.w	122ba <_vfiprintf_r+0x1e2>
   1270a:	2320      	movs	r3, #32
   1270c:	f898 1000 	ldrb.w	r1, [r8]
   12710:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12714:	e54c      	b.n	121b0 <_vfiprintf_r+0xd8>
   12716:	f898 1000 	ldrb.w	r1, [r8]
   1271a:	296c      	cmp	r1, #108	; 0x6c
   1271c:	bf03      	ittte	eq
   1271e:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   12722:	f046 0620 	orreq.w	r6, r6, #32
   12726:	f108 0801 	addeq.w	r8, r8, #1
   1272a:	f046 0610 	orrne.w	r6, r6, #16
   1272e:	e53f      	b.n	121b0 <_vfiprintf_r+0xd8>
   12730:	f898 1000 	ldrb.w	r1, [r8]
   12734:	2968      	cmp	r1, #104	; 0x68
   12736:	bf03      	ittte	eq
   12738:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   1273c:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   12740:	f108 0801 	addeq.w	r8, r8, #1
   12744:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   12748:	e532      	b.n	121b0 <_vfiprintf_r+0xd8>
   1274a:	f046 0310 	orr.w	r3, r6, #16
   1274e:	9302      	str	r3, [sp, #8]
   12750:	9b02      	ldr	r3, [sp, #8]
   12752:	f013 0220 	ands.w	r2, r3, #32
   12756:	f000 8225 	beq.w	12ba4 <_vfiprintf_r+0xacc>
   1275a:	9b07      	ldr	r3, [sp, #28]
   1275c:	3307      	adds	r3, #7
   1275e:	f023 0307 	bic.w	r3, r3, #7
   12762:	4619      	mov	r1, r3
   12764:	685a      	ldr	r2, [r3, #4]
   12766:	f851 3b08 	ldr.w	r3, [r1], #8
   1276a:	9107      	str	r1, [sp, #28]
   1276c:	2101      	movs	r1, #1
   1276e:	e61d      	b.n	123ac <_vfiprintf_r+0x2d4>
   12770:	9a07      	ldr	r2, [sp, #28]
   12772:	f046 0302 	orr.w	r3, r6, #2
   12776:	9302      	str	r3, [sp, #8]
   12778:	f852 3b04 	ldr.w	r3, [r2], #4
   1277c:	9207      	str	r2, [sp, #28]
   1277e:	f647 0230 	movw	r2, #30768	; 0x7830
   12782:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12786:	4aa1      	ldr	r2, [pc, #644]	; (12a0c <_vfiprintf_r+0x934>)
   12788:	920b      	str	r2, [sp, #44]	; 0x2c
   1278a:	2102      	movs	r1, #2
   1278c:	2200      	movs	r2, #0
   1278e:	e60d      	b.n	123ac <_vfiprintf_r+0x2d4>
   12790:	06b7      	lsls	r7, r6, #26
   12792:	f100 8267 	bmi.w	12c64 <_vfiprintf_r+0xb8c>
   12796:	06f5      	lsls	r5, r6, #27
   12798:	f100 8361 	bmi.w	12e5e <_vfiprintf_r+0xd86>
   1279c:	0674      	lsls	r4, r6, #25
   1279e:	f100 83ee 	bmi.w	12f7e <_vfiprintf_r+0xea6>
   127a2:	05b0      	lsls	r0, r6, #22
   127a4:	f140 835b 	bpl.w	12e5e <_vfiprintf_r+0xd86>
   127a8:	9b07      	ldr	r3, [sp, #28]
   127aa:	9905      	ldr	r1, [sp, #20]
   127ac:	f853 2b04 	ldr.w	r2, [r3], #4
   127b0:	9307      	str	r3, [sp, #28]
   127b2:	7011      	strb	r1, [r2, #0]
   127b4:	e4d4      	b.n	12160 <_vfiprintf_r+0x88>
   127b6:	9602      	str	r6, [sp, #8]
   127b8:	2901      	cmp	r1, #1
   127ba:	f43f ada2 	beq.w	12302 <_vfiprintf_r+0x22a>
   127be:	2902      	cmp	r1, #2
   127c0:	ac44      	add	r4, sp, #272	; 0x110
   127c2:	d111      	bne.n	127e8 <_vfiprintf_r+0x710>
   127c4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   127c6:	f003 010f 	and.w	r1, r3, #15
   127ca:	091b      	lsrs	r3, r3, #4
   127cc:	5c41      	ldrb	r1, [r0, r1]
   127ce:	f804 1d01 	strb.w	r1, [r4, #-1]!
   127d2:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   127d6:	0912      	lsrs	r2, r2, #4
   127d8:	ea53 0102 	orrs.w	r1, r3, r2
   127dc:	d1f3      	bne.n	127c6 <_vfiprintf_r+0x6ee>
   127de:	9e02      	ldr	r6, [sp, #8]
   127e0:	ab44      	add	r3, sp, #272	; 0x110
   127e2:	1b1b      	subs	r3, r3, r4
   127e4:	9304      	str	r3, [sp, #16]
   127e6:	e599      	b.n	1231c <_vfiprintf_r+0x244>
   127e8:	f003 0107 	and.w	r1, r3, #7
   127ec:	08db      	lsrs	r3, r3, #3
   127ee:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   127f2:	08d2      	lsrs	r2, r2, #3
   127f4:	3130      	adds	r1, #48	; 0x30
   127f6:	ea53 0502 	orrs.w	r5, r3, r2
   127fa:	4620      	mov	r0, r4
   127fc:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12800:	d1f2      	bne.n	127e8 <_vfiprintf_r+0x710>
   12802:	9e02      	ldr	r6, [sp, #8]
   12804:	07f3      	lsls	r3, r6, #31
   12806:	d5eb      	bpl.n	127e0 <_vfiprintf_r+0x708>
   12808:	2930      	cmp	r1, #48	; 0x30
   1280a:	d0e8      	beq.n	127de <_vfiprintf_r+0x706>
   1280c:	2330      	movs	r3, #48	; 0x30
   1280e:	3802      	subs	r0, #2
   12810:	f804 3c01 	strb.w	r3, [r4, #-1]
   12814:	ab44      	add	r3, sp, #272	; 0x110
   12816:	1a1b      	subs	r3, r3, r0
   12818:	9e02      	ldr	r6, [sp, #8]
   1281a:	9304      	str	r3, [sp, #16]
   1281c:	4604      	mov	r4, r0
   1281e:	e57d      	b.n	1231c <_vfiprintf_r+0x244>
   12820:	9b04      	ldr	r3, [sp, #16]
   12822:	941b      	str	r4, [sp, #108]	; 0x6c
   12824:	2201      	movs	r2, #1
   12826:	931c      	str	r3, [sp, #112]	; 0x70
   12828:	931a      	str	r3, [sp, #104]	; 0x68
   1282a:	9219      	str	r2, [sp, #100]	; 0x64
   1282c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12830:	f109 0908 	add.w	r9, r9, #8
   12834:	e69e      	b.n	12574 <_vfiprintf_r+0x49c>
   12836:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1283a:	e491      	b.n	12160 <_vfiprintf_r+0x88>
   1283c:	9a06      	ldr	r2, [sp, #24]
   1283e:	9d02      	ldr	r5, [sp, #8]
   12840:	1b55      	subs	r5, r2, r5
   12842:	2d00      	cmp	r5, #0
   12844:	f77f ae78 	ble.w	12538 <_vfiprintf_r+0x460>
   12848:	2d10      	cmp	r5, #16
   1284a:	f340 83d3 	ble.w	12ff4 <_vfiprintf_r+0xf1c>
   1284e:	4619      	mov	r1, r3
   12850:	4643      	mov	r3, r8
   12852:	9409      	str	r4, [sp, #36]	; 0x24
   12854:	46b8      	mov	r8, r7
   12856:	9c03      	ldr	r4, [sp, #12]
   12858:	4637      	mov	r7, r6
   1285a:	465e      	mov	r6, fp
   1285c:	469b      	mov	fp, r3
   1285e:	e007      	b.n	12870 <_vfiprintf_r+0x798>
   12860:	f100 0c02 	add.w	ip, r0, #2
   12864:	f109 0908 	add.w	r9, r9, #8
   12868:	4610      	mov	r0, r2
   1286a:	3d10      	subs	r5, #16
   1286c:	2d10      	cmp	r5, #16
   1286e:	dd1f      	ble.n	128b0 <_vfiprintf_r+0x7d8>
   12870:	4b67      	ldr	r3, [pc, #412]	; (12a10 <_vfiprintf_r+0x938>)
   12872:	f8c9 3000 	str.w	r3, [r9]
   12876:	1c42      	adds	r2, r0, #1
   12878:	3110      	adds	r1, #16
   1287a:	2310      	movs	r3, #16
   1287c:	2a07      	cmp	r2, #7
   1287e:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   12882:	f8c9 3004 	str.w	r3, [r9, #4]
   12886:	ddeb      	ble.n	12860 <_vfiprintf_r+0x788>
   12888:	aa18      	add	r2, sp, #96	; 0x60
   1288a:	2900      	cmp	r1, #0
   1288c:	f000 808c 	beq.w	129a8 <_vfiprintf_r+0x8d0>
   12890:	4621      	mov	r1, r4
   12892:	4630      	mov	r0, r6
   12894:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12898:	f7ff fbe2 	bl	12060 <__sprint_r.part.0>
   1289c:	2800      	cmp	r0, #0
   1289e:	f47f addb 	bne.w	12458 <_vfiprintf_r+0x380>
   128a2:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   128a6:	3d10      	subs	r5, #16
   128a8:	2d10      	cmp	r5, #16
   128aa:	f100 0c01 	add.w	ip, r0, #1
   128ae:	dcdf      	bgt.n	12870 <_vfiprintf_r+0x798>
   128b0:	465a      	mov	r2, fp
   128b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
   128b4:	46b3      	mov	fp, r6
   128b6:	460b      	mov	r3, r1
   128b8:	463e      	mov	r6, r7
   128ba:	4647      	mov	r7, r8
   128bc:	4690      	mov	r8, r2
   128be:	4a54      	ldr	r2, [pc, #336]	; (12a10 <_vfiprintf_r+0x938>)
   128c0:	f8c9 5004 	str.w	r5, [r9, #4]
   128c4:	442b      	add	r3, r5
   128c6:	f1bc 0f07 	cmp.w	ip, #7
   128ca:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   128ce:	f8c9 2000 	str.w	r2, [r9]
   128d2:	f340 81a7 	ble.w	12c24 <_vfiprintf_r+0xb4c>
   128d6:	2b00      	cmp	r3, #0
   128d8:	f000 832c 	beq.w	12f34 <_vfiprintf_r+0xe5c>
   128dc:	9903      	ldr	r1, [sp, #12]
   128de:	aa18      	add	r2, sp, #96	; 0x60
   128e0:	4658      	mov	r0, fp
   128e2:	f7ff fbbd 	bl	12060 <__sprint_r.part.0>
   128e6:	2800      	cmp	r0, #0
   128e8:	f47f adb7 	bne.w	1245a <_vfiprintf_r+0x382>
   128ec:	9a04      	ldr	r2, [sp, #16]
   128ee:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   128f2:	1abd      	subs	r5, r7, r2
   128f4:	2d00      	cmp	r5, #0
   128f6:	f100 0101 	add.w	r1, r0, #1
   128fa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   128fe:	f77f ae20 	ble.w	12542 <_vfiprintf_r+0x46a>
   12902:	2d10      	cmp	r5, #16
   12904:	dd32      	ble.n	1296c <_vfiprintf_r+0x894>
   12906:	4619      	mov	r1, r3
   12908:	4643      	mov	r3, r8
   1290a:	9409      	str	r4, [sp, #36]	; 0x24
   1290c:	46b0      	mov	r8, r6
   1290e:	9c03      	ldr	r4, [sp, #12]
   12910:	465e      	mov	r6, fp
   12912:	2710      	movs	r7, #16
   12914:	469b      	mov	fp, r3
   12916:	e007      	b.n	12928 <_vfiprintf_r+0x850>
   12918:	f100 0c02 	add.w	ip, r0, #2
   1291c:	f109 0908 	add.w	r9, r9, #8
   12920:	4610      	mov	r0, r2
   12922:	3d10      	subs	r5, #16
   12924:	2d10      	cmp	r5, #16
   12926:	dd1a      	ble.n	1295e <_vfiprintf_r+0x886>
   12928:	1c42      	adds	r2, r0, #1
   1292a:	4b39      	ldr	r3, [pc, #228]	; (12a10 <_vfiprintf_r+0x938>)
   1292c:	3110      	adds	r1, #16
   1292e:	2a07      	cmp	r2, #7
   12930:	e9c9 3700 	strd	r3, r7, [r9]
   12934:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   12938:	ddee      	ble.n	12918 <_vfiprintf_r+0x840>
   1293a:	aa18      	add	r2, sp, #96	; 0x60
   1293c:	b329      	cbz	r1, 1298a <_vfiprintf_r+0x8b2>
   1293e:	4621      	mov	r1, r4
   12940:	4630      	mov	r0, r6
   12942:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12946:	f7ff fb8b 	bl	12060 <__sprint_r.part.0>
   1294a:	2800      	cmp	r0, #0
   1294c:	f47f ad84 	bne.w	12458 <_vfiprintf_r+0x380>
   12950:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   12954:	3d10      	subs	r5, #16
   12956:	2d10      	cmp	r5, #16
   12958:	f100 0c01 	add.w	ip, r0, #1
   1295c:	dce4      	bgt.n	12928 <_vfiprintf_r+0x850>
   1295e:	465a      	mov	r2, fp
   12960:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12962:	460b      	mov	r3, r1
   12964:	46b3      	mov	fp, r6
   12966:	4661      	mov	r1, ip
   12968:	4646      	mov	r6, r8
   1296a:	4690      	mov	r8, r2
   1296c:	4a28      	ldr	r2, [pc, #160]	; (12a10 <_vfiprintf_r+0x938>)
   1296e:	f8c9 5004 	str.w	r5, [r9, #4]
   12972:	442b      	add	r3, r5
   12974:	2907      	cmp	r1, #7
   12976:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1297a:	f8c9 2000 	str.w	r2, [r9]
   1297e:	f300 80f3 	bgt.w	12b68 <_vfiprintf_r+0xa90>
   12982:	f109 0908 	add.w	r9, r9, #8
   12986:	3101      	adds	r1, #1
   12988:	e5db      	b.n	12542 <_vfiprintf_r+0x46a>
   1298a:	f04f 0c01 	mov.w	ip, #1
   1298e:	4608      	mov	r0, r1
   12990:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12994:	e7c5      	b.n	12922 <_vfiprintf_r+0x84a>
   12996:	9903      	ldr	r1, [sp, #12]
   12998:	aa18      	add	r2, sp, #96	; 0x60
   1299a:	4658      	mov	r0, fp
   1299c:	f7ff fb60 	bl	12060 <__sprint_r.part.0>
   129a0:	2800      	cmp	r0, #0
   129a2:	f43f adfa 	beq.w	1259a <_vfiprintf_r+0x4c2>
   129a6:	e558      	b.n	1245a <_vfiprintf_r+0x382>
   129a8:	f04f 0c01 	mov.w	ip, #1
   129ac:	4608      	mov	r0, r1
   129ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   129b2:	e75a      	b.n	1286a <_vfiprintf_r+0x792>
   129b4:	2b00      	cmp	r3, #0
   129b6:	f000 810c 	beq.w	12bd2 <_vfiprintf_r+0xafa>
   129ba:	9903      	ldr	r1, [sp, #12]
   129bc:	aa18      	add	r2, sp, #96	; 0x60
   129be:	4658      	mov	r0, fp
   129c0:	f7ff fb4e 	bl	12060 <__sprint_r.part.0>
   129c4:	2800      	cmp	r0, #0
   129c6:	f47f ad48 	bne.w	1245a <_vfiprintf_r+0x382>
   129ca:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   129ce:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   129d2:	1c41      	adds	r1, r0, #1
   129d4:	e58e      	b.n	124f4 <_vfiprintf_r+0x41c>
   129d6:	2302      	movs	r3, #2
   129d8:	aa11      	add	r2, sp, #68	; 0x44
   129da:	931c      	str	r3, [sp, #112]	; 0x70
   129dc:	921b      	str	r2, [sp, #108]	; 0x6c
   129de:	2101      	movs	r1, #1
   129e0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   129e4:	4608      	mov	r0, r1
   129e6:	f109 0908 	add.w	r9, r9, #8
   129ea:	1c41      	adds	r1, r0, #1
   129ec:	e5a0      	b.n	12530 <_vfiprintf_r+0x458>
   129ee:	2d10      	cmp	r5, #16
   129f0:	f340 82e2 	ble.w	12fb8 <_vfiprintf_r+0xee0>
   129f4:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   129f8:	4618      	mov	r0, r3
   129fa:	4643      	mov	r3, r8
   129fc:	940f      	str	r4, [sp, #60]	; 0x3c
   129fe:	46b8      	mov	r8, r7
   12a00:	9c03      	ldr	r4, [sp, #12]
   12a02:	4637      	mov	r7, r6
   12a04:	465e      	mov	r6, fp
   12a06:	469b      	mov	fp, r3
   12a08:	e00c      	b.n	12a24 <_vfiprintf_r+0x94c>
   12a0a:	bf00      	nop
   12a0c:	000159d4 	.word	0x000159d4
   12a10:	00015ae0 	.word	0x00015ae0
   12a14:	f101 0c02 	add.w	ip, r1, #2
   12a18:	f109 0908 	add.w	r9, r9, #8
   12a1c:	4611      	mov	r1, r2
   12a1e:	3d10      	subs	r5, #16
   12a20:	2d10      	cmp	r5, #16
   12a22:	dd1d      	ble.n	12a60 <_vfiprintf_r+0x988>
   12a24:	4bb2      	ldr	r3, [pc, #712]	; (12cf0 <_vfiprintf_r+0xc18>)
   12a26:	f8c9 3000 	str.w	r3, [r9]
   12a2a:	1c4a      	adds	r2, r1, #1
   12a2c:	3010      	adds	r0, #16
   12a2e:	2310      	movs	r3, #16
   12a30:	2a07      	cmp	r2, #7
   12a32:	e9cd 2019 	strd	r2, r0, [sp, #100]	; 0x64
   12a36:	f8c9 3004 	str.w	r3, [r9, #4]
   12a3a:	ddeb      	ble.n	12a14 <_vfiprintf_r+0x93c>
   12a3c:	aa18      	add	r2, sp, #96	; 0x60
   12a3e:	b330      	cbz	r0, 12a8e <_vfiprintf_r+0x9b6>
   12a40:	4621      	mov	r1, r4
   12a42:	4630      	mov	r0, r6
   12a44:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a48:	f7ff fb0a 	bl	12060 <__sprint_r.part.0>
   12a4c:	2800      	cmp	r0, #0
   12a4e:	f47f ad03 	bne.w	12458 <_vfiprintf_r+0x380>
   12a52:	e9dd 1019 	ldrd	r1, r0, [sp, #100]	; 0x64
   12a56:	3d10      	subs	r5, #16
   12a58:	2d10      	cmp	r5, #16
   12a5a:	f101 0c01 	add.w	ip, r1, #1
   12a5e:	dce1      	bgt.n	12a24 <_vfiprintf_r+0x94c>
   12a60:	465a      	mov	r2, fp
   12a62:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   12a64:	4603      	mov	r3, r0
   12a66:	46b3      	mov	fp, r6
   12a68:	4660      	mov	r0, ip
   12a6a:	463e      	mov	r6, r7
   12a6c:	4647      	mov	r7, r8
   12a6e:	4690      	mov	r8, r2
   12a70:	4a9f      	ldr	r2, [pc, #636]	; (12cf0 <_vfiprintf_r+0xc18>)
   12a72:	f8c9 5004 	str.w	r5, [r9, #4]
   12a76:	442b      	add	r3, r5
   12a78:	2807      	cmp	r0, #7
   12a7a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   12a7e:	f8c9 2000 	str.w	r2, [r9]
   12a82:	f300 80b6 	bgt.w	12bf2 <_vfiprintf_r+0xb1a>
   12a86:	f109 0908 	add.w	r9, r9, #8
   12a8a:	1c41      	adds	r1, r0, #1
   12a8c:	e51e      	b.n	124cc <_vfiprintf_r+0x3f4>
   12a8e:	4601      	mov	r1, r0
   12a90:	f04f 0c01 	mov.w	ip, #1
   12a94:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a98:	e7c1      	b.n	12a1e <_vfiprintf_r+0x946>
   12a9a:	0776      	lsls	r6, r6, #29
   12a9c:	9319      	str	r3, [sp, #100]	; 0x64
   12a9e:	d54a      	bpl.n	12b36 <_vfiprintf_r+0xa5e>
   12aa0:	9a06      	ldr	r2, [sp, #24]
   12aa2:	9902      	ldr	r1, [sp, #8]
   12aa4:	1a54      	subs	r4, r2, r1
   12aa6:	2c00      	cmp	r4, #0
   12aa8:	dd45      	ble.n	12b36 <_vfiprintf_r+0xa5e>
   12aaa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12aae:	2c10      	cmp	r4, #16
   12ab0:	f340 829d 	ble.w	12fee <_vfiprintf_r+0xf16>
   12ab4:	9919      	ldr	r1, [sp, #100]	; 0x64
   12ab6:	9e03      	ldr	r6, [sp, #12]
   12ab8:	2510      	movs	r5, #16
   12aba:	e006      	b.n	12aca <_vfiprintf_r+0x9f2>
   12abc:	1c88      	adds	r0, r1, #2
   12abe:	f109 0908 	add.w	r9, r9, #8
   12ac2:	4611      	mov	r1, r2
   12ac4:	3c10      	subs	r4, #16
   12ac6:	2c10      	cmp	r4, #16
   12ac8:	dd1a      	ble.n	12b00 <_vfiprintf_r+0xa28>
   12aca:	1c4a      	adds	r2, r1, #1
   12acc:	4888      	ldr	r0, [pc, #544]	; (12cf0 <_vfiprintf_r+0xc18>)
   12ace:	3310      	adds	r3, #16
   12ad0:	2a07      	cmp	r2, #7
   12ad2:	e9c9 0500 	strd	r0, r5, [r9]
   12ad6:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12ada:	ddef      	ble.n	12abc <_vfiprintf_r+0x9e4>
   12adc:	aa18      	add	r2, sp, #96	; 0x60
   12ade:	b32b      	cbz	r3, 12b2c <_vfiprintf_r+0xa54>
   12ae0:	4631      	mov	r1, r6
   12ae2:	4658      	mov	r0, fp
   12ae4:	f7ff fabc 	bl	12060 <__sprint_r.part.0>
   12ae8:	2800      	cmp	r0, #0
   12aea:	f47f acb6 	bne.w	1245a <_vfiprintf_r+0x382>
   12aee:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12af2:	3c10      	subs	r4, #16
   12af4:	2c10      	cmp	r4, #16
   12af6:	f101 0001 	add.w	r0, r1, #1
   12afa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12afe:	dce4      	bgt.n	12aca <_vfiprintf_r+0x9f2>
   12b00:	4a7b      	ldr	r2, [pc, #492]	; (12cf0 <_vfiprintf_r+0xc18>)
   12b02:	f8c9 4004 	str.w	r4, [r9, #4]
   12b06:	4423      	add	r3, r4
   12b08:	2807      	cmp	r0, #7
   12b0a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   12b0e:	f8c9 2000 	str.w	r2, [r9]
   12b12:	f77f ad37 	ble.w	12584 <_vfiprintf_r+0x4ac>
   12b16:	b173      	cbz	r3, 12b36 <_vfiprintf_r+0xa5e>
   12b18:	9903      	ldr	r1, [sp, #12]
   12b1a:	aa18      	add	r2, sp, #96	; 0x60
   12b1c:	4658      	mov	r0, fp
   12b1e:	f7ff fa9f 	bl	12060 <__sprint_r.part.0>
   12b22:	2800      	cmp	r0, #0
   12b24:	f47f ac99 	bne.w	1245a <_vfiprintf_r+0x382>
   12b28:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12b2a:	e52b      	b.n	12584 <_vfiprintf_r+0x4ac>
   12b2c:	2001      	movs	r0, #1
   12b2e:	4619      	mov	r1, r3
   12b30:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b34:	e7c6      	b.n	12ac4 <_vfiprintf_r+0x9ec>
   12b36:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   12b3a:	9902      	ldr	r1, [sp, #8]
   12b3c:	428a      	cmp	r2, r1
   12b3e:	bfac      	ite	ge
   12b40:	189b      	addge	r3, r3, r2
   12b42:	185b      	addlt	r3, r3, r1
   12b44:	9305      	str	r3, [sp, #20]
   12b46:	e528      	b.n	1259a <_vfiprintf_r+0x4c2>
   12b48:	9b03      	ldr	r3, [sp, #12]
   12b4a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   12b4e:	058f      	lsls	r7, r1, #22
   12b50:	b28a      	uxth	r2, r1
   12b52:	f53f aae0 	bmi.w	12116 <_vfiprintf_r+0x3e>
   12b56:	461d      	mov	r5, r3
   12b58:	6d98      	ldr	r0, [r3, #88]	; 0x58
   12b5a:	f7fb fbd9 	bl	e310 <__retarget_lock_acquire_recursive>
   12b5e:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   12b62:	b28a      	uxth	r2, r1
   12b64:	f7ff bad7 	b.w	12116 <_vfiprintf_r+0x3e>
   12b68:	2b00      	cmp	r3, #0
   12b6a:	f43f ae59 	beq.w	12820 <_vfiprintf_r+0x748>
   12b6e:	9903      	ldr	r1, [sp, #12]
   12b70:	aa18      	add	r2, sp, #96	; 0x60
   12b72:	4658      	mov	r0, fp
   12b74:	f7ff fa74 	bl	12060 <__sprint_r.part.0>
   12b78:	2800      	cmp	r0, #0
   12b7a:	f47f ac6e 	bne.w	1245a <_vfiprintf_r+0x382>
   12b7e:	9919      	ldr	r1, [sp, #100]	; 0x64
   12b80:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12b82:	3101      	adds	r1, #1
   12b84:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b88:	e4db      	b.n	12542 <_vfiprintf_r+0x46a>
   12b8a:	9219      	str	r2, [sp, #100]	; 0x64
   12b8c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b90:	e44f      	b.n	12432 <_vfiprintf_r+0x35a>
   12b92:	2f00      	cmp	r7, #0
   12b94:	f47f abba 	bne.w	1230c <_vfiprintf_r+0x234>
   12b98:	9e02      	ldr	r6, [sp, #8]
   12b9a:	2700      	movs	r7, #0
   12b9c:	9704      	str	r7, [sp, #16]
   12b9e:	ac44      	add	r4, sp, #272	; 0x110
   12ba0:	f7ff bbbc 	b.w	1231c <_vfiprintf_r+0x244>
   12ba4:	9b02      	ldr	r3, [sp, #8]
   12ba6:	f013 0310 	ands.w	r3, r3, #16
   12baa:	d154      	bne.n	12c56 <_vfiprintf_r+0xb7e>
   12bac:	9a02      	ldr	r2, [sp, #8]
   12bae:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   12bb2:	f000 8167 	beq.w	12e84 <_vfiprintf_r+0xdac>
   12bb6:	9907      	ldr	r1, [sp, #28]
   12bb8:	461a      	mov	r2, r3
   12bba:	f851 3b04 	ldr.w	r3, [r1], #4
   12bbe:	9107      	str	r1, [sp, #28]
   12bc0:	b29b      	uxth	r3, r3
   12bc2:	2101      	movs	r1, #1
   12bc4:	f7ff bbf2 	b.w	123ac <_vfiprintf_r+0x2d4>
   12bc8:	2101      	movs	r1, #1
   12bca:	4618      	mov	r0, r3
   12bcc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12bd0:	e4ae      	b.n	12530 <_vfiprintf_r+0x458>
   12bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12bd4:	2a00      	cmp	r2, #0
   12bd6:	d15e      	bne.n	12c96 <_vfiprintf_r+0xbbe>
   12bd8:	4618      	mov	r0, r3
   12bda:	2101      	movs	r1, #1
   12bdc:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12be0:	e4a6      	b.n	12530 <_vfiprintf_r+0x458>
   12be2:	425b      	negs	r3, r3
   12be4:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   12be8:	9602      	str	r6, [sp, #8]
   12bea:	202d      	movs	r0, #45	; 0x2d
   12bec:	2101      	movs	r1, #1
   12bee:	f7ff bbde 	b.w	123ae <_vfiprintf_r+0x2d6>
   12bf2:	2b00      	cmp	r3, #0
   12bf4:	f000 808d 	beq.w	12d12 <_vfiprintf_r+0xc3a>
   12bf8:	9903      	ldr	r1, [sp, #12]
   12bfa:	aa18      	add	r2, sp, #96	; 0x60
   12bfc:	4658      	mov	r0, fp
   12bfe:	f7ff fa2f 	bl	12060 <__sprint_r.part.0>
   12c02:	2800      	cmp	r0, #0
   12c04:	f47f ac29 	bne.w	1245a <_vfiprintf_r+0x382>
   12c08:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12c0c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c10:	1c41      	adds	r1, r0, #1
   12c12:	e45b      	b.n	124cc <_vfiprintf_r+0x3f4>
   12c14:	f898 1000 	ldrb.w	r1, [r8]
   12c18:	9307      	str	r3, [sp, #28]
   12c1a:	f7ff bac9 	b.w	121b0 <_vfiprintf_r+0xd8>
   12c1e:	ac44      	add	r4, sp, #272	; 0x110
   12c20:	f7ff bb7c 	b.w	1231c <_vfiprintf_r+0x244>
   12c24:	f109 0908 	add.w	r9, r9, #8
   12c28:	f10c 0101 	add.w	r1, ip, #1
   12c2c:	4660      	mov	r0, ip
   12c2e:	e483      	b.n	12538 <_vfiprintf_r+0x460>
   12c30:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   12c34:	f040 8191 	bne.w	12f5a <_vfiprintf_r+0xe82>
   12c38:	f851 3b04 	ldr.w	r3, [r1], #4
   12c3c:	9107      	str	r1, [sp, #28]
   12c3e:	f7ff bbb1 	b.w	123a4 <_vfiprintf_r+0x2cc>
   12c42:	05b3      	lsls	r3, r6, #22
   12c44:	f100 8182 	bmi.w	12f4c <_vfiprintf_r+0xe74>
   12c48:	f852 3b04 	ldr.w	r3, [r2], #4
   12c4c:	9207      	str	r2, [sp, #28]
   12c4e:	17da      	asrs	r2, r3, #31
   12c50:	4611      	mov	r1, r2
   12c52:	f7ff bb49 	b.w	122e8 <_vfiprintf_r+0x210>
   12c56:	9907      	ldr	r1, [sp, #28]
   12c58:	f851 3b04 	ldr.w	r3, [r1], #4
   12c5c:	9107      	str	r1, [sp, #28]
   12c5e:	2101      	movs	r1, #1
   12c60:	f7ff bba4 	b.w	123ac <_vfiprintf_r+0x2d4>
   12c64:	9b07      	ldr	r3, [sp, #28]
   12c66:	9805      	ldr	r0, [sp, #20]
   12c68:	f853 1b04 	ldr.w	r1, [r3], #4
   12c6c:	9307      	str	r3, [sp, #28]
   12c6e:	17c2      	asrs	r2, r0, #31
   12c70:	e9c1 0200 	strd	r0, r2, [r1]
   12c74:	f7ff ba74 	b.w	12160 <_vfiprintf_r+0x88>
   12c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12c7a:	2b00      	cmp	r3, #0
   12c7c:	f43f ab1d 	beq.w	122ba <_vfiprintf_r+0x1e2>
   12c80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12c82:	781b      	ldrb	r3, [r3, #0]
   12c84:	2b00      	cmp	r3, #0
   12c86:	f43f ab18 	beq.w	122ba <_vfiprintf_r+0x1e2>
   12c8a:	f898 1000 	ldrb.w	r1, [r8]
   12c8e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   12c92:	f7ff ba8d 	b.w	121b0 <_vfiprintf_r+0xd8>
   12c96:	2302      	movs	r3, #2
   12c98:	aa11      	add	r2, sp, #68	; 0x44
   12c9a:	931c      	str	r3, [sp, #112]	; 0x70
   12c9c:	921b      	str	r2, [sp, #108]	; 0x6c
   12c9e:	2001      	movs	r0, #1
   12ca0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ca4:	e69f      	b.n	129e6 <_vfiprintf_r+0x90e>
   12ca6:	9602      	str	r6, [sp, #8]
   12ca8:	e552      	b.n	12750 <_vfiprintf_r+0x678>
   12caa:	4b12      	ldr	r3, [pc, #72]	; (12cf4 <_vfiprintf_r+0xc1c>)
   12cac:	930b      	str	r3, [sp, #44]	; 0x2c
   12cae:	f016 0220 	ands.w	r2, r6, #32
   12cb2:	d05f      	beq.n	12d74 <_vfiprintf_r+0xc9c>
   12cb4:	9b07      	ldr	r3, [sp, #28]
   12cb6:	3307      	adds	r3, #7
   12cb8:	f023 0307 	bic.w	r3, r3, #7
   12cbc:	4618      	mov	r0, r3
   12cbe:	685a      	ldr	r2, [r3, #4]
   12cc0:	f850 3b08 	ldr.w	r3, [r0], #8
   12cc4:	9007      	str	r0, [sp, #28]
   12cc6:	07f4      	lsls	r4, r6, #31
   12cc8:	d509      	bpl.n	12cde <_vfiprintf_r+0xc06>
   12cca:	ea53 0002 	orrs.w	r0, r3, r2
   12cce:	d006      	beq.n	12cde <_vfiprintf_r+0xc06>
   12cd0:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   12cd4:	2130      	movs	r1, #48	; 0x30
   12cd6:	f046 0602 	orr.w	r6, r6, #2
   12cda:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   12cde:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12ce2:	9102      	str	r1, [sp, #8]
   12ce4:	2102      	movs	r1, #2
   12ce6:	f7ff bb61 	b.w	123ac <_vfiprintf_r+0x2d4>
   12cea:	4b03      	ldr	r3, [pc, #12]	; (12cf8 <_vfiprintf_r+0xc20>)
   12cec:	930b      	str	r3, [sp, #44]	; 0x2c
   12cee:	e7de      	b.n	12cae <_vfiprintf_r+0xbd6>
   12cf0:	00015ad0 	.word	0x00015ad0
   12cf4:	000159d4 	.word	0x000159d4
   12cf8:	000159e8 	.word	0x000159e8
   12cfc:	9b07      	ldr	r3, [sp, #28]
   12cfe:	2101      	movs	r1, #1
   12d00:	f853 2b04 	ldr.w	r2, [r3], #4
   12d04:	9102      	str	r1, [sp, #8]
   12d06:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   12d0a:	9307      	str	r3, [sp, #28]
   12d0c:	9104      	str	r1, [sp, #16]
   12d0e:	ac2b      	add	r4, sp, #172	; 0xac
   12d10:	e4ba      	b.n	12688 <_vfiprintf_r+0x5b0>
   12d12:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12d16:	2a00      	cmp	r2, #0
   12d18:	f040 8126 	bne.w	12f68 <_vfiprintf_r+0xe90>
   12d1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12d1e:	2a00      	cmp	r2, #0
   12d20:	f47f ae59 	bne.w	129d6 <_vfiprintf_r+0x8fe>
   12d24:	4618      	mov	r0, r3
   12d26:	2101      	movs	r1, #1
   12d28:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12d2c:	e404      	b.n	12538 <_vfiprintf_r+0x460>
   12d2e:	2100      	movs	r1, #0
   12d30:	2208      	movs	r2, #8
   12d32:	a816      	add	r0, sp, #88	; 0x58
   12d34:	9413      	str	r4, [sp, #76]	; 0x4c
   12d36:	f7fb f9cd 	bl	e0d4 <memset>
   12d3a:	1c79      	adds	r1, r7, #1
   12d3c:	f000 80b2 	beq.w	12ea4 <_vfiprintf_r+0xdcc>
   12d40:	2500      	movs	r5, #0
   12d42:	9407      	str	r4, [sp, #28]
   12d44:	462c      	mov	r4, r5
   12d46:	e00c      	b.n	12d62 <_vfiprintf_r+0xc8a>
   12d48:	a92b      	add	r1, sp, #172	; 0xac
   12d4a:	4658      	mov	r0, fp
   12d4c:	f7ff f8c0 	bl	11ed0 <_wcrtomb_r>
   12d50:	1c42      	adds	r2, r0, #1
   12d52:	4420      	add	r0, r4
   12d54:	f000 8161 	beq.w	1301a <_vfiprintf_r+0xf42>
   12d58:	42b8      	cmp	r0, r7
   12d5a:	dc08      	bgt.n	12d6e <_vfiprintf_r+0xc96>
   12d5c:	f000 8165 	beq.w	1302a <_vfiprintf_r+0xf52>
   12d60:	4604      	mov	r4, r0
   12d62:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12d64:	5952      	ldr	r2, [r2, r5]
   12d66:	ab16      	add	r3, sp, #88	; 0x58
   12d68:	3504      	adds	r5, #4
   12d6a:	2a00      	cmp	r2, #0
   12d6c:	d1ec      	bne.n	12d48 <_vfiprintf_r+0xc70>
   12d6e:	9404      	str	r4, [sp, #16]
   12d70:	9c07      	ldr	r4, [sp, #28]
   12d72:	e0a5      	b.n	12ec0 <_vfiprintf_r+0xde8>
   12d74:	f016 0310 	ands.w	r3, r6, #16
   12d78:	9807      	ldr	r0, [sp, #28]
   12d7a:	d10c      	bne.n	12d96 <_vfiprintf_r+0xcbe>
   12d7c:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   12d80:	d005      	beq.n	12d8e <_vfiprintf_r+0xcb6>
   12d82:	461a      	mov	r2, r3
   12d84:	f850 3b04 	ldr.w	r3, [r0], #4
   12d88:	9007      	str	r0, [sp, #28]
   12d8a:	b29b      	uxth	r3, r3
   12d8c:	e79b      	b.n	12cc6 <_vfiprintf_r+0xbee>
   12d8e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   12d92:	f040 80d5 	bne.w	12f40 <_vfiprintf_r+0xe68>
   12d96:	f850 3b04 	ldr.w	r3, [r0], #4
   12d9a:	9007      	str	r0, [sp, #28]
   12d9c:	e793      	b.n	12cc6 <_vfiprintf_r+0xbee>
   12d9e:	9902      	ldr	r1, [sp, #8]
   12da0:	f8cd 8020 	str.w	r8, [sp, #32]
   12da4:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   12da8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   12dac:	9704      	str	r7, [sp, #16]
   12dae:	f04f 0c00 	mov.w	ip, #0
   12db2:	ac44      	add	r4, sp, #272	; 0x110
   12db4:	e005      	b.n	12dc2 <_vfiprintf_r+0xcea>
   12db6:	2b0a      	cmp	r3, #10
   12db8:	f172 0200 	sbcs.w	r2, r2, #0
   12dbc:	d336      	bcc.n	12e2c <_vfiprintf_r+0xd54>
   12dbe:	463b      	mov	r3, r7
   12dc0:	462a      	mov	r2, r5
   12dc2:	f8df e290 	ldr.w	lr, [pc, #656]	; 13054 <_vfiprintf_r+0xf7c>
   12dc6:	1899      	adds	r1, r3, r2
   12dc8:	f141 0100 	adc.w	r1, r1, #0
   12dcc:	fbae 0501 	umull	r0, r5, lr, r1
   12dd0:	f025 0003 	bic.w	r0, r5, #3
   12dd4:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   12dd8:	1a09      	subs	r1, r1, r0
   12dda:	1a58      	subs	r0, r3, r1
   12ddc:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   12de0:	f162 0700 	sbc.w	r7, r2, #0
   12de4:	fb05 f500 	mul.w	r5, r5, r0
   12de8:	fb0e 5507 	mla	r5, lr, r7, r5
   12dec:	fba0 700e 	umull	r7, r0, r0, lr
   12df0:	4405      	add	r5, r0
   12df2:	f007 0e01 	and.w	lr, r7, #1
   12df6:	2005      	movs	r0, #5
   12df8:	fbae 0e00 	umull	r0, lr, lr, r0
   12dfc:	1840      	adds	r0, r0, r1
   12dfe:	087f      	lsrs	r7, r7, #1
   12e00:	3030      	adds	r0, #48	; 0x30
   12e02:	f804 0c01 	strb.w	r0, [r4, #-1]
   12e06:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
   12e0a:	f10c 0c01 	add.w	ip, ip, #1
   12e0e:	3c01      	subs	r4, #1
   12e10:	086d      	lsrs	r5, r5, #1
   12e12:	2e00      	cmp	r6, #0
   12e14:	d0cf      	beq.n	12db6 <_vfiprintf_r+0xcde>
   12e16:	f898 1000 	ldrb.w	r1, [r8]
   12e1a:	4561      	cmp	r1, ip
   12e1c:	d1cb      	bne.n	12db6 <_vfiprintf_r+0xcde>
   12e1e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   12e22:	d0c8      	beq.n	12db6 <_vfiprintf_r+0xcde>
   12e24:	2b0a      	cmp	r3, #10
   12e26:	f172 0200 	sbcs.w	r2, r2, #0
   12e2a:	d26c      	bcs.n	12f06 <_vfiprintf_r+0xe2e>
   12e2c:	ab44      	add	r3, sp, #272	; 0x110
   12e2e:	1b1b      	subs	r3, r3, r4
   12e30:	9f04      	ldr	r7, [sp, #16]
   12e32:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   12e36:	9e02      	ldr	r6, [sp, #8]
   12e38:	f8dd 8020 	ldr.w	r8, [sp, #32]
   12e3c:	9304      	str	r3, [sp, #16]
   12e3e:	f7ff ba6d 	b.w	1231c <_vfiprintf_r+0x244>
   12e42:	9602      	str	r6, [sp, #8]
   12e44:	f7ff ba5d 	b.w	12302 <_vfiprintf_r+0x22a>
   12e48:	4658      	mov	r0, fp
   12e4a:	f7fb f813 	bl	de74 <__sinit>
   12e4e:	f7ff b95a 	b.w	12106 <_vfiprintf_r+0x2e>
   12e52:	2901      	cmp	r1, #1
   12e54:	9602      	str	r6, [sp, #8]
   12e56:	f47f acb2 	bne.w	127be <_vfiprintf_r+0x6e6>
   12e5a:	f7ff ba57 	b.w	1230c <_vfiprintf_r+0x234>
   12e5e:	9b07      	ldr	r3, [sp, #28]
   12e60:	9905      	ldr	r1, [sp, #20]
   12e62:	f853 2b04 	ldr.w	r2, [r3], #4
   12e66:	6011      	str	r1, [r2, #0]
   12e68:	9307      	str	r3, [sp, #28]
   12e6a:	f7ff b979 	b.w	12160 <_vfiprintf_r+0x88>
   12e6e:	2f06      	cmp	r7, #6
   12e70:	463b      	mov	r3, r7
   12e72:	9a02      	ldr	r2, [sp, #8]
   12e74:	4c78      	ldr	r4, [pc, #480]	; (13058 <_vfiprintf_r+0xf80>)
   12e76:	9207      	str	r2, [sp, #28]
   12e78:	bf28      	it	cs
   12e7a:	2306      	movcs	r3, #6
   12e7c:	9304      	str	r3, [sp, #16]
   12e7e:	9302      	str	r3, [sp, #8]
   12e80:	f7ff bb0d 	b.w	1249e <_vfiprintf_r+0x3c6>
   12e84:	9b02      	ldr	r3, [sp, #8]
   12e86:	9907      	ldr	r1, [sp, #28]
   12e88:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   12e8c:	bf14      	ite	ne
   12e8e:	f851 3b04 	ldrne.w	r3, [r1], #4
   12e92:	f851 3b04 	ldreq.w	r3, [r1], #4
   12e96:	9107      	str	r1, [sp, #28]
   12e98:	bf1c      	itt	ne
   12e9a:	4602      	movne	r2, r0
   12e9c:	b2db      	uxtbne	r3, r3
   12e9e:	2101      	movs	r1, #1
   12ea0:	f7ff ba84 	b.w	123ac <_vfiprintf_r+0x2d4>
   12ea4:	ab16      	add	r3, sp, #88	; 0x58
   12ea6:	9300      	str	r3, [sp, #0]
   12ea8:	2300      	movs	r3, #0
   12eaa:	4619      	mov	r1, r3
   12eac:	aa13      	add	r2, sp, #76	; 0x4c
   12eae:	4658      	mov	r0, fp
   12eb0:	f7ff f834 	bl	11f1c <_wcsrtombs_r>
   12eb4:	4603      	mov	r3, r0
   12eb6:	3301      	adds	r3, #1
   12eb8:	9004      	str	r0, [sp, #16]
   12eba:	f000 80ae 	beq.w	1301a <_vfiprintf_r+0xf42>
   12ebe:	9413      	str	r4, [sp, #76]	; 0x4c
   12ec0:	9b04      	ldr	r3, [sp, #16]
   12ec2:	b37b      	cbz	r3, 12f24 <_vfiprintf_r+0xe4c>
   12ec4:	2b63      	cmp	r3, #99	; 0x63
   12ec6:	dc62      	bgt.n	12f8e <_vfiprintf_r+0xeb6>
   12ec8:	2300      	movs	r3, #0
   12eca:	9308      	str	r3, [sp, #32]
   12ecc:	ac2b      	add	r4, sp, #172	; 0xac
   12ece:	2208      	movs	r2, #8
   12ed0:	2100      	movs	r1, #0
   12ed2:	a816      	add	r0, sp, #88	; 0x58
   12ed4:	f7fb f8fe 	bl	e0d4 <memset>
   12ed8:	9d04      	ldr	r5, [sp, #16]
   12eda:	ab16      	add	r3, sp, #88	; 0x58
   12edc:	9300      	str	r3, [sp, #0]
   12ede:	aa13      	add	r2, sp, #76	; 0x4c
   12ee0:	462b      	mov	r3, r5
   12ee2:	4621      	mov	r1, r4
   12ee4:	4658      	mov	r0, fp
   12ee6:	f7ff f819 	bl	11f1c <_wcsrtombs_r>
   12eea:	4285      	cmp	r5, r0
   12eec:	f040 80ab 	bne.w	13046 <_vfiprintf_r+0xf6e>
   12ef0:	9b02      	ldr	r3, [sp, #8]
   12ef2:	9a04      	ldr	r2, [sp, #16]
   12ef4:	9307      	str	r3, [sp, #28]
   12ef6:	2300      	movs	r3, #0
   12ef8:	54a3      	strb	r3, [r4, r2]
   12efa:	461f      	mov	r7, r3
   12efc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   12f00:	9302      	str	r3, [sp, #8]
   12f02:	f7ff ba12 	b.w	1232a <_vfiprintf_r+0x252>
   12f06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12f08:	990d      	ldr	r1, [sp, #52]	; 0x34
   12f0a:	1ae4      	subs	r4, r4, r3
   12f0c:	461a      	mov	r2, r3
   12f0e:	4620      	mov	r0, r4
   12f10:	f7fb f932 	bl	e178 <strncpy>
   12f14:	f898 3001 	ldrb.w	r3, [r8, #1]
   12f18:	b10b      	cbz	r3, 12f1e <_vfiprintf_r+0xe46>
   12f1a:	f108 0801 	add.w	r8, r8, #1
   12f1e:	f04f 0c00 	mov.w	ip, #0
   12f22:	e74c      	b.n	12dbe <_vfiprintf_r+0xce6>
   12f24:	9b02      	ldr	r3, [sp, #8]
   12f26:	9307      	str	r3, [sp, #28]
   12f28:	9b04      	ldr	r3, [sp, #16]
   12f2a:	9302      	str	r3, [sp, #8]
   12f2c:	461f      	mov	r7, r3
   12f2e:	9308      	str	r3, [sp, #32]
   12f30:	f7ff b9fb 	b.w	1232a <_vfiprintf_r+0x252>
   12f34:	2101      	movs	r1, #1
   12f36:	4618      	mov	r0, r3
   12f38:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f3c:	f7ff bafc 	b.w	12538 <_vfiprintf_r+0x460>
   12f40:	f850 3b04 	ldr.w	r3, [r0], #4
   12f44:	9007      	str	r0, [sp, #28]
   12f46:	4622      	mov	r2, r4
   12f48:	b2db      	uxtb	r3, r3
   12f4a:	e6bc      	b.n	12cc6 <_vfiprintf_r+0xbee>
   12f4c:	f912 3b04 	ldrsb.w	r3, [r2], #4
   12f50:	9207      	str	r2, [sp, #28]
   12f52:	17da      	asrs	r2, r3, #31
   12f54:	4611      	mov	r1, r2
   12f56:	f7ff b9c7 	b.w	122e8 <_vfiprintf_r+0x210>
   12f5a:	f851 3b04 	ldr.w	r3, [r1], #4
   12f5e:	9107      	str	r1, [sp, #28]
   12f60:	4602      	mov	r2, r0
   12f62:	b2db      	uxtb	r3, r3
   12f64:	f7ff ba1e 	b.w	123a4 <_vfiprintf_r+0x2cc>
   12f68:	2301      	movs	r3, #1
   12f6a:	931c      	str	r3, [sp, #112]	; 0x70
   12f6c:	2101      	movs	r1, #1
   12f6e:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   12f72:	931b      	str	r3, [sp, #108]	; 0x6c
   12f74:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12f78:	460b      	mov	r3, r1
   12f7a:	f7ff bab7 	b.w	124ec <_vfiprintf_r+0x414>
   12f7e:	9b07      	ldr	r3, [sp, #28]
   12f80:	9905      	ldr	r1, [sp, #20]
   12f82:	f853 2b04 	ldr.w	r2, [r3], #4
   12f86:	9307      	str	r3, [sp, #28]
   12f88:	8011      	strh	r1, [r2, #0]
   12f8a:	f7ff b8e9 	b.w	12160 <_vfiprintf_r+0x88>
   12f8e:	1c59      	adds	r1, r3, #1
   12f90:	4658      	mov	r0, fp
   12f92:	f7fa fa31 	bl	d3f8 <_malloc_r>
   12f96:	4604      	mov	r4, r0
   12f98:	2800      	cmp	r0, #0
   12f9a:	d03e      	beq.n	1301a <_vfiprintf_r+0xf42>
   12f9c:	9008      	str	r0, [sp, #32]
   12f9e:	e796      	b.n	12ece <_vfiprintf_r+0xdf6>
   12fa0:	6d88      	ldr	r0, [r1, #88]	; 0x58
   12fa2:	f7fb f9b7 	bl	e314 <__retarget_lock_release_recursive>
   12fa6:	f7ff b9e3 	b.w	12370 <_vfiprintf_r+0x298>
   12faa:	9b02      	ldr	r3, [sp, #8]
   12fac:	9704      	str	r7, [sp, #16]
   12fae:	9702      	str	r7, [sp, #8]
   12fb0:	9307      	str	r3, [sp, #28]
   12fb2:	9f08      	ldr	r7, [sp, #32]
   12fb4:	f7ff b9b9 	b.w	1232a <_vfiprintf_r+0x252>
   12fb8:	9819      	ldr	r0, [sp, #100]	; 0x64
   12fba:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12fbc:	3001      	adds	r0, #1
   12fbe:	e557      	b.n	12a70 <_vfiprintf_r+0x998>
   12fc0:	9b02      	ldr	r3, [sp, #8]
   12fc2:	9307      	str	r3, [sp, #28]
   12fc4:	4620      	mov	r0, r4
   12fc6:	f7fb f9bb 	bl	e340 <strlen>
   12fca:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   12fce:	462f      	mov	r7, r5
   12fd0:	9004      	str	r0, [sp, #16]
   12fd2:	9302      	str	r3, [sp, #8]
   12fd4:	9508      	str	r5, [sp, #32]
   12fd6:	f7ff b9a8 	b.w	1232a <_vfiprintf_r+0x252>
   12fda:	9903      	ldr	r1, [sp, #12]
   12fdc:	aa18      	add	r2, sp, #96	; 0x60
   12fde:	4658      	mov	r0, fp
   12fe0:	f7ff f83e 	bl	12060 <__sprint_r.part.0>
   12fe4:	2800      	cmp	r0, #0
   12fe6:	f43f aa2e 	beq.w	12446 <_vfiprintf_r+0x36e>
   12fea:	f7ff ba3c 	b.w	12466 <_vfiprintf_r+0x38e>
   12fee:	9819      	ldr	r0, [sp, #100]	; 0x64
   12ff0:	3001      	adds	r0, #1
   12ff2:	e585      	b.n	12b00 <_vfiprintf_r+0xa28>
   12ff4:	468c      	mov	ip, r1
   12ff6:	e462      	b.n	128be <_vfiprintf_r+0x7e6>
   12ff8:	9b03      	ldr	r3, [sp, #12]
   12ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12ffc:	07d9      	lsls	r1, r3, #31
   12ffe:	d407      	bmi.n	13010 <_vfiprintf_r+0xf38>
   13000:	9b03      	ldr	r3, [sp, #12]
   13002:	899b      	ldrh	r3, [r3, #12]
   13004:	059a      	lsls	r2, r3, #22
   13006:	d403      	bmi.n	13010 <_vfiprintf_r+0xf38>
   13008:	9b03      	ldr	r3, [sp, #12]
   1300a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   1300c:	f7fb f982 	bl	e314 <__retarget_lock_release_recursive>
   13010:	f04f 33ff 	mov.w	r3, #4294967295
   13014:	9305      	str	r3, [sp, #20]
   13016:	f7ff ba33 	b.w	12480 <_vfiprintf_r+0x3a8>
   1301a:	9a03      	ldr	r2, [sp, #12]
   1301c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13024:	8193      	strh	r3, [r2, #12]
   13026:	f7ff ba21 	b.w	1246c <_vfiprintf_r+0x394>
   1302a:	9c07      	ldr	r4, [sp, #28]
   1302c:	9704      	str	r7, [sp, #16]
   1302e:	e747      	b.n	12ec0 <_vfiprintf_r+0xde8>
   13030:	9b07      	ldr	r3, [sp, #28]
   13032:	f898 1001 	ldrb.w	r1, [r8, #1]
   13036:	f853 7b04 	ldr.w	r7, [r3], #4
   1303a:	9307      	str	r3, [sp, #28]
   1303c:	4690      	mov	r8, r2
   1303e:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   13042:	f7ff b8b5 	b.w	121b0 <_vfiprintf_r+0xd8>
   13046:	9a03      	ldr	r2, [sp, #12]
   13048:	8993      	ldrh	r3, [r2, #12]
   1304a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1304e:	8193      	strh	r3, [r2, #12]
   13050:	f7ff ba03 	b.w	1245a <_vfiprintf_r+0x382>
   13054:	cccccccd 	.word	0xcccccccd
   13058:	000159fc 	.word	0x000159fc

0001305c <__sbprintf>:
   1305c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1305e:	461f      	mov	r7, r3
   13060:	898b      	ldrh	r3, [r1, #12]
   13062:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   13066:	f023 0302 	bic.w	r3, r3, #2
   1306a:	f8ad 300c 	strh.w	r3, [sp, #12]
   1306e:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   13070:	9319      	str	r3, [sp, #100]	; 0x64
   13072:	89cb      	ldrh	r3, [r1, #14]
   13074:	f8ad 300e 	strh.w	r3, [sp, #14]
   13078:	69cb      	ldr	r3, [r1, #28]
   1307a:	9307      	str	r3, [sp, #28]
   1307c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   1307e:	9309      	str	r3, [sp, #36]	; 0x24
   13080:	ab1a      	add	r3, sp, #104	; 0x68
   13082:	9300      	str	r3, [sp, #0]
   13084:	9304      	str	r3, [sp, #16]
   13086:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1308a:	4615      	mov	r5, r2
   1308c:	4606      	mov	r6, r0
   1308e:	9302      	str	r3, [sp, #8]
   13090:	9305      	str	r3, [sp, #20]
   13092:	a816      	add	r0, sp, #88	; 0x58
   13094:	2300      	movs	r3, #0
   13096:	460c      	mov	r4, r1
   13098:	9306      	str	r3, [sp, #24]
   1309a:	f7fb f935 	bl	e308 <__retarget_lock_init_recursive>
   1309e:	462a      	mov	r2, r5
   130a0:	463b      	mov	r3, r7
   130a2:	4669      	mov	r1, sp
   130a4:	4630      	mov	r0, r6
   130a6:	f7ff f817 	bl	120d8 <_vfiprintf_r>
   130aa:	1e05      	subs	r5, r0, #0
   130ac:	db07      	blt.n	130be <__sbprintf+0x62>
   130ae:	4669      	mov	r1, sp
   130b0:	4630      	mov	r0, r6
   130b2:	f7fd fdb1 	bl	10c18 <_fflush_r>
   130b6:	2800      	cmp	r0, #0
   130b8:	bf18      	it	ne
   130ba:	f04f 35ff 	movne.w	r5, #4294967295
   130be:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   130c2:	065b      	lsls	r3, r3, #25
   130c4:	d503      	bpl.n	130ce <__sbprintf+0x72>
   130c6:	89a3      	ldrh	r3, [r4, #12]
   130c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   130cc:	81a3      	strh	r3, [r4, #12]
   130ce:	9816      	ldr	r0, [sp, #88]	; 0x58
   130d0:	f7fb f91c 	bl	e30c <__retarget_lock_close_recursive>
   130d4:	4628      	mov	r0, r5
   130d6:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   130da:	bdf0      	pop	{r4, r5, r6, r7, pc}

000130dc <__sfvwrite_r>:
   130dc:	6893      	ldr	r3, [r2, #8]
   130de:	2b00      	cmp	r3, #0
   130e0:	f000 8081 	beq.w	131e6 <__sfvwrite_r+0x10a>
   130e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130e8:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   130ec:	460c      	mov	r4, r1
   130ee:	0719      	lsls	r1, r3, #28
   130f0:	4680      	mov	r8, r0
   130f2:	b083      	sub	sp, #12
   130f4:	4617      	mov	r7, r2
   130f6:	b298      	uxth	r0, r3
   130f8:	d523      	bpl.n	13142 <__sfvwrite_r+0x66>
   130fa:	6923      	ldr	r3, [r4, #16]
   130fc:	b30b      	cbz	r3, 13142 <__sfvwrite_r+0x66>
   130fe:	f010 0302 	ands.w	r3, r0, #2
   13102:	683d      	ldr	r5, [r7, #0]
   13104:	d02b      	beq.n	1315e <__sfvwrite_r+0x82>
   13106:	f04f 0a00 	mov.w	sl, #0
   1310a:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 133c0 <__sfvwrite_r+0x2e4>
   1310e:	4656      	mov	r6, sl
   13110:	455e      	cmp	r6, fp
   13112:	4633      	mov	r3, r6
   13114:	4652      	mov	r2, sl
   13116:	bf28      	it	cs
   13118:	465b      	movcs	r3, fp
   1311a:	4640      	mov	r0, r8
   1311c:	2e00      	cmp	r6, #0
   1311e:	d04f      	beq.n	131c0 <__sfvwrite_r+0xe4>
   13120:	69e1      	ldr	r1, [r4, #28]
   13122:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   13126:	47e0      	blx	ip
   13128:	2800      	cmp	r0, #0
   1312a:	dd52      	ble.n	131d2 <__sfvwrite_r+0xf6>
   1312c:	68bb      	ldr	r3, [r7, #8]
   1312e:	1a1b      	subs	r3, r3, r0
   13130:	4482      	add	sl, r0
   13132:	1a36      	subs	r6, r6, r0
   13134:	60bb      	str	r3, [r7, #8]
   13136:	2b00      	cmp	r3, #0
   13138:	d1ea      	bne.n	13110 <__sfvwrite_r+0x34>
   1313a:	2000      	movs	r0, #0
   1313c:	b003      	add	sp, #12
   1313e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13142:	4621      	mov	r1, r4
   13144:	4640      	mov	r0, r8
   13146:	f000 f93d 	bl	133c4 <__swsetup_r>
   1314a:	2800      	cmp	r0, #0
   1314c:	f040 8134 	bne.w	133b8 <__sfvwrite_r+0x2dc>
   13150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13154:	683d      	ldr	r5, [r7, #0]
   13156:	b298      	uxth	r0, r3
   13158:	f010 0302 	ands.w	r3, r0, #2
   1315c:	d1d3      	bne.n	13106 <__sfvwrite_r+0x2a>
   1315e:	f010 0901 	ands.w	r9, r0, #1
   13162:	d142      	bne.n	131ea <__sfvwrite_r+0x10e>
   13164:	464e      	mov	r6, r9
   13166:	b33e      	cbz	r6, 131b8 <__sfvwrite_r+0xdc>
   13168:	0582      	lsls	r2, r0, #22
   1316a:	f8d4 b008 	ldr.w	fp, [r4, #8]
   1316e:	f140 8081 	bpl.w	13274 <__sfvwrite_r+0x198>
   13172:	45b3      	cmp	fp, r6
   13174:	465a      	mov	r2, fp
   13176:	f200 80b1 	bhi.w	132dc <__sfvwrite_r+0x200>
   1317a:	f410 6f90 	tst.w	r0, #1152	; 0x480
   1317e:	f040 80be 	bne.w	132fe <__sfvwrite_r+0x222>
   13182:	6820      	ldr	r0, [r4, #0]
   13184:	9201      	str	r2, [sp, #4]
   13186:	4649      	mov	r1, r9
   13188:	f7fa ff28 	bl	dfdc <memmove>
   1318c:	68a3      	ldr	r3, [r4, #8]
   1318e:	9a01      	ldr	r2, [sp, #4]
   13190:	eba3 010b 	sub.w	r1, r3, fp
   13194:	6823      	ldr	r3, [r4, #0]
   13196:	60a1      	str	r1, [r4, #8]
   13198:	4413      	add	r3, r2
   1319a:	46b2      	mov	sl, r6
   1319c:	6023      	str	r3, [r4, #0]
   1319e:	2600      	movs	r6, #0
   131a0:	68bb      	ldr	r3, [r7, #8]
   131a2:	eba3 030a 	sub.w	r3, r3, sl
   131a6:	44d1      	add	r9, sl
   131a8:	60bb      	str	r3, [r7, #8]
   131aa:	2b00      	cmp	r3, #0
   131ac:	d0c5      	beq.n	1313a <__sfvwrite_r+0x5e>
   131ae:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   131b2:	b280      	uxth	r0, r0
   131b4:	2e00      	cmp	r6, #0
   131b6:	d1d7      	bne.n	13168 <__sfvwrite_r+0x8c>
   131b8:	e9d5 9600 	ldrd	r9, r6, [r5]
   131bc:	3508      	adds	r5, #8
   131be:	e7d2      	b.n	13166 <__sfvwrite_r+0x8a>
   131c0:	e9d5 a600 	ldrd	sl, r6, [r5]
   131c4:	3508      	adds	r5, #8
   131c6:	e7a3      	b.n	13110 <__sfvwrite_r+0x34>
   131c8:	4621      	mov	r1, r4
   131ca:	4640      	mov	r0, r8
   131cc:	f7fd fd24 	bl	10c18 <_fflush_r>
   131d0:	b380      	cbz	r0, 13234 <__sfvwrite_r+0x158>
   131d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   131d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   131da:	f04f 30ff 	mov.w	r0, #4294967295
   131de:	81a3      	strh	r3, [r4, #12]
   131e0:	b003      	add	sp, #12
   131e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131e6:	2000      	movs	r0, #0
   131e8:	4770      	bx	lr
   131ea:	461e      	mov	r6, r3
   131ec:	46ba      	mov	sl, r7
   131ee:	4699      	mov	r9, r3
   131f0:	4618      	mov	r0, r3
   131f2:	461f      	mov	r7, r3
   131f4:	b366      	cbz	r6, 13250 <__sfvwrite_r+0x174>
   131f6:	b388      	cbz	r0, 1325c <__sfvwrite_r+0x180>
   131f8:	464a      	mov	r2, r9
   131fa:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
   131fe:	6820      	ldr	r0, [r4, #0]
   13200:	68a1      	ldr	r1, [r4, #8]
   13202:	42b2      	cmp	r2, r6
   13204:	bf28      	it	cs
   13206:	4632      	movcs	r2, r6
   13208:	4560      	cmp	r0, ip
   1320a:	d904      	bls.n	13216 <__sfvwrite_r+0x13a>
   1320c:	eb01 0b03 	add.w	fp, r1, r3
   13210:	455a      	cmp	r2, fp
   13212:	f300 80a7 	bgt.w	13364 <__sfvwrite_r+0x288>
   13216:	4293      	cmp	r3, r2
   13218:	dc64      	bgt.n	132e4 <__sfvwrite_r+0x208>
   1321a:	69e1      	ldr	r1, [r4, #28]
   1321c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   13220:	463a      	mov	r2, r7
   13222:	4640      	mov	r0, r8
   13224:	47e0      	blx	ip
   13226:	f1b0 0b00 	subs.w	fp, r0, #0
   1322a:	ddd2      	ble.n	131d2 <__sfvwrite_r+0xf6>
   1322c:	ebb9 090b 	subs.w	r9, r9, fp
   13230:	d0ca      	beq.n	131c8 <__sfvwrite_r+0xec>
   13232:	2001      	movs	r0, #1
   13234:	f8da 3008 	ldr.w	r3, [sl, #8]
   13238:	eba3 030b 	sub.w	r3, r3, fp
   1323c:	445f      	add	r7, fp
   1323e:	eba6 060b 	sub.w	r6, r6, fp
   13242:	f8ca 3008 	str.w	r3, [sl, #8]
   13246:	2b00      	cmp	r3, #0
   13248:	f43f af77 	beq.w	1313a <__sfvwrite_r+0x5e>
   1324c:	2e00      	cmp	r6, #0
   1324e:	d1d2      	bne.n	131f6 <__sfvwrite_r+0x11a>
   13250:	686e      	ldr	r6, [r5, #4]
   13252:	462b      	mov	r3, r5
   13254:	3508      	adds	r5, #8
   13256:	2e00      	cmp	r6, #0
   13258:	d0fa      	beq.n	13250 <__sfvwrite_r+0x174>
   1325a:	681f      	ldr	r7, [r3, #0]
   1325c:	4632      	mov	r2, r6
   1325e:	210a      	movs	r1, #10
   13260:	4638      	mov	r0, r7
   13262:	f7fd fd1d 	bl	10ca0 <memchr>
   13266:	2800      	cmp	r0, #0
   13268:	f000 809d 	beq.w	133a6 <__sfvwrite_r+0x2ca>
   1326c:	3001      	adds	r0, #1
   1326e:	eba0 0907 	sub.w	r9, r0, r7
   13272:	e7c1      	b.n	131f8 <__sfvwrite_r+0x11c>
   13274:	6820      	ldr	r0, [r4, #0]
   13276:	6923      	ldr	r3, [r4, #16]
   13278:	4298      	cmp	r0, r3
   1327a:	d817      	bhi.n	132ac <__sfvwrite_r+0x1d0>
   1327c:	6962      	ldr	r2, [r4, #20]
   1327e:	42b2      	cmp	r2, r6
   13280:	d814      	bhi.n	132ac <__sfvwrite_r+0x1d0>
   13282:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13286:	42b3      	cmp	r3, r6
   13288:	bf28      	it	cs
   1328a:	4633      	movcs	r3, r6
   1328c:	69e1      	ldr	r1, [r4, #28]
   1328e:	fb93 f3f2 	sdiv	r3, r3, r2
   13292:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   13296:	fb02 f303 	mul.w	r3, r2, r3
   1329a:	4640      	mov	r0, r8
   1329c:	464a      	mov	r2, r9
   1329e:	47e0      	blx	ip
   132a0:	f1b0 0a00 	subs.w	sl, r0, #0
   132a4:	dd95      	ble.n	131d2 <__sfvwrite_r+0xf6>
   132a6:	eba6 060a 	sub.w	r6, r6, sl
   132aa:	e779      	b.n	131a0 <__sfvwrite_r+0xc4>
   132ac:	45b3      	cmp	fp, r6
   132ae:	46da      	mov	sl, fp
   132b0:	bf28      	it	cs
   132b2:	46b2      	movcs	sl, r6
   132b4:	4652      	mov	r2, sl
   132b6:	4649      	mov	r1, r9
   132b8:	f7fa fe90 	bl	dfdc <memmove>
   132bc:	68a3      	ldr	r3, [r4, #8]
   132be:	6822      	ldr	r2, [r4, #0]
   132c0:	eba3 030a 	sub.w	r3, r3, sl
   132c4:	4452      	add	r2, sl
   132c6:	60a3      	str	r3, [r4, #8]
   132c8:	6022      	str	r2, [r4, #0]
   132ca:	2b00      	cmp	r3, #0
   132cc:	d1eb      	bne.n	132a6 <__sfvwrite_r+0x1ca>
   132ce:	4621      	mov	r1, r4
   132d0:	4640      	mov	r0, r8
   132d2:	f7fd fca1 	bl	10c18 <_fflush_r>
   132d6:	2800      	cmp	r0, #0
   132d8:	d0e5      	beq.n	132a6 <__sfvwrite_r+0x1ca>
   132da:	e77a      	b.n	131d2 <__sfvwrite_r+0xf6>
   132dc:	6820      	ldr	r0, [r4, #0]
   132de:	46b3      	mov	fp, r6
   132e0:	4632      	mov	r2, r6
   132e2:	e74f      	b.n	13184 <__sfvwrite_r+0xa8>
   132e4:	4639      	mov	r1, r7
   132e6:	9201      	str	r2, [sp, #4]
   132e8:	f7fa fe78 	bl	dfdc <memmove>
   132ec:	9a01      	ldr	r2, [sp, #4]
   132ee:	68a3      	ldr	r3, [r4, #8]
   132f0:	1a9b      	subs	r3, r3, r2
   132f2:	60a3      	str	r3, [r4, #8]
   132f4:	6823      	ldr	r3, [r4, #0]
   132f6:	4413      	add	r3, r2
   132f8:	6023      	str	r3, [r4, #0]
   132fa:	4693      	mov	fp, r2
   132fc:	e796      	b.n	1322c <__sfvwrite_r+0x150>
   132fe:	6823      	ldr	r3, [r4, #0]
   13300:	6921      	ldr	r1, [r4, #16]
   13302:	eba3 0b01 	sub.w	fp, r3, r1
   13306:	6963      	ldr	r3, [r4, #20]
   13308:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   1330c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   13310:	f10b 0301 	add.w	r3, fp, #1
   13314:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   13318:	4433      	add	r3, r6
   1331a:	4553      	cmp	r3, sl
   1331c:	4652      	mov	r2, sl
   1331e:	bf84      	itt	hi
   13320:	469a      	movhi	sl, r3
   13322:	4652      	movhi	r2, sl
   13324:	0543      	lsls	r3, r0, #21
   13326:	d52c      	bpl.n	13382 <__sfvwrite_r+0x2a6>
   13328:	4611      	mov	r1, r2
   1332a:	4640      	mov	r0, r8
   1332c:	f7fa f864 	bl	d3f8 <_malloc_r>
   13330:	2800      	cmp	r0, #0
   13332:	d03b      	beq.n	133ac <__sfvwrite_r+0x2d0>
   13334:	465a      	mov	r2, fp
   13336:	6921      	ldr	r1, [r4, #16]
   13338:	9001      	str	r0, [sp, #4]
   1333a:	f7f6 fcfb 	bl	9d34 <memcpy>
   1333e:	89a2      	ldrh	r2, [r4, #12]
   13340:	9b01      	ldr	r3, [sp, #4]
   13342:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   13346:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1334a:	81a2      	strh	r2, [r4, #12]
   1334c:	eb03 000b 	add.w	r0, r3, fp
   13350:	6123      	str	r3, [r4, #16]
   13352:	ebaa 030b 	sub.w	r3, sl, fp
   13356:	f8c4 a014 	str.w	sl, [r4, #20]
   1335a:	60a3      	str	r3, [r4, #8]
   1335c:	6020      	str	r0, [r4, #0]
   1335e:	46b3      	mov	fp, r6
   13360:	4632      	mov	r2, r6
   13362:	e70f      	b.n	13184 <__sfvwrite_r+0xa8>
   13364:	4639      	mov	r1, r7
   13366:	465a      	mov	r2, fp
   13368:	f7fa fe38 	bl	dfdc <memmove>
   1336c:	6823      	ldr	r3, [r4, #0]
   1336e:	445b      	add	r3, fp
   13370:	6023      	str	r3, [r4, #0]
   13372:	4621      	mov	r1, r4
   13374:	4640      	mov	r0, r8
   13376:	f7fd fc4f 	bl	10c18 <_fflush_r>
   1337a:	2800      	cmp	r0, #0
   1337c:	f43f af56 	beq.w	1322c <__sfvwrite_r+0x150>
   13380:	e727      	b.n	131d2 <__sfvwrite_r+0xf6>
   13382:	4640      	mov	r0, r8
   13384:	f7fa faf4 	bl	d970 <_realloc_r>
   13388:	4603      	mov	r3, r0
   1338a:	2800      	cmp	r0, #0
   1338c:	d1de      	bne.n	1334c <__sfvwrite_r+0x270>
   1338e:	6921      	ldr	r1, [r4, #16]
   13390:	4640      	mov	r0, r8
   13392:	f7fb f8a3 	bl	e4dc <_free_r>
   13396:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1339a:	220c      	movs	r2, #12
   1339c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   133a0:	f8c8 2000 	str.w	r2, [r8]
   133a4:	e717      	b.n	131d6 <__sfvwrite_r+0xfa>
   133a6:	1c72      	adds	r2, r6, #1
   133a8:	4691      	mov	r9, r2
   133aa:	e726      	b.n	131fa <__sfvwrite_r+0x11e>
   133ac:	220c      	movs	r2, #12
   133ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   133b2:	f8c8 2000 	str.w	r2, [r8]
   133b6:	e70e      	b.n	131d6 <__sfvwrite_r+0xfa>
   133b8:	f04f 30ff 	mov.w	r0, #4294967295
   133bc:	e6be      	b.n	1313c <__sfvwrite_r+0x60>
   133be:	bf00      	nop
   133c0:	7ffffc00 	.word	0x7ffffc00

000133c4 <__swsetup_r>:
   133c4:	b538      	push	{r3, r4, r5, lr}
   133c6:	4b31      	ldr	r3, [pc, #196]	; (1348c <__swsetup_r+0xc8>)
   133c8:	681b      	ldr	r3, [r3, #0]
   133ca:	4605      	mov	r5, r0
   133cc:	460c      	mov	r4, r1
   133ce:	b113      	cbz	r3, 133d6 <__swsetup_r+0x12>
   133d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   133d2:	2a00      	cmp	r2, #0
   133d4:	d04e      	beq.n	13474 <__swsetup_r+0xb0>
   133d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   133da:	0718      	lsls	r0, r3, #28
   133dc:	b29a      	uxth	r2, r3
   133de:	d51c      	bpl.n	1341a <__swsetup_r+0x56>
   133e0:	6921      	ldr	r1, [r4, #16]
   133e2:	b329      	cbz	r1, 13430 <__swsetup_r+0x6c>
   133e4:	f012 0001 	ands.w	r0, r2, #1
   133e8:	d007      	beq.n	133fa <__swsetup_r+0x36>
   133ea:	2000      	movs	r0, #0
   133ec:	60a0      	str	r0, [r4, #8]
   133ee:	6960      	ldr	r0, [r4, #20]
   133f0:	4240      	negs	r0, r0
   133f2:	61a0      	str	r0, [r4, #24]
   133f4:	b139      	cbz	r1, 13406 <__swsetup_r+0x42>
   133f6:	2000      	movs	r0, #0
   133f8:	bd38      	pop	{r3, r4, r5, pc}
   133fa:	0795      	lsls	r5, r2, #30
   133fc:	bf58      	it	pl
   133fe:	6960      	ldrpl	r0, [r4, #20]
   13400:	60a0      	str	r0, [r4, #8]
   13402:	2900      	cmp	r1, #0
   13404:	d1f7      	bne.n	133f6 <__swsetup_r+0x32>
   13406:	0612      	lsls	r2, r2, #24
   13408:	bf58      	it	pl
   1340a:	4608      	movpl	r0, r1
   1340c:	d5f4      	bpl.n	133f8 <__swsetup_r+0x34>
   1340e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13412:	81a3      	strh	r3, [r4, #12]
   13414:	f04f 30ff 	mov.w	r0, #4294967295
   13418:	bd38      	pop	{r3, r4, r5, pc}
   1341a:	06d1      	lsls	r1, r2, #27
   1341c:	d52e      	bpl.n	1347c <__swsetup_r+0xb8>
   1341e:	0752      	lsls	r2, r2, #29
   13420:	d414      	bmi.n	1344c <__swsetup_r+0x88>
   13422:	6921      	ldr	r1, [r4, #16]
   13424:	f043 0308 	orr.w	r3, r3, #8
   13428:	81a3      	strh	r3, [r4, #12]
   1342a:	b29a      	uxth	r2, r3
   1342c:	2900      	cmp	r1, #0
   1342e:	d1d9      	bne.n	133e4 <__swsetup_r+0x20>
   13430:	f402 7020 	and.w	r0, r2, #640	; 0x280
   13434:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   13438:	d0d4      	beq.n	133e4 <__swsetup_r+0x20>
   1343a:	4621      	mov	r1, r4
   1343c:	4628      	mov	r0, r5
   1343e:	f000 f93f 	bl	136c0 <__smakebuf_r>
   13442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13446:	6921      	ldr	r1, [r4, #16]
   13448:	b29a      	uxth	r2, r3
   1344a:	e7cb      	b.n	133e4 <__swsetup_r+0x20>
   1344c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   1344e:	b151      	cbz	r1, 13466 <__swsetup_r+0xa2>
   13450:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13454:	4291      	cmp	r1, r2
   13456:	d004      	beq.n	13462 <__swsetup_r+0x9e>
   13458:	4628      	mov	r0, r5
   1345a:	f7fb f83f 	bl	e4dc <_free_r>
   1345e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13462:	2200      	movs	r2, #0
   13464:	6322      	str	r2, [r4, #48]	; 0x30
   13466:	6921      	ldr	r1, [r4, #16]
   13468:	2200      	movs	r2, #0
   1346a:	e9c4 1200 	strd	r1, r2, [r4]
   1346e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   13472:	e7d7      	b.n	13424 <__swsetup_r+0x60>
   13474:	4618      	mov	r0, r3
   13476:	f7fa fcfd 	bl	de74 <__sinit>
   1347a:	e7ac      	b.n	133d6 <__swsetup_r+0x12>
   1347c:	2209      	movs	r2, #9
   1347e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13482:	602a      	str	r2, [r5, #0]
   13484:	f04f 30ff 	mov.w	r0, #4294967295
   13488:	81a3      	strh	r3, [r4, #12]
   1348a:	bd38      	pop	{r3, r4, r5, pc}
   1348c:	1fff9160 	.word	0x1fff9160

00013490 <__fputwc>:
   13490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13494:	b083      	sub	sp, #12
   13496:	4607      	mov	r7, r0
   13498:	4688      	mov	r8, r1
   1349a:	4614      	mov	r4, r2
   1349c:	f7fa fe9e 	bl	e1dc <__locale_mb_cur_max>
   134a0:	2801      	cmp	r0, #1
   134a2:	d103      	bne.n	134ac <__fputwc+0x1c>
   134a4:	f108 33ff 	add.w	r3, r8, #4294967295
   134a8:	2bfe      	cmp	r3, #254	; 0xfe
   134aa:	d937      	bls.n	1351c <__fputwc+0x8c>
   134ac:	f10d 0904 	add.w	r9, sp, #4
   134b0:	4642      	mov	r2, r8
   134b2:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   134b6:	4649      	mov	r1, r9
   134b8:	4638      	mov	r0, r7
   134ba:	f7fe fd09 	bl	11ed0 <_wcrtomb_r>
   134be:	1c42      	adds	r2, r0, #1
   134c0:	4606      	mov	r6, r0
   134c2:	d033      	beq.n	1352c <__fputwc+0x9c>
   134c4:	b328      	cbz	r0, 13512 <__fputwc+0x82>
   134c6:	f89d c004 	ldrb.w	ip, [sp, #4]
   134ca:	2500      	movs	r5, #0
   134cc:	e009      	b.n	134e2 <__fputwc+0x52>
   134ce:	6823      	ldr	r3, [r4, #0]
   134d0:	1c5a      	adds	r2, r3, #1
   134d2:	6022      	str	r2, [r4, #0]
   134d4:	f883 c000 	strb.w	ip, [r3]
   134d8:	3501      	adds	r5, #1
   134da:	42b5      	cmp	r5, r6
   134dc:	d219      	bcs.n	13512 <__fputwc+0x82>
   134de:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   134e2:	68a3      	ldr	r3, [r4, #8]
   134e4:	3b01      	subs	r3, #1
   134e6:	2b00      	cmp	r3, #0
   134e8:	60a3      	str	r3, [r4, #8]
   134ea:	daf0      	bge.n	134ce <__fputwc+0x3e>
   134ec:	f8d4 e018 	ldr.w	lr, [r4, #24]
   134f0:	4573      	cmp	r3, lr
   134f2:	4661      	mov	r1, ip
   134f4:	4622      	mov	r2, r4
   134f6:	4638      	mov	r0, r7
   134f8:	db02      	blt.n	13500 <__fputwc+0x70>
   134fa:	f1bc 0f0a 	cmp.w	ip, #10
   134fe:	d1e6      	bne.n	134ce <__fputwc+0x3e>
   13500:	f000 f94a 	bl	13798 <__swbuf_r>
   13504:	1c43      	adds	r3, r0, #1
   13506:	d1e7      	bne.n	134d8 <__fputwc+0x48>
   13508:	4606      	mov	r6, r0
   1350a:	4630      	mov	r0, r6
   1350c:	b003      	add	sp, #12
   1350e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13512:	4646      	mov	r6, r8
   13514:	4630      	mov	r0, r6
   13516:	b003      	add	sp, #12
   13518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1351c:	fa5f fc88 	uxtb.w	ip, r8
   13520:	f88d c004 	strb.w	ip, [sp, #4]
   13524:	4606      	mov	r6, r0
   13526:	f10d 0904 	add.w	r9, sp, #4
   1352a:	e7ce      	b.n	134ca <__fputwc+0x3a>
   1352c:	89a3      	ldrh	r3, [r4, #12]
   1352e:	4630      	mov	r0, r6
   13530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13534:	81a3      	strh	r3, [r4, #12]
   13536:	b003      	add	sp, #12
   13538:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001353c <_fputwc_r>:
   1353c:	b530      	push	{r4, r5, lr}
   1353e:	6e53      	ldr	r3, [r2, #100]	; 0x64
   13540:	f013 0f01 	tst.w	r3, #1
   13544:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   13548:	4614      	mov	r4, r2
   1354a:	b083      	sub	sp, #12
   1354c:	4605      	mov	r5, r0
   1354e:	b29a      	uxth	r2, r3
   13550:	d101      	bne.n	13556 <_fputwc_r+0x1a>
   13552:	0598      	lsls	r0, r3, #22
   13554:	d51c      	bpl.n	13590 <_fputwc_r+0x54>
   13556:	0490      	lsls	r0, r2, #18
   13558:	d406      	bmi.n	13568 <_fputwc_r+0x2c>
   1355a:	6e62      	ldr	r2, [r4, #100]	; 0x64
   1355c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   13560:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   13564:	81a3      	strh	r3, [r4, #12]
   13566:	6662      	str	r2, [r4, #100]	; 0x64
   13568:	4622      	mov	r2, r4
   1356a:	4628      	mov	r0, r5
   1356c:	f7ff ff90 	bl	13490 <__fputwc>
   13570:	6e63      	ldr	r3, [r4, #100]	; 0x64
   13572:	07da      	lsls	r2, r3, #31
   13574:	4605      	mov	r5, r0
   13576:	d402      	bmi.n	1357e <_fputwc_r+0x42>
   13578:	89a3      	ldrh	r3, [r4, #12]
   1357a:	059b      	lsls	r3, r3, #22
   1357c:	d502      	bpl.n	13584 <_fputwc_r+0x48>
   1357e:	4628      	mov	r0, r5
   13580:	b003      	add	sp, #12
   13582:	bd30      	pop	{r4, r5, pc}
   13584:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13586:	f7fa fec5 	bl	e314 <__retarget_lock_release_recursive>
   1358a:	4628      	mov	r0, r5
   1358c:	b003      	add	sp, #12
   1358e:	bd30      	pop	{r4, r5, pc}
   13590:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13592:	9101      	str	r1, [sp, #4]
   13594:	f7fa febc 	bl	e310 <__retarget_lock_acquire_recursive>
   13598:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1359c:	9901      	ldr	r1, [sp, #4]
   1359e:	b29a      	uxth	r2, r3
   135a0:	e7d9      	b.n	13556 <_fputwc_r+0x1a>
   135a2:	bf00      	nop

000135a4 <_wcsnrtombs_l>:
   135a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135a8:	b089      	sub	sp, #36	; 0x24
   135aa:	e9dd 8a13 	ldrd	r8, sl, [sp, #76]	; 0x4c
   135ae:	9f12      	ldr	r7, [sp, #72]	; 0x48
   135b0:	9101      	str	r1, [sp, #4]
   135b2:	4681      	mov	r9, r0
   135b4:	9203      	str	r2, [sp, #12]
   135b6:	461e      	mov	r6, r3
   135b8:	f1b8 0f00 	cmp.w	r8, #0
   135bc:	d055      	beq.n	1366a <_wcsnrtombs_l+0xc6>
   135be:	9b01      	ldr	r3, [sp, #4]
   135c0:	2b00      	cmp	r3, #0
   135c2:	d057      	beq.n	13674 <_wcsnrtombs_l+0xd0>
   135c4:	9b03      	ldr	r3, [sp, #12]
   135c6:	681d      	ldr	r5, [r3, #0]
   135c8:	2f00      	cmp	r7, #0
   135ca:	d063      	beq.n	13694 <_wcsnrtombs_l+0xf0>
   135cc:	1e74      	subs	r4, r6, #1
   135ce:	b32e      	cbz	r6, 1361c <_wcsnrtombs_l+0x78>
   135d0:	9b01      	ldr	r3, [sp, #4]
   135d2:	9302      	str	r3, [sp, #8]
   135d4:	3d04      	subs	r5, #4
   135d6:	2600      	movs	r6, #0
   135d8:	e00a      	b.n	135f0 <_wcsnrtombs_l+0x4c>
   135da:	9b01      	ldr	r3, [sp, #4]
   135dc:	bb13      	cbnz	r3, 13624 <_wcsnrtombs_l+0x80>
   135de:	682a      	ldr	r2, [r5, #0]
   135e0:	2a00      	cmp	r2, #0
   135e2:	d035      	beq.n	13650 <_wcsnrtombs_l+0xac>
   135e4:	45bc      	cmp	ip, r7
   135e6:	d257      	bcs.n	13698 <_wcsnrtombs_l+0xf4>
   135e8:	3c01      	subs	r4, #1
   135ea:	1c63      	adds	r3, r4, #1
   135ec:	4666      	mov	r6, ip
   135ee:	d015      	beq.n	1361c <_wcsnrtombs_l+0x78>
   135f0:	f8d8 3000 	ldr.w	r3, [r8]
   135f4:	f855 2f04 	ldr.w	r2, [r5, #4]!
   135f8:	9300      	str	r3, [sp, #0]
   135fa:	f8da c0e0 	ldr.w	ip, [sl, #224]	; 0xe0
   135fe:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13602:	4643      	mov	r3, r8
   13604:	a905      	add	r1, sp, #20
   13606:	4648      	mov	r0, r9
   13608:	47e0      	blx	ip
   1360a:	1c42      	adds	r2, r0, #1
   1360c:	d037      	beq.n	1367e <_wcsnrtombs_l+0xda>
   1360e:	eb00 0c06 	add.w	ip, r0, r6
   13612:	45bc      	cmp	ip, r7
   13614:	d9e1      	bls.n	135da <_wcsnrtombs_l+0x36>
   13616:	9b00      	ldr	r3, [sp, #0]
   13618:	e9c8 3b00 	strd	r3, fp, [r8]
   1361c:	4630      	mov	r0, r6
   1361e:	b009      	add	sp, #36	; 0x24
   13620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13624:	2800      	cmp	r0, #0
   13626:	dd0c      	ble.n	13642 <_wcsnrtombs_l+0x9e>
   13628:	9b02      	ldr	r3, [sp, #8]
   1362a:	4418      	add	r0, r3
   1362c:	1e5a      	subs	r2, r3, #1
   1362e:	a905      	add	r1, sp, #20
   13630:	f100 3eff 	add.w	lr, r0, #4294967295
   13634:	f811 3b01 	ldrb.w	r3, [r1], #1
   13638:	f802 3f01 	strb.w	r3, [r2, #1]!
   1363c:	4572      	cmp	r2, lr
   1363e:	d1f9      	bne.n	13634 <_wcsnrtombs_l+0x90>
   13640:	9002      	str	r0, [sp, #8]
   13642:	9b03      	ldr	r3, [sp, #12]
   13644:	681a      	ldr	r2, [r3, #0]
   13646:	3204      	adds	r2, #4
   13648:	601a      	str	r2, [r3, #0]
   1364a:	682a      	ldr	r2, [r5, #0]
   1364c:	2a00      	cmp	r2, #0
   1364e:	d1c9      	bne.n	135e4 <_wcsnrtombs_l+0x40>
   13650:	9b01      	ldr	r3, [sp, #4]
   13652:	b10b      	cbz	r3, 13658 <_wcsnrtombs_l+0xb4>
   13654:	9b03      	ldr	r3, [sp, #12]
   13656:	601a      	str	r2, [r3, #0]
   13658:	f10c 36ff 	add.w	r6, ip, #4294967295
   1365c:	2200      	movs	r2, #0
   1365e:	4630      	mov	r0, r6
   13660:	f8c8 2000 	str.w	r2, [r8]
   13664:	b009      	add	sp, #36	; 0x24
   13666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1366a:	9b01      	ldr	r3, [sp, #4]
   1366c:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   13670:	2b00      	cmp	r3, #0
   13672:	d1a7      	bne.n	135c4 <_wcsnrtombs_l+0x20>
   13674:	9b03      	ldr	r3, [sp, #12]
   13676:	f04f 37ff 	mov.w	r7, #4294967295
   1367a:	681d      	ldr	r5, [r3, #0]
   1367c:	e7a6      	b.n	135cc <_wcsnrtombs_l+0x28>
   1367e:	4606      	mov	r6, r0
   13680:	218a      	movs	r1, #138	; 0x8a
   13682:	2200      	movs	r2, #0
   13684:	4630      	mov	r0, r6
   13686:	f8c9 1000 	str.w	r1, [r9]
   1368a:	f8c8 2000 	str.w	r2, [r8]
   1368e:	b009      	add	sp, #36	; 0x24
   13690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13694:	463e      	mov	r6, r7
   13696:	e7c1      	b.n	1361c <_wcsnrtombs_l+0x78>
   13698:	4666      	mov	r6, ip
   1369a:	e7bf      	b.n	1361c <_wcsnrtombs_l+0x78>

0001369c <_wcsnrtombs_r>:
   1369c:	b510      	push	{r4, lr}
   1369e:	b084      	sub	sp, #16
   136a0:	4c05      	ldr	r4, [pc, #20]	; (136b8 <_wcsnrtombs_r+0x1c>)
   136a2:	9806      	ldr	r0, [sp, #24]
   136a4:	9000      	str	r0, [sp, #0]
   136a6:	9807      	ldr	r0, [sp, #28]
   136a8:	9001      	str	r0, [sp, #4]
   136aa:	4804      	ldr	r0, [pc, #16]	; (136bc <_wcsnrtombs_r+0x20>)
   136ac:	6800      	ldr	r0, [r0, #0]
   136ae:	9402      	str	r4, [sp, #8]
   136b0:	f7ff ff78 	bl	135a4 <_wcsnrtombs_l>
   136b4:	b004      	add	sp, #16
   136b6:	bd10      	pop	{r4, pc}
   136b8:	1fff8ed4 	.word	0x1fff8ed4
   136bc:	1fff9160 	.word	0x1fff9160

000136c0 <__smakebuf_r>:
   136c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   136c4:	898b      	ldrh	r3, [r1, #12]
   136c6:	460c      	mov	r4, r1
   136c8:	0799      	lsls	r1, r3, #30
   136ca:	b096      	sub	sp, #88	; 0x58
   136cc:	d508      	bpl.n	136e0 <__smakebuf_r+0x20>
   136ce:	f104 0343 	add.w	r3, r4, #67	; 0x43
   136d2:	2201      	movs	r2, #1
   136d4:	e9c4 3204 	strd	r3, r2, [r4, #16]
   136d8:	6023      	str	r3, [r4, #0]
   136da:	b016      	add	sp, #88	; 0x58
   136dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   136e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   136e4:	2900      	cmp	r1, #0
   136e6:	4606      	mov	r6, r0
   136e8:	db25      	blt.n	13736 <__smakebuf_r+0x76>
   136ea:	466a      	mov	r2, sp
   136ec:	f000 f8ac 	bl	13848 <_fstat_r>
   136f0:	2800      	cmp	r0, #0
   136f2:	db1f      	blt.n	13734 <__smakebuf_r+0x74>
   136f4:	9d01      	ldr	r5, [sp, #4]
   136f6:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   136fa:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   136fe:	fab5 f585 	clz	r5, r5
   13702:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13706:	096d      	lsrs	r5, r5, #5
   13708:	f44f 6700 	mov.w	r7, #2048	; 0x800
   1370c:	4641      	mov	r1, r8
   1370e:	4630      	mov	r0, r6
   13710:	f7f9 fe72 	bl	d3f8 <_malloc_r>
   13714:	b1e0      	cbz	r0, 13750 <__smakebuf_r+0x90>
   13716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1371a:	f8c4 8014 	str.w	r8, [r4, #20]
   1371e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13722:	6020      	str	r0, [r4, #0]
   13724:	6120      	str	r0, [r4, #16]
   13726:	81a3      	strh	r3, [r4, #12]
   13728:	bb35      	cbnz	r5, 13778 <__smakebuf_r+0xb8>
   1372a:	433b      	orrs	r3, r7
   1372c:	81a3      	strh	r3, [r4, #12]
   1372e:	b016      	add	sp, #88	; 0x58
   13730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13734:	89a3      	ldrh	r3, [r4, #12]
   13736:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   1373a:	d019      	beq.n	13770 <__smakebuf_r+0xb0>
   1373c:	f04f 0840 	mov.w	r8, #64	; 0x40
   13740:	2500      	movs	r5, #0
   13742:	4641      	mov	r1, r8
   13744:	4630      	mov	r0, r6
   13746:	462f      	mov	r7, r5
   13748:	f7f9 fe56 	bl	d3f8 <_malloc_r>
   1374c:	2800      	cmp	r0, #0
   1374e:	d1e2      	bne.n	13716 <__smakebuf_r+0x56>
   13750:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13754:	059a      	lsls	r2, r3, #22
   13756:	d4c0      	bmi.n	136da <__smakebuf_r+0x1a>
   13758:	f023 0303 	bic.w	r3, r3, #3
   1375c:	f104 0243 	add.w	r2, r4, #67	; 0x43
   13760:	f043 0302 	orr.w	r3, r3, #2
   13764:	2101      	movs	r1, #1
   13766:	e9c4 2104 	strd	r2, r1, [r4, #16]
   1376a:	81a3      	strh	r3, [r4, #12]
   1376c:	6022      	str	r2, [r4, #0]
   1376e:	e7b4      	b.n	136da <__smakebuf_r+0x1a>
   13770:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13774:	462f      	mov	r7, r5
   13776:	e7c9      	b.n	1370c <__smakebuf_r+0x4c>
   13778:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   1377c:	4630      	mov	r0, r6
   1377e:	f000 f879 	bl	13874 <_isatty_r>
   13782:	b910      	cbnz	r0, 1378a <__smakebuf_r+0xca>
   13784:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13788:	e7cf      	b.n	1372a <__smakebuf_r+0x6a>
   1378a:	89a3      	ldrh	r3, [r4, #12]
   1378c:	f023 0303 	bic.w	r3, r3, #3
   13790:	f043 0301 	orr.w	r3, r3, #1
   13794:	b21b      	sxth	r3, r3
   13796:	e7c8      	b.n	1372a <__smakebuf_r+0x6a>

00013798 <__swbuf_r>:
   13798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1379a:	460d      	mov	r5, r1
   1379c:	4614      	mov	r4, r2
   1379e:	4606      	mov	r6, r0
   137a0:	b110      	cbz	r0, 137a8 <__swbuf_r+0x10>
   137a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   137a4:	2b00      	cmp	r3, #0
   137a6:	d04c      	beq.n	13842 <__swbuf_r+0xaa>
   137a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   137ac:	69a3      	ldr	r3, [r4, #24]
   137ae:	60a3      	str	r3, [r4, #8]
   137b0:	0717      	lsls	r7, r2, #28
   137b2:	b290      	uxth	r0, r2
   137b4:	d51b      	bpl.n	137ee <__swbuf_r+0x56>
   137b6:	6923      	ldr	r3, [r4, #16]
   137b8:	b1cb      	cbz	r3, 137ee <__swbuf_r+0x56>
   137ba:	b2ed      	uxtb	r5, r5
   137bc:	0481      	lsls	r1, r0, #18
   137be:	462f      	mov	r7, r5
   137c0:	d522      	bpl.n	13808 <__swbuf_r+0x70>
   137c2:	6822      	ldr	r2, [r4, #0]
   137c4:	6961      	ldr	r1, [r4, #20]
   137c6:	1ad3      	subs	r3, r2, r3
   137c8:	4299      	cmp	r1, r3
   137ca:	dd29      	ble.n	13820 <__swbuf_r+0x88>
   137cc:	3301      	adds	r3, #1
   137ce:	68a1      	ldr	r1, [r4, #8]
   137d0:	3901      	subs	r1, #1
   137d2:	60a1      	str	r1, [r4, #8]
   137d4:	1c51      	adds	r1, r2, #1
   137d6:	6021      	str	r1, [r4, #0]
   137d8:	7015      	strb	r5, [r2, #0]
   137da:	6962      	ldr	r2, [r4, #20]
   137dc:	429a      	cmp	r2, r3
   137de:	d027      	beq.n	13830 <__swbuf_r+0x98>
   137e0:	89a3      	ldrh	r3, [r4, #12]
   137e2:	07db      	lsls	r3, r3, #31
   137e4:	d501      	bpl.n	137ea <__swbuf_r+0x52>
   137e6:	2d0a      	cmp	r5, #10
   137e8:	d022      	beq.n	13830 <__swbuf_r+0x98>
   137ea:	4638      	mov	r0, r7
   137ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   137ee:	4621      	mov	r1, r4
   137f0:	4630      	mov	r0, r6
   137f2:	f7ff fde7 	bl	133c4 <__swsetup_r>
   137f6:	bb08      	cbnz	r0, 1383c <__swbuf_r+0xa4>
   137f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   137fc:	6923      	ldr	r3, [r4, #16]
   137fe:	b290      	uxth	r0, r2
   13800:	b2ed      	uxtb	r5, r5
   13802:	0481      	lsls	r1, r0, #18
   13804:	462f      	mov	r7, r5
   13806:	d4dc      	bmi.n	137c2 <__swbuf_r+0x2a>
   13808:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1380c:	81a2      	strh	r2, [r4, #12]
   1380e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13810:	6961      	ldr	r1, [r4, #20]
   13812:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   13816:	6662      	str	r2, [r4, #100]	; 0x64
   13818:	6822      	ldr	r2, [r4, #0]
   1381a:	1ad3      	subs	r3, r2, r3
   1381c:	4299      	cmp	r1, r3
   1381e:	dcd5      	bgt.n	137cc <__swbuf_r+0x34>
   13820:	4621      	mov	r1, r4
   13822:	4630      	mov	r0, r6
   13824:	f7fd f9f8 	bl	10c18 <_fflush_r>
   13828:	b940      	cbnz	r0, 1383c <__swbuf_r+0xa4>
   1382a:	6822      	ldr	r2, [r4, #0]
   1382c:	2301      	movs	r3, #1
   1382e:	e7ce      	b.n	137ce <__swbuf_r+0x36>
   13830:	4621      	mov	r1, r4
   13832:	4630      	mov	r0, r6
   13834:	f7fd f9f0 	bl	10c18 <_fflush_r>
   13838:	2800      	cmp	r0, #0
   1383a:	d0d6      	beq.n	137ea <__swbuf_r+0x52>
   1383c:	f04f 37ff 	mov.w	r7, #4294967295
   13840:	e7d3      	b.n	137ea <__swbuf_r+0x52>
   13842:	f7fa fb17 	bl	de74 <__sinit>
   13846:	e7af      	b.n	137a8 <__swbuf_r+0x10>

00013848 <_fstat_r>:
   13848:	b570      	push	{r4, r5, r6, lr}
   1384a:	460c      	mov	r4, r1
   1384c:	4d08      	ldr	r5, [pc, #32]	; (13870 <_fstat_r+0x28>)
   1384e:	4603      	mov	r3, r0
   13850:	2600      	movs	r6, #0
   13852:	4620      	mov	r0, r4
   13854:	4611      	mov	r1, r2
   13856:	461c      	mov	r4, r3
   13858:	602e      	str	r6, [r5, #0]
   1385a:	f7f6 fb89 	bl	9f70 <_fstat>
   1385e:	1c43      	adds	r3, r0, #1
   13860:	d000      	beq.n	13864 <_fstat_r+0x1c>
   13862:	bd70      	pop	{r4, r5, r6, pc}
   13864:	682b      	ldr	r3, [r5, #0]
   13866:	2b00      	cmp	r3, #0
   13868:	d0fb      	beq.n	13862 <_fstat_r+0x1a>
   1386a:	6023      	str	r3, [r4, #0]
   1386c:	bd70      	pop	{r4, r5, r6, pc}
   1386e:	bf00      	nop
   13870:	1fffd768 	.word	0x1fffd768

00013874 <_isatty_r>:
   13874:	b538      	push	{r3, r4, r5, lr}
   13876:	4d07      	ldr	r5, [pc, #28]	; (13894 <_isatty_r+0x20>)
   13878:	2200      	movs	r2, #0
   1387a:	4604      	mov	r4, r0
   1387c:	4608      	mov	r0, r1
   1387e:	602a      	str	r2, [r5, #0]
   13880:	f7f6 fb7c 	bl	9f7c <_isatty>
   13884:	1c43      	adds	r3, r0, #1
   13886:	d000      	beq.n	1388a <_isatty_r+0x16>
   13888:	bd38      	pop	{r3, r4, r5, pc}
   1388a:	682b      	ldr	r3, [r5, #0]
   1388c:	2b00      	cmp	r3, #0
   1388e:	d0fb      	beq.n	13888 <_isatty_r+0x14>
   13890:	6023      	str	r3, [r4, #0]
   13892:	bd38      	pop	{r3, r4, r5, pc}
   13894:	1fffd768 	.word	0x1fffd768

00013898 <__aeabi_dmul>:
   13898:	b570      	push	{r4, r5, r6, lr}
   1389a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1389e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   138a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   138a6:	bf1d      	ittte	ne
   138a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   138ac:	ea94 0f0c 	teqne	r4, ip
   138b0:	ea95 0f0c 	teqne	r5, ip
   138b4:	f000 f8de 	bleq	13a74 <__aeabi_dmul+0x1dc>
   138b8:	442c      	add	r4, r5
   138ba:	ea81 0603 	eor.w	r6, r1, r3
   138be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   138c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   138c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   138ca:	bf18      	it	ne
   138cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   138d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   138d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   138d8:	d038      	beq.n	1394c <__aeabi_dmul+0xb4>
   138da:	fba0 ce02 	umull	ip, lr, r0, r2
   138de:	f04f 0500 	mov.w	r5, #0
   138e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   138e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   138ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   138ee:	f04f 0600 	mov.w	r6, #0
   138f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   138f6:	f09c 0f00 	teq	ip, #0
   138fa:	bf18      	it	ne
   138fc:	f04e 0e01 	orrne.w	lr, lr, #1
   13900:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   13904:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   13908:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1390c:	d204      	bcs.n	13918 <__aeabi_dmul+0x80>
   1390e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   13912:	416d      	adcs	r5, r5
   13914:	eb46 0606 	adc.w	r6, r6, r6
   13918:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1391c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   13920:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   13924:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   13928:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   1392c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   13930:	bf88      	it	hi
   13932:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   13936:	d81e      	bhi.n	13976 <__aeabi_dmul+0xde>
   13938:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   1393c:	bf08      	it	eq
   1393e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   13942:	f150 0000 	adcs.w	r0, r0, #0
   13946:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   1394a:	bd70      	pop	{r4, r5, r6, pc}
   1394c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   13950:	ea46 0101 	orr.w	r1, r6, r1
   13954:	ea40 0002 	orr.w	r0, r0, r2
   13958:	ea81 0103 	eor.w	r1, r1, r3
   1395c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   13960:	bfc2      	ittt	gt
   13962:	ebd4 050c 	rsbsgt	r5, r4, ip
   13966:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   1396a:	bd70      	popgt	{r4, r5, r6, pc}
   1396c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13970:	f04f 0e00 	mov.w	lr, #0
   13974:	3c01      	subs	r4, #1
   13976:	f300 80ab 	bgt.w	13ad0 <__aeabi_dmul+0x238>
   1397a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   1397e:	bfde      	ittt	le
   13980:	2000      	movle	r0, #0
   13982:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   13986:	bd70      	pople	{r4, r5, r6, pc}
   13988:	f1c4 0400 	rsb	r4, r4, #0
   1398c:	3c20      	subs	r4, #32
   1398e:	da35      	bge.n	139fc <__aeabi_dmul+0x164>
   13990:	340c      	adds	r4, #12
   13992:	dc1b      	bgt.n	139cc <__aeabi_dmul+0x134>
   13994:	f104 0414 	add.w	r4, r4, #20
   13998:	f1c4 0520 	rsb	r5, r4, #32
   1399c:	fa00 f305 	lsl.w	r3, r0, r5
   139a0:	fa20 f004 	lsr.w	r0, r0, r4
   139a4:	fa01 f205 	lsl.w	r2, r1, r5
   139a8:	ea40 0002 	orr.w	r0, r0, r2
   139ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   139b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   139b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   139b8:	fa21 f604 	lsr.w	r6, r1, r4
   139bc:	eb42 0106 	adc.w	r1, r2, r6
   139c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   139c4:	bf08      	it	eq
   139c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   139ca:	bd70      	pop	{r4, r5, r6, pc}
   139cc:	f1c4 040c 	rsb	r4, r4, #12
   139d0:	f1c4 0520 	rsb	r5, r4, #32
   139d4:	fa00 f304 	lsl.w	r3, r0, r4
   139d8:	fa20 f005 	lsr.w	r0, r0, r5
   139dc:	fa01 f204 	lsl.w	r2, r1, r4
   139e0:	ea40 0002 	orr.w	r0, r0, r2
   139e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   139e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   139ec:	f141 0100 	adc.w	r1, r1, #0
   139f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   139f4:	bf08      	it	eq
   139f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   139fa:	bd70      	pop	{r4, r5, r6, pc}
   139fc:	f1c4 0520 	rsb	r5, r4, #32
   13a00:	fa00 f205 	lsl.w	r2, r0, r5
   13a04:	ea4e 0e02 	orr.w	lr, lr, r2
   13a08:	fa20 f304 	lsr.w	r3, r0, r4
   13a0c:	fa01 f205 	lsl.w	r2, r1, r5
   13a10:	ea43 0302 	orr.w	r3, r3, r2
   13a14:	fa21 f004 	lsr.w	r0, r1, r4
   13a18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13a1c:	fa21 f204 	lsr.w	r2, r1, r4
   13a20:	ea20 0002 	bic.w	r0, r0, r2
   13a24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   13a28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13a2c:	bf08      	it	eq
   13a2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   13a32:	bd70      	pop	{r4, r5, r6, pc}
   13a34:	f094 0f00 	teq	r4, #0
   13a38:	d10f      	bne.n	13a5a <__aeabi_dmul+0x1c2>
   13a3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   13a3e:	0040      	lsls	r0, r0, #1
   13a40:	eb41 0101 	adc.w	r1, r1, r1
   13a44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13a48:	bf08      	it	eq
   13a4a:	3c01      	subeq	r4, #1
   13a4c:	d0f7      	beq.n	13a3e <__aeabi_dmul+0x1a6>
   13a4e:	ea41 0106 	orr.w	r1, r1, r6
   13a52:	f095 0f00 	teq	r5, #0
   13a56:	bf18      	it	ne
   13a58:	4770      	bxne	lr
   13a5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   13a5e:	0052      	lsls	r2, r2, #1
   13a60:	eb43 0303 	adc.w	r3, r3, r3
   13a64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   13a68:	bf08      	it	eq
   13a6a:	3d01      	subeq	r5, #1
   13a6c:	d0f7      	beq.n	13a5e <__aeabi_dmul+0x1c6>
   13a6e:	ea43 0306 	orr.w	r3, r3, r6
   13a72:	4770      	bx	lr
   13a74:	ea94 0f0c 	teq	r4, ip
   13a78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   13a7c:	bf18      	it	ne
   13a7e:	ea95 0f0c 	teqne	r5, ip
   13a82:	d00c      	beq.n	13a9e <__aeabi_dmul+0x206>
   13a84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13a88:	bf18      	it	ne
   13a8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13a8e:	d1d1      	bne.n	13a34 <__aeabi_dmul+0x19c>
   13a90:	ea81 0103 	eor.w	r1, r1, r3
   13a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13a98:	f04f 0000 	mov.w	r0, #0
   13a9c:	bd70      	pop	{r4, r5, r6, pc}
   13a9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13aa2:	bf06      	itte	eq
   13aa4:	4610      	moveq	r0, r2
   13aa6:	4619      	moveq	r1, r3
   13aa8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13aac:	d019      	beq.n	13ae2 <__aeabi_dmul+0x24a>
   13aae:	ea94 0f0c 	teq	r4, ip
   13ab2:	d102      	bne.n	13aba <__aeabi_dmul+0x222>
   13ab4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   13ab8:	d113      	bne.n	13ae2 <__aeabi_dmul+0x24a>
   13aba:	ea95 0f0c 	teq	r5, ip
   13abe:	d105      	bne.n	13acc <__aeabi_dmul+0x234>
   13ac0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   13ac4:	bf1c      	itt	ne
   13ac6:	4610      	movne	r0, r2
   13ac8:	4619      	movne	r1, r3
   13aca:	d10a      	bne.n	13ae2 <__aeabi_dmul+0x24a>
   13acc:	ea81 0103 	eor.w	r1, r1, r3
   13ad0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13ad4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13ad8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   13adc:	f04f 0000 	mov.w	r0, #0
   13ae0:	bd70      	pop	{r4, r5, r6, pc}
   13ae2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13ae6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   13aea:	bd70      	pop	{r4, r5, r6, pc}

00013aec <__aeabi_ddiv>:
   13aec:	b570      	push	{r4, r5, r6, lr}
   13aee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13af2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   13af6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   13afa:	bf1d      	ittte	ne
   13afc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   13b00:	ea94 0f0c 	teqne	r4, ip
   13b04:	ea95 0f0c 	teqne	r5, ip
   13b08:	f000 f8a7 	bleq	13c5a <__aeabi_ddiv+0x16e>
   13b0c:	eba4 0405 	sub.w	r4, r4, r5
   13b10:	ea81 0e03 	eor.w	lr, r1, r3
   13b14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13b18:	ea4f 3101 	mov.w	r1, r1, lsl #12
   13b1c:	f000 8088 	beq.w	13c30 <__aeabi_ddiv+0x144>
   13b20:	ea4f 3303 	mov.w	r3, r3, lsl #12
   13b24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   13b28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   13b2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   13b30:	ea4f 2202 	mov.w	r2, r2, lsl #8
   13b34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   13b38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   13b3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   13b40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   13b44:	429d      	cmp	r5, r3
   13b46:	bf08      	it	eq
   13b48:	4296      	cmpeq	r6, r2
   13b4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   13b4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   13b52:	d202      	bcs.n	13b5a <__aeabi_ddiv+0x6e>
   13b54:	085b      	lsrs	r3, r3, #1
   13b56:	ea4f 0232 	mov.w	r2, r2, rrx
   13b5a:	1ab6      	subs	r6, r6, r2
   13b5c:	eb65 0503 	sbc.w	r5, r5, r3
   13b60:	085b      	lsrs	r3, r3, #1
   13b62:	ea4f 0232 	mov.w	r2, r2, rrx
   13b66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   13b6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   13b6e:	ebb6 0e02 	subs.w	lr, r6, r2
   13b72:	eb75 0e03 	sbcs.w	lr, r5, r3
   13b76:	bf22      	ittt	cs
   13b78:	1ab6      	subcs	r6, r6, r2
   13b7a:	4675      	movcs	r5, lr
   13b7c:	ea40 000c 	orrcs.w	r0, r0, ip
   13b80:	085b      	lsrs	r3, r3, #1
   13b82:	ea4f 0232 	mov.w	r2, r2, rrx
   13b86:	ebb6 0e02 	subs.w	lr, r6, r2
   13b8a:	eb75 0e03 	sbcs.w	lr, r5, r3
   13b8e:	bf22      	ittt	cs
   13b90:	1ab6      	subcs	r6, r6, r2
   13b92:	4675      	movcs	r5, lr
   13b94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   13b98:	085b      	lsrs	r3, r3, #1
   13b9a:	ea4f 0232 	mov.w	r2, r2, rrx
   13b9e:	ebb6 0e02 	subs.w	lr, r6, r2
   13ba2:	eb75 0e03 	sbcs.w	lr, r5, r3
   13ba6:	bf22      	ittt	cs
   13ba8:	1ab6      	subcs	r6, r6, r2
   13baa:	4675      	movcs	r5, lr
   13bac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   13bb0:	085b      	lsrs	r3, r3, #1
   13bb2:	ea4f 0232 	mov.w	r2, r2, rrx
   13bb6:	ebb6 0e02 	subs.w	lr, r6, r2
   13bba:	eb75 0e03 	sbcs.w	lr, r5, r3
   13bbe:	bf22      	ittt	cs
   13bc0:	1ab6      	subcs	r6, r6, r2
   13bc2:	4675      	movcs	r5, lr
   13bc4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   13bc8:	ea55 0e06 	orrs.w	lr, r5, r6
   13bcc:	d018      	beq.n	13c00 <__aeabi_ddiv+0x114>
   13bce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   13bd2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   13bd6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   13bda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   13bde:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   13be2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   13be6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   13bea:	d1c0      	bne.n	13b6e <__aeabi_ddiv+0x82>
   13bec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13bf0:	d10b      	bne.n	13c0a <__aeabi_ddiv+0x11e>
   13bf2:	ea41 0100 	orr.w	r1, r1, r0
   13bf6:	f04f 0000 	mov.w	r0, #0
   13bfa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   13bfe:	e7b6      	b.n	13b6e <__aeabi_ddiv+0x82>
   13c00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13c04:	bf04      	itt	eq
   13c06:	4301      	orreq	r1, r0
   13c08:	2000      	moveq	r0, #0
   13c0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   13c0e:	bf88      	it	hi
   13c10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   13c14:	f63f aeaf 	bhi.w	13976 <__aeabi_dmul+0xde>
   13c18:	ebb5 0c03 	subs.w	ip, r5, r3
   13c1c:	bf04      	itt	eq
   13c1e:	ebb6 0c02 	subseq.w	ip, r6, r2
   13c22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   13c26:	f150 0000 	adcs.w	r0, r0, #0
   13c2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   13c2e:	bd70      	pop	{r4, r5, r6, pc}
   13c30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   13c34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   13c38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   13c3c:	bfc2      	ittt	gt
   13c3e:	ebd4 050c 	rsbsgt	r5, r4, ip
   13c42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   13c46:	bd70      	popgt	{r4, r5, r6, pc}
   13c48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13c4c:	f04f 0e00 	mov.w	lr, #0
   13c50:	3c01      	subs	r4, #1
   13c52:	e690      	b.n	13976 <__aeabi_dmul+0xde>
   13c54:	ea45 0e06 	orr.w	lr, r5, r6
   13c58:	e68d      	b.n	13976 <__aeabi_dmul+0xde>
   13c5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   13c5e:	ea94 0f0c 	teq	r4, ip
   13c62:	bf08      	it	eq
   13c64:	ea95 0f0c 	teqeq	r5, ip
   13c68:	f43f af3b 	beq.w	13ae2 <__aeabi_dmul+0x24a>
   13c6c:	ea94 0f0c 	teq	r4, ip
   13c70:	d10a      	bne.n	13c88 <__aeabi_ddiv+0x19c>
   13c72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   13c76:	f47f af34 	bne.w	13ae2 <__aeabi_dmul+0x24a>
   13c7a:	ea95 0f0c 	teq	r5, ip
   13c7e:	f47f af25 	bne.w	13acc <__aeabi_dmul+0x234>
   13c82:	4610      	mov	r0, r2
   13c84:	4619      	mov	r1, r3
   13c86:	e72c      	b.n	13ae2 <__aeabi_dmul+0x24a>
   13c88:	ea95 0f0c 	teq	r5, ip
   13c8c:	d106      	bne.n	13c9c <__aeabi_ddiv+0x1b0>
   13c8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13c92:	f43f aefd 	beq.w	13a90 <__aeabi_dmul+0x1f8>
   13c96:	4610      	mov	r0, r2
   13c98:	4619      	mov	r1, r3
   13c9a:	e722      	b.n	13ae2 <__aeabi_dmul+0x24a>
   13c9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13ca0:	bf18      	it	ne
   13ca2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13ca6:	f47f aec5 	bne.w	13a34 <__aeabi_dmul+0x19c>
   13caa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   13cae:	f47f af0d 	bne.w	13acc <__aeabi_dmul+0x234>
   13cb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   13cb6:	f47f aeeb 	bne.w	13a90 <__aeabi_dmul+0x1f8>
   13cba:	e712      	b.n	13ae2 <__aeabi_dmul+0x24a>

00013cbc <__aeabi_d2iz>:
   13cbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13cc0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   13cc4:	d215      	bcs.n	13cf2 <__aeabi_d2iz+0x36>
   13cc6:	d511      	bpl.n	13cec <__aeabi_d2iz+0x30>
   13cc8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   13ccc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   13cd0:	d912      	bls.n	13cf8 <__aeabi_d2iz+0x3c>
   13cd2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13cd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13cda:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   13cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13ce2:	fa23 f002 	lsr.w	r0, r3, r2
   13ce6:	bf18      	it	ne
   13ce8:	4240      	negne	r0, r0
   13cea:	4770      	bx	lr
   13cec:	f04f 0000 	mov.w	r0, #0
   13cf0:	4770      	bx	lr
   13cf2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   13cf6:	d105      	bne.n	13d04 <__aeabi_d2iz+0x48>
   13cf8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   13cfc:	bf08      	it	eq
   13cfe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   13d02:	4770      	bx	lr
   13d04:	f04f 0000 	mov.w	r0, #0
   13d08:	4770      	bx	lr
   13d0a:	bf00      	nop
   13d0c:	6f4d      	ldr	r5, [r1, #116]	; 0x74
   13d0e:	7564      	strb	r4, [r4, #21]
   13d10:	656c      	str	r4, [r5, #84]	; 0x54
   13d12:	0000      	movs	r0, r0
   13d14:	6f43      	ldr	r3, [r0, #116]	; 0x74
   13d16:	6e75      	ldr	r5, [r6, #100]	; 0x64
   13d18:	6574      	str	r4, [r6, #84]	; 0x54
   13d1a:	2072      	movs	r0, #114	; 0x72
   13d1c:	6954      	ldr	r4, [r2, #20]
   13d1e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   13d20:	4320      	orrs	r0, r4
   13d22:	6e61      	ldr	r1, [r4, #100]	; 0x64
   13d24:	4520      	cmp	r0, r4
   13d26:	7272      	strb	r2, [r6, #9]
   13d28:	726f      	strb	r7, [r5, #9]
   13d2a:	3a20      	subs	r2, #32
   13d2c:	0020      	movs	r0, r4
   13d2e:	ffff 6f4d 	vqrdmlsh.s<illegal width 64>	q11, <illegal reg q7.5>, d13[0]
   13d32:	7564      	.short	0x7564
   13d34:	0020656c 	.word	0x0020656c
   13d38:	00207c20 	.word	0x00207c20
   13d3c:	54207c20 	.word	0x54207c20
   13d40:	20706d65 	.word	0x20706d65
   13d44:	6e756f46 	.word	0x6e756f46
   13d48:	00000064 	.word	0x00000064
   13d4c:	5420207c 	.word	0x5420207c
   13d50:	20706d65 	.word	0x20706d65
   13d54:	6e756f46 	.word	0x6e756f46
   13d58:	ffff0064 	.word	0xffff0064
   13d5c:	ffff002c 	.word	0xffff002c
   13d60:	75646f4d 	.word	0x75646f4d
   13d64:	2520656c 	.word	0x2520656c
   13d68:	78652069 	.word	0x78652069
   13d6c:	73747369 	.word	0x73747369
   13d70:	6552202e 	.word	0x6552202e
   13d74:	6e696461 	.word	0x6e696461
   13d78:	6f762067 	.word	0x6f762067
   13d7c:	6761746c 	.word	0x6761746c
   13d80:	6e612065 	.word	0x6e612065
   13d84:	65742064 	.word	0x65742064
   13d88:	7265706d 	.word	0x7265706d
   13d8c:	72757461 	.word	0x72757461
   13d90:	61762065 	.word	0x61762065
   13d94:	7365756c 	.word	0x7365756c
   13d98:	00000000 	.word	0x00000000
   13d9c:	75646f4d 	.word	0x75646f4d
   13da0:	7620656c 	.word	0x7620656c
   13da4:	61746c6f 	.word	0x61746c6f
   13da8:	203a6567 	.word	0x203a6567
   13dac:	00006625 	.word	0x00006625
   13db0:	65776f4c 	.word	0x65776f4c
   13db4:	43207473 	.word	0x43207473
   13db8:	206c6c65 	.word	0x206c6c65
   13dbc:	25203a56 	.word	0x25203a56
   13dc0:	20202066 	.word	0x20202066
   13dc4:	69482020 	.word	0x69482020
   13dc8:	73656867 	.word	0x73656867
   13dcc:	65432074 	.word	0x65432074
   13dd0:	56206c6c 	.word	0x56206c6c
   13dd4:	6625203a 	.word	0x6625203a
   13dd8:	00000000 	.word	0x00000000
   13ddc:	706d6554 	.word	0x706d6554
   13de0:	25203a31 	.word	0x25203a31
   13de4:	20202066 	.word	0x20202066
   13de8:	20202020 	.word	0x20202020
   13dec:	706d6554 	.word	0x706d6554
   13df0:	25203a32 	.word	0x25203a32
   13df4:	00000066 	.word	0x00000066
   13df8:	20656e4f 	.word	0x20656e4f
   13dfc:	6d20726f 	.word	0x6d20726f
   13e00:	2065726f 	.word	0x2065726f
   13e04:	20534d42 	.word	0x20534d42
   13e08:	75646f6d 	.word	0x75646f6d
   13e0c:	2073656c 	.word	0x2073656c
   13e10:	65766168 	.word	0x65766168
   13e14:	746e6520 	.word	0x746e6520
   13e18:	64657265 	.word	0x64657265
   13e1c:	65687420 	.word	0x65687420
   13e20:	75616620 	.word	0x75616620
   13e24:	7320746c 	.word	0x7320746c
   13e28:	65746174 	.word	0x65746174
   13e2c:	00000021 	.word	0x00000021
   13e30:	206c6c41 	.word	0x206c6c41
   13e34:	75646f6d 	.word	0x75646f6d
   13e38:	2073656c 	.word	0x2073656c
   13e3c:	65766168 	.word	0x65766168
   13e40:	69786520 	.word	0x69786520
   13e44:	20646574 	.word	0x20646574
   13e48:	61662061 	.word	0x61662061
   13e4c:	65746c75 	.word	0x65746c75
   13e50:	74732064 	.word	0x74732064
   13e54:	00657461 	.word	0x00657461
   13e58:	75646f4d 	.word	0x75646f4d
   13e5c:	3a73656c 	.word	0x3a73656c
   13e60:	20692520 	.word	0x20692520
   13e64:	6c654320 	.word	0x6c654320
   13e68:	203a736c 	.word	0x203a736c
   13e6c:	20206925 	.word	0x20206925
   13e70:	746c6f56 	.word	0x746c6f56
   13e74:	3a656761 	.word	0x3a656761
   13e78:	56662520 	.word	0x56662520
   13e7c:	41202020 	.word	0x41202020
   13e80:	43206776 	.word	0x43206776
   13e84:	206c6c65 	.word	0x206c6c65
   13e88:	746c6f56 	.word	0x746c6f56
   13e8c:	3a656761 	.word	0x3a656761
   13e90:	56662520 	.word	0x56662520
   13e94:	20202020 	.word	0x20202020
   13e98:	67764120 	.word	0x67764120
   13e9c:	6d655420 	.word	0x6d655420
   13ea0:	25203a70 	.word	0x25203a70
   13ea4:	00204366 	.word	0x00204366
   13ea8:	20202020 	.word	0x20202020
   13eac:	20202020 	.word	0x20202020
   13eb0:	20202020 	.word	0x20202020
   13eb4:	20202020 	.word	0x20202020
   13eb8:	20202020 	.word	0x20202020
   13ebc:	20202020 	.word	0x20202020
   13ec0:	20202020 	.word	0x20202020
   13ec4:	4d202020 	.word	0x4d202020
   13ec8:	6c75646f 	.word	0x6c75646f
   13ecc:	25232065 	.word	0x25232065
   13ed0:	00000069 	.word	0x00000069
   13ed4:	6f562020 	.word	0x6f562020
   13ed8:	6761746c 	.word	0x6761746c
   13edc:	25203a65 	.word	0x25203a65
   13ee0:	20205666 	.word	0x20205666
   13ee4:	66252820 	.word	0x66252820
   13ee8:	66252d56 	.word	0x66252d56
   13eec:	20202956 	.word	0x20202956
   13ef0:	54202020 	.word	0x54202020
   13ef4:	65706d65 	.word	0x65706d65
   13ef8:	75746172 	.word	0x75746172
   13efc:	3a736572 	.word	0x3a736572
   13f00:	66252820 	.word	0x66252820
   13f04:	66252d43 	.word	0x66252d43
   13f08:	00002943 	.word	0x00002943
   13f0c:	4f4d2020 	.word	0x4f4d2020
   13f10:	454c5544 	.word	0x454c5544
   13f14:	20534920 	.word	0x20534920
   13f18:	4c554146 	.word	0x4c554146
   13f1c:	3a444554 	.word	0x3a444554
   13f20:	00000000 	.word	0x00000000
   13f24:	20202020 	.word	0x20202020
   13f28:	7265764f 	.word	0x7265764f
   13f2c:	746c6f76 	.word	0x746c6f76
   13f30:	20656761 	.word	0x20656761
   13f34:	6c6c6543 	.word	0x6c6c6543
   13f38:	6d754e20 	.word	0x6d754e20
   13f3c:	73726562 	.word	0x73726562
   13f40:	2d312820 	.word	0x2d312820
   13f44:	203a2936 	.word	0x203a2936
   13f48:	00000000 	.word	0x00000000
   13f4c:	20202020 	.word	0x20202020
   13f50:	65646e55 	.word	0x65646e55
   13f54:	6c6f7672 	.word	0x6c6f7672
   13f58:	65676174 	.word	0x65676174
   13f5c:	6c654320 	.word	0x6c654320
   13f60:	754e206c 	.word	0x754e206c
   13f64:	7265626d 	.word	0x7265626d
   13f68:	31282073 	.word	0x31282073
   13f6c:	3a29362d 	.word	0x3a29362d
   13f70:	00000020 	.word	0x00000020
   13f74:	20202020 	.word	0x20202020
   13f78:	20435243 	.word	0x20435243
   13f7c:	6f727265 	.word	0x6f727265
   13f80:	6e692072 	.word	0x6e692072
   13f84:	63657220 	.word	0x63657220
   13f88:	65766965 	.word	0x65766965
   13f8c:	61702064 	.word	0x61702064
   13f90:	74656b63 	.word	0x74656b63
   13f94:	00000000 	.word	0x00000000
   13f98:	20202020 	.word	0x20202020
   13f9c:	65776f50 	.word	0x65776f50
   13fa0:	6e6f2072 	.word	0x6e6f2072
   13fa4:	73657220 	.word	0x73657220
   13fa8:	68207465 	.word	0x68207465
   13fac:	6f207361 	.word	0x6f207361
   13fb0:	72756363 	.word	0x72756363
   13fb4:	00646572 	.word	0x00646572
   13fb8:	20202020 	.word	0x20202020
   13fbc:	74736554 	.word	0x74736554
   13fc0:	75616620 	.word	0x75616620
   13fc4:	6120746c 	.word	0x6120746c
   13fc8:	76697463 	.word	0x76697463
   13fcc:	00000065 	.word	0x00000065
   13fd0:	20202020 	.word	0x20202020
   13fd4:	65746e49 	.word	0x65746e49
   13fd8:	6c616e72 	.word	0x6c616e72
   13fdc:	67657220 	.word	0x67657220
   13fe0:	65747369 	.word	0x65747369
   13fe4:	69207372 	.word	0x69207372
   13fe8:	6e6f636e 	.word	0x6e6f636e
   13fec:	74736973 	.word	0x74736973
   13ff0:	00746e65 	.word	0x00746e65
   13ff4:	4f4d2020 	.word	0x4f4d2020
   13ff8:	454c5544 	.word	0x454c5544
   13ffc:	53414820 	.word	0x53414820
   14000:	454c4120 	.word	0x454c4120
   14004:	3a535452 	.word	0x3a535452
   14008:	00000000 	.word	0x00000000
   1400c:	20202020 	.word	0x20202020
   14010:	7265764f 	.word	0x7265764f
   14014:	6d657420 	.word	0x6d657420
   14018:	61726570 	.word	0x61726570
   1401c:	65727574 	.word	0x65727574
   14020:	206e6f20 	.word	0x206e6f20
   14024:	00315354 	.word	0x00315354
   14028:	20202020 	.word	0x20202020
   1402c:	7265764f 	.word	0x7265764f
   14030:	6d657420 	.word	0x6d657420
   14034:	61726570 	.word	0x61726570
   14038:	65727574 	.word	0x65727574
   1403c:	206e6f20 	.word	0x206e6f20
   14040:	00325354 	.word	0x00325354
   14044:	20202020 	.word	0x20202020
   14048:	65656c53 	.word	0x65656c53
   1404c:	6f6d2070 	.word	0x6f6d2070
   14050:	61206564 	.word	0x61206564
   14054:	76697463 	.word	0x76697463
   14058:	00000065 	.word	0x00000065
   1405c:	20202020 	.word	0x20202020
   14060:	72656854 	.word	0x72656854
   14064:	206c616d 	.word	0x206c616d
   14068:	74756873 	.word	0x74756873
   1406c:	6e776f64 	.word	0x6e776f64
   14070:	74636120 	.word	0x74636120
   14074:	00657669 	.word	0x00657669
   14078:	20202020 	.word	0x20202020
   1407c:	74736554 	.word	0x74736554
   14080:	656c4120 	.word	0x656c4120
   14084:	00007472 	.word	0x00007472
   14088:	20202020 	.word	0x20202020
   1408c:	2050544f 	.word	0x2050544f
   14090:	4f525045 	.word	0x4f525045
   14094:	6e55204d 	.word	0x6e55204d
   14098:	72726f63 	.word	0x72726f63
   1409c:	61746365 	.word	0x61746365
   140a0:	20656c62 	.word	0x20656c62
   140a4:	6f727245 	.word	0x6f727245
   140a8:	00000072 	.word	0x00000072
   140ac:	20202020 	.word	0x20202020
   140b0:	554f5247 	.word	0x554f5247
   140b4:	52203350 	.word	0x52203350
   140b8:	20736765 	.word	0x20736765
   140bc:	61766e49 	.word	0x61766e49
   140c0:	0064696c 	.word	0x0064696c
   140c4:	20202020 	.word	0x20202020
   140c8:	72646441 	.word	0x72646441
   140cc:	20737365 	.word	0x20737365
   140d0:	20746f6e 	.word	0x20746f6e
   140d4:	69676572 	.word	0x69676572
   140d8:	72657473 	.word	0x72657473
   140dc:	ff006465 	.word	0xff006465
   140e0:	75646f4d 	.word	0x75646f4d
   140e4:	3a73656c 	.word	0x3a73656c
   140e8:	20692520 	.word	0x20692520
   140ec:	6c6c6543 	.word	0x6c6c6543
   140f0:	25203a73 	.word	0x25203a73
   140f4:	74532069 	.word	0x74532069
   140f8:	676e6972 	.word	0x676e6972
   140fc:	25203a73 	.word	0x25203a73
   14100:	56202069 	.word	0x56202069
   14104:	61746c6f 	.word	0x61746c6f
   14108:	203a6567 	.word	0x203a6567
   1410c:	20566625 	.word	0x20566625
   14110:	76412020 	.word	0x76412020
   14114:	65432067 	.word	0x65432067
   14118:	56206c6c 	.word	0x56206c6c
   1411c:	61746c6f 	.word	0x61746c6f
   14120:	203a6567 	.word	0x203a6567
   14124:	20566625 	.word	0x20566625
   14128:	776f4c20 	.word	0x776f4c20
   1412c:	6c654320 	.word	0x6c654320
   14130:	6f56206c 	.word	0x6f56206c
   14134:	6761746c 	.word	0x6761746c
   14138:	25203a65 	.word	0x25203a65
   1413c:	20205666 	.word	0x20205666
   14140:	67694820 	.word	0x67694820
   14144:	65432068 	.word	0x65432068
   14148:	56206c6c 	.word	0x56206c6c
   1414c:	61746c6f 	.word	0x61746c6f
   14150:	203a6567 	.word	0x203a6567
   14154:	20566625 	.word	0x20566625
   14158:	746c6544 	.word	0x746c6544
   1415c:	6f562061 	.word	0x6f562061
   14160:	6761746c 	.word	0x6761746c
   14164:	25203a65 	.word	0x25203a65
   14168:	20566d7a 	.word	0x20566d7a
   1416c:	76412020 	.word	0x76412020
   14170:	65542067 	.word	0x65542067
   14174:	203a706d 	.word	0x203a706d
   14178:	20436625 	.word	0x20436625
   1417c:	00000000 	.word	0x00000000
   14180:	75646f4d 	.word	0x75646f4d
   14184:	2320656c 	.word	0x2320656c
   14188:	00000000 	.word	0x00000000
   1418c:	00000056 	.word	0x00000056
   14190:	65432020 	.word	0x65432020
   14194:	00006c6c 	.word	0x00006c6c
   14198:	6d655420 	.word	0x6d655420
   1419c:	3a312070 	.word	0x3a312070
   141a0:	00000020 	.word	0x00000020
   141a4:	65542043 	.word	0x65542043
   141a8:	3220706d 	.word	0x3220706d
   141ac:	0000203a 	.word	0x0000203a
   141b0:	65542043 	.word	0x65542043
   141b4:	3320706d 	.word	0x3320706d
   141b8:	0000203a 	.word	0x0000203a
   141bc:	207c2043 	.word	0x207c2043
   141c0:	206c6142 	.word	0x206c6142
   141c4:	74617453 	.word	0x74617453
   141c8:	ff00203a 	.word	0xff00203a
   141cc:	00007830 	.word	0x00007830
   141d0:	00006230 	.word	0x00006230
   141d4:	00000054 	.word	0x00000054
   141d8:	00000046 	.word	0x00000046
   141dc:	45555254 	.word	0x45555254
   141e0:	00000000 	.word	0x00000000
   141e4:	534c4146 	.word	0x534c4146
   141e8:	ffff0045 	.word	0xffff0045
   141ec:	00202d20 	.word	0x00202d20
   141f0:	55424544 	.word	0x55424544
   141f4:	00000047 	.word	0x00000047
   141f8:	4f464e49 	.word	0x4f464e49
   141fc:	00000000 	.word	0x00000000
   14200:	4e524157 	.word	0x4e524157
   14204:	00474e49 	.word	0x00474e49
   14208:	4f525245 	.word	0x4f525245
   1420c:	ffff0052 	.word	0xffff0052
   14210:	646f6f47 	.word	0x646f6f47
   14214:	00657942 	.word	0x00657942
   14218:	65736552 	.word	0x65736552
   1421c:	6e697474 	.word	0x6e697474
   14220:	6f742067 	.word	0x6f742067
   14224:	63616620 	.word	0x63616620
   14228:	79726f74 	.word	0x79726f74
   1422c:	66656420 	.word	0x66656420
   14230:	746c7561 	.word	0x746c7561
   14234:	ffff0073 	.word	0xffff0073
   14238:	20434f53 	.word	0x20434f53
   1423c:	0000203a 	.word	0x0000203a
   14240:	75662020 	.word	0x75662020
   14244:	70206c65 	.word	0x70206c65
   14248:	3a206d77 	.word	0x3a206d77
   1424c:	ffff0020 	.word	0xffff0020
   14250:	20534d42 	.word	0x20534d42
   14254:	74617453 	.word	0x74617453
   14258:	3a207375 	.word	0x3a207375
   1425c:	00000020 	.word	0x00000020
   14260:	20535345 	.word	0x20535345
   14264:	65646f4d 	.word	0x65646f4d
   14268:	00000020 	.word	0x00000020
   1426c:	6e55203a 	.word	0x6e55203a
   14270:	56726564 	.word	0x56726564
   14274:	61746c6f 	.word	0x61746c6f
   14278:	00206567 	.word	0x00206567
   1427c:	764f203a 	.word	0x764f203a
   14280:	6f567265 	.word	0x6f567265
   14284:	6761746c 	.word	0x6761746c
   14288:	00002065 	.word	0x00002065
   1428c:	6543203a 	.word	0x6543203a
   14290:	49206c6c 	.word	0x49206c6c
   14294:	6c61626d 	.word	0x6c61626d
   14298:	65636e61 	.word	0x65636e61
   1429c:	00000020 	.word	0x00000020
   142a0:	764f203a 	.word	0x764f203a
   142a4:	54207265 	.word	0x54207265
   142a8:	20706d65 	.word	0x20706d65
   142ac:	00000000 	.word	0x00000000
   142b0:	6e55203a 	.word	0x6e55203a
   142b4:	20726564 	.word	0x20726564
   142b8:	706d6554 	.word	0x706d6554
   142bc:	00000020 	.word	0x00000020
   142c0:	764f203a 	.word	0x764f203a
   142c4:	6f567265 	.word	0x6f567265
   142c8:	6761746c 	.word	0x6761746c
   142cc:	74532065 	.word	0x74532065
   142d0:	6761726f 	.word	0x6761726f
   142d4:	00002065 	.word	0x00002065
   142d8:	4e55203a 	.word	0x4e55203a
   142dc:	70706168 	.word	0x70706168
   142e0:	00003a79 	.word	0x00003a79
   142e4:	6148203a 	.word	0x6148203a
   142e8:	20797070 	.word	0x20797070
   142ec:	00000000 	.word	0x00000000
   142f0:	53727245 	.word	0x53727245
   142f4:	00203a74 	.word	0x00203a74
   142f8:	6f6f4220 	.word	0x6f6f4220
   142fc:	00002074 	.word	0x00002074
   14300:	61655220 	.word	0x61655220
   14304:	00207964 	.word	0x00207964
   14308:	65725020 	.word	0x65725020
   1430c:	72616863 	.word	0x72616863
   14310:	00206567 	.word	0x00206567
   14314:	69724420 	.word	0x69724420
   14318:	00206576 	.word	0x00206576
   1431c:	61684320 	.word	0x61684320
   14320:	20656772 	.word	0x20656772
   14324:	00000000 	.word	0x00000000
   14328:	72724520 	.word	0x72724520
   1432c:	0020726f 	.word	0x0020726f
   14330:	4341207c 	.word	0x4341207c
   14334:	65725020 	.word	0x65725020
   14338:	746e6573 	.word	0x746e6573
   1433c:	00007c20 	.word	0x00007c20
   14340:	654b207c 	.word	0x654b207c
   14344:	4e4f2079 	.word	0x4e4f2079
   14348:	00007c20 	.word	0x00007c20
   1434c:	6c61427c 	.word	0x6c61427c
   14350:	69636e61 	.word	0x69636e61
   14354:	4120676e 	.word	0x4120676e
   14358:	76697463 	.word	0x76697463
   1435c:	00000065 	.word	0x00000065
   14360:	3a74754f 	.word	0x3a74754f
   14364:	00000000 	.word	0x00000000
   14368:	6e6f4320 	.word	0x6e6f4320
   1436c:	00003a74 	.word	0x00003a74
   14370:	00000031 	.word	0x00000031
   14374:	00000030 	.word	0x00000030
   14378:	3a6e4920 	.word	0x3a6e4920
   1437c:	ffffff00 	.word	0xffffff00
   14380:	20776f4c 	.word	0x20776f4c
   14384:	676e6152 	.word	0x676e6152
   14388:	00203a65 	.word	0x00203a65
   1438c:	676e6953 	.word	0x676e6953
   14390:	4920656c 	.word	0x4920656c
   14394:	00203a6e 	.word	0x00203a6e
   14398:	756c6156 	.word	0x756c6156
   1439c:	44412065 	.word	0x44412065
   143a0:	203a3043 	.word	0x203a3043
   143a4:	00000000 	.word	0x00000000
   143a8:	00416d20 	.word	0x00416d20
   143ac:	68676948 	.word	0x68676948
   143b0:	6e615220 	.word	0x6e615220
   143b4:	203a6567 	.word	0x203a6567
   143b8:	00000000 	.word	0x00000000
   143bc:	0000416d 	.word	0x0000416d
   143c0:	2020416d 	.word	0x2020416d
   143c4:	ffffff00 	.word	0xffffff00
   143c8:	2f2f2f2f 	.word	0x2f2f2f2f
   143cc:	2f2f2f2f 	.word	0x2f2f2f2f
   143d0:	2f2f2f2f 	.word	0x2f2f2f2f
   143d4:	2f2f2f2f 	.word	0x2f2f2f2f
   143d8:	2f2f2f2f 	.word	0x2f2f2f2f
   143dc:	2f2f2f2f 	.word	0x2f2f2f2f
   143e0:	2f2f2f2f 	.word	0x2f2f2f2f
   143e4:	2f2f2f2f 	.word	0x2f2f2f2f
   143e8:	2f2f2f2f 	.word	0x2f2f2f2f
   143ec:	2f2f2f2f 	.word	0x2f2f2f2f
   143f0:	434f5320 	.word	0x434f5320
   143f4:	54455320 	.word	0x54455320
   143f8:	2f2f2f20 	.word	0x2f2f2f20
   143fc:	2f2f2f2f 	.word	0x2f2f2f2f
   14400:	2f2f2f2f 	.word	0x2f2f2f2f
   14404:	2f2f2f2f 	.word	0x2f2f2f2f
   14408:	2f2f2f2f 	.word	0x2f2f2f2f
   1440c:	2f2f2f2f 	.word	0x2f2f2f2f
   14410:	2f2f2f2f 	.word	0x2f2f2f2f
   14414:	2f2f2f2f 	.word	0x2f2f2f2f
   14418:	2f2f2f2f 	.word	0x2f2f2f2f
   1441c:	2f2f2f2f 	.word	0x2f2f2f2f
   14420:	0000002f 	.word	0x0000002f
   14424:	20776f4c 	.word	0x20776f4c
   14428:	676e6152 	.word	0x676e6152
   1442c:	00002065 	.word	0x00002065
   14430:	68676948 	.word	0x68676948
   14434:	6e615220 	.word	0x6e615220
   14438:	00006567 	.word	0x00006567
   1443c:	6c616e41 	.word	0x6c616e41
   14440:	6575676f 	.word	0x6575676f
   14444:	6e695320 	.word	0x6e695320
   14448:	20656c67 	.word	0x20656c67
   1444c:	00000000 	.word	0x00000000
   14450:	624e4143 	.word	0x624e4143
   14454:	00207375 	.word	0x00207375
   14458:	4f532025 	.word	0x4f532025
   1445c:	00002043 	.word	0x00002043
   14460:	0068416d 	.word	0x0068416d
   14464:	6c6c7570 	.word	0x6c6c7570
   14468:	206e6920 	.word	0x206e6920
   1446c:	3654554f 	.word	0x3654554f
   14470:	00000000 	.word	0x00000000
   14474:	6c6c7570 	.word	0x6c6c7570
   14478:	206e6920 	.word	0x206e6920
   1447c:	3754554f 	.word	0x3754554f
   14480:	ffffff00 	.word	0xffffff00
   14484:	6c614320 	.word	0x6c614320
   14488:	61726269 	.word	0x61726269
   1448c:	676e6974 	.word	0x676e6974
   14490:	72754320 	.word	0x72754320
   14494:	746e6572 	.word	0x746e6572
   14498:	66664f20 	.word	0x66664f20
   1449c:	20746573 	.word	0x20746573
   144a0:	3a3a3a3a 	.word	0x3a3a3a3a
   144a4:	0000203a 	.word	0x0000203a
   144a8:	0000002e 	.word	0x0000002e
   144ac:	72756320 	.word	0x72756320
   144b0:	746e6572 	.word	0x746e6572
   144b4:	66666f20 	.word	0x66666f20
   144b8:	20746573 	.word	0x20746573
   144bc:	61632031 	.word	0x61632031
   144c0:	7262696c 	.word	0x7262696c
   144c4:	64657461 	.word	0x64657461
   144c8:	00000020 	.word	0x00000020
   144cc:	72756320 	.word	0x72756320
   144d0:	746e6572 	.word	0x746e6572
   144d4:	66666f20 	.word	0x66666f20
   144d8:	20746573 	.word	0x20746573
   144dc:	61632032 	.word	0x61632032
   144e0:	7262696c 	.word	0x7262696c
   144e4:	64657461 	.word	0x64657461
   144e8:	ffff0020 	.word	0xffff0020
   144ec:	ffff0050 	.word	0xffff0050
   144f0:	646f4320 	.word	0x646f4320
   144f4:	53206465 	.word	0x53206465
   144f8:	69747465 	.word	0x69747465
   144fc:	2073676e 	.word	0x2073676e
   14500:	64616f4c 	.word	0x64616f4c
   14504:	00206465 	.word	0x00206465
   14508:	68416d20 	.word	0x68416d20
   1450c:	73655220 	.word	0x73655220
   14510:	00207465 	.word	0x00207465
   14514:	202d2031 	.word	0x202d2031
   14518:	706d6554 	.word	0x706d6554
   1451c:	6e655320 	.word	0x6e655320
   14520:	20726f73 	.word	0x20726f73
   14524:	74746553 	.word	0x74746553
   14528:	3a676e69 	.word	0x3a676e69
   1452c:	00000000 	.word	0x00000000
   14530:	202d2032 	.word	0x202d2032
   14534:	746c6f56 	.word	0x746c6f56
   14538:	20656761 	.word	0x20656761
   1453c:	65646e55 	.word	0x65646e55
   14540:	68572072 	.word	0x68572072
   14544:	20686369 	.word	0x20686369
   14548:	49206f54 	.word	0x49206f54
   1454c:	726f6e67 	.word	0x726f6e67
   14550:	65432065 	.word	0x65432065
   14554:	3a736c6c 	.word	0x3a736c6c
   14558:	00000000 	.word	0x00000000
   1455c:	0000566d 	.word	0x0000566d
   14560:	202d2071 	.word	0x202d2071
   14564:	62206f47 	.word	0x62206f47
   14568:	206b6361 	.word	0x206b6361
   1456c:	6d206f74 	.word	0x6d206f74
   14570:	00756e65 	.word	0x00756e65
   14574:	202d2031 	.word	0x202d2031
   14578:	6c6c6543 	.word	0x6c6c6543
   1457c:	61684320 	.word	0x61684320
   14580:	20656772 	.word	0x20656772
   14584:	746c6f56 	.word	0x746c6f56
   14588:	20656761 	.word	0x20656761
   1458c:	696d694c 	.word	0x696d694c
   14590:	65532074 	.word	0x65532074
   14594:	696f7074 	.word	0x696f7074
   14598:	203a746e 	.word	0x203a746e
   1459c:	00000000 	.word	0x00000000
   145a0:	202d2032 	.word	0x202d2032
   145a4:	72616843 	.word	0x72616843
   145a8:	48206567 	.word	0x48206567
   145ac:	65747379 	.word	0x65747379
   145b0:	73697372 	.word	0x73697372
   145b4:	0000203a 	.word	0x0000203a
   145b8:	202d2033 	.word	0x202d2033
   145bc:	6b636150 	.word	0x6b636150
   145c0:	78614d20 	.word	0x78614d20
   145c4:	61684320 	.word	0x61684320
   145c8:	20656772 	.word	0x20656772
   145cc:	72727543 	.word	0x72727543
   145d0:	3a746e65 	.word	0x3a746e65
   145d4:	00000020 	.word	0x00000020
   145d8:	50202d34 	.word	0x50202d34
   145dc:	206b6361 	.word	0x206b6361
   145e0:	20646e45 	.word	0x20646e45
   145e4:	4320666f 	.word	0x4320666f
   145e8:	67726168 	.word	0x67726168
   145ec:	75432065 	.word	0x75432065
   145f0:	6e657272 	.word	0x6e657272
   145f4:	00203a74 	.word	0x00203a74
   145f8:	43202d35 	.word	0x43202d35
   145fc:	67726168 	.word	0x67726168
   14600:	54207265 	.word	0x54207265
   14604:	3a657079 	.word	0x3a657079
   14608:	00000020 	.word	0x00000020
   1460c:	616c6552 	.word	0x616c6552
   14610:	6f432079 	.word	0x6f432079
   14614:	6f72746e 	.word	0x6f72746e
   14618:	0000006c 	.word	0x0000006c
   1461c:	73757242 	.word	0x73757242
   14620:	4c4e2061 	.word	0x4c4e2061
   14624:	78783547 	.word	0x78783547
   14628:	00000000 	.word	0x00000000
   1462c:	746c6f56 	.word	0x746c6f56
   14630:	61684320 	.word	0x61684320
   14634:	72656772 	.word	0x72656772
   14638:	00000000 	.word	0x00000000
   1463c:	65746c45 	.word	0x65746c45
   14640:	6843206b 	.word	0x6843206b
   14644:	65677261 	.word	0x65677261
   14648:	00000072 	.word	0x00000072
   1464c:	6f636c45 	.word	0x6f636c45
   14650:	6843206e 	.word	0x6843206e
   14654:	65677261 	.word	0x65677261
   14658:	00000072 	.word	0x00000072
   1465c:	74636956 	.word	0x74636956
   14660:	2f6e6f72 	.word	0x2f6e6f72
   14664:	00414d53 	.word	0x00414d53
   14668:	61646f43 	.word	0x61646f43
   1466c:	00000000 	.word	0x00000000
   14670:	6f6c7950 	.word	0x6f6c7950
   14674:	202d206e 	.word	0x202d206e
   14678:	54534554 	.word	0x54534554
   1467c:	20474e49 	.word	0x20474e49
   14680:	594c4e4f 	.word	0x594c4e4f
   14684:	00000000 	.word	0x00000000
   14688:	6c74754f 	.word	0x6c74754f
   1468c:	65646e61 	.word	0x65646e61
   14690:	68432072 	.word	0x68432072
   14694:	65677261 	.word	0x65677261
   14698:	00000072 	.word	0x00000072
   1469c:	43202d36 	.word	0x43202d36
   146a0:	67726168 	.word	0x67726168
   146a4:	43207265 	.word	0x43207265
   146a8:	4d206e61 	.word	0x4d206e61
   146ac:	53206773 	.word	0x53206773
   146b0:	203a6470 	.word	0x203a6470
   146b4:	00000000 	.word	0x00000000
   146b8:	0000536d 	.word	0x0000536d
   146bc:	202d2037 	.word	0x202d2037
   146c0:	72616843 	.word	0x72616843
   146c4:	20726567 	.word	0x20726567
   146c8:	43205648 	.word	0x43205648
   146cc:	656e6e6f 	.word	0x656e6e6f
   146d0:	6f697463 	.word	0x6f697463
   146d4:	00203a6e 	.word	0x00203a6e
   146d8:	68654220 	.word	0x68654220
   146dc:	20646e69 	.word	0x20646e69
   146e0:	746e6f43 	.word	0x746e6f43
   146e4:	6f746361 	.word	0x6f746361
   146e8:	00007372 	.word	0x00007372
   146ec:	65726944 	.word	0x65726944
   146f0:	54207463 	.word	0x54207463
   146f4:	6142206f 	.word	0x6142206f
   146f8:	72657474 	.word	0x72657474
   146fc:	56482079 	.word	0x56482079
   14700:	00000000 	.word	0x00000000
   14704:	202d2039 	.word	0x202d2039
   14708:	72616843 	.word	0x72616843
   1470c:	43206567 	.word	0x43206567
   14710:	65727275 	.word	0x65727275
   14714:	6420746e 	.word	0x6420746e
   14718:	74617265 	.word	0x74617265
   1471c:	6f4c2065 	.word	0x6f4c2065
   14720:	00203a77 	.word	0x00203a77
   14724:	00004320 	.word	0x00004320
   14728:	202d2030 	.word	0x202d2030
   1472c:	6b636150 	.word	0x6b636150
   14730:	6c6f4320 	.word	0x6c6f4320
   14734:	68432064 	.word	0x68432064
   14738:	65677261 	.word	0x65677261
   1473c:	72754320 	.word	0x72754320
   14740:	746e6572 	.word	0x746e6572
   14744:	0000203a 	.word	0x0000203a
   14748:	72616c41 	.word	0x72616c41
   1474c:	6e61206d 	.word	0x6e61206d
   14750:	61572064 	.word	0x61572064
   14754:	6e696e72 	.word	0x6e696e72
   14758:	65532067 	.word	0x65532067
   1475c:	6e697474 	.word	0x6e697474
   14760:	4d207367 	.word	0x4d207367
   14764:	00756e65 	.word	0x00756e65
   14768:	202d2031 	.word	0x202d2031
   1476c:	746c6f56 	.word	0x746c6f56
   14770:	20656761 	.word	0x20656761
   14774:	6e726157 	.word	0x6e726157
   14778:	20676e69 	.word	0x20676e69
   1477c:	7366664f 	.word	0x7366664f
   14780:	203a7465 	.word	0x203a7465
   14784:	00000000 	.word	0x00000000
   14788:	202d2032 	.word	0x202d2032
   1478c:	6c6c6543 	.word	0x6c6c6543
   14790:	6c6f5620 	.word	0x6c6f5620
   14794:	65676174 	.word	0x65676174
   14798:	66694420 	.word	0x66694420
   1479c:	65726566 	.word	0x65726566
   147a0:	2065636e 	.word	0x2065636e
   147a4:	72616c41 	.word	0x72616c41
   147a8:	00203a6d 	.word	0x00203a6d
   147ac:	202d2033 	.word	0x202d2033
   147b0:	706d6554 	.word	0x706d6554
   147b4:	72615720 	.word	0x72615720
   147b8:	676e696e 	.word	0x676e696e
   147bc:	66664f20 	.word	0x66664f20
   147c0:	3a746573 	.word	0x3a746573
   147c4:	00000020 	.word	0x00000020
   147c8:	202d2034 	.word	0x202d2034
   147cc:	7265764f 	.word	0x7265764f
   147d0:	646e6120 	.word	0x646e6120
   147d4:	646e5520 	.word	0x646e5520
   147d8:	56207265 	.word	0x56207265
   147dc:	61746c6f 	.word	0x61746c6f
   147e0:	44206567 	.word	0x44206567
   147e4:	79616c65 	.word	0x79616c65
   147e8:	0000203a 	.word	0x0000203a
   147ec:	00536d20 	.word	0x00536d20
   147f0:	746e6f43 	.word	0x746e6f43
   147f4:	6f746361 	.word	0x6f746361
   147f8:	6e612072 	.word	0x6e612072
   147fc:	61472064 	.word	0x61472064
   14800:	20656775 	.word	0x20656775
   14804:	74746553 	.word	0x74746553
   14808:	73676e69 	.word	0x73676e69
   1480c:	6e654d20 	.word	0x6e654d20
   14810:	00000075 	.word	0x00000075
   14814:	202d2031 	.word	0x202d2031
   14818:	43657250 	.word	0x43657250
   1481c:	67726168 	.word	0x67726168
   14820:	69542065 	.word	0x69542065
   14824:	3a72656d 	.word	0x3a72656d
   14828:	00000020 	.word	0x00000020
   1482c:	202d2032 	.word	0x202d2032
   14830:	43657250 	.word	0x43657250
   14834:	67726168 	.word	0x67726168
   14838:	69462065 	.word	0x69462065
   1483c:	6873696e 	.word	0x6873696e
   14840:	72754320 	.word	0x72754320
   14844:	746e6572 	.word	0x746e6572
   14848:	0000203a 	.word	0x0000203a
   1484c:	202d2033 	.word	0x202d2033
   14850:	204d5750 	.word	0x204d5750
   14854:	746e6f63 	.word	0x746e6f63
   14858:	6f746361 	.word	0x6f746361
   1485c:	6f482072 	.word	0x6f482072
   14860:	3020646c 	.word	0x3020646c
   14864:	3535322d 	.word	0x3535322d
   14868:	00003a20 	.word	0x00003a20
   1486c:	202d2034 	.word	0x202d2034
   14870:	204d5750 	.word	0x204d5750
   14874:	20726f66 	.word	0x20726f66
   14878:	67756147 	.word	0x67756147
   1487c:	6f4c2065 	.word	0x6f4c2065
   14880:	2d302077 	.word	0x2d302077
   14884:	20353532 	.word	0x20353532
   14888:	0000003a 	.word	0x0000003a
   1488c:	202d2035 	.word	0x202d2035
   14890:	204d5750 	.word	0x204d5750
   14894:	20726f66 	.word	0x20726f66
   14898:	67756147 	.word	0x67756147
   1489c:	69482065 	.word	0x69482065
   148a0:	30206867 	.word	0x30206867
   148a4:	3535322d 	.word	0x3535322d
   148a8:	00003a20 	.word	0x00003a20
   148ac:	202d2036 	.word	0x202d2036
   148b0:	20535345 	.word	0x20535345
   148b4:	6e69614d 	.word	0x6e69614d
   148b8:	6e6f4320 	.word	0x6e6f4320
   148bc:	74636174 	.word	0x74636174
   148c0:	6f20726f 	.word	0x6f20726f
   148c4:	72542072 	.word	0x72542072
   148c8:	3a207069 	.word	0x3a207069
   148cc:	00000000 	.word	0x00000000
   148d0:	70697254 	.word	0x70697254
   148d4:	75685320 	.word	0x75685320
   148d8:	0000746e 	.word	0x0000746e
   148dc:	6e69614d 	.word	0x6e69614d
   148e0:	6e6f4320 	.word	0x6e6f4320
   148e4:	74636174 	.word	0x74636174
   148e8:	6120726f 	.word	0x6120726f
   148ec:	5020646e 	.word	0x5020646e
   148f0:	68636572 	.word	0x68636572
   148f4:	65677261 	.word	0x65677261
   148f8:	00000000 	.word	0x00000000
   148fc:	75626544 	.word	0x75626544
   14900:	65532067 	.word	0x65532067
   14904:	6e697474 	.word	0x6e697474
   14908:	4d207367 	.word	0x4d207367
   1490c:	00756e65 	.word	0x00756e65
   14910:	67676f54 	.word	0x67676f54
   14914:	6f20656c 	.word	0x6f20656c
   14918:	666f2f6e 	.word	0x666f2f6e
   1491c:	00000066 	.word	0x00000066
   14920:	202d2031 	.word	0x202d2031
   14924:	206e6143 	.word	0x206e6143
   14928:	75626544 	.word	0x75626544
   1492c:	003a2067 	.word	0x003a2067
   14930:	202d2032 	.word	0x202d2032
   14934:	72727543 	.word	0x72727543
   14938:	20746e65 	.word	0x20746e65
   1493c:	75626544 	.word	0x75626544
   14940:	003a2067 	.word	0x003a2067
   14944:	202d2033 	.word	0x202d2033
   14948:	7074754f 	.word	0x7074754f
   1494c:	43207475 	.word	0x43207475
   14950:	6b636568 	.word	0x6b636568
   14954:	00003a20 	.word	0x00003a20
   14958:	202d2034 	.word	0x202d2034
   1495c:	75706e49 	.word	0x75706e49
   14960:	68432074 	.word	0x68432074
   14964:	206b6365 	.word	0x206b6365
   14968:	0000003a 	.word	0x0000003a
   1496c:	202d2035 	.word	0x202d2035
   14970:	20535345 	.word	0x20535345
   14974:	65646f6d 	.word	0x65646f6d
   14978:	00003a20 	.word	0x00003a20
   1497c:	202d2036 	.word	0x202d2036
   14980:	6c6c6543 	.word	0x6c6c6543
   14984:	72502073 	.word	0x72502073
   14988:	6e657365 	.word	0x6e657365
   1498c:	65522074 	.word	0x65522074
   14990:	20746573 	.word	0x20746573
   14994:	0000003a 	.word	0x0000003a
   14998:	202d2037 	.word	0x202d2037
   1499c:	67756147 	.word	0x67756147
   149a0:	65442065 	.word	0x65442065
   149a4:	20677562 	.word	0x20677562
   149a8:	0000003a 	.word	0x0000003a
   149ac:	202d2038 	.word	0x202d2038
   149b0:	20565343 	.word	0x20565343
   149b4:	7074754f 	.word	0x7074754f
   149b8:	3a207475 	.word	0x3a207475
   149bc:	00000000 	.word	0x00000000
   149c0:	202d2039 	.word	0x202d2039
   149c4:	69636544 	.word	0x69636544
   149c8:	206c616d 	.word	0x206c616d
   149cc:	63616c50 	.word	0x63616c50
   149d0:	74207365 	.word	0x74207365
   149d4:	6853206f 	.word	0x6853206f
   149d8:	3a20776f 	.word	0x3a20776f
   149dc:	00000000 	.word	0x00000000
   149e0:	72727543 	.word	0x72727543
   149e4:	20746e65 	.word	0x20746e65
   149e8:	736e6553 	.word	0x736e6553
   149ec:	4320726f 	.word	0x4320726f
   149f0:	62696c61 	.word	0x62696c61
   149f4:	69746172 	.word	0x69746172
   149f8:	4d206e6f 	.word	0x4d206e6f
   149fc:	00756e65 	.word	0x00756e65
   14a00:	202d2063 	.word	0x202d2063
   14a04:	63206f54 	.word	0x63206f54
   14a08:	62696c61 	.word	0x62696c61
   14a0c:	65746172 	.word	0x65746172
   14a10:	6e657320 	.word	0x6e657320
   14a14:	20726f73 	.word	0x20726f73
   14a18:	7366666f 	.word	0x7366666f
   14a1c:	00007465 	.word	0x00007465
   14a20:	202d2073 	.word	0x202d2073
   14a24:	72727543 	.word	0x72727543
   14a28:	20746e65 	.word	0x20746e65
   14a2c:	736e6553 	.word	0x736e6553
   14a30:	5420726f 	.word	0x5420726f
   14a34:	20657079 	.word	0x20657079
   14a38:	0000203a 	.word	0x0000203a
   14a3c:	616e4120 	.word	0x616e4120
   14a40:	75676f6c 	.word	0x75676f6c
   14a44:	75442065 	.word	0x75442065
   14a48:	43206c61 	.word	0x43206c61
   14a4c:	65727275 	.word	0x65727275
   14a50:	5320746e 	.word	0x5320746e
   14a54:	6f736e65 	.word	0x6f736e65
   14a58:	00002072 	.word	0x00002072
   14a5c:	616e4120 	.word	0x616e4120
   14a60:	75676f6c 	.word	0x75676f6c
   14a64:	69532065 	.word	0x69532065
   14a68:	656c676e 	.word	0x656c676e
   14a6c:	72754320 	.word	0x72754320
   14a70:	746e6572 	.word	0x746e6572
   14a74:	6e655320 	.word	0x6e655320
   14a78:	20726f73 	.word	0x20726f73
   14a7c:	00000000 	.word	0x00000000
   14a80:	6e614320 	.word	0x6e614320
   14a84:	20737562 	.word	0x20737562
   14a88:	72727543 	.word	0x72727543
   14a8c:	20746e65 	.word	0x20746e65
   14a90:	736e6553 	.word	0x736e6553
   14a94:	0020726f 	.word	0x0020726f
   14a98:	65646e55 	.word	0x65646e55
   14a9c:	656e6966 	.word	0x656e6966
   14aa0:	00000064 	.word	0x00000064
   14aa4:	202d2031 	.word	0x202d2031
   14aa8:	65766e69 	.word	0x65766e69
   14aac:	63207472 	.word	0x63207472
   14ab0:	65727275 	.word	0x65727275
   14ab4:	3a20746e 	.word	0x3a20746e
   14ab8:	00000000 	.word	0x00000000
   14abc:	202d2032 	.word	0x202d2032
   14ac0:	65727550 	.word	0x65727550
   14ac4:	6c6f5620 	.word	0x6c6f5620
   14ac8:	65676174 	.word	0x65676174
   14acc:	73616220 	.word	0x73616220
   14ad0:	53206465 	.word	0x53206465
   14ad4:	3a20434f 	.word	0x3a20434f
   14ad8:	00000000 	.word	0x00000000
   14adc:	202d2033 	.word	0x202d2033
   14ae0:	72727543 	.word	0x72727543
   14ae4:	20746e65 	.word	0x20746e65
   14ae8:	746c754d 	.word	0x746c754d
   14aec:	696c7069 	.word	0x696c7069
   14af0:	69746163 	.word	0x69746163
   14af4:	3a206e6f 	.word	0x3a206e6f
   14af8:	00000000 	.word	0x00000000
   14afc:	202d2034 	.word	0x202d2034
   14b00:	6c616e41 	.word	0x6c616e41
   14b04:	6575676f 	.word	0x6575676f
   14b08:	776f4c20 	.word	0x776f4c20
   14b0c:	6e615220 	.word	0x6e615220
   14b10:	43206567 	.word	0x43206567
   14b14:	3a766e6f 	.word	0x3a766e6f
   14b18:	00000000 	.word	0x00000000
   14b1c:	2f566d20 	.word	0x2f566d20
   14b20:	00000041 	.word	0x00000041
   14b24:	202d2035 	.word	0x202d2035
   14b28:	6c616e41 	.word	0x6c616e41
   14b2c:	6575676f 	.word	0x6575676f
   14b30:	67694820 	.word	0x67694820
   14b34:	61522068 	.word	0x61522068
   14b38:	2065676e 	.word	0x2065676e
   14b3c:	766e6f43 	.word	0x766e6f43
   14b40:	0000003a 	.word	0x0000003a
   14b44:	202d2036 	.word	0x202d2036
   14b48:	72727543 	.word	0x72727543
   14b4c:	20746e65 	.word	0x20746e65
   14b50:	736e6553 	.word	0x736e6553
   14b54:	4420726f 	.word	0x4420726f
   14b58:	62646165 	.word	0x62646165
   14b5c:	3a646e61 	.word	0x3a646e61
   14b60:	00000000 	.word	0x00000000
   14b64:	00566d20 	.word	0x00566d20
   14b68:	202d2038 	.word	0x202d2038
   14b6c:	72727543 	.word	0x72727543
   14b70:	20746e65 	.word	0x20746e65
   14b74:	6e616843 	.word	0x6e616843
   14b78:	206c656e 	.word	0x206c656e
   14b7c:	6e616843 	.word	0x6e616843
   14b80:	764f6567 	.word	0x764f6567
   14b84:	003a7265 	.word	0x003a7265
   14b88:	00004120 	.word	0x00004120
   14b8c:	432d2037 	.word	0x432d2037
   14b90:	43206e61 	.word	0x43206e61
   14b94:	65727275 	.word	0x65727275
   14b98:	5320746e 	.word	0x5320746e
   14b9c:	6f736e65 	.word	0x6f736e65
   14ba0:	003a2072 	.word	0x003a2072
   14ba4:	4d454c20 	.word	0x4d454c20
   14ba8:	42414320 	.word	0x42414320
   14bac:	2f303033 	.word	0x2f303033
   14bb0:	20303035 	.word	0x20303035
   14bb4:	69726573 	.word	0x69726573
   14bb8:	00207365 	.word	0x00207365
   14bbc:	4d454c20 	.word	0x4d454c20
   14bc0:	42414320 	.word	0x42414320
   14bc4:	20303035 	.word	0x20303035
   14bc8:	63657053 	.word	0x63657053
   14bcc:	206c6169 	.word	0x206c6169
   14bd0:	00000000 	.word	0x00000000
   14bd4:	61734920 	.word	0x61734920
   14bd8:	6c616353 	.word	0x6c616353
   14bdc:	56492065 	.word	0x56492065
   14be0:	20532d54 	.word	0x20532d54
   14be4:	00000000 	.word	0x00000000
   14be8:	63695620 	.word	0x63695620
   14bec:	6e6f7274 	.word	0x6e6f7274
   14bf0:	6e794c20 	.word	0x6e794c20
   14bf4:	45562078 	.word	0x45562078
   14bf8:	4e41432e 	.word	0x4e41432e
   14bfc:	75685320 	.word	0x75685320
   14c00:	0000746e 	.word	0x0000746e
   14c04:	74746142 	.word	0x74746142
   14c08:	20797265 	.word	0x20797265
   14c0c:	74746553 	.word	0x74746553
   14c10:	73676e69 	.word	0x73676e69
   14c14:	6e654d20 	.word	0x6e654d20
   14c18:	00000075 	.word	0x00000075
   14c1c:	202d2072 	.word	0x202d2072
   14c20:	65736552 	.word	0x65736552
   14c24:	48412074 	.word	0x48412074
   14c28:	756f6320 	.word	0x756f6320
   14c2c:	7265746e 	.word	0x7265746e
   14c30:	00000000 	.word	0x00000000
   14c34:	202d2066 	.word	0x202d2066
   14c38:	65736552 	.word	0x65736552
   14c3c:	6f742074 	.word	0x6f742074
   14c40:	646f4320 	.word	0x646f4320
   14c44:	53206465 	.word	0x53206465
   14c48:	69747465 	.word	0x69747465
   14c4c:	0073676e 	.word	0x0073676e
   14c50:	202d2031 	.word	0x202d2031
   14c54:	6c6c6543 	.word	0x6c6c6543
   14c58:	65764f20 	.word	0x65764f20
   14c5c:	6f562072 	.word	0x6f562072
   14c60:	6761746c 	.word	0x6761746c
   14c64:	65532065 	.word	0x65532065
   14c68:	696f7074 	.word	0x696f7074
   14c6c:	203a746e 	.word	0x203a746e
   14c70:	00000000 	.word	0x00000000
   14c74:	202d2032 	.word	0x202d2032
   14c78:	6c6c6543 	.word	0x6c6c6543
   14c7c:	646e5520 	.word	0x646e5520
   14c80:	56207265 	.word	0x56207265
   14c84:	61746c6f 	.word	0x61746c6f
   14c88:	53206567 	.word	0x53206567
   14c8c:	6f707465 	.word	0x6f707465
   14c90:	3a746e69 	.word	0x3a746e69
   14c94:	00000020 	.word	0x00000020
   14c98:	202d2033 	.word	0x202d2033
   14c9c:	7265764f 	.word	0x7265764f
   14ca0:	6d655420 	.word	0x6d655420
   14ca4:	61726570 	.word	0x61726570
   14ca8:	65727574 	.word	0x65727574
   14cac:	74655320 	.word	0x74655320
   14cb0:	6e696f70 	.word	0x6e696f70
   14cb4:	00203a74 	.word	0x00203a74
   14cb8:	00000043 	.word	0x00000043
   14cbc:	202d2034 	.word	0x202d2034
   14cc0:	65646e55 	.word	0x65646e55
   14cc4:	65542072 	.word	0x65542072
   14cc8:	7265706d 	.word	0x7265706d
   14ccc:	72757461 	.word	0x72757461
   14cd0:	65532065 	.word	0x65532065
   14cd4:	696f7074 	.word	0x696f7074
   14cd8:	203a746e 	.word	0x203a746e
   14cdc:	00000000 	.word	0x00000000
   14ce0:	202d2035 	.word	0x202d2035
   14ce4:	6c6c6543 	.word	0x6c6c6543
   14ce8:	6c614220 	.word	0x6c614220
   14cec:	65636e61 	.word	0x65636e61
   14cf0:	6c6f5620 	.word	0x6c6f5620
   14cf4:	65676174 	.word	0x65676174
   14cf8:	74655320 	.word	0x74655320
   14cfc:	6e696f70 	.word	0x6e696f70
   14d00:	00203a74 	.word	0x00203a74
   14d04:	202d2036 	.word	0x202d2036
   14d08:	616c6142 	.word	0x616c6142
   14d0c:	2065636e 	.word	0x2065636e
   14d10:	746c6f56 	.word	0x746c6f56
   14d14:	20656761 	.word	0x20656761
   14d18:	74737948 	.word	0x74737948
   14d1c:	69737265 	.word	0x69737265
   14d20:	00203a73 	.word	0x00203a73
   14d24:	202d2037 	.word	0x202d2037
   14d28:	42206841 	.word	0x42206841
   14d2c:	65747461 	.word	0x65747461
   14d30:	43207972 	.word	0x43207972
   14d34:	63617061 	.word	0x63617061
   14d38:	3a797469 	.word	0x3a797469
   14d3c:	00000020 	.word	0x00000020
   14d40:	00006841 	.word	0x00006841
   14d44:	202d2038 	.word	0x202d2038
   14d48:	6b636150 	.word	0x6b636150
   14d4c:	78614d20 	.word	0x78614d20
   14d50:	73694420 	.word	0x73694420
   14d54:	72616863 	.word	0x72616863
   14d58:	203a6567 	.word	0x203a6567
   14d5c:	00000000 	.word	0x00000000
   14d60:	202d2039 	.word	0x202d2039
   14d64:	6c6c6543 	.word	0x6c6c6543
   14d68:	73694420 	.word	0x73694420
   14d6c:	72616863 	.word	0x72616863
   14d70:	56206567 	.word	0x56206567
   14d74:	61746c6f 	.word	0x61746c6f
   14d78:	4c206567 	.word	0x4c206567
   14d7c:	74696d69 	.word	0x74696d69
   14d80:	74655320 	.word	0x74655320
   14d84:	6e696f70 	.word	0x6e696f70
   14d88:	00203a74 	.word	0x00203a74
   14d8c:	202d2030 	.word	0x202d2030
   14d90:	76616c53 	.word	0x76616c53
   14d94:	74732065 	.word	0x74732065
   14d98:	676e6972 	.word	0x676e6972
   14d9c:	6e692073 	.word	0x6e692073
   14da0:	72617020 	.word	0x72617020
   14da4:	656c6c61 	.word	0x656c6c61
   14da8:	00203a6c 	.word	0x00203a6c
   14dac:	202d2061 	.word	0x202d2061
   14db0:	6c6c6543 	.word	0x6c6c6543
   14db4:	6e692073 	.word	0x6e692073
   14db8:	72655320 	.word	0x72655320
   14dbc:	20736569 	.word	0x20736569
   14dc0:	20726570 	.word	0x20726570
   14dc4:	69727453 	.word	0x69727453
   14dc8:	203a676e 	.word	0x203a676e
   14dcc:	00000000 	.word	0x00000000
   14dd0:	202d2062 	.word	0x202d2062
   14dd4:	70746573 	.word	0x70746573
   14dd8:	746e696f 	.word	0x746e696f
   14ddc:	203a3120 	.word	0x203a3120
   14de0:	00000000 	.word	0x00000000
   14de4:	202d2063 	.word	0x202d2063
   14de8:	20434f53 	.word	0x20434f53
   14dec:	70746573 	.word	0x70746573
   14df0:	746e696f 	.word	0x746e696f
   14df4:	003a3120 	.word	0x003a3120
   14df8:	00000025 	.word	0x00000025
   14dfc:	202d2064 	.word	0x202d2064
   14e00:	70746573 	.word	0x70746573
   14e04:	746e696f 	.word	0x746e696f
   14e08:	203a3220 	.word	0x203a3220
   14e0c:	00000000 	.word	0x00000000
   14e10:	202d2065 	.word	0x202d2065
   14e14:	20434f53 	.word	0x20434f53
   14e18:	70746573 	.word	0x70746573
   14e1c:	746e696f 	.word	0x746e696f
   14e20:	203a3220 	.word	0x203a3220
   14e24:	00000000 	.word	0x00000000
   14e28:	202d2067 	.word	0x202d2067
   14e2c:	726f7453 	.word	0x726f7453
   14e30:	20656761 	.word	0x20656761
   14e34:	70746553 	.word	0x70746553
   14e38:	746e696f 	.word	0x746e696f
   14e3c:	0000203a 	.word	0x0000203a
   14e40:	202d2068 	.word	0x202d2068
   14e44:	63736944 	.word	0x63736944
   14e48:	67726168 	.word	0x67726168
   14e4c:	75432065 	.word	0x75432065
   14e50:	6e657272 	.word	0x6e657272
   14e54:	61542074 	.word	0x61542074
   14e58:	20726570 	.word	0x20726570
   14e5c:	7366664f 	.word	0x7366664f
   14e60:	203a7465 	.word	0x203a7465
   14e64:	00000000 	.word	0x00000000
   14e68:	202d206a 	.word	0x202d206a
   14e6c:	63736944 	.word	0x63736944
   14e70:	67726168 	.word	0x67726168
   14e74:	75432065 	.word	0x75432065
   14e78:	6e657272 	.word	0x6e657272
   14e7c:	65542074 	.word	0x65542074
   14e80:	7265706d 	.word	0x7265706d
   14e84:	72757461 	.word	0x72757461
   14e88:	65442065 	.word	0x65442065
   14e8c:	65746172 	.word	0x65746172
   14e90:	00203a20 	.word	0x00203a20
   14e94:	202d206b 	.word	0x202d206b
   14e98:	6c6c6543 	.word	0x6c6c6543
   14e9c:	73694420 	.word	0x73694420
   14ea0:	72616863 	.word	0x72616863
   14ea4:	56206567 	.word	0x56206567
   14ea8:	61746c6f 	.word	0x61746c6f
   14eac:	48206567 	.word	0x48206567
   14eb0:	65747379 	.word	0x65747379
   14eb4:	69736572 	.word	0x69736572
   14eb8:	00203a73 	.word	0x00203a73
   14ebc:	554e454d 	.word	0x554e454d
   14ec0:	00000000 	.word	0x00000000
   14ec4:	75626544 	.word	0x75626544
   14ec8:	6e696767 	.word	0x6e696767
   14ecc:	61502067 	.word	0x61502067
   14ed0:	64657375 	.word	0x64657375
   14ed4:	00000000 	.word	0x00000000
   14ed8:	6d726946 	.word	0x6d726946
   14edc:	65726177 	.word	0x65726177
   14ee0:	72655620 	.word	0x72655620
   14ee4:	6e6f6973 	.word	0x6e6f6973
   14ee8:	00203a20 	.word	0x00203a20
   14eec:	202d2062 	.word	0x202d2062
   14ef0:	74746142 	.word	0x74746142
   14ef4:	20797265 	.word	0x20797265
   14ef8:	74746553 	.word	0x74746553
   14efc:	73676e69 	.word	0x73676e69
   14f00:	00000000 	.word	0x00000000
   14f04:	202d2061 	.word	0x202d2061
   14f08:	72616c41 	.word	0x72616c41
   14f0c:	6e61206d 	.word	0x6e61206d
   14f10:	61572064 	.word	0x61572064
   14f14:	6e696e72 	.word	0x6e696e72
   14f18:	65532067 	.word	0x65532067
   14f1c:	6e697474 	.word	0x6e697474
   14f20:	00007367 	.word	0x00007367
   14f24:	202d2065 	.word	0x202d2065
   14f28:	72616843 	.word	0x72616843
   14f2c:	676e6967 	.word	0x676e6967
   14f30:	74655320 	.word	0x74655320
   14f34:	676e6974 	.word	0x676e6974
   14f38:	00000073 	.word	0x00000073
   14f3c:	202d2063 	.word	0x202d2063
   14f40:	72727543 	.word	0x72727543
   14f44:	20746e65 	.word	0x20746e65
   14f48:	736e6553 	.word	0x736e6553
   14f4c:	4320726f 	.word	0x4320726f
   14f50:	62696c61 	.word	0x62696c61
   14f54:	69746172 	.word	0x69746172
   14f58:	00006e6f 	.word	0x00006e6f
   14f5c:	202d206b 	.word	0x202d206b
   14f60:	746e6f43 	.word	0x746e6f43
   14f64:	6f746361 	.word	0x6f746361
   14f68:	6e612072 	.word	0x6e612072
   14f6c:	61472064 	.word	0x61472064
   14f70:	20656775 	.word	0x20656775
   14f74:	74746553 	.word	0x74746553
   14f78:	73676e69 	.word	0x73676e69
   14f7c:	00000000 	.word	0x00000000
   14f80:	202d2069 	.word	0x202d2069
   14f84:	6f6e6749 	.word	0x6f6e6749
   14f88:	56206572 	.word	0x56206572
   14f8c:	65756c61 	.word	0x65756c61
   14f90:	74655320 	.word	0x74655320
   14f94:	676e6974 	.word	0x676e6974
   14f98:	00000073 	.word	0x00000073
   14f9c:	202d2064 	.word	0x202d2064
   14fa0:	75626544 	.word	0x75626544
   14fa4:	65532067 	.word	0x65532067
   14fa8:	6e697474 	.word	0x6e697474
   14fac:	00007367 	.word	0x00007367
   14fb0:	202d2071 	.word	0x202d2071
   14fb4:	74697865 	.word	0x74697865
   14fb8:	6e656d20 	.word	0x6e656d20
   14fbc:	ffff0075 	.word	0xffff0075
   14fc0:	0020416d 	.word	0x0020416d
   14fc4:	65747845 	.word	0x65747845
   14fc8:	6465646e 	.word	0x6465646e
   14fcc:	3a444920 	.word	0x3a444920
   14fd0:	25783020 	.word	0x25783020
   14fd4:	586c382e 	.word	0x586c382e
   14fd8:	4c442020 	.word	0x4c442020
   14fdc:	25203a43 	.word	0x25203a43
   14fe0:	20206431 	.word	0x20206431
   14fe4:	61746144 	.word	0x61746144
   14fe8:	0000003a 	.word	0x0000003a
   14fec:	2578302c 	.word	0x2578302c
   14ff0:	586c332e 	.word	0x586c332e
   14ff4:	6c61662c 	.word	0x6c61662c
   14ff8:	252c6573 	.word	0x252c6573
   14ffc:	00006431 	.word	0x00006431
   15000:	4d455220 	.word	0x4d455220
   15004:	2045544f 	.word	0x2045544f
   15008:	55514552 	.word	0x55514552
   1500c:	20545345 	.word	0x20545345
   15010:	4d415246 	.word	0x4d415246
   15014:	00000045 	.word	0x00000045
   15018:	7830202c 	.word	0x7830202c
   1501c:	58322e25 	.word	0x58322e25
   15020:	ffffff00 	.word	0xffffff00
   15024:	75706e49 	.word	0x75706e49
   15028:	00203a74 	.word	0x00203a74
   1502c:	4e4f2031 	.word	0x4e4f2031
   15030:	00002020 	.word	0x00002020
   15034:	464f2031 	.word	0x464f2031
   15038:	00002046 	.word	0x00002046
   1503c:	4e4f2032 	.word	0x4e4f2032
   15040:	00002020 	.word	0x00002020
   15044:	464f2032 	.word	0x464f2032
   15048:	00002046 	.word	0x00002046
   1504c:	4e4f2033 	.word	0x4e4f2033
   15050:	00002020 	.word	0x00002020
   15054:	464f2033 	.word	0x464f2033
   15058:	00002046 	.word	0x00002046
   1505c:	4e4f2034 	.word	0x4e4f2034
   15060:	00002020 	.word	0x00002020
   15064:	464f2034 	.word	0x464f2034
   15068:	ff002046 	.word	0xff002046
   1506c:	74617473 	.word	0x74617473
   15070:	7478742e 	.word	0x7478742e
   15074:	0000003d 	.word	0x0000003d
   15078:	74634120 	.word	0x74634120
   1507c:	20657669 	.word	0x20657669
   15080:	00000000 	.word	0x00000000
   15084:	2e636f73 	.word	0x2e636f73
   15088:	3d6c6176 	.word	0x3d6c6176
   1508c:	00000000 	.word	0x00000000
   15090:	31636f73 	.word	0x31636f73
   15094:	6c61762e 	.word	0x6c61762e
   15098:	0000003d 	.word	0x0000003d
   1509c:	72727563 	.word	0x72727563
   150a0:	2e746e65 	.word	0x2e746e65
   150a4:	3d6c6176 	.word	0x3d6c6176
   150a8:	00000000 	.word	0x00000000
   150ac:	706d6574 	.word	0x706d6574
   150b0:	6c61762e 	.word	0x6c61762e
   150b4:	0000003d 	.word	0x0000003d
   150b8:	706d6574 	.word	0x706d6574
   150bc:	2e776f6c 	.word	0x2e776f6c
   150c0:	3d6c6176 	.word	0x3d6c6176
   150c4:	00000000 	.word	0x00000000
   150c8:	706d6574 	.word	0x706d6574
   150cc:	68676968 	.word	0x68676968
   150d0:	6c61762e 	.word	0x6c61762e
   150d4:	0000003d 	.word	0x0000003d
   150d8:	746c6f76 	.word	0x746c6f76
   150dc:	6c61762e 	.word	0x6c61762e
   150e0:	0000003d 	.word	0x0000003d
   150e4:	63776f6c 	.word	0x63776f6c
   150e8:	2e6c6c65 	.word	0x2e6c6c65
   150ec:	3d6c6176 	.word	0x3d6c6176
   150f0:	00000000 	.word	0x00000000
   150f4:	68676968 	.word	0x68676968
   150f8:	6c6c6563 	.word	0x6c6c6563
   150fc:	6c61762e 	.word	0x6c61762e
   15100:	0000003d 	.word	0x0000003d
   15104:	6d726966 	.word	0x6d726966
   15108:	6c61762e 	.word	0x6c61762e
   1510c:	0000003d 	.word	0x0000003d
   15110:	6c6c6563 	.word	0x6c6c6563
   15114:	746c6564 	.word	0x746c6564
   15118:	61762e61 	.word	0x61762e61
   1511c:	ff003d6c 	.word	0xff003d6c
   15120:	63657250 	.word	0x63657250
   15124:	67726168 	.word	0x67726168
   15128:	21212165 	.word	0x21212165
   1512c:	00000000 	.word	0x00000000
   15130:	6e69614d 	.word	0x6e69614d
   15134:	216e4f20 	.word	0x216e4f20
   15138:	00002121 	.word	0x00002121
   1513c:	7265764f 	.word	0x7265764f
   15140:	6c6f5620 	.word	0x6c6f5620
   15144:	65676174 	.word	0x65676174
   15148:	69725420 	.word	0x69725420
   1514c:	00000070 	.word	0x00000070
   15150:	65736552 	.word	0x65736552
   15154:	764f2074 	.word	0x764f2074
   15158:	56207265 	.word	0x56207265
   1515c:	61746c6f 	.word	0x61746c6f
   15160:	54206567 	.word	0x54206567
   15164:	20706972 	.word	0x20706972
   15168:	20746f4e 	.word	0x20746f4e
   1516c:	72616843 	.word	0x72616843
   15170:	00646567 	.word	0x00646567
   15174:	65646e55 	.word	0x65646e55
   15178:	6f562072 	.word	0x6f562072
   1517c:	6761746c 	.word	0x6761746c
   15180:	72542065 	.word	0x72542065
   15184:	00007069 	.word	0x00007069
   15188:	65736552 	.word	0x65736552
   1518c:	6e552074 	.word	0x6e552074
   15190:	20726564 	.word	0x20726564
   15194:	746c6f56 	.word	0x746c6f56
   15198:	20656761 	.word	0x20656761
   1519c:	70697254 	.word	0x70697254
   151a0:	00000000 	.word	0x00000000
   151a4:	21202020 	.word	0x21202020
   151a8:	55202121 	.word	0x55202121
   151ac:	7265646e 	.word	0x7265646e
   151b0:	746c6f76 	.word	0x746c6f76
   151b4:	20656761 	.word	0x20656761
   151b8:	6c756146 	.word	0x6c756146
   151bc:	21212074 	.word	0x21212074
   151c0:	00000021 	.word	0x00000021
   151c4:	21202020 	.word	0x21202020
   151c8:	53202121 	.word	0x53202121
   151cc:	65697265 	.word	0x65697265
   151d0:	65432073 	.word	0x65432073
   151d4:	20736c6c 	.word	0x20736c6c
   151d8:	6c756146 	.word	0x6c756146
   151dc:	21212074 	.word	0x21212074
   151e0:	00000021 	.word	0x00000021
   151e4:	21202020 	.word	0x21202020
   151e8:	4d202121 	.word	0x4d202121
   151ec:	4c55444f 	.word	0x4c55444f
   151f0:	494d2045 	.word	0x494d2045
   151f4:	4e495353 	.word	0x4e495353
   151f8:	21212047 	.word	0x21212047
   151fc:	ffff0021 	.word	0xffff0021
   15200:	72617453 	.word	0x72617453
   15204:	676e6974 	.word	0x676e6974
   15208:	21707520 	.word	0x21707520
   1520c:	00000000 	.word	0x00000000
   15210:	706d6953 	.word	0x706d6953
   15214:	20534d42 	.word	0x20534d42
   15218:	56203256 	.word	0x56203256
   1521c:	00000057 	.word	0x00000057
   15220:	73616552 	.word	0x73616552
   15224:	66206e6f 	.word	0x66206e6f
   15228:	6c20726f 	.word	0x6c20726f
   1522c:	20747361 	.word	0x20747361
   15230:	65736552 	.word	0x65736552
   15234:	00203a74 	.word	0x00203a74
   15238:	706f7453 	.word	0x706f7453
   1523c:	646f4d20 	.word	0x646f4d20
   15240:	63412065 	.word	0x63412065
   15244:	776f6e6b 	.word	0x776f6e6b
   15248:	6764656c 	.word	0x6764656c
   1524c:	72452065 	.word	0x72452065
   15250:	20726f72 	.word	0x20726f72
   15254:	65736552 	.word	0x65736552
   15258:	00000074 	.word	0x00000074
   1525c:	2d4d444d 	.word	0x2d4d444d
   15260:	52205041 	.word	0x52205041
   15264:	74657365 	.word	0x74657365
   15268:	00000000 	.word	0x00000000
   1526c:	74666f53 	.word	0x74666f53
   15270:	65726177 	.word	0x65726177
   15274:	73655220 	.word	0x73655220
   15278:	00007465 	.word	0x00007465
   1527c:	65726f43 	.word	0x65726f43
   15280:	636f4c20 	.word	0x636f4c20
   15284:	2070756b 	.word	0x2070756b
   15288:	6e657645 	.word	0x6e657645
   1528c:	65522074 	.word	0x65522074
   15290:	00746573 	.word	0x00746573
   15294:	65776f50 	.word	0x65776f50
   15298:	6e6f2d72 	.word	0x6e6f2d72
   1529c:	73655220 	.word	0x73655220
   152a0:	00007465 	.word	0x00007465
   152a4:	65747845 	.word	0x65747845
   152a8:	6c616e72 	.word	0x6c616e72
   152ac:	6e695020 	.word	0x6e695020
   152b0:	73655220 	.word	0x73655220
   152b4:	00007465 	.word	0x00007465
   152b8:	63746157 	.word	0x63746157
   152bc:	676f6468 	.word	0x676f6468
   152c0:	504f4328 	.word	0x504f4328
   152c4:	65522029 	.word	0x65522029
   152c8:	00746573 	.word	0x00746573
   152cc:	73736f4c 	.word	0x73736f4c
   152d0:	20666f20 	.word	0x20666f20
   152d4:	65747845 	.word	0x65747845
   152d8:	6c616e72 	.word	0x6c616e72
   152dc:	6f6c4320 	.word	0x6f6c4320
   152e0:	52206b63 	.word	0x52206b63
   152e4:	74657365 	.word	0x74657365
   152e8:	00000000 	.word	0x00000000
   152ec:	73736f4c 	.word	0x73736f4c
   152f0:	20666f20 	.word	0x20666f20
   152f4:	6b636f4c 	.word	0x6b636f4c
   152f8:	206e6920 	.word	0x206e6920
   152fc:	204c4c50 	.word	0x204c4c50
   15300:	65736552 	.word	0x65736552
   15304:	00000074 	.word	0x00000074
   15308:	2d776f4c 	.word	0x2d776f4c
   1530c:	746c6f76 	.word	0x746c6f76
   15310:	20656761 	.word	0x20656761
   15314:	65746544 	.word	0x65746544
   15318:	52207463 	.word	0x52207463
   1531c:	74657365 	.word	0x74657365
   15320:	00000000 	.word	0x00000000
   15324:	72617453 	.word	0x72617453
   15328:	20646574 	.word	0x20646574
   1532c:	69726573 	.word	0x69726573
   15330:	69206c61 	.word	0x69206c61
   15334:	7265746e 	.word	0x7265746e
   15338:	65636166 	.word	0x65636166
   1533c:	206f7420 	.word	0x206f7420
   15340:	2e534d42 	.word	0x2e534d42
   15344:	00000000 	.word	0x00000000
   15348:	6f636552 	.word	0x6f636552
   1534c:	79726576 	.word	0x79726576
   15350:	434f5320 	.word	0x434f5320
   15354:	ff00203a 	.word	0xff00203a
   15358:	726f6241 	.word	0x726f6241
   1535c:	6e692074 	.word	0x6e692074
   15360:	4e414320 	.word	0x4e414320
   15364:	67656220 	.word	0x67656220
   15368:	202e6e69 	.word	0x202e6e69
   1536c:	6c756f43 	.word	0x6c756f43
   15370:	74276e64 	.word	0x74276e64
   15374:	6e696620 	.word	0x6e696620
   15378:	20612064 	.word	0x20612064
   1537c:	74697573 	.word	0x74697573
   15380:	656c6261 	.word	0x656c6261
   15384:	75616220 	.word	0x75616220
   15388:	6f632064 	.word	0x6f632064
   1538c:	6769666e 	.word	0x6769666e
   15390:	ffff0021 	.word	0xffff0021

00015394 <ADC::diff_table_ADC0>:
   15394:	03248022                                ".$.

00015398 <ADC::diff_table_ADC1>:
   15398:	80240322                                ".$.

0001539c <ADC::channel2sc1aADC0>:
   1539c:	09080e05 07060c0d 1300040f 0e051f03     ................
   153ac:	0c0d0908 040f0706 1f1f1f1f 1f1f1f1f     ................
   153bc:	53401f1f 161a5f43 1e1d1b17              ..@SC_......

000153c8 <ADC::channel2sc1aADC1>:
   153c8:	09081f1f 1f1f1f1f 1f031f1f 1f1f1300     ................
   153d8:	1f1f0908 1f1f1f1f 05851f1f 84070604     ................
   153e8:	5f431f1f 121a5340 1e1d1b1f              ..C_@S......

000153f4 <SPIClass::spi0_hardware>:
   153f4:	4004803c 00001000 00001a04 00007fff     <..@............
   15404:	00001011 000091dd 0000080c 00000200     ................
   15414:	00000200 0000070b 00000240 00000200     ........@.......
   15424:	00000e0d 00000240 00000200 0609020a     ....@...........
   15434:	16151714 0000000f 00000200 00000200     ................
   15444:	00000200 00000200 00000200 00000200     ................
   15454:	00000200 00000200 00000200 02020101     ................
   15464:	08080404 00000010                       ........

0001546c <_serialEvent_default>:
   1546c:	ffffff00                                ....

00015470 <vtable for HardwareSerial2>:
	...
   15478:	00009435 00009459 000094e9 000094e5     5...Y...........
   15488:	000094e1 000094dd 000094d9 000093fd     ................
   15498:	000094b9 000094b5 000094ad 000094a5     ................
   154a8:	0000949d 0000948d 0000947d 00009479     ........}...y...
   154b8:	00009471 00009469 0000950d 0000952d     q...i.......-...
   154c8:	0000954d 000094ed 00009441 00009429     M.......A...)...

000154d8 <vtable for HardwareSerial3>:
	...
   154e0:	000095a5 000095c9 00009659 00009655     ........Y...U...
   154f0:	00009651 0000964d 00009649 0000956d     Q...M...I...m...
   15500:	00009629 00009625 0000961d 00009615     )...%...........
   15510:	0000960d 000095fd 000095ed 000095e9     ................
   15520:	000095e1 000095d9 0000967d 0000969d     ........}.......
   15530:	000096bd 0000965d 000095b1 00009599     ....]...........
   15540:	006e616e 00666e69 0066766f 037ff06f     nan.inf.ovf.o...
   15550:	78037003 0f80f013 4770d0fb              .p.x......pG

0001555c <CSWTCH.39>:
   1555c:	00000008 0000000c 0000000a 00000009     ................
   1556c:	0000000b                                ....

00015570 <digital_pin_to_info_PGM>:
   15570:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
   15580:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
   15590:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
   155a0:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
   155b0:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
   155c0:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
   155d0:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
   155e0:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
   155f0:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
   15600:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
   15610:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
   15620:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
   15630:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
   15640:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
   15650:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
   15660:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
   15670:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@

00015680 <vtable for usb_serial_class>:
	...
   15688:	0000c09d 0000c095 0000c091 0000c08d     ................
   15698:	0000c089 0000c085 0000c081 0000c07d     ............}...

000156a8 <usb_descriptor_list>:
   156a8:	00000100 1fff8a58 00000012 00000200     ....X...........
   156b8:	1fff8a14 00000043 00000300 1fff8a6c     ....C.......l...
   156c8:	00000000 04090301 1fff8a70 00000000     ........p.......
   156d8:	04090302 1fff8a88 00000000 04090303     ................
   156e8:	1fff8aa0 00000000 00000000 00000000     ................
   156f8:	00000000                                ....

000156fc <usb_endpoint_config_table>:
   156fc:	15191500 3f000000 bf000000 3f317180     .......?.....q1?
   1570c:	bf317180 3717f7d1 b717f7d1              .q1....7....

00015718 <_ctype_>:
   15718:	20202000 20202020 28282020 20282828     .         ((((( 
   15728:	20202020 20202020 20202020 20202020                     
   15738:	10108820 10101010 10101010 10101010      ...............
   15748:	04040410 04040404 10040404 10101010     ................
   15758:	41411010 41414141 01010101 01010101     ..AAAAAA........
   15768:	01010101 01010101 01010101 10101010     ................
   15778:	42421010 42424242 02020202 02020202     ..BBBBBB........
   15788:	02020202 02020202 02020202 10101010     ................
   15798:	00000020 00000000 00000000 00000000      ...............
	...
   15818:	ffffff00 435f434c 414c4c4f 00004554     ....LC_COLLATE..
   15828:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
   15838:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
   15848:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
   15858:	41535345 00534547 6c6c6142 7320636f     ESSAGES.Balloc s
   15868:	65636375 64656465 00000000 7461642f     ucceeded..../dat
   15878:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   15888:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   15898:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   158a8:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   158b8:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
   158c8:	2e636572 ffff0063                       rec.c...

000158d0 <__mprec_bigtens>:
   158d0:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   158e0:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   158f0:	7f73bf3c 75154fdd                       <.s..O.u

000158f8 <__mprec_tens>:
   158f8:	00000000 3ff00000 00000000 40240000     .......?......$@
   15908:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   15918:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   15928:	00000000 412e8480 00000000 416312d0     .......A......cA
   15938:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   15948:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   15958:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   15968:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   15978:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   15988:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   15998:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   159a8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   159b8:	79d99db4 44ea7843 00000005 00000019     ...yCx.D........
   159c8:	0000007d 00464e49 004e414e 33323130     }...INF.NAN.0123
   159d8:	37363534 62613938 66656463 00000000     456789abcdef....
   159e8:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   159f8:	00000000 6c756e28 ff00296c 20202020     ....(null)..    
   15a08:	20202020 20202020 20202020 30303030                 0000
   15a18:	30303030 30303030 30303030 7566202c     000000000000, fu
   15a28:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   15a38:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   15a48:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   15a58:	2520656e 25732564 ff000a73 69666e49     ne %d%s%s...Infi
   15a68:	7974696e 00000000 004e614e 7461642f     nity....NaN./dat
   15a78:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   15a88:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   15a98:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   15aa8:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   15ab8:	696c2f62 732f6362 696c6474 74642f62     b/libc/stdlib/dt
   15ac8:	632e616f ffffff00 20202020 20202020     oa.c....        
   15ad8:	20202020 20202020 30303030 30303030             00000000
   15ae8:	30303030 30303030                       00000000

00015af0 <_init>:
   15af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15af2:	bf00      	nop
   15af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   15af6:	bc08      	pop	{r3}
   15af8:	469e      	mov	lr, r3
   15afa:	4770      	bx	lr

00015afc <__init_array_start>:
   15afc:	0000e41d 	.word	0x0000e41d

00015b00 <__frame_dummy_init_array_entry>:
   15b00:	00000435 00007a2d 000089b1 000091ed     5...-z..........

Disassembly of section .fini:

00015b10 <_fini>:
   15b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15b12:	bf00      	nop

Disassembly of section .data:

1fff8720 <port_E_isr>:
PORT_ISR_FUNCTION_CLZ(E)
1fff8720:	b538      	push	{r3, r4, r5, lr}
1fff8722:	4b0a      	ldr	r3, [pc, #40]	; (1fff874c <port_E_isr+0x2c>)
1fff8724:	4d0a      	ldr	r5, [pc, #40]	; (1fff8750 <port_E_isr+0x30>)
1fff8726:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff872a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff872e:	e005      	b.n	1fff873c <port_E_isr+0x1c>
1fff8730:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8734:	4798      	blx	r3
1fff8736:	1e63      	subs	r3, r4, #1
1fff8738:	401c      	ands	r4, r3
1fff873a:	d005      	beq.n	1fff8748 <port_E_isr+0x28>
1fff873c:	fa94 f3a4 	rbit	r3, r4
1fff8740:	fab3 f383 	clz	r3, r3
1fff8744:	2c00      	cmp	r4, #0
1fff8746:	d1f3      	bne.n	1fff8730 <port_E_isr+0x10>
1fff8748:	bd38      	pop	{r3, r4, r5, pc}
1fff874a:	bf00      	nop
1fff874c:	4004d000 	.word	0x4004d000
1fff8750:	1fff89c8 	.word	0x1fff89c8

1fff8754 <port_D_isr>:
PORT_ISR_FUNCTION_CLZ(D)
1fff8754:	b538      	push	{r3, r4, r5, lr}
1fff8756:	4b0a      	ldr	r3, [pc, #40]	; (1fff8780 <port_D_isr+0x2c>)
1fff8758:	4d0a      	ldr	r5, [pc, #40]	; (1fff8784 <port_D_isr+0x30>)
1fff875a:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff875e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8762:	e005      	b.n	1fff8770 <port_D_isr+0x1c>
1fff8764:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8768:	4798      	blx	r3
1fff876a:	1e63      	subs	r3, r4, #1
1fff876c:	401c      	ands	r4, r3
1fff876e:	d005      	beq.n	1fff877c <port_D_isr+0x28>
1fff8770:	fa94 f3a4 	rbit	r3, r4
1fff8774:	fab3 f383 	clz	r3, r3
1fff8778:	2c00      	cmp	r4, #0
1fff877a:	d1f3      	bne.n	1fff8764 <port_D_isr+0x10>
1fff877c:	bd38      	pop	{r3, r4, r5, pc}
1fff877e:	bf00      	nop
1fff8780:	4004c000 	.word	0x4004c000
1fff8784:	1fff89a8 	.word	0x1fff89a8

1fff8788 <port_C_isr>:
PORT_ISR_FUNCTION_CLZ(C)
1fff8788:	b538      	push	{r3, r4, r5, lr}
1fff878a:	4b0a      	ldr	r3, [pc, #40]	; (1fff87b4 <port_C_isr+0x2c>)
1fff878c:	4d0a      	ldr	r5, [pc, #40]	; (1fff87b8 <port_C_isr+0x30>)
1fff878e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff8792:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8796:	e005      	b.n	1fff87a4 <port_C_isr+0x1c>
1fff8798:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff879c:	4798      	blx	r3
1fff879e:	1e63      	subs	r3, r4, #1
1fff87a0:	401c      	ands	r4, r3
1fff87a2:	d005      	beq.n	1fff87b0 <port_C_isr+0x28>
1fff87a4:	fa94 f3a4 	rbit	r3, r4
1fff87a8:	fab3 f383 	clz	r3, r3
1fff87ac:	2c00      	cmp	r4, #0
1fff87ae:	d1f3      	bne.n	1fff8798 <port_C_isr+0x10>
1fff87b0:	bd38      	pop	{r3, r4, r5, pc}
1fff87b2:	bf00      	nop
1fff87b4:	4004b000 	.word	0x4004b000
1fff87b8:	1fff8978 	.word	0x1fff8978

1fff87bc <port_B_isr>:
PORT_ISR_FUNCTION_CLZ(B)
1fff87bc:	b538      	push	{r3, r4, r5, lr}
1fff87be:	4b0a      	ldr	r3, [pc, #40]	; (1fff87e8 <port_B_isr+0x2c>)
1fff87c0:	4d0a      	ldr	r5, [pc, #40]	; (1fff87ec <port_B_isr+0x30>)
1fff87c2:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff87c6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff87ca:	e005      	b.n	1fff87d8 <port_B_isr+0x1c>
1fff87cc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff87d0:	4798      	blx	r3
1fff87d2:	1e63      	subs	r3, r4, #1
1fff87d4:	401c      	ands	r4, r3
1fff87d6:	d005      	beq.n	1fff87e4 <port_B_isr+0x28>
1fff87d8:	fa94 f3a4 	rbit	r3, r4
1fff87dc:	fab3 f383 	clz	r3, r3
1fff87e0:	2c00      	cmp	r4, #0
1fff87e2:	d1f3      	bne.n	1fff87cc <port_B_isr+0x10>
1fff87e4:	bd38      	pop	{r3, r4, r5, pc}
1fff87e6:	bf00      	nop
1fff87e8:	4004a000 	.word	0x4004a000
1fff87ec:	1fff8928 	.word	0x1fff8928

1fff87f0 <port_A_isr>:
PORT_ISR_FUNCTION_CLZ(A)
1fff87f0:	b538      	push	{r3, r4, r5, lr}
1fff87f2:	4b0a      	ldr	r3, [pc, #40]	; (1fff881c <port_A_isr+0x2c>)
1fff87f4:	4d0a      	ldr	r5, [pc, #40]	; (1fff8820 <port_A_isr+0x30>)
1fff87f6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff87fa:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff87fe:	e005      	b.n	1fff880c <port_A_isr+0x1c>
1fff8800:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8804:	4798      	blx	r3
1fff8806:	1e63      	subs	r3, r4, #1
1fff8808:	401c      	ands	r4, r3
1fff880a:	d005      	beq.n	1fff8818 <port_A_isr+0x28>
1fff880c:	fa94 f3a4 	rbit	r3, r4
1fff8810:	fab3 f383 	clz	r3, r3
1fff8814:	2c00      	cmp	r4, #0
1fff8816:	d1f3      	bne.n	1fff8800 <port_A_isr+0x10>
1fff8818:	bd38      	pop	{r3, r4, r5, pc}
1fff881a:	bf00      	nop
1fff881c:	40049000 	.word	0x40049000
1fff8820:	1fff88f0 	.word	0x1fff88f0

1fff8824 <Logger::logLevel>:
1fff8824:	00000001                                ....

1fff8828 <SOC>:
1fff8828:	00000064                                d...

1fff882c <SOH>:
1fff882c:	00000064                                d...

1fff8830 <bmsmanu>:
1fff8830:	504d4953 4f434520                       SIMP ECO

1fff8838 <bmsname>:
1fff8838:	504d4953 534d4220                       SIMP BMS

1fff8840 <chargerid1>:
1fff8840:	00000618                                ....

1fff8844 <chargerid2>:
1fff8844:	00000638                                8...

1fff8848 <controlid>:
1fff8848:	000000ba                                ....

1fff884c <debug>:
1fff884c:	00000001                                ....

1fff8850 <debugdigits>:
1fff8850:	00000002                                ....

1fff8854 <filterFrequency>:
1fff8854:	40a00000                                ...@

1fff8858 <firmver>:
1fff8858:	0003853f                                ?...

1fff885c <maxac1>:
1fff885c:	00000010                                ....

1fff8860 <maxac2>:
1fff8860:	0000000a                                ....

1fff8864 <ncharger>:
1fff8864:	00000001                                ....

1fff8868 <pulltime>:
1fff8868:	000003e8                                ....

1fff886c <pwmcurmax>:
1fff886c:	000000c8                                ....

1fff8870 <pwmcurmid>:
1fff8870:	00000032                                2...

1fff8874 <pwmfreq>:
1fff8874:	00003a98                                .:..

1fff8878 <sensor>:
1fff8878:	00000001                                ....

1fff887c <bitTimingTable>:
1fff887c:	01010000 01010100 01010201 02010202     ................
1fff888c:	03020103 02040202 02020502 06020305     ................
1fff889c:	03070203 03040702 07030407 05070405     ................
1fff88ac:	05060704 07060607 07070606 00070707     ................

1fff88bc <Serial2>:
1fff88bc:	00015478 00000000 000003e8 00000000     xT..............
1fff88cc:	0000b6fd                                ....

1fff88d0 <Serial3>:
1fff88d0:	000154e0 00000000 000003e8 00000000     .T..............
1fff88e0:	0000b701                                ....

1fff88e4 <analog_config_bits>:
1fff88e4:	                                         .

1fff88e5 <analog_num_average>:
1fff88e5:	                                         ...

1fff88e8 <__brkval>:
1fff88e8:	1fffd90c                                ....

1fff88ec <analog_write_res>:
1fff88ec:	00000008                                ....

1fff88f0 <isr_table_portA>:
1fff88f0:	0000a035 0000a035 0000a035 0000a035     5...5...5...5...
1fff8900:	0000a035 0000a035 0000a035 0000a035     5...5...5...5...
1fff8910:	0000a035 0000a035 0000a035 0000a035     5...5...5...5...
1fff8920:	0000a035 0000a035                       5...5...

1fff8928 <isr_table_portB>:
1fff8928:	0000a035 0000a035 0000a035 0000a035     5...5...5...5...
1fff8938:	0000a035 0000a035 0000a035 0000a035     5...5...5...5...
1fff8948:	0000a035 0000a035 0000a035 0000a035     5...5...5...5...
1fff8958:	0000a035 0000a035 0000a035 0000a035     5...5...5...5...
1fff8968:	0000a035 0000a035 0000a035 0000a035     5...5...5...5...

1fff8978 <isr_table_portC>:
1fff8978:	0000a035 0000a035 0000a035 0000a035     5...5...5...5...
1fff8988:	0000a035 0000a035 0000a035 0000a035     5...5...5...5...
1fff8998:	0000a035 0000a035 0000a035 0000a035     5...5...5...5...

1fff89a8 <isr_table_portD>:
1fff89a8:	0000a035 0000a035 0000a035 0000a035     5...5...5...5...
1fff89b8:	0000a035 0000a035 0000a035 0000a035     5...5...5...5...

1fff89c8 <isr_table_portE>:
1fff89c8:	0000a035 0000a035                       5...5...

1fff89d0 <rts_high_watermark_>:
1fff89d0:	00000028                                (...

1fff89d4 <rts_low_watermark_>:
1fff89d4:	0000001a                                ....

1fff89d8 <rx_buffer_total_size_>:
1fff89d8:	00000040                                @...

1fff89dc <rx_pin_num>:
1fff89dc:	00000009                                ....

1fff89e0 <tx_buffer_total_size_>:
1fff89e0:	00000028                                (...

1fff89e4 <tx_pin_num>:
1fff89e4:	0000000a                                ....

1fff89e8 <rts_high_watermark_>:
1fff89e8:	00000028                                (...

1fff89ec <rts_low_watermark_>:
1fff89ec:	0000001a                                ....

1fff89f0 <rx_buffer_total_size_>:
1fff89f0:	00000040                                @...

1fff89f4 <tx_buffer_total_size_>:
1fff89f4:	00000028                                (...

1fff89f8 <tx_pin_num>:
1fff89f8:	                                         .

1fff89f9 <_serialEvent2_default>:
1fff89f9:	                                         .

1fff89fa <_serialEvent3_default>:
1fff89fa:	                                         ..

1fff89fc <Serial>:
1fff89fc:	00015688 00000000 000003e8 00000000     .V..............

1fff8a0c <usb_buffer_available>:
1fff8a0c:	ffffffff                                ....

1fff8a10 <yield_active_check_flags>:
1fff8a10:	00000001                                ....

1fff8a14 <config_descriptor>:
1fff8a14:	00430209 c0000102 00040932 02020100     ..C.....2.......
1fff8a24:	24050001 05011000 01010124 06022404     ...$....$....$..
1fff8a34:	00062405 82050701 40001003 00010409     .$.........@....
1fff8a44:	00000a02 03050700 00004002 02840507     .........@......
1fff8a54:	00000040                                @...

1fff8a58 <device_descriptor>:
1fff8a58:	01100112 40000002 048316c0 02010275     .......@....u...
1fff8a68:	00000103                                ....

1fff8a6c <string0>:
1fff8a6c:	04090304                                ....

1fff8a70 <usb_string_manufacturer_name_default>:
1fff8a70:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
1fff8a80:	00690075 006f006e                       u.i.n.o.

1fff8a88 <usb_string_product_name_default>:
1fff8a88:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
1fff8a98:	00610069 0000006c                       i.a.l...

1fff8aa0 <usb_string_serial_number_default>:
1fff8aa0:	0000030c 00000000 00000000 00000000     ................
	...

1fff8ab8 <__malloc_av_>:
	...
1fff8ac0:	1fff8ab8 1fff8ab8 1fff8ac0 1fff8ac0     ................
1fff8ad0:	1fff8ac8 1fff8ac8 1fff8ad0 1fff8ad0     ................
1fff8ae0:	1fff8ad8 1fff8ad8 1fff8ae0 1fff8ae0     ................
1fff8af0:	1fff8ae8 1fff8ae8 1fff8af0 1fff8af0     ................
1fff8b00:	1fff8af8 1fff8af8 1fff8b00 1fff8b00     ................
1fff8b10:	1fff8b08 1fff8b08 1fff8b10 1fff8b10     ................
1fff8b20:	1fff8b18 1fff8b18 1fff8b20 1fff8b20     ........ ... ...
1fff8b30:	1fff8b28 1fff8b28 1fff8b30 1fff8b30     (...(...0...0...
1fff8b40:	1fff8b38 1fff8b38 1fff8b40 1fff8b40     8...8...@...@...
1fff8b50:	1fff8b48 1fff8b48 1fff8b50 1fff8b50     H...H...P...P...
1fff8b60:	1fff8b58 1fff8b58 1fff8b60 1fff8b60     X...X...`...`...
1fff8b70:	1fff8b68 1fff8b68 1fff8b70 1fff8b70     h...h...p...p...
1fff8b80:	1fff8b78 1fff8b78 1fff8b80 1fff8b80     x...x...........
1fff8b90:	1fff8b88 1fff8b88 1fff8b90 1fff8b90     ................
1fff8ba0:	1fff8b98 1fff8b98 1fff8ba0 1fff8ba0     ................
1fff8bb0:	1fff8ba8 1fff8ba8 1fff8bb0 1fff8bb0     ................
1fff8bc0:	1fff8bb8 1fff8bb8 1fff8bc0 1fff8bc0     ................
1fff8bd0:	1fff8bc8 1fff8bc8 1fff8bd0 1fff8bd0     ................
1fff8be0:	1fff8bd8 1fff8bd8 1fff8be0 1fff8be0     ................
1fff8bf0:	1fff8be8 1fff8be8 1fff8bf0 1fff8bf0     ................
1fff8c00:	1fff8bf8 1fff8bf8 1fff8c00 1fff8c00     ................
1fff8c10:	1fff8c08 1fff8c08 1fff8c10 1fff8c10     ................
1fff8c20:	1fff8c18 1fff8c18 1fff8c20 1fff8c20     ........ ... ...
1fff8c30:	1fff8c28 1fff8c28 1fff8c30 1fff8c30     (...(...0...0...
1fff8c40:	1fff8c38 1fff8c38 1fff8c40 1fff8c40     8...8...@...@...
1fff8c50:	1fff8c48 1fff8c48 1fff8c50 1fff8c50     H...H...P...P...
1fff8c60:	1fff8c58 1fff8c58 1fff8c60 1fff8c60     X...X...`...`...
1fff8c70:	1fff8c68 1fff8c68 1fff8c70 1fff8c70     h...h...p...p...
1fff8c80:	1fff8c78 1fff8c78 1fff8c80 1fff8c80     x...x...........
1fff8c90:	1fff8c88 1fff8c88 1fff8c90 1fff8c90     ................
1fff8ca0:	1fff8c98 1fff8c98 1fff8ca0 1fff8ca0     ................
1fff8cb0:	1fff8ca8 1fff8ca8 1fff8cb0 1fff8cb0     ................
1fff8cc0:	1fff8cb8 1fff8cb8 1fff8cc0 1fff8cc0     ................
1fff8cd0:	1fff8cc8 1fff8cc8 1fff8cd0 1fff8cd0     ................
1fff8ce0:	1fff8cd8 1fff8cd8 1fff8ce0 1fff8ce0     ................
1fff8cf0:	1fff8ce8 1fff8ce8 1fff8cf0 1fff8cf0     ................
1fff8d00:	1fff8cf8 1fff8cf8 1fff8d00 1fff8d00     ................
1fff8d10:	1fff8d08 1fff8d08 1fff8d10 1fff8d10     ................
1fff8d20:	1fff8d18 1fff8d18 1fff8d20 1fff8d20     ........ ... ...
1fff8d30:	1fff8d28 1fff8d28 1fff8d30 1fff8d30     (...(...0...0...
1fff8d40:	1fff8d38 1fff8d38 1fff8d40 1fff8d40     8...8...@...@...
1fff8d50:	1fff8d48 1fff8d48 1fff8d50 1fff8d50     H...H...P...P...
1fff8d60:	1fff8d58 1fff8d58 1fff8d60 1fff8d60     X...X...`...`...
1fff8d70:	1fff8d68 1fff8d68 1fff8d70 1fff8d70     h...h...p...p...
1fff8d80:	1fff8d78 1fff8d78 1fff8d80 1fff8d80     x...x...........
1fff8d90:	1fff8d88 1fff8d88 1fff8d90 1fff8d90     ................
1fff8da0:	1fff8d98 1fff8d98 1fff8da0 1fff8da0     ................
1fff8db0:	1fff8da8 1fff8da8 1fff8db0 1fff8db0     ................
1fff8dc0:	1fff8db8 1fff8db8 1fff8dc0 1fff8dc0     ................
1fff8dd0:	1fff8dc8 1fff8dc8 1fff8dd0 1fff8dd0     ................
1fff8de0:	1fff8dd8 1fff8dd8 1fff8de0 1fff8de0     ................
1fff8df0:	1fff8de8 1fff8de8 1fff8df0 1fff8df0     ................
1fff8e00:	1fff8df8 1fff8df8 1fff8e00 1fff8e00     ................
1fff8e10:	1fff8e08 1fff8e08 1fff8e10 1fff8e10     ................
1fff8e20:	1fff8e18 1fff8e18 1fff8e20 1fff8e20     ........ ... ...
1fff8e30:	1fff8e28 1fff8e28 1fff8e30 1fff8e30     (...(...0...0...
1fff8e40:	1fff8e38 1fff8e38 1fff8e40 1fff8e40     8...8...@...@...
1fff8e50:	1fff8e48 1fff8e48 1fff8e50 1fff8e50     H...H...P...P...
1fff8e60:	1fff8e58 1fff8e58 1fff8e60 1fff8e60     X...X...`...`...
1fff8e70:	1fff8e68 1fff8e68 1fff8e70 1fff8e70     h...h...p...p...
1fff8e80:	1fff8e78 1fff8e78 1fff8e80 1fff8e80     x...x...........
1fff8e90:	1fff8e88 1fff8e88 1fff8e90 1fff8e90     ................
1fff8ea0:	1fff8e98 1fff8e98 1fff8ea0 1fff8ea0     ................
1fff8eb0:	1fff8ea8 1fff8ea8 1fff8eb0 1fff8eb0     ................

1fff8ec0 <__malloc_sbrk_base>:
1fff8ec0:	ffffffff                                ....

1fff8ec4 <__malloc_trim_threshold>:
1fff8ec4:	00020000                                ....

1fff8ec8 <__sglue>:
1fff8ec8:	00000000 00000003 1fffd62c              ........,...

1fff8ed4 <__global_locale>:
1fff8ed4:	00000043 00000000 00000000 00000000     C...............
	...
1fff8ef4:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f14:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f34:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f54:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f74:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f94:	00000043 00000000 00000000 00000000     C...............
	...
1fff8fb4:	0000ee71 0000e6e9 00000000 00015718     q............W..
1fff8fc4:	000144a8 000143c4 000143c4 000143c4     .D...C...C...C..
1fff8fd4:	000143c4 000143c4 000143c4 000143c4     .C...C...C...C..
1fff8fe4:	000143c4 000143c4 ffffffff ffffffff     .C...C..........
1fff8ff4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
1fff901c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

1fff9040 <_impure_data>:
1fff9040:	00000000 1fffd62c 1fffd694 1fffd6fc     ....,...........
	...
1fff90d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
1fff90e8:	0005deec 0000000b 00000000 00000000     ................
	...

1fff9160 <_impure_ptr>:
1fff9160:	1fff9040                                @...

1fff9164 <__atexit_recursive_mutex>:
1fff9164:	1fffd76c                                l...
