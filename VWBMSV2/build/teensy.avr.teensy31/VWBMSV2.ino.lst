
C:\Users\tomde\AppData\Local\Temp\arduino\sketches\2F4993CF310F7332225332ABA4F32727/VWBMSV2.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
  timeout = 30000; //milliseconds before comms timeout;
  type = 1;
}

void BMSModule::clearmodule()
{
       0:	00 80 00 20 bd 01 00 00 a1 9d 00 00 5d 9d 00 00     ... ........]...
  temperatures[1] = 0.0f;
  temperatures[2] = 0.0f;
  balstat = 0;
  exists = false;
  reset = false;
  moduleAddress = 0;
      10:	5d 9d 00 00 5d 9d 00 00 5d 9d 00 00 5d 9d 00 00     ]...]...]...]...
  temperatures[2] = 0.0f;
      20:	5d 9d 00 00 5d 9d 00 00 5d 9d 00 00 a1 9d 00 00     ]...]...].......


int BMSModuleManager::seriescells()
{
  spack = 0;
  for (int y = 1; y < 63; y++)
      30:	a1 9d 00 00 5d 9d 00 00 6d 92 00 00 71 92 00 00     ....]...m...q...
  {
    if (modules[y].isExisting())
      40:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
  for (int y = 1; y < 63; y++)
      50:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
    {
      spack = spack + modules[y].getscells();
    }
  }
  return spack;
      60:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................

  Logger::console("");
  Logger::console("");
  Logger::console("");
  Logger::console("Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
                  getPackVoltage(), getAvgCellVolt(), getAvgTemperature());
      70:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
  Logger::console("Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
      80:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
      90:	a1 78 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     .x..............
  Logger::console("");
  for (int y = 1; y < 63; y++)
      a0:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
      b0:	a1 9d 00 00 0d 88 00 00 19 88 00 00 1d 88 00 00     ................
  {
    if (modules[y].isExisting())
    {
      faults = modules[y].getFaults();
      c0:	29 88 00 00 2d 88 00 00 31 88 00 00 a1 9d 00 00     )...-...1.......
      alerts = modules[y].getAlerts();
      COV = modules[y].getCOVCells();
      d0:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
      CUV = modules[y].getCUVCells();

      Logger::console("                               Module #%i", y);
      e0:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................

      Logger::console("  Voltage: %fV   (%fV-%fV)     Temperatures: (%fC-%fC)", modules[y].getModuleVoltage(),
      f0:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 c5 ac 00 00     ................
                      modules[y].getLowCellV(), modules[y].getHighCellV(), modules[y].getLowTemp(), modules[y].getHighTemp());
     100:	a1 9d 00 00 ed b3 00 00 a1 9d 00 00 a1 9d 00 00     ................
     110:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
      Logger::console("  Voltage: %fV   (%fV-%fV)     Temperatures: (%fC-%fC)", modules[y].getModuleVoltage(),
     120:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
     130:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
     140:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
     150:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
          Logger::console("    Internal registers inconsistent");
        }
      }
      if (alerts > 0)
      {
        Logger::console("  MODULE HAS ALERTS:");
     160:	a1 9d 00 00 f1 b6 00 00 a1 9d 00 00 a1 9d 00 00     ................
        }
        if (alerts & 2)
        {
          Logger::console("    Over temperature on TS2");
        }
        if (alerts & 4)
     170:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
        }
        if (alerts & 0x20)
        {
          Logger::console("    OTP EPROM Uncorrectable Error");
        }
        if (alerts & 0x40)
     180:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
  for (int y = 1; y < 63; y++)
     190:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
        Logger::console("  MODULE IS FAULTED:");
     1a0:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00 a1 9d 00 00     ................
        if (faults & 4)
     1b0:	a1 9d 00 00 a1 9d 00 00 a1 9d 00 00                 ............

000001bc <ResetHandler>:
        if (faults & 0x20)
     1bc:	4b57      	ldr	r3, [pc, #348]	; (31c <ResetHandler+0x160>)
      if (alerts > 0)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
     1c2:	b510      	push	{r4, lr}
          Logger::console("    Internal registers inconsistent");
     1c4:	81da      	strh	r2, [r3, #14]
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
      if (alerts > 0)
     1ca:	81da      	strh	r2, [r3, #14]
     1cc:	bf00      	nop
     1ce:	bf00      	nop
          Logger::console("    Test fault active");
     1d0:	f009 fdea 	bl	9da8 <startup_early_hook>
     1d4:	4b52      	ldr	r3, [pc, #328]	; (320 <ResetHandler+0x164>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
          Logger::console("    Power on reset has occurred");
     1da:	631a      	str	r2, [r3, #48]	; 0x30
     1dc:	4a51      	ldr	r2, [pc, #324]	; (324 <ResetHandler+0x168>)
     1de:	639a      	str	r2, [r3, #56]	; 0x38
          Logger::console("    CRC error in received packet");
     1e0:	4a51      	ldr	r2, [pc, #324]	; (328 <ResetHandler+0x16c>)
     1e2:	63da      	str	r2, [r3, #60]	; 0x3c
     1e4:	4a51      	ldr	r2, [pc, #324]	; (32c <ResetHandler+0x170>)
     1e6:	6913      	ldr	r3, [r2, #16]
        {
          Logger::console("    GROUP3 Regs Invalid");
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d103      	bne.n	1f6 <ResetHandler+0x3a>
        }
        if (alerts & 0x80)
     1ee:	6153      	str	r3, [r2, #20]
     1f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
        {
          Logger::console("    Address not registered");
     1f4:	6113      	str	r3, [r2, #16]
     1f6:	4b4e      	ldr	r3, [pc, #312]	; (330 <ResetHandler+0x174>)
     1f8:	789a      	ldrb	r2, [r3, #2]
          Logger::console("    OTP EPROM Uncorrectable Error");
     1fa:	0711      	lsls	r1, r2, #28
     1fc:	d503      	bpl.n	206 <ResetHandler+0x4a>
     1fe:	789a      	ldrb	r2, [r3, #2]
     200:	f042 0208 	orr.w	r2, r2, #8
          Logger::console("    Test Alert");
     204:	709a      	strb	r2, [r3, #2]
     206:	4b4b      	ldr	r3, [pc, #300]	; (334 <ResetHandler+0x178>)
     208:	484b      	ldr	r0, [pc, #300]	; (338 <ResetHandler+0x17c>)
          Logger::console("    Thermal shutdown active");
     20a:	222a      	movs	r2, #42	; 0x2a
     20c:	701a      	strb	r2, [r3, #0]
     20e:	4b4b      	ldr	r3, [pc, #300]	; (33c <ResetHandler+0x180>)
     210:	1cda      	adds	r2, r3, #3
          Logger::console("    Sleep mode active");
     212:	1a12      	subs	r2, r2, r0
     214:	1ec1      	subs	r1, r0, #3
     216:	f022 0203 	bic.w	r2, r2, #3
          Logger::console("    Over temperature on TS2");
     21a:	4299      	cmp	r1, r3
     21c:	bf88      	it	hi
     21e:	2200      	movhi	r2, #0
     220:	4947      	ldr	r1, [pc, #284]	; (340 <ResetHandler+0x184>)
          Logger::console("    Over temperature on TS1");
     222:	f009 fcc7 	bl	9bb4 <memcpy>
     226:	4b47      	ldr	r3, [pc, #284]	; (344 <ResetHandler+0x188>)
     228:	4847      	ldr	r0, [pc, #284]	; (348 <ResetHandler+0x18c>)
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     22a:	1cda      	adds	r2, r3, #3
     22c:	1a12      	subs	r2, r2, r0
     22e:	1ec1      	subs	r1, r0, #3
     230:	f022 0203 	bic.w	r2, r2, #3
     234:	4299      	cmp	r1, r3
            if (CUV & (1 << i))
     236:	bf88      	it	hi
     238:	2200      	movhi	r2, #0
     23a:	2100      	movs	r1, #0
     23c:	f00d fe82 	bl	df44 <memset>
          for (int i = 0; i < 12; i++)
     240:	4942      	ldr	r1, [pc, #264]	; (34c <ResetHandler+0x190>)
     242:	4843      	ldr	r0, [pc, #268]	; (350 <ResetHandler+0x194>)
            if (CUV & (1 << i))
     244:	f44f 72de 	mov.w	r2, #444	; 0x1bc
     248:	f009 fcb4 	bl	9bb4 <memcpy>
     24c:	4b41      	ldr	r3, [pc, #260]	; (354 <ResetHandler+0x198>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     24e:	4a42      	ldr	r2, [pc, #264]	; (358 <ResetHandler+0x19c>)
     250:	2180      	movs	r1, #128	; 0x80
     252:	f803 1b01 	strb.w	r1, [r3], #1
          for (int i = 0; i < 12; i++)
     256:	4293      	cmp	r3, r2
     258:	d1fb      	bne.n	252 <ResetHandler+0x96>
     25a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     25e:	4a3c      	ldr	r2, [pc, #240]	; (350 <ResetHandler+0x194>)
     260:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
          SERIALCONSOLE.println();
     264:	4b3d      	ldr	r3, [pc, #244]	; (35c <ResetHandler+0x1a0>)
     266:	228a      	movs	r2, #138	; 0x8a
     268:	701a      	strb	r2, [r3, #0]
     26a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     26e:	2224      	movs	r2, #36	; 0x24
     270:	705a      	strb	r2, [r3, #1]
     272:	22a0      	movs	r2, #160	; 0xa0
     274:	701a      	strb	r2, [r3, #0]
     276:	799a      	ldrb	r2, [r3, #6]
            if (COV & (1 << i))
     278:	0792      	lsls	r2, r2, #30
     27a:	d5fc      	bpl.n	276 <ResetHandler+0xba>
     27c:	799a      	ldrb	r2, [r3, #6]
     27e:	06d4      	lsls	r4, r2, #27
          for (int i = 0; i < 12; i++)
     280:	d4fc      	bmi.n	27c <ResetHandler+0xc0>
     282:	4b37      	ldr	r3, [pc, #220]	; (360 <ResetHandler+0x1a4>)
     284:	799a      	ldrb	r2, [r3, #6]
            if (COV & (1 << i))
     286:	f002 020c 	and.w	r2, r2, #12
     28a:	2a08      	cmp	r2, #8
     28c:	d1fa      	bne.n	284 <ResetHandler+0xc8>
     28e:	2203      	movs	r2, #3
     290:	711a      	strb	r2, [r3, #4]
     292:	2240      	movs	r2, #64	; 0x40
     294:	715a      	strb	r2, [r3, #5]
     296:	799a      	ldrb	r2, [r3, #6]
          for (int i = 0; i < 12; i++)
     298:	0690      	lsls	r0, r2, #26
     29a:	d5fc      	bpl.n	296 <ResetHandler+0xda>
     29c:	4a30      	ldr	r2, [pc, #192]	; (360 <ResetHandler+0x1a4>)
     29e:	7993      	ldrb	r3, [r2, #6]
     2a0:	0659      	lsls	r1, r3, #25
     2a2:	d5fc      	bpl.n	29e <ResetHandler+0xe2>
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
          SERIALCONSOLE.println();
     2a6:	492f      	ldr	r1, [pc, #188]	; (364 <ResetHandler+0x1a8>)
     2a8:	6459      	str	r1, [r3, #68]	; 0x44
     2aa:	2102      	movs	r1, #2
     2ac:	6499      	str	r1, [r3, #72]	; 0x48
     2ae:	2120      	movs	r1, #32
     2b0:	7011      	strb	r1, [r2, #0]
     2b2:	7991      	ldrb	r1, [r2, #6]
     2b4:	f001 010c 	and.w	r1, r1, #12
     2b8:	290c      	cmp	r1, #12
     2ba:	d1fa      	bne.n	2b2 <ResetHandler+0xf6>
     2bc:	4a2a      	ldr	r2, [pc, #168]	; (368 <ResetHandler+0x1ac>)
     2be:	605a      	str	r2, [r3, #4]
     2c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2c4:	4a29      	ldr	r2, [pc, #164]	; (36c <ResetHandler+0x1b0>)
     2c6:	615a      	str	r2, [r3, #20]
     2c8:	2200      	movs	r2, #0
     2ca:	619a      	str	r2, [r3, #24]
     2cc:	2207      	movs	r2, #7
     2ce:	611a      	str	r2, [r3, #16]
     2d0:	4a27      	ldr	r2, [pc, #156]	; (370 <ResetHandler+0x1b4>)
     2d2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
     2d6:	b662      	cpsie	i
     2d8:	f009 fe90 	bl	9ffc <_init_Teensyduino_internal_>
     2dc:	4b13      	ldr	r3, [pc, #76]	; (32c <ResetHandler+0x170>)
     2de:	695b      	ldr	r3, [r3, #20]
     2e0:	07da      	lsls	r2, r3, #31
     2e2:	d505      	bpl.n	2f0 <ResetHandler+0x134>
     2e4:	4823      	ldr	r0, [pc, #140]	; (374 <ResetHandler+0x1b8>)
     2e6:	f009 fe7d 	bl	9fe4 <rtc_set>
     2ea:	4b23      	ldr	r3, [pc, #140]	; (378 <ResetHandler+0x1bc>)
     2ec:	4a23      	ldr	r2, [pc, #140]	; (37c <ResetHandler+0x1c0>)
     2ee:	61da      	str	r2, [r3, #28]
     2f0:	4b23      	ldr	r3, [pc, #140]	; (380 <ResetHandler+0x1c4>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	065b      	lsls	r3, r3, #25
     2f6:	d509      	bpl.n	30c <ResetHandler+0x150>
     2f8:	4c1f      	ldr	r4, [pc, #124]	; (378 <ResetHandler+0x1bc>)
     2fa:	4b20      	ldr	r3, [pc, #128]	; (37c <ResetHandler+0x1c0>)
     2fc:	69e2      	ldr	r2, [r4, #28]
     2fe:	429a      	cmp	r2, r3
     300:	d104      	bne.n	30c <ResetHandler+0x150>
     302:	481c      	ldr	r0, [pc, #112]	; (374 <ResetHandler+0x1b8>)
     304:	f009 fe6e 	bl	9fe4 <rtc_set>
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     308:	2300      	movs	r3, #0
     30a:	61e3      	str	r3, [r4, #28]
	}
#endif

	startup_late_hook();
     30c:	f009 fd52 	bl	9db4 <startup_late_hook>
	__libc_init_array();
     310:	f00d ff0e 	bl	e130 <__libc_init_array>

	main();
     314:	f009 fc46 	bl	9ba4 <main>
	
	while (1) ;
     318:	e7fe      	b.n	318 <ResetHandler+0x15c>
     31a:	bf00      	nop
     31c:	40052000 	.word	0x40052000
     320:	40048000 	.word	0x40048000
     324:	00043f82 	.word	0x00043f82
     328:	2b000001 	.word	0x2b000001
     32c:	4003d000 	.word	0x4003d000
     330:	4007d000 	.word	0x4007d000
     334:	4007e000 	.word	0x4007e000
     338:	1fff8720 	.word	0x1fff8720
     33c:	1fff9168 	.word	0x1fff9168
     340:	0001597c 	.word	0x0001597c
     344:	1fffd90c 	.word	0x1fffd90c
     348:	1fff9168 	.word	0x1fff9168
     34c:	00000000 	.word	0x00000000
     350:	1fff8200 	.word	0x1fff8200
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	40065000 	.word	0x40065000
     360:	40064000 	.word	0x40064000
     364:	01030000 	.word	0x01030000
     368:	000510c0 	.word	0x000510c0
     36c:	000176ff 	.word	0x000176ff
     370:	20200000 	.word	0x20200000
     374:	645c1fb5 	.word	0x645c1fb5
     378:	4003e000 	.word	0x4003e000
     37c:	5a94c3a5 	.word	0x5a94c3a5
     380:	4007f000 	.word	0x4007f000
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff9168 	.word	0x1fff9168
     42c:	1fff9168 	.word	0x1fff9168
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff9168 	.word	0x1fff9168
     454:	0001597c 	.word	0x0001597c

00000458 <BMSModule::BMSModule()>:
BMSModule::BMSModule()
     458:	b510      	push	{r4, lr}
    cellVolt[i] = 0.0f;
     45a:	2234      	movs	r2, #52	; 0x34
     45c:	2100      	movs	r1, #0
BMSModule::BMSModule()
     45e:	4604      	mov	r4, r0
    cellVolt[i] = 0.0f;
     460:	f00d fd70 	bl	df44 <memset>
    lowestCellVolt[i] = 5.0f;
     464:	4918      	ldr	r1, [pc, #96]	; (4c8 <BMSModule::BMSModule()+0x70>)
     466:	f104 0330 	add.w	r3, r4, #48	; 0x30
     46a:	f104 0264 	add.w	r2, r4, #100	; 0x64
     46e:	f843 1f04 	str.w	r1, [r3, #4]!
  for (int i = 0; i < 13; i++)
     472:	429a      	cmp	r2, r3
     474:	d1fb      	bne.n	46e <BMSModule::BMSModule()+0x16>
    highestCellVolt[i] = 0.0f;
     476:	2234      	movs	r2, #52	; 0x34
     478:	2100      	movs	r1, #0
     47a:	f104 0068 	add.w	r0, r4, #104	; 0x68
     47e:	f00d fd61 	bl	df44 <memset>
  moduleVolt = 0.0f;
     482:	2300      	movs	r3, #0
  balstat = 0;
     484:	2200      	movs	r2, #0
  highestTemperature = -100.0f;
     486:	4811      	ldr	r0, [pc, #68]	; (4cc <BMSModule::BMSModule()+0x74>)
  lowestTemperature = 200.0f;
     488:	4911      	ldr	r1, [pc, #68]	; (4d0 <BMSModule::BMSModule()+0x78>)
  moduleVolt = 0.0f;
     48a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  temperatures[0] = 0.0f;
     48e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  temperatures[1] = 0.0f;
     492:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  temperatures[2] = 0.0f;
     496:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  highestTemperature = -100.0f;
     49a:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
  highestModuleVolt = 0.0f;
     49e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  timeout = 30000; //milliseconds before comms timeout;
     4a2:	f247 5030 	movw	r0, #30000	; 0x7530
  type = 1;
     4a6:	2301      	movs	r3, #1
  moduleAddress = 0;
     4a8:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
  timeout = 30000; //milliseconds before comms timeout;
     4ac:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
  lowestTemperature = 200.0f;
     4b0:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
  lowestModuleVolt = 200.0f;
     4b4:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
  balstat = 0;
     4b8:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
  exists = false;
     4bc:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
  type = 1;
     4c0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
}
     4c4:	4620      	mov	r0, r4
     4c6:	bd10      	pop	{r4, pc}
     4c8:	40a00000 	.word	0x40a00000
     4cc:	c2c80000 	.word	0xc2c80000
     4d0:	43480000 	.word	0x43480000

000004d4 <BMSModule::decodetemp(CAN_message_t&, int)>:
}

void BMSModule::decodetemp(CAN_message_t &msg, int y)
{
  if (y==1) //0x00 in byte 2 means its an MEB message
     4d4:	2a01      	cmp	r2, #1
{
     4d6:	b538      	push	{r3, r4, r5, lr}
     4d8:	4605      	mov	r5, r0
     4da:	460c      	mov	r4, r1
  if (y==1) //0x00 in byte 2 means its an MEB message
     4dc:	d014      	beq.n	508 <BMSModule::decodetemp(CAN_message_t&, int)+0x34>
      }
    }
  }
  else
  {
    type = 2;
     4de:	2302      	movs	r3, #2
     4e0:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
    temperatures[0] = ((uint16_t(((msg.buf[5] & 0x0F) << 4) | ((msg.buf[4] & 0xF0) >> 4))) * 0.5) - 40; //MEB Bits 36-44
     4e4:	7b4b      	ldrb	r3, [r1, #13]
     4e6:	7b08      	ldrb	r0, [r1, #12]
     4e8:	011b      	lsls	r3, r3, #4
     4ea:	b2db      	uxtb	r3, r3
     4ec:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
     4f0:	f00c fc52 	bl	cd98 <__aeabi_i2f>
     4f4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     4f8:	f00c fca2 	bl	ce40 <__aeabi_fmul>
     4fc:	492c      	ldr	r1, [pc, #176]	; (5b0 <BMSModule::decodetemp(CAN_message_t&, int)+0xdc>)
     4fe:	f00c fb95 	bl	cc2c <__aeabi_fsub>
     502:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
  }
}
     506:	bd38      	pop	{r3, r4, r5, pc}
    type = 1;
     508:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    if (msg.buf[7] == 0xFD)
     50c:	7bcb      	ldrb	r3, [r1, #15]
     50e:	2bfd      	cmp	r3, #253	; 0xfd
     510:	d049      	beq.n	5a6 <BMSModule::decodetemp(CAN_message_t&, int)+0xd2>
      if (msg.buf[0] < 0xDF)
     512:	7a08      	ldrb	r0, [r1, #8]
     514:	28de      	cmp	r0, #222	; 0xde
     516:	d928      	bls.n	56a <BMSModule::decodetemp(CAN_message_t&, int)+0x96>
        temperatures[0] = (msg.buf[3] * 0.5) - 43;
     518:	7ac8      	ldrb	r0, [r1, #11]
     51a:	f00c fc3d 	bl	cd98 <__aeabi_i2f>
     51e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     522:	f00c fc8d 	bl	ce40 <__aeabi_fmul>
     526:	4923      	ldr	r1, [pc, #140]	; (5b4 <BMSModule::decodetemp(CAN_message_t&, int)+0xe0>)
     528:	f00c fb80 	bl	cc2c <__aeabi_fsub>
     52c:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
      if (msg.buf[4] < 0xF0)
     530:	7b20      	ldrb	r0, [r4, #12]
     532:	28ef      	cmp	r0, #239	; 0xef
     534:	d82d      	bhi.n	592 <BMSModule::decodetemp(CAN_message_t&, int)+0xbe>
        temperatures[1] = (msg.buf[4] * 0.5) - 43;
     536:	f00c fc2f 	bl	cd98 <__aeabi_i2f>
     53a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     53e:	f00c fc7f 	bl	ce40 <__aeabi_fmul>
     542:	491c      	ldr	r1, [pc, #112]	; (5b4 <BMSModule::decodetemp(CAN_message_t&, int)+0xe0>)
     544:	f00c fb72 	bl	cc2c <__aeabi_fsub>
     548:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
      if (msg.buf[5] < 0xF0)
     54c:	7b60      	ldrb	r0, [r4, #13]
     54e:	28ef      	cmp	r0, #239	; 0xef
     550:	d825      	bhi.n	59e <BMSModule::decodetemp(CAN_message_t&, int)+0xca>
        temperatures[2] = (msg.buf[5] * 0.5) - 43;
     552:	f00c fc21 	bl	cd98 <__aeabi_i2f>
     556:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     55a:	f00c fc71 	bl	ce40 <__aeabi_fmul>
     55e:	4915      	ldr	r1, [pc, #84]	; (5b4 <BMSModule::decodetemp(CAN_message_t&, int)+0xe0>)
     560:	f00c fb64 	bl	cc2c <__aeabi_fsub>
     564:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
}
     568:	bd38      	pop	{r3, r4, r5, pc}
        temperatures[0] = (msg.buf[0] * 0.5) - 43;
     56a:	f00c fc15 	bl	cd98 <__aeabi_i2f>
     56e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     572:	f00c fc65 	bl	ce40 <__aeabi_fmul>
     576:	490f      	ldr	r1, [pc, #60]	; (5b4 <BMSModule::decodetemp(CAN_message_t&, int)+0xe0>)
     578:	f00c fb58 	bl	cc2c <__aeabi_fsub>
     57c:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
        balstat = msg.buf[2] + (msg.buf[3] << 8);
     580:	7ae2      	ldrb	r2, [r4, #11]
     582:	7aa3      	ldrb	r3, [r4, #10]
     584:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     588:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
      if (msg.buf[4] < 0xF0)
     58c:	7b20      	ldrb	r0, [r4, #12]
     58e:	28ef      	cmp	r0, #239	; 0xef
     590:	d9d1      	bls.n	536 <BMSModule::decodetemp(CAN_message_t&, int)+0x62>
        temperatures[1] = 0;
     592:	2000      	movs	r0, #0
     594:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
      if (msg.buf[5] < 0xF0)
     598:	7b60      	ldrb	r0, [r4, #13]
     59a:	28ef      	cmp	r0, #239	; 0xef
     59c:	d9d9      	bls.n	552 <BMSModule::decodetemp(CAN_message_t&, int)+0x7e>
        temperatures[2] = 0;
     59e:	2300      	movs	r3, #0
     5a0:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
}
     5a4:	bd38      	pop	{r3, r4, r5, pc}
      if (msg.buf[2] != 0xFD)
     5a6:	7a88      	ldrb	r0, [r1, #10]
     5a8:	28fd      	cmp	r0, #253	; 0xfd
     5aa:	d1a1      	bne.n	4f0 <BMSModule::decodetemp(CAN_message_t&, int)+0x1c>
}
     5ac:	bd38      	pop	{r3, r4, r5, pc}
     5ae:	bf00      	nop
     5b0:	42200000 	.word	0x42200000
     5b4:	422c0000 	.word	0x422c0000

000005b8 <BMSModule::getFaults()>:
*/

uint8_t BMSModule::getFaults()
{
  return faults;
}
     5b8:	f890 00cc 	ldrb.w	r0, [r0, #204]	; 0xcc
     5bc:	4770      	bx	lr
     5be:	bf00      	nop

000005c0 <BMSModule::getAlerts()>:

uint8_t BMSModule::getAlerts()
{
  return alerts;
}
     5c0:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
     5c4:	4770      	bx	lr
     5c6:	bf00      	nop

000005c8 <BMSModule::getCOVCells()>:

uint8_t BMSModule::getCOVCells()
{
  return COVFaults;
}
     5c8:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
     5cc:	4770      	bx	lr
     5ce:	bf00      	nop

000005d0 <BMSModule::getCUVCells()>:

uint8_t BMSModule::getCUVCells()
{
  return CUVFaults;
}
     5d0:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
     5d4:	4770      	bx	lr
     5d6:	bf00      	nop

000005d8 <BMSModule::getCellVoltage(int)>:

float BMSModule::getCellVoltage(int cell)
{
  if (cell < 0 || cell > 13) return 0.0f;
     5d8:	290d      	cmp	r1, #13
  return cellVolt[cell];
     5da:	bf94      	ite	ls
     5dc:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
  if (cell < 0 || cell > 13) return 0.0f;
     5e0:	2000      	movhi	r0, #0
}
     5e2:	4770      	bx	lr

000005e4 <BMSModule::getLowCellV()>:

float BMSModule::getLowCellV()
{
     5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float lowVal = 10.0f;
     5e8:	4e0c      	ldr	r6, [pc, #48]	; (61c <BMSModule::getLowCellV()+0x38>)
{
     5ea:	4680      	mov	r8, r0
     5ec:	1f05      	subs	r5, r0, #4
     5ee:	f100 0730 	add.w	r7, r0, #48	; 0x30
  for (int i = 0; i < 13; i++) if (cellVolt[i] < lowVal && cellVolt[i] > IgnoreCell) lowVal = cellVolt[i];
     5f2:	f855 4f04 	ldr.w	r4, [r5, #4]!
     5f6:	4631      	mov	r1, r6
     5f8:	4620      	mov	r0, r4
     5fa:	f00c fdbf 	bl	d17c <__aeabi_fcmplt>
     5fe:	4603      	mov	r3, r0
     600:	4620      	mov	r0, r4
     602:	b12b      	cbz	r3, 610 <BMSModule::getLowCellV()+0x2c>
     604:	f8d8 10bc 	ldr.w	r1, [r8, #188]	; 0xbc
     608:	f00c fdd6 	bl	d1b8 <__aeabi_fcmpgt>
     60c:	b100      	cbz	r0, 610 <BMSModule::getLowCellV()+0x2c>
     60e:	4626      	mov	r6, r4
     610:	42bd      	cmp	r5, r7
     612:	d1ee      	bne.n	5f2 <BMSModule::getLowCellV()+0xe>
  return lowVal;
}
     614:	4630      	mov	r0, r6
     616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     61a:	bf00      	nop
     61c:	41200000 	.word	0x41200000

00000620 <BMSModule::getHighCellV()>:

float BMSModule::getHighCellV()
{
     620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  float hiVal = 0.0f;
  for (int i = 0; i < 13; i++)
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     624:	f8d0 80bc 	ldr.w	r8, [r0, #188]	; 0xbc
     628:	4f0f      	ldr	r7, [pc, #60]	; (668 <BMSModule::getHighCellV()+0x48>)
  float hiVal = 0.0f;
     62a:	f04f 0900 	mov.w	r9, #0
     62e:	1f05      	subs	r5, r0, #4
     630:	f100 0630 	add.w	r6, r0, #48	; 0x30
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     634:	f855 4f04 	ldr.w	r4, [r5, #4]!
     638:	4641      	mov	r1, r8
     63a:	4620      	mov	r0, r4
     63c:	f00c fdbc 	bl	d1b8 <__aeabi_fcmpgt>
     640:	4603      	mov	r3, r0
     642:	4639      	mov	r1, r7
     644:	4620      	mov	r0, r4
     646:	b14b      	cbz	r3, 65c <BMSModule::getHighCellV()+0x3c>
     648:	f00c fd98 	bl	d17c <__aeabi_fcmplt>
     64c:	4603      	mov	r3, r0
    {
      if (cellVolt[i] > hiVal) hiVal = cellVolt[i];
     64e:	4649      	mov	r1, r9
     650:	4620      	mov	r0, r4
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     652:	b11b      	cbz	r3, 65c <BMSModule::getHighCellV()+0x3c>
      if (cellVolt[i] > hiVal) hiVal = cellVolt[i];
     654:	f00c fdb0 	bl	d1b8 <__aeabi_fcmpgt>
     658:	b100      	cbz	r0, 65c <BMSModule::getHighCellV()+0x3c>
     65a:	46a1      	mov	r9, r4
  for (int i = 0; i < 13; i++)
     65c:	42b5      	cmp	r5, r6
     65e:	d1e9      	bne.n	634 <BMSModule::getHighCellV()+0x14>
    }
  return hiVal;
}
     660:	4648      	mov	r0, r9
     662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     666:	bf00      	nop
     668:	40a00000 	.word	0x40a00000

0000066c <BMSModule::getAverageV()>:

float BMSModule::getAverageV()
{
     66c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int x = 0;
  float avgVal = 0.0f;
  for (int i = 0; i < 13; i++)
  {
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     670:	f8d0 90bc 	ldr.w	r9, [r0, #188]	; 0xbc
     674:	4f17      	ldr	r7, [pc, #92]	; (6d4 <BMSModule::getAverageV()+0x68>)
{
     676:	4683      	mov	fp, r0
  float avgVal = 0.0f;
     678:	2600      	movs	r6, #0
     67a:	1f05      	subs	r5, r0, #4
     67c:	f100 0830 	add.w	r8, r0, #48	; 0x30
  int x = 0;
     680:	f04f 0a00 	mov.w	sl, #0
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     684:	f855 4f04 	ldr.w	r4, [r5, #4]!
     688:	4649      	mov	r1, r9
     68a:	4620      	mov	r0, r4
     68c:	f00c fd94 	bl	d1b8 <__aeabi_fcmpgt>
     690:	4603      	mov	r3, r0
     692:	4639      	mov	r1, r7
     694:	4620      	mov	r0, r4
     696:	b14b      	cbz	r3, 6ac <BMSModule::getAverageV()+0x40>
     698:	f00c fd70 	bl	d17c <__aeabi_fcmplt>
     69c:	b130      	cbz	r0, 6ac <BMSModule::getAverageV()+0x40>
    {
      x++;
      avgVal += cellVolt[i];
     69e:	4630      	mov	r0, r6
     6a0:	4621      	mov	r1, r4
     6a2:	f00c fac5 	bl	cc30 <__addsf3>
      x++;
     6a6:	f10a 0a01 	add.w	sl, sl, #1
      avgVal += cellVolt[i];
     6aa:	4606      	mov	r6, r0
  for (int i = 0; i < 13; i++)
     6ac:	4545      	cmp	r5, r8
     6ae:	d1e9      	bne.n	684 <BMSModule::getAverageV()+0x18>
    }
  }

  scells = x;
     6b0:	f8cb a0e0 	str.w	sl, [fp, #224]	; 0xe0
  avgVal /= x;

  if (scells == 0)
     6b4:	f1ba 0f00 	cmp.w	sl, #0
     6b8:	d008      	beq.n	6cc <BMSModule::getAverageV()+0x60>
  avgVal /= x;
     6ba:	4650      	mov	r0, sl
     6bc:	f00c fb6c 	bl	cd98 <__aeabi_i2f>
     6c0:	4601      	mov	r1, r0
     6c2:	4630      	mov	r0, r6
     6c4:	f00c fc70 	bl	cfa8 <__aeabi_fdiv>
  {
    avgVal = 0;
  }

  return avgVal;
}
     6c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    avgVal = 0;
     6cc:	2000      	movs	r0, #0
}
     6ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6d2:	bf00      	nop
     6d4:	40a00000 	.word	0x40a00000

000006d8 <BMSModule::getscells()>:

int BMSModule::getscells()
{
  return scells;
}
     6d8:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
     6dc:	4770      	bx	lr
     6de:	bf00      	nop

000006e0 <BMSModule::getHighTemp()>:
    return temperatures[0];
  }
}

float BMSModule::getHighTemp()
{
     6e0:	b538      	push	{r3, r4, r5, lr}
  if (type == 1)
     6e2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
     6e6:	2b01      	cmp	r3, #1
     6e8:	d10e      	bne.n	708 <BMSModule::getHighTemp()+0x28>
  {
    if (sensor == 0)
     6ea:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
     6ee:	b97b      	cbnz	r3, 710 <BMSModule::getHighTemp()+0x30>
     6f0:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
    {
      return (temperatures[0] < temperatures[1]) ? temperatures[1] : temperatures[0];
     6f4:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
     6f8:	4621      	mov	r1, r4
     6fa:	4628      	mov	r0, r5
     6fc:	f00c fd3e 	bl	d17c <__aeabi_fcmplt>
     700:	b920      	cbnz	r0, 70c <BMSModule::getHighTemp()+0x2c>
     702:	462c      	mov	r4, r5
  }
  else
  {
    return temperatures[0];
  }
}
     704:	4620      	mov	r0, r4
     706:	bd38      	pop	{r3, r4, r5, pc}
    return temperatures[0];
     708:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
}
     70c:	4620      	mov	r0, r4
     70e:	bd38      	pop	{r3, r4, r5, pc}
      return temperatures[sensor - 1];
     710:	3327      	adds	r3, #39	; 0x27
     712:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
}
     716:	4620      	mov	r0, r4
     718:	bd38      	pop	{r3, r4, r5, pc}
     71a:	bf00      	nop

0000071c <BMSModule::getAvgTemp()>:

float BMSModule::getAvgTemp()
{
  if (type == 1)
     71c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
     720:	2b01      	cmp	r3, #1
{
     722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     726:	4604      	mov	r4, r0
  if (type == 1)
     728:	d147      	bne.n	7ba <BMSModule::getAvgTemp()+0x9e>
  {
    if (sensor == 0)
     72a:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
     72e:	2b00      	cmp	r3, #0
     730:	d148      	bne.n	7c4 <BMSModule::getAvgTemp()+0xa8>
    {
      if ((temperatures[0] + temperatures[1] + temperatures[2]) / 3.0f > 0.5)
     732:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
     736:	f8d0 60a4 	ldr.w	r6, [r0, #164]	; 0xa4
     73a:	4628      	mov	r0, r5
     73c:	4631      	mov	r1, r6
     73e:	f00c fa77 	bl	cc30 <__addsf3>
     742:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
     746:	4639      	mov	r1, r7
     748:	4680      	mov	r8, r0
     74a:	f00c fa71 	bl	cc30 <__addsf3>
     74e:	495f      	ldr	r1, [pc, #380]	; (8cc <BMSModule::getAvgTemp()+0x1b0>)
     750:	f00c fc2a 	bl	cfa8 <__aeabi_fdiv>
      {
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     754:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
      if ((temperatures[0] + temperatures[1] + temperatures[2]) / 3.0f > 0.5)
     758:	4604      	mov	r4, r0
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     75a:	4628      	mov	r0, r5
     75c:	f00c fd2c 	bl	d1b8 <__aeabi_fcmpgt>
     760:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     764:	2800      	cmp	r0, #0
     766:	d133      	bne.n	7d0 <BMSModule::getAvgTemp()+0xb4>
        {
          return (temperatures[0] + temperatures[1] + temperatures[2]) / 3.0f;
        }
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     768:	4628      	mov	r0, r5
     76a:	f00c fd07 	bl	d17c <__aeabi_fcmplt>
     76e:	b130      	cbz	r0, 77e <BMSModule::getAvgTemp()+0x62>
     770:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     774:	4630      	mov	r0, r6
     776:	f00c fd1f 	bl	d1b8 <__aeabi_fcmpgt>
     77a:	2800      	cmp	r0, #0
     77c:	d172      	bne.n	864 <BMSModule::getAvgTemp()+0x148>
        {
          return (temperatures[1] + temperatures[2]) / 2.0f;
        }
        if (temperatures[0] > 0.5 && temperatures[1] < 0.5 && temperatures[2] > 0.5)
     77e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     782:	4628      	mov	r0, r5
     784:	f00c fd18 	bl	d1b8 <__aeabi_fcmpgt>
     788:	2800      	cmp	r0, #0
     78a:	d134      	bne.n	7f6 <BMSModule::getAvgTemp()+0xda>
        }
        if (temperatures[0] > 0.5 && temperatures[1] < 0.5 && temperatures[2] < 0.5)
        {
          return (temperatures[0]);
        }
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] < 0.5)
     78c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     790:	4630      	mov	r0, r6
     792:	f00c fd11 	bl	d1b8 <__aeabi_fcmpgt>
     796:	b138      	cbz	r0, 7a8 <BMSModule::getAvgTemp()+0x8c>
     798:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     79c:	4638      	mov	r0, r7
     79e:	f00c fced 	bl	d17c <__aeabi_fcmplt>
     7a2:	2800      	cmp	r0, #0
     7a4:	f040 8090 	bne.w	8c8 <BMSModule::getAvgTemp()+0x1ac>
        {
          return (temperatures[1]);
        }
        if (temperatures[0] < 0.5 && temperatures[1] < 0.5 && temperatures[2] > 0.5)
     7a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7ac:	4638      	mov	r0, r7
     7ae:	f00c fd03 	bl	d1b8 <__aeabi_fcmpgt>
     7b2:	2800      	cmp	r0, #0
     7b4:	d06d      	beq.n	892 <BMSModule::getAvgTemp()+0x176>
        {
          return (temperatures[2]);
     7b6:	463c      	mov	r4, r7
     7b8:	e001      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
      return temperatures[sensor - 1];
    }
  }
  else
  {
    return temperatures[0];
     7ba:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
  }
}
     7be:	4620      	mov	r0, r4
     7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return temperatures[sensor - 1];
     7c4:	3327      	adds	r3, #39	; 0x27
     7c6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
}
     7ca:	4620      	mov	r0, r4
     7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     7d0:	4630      	mov	r0, r6
     7d2:	f00c fcf1 	bl	d1b8 <__aeabi_fcmpgt>
     7d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7da:	2800      	cmp	r0, #0
     7dc:	d036      	beq.n	84c <BMSModule::getAvgTemp()+0x130>
     7de:	4638      	mov	r0, r7
     7e0:	f00c fcea 	bl	d1b8 <__aeabi_fcmpgt>
     7e4:	2800      	cmp	r0, #0
     7e6:	d1ea      	bne.n	7be <BMSModule::getAvgTemp()+0xa2>
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     7e8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7ec:	4628      	mov	r0, r5
     7ee:	f00c fcc5 	bl	d17c <__aeabi_fcmplt>
     7f2:	2800      	cmp	r0, #0
     7f4:	d14f      	bne.n	896 <BMSModule::getAvgTemp()+0x17a>
        if (temperatures[0] > 0.5 && temperatures[1] < 0.5 && temperatures[2] > 0.5)
     7f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7fa:	4630      	mov	r0, r6
     7fc:	f00c fcbe 	bl	d17c <__aeabi_fcmplt>
     800:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     804:	2800      	cmp	r0, #0
     806:	d03e      	beq.n	886 <BMSModule::getAvgTemp()+0x16a>
     808:	4638      	mov	r0, r7
     80a:	f00c fcd5 	bl	d1b8 <__aeabi_fcmpgt>
     80e:	2800      	cmp	r0, #0
     810:	d149      	bne.n	8a6 <BMSModule::getAvgTemp()+0x18a>
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] < 0.5)
     812:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     816:	4630      	mov	r0, r6
     818:	f00c fcce 	bl	d1b8 <__aeabi_fcmpgt>
     81c:	b168      	cbz	r0, 83a <BMSModule::getAvgTemp()+0x11e>
     81e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     822:	4638      	mov	r0, r7
     824:	f00c fcaa 	bl	d17c <__aeabi_fcmplt>
     828:	2800      	cmp	r0, #0
     82a:	d146      	bne.n	8ba <BMSModule::getAvgTemp()+0x19e>
        if (temperatures[0] > 0.5 && temperatures[1] < 0.5 && temperatures[2] < 0.5)
     82c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     830:	4630      	mov	r0, r6
     832:	f00c fca3 	bl	d17c <__aeabi_fcmplt>
     836:	2800      	cmp	r0, #0
     838:	d0a8      	beq.n	78c <BMSModule::getAvgTemp()+0x70>
     83a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     83e:	4638      	mov	r0, r7
     840:	f00c fc9c 	bl	d17c <__aeabi_fcmplt>
     844:	2800      	cmp	r0, #0
     846:	d0a1      	beq.n	78c <BMSModule::getAvgTemp()+0x70>
          return (temperatures[0]);
     848:	462c      	mov	r4, r5
     84a:	e7b8      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     84c:	4628      	mov	r0, r5
     84e:	f00c fc95 	bl	d17c <__aeabi_fcmplt>
     852:	2800      	cmp	r0, #0
     854:	d0cf      	beq.n	7f6 <BMSModule::getAvgTemp()+0xda>
     856:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     85a:	4630      	mov	r0, r6
     85c:	f00c fcac 	bl	d1b8 <__aeabi_fcmpgt>
     860:	2800      	cmp	r0, #0
     862:	d0c8      	beq.n	7f6 <BMSModule::getAvgTemp()+0xda>
     864:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     868:	4638      	mov	r0, r7
     86a:	f00c fca5 	bl	d1b8 <__aeabi_fcmpgt>
     86e:	2800      	cmp	r0, #0
     870:	d085      	beq.n	77e <BMSModule::getAvgTemp()+0x62>
          return (temperatures[1] + temperatures[2]) / 2.0f;
     872:	4639      	mov	r1, r7
     874:	4630      	mov	r0, r6
     876:	f00c f9db 	bl	cc30 <__addsf3>
     87a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     87e:	f00c fadf 	bl	ce40 <__aeabi_fmul>
     882:	4604      	mov	r4, r0
     884:	e79b      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] < 0.5)
     886:	4630      	mov	r0, r6
     888:	f00c fc96 	bl	d1b8 <__aeabi_fcmpgt>
     88c:	2800      	cmp	r0, #0
     88e:	d0cd      	beq.n	82c <BMSModule::getAvgTemp()+0x110>
     890:	e7c5      	b.n	81e <BMSModule::getAvgTemp()+0x102>
          return (-80);
     892:	4c0f      	ldr	r4, [pc, #60]	; (8d0 <BMSModule::getAvgTemp()+0x1b4>)
     894:	e793      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     896:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     89a:	4638      	mov	r0, r7
     89c:	f00c fc8c 	bl	d1b8 <__aeabi_fcmpgt>
     8a0:	2800      	cmp	r0, #0
     8a2:	d0a8      	beq.n	7f6 <BMSModule::getAvgTemp()+0xda>
     8a4:	e7e5      	b.n	872 <BMSModule::getAvgTemp()+0x156>
          return (temperatures[0] + temperatures[2]) / 2.0f;
     8a6:	4639      	mov	r1, r7
     8a8:	4628      	mov	r0, r5
     8aa:	f00c f9c1 	bl	cc30 <__addsf3>
     8ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     8b2:	f00c fac5 	bl	ce40 <__aeabi_fmul>
     8b6:	4604      	mov	r4, r0
     8b8:	e781      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
          return (temperatures[0] + temperatures[1]) / 2.0f;
     8ba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     8be:	4640      	mov	r0, r8
     8c0:	f00c fabe 	bl	ce40 <__aeabi_fmul>
     8c4:	4604      	mov	r4, r0
     8c6:	e77a      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
          return (temperatures[1]);
     8c8:	4634      	mov	r4, r6
     8ca:	e778      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
     8cc:	40400000 	.word	0x40400000
     8d0:	c2a00000 	.word	0xc2a00000

000008d4 <BMSModule::getLowTemp()>:
  if (type == 1)
     8d4:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
     8d8:	2b01      	cmp	r3, #1
{
     8da:	b570      	push	{r4, r5, r6, lr}
     8dc:	4604      	mov	r4, r0
  if (type == 1)
     8de:	d120      	bne.n	922 <BMSModule::getLowTemp()+0x4e>
    if (sensor == 0)
     8e0:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
     8e4:	bb0b      	cbnz	r3, 92a <BMSModule::getLowTemp()+0x56>
        if (temperatures[0] > 0.5)
     8e6:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
     8ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     8ee:	4630      	mov	r0, r6
     8f0:	f00c fc62 	bl	d1b8 <__aeabi_fcmpgt>
          if (temperatures[0] < temperatures[1] && temperatures[0] < temperatures[2])
     8f4:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
        if (temperatures[0] > 0.5)
     8f8:	b9e0      	cbnz	r0, 934 <BMSModule::getLowTemp()+0x60>
          if (temperatures[0] < temperatures[1] && temperatures[0] < temperatures[2])
     8fa:	f8d4 40a8 	ldr.w	r4, [r4, #168]	; 0xa8
        if (temperatures[1] > 0.5)
     8fe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     902:	4628      	mov	r0, r5
     904:	f00c fc58 	bl	d1b8 <__aeabi_fcmpgt>
     908:	b168      	cbz	r0, 926 <BMSModule::getLowTemp()+0x52>
          if (temperatures[1] < temperatures[0] && temperatures[1] < temperatures[2])
     90a:	4631      	mov	r1, r6
     90c:	4628      	mov	r0, r5
     90e:	f00c fc35 	bl	d17c <__aeabi_fcmplt>
     912:	b140      	cbz	r0, 926 <BMSModule::getLowTemp()+0x52>
     914:	4621      	mov	r1, r4
     916:	4628      	mov	r0, r5
     918:	f00c fc30 	bl	d17c <__aeabi_fcmplt>
     91c:	b118      	cbz	r0, 926 <BMSModule::getLowTemp()+0x52>
            return (temperatures[1]);
     91e:	462c      	mov	r4, r5
     920:	e001      	b.n	926 <BMSModule::getLowTemp()+0x52>
    return temperatures[0];
     922:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
}
     926:	4620      	mov	r0, r4
     928:	bd70      	pop	{r4, r5, r6, pc}
      return temperatures[sensor - 1];
     92a:	3327      	adds	r3, #39	; 0x27
     92c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
}
     930:	4620      	mov	r0, r4
     932:	bd70      	pop	{r4, r5, r6, pc}
          if (temperatures[0] < temperatures[1] && temperatures[0] < temperatures[2])
     934:	4630      	mov	r0, r6
     936:	4629      	mov	r1, r5
     938:	f00c fc20 	bl	d17c <__aeabi_fcmplt>
     93c:	f8d4 40a8 	ldr.w	r4, [r4, #168]	; 0xa8
     940:	2800      	cmp	r0, #0
     942:	d0dc      	beq.n	8fe <BMSModule::getLowTemp()+0x2a>
     944:	4630      	mov	r0, r6
     946:	4621      	mov	r1, r4
     948:	f00c fc18 	bl	d17c <__aeabi_fcmplt>
     94c:	2800      	cmp	r0, #0
     94e:	d0d6      	beq.n	8fe <BMSModule::getLowTemp()+0x2a>
            return (temperatures[0]);
     950:	4634      	mov	r4, r6
     952:	e7e8      	b.n	926 <BMSModule::getLowTemp()+0x52>

00000954 <BMSModule::decodecan(int, CAN_message_t&)>:
{
     954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     958:	4606      	mov	r6, r0
     95a:	b084      	sub	sp, #16
     95c:	4614      	mov	r4, r2
  switch (Id)
     95e:	2903      	cmp	r1, #3
     960:	d83e      	bhi.n	9e0 <BMSModule::decodecan(int, CAN_message_t&)+0x8c>
     962:	e8df f011 	tbh	[pc, r1, lsl #1]
     966:	0004      	.short	0x0004
     968:	00f80132 	.word	0x00f80132
     96c:	00e7      	.short	0x00e7
      cmuerror = 0;
     96e:	2300      	movs	r3, #0
     970:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
      cellVolt[0] = (uint16_t(msg.buf[1] >> 4) + uint16_t(msg.buf[2] << 4) + 1000) * 0.001;
     974:	7a90      	ldrb	r0, [r2, #10]
     976:	7a53      	ldrb	r3, [r2, #9]
     978:	0100      	lsls	r0, r0, #4
     97a:	eb00 1013 	add.w	r0, r0, r3, lsr #4
     97e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     982:	f00c fa09 	bl	cd98 <__aeabi_i2f>
     986:	49ae      	ldr	r1, [pc, #696]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     988:	f00c fa5a 	bl	ce40 <__aeabi_fmul>
     98c:	6030      	str	r0, [r6, #0]
      cellVolt[2] = (uint16_t(msg.buf[5] << 4) + uint16_t(msg.buf[4] >> 4) + 1000) * 0.001;
     98e:	7b20      	ldrb	r0, [r4, #12]
     990:	7b63      	ldrb	r3, [r4, #13]
     992:	0900      	lsrs	r0, r0, #4
     994:	eb00 1003 	add.w	r0, r0, r3, lsl #4
     998:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     99c:	f00c f9fc 	bl	cd98 <__aeabi_i2f>
     9a0:	49a7      	ldr	r1, [pc, #668]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     9a2:	f00c fa4d 	bl	ce40 <__aeabi_fmul>
     9a6:	60b0      	str	r0, [r6, #8]
      cellVolt[1] = (msg.buf[3] + uint16_t((msg.buf[4] & 0x0F) << 8) + 1000) * 0.001;
     9a8:	7b20      	ldrb	r0, [r4, #12]
     9aa:	7ae3      	ldrb	r3, [r4, #11]
     9ac:	0200      	lsls	r0, r0, #8
     9ae:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     9b2:	4418      	add	r0, r3
     9b4:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     9b8:	f00c f9ee 	bl	cd98 <__aeabi_i2f>
     9bc:	49a0      	ldr	r1, [pc, #640]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     9be:	f00c fa3f 	bl	ce40 <__aeabi_fmul>
     9c2:	6070      	str	r0, [r6, #4]
      cellVolt[3] = (msg.buf[6] + uint16_t((msg.buf[7] & 0x0F) << 8) + 1000) * 0.001;
     9c4:	7be0      	ldrb	r0, [r4, #15]
     9c6:	7ba3      	ldrb	r3, [r4, #14]
     9c8:	0200      	lsls	r0, r0, #8
     9ca:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     9ce:	4418      	add	r0, r3
     9d0:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     9d4:	f00c f9e0 	bl	cd98 <__aeabi_i2f>
     9d8:	4999      	ldr	r1, [pc, #612]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     9da:	f00c fa31 	bl	ce40 <__aeabi_fmul>
     9de:	60f0      	str	r0, [r6, #12]
  if (getLowTemp() < lowestTemperature) lowestTemperature = getLowTemp();
     9e0:	4630      	mov	r0, r6
     9e2:	f7ff ff77 	bl	8d4 <BMSModule::getLowTemp()>
     9e6:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
     9ea:	4604      	mov	r4, r0
     9ec:	f00c fbc6 	bl	d17c <__aeabi_fcmplt>
     9f0:	b108      	cbz	r0, 9f6 <BMSModule::decodecan(int, CAN_message_t&)+0xa2>
     9f2:	f8c6 40ac 	str.w	r4, [r6, #172]	; 0xac
  if (type == 1)
     9f6:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
     9fa:	2b01      	cmp	r3, #1
     9fc:	d10f      	bne.n	a1e <BMSModule::decodecan(int, CAN_message_t&)+0xca>
    if (sensor == 0)
     9fe:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
     a02:	2b00      	cmp	r3, #0
     a04:	f040 8092 	bne.w	b2c <BMSModule::decodecan(int, CAN_message_t&)+0x1d8>
     a08:	f8d6 50a0 	ldr.w	r5, [r6, #160]	; 0xa0
     a0c:	f8d6 40a4 	ldr.w	r4, [r6, #164]	; 0xa4
      return (temperatures[0] < temperatures[1]) ? temperatures[1] : temperatures[0];
     a10:	4628      	mov	r0, r5
     a12:	4621      	mov	r1, r4
     a14:	f00c fbb2 	bl	d17c <__aeabi_fcmplt>
     a18:	b918      	cbnz	r0, a22 <BMSModule::decodecan(int, CAN_message_t&)+0xce>
     a1a:	462c      	mov	r4, r5
     a1c:	e001      	b.n	a22 <BMSModule::decodecan(int, CAN_message_t&)+0xce>
    return temperatures[0];
     a1e:	f8d6 40a0 	ldr.w	r4, [r6, #160]	; 0xa0
  if (getHighTemp() > highestTemperature) highestTemperature = getHighTemp();
     a22:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
     a26:	4621      	mov	r1, r4
     a28:	f00c fba8 	bl	d17c <__aeabi_fcmplt>
     a2c:	b108      	cbz	r0, a32 <BMSModule::decodecan(int, CAN_message_t&)+0xde>
     a2e:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
    if (highestCellVolt[i] < cellVolt[i] && cellVolt[i] > 5.0) highestCellVolt[i] = cellVolt[i];
     a32:	f8df 8210 	ldr.w	r8, [pc, #528]	; c44 <BMSModule::decodecan(int, CAN_message_t&)+0x2f0>
     a36:	1f34      	subs	r4, r6, #4
     a38:	f106 0730 	add.w	r7, r6, #48	; 0x30
    if (lowestCellVolt[i] > cellVolt[i] && cellVolt[i] >= IgnoreCell) lowestCellVolt[i] = cellVolt[i];
     a3c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
     a3e:	f854 5f04 	ldr.w	r5, [r4, #4]!
     a42:	4629      	mov	r1, r5
     a44:	f00c fbb8 	bl	d1b8 <__aeabi_fcmpgt>
     a48:	4603      	mov	r3, r0
     a4a:	4628      	mov	r0, r5
     a4c:	b12b      	cbz	r3, a5a <BMSModule::decodecan(int, CAN_message_t&)+0x106>
     a4e:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
     a52:	f00c fba7 	bl	d1a4 <__aeabi_fcmpge>
     a56:	b100      	cbz	r0, a5a <BMSModule::decodecan(int, CAN_message_t&)+0x106>
     a58:	6365      	str	r5, [r4, #52]	; 0x34
    if (highestCellVolt[i] < cellVolt[i] && cellVolt[i] > 5.0) highestCellVolt[i] = cellVolt[i];
     a5a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
     a5c:	4628      	mov	r0, r5
     a5e:	f00c fbab 	bl	d1b8 <__aeabi_fcmpgt>
     a62:	4603      	mov	r3, r0
     a64:	4641      	mov	r1, r8
     a66:	4628      	mov	r0, r5
     a68:	b11b      	cbz	r3, a72 <BMSModule::decodecan(int, CAN_message_t&)+0x11e>
     a6a:	f00c fba5 	bl	d1b8 <__aeabi_fcmpgt>
     a6e:	b100      	cbz	r0, a72 <BMSModule::decodecan(int, CAN_message_t&)+0x11e>
     a70:	66a5      	str	r5, [r4, #104]	; 0x68
  for (int i = 0; i < 13; i++)
     a72:	42a7      	cmp	r7, r4
     a74:	d1e2      	bne.n	a3c <BMSModule::decodecan(int, CAN_message_t&)+0xe8>
  if (cmuerror == 0)
     a76:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
     a7a:	b943      	cbnz	r3, a8e <BMSModule::decodecan(int, CAN_message_t&)+0x13a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a7c:	4b72      	ldr	r3, [pc, #456]	; (c48 <BMSModule::decodecan(int, CAN_message_t&)+0x2f4>)
     a7e:	681b      	ldr	r3, [r3, #0]
     a80:	9300      	str	r3, [sp, #0]
	return ret;
     a82:	9b00      	ldr	r3, [sp, #0]
    lasterror = millis();
     a84:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
}
     a88:	b004      	add	sp, #16
     a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a8e:	4c6e      	ldr	r4, [pc, #440]	; (c48 <BMSModule::decodecan(int, CAN_message_t&)+0x2f4>)
    if (millis() - lasterror < timeout)
     a90:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
     a94:	6822      	ldr	r2, [r4, #0]
     a96:	9201      	str	r2, [sp, #4]
	return ret;
     a98:	9a01      	ldr	r2, [sp, #4]
     a9a:	f8d6 10f0 	ldr.w	r1, [r6, #240]	; 0xf0
     a9e:	1ad2      	subs	r2, r2, r3
     aa0:	428a      	cmp	r2, r1
     aa2:	d232      	bcs.n	b0a <BMSModule::decodecan(int, CAN_message_t&)+0x1b6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     aa4:	6822      	ldr	r2, [r4, #0]
     aa6:	9202      	str	r2, [sp, #8]
	return ret;
     aa8:	9a02      	ldr	r2, [sp, #8]
      if (lasterror + timeout - millis() < 5000)
     aaa:	440b      	add	r3, r1
     aac:	1a9b      	subs	r3, r3, r2
     aae:	f241 3287 	movw	r2, #4999	; 0x1387
     ab2:	4293      	cmp	r3, r2
     ab4:	d8e8      	bhi.n	a88 <BMSModule::decodecan(int, CAN_message_t&)+0x134>
     ab6:	2102      	movs	r1, #2
     ab8:	4864      	ldr	r0, [pc, #400]	; (c4c <BMSModule::decodecan(int, CAN_message_t&)+0x2f8>)
     aba:	f00b fae1 	bl	c080 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     abe:	4864      	ldr	r0, [pc, #400]	; (c50 <BMSModule::decodecan(int, CAN_message_t&)+0x2fc>)
     ac0:	f008 fd98 	bl	95f4 <Print::println()>
     ac4:	2106      	movs	r1, #6
     ac6:	4863      	ldr	r0, [pc, #396]	; (c54 <BMSModule::decodecan(int, CAN_message_t&)+0x300>)
     ac8:	f00b fada 	bl	c080 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     acc:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
     ad0:	485f      	ldr	r0, [pc, #380]	; (c50 <BMSModule::decodecan(int, CAN_message_t&)+0x2fc>)
     ad2:	2300      	movs	r3, #0
     ad4:	220a      	movs	r2, #10
     ad6:	f008 fda5 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ada:	2119      	movs	r1, #25
     adc:	485e      	ldr	r0, [pc, #376]	; (c58 <BMSModule::decodecan(int, CAN_message_t&)+0x304>)
     ade:	f00b facf 	bl	c080 <usb_serial_write>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ae2:	6821      	ldr	r1, [r4, #0]
        SERIALCONSOLE.println(lasterror + timeout - millis() );
     ae4:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
     ae8:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
     aec:	9103      	str	r1, [sp, #12]
	return ret;
     aee:	9c03      	ldr	r4, [sp, #12]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     af0:	4857      	ldr	r0, [pc, #348]	; (c50 <BMSModule::decodecan(int, CAN_message_t&)+0x2fc>)
     af2:	1899      	adds	r1, r3, r2
     af4:	1b09      	subs	r1, r1, r4
     af6:	2300      	movs	r3, #0
     af8:	220a      	movs	r2, #10
     afa:	f008 fd93 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     afe:	4854      	ldr	r0, [pc, #336]	; (c50 <BMSModule::decodecan(int, CAN_message_t&)+0x2fc>)
}
     b00:	b004      	add	sp, #16
     b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     b06:	f008 bd75 	b.w	95f4 <Print::println()>
        cellVolt[i] = 0.0f;
     b0a:	2220      	movs	r2, #32
     b0c:	2100      	movs	r1, #0
     b0e:	4630      	mov	r0, r6
     b10:	f00d fa18 	bl	df44 <memset>
      moduleVolt = 0.0f;
     b14:	2300      	movs	r3, #0
     b16:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
      temperatures[0] = 0.0f;
     b1a:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
      temperatures[1] = 0.0f;
     b1e:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
      temperatures[2] = 0.0f;
     b22:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
}
     b26:	b004      	add	sp, #16
     b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return temperatures[sensor - 1];
     b2c:	3327      	adds	r3, #39	; 0x27
     b2e:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
     b32:	e776      	b.n	a22 <BMSModule::decodecan(int, CAN_message_t&)+0xce>
      cmuerror = 0;
     b34:	2300      	movs	r3, #0
     b36:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
      cellVolt[12] = (uint16_t(msg.buf[1] >> 4) + uint16_t(msg.buf[2] << 4) + 1000) * 0.001;
     b3a:	7a90      	ldrb	r0, [r2, #10]
     b3c:	7a53      	ldrb	r3, [r2, #9]
     b3e:	0100      	lsls	r0, r0, #4
     b40:	eb00 1013 	add.w	r0, r0, r3, lsr #4
     b44:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     b48:	f00c f926 	bl	cd98 <__aeabi_i2f>
     b4c:	493c      	ldr	r1, [pc, #240]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     b4e:	f00c f977 	bl	ce40 <__aeabi_fmul>
     b52:	6330      	str	r0, [r6, #48]	; 0x30
      break;
     b54:	e744      	b.n	9e0 <BMSModule::decodecan(int, CAN_message_t&)+0x8c>
      cmuerror = 0;
     b56:	2300      	movs	r3, #0
     b58:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
      cellVolt[8] = (uint16_t(msg.buf[1] >> 4) + uint16_t(msg.buf[2] << 4) + 1000) * 0.001;
     b5c:	7a90      	ldrb	r0, [r2, #10]
     b5e:	7a53      	ldrb	r3, [r2, #9]
     b60:	0100      	lsls	r0, r0, #4
     b62:	eb00 1013 	add.w	r0, r0, r3, lsr #4
     b66:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     b6a:	f00c f915 	bl	cd98 <__aeabi_i2f>
     b6e:	4934      	ldr	r1, [pc, #208]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     b70:	f00c f966 	bl	ce40 <__aeabi_fmul>
     b74:	6230      	str	r0, [r6, #32]
      cellVolt[10] = (uint16_t(msg.buf[5] << 4) + uint16_t(msg.buf[4] >> 4) + 1000) * 0.001;
     b76:	7b20      	ldrb	r0, [r4, #12]
     b78:	7b63      	ldrb	r3, [r4, #13]
     b7a:	0900      	lsrs	r0, r0, #4
     b7c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
     b80:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     b84:	f00c f908 	bl	cd98 <__aeabi_i2f>
     b88:	492d      	ldr	r1, [pc, #180]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     b8a:	f00c f959 	bl	ce40 <__aeabi_fmul>
     b8e:	62b0      	str	r0, [r6, #40]	; 0x28
      cellVolt[9] = (msg.buf[3] + uint16_t((msg.buf[4] & 0x0F) << 8) + 1000) * 0.001;
     b90:	7b20      	ldrb	r0, [r4, #12]
     b92:	7ae3      	ldrb	r3, [r4, #11]
     b94:	0200      	lsls	r0, r0, #8
     b96:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     b9a:	4418      	add	r0, r3
     b9c:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     ba0:	f00c f8fa 	bl	cd98 <__aeabi_i2f>
     ba4:	4926      	ldr	r1, [pc, #152]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     ba6:	f00c f94b 	bl	ce40 <__aeabi_fmul>
     baa:	6270      	str	r0, [r6, #36]	; 0x24
      cellVolt[11] = (msg.buf[6] + uint16_t((msg.buf[7] & 0x0F) << 8) + 1000) * 0.001;
     bac:	7be0      	ldrb	r0, [r4, #15]
     bae:	7ba3      	ldrb	r3, [r4, #14]
     bb0:	0200      	lsls	r0, r0, #8
     bb2:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     bb6:	4418      	add	r0, r3
     bb8:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     bbc:	f00c f8ec 	bl	cd98 <__aeabi_i2f>
     bc0:	491f      	ldr	r1, [pc, #124]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     bc2:	f00c f93d 	bl	ce40 <__aeabi_fmul>
     bc6:	62f0      	str	r0, [r6, #44]	; 0x2c
      break;
     bc8:	e70a      	b.n	9e0 <BMSModule::decodecan(int, CAN_message_t&)+0x8c>
      cmuerror = 0;
     bca:	2300      	movs	r3, #0
     bcc:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
      cellVolt[4] = (uint16_t(msg.buf[1] >> 4) + uint16_t(msg.buf[2] << 4) + 1000) * 0.001;
     bd0:	7a90      	ldrb	r0, [r2, #10]
     bd2:	7a53      	ldrb	r3, [r2, #9]
     bd4:	0100      	lsls	r0, r0, #4
     bd6:	eb00 1013 	add.w	r0, r0, r3, lsr #4
     bda:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     bde:	f00c f8db 	bl	cd98 <__aeabi_i2f>
     be2:	4917      	ldr	r1, [pc, #92]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     be4:	f00c f92c 	bl	ce40 <__aeabi_fmul>
     be8:	6130      	str	r0, [r6, #16]
      cellVolt[6] = (uint16_t(msg.buf[5] << 4) + uint16_t(msg.buf[4] >> 4) + 1000) * 0.001;
     bea:	7b20      	ldrb	r0, [r4, #12]
     bec:	7b63      	ldrb	r3, [r4, #13]
     bee:	0900      	lsrs	r0, r0, #4
     bf0:	eb00 1003 	add.w	r0, r0, r3, lsl #4
     bf4:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     bf8:	f00c f8ce 	bl	cd98 <__aeabi_i2f>
     bfc:	4910      	ldr	r1, [pc, #64]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     bfe:	f00c f91f 	bl	ce40 <__aeabi_fmul>
     c02:	61b0      	str	r0, [r6, #24]
      cellVolt[5] = (msg.buf[3] + uint16_t((msg.buf[4] & 0x0F) << 8) + 1000) * 0.001;
     c04:	7b20      	ldrb	r0, [r4, #12]
     c06:	7ae3      	ldrb	r3, [r4, #11]
     c08:	0200      	lsls	r0, r0, #8
     c0a:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     c0e:	4418      	add	r0, r3
     c10:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     c14:	f00c f8c0 	bl	cd98 <__aeabi_i2f>
     c18:	4909      	ldr	r1, [pc, #36]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     c1a:	f00c f911 	bl	ce40 <__aeabi_fmul>
     c1e:	6170      	str	r0, [r6, #20]
      cellVolt[7] = (msg.buf[6] + uint16_t((msg.buf[7] & 0x0F) << 8) + 1000) * 0.001;
     c20:	7be0      	ldrb	r0, [r4, #15]
     c22:	7ba3      	ldrb	r3, [r4, #14]
     c24:	0200      	lsls	r0, r0, #8
     c26:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     c2a:	4418      	add	r0, r3
     c2c:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     c30:	f00c f8b2 	bl	cd98 <__aeabi_i2f>
     c34:	4902      	ldr	r1, [pc, #8]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     c36:	f00c f903 	bl	ce40 <__aeabi_fmul>
     c3a:	61f0      	str	r0, [r6, #28]
      break;
     c3c:	e6d0      	b.n	9e0 <BMSModule::decodecan(int, CAN_message_t&)+0x8c>
     c3e:	bf00      	nop
     c40:	3a83126f 	.word	0x3a83126f
     c44:	40a00000 	.word	0x40a00000
     c48:	1fffd3c0 	.word	0x1fffd3c0
     c4c:	00014ea8 	.word	0x00014ea8
     c50:	1fff89fc 	.word	0x1fff89fc
     c54:	00013b8c 	.word	0x00013b8c
     c58:	00013b94 	.word	0x00013b94

00000c5c <BMSModule::getModuleVoltage()>:

float BMSModule::getModuleVoltage()
{
     c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  moduleVolt = 0;
     c60:	2600      	movs	r6, #0
  for (int I; I < 13; I++)
  {
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     c62:	f8d0 90bc 	ldr.w	r9, [r0, #188]	; 0xbc
     c66:	4f10      	ldr	r7, [pc, #64]	; (ca8 <BMSModule::getModuleVoltage()+0x4c>)
  moduleVolt = 0;
     c68:	f8c0 609c 	str.w	r6, [r0, #156]	; 0x9c
{
     c6c:	4682      	mov	sl, r0
     c6e:	1f05      	subs	r5, r0, #4
     c70:	f100 0830 	add.w	r8, r0, #48	; 0x30
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     c74:	f855 4f04 	ldr.w	r4, [r5, #4]!
     c78:	4649      	mov	r1, r9
     c7a:	4620      	mov	r0, r4
     c7c:	f00c fa9c 	bl	d1b8 <__aeabi_fcmpgt>
     c80:	4603      	mov	r3, r0
     c82:	4639      	mov	r1, r7
     c84:	4620      	mov	r0, r4
     c86:	b153      	cbz	r3, c9e <BMSModule::getModuleVoltage()+0x42>
     c88:	f00c fa78 	bl	d17c <__aeabi_fcmplt>
     c8c:	4603      	mov	r3, r0
    {
      moduleVolt = moduleVolt + cellVolt[I];
     c8e:	4621      	mov	r1, r4
     c90:	4630      	mov	r0, r6
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     c92:	b123      	cbz	r3, c9e <BMSModule::getModuleVoltage()+0x42>
      moduleVolt = moduleVolt + cellVolt[I];
     c94:	f00b ffcc 	bl	cc30 <__addsf3>
     c98:	4606      	mov	r6, r0
     c9a:	f8ca 009c 	str.w	r0, [sl, #156]	; 0x9c
  for (int I; I < 13; I++)
     c9e:	4545      	cmp	r5, r8
     ca0:	d1e8      	bne.n	c74 <BMSModule::getModuleVoltage()+0x18>
    }
  }
  return moduleVolt;
}
     ca2:	4630      	mov	r0, r6
     ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ca8:	40a00000 	.word	0x40a00000

00000cac <BMSModule::getTemperature(int)>:

float BMSModule::getTemperature(int temp)
{
  if (temp < 0 || temp > 2) return 0.0f;
     cac:	2902      	cmp	r1, #2
  return temperatures[temp];
     cae:	bf9a      	itte	ls
     cb0:	3128      	addls	r1, #40	; 0x28
     cb2:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
  if (temp < 0 || temp > 2) return 0.0f;
     cb6:	2000      	movhi	r0, #0
}
     cb8:	4770      	bx	lr
     cba:	bf00      	nop

00000cbc <BMSModule::setAddress(int)>:

void BMSModule::setAddress(int newAddr)
{
  if (newAddr < 0 || newAddr > MAX_MODULE_ADDR) return;
     cbc:	293e      	cmp	r1, #62	; 0x3e
  moduleAddress = newAddr;
     cbe:	bf98      	it	ls
     cc0:	f880 10dc 	strbls.w	r1, [r0, #220]	; 0xdc
}
     cc4:	4770      	bx	lr
     cc6:	bf00      	nop

00000cc8 <BMSModule::getType()>:
}

int BMSModule::getType()
{
  return type;
}
     cc8:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
     ccc:	4770      	bx	lr
     cce:	bf00      	nop

00000cd0 <BMSModule::getBalStat()>:

int BMSModule::getBalStat()
{
  return balstat;
}
     cd0:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
     cd4:	4770      	bx	lr
     cd6:	bf00      	nop

00000cd8 <BMSModule::isExisting()>:

bool BMSModule::isExisting()
{
  return exists;
}
     cd8:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
     cdc:	4770      	bx	lr
     cde:	bf00      	nop

00000ce0 <BMSModule::isReset()>:

bool BMSModule::isReset()
{
  return reset;
}
     ce0:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
     ce4:	4770      	bx	lr
     ce6:	bf00      	nop

00000ce8 <BMSModule::settempsensor(int)>:

void BMSModule::settempsensor(int tempsensor)
{
  sensor = tempsensor;
     ce8:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8
}
     cec:	4770      	bx	lr
     cee:	bf00      	nop

00000cf0 <BMSModule::setExists(bool)>:

void BMSModule::setExists(bool ex)
{
  exists = ex;
     cf0:	f880 10c4 	strb.w	r1, [r0, #196]	; 0xc4
}
     cf4:	4770      	bx	lr
     cf6:	bf00      	nop

00000cf8 <BMSModule::setDelta(float)>:

void BMSModule::setDelta(float ex)
{
  VoltDelta = ex;
     cf8:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
}
     cfc:	4770      	bx	lr
     cfe:	bf00      	nop

00000d00 <BMSModule::setReset(bool)>:

void BMSModule::setReset(bool ex)
{
  reset = ex;
     d00:	f880 10c5 	strb.w	r1, [r0, #197]	; 0xc5
}
     d04:	4770      	bx	lr
     d06:	bf00      	nop

00000d08 <BMSModule::setIgnoreCell(float)>:

void BMSModule::setIgnoreCell(float Ignore)
{
     d08:	b530      	push	{r4, r5, lr}
  IgnoreCell = Ignore;
  Serial.println();
     d0a:	4c0f      	ldr	r4, [pc, #60]	; (d48 <BMSModule::setIgnoreCell(float)+0x40>)
  IgnoreCell = Ignore;
     d0c:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
{
     d10:	b083      	sub	sp, #12
  Serial.println();
     d12:	4620      	mov	r0, r4
{
     d14:	460d      	mov	r5, r1
  Serial.println();
     d16:	f008 fc6d 	bl	95f4 <Print::println()>
  Serial.println();
     d1a:	4620      	mov	r0, r4
     d1c:	f008 fc6a 	bl	95f4 <Print::println()>
  Serial.println(Ignore);
     d20:	4628      	mov	r0, r5
     d22:	f00b fe69 	bl	c9f8 <__aeabi_f2d>
     d26:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     d28:	2102      	movs	r1, #2
     d2a:	4602      	mov	r2, r0
     d2c:	9100      	str	r1, [sp, #0]
     d2e:	4620      	mov	r0, r4
     d30:	f008 fc82 	bl	9638 <Print::printFloat(double, unsigned char)>
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     d34:	4620      	mov	r0, r4
     d36:	f008 fc5d 	bl	95f4 <Print::println()>
  Serial.println();
     d3a:	4620      	mov	r0, r4

}
     d3c:	b003      	add	sp, #12
     d3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  Serial.println();
     d42:	f008 bc57 	b.w	95f4 <Print::println()>
     d46:	bf00      	nop
     d48:	1fff89fc 	.word	0x1fff89fc

00000d4c <BMSModuleManager::BMSModuleManager()>:
BMSModuleManager::BMSModuleManager()
     d4c:	b570      	push	{r4, r5, r6, lr}
     d4e:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
     d52:	4606      	mov	r6, r0
     d54:	f100 042c 	add.w	r4, r0, #44	; 0x2c
     d58:	3534      	adds	r5, #52	; 0x34
     d5a:	4620      	mov	r0, r4
     d5c:	34f8      	adds	r4, #248	; 0xf8
     d5e:	f7ff fb7b 	bl	458 <BMSModule::BMSModule()>
     d62:	42ac      	cmp	r4, r5
     d64:	d1f9      	bne.n	d5a <BMSModuleManager::BMSModuleManager()+0xe>
     d66:	f506 7592 	add.w	r5, r6, #292	; 0x124
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     d6a:	2401      	movs	r4, #1
    modules[i].setExists(false);
     d6c:	4628      	mov	r0, r5
     d6e:	2100      	movs	r1, #0
     d70:	f7ff ffbe 	bl	cf0 <BMSModule::setExists(bool)>
    modules[i].setAddress(i);
     d74:	4621      	mov	r1, r4
     d76:	4628      	mov	r0, r5
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     d78:	3401      	adds	r4, #1
    modules[i].setAddress(i);
     d7a:	f7ff ff9f 	bl	cbc <BMSModule::setAddress(int)>
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     d7e:	2c3f      	cmp	r4, #63	; 0x3f
     d80:	f105 05f8 	add.w	r5, r5, #248	; 0xf8
     d84:	d1f2      	bne.n	d6c <BMSModuleManager::BMSModuleManager()+0x20>
  isFaulted = false;
     d86:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
  lowestPackVolt = 1000.0f;
     d8a:	4807      	ldr	r0, [pc, #28]	; (da8 <BMSModuleManager::BMSModuleManager()+0x5c>)
     d8c:	6130      	str	r0, [r6, #16]
  highestPackVolt = 0.0f;
     d8e:	2100      	movs	r1, #0
     d90:	6171      	str	r1, [r6, #20]
  isFaulted = false;
     d92:	2200      	movs	r2, #0
  lowestPackTemp = 200.0f;
     d94:	4805      	ldr	r0, [pc, #20]	; (dac <BMSModuleManager::BMSModuleManager()+0x60>)
  highestPackTemp = -100.0f;
     d96:	4906      	ldr	r1, [pc, #24]	; (db0 <BMSModuleManager::BMSModuleManager()+0x64>)
  lowestPackTemp = 200.0f;
     d98:	61b0      	str	r0, [r6, #24]
  highestPackTemp = -100.0f;
     d9a:	61f1      	str	r1, [r6, #28]
  balcnt = 0;//counter to stop balancing for cell measurement
     d9c:	f883 2d3e 	strb.w	r2, [r3, #3390]	; 0xd3e
}
     da0:	4630      	mov	r0, r6
  isFaulted = false;
     da2:	f8a3 2d3c 	strh.w	r2, [r3, #3388]	; 0xd3c
}
     da6:	bd70      	pop	{r4, r5, r6, pc}
     da8:	447a0000 	.word	0x447a0000
     dac:	43480000 	.word	0x43480000
     db0:	c2c80000 	.word	0xc2c80000

00000db4 <BMSModuleManager::checkcomms()>:
{
     db4:	b570      	push	{r4, r5, r6, lr}
     db6:	f500 7492 	add.w	r4, r0, #292	; 0x124
  for (int y = 1; y < 63; y++)
     dba:	2501      	movs	r5, #1
  int g = 0;
     dbc:	2600      	movs	r6, #0
     dbe:	e00d      	b.n	ddc <BMSModuleManager::checkcomms()+0x28>
      g = 1;
     dc0:	2601      	movs	r6, #1
    modules[y].setReset(false);
     dc2:	4620      	mov	r0, r4
     dc4:	2100      	movs	r1, #0
     dc6:	f7ff ff9b 	bl	d00 <BMSModule::setReset(bool)>
    modules[y].setAddress(y);
     dca:	4629      	mov	r1, r5
     dcc:	4620      	mov	r0, r4
  for (int y = 1; y < 63; y++)
     dce:	3501      	adds	r5, #1
    modules[y].setAddress(y);
     dd0:	f7ff ff74 	bl	cbc <BMSModule::setAddress(int)>
  for (int y = 1; y < 63; y++)
     dd4:	2d3f      	cmp	r5, #63	; 0x3f
     dd6:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
     dda:	d00f      	beq.n	dfc <BMSModuleManager::checkcomms()+0x48>
    if (modules[y].isExisting())
     ddc:	4620      	mov	r0, r4
     dde:	f7ff ff7b 	bl	cd8 <BMSModule::isExisting()>
     de2:	4603      	mov	r3, r0
      if (modules[y].isReset())
     de4:	4620      	mov	r0, r4
    if (modules[y].isExisting())
     de6:	2b00      	cmp	r3, #0
     de8:	d0eb      	beq.n	dc2 <BMSModuleManager::checkcomms()+0xe>
      if (modules[y].isReset())
     dea:	f7ff ff79 	bl	ce0 <BMSModule::isReset()>
     dee:	4606      	mov	r6, r0
     df0:	2800      	cmp	r0, #0
     df2:	d1e5      	bne.n	dc0 <BMSModuleManager::checkcomms()+0xc>
        modules[y].setExists(false);
     df4:	4601      	mov	r1, r0
     df6:	4620      	mov	r0, r4
     df8:	f7ff ff7a 	bl	cf0 <BMSModule::setExists(bool)>
}
     dfc:	4630      	mov	r0, r6
     dfe:	bd70      	pop	{r4, r5, r6, pc}

00000e00 <BMSModuleManager::setBalanceHyst(float)>:
  BalHys = newVal;
     e00:	6281      	str	r1, [r0, #40]	; 0x28
}
     e02:	4770      	bx	lr

00000e04 <BMSModuleManager::balanceCells(int)>:
{
     e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (balcnt > 60)
     e08:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
{
     e0c:	b083      	sub	sp, #12
  if (balcnt > 60)
     e0e:	f893 4d3e 	ldrb.w	r4, [r3, #3390]	; 0xd3e
     e12:	9301      	str	r3, [sp, #4]
     e14:	2c3c      	cmp	r4, #60	; 0x3c
{
     e16:	9100      	str	r1, [sp, #0]
  if (balcnt > 60)
     e18:	d90e      	bls.n	e38 <BMSModuleManager::balanceCells(int)+0x34>
     e1a:	f8df 8294 	ldr.w	r8, [pc, #660]	; 10b0 <BMSModuleManager::balanceCells(int)+0x2ac>
          for (int i = 0; i < 8; i++)
     e1e:	2301      	movs	r3, #1
  OUTmsg.ext = 0;
     e20:	f898 2006 	ldrb.w	r2, [r8, #6]
  balcnt++;
     e24:	9901      	ldr	r1, [sp, #4]
  OUTmsg.ext = 0;
     e26:	f36f 0200 	bfc	r2, #0, #1
  balcnt++;
     e2a:	f881 3d3e 	strb.w	r3, [r1, #3390]	; 0xd3e
  OUTmsg.ext = 0;
     e2e:	f888 2006 	strb.w	r2, [r8, #6]
}
     e32:	b003      	add	sp, #12
     e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (balcnt > 10)
     e38:	2c0a      	cmp	r4, #10
     e3a:	f240 8179 	bls.w	1130 <BMSModuleManager::balanceCells(int)+0x32c>
     e3e:	2c14      	cmp	r4, #20
     e40:	4605      	mov	r5, r0
    if (balcnt == 11 || balcnt == 15 || balcnt == 20 || balcnt == 25 || balcnt == 30 || balcnt == 35 || balcnt == 40 || balcnt == 45 || balcnt == 50 || balcnt == 55)
     e42:	d90e      	bls.n	e62 <BMSModuleManager::balanceCells(int)+0x5e>
     e44:	f1a4 0319 	sub.w	r3, r4, #25
     e48:	b2db      	uxtb	r3, r3
     e4a:	2b1e      	cmp	r3, #30
     e4c:	d804      	bhi.n	e58 <BMSModuleManager::balanceCells(int)+0x54>
     e4e:	4a99      	ldr	r2, [pc, #612]	; (10b4 <BMSModuleManager::balanceCells(int)+0x2b0>)
     e50:	fa22 f303 	lsr.w	r3, r2, r3
     e54:	07da      	lsls	r2, r3, #31
     e56:	d40c      	bmi.n	e72 <BMSModuleManager::balanceCells(int)+0x6e>
  balcnt++;
     e58:	1c63      	adds	r3, r4, #1
     e5a:	f8df 8254 	ldr.w	r8, [pc, #596]	; 10b0 <BMSModuleManager::balanceCells(int)+0x2ac>
     e5e:	b2db      	uxtb	r3, r3
     e60:	e7de      	b.n	e20 <BMSModuleManager::balanceCells(int)+0x1c>
     e62:	f1a4 020b 	sub.w	r2, r4, #11
     e66:	b2d2      	uxtb	r2, r2
     e68:	f240 2311 	movw	r3, #529	; 0x211
     e6c:	40d3      	lsrs	r3, r2
     e6e:	07db      	lsls	r3, r3, #31
     e70:	d5f2      	bpl.n	e58 <BMSModuleManager::balanceCells(int)+0x54>
      balancing = false;
     e72:	9a01      	ldr	r2, [sp, #4]
     e74:	f8df 8238 	ldr.w	r8, [pc, #568]	; 10b0 <BMSModuleManager::balanceCells(int)+0x2ac>
     e78:	2300      	movs	r3, #0
     e7a:	f882 3d3d 	strb.w	r3, [r2, #3389]	; 0xd3d
      for (int y = 1; y < 63; y++)
     e7e:	f505 7692 	add.w	r6, r5, #292	; 0x124
     e82:	2701      	movs	r7, #1
              OUTmsg.id  = 0x1A555417;
     e84:	46a9      	mov	r9, r5
     e86:	e005      	b.n	e94 <BMSModuleManager::balanceCells(int)+0x90>
      for (int y = 1; y < 63; y++)
     e88:	3701      	adds	r7, #1
     e8a:	2f3f      	cmp	r7, #63	; 0x3f
     e8c:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
     e90:	f000 8091 	beq.w	fb6 <BMSModuleManager::balanceCells(int)+0x1b2>
        if (modules[y].isExisting() == 1)
     e94:	4630      	mov	r0, r6
     e96:	f7ff ff1f 	bl	cd8 <BMSModule::isExisting()>
     e9a:	2800      	cmp	r0, #0
     e9c:	d0f4      	beq.n	e88 <BMSModuleManager::balanceCells(int)+0x84>
          for (int i = 0; i < 12; i++)
     e9e:	f04f 0b00 	mov.w	fp, #0
          balance = 0;
     ea2:	465d      	mov	r5, fp
              balance = balance | (1 << i);
     ea4:	2401      	movs	r4, #1
            if ((LowCellVolt + BalHys) < modules[y].getCellVoltage(i))
     ea6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
     eaa:	f8d9 0008 	ldr.w	r0, [r9, #8]
     eae:	f00b febf 	bl	cc30 <__addsf3>
     eb2:	4659      	mov	r1, fp
     eb4:	4682      	mov	sl, r0
     eb6:	4630      	mov	r0, r6
     eb8:	f7ff fb8e 	bl	5d8 <BMSModule::getCellVoltage(int)>
     ebc:	4601      	mov	r1, r0
     ebe:	4650      	mov	r0, sl
     ec0:	f00c f95c 	bl	d17c <__aeabi_fcmplt>
     ec4:	b118      	cbz	r0, ece <BMSModuleManager::balanceCells(int)+0xca>
              balance = balance | (1 << i);
     ec6:	fa04 f30b 	lsl.w	r3, r4, fp
     eca:	432b      	orrs	r3, r5
     ecc:	b29d      	uxth	r5, r3
          for (int i = 0; i < 12; i++)
     ece:	f10b 0b01 	add.w	fp, fp, #1
     ed2:	f1bb 0f0c 	cmp.w	fp, #12
     ed6:	d1e6      	bne.n	ea6 <BMSModuleManager::balanceCells(int)+0xa2>
          if (balance > 0)
     ed8:	b11d      	cbz	r5, ee2 <BMSModuleManager::balanceCells(int)+0xde>
            balancing = true;
     eda:	9a01      	ldr	r2, [sp, #4]
     edc:	2301      	movs	r3, #1
     ede:	f882 3d3d 	strb.w	r3, [r2, #3389]	; 0xd3d
          if (debug == 1)
     ee2:	9b00      	ldr	r3, [sp, #0]
     ee4:	2b01      	cmp	r3, #1
     ee6:	f000 80c9 	beq.w	107c <BMSModuleManager::balanceCells(int)+0x278>
          OUTmsg.buf[0] = 0X00;
     eea:	2400      	movs	r4, #0
     eec:	4a72      	ldr	r2, [pc, #456]	; (10b8 <BMSModuleManager::balanceCells(int)+0x2b4>)
     eee:	f8c8 4008 	str.w	r4, [r8, #8]
          OUTmsg.buf[4] = 0X00;
     ef2:	f8c8 400c 	str.w	r4, [r8, #12]
            if (bitRead(balance, i) == 1)
     ef6:	fa45 f304 	asr.w	r3, r5, r4
     efa:	f003 0301 	and.w	r3, r3, #1
          for (int i = 0; i < 8; i++)
     efe:	3401      	adds	r4, #1
            if (bitRead(balance, i) == 1)
     f00:	00db      	lsls	r3, r3, #3
          for (int i = 0; i < 8; i++)
     f02:	2c08      	cmp	r4, #8
     f04:	f802 3f01 	strb.w	r3, [r2, #1]!
     f08:	d1f5      	bne.n	ef6 <BMSModuleManager::balanceCells(int)+0xf2>
          switch (y)
     f0a:	f107 3bff 	add.w	fp, r7, #4294967295
     f0e:	f1bb 0f0b 	cmp.w	fp, #11
     f12:	d80a      	bhi.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
     f14:	e8df f00b 	tbb	[pc, fp]
     f18:	a2aaaea6 	.word	0xa2aaaea6
     f1c:	72767a9e 	.word	0x72767a9e
     f20:	06666a6e 	.word	0x06666a6e
              OUTmsg.id  = 0x1A5554AF;
     f24:	4b65      	ldr	r3, [pc, #404]	; (10bc <BMSModuleManager::balanceCells(int)+0x2b8>)
     f26:	f8c8 3000 	str.w	r3, [r8]
          OUTmsg.ext = 1;
     f2a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
          Can0.write(OUTmsg);
     f2e:	4960      	ldr	r1, [pc, #384]	; (10b0 <BMSModuleManager::balanceCells(int)+0x2ac>)
     f30:	4863      	ldr	r0, [pc, #396]	; (10c0 <BMSModuleManager::balanceCells(int)+0x2bc>)
          OUTmsg.ext = 1;
     f32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     f3a:	f043 0301 	orr.w	r3, r3, #1
     f3e:	f8a8 3006 	strh.w	r3, [r8, #6]
          Can0.write(OUTmsg);
     f42:	f007 fa87 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
          delay(1);
     f46:	2001      	movs	r0, #1
     f48:	f009 fab6 	bl	a4b8 <delay>
          for (int i = 8; i < 13; i++)
     f4c:	495d      	ldr	r1, [pc, #372]	; (10c4 <BMSModuleManager::balanceCells(int)+0x2c0>)
              OUTmsg.buf[i - 8] = 0x08;
     f4e:	2008      	movs	r0, #8
            if (bitRead(balance, i) == 1)
     f50:	fa45 f304 	asr.w	r3, r5, r4
     f54:	f013 0301 	ands.w	r3, r3, #1
          for (int i = 8; i < 13; i++)
     f58:	f104 0401 	add.w	r4, r4, #1
              OUTmsg.buf[i - 8] = 0x08;
     f5c:	bf14      	ite	ne
     f5e:	7008      	strbne	r0, [r1, #0]
              OUTmsg.buf[i - 8] = 0x00;
     f60:	700b      	strbeq	r3, [r1, #0]
          for (int i = 8; i < 13; i++)
     f62:	2c0d      	cmp	r4, #13
     f64:	f101 0101 	add.w	r1, r1, #1
     f68:	d1f2      	bne.n	f50 <BMSModuleManager::balanceCells(int)+0x14c>
          OUTmsg.buf[4] = 0xFE;
     f6a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
     f6e:	f8c8 300c 	str.w	r3, [r8, #12]
          switch (y)
     f72:	f1bb 0f0b 	cmp.w	fp, #11
     f76:	d80a      	bhi.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
     f78:	e8df f00b 	tbb	[pc, fp]
     f7c:	60646830 	.word	0x60646830
     f80:	5054585c 	.word	0x5054585c
     f84:	06282c4c 	.word	0x06282c4c
              OUTmsg.id  = 0x1A5554B0;
     f88:	4b4f      	ldr	r3, [pc, #316]	; (10c8 <BMSModuleManager::balanceCells(int)+0x2c4>)
     f8a:	f8c8 3000 	str.w	r3, [r8]
          OUTmsg.ext = 1;
     f8e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
          Can0.write(OUTmsg);
     f92:	4947      	ldr	r1, [pc, #284]	; (10b0 <BMSModuleManager::balanceCells(int)+0x2ac>)
     f94:	484a      	ldr	r0, [pc, #296]	; (10c0 <BMSModuleManager::balanceCells(int)+0x2bc>)
          OUTmsg.ext = 1;
     f96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     f9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     f9e:	f043 0301 	orr.w	r3, r3, #1
      for (int y = 1; y < 63; y++)
     fa2:	3701      	adds	r7, #1
          OUTmsg.ext = 1;
     fa4:	f8a8 3006 	strh.w	r3, [r8, #6]
          Can0.write(OUTmsg);
     fa8:	f007 fa54 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      for (int y = 1; y < 63; y++)
     fac:	2f3f      	cmp	r7, #63	; 0x3f
     fae:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
     fb2:	f47f af6f 	bne.w	e94 <BMSModuleManager::balanceCells(int)+0x90>
      if (balancing == false)
     fb6:	9a01      	ldr	r2, [sp, #4]
     fb8:	f892 3d3d 	ldrb.w	r3, [r2, #3389]	; 0xd3d
     fbc:	2b00      	cmp	r3, #0
     fbe:	f43f af2e 	beq.w	e1e <BMSModuleManager::balanceCells(int)+0x1a>
  balcnt++;
     fc2:	f892 3d3e 	ldrb.w	r3, [r2, #3390]	; 0xd3e
     fc6:	3301      	adds	r3, #1
     fc8:	b2db      	uxtb	r3, r3
     fca:	e729      	b.n	e20 <BMSModuleManager::balanceCells(int)+0x1c>
              OUTmsg.id  = 0x1A5554AE;
     fcc:	4b3f      	ldr	r3, [pc, #252]	; (10cc <BMSModuleManager::balanceCells(int)+0x2c8>)
     fce:	f8c8 3000 	str.w	r3, [r8]
              break;
     fd2:	e7dc      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A5554AC;
     fd4:	4b3e      	ldr	r3, [pc, #248]	; (10d0 <BMSModuleManager::balanceCells(int)+0x2cc>)
     fd6:	f8c8 3000 	str.w	r3, [r8]
              break;
     fda:	e7d8      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A55540B;
     fdc:	4b3d      	ldr	r3, [pc, #244]	; (10d4 <BMSModuleManager::balanceCells(int)+0x2d0>)
     fde:	f8c8 3000 	str.w	r3, [r8]
              break;
     fe2:	e7d4      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A5554AD;
     fe4:	4b3c      	ldr	r3, [pc, #240]	; (10d8 <BMSModuleManager::balanceCells(int)+0x2d4>)
     fe6:	f8c8 3000 	str.w	r3, [r8]
              break;
     fea:	e79e      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A5554AB;
     fec:	4b3b      	ldr	r3, [pc, #236]	; (10dc <BMSModuleManager::balanceCells(int)+0x2d8>)
     fee:	f8c8 3000 	str.w	r3, [r8]
              break;
     ff2:	e79a      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55541A;
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <BMSModuleManager::balanceCells(int)+0x2dc>)
     ff6:	f8c8 3000 	str.w	r3, [r8]
              break;
     ffa:	e796      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A555418;
     ffc:	4b39      	ldr	r3, [pc, #228]	; (10e4 <BMSModuleManager::balanceCells(int)+0x2e0>)
     ffe:	f8c8 3000 	str.w	r3, [r8]
              break;
    1002:	e792      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A555416;
    1004:	4b38      	ldr	r3, [pc, #224]	; (10e8 <BMSModuleManager::balanceCells(int)+0x2e4>)
    1006:	f8c8 3000 	str.w	r3, [r8]
              break;
    100a:	e78e      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A555414;
    100c:	4b37      	ldr	r3, [pc, #220]	; (10ec <BMSModuleManager::balanceCells(int)+0x2e8>)
    100e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1012:	e78a      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55541B;
    1014:	4b36      	ldr	r3, [pc, #216]	; (10f0 <BMSModuleManager::balanceCells(int)+0x2ec>)
    1016:	f8c8 3000 	str.w	r3, [r8]
              break;
    101a:	e7b8      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555419;
    101c:	4b35      	ldr	r3, [pc, #212]	; (10f4 <BMSModuleManager::balanceCells(int)+0x2f0>)
    101e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1022:	e7b4      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555417;
    1024:	4b34      	ldr	r3, [pc, #208]	; (10f8 <BMSModuleManager::balanceCells(int)+0x2f4>)
    1026:	f8c8 3000 	str.w	r3, [r8]
              break;
    102a:	e7b0      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555415;
    102c:	4b33      	ldr	r3, [pc, #204]	; (10fc <BMSModuleManager::balanceCells(int)+0x2f8>)
    102e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1032:	e7ac      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555413;
    1034:	4b32      	ldr	r3, [pc, #200]	; (1100 <BMSModuleManager::balanceCells(int)+0x2fc>)
    1036:	f8c8 3000 	str.w	r3, [r8]
              break;
    103a:	e7a8      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555411;
    103c:	4b31      	ldr	r3, [pc, #196]	; (1104 <BMSModuleManager::balanceCells(int)+0x300>)
    103e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1042:	e7a4      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A55540F;
    1044:	4b30      	ldr	r3, [pc, #192]	; (1108 <BMSModuleManager::balanceCells(int)+0x304>)
    1046:	f8c8 3000 	str.w	r3, [r8]
              break;
    104a:	e7a0      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A55540D;
    104c:	4b2f      	ldr	r3, [pc, #188]	; (110c <BMSModuleManager::balanceCells(int)+0x308>)
    104e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1052:	e79c      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555412;
    1054:	4b2e      	ldr	r3, [pc, #184]	; (1110 <BMSModuleManager::balanceCells(int)+0x30c>)
    1056:	f8c8 3000 	str.w	r3, [r8]
              break;
    105a:	e766      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A555410;
    105c:	4b2d      	ldr	r3, [pc, #180]	; (1114 <BMSModuleManager::balanceCells(int)+0x310>)
    105e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1062:	e762      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55540A;
    1064:	4b2c      	ldr	r3, [pc, #176]	; (1118 <BMSModuleManager::balanceCells(int)+0x314>)
    1066:	f8c8 3000 	str.w	r3, [r8]
              break;
    106a:	e75e      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55540E;
    106c:	4b2b      	ldr	r3, [pc, #172]	; (111c <BMSModuleManager::balanceCells(int)+0x318>)
    106e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1072:	e75a      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55540C;
    1074:	4b2a      	ldr	r3, [pc, #168]	; (1120 <BMSModuleManager::balanceCells(int)+0x31c>)
    1076:	f8c8 3000 	str.w	r3, [r8]
              break;
    107a:	e756      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
            Serial.println();
    107c:	4829      	ldr	r0, [pc, #164]	; (1124 <BMSModuleManager::balanceCells(int)+0x320>)
    107e:	f008 fab9 	bl	95f4 <Print::println()>
    1082:	2107      	movs	r1, #7
    1084:	4828      	ldr	r0, [pc, #160]	; (1128 <BMSModuleManager::balanceCells(int)+0x324>)
    1086:	f00a fffb 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    108a:	4639      	mov	r1, r7
    108c:	4825      	ldr	r0, [pc, #148]	; (1124 <BMSModuleManager::balanceCells(int)+0x320>)
    108e:	f008 faa9 	bl	95e4 <Print::print(long)>
    1092:	2103      	movs	r1, #3
    1094:	4825      	ldr	r0, [pc, #148]	; (112c <BMSModuleManager::balanceCells(int)+0x328>)
    1096:	f00a fff3 	bl	c080 <usb_serial_write>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    109a:	2300      	movs	r3, #0
    109c:	2210      	movs	r2, #16
    109e:	4629      	mov	r1, r5
    10a0:	4820      	ldr	r0, [pc, #128]	; (1124 <BMSModuleManager::balanceCells(int)+0x320>)
    10a2:	f008 fabf 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
    10a6:	481f      	ldr	r0, [pc, #124]	; (1124 <BMSModuleManager::balanceCells(int)+0x320>)
    10a8:	f008 faa4 	bl	95f4 <Print::println()>
    10ac:	e71d      	b.n	eea <BMSModuleManager::balanceCells(int)+0xe6>
    10ae:	bf00      	nop
    10b0:	1fff9180 	.word	0x1fff9180
    10b4:	42108421 	.word	0x42108421
    10b8:	1fff9187 	.word	0x1fff9187
    10bc:	1a5554af 	.word	0x1a5554af
    10c0:	1fffd1cc 	.word	0x1fffd1cc
    10c4:	1fff9188 	.word	0x1fff9188
    10c8:	1a5554b0 	.word	0x1a5554b0
    10cc:	1a5554ae 	.word	0x1a5554ae
    10d0:	1a5554ac 	.word	0x1a5554ac
    10d4:	1a55540b 	.word	0x1a55540b
    10d8:	1a5554ad 	.word	0x1a5554ad
    10dc:	1a5554ab 	.word	0x1a5554ab
    10e0:	1a55541a 	.word	0x1a55541a
    10e4:	1a555418 	.word	0x1a555418
    10e8:	1a555416 	.word	0x1a555416
    10ec:	1a555414 	.word	0x1a555414
    10f0:	1a55541b 	.word	0x1a55541b
    10f4:	1a555419 	.word	0x1a555419
    10f8:	1a555417 	.word	0x1a555417
    10fc:	1a555415 	.word	0x1a555415
    1100:	1a555413 	.word	0x1a555413
    1104:	1a555411 	.word	0x1a555411
    1108:	1a55540f 	.word	0x1a55540f
    110c:	1a55540d 	.word	0x1a55540d
    1110:	1a555412 	.word	0x1a555412
    1114:	1a555410 	.word	0x1a555410
    1118:	1a55540a 	.word	0x1a55540a
    111c:	1a55540e 	.word	0x1a55540e
    1120:	1a55540c 	.word	0x1a55540c
    1124:	1fff89fc 	.word	0x1fff89fc
    1128:	00013bb0 	.word	0x00013bb0
    112c:	00013bb8 	.word	0x00013bb8
    if (balcnt == 1)
    1130:	2c01      	cmp	r4, #1
    1132:	f47f ae91 	bne.w	e58 <BMSModuleManager::balanceCells(int)+0x54>
      OUTmsg.ext = 1;
    1136:	f8df 821c 	ldr.w	r8, [pc, #540]	; 1354 <BMSModuleManager::balanceCells(int)+0x550>
      Can0.write(OUTmsg);
    113a:	4887      	ldr	r0, [pc, #540]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.ext = 1;
    113c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
    1140:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1144:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1148:	f043 0301 	orr.w	r3, r3, #1
      OUTmsg.buf[0] = 0X00;
    114c:	2500      	movs	r5, #0
      Can0.write(OUTmsg);
    114e:	4641      	mov	r1, r8
      OUTmsg.ext = 1;
    1150:	f8a8 3006 	strh.w	r3, [r8, #6]
      OUTmsg.id  = 0x1A55540A;
    1154:	4b81      	ldr	r3, [pc, #516]	; (135c <BMSModuleManager::balanceCells(int)+0x558>)
    1156:	f8c8 3000 	str.w	r3, [r8]
      OUTmsg.buf[0] = 0X00;
    115a:	f8c8 5008 	str.w	r5, [r8, #8]
      OUTmsg.buf[4] = 0X00;
    115e:	f8c8 500c 	str.w	r5, [r8, #12]
      Can0.write(OUTmsg);
    1162:	f007 f977 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1166:	4620      	mov	r0, r4
    1168:	f009 f9a6 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A55540C;
    116c:	4b7c      	ldr	r3, [pc, #496]	; (1360 <BMSModuleManager::balanceCells(int)+0x55c>)
      Can0.write(OUTmsg);
    116e:	487a      	ldr	r0, [pc, #488]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540C;
    1170:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1174:	4641      	mov	r1, r8
    1176:	f007 f96d 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    117a:	4620      	mov	r0, r4
    117c:	f009 f99c 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A55540E;
    1180:	4b78      	ldr	r3, [pc, #480]	; (1364 <BMSModuleManager::balanceCells(int)+0x560>)
      Can0.write(OUTmsg);
    1182:	4875      	ldr	r0, [pc, #468]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540E;
    1184:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1188:	4641      	mov	r1, r8
    118a:	f007 f963 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    118e:	4620      	mov	r0, r4
    1190:	f009 f992 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A555410;
    1194:	4b74      	ldr	r3, [pc, #464]	; (1368 <BMSModuleManager::balanceCells(int)+0x564>)
      Can0.write(OUTmsg);
    1196:	4870      	ldr	r0, [pc, #448]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555410;
    1198:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    119c:	4641      	mov	r1, r8
    119e:	f007 f959 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11a2:	4620      	mov	r0, r4
    11a4:	f009 f988 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A555412;
    11a8:	4b70      	ldr	r3, [pc, #448]	; (136c <BMSModuleManager::balanceCells(int)+0x568>)
      Can0.write(OUTmsg);
    11aa:	486b      	ldr	r0, [pc, #428]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555412;
    11ac:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    11b0:	4641      	mov	r1, r8
    11b2:	f007 f94f 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11b6:	4620      	mov	r0, r4
    11b8:	f009 f97e 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A555414;
    11bc:	4b6c      	ldr	r3, [pc, #432]	; (1370 <BMSModuleManager::balanceCells(int)+0x56c>)
      Can0.write(OUTmsg);
    11be:	4866      	ldr	r0, [pc, #408]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555414;
    11c0:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    11c4:	4641      	mov	r1, r8
    11c6:	f007 f945 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11ca:	4620      	mov	r0, r4
    11cc:	f009 f974 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A555416;
    11d0:	4b68      	ldr	r3, [pc, #416]	; (1374 <BMSModuleManager::balanceCells(int)+0x570>)
      Can0.write(OUTmsg);
    11d2:	4861      	ldr	r0, [pc, #388]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555416;
    11d4:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    11d8:	4641      	mov	r1, r8
    11da:	f007 f93b 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11de:	4620      	mov	r0, r4
    11e0:	f009 f96a 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A555418;
    11e4:	4b64      	ldr	r3, [pc, #400]	; (1378 <BMSModuleManager::balanceCells(int)+0x574>)
      Can0.write(OUTmsg);
    11e6:	485c      	ldr	r0, [pc, #368]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555418;
    11e8:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    11ec:	4641      	mov	r1, r8
    11ee:	f007 f931 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11f2:	4620      	mov	r0, r4
    11f4:	f009 f960 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A55541A;
    11f8:	4b60      	ldr	r3, [pc, #384]	; (137c <BMSModuleManager::balanceCells(int)+0x578>)
      Can0.write(OUTmsg);
    11fa:	4857      	ldr	r0, [pc, #348]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55541A;
    11fc:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1200:	4641      	mov	r1, r8
    1202:	f007 f927 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1206:	4620      	mov	r0, r4
    1208:	f009 f956 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A5554AB;
    120c:	4b5c      	ldr	r3, [pc, #368]	; (1380 <BMSModuleManager::balanceCells(int)+0x57c>)
      Can0.write(OUTmsg);
    120e:	4852      	ldr	r0, [pc, #328]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AB;
    1210:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1214:	4641      	mov	r1, r8
    1216:	f007 f91d 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    121a:	4620      	mov	r0, r4
    121c:	f009 f94c 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A5554AD;
    1220:	4b58      	ldr	r3, [pc, #352]	; (1384 <BMSModuleManager::balanceCells(int)+0x580>)
      Can0.write(OUTmsg);
    1222:	484d      	ldr	r0, [pc, #308]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AD;
    1224:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1228:	4641      	mov	r1, r8
    122a:	f007 f913 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    122e:	4620      	mov	r0, r4
    1230:	f009 f942 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A5554AF;
    1234:	4b54      	ldr	r3, [pc, #336]	; (1388 <BMSModuleManager::balanceCells(int)+0x584>)
      Can0.write(OUTmsg);
    1236:	4848      	ldr	r0, [pc, #288]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AF;
    1238:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    123c:	4641      	mov	r1, r8
    123e:	f007 f909 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1242:	4620      	mov	r0, r4
    1244:	f009 f938 	bl	a4b8 <delay>
      OUTmsg.buf[4] = 0xFE;
    1248:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
      Can0.write(OUTmsg);
    124c:	4641      	mov	r1, r8
      OUTmsg.buf[4] = 0xFE;
    124e:	f8c8 300c 	str.w	r3, [r8, #12]
      Can0.write(OUTmsg);
    1252:	4841      	ldr	r0, [pc, #260]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540B;
    1254:	4b4d      	ldr	r3, [pc, #308]	; (138c <BMSModuleManager::balanceCells(int)+0x588>)
    1256:	f8c8 3000 	str.w	r3, [r8]
      OUTmsg.buf[0] = 0X00;
    125a:	f8c8 5008 	str.w	r5, [r8, #8]
      Can0.write(OUTmsg);
    125e:	f007 f8f9 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1262:	4620      	mov	r0, r4
    1264:	f009 f928 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A55540D;
    1268:	4b49      	ldr	r3, [pc, #292]	; (1390 <BMSModuleManager::balanceCells(int)+0x58c>)
      Can0.write(OUTmsg);
    126a:	483b      	ldr	r0, [pc, #236]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540D;
    126c:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1270:	4641      	mov	r1, r8
    1272:	f007 f8ef 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1276:	4620      	mov	r0, r4
    1278:	f009 f91e 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A55540F;
    127c:	4b45      	ldr	r3, [pc, #276]	; (1394 <BMSModuleManager::balanceCells(int)+0x590>)
      Can0.write(OUTmsg);
    127e:	4836      	ldr	r0, [pc, #216]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540F;
    1280:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1284:	4641      	mov	r1, r8
    1286:	f007 f8e5 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    128a:	4620      	mov	r0, r4
    128c:	f009 f914 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A555411;
    1290:	4b41      	ldr	r3, [pc, #260]	; (1398 <BMSModuleManager::balanceCells(int)+0x594>)
      Can0.write(OUTmsg);
    1292:	4831      	ldr	r0, [pc, #196]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555411;
    1294:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1298:	4641      	mov	r1, r8
    129a:	f007 f8db 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    129e:	4620      	mov	r0, r4
    12a0:	f009 f90a 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A555413;
    12a4:	4b3d      	ldr	r3, [pc, #244]	; (139c <BMSModuleManager::balanceCells(int)+0x598>)
      Can0.write(OUTmsg);
    12a6:	482c      	ldr	r0, [pc, #176]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555413;
    12a8:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12ac:	4641      	mov	r1, r8
    12ae:	f007 f8d1 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    12b2:	4620      	mov	r0, r4
    12b4:	f009 f900 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A555415;
    12b8:	4b39      	ldr	r3, [pc, #228]	; (13a0 <BMSModuleManager::balanceCells(int)+0x59c>)
      Can0.write(OUTmsg);
    12ba:	4827      	ldr	r0, [pc, #156]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555415;
    12bc:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12c0:	4641      	mov	r1, r8
    12c2:	f007 f8c7 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    12c6:	4620      	mov	r0, r4
    12c8:	f009 f8f6 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A555417;
    12cc:	4b35      	ldr	r3, [pc, #212]	; (13a4 <BMSModuleManager::balanceCells(int)+0x5a0>)
      Can0.write(OUTmsg);
    12ce:	4822      	ldr	r0, [pc, #136]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555417;
    12d0:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12d4:	4641      	mov	r1, r8
    12d6:	f007 f8bd 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    12da:	4620      	mov	r0, r4
    12dc:	f009 f8ec 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A555419;
    12e0:	4b31      	ldr	r3, [pc, #196]	; (13a8 <BMSModuleManager::balanceCells(int)+0x5a4>)
      Can0.write(OUTmsg);
    12e2:	481d      	ldr	r0, [pc, #116]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555419;
    12e4:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12e8:	4641      	mov	r1, r8
    12ea:	f007 f8b3 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    12ee:	4620      	mov	r0, r4
    12f0:	f009 f8e2 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A55541B;
    12f4:	4b2d      	ldr	r3, [pc, #180]	; (13ac <BMSModuleManager::balanceCells(int)+0x5a8>)
      Can0.write(OUTmsg);
    12f6:	4818      	ldr	r0, [pc, #96]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55541B;
    12f8:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12fc:	4641      	mov	r1, r8
    12fe:	f007 f8a9 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1302:	4620      	mov	r0, r4
    1304:	f009 f8d8 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A5554AC;
    1308:	4b29      	ldr	r3, [pc, #164]	; (13b0 <BMSModuleManager::balanceCells(int)+0x5ac>)
      Can0.write(OUTmsg);
    130a:	4813      	ldr	r0, [pc, #76]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AC;
    130c:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1310:	4641      	mov	r1, r8
    1312:	f007 f89f 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1316:	4620      	mov	r0, r4
    1318:	f009 f8ce 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A5554AE;
    131c:	4b25      	ldr	r3, [pc, #148]	; (13b4 <BMSModuleManager::balanceCells(int)+0x5b0>)
      Can0.write(OUTmsg);
    131e:	480e      	ldr	r0, [pc, #56]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AE;
    1320:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1324:	4641      	mov	r1, r8
    1326:	f007 f895 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    132a:	4620      	mov	r0, r4
    132c:	f009 f8c4 	bl	a4b8 <delay>
      OUTmsg.id  = 0x1A5554B0;
    1330:	4b21      	ldr	r3, [pc, #132]	; (13b8 <BMSModuleManager::balanceCells(int)+0x5b4>)
      Can0.write(OUTmsg);
    1332:	4809      	ldr	r0, [pc, #36]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554B0;
    1334:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1338:	4641      	mov	r1, r8
    133a:	f007 f88b 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    133e:	4620      	mov	r0, r4
    1340:	f009 f8ba 	bl	a4b8 <delay>
  balcnt++;
    1344:	9a01      	ldr	r2, [sp, #4]
    1346:	f892 3d3e 	ldrb.w	r3, [r2, #3390]	; 0xd3e
      balancing = false;
    134a:	f882 5d3d 	strb.w	r5, [r2, #3389]	; 0xd3d
  balcnt++;
    134e:	3301      	adds	r3, #1
    1350:	b2db      	uxtb	r3, r3
    1352:	e565      	b.n	e20 <BMSModuleManager::balanceCells(int)+0x1c>
    1354:	1fff9180 	.word	0x1fff9180
    1358:	1fffd1cc 	.word	0x1fffd1cc
    135c:	1a55540a 	.word	0x1a55540a
    1360:	1a55540c 	.word	0x1a55540c
    1364:	1a55540e 	.word	0x1a55540e
    1368:	1a555410 	.word	0x1a555410
    136c:	1a555412 	.word	0x1a555412
    1370:	1a555414 	.word	0x1a555414
    1374:	1a555416 	.word	0x1a555416
    1378:	1a555418 	.word	0x1a555418
    137c:	1a55541a 	.word	0x1a55541a
    1380:	1a5554ab 	.word	0x1a5554ab
    1384:	1a5554ad 	.word	0x1a5554ad
    1388:	1a5554af 	.word	0x1a5554af
    138c:	1a55540b 	.word	0x1a55540b
    1390:	1a55540d 	.word	0x1a55540d
    1394:	1a55540f 	.word	0x1a55540f
    1398:	1a555411 	.word	0x1a555411
    139c:	1a555413 	.word	0x1a555413
    13a0:	1a555415 	.word	0x1a555415
    13a4:	1a555417 	.word	0x1a555417
    13a8:	1a555419 	.word	0x1a555419
    13ac:	1a55541b 	.word	0x1a55541b
    13b0:	1a5554ac 	.word	0x1a5554ac
    13b4:	1a5554ae 	.word	0x1a5554ae
    13b8:	1a5554b0 	.word	0x1a5554b0

000013bc <BMSModuleManager::seriescells()>:
{
    13bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  spack = 0;
    13be:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
    13c2:	2300      	movs	r3, #0
    13c4:	f500 5674 	add.w	r6, r0, #15616	; 0x3d00
    13c8:	f8c7 3d40 	str.w	r3, [r7, #3392]	; 0xd40
  for (int y = 1; y < 63; y++)
    13cc:	f500 7492 	add.w	r4, r0, #292	; 0x124
    13d0:	3634      	adds	r6, #52	; 0x34
    13d2:	e002      	b.n	13da <BMSModuleManager::seriescells()+0x1e>
    13d4:	34f8      	adds	r4, #248	; 0xf8
    13d6:	42b4      	cmp	r4, r6
    13d8:	d00f      	beq.n	13fa <BMSModuleManager::seriescells()+0x3e>
    if (modules[y].isExisting())
    13da:	4620      	mov	r0, r4
    13dc:	f7ff fc7c 	bl	cd8 <BMSModule::isExisting()>
    13e0:	2800      	cmp	r0, #0
    13e2:	d0f7      	beq.n	13d4 <BMSModuleManager::seriescells()+0x18>
      spack = spack + modules[y].getscells();
    13e4:	4620      	mov	r0, r4
    13e6:	f8d7 5d40 	ldr.w	r5, [r7, #3392]	; 0xd40
    13ea:	f7ff f975 	bl	6d8 <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
    13ee:	34f8      	adds	r4, #248	; 0xf8
      spack = spack + modules[y].getscells();
    13f0:	4405      	add	r5, r0
  for (int y = 1; y < 63; y++)
    13f2:	42b4      	cmp	r4, r6
      spack = spack + modules[y].getscells();
    13f4:	f8c7 5d40 	str.w	r5, [r7, #3392]	; 0xd40
  for (int y = 1; y < 63; y++)
    13f8:	d1ef      	bne.n	13da <BMSModuleManager::seriescells()+0x1e>
}
    13fa:	f8d7 0d40 	ldr.w	r0, [r7, #3392]	; 0xd40
    13fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001400 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>:
  if (type == 1)
    1400:	2b01      	cmp	r3, #1
{
    1402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1406:	4605      	mov	r5, r0
    1408:	460e      	mov	r6, r1
    140a:	4617      	mov	r7, r2
  if (type == 1)
    140c:	d008      	beq.n	1420 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x20>
  if (type == 2)
    140e:	2b02      	cmp	r3, #2
    1410:	461c      	mov	r4, r3
    1412:	d103      	bne.n	141c <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x1c>
      if (msg.buf[5] != 0xDF) //Check module is not initializing OR a "spoof module"
    1414:	7b4a      	ldrb	r2, [r1, #13]
    CMU = (msg.id & 0x0F);
    1416:	680b      	ldr	r3, [r1, #0]
      if (msg.buf[5] != 0xDF) //Check module is not initializing OR a "spoof module"
    1418:	2adf      	cmp	r2, #223	; 0xdf
    141a:	d138      	bne.n	148e <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x8e>
}
    141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CMU = (msg.id & 0xFF);
    1420:	6808      	ldr	r0, [r1, #0]
    1422:	fa5f f880 	uxtb.w	r8, r0
    if (CMU > 10 && CMU < 60)
    1426:	f1a8 030b 	sub.w	r3, r8, #11
    142a:	2b30      	cmp	r3, #48	; 0x30
    142c:	d80e      	bhi.n	144c <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x4c>
      CMU = (CMU * 0.5) + 1;
    142e:	f000 000f 	and.w	r0, r0, #15
    1432:	f00b fcb1 	bl	cd98 <__aeabi_i2f>
    1436:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    143a:	f00b fd01 	bl	ce40 <__aeabi_fmul>
    143e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    1442:	f00b fbf5 	bl	cc30 <__addsf3>
    1446:	f00b fec1 	bl	d1cc <__aeabi_f2iz>
    144a:	4680      	mov	r8, r0
      modules[CMU].setExists(true);
    144c:	ebc8 1448 	rsb	r4, r8, r8, lsl #5
    1450:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    1454:	342c      	adds	r4, #44	; 0x2c
    1456:	2101      	movs	r1, #1
    1458:	4620      	mov	r0, r4
    145a:	f7ff fc49 	bl	cf0 <BMSModule::setExists(bool)>
      modules[CMU].setReset(true);
    145e:	2101      	movs	r1, #1
    1460:	4620      	mov	r0, r4
    1462:	f7ff fc4d 	bl	d00 <BMSModule::setReset(bool)>
      modules[CMU].decodetemp(msg, 1);
    1466:	2201      	movs	r2, #1
    1468:	4631      	mov	r1, r6
    146a:	4620      	mov	r0, r4
    146c:	f7ff f832 	bl	4d4 <BMSModule::decodetemp(CAN_message_t&, int)>
      if (debug == 1)
    1470:	2f01      	cmp	r7, #1
    1472:	d1d3      	bne.n	141c <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x1c>
        Serial.println();
    1474:	4818      	ldr	r0, [pc, #96]	; (14d8 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xd8>)
    1476:	f008 f8bd 	bl	95f4 <Print::println()>
	size_t print(int n)				{ return print((long)n); }
    147a:	4641      	mov	r1, r8
    147c:	4816      	ldr	r0, [pc, #88]	; (14d8 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xd8>)
    147e:	f008 f8b1 	bl	95e4 <Print::print(long)>
}
    1482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1486:	4815      	ldr	r0, [pc, #84]	; (14dc <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xdc>)
    1488:	210d      	movs	r1, #13
    148a:	f00a bdf9 	b.w	c080 <usb_serial_write>
    CMU = (msg.id & 0x0F);
    148e:	f003 080f 	and.w	r8, r3, #15
      CMU++;
    1492:	f108 0801 	add.w	r8, r8, #1
        modules[CMU].setExists(true);
    1496:	ebc8 1348 	rsb	r3, r8, r8, lsl #5
    149a:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
    149e:	352c      	adds	r5, #44	; 0x2c
    14a0:	2101      	movs	r1, #1
    14a2:	4628      	mov	r0, r5
    14a4:	f7ff fc24 	bl	cf0 <BMSModule::setExists(bool)>
        modules[CMU].setReset(true);
    14a8:	2101      	movs	r1, #1
    14aa:	4628      	mov	r0, r5
    14ac:	f7ff fc28 	bl	d00 <BMSModule::setReset(bool)>
        modules[CMU].decodetemp(msg, 2);
    14b0:	4622      	mov	r2, r4
    14b2:	4631      	mov	r1, r6
    14b4:	4628      	mov	r0, r5
    14b6:	f7ff f80d 	bl	4d4 <BMSModule::decodetemp(CAN_message_t&, int)>
        if (debug == 1)
    14ba:	2f01      	cmp	r7, #1
    14bc:	d1ae      	bne.n	141c <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x1c>
          Serial.println();
    14be:	4806      	ldr	r0, [pc, #24]	; (14d8 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xd8>)
    14c0:	f008 f898 	bl	95f4 <Print::println()>
    14c4:	4641      	mov	r1, r8
    14c6:	4804      	ldr	r0, [pc, #16]	; (14d8 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xd8>)
    14c8:	f008 f88c 	bl	95e4 <Print::print(long)>
}
    14cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    14d0:	4803      	ldr	r0, [pc, #12]	; (14e0 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xe0>)
    14d2:	210d      	movs	r1, #13
    14d4:	f00a bdd4 	b.w	c080 <usb_serial_write>
    14d8:	1fff89fc 	.word	0x1fff89fc
    14dc:	00013bbc 	.word	0x00013bbc
    14e0:	00013bcc 	.word	0x00013bcc

000014e4 <BMSModuleManager::decodecan(CAN_message_t&, int)>:
  if (balancing == false)
    14e4:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
    14e8:	f893 3d3d 	ldrb.w	r3, [r3, #3389]	; 0xd3d
    14ec:	b103      	cbz	r3, 14f0 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xc>
    14ee:	4770      	bx	lr
{
    14f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (msg.id)
    14f2:	680b      	ldr	r3, [r1, #0]
    14f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
{
    14f8:	b083      	sub	sp, #12
    14fa:	4605      	mov	r5, r0
    14fc:	460c      	mov	r4, r1
    switch (msg.id)
    14fe:	2b3e      	cmp	r3, #62	; 0x3e
    1500:	d840      	bhi.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
    1502:	e8df f013 	tbh	[pc, r3, lsl #1]
    1506:	0064      	.short	0x0064
    1508:	0067006d 	.word	0x0067006d
    150c:	006a0118 	.word	0x006a0118
    1510:	00730070 	.word	0x00730070
    1514:	00760113 	.word	0x00760113
    1518:	007c0079 	.word	0x007c0079
    151c:	009b007f 	.word	0x009b007f
    1520:	00a1009e 	.word	0x00a1009e
    1524:	00a600a4 	.word	0x00a600a4
    1528:	00ac00a9 	.word	0x00ac00a9
    152c:	00b100af 	.word	0x00b100af
    1530:	00b700b4 	.word	0x00b700b4
    1534:	00bc00ba 	.word	0x00bc00ba
    1538:	00c200bf 	.word	0x00c200bf
    153c:	00c700c5 	.word	0x00c700c5
    1540:	00cd00ca 	.word	0x00cd00ca
    1544:	011500d0 	.word	0x011500d0
    1548:	00d2011a 	.word	0x00d2011a
    154c:	00d700d5 	.word	0x00d700d5
    1550:	00dd00da 	.word	0x00dd00da
    1554:	00e0003f 	.word	0x00e0003f
    1558:	00e600e3 	.word	0x00e600e3
    155c:	00e9003f 	.word	0x00e9003f
    1560:	00ef00ec 	.word	0x00ef00ec
    1564:	00f2003f 	.word	0x00f2003f
    1568:	00f800f5 	.word	0x00f800f5
    156c:	00fb003f 	.word	0x00fb003f
    1570:	010100fe 	.word	0x010100fe
    1574:	0104003f 	.word	0x0104003f
    1578:	010a0107 	.word	0x010a0107
    157c:	010d003f 	.word	0x010d003f
    1580:	00410110 	.word	0x00410110
}
    1584:	b003      	add	sp, #12
    1586:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Id = 2;
    1588:	2702      	movs	r7, #2
        CMU = 16;
    158a:	2610      	movs	r6, #16
        if (msg.buf[2] != 0xFF && msg.buf[5] != 0xFF && msg.buf[7] != 0xFF) //Check module is not initializing OR a "spoof module"
    158c:	7aa3      	ldrb	r3, [r4, #10]
    158e:	2bff      	cmp	r3, #255	; 0xff
    1590:	d0f8      	beq.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
    1592:	7b63      	ldrb	r3, [r4, #13]
    1594:	2bff      	cmp	r3, #255	; 0xff
    1596:	d0f5      	beq.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
    1598:	7be3      	ldrb	r3, [r4, #15]
    159a:	2bff      	cmp	r3, #255	; 0xff
    159c:	d0f2      	beq.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
          if (debug == 1)
    159e:	2a01      	cmp	r2, #1
    15a0:	f000 80e4 	beq.w	176c <BMSModuleManager::decodecan(CAN_message_t&, int)+0x288>
          modules[CMU].setExists(true);
    15a4:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
    15a8:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
    15ac:	362c      	adds	r6, #44	; 0x2c
    15ae:	4630      	mov	r0, r6
    15b0:	2101      	movs	r1, #1
    15b2:	f7ff fb9d 	bl	cf0 <BMSModule::setExists(bool)>
          modules[CMU].setReset(true);
    15b6:	4630      	mov	r0, r6
    15b8:	2101      	movs	r1, #1
    15ba:	f7ff fba1 	bl	d00 <BMSModule::setReset(bool)>
          modules[CMU].decodecan(Id, msg);
    15be:	4622      	mov	r2, r4
    15c0:	4639      	mov	r1, r7
    15c2:	4630      	mov	r0, r6
}
    15c4:	b003      	add	sp, #12
    15c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          modules[CMU].decodecan(Id, msg);
    15ca:	f7ff b9c3 	b.w	954 <BMSModule::decodecan(int, CAN_message_t&)>
        Id = 0;
    15ce:	2700      	movs	r7, #0
        CMU = 1;
    15d0:	2601      	movs	r6, #1
    15d2:	e7db      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    15d4:	2702      	movs	r7, #2
        CMU = 1;
    15d6:	2601      	movs	r6, #1
    15d8:	e7d8      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    15da:	2700      	movs	r7, #0
        CMU = 2;
    15dc:	2602      	movs	r6, #2
    15de:	e7d5      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    15e0:	2701      	movs	r7, #1
        CMU = 1;
    15e2:	463e      	mov	r6, r7
    15e4:	e7d2      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    15e6:	2701      	movs	r7, #1
        CMU = 2;
    15e8:	2602      	movs	r6, #2
    15ea:	e7cf      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    15ec:	2702      	movs	r7, #2
        CMU = 2;
    15ee:	463e      	mov	r6, r7
    15f0:	e7cc      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    15f2:	2700      	movs	r7, #0
        CMU = 3;
    15f4:	2603      	movs	r6, #3
    15f6:	e7c9      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    15f8:	2701      	movs	r7, #1
        CMU = 3;
    15fa:	2603      	movs	r6, #3
    15fc:	e7c6      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    15fe:	2702      	movs	r7, #2
        CMU = 3;
    1600:	2603      	movs	r6, #3
    1602:	e7c3      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 3;
    1604:	2603      	movs	r6, #3
        if (msg.buf[2] != 0xFF) //Check module is not initializing OR a "spoof module"
    1606:	7aa3      	ldrb	r3, [r4, #10]
    1608:	2bff      	cmp	r3, #255	; 0xff
    160a:	d0bb      	beq.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
          if (debug == 1)
    160c:	2a01      	cmp	r2, #1
    160e:	f000 8097 	beq.w	1740 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x25c>
          modules[CMU].setExists(true);
    1612:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
    1616:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
    161a:	352c      	adds	r5, #44	; 0x2c
    161c:	4628      	mov	r0, r5
    161e:	2101      	movs	r1, #1
    1620:	f7ff fb66 	bl	cf0 <BMSModule::setExists(bool)>
          modules[CMU].setReset(true);
    1624:	4628      	mov	r0, r5
    1626:	2101      	movs	r1, #1
    1628:	f7ff fb6a 	bl	d00 <BMSModule::setReset(bool)>
          modules[CMU].decodecan(Id, msg);
    162c:	4622      	mov	r2, r4
    162e:	2103      	movs	r1, #3
    1630:	4628      	mov	r0, r5
}
    1632:	b003      	add	sp, #12
    1634:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          modules[CMU].decodecan(Id, msg);
    1638:	f7ff b98c 	b.w	954 <BMSModule::decodecan(int, CAN_message_t&)>
        Id = 0;
    163c:	2700      	movs	r7, #0
        CMU = 4;
    163e:	2604      	movs	r6, #4
    1640:	e7a4      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1642:	2701      	movs	r7, #1
        CMU = 4;
    1644:	2604      	movs	r6, #4
    1646:	e7a1      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    1648:	2702      	movs	r7, #2
        CMU = 4;
    164a:	2604      	movs	r6, #4
    164c:	e79e      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 4;
    164e:	2604      	movs	r6, #4
    1650:	e7d9      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    1652:	2700      	movs	r7, #0
        CMU = 5;
    1654:	2605      	movs	r6, #5
    1656:	e799      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1658:	2701      	movs	r7, #1
        CMU = 5;
    165a:	2605      	movs	r6, #5
    165c:	e796      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    165e:	2702      	movs	r7, #2
        CMU = 5;
    1660:	2605      	movs	r6, #5
    1662:	e793      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 5;
    1664:	2605      	movs	r6, #5
    1666:	e7ce      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    1668:	2700      	movs	r7, #0
        CMU = 6;
    166a:	2606      	movs	r6, #6
    166c:	e78e      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    166e:	2701      	movs	r7, #1
        CMU = 6;
    1670:	2606      	movs	r6, #6
    1672:	e78b      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    1674:	2702      	movs	r7, #2
        CMU = 6;
    1676:	2606      	movs	r6, #6
    1678:	e788      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 6;
    167a:	2606      	movs	r6, #6
    167c:	e7c3      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    167e:	2700      	movs	r7, #0
        CMU = 7;
    1680:	2607      	movs	r6, #7
    1682:	e783      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1684:	2701      	movs	r7, #1
        CMU = 7;
    1686:	2607      	movs	r6, #7
    1688:	e780      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    168a:	2702      	movs	r7, #2
        CMU = 7;
    168c:	2607      	movs	r6, #7
    168e:	e77d      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 7;
    1690:	2607      	movs	r6, #7
    1692:	e7b8      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    1694:	2700      	movs	r7, #0
        CMU = 8;
    1696:	2608      	movs	r6, #8
        break;
    1698:	e778      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    169a:	2701      	movs	r7, #1
        CMU = 8;
    169c:	2608      	movs	r6, #8
        break;
    169e:	e775      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16a0:	2702      	movs	r7, #2
        CMU = 8;
    16a2:	2608      	movs	r6, #8
        break;
    16a4:	e772      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 8;
    16a6:	2608      	movs	r6, #8
        break;
    16a8:	e7ad      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 2;
    16aa:	2702      	movs	r7, #2
        CMU = 9;
    16ac:	2609      	movs	r6, #9
    16ae:	e76d      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 9;
    16b0:	2609      	movs	r6, #9
    16b2:	e7a8      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    16b4:	2700      	movs	r7, #0
        CMU = 10;
    16b6:	260a      	movs	r6, #10
    16b8:	e768      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    16ba:	2701      	movs	r7, #1
        CMU = 10;
    16bc:	260a      	movs	r6, #10
    16be:	e765      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16c0:	2702      	movs	r7, #2
        CMU = 10;
    16c2:	260a      	movs	r6, #10
    16c4:	e762      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    16c6:	2700      	movs	r7, #0
        CMU = 11;
    16c8:	260b      	movs	r6, #11
    16ca:	e75f      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    16cc:	2701      	movs	r7, #1
        CMU = 11;
    16ce:	260b      	movs	r6, #11
    16d0:	e75c      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16d2:	2702      	movs	r7, #2
        CMU = 11;
    16d4:	260b      	movs	r6, #11
    16d6:	e759      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    16d8:	2700      	movs	r7, #0
        CMU = 12;
    16da:	260c      	movs	r6, #12
    16dc:	e756      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    16de:	2701      	movs	r7, #1
        CMU = 12;
    16e0:	260c      	movs	r6, #12
    16e2:	e753      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16e4:	2702      	movs	r7, #2
        CMU = 12;
    16e6:	260c      	movs	r6, #12
    16e8:	e750      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    16ea:	2700      	movs	r7, #0
        CMU = 13;
    16ec:	260d      	movs	r6, #13
    16ee:	e74d      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    16f0:	2701      	movs	r7, #1
        CMU = 13;
    16f2:	260d      	movs	r6, #13
    16f4:	e74a      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16f6:	2702      	movs	r7, #2
        CMU = 13;
    16f8:	260d      	movs	r6, #13
    16fa:	e747      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    16fc:	2700      	movs	r7, #0
        CMU = 14;
    16fe:	260e      	movs	r6, #14
    1700:	e744      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1702:	2701      	movs	r7, #1
        CMU = 14;
    1704:	260e      	movs	r6, #14
    1706:	e741      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    1708:	2702      	movs	r7, #2
        CMU = 14;
    170a:	260e      	movs	r6, #14
    170c:	e73e      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    170e:	2700      	movs	r7, #0
        CMU = 15;
    1710:	260f      	movs	r6, #15
    1712:	e73b      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1714:	2701      	movs	r7, #1
        CMU = 15;
    1716:	260f      	movs	r6, #15
    1718:	e738      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    171a:	2702      	movs	r7, #2
        CMU = 15;
    171c:	260f      	movs	r6, #15
    171e:	e735      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    1720:	2700      	movs	r7, #0
        CMU = 16;
    1722:	2610      	movs	r6, #16
    1724:	e732      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1726:	2701      	movs	r7, #1
        CMU = 16;
    1728:	2610      	movs	r6, #16
    172a:	e72f      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 2;
    172c:	2602      	movs	r6, #2
    172e:	e76a      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    1730:	2700      	movs	r7, #0
        CMU = 9;
    1732:	2609      	movs	r6, #9
    1734:	e72a      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
    switch (msg.id)
    1736:	2601      	movs	r6, #1
    1738:	e765      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
    173a:	2701      	movs	r7, #1
    173c:	2609      	movs	r6, #9
    173e:	e725      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
            Serial.println();
    1740:	4815      	ldr	r0, [pc, #84]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    1742:	9201      	str	r2, [sp, #4]
    1744:	f007 ff56 	bl	95f4 <Print::println()>
    1748:	4631      	mov	r1, r6
    174a:	4813      	ldr	r0, [pc, #76]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    174c:	f007 ff4a 	bl	95e4 <Print::print(long)>
    1750:	9a01      	ldr	r2, [sp, #4]
    1752:	4812      	ldr	r0, [pc, #72]	; (179c <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b8>)
    1754:	4611      	mov	r1, r2
    1756:	f00a fc93 	bl	c080 <usb_serial_write>
    175a:	2103      	movs	r1, #3
    175c:	480e      	ldr	r0, [pc, #56]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    175e:	f007 ff41 	bl	95e4 <Print::print(long)>
    1762:	2103      	movs	r1, #3
    1764:	480e      	ldr	r0, [pc, #56]	; (17a0 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2bc>)
    1766:	f00a fc8b 	bl	c080 <usb_serial_write>
    176a:	e752      	b.n	1612 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x12e>
            Serial.println();
    176c:	480a      	ldr	r0, [pc, #40]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    176e:	9201      	str	r2, [sp, #4]
    1770:	f007 ff40 	bl	95f4 <Print::println()>
    1774:	4631      	mov	r1, r6
    1776:	4808      	ldr	r0, [pc, #32]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    1778:	f007 ff34 	bl	95e4 <Print::print(long)>
    177c:	9a01      	ldr	r2, [sp, #4]
    177e:	4807      	ldr	r0, [pc, #28]	; (179c <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b8>)
    1780:	4611      	mov	r1, r2
    1782:	f00a fc7d 	bl	c080 <usb_serial_write>
    1786:	4639      	mov	r1, r7
    1788:	4803      	ldr	r0, [pc, #12]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    178a:	f007 ff2b 	bl	95e4 <Print::print(long)>
    178e:	2103      	movs	r1, #3
    1790:	4803      	ldr	r0, [pc, #12]	; (17a0 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2bc>)
    1792:	f00a fc75 	bl	c080 <usb_serial_write>
    1796:	e705      	b.n	15a4 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xc0>
    1798:	1fff89fc 	.word	0x1fff89fc
    179c:	00013bdc 	.word	0x00013bdc
    17a0:	00013bb8 	.word	0x00013bb8

000017a4 <BMSModuleManager::getAllVoltTemp()>:
{
    17a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  packVolt = 0.0f;
    17a8:	2300      	movs	r3, #0
      Logger::debug("");
    17aa:	f8df 9164 	ldr.w	r9, [pc, #356]	; 1910 <BMSModuleManager::getAllVoltTemp()+0x16c>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
    17ae:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1914 <BMSModuleManager::getAllVoltTemp()+0x170>
      Logger::debug("Module voltage: %f", modules[x].getModuleVoltage());
    17b2:	4f59      	ldr	r7, [pc, #356]	; (1918 <BMSModuleManager::getAllVoltTemp()+0x174>)
  packVolt = 0.0f;
    17b4:	6003      	str	r3, [r0, #0]
{
    17b6:	b083      	sub	sp, #12
    17b8:	4606      	mov	r6, r0
    17ba:	f500 7492 	add.w	r4, r0, #292	; 0x124
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    17be:	2501      	movs	r5, #1
    17c0:	e004      	b.n	17cc <BMSModuleManager::getAllVoltTemp()+0x28>
    17c2:	3501      	adds	r5, #1
    17c4:	2d3f      	cmp	r5, #63	; 0x3f
    17c6:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
    17ca:	d068      	beq.n	189e <BMSModuleManager::getAllVoltTemp()+0xfa>
    if (modules[x].isExisting())
    17cc:	4620      	mov	r0, r4
    17ce:	f7ff fa83 	bl	cd8 <BMSModule::isExisting()>
    17d2:	2800      	cmp	r0, #0
    17d4:	d0f5      	beq.n	17c2 <BMSModuleManager::getAllVoltTemp()+0x1e>
      Logger::debug("");
    17d6:	4648      	mov	r0, r9
    17d8:	f000 fd84 	bl	22e4 <Logger::debug(char*, ...)>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
    17dc:	4629      	mov	r1, r5
    17de:	4640      	mov	r0, r8
    17e0:	f000 fd80 	bl	22e4 <Logger::debug(char*, ...)>
      Logger::debug("Module voltage: %f", modules[x].getModuleVoltage());
    17e4:	4620      	mov	r0, r4
    17e6:	f7ff fa39 	bl	c5c <BMSModule::getModuleVoltage()>
    17ea:	f00b f905 	bl	c9f8 <__aeabi_f2d>
    17ee:	4602      	mov	r2, r0
    17f0:	460b      	mov	r3, r1
    17f2:	4638      	mov	r0, r7
    17f4:	f000 fd76 	bl	22e4 <Logger::debug(char*, ...)>
      Logger::debug("Lowest Cell V: %f     Highest Cell V: %f", modules[x].getLowCellV(), modules[x].getHighCellV());
    17f8:	4620      	mov	r0, r4
    17fa:	f7fe fef3 	bl	5e4 <BMSModule::getLowCellV()>
    17fe:	4682      	mov	sl, r0
    1800:	4620      	mov	r0, r4
    1802:	f7fe ff0d 	bl	620 <BMSModule::getHighCellV()>
    1806:	4683      	mov	fp, r0
    1808:	4650      	mov	r0, sl
    180a:	f00b f8f5 	bl	c9f8 <__aeabi_f2d>
    180e:	4602      	mov	r2, r0
    1810:	4658      	mov	r0, fp
    1812:	4692      	mov	sl, r2
    1814:	468b      	mov	fp, r1
    1816:	f00b f8ef 	bl	c9f8 <__aeabi_f2d>
    181a:	465b      	mov	r3, fp
    181c:	4652      	mov	r2, sl
    181e:	e9cd 0100 	strd	r0, r1, [sp]
    1822:	483e      	ldr	r0, [pc, #248]	; (191c <BMSModuleManager::getAllVoltTemp()+0x178>)
    1824:	f000 fd5e 	bl	22e4 <Logger::debug(char*, ...)>
      Logger::debug("Temp1: %f       Temp2: %f", modules[x].getTemperature(0), modules[x].getTemperature(1));
    1828:	2100      	movs	r1, #0
    182a:	4620      	mov	r0, r4
    182c:	f7ff fa3e 	bl	cac <BMSModule::getTemperature(int)>
    1830:	2101      	movs	r1, #1
    1832:	4682      	mov	sl, r0
    1834:	4620      	mov	r0, r4
    1836:	f7ff fa39 	bl	cac <BMSModule::getTemperature(int)>
    183a:	4683      	mov	fp, r0
    183c:	4650      	mov	r0, sl
    183e:	f00b f8db 	bl	c9f8 <__aeabi_f2d>
    1842:	4602      	mov	r2, r0
    1844:	4658      	mov	r0, fp
    1846:	4692      	mov	sl, r2
    1848:	468b      	mov	fp, r1
    184a:	f00b f8d5 	bl	c9f8 <__aeabi_f2d>
    184e:	4652      	mov	r2, sl
    1850:	e9cd 0100 	strd	r0, r1, [sp]
    1854:	465b      	mov	r3, fp
    1856:	4832      	ldr	r0, [pc, #200]	; (1920 <BMSModuleManager::getAllVoltTemp()+0x17c>)
    1858:	f000 fd44 	bl	22e4 <Logger::debug(char*, ...)>
      packVolt += modules[x].getModuleVoltage();
    185c:	4620      	mov	r0, r4
    185e:	f7ff f9fd 	bl	c5c <BMSModule::getModuleVoltage()>
    1862:	4601      	mov	r1, r0
    1864:	6830      	ldr	r0, [r6, #0]
    1866:	f00b f9e3 	bl	cc30 <__addsf3>
    186a:	6030      	str	r0, [r6, #0]
      if (modules[x].getLowTemp() < lowestPackTemp) lowestPackTemp = modules[x].getLowTemp();
    186c:	4620      	mov	r0, r4
    186e:	f7ff f831 	bl	8d4 <BMSModule::getLowTemp()>
    1872:	69b1      	ldr	r1, [r6, #24]
    1874:	f00b fc82 	bl	d17c <__aeabi_fcmplt>
    1878:	2800      	cmp	r0, #0
    187a:	d133      	bne.n	18e4 <BMSModuleManager::getAllVoltTemp()+0x140>
      if (modules[x].getHighTemp() > highestPackTemp) highestPackTemp = modules[x].getHighTemp();
    187c:	4620      	mov	r0, r4
    187e:	f7fe ff2f 	bl	6e0 <BMSModule::getHighTemp()>
    1882:	69f1      	ldr	r1, [r6, #28]
    1884:	f00b fc98 	bl	d1b8 <__aeabi_fcmpgt>
    1888:	2800      	cmp	r0, #0
    188a:	d09a      	beq.n	17c2 <BMSModuleManager::getAllVoltTemp()+0x1e>
    188c:	4620      	mov	r0, r4
    188e:	f7fe ff27 	bl	6e0 <BMSModule::getHighTemp()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1892:	3501      	adds	r5, #1
    1894:	2d3f      	cmp	r5, #63	; 0x3f
      if (modules[x].getHighTemp() > highestPackTemp) highestPackTemp = modules[x].getHighTemp();
    1896:	61f0      	str	r0, [r6, #28]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1898:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
    189c:	d196      	bne.n	17cc <BMSModuleManager::getAllVoltTemp()+0x28>
  packVolt = packVolt / Pstring;
    189e:	6870      	ldr	r0, [r6, #4]
    18a0:	f00b fa7a 	bl	cd98 <__aeabi_i2f>
    18a4:	4601      	mov	r1, r0
    18a6:	6830      	ldr	r0, [r6, #0]
    18a8:	f00b fb7e 	bl	cfa8 <__aeabi_fdiv>
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
    18ac:	6971      	ldr	r1, [r6, #20]
  packVolt = packVolt / Pstring;
    18ae:	6030      	str	r0, [r6, #0]
    18b0:	4604      	mov	r4, r0
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
    18b2:	f00b fc81 	bl	d1b8 <__aeabi_fcmpgt>
    18b6:	b100      	cbz	r0, 18ba <BMSModuleManager::getAllVoltTemp()+0x116>
    18b8:	6174      	str	r4, [r6, #20]
  if (packVolt < lowestPackVolt) lowestPackVolt = packVolt;
    18ba:	6931      	ldr	r1, [r6, #16]
    18bc:	4620      	mov	r0, r4
    18be:	f00b fc5d 	bl	d17c <__aeabi_fcmplt>
    18c2:	b100      	cbz	r0, 18c6 <BMSModuleManager::getAllVoltTemp()+0x122>
    18c4:	6134      	str	r4, [r6, #16]
  if (digitalRead(11) == LOW) {
    18c6:	200b      	movs	r0, #11
    18c8:	f008 fd8c 	bl	a3e4 <digitalRead>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    18cc:	f506 5640 	add.w	r6, r6, #12288	; 0x3000
    18d0:	f896 3d3c 	ldrb.w	r3, [r6, #3388]	; 0xd3c
  if (digitalRead(11) == LOW) {
    18d4:	b958      	cbnz	r0, 18ee <BMSModuleManager::getAllVoltTemp()+0x14a>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    18d6:	b1b3      	cbz	r3, 1906 <BMSModuleManager::getAllVoltTemp()+0x162>
    isFaulted = true;
    18d8:	2301      	movs	r3, #1
    18da:	f886 3d3c 	strb.w	r3, [r6, #3388]	; 0xd3c
}
    18de:	b003      	add	sp, #12
    18e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (modules[x].getLowTemp() < lowestPackTemp) lowestPackTemp = modules[x].getLowTemp();
    18e4:	4620      	mov	r0, r4
    18e6:	f7fe fff5 	bl	8d4 <BMSModule::getLowTemp()>
    18ea:	61b0      	str	r0, [r6, #24]
    18ec:	e7c6      	b.n	187c <BMSModuleManager::getAllVoltTemp()+0xd8>
    if (isFaulted) Logger::info("All modules have exited a faulted state");
    18ee:	b92b      	cbnz	r3, 18fc <BMSModuleManager::getAllVoltTemp()+0x158>
    isFaulted = false;
    18f0:	2300      	movs	r3, #0
    isFaulted = true;
    18f2:	f886 3d3c 	strb.w	r3, [r6, #3388]	; 0xd3c
}
    18f6:	b003      	add	sp, #12
    18f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (isFaulted) Logger::info("All modules have exited a faulted state");
    18fc:	4809      	ldr	r0, [pc, #36]	; (1924 <BMSModuleManager::getAllVoltTemp()+0x180>)
    18fe:	f000 fd03 	bl	2308 <Logger::info(char*, ...)>
    isFaulted = false;
    1902:	2300      	movs	r3, #0
    1904:	e7f5      	b.n	18f2 <BMSModuleManager::getAllVoltTemp()+0x14e>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    1906:	4808      	ldr	r0, [pc, #32]	; (1928 <BMSModuleManager::getAllVoltTemp()+0x184>)
    1908:	f000 fd12 	bl	2330 <Logger::error(char*, ...)>
    190c:	e7e4      	b.n	18d8 <BMSModuleManager::getAllVoltTemp()+0x134>
    190e:	bf00      	nop
    1910:	0001423c 	.word	0x0001423c
    1914:	00013be0 	.word	0x00013be0
    1918:	00013c1c 	.word	0x00013c1c
    191c:	00013c30 	.word	0x00013c30
    1920:	00013c5c 	.word	0x00013c5c
    1924:	00013cb0 	.word	0x00013cb0
    1928:	00013c78 	.word	0x00013c78

0000192c <BMSModuleManager::getLowCellVolt()>:
{
    192c:	b570      	push	{r4, r5, r6, lr}
  LowCellVolt = 5.0;
    192e:	4b11      	ldr	r3, [pc, #68]	; (1974 <BMSModuleManager::getLowCellVolt()+0x48>)
    1930:	6083      	str	r3, [r0, #8]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1932:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
{
    1936:	4606      	mov	r6, r0
    1938:	f500 7492 	add.w	r4, r0, #292	; 0x124
    193c:	3534      	adds	r5, #52	; 0x34
    193e:	e002      	b.n	1946 <BMSModuleManager::getLowCellVolt()+0x1a>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1940:	34f8      	adds	r4, #248	; 0xf8
    1942:	42ac      	cmp	r4, r5
    1944:	d013      	beq.n	196e <BMSModuleManager::getLowCellVolt()+0x42>
    if (modules[x].isExisting())
    1946:	4620      	mov	r0, r4
    1948:	f7ff f9c6 	bl	cd8 <BMSModule::isExisting()>
    194c:	2800      	cmp	r0, #0
    194e:	d0f7      	beq.n	1940 <BMSModuleManager::getLowCellVolt()+0x14>
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
    1950:	4620      	mov	r0, r4
    1952:	f7fe fe47 	bl	5e4 <BMSModule::getLowCellV()>
    1956:	68b1      	ldr	r1, [r6, #8]
    1958:	f00b fc10 	bl	d17c <__aeabi_fcmplt>
    195c:	2800      	cmp	r0, #0
    195e:	d0ef      	beq.n	1940 <BMSModuleManager::getLowCellVolt()+0x14>
    1960:	4620      	mov	r0, r4
    1962:	f7fe fe3f 	bl	5e4 <BMSModule::getLowCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1966:	34f8      	adds	r4, #248	; 0xf8
    1968:	42ac      	cmp	r4, r5
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
    196a:	60b0      	str	r0, [r6, #8]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    196c:	d1eb      	bne.n	1946 <BMSModuleManager::getLowCellVolt()+0x1a>
}
    196e:	68b0      	ldr	r0, [r6, #8]
    1970:	bd70      	pop	{r4, r5, r6, pc}
    1972:	bf00      	nop
    1974:	40a00000 	.word	0x40a00000

00001978 <BMSModuleManager::getHighCellVolt()>:
{
    1978:	b570      	push	{r4, r5, r6, lr}
  HighCellVolt = 0.0;
    197a:	2300      	movs	r3, #0
    197c:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
{
    1980:	4606      	mov	r6, r0
  HighCellVolt = 0.0;
    1982:	60c3      	str	r3, [r0, #12]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1984:	f500 7492 	add.w	r4, r0, #292	; 0x124
    1988:	3534      	adds	r5, #52	; 0x34
    198a:	e002      	b.n	1992 <BMSModuleManager::getHighCellVolt()+0x1a>
    198c:	34f8      	adds	r4, #248	; 0xf8
    198e:	42ac      	cmp	r4, r5
    1990:	d013      	beq.n	19ba <BMSModuleManager::getHighCellVolt()+0x42>
    if (modules[x].isExisting())
    1992:	4620      	mov	r0, r4
    1994:	f7ff f9a0 	bl	cd8 <BMSModule::isExisting()>
    1998:	2800      	cmp	r0, #0
    199a:	d0f7      	beq.n	198c <BMSModuleManager::getHighCellVolt()+0x14>
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
    199c:	4620      	mov	r0, r4
    199e:	f7fe fe3f 	bl	620 <BMSModule::getHighCellV()>
    19a2:	68f1      	ldr	r1, [r6, #12]
    19a4:	f00b fc08 	bl	d1b8 <__aeabi_fcmpgt>
    19a8:	2800      	cmp	r0, #0
    19aa:	d0ef      	beq.n	198c <BMSModuleManager::getHighCellVolt()+0x14>
    19ac:	4620      	mov	r0, r4
    19ae:	f7fe fe37 	bl	620 <BMSModule::getHighCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    19b2:	34f8      	adds	r4, #248	; 0xf8
    19b4:	42ac      	cmp	r4, r5
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
    19b6:	60f0      	str	r0, [r6, #12]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    19b8:	d1eb      	bne.n	1992 <BMSModuleManager::getHighCellVolt()+0x1a>
}
    19ba:	68f0      	ldr	r0, [r6, #12]
    19bc:	bd70      	pop	{r4, r5, r6, pc}
    19be:	bf00      	nop

000019c0 <BMSModuleManager::getPackVoltage()>:
}
    19c0:	6800      	ldr	r0, [r0, #0]
    19c2:	4770      	bx	lr

000019c4 <BMSModuleManager::getNumModules()>:
  return numFoundModules;
    19c4:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
}
    19c8:	f8d0 0d38 	ldr.w	r0, [r0, #3384]	; 0xd38
    19cc:	4770      	bx	lr
    19ce:	bf00      	nop

000019d0 <BMSModuleManager::setPstrings(int)>:
  Pstring = Pstrings;
    19d0:	6041      	str	r1, [r0, #4]
}
    19d2:	4770      	bx	lr

000019d4 <BMSModuleManager::setSensors(int, float, float)>:
{
    19d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    19d8:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
    19dc:	4688      	mov	r8, r1
    19de:	4617      	mov	r7, r2
    19e0:	461e      	mov	r6, r3
    19e2:	f500 7492 	add.w	r4, r0, #292	; 0x124
    19e6:	3534      	adds	r5, #52	; 0x34
    19e8:	e002      	b.n	19f0 <BMSModuleManager::setSensors(int, float, float)+0x1c>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    19ea:	34f8      	adds	r4, #248	; 0xf8
    19ec:	42ac      	cmp	r4, r5
    19ee:	d013      	beq.n	1a18 <BMSModuleManager::setSensors(int, float, float)+0x44>
    if (modules[x].isExisting())
    19f0:	4620      	mov	r0, r4
    19f2:	f7ff f971 	bl	cd8 <BMSModule::isExisting()>
    19f6:	2800      	cmp	r0, #0
    19f8:	d0f7      	beq.n	19ea <BMSModuleManager::setSensors(int, float, float)+0x16>
      modules[x].settempsensor(sensor);
    19fa:	4620      	mov	r0, r4
    19fc:	4641      	mov	r1, r8
    19fe:	f7ff f973 	bl	ce8 <BMSModule::settempsensor(int)>
      modules[x].setIgnoreCell(Ignore);
    1a02:	4620      	mov	r0, r4
    1a04:	4639      	mov	r1, r7
    1a06:	f7ff f97f 	bl	d08 <BMSModule::setIgnoreCell(float)>
      modules[x].setDelta(VoltDelta);
    1a0a:	4620      	mov	r0, r4
    1a0c:	4631      	mov	r1, r6
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a0e:	34f8      	adds	r4, #248	; 0xf8
      modules[x].setDelta(VoltDelta);
    1a10:	f7ff f972 	bl	cf8 <BMSModule::setDelta(float)>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a14:	42ac      	cmp	r4, r5
    1a16:	d1eb      	bne.n	19f0 <BMSModuleManager::setSensors(int, float, float)+0x1c>
}
    1a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001a1c <BMSModuleManager::getAvgTemperature()>:
{
    1a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  lowTemp = 999.0f;
    1a20:	4a2a      	ldr	r2, [pc, #168]	; (1acc <BMSModuleManager::getAvgTemperature()+0xb0>)
  highTemp = -999.0f;
    1a22:	4b2b      	ldr	r3, [pc, #172]	; (1ad0 <BMSModuleManager::getAvgTemperature()+0xb4>)
      if (modules[x].getAvgTemp() > -70)
    1a24:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1ad4 <BMSModuleManager::getAvgTemperature()+0xb8>
  lowTemp = 999.0f;
    1a28:	6242      	str	r2, [r0, #36]	; 0x24
  highTemp = -999.0f;
    1a2a:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
{
    1a2e:	4680      	mov	r8, r0
  highTemp = -999.0f;
    1a30:	6203      	str	r3, [r0, #32]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a32:	f500 7492 	add.w	r4, r0, #292	; 0x124
    1a36:	3534      	adds	r5, #52	; 0x34
  int y = 0; //counter for modules below -70 (no sensors connected)
    1a38:	2600      	movs	r6, #0
  float avg = 0.0f;
    1a3a:	2700      	movs	r7, #0
    1a3c:	e002      	b.n	1a44 <BMSModuleManager::getAvgTemperature()+0x28>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a3e:	34f8      	adds	r4, #248	; 0xf8
    1a40:	42a5      	cmp	r5, r4
    1a42:	d010      	beq.n	1a66 <BMSModuleManager::getAvgTemperature()+0x4a>
    if (modules[x].isExisting())
    1a44:	4620      	mov	r0, r4
    1a46:	f7ff f947 	bl	cd8 <BMSModule::isExisting()>
    1a4a:	2800      	cmp	r0, #0
    1a4c:	d0f7      	beq.n	1a3e <BMSModuleManager::getAvgTemperature()+0x22>
      if (modules[x].getAvgTemp() > -70)
    1a4e:	4620      	mov	r0, r4
    1a50:	f7fe fe64 	bl	71c <BMSModule::getAvgTemp()>
    1a54:	4649      	mov	r1, r9
    1a56:	f00b fbaf 	bl	d1b8 <__aeabi_fcmpgt>
    1a5a:	b988      	cbnz	r0, 1a80 <BMSModuleManager::getAvgTemperature()+0x64>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a5c:	34f8      	adds	r4, #248	; 0xf8
    1a5e:	42a5      	cmp	r5, r4
        y++;
    1a60:	f106 0601 	add.w	r6, r6, #1
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a64:	d1ee      	bne.n	1a44 <BMSModuleManager::getAvgTemperature()+0x28>
  avg = avg / (float)(numFoundModules - y);
    1a66:	f508 5840 	add.w	r8, r8, #12288	; 0x3000
    1a6a:	f8d8 0d38 	ldr.w	r0, [r8, #3384]	; 0xd38
    1a6e:	1b80      	subs	r0, r0, r6
    1a70:	f00b f992 	bl	cd98 <__aeabi_i2f>
    1a74:	4601      	mov	r1, r0
    1a76:	4638      	mov	r0, r7
    1a78:	f00b fa96 	bl	cfa8 <__aeabi_fdiv>
}
    1a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        avg += modules[x].getAvgTemp();
    1a80:	4620      	mov	r0, r4
    1a82:	f7fe fe4b 	bl	71c <BMSModule::getAvgTemp()>
    1a86:	4601      	mov	r1, r0
    1a88:	4638      	mov	r0, r7
    1a8a:	f00b f8d1 	bl	cc30 <__addsf3>
    1a8e:	4607      	mov	r7, r0
        if (modules[x].getHighTemp() > highTemp)
    1a90:	4620      	mov	r0, r4
    1a92:	f7fe fe25 	bl	6e0 <BMSModule::getHighTemp()>
    1a96:	f8d8 1020 	ldr.w	r1, [r8, #32]
    1a9a:	f00b fb8d 	bl	d1b8 <__aeabi_fcmpgt>
    1a9e:	b970      	cbnz	r0, 1abe <BMSModuleManager::getAvgTemperature()+0xa2>
        if (modules[x].getLowTemp() < lowTemp)
    1aa0:	4620      	mov	r0, r4
    1aa2:	f7fe ff17 	bl	8d4 <BMSModule::getLowTemp()>
    1aa6:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    1aaa:	f00b fb67 	bl	d17c <__aeabi_fcmplt>
    1aae:	2800      	cmp	r0, #0
    1ab0:	d0c5      	beq.n	1a3e <BMSModuleManager::getAvgTemperature()+0x22>
          lowTemp = modules[x].getLowTemp();
    1ab2:	4620      	mov	r0, r4
    1ab4:	f7fe ff0e 	bl	8d4 <BMSModule::getLowTemp()>
    1ab8:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    1abc:	e7bf      	b.n	1a3e <BMSModuleManager::getAvgTemperature()+0x22>
          highTemp = modules[x].getHighTemp();
    1abe:	4620      	mov	r0, r4
    1ac0:	f7fe fe0e 	bl	6e0 <BMSModule::getHighTemp()>
    1ac4:	f8c8 0020 	str.w	r0, [r8, #32]
    1ac8:	e7ea      	b.n	1aa0 <BMSModuleManager::getAvgTemperature()+0x84>
    1aca:	bf00      	nop
    1acc:	4479c000 	.word	0x4479c000
    1ad0:	c479c000 	.word	0xc479c000
    1ad4:	c28c0000 	.word	0xc28c0000

00001ad8 <BMSModuleManager::getHighTemperature()>:
}
    1ad8:	6a00      	ldr	r0, [r0, #32]
    1ada:	4770      	bx	lr

00001adc <BMSModuleManager::getLowTemperature()>:
}
    1adc:	6a40      	ldr	r0, [r0, #36]	; 0x24
    1ade:	4770      	bx	lr

00001ae0 <BMSModuleManager::getAvgCellVolt()>:
{
    1ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  numFoundModules = 0;
    1ae4:	f500 5840 	add.w	r8, r0, #12288	; 0x3000
  float avg = 0.0f;
    1ae8:	2600      	movs	r6, #0
  numFoundModules = 0;
    1aea:	2300      	movs	r3, #0
    1aec:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
    1af0:	f8c8 3d38 	str.w	r3, [r8, #3384]	; 0xd38
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1af4:	f500 7492 	add.w	r4, r0, #292	; 0x124
    1af8:	3534      	adds	r5, #52	; 0x34
      if (modules[x].getAverageV() > 0)
    1afa:	4637      	mov	r7, r6
    1afc:	e002      	b.n	1b04 <BMSModuleManager::getAvgCellVolt()+0x24>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1afe:	34f8      	adds	r4, #248	; 0xf8
    1b00:	42ac      	cmp	r4, r5
    1b02:	d01d      	beq.n	1b40 <BMSModuleManager::getAvgCellVolt()+0x60>
    if (modules[x].isExisting())
    1b04:	4620      	mov	r0, r4
    1b06:	f7ff f8e7 	bl	cd8 <BMSModule::isExisting()>
    1b0a:	2800      	cmp	r0, #0
    1b0c:	d0f7      	beq.n	1afe <BMSModuleManager::getAvgCellVolt()+0x1e>
      if (modules[x].getAverageV() > 0)
    1b0e:	4620      	mov	r0, r4
    1b10:	f7fe fdac 	bl	66c <BMSModule::getAverageV()>
    1b14:	4639      	mov	r1, r7
    1b16:	f00b fb4f 	bl	d1b8 <__aeabi_fcmpgt>
    1b1a:	4603      	mov	r3, r0
        avg += modules[x].getAverageV();
    1b1c:	4620      	mov	r0, r4
      if (modules[x].getAverageV() > 0)
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d0ed      	beq.n	1afe <BMSModuleManager::getAvgCellVolt()+0x1e>
        avg += modules[x].getAverageV();
    1b22:	f7fe fda3 	bl	66c <BMSModule::getAverageV()>
    1b26:	4601      	mov	r1, r0
    1b28:	4630      	mov	r0, r6
    1b2a:	f00b f881 	bl	cc30 <__addsf3>
        numFoundModules++;
    1b2e:	f8d8 3d38 	ldr.w	r3, [r8, #3384]	; 0xd38
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1b32:	34f8      	adds	r4, #248	; 0xf8
        numFoundModules++;
    1b34:	3301      	adds	r3, #1
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1b36:	42ac      	cmp	r4, r5
        avg += modules[x].getAverageV();
    1b38:	4606      	mov	r6, r0
        numFoundModules++;
    1b3a:	f8c8 3d38 	str.w	r3, [r8, #3384]	; 0xd38
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1b3e:	d1e1      	bne.n	1b04 <BMSModuleManager::getAvgCellVolt()+0x24>
  avg = avg / (float)numFoundModules;
    1b40:	f8d8 0d38 	ldr.w	r0, [r8, #3384]	; 0xd38
    1b44:	f00b f928 	bl	cd98 <__aeabi_i2f>
    1b48:	4601      	mov	r1, r0
    1b4a:	4630      	mov	r0, r6
    1b4c:	f00b fa2c 	bl	cfa8 <__aeabi_fdiv>
}
    1b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001b54 <BMSModuleManager::printPackDetails(int)>:
    }
  }
}

void BMSModuleManager::printPackDetails(int digits)
{
    1b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b58:	b091      	sub	sp, #68	; 0x44
    1b5a:	4604      	mov	r4, r0
  uint8_t alerts;
  uint8_t COV;
  uint8_t CUV;
  int cellNum = 0;

  Logger::console("");
    1b5c:	48a4      	ldr	r0, [pc, #656]	; (1df0 <BMSModuleManager::printPackDetails(int)+0x29c>)
{
    1b5e:	910e      	str	r1, [sp, #56]	; 0x38
  Logger::console("");
    1b60:	f000 fb66 	bl	2230 <Logger::console(char*, ...)>
  Logger::console("");
    1b64:	48a2      	ldr	r0, [pc, #648]	; (1df0 <BMSModuleManager::printPackDetails(int)+0x29c>)
    1b66:	f000 fb63 	bl	2230 <Logger::console(char*, ...)>
  Logger::console("");
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1b6a:	f504 5840 	add.w	r8, r4, #12288	; 0x3000
  Logger::console("");
    1b6e:	48a0      	ldr	r0, [pc, #640]	; (1df0 <BMSModuleManager::printPackDetails(int)+0x29c>)
    1b70:	f504 5774 	add.w	r7, r4, #15616	; 0x3d00
    1b74:	f000 fb5c 	bl	2230 <Logger::console(char*, ...)>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1b78:	f504 7592 	add.w	r5, r4, #292	; 0x124
  spack = 0;
    1b7c:	2300      	movs	r3, #0
    1b7e:	3734      	adds	r7, #52	; 0x34
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1b80:	f8d8 bd38 	ldr.w	fp, [r8, #3384]	; 0xd38
  spack = 0;
    1b84:	f8c8 3d40 	str.w	r3, [r8, #3392]	; 0xd40
    1b88:	462e      	mov	r6, r5
    1b8a:	46b9      	mov	r9, r7
    1b8c:	e002      	b.n	1b94 <BMSModuleManager::printPackDetails(int)+0x40>
  for (int y = 1; y < 63; y++)
    1b8e:	36f8      	adds	r6, #248	; 0xf8
    1b90:	45b1      	cmp	r9, r6
    1b92:	d00f      	beq.n	1bb4 <BMSModuleManager::printPackDetails(int)+0x60>
    if (modules[y].isExisting())
    1b94:	4630      	mov	r0, r6
    1b96:	f7ff f89f 	bl	cd8 <BMSModule::isExisting()>
    1b9a:	2800      	cmp	r0, #0
    1b9c:	d0f7      	beq.n	1b8e <BMSModuleManager::printPackDetails(int)+0x3a>
      spack = spack + modules[y].getscells();
    1b9e:	4630      	mov	r0, r6
    1ba0:	f8d8 7d40 	ldr.w	r7, [r8, #3392]	; 0xd40
    1ba4:	f7fe fd98 	bl	6d8 <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
    1ba8:	36f8      	adds	r6, #248	; 0xf8
      spack = spack + modules[y].getscells();
    1baa:	4407      	add	r7, r0
  for (int y = 1; y < 63; y++)
    1bac:	45b1      	cmp	r9, r6
      spack = spack + modules[y].getscells();
    1bae:	f8c8 7d40 	str.w	r7, [r8, #3392]	; 0xd40
  for (int y = 1; y < 63; y++)
    1bb2:	d1ef      	bne.n	1b94 <BMSModuleManager::printPackDetails(int)+0x40>
  return spack;
    1bb4:	f8d8 2d40 	ldr.w	r2, [r8, #3392]	; 0xd40
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bb8:	6820      	ldr	r0, [r4, #0]
  return spack;
    1bba:	920f      	str	r2, [sp, #60]	; 0x3c
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bbc:	f00a ff1c 	bl	c9f8 <__aeabi_f2d>
    1bc0:	6863      	ldr	r3, [r4, #4]
    1bc2:	930d      	str	r3, [sp, #52]	; 0x34
    1bc4:	4606      	mov	r6, r0
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1bc6:	4620      	mov	r0, r4
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bc8:	460f      	mov	r7, r1
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1bca:	f7ff ff89 	bl	1ae0 <BMSModuleManager::getAvgCellVolt()>
    1bce:	4680      	mov	r8, r0
    1bd0:	4620      	mov	r0, r4
    1bd2:	f8d4 9008 	ldr.w	r9, [r4, #8]
    1bd6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    1bda:	f7ff ff1f 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bde:	f00a ff0b 	bl	c9f8 <__aeabi_f2d>
    1be2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1be6:	4649      	mov	r1, r9
    1be8:	4650      	mov	r0, sl
    1bea:	f00b f81f 	bl	cc2c <__aeabi_fsub>
    1bee:	4981      	ldr	r1, [pc, #516]	; (1df4 <BMSModuleManager::printPackDetails(int)+0x2a0>)
    1bf0:	f00b f926 	bl	ce40 <__aeabi_fmul>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bf4:	f00a ff00 	bl	c9f8 <__aeabi_f2d>
    1bf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
    1bfc:	4650      	mov	r0, sl
    1bfe:	f00a fefb 	bl	c9f8 <__aeabi_f2d>
    1c02:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1c06:	4648      	mov	r0, r9
    1c08:	f00a fef6 	bl	c9f8 <__aeabi_f2d>
    1c0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1c10:	4640      	mov	r0, r8
    1c12:	f00a fef1 	bl	c9f8 <__aeabi_f2d>
    1c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1c1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1c1e:	e9cd 6700 	strd	r6, r7, [sp]
    1c22:	4875      	ldr	r0, [pc, #468]	; (1df8 <BMSModuleManager::printPackDetails(int)+0x2a4>)
    1c24:	4e75      	ldr	r6, [pc, #468]	; (1dfc <BMSModuleManager::printPackDetails(int)+0x2a8>)
    1c26:	4659      	mov	r1, fp
    1c28:	f000 fb02 	bl	2230 <Logger::console(char*, ...)>
  Logger::console("");
    1c2c:	4870      	ldr	r0, [pc, #448]	; (1df0 <BMSModuleManager::printPackDetails(int)+0x29c>)
    1c2e:	f000 faff 	bl	2230 <Logger::console(char*, ...)>
  int cellNum = 0;
    1c32:	2300      	movs	r3, #0
  for (int y = 1; y < 63; y++)
    1c34:	f04f 0801 	mov.w	r8, #1
  int cellNum = 0;
    1c38:	930d      	str	r3, [sp, #52]	; 0x34
    1c3a:	e007      	b.n	1c4c <BMSModuleManager::printPackDetails(int)+0xf8>
  for (int y = 1; y < 63; y++)
    1c3c:	f108 0801 	add.w	r8, r8, #1
    1c40:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    1c44:	f105 05f8 	add.w	r5, r5, #248	; 0xf8
    1c48:	f000 809d 	beq.w	1d86 <BMSModuleManager::printPackDetails(int)+0x232>
  {
    if (modules[y].isExisting())
    1c4c:	4628      	mov	r0, r5
    1c4e:	f7ff f843 	bl	cd8 <BMSModule::isExisting()>
    1c52:	2800      	cmp	r0, #0
    1c54:	d0f2      	beq.n	1c3c <BMSModuleManager::printPackDetails(int)+0xe8>
    {
      faults = modules[y].getFaults();
    1c56:	4628      	mov	r0, r5
    1c58:	f7fe fcae 	bl	5b8 <BMSModule::getFaults()>
      alerts = modules[y].getAlerts();
    1c5c:	4628      	mov	r0, r5
    1c5e:	f7fe fcaf 	bl	5c0 <BMSModule::getAlerts()>
      COV = modules[y].getCOVCells();
    1c62:	4628      	mov	r0, r5
    1c64:	f7fe fcb0 	bl	5c8 <BMSModule::getCOVCells()>
      CUV = modules[y].getCUVCells();
    1c68:	4628      	mov	r0, r5
    1c6a:	f7fe fcb1 	bl	5d0 <BMSModule::getCUVCells()>
    1c6e:	2108      	movs	r1, #8
    1c70:	4863      	ldr	r0, [pc, #396]	; (1e00 <BMSModuleManager::printPackDetails(int)+0x2ac>)
    1c72:	f00a fa05 	bl	c080 <usb_serial_write>
    1c76:	4641      	mov	r1, r8
    1c78:	4630      	mov	r0, r6
    1c7a:	f007 fcb3 	bl	95e4 <Print::print(long)>

      SERIALCONSOLE.print("Module #");
      SERIALCONSOLE.print(y);
      if (y < 10) SERIALCONSOLE.print(" ");
    1c7e:	f1b8 0f09 	cmp.w	r8, #9
    1c82:	f340 80b0 	ble.w	1de6 <BMSModuleManager::printPackDetails(int)+0x292>
    1c86:	2102      	movs	r1, #2
    1c88:	485e      	ldr	r0, [pc, #376]	; (1e04 <BMSModuleManager::printPackDetails(int)+0x2b0>)
    1c8a:	f8df a17c 	ldr.w	sl, [pc, #380]	; 1e08 <BMSModuleManager::printPackDetails(int)+0x2b4>
    1c8e:	f00a f9f7 	bl	c080 <usb_serial_write>
      SERIALCONSOLE.print("  ");
      SERIALCONSOLE.print(modules[y].getModuleVoltage(), digits);
    1c92:	4628      	mov	r0, r5
    1c94:	f7fe ffe2 	bl	c5c <BMSModule::getModuleVoltage()>
    1c98:	f00a feae 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1c9c:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    1ca0:	f8cd 9000 	str.w	r9, [sp]
    1ca4:	460b      	mov	r3, r1
    1ca6:	4602      	mov	r2, r0
    1ca8:	4630      	mov	r0, r6
    1caa:	f007 fcc5 	bl	9638 <Print::printFloat(double, unsigned char)>
    1cae:	4857      	ldr	r0, [pc, #348]	; (1e0c <BMSModuleManager::printPackDetails(int)+0x2b8>)
    1cb0:	2101      	movs	r1, #1
    1cb2:	f00a f9e5 	bl	c080 <usb_serial_write>
      SERIALCONSOLE.print("V");
      for (int i = 0; i < 13; i++)
    1cb6:	462b      	mov	r3, r5
    1cb8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    1cbc:	464d      	mov	r5, r9
    1cbe:	2400      	movs	r4, #0
    1cc0:	4699      	mov	r9, r3
    1cc2:	e01f      	b.n	1d04 <BMSModuleManager::printPackDetails(int)+0x1b0>
    1cc4:	2106      	movs	r1, #6
    1cc6:	4852      	ldr	r0, [pc, #328]	; (1e10 <BMSModuleManager::printPackDetails(int)+0x2bc>)
    1cc8:	f00a f9da 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1ccc:	4659      	mov	r1, fp
    1cce:	4630      	mov	r0, r6
    1cd0:	f007 fc88 	bl	95e4 <Print::print(long)>
    1cd4:	2102      	movs	r1, #2
    1cd6:	484f      	ldr	r0, [pc, #316]	; (1e14 <BMSModuleManager::printPackDetails(int)+0x2c0>)
    1cd8:	f00a f9d2 	bl	c080 <usb_serial_write>
      {
        if (cellNum < 10) SERIALCONSOLE.print(" ");
        SERIALCONSOLE.print("  Cell");
        SERIALCONSOLE.print(cellNum++);
        SERIALCONSOLE.print(": ");
        SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    1cdc:	4621      	mov	r1, r4
    1cde:	4648      	mov	r0, r9
    1ce0:	f7fe fc7a 	bl	5d8 <BMSModule::getCellVoltage(int)>
    1ce4:	f00a fe88 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1ce8:	9500      	str	r5, [sp, #0]
    1cea:	4602      	mov	r2, r0
    1cec:	460b      	mov	r3, r1
    1cee:	4630      	mov	r0, r6
    1cf0:	f007 fca2 	bl	9638 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 13; i++)
    1cf4:	3401      	adds	r4, #1
    1cf6:	4845      	ldr	r0, [pc, #276]	; (1e0c <BMSModuleManager::printPackDetails(int)+0x2b8>)
    1cf8:	2101      	movs	r1, #1
    1cfa:	f00a f9c1 	bl	c080 <usb_serial_write>
    1cfe:	2c0d      	cmp	r4, #13
    1d00:	d00a      	beq.n	1d18 <BMSModuleManager::printPackDetails(int)+0x1c4>
        SERIALCONSOLE.print(cellNum++);
    1d02:	46bb      	mov	fp, r7
        if (cellNum < 10) SERIALCONSOLE.print(" ");
    1d04:	f1bb 0f09 	cmp.w	fp, #9
        SERIALCONSOLE.print(cellNum++);
    1d08:	f10b 0701 	add.w	r7, fp, #1
        if (cellNum < 10) SERIALCONSOLE.print(" ");
    1d0c:	dcda      	bgt.n	1cc4 <BMSModuleManager::printPackDetails(int)+0x170>
    1d0e:	2101      	movs	r1, #1
    1d10:	4650      	mov	r0, sl
    1d12:	f00a f9b5 	bl	c080 <usb_serial_write>
    1d16:	e7d5      	b.n	1cc4 <BMSModuleManager::printPackDetails(int)+0x170>
        SERIALCONSOLE.print("V");
      }
      SERIALCONSOLE.println();
    1d18:	4630      	mov	r0, r6
    1d1a:	f007 fc6b 	bl	95f4 <Print::println()>
      if (modules[y].getType() == 1)
    1d1e:	4648      	mov	r0, r9
    1d20:	f7fe ffd2 	bl	cc8 <BMSModule::getType()>
        SERIALCONSOLE.print(cellNum++);
    1d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      if (modules[y].getType() == 1)
    1d26:	4604      	mov	r4, r0
        SERIALCONSOLE.print(cellNum++);
    1d28:	330d      	adds	r3, #13
      if (modules[y].getType() == 1)
    1d2a:	2c01      	cmp	r4, #1
    1d2c:	483a      	ldr	r0, [pc, #232]	; (1e18 <BMSModuleManager::printPackDetails(int)+0x2c4>)
        SERIALCONSOLE.print(cellNum++);
    1d2e:	930d      	str	r3, [sp, #52]	; 0x34
      SERIALCONSOLE.println();
    1d30:	464d      	mov	r5, r9
    1d32:	f04f 0109 	mov.w	r1, #9
      if (modules[y].getType() == 1)
    1d36:	d029      	beq.n	1d8c <BMSModuleManager::printPackDetails(int)+0x238>
    1d38:	f00a f9a2 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.println(modules[y].getBalStat(), HEX);
      }
      else
      {
        SERIALCONSOLE.print(" Temp 1: ");
        SERIALCONSOLE.print(modules[y].getTemperature(0));
    1d3c:	2100      	movs	r1, #0
    1d3e:	4648      	mov	r0, r9
    1d40:	f7fe ffb4 	bl	cac <BMSModule::getTemperature(int)>
    1d44:	f00a fe58 	bl	c9f8 <__aeabi_f2d>
    1d48:	460b      	mov	r3, r1
    1d4a:	2102      	movs	r1, #2
    1d4c:	4602      	mov	r2, r0
    1d4e:	9100      	str	r1, [sp, #0]
    1d50:	4630      	mov	r0, r6
    1d52:	f007 fc71 	bl	9638 <Print::printFloat(double, unsigned char)>
    1d56:	210e      	movs	r1, #14
    1d58:	4830      	ldr	r0, [pc, #192]	; (1e1c <BMSModuleManager::printPackDetails(int)+0x2c8>)
    1d5a:	f00a f991 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print("C | Bal Stat: ");
        SERIALCONSOLE.println(modules[y].getBalStat(), HEX);
    1d5e:	4628      	mov	r0, r5
    1d60:	f7fe ffb6 	bl	cd0 <BMSModule::getBalStat()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    1d64:	2300      	movs	r3, #0
    1d66:	4601      	mov	r1, r0
    1d68:	2210      	movs	r2, #16
    1d6a:	4630      	mov	r0, r6
    1d6c:	f007 fc5a 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  for (int y = 1; y < 63; y++)
    1d70:	f108 0801 	add.w	r8, r8, #1
	size_t println(int n, int base)			{ return print(n, base) + println(); }
    1d74:	4630      	mov	r0, r6
    1d76:	f007 fc3d 	bl	95f4 <Print::println()>
    1d7a:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    1d7e:	f105 05f8 	add.w	r5, r5, #248	; 0xf8
    1d82:	f47f af63 	bne.w	1c4c <BMSModuleManager::printPackDetails(int)+0xf8>
      }
    }
  }
}
    1d86:	b011      	add	sp, #68	; 0x44
    1d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d8c:	f00a f978 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(modules[y].getTemperature(0));
    1d90:	2100      	movs	r1, #0
    1d92:	4648      	mov	r0, r9
    1d94:	f7fe ff8a 	bl	cac <BMSModule::getTemperature(int)>
    1d98:	f00a fe2e 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1d9c:	2702      	movs	r7, #2
    1d9e:	4602      	mov	r2, r0
    1da0:	460b      	mov	r3, r1
    1da2:	9700      	str	r7, [sp, #0]
    1da4:	4630      	mov	r0, r6
    1da6:	f007 fc47 	bl	9638 <Print::printFloat(double, unsigned char)>
    1daa:	210a      	movs	r1, #10
    1dac:	481c      	ldr	r0, [pc, #112]	; (1e20 <BMSModuleManager::printPackDetails(int)+0x2cc>)
    1dae:	f00a f967 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(modules[y].getTemperature(1));
    1db2:	4621      	mov	r1, r4
    1db4:	4648      	mov	r0, r9
    1db6:	f7fe ff79 	bl	cac <BMSModule::getTemperature(int)>
    1dba:	f00a fe1d 	bl	c9f8 <__aeabi_f2d>
    1dbe:	9700      	str	r7, [sp, #0]
    1dc0:	4602      	mov	r2, r0
    1dc2:	460b      	mov	r3, r1
    1dc4:	4630      	mov	r0, r6
    1dc6:	f007 fc37 	bl	9638 <Print::printFloat(double, unsigned char)>
    1dca:	210a      	movs	r1, #10
    1dcc:	4815      	ldr	r0, [pc, #84]	; (1e24 <BMSModuleManager::printPackDetails(int)+0x2d0>)
    1dce:	f00a f957 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(modules[y].getTemperature(2));
    1dd2:	4639      	mov	r1, r7
    1dd4:	4648      	mov	r0, r9
    1dd6:	f7fe ff69 	bl	cac <BMSModule::getTemperature(int)>
    1dda:	f00a fe0d 	bl	c9f8 <__aeabi_f2d>
    1dde:	9700      	str	r7, [sp, #0]
    1de0:	4602      	mov	r2, r0
    1de2:	460b      	mov	r3, r1
    1de4:	e7b4      	b.n	1d50 <BMSModuleManager::printPackDetails(int)+0x1fc>
    1de6:	2101      	movs	r1, #1
    1de8:	4807      	ldr	r0, [pc, #28]	; (1e08 <BMSModuleManager::printPackDetails(int)+0x2b4>)
    1dea:	f00a f949 	bl	c080 <usb_serial_write>
    1dee:	e74a      	b.n	1c86 <BMSModuleManager::printPackDetails(int)+0x132>
    1df0:	0001423c 	.word	0x0001423c
    1df4:	447a0000 	.word	0x447a0000
    1df8:	00013f60 	.word	0x00013f60
    1dfc:	1fff89fc 	.word	0x1fff89fc
    1e00:	00014000 	.word	0x00014000
    1e04:	00014ea8 	.word	0x00014ea8
    1e08:	000140c4 	.word	0x000140c4
    1e0c:	0001400c 	.word	0x0001400c
    1e10:	00014010 	.word	0x00014010
    1e14:	000140b4 	.word	0x000140b4
    1e18:	00014018 	.word	0x00014018
    1e1c:	0001403c 	.word	0x0001403c
    1e20:	00014024 	.word	0x00014024
    1e24:	00014030 	.word	0x00014030

00001e28 <BMSModuleManager::printAllCSV(unsigned long, float, int)>:
void BMSModuleManager::printAllCSV(unsigned long timestamp, float current, int SOC)
{
    1e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e2c:	b087      	sub	sp, #28
    1e2e:	f500 7492 	add.w	r4, r0, #292	; 0x124
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1e32:	f8df 8248 	ldr.w	r8, [pc, #584]	; 207c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x254>
    1e36:	f8df 9248 	ldr.w	r9, [pc, #584]	; 2080 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x258>
    1e3a:	9103      	str	r1, [sp, #12]
    1e3c:	9204      	str	r2, [sp, #16]
    1e3e:	469b      	mov	fp, r3
    1e40:	4626      	mov	r6, r4
  for (int y = 1; y < 63; y++)
    1e42:	2701      	movs	r7, #1
    1e44:	9405      	str	r4, [sp, #20]
    1e46:	4692      	mov	sl, r2
    1e48:	e004      	b.n	1e54 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    1e4a:	3701      	adds	r7, #1
    1e4c:	2f3f      	cmp	r7, #63	; 0x3f
    1e4e:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
    1e52:	d075      	beq.n	1f40 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x118>
  {
    if (modules[y].isExisting())
    1e54:	4630      	mov	r0, r6
    1e56:	f7fe ff3f 	bl	cd8 <BMSModule::isExisting()>
    1e5a:	2800      	cmp	r0, #0
    1e5c:	d0f5      	beq.n	1e4a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x22>
    1e5e:	2300      	movs	r3, #0
    1e60:	220a      	movs	r2, #10
    1e62:	9903      	ldr	r1, [sp, #12]
    1e64:	4640      	mov	r0, r8
    1e66:	f007 fbdd 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1e6a:	2101      	movs	r1, #1
    1e6c:	4648      	mov	r0, r9
    1e6e:	f00a f907 	bl	c080 <usb_serial_write>
    {
      SERIALCONSOLE.print(timestamp);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(current, 0);
    1e72:	4650      	mov	r0, sl
    1e74:	f00a fdc0 	bl	c9f8 <__aeabi_f2d>
    1e78:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1e7a:	2100      	movs	r1, #0
    1e7c:	4602      	mov	r2, r0
    1e7e:	9100      	str	r1, [sp, #0]
    1e80:	4640      	mov	r0, r8
    1e82:	f007 fbd9 	bl	9638 <Print::printFloat(double, unsigned char)>
    1e86:	2101      	movs	r1, #1
    1e88:	4648      	mov	r0, r9
    1e8a:	f00a f8f9 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1e8e:	4659      	mov	r1, fp
    1e90:	4640      	mov	r0, r8
    1e92:	f007 fba7 	bl	95e4 <Print::print(long)>
    1e96:	2101      	movs	r1, #1
    1e98:	4648      	mov	r0, r9
    1e9a:	f00a f8f1 	bl	c080 <usb_serial_write>
    1e9e:	4639      	mov	r1, r7
    1ea0:	4640      	mov	r0, r8
    1ea2:	f007 fb9f 	bl	95e4 <Print::print(long)>
    1ea6:	2101      	movs	r1, #1
    1ea8:	4648      	mov	r0, r9
    1eaa:	f00a f8e9 	bl	c080 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(SOC);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(y);
      SERIALCONSOLE.print(",");
      for (int i = 0; i < 8; i++)
    1eae:	2400      	movs	r4, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1eb0:	2502      	movs	r5, #2
      {
        SERIALCONSOLE.print(modules[y].getCellVoltage(i));
    1eb2:	4621      	mov	r1, r4
    1eb4:	4630      	mov	r0, r6
    1eb6:	f7fe fb8f 	bl	5d8 <BMSModule::getCellVoltage(int)>
    1eba:	f00a fd9d 	bl	c9f8 <__aeabi_f2d>
    1ebe:	9500      	str	r5, [sp, #0]
    1ec0:	4602      	mov	r2, r0
    1ec2:	460b      	mov	r3, r1
    1ec4:	4640      	mov	r0, r8
    1ec6:	f007 fbb7 	bl	9638 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 8; i++)
    1eca:	3401      	adds	r4, #1
    1ecc:	2101      	movs	r1, #1
    1ece:	4648      	mov	r0, r9
    1ed0:	f00a f8d6 	bl	c080 <usb_serial_write>
    1ed4:	2c08      	cmp	r4, #8
    1ed6:	d1ec      	bne.n	1eb2 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x8a>
        SERIALCONSOLE.print(",");
      }
      SERIALCONSOLE.print(modules[y].getTemperature(0));
    1ed8:	2100      	movs	r1, #0
    1eda:	4630      	mov	r0, r6
    1edc:	f7fe fee6 	bl	cac <BMSModule::getTemperature(int)>
    1ee0:	f00a fd8a 	bl	c9f8 <__aeabi_f2d>
    1ee4:	9500      	str	r5, [sp, #0]
    1ee6:	4602      	mov	r2, r0
    1ee8:	460b      	mov	r3, r1
    1eea:	4640      	mov	r0, r8
    1eec:	f007 fba4 	bl	9638 <Print::printFloat(double, unsigned char)>
    1ef0:	2101      	movs	r1, #1
    1ef2:	4648      	mov	r0, r9
    1ef4:	f00a f8c4 	bl	c080 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    1ef8:	2101      	movs	r1, #1
    1efa:	4630      	mov	r0, r6
    1efc:	f7fe fed6 	bl	cac <BMSModule::getTemperature(int)>
    1f00:	f00a fd7a 	bl	c9f8 <__aeabi_f2d>
    1f04:	9500      	str	r5, [sp, #0]
    1f06:	4602      	mov	r2, r0
    1f08:	460b      	mov	r3, r1
    1f0a:	4640      	mov	r0, r8
    1f0c:	f007 fb94 	bl	9638 <Print::printFloat(double, unsigned char)>
    1f10:	2101      	movs	r1, #1
    1f12:	4648      	mov	r0, r9
    1f14:	f00a f8b4 	bl	c080 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(2));
    1f18:	2102      	movs	r1, #2
    1f1a:	4630      	mov	r0, r6
    1f1c:	f7fe fec6 	bl	cac <BMSModule::getTemperature(int)>
    1f20:	f00a fd6a 	bl	c9f8 <__aeabi_f2d>
    1f24:	9500      	str	r5, [sp, #0]
    1f26:	4602      	mov	r2, r0
    1f28:	460b      	mov	r3, r1
    1f2a:	4640      	mov	r0, r8
    1f2c:	f007 fb84 	bl	9638 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    1f30:	3701      	adds	r7, #1
      SERIALCONSOLE.println();
    1f32:	4640      	mov	r0, r8
    1f34:	f007 fb5e 	bl	95f4 <Print::println()>
  for (int y = 1; y < 63; y++)
    1f38:	2f3f      	cmp	r7, #63	; 0x3f
    1f3a:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
    1f3e:	d189      	bne.n	1e54 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    }
  }
  for (int y = 1; y < 63; y++)
    1f40:	9c05      	ldr	r4, [sp, #20]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1f42:	4f50      	ldr	r7, [pc, #320]	; (2084 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x25c>)
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial2_write(buffer, size); return size; }
    1f44:	f8df 8138 	ldr.w	r8, [pc, #312]	; 2080 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x258>
    1f48:	2601      	movs	r6, #1
    1f4a:	f04f 0a00 	mov.w	sl, #0
    1f4e:	e004      	b.n	1f5a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
    1f50:	3601      	adds	r6, #1
    1f52:	2e3f      	cmp	r6, #63	; 0x3f
    1f54:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
    1f58:	d05c      	beq.n	2014 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x1ec>
  {
    if (modules[y].isExisting())
    1f5a:	4620      	mov	r0, r4
    1f5c:	f7fe febc 	bl	cd8 <BMSModule::isExisting()>
    1f60:	2800      	cmp	r0, #0
    1f62:	d0f5      	beq.n	1f50 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x128>
    1f64:	2300      	movs	r3, #0
    1f66:	220a      	movs	r2, #10
    1f68:	9903      	ldr	r1, [sp, #12]
    1f6a:	4638      	mov	r0, r7
    1f6c:	f007 fb5a 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1f70:	2101      	movs	r1, #1
    1f72:	4640      	mov	r0, r8
    1f74:	f008 fd56 	bl	aa24 <serial2_write>
    {
      Serial2.print(timestamp);
      Serial2.print(",");
      Serial2.print(current, 0);
    1f78:	9804      	ldr	r0, [sp, #16]
    1f7a:	f00a fd3d 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1f7e:	f8cd a000 	str.w	sl, [sp]
    1f82:	4602      	mov	r2, r0
    1f84:	460b      	mov	r3, r1
    1f86:	4638      	mov	r0, r7
    1f88:	f007 fb56 	bl	9638 <Print::printFloat(double, unsigned char)>
    1f8c:	2101      	movs	r1, #1
    1f8e:	4640      	mov	r0, r8
    1f90:	f008 fd48 	bl	aa24 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    1f94:	4659      	mov	r1, fp
    1f96:	4638      	mov	r0, r7
    1f98:	f007 fb24 	bl	95e4 <Print::print(long)>
    1f9c:	2101      	movs	r1, #1
    1f9e:	4640      	mov	r0, r8
    1fa0:	f008 fd40 	bl	aa24 <serial2_write>
    1fa4:	4631      	mov	r1, r6
    1fa6:	4638      	mov	r0, r7
    1fa8:	f007 fb1c 	bl	95e4 <Print::print(long)>
    1fac:	2101      	movs	r1, #1
    1fae:	4640      	mov	r0, r8
    1fb0:	f008 fd38 	bl	aa24 <serial2_write>
      Serial2.print(",");
      Serial2.print(SOC);
      Serial2.print(",");
      Serial2.print(y);
      Serial2.print(",");
      for (int i = 0; i < 13; i++)
    1fb4:	2500      	movs	r5, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1fb6:	f04f 0902 	mov.w	r9, #2
      {
        Serial2.print(modules[y].getCellVoltage(i));
    1fba:	4629      	mov	r1, r5
    1fbc:	4620      	mov	r0, r4
    1fbe:	f7fe fb0b 	bl	5d8 <BMSModule::getCellVoltage(int)>
    1fc2:	f00a fd19 	bl	c9f8 <__aeabi_f2d>
    1fc6:	f8cd 9000 	str.w	r9, [sp]
    1fca:	4602      	mov	r2, r0
    1fcc:	460b      	mov	r3, r1
    1fce:	4638      	mov	r0, r7
    1fd0:	f007 fb32 	bl	9638 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 13; i++)
    1fd4:	3501      	adds	r5, #1
    1fd6:	2101      	movs	r1, #1
    1fd8:	4640      	mov	r0, r8
    1fda:	f008 fd23 	bl	aa24 <serial2_write>
    1fde:	2d0d      	cmp	r5, #13
    1fe0:	d1eb      	bne.n	1fba <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x192>
        Serial2.print(",");
      }
      if (modules[y].getType() == 1)
    1fe2:	4620      	mov	r0, r4
    1fe4:	f7fe fe70 	bl	cc8 <BMSModule::getType()>
    1fe8:	4605      	mov	r5, r0
    1fea:	2d01      	cmp	r5, #1
      {
        Serial2.print(modules[y].getTemperature(0));
    1fec:	f04f 0100 	mov.w	r1, #0
    1ff0:	4620      	mov	r0, r4
      if (modules[y].getType() == 1)
    1ff2:	d012      	beq.n	201a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x1f2>
        Serial2.print(modules[y].getTemperature(2));
        Serial2.println();
      }
      else
      {
        Serial2.print(modules[y].getTemperature(0));
    1ff4:	f7fe fe5a 	bl	cac <BMSModule::getTemperature(int)>
    1ff8:	f00a fcfe 	bl	c9f8 <__aeabi_f2d>
  for (int y = 1; y < 63; y++)
    1ffc:	3601      	adds	r6, #1
        Serial2.print(modules[y].getTemperature(0));
    1ffe:	4602      	mov	r2, r0
    2000:	460b      	mov	r3, r1
    2002:	f8cd 9000 	str.w	r9, [sp]
    2006:	4638      	mov	r0, r7
    2008:	f007 fb16 	bl	9638 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    200c:	2e3f      	cmp	r6, #63	; 0x3f
    200e:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
    2012:	d1a2      	bne.n	1f5a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
      }
    }
  }
}
    2014:	b007      	add	sp, #28
    2016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Serial2.print(modules[y].getTemperature(0));
    201a:	f7fe fe47 	bl	cac <BMSModule::getTemperature(int)>
    201e:	f00a fceb 	bl	c9f8 <__aeabi_f2d>
    2022:	f8cd 9000 	str.w	r9, [sp]
    2026:	4602      	mov	r2, r0
    2028:	460b      	mov	r3, r1
    202a:	4638      	mov	r0, r7
    202c:	f007 fb04 	bl	9638 <Print::printFloat(double, unsigned char)>
    2030:	4629      	mov	r1, r5
    2032:	4640      	mov	r0, r8
    2034:	f008 fcf6 	bl	aa24 <serial2_write>
        Serial2.print(modules[y].getTemperature(1));
    2038:	4629      	mov	r1, r5
    203a:	4620      	mov	r0, r4
    203c:	f7fe fe36 	bl	cac <BMSModule::getTemperature(int)>
    2040:	f00a fcda 	bl	c9f8 <__aeabi_f2d>
    2044:	f8cd 9000 	str.w	r9, [sp]
    2048:	4602      	mov	r2, r0
    204a:	460b      	mov	r3, r1
    204c:	4638      	mov	r0, r7
    204e:	f007 faf3 	bl	9638 <Print::printFloat(double, unsigned char)>
    2052:	4629      	mov	r1, r5
    2054:	4640      	mov	r0, r8
    2056:	f008 fce5 	bl	aa24 <serial2_write>
        Serial2.print(modules[y].getTemperature(2));
    205a:	2102      	movs	r1, #2
    205c:	4620      	mov	r0, r4
    205e:	f7fe fe25 	bl	cac <BMSModule::getTemperature(int)>
    2062:	f00a fcc9 	bl	c9f8 <__aeabi_f2d>
    2066:	f8cd 9000 	str.w	r9, [sp]
    206a:	4602      	mov	r2, r0
    206c:	460b      	mov	r3, r1
    206e:	4638      	mov	r0, r7
    2070:	f007 fae2 	bl	9638 <Print::printFloat(double, unsigned char)>
        Serial2.println();
    2074:	4638      	mov	r0, r7
    2076:	f007 fabd 	bl	95f4 <Print::println()>
    207a:	e769      	b.n	1f50 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x128>
    207c:	1fff89fc 	.word	0x1fff89fc
    2080:	00013bdc 	.word	0x00013bdc
    2084:	1fff88bc 	.word	0x1fff88bc

00002088 <Logger::setLoglevel(Logger::LogLevel)>:

/*
   Set the log level. Any output below the specified log level will be omitted.
*/
void Logger::setLoglevel(LogLevel level) {
  logLevel = level;
    2088:	4b01      	ldr	r3, [pc, #4]	; (2090 <Logger::setLoglevel(Logger::LogLevel)+0x8>)
    208a:	7018      	strb	r0, [r3, #0]
}
    208c:	4770      	bx	lr
    208e:	bf00      	nop
    2090:	1fff8824 	.word	0x1fff8824

00002094 <Logger::logMessage(char*, std::__va_list)>:
   %c - prints the next parameter as a character
   %t - prints the next parameter as boolean ('T' or 'F')
   %T - prints the next parameter as boolean ('true' or 'false')
*/
void Logger::logMessage(char *format, va_list args) {
  for (; *format != 0; ++format) {
    2094:	7802      	ldrb	r2, [r0, #0]
    2096:	2a00      	cmp	r2, #0
    2098:	f000 80b8 	beq.w	220c <Logger::logMessage(char*, std::__va_list)+0x178>
void Logger::logMessage(char *format, va_list args) {
    209c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    20a0:	4f5c      	ldr	r7, [pc, #368]	; (2214 <Logger::logMessage(char*, std::__va_list)+0x180>)
    20a2:	f8df 8174 	ldr.w	r8, [pc, #372]	; 2218 <Logger::logMessage(char*, std::__va_list)+0x184>
    20a6:	4e5d      	ldr	r6, [pc, #372]	; (221c <Logger::logMessage(char*, std::__va_list)+0x188>)
    20a8:	b083      	sub	sp, #12
    20aa:	4603      	mov	r3, r0
    20ac:	460d      	mov	r5, r1
    if (*format == '%') {
    20ae:	2a25      	cmp	r2, #37	; 0x25
    20b0:	d134      	bne.n	211c <Logger::logMessage(char*, std::__va_list)+0x88>
      ++format;
      if (*format == '\0')
    20b2:	7858      	ldrb	r0, [r3, #1]
      ++format;
    20b4:	1c5c      	adds	r4, r3, #1
      if (*format == '\0')
    20b6:	2800      	cmp	r0, #0
    20b8:	d038      	beq.n	212c <Logger::logMessage(char*, std::__va_list)+0x98>
        break;
      if (*format == '%') {
    20ba:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    20be:	2b55      	cmp	r3, #85	; 0x55
    20c0:	d82e      	bhi.n	2120 <Logger::logMessage(char*, std::__va_list)+0x8c>
    20c2:	e8df f003 	tbb	[pc, r3]
    20c6:	2d9f      	.short	0x2d9f
    20c8:	2d2d2d2d 	.word	0x2d2d2d2d
    20cc:	2d2d2d2d 	.word	0x2d2d2d2d
    20d0:	2d2d2d2d 	.word	0x2d2d2d2d
    20d4:	2d2d2d2d 	.word	0x2d2d2d2d
    20d8:	2d2d2d2d 	.word	0x2d2d2d2d
    20dc:	2d2d2d2d 	.word	0x2d2d2d2d
    20e0:	932d2d2d 	.word	0x932d2d2d
    20e4:	2d2d2d2d 	.word	0x2d2d2d2d
    20e8:	2d2d2d2d 	.word	0x2d2d2d2d
    20ec:	2d2d2d2d 	.word	0x2d2d2d2d
    20f0:	2d2d2d2d 	.word	0x2d2d2d2d
    20f4:	2d2d882d 	.word	0x2d2d882d
    20f8:	2d2d7c2d 	.word	0x2d2d7c2d
    20fc:	2d2d2d2d 	.word	0x2d2d2d2d
    2100:	742d2d2d 	.word	0x742d2d2d
    2104:	5e2d3939 	.word	0x5e2d3939
    2108:	2d392d2d 	.word	0x2d392d2d
    210c:	2d2d392d 	.word	0x2d2d392d
    2110:	2d2d2d2d 	.word	0x2d2d2d2d
    2114:	2d2d3f49 	.word	0x2d2d3f49
    2118:	692d562d 	.word	0x692d562d
        }
        continue;
      }

    }
    SERIALCONSOLE.print(*format);
    211c:	7818      	ldrb	r0, [r3, #0]
    211e:	461c      	mov	r4, r3
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2120:	f00a f832 	bl	c188 <usb_serial_putchar>
  for (; *format != 0; ++format) {
    2124:	7862      	ldrb	r2, [r4, #1]
    2126:	1c63      	adds	r3, r4, #1
    2128:	2a00      	cmp	r2, #0
    212a:	d1c0      	bne.n	20ae <Logger::logMessage(char*, std::__va_list)+0x1a>
  }
  SERIALCONSOLE.println();
    212c:	483c      	ldr	r0, [pc, #240]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
}
    212e:	b003      	add	sp, #12
    2130:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SERIALCONSOLE.println();
    2134:	f007 ba5e 	b.w	95f4 <Print::println()>
	size_t print(int n)				{ return print((long)n); }
    2138:	f855 1b04 	ldr.w	r1, [r5], #4
    213c:	4838      	ldr	r0, [pc, #224]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    213e:	f007 fa51 	bl	95e4 <Print::print(long)>
        continue;
    2142:	e7ef      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    2144:	f855 1b04 	ldr.w	r1, [r5], #4
    2148:	2901      	cmp	r1, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    214a:	bf0e      	itee	eq
    214c:	4835      	ldreq	r0, [pc, #212]	; (2224 <Logger::logMessage(char*, std::__va_list)+0x190>)
    214e:	2101      	movne	r1, #1
    2150:	4630      	movne	r0, r6
    2152:	f009 ff95 	bl	c080 <usb_serial_write>
    2156:	e7e5      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        register char *s = (char *) va_arg( args, int );
    2158:	f855 9b04 	ldr.w	r9, [r5], #4
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    215c:	f1b9 0f00 	cmp.w	r9, #0
    2160:	d0e0      	beq.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
							  return write((const uint8_t *)str, strlen(str)); }
    2162:	4648      	mov	r0, r9
    2164:	f00c f82c 	bl	e1c0 <strlen>
    2168:	4601      	mov	r1, r0
    216a:	4648      	mov	r0, r9
    216c:	f009 ff88 	bl	c080 <usb_serial_write>
    2170:	e7d8      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    2172:	f855 1b04 	ldr.w	r1, [r5], #4
    2176:	482a      	ldr	r0, [pc, #168]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2178:	2300      	movs	r3, #0
    217a:	2210      	movs	r2, #16
    217c:	f007 fa52 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    2180:	e7d0      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 3);
    2182:	3507      	adds	r5, #7
    2184:	f025 0507 	bic.w	r5, r5, #7
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2188:	2103      	movs	r1, #3
    218a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    218e:	4824      	ldr	r0, [pc, #144]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2190:	9100      	str	r1, [sp, #0]
    2192:	f007 fa51 	bl	9638 <Print::printFloat(double, unsigned char)>
        continue;
    2196:	e7c5      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 0);
    2198:	3507      	adds	r5, #7
    219a:	f025 0507 	bic.w	r5, r5, #7
    219e:	2100      	movs	r1, #0
    21a0:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    21a4:	481e      	ldr	r0, [pc, #120]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    21a6:	9100      	str	r1, [sp, #0]
    21a8:	f007 fa46 	bl	9638 <Print::printFloat(double, unsigned char)>
        continue;
    21ac:	e7ba      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    21ae:	f855 1b04 	ldr.w	r1, [r5], #4
    21b2:	481b      	ldr	r0, [pc, #108]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    21b4:	2300      	movs	r3, #0
    21b6:	2202      	movs	r2, #2
    21b8:	f007 fa34 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    21bc:	e7b2      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
    21be:	2102      	movs	r1, #2
    21c0:	4819      	ldr	r0, [pc, #100]	; (2228 <Logger::logMessage(char*, std::__va_list)+0x194>)
    21c2:	f009 ff5d 	bl	c080 <usb_serial_write>
    21c6:	f855 1b04 	ldr.w	r1, [r5], #4
    21ca:	4815      	ldr	r0, [pc, #84]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    21cc:	2300      	movs	r3, #0
    21ce:	2210      	movs	r2, #16
    21d0:	f007 fa28 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    21d4:	e7a6      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    21d6:	f855 3b04 	ldr.w	r3, [r5], #4
    21da:	2b01      	cmp	r3, #1
    21dc:	bf07      	ittee	eq
    21de:	2104      	moveq	r1, #4
    21e0:	4640      	moveq	r0, r8
    21e2:	2105      	movne	r1, #5
    21e4:	4638      	movne	r0, r7
    21e6:	f009 ff4b 	bl	c080 <usb_serial_write>
    21ea:	e79b      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
    21ec:	2102      	movs	r1, #2
    21ee:	480f      	ldr	r0, [pc, #60]	; (222c <Logger::logMessage(char*, std::__va_list)+0x198>)
    21f0:	f009 ff46 	bl	c080 <usb_serial_write>
    21f4:	f855 1b04 	ldr.w	r1, [r5], #4
    21f8:	4809      	ldr	r0, [pc, #36]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    21fa:	2300      	movs	r3, #0
    21fc:	2202      	movs	r2, #2
    21fe:	f007 fa11 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    2202:	e78f      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2204:	2025      	movs	r0, #37	; 0x25
    2206:	f009 ffbf 	bl	c188 <usb_serial_putchar>
        continue;
    220a:	e78b      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
  SERIALCONSOLE.println();
    220c:	4804      	ldr	r0, [pc, #16]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    220e:	f007 b9f1 	b.w	95f4 <Print::println()>
    2212:	bf00      	nop
    2214:	00014064 	.word	0x00014064
    2218:	0001405c 	.word	0x0001405c
    221c:	00014058 	.word	0x00014058
    2220:	1fff89fc 	.word	0x1fff89fc
    2224:	00014054 	.word	0x00014054
    2228:	0001404c 	.word	0x0001404c
    222c:	00014050 	.word	0x00014050

00002230 <Logger::console(char*, ...)>:
void Logger::console(char *message, ...) {
    2230:	b40f      	push	{r0, r1, r2, r3}
    2232:	b500      	push	{lr}
    2234:	b083      	sub	sp, #12
    2236:	a904      	add	r1, sp, #16
    2238:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, message);
    223c:	9101      	str	r1, [sp, #4]
  Logger::logMessage(message, args);
    223e:	f7ff ff29 	bl	2094 <Logger::logMessage(char*, std::__va_list)>
}
    2242:	b003      	add	sp, #12
    2244:	f85d eb04 	ldr.w	lr, [sp], #4
    2248:	b004      	add	sp, #16
    224a:	4770      	bx	lr

0000224c <Logger::log(Logger::LogLevel, char*, std::__va_list)>:
void Logger::log(LogLevel level, char *format, va_list args) {
    224c:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    224e:	4b1c      	ldr	r3, [pc, #112]	; (22c0 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x74>)
  lastLogTime = millis();
    2250:	4f1c      	ldr	r7, [pc, #112]	; (22c4 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x78>)
    2252:	681b      	ldr	r3, [r3, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    2254:	b083      	sub	sp, #12
    2256:	4604      	mov	r4, r0
    2258:	9301      	str	r3, [sp, #4]
	return ret;
    225a:	9b01      	ldr	r3, [sp, #4]
  lastLogTime = millis();
    225c:	603b      	str	r3, [r7, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    225e:	460d      	mov	r5, r1
    2260:	4616      	mov	r6, r2
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2262:	4619      	mov	r1, r3
    2264:	220a      	movs	r2, #10
    2266:	2300      	movs	r3, #0
    2268:	4817      	ldr	r0, [pc, #92]	; (22c8 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x7c>)
    226a:	f007 f9db 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    226e:	2103      	movs	r1, #3
    2270:	4816      	ldr	r0, [pc, #88]	; (22cc <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x80>)
    2272:	f009 ff05 	bl	c080 <usb_serial_write>
  switch (level) {
    2276:	2c03      	cmp	r4, #3
    2278:	d807      	bhi.n	228a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    227a:	e8df f004 	tbb	[pc, r4]
    227e:	161b      	.short	0x161b
    2280:	1102      	.short	0x1102
    2282:	4813      	ldr	r0, [pc, #76]	; (22d0 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x84>)
    2284:	2107      	movs	r1, #7
    2286:	f009 fefb 	bl	c080 <usb_serial_write>
    228a:	2102      	movs	r1, #2
    228c:	4811      	ldr	r0, [pc, #68]	; (22d4 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x88>)
    228e:	f009 fef7 	bl	c080 <usb_serial_write>
  logMessage(format, args);
    2292:	4631      	mov	r1, r6
    2294:	4628      	mov	r0, r5
}
    2296:	b003      	add	sp, #12
    2298:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  logMessage(format, args);
    229c:	f7ff befa 	b.w	2094 <Logger::logMessage(char*, std::__va_list)>
    22a0:	2105      	movs	r1, #5
    22a2:	480d      	ldr	r0, [pc, #52]	; (22d8 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x8c>)
    22a4:	f009 feec 	bl	c080 <usb_serial_write>
    22a8:	e7ef      	b.n	228a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    22aa:	2104      	movs	r1, #4
    22ac:	480b      	ldr	r0, [pc, #44]	; (22dc <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x90>)
    22ae:	f009 fee7 	bl	c080 <usb_serial_write>
    22b2:	e7ea      	b.n	228a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    22b4:	2105      	movs	r1, #5
    22b6:	480a      	ldr	r0, [pc, #40]	; (22e0 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x94>)
    22b8:	f009 fee2 	bl	c080 <usb_serial_write>
    22bc:	e7e5      	b.n	228a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    22be:	bf00      	nop
    22c0:	1fffd3c0 	.word	0x1fffd3c0
    22c4:	1fff9190 	.word	0x1fff9190
    22c8:	1fff89fc 	.word	0x1fff89fc
    22cc:	0001406c 	.word	0x0001406c
    22d0:	00014080 	.word	0x00014080
    22d4:	000140b4 	.word	0x000140b4
    22d8:	00014088 	.word	0x00014088
    22dc:	00014078 	.word	0x00014078
    22e0:	00014070 	.word	0x00014070

000022e4 <Logger::debug(char*, ...)>:
void Logger::debug(char *message, ...) {
    22e4:	b40f      	push	{r0, r1, r2, r3}
    22e6:	b500      	push	{lr}
  if (logLevel > Debug)
    22e8:	4b06      	ldr	r3, [pc, #24]	; (2304 <Logger::debug(char*, ...)+0x20>)
    22ea:	7818      	ldrb	r0, [r3, #0]
void Logger::debug(char *message, ...) {
    22ec:	b083      	sub	sp, #12
  if (logLevel > Debug)
    22ee:	b920      	cbnz	r0, 22fa <Logger::debug(char*, ...)+0x16>
  va_start(args, message);
    22f0:	aa05      	add	r2, sp, #20
  Logger::log(Debug, message, args);
    22f2:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    22f4:	9201      	str	r2, [sp, #4]
  Logger::log(Debug, message, args);
    22f6:	f7ff ffa9 	bl	224c <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    22fa:	b003      	add	sp, #12
    22fc:	f85d eb04 	ldr.w	lr, [sp], #4
    2300:	b004      	add	sp, #16
    2302:	4770      	bx	lr
    2304:	1fff8824 	.word	0x1fff8824

00002308 <Logger::info(char*, ...)>:
void Logger::info(char *message, ...) {
    2308:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Info)
    230a:	4b08      	ldr	r3, [pc, #32]	; (232c <Logger::info(char*, ...)+0x24>)
void Logger::info(char *message, ...) {
    230c:	b500      	push	{lr}
  if (logLevel > Info)
    230e:	781b      	ldrb	r3, [r3, #0]
    2310:	2b01      	cmp	r3, #1
void Logger::info(char *message, ...) {
    2312:	b083      	sub	sp, #12
  if (logLevel > Info)
    2314:	d805      	bhi.n	2322 <Logger::info(char*, ...)+0x1a>
  va_start(args, message);
    2316:	aa05      	add	r2, sp, #20
  Logger::log(Info, message, args);
    2318:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    231a:	9201      	str	r2, [sp, #4]
  Logger::log(Info, message, args);
    231c:	2001      	movs	r0, #1
    231e:	f7ff ff95 	bl	224c <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    2322:	b003      	add	sp, #12
    2324:	f85d eb04 	ldr.w	lr, [sp], #4
    2328:	b004      	add	sp, #16
    232a:	4770      	bx	lr
    232c:	1fff8824 	.word	0x1fff8824

00002330 <Logger::error(char*, ...)>:
void Logger::error(char *message, ...) {
    2330:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Error)
    2332:	4b08      	ldr	r3, [pc, #32]	; (2354 <Logger::error(char*, ...)+0x24>)
void Logger::error(char *message, ...) {
    2334:	b500      	push	{lr}
  if (logLevel > Error)
    2336:	781b      	ldrb	r3, [r3, #0]
    2338:	2b03      	cmp	r3, #3
void Logger::error(char *message, ...) {
    233a:	b083      	sub	sp, #12
  if (logLevel > Error)
    233c:	d805      	bhi.n	234a <Logger::error(char*, ...)+0x1a>
  va_start(args, message);
    233e:	aa05      	add	r2, sp, #20
  Logger::log(Error, message, args);
    2340:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    2342:	9201      	str	r2, [sp, #4]
  Logger::log(Error, message, args);
    2344:	2003      	movs	r0, #3
    2346:	f7ff ff81 	bl	224c <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    234a:	b003      	add	sp, #12
    234c:	f85d eb04 	ldr.w	lr, [sp], #4
    2350:	b004      	add	sp, #16
    2352:	4770      	bx	lr
    2354:	1fff8824 	.word	0x1fff8824

00002358 <SerialConsole::SerialConsole()>:

bool printPrettyDisplay;
uint32_t prettyCounter;
int whichDisplay;

SerialConsole::SerialConsole() {
    2358:	b430      	push	{r4, r5}
    //State variables for serial console
    ptrBuffer = 0;
    state = STATE_ROOT_MENU;
    loopcount=0;
    cancel=false;
    printPrettyDisplay = false;
    235a:	4d07      	ldr	r5, [pc, #28]	; (2378 <SerialConsole::SerialConsole()+0x20>)
    prettyCounter = 0;
    235c:	4c07      	ldr	r4, [pc, #28]	; (237c <SerialConsole::SerialConsole()+0x24>)
    whichDisplay = 0;
    235e:	4908      	ldr	r1, [pc, #32]	; (2380 <SerialConsole::SerialConsole()+0x28>)
    ptrBuffer = 0;
    2360:	2300      	movs	r3, #0
    printPrettyDisplay = false;
    2362:	702b      	strb	r3, [r5, #0]
    prettyCounter = 0;
    2364:	6023      	str	r3, [r4, #0]
    ptrBuffer = 0;
    2366:	6503      	str	r3, [r0, #80]	; 0x50
}
    2368:	bc30      	pop	{r4, r5}
    state = STATE_ROOT_MENU;
    236a:	6543      	str	r3, [r0, #84]	; 0x54
    loopcount=0;
    236c:	6583      	str	r3, [r0, #88]	; 0x58
    cancel=false;
    236e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    whichDisplay = 0;
    2372:	600b      	str	r3, [r1, #0]
}
    2374:	4770      	bx	lr
    2376:	bf00      	nop
    2378:	1fff9198 	.word	0x1fff9198
    237c:	1fff9194 	.word	0x1fff9194
    2380:	1fff919c 	.word	0x1fff919c

00002384 <isrCP()>:
  } else {
    return canId;  // not sure if this is really right?
  }
}

void isrCP() {
    2384:	b570      	push	{r4, r5, r6, lr}
  if (digitalRead(IN4) == LOW) {
    2386:	2013      	movs	r0, #19
    2388:	f008 f82c 	bl	a3e4 <digitalRead>
    238c:	b958      	cbnz	r0, 23a6 <isrCP()+0x22>
    duration = micros() - pilottimer;
    238e:	4c11      	ldr	r4, [pc, #68]	; (23d4 <isrCP()+0x50>)
    2390:	f008 f872 	bl	a478 <micros>
    2394:	6822      	ldr	r2, [r4, #0]
    2396:	4b10      	ldr	r3, [pc, #64]	; (23d8 <isrCP()+0x54>)
    2398:	1a80      	subs	r0, r0, r2
    239a:	b280      	uxth	r0, r0
    239c:	8018      	strh	r0, [r3, #0]
    pilottimer = micros();
    239e:	f008 f86b 	bl	a478 <micros>
    23a2:	6020      	str	r0, [r4, #0]
  } else {
    accurlim = ((duration - (micros() - pilottimer + 35)) * 60) / duration;  //pilottimer + "xx" optocoupler decade ms
  }
}  // ******** end of isr CP ********
    23a4:	bd70      	pop	{r4, r5, r6, pc}
    accurlim = ((duration - (micros() - pilottimer + 35)) * 60) / duration;  //pilottimer + "xx" optocoupler decade ms
    23a6:	4d0c      	ldr	r5, [pc, #48]	; (23d8 <isrCP()+0x54>)
    23a8:	4b0a      	ldr	r3, [pc, #40]	; (23d4 <isrCP()+0x50>)
    23aa:	882c      	ldrh	r4, [r5, #0]
    23ac:	681e      	ldr	r6, [r3, #0]
    23ae:	f008 f863 	bl	a478 <micros>
    23b2:	b2a4      	uxth	r4, r4
    23b4:	4434      	add	r4, r6
    23b6:	1a20      	subs	r0, r4, r0
    23b8:	882a      	ldrh	r2, [r5, #0]
    23ba:	4908      	ldr	r1, [pc, #32]	; (23dc <isrCP()+0x58>)
    23bc:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
    23c0:	009b      	lsls	r3, r3, #2
    23c2:	b292      	uxth	r2, r2
    23c4:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
    23c8:	fbb3 f3f2 	udiv	r3, r3, r2
    23cc:	b29b      	uxth	r3, r3
    23ce:	800b      	strh	r3, [r1, #0]
}  // ******** end of isr CP ********
    23d0:	bd70      	pop	{r4, r5, r6, pc}
    23d2:	bf00      	nop
    23d4:	1fffd0d0 	.word	0x1fffd0d0
    23d8:	1fffcfd0 	.word	0x1fffcfd0
    23dc:	1fff91d8 	.word	0x1fff91d8

000023e0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>:
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
	long in_range = in_max - in_min;
	long out_range = out_max - out_min;
    23e0:	f8dd c000 	ldr.w	ip, [sp]
	if (in_range == 0) return out_min + out_range / 2;
    23e4:	1a52      	subs	r2, r2, r1
	long out_range = out_max - out_min;
    23e6:	ebac 0c03 	sub.w	ip, ip, r3
	if (in_range == 0) return out_min + out_range / 2;
    23ea:	d01c      	beq.n	2426 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x46>
	long num = (x - in_min) * out_range;
    23ec:	1a40      	subs	r0, r0, r1
	if (out_range >= 0) {
    23ee:	f1bc 0f00 	cmp.w	ip, #0
	long num = (x - in_min) * out_range;
    23f2:	fb0c f000 	mul.w	r0, ip, r0
		num += in_range / 2;
    23f6:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
	if (out_range >= 0) {
    23fa:	db09      	blt.n	2410 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x30>
		num += in_range / 2;
    23fc:	eb00 0061 	add.w	r0, r0, r1, asr #1
	} else {
		num -= in_range / 2;
	}
	long result = num / in_range + out_min;
	if (out_range >= 0) {
		if (in_range * num < 0) return result - 1;
    2400:	fb00 f102 	mul.w	r1, r0, r2
    2404:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    2406:	fb90 f0f2 	sdiv	r0, r0, r2
    240a:	4418      	add	r0, r3
		if (in_range * num < 0) return result - 1;
    240c:	db10      	blt.n	2430 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x50>
		if (in_range * num >= 0) return result + 1;
	}
	return result;
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
}
    240e:	4770      	bx	lr
		num -= in_range / 2;
    2410:	eba0 0061 	sub.w	r0, r0, r1, asr #1
		if (in_range * num >= 0) return result + 1;
    2414:	fb00 f102 	mul.w	r1, r0, r2
    2418:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    241a:	fb90 f0f2 	sdiv	r0, r0, r2
    241e:	4418      	add	r0, r3
		if (in_range * num >= 0) return result + 1;
    2420:	dbf5      	blt.n	240e <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x2e>
    2422:	3001      	adds	r0, #1
}
    2424:	4770      	bx	lr
	if (in_range == 0) return out_min + out_range / 2;
    2426:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
    242a:	eb03 006c 	add.w	r0, r3, ip, asr #1
    242e:	4770      	bx	lr
		if (in_range * num < 0) return result - 1;
    2430:	3801      	subs	r0, #1
    2432:	4770      	bx	lr

00002434 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    2434:	b538      	push	{r3, r4, r5, lr}
    2436:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2438:	b149      	cbz	r1, 244e <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    243a:	4608      	mov	r0, r1
    243c:	460d      	mov	r5, r1
    243e:	f00b febf 	bl	e1c0 <strlen>
    2442:	6823      	ldr	r3, [r4, #0]
    2444:	4602      	mov	r2, r0
    2446:	685b      	ldr	r3, [r3, #4]
    2448:	4629      	mov	r1, r5
    244a:	4620      	mov	r0, r4
    244c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    244e:	4620      	mov	r0, r4
    2450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2454:	f007 b8ce 	b.w	95f4 <Print::println()>

00002458 <loadSettings()>:
void loadSettings() {
    2458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Logger::console("Resetting to factory defaults");
    245c:	4840      	ldr	r0, [pc, #256]	; (2560 <loadSettings()+0x108>)
  settings.UnderTSetpoint = -10.0f;
    245e:	4e41      	ldr	r6, [pc, #260]	; (2564 <loadSettings()+0x10c>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    2460:	4c41      	ldr	r4, [pc, #260]	; (2568 <loadSettings()+0x110>)
  settings.offset1 = 1750;     //mV mid point of channel 1
    2462:	f8df 9108 	ldr.w	r9, [pc, #264]	; 256c <loadSettings()+0x114>
  settings.convhigh = 58;      // mV/A current sensor high range channel
    2466:	f8df 8108 	ldr.w	r8, [pc, #264]	; 2570 <loadSettings()+0x118>
  settings.UnderDur = 5000;    //ms of allowed undervoltage before throwing open stopping discharge.
    246a:	4f42      	ldr	r7, [pc, #264]	; (2574 <loadSettings()+0x11c>)
  Logger::console("Resetting to factory defaults");
    246c:	f7ff fee0 	bl	2230 <Logger::console(char*, ...)>
  settings.version = EEPROM_VERSION;
    2470:	4b41      	ldr	r3, [pc, #260]	; (2578 <loadSettings()+0x120>)
  settings.OverVSetpoint = 4.2f;
    2472:	4942      	ldr	r1, [pc, #264]	; (257c <loadSettings()+0x124>)
    2474:	60d9      	str	r1, [r3, #12]
  settings.UnderVSetpoint = 3.0f;
    2476:	4942      	ldr	r1, [pc, #264]	; (2580 <loadSettings()+0x128>)
    2478:	6119      	str	r1, [r3, #16]
  settings.ChargeVsetpoint = 4.1f;
    247a:	4942      	ldr	r1, [pc, #264]	; (2584 <loadSettings()+0x12c>)
    247c:	6159      	str	r1, [r3, #20]
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
    247e:	4942      	ldr	r1, [pc, #264]	; (2588 <loadSettings()+0x130>)
    2480:	6259      	str	r1, [r3, #36]	; 0x24
  settings.DischVsetpoint = 3.2f;
    2482:	4942      	ldr	r1, [pc, #264]	; (258c <loadSettings()+0x134>)
    2484:	6199      	str	r1, [r3, #24]
  settings.UnderTSetpoint = -10.0f;
    2486:	62de      	str	r6, [r3, #44]	; 0x2c
  settings.IgnoreVolt = 0.5;  //
    2488:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  settings.ChargeTSetpoint = 0.0f;
    248c:	2600      	movs	r6, #0
  settings.IgnoreVolt = 0.5;  //
    248e:	6459      	str	r1, [r3, #68]	; 0x44
  settings.DeltaVolt = 0.5;    //V of allowable difference between measurements
    2490:	6519      	str	r1, [r3, #80]	; 0x50
  settings.ChargeTSetpoint = 0.0f;
    2492:	631e      	str	r6, [r3, #48]	; 0x30
  settings.chargecurrentmax = 300;  //max charge current in 0.1A
    2494:	f44f 7196 	mov.w	r1, #300	; 0x12c
  settings.DisTSetpoint = 40.0f;
    2498:	4e3d      	ldr	r6, [pc, #244]	; (2590 <loadSettings()+0x138>)
  settings.chargecurrentmax = 300;  //max charge current in 0.1A
    249a:	6619      	str	r1, [r3, #96]	; 0x60
  settings.discurrentmax = 300;     // max discharge current in 0.1A
    249c:	6699      	str	r1, [r3, #104]	; 0x68
  settings.DisTSetpoint = 40.0f;
    249e:	635e      	str	r6, [r3, #52]	; 0x34
  settings.socvolt[0] = 3100;       //Voltage and SOC curve for voltage based SOC calc
    24a0:	f640 411c 	movw	r1, #3100	; 0xc1c
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    24a4:	4e3b      	ldr	r6, [pc, #236]	; (2594 <loadSettings()+0x13c>)
  settings.socvolt[0] = 3100;       //Voltage and SOC curve for voltage based SOC calc
    24a6:	66d9      	str	r1, [r3, #108]	; 0x6c
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    24a8:	639e      	str	r6, [r3, #56]	; 0x38
  settings.socvolt[1] = 10;         //Voltage and SOC curve for voltage based SOC calc
    24aa:	210a      	movs	r1, #10
  settings.canSpeed = 500000;
    24ac:	4e3a      	ldr	r6, [pc, #232]	; (2598 <loadSettings()+0x140>)
  settings.socvolt[1] = 10;         //Voltage and SOC curve for voltage based SOC calc
    24ae:	6719      	str	r1, [r3, #112]	; 0x70
  settings.version = EEPROM_VERSION;
    24b0:	f240 2512 	movw	r5, #530	; 0x212
  settings.socvolt[2] = 4100;       //Voltage and SOC curve for voltage based SOC calc
    24b4:	f241 0104 	movw	r1, #4100	; 0x1004
  settings.canSpeed = 500000;
    24b8:	605e      	str	r6, [r3, #4]
  settings.StoreVsetpoint = 3.8;    // V storage mode charge max
    24ba:	4e38      	ldr	r6, [pc, #224]	; (259c <loadSettings()+0x144>)
  settings.version = EEPROM_VERSION;
    24bc:	801d      	strh	r5, [r3, #0]
  settings.socvolt[2] = 4100;       //Voltage and SOC curve for voltage based SOC calc
    24be:	6759      	str	r1, [r3, #116]	; 0x74
  settings.OverTSetpoint = 65.0f;
    24c0:	4d37      	ldr	r5, [pc, #220]	; (25a0 <loadSettings()+0x148>)
  settings.StoreVsetpoint = 3.8;    // V storage mode charge max
    24c2:	621e      	str	r6, [r3, #32]
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    24c4:	215a      	movs	r1, #90	; 0x5a
  settings.balanceVoltage = 3.9f;
    24c6:	4e37      	ldr	r6, [pc, #220]	; (25a4 <loadSettings()+0x14c>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    24c8:	61dc      	str	r4, [r3, #28]
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    24ca:	2200      	movs	r2, #0
  settings.curcan = LemCAB300;
    24cc:	2001      	movs	r0, #1
  settings.OverTSetpoint = 65.0f;
    24ce:	629d      	str	r5, [r3, #40]	; 0x28
  settings.CellGap = 0.2f;  //max delta between high and low cell
    24d0:	63dc      	str	r4, [r3, #60]	; 0x3c
  settings.CAP = 100;               //battery size in Ah
    24d2:	2564      	movs	r5, #100	; 0x64
  settings.Scells = 12;             //Cells in series
    24d4:	240c      	movs	r4, #12
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    24d6:	6799      	str	r1, [r3, #120]	; 0x78
  settings.balanceVoltage = 3.9f;
    24d8:	649e      	str	r6, [r3, #72]	; 0x48
  settings.chargecurrentend = 50;   //end charge current in 0.1A
    24da:	2132      	movs	r1, #50	; 0x32
  settings.balanceHyst = 0.04f;
    24dc:	4e32      	ldr	r6, [pc, #200]	; (25a8 <loadSettings()+0x150>)
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    24de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    24e2:	f240 2a01 	movw	sl, #513	; 0x201
  settings.curcan = LemCAB300;
    24e6:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
  settings.Scells = 12;             //Cells in series
    24ea:	655c      	str	r4, [r3, #84]	; 0x54
  settings.Pstrings = 1;            // strings in parallel used to divide voltage of pack
    24ec:	6598      	str	r0, [r3, #88]	; 0x58
  settings.chargecurrentend = 50;   //end charge current in 0.1A
    24ee:	6659      	str	r1, [r3, #100]	; 0x64
  settings.balanceHyst = 0.04f;
    24f0:	64de      	str	r6, [r3, #76]	; 0x4c
  settings.CAP = 100;               //battery size in Ah
    24f2:	65dd      	str	r5, [r3, #92]	; 0x5c
  settings.ChargerDirect = 1;  //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    24f4:	4e2d      	ldr	r6, [pc, #180]	; (25ac <loadSettings()+0x154>)
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    24f6:	f8a3 a008 	strh.w	sl, [r3, #8]
  settings.invertcur = 0;           //Invert current sensor direction
    24fa:	67da      	str	r2, [r3, #124]	; 0x7c
  settings.voltsoc = 0;        //SOC purely voltage based
    24fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  settings.ESSmode = 0;        //activate ESS mode
    2500:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  settings.gaugehigh = 255;    //full fuel gauge pwm
    2504:	22ff      	movs	r2, #255	; 0xff
  settings.cursens = 2;
    2506:	2402      	movs	r4, #2
  settings.convlow = 643;      // mV/A current sensor low range channel
    2508:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 25b0 <loadSettings()+0x158>
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    250c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 25b4 <loadSettings()+0x15c>
  settings.ncur = 1;           //number of multiples to use for current measurement
    2510:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
  settings.conthold = 50;      //holding duty cycle for contactor 0-255
    2514:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
  settings.gaugelow = 50;      //empty fuel gauge pwm
    2518:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  settings.gaugehigh = 255;    //full fuel gauge pwm
    251c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  settings.changecur = 20000;  //mA change overpoint
    2520:	f644 6020 	movw	r0, #20000	; 0x4e20
  settings.Pretime = 5000;     //ms of precharge time
    2524:	f241 3188 	movw	r1, #5000	; 0x1388
  settings.Precurrent = 1000;  //ma before closing main contator
    2528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  settings.ChargerDirect = 1;  //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    252c:	f8c3 60c8 	str.w	r6, [r3, #200]	; 0xc8
  settings.offset1 = 1750;     //mV mid point of channel 1
    2530:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
  settings.convhigh = 58;      // mV/A current sensor high range channel
    2534:	f8c3 8090 	str.w	r8, [r3, #144]	; 0x90
  settings.convlow = 643;      // mV/A current sensor low range channel
    2538:	f8c3 e094 	str.w	lr, [r3, #148]	; 0x94
  settings.chargerspd = 100;   //ms per message
    253c:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
  settings.UnderDur = 5000;    //ms of allowed undervoltage before throwing open stopping discharge.
    2540:	f8c3 70c0 	str.w	r7, [r3, #192]	; 0xc0
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    2544:	f8c3 c0c4 	str.w	ip, [r3, #196]	; 0xc4
  settings.cursens = 2;
    2548:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  settings.chargertype = 2;    // 1 - Brusa NLG5xx 2 - Volt charger 0 -No Charger
    254c:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
  settings.changecur = 20000;  //mA change overpoint
    2550:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  settings.Pretime = 5000;     //ms of precharge time
    2554:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
  settings.Precurrent = 1000;  //ma before closing main contator
    2558:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
    255c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2560:	00014090 	.word	0x00014090
    2564:	c1200000 	.word	0xc1200000
    2568:	3e4ccccd 	.word	0x3e4ccccd
    256c:	06d606d6 	.word	0x06d606d6
    2570:	42680000 	.word	0x42680000
    2574:	00051388 	.word	0x00051388
    2578:	1fffd0d8 	.word	0x1fffd0d8
    257c:	40866666 	.word	0x40866666
    2580:	40400000 	.word	0x40400000
    2584:	40833333 	.word	0x40833333
    2588:	3dcccccd 	.word	0x3dcccccd
    258c:	404ccccd 	.word	0x404ccccd
    2590:	42200000 	.word	0x42200000
    2594:	40a00000 	.word	0x40a00000
    2598:	0007a120 	.word	0x0007a120
    259c:	40733333 	.word	0x40733333
    25a0:	42820000 	.word	0x42820000
    25a4:	4079999a 	.word	0x4079999a
    25a8:	3d23d70a 	.word	0x3d23d70a
    25ac:	01f40101 	.word	0x01f40101
    25b0:	4420c000 	.word	0x4420c000
    25b4:	3e99999a 	.word	0x3e99999a

000025b8 <alarmupdate()>:
void alarmupdate() {
    25b8:	b570      	push	{r4, r5, r6, lr}
  alarm[0] = 0x00;
    25ba:	4d45      	ldr	r5, [pc, #276]	; (26d0 <alarmupdate()+0x118>)
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    25bc:	4c45      	ldr	r4, [pc, #276]	; (26d4 <alarmupdate()+0x11c>)
    25be:	4846      	ldr	r0, [pc, #280]	; (26d8 <alarmupdate()+0x120>)
    25c0:	68e6      	ldr	r6, [r4, #12]
  alarm[0] = 0x00;
    25c2:	2300      	movs	r3, #0
    25c4:	702b      	strb	r3, [r5, #0]
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    25c6:	f7ff f9d7 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    25ca:	4601      	mov	r1, r0
    25cc:	4630      	mov	r0, r6
    25ce:	f00a fdd5 	bl	d17c <__aeabi_fcmplt>
    25d2:	b108      	cbz	r0, 25d8 <alarmupdate()+0x20>
    alarm[0] = 0x04;
    25d4:	2304      	movs	r3, #4
    25d6:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    25d8:	483f      	ldr	r0, [pc, #252]	; (26d8 <alarmupdate()+0x120>)
    25da:	f7ff f9a7 	bl	192c <BMSModuleManager::getLowCellVolt()>
    25de:	6921      	ldr	r1, [r4, #16]
    25e0:	f00a fdcc 	bl	d17c <__aeabi_fcmplt>
    25e4:	b118      	cbz	r0, 25ee <alarmupdate()+0x36>
    alarm[0] |= 0x10;
    25e6:	782b      	ldrb	r3, [r5, #0]
    25e8:	f043 0310 	orr.w	r3, r3, #16
    25ec:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > settings.OverTSetpoint) {
    25ee:	483a      	ldr	r0, [pc, #232]	; (26d8 <alarmupdate()+0x120>)
    25f0:	f7ff fa72 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    25f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    25f6:	f00a fddf 	bl	d1b8 <__aeabi_fcmpgt>
    25fa:	b118      	cbz	r0, 2604 <alarmupdate()+0x4c>
    alarm[0] |= 0x40;
    25fc:	782b      	ldrb	r3, [r5, #0]
    25fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2602:	702b      	strb	r3, [r5, #0]
  alarm[1] = 0;
    2604:	2300      	movs	r3, #0
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    2606:	4834      	ldr	r0, [pc, #208]	; (26d8 <alarmupdate()+0x120>)
  alarm[1] = 0;
    2608:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    260a:	f7ff fa67 	bl	1adc <BMSModuleManager::getLowTemperature()>
    260e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    2610:	f00a fdb4 	bl	d17c <__aeabi_fcmplt>
    2614:	b108      	cbz	r0, 261a <alarmupdate()+0x62>
    alarm[1] = 0x01;
    2616:	2301      	movs	r3, #1
    2618:	706b      	strb	r3, [r5, #1]
  alarm[3] = 0;
    261a:	2300      	movs	r3, #0
    261c:	70eb      	strb	r3, [r5, #3]
  if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    261e:	482e      	ldr	r0, [pc, #184]	; (26d8 <alarmupdate()+0x120>)
    2620:	f7ff f9aa 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    2624:	4606      	mov	r6, r0
    2626:	482c      	ldr	r0, [pc, #176]	; (26d8 <alarmupdate()+0x120>)
    2628:	f7ff f980 	bl	192c <BMSModuleManager::getLowCellVolt()>
    262c:	4601      	mov	r1, r0
    262e:	4630      	mov	r0, r6
    2630:	f00a fafc 	bl	cc2c <__aeabi_fsub>
    2634:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    2636:	f00a fdbf 	bl	d1b8 <__aeabi_fcmpgt>
    263a:	b108      	cbz	r0, 2640 <alarmupdate()+0x88>
    alarm[3] = 0x01;
    263c:	2301      	movs	r3, #1
    263e:	70eb      	strb	r3, [r5, #3]
  warning[0] = 0;
    2640:	4d26      	ldr	r5, [pc, #152]	; (26dc <alarmupdate()+0x124>)
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    2642:	4825      	ldr	r0, [pc, #148]	; (26d8 <alarmupdate()+0x120>)
  warning[0] = 0;
    2644:	2300      	movs	r3, #0
    2646:	702b      	strb	r3, [r5, #0]
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    2648:	f7ff f996 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    264c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    264e:	4606      	mov	r6, r0
    2650:	68e0      	ldr	r0, [r4, #12]
    2652:	f00a faeb 	bl	cc2c <__aeabi_fsub>
    2656:	4601      	mov	r1, r0
    2658:	4630      	mov	r0, r6
    265a:	f00a fdad 	bl	d1b8 <__aeabi_fcmpgt>
    265e:	b108      	cbz	r0, 2664 <alarmupdate()+0xac>
    warning[0] = 0x04;
    2660:	2304      	movs	r3, #4
    2662:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < (settings.UnderVSetpoint + settings.WarnOff)) {
    2664:	481c      	ldr	r0, [pc, #112]	; (26d8 <alarmupdate()+0x120>)
    2666:	f7ff f961 	bl	192c <BMSModuleManager::getLowCellVolt()>
    266a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    266c:	4606      	mov	r6, r0
    266e:	6920      	ldr	r0, [r4, #16]
    2670:	f00a fade 	bl	cc30 <__addsf3>
    2674:	4601      	mov	r1, r0
    2676:	4630      	mov	r0, r6
    2678:	f00a fd80 	bl	d17c <__aeabi_fcmplt>
    267c:	b118      	cbz	r0, 2686 <alarmupdate()+0xce>
    warning[0] |= 0x10;
    267e:	782b      	ldrb	r3, [r5, #0]
    2680:	f043 0310 	orr.w	r3, r3, #16
    2684:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > (settings.OverTSetpoint - settings.WarnToff)) {
    2686:	4814      	ldr	r0, [pc, #80]	; (26d8 <alarmupdate()+0x120>)
    2688:	f7ff fa26 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    268c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    268e:	4606      	mov	r6, r0
    2690:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2692:	f00a facb 	bl	cc2c <__aeabi_fsub>
    2696:	4601      	mov	r1, r0
    2698:	4630      	mov	r0, r6
    269a:	f00a fd8d 	bl	d1b8 <__aeabi_fcmpgt>
    269e:	b118      	cbz	r0, 26a8 <alarmupdate()+0xf0>
    warning[0] |= 0x40;
    26a0:	782b      	ldrb	r3, [r5, #0]
    26a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    26a6:	702b      	strb	r3, [r5, #0]
  warning[1] = 0;
    26a8:	2300      	movs	r3, #0
    26aa:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < (settings.UnderTSetpoint + settings.WarnToff)) {
    26ac:	480a      	ldr	r0, [pc, #40]	; (26d8 <alarmupdate()+0x120>)
    26ae:	f7ff fa15 	bl	1adc <BMSModuleManager::getLowTemperature()>
    26b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    26b4:	4603      	mov	r3, r0
    26b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    26b8:	461c      	mov	r4, r3
    26ba:	f00a fab9 	bl	cc30 <__addsf3>
    26be:	4601      	mov	r1, r0
    26c0:	4620      	mov	r0, r4
    26c2:	f00a fd5b 	bl	d17c <__aeabi_fcmplt>
    26c6:	b108      	cbz	r0, 26cc <alarmupdate()+0x114>
    warning[1] = 0x01;
    26c8:	2301      	movs	r3, #1
    26ca:	706b      	strb	r3, [r5, #1]
}
    26cc:	bd70      	pop	{r4, r5, r6, pc}
    26ce:	bf00      	nop
    26d0:	1fff91e0 	.word	0x1fff91e0
    26d4:	1fffd0d8 	.word	0x1fffd0d8
    26d8:	1fff91f0 	.word	0x1fff91f0
    26dc:	1fffd1c4 	.word	0x1fffd1c4

000026e0 <gaugeupdate()>:
void gaugeupdate() {
    26e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (gaugedebug == 1) {
    26e4:	4c7f      	ldr	r4, [pc, #508]	; (28e4 <gaugeupdate()+0x204>)
    26e6:	6823      	ldr	r3, [r4, #0]
    26e8:	2b01      	cmp	r3, #1
void gaugeupdate() {
    26ea:	b082      	sub	sp, #8
  if (gaugedebug == 1) {
    26ec:	d049      	beq.n	2782 <gaugeupdate()+0xa2>
  if (gaugedebug == 2) {
    26ee:	2b02      	cmp	r3, #2
    26f0:	f000 80c3 	beq.w	287a <gaugeupdate()+0x19a>
  if (gaugedebug == 3) {
    26f4:	2b03      	cmp	r3, #3
    26f6:	d003      	beq.n	2700 <gaugeupdate()+0x20>
  if (gaugedebug == 0) {
    26f8:	b32b      	cbz	r3, 2746 <gaugeupdate()+0x66>
}
    26fa:	b002      	add	sp, #8
    26fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SOCtest = 1000;
    2700:	4b79      	ldr	r3, [pc, #484]	; (28e8 <gaugeupdate()+0x208>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2702:	4e7a      	ldr	r6, [pc, #488]	; (28ec <gaugeupdate()+0x20c>)
    SOCtest = 1000;
    2704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2708:	601a      	str	r2, [r3, #0]
// when the input is a float or double, do all math using the input's type
template <class T, class A, class B, class C, class D>
T map(T x, A in_min, B in_max, C out_min, D out_max, typename std::enable_if<std::is_floating_point<T>::value >::type* = 0)
{
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    270a:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    270e:	f00a fb43 	bl	cd98 <__aeabi_i2f>
    2712:	4605      	mov	r5, r0
    2714:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    2718:	f00a fb3e 	bl	cd98 <__aeabi_i2f>
    271c:	4629      	mov	r1, r5
    271e:	f00a fa85 	bl	cc2c <__aeabi_fsub>
    2722:	4973      	ldr	r1, [pc, #460]	; (28f0 <gaugeupdate()+0x210>)
    2724:	f00a fb8c 	bl	ce40 <__aeabi_fmul>
    2728:	4971      	ldr	r1, [pc, #452]	; (28f0 <gaugeupdate()+0x210>)
    272a:	f00a fc3d 	bl	cfa8 <__aeabi_fdiv>
    272e:	4629      	mov	r1, r5
    2730:	f00a fa7e 	bl	cc30 <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2734:	f00a fd4a 	bl	d1cc <__aeabi_f2iz>
    2738:	4601      	mov	r1, r0
    273a:	2006      	movs	r0, #6
    273c:	f007 fcb0 	bl	a0a0 <analogWrite>
  if (gaugedebug == 0) {
    2740:	6823      	ldr	r3, [r4, #0]
    2742:	2b00      	cmp	r3, #0
    2744:	d1d9      	bne.n	26fa <gaugeupdate()+0x1a>
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    2746:	4b69      	ldr	r3, [pc, #420]	; (28ec <gaugeupdate()+0x20c>)
    2748:	486a      	ldr	r0, [pc, #424]	; (28f4 <gaugeupdate()+0x214>)
    274a:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
	long out_range = out_max - out_min;
    274e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
	long num = (x - in_min) * out_range;
    2752:	6803      	ldr	r3, [r0, #0]
	long result = num / in_range + out_min;
    2754:	4868      	ldr	r0, [pc, #416]	; (28f8 <gaugeupdate()+0x218>)
	long out_range = out_max - out_min;
    2756:	1a52      	subs	r2, r2, r1
	if (out_range >= 0) {
    2758:	2a00      	cmp	r2, #0
	long num = (x - in_min) * out_range;
    275a:	fb02 f303 	mul.w	r3, r2, r3
	if (out_range >= 0) {
    275e:	f2c0 80b2 	blt.w	28c6 <gaugeupdate()+0x1e6>
		num += in_range / 2;
    2762:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
    2764:	fb80 2003 	smull	r2, r0, r0, r3
    2768:	17da      	asrs	r2, r3, #31
    276a:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num < 0) return result - 1;
    276e:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    2770:	4411      	add	r1, r2
		if (in_range * num < 0) return result - 1;
    2772:	f2c0 80b4 	blt.w	28de <gaugeupdate()+0x1fe>
    2776:	2006      	movs	r0, #6
}
    2778:	b002      	add	sp, #8
    277a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    277e:	f007 bc8f 	b.w	a0a0 <analogWrite>
    SOCtest = SOCtest + 10;
    2782:	4f59      	ldr	r7, [pc, #356]	; (28e8 <gaugeupdate()+0x208>)
    2784:	6838      	ldr	r0, [r7, #0]
    2786:	300a      	adds	r0, #10
    if (SOCtest > 1000) {
    2788:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    278c:	f300 8096 	bgt.w	28bc <gaugeupdate()+0x1dc>
    SOCtest = SOCtest + 10;
    2790:	6038      	str	r0, [r7, #0]
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2792:	f00a fb01 	bl	cd98 <__aeabi_i2f>
    2796:	4959      	ldr	r1, [pc, #356]	; (28fc <gaugeupdate()+0x21c>)
    2798:	f00a fb52 	bl	ce40 <__aeabi_fmul>
    279c:	4680      	mov	r8, r0
    279e:	4e53      	ldr	r6, [pc, #332]	; (28ec <gaugeupdate()+0x20c>)
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    27a0:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    27a4:	f00a faf8 	bl	cd98 <__aeabi_i2f>
    27a8:	4605      	mov	r5, r0
    27aa:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    27ae:	f00a faf3 	bl	cd98 <__aeabi_i2f>
    27b2:	4629      	mov	r1, r5
    27b4:	f00a fa3a 	bl	cc2c <__aeabi_fsub>
    27b8:	4641      	mov	r1, r8
    27ba:	f00a fb41 	bl	ce40 <__aeabi_fmul>
    27be:	494c      	ldr	r1, [pc, #304]	; (28f0 <gaugeupdate()+0x210>)
    27c0:	f00a fbf2 	bl	cfa8 <__aeabi_fdiv>
    27c4:	4629      	mov	r1, r5
    27c6:	f00a fa33 	bl	cc30 <__addsf3>
    27ca:	f00a fcff 	bl	d1cc <__aeabi_f2iz>
    27ce:	4601      	mov	r1, r0
    27d0:	2006      	movs	r0, #6
    27d2:	f007 fc65 	bl	a0a0 <analogWrite>
    27d6:	2102      	movs	r1, #2
    27d8:	4849      	ldr	r0, [pc, #292]	; (2900 <gaugeupdate()+0x220>)
    27da:	f009 fc51 	bl	c080 <usb_serial_write>
    27de:	4849      	ldr	r0, [pc, #292]	; (2904 <gaugeupdate()+0x224>)
    27e0:	f006 ff08 	bl	95f4 <Print::println()>
    27e4:	2106      	movs	r1, #6
    27e6:	4848      	ldr	r0, [pc, #288]	; (2908 <gaugeupdate()+0x228>)
    27e8:	f009 fc4a 	bl	c080 <usb_serial_write>
    SERIALCONSOLE.print(SOCtest * 0.1);
    27ec:	6838      	ldr	r0, [r7, #0]
    27ee:	f00a fad3 	bl	cd98 <__aeabi_i2f>
    27f2:	4942      	ldr	r1, [pc, #264]	; (28fc <gaugeupdate()+0x21c>)
    27f4:	f00a fb24 	bl	ce40 <__aeabi_fmul>
    27f8:	f00a f8fe 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    27fc:	f04f 0802 	mov.w	r8, #2
    2800:	4602      	mov	r2, r0
    2802:	460b      	mov	r3, r1
    2804:	483f      	ldr	r0, [pc, #252]	; (2904 <gaugeupdate()+0x224>)
    2806:	f8cd 8000 	str.w	r8, [sp]
    280a:	f006 ff15 	bl	9638 <Print::printFloat(double, unsigned char)>
    280e:	210d      	movs	r1, #13
    2810:	483e      	ldr	r0, [pc, #248]	; (290c <gaugeupdate()+0x22c>)
    2812:	f009 fc35 	bl	c080 <usb_serial_write>
    2816:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    281a:	f00a fabd 	bl	cd98 <__aeabi_i2f>
    281e:	4605      	mov	r5, r0
    SERIALCONSOLE.print(map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2820:	6838      	ldr	r0, [r7, #0]
    2822:	f00a fab9 	bl	cd98 <__aeabi_i2f>
    2826:	4935      	ldr	r1, [pc, #212]	; (28fc <gaugeupdate()+0x21c>)
    2828:	f00a fb0a 	bl	ce40 <__aeabi_fmul>
    282c:	4603      	mov	r3, r0
    282e:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    2832:	461e      	mov	r6, r3
    2834:	f00a fab0 	bl	cd98 <__aeabi_i2f>
    2838:	4629      	mov	r1, r5
    283a:	f00a f9f7 	bl	cc2c <__aeabi_fsub>
    283e:	4601      	mov	r1, r0
    2840:	4630      	mov	r0, r6
    2842:	f00a fafd 	bl	ce40 <__aeabi_fmul>
    2846:	492a      	ldr	r1, [pc, #168]	; (28f0 <gaugeupdate()+0x210>)
    2848:	f00a fbae 	bl	cfa8 <__aeabi_fdiv>
    284c:	4629      	mov	r1, r5
    284e:	f00a f9ef 	bl	cc30 <__addsf3>
    2852:	f00a f8d1 	bl	c9f8 <__aeabi_f2d>
    2856:	f8cd 8000 	str.w	r8, [sp]
    285a:	460b      	mov	r3, r1
    285c:	4602      	mov	r2, r0
    285e:	4829      	ldr	r0, [pc, #164]	; (2904 <gaugeupdate()+0x224>)
    2860:	f006 feea 	bl	9638 <Print::printFloat(double, unsigned char)>
    2864:	4641      	mov	r1, r8
    2866:	4826      	ldr	r0, [pc, #152]	; (2900 <gaugeupdate()+0x220>)
    2868:	f009 fc0a 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    286c:	4825      	ldr	r0, [pc, #148]	; (2904 <gaugeupdate()+0x224>)
    286e:	f006 fec1 	bl	95f4 <Print::println()>
  if (gaugedebug == 2) {
    2872:	6823      	ldr	r3, [r4, #0]
    2874:	2b02      	cmp	r3, #2
    2876:	f47f af3d 	bne.w	26f4 <gaugeupdate()+0x14>
    SOCtest = 0;
    287a:	4b1b      	ldr	r3, [pc, #108]	; (28e8 <gaugeupdate()+0x208>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    287c:	4e1b      	ldr	r6, [pc, #108]	; (28ec <gaugeupdate()+0x20c>)
    SOCtest = 0;
    287e:	2200      	movs	r2, #0
    2880:	601a      	str	r2, [r3, #0]
    2882:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    2886:	f00a fa87 	bl	cd98 <__aeabi_i2f>
    288a:	4605      	mov	r5, r0
    288c:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    2890:	f00a fa82 	bl	cd98 <__aeabi_i2f>
    2894:	4629      	mov	r1, r5
    2896:	f00a f9c9 	bl	cc2c <__aeabi_fsub>
    289a:	2100      	movs	r1, #0
    289c:	f00a fad0 	bl	ce40 <__aeabi_fmul>
    28a0:	4913      	ldr	r1, [pc, #76]	; (28f0 <gaugeupdate()+0x210>)
    28a2:	f00a fb81 	bl	cfa8 <__aeabi_fdiv>
    28a6:	4629      	mov	r1, r5
    28a8:	f00a f9c2 	bl	cc30 <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    28ac:	f00a fc8e 	bl	d1cc <__aeabi_f2iz>
    28b0:	4601      	mov	r1, r0
    28b2:	2006      	movs	r0, #6
    28b4:	f007 fbf4 	bl	a0a0 <analogWrite>
  if (gaugedebug == 3) {
    28b8:	6823      	ldr	r3, [r4, #0]
    28ba:	e71b      	b.n	26f4 <gaugeupdate()+0x14>
      SOCtest = 0;
    28bc:	2300      	movs	r3, #0
    28be:	f04f 0800 	mov.w	r8, #0
    28c2:	603b      	str	r3, [r7, #0]
    28c4:	e76b      	b.n	279e <gaugeupdate()+0xbe>
		num -= in_range / 2;
    28c6:	3b32      	subs	r3, #50	; 0x32
	long result = num / in_range + out_min;
    28c8:	fb80 2003 	smull	r2, r0, r0, r3
    28cc:	17da      	asrs	r2, r3, #31
    28ce:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num >= 0) return result + 1;
    28d2:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    28d4:	4411      	add	r1, r2
		if (in_range * num >= 0) return result + 1;
    28d6:	f6ff af4e 	blt.w	2776 <gaugeupdate()+0x96>
    28da:	3101      	adds	r1, #1
    28dc:	e74b      	b.n	2776 <gaugeupdate()+0x96>
		if (in_range * num < 0) return result - 1;
    28de:	3901      	subs	r1, #1
    28e0:	e749      	b.n	2776 <gaugeupdate()+0x96>
    28e2:	bf00      	nop
    28e4:	1fffcfdc 	.word	0x1fffcfdc
    28e8:	1fff91d0 	.word	0x1fff91d0
    28ec:	1fffd0d8 	.word	0x1fffd0d8
    28f0:	42c80000 	.word	0x42c80000
    28f4:	1fff8828 	.word	0x1fff8828
    28f8:	51eb851f 	.word	0x51eb851f
    28fc:	3dcccccd 	.word	0x3dcccccd
    2900:	00014ea8 	.word	0x00014ea8
    2904:	1fff89fc 	.word	0x1fff89fc
    2908:	000140b0 	.word	0x000140b0
    290c:	000140b8 	.word	0x000140b8

00002910 <printbmsstat()>:
void printbmsstat() {
    2910:	b570      	push	{r4, r5, r6, lr}
  SERIALCONSOLE.println();
    2912:	48b2      	ldr	r0, [pc, #712]	; (2bdc <printbmsstat()+0x2cc>)
  if (settings.ESSmode == 1) {
    2914:	4cb2      	ldr	r4, [pc, #712]	; (2be0 <printbmsstat()+0x2d0>)
  SERIALCONSOLE.println();
    2916:	f006 fe6d 	bl	95f4 <Print::println()>
  SERIALCONSOLE.println();
    291a:	48b0      	ldr	r0, [pc, #704]	; (2bdc <printbmsstat()+0x2cc>)
    291c:	f006 fe6a 	bl	95f4 <Print::println()>
  SERIALCONSOLE.println();
    2920:	48ae      	ldr	r0, [pc, #696]	; (2bdc <printbmsstat()+0x2cc>)
    2922:	f006 fe67 	bl	95f4 <Print::println()>
    2926:	48af      	ldr	r0, [pc, #700]	; (2be4 <printbmsstat()+0x2d4>)
    2928:	210d      	movs	r1, #13
    292a:	f009 fba9 	bl	c080 <usb_serial_write>
  if (settings.ESSmode == 1) {
    292e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    2932:	2b01      	cmp	r3, #1
    2934:	d011      	beq.n	295a <printbmsstat()+0x4a>
    SERIALCONSOLE.print(bmsstatus);
    2936:	4cac      	ldr	r4, [pc, #688]	; (2be8 <printbmsstat()+0x2d8>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2938:	48a8      	ldr	r0, [pc, #672]	; (2bdc <printbmsstat()+0x2cc>)
    293a:	7821      	ldrb	r1, [r4, #0]
    293c:	2300      	movs	r3, #0
    293e:	220a      	movs	r2, #10
    2940:	f006 fe70 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    switch (bmsstatus) {
    2944:	7823      	ldrb	r3, [r4, #0]
    2946:	2b05      	cmp	r3, #5
    2948:	d857      	bhi.n	29fa <printbmsstat()+0xea>
    294a:	e8df f013 	tbh	[pc, r3, lsl #1]
    294e:	0106      	.short	0x0106
    2950:	0110010b 	.word	0x0110010b
    2954:	011a0115 	.word	0x011a0115
    2958:	0101      	.short	0x0101
    295a:	2109      	movs	r1, #9
    295c:	48a3      	ldr	r0, [pc, #652]	; (2bec <printbmsstat()+0x2dc>)
    295e:	f009 fb8f 	bl	c080 <usb_serial_write>
    if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    2962:	48a3      	ldr	r0, [pc, #652]	; (2bf0 <printbmsstat()+0x2e0>)
    2964:	f7fe ffe2 	bl	192c <BMSModuleManager::getLowCellVolt()>
    2968:	6921      	ldr	r1, [r4, #16]
    296a:	f00a fc07 	bl	d17c <__aeabi_fcmplt>
    296e:	2800      	cmp	r0, #0
    2970:	f040 812e 	bne.w	2bd0 <printbmsstat()+0x2c0>
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    2974:	489e      	ldr	r0, [pc, #632]	; (2bf0 <printbmsstat()+0x2e0>)
    2976:	f7fe ffff 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    297a:	68e1      	ldr	r1, [r4, #12]
    297c:	f00a fc1c 	bl	d1b8 <__aeabi_fcmpgt>
    2980:	2800      	cmp	r0, #0
    2982:	f040 816c 	bne.w	2c5e <printbmsstat()+0x34e>
    if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    2986:	489a      	ldr	r0, [pc, #616]	; (2bf0 <printbmsstat()+0x2e0>)
    2988:	f7fe fff6 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    298c:	4605      	mov	r5, r0
    298e:	4898      	ldr	r0, [pc, #608]	; (2bf0 <printbmsstat()+0x2e0>)
    2990:	f7fe ffcc 	bl	192c <BMSModuleManager::getLowCellVolt()>
    2994:	4601      	mov	r1, r0
    2996:	4628      	mov	r0, r5
    2998:	f00a f948 	bl	cc2c <__aeabi_fsub>
    299c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    299e:	f00a fc0b 	bl	d1b8 <__aeabi_fcmpgt>
    29a2:	2800      	cmp	r0, #0
    29a4:	f040 8156 	bne.w	2c54 <printbmsstat()+0x344>
    if (bms.getAvgTemperature() > settings.OverTSetpoint) {
    29a8:	4891      	ldr	r0, [pc, #580]	; (2bf0 <printbmsstat()+0x2e0>)
    29aa:	f7ff f837 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    29ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    29b0:	f00a fc02 	bl	d1b8 <__aeabi_fcmpgt>
    29b4:	2800      	cmp	r0, #0
    29b6:	f040 815c 	bne.w	2c72 <printbmsstat()+0x362>
    if (bms.getAvgTemperature() < settings.UnderTSetpoint) {
    29ba:	488d      	ldr	r0, [pc, #564]	; (2bf0 <printbmsstat()+0x2e0>)
    29bc:	f7ff f82e 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    29c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    29c2:	f00a fbdb 	bl	d17c <__aeabi_fcmplt>
    29c6:	2800      	cmp	r0, #0
    29c8:	f040 814e 	bne.w	2c68 <printbmsstat()+0x358>
    if (storagemode == 1) {
    29cc:	4b89      	ldr	r3, [pc, #548]	; (2bf4 <printbmsstat()+0x2e4>)
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    29ce:	4888      	ldr	r0, [pc, #544]	; (2bf0 <printbmsstat()+0x2e0>)
    if (storagemode == 1) {
    29d0:	681b      	ldr	r3, [r3, #0]
    29d2:	2b01      	cmp	r3, #1
    29d4:	f000 80ec 	beq.w	2bb0 <printbmsstat()+0x2a0>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    29d8:	f7fe ffa8 	bl	192c <BMSModuleManager::getLowCellVolt()>
    29dc:	6921      	ldr	r1, [r4, #16]
    29de:	f00a fbeb 	bl	d1b8 <__aeabi_fcmpgt>
    29e2:	2800      	cmp	r0, #0
    29e4:	f040 80d2 	bne.w	2b8c <printbmsstat()+0x27c>
    29e8:	2107      	movs	r1, #7
    29ea:	4883      	ldr	r0, [pc, #524]	; (2bf8 <printbmsstat()+0x2e8>)
    29ec:	f009 fb48 	bl	c080 <usb_serial_write>
    SERIALCONSOLE.print(ErrorReason);
    29f0:	4b82      	ldr	r3, [pc, #520]	; (2bfc <printbmsstat()+0x2ec>)
	size_t print(int n)				{ return print((long)n); }
    29f2:	487a      	ldr	r0, [pc, #488]	; (2bdc <printbmsstat()+0x2cc>)
    29f4:	6819      	ldr	r1, [r3, #0]
    29f6:	f006 fdf5 	bl	95e4 <Print::print(long)>
    29fa:	2102      	movs	r1, #2
    29fc:	4880      	ldr	r0, [pc, #512]	; (2c00 <printbmsstat()+0x2f0>)
    29fe:	f009 fb3f 	bl	c080 <usb_serial_write>
  if (digitalRead(IN3) == HIGH) {
    2a02:	2012      	movs	r0, #18
    2a04:	f007 fcee 	bl	a3e4 <digitalRead>
    2a08:	2801      	cmp	r0, #1
    2a0a:	f000 809c 	beq.w	2b46 <printbmsstat()+0x236>
  if (digitalRead(IN1) == HIGH) {
    2a0e:	2011      	movs	r0, #17
    2a10:	f007 fce8 	bl	a3e4 <digitalRead>
    2a14:	2801      	cmp	r0, #1
    2a16:	f000 8091 	beq.w	2b3c <printbmsstat()+0x22c>
  if (balancecells == 1) {
    2a1a:	4b7a      	ldr	r3, [pc, #488]	; (2c04 <printbmsstat()+0x2f4>)
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	2b01      	cmp	r3, #1
    2a20:	f000 8087 	beq.w	2b32 <printbmsstat()+0x222>
    2a24:	2102      	movs	r1, #2
    2a26:	4876      	ldr	r0, [pc, #472]	; (2c00 <printbmsstat()+0x2f0>)
  if ((contstat & 1) == 1) {
    2a28:	4c77      	ldr	r4, [pc, #476]	; (2c08 <printbmsstat()+0x2f8>)
    2a2a:	f009 fb29 	bl	c080 <usb_serial_write>
  SERIALCONSOLE.print(cellspresent);
    2a2e:	4b77      	ldr	r3, [pc, #476]	; (2c0c <printbmsstat()+0x2fc>)
    2a30:	486a      	ldr	r0, [pc, #424]	; (2bdc <printbmsstat()+0x2cc>)
    2a32:	6819      	ldr	r1, [r3, #0]
    2a34:	f006 fdd6 	bl	95e4 <Print::print(long)>
  SERIALCONSOLE.println();
    2a38:	4868      	ldr	r0, [pc, #416]	; (2bdc <printbmsstat()+0x2cc>)
    2a3a:	f006 fddb 	bl	95f4 <Print::println()>
    2a3e:	2104      	movs	r1, #4
    2a40:	4873      	ldr	r0, [pc, #460]	; (2c10 <printbmsstat()+0x300>)
    2a42:	f009 fb1d 	bl	c080 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(OUT1));
    2a46:	200b      	movs	r0, #11
    2a48:	f007 fccc 	bl	a3e4 <digitalRead>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a4c:	2300      	movs	r3, #0
    2a4e:	4601      	mov	r1, r0
    2a50:	220a      	movs	r2, #10
    2a52:	4862      	ldr	r0, [pc, #392]	; (2bdc <printbmsstat()+0x2cc>)
    2a54:	f006 fde6 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT2));
    2a58:	200c      	movs	r0, #12
    2a5a:	f007 fcc3 	bl	a3e4 <digitalRead>
    2a5e:	2300      	movs	r3, #0
    2a60:	4601      	mov	r1, r0
    2a62:	220a      	movs	r2, #10
    2a64:	485d      	ldr	r0, [pc, #372]	; (2bdc <printbmsstat()+0x2cc>)
    2a66:	f006 fddd 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT3));
    2a6a:	2014      	movs	r0, #20
    2a6c:	f007 fcba 	bl	a3e4 <digitalRead>
    2a70:	2300      	movs	r3, #0
    2a72:	4601      	mov	r1, r0
    2a74:	220a      	movs	r2, #10
    2a76:	4859      	ldr	r0, [pc, #356]	; (2bdc <printbmsstat()+0x2cc>)
    2a78:	f006 fdd4 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT4));
    2a7c:	2015      	movs	r0, #21
    2a7e:	f007 fcb1 	bl	a3e4 <digitalRead>
    2a82:	220a      	movs	r2, #10
    2a84:	4601      	mov	r1, r0
    2a86:	2300      	movs	r3, #0
    2a88:	4854      	ldr	r0, [pc, #336]	; (2bdc <printbmsstat()+0x2cc>)
    2a8a:	f006 fdcb 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2a8e:	2106      	movs	r1, #6
    2a90:	4860      	ldr	r0, [pc, #384]	; (2c14 <printbmsstat()+0x304>)
    2a92:	f009 faf5 	bl	c080 <usb_serial_write>
  if ((contstat & 1) == 1) {
    2a96:	6823      	ldr	r3, [r4, #0]
    2a98:	07d8      	lsls	r0, r3, #31
    2a9a:	bf4b      	itete	mi
    2a9c:	2101      	movmi	r1, #1
    2a9e:	2101      	movpl	r1, #1
    2aa0:	485d      	ldrmi	r0, [pc, #372]	; (2c18 <printbmsstat()+0x308>)
    2aa2:	485e      	ldrpl	r0, [pc, #376]	; (2c1c <printbmsstat()+0x30c>)
    2aa4:	f009 faec 	bl	c080 <usb_serial_write>
  if ((contstat & 2) == 2) {
    2aa8:	6823      	ldr	r3, [r4, #0]
    2aaa:	0799      	lsls	r1, r3, #30
    2aac:	bf4b      	itete	mi
    2aae:	2101      	movmi	r1, #1
    2ab0:	2101      	movpl	r1, #1
    2ab2:	4859      	ldrmi	r0, [pc, #356]	; (2c18 <printbmsstat()+0x308>)
    2ab4:	4859      	ldrpl	r0, [pc, #356]	; (2c1c <printbmsstat()+0x30c>)
    2ab6:	f009 fae3 	bl	c080 <usb_serial_write>
  if ((contstat & 4) == 4) {
    2aba:	6823      	ldr	r3, [r4, #0]
    2abc:	075a      	lsls	r2, r3, #29
    2abe:	bf4b      	itete	mi
    2ac0:	2101      	movmi	r1, #1
    2ac2:	2101      	movpl	r1, #1
    2ac4:	4854      	ldrmi	r0, [pc, #336]	; (2c18 <printbmsstat()+0x308>)
    2ac6:	4855      	ldrpl	r0, [pc, #340]	; (2c1c <printbmsstat()+0x30c>)
    2ac8:	f009 fada 	bl	c080 <usb_serial_write>
  if ((contstat & 8) == 8) {
    2acc:	6823      	ldr	r3, [r4, #0]
    2ace:	071b      	lsls	r3, r3, #28
    2ad0:	bf4b      	itete	mi
    2ad2:	2101      	movmi	r1, #1
    2ad4:	2101      	movpl	r1, #1
    2ad6:	4850      	ldrmi	r0, [pc, #320]	; (2c18 <printbmsstat()+0x308>)
    2ad8:	4850      	ldrpl	r0, [pc, #320]	; (2c1c <printbmsstat()+0x30c>)
    2ada:	f009 fad1 	bl	c080 <usb_serial_write>
    2ade:	2104      	movs	r1, #4
    2ae0:	484f      	ldr	r0, [pc, #316]	; (2c20 <printbmsstat()+0x310>)
    2ae2:	f009 facd 	bl	c080 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(IN1));
    2ae6:	2011      	movs	r0, #17
    2ae8:	f007 fc7c 	bl	a3e4 <digitalRead>
    2aec:	2300      	movs	r3, #0
    2aee:	4601      	mov	r1, r0
    2af0:	220a      	movs	r2, #10
    2af2:	483a      	ldr	r0, [pc, #232]	; (2bdc <printbmsstat()+0x2cc>)
    2af4:	f006 fd96 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN2));
    2af8:	2010      	movs	r0, #16
    2afa:	f007 fc73 	bl	a3e4 <digitalRead>
    2afe:	2300      	movs	r3, #0
    2b00:	4601      	mov	r1, r0
    2b02:	220a      	movs	r2, #10
    2b04:	4835      	ldr	r0, [pc, #212]	; (2bdc <printbmsstat()+0x2cc>)
    2b06:	f006 fd8d 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN3));
    2b0a:	2012      	movs	r0, #18
    2b0c:	f007 fc6a 	bl	a3e4 <digitalRead>
    2b10:	2300      	movs	r3, #0
    2b12:	4601      	mov	r1, r0
    2b14:	220a      	movs	r2, #10
    2b16:	4831      	ldr	r0, [pc, #196]	; (2bdc <printbmsstat()+0x2cc>)
    2b18:	f006 fd84 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN4));
    2b1c:	2013      	movs	r0, #19
    2b1e:	f007 fc61 	bl	a3e4 <digitalRead>
}
    2b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SERIALCONSOLE.print(digitalRead(IN4));
    2b26:	4601      	mov	r1, r0
    2b28:	2300      	movs	r3, #0
    2b2a:	482c      	ldr	r0, [pc, #176]	; (2bdc <printbmsstat()+0x2cc>)
    2b2c:	220a      	movs	r2, #10
    2b2e:	f006 bd79 	b.w	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2b32:	2111      	movs	r1, #17
    2b34:	483b      	ldr	r0, [pc, #236]	; (2c24 <printbmsstat()+0x314>)
    2b36:	f009 faa3 	bl	c080 <usb_serial_write>
    2b3a:	e773      	b.n	2a24 <printbmsstat()+0x114>
    2b3c:	210a      	movs	r1, #10
    2b3e:	483a      	ldr	r0, [pc, #232]	; (2c28 <printbmsstat()+0x318>)
    2b40:	f009 fa9e 	bl	c080 <usb_serial_write>
    2b44:	e769      	b.n	2a1a <printbmsstat()+0x10a>
    2b46:	210e      	movs	r1, #14
    2b48:	4838      	ldr	r0, [pc, #224]	; (2c2c <printbmsstat()+0x31c>)
    2b4a:	f009 fa99 	bl	c080 <usb_serial_write>
    2b4e:	e75e      	b.n	2a0e <printbmsstat()+0xfe>
    2b50:	2107      	movs	r1, #7
    2b52:	4837      	ldr	r0, [pc, #220]	; (2c30 <printbmsstat()+0x320>)
    2b54:	f009 fa94 	bl	c080 <usb_serial_write>
    2b58:	e74f      	b.n	29fa <printbmsstat()+0xea>
    2b5a:	2106      	movs	r1, #6
    2b5c:	4835      	ldr	r0, [pc, #212]	; (2c34 <printbmsstat()+0x324>)
    2b5e:	f009 fa8f 	bl	c080 <usb_serial_write>
    2b62:	e74a      	b.n	29fa <printbmsstat()+0xea>
    2b64:	2107      	movs	r1, #7
    2b66:	4834      	ldr	r0, [pc, #208]	; (2c38 <printbmsstat()+0x328>)
    2b68:	f009 fa8a 	bl	c080 <usb_serial_write>
    2b6c:	e745      	b.n	29fa <printbmsstat()+0xea>
    2b6e:	2107      	movs	r1, #7
    2b70:	4832      	ldr	r0, [pc, #200]	; (2c3c <printbmsstat()+0x32c>)
    2b72:	f009 fa85 	bl	c080 <usb_serial_write>
    2b76:	e740      	b.n	29fa <printbmsstat()+0xea>
    2b78:	2108      	movs	r1, #8
    2b7a:	4831      	ldr	r0, [pc, #196]	; (2c40 <printbmsstat()+0x330>)
    2b7c:	f009 fa80 	bl	c080 <usb_serial_write>
    2b80:	e73b      	b.n	29fa <printbmsstat()+0xea>
    2b82:	210b      	movs	r1, #11
    2b84:	482f      	ldr	r0, [pc, #188]	; (2c44 <printbmsstat()+0x334>)
    2b86:	f009 fa7b 	bl	c080 <usb_serial_write>
    2b8a:	e736      	b.n	29fa <printbmsstat()+0xea>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    2b8c:	4818      	ldr	r0, [pc, #96]	; (2bf0 <printbmsstat()+0x2e0>)
    2b8e:	f7fe fef3 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    2b92:	68e1      	ldr	r1, [r4, #12]
    2b94:	f00a faf2 	bl	d17c <__aeabi_fcmplt>
    2b98:	2800      	cmp	r0, #0
    2b9a:	f43f af25 	beq.w	29e8 <printbmsstat()+0xd8>
        if (bmsstatus == Error) {
    2b9e:	4b12      	ldr	r3, [pc, #72]	; (2be8 <printbmsstat()+0x2d8>)
    2ba0:	781b      	ldrb	r3, [r3, #0]
    2ba2:	2b05      	cmp	r3, #5
    2ba4:	d16a      	bne.n	2c7c <printbmsstat()+0x36c>
    2ba6:	210a      	movs	r1, #10
    2ba8:	4827      	ldr	r0, [pc, #156]	; (2c48 <printbmsstat()+0x338>)
    2baa:	f009 fa69 	bl	c080 <usb_serial_write>
    2bae:	e71b      	b.n	29e8 <printbmsstat()+0xd8>
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    2bb0:	f7fe febc 	bl	192c <BMSModuleManager::getLowCellVolt()>
    2bb4:	6a21      	ldr	r1, [r4, #32]
    2bb6:	f00a faff 	bl	d1b8 <__aeabi_fcmpgt>
    2bba:	2800      	cmp	r0, #0
    2bbc:	d05e      	beq.n	2c7c <printbmsstat()+0x36c>
    2bbe:	2116      	movs	r1, #22
    2bc0:	4822      	ldr	r0, [pc, #136]	; (2c4c <printbmsstat()+0x33c>)
    2bc2:	f009 fa5d 	bl	c080 <usb_serial_write>
    2bc6:	210a      	movs	r1, #10
    2bc8:	481f      	ldr	r0, [pc, #124]	; (2c48 <printbmsstat()+0x338>)
    2bca:	f009 fa59 	bl	c080 <usb_serial_write>
    2bce:	e70b      	b.n	29e8 <printbmsstat()+0xd8>
    2bd0:	210f      	movs	r1, #15
    2bd2:	481f      	ldr	r0, [pc, #124]	; (2c50 <printbmsstat()+0x340>)
    2bd4:	f009 fa54 	bl	c080 <usb_serial_write>
    2bd8:	e6cc      	b.n	2974 <printbmsstat()+0x64>
    2bda:	bf00      	nop
    2bdc:	1fff89fc 	.word	0x1fff89fc
    2be0:	1fffd0d8 	.word	0x1fffd0d8
    2be4:	000140c8 	.word	0x000140c8
    2be8:	1fffcf34 	.word	0x1fffcf34
    2bec:	000140d8 	.word	0x000140d8
    2bf0:	1fff91f0 	.word	0x1fff91f0
    2bf4:	1fffd1b0 	.word	0x1fffd1b0
    2bf8:	00014168 	.word	0x00014168
    2bfc:	1fff91b0 	.word	0x1fff91b0
    2c00:	00014ea8 	.word	0x00014ea8
    2c04:	1fff91e8 	.word	0x1fff91e8
    2c08:	1fffcfb4 	.word	0x1fffcfb4
    2c0c:	1fffcf3c 	.word	0x1fffcf3c
    2c10:	000141d8 	.word	0x000141d8
    2c14:	000141e0 	.word	0x000141e0
    2c18:	000141e8 	.word	0x000141e8
    2c1c:	000141ec 	.word	0x000141ec
    2c20:	000141f0 	.word	0x000141f0
    2c24:	000141c4 	.word	0x000141c4
    2c28:	000141b8 	.word	0x000141b8
    2c2c:	000141a8 	.word	0x000141a8
    2c30:	000141a0 	.word	0x000141a0
    2c34:	00014170 	.word	0x00014170
    2c38:	00014178 	.word	0x00014178
    2c3c:	0001418c 	.word	0x0001418c
    2c40:	00014194 	.word	0x00014194
    2c44:	00014180 	.word	0x00014180
    2c48:	00014150 	.word	0x00014150
    2c4c:	00014138 	.word	0x00014138
    2c50:	000140e4 	.word	0x000140e4
    2c54:	2111      	movs	r1, #17
    2c56:	480c      	ldr	r0, [pc, #48]	; (2c88 <printbmsstat()+0x378>)
    2c58:	f009 fa12 	bl	c080 <usb_serial_write>
    2c5c:	e6a4      	b.n	29a8 <printbmsstat()+0x98>
    2c5e:	210e      	movs	r1, #14
    2c60:	480a      	ldr	r0, [pc, #40]	; (2c8c <printbmsstat()+0x37c>)
    2c62:	f009 fa0d 	bl	c080 <usb_serial_write>
    2c66:	e68e      	b.n	2986 <printbmsstat()+0x76>
    2c68:	210d      	movs	r1, #13
    2c6a:	4809      	ldr	r0, [pc, #36]	; (2c90 <printbmsstat()+0x380>)
    2c6c:	f009 fa08 	bl	c080 <usb_serial_write>
    2c70:	e6ac      	b.n	29cc <printbmsstat()+0xbc>
    2c72:	210c      	movs	r1, #12
    2c74:	4807      	ldr	r0, [pc, #28]	; (2c94 <printbmsstat()+0x384>)
    2c76:	f009 fa03 	bl	c080 <usb_serial_write>
    2c7a:	e69e      	b.n	29ba <printbmsstat()+0xaa>
    2c7c:	2108      	movs	r1, #8
    2c7e:	4806      	ldr	r0, [pc, #24]	; (2c98 <printbmsstat()+0x388>)
    2c80:	f009 f9fe 	bl	c080 <usb_serial_write>
    2c84:	e6b0      	b.n	29e8 <printbmsstat()+0xd8>
    2c86:	bf00      	nop
    2c88:	00014104 	.word	0x00014104
    2c8c:	000140f4 	.word	0x000140f4
    2c90:	00014128 	.word	0x00014128
    2c94:	00014118 	.word	0x00014118
    2c98:	0001415c 	.word	0x0001415c

00002c9c <getcurrent()>:
void getcurrent() {
    2c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    2ca0:	4cb5      	ldr	r4, [pc, #724]	; (2f78 <getcurrent()+0x2dc>)
    2ca2:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    2ca6:	2e01      	cmp	r6, #1
void getcurrent() {
    2ca8:	b08c      	sub	sp, #48	; 0x30
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    2caa:	f000 8144 	beq.w	2f36 <getcurrent()+0x29a>
    2cae:	2e03      	cmp	r6, #3
    2cb0:	d05c      	beq.n	2d6c <getcurrent()+0xd0>
    2cb2:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 2f7c <getcurrent()+0x2e0>
    2cb6:	4fb2      	ldr	r7, [pc, #712]	; (2f80 <getcurrent()+0x2e4>)
    2cb8:	4eb2      	ldr	r6, [pc, #712]	; (2f84 <getcurrent()+0x2e8>)
  if (settings.invertcur == 1) {
    2cba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  lowpassFilter.input(RawCur);
    2cbc:	48b2      	ldr	r0, [pc, #712]	; (2f88 <getcurrent()+0x2ec>)
  if (settings.invertcur == 1) {
    2cbe:	2b01      	cmp	r3, #1
    RawCur = RawCur * -1;
    2cc0:	bf09      	itett	eq
    2cc2:	6831      	ldreq	r1, [r6, #0]
    2cc4:	6831      	ldrne	r1, [r6, #0]
    2cc6:	f101 4100 	addeq.w	r1, r1, #2147483648	; 0x80000000
    2cca:	6031      	streq	r1, [r6, #0]
  lowpassFilter.input(RawCur);
    2ccc:	f006 fa36 	bl	913c <FilterOnePole::input(float)>
  if (debugCur != 0) {
    2cd0:	683b      	ldr	r3, [r7, #0]
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	f040 8115 	bne.w	2f02 <getcurrent()+0x266>
  currentact = lowpassFilter.output();
    2cd8:	48ab      	ldr	r0, [pc, #684]	; (2f88 <getcurrent()+0x2ec>)
    2cda:	f006 fa03 	bl	90e4 <FilterOnePole::output()>
  if (debugCur != 0) {
    2cde:	683b      	ldr	r3, [r7, #0]
  currentact = lowpassFilter.output();
    2ce0:	f8c8 0000 	str.w	r0, [r8]
    2ce4:	4605      	mov	r5, r0
  if (debugCur != 0) {
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	f040 80fb 	bne.w	2ee2 <getcurrent()+0x246>
  if (settings.cursens == Analoguedual) {
    2cec:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    2cf0:	2b01      	cmp	r3, #1
    2cf2:	f000 80ba 	beq.w	2e6a <getcurrent()+0x1ce>
    if (currentact > 500 || currentact < -500) {
    2cf6:	49a5      	ldr	r1, [pc, #660]	; (2f8c <getcurrent()+0x2f0>)
    2cf8:	4628      	mov	r0, r5
    2cfa:	f00a fa5d 	bl	d1b8 <__aeabi_fcmpgt>
    2cfe:	b930      	cbnz	r0, 2d0e <getcurrent()+0x72>
    2d00:	49a3      	ldr	r1, [pc, #652]	; (2f90 <getcurrent()+0x2f4>)
    2d02:	4628      	mov	r0, r5
    2d04:	f00a fa3a 	bl	d17c <__aeabi_fcmplt>
    2d08:	2800      	cmp	r0, #0
    2d0a:	f000 81e0 	beq.w	30ce <getcurrent()+0x432>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d0e:	f8df a284 	ldr.w	sl, [pc, #644]	; 2f94 <getcurrent()+0x2f8>
      ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2d12:	f8df 9284 	ldr.w	r9, [pc, #644]	; 2f98 <getcurrent()+0x2fc>
    2d16:	f8da 3000 	ldr.w	r3, [sl]
    2d1a:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    2d1c:	980a      	ldr	r0, [sp, #40]	; 0x28
    2d1e:	f8d9 3000 	ldr.w	r3, [r9]
    2d22:	4f9e      	ldr	r7, [pc, #632]	; (2f9c <getcurrent()+0x300>)
    2d24:	1ac0      	subs	r0, r0, r3
    2d26:	f00a f833 	bl	cd90 <__aeabi_ui2f>
    2d2a:	4629      	mov	r1, r5
    2d2c:	f00a f888 	bl	ce40 <__aeabi_fmul>
    2d30:	499b      	ldr	r1, [pc, #620]	; (2fa0 <getcurrent()+0x304>)
    2d32:	f00a f939 	bl	cfa8 <__aeabi_fdiv>
    2d36:	499a      	ldr	r1, [pc, #616]	; (2fa0 <getcurrent()+0x304>)
    2d38:	f00a f936 	bl	cfa8 <__aeabi_fdiv>
    2d3c:	6839      	ldr	r1, [r7, #0]
    2d3e:	f009 ff77 	bl	cc30 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d42:	f8da 3000 	ldr.w	r3, [sl]
    2d46:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    2d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2d4a:	6038      	str	r0, [r7, #0]
      lasttime = millis();
    2d4c:	f8c9 3000 	str.w	r3, [r9]
  currentact = settings.ncur * currentact;
    2d50:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    2d54:	f00a f820 	bl	cd98 <__aeabi_i2f>
    2d58:	4629      	mov	r1, r5
    2d5a:	f00a f871 	bl	ce40 <__aeabi_fmul>
  RawCur = 0;
    2d5e:	2300      	movs	r3, #0
  currentact = settings.ncur * currentact;
    2d60:	f8c8 0000 	str.w	r0, [r8]
  RawCur = 0;
    2d64:	6033      	str	r3, [r6, #0]
}
    2d66:	b00c      	add	sp, #48	; 0x30
    2d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      adc->adc0->startContinuous(ACUR1);
    2d6c:	4d8d      	ldr	r5, [pc, #564]	; (2fa4 <getcurrent()+0x308>)
      sensor = 1;
    2d6e:	4f8e      	ldr	r7, [pc, #568]	; (2fa8 <getcurrent()+0x30c>)
      adc->adc0->startContinuous(ACUR1);
    2d70:	682a      	ldr	r2, [r5, #0]
    2d72:	f8df 8208 	ldr.w	r8, [pc, #520]	; 2f7c <getcurrent()+0x2e0>
    2d76:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      sensor = 1;
    2d7a:	2301      	movs	r3, #1
      adc->adc0->startContinuous(ACUR1);
    2d7c:	210f      	movs	r1, #15
      sensor = 1;
    2d7e:	603b      	str	r3, [r7, #0]
      adc->adc0->startContinuous(ACUR1);
    2d80:	f006 f89a 	bl	8eb8 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    2d84:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    2d86:	4f7e      	ldr	r7, [pc, #504]	; (2f80 <getcurrent()+0x2e4>)
    if (sensor == 1) {
    2d88:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    2d8a:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    2d8c:	f000 812c 	beq.w	2fe8 <getcurrent()+0x34c>
      if (debugCur != 0) {
    2d90:	2b00      	cmp	r3, #0
    2d92:	f040 81af 	bne.w	30f4 <getcurrent()+0x458>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2d96:	682b      	ldr	r3, [r5, #0]
    2d98:	f8df 9210 	ldr.w	r9, [pc, #528]	; 2fac <getcurrent()+0x310>
    2d9c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    int analogReadContinuous() __attribute__((always_inline))
    {
#ifdef ADC_TEENSY_4
        return (int16_t)(int32_t)adc_regs.R0;
#else
        return (int16_t)(int32_t)adc_regs.RA;
    2da0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2da2:	691e      	ldr	r6, [r3, #16]
    2da4:	b2b6      	uxth	r6, r6
    2da6:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    2daa:	f005 fdcd 	bl	8948 <ADC_Module::getMaxValue()>
    2dae:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
    2db2:	f640 43e4 	movw	r3, #3300	; 0xce4
    2db6:	fb06 f303 	mul.w	r3, r6, r3
    2dba:	fbb3 f0f0 	udiv	r0, r3, r0
    2dbe:	1a80      	subs	r0, r0, r2
    2dc0:	b200      	sxth	r0, r0
    2dc2:	f009 ffe9 	bl	cd98 <__aeabi_i2f>
    2dc6:	497a      	ldr	r1, [pc, #488]	; (2fb0 <getcurrent()+0x314>)
    2dc8:	4606      	mov	r6, r0
    2dca:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    2dce:	f00a f837 	bl	ce40 <__aeabi_fmul>
    2dd2:	4601      	mov	r1, r0
    2dd4:	4630      	mov	r0, r6
    2dd6:	f00a f8e7 	bl	cfa8 <__aeabi_fdiv>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2dda:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    2dde:	4e69      	ldr	r6, [pc, #420]	; (2f84 <getcurrent()+0x2e8>)
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2de0:	2b63      	cmp	r3, #99	; 0x63
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    2de2:	6030      	str	r0, [r6, #0]
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2de4:	f300 817a 	bgt.w	30dc <getcurrent()+0x440>
        RawCur = 0;
    2de8:	2300      	movs	r3, #0
    2dea:	6033      	str	r3, [r6, #0]
      if (debugCur != 0) {
    2dec:	683b      	ldr	r3, [r7, #0]
    2dee:	2b00      	cmp	r3, #0
    2df0:	f43f af63 	beq.w	2cba <getcurrent()+0x1e>
    2df4:	2102      	movs	r1, #2
    2df6:	486f      	ldr	r0, [pc, #444]	; (2fb4 <getcurrent()+0x318>)
    2df8:	f009 f942 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print((float(value * 3300 / adc->adc0->getMaxValue()) - settings.offset2));
    2dfc:	682b      	ldr	r3, [r5, #0]
    2dfe:	f8d9 5000 	ldr.w	r5, [r9]
    2e02:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2e06:	f640 43e4 	movw	r3, #3300	; 0xce4
    2e0a:	fb03 f505 	mul.w	r5, r3, r5
    2e0e:	f005 fd9b 	bl	8948 <ADC_Module::getMaxValue()>
    2e12:	fbb5 f0f0 	udiv	r0, r5, r0
    2e16:	f009 ffbb 	bl	cd90 <__aeabi_ui2f>
    2e1a:	4605      	mov	r5, r0
    2e1c:	f8b4 008a 	ldrh.w	r0, [r4, #138]	; 0x8a
    2e20:	f009 ffba 	bl	cd98 <__aeabi_i2f>
    2e24:	4601      	mov	r1, r0
    2e26:	4628      	mov	r0, r5
    2e28:	f009 ff00 	bl	cc2c <__aeabi_fsub>
    2e2c:	f009 fde4 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2e30:	2502      	movs	r5, #2
    2e32:	4602      	mov	r2, r0
    2e34:	460b      	mov	r3, r1
    2e36:	9500      	str	r5, [sp, #0]
    2e38:	485f      	ldr	r0, [pc, #380]	; (2fb8 <getcurrent()+0x31c>)
    2e3a:	f006 fbfd 	bl	9638 <Print::printFloat(double, unsigned char)>
    2e3e:	4629      	mov	r1, r5
    2e40:	485c      	ldr	r0, [pc, #368]	; (2fb4 <getcurrent()+0x318>)
    2e42:	f009 f91d 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    2e46:	6830      	ldr	r0, [r6, #0]
    2e48:	f009 fdd6 	bl	c9f8 <__aeabi_f2d>
    2e4c:	9500      	str	r5, [sp, #0]
    2e4e:	4602      	mov	r2, r0
    2e50:	460b      	mov	r3, r1
    2e52:	4859      	ldr	r0, [pc, #356]	; (2fb8 <getcurrent()+0x31c>)
    2e54:	f006 fbf0 	bl	9638 <Print::printFloat(double, unsigned char)>
    2e58:	4629      	mov	r1, r5
    2e5a:	4858      	ldr	r0, [pc, #352]	; (2fbc <getcurrent()+0x320>)
    2e5c:	f009 f910 	bl	c080 <usb_serial_write>
    2e60:	4629      	mov	r1, r5
    2e62:	4854      	ldr	r0, [pc, #336]	; (2fb4 <getcurrent()+0x318>)
    2e64:	f009 f90c 	bl	c080 <usb_serial_write>
    2e68:	e727      	b.n	2cba <getcurrent()+0x1e>
    if (sensor == 1) {
    2e6a:	4b4f      	ldr	r3, [pc, #316]	; (2fa8 <getcurrent()+0x30c>)
    2e6c:	681b      	ldr	r3, [r3, #0]
    2e6e:	2b01      	cmp	r3, #1
    2e70:	f000 8175 	beq.w	315e <getcurrent()+0x4c2>
    if (sensor == 2) {
    2e74:	2b02      	cmp	r3, #2
    2e76:	f47f af6b 	bne.w	2d50 <getcurrent()+0xb4>
      if (currentact > settings.changecur || currentact < (settings.changecur * -1)) {
    2e7a:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    2e7e:	4638      	mov	r0, r7
    2e80:	f009 ff8a 	bl	cd98 <__aeabi_i2f>
    2e84:	4629      	mov	r1, r5
    2e86:	f00a f979 	bl	d17c <__aeabi_fcmplt>
    2e8a:	b940      	cbnz	r0, 2e9e <getcurrent()+0x202>
    2e8c:	4278      	negs	r0, r7
    2e8e:	f009 ff83 	bl	cd98 <__aeabi_i2f>
    2e92:	4629      	mov	r1, r5
    2e94:	f00a f990 	bl	d1b8 <__aeabi_fcmpgt>
    2e98:	2800      	cmp	r0, #0
    2e9a:	f000 81ce 	beq.w	323a <getcurrent()+0x59e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2e9e:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2f94 <getcurrent()+0x2f8>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2ea2:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 2f98 <getcurrent()+0x2fc>
    2ea6:	f8da 3000 	ldr.w	r3, [sl]
    2eaa:	9307      	str	r3, [sp, #28]
	return ret;
    2eac:	9807      	ldr	r0, [sp, #28]
    2eae:	f8d9 3000 	ldr.w	r3, [r9]
    2eb2:	4f3a      	ldr	r7, [pc, #232]	; (2f9c <getcurrent()+0x300>)
    2eb4:	1ac0      	subs	r0, r0, r3
    2eb6:	f009 ff6b 	bl	cd90 <__aeabi_ui2f>
    2eba:	4629      	mov	r1, r5
    2ebc:	f009 ffc0 	bl	ce40 <__aeabi_fmul>
    2ec0:	4937      	ldr	r1, [pc, #220]	; (2fa0 <getcurrent()+0x304>)
    2ec2:	f00a f871 	bl	cfa8 <__aeabi_fdiv>
    2ec6:	4936      	ldr	r1, [pc, #216]	; (2fa0 <getcurrent()+0x304>)
    2ec8:	f00a f86e 	bl	cfa8 <__aeabi_fdiv>
    2ecc:	6839      	ldr	r1, [r7, #0]
    2ece:	f009 feaf 	bl	cc30 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2ed2:	f8da 3000 	ldr.w	r3, [sl]
    2ed6:	9306      	str	r3, [sp, #24]
	return ret;
    2ed8:	9b06      	ldr	r3, [sp, #24]
    2eda:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    2edc:	f8c9 3000 	str.w	r3, [r9]
    2ee0:	e736      	b.n	2d50 <getcurrent()+0xb4>
    SERIALCONSOLE.print(currentact);
    2ee2:	f009 fd89 	bl	c9f8 <__aeabi_f2d>
    2ee6:	460b      	mov	r3, r1
    2ee8:	2102      	movs	r1, #2
    2eea:	4602      	mov	r2, r0
    2eec:	9100      	str	r1, [sp, #0]
    2eee:	4832      	ldr	r0, [pc, #200]	; (2fb8 <getcurrent()+0x31c>)
    2ef0:	f006 fba2 	bl	9638 <Print::printFloat(double, unsigned char)>
    2ef4:	4832      	ldr	r0, [pc, #200]	; (2fc0 <getcurrent()+0x324>)
    2ef6:	2104      	movs	r1, #4
    2ef8:	f009 f8c2 	bl	c080 <usb_serial_write>
      if (currentact > 500 || currentact < -500) {
    2efc:	f8d8 5000 	ldr.w	r5, [r8]
    2f00:	e6f4      	b.n	2cec <getcurrent()+0x50>
    SERIALCONSOLE.print(lowpassFilter.output());
    2f02:	4821      	ldr	r0, [pc, #132]	; (2f88 <getcurrent()+0x2ec>)
    2f04:	f006 f8ee 	bl	90e4 <FilterOnePole::output()>
    2f08:	f009 fd76 	bl	c9f8 <__aeabi_f2d>
    2f0c:	460b      	mov	r3, r1
    2f0e:	2102      	movs	r1, #2
    2f10:	4602      	mov	r2, r0
    2f12:	9100      	str	r1, [sp, #0]
    2f14:	4828      	ldr	r0, [pc, #160]	; (2fb8 <getcurrent()+0x31c>)
    2f16:	f006 fb8f 	bl	9638 <Print::printFloat(double, unsigned char)>
    2f1a:	2103      	movs	r1, #3
    2f1c:	4829      	ldr	r0, [pc, #164]	; (2fc4 <getcurrent()+0x328>)
    2f1e:	f009 f8af 	bl	c080 <usb_serial_write>
    SERIALCONSOLE.print(settings.changecur);
    2f22:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    2f26:	4824      	ldr	r0, [pc, #144]	; (2fb8 <getcurrent()+0x31c>)
    2f28:	f006 fb5c 	bl	95e4 <Print::print(long)>
    2f2c:	2103      	movs	r1, #3
    2f2e:	4825      	ldr	r0, [pc, #148]	; (2fc4 <getcurrent()+0x328>)
    2f30:	f009 f8a6 	bl	c080 <usb_serial_write>
    2f34:	e6d0      	b.n	2cd8 <getcurrent()+0x3c>
      if (currentact < settings.changecur && currentact > (settings.changecur * -1)) {
    2f36:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2f7c <getcurrent()+0x2e0>
    2f3a:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    2f3e:	f8d8 5000 	ldr.w	r5, [r8]
    2f42:	4638      	mov	r0, r7
    2f44:	f009 ff28 	bl	cd98 <__aeabi_i2f>
    2f48:	4629      	mov	r1, r5
    2f4a:	f00a f935 	bl	d1b8 <__aeabi_fcmpgt>
    2f4e:	2800      	cmp	r0, #0
    2f50:	d03a      	beq.n	2fc8 <getcurrent()+0x32c>
    2f52:	4278      	negs	r0, r7
    2f54:	f009 ff20 	bl	cd98 <__aeabi_i2f>
    2f58:	4601      	mov	r1, r0
    2f5a:	4628      	mov	r0, r5
    2f5c:	f00a f92c 	bl	d1b8 <__aeabi_fcmpgt>
    2f60:	b390      	cbz	r0, 2fc8 <getcurrent()+0x32c>
        adc->startContinuous(ACUR1);
    2f62:	4d10      	ldr	r5, [pc, #64]	; (2fa4 <getcurrent()+0x308>)
        sensor = 1;
    2f64:	4f10      	ldr	r7, [pc, #64]	; (2fa8 <getcurrent()+0x30c>)
        adc->startContinuous(ACUR1);
    2f66:	6828      	ldr	r0, [r5, #0]
        sensor = 1;
    2f68:	603e      	str	r6, [r7, #0]
        adc->startContinuous(ACUR1);
    2f6a:	f04f 32ff 	mov.w	r2, #4294967295
    2f6e:	210f      	movs	r1, #15
    2f70:	f005 fc94 	bl	889c <ADC::startContinuous(unsigned char, signed char)>
    2f74:	e706      	b.n	2d84 <getcurrent()+0xe8>
    2f76:	bf00      	nop
    2f78:	1fffd0d8 	.word	0x1fffd0d8
    2f7c:	1fffcfc4 	.word	0x1fffcfc4
    2f80:	1fffcfc8 	.word	0x1fffcfc8
    2f84:	1fff91c0 	.word	0x1fff91c0
    2f88:	1fffd00c 	.word	0x1fffd00c
    2f8c:	43fa0000 	.word	0x43fa0000
    2f90:	c3fa0000 	.word	0xc3fa0000
    2f94:	1fffd3c0 	.word	0x1fffd3c0
    2f98:	1fffd000 	.word	0x1fffd000
    2f9c:	1fff91e4 	.word	0x1fff91e4
    2fa0:	447a0000 	.word	0x447a0000
    2fa4:	1fff91dc 	.word	0x1fff91dc
    2fa8:	1fff8878 	.word	0x1fff8878
    2fac:	1fffd1b8 	.word	0x1fffd1b8
    2fb0:	3727c5ac 	.word	0x3727c5ac
    2fb4:	00014ea8 	.word	0x00014ea8
    2fb8:	1fff89fc 	.word	0x1fff89fc
    2fbc:	00014234 	.word	0x00014234
    2fc0:	00014238 	.word	0x00014238
    2fc4:	00013bb8 	.word	0x00013bb8
        sensor = 2;
    2fc8:	4f9f      	ldr	r7, [pc, #636]	; (3248 <getcurrent()+0x5ac>)
        adc->adc0->startContinuous(ACUR2);
    2fca:	4da0      	ldr	r5, [pc, #640]	; (324c <getcurrent()+0x5b0>)
        sensor = 2;
    2fcc:	2302      	movs	r3, #2
    2fce:	603b      	str	r3, [r7, #0]
        adc->adc0->startContinuous(ACUR2);
    2fd0:	682b      	ldr	r3, [r5, #0]
    2fd2:	210e      	movs	r1, #14
    2fd4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2fd8:	f005 ff6e 	bl	8eb8 <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    2fdc:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    2fde:	4f9c      	ldr	r7, [pc, #624]	; (3250 <getcurrent()+0x5b4>)
    if (sensor == 1) {
    2fe0:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    2fe2:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    2fe4:	f47f aed4 	bne.w	2d90 <getcurrent()+0xf4>
      if (debugCur != 0) {
    2fe8:	2b00      	cmp	r3, #0
    2fea:	f040 80e5 	bne.w	31b8 <getcurrent()+0x51c>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2fee:	682b      	ldr	r3, [r5, #0]
    2ff0:	f8df 9260 	ldr.w	r9, [pc, #608]	; 3254 <getcurrent()+0x5b8>
    2ff4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2ff8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2ffa:	691e      	ldr	r6, [r3, #16]
    2ffc:	b2b6      	uxth	r6, r6
    2ffe:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    3002:	f005 fca1 	bl	8948 <ADC_Module::getMaxValue()>
    3006:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    300a:	f640 4ae4 	movw	sl, #3300	; 0xce4
    300e:	fb0a f606 	mul.w	r6, sl, r6
    3012:	fbb6 f6f0 	udiv	r6, r6, r0
    3016:	1af0      	subs	r0, r6, r3
    3018:	b200      	sxth	r0, r0
    301a:	f009 febd 	bl	cd98 <__aeabi_i2f>
    301e:	498e      	ldr	r1, [pc, #568]	; (3258 <getcurrent()+0x5bc>)
    3020:	4606      	mov	r6, r0
    3022:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    3026:	f009 ff0b 	bl	ce40 <__aeabi_fmul>
    302a:	4601      	mov	r1, r0
    302c:	4630      	mov	r0, r6
    302e:	f009 ffbb 	bl	cfa8 <__aeabi_fdiv>
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    3032:	682b      	ldr	r3, [r5, #0]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    3034:	4e89      	ldr	r6, [pc, #548]	; (325c <getcurrent()+0x5c0>)
    3036:	4602      	mov	r2, r0
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    3038:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    303c:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    3040:	6032      	str	r2, [r6, #0]
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    3042:	fb0a fa03 	mul.w	sl, sl, r3
    3046:	f005 fc7f 	bl	8948 <ADC_Module::getMaxValue()>
    304a:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
    304e:	fbba f3f0 	udiv	r3, sl, r0
    3052:	b21b      	sxth	r3, r3
    3054:	1a9b      	subs	r3, r3, r2
    3056:	2b00      	cmp	r3, #0
    3058:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
    305c:	bfb8      	it	lt
    305e:	425b      	neglt	r3, r3
    3060:	429a      	cmp	r2, r3
        RawCur = 0;
    3062:	bfc4      	itt	gt
    3064:	2300      	movgt	r3, #0
    3066:	6033      	strgt	r3, [r6, #0]
      if (debugCur != 0) {
    3068:	683b      	ldr	r3, [r7, #0]
    306a:	2b00      	cmp	r3, #0
    306c:	f43f ae25 	beq.w	2cba <getcurrent()+0x1e>
    3070:	2102      	movs	r1, #2
    3072:	487b      	ldr	r0, [pc, #492]	; (3260 <getcurrent()+0x5c4>)
    3074:	f009 f804 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1);
    3078:	682b      	ldr	r3, [r5, #0]
    307a:	f8d9 5000 	ldr.w	r5, [r9]
    307e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3082:	f640 43e4 	movw	r3, #3300	; 0xce4
    3086:	fb03 f505 	mul.w	r5, r3, r5
    308a:	f005 fc5d 	bl	8948 <ADC_Module::getMaxValue()>
    308e:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
    3092:	fbb5 f5f0 	udiv	r5, r5, r0
    3096:	b22d      	sxth	r5, r5
	size_t print(int n)				{ return print((long)n); }
    3098:	1a69      	subs	r1, r5, r1
    309a:	4872      	ldr	r0, [pc, #456]	; (3264 <getcurrent()+0x5c8>)
    309c:	f006 faa2 	bl	95e4 <Print::print(long)>
    30a0:	2102      	movs	r1, #2
    30a2:	486f      	ldr	r0, [pc, #444]	; (3260 <getcurrent()+0x5c4>)
    30a4:	f008 ffec 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    30a8:	6830      	ldr	r0, [r6, #0]
    30aa:	f009 fca5 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    30ae:	2502      	movs	r5, #2
    30b0:	4602      	mov	r2, r0
    30b2:	460b      	mov	r3, r1
    30b4:	9500      	str	r5, [sp, #0]
    30b6:	486b      	ldr	r0, [pc, #428]	; (3264 <getcurrent()+0x5c8>)
    30b8:	f006 fabe 	bl	9638 <Print::printFloat(double, unsigned char)>
    30bc:	2103      	movs	r1, #3
    30be:	486a      	ldr	r0, [pc, #424]	; (3268 <getcurrent()+0x5cc>)
    30c0:	f008 ffde 	bl	c080 <usb_serial_write>
    30c4:	4629      	mov	r1, r5
    30c6:	4866      	ldr	r0, [pc, #408]	; (3260 <getcurrent()+0x5c4>)
    30c8:	f008 ffda 	bl	c080 <usb_serial_write>
    30cc:	e5f5      	b.n	2cba <getcurrent()+0x1e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    30ce:	4b67      	ldr	r3, [pc, #412]	; (326c <getcurrent()+0x5d0>)
    30d0:	681b      	ldr	r3, [r3, #0]
    30d2:	930b      	str	r3, [sp, #44]	; 0x2c
      lasttime = millis();
    30d4:	4b66      	ldr	r3, [pc, #408]	; (3270 <getcurrent()+0x5d4>)
	return ret;
    30d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    30d8:	601a      	str	r2, [r3, #0]
    30da:	e639      	b.n	2d50 <getcurrent()+0xb4>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    30dc:	682b      	ldr	r3, [r5, #0]
    30de:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    30e2:	f005 fc31 	bl	8948 <ADC_Module::getMaxValue()>
    30e6:	f8d9 3000 	ldr.w	r3, [r9]
    30ea:	3864      	subs	r0, #100	; 0x64
    30ec:	4298      	cmp	r0, r3
    30ee:	f4ff ae7b 	bcc.w	2de8 <getcurrent()+0x14c>
    30f2:	e67b      	b.n	2dec <getcurrent()+0x150>
        SERIALCONSOLE.println();
    30f4:	485b      	ldr	r0, [pc, #364]	; (3264 <getcurrent()+0x5c8>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    30f6:	f8df 915c 	ldr.w	r9, [pc, #348]	; 3254 <getcurrent()+0x5b8>
        SERIALCONSOLE.println();
    30fa:	f006 fa7b 	bl	95f4 <Print::println()>
    30fe:	210c      	movs	r1, #12
    3100:	485c      	ldr	r0, [pc, #368]	; (3274 <getcurrent()+0x5d8>)
    3102:	f008 ffbd 	bl	c080 <usb_serial_write>
    3106:	485c      	ldr	r0, [pc, #368]	; (3278 <getcurrent()+0x5dc>)
    3108:	210c      	movs	r1, #12
    310a:	f008 ffb9 	bl	c080 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    310e:	682b      	ldr	r3, [r5, #0]
      if (debugCur != 0) {
    3110:	683a      	ldr	r2, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3112:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3116:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3118:	691e      	ldr	r6, [r3, #16]
    311a:	b2b6      	uxth	r6, r6
    311c:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    3120:	2a00      	cmp	r2, #0
    3122:	f43f ae42 	beq.w	2daa <getcurrent()+0x10e>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset2)
    3126:	f005 fc0f 	bl	8948 <ADC_Module::getMaxValue()>
    312a:	f640 42e4 	movw	r2, #3300	; 0xce4
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    312e:	2300      	movs	r3, #0
    3130:	fb06 f202 	mul.w	r2, r6, r2
    3134:	fbb2 f1f0 	udiv	r1, r2, r0
    3138:	220a      	movs	r2, #10
    313a:	484a      	ldr	r0, [pc, #296]	; (3264 <getcurrent()+0x5c8>)
    313c:	f006 fa72 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3140:	2102      	movs	r1, #2
    3142:	4847      	ldr	r0, [pc, #284]	; (3260 <getcurrent()+0x5c4>)
    3144:	f008 ff9c 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3148:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
    314c:	4845      	ldr	r0, [pc, #276]	; (3264 <getcurrent()+0x5c8>)
    314e:	f006 fa49 	bl	95e4 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    3152:	682b      	ldr	r3, [r5, #0]
    3154:	f8d9 6000 	ldr.w	r6, [r9]
    3158:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    315c:	e625      	b.n	2daa <getcurrent()+0x10e>
      if (currentact > 500 || currentact < -500) {
    315e:	4947      	ldr	r1, [pc, #284]	; (327c <getcurrent()+0x5e0>)
    3160:	4628      	mov	r0, r5
    3162:	f00a f829 	bl	d1b8 <__aeabi_fcmpgt>
    3166:	b928      	cbnz	r0, 3174 <getcurrent()+0x4d8>
    3168:	4945      	ldr	r1, [pc, #276]	; (3280 <getcurrent()+0x5e4>)
    316a:	4628      	mov	r0, r5
    316c:	f00a f806 	bl	d17c <__aeabi_fcmplt>
    3170:	2800      	cmp	r0, #0
    3172:	d05b      	beq.n	322c <getcurrent()+0x590>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3174:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 326c <getcurrent()+0x5d0>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    3178:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 3270 <getcurrent()+0x5d4>
    317c:	f8da 3000 	ldr.w	r3, [sl]
    3180:	9304      	str	r3, [sp, #16]
	return ret;
    3182:	9804      	ldr	r0, [sp, #16]
    3184:	f8d9 3000 	ldr.w	r3, [r9]
    3188:	4f3e      	ldr	r7, [pc, #248]	; (3284 <getcurrent()+0x5e8>)
    318a:	1ac0      	subs	r0, r0, r3
    318c:	f009 fe00 	bl	cd90 <__aeabi_ui2f>
    3190:	4629      	mov	r1, r5
    3192:	f009 fe55 	bl	ce40 <__aeabi_fmul>
    3196:	493c      	ldr	r1, [pc, #240]	; (3288 <getcurrent()+0x5ec>)
    3198:	f009 ff06 	bl	cfa8 <__aeabi_fdiv>
    319c:	493a      	ldr	r1, [pc, #232]	; (3288 <getcurrent()+0x5ec>)
    319e:	f009 ff03 	bl	cfa8 <__aeabi_fdiv>
    31a2:	6839      	ldr	r1, [r7, #0]
    31a4:	f009 fd44 	bl	cc30 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    31a8:	f8da 3000 	ldr.w	r3, [sl]
    31ac:	9303      	str	r3, [sp, #12]
	return ret;
    31ae:	9b03      	ldr	r3, [sp, #12]
    31b0:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    31b2:	f8c9 3000 	str.w	r3, [r9]
    31b6:	e5cb      	b.n	2d50 <getcurrent()+0xb4>
        SERIALCONSOLE.println();
    31b8:	482a      	ldr	r0, [pc, #168]	; (3264 <getcurrent()+0x5c8>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    31ba:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3254 <getcurrent()+0x5b8>
        SERIALCONSOLE.println();
    31be:	f006 fa19 	bl	95f4 <Print::println()>
        if (settings.cursens == Analoguedual) {
    31c2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    31c6:	2b01      	cmp	r3, #1
    31c8:	bf0c      	ite	eq
    31ca:	4830      	ldreq	r0, [pc, #192]	; (328c <getcurrent()+0x5f0>)
    31cc:	4830      	ldrne	r0, [pc, #192]	; (3290 <getcurrent()+0x5f4>)
    31ce:	210b      	movs	r1, #11
    31d0:	f008 ff56 	bl	c080 <usb_serial_write>
    31d4:	4828      	ldr	r0, [pc, #160]	; (3278 <getcurrent()+0x5dc>)
    31d6:	210c      	movs	r1, #12
    31d8:	f008 ff52 	bl	c080 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    31dc:	682a      	ldr	r2, [r5, #0]
      if (debugCur != 0) {
    31de:	683b      	ldr	r3, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    31e0:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    31e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    31e6:	6916      	ldr	r6, [r2, #16]
    31e8:	b2b6      	uxth	r6, r6
    31ea:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    31ee:	2b00      	cmp	r3, #0
    31f0:	f43f af07 	beq.w	3002 <getcurrent()+0x366>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset1)
    31f4:	f005 fba8 	bl	8948 <ADC_Module::getMaxValue()>
    31f8:	f640 43e4 	movw	r3, #3300	; 0xce4
    31fc:	fb06 f303 	mul.w	r3, r6, r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3200:	220a      	movs	r2, #10
    3202:	fbb3 f1f0 	udiv	r1, r3, r0
    3206:	2300      	movs	r3, #0
    3208:	4816      	ldr	r0, [pc, #88]	; (3264 <getcurrent()+0x5c8>)
    320a:	f006 fa0b 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    320e:	2101      	movs	r1, #1
    3210:	4820      	ldr	r0, [pc, #128]	; (3294 <getcurrent()+0x5f8>)
    3212:	f008 ff35 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3216:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
    321a:	4812      	ldr	r0, [pc, #72]	; (3264 <getcurrent()+0x5c8>)
    321c:	f006 f9e2 	bl	95e4 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    3220:	682b      	ldr	r3, [r5, #0]
    3222:	f8d9 6000 	ldr.w	r6, [r9]
    3226:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    322a:	e6ea      	b.n	3002 <getcurrent()+0x366>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    322c:	4b0f      	ldr	r3, [pc, #60]	; (326c <getcurrent()+0x5d0>)
    322e:	681b      	ldr	r3, [r3, #0]
    3230:	9305      	str	r3, [sp, #20]
        lasttime = millis();
    3232:	4b0f      	ldr	r3, [pc, #60]	; (3270 <getcurrent()+0x5d4>)
	return ret;
    3234:	9a05      	ldr	r2, [sp, #20]
    3236:	601a      	str	r2, [r3, #0]
    3238:	e58a      	b.n	2d50 <getcurrent()+0xb4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    323a:	4b0c      	ldr	r3, [pc, #48]	; (326c <getcurrent()+0x5d0>)
    323c:	681b      	ldr	r3, [r3, #0]
    323e:	9308      	str	r3, [sp, #32]
        lasttime = millis();
    3240:	4b0b      	ldr	r3, [pc, #44]	; (3270 <getcurrent()+0x5d4>)
	return ret;
    3242:	9a08      	ldr	r2, [sp, #32]
    3244:	601a      	str	r2, [r3, #0]
    3246:	e583      	b.n	2d50 <getcurrent()+0xb4>
    3248:	1fff8878 	.word	0x1fff8878
    324c:	1fff91dc 	.word	0x1fff91dc
    3250:	1fffcfc8 	.word	0x1fffcfc8
    3254:	1fffd1b8 	.word	0x1fffd1b8
    3258:	3727c5ac 	.word	0x3727c5ac
    325c:	1fff91c0 	.word	0x1fff91c0
    3260:	00014ea8 	.word	0x00014ea8
    3264:	1fff89fc 	.word	0x1fff89fc
    3268:	00014220 	.word	0x00014220
    326c:	1fffd3c0 	.word	0x1fffd3c0
    3270:	1fffd000 	.word	0x1fffd000
    3274:	00014224 	.word	0x00014224
    3278:	00014210 	.word	0x00014210
    327c:	43fa0000 	.word	0x43fa0000
    3280:	c3fa0000 	.word	0xc3fa0000
    3284:	1fff91e4 	.word	0x1fff91e4
    3288:	447a0000 	.word	0x447a0000
    328c:	000141f8 	.word	0x000141f8
    3290:	00014204 	.word	0x00014204
    3294:	000140c4 	.word	0x000140c4

00003298 <updateSOC()>:
void updateSOC() {
    3298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (SOCreset == 1) {
    329c:	4f99      	ldr	r7, [pc, #612]	; (3504 <updateSOC()+0x26c>)
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    329e:	4c9a      	ldr	r4, [pc, #616]	; (3508 <updateSOC()+0x270>)
  if (SOCreset == 1) {
    32a0:	683b      	ldr	r3, [r7, #0]
    32a2:	2b01      	cmp	r3, #1
void updateSOC() {
    32a4:	b084      	sub	sp, #16
  if (SOCreset == 1) {
    32a6:	f000 80b5 	beq.w	3414 <updateSOC()+0x17c>
    32aa:	4d98      	ldr	r5, [pc, #608]	; (350c <updateSOC()+0x274>)
    32ac:	4e98      	ldr	r6, [pc, #608]	; (3510 <updateSOC()+0x278>)
  if (SOCset == 0) {
    32ae:	f8df 8264 	ldr.w	r8, [pc, #612]	; 3514 <updateSOC()+0x27c>
    32b2:	f8d8 3000 	ldr.w	r3, [r8]
    32b6:	b93b      	cbnz	r3, 32c8 <updateSOC()+0x30>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    32b8:	4b97      	ldr	r3, [pc, #604]	; (3518 <updateSOC()+0x280>)
    32ba:	681b      	ldr	r3, [r3, #0]
    32bc:	9303      	str	r3, [sp, #12]
	return ret;
    32be:	9b03      	ldr	r3, [sp, #12]
    if (millis() > 8000) {
    32c0:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
    32c4:	f200 809d 	bhi.w	3402 <updateSOC()+0x16a>
    32c8:	4f94      	ldr	r7, [pc, #592]	; (351c <updateSOC()+0x284>)
  if (settings.voltsoc == 1 || settings.cursens == 0) {
    32ca:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    32ce:	2b01      	cmp	r3, #1
    32d0:	d004      	beq.n	32dc <updateSOC()+0x44>
    32d2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    32d6:	2b00      	cmp	r3, #0
    32d8:	f040 808c 	bne.w	33f4 <updateSOC()+0x15c>
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    32dc:	4890      	ldr	r0, [pc, #576]	; (3520 <updateSOC()+0x288>)
    32de:	f7fe fb25 	bl	192c <BMSModuleManager::getLowCellVolt()>
    32e2:	4990      	ldr	r1, [pc, #576]	; (3524 <updateSOC()+0x28c>)
    32e4:	f009 fdac 	bl	ce40 <__aeabi_fmul>
    32e8:	f009 ff96 	bl	d218 <__aeabi_f2uiz>
    32ec:	f8d4 c078 	ldr.w	ip, [r4, #120]	; 0x78
    32f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
    32f2:	6f62      	ldr	r2, [r4, #116]	; 0x74
    32f4:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    32f6:	f8cd c000 	str.w	ip, [sp]
    32fa:	b280      	uxth	r0, r0
    32fc:	f7ff f870 	bl	23e0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    3300:	f8d4 805c 	ldr.w	r8, [r4, #92]	; 0x5c
    3304:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
    3308:	fb08 f000 	mul.w	r0, r8, r0
    330c:	fb0a f000 	mul.w	r0, sl, r0
    3310:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    3314:	0040      	lsls	r0, r0, #1
    3316:	f009 fd3f 	bl	cd98 <__aeabi_i2f>
    331a:	4983      	ldr	r1, [pc, #524]	; (3528 <updateSOC()+0x290>)
    331c:	f009 fe44 	bl	cfa8 <__aeabi_fdiv>
    3320:	4681      	mov	r9, r0
    3322:	6030      	str	r0, [r6, #0]
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    3324:	fb0a f808 	mul.w	r8, sl, r8
    3328:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    332c:	fb00 f008 	mul.w	r0, r0, r8
    3330:	f009 fd32 	bl	cd98 <__aeabi_i2f>
    3334:	497c      	ldr	r1, [pc, #496]	; (3528 <updateSOC()+0x290>)
    3336:	4680      	mov	r8, r0
    3338:	4648      	mov	r0, r9
    333a:	f009 fd81 	bl	ce40 <__aeabi_fmul>
    333e:	4641      	mov	r1, r8
    3340:	f009 fe32 	bl	cfa8 <__aeabi_fdiv>
    3344:	4979      	ldr	r1, [pc, #484]	; (352c <updateSOC()+0x294>)
    3346:	f009 fd7b 	bl	ce40 <__aeabi_fmul>
    334a:	f009 ff3f 	bl	d1cc <__aeabi_f2iz>
  if (SOC >= 100) {
    334e:	2863      	cmp	r0, #99	; 0x63
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    3350:	6028      	str	r0, [r5, #0]
  if (SOC >= 100) {
    3352:	dd45      	ble.n	33e0 <updateSOC()+0x148>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    3354:	4974      	ldr	r1, [pc, #464]	; (3528 <updateSOC()+0x290>)
    3356:	4640      	mov	r0, r8
    3358:	f009 fe26 	bl	cfa8 <__aeabi_fdiv>
    SOC = 100;
    335c:	2364      	movs	r3, #100	; 0x64
    335e:	602b      	str	r3, [r5, #0]
  if (debug != 0) {
    3360:	683b      	ldr	r3, [r7, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    3362:	6030      	str	r0, [r6, #0]
  if (debug != 0) {
    3364:	2b00      	cmp	r3, #0
    3366:	d042      	beq.n	33ee <updateSOC()+0x156>
    if (settings.cursens == Analoguedual) {
    3368:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    336c:	2b01      	cmp	r3, #1
    336e:	d078      	beq.n	3462 <updateSOC()+0x1ca>
    if (settings.cursens == Analoguesing) {
    3370:	2b03      	cmp	r3, #3
    3372:	f000 808a 	beq.w	348a <updateSOC()+0x1f2>
    if (settings.cursens == Canbus) {
    3376:	2b02      	cmp	r3, #2
    3378:	f000 8082 	beq.w	3480 <updateSOC()+0x1e8>
    337c:	2102      	movs	r1, #2
    337e:	486c      	ldr	r0, [pc, #432]	; (3530 <updateSOC()+0x298>)
    3380:	f008 fe7e 	bl	c080 <usb_serial_write>
    SERIALCONSOLE.print(currentact);
    3384:	4b6b      	ldr	r3, [pc, #428]	; (3534 <updateSOC()+0x29c>)
    3386:	6818      	ldr	r0, [r3, #0]
    3388:	f009 fb36 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    338c:	2402      	movs	r4, #2
    338e:	4602      	mov	r2, r0
    3390:	460b      	mov	r3, r1
    3392:	9400      	str	r4, [sp, #0]
    3394:	4868      	ldr	r0, [pc, #416]	; (3538 <updateSOC()+0x2a0>)
    3396:	f006 f94f 	bl	9638 <Print::printFloat(double, unsigned char)>
    339a:	4621      	mov	r1, r4
    339c:	4867      	ldr	r0, [pc, #412]	; (353c <updateSOC()+0x2a4>)
    339e:	f008 fe6f 	bl	c080 <usb_serial_write>
    33a2:	4621      	mov	r1, r4
    33a4:	4862      	ldr	r0, [pc, #392]	; (3530 <updateSOC()+0x298>)
    33a6:	f008 fe6b 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    33aa:	6829      	ldr	r1, [r5, #0]
    33ac:	4862      	ldr	r0, [pc, #392]	; (3538 <updateSOC()+0x2a0>)
    33ae:	f006 f919 	bl	95e4 <Print::print(long)>
    33b2:	2106      	movs	r1, #6
    33b4:	4862      	ldr	r0, [pc, #392]	; (3540 <updateSOC()+0x2a8>)
    33b6:	f008 fe63 	bl	c080 <usb_serial_write>
    SERIALCONSOLE.print(ampsecond * 0.27777777777778, 2);
    33ba:	6830      	ldr	r0, [r6, #0]
    33bc:	495a      	ldr	r1, [pc, #360]	; (3528 <updateSOC()+0x290>)
    33be:	f009 fd3f 	bl	ce40 <__aeabi_fmul>
    33c2:	f009 fb19 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    33c6:	9400      	str	r4, [sp, #0]
    33c8:	4602      	mov	r2, r0
    33ca:	460b      	mov	r3, r1
    33cc:	485a      	ldr	r0, [pc, #360]	; (3538 <updateSOC()+0x2a0>)
    33ce:	f006 f933 	bl	9638 <Print::printFloat(double, unsigned char)>
    33d2:	485c      	ldr	r0, [pc, #368]	; (3544 <updateSOC()+0x2ac>)
    33d4:	2103      	movs	r1, #3
}
    33d6:	b004      	add	sp, #16
    33d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    33dc:	f008 be50 	b.w	c080 <usb_serial_write>
  if (SOC < 0) {
    33e0:	2800      	cmp	r0, #0
    SOC = 0;  //reset SOC this way the can messages remain in range for other devices. Ampseconds will keep counting.
    33e2:	bfbc      	itt	lt
    33e4:	2300      	movlt	r3, #0
    33e6:	602b      	strlt	r3, [r5, #0]
  if (debug != 0) {
    33e8:	683b      	ldr	r3, [r7, #0]
    33ea:	2b00      	cmp	r3, #0
    33ec:	d1bc      	bne.n	3368 <updateSOC()+0xd0>
}
    33ee:	b004      	add	sp, #16
    33f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    33f4:	f8d6 9000 	ldr.w	r9, [r6]
    33f8:	f8d4 805c 	ldr.w	r8, [r4, #92]	; 0x5c
    33fc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
    3400:	e790      	b.n	3324 <updateSOC()+0x8c>
      if (SOCmem == 0) {
    3402:	4b51      	ldr	r3, [pc, #324]	; (3548 <updateSOC()+0x2b0>)
    3404:	681b      	ldr	r3, [r3, #0]
    3406:	2b00      	cmp	r3, #0
    3408:	d049      	beq.n	349e <updateSOC()+0x206>
    340a:	4f44      	ldr	r7, [pc, #272]	; (351c <updateSOC()+0x284>)
      SOCset = 1;
    340c:	2301      	movs	r3, #1
    340e:	f8c8 3000 	str.w	r3, [r8]
    3412:	e75a      	b.n	32ca <updateSOC()+0x32>
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    3414:	4842      	ldr	r0, [pc, #264]	; (3520 <updateSOC()+0x288>)
    3416:	f7fe fa89 	bl	192c <BMSModuleManager::getLowCellVolt()>
    341a:	4942      	ldr	r1, [pc, #264]	; (3524 <updateSOC()+0x28c>)
    341c:	6f65      	ldr	r5, [r4, #116]	; 0x74
    341e:	6f26      	ldr	r6, [r4, #112]	; 0x70
    3420:	f009 fd0e 	bl	ce40 <__aeabi_fmul>
    3424:	f009 fef8 	bl	d218 <__aeabi_f2uiz>
    3428:	462a      	mov	r2, r5
    342a:	6fa5      	ldr	r5, [r4, #120]	; 0x78
    342c:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    342e:	9500      	str	r5, [sp, #0]
    3430:	4633      	mov	r3, r6
    3432:	b280      	uxth	r0, r0
    3434:	f7fe ffd4 	bl	23e0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    3438:	4d34      	ldr	r5, [pc, #208]	; (350c <updateSOC()+0x274>)
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    343a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    343c:	6028      	str	r0, [r5, #0]
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    343e:	fb03 f000 	mul.w	r0, r3, r0
    3442:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3444:	4e32      	ldr	r6, [pc, #200]	; (3510 <updateSOC()+0x278>)
    3446:	fb03 f000 	mul.w	r0, r3, r0
    344a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    344e:	0040      	lsls	r0, r0, #1
    3450:	f009 fca2 	bl	cd98 <__aeabi_i2f>
    3454:	4934      	ldr	r1, [pc, #208]	; (3528 <updateSOC()+0x290>)
    3456:	f009 fda7 	bl	cfa8 <__aeabi_fdiv>
    SOCreset = 0;
    345a:	2300      	movs	r3, #0
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    345c:	6030      	str	r0, [r6, #0]
    SOCreset = 0;
    345e:	603b      	str	r3, [r7, #0]
    3460:	e725      	b.n	32ae <updateSOC()+0x16>
      if (sensor == 1) {
    3462:	4b3a      	ldr	r3, [pc, #232]	; (354c <updateSOC()+0x2b4>)
    3464:	681b      	ldr	r3, [r3, #0]
    3466:	2b01      	cmp	r3, #1
    3468:	bf0c      	ite	eq
    346a:	4839      	ldreq	r0, [pc, #228]	; (3550 <updateSOC()+0x2b8>)
    346c:	4839      	ldrne	r0, [pc, #228]	; (3554 <updateSOC()+0x2bc>)
    346e:	210a      	movs	r1, #10
    3470:	f008 fe06 	bl	c080 <usb_serial_write>
    if (settings.cursens == Analoguesing) {
    3474:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    3478:	2b03      	cmp	r3, #3
    347a:	f47f af7c 	bne.w	3376 <updateSOC()+0xde>
    347e:	e004      	b.n	348a <updateSOC()+0x1f2>
    3480:	2107      	movs	r1, #7
    3482:	4835      	ldr	r0, [pc, #212]	; (3558 <updateSOC()+0x2c0>)
    3484:	f008 fdfc 	bl	c080 <usb_serial_write>
    3488:	e778      	b.n	337c <updateSOC()+0xe4>
    348a:	4834      	ldr	r0, [pc, #208]	; (355c <updateSOC()+0x2c4>)
    348c:	2110      	movs	r1, #16
    348e:	f008 fdf7 	bl	c080 <usb_serial_write>
    if (settings.cursens == Canbus) {
    3492:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    3496:	2b02      	cmp	r3, #2
    3498:	f47f af70 	bne.w	337c <updateSOC()+0xe4>
    349c:	e7f0      	b.n	3480 <updateSOC()+0x1e8>
        SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    349e:	4820      	ldr	r0, [pc, #128]	; (3520 <updateSOC()+0x288>)
    34a0:	f7fe fa44 	bl	192c <BMSModuleManager::getLowCellVolt()>
    34a4:	491f      	ldr	r1, [pc, #124]	; (3524 <updateSOC()+0x28c>)
    34a6:	f009 fccb 	bl	ce40 <__aeabi_fmul>
    34aa:	f009 feb5 	bl	d218 <__aeabi_f2uiz>
    34ae:	6fa7      	ldr	r7, [r4, #120]	; 0x78
    34b0:	6f62      	ldr	r2, [r4, #116]	; 0x74
    34b2:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    34b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    34b6:	9700      	str	r7, [sp, #0]
    34b8:	b280      	uxth	r0, r0
    34ba:	f7fe ff91 	bl	23e0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
        ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    34be:	6de3      	ldr	r3, [r4, #92]	; 0x5c
        SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    34c0:	6028      	str	r0, [r5, #0]
        ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    34c2:	fb03 f000 	mul.w	r0, r3, r0
    34c6:	6da3      	ldr	r3, [r4, #88]	; 0x58
        if (debug != 0) {
    34c8:	4f14      	ldr	r7, [pc, #80]	; (351c <updateSOC()+0x284>)
        ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    34ca:	fb03 f000 	mul.w	r0, r3, r0
    34ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    34d2:	0040      	lsls	r0, r0, #1
    34d4:	f009 fc60 	bl	cd98 <__aeabi_i2f>
    34d8:	4913      	ldr	r1, [pc, #76]	; (3528 <updateSOC()+0x290>)
    34da:	f009 fd65 	bl	cfa8 <__aeabi_fdiv>
        if (debug != 0) {
    34de:	683b      	ldr	r3, [r7, #0]
        ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    34e0:	6030      	str	r0, [r6, #0]
        if (debug != 0) {
    34e2:	2b00      	cmp	r3, #0
    34e4:	d092      	beq.n	340c <updateSOC()+0x174>
    34e6:	2102      	movs	r1, #2
    34e8:	4811      	ldr	r0, [pc, #68]	; (3530 <updateSOC()+0x298>)
    34ea:	f008 fdc9 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    34ee:	4812      	ldr	r0, [pc, #72]	; (3538 <updateSOC()+0x2a0>)
    34f0:	f006 f880 	bl	95f4 <Print::println()>
    34f4:	2159      	movs	r1, #89	; 0x59
    34f6:	481a      	ldr	r0, [pc, #104]	; (3560 <updateSOC()+0x2c8>)
    34f8:	f008 fdc2 	bl	c080 <usb_serial_write>
    34fc:	480e      	ldr	r0, [pc, #56]	; (3538 <updateSOC()+0x2a0>)
    34fe:	f006 f879 	bl	95f4 <Print::println()>
    3502:	e783      	b.n	340c <updateSOC()+0x174>
    3504:	1fff91c8 	.word	0x1fff91c8
    3508:	1fffd0d8 	.word	0x1fffd0d8
    350c:	1fff8828 	.word	0x1fff8828
    3510:	1fff91e4 	.word	0x1fff91e4
    3514:	1fff91cc 	.word	0x1fff91cc
    3518:	1fffd3c0 	.word	0x1fffd3c0
    351c:	1fff884c 	.word	0x1fff884c
    3520:	1fff91f0 	.word	0x1fff91f0
    3524:	447a0000 	.word	0x447a0000
    3528:	3e8e38e4 	.word	0x3e8e38e4
    352c:	42c80000 	.word	0x42c80000
    3530:	00014ea8 	.word	0x00014ea8
    3534:	1fffcfc4 	.word	0x1fffcfc4
    3538:	1fff89fc 	.word	0x1fff89fc
    353c:	00014234 	.word	0x00014234
    3540:	000142d0 	.word	0x000142d0
    3544:	000142d8 	.word	0x000142d8
    3548:	1fff91c4 	.word	0x1fff91c4
    354c:	1fff8878 	.word	0x1fff8878
    3550:	0001429c 	.word	0x0001429c
    3554:	000142a8 	.word	0x000142a8
    3558:	000142c8 	.word	0x000142c8
    355c:	000142b4 	.word	0x000142b4
    3560:	00014240 	.word	0x00014240

00003564 <Prechargecon()>:
void Prechargecon() {
    3564:	b530      	push	{r4, r5, lr}
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    3566:	2011      	movs	r0, #17
void Prechargecon() {
    3568:	b083      	sub	sp, #12
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    356a:	f006 ff3b 	bl	a3e4 <digitalRead>
    356e:	2801      	cmp	r0, #1
    3570:	d004      	beq.n	357c <Prechargecon()+0x18>
    3572:	2012      	movs	r0, #18
    3574:	f006 ff36 	bl	a3e4 <digitalRead>
    3578:	2801      	cmp	r0, #1
    357a:	d122      	bne.n	35c2 <Prechargecon()+0x5e>
    digitalWrite(OUT4, HIGH);  //Negative Contactor Close
    357c:	2101      	movs	r1, #1
    357e:	2015      	movs	r0, #21
    3580:	f006 ff0a 	bl	a398 <digitalWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3584:	4b2a      	ldr	r3, [pc, #168]	; (3630 <Prechargecon()+0xcc>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    3586:	4a2b      	ldr	r2, [pc, #172]	; (3634 <Prechargecon()+0xd0>)
    3588:	4c2b      	ldr	r4, [pc, #172]	; (3638 <Prechargecon()+0xd4>)
    358a:	681b      	ldr	r3, [r3, #0]
    contctrl = 2;
    358c:	4d2b      	ldr	r5, [pc, #172]	; (363c <Prechargecon()+0xd8>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    358e:	6811      	ldr	r1, [r2, #0]
    3590:	9301      	str	r3, [sp, #4]
    contctrl = 2;
    3592:	2202      	movs	r2, #2
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    3594:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    contctrl = 2;
    3598:	602a      	str	r2, [r5, #0]
	return ret;
    359a:	9a01      	ldr	r2, [sp, #4]
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    359c:	440b      	add	r3, r1
    359e:	4293      	cmp	r3, r2
    35a0:	d808      	bhi.n	35b4 <Prechargecon()+0x50>
    35a2:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    35a6:	f009 fbf7 	bl	cd98 <__aeabi_i2f>
    35aa:	4b25      	ldr	r3, [pc, #148]	; (3640 <Prechargecon()+0xdc>)
    35ac:	6819      	ldr	r1, [r3, #0]
    35ae:	f009 fde5 	bl	d17c <__aeabi_fcmplt>
    35b2:	b1d0      	cbz	r0, 35ea <Prechargecon()+0x86>
      digitalWrite(OUT2, HIGH);  //precharge
    35b4:	2101      	movs	r1, #1
      digitalWrite(OUT2, LOW);
    35b6:	200c      	movs	r0, #12
}
    35b8:	b003      	add	sp, #12
    35ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    35be:	f006 beeb 	b.w	a398 <digitalWrite>
    digitalWrite(OUT1, LOW);
    35c2:	2100      	movs	r1, #0
    35c4:	200b      	movs	r0, #11
    35c6:	f006 fee7 	bl	a398 <digitalWrite>
    digitalWrite(OUT2, LOW);
    35ca:	2100      	movs	r1, #0
    35cc:	200c      	movs	r0, #12
    35ce:	f006 fee3 	bl	a398 <digitalWrite>
    digitalWrite(OUT4, LOW);
    35d2:	2100      	movs	r1, #0
    35d4:	2015      	movs	r0, #21
    35d6:	f006 fedf 	bl	a398 <digitalWrite>
    bmsstatus = Ready;
    35da:	491a      	ldr	r1, [pc, #104]	; (3644 <Prechargecon()+0xe0>)
    contctrl = 0;
    35dc:	4b17      	ldr	r3, [pc, #92]	; (363c <Prechargecon()+0xd8>)
    bmsstatus = Ready;
    35de:	2001      	movs	r0, #1
    contctrl = 0;
    35e0:	2200      	movs	r2, #0
    bmsstatus = Ready;
    35e2:	7008      	strb	r0, [r1, #0]
    contctrl = 0;
    35e4:	601a      	str	r2, [r3, #0]
}
    35e6:	b003      	add	sp, #12
    35e8:	bd30      	pop	{r4, r5, pc}
      digitalWrite(OUT1, HIGH);  //Positive Contactor Close
    35ea:	2101      	movs	r1, #1
    35ec:	200b      	movs	r0, #11
    35ee:	f006 fed3 	bl	a398 <digitalWrite>
      if (settings.ChargerDirect == 1) {
    35f2:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
      contctrl = 3;
    35f6:	2403      	movs	r4, #3
    35f8:	602c      	str	r4, [r5, #0]
      if (settings.ChargerDirect == 1) {
    35fa:	b14b      	cbz	r3, 3610 <Prechargecon()+0xac>
        bmsstatus = Drive;
    35fc:	4b11      	ldr	r3, [pc, #68]	; (3644 <Prechargecon()+0xe0>)
    35fe:	2202      	movs	r2, #2
    3600:	701a      	strb	r2, [r3, #0]
      digitalWrite(OUT2, LOW);
    3602:	2100      	movs	r1, #0
    3604:	200c      	movs	r0, #12
}
    3606:	b003      	add	sp, #12
    3608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    360c:	f006 bec4 	b.w	a398 <digitalWrite>
        if (digitalRead(IN3) == HIGH) {
    3610:	2012      	movs	r0, #18
    3612:	f006 fee7 	bl	a3e4 <digitalRead>
    3616:	2801      	cmp	r0, #1
          bmsstatus = Charge;
    3618:	bf08      	it	eq
    361a:	4b0a      	ldreq	r3, [pc, #40]	; (3644 <Prechargecon()+0xe0>)
        if (digitalRead(IN1) == HIGH) {
    361c:	f04f 0011 	mov.w	r0, #17
          bmsstatus = Charge;
    3620:	bf08      	it	eq
    3622:	701c      	strbeq	r4, [r3, #0]
        if (digitalRead(IN1) == HIGH) {
    3624:	f006 fede 	bl	a3e4 <digitalRead>
    3628:	2801      	cmp	r0, #1
    362a:	d1ea      	bne.n	3602 <Prechargecon()+0x9e>
    362c:	e7e6      	b.n	35fc <Prechargecon()+0x98>
    362e:	bf00      	nop
    3630:	1fffd3c0 	.word	0x1fffd3c0
    3634:	1fff91b8 	.word	0x1fff91b8
    3638:	1fffd0d8 	.word	0x1fffd0d8
    363c:	1fffcfb0 	.word	0x1fffcfb0
    3640:	1fffcfc4 	.word	0x1fffcfc4
    3644:	1fffcf34 	.word	0x1fffcf34

00003648 <contcon()>:
void contcon() {
    3648:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (contctrl != contstat)  //check for contactor request change
    364a:	4e71      	ldr	r6, [pc, #452]	; (3810 <contcon()+0x1c8>)
    364c:	4c71      	ldr	r4, [pc, #452]	; (3814 <contcon()+0x1cc>)
    364e:	6833      	ldr	r3, [r6, #0]
    3650:	6825      	ldr	r5, [r4, #0]
    3652:	42ab      	cmp	r3, r5
void contcon() {
    3654:	b087      	sub	sp, #28
  if (contctrl != contstat)  //check for contactor request change
    3656:	d02d      	beq.n	36b4 <contcon()+0x6c>
    if ((contctrl & 1) == 0) {
    3658:	f013 0101 	ands.w	r1, r3, #1
    365c:	d04b      	beq.n	36f6 <contcon()+0xae>
    if ((contctrl & 2) == 0) {
    365e:	f013 0102 	ands.w	r1, r3, #2
    3662:	d05f      	beq.n	3724 <contcon()+0xdc>
    if ((contctrl & 4) == 0) {
    3664:	f013 0104 	ands.w	r1, r3, #4
    3668:	d051      	beq.n	370e <contcon()+0xc6>
    if ((contctrl & 1) == 1) {
    366a:	07da      	lsls	r2, r3, #31
    366c:	d50e      	bpl.n	368c <contcon()+0x44>
      if ((contstat & 1) != 1) {
    366e:	6822      	ldr	r2, [r4, #0]
    3670:	07d7      	lsls	r7, r2, #31
    3672:	d40b      	bmi.n	368c <contcon()+0x44>
        if (conttimer1 == 0) {
    3674:	4d68      	ldr	r5, [pc, #416]	; (3818 <contcon()+0x1d0>)
    3676:	682a      	ldr	r2, [r5, #0]
    3678:	2a00      	cmp	r2, #0
    367a:	f000 8093 	beq.w	37a4 <contcon()+0x15c>
    367e:	4b67      	ldr	r3, [pc, #412]	; (381c <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3680:	681b      	ldr	r3, [r3, #0]
    3682:	9301      	str	r3, [sp, #4]
	return ret;
    3684:	9b01      	ldr	r3, [sp, #4]
        if (conttimer1 < millis()) {
    3686:	4293      	cmp	r3, r2
    3688:	d87f      	bhi.n	378a <contcon()+0x142>
    if ((contctrl & 2) == 2) {
    368a:	6833      	ldr	r3, [r6, #0]
    368c:	079d      	lsls	r5, r3, #30
    368e:	d414      	bmi.n	36ba <contcon()+0x72>
    if ((contctrl & 4) == 4) {
    3690:	0759      	lsls	r1, r3, #29
    3692:	d522      	bpl.n	36da <contcon()+0x92>
      if ((contstat & 4) != 4) {
    3694:	6822      	ldr	r2, [r4, #0]
    3696:	0752      	lsls	r2, r2, #29
    3698:	d40d      	bmi.n	36b6 <contcon()+0x6e>
        if (conttimer3 == 0) {
    369a:	4f61      	ldr	r7, [pc, #388]	; (3820 <contcon()+0x1d8>)
    369c:	683a      	ldr	r2, [r7, #0]
    369e:	2a00      	cmp	r2, #0
    36a0:	f000 809e 	beq.w	37e0 <contcon()+0x198>
    36a4:	4b5d      	ldr	r3, [pc, #372]	; (381c <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    36a6:	681b      	ldr	r3, [r3, #0]
    36a8:	9305      	str	r3, [sp, #20]
	return ret;
    36aa:	9b05      	ldr	r3, [sp, #20]
        if (conttimer3 < millis()) {
    36ac:	4293      	cmp	r3, r2
    36ae:	f200 8086 	bhi.w	37be <contcon()+0x176>
  if (contctrl == 0) {
    36b2:	6835      	ldr	r5, [r6, #0]
    36b4:	b1a5      	cbz	r5, 36e0 <contcon()+0x98>
}
    36b6:	b007      	add	sp, #28
    36b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((contstat & 2) != 2) {
    36ba:	6822      	ldr	r2, [r4, #0]
    36bc:	0790      	lsls	r0, r2, #30
    36be:	d43d      	bmi.n	373c <contcon()+0xf4>
        if (conttimer2 == 0) {
    36c0:	4d58      	ldr	r5, [pc, #352]	; (3824 <contcon()+0x1dc>)
    36c2:	682a      	ldr	r2, [r5, #0]
    36c4:	2a00      	cmp	r2, #0
    36c6:	d049      	beq.n	375c <contcon()+0x114>
    36c8:	4b54      	ldr	r3, [pc, #336]	; (381c <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    36ca:	681b      	ldr	r3, [r3, #0]
    36cc:	9303      	str	r3, [sp, #12]
	return ret;
    36ce:	9b03      	ldr	r3, [sp, #12]
        if (conttimer2 < millis()) {
    36d0:	429a      	cmp	r2, r3
    36d2:	d336      	bcc.n	3742 <contcon()+0xfa>
    if ((contctrl & 4) == 4) {
    36d4:	6833      	ldr	r3, [r6, #0]
    36d6:	0759      	lsls	r1, r3, #29
    36d8:	d4dc      	bmi.n	3694 <contcon()+0x4c>
    36da:	461d      	mov	r5, r3
  if (contctrl == 0) {
    36dc:	2d00      	cmp	r5, #0
    36de:	d1ea      	bne.n	36b6 <contcon()+0x6e>
    analogWrite(OUT5, 0);
    36e0:	4629      	mov	r1, r5
    36e2:	2016      	movs	r0, #22
    36e4:	f006 fcdc 	bl	a0a0 <analogWrite>
    analogWrite(OUT6, 0);
    36e8:	4629      	mov	r1, r5
    36ea:	2017      	movs	r0, #23
}
    36ec:	b007      	add	sp, #28
    36ee:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    analogWrite(OUT6, 0);
    36f2:	f006 bcd5 	b.w	a0a0 <analogWrite>
      analogWrite(OUT5, 0);
    36f6:	2016      	movs	r0, #22
    36f8:	f006 fcd2 	bl	a0a0 <analogWrite>
      contstat = contstat & 254;
    36fc:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    36fe:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 254;
    3700:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if ((contctrl & 2) == 0) {
    3704:	f013 0102 	ands.w	r1, r3, #2
      contstat = contstat & 254;
    3708:	6022      	str	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    370a:	d1ab      	bne.n	3664 <contcon()+0x1c>
    370c:	e00a      	b.n	3724 <contcon()+0xdc>
      analogWrite(OUT7, 0);
    370e:	2005      	movs	r0, #5
    3710:	f006 fcc6 	bl	a0a0 <analogWrite>
      contstat = contstat & 251;
    3714:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    3716:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 251;
    3718:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    371c:	6022      	str	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    371e:	07da      	lsls	r2, r3, #31
    3720:	d5b4      	bpl.n	368c <contcon()+0x44>
    3722:	e7a4      	b.n	366e <contcon()+0x26>
      analogWrite(OUT6, 0);
    3724:	2017      	movs	r0, #23
    3726:	f006 fcbb 	bl	a0a0 <analogWrite>
      contstat = contstat & 253;
    372a:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    372c:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 253;
    372e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    if ((contctrl & 4) == 0) {
    3732:	f013 0104 	ands.w	r1, r3, #4
      contstat = contstat & 253;
    3736:	6022      	str	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    3738:	d197      	bne.n	366a <contcon()+0x22>
    373a:	e7e8      	b.n	370e <contcon()+0xc6>
    if ((contctrl & 4) == 4) {
    373c:	075b      	lsls	r3, r3, #29
    373e:	d4aa      	bmi.n	3696 <contcon()+0x4e>
    3740:	e7b9      	b.n	36b6 <contcon()+0x6e>
          analogWrite(OUT6, settings.conthold);
    3742:	4b39      	ldr	r3, [pc, #228]	; (3828 <contcon()+0x1e0>)
    3744:	2017      	movs	r0, #23
    3746:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    374a:	f006 fca9 	bl	a0a0 <analogWrite>
          contstat = contstat | 2;
    374e:	6823      	ldr	r3, [r4, #0]
          conttimer2 = 0;
    3750:	2200      	movs	r2, #0
          contstat = contstat | 2;
    3752:	f043 0302 	orr.w	r3, r3, #2
    3756:	6023      	str	r3, [r4, #0]
          conttimer2 = 0;
    3758:	602a      	str	r2, [r5, #0]
    375a:	e7bb      	b.n	36d4 <contcon()+0x8c>
          Serial.println();
    375c:	4833      	ldr	r0, [pc, #204]	; (382c <contcon()+0x1e4>)
    375e:	f005 ff49 	bl	95f4 <Print::println()>
    3762:	210c      	movs	r1, #12
    3764:	4832      	ldr	r0, [pc, #200]	; (3830 <contcon()+0x1e8>)
    3766:	f008 fc8b 	bl	c080 <usb_serial_write>
    376a:	4830      	ldr	r0, [pc, #192]	; (382c <contcon()+0x1e4>)
    376c:	f005 ff42 	bl	95f4 <Print::println()>
          analogWrite(OUT6, 255);
    3770:	21ff      	movs	r1, #255	; 0xff
    3772:	2017      	movs	r0, #23
    3774:	f006 fc94 	bl	a0a0 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3778:	4b28      	ldr	r3, [pc, #160]	; (381c <contcon()+0x1d4>)
          conttimer2 = millis() + pulltime;
    377a:	492e      	ldr	r1, [pc, #184]	; (3834 <contcon()+0x1ec>)
    377c:	681a      	ldr	r2, [r3, #0]
    377e:	9202      	str	r2, [sp, #8]
	return ret;
    3780:	9a02      	ldr	r2, [sp, #8]
    3782:	6809      	ldr	r1, [r1, #0]
    3784:	440a      	add	r2, r1
    3786:	602a      	str	r2, [r5, #0]
    3788:	e79f      	b.n	36ca <contcon()+0x82>
          analogWrite(OUT5, settings.conthold);
    378a:	4b27      	ldr	r3, [pc, #156]	; (3828 <contcon()+0x1e0>)
    378c:	2016      	movs	r0, #22
    378e:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    3792:	f006 fc85 	bl	a0a0 <analogWrite>
          contstat = contstat | 1;
    3796:	6823      	ldr	r3, [r4, #0]
          conttimer1 = 0;
    3798:	2200      	movs	r2, #0
          contstat = contstat | 1;
    379a:	f043 0301 	orr.w	r3, r3, #1
    379e:	6023      	str	r3, [r4, #0]
          conttimer1 = 0;
    37a0:	602a      	str	r2, [r5, #0]
    37a2:	e772      	b.n	368a <contcon()+0x42>
          analogWrite(OUT5, 255);
    37a4:	21ff      	movs	r1, #255	; 0xff
    37a6:	2016      	movs	r0, #22
    37a8:	f006 fc7a 	bl	a0a0 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    37ac:	4b1b      	ldr	r3, [pc, #108]	; (381c <contcon()+0x1d4>)
          conttimer1 = millis() + pulltime;
    37ae:	4921      	ldr	r1, [pc, #132]	; (3834 <contcon()+0x1ec>)
    37b0:	681a      	ldr	r2, [r3, #0]
    37b2:	9200      	str	r2, [sp, #0]
	return ret;
    37b4:	9a00      	ldr	r2, [sp, #0]
    37b6:	6809      	ldr	r1, [r1, #0]
    37b8:	440a      	add	r2, r1
    37ba:	602a      	str	r2, [r5, #0]
    37bc:	e760      	b.n	3680 <contcon()+0x38>
          analogWrite(OUT7, settings.conthold);
    37be:	4b1a      	ldr	r3, [pc, #104]	; (3828 <contcon()+0x1e0>)
    37c0:	2005      	movs	r0, #5
    37c2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    37c6:	f006 fc6b 	bl	a0a0 <analogWrite>
          contstat = contstat | 4;
    37ca:	6823      	ldr	r3, [r4, #0]
  if (contctrl == 0) {
    37cc:	6835      	ldr	r5, [r6, #0]
          conttimer3 = 0;
    37ce:	2200      	movs	r2, #0
          contstat = contstat | 4;
    37d0:	f043 0304 	orr.w	r3, r3, #4
    37d4:	6023      	str	r3, [r4, #0]
          conttimer3 = 0;
    37d6:	603a      	str	r2, [r7, #0]
  if (contctrl == 0) {
    37d8:	2d00      	cmp	r5, #0
    37da:	f47f af6c 	bne.w	36b6 <contcon()+0x6e>
    37de:	e77f      	b.n	36e0 <contcon()+0x98>
          Serial.println();
    37e0:	4812      	ldr	r0, [pc, #72]	; (382c <contcon()+0x1e4>)
    37e2:	f005 ff07 	bl	95f4 <Print::println()>
    37e6:	210c      	movs	r1, #12
    37e8:	4813      	ldr	r0, [pc, #76]	; (3838 <contcon()+0x1f0>)
    37ea:	f008 fc49 	bl	c080 <usb_serial_write>
    37ee:	480f      	ldr	r0, [pc, #60]	; (382c <contcon()+0x1e4>)
    37f0:	f005 ff00 	bl	95f4 <Print::println()>
          analogWrite(OUT7, 255);
    37f4:	21ff      	movs	r1, #255	; 0xff
    37f6:	2005      	movs	r0, #5
    37f8:	f006 fc52 	bl	a0a0 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    37fc:	4b07      	ldr	r3, [pc, #28]	; (381c <contcon()+0x1d4>)
          conttimer3 = millis() + pulltime;
    37fe:	490d      	ldr	r1, [pc, #52]	; (3834 <contcon()+0x1ec>)
    3800:	681a      	ldr	r2, [r3, #0]
    3802:	9204      	str	r2, [sp, #16]
	return ret;
    3804:	9a04      	ldr	r2, [sp, #16]
    3806:	6809      	ldr	r1, [r1, #0]
    3808:	440a      	add	r2, r1
    380a:	603a      	str	r2, [r7, #0]
    380c:	e74b      	b.n	36a6 <contcon()+0x5e>
    380e:	bf00      	nop
    3810:	1fffcfb0 	.word	0x1fffcfb0
    3814:	1fffcfb4 	.word	0x1fffcfb4
    3818:	1fffcfb8 	.word	0x1fffcfb8
    381c:	1fffd3c0 	.word	0x1fffd3c0
    3820:	1fffcfc0 	.word	0x1fffcfc0
    3824:	1fffcfbc 	.word	0x1fffcfbc
    3828:	1fffd0d8 	.word	0x1fffd0d8
    382c:	1fff89fc 	.word	0x1fff89fc
    3830:	000142dc 	.word	0x000142dc
    3834:	1fff8868 	.word	0x1fff8868
    3838:	000142ec 	.word	0x000142ec

0000383c <calcur()>:
void calcur() {
    383c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  adc->adc0->startContinuous(ACUR1);
    3840:	4e54      	ldr	r6, [pc, #336]	; (3994 <calcur()+0x158>)
  sensor = 1;
    3842:	f8df a154 	ldr.w	sl, [pc, #340]	; 3998 <calcur()+0x15c>
  adc->adc0->startContinuous(ACUR1);
    3846:	6833      	ldr	r3, [r6, #0]
  x = 0;
    3848:	f8df 9150 	ldr.w	r9, [pc, #336]	; 399c <calcur()+0x160>
  adc->adc0->startContinuous(ACUR1);
    384c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3850:	4d53      	ldr	r5, [pc, #332]	; (39a0 <calcur()+0x164>)
    3852:	210f      	movs	r1, #15
    3854:	f005 fb30 	bl	8eb8 <ADC_Module::startContinuous(unsigned char)>
  sensor = 1;
    3858:	2301      	movs	r3, #1
    385a:	f8ca 3000 	str.w	r3, [sl]
    385e:	4851      	ldr	r0, [pc, #324]	; (39a4 <calcur()+0x168>)
  x = 0;
    3860:	2300      	movs	r3, #0
    3862:	2122      	movs	r1, #34	; 0x22
    3864:	f8c9 3000 	str.w	r3, [r9]
    3868:	f008 fc0a 	bl	c080 <usb_serial_write>
  while (x < 20) {
    386c:	f8d9 3000 	ldr.w	r3, [r9]
    3870:	2b13      	cmp	r3, #19
    3872:	dc21      	bgt.n	38b8 <calcur()+0x7c>
    3874:	4f4c      	ldr	r7, [pc, #304]	; (39a8 <calcur()+0x16c>)
    settings.offset1 = settings.offset1 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    3876:	f640 48e4 	movw	r8, #3300	; 0xce4
    387a:	6833      	ldr	r3, [r6, #0]
    387c:	f8b5 b088 	ldrh.w	fp, [r5, #136]	; 0x88
    3880:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3884:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3886:	691c      	ldr	r4, [r3, #16]
    3888:	f005 f85e 	bl	8948 <ADC_Module::getMaxValue()>
    388c:	b2a4      	uxth	r4, r4
    388e:	2101      	movs	r1, #1
    3890:	fb08 f404 	mul.w	r4, r8, r4
    3894:	fbb4 f4f0 	udiv	r4, r4, r0
    3898:	4638      	mov	r0, r7
    389a:	44a3      	add	fp, r4
    389c:	f8a5 b088 	strh.w	fp, [r5, #136]	; 0x88
    38a0:	f008 fbee 	bl	c080 <usb_serial_write>
    delay(100);
    38a4:	2064      	movs	r0, #100	; 0x64
    38a6:	f006 fe07 	bl	a4b8 <delay>
    x++;
    38aa:	f8d9 3000 	ldr.w	r3, [r9]
    38ae:	3301      	adds	r3, #1
  while (x < 20) {
    38b0:	2b13      	cmp	r3, #19
    x++;
    38b2:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    38b6:	dde0      	ble.n	387a <calcur()+0x3e>
  settings.offset1 = settings.offset1 / 21;
    38b8:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    38bc:	493b      	ldr	r1, [pc, #236]	; (39ac <calcur()+0x170>)
	size_t print(int n)				{ return print((long)n); }
    38be:	483c      	ldr	r0, [pc, #240]	; (39b0 <calcur()+0x174>)
    38c0:	fba1 2103 	umull	r2, r1, r1, r3
    38c4:	1a5b      	subs	r3, r3, r1
    38c6:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    38ca:	f3c1 110f 	ubfx	r1, r1, #4, #16
    38ce:	f8a5 1088 	strh.w	r1, [r5, #136]	; 0x88
    38d2:	f005 fe87 	bl	95e4 <Print::print(long)>
    38d6:	211d      	movs	r1, #29
    38d8:	4836      	ldr	r0, [pc, #216]	; (39b4 <calcur()+0x178>)
    38da:	f008 fbd1 	bl	c080 <usb_serial_write>
    38de:	2102      	movs	r1, #2
    38e0:	4835      	ldr	r0, [pc, #212]	; (39b8 <calcur()+0x17c>)
    38e2:	f008 fbcd 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    38e6:	4832      	ldr	r0, [pc, #200]	; (39b0 <calcur()+0x174>)
    38e8:	f005 fe84 	bl	95f4 <Print::println()>
  x = 0;
    38ec:	2300      	movs	r3, #0
    38ee:	f8c9 3000 	str.w	r3, [r9]
  adc->adc0->startContinuous(ACUR2);
    38f2:	6833      	ldr	r3, [r6, #0]
    38f4:	210e      	movs	r1, #14
    38f6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    38fa:	f005 fadd 	bl	8eb8 <ADC_Module::startContinuous(unsigned char)>
  sensor = 2;
    38fe:	2302      	movs	r3, #2
    3900:	4828      	ldr	r0, [pc, #160]	; (39a4 <calcur()+0x168>)
    3902:	f8ca 3000 	str.w	r3, [sl]
    3906:	2122      	movs	r1, #34	; 0x22
    3908:	f008 fbba 	bl	c080 <usb_serial_write>
  while (x < 20) {
    390c:	f8d9 3000 	ldr.w	r3, [r9]
    3910:	2b13      	cmp	r3, #19
    3912:	dc22      	bgt.n	395a <calcur()+0x11e>
    3914:	f8df 8090 	ldr.w	r8, [pc, #144]	; 39a8 <calcur()+0x16c>
    settings.offset2 = settings.offset2 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    3918:	f640 47e4 	movw	r7, #3300	; 0xce4
    391c:	6833      	ldr	r3, [r6, #0]
    391e:	f8b5 a08a 	ldrh.w	sl, [r5, #138]	; 0x8a
    3922:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3926:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3928:	691c      	ldr	r4, [r3, #16]
    392a:	f005 f80d 	bl	8948 <ADC_Module::getMaxValue()>
    392e:	b2a4      	uxth	r4, r4
    3930:	2101      	movs	r1, #1
    3932:	fb07 f404 	mul.w	r4, r7, r4
    3936:	fbb4 f4f0 	udiv	r4, r4, r0
    393a:	4640      	mov	r0, r8
    393c:	44a2      	add	sl, r4
    393e:	f8a5 a08a 	strh.w	sl, [r5, #138]	; 0x8a
    3942:	f008 fb9d 	bl	c080 <usb_serial_write>
    delay(100);
    3946:	2064      	movs	r0, #100	; 0x64
    3948:	f006 fdb6 	bl	a4b8 <delay>
    x++;
    394c:	f8d9 3000 	ldr.w	r3, [r9]
    3950:	3301      	adds	r3, #1
  while (x < 20) {
    3952:	2b13      	cmp	r3, #19
    x++;
    3954:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    3958:	dde0      	ble.n	391c <calcur()+0xe0>
  settings.offset2 = settings.offset2 / 21;
    395a:	f8b5 308a 	ldrh.w	r3, [r5, #138]	; 0x8a
    395e:	4913      	ldr	r1, [pc, #76]	; (39ac <calcur()+0x170>)
	size_t print(int n)				{ return print((long)n); }
    3960:	4813      	ldr	r0, [pc, #76]	; (39b0 <calcur()+0x174>)
    3962:	fba1 2103 	umull	r2, r1, r1, r3
    3966:	1a5b      	subs	r3, r3, r1
    3968:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    396c:	f3c1 110f 	ubfx	r1, r1, #4, #16
    3970:	f8a5 108a 	strh.w	r1, [r5, #138]	; 0x8a
    3974:	f005 fe36 	bl	95e4 <Print::print(long)>
    3978:	211d      	movs	r1, #29
    397a:	4810      	ldr	r0, [pc, #64]	; (39bc <calcur()+0x180>)
    397c:	f008 fb80 	bl	c080 <usb_serial_write>
    3980:	480d      	ldr	r0, [pc, #52]	; (39b8 <calcur()+0x17c>)
    3982:	2102      	movs	r1, #2
    3984:	f008 fb7c 	bl	c080 <usb_serial_write>
}
    3988:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    398c:	4808      	ldr	r0, [pc, #32]	; (39b0 <calcur()+0x174>)
    398e:	f005 be31 	b.w	95f4 <Print::println()>
    3992:	bf00      	nop
    3994:	1fff91dc 	.word	0x1fff91dc
    3998:	1fff8878 	.word	0x1fff8878
    399c:	1fffd1c8 	.word	0x1fffd1c8
    39a0:	1fffd0d8 	.word	0x1fffd0d8
    39a4:	000142fc 	.word	0x000142fc
    39a8:	00014320 	.word	0x00014320
    39ac:	86186187 	.word	0x86186187
    39b0:	1fff89fc 	.word	0x1fff89fc
    39b4:	00014324 	.word	0x00014324
    39b8:	00014ea8 	.word	0x00014ea8
    39bc:	00014344 	.word	0x00014344

000039c0 <VEcan()>:
{
    39c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (settings.chargertype == Pylon) {
    39c2:	4d9f      	ldr	r5, [pc, #636]	; (3c40 <VEcan()+0x280>)
    39c4:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
    39c8:	2b07      	cmp	r3, #7
    39ca:	f000 815d 	beq.w	3c88 <VEcan()+0x2c8>
    if (storagemode == 0) {
    39ce:	4b9d      	ldr	r3, [pc, #628]	; (3c44 <VEcan()+0x284>)
    msg.id = 0x351;
    39d0:	4c9d      	ldr	r4, [pc, #628]	; (3c48 <VEcan()+0x288>)
    if (storagemode == 0) {
    39d2:	681b      	ldr	r3, [r3, #0]
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    39d4:	6d68      	ldr	r0, [r5, #84]	; 0x54
    msg.id = 0x351;
    39d6:	f240 3151 	movw	r1, #849	; 0x351
    msg.len = 8;
    39da:	2208      	movs	r2, #8
    msg.id = 0x351;
    39dc:	6021      	str	r1, [r4, #0]
    msg.len = 8;
    39de:	71e2      	strb	r2, [r4, #7]
    if (storagemode == 0) {
    39e0:	2b00      	cmp	r3, #0
    39e2:	f000 8128 	beq.w	3c36 <VEcan()+0x276>
      msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    39e6:	f009 f9d7 	bl	cd98 <__aeabi_i2f>
    39ea:	6a29      	ldr	r1, [r5, #32]
    39ec:	4606      	mov	r6, r0
    39ee:	f009 fa27 	bl	ce40 <__aeabi_fmul>
    39f2:	4996      	ldr	r1, [pc, #600]	; (3c4c <VEcan()+0x28c>)
    39f4:	f009 fa24 	bl	ce40 <__aeabi_fmul>
    39f8:	f009 fc0e 	bl	d218 <__aeabi_f2uiz>
    39fc:	b2c2      	uxtb	r2, r0
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    39fe:	7222      	strb	r2, [r4, #8]
    msg.buf[2] = lowByte(chargecurrent);
    3a00:	4a93      	ldr	r2, [pc, #588]	; (3c50 <VEcan()+0x290>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3a02:	69a9      	ldr	r1, [r5, #24]
      msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3a04:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3a08:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = lowByte(chargecurrent);
    3a0a:	8813      	ldrh	r3, [r2, #0]
    3a0c:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = lowByte(discurrent);
    3a0e:	4b91      	ldr	r3, [pc, #580]	; (3c54 <VEcan()+0x294>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3a10:	4630      	mov	r0, r6
    msg.buf[4] = lowByte(discurrent);
    3a12:	881b      	ldrh	r3, [r3, #0]
    3a14:	81a3      	strh	r3, [r4, #12]
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3a16:	f009 fa13 	bl	ce40 <__aeabi_fmul>
    3a1a:	498c      	ldr	r1, [pc, #560]	; (3c4c <VEcan()+0x28c>)
    3a1c:	f009 fa10 	bl	ce40 <__aeabi_fmul>
    3a20:	f009 fbfa 	bl	d218 <__aeabi_f2uiz>
    Can0.write(msg);
    3a24:	4988      	ldr	r1, [pc, #544]	; (3c48 <VEcan()+0x288>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3a26:	4603      	mov	r3, r0
    Can0.write(msg);
    3a28:	488b      	ldr	r0, [pc, #556]	; (3c58 <VEcan()+0x298>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3a2a:	81e3      	strh	r3, [r4, #14]
    Can0.write(msg);
    3a2c:	f004 fd12 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    msg.buf[0] = lowByte(SOC);
    3a30:	4a8a      	ldr	r2, [pc, #552]	; (3c5c <VEcan()+0x29c>)
    Can0.write(msg);
    3a32:	4889      	ldr	r0, [pc, #548]	; (3c58 <VEcan()+0x298>)
    msg.buf[0] = lowByte(SOC);
    3a34:	6813      	ldr	r3, [r2, #0]
    3a36:	8812      	ldrh	r2, [r2, #0]
    3a38:	8122      	strh	r2, [r4, #8]
    msg.buf[4] = lowByte(SOC * 10);
    3a3a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    msg.buf[2] = lowByte(SOH);
    3a3e:	4a88      	ldr	r2, [pc, #544]	; (3c60 <VEcan()+0x2a0>)
    msg.len = 8;
    3a40:	2608      	movs	r6, #8
    msg.buf[4] = lowByte(SOC * 10);
    3a42:	005b      	lsls	r3, r3, #1
    msg.id = 0x355;
    3a44:	f240 3155 	movw	r1, #853	; 0x355
    msg.buf[2] = lowByte(SOH);
    3a48:	8812      	ldrh	r2, [r2, #0]
    msg.id = 0x355;
    3a4a:	6021      	str	r1, [r4, #0]
    msg.buf[6] = 0;
    3a4c:	2700      	movs	r7, #0
    Can0.write(msg);
    3a4e:	497e      	ldr	r1, [pc, #504]	; (3c48 <VEcan()+0x288>)
    msg.buf[4] = lowByte(SOC * 10);
    3a50:	7323      	strb	r3, [r4, #12]
    msg.buf[5] = highByte(SOC * 10);
    3a52:	4133      	asrs	r3, r6
    msg.buf[2] = lowByte(SOH);
    3a54:	8162      	strh	r2, [r4, #10]
    msg.buf[5] = highByte(SOC * 10);
    3a56:	7363      	strb	r3, [r4, #13]
    msg.len = 8;
    3a58:	71e6      	strb	r6, [r4, #7]
    msg.buf[6] = 0;
    3a5a:	81e7      	strh	r7, [r4, #14]
    Can0.write(msg);
    3a5c:	f004 fcfa 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    msg.id = 0x356;
    3a60:	f240 3356 	movw	r3, #854	; 0x356
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3a64:	487f      	ldr	r0, [pc, #508]	; (3c64 <VEcan()+0x2a4>)
    msg.id = 0x356;
    3a66:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    3a68:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3a6a:	f7fd ffa9 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    3a6e:	497e      	ldr	r1, [pc, #504]	; (3c68 <VEcan()+0x2a8>)
    3a70:	f009 f9e6 	bl	ce40 <__aeabi_fmul>
    3a74:	f009 fbd0 	bl	d218 <__aeabi_f2uiz>
    3a78:	7220      	strb	r0, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3a7a:	487a      	ldr	r0, [pc, #488]	; (3c64 <VEcan()+0x2a4>)
    3a7c:	f7fd ffa0 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    3a80:	4979      	ldr	r1, [pc, #484]	; (3c68 <VEcan()+0x2a8>)
    3a82:	f009 f9dd 	bl	ce40 <__aeabi_fmul>
    3a86:	f009 fbc7 	bl	d218 <__aeabi_f2uiz>
    msg.buf[2] = lowByte(long(currentact / 100));
    3a8a:	4b78      	ldr	r3, [pc, #480]	; (3c6c <VEcan()+0x2ac>)
    3a8c:	4976      	ldr	r1, [pc, #472]	; (3c68 <VEcan()+0x2a8>)
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3a8e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    3a92:	7260      	strb	r0, [r4, #9]
    msg.buf[2] = lowByte(long(currentact / 100));
    3a94:	6818      	ldr	r0, [r3, #0]
    3a96:	f009 fa87 	bl	cfa8 <__aeabi_fdiv>
    3a9a:	f009 fb97 	bl	d1cc <__aeabi_f2iz>
    3a9e:	8160      	strh	r0, [r4, #10]
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3aa0:	4870      	ldr	r0, [pc, #448]	; (3c64 <VEcan()+0x2a4>)
    3aa2:	f7fd ffbb 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    3aa6:	4969      	ldr	r1, [pc, #420]	; (3c4c <VEcan()+0x28c>)
    3aa8:	f009 f9ca 	bl	ce40 <__aeabi_fmul>
    3aac:	f009 fb8e 	bl	d1cc <__aeabi_f2iz>
    3ab0:	7320      	strb	r0, [r4, #12]
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3ab2:	486c      	ldr	r0, [pc, #432]	; (3c64 <VEcan()+0x2a4>)
    3ab4:	f7fd ffb2 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    3ab8:	4964      	ldr	r1, [pc, #400]	; (3c4c <VEcan()+0x28c>)
    3aba:	f009 f9c1 	bl	ce40 <__aeabi_fmul>
    3abe:	f009 fb85 	bl	d1cc <__aeabi_f2iz>
    3ac2:	f340 2007 	sbfx	r0, r0, #8, #8
    Can0.write(msg);
    3ac6:	4960      	ldr	r1, [pc, #384]	; (3c48 <VEcan()+0x288>)
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3ac8:	7360      	strb	r0, [r4, #13]
    Can0.write(msg);
    3aca:	4863      	ldr	r0, [pc, #396]	; (3c58 <VEcan()+0x298>)
    msg.buf[6] = 0;
    3acc:	81e7      	strh	r7, [r4, #14]
    Can0.write(msg);
    3ace:	f004 fcc1 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3ad2:	2002      	movs	r0, #2
    3ad4:	f006 fcf0 	bl	a4b8 <delay>
    msg.id = 0x35A;
    3ad8:	f240 335a 	movw	r3, #858	; 0x35a
    3adc:	6023      	str	r3, [r4, #0]
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3ade:	4b64      	ldr	r3, [pc, #400]	; (3c70 <VEcan()+0x2b0>)
    Can0.write(msg);
    3ae0:	4959      	ldr	r1, [pc, #356]	; (3c48 <VEcan()+0x288>)
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3ae2:	681b      	ldr	r3, [r3, #0]
    3ae4:	60a3      	str	r3, [r4, #8]
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3ae6:	4b63      	ldr	r3, [pc, #396]	; (3c74 <VEcan()+0x2b4>)
    Can0.write(msg);
    3ae8:	485b      	ldr	r0, [pc, #364]	; (3c58 <VEcan()+0x298>)
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3aea:	681b      	ldr	r3, [r3, #0]
    3aec:	60e3      	str	r3, [r4, #12]
    msg.len = 8;
    3aee:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3af0:	f004 fcb0 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    msg.id = 0x35E;
    3af4:	f240 335e 	movw	r3, #862	; 0x35e
    3af8:	6023      	str	r3, [r4, #0]
    msg.buf[0] = bmsname[0];
    3afa:	4b5f      	ldr	r3, [pc, #380]	; (3c78 <VEcan()+0x2b8>)
    Can0.write(msg);
    3afc:	4952      	ldr	r1, [pc, #328]	; (3c48 <VEcan()+0x288>)
    msg.buf[0] = bmsname[0];
    3afe:	681a      	ldr	r2, [r3, #0]
    Can0.write(msg);
    3b00:	4855      	ldr	r0, [pc, #340]	; (3c58 <VEcan()+0x298>)
    msg.buf[4] = bmsname[4];
    3b02:	685b      	ldr	r3, [r3, #4]
    msg.buf[0] = bmsname[0];
    3b04:	60a2      	str	r2, [r4, #8]
    msg.buf[4] = bmsname[4];
    3b06:	60e3      	str	r3, [r4, #12]
    msg.len = 8;
    3b08:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3b0a:	f004 fca3 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3b0e:	2002      	movs	r0, #2
    3b10:	f006 fcd2 	bl	a4b8 <delay>
    msg.id = 0x370;
    3b14:	f44f 735c 	mov.w	r3, #880	; 0x370
    3b18:	6023      	str	r3, [r4, #0]
    msg.buf[0] = bmsmanu[0];
    3b1a:	4b58      	ldr	r3, [pc, #352]	; (3c7c <VEcan()+0x2bc>)
    Can0.write(msg);
    3b1c:	494a      	ldr	r1, [pc, #296]	; (3c48 <VEcan()+0x288>)
    msg.buf[0] = bmsmanu[0];
    3b1e:	681a      	ldr	r2, [r3, #0]
    Can0.write(msg);
    3b20:	484d      	ldr	r0, [pc, #308]	; (3c58 <VEcan()+0x298>)
    msg.buf[4] = bmsmanu[4];
    3b22:	685b      	ldr	r3, [r3, #4]
    msg.buf[0] = bmsmanu[0];
    3b24:	60a2      	str	r2, [r4, #8]
    msg.buf[4] = bmsmanu[4];
    3b26:	60e3      	str	r3, [r4, #12]
    msg.len = 8;
    3b28:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3b2a:	f004 fc93 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3b2e:	2002      	movs	r0, #2
    3b30:	f006 fcc2 	bl	a4b8 <delay>
    msg.id = 0x373;
    3b34:	f240 3373 	movw	r3, #883	; 0x373
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    3b38:	484a      	ldr	r0, [pc, #296]	; (3c64 <VEcan()+0x2a4>)
    msg.id = 0x373;
    3b3a:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    3b3c:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    3b3e:	f7fd fef5 	bl	192c <BMSModuleManager::getLowCellVolt()>
    3b42:	494f      	ldr	r1, [pc, #316]	; (3c80 <VEcan()+0x2c0>)
    3b44:	f009 f97c 	bl	ce40 <__aeabi_fmul>
    3b48:	f009 fb66 	bl	d218 <__aeabi_f2uiz>
    3b4c:	7220      	strb	r0, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    3b4e:	4845      	ldr	r0, [pc, #276]	; (3c64 <VEcan()+0x2a4>)
    3b50:	f7fd feec 	bl	192c <BMSModuleManager::getLowCellVolt()>
    3b54:	494a      	ldr	r1, [pc, #296]	; (3c80 <VEcan()+0x2c0>)
    3b56:	f009 f973 	bl	ce40 <__aeabi_fmul>
    3b5a:	f009 fb5d 	bl	d218 <__aeabi_f2uiz>
    3b5e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    3b62:	7260      	strb	r0, [r4, #9]
    msg.buf[2] = lowByte(uint16_t(bms.getHighCellVolt() * 1000));
    3b64:	483f      	ldr	r0, [pc, #252]	; (3c64 <VEcan()+0x2a4>)
    3b66:	f7fd ff07 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    3b6a:	4945      	ldr	r1, [pc, #276]	; (3c80 <VEcan()+0x2c0>)
    3b6c:	f009 f968 	bl	ce40 <__aeabi_fmul>
    3b70:	f009 fb52 	bl	d218 <__aeabi_f2uiz>
    3b74:	72a0      	strb	r0, [r4, #10]
    msg.buf[3] = highByte(uint16_t(bms.getHighCellVolt() * 1000));
    3b76:	483b      	ldr	r0, [pc, #236]	; (3c64 <VEcan()+0x2a4>)
    3b78:	f7fd fefe 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    3b7c:	4940      	ldr	r1, [pc, #256]	; (3c80 <VEcan()+0x2c0>)
    3b7e:	f009 f95f 	bl	ce40 <__aeabi_fmul>
    3b82:	f009 fb49 	bl	d218 <__aeabi_f2uiz>
    3b86:	f3c0 2007 	ubfx	r0, r0, #8, #8
    3b8a:	72e0      	strb	r0, [r4, #11]
    msg.buf[4] = lowByte(uint16_t(bms.getLowTemperature() + 273.15));
    3b8c:	4835      	ldr	r0, [pc, #212]	; (3c64 <VEcan()+0x2a4>)
    3b8e:	f7fd ffa5 	bl	1adc <BMSModuleManager::getLowTemperature()>
    3b92:	493c      	ldr	r1, [pc, #240]	; (3c84 <VEcan()+0x2c4>)
    3b94:	f009 f84c 	bl	cc30 <__addsf3>
    3b98:	f009 fb3e 	bl	d218 <__aeabi_f2uiz>
    3b9c:	7320      	strb	r0, [r4, #12]
    msg.buf[5] = highByte(uint16_t(bms.getLowTemperature() + 273.15));
    3b9e:	4831      	ldr	r0, [pc, #196]	; (3c64 <VEcan()+0x2a4>)
    3ba0:	f7fd ff9c 	bl	1adc <BMSModuleManager::getLowTemperature()>
    3ba4:	4937      	ldr	r1, [pc, #220]	; (3c84 <VEcan()+0x2c4>)
    3ba6:	f009 f843 	bl	cc30 <__addsf3>
    3baa:	f009 fb35 	bl	d218 <__aeabi_f2uiz>
    3bae:	f3c0 2007 	ubfx	r0, r0, #8, #8
    3bb2:	7360      	strb	r0, [r4, #13]
    msg.buf[6] = lowByte(uint16_t(bms.getHighTemperature() + 273.15));
    3bb4:	482b      	ldr	r0, [pc, #172]	; (3c64 <VEcan()+0x2a4>)
    3bb6:	f7fd ff8f 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    3bba:	4932      	ldr	r1, [pc, #200]	; (3c84 <VEcan()+0x2c4>)
    3bbc:	f009 f838 	bl	cc30 <__addsf3>
    3bc0:	f009 fb2a 	bl	d218 <__aeabi_f2uiz>
    3bc4:	73a0      	strb	r0, [r4, #14]
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    3bc6:	4827      	ldr	r0, [pc, #156]	; (3c64 <VEcan()+0x2a4>)
    3bc8:	f7fd ff86 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    3bcc:	492d      	ldr	r1, [pc, #180]	; (3c84 <VEcan()+0x2c4>)
    3bce:	f009 f82f 	bl	cc30 <__addsf3>
    3bd2:	f009 fb21 	bl	d218 <__aeabi_f2uiz>
    3bd6:	f3c0 2007 	ubfx	r0, r0, #8, #8
    Can0.write(msg);
    3bda:	491b      	ldr	r1, [pc, #108]	; (3c48 <VEcan()+0x288>)
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    3bdc:	73e0      	strb	r0, [r4, #15]
    Can0.write(msg);
    3bde:	481e      	ldr	r0, [pc, #120]	; (3c58 <VEcan()+0x298>)
    3be0:	f004 fc38 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3be4:	2002      	movs	r0, #2
    3be6:	f006 fc67 	bl	a4b8 <delay>
    msg.id = 0x379;  //Installed capacity
    3bea:	f240 3379 	movw	r3, #889	; 0x379
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    3bee:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    msg.id = 0x379;  //Installed capacity
    3bf0:	6023      	str	r3, [r4, #0]
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    3bf2:	6dab      	ldr	r3, [r5, #88]	; 0x58
    3bf4:	fb13 f302 	smulbb	r3, r3, r2
    msg.len = 2;
    3bf8:	2002      	movs	r0, #2
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    3bfa:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    3bfc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    msg.len = 2;
    3c00:	71e0      	strb	r0, [r4, #7]
    msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    3c02:	7263      	strb	r3, [r4, #9]
    delay(2);
    3c04:	f006 fc58 	bl	a4b8 <delay>
    msg.id = 0x372;
    3c08:	f240 3372 	movw	r3, #882	; 0x372
    msg.buf[0] = lowByte(bms.getNumModules());
    3c0c:	4815      	ldr	r0, [pc, #84]	; (3c64 <VEcan()+0x2a4>)
    msg.id = 0x372;
    3c0e:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    3c10:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(bms.getNumModules());
    3c12:	f7fd fed7 	bl	19c4 <BMSModuleManager::getNumModules()>
    3c16:	4603      	mov	r3, r0
    msg.buf[1] = highByte(bms.getNumModules());
    3c18:	4812      	ldr	r0, [pc, #72]	; (3c64 <VEcan()+0x2a4>)
    msg.buf[0] = lowByte(bms.getNumModules());
    3c1a:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(bms.getNumModules());
    3c1c:	f7fd fed2 	bl	19c4 <BMSModuleManager::getNumModules()>
    3c20:	fa40 f306 	asr.w	r3, r0, r6
    3c24:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = 0x00;
    3c26:	8167      	strh	r7, [r4, #10]
    msg.buf[4] = 0x00;
    3c28:	60e7      	str	r7, [r4, #12]
    Can0.write(msg);
    3c2a:	4907      	ldr	r1, [pc, #28]	; (3c48 <VEcan()+0x288>)
    3c2c:	480a      	ldr	r0, [pc, #40]	; (3c58 <VEcan()+0x298>)
}
    3c2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Can0.write(msg);
    3c32:	f004 bc0f 	b.w	8454 <FlexCAN::write(CAN_message_t const&)>
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3c36:	f009 f8af 	bl	cd98 <__aeabi_i2f>
    3c3a:	6969      	ldr	r1, [r5, #20]
    3c3c:	e6d6      	b.n	39ec <VEcan()+0x2c>
    3c3e:	bf00      	nop
    3c40:	1fffd0d8 	.word	0x1fffd0d8
    3c44:	1fffd1b0 	.word	0x1fffd1b0
    3c48:	1fffd034 	.word	0x1fffd034
    3c4c:	41200000 	.word	0x41200000
    3c50:	1fffcf40 	.word	0x1fffcf40
    3c54:	1fffcfcc 	.word	0x1fffcfcc
    3c58:	1fffd1cc 	.word	0x1fffd1cc
    3c5c:	1fff8828 	.word	0x1fff8828
    3c60:	1fff882c 	.word	0x1fff882c
    3c64:	1fff91f0 	.word	0x1fff91f0
    3c68:	42c80000 	.word	0x42c80000
    3c6c:	1fffcfc4 	.word	0x1fffcfc4
    3c70:	1fff91e0 	.word	0x1fff91e0
    3c74:	1fffd1c4 	.word	0x1fffd1c4
    3c78:	1fff8838 	.word	0x1fff8838
    3c7c:	1fff8830 	.word	0x1fff8830
    3c80:	447a0000 	.word	0x447a0000
    3c84:	43889333 	.word	0x43889333
    msg.id = 0x359;
    3c88:	4c55      	ldr	r4, [pc, #340]	; (3de0 <VEcan()+0x420>)
    msg.buf[4] = 0x01;  //number of modules fixed for now
    3c8a:	4b56      	ldr	r3, [pc, #344]	; (3de4 <VEcan()+0x424>)
    3c8c:	60e3      	str	r3, [r4, #12]
    msg.id = 0x359;
    3c8e:	f240 3259 	movw	r2, #857	; 0x359
    msg.buf[0] = 0x00;  //protection to be translated later date
    3c92:	2300      	movs	r3, #0
    msg.len = 8;
    3c94:	2608      	movs	r6, #8
    Can0.write(msg);
    3c96:	4621      	mov	r1, r4
    3c98:	4853      	ldr	r0, [pc, #332]	; (3de8 <VEcan()+0x428>)
    msg.id = 0x359;
    3c9a:	6022      	str	r2, [r4, #0]
    msg.buf[0] = 0x00;  //protection to be translated later date
    3c9c:	60a3      	str	r3, [r4, #8]
    msg.len = 8;
    3c9e:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3ca0:	f004 fbd8 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3ca4:	2002      	movs	r0, #2
    3ca6:	f006 fc07 	bl	a4b8 <delay>
    if (storagemode == 0) {
    3caa:	4b50      	ldr	r3, [pc, #320]	; (3dec <VEcan()+0x42c>)
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3cac:	6d68      	ldr	r0, [r5, #84]	; 0x54
    if (storagemode == 0) {
    3cae:	681b      	ldr	r3, [r3, #0]
    msg.len = 8;
    3cb0:	71e6      	strb	r6, [r4, #7]
    msg.id = 0x351;
    3cb2:	f240 3251 	movw	r2, #849	; 0x351
    3cb6:	6022      	str	r2, [r4, #0]
    if (storagemode == 0) {
    3cb8:	2b00      	cmp	r3, #0
    3cba:	f000 808d 	beq.w	3dd8 <VEcan()+0x418>
      msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3cbe:	f009 f86b 	bl	cd98 <__aeabi_i2f>
    3cc2:	6a29      	ldr	r1, [r5, #32]
    3cc4:	f009 f8bc 	bl	ce40 <__aeabi_fmul>
    3cc8:	4949      	ldr	r1, [pc, #292]	; (3df0 <VEcan()+0x430>)
    3cca:	f009 f8b9 	bl	ce40 <__aeabi_fmul>
    3cce:	f009 faa3 	bl	d218 <__aeabi_f2uiz>
    msg.buf[2] = lowByte(chargecurrent);
    3cd2:	4a48      	ldr	r2, [pc, #288]	; (3df4 <VEcan()+0x434>)
    msg.buf[4] = lowByte(discurrent);
    3cd4:	4b48      	ldr	r3, [pc, #288]	; (3df8 <VEcan()+0x438>)
    msg.buf[2] = lowByte(chargecurrent);
    3cd6:	8812      	ldrh	r2, [r2, #0]
    msg.buf[4] = lowByte(discurrent);
    3cd8:	881b      	ldrh	r3, [r3, #0]
    msg.buf[2] = lowByte(chargecurrent);
    3cda:	8162      	strh	r2, [r4, #10]
      msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3cdc:	b2c1      	uxtb	r1, r0
      msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3cde:	f3c0 2007 	ubfx	r0, r0, #8, #8
    msg.buf[6] = 0x00;
    3ce2:	2500      	movs	r5, #0
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3ce4:	7221      	strb	r1, [r4, #8]
      msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3ce6:	7260      	strb	r0, [r4, #9]
    Can0.write(msg);
    3ce8:	493d      	ldr	r1, [pc, #244]	; (3de0 <VEcan()+0x420>)
    3cea:	483f      	ldr	r0, [pc, #252]	; (3de8 <VEcan()+0x428>)
    msg.buf[4] = lowByte(discurrent);
    3cec:	81a3      	strh	r3, [r4, #12]
    msg.buf[6] = 0x00;
    3cee:	81e5      	strh	r5, [r4, #14]
    Can0.write(msg);
    3cf0:	f004 fbb0 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3cf4:	2002      	movs	r0, #2
    3cf6:	f006 fbdf 	bl	a4b8 <delay>
    msg.buf[2] = lowByte(SOH);   //static for now
    3cfa:	4b40      	ldr	r3, [pc, #256]	; (3dfc <VEcan()+0x43c>)
    msg.buf[0] = lowByte(SOC);
    3cfc:	4a40      	ldr	r2, [pc, #256]	; (3e00 <VEcan()+0x440>)
    msg.buf[2] = lowByte(SOH);   //static for now
    3cfe:	881b      	ldrh	r3, [r3, #0]
    msg.buf[0] = lowByte(SOC);
    3d00:	8812      	ldrh	r2, [r2, #0]
    Can0.write(msg);
    3d02:	4937      	ldr	r1, [pc, #220]	; (3de0 <VEcan()+0x420>)
    msg.buf[2] = lowByte(SOH);   //static for now
    3d04:	8163      	strh	r3, [r4, #10]
    msg.len = 8;
    3d06:	2608      	movs	r6, #8
    msg.id = 0x355;
    3d08:	f240 3355 	movw	r3, #853	; 0x355
    Can0.write(msg);
    3d0c:	4836      	ldr	r0, [pc, #216]	; (3de8 <VEcan()+0x428>)
    msg.buf[0] = lowByte(SOC);
    3d0e:	8122      	strh	r2, [r4, #8]
    msg.id = 0x355;
    3d10:	6023      	str	r3, [r4, #0]
    msg.buf[4] = 0x00;
    3d12:	60e5      	str	r5, [r4, #12]
    msg.len = 8;
    3d14:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3d16:	f004 fb9d 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3d1a:	2002      	movs	r0, #2
    3d1c:	f006 fbcc 	bl	a4b8 <delay>
    msg.id = 0x356;
    3d20:	f240 3356 	movw	r3, #854	; 0x356
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3d24:	4837      	ldr	r0, [pc, #220]	; (3e04 <VEcan()+0x444>)
    msg.id = 0x356;
    3d26:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    3d28:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3d2a:	f7fd fe49 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    3d2e:	4936      	ldr	r1, [pc, #216]	; (3e08 <VEcan()+0x448>)
    3d30:	f009 f886 	bl	ce40 <__aeabi_fmul>
    3d34:	f009 fa70 	bl	d218 <__aeabi_f2uiz>
    3d38:	4603      	mov	r3, r0
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3d3a:	4832      	ldr	r0, [pc, #200]	; (3e04 <VEcan()+0x444>)
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3d3c:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3d3e:	f7fd fe3f 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    3d42:	4931      	ldr	r1, [pc, #196]	; (3e08 <VEcan()+0x448>)
    3d44:	f009 f87c 	bl	ce40 <__aeabi_fmul>
    3d48:	f009 fa66 	bl	d218 <__aeabi_f2uiz>
    msg.buf[2] = lowByte(long(currentact / 100));
    3d4c:	4a2f      	ldr	r2, [pc, #188]	; (3e0c <VEcan()+0x44c>)
    3d4e:	492e      	ldr	r1, [pc, #184]	; (3e08 <VEcan()+0x448>)
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3d50:	4603      	mov	r3, r0
    3d52:	f3c3 2307 	ubfx	r3, r3, #8, #8
    msg.buf[2] = lowByte(long(currentact / 100));
    3d56:	6810      	ldr	r0, [r2, #0]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3d58:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = lowByte(long(currentact / 100));
    3d5a:	f009 f925 	bl	cfa8 <__aeabi_fdiv>
    3d5e:	f009 fa35 	bl	d1cc <__aeabi_f2iz>
    3d62:	4603      	mov	r3, r0
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3d64:	4827      	ldr	r0, [pc, #156]	; (3e04 <VEcan()+0x444>)
    msg.buf[2] = lowByte(long(currentact / 100));
    3d66:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3d68:	f7fd fe58 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    3d6c:	4920      	ldr	r1, [pc, #128]	; (3df0 <VEcan()+0x430>)
    3d6e:	f009 f867 	bl	ce40 <__aeabi_fmul>
    3d72:	f009 fa2b 	bl	d1cc <__aeabi_f2iz>
    3d76:	4603      	mov	r3, r0
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3d78:	4822      	ldr	r0, [pc, #136]	; (3e04 <VEcan()+0x444>)
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3d7a:	7323      	strb	r3, [r4, #12]
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3d7c:	f7fd fe4e 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    3d80:	491b      	ldr	r1, [pc, #108]	; (3df0 <VEcan()+0x430>)
    3d82:	f009 f85d 	bl	ce40 <__aeabi_fmul>
    3d86:	f009 fa21 	bl	d1cc <__aeabi_f2iz>
    Can0.write(msg);
    3d8a:	4915      	ldr	r1, [pc, #84]	; (3de0 <VEcan()+0x420>)
    msg.buf[6] = 0;
    3d8c:	81e5      	strh	r5, [r4, #14]
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3d8e:	f340 2307 	sbfx	r3, r0, #8, #8
    Can0.write(msg);
    3d92:	4815      	ldr	r0, [pc, #84]	; (3de8 <VEcan()+0x428>)
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3d94:	7363      	strb	r3, [r4, #13]
    Can0.write(msg);
    3d96:	f004 fb5d 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3d9a:	2002      	movs	r0, #2
    3d9c:	f006 fb8c 	bl	a4b8 <delay>
    msg.id = 0x35C;
    3da0:	f44f 7357 	mov.w	r3, #860	; 0x35c
    msg.len = 2;
    3da4:	2502      	movs	r5, #2
    Can0.write(msg);
    3da6:	490e      	ldr	r1, [pc, #56]	; (3de0 <VEcan()+0x420>)
    msg.id = 0x35C;
    3da8:	6023      	str	r3, [r4, #0]
    Can0.write(msg);
    3daa:	480f      	ldr	r0, [pc, #60]	; (3de8 <VEcan()+0x428>)
    msg.len = 2;
    3dac:	71e5      	strb	r5, [r4, #7]
    msg.buf[0] = 0xC0;  //fixed charge and discharge enable for verifcation
    3dae:	23c0      	movs	r3, #192	; 0xc0
    3db0:	8123      	strh	r3, [r4, #8]
    Can0.write(msg);
    3db2:	f004 fb4f 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3db6:	4628      	mov	r0, r5
    3db8:	f006 fb7e 	bl	a4b8 <delay>
    msg.buf[1] = "P";  //No idea how the naming works
    3dbc:	4b14      	ldr	r3, [pc, #80]	; (3e10 <VEcan()+0x450>)
    msg.buf[0] = "T";  //No idea how the naming works
    3dbe:	4a15      	ldr	r2, [pc, #84]	; (3e14 <VEcan()+0x454>)
    msg.len = 2;
    3dc0:	71e5      	strb	r5, [r4, #7]
    msg.id = 0x35E;
    3dc2:	f240 315e 	movw	r1, #862	; 0x35e
    3dc6:	6021      	str	r1, [r4, #0]
    msg.buf[0] = "T";  //No idea how the naming works
    3dc8:	7222      	strb	r2, [r4, #8]
    msg.buf[1] = "P";  //No idea how the naming works
    3dca:	7263      	strb	r3, [r4, #9]
    Can0.write(msg);
    3dcc:	4904      	ldr	r1, [pc, #16]	; (3de0 <VEcan()+0x420>)
    3dce:	4806      	ldr	r0, [pc, #24]	; (3de8 <VEcan()+0x428>)
}
    3dd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Can0.write(msg);
    3dd4:	f004 bb3e 	b.w	8454 <FlexCAN::write(CAN_message_t const&)>
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3dd8:	f008 ffde 	bl	cd98 <__aeabi_i2f>
    3ddc:	6969      	ldr	r1, [r5, #20]
    3dde:	e771      	b.n	3cc4 <VEcan()+0x304>
    3de0:	1fffd034 	.word	0x1fffd034
    3de4:	004e5001 	.word	0x004e5001
    3de8:	1fffd1cc 	.word	0x1fffd1cc
    3dec:	1fffd1b0 	.word	0x1fffd1b0
    3df0:	41200000 	.word	0x41200000
    3df4:	1fffcf40 	.word	0x1fffcf40
    3df8:	1fffcfcc 	.word	0x1fffcfcc
    3dfc:	1fff882c 	.word	0x1fff882c
    3e00:	1fff8828 	.word	0x1fff8828
    3e04:	1fff91f0 	.word	0x1fff91f0
    3e08:	42c80000 	.word	0x42c80000
    3e0c:	1fffcfc4 	.word	0x1fffcfc4
    3e10:	00014364 	.word	0x00014364
    3e14:	00014054 	.word	0x00014054

00003e18 <menu()>:
void menu() {
    3e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (menuload == 4) {
    3e1c:	4ca6      	ldr	r4, [pc, #664]	; (40b8 <menu()+0x2a0>)
  incomingByte = Serial.read();  // read the incoming byte:
    3e1e:	4da7      	ldr	r5, [pc, #668]	; (40bc <menu()+0x2a4>)
void menu() {
    3e20:	b082      	sub	sp, #8
        virtual int read() { return usb_serial_getchar(); }
    3e22:	f008 f8bf 	bl	bfa4 <usb_serial_getchar>
  if (menuload == 4) {
    3e26:	6823      	ldr	r3, [r4, #0]
  incomingByte = Serial.read();  // read the incoming byte:
    3e28:	6028      	str	r0, [r5, #0]
  if (menuload == 4) {
    3e2a:	2b04      	cmp	r3, #4
    3e2c:	d05d      	beq.n	3eea <menu()+0xd2>
  if (menuload == 2) {
    3e2e:	2b02      	cmp	r3, #2
    3e30:	f040 8166 	bne.w	4100 <menu()+0x2e8>
    switch (incomingByte) {
    3e34:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
    3e38:	2a42      	cmp	r2, #66	; 0x42
    3e3a:	d84a      	bhi.n	3ed2 <menu()+0xba>
    3e3c:	e8df f012 	tbh	[pc, r2, lsl #1]
    3e40:	051a049e 	.word	0x051a049e
    3e44:	05270550 	.word	0x05270550
    3e48:	056a0541 	.word	0x056a0541
    3e4c:	055d0577 	.word	0x055d0577
    3e50:	00490049 	.word	0x00490049
    3e54:	00490049 	.word	0x00490049
    3e58:	00490049 	.word	0x00490049
    3e5c:	00490049 	.word	0x00490049
    3e60:	00490049 	.word	0x00490049
    3e64:	00490049 	.word	0x00490049
    3e68:	00490049 	.word	0x00490049
    3e6c:	00490049 	.word	0x00490049
    3e70:	00490049 	.word	0x00490049
    3e74:	00490049 	.word	0x00490049
    3e78:	00490049 	.word	0x00490049
    3e7c:	00490049 	.word	0x00490049
    3e80:	00490049 	.word	0x00490049
    3e84:	00490049 	.word	0x00490049
    3e88:	00490049 	.word	0x00490049
    3e8c:	00490049 	.word	0x00490049
    3e90:	00490049 	.word	0x00490049
    3e94:	00490049 	.word	0x00490049
    3e98:	00490049 	.word	0x00490049
    3e9c:	00490049 	.word	0x00490049
    3ea0:	00490049 	.word	0x00490049
    3ea4:	0049015c 	.word	0x0049015c
    3ea8:	00490049 	.word	0x00490049
    3eac:	00490049 	.word	0x00490049
    3eb0:	00490049 	.word	0x00490049
    3eb4:	00490049 	.word	0x00490049
    3eb8:	00490049 	.word	0x00490049
    3ebc:	00490049 	.word	0x00490049
    3ec0:	00490045 	.word	0x00490045
    3ec4:	0585      	.short	0x0585
    switch (incomingByte) {
    3ec6:	2871      	cmp	r0, #113	; 0x71
    3ec8:	d103      	bne.n	3ed2 <menu()+0xba>
          menuload = 1;
    3eca:	2300      	movs	r3, #0
          incomingByte = 'i';
    3ecc:	2073      	movs	r0, #115	; 0x73
          menuload = 1;
    3ece:	6023      	str	r3, [r4, #0]
          incomingByte = 'i';
    3ed0:	6028      	str	r0, [r5, #0]
  if (incomingByte == 115 & menuload == 0) {
    3ed2:	2b00      	cmp	r3, #0
    3ed4:	bf08      	it	eq
    3ed6:	2873      	cmpeq	r0, #115	; 0x73
    3ed8:	bf0c      	ite	eq
    3eda:	2301      	moveq	r3, #1
    3edc:	2300      	movne	r3, #0
    3ede:	2b00      	cmp	r3, #0
    3ee0:	f040 808c 	bne.w	3ffc <menu()+0x1e4>
}
    3ee4:	b002      	add	sp, #8
    3ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (incomingByte) {
    3eea:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
    3eee:	2a40      	cmp	r2, #64	; 0x40
    3ef0:	d8ef      	bhi.n	3ed2 <menu()+0xba>
    3ef2:	a101      	add	r1, pc, #4	; (adr r1, 3ef8 <menu()+0xe0>)
    3ef4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    3ef8:	00004779 	.word	0x00004779
    3efc:	0000466b 	.word	0x0000466b
    3f00:	000046f5 	.word	0x000046f5
    3f04:	00004711 	.word	0x00004711
    3f08:	00004715 	.word	0x00004715
    3f0c:	0000472f 	.word	0x0000472f
    3f10:	0000474f 	.word	0x0000474f
    3f14:	00004753 	.word	0x00004753
    3f18:	00004757 	.word	0x00004757
    3f1c:	00003ed3 	.word	0x00003ed3
    3f20:	00003ed3 	.word	0x00003ed3
    3f24:	00003ed3 	.word	0x00003ed3
    3f28:	00003ed3 	.word	0x00003ed3
    3f2c:	00003ed3 	.word	0x00003ed3
    3f30:	00003ed3 	.word	0x00003ed3
    3f34:	00003ed3 	.word	0x00003ed3
    3f38:	00003ed3 	.word	0x00003ed3
    3f3c:	00003ed3 	.word	0x00003ed3
    3f40:	00003ed3 	.word	0x00003ed3
    3f44:	00003ed3 	.word	0x00003ed3
    3f48:	00003ed3 	.word	0x00003ed3
    3f4c:	00003ed3 	.word	0x00003ed3
    3f50:	00003ed3 	.word	0x00003ed3
    3f54:	00003ed3 	.word	0x00003ed3
    3f58:	00003ed3 	.word	0x00003ed3
    3f5c:	00003ed3 	.word	0x00003ed3
    3f60:	00003ed3 	.word	0x00003ed3
    3f64:	00003ed3 	.word	0x00003ed3
    3f68:	00003ed3 	.word	0x00003ed3
    3f6c:	00003ed3 	.word	0x00003ed3
    3f70:	00003ed3 	.word	0x00003ed3
    3f74:	00003ed3 	.word	0x00003ed3
    3f78:	00003ed3 	.word	0x00003ed3
    3f7c:	00003ed3 	.word	0x00003ed3
    3f80:	00003ed3 	.word	0x00003ed3
    3f84:	00003ed3 	.word	0x00003ed3
    3f88:	00003ed3 	.word	0x00003ed3
    3f8c:	00003ed3 	.word	0x00003ed3
    3f90:	00003ed3 	.word	0x00003ed3
    3f94:	00003ed3 	.word	0x00003ed3
    3f98:	00003ed3 	.word	0x00003ed3
    3f9c:	00003ed3 	.word	0x00003ed3
    3fa0:	00003ed3 	.word	0x00003ed3
    3fa4:	00003ed3 	.word	0x00003ed3
    3fa8:	00003ed3 	.word	0x00003ed3
    3fac:	00003ed3 	.word	0x00003ed3
    3fb0:	00003ed3 	.word	0x00003ed3
    3fb4:	00003ed3 	.word	0x00003ed3
    3fb8:	00003ed3 	.word	0x00003ed3
    3fbc:	000044d1 	.word	0x000044d1
    3fc0:	00003ed3 	.word	0x00003ed3
    3fc4:	00003ed3 	.word	0x00003ed3
    3fc8:	00003ed3 	.word	0x00003ed3
    3fcc:	00003ed3 	.word	0x00003ed3
    3fd0:	00003ed3 	.word	0x00003ed3
    3fd4:	00003ed3 	.word	0x00003ed3
    3fd8:	00003ed3 	.word	0x00003ed3
    3fdc:	00003ed3 	.word	0x00003ed3
    3fe0:	00003ed3 	.word	0x00003ed3
    3fe4:	00003ed3 	.word	0x00003ed3
    3fe8:	00003ed3 	.word	0x00003ed3
    3fec:	00003ed3 	.word	0x00003ed3
    3ff0:	00003ed3 	.word	0x00003ed3
    3ff4:	00003ed3 	.word	0x00003ed3
    3ff8:	00003ecb 	.word	0x00003ecb
    3ffc:	4e30      	ldr	r6, [pc, #192]	; (40c0 <menu()+0x2a8>)
    SERIALCONSOLE.println();
    3ffe:	4831      	ldr	r0, [pc, #196]	; (40c4 <menu()+0x2ac>)
    4000:	f005 faf8 	bl	95f4 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4004:	2104      	movs	r1, #4
    4006:	4830      	ldr	r0, [pc, #192]	; (40c8 <menu()+0x2b0>)
    4008:	f008 f83a 	bl	c080 <usb_serial_write>
    400c:	482d      	ldr	r0, [pc, #180]	; (40c4 <menu()+0x2ac>)
    400e:	f005 faf1 	bl	95f4 <Print::println()>
    4012:	2110      	movs	r1, #16
    4014:	482d      	ldr	r0, [pc, #180]	; (40cc <menu()+0x2b4>)
    4016:	f008 f833 	bl	c080 <usb_serial_write>
    401a:	482a      	ldr	r0, [pc, #168]	; (40c4 <menu()+0x2ac>)
    401c:	f005 faea 	bl	95f4 <Print::println()>
    4020:	2113      	movs	r1, #19
    4022:	482b      	ldr	r0, [pc, #172]	; (40d0 <menu()+0x2b8>)
    4024:	f008 f82c 	bl	c080 <usb_serial_write>
    SERIALCONSOLE.println(firmver);
    4028:	4b2a      	ldr	r3, [pc, #168]	; (40d4 <menu()+0x2bc>)
	size_t print(int n)				{ return print((long)n); }
    402a:	4826      	ldr	r0, [pc, #152]	; (40c4 <menu()+0x2ac>)
    402c:	6819      	ldr	r1, [r3, #0]
    402e:	f005 fad9 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4032:	4824      	ldr	r0, [pc, #144]	; (40c4 <menu()+0x2ac>)
    4034:	f005 fade 	bl	95f4 <Print::println()>
    4038:	2114      	movs	r1, #20
    403a:	4827      	ldr	r0, [pc, #156]	; (40d8 <menu()+0x2c0>)
    403c:	f008 f820 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4040:	4820      	ldr	r0, [pc, #128]	; (40c4 <menu()+0x2ac>)
    4042:	f005 fad7 	bl	95f4 <Print::println()>
    4046:	211e      	movs	r1, #30
    4048:	4824      	ldr	r0, [pc, #144]	; (40dc <menu()+0x2c4>)
    404a:	f008 f819 	bl	c080 <usb_serial_write>
    404e:	481d      	ldr	r0, [pc, #116]	; (40c4 <menu()+0x2ac>)
    4050:	f005 fad0 	bl	95f4 <Print::println()>
    4054:	2115      	movs	r1, #21
    4056:	4822      	ldr	r0, [pc, #136]	; (40e0 <menu()+0x2c8>)
    4058:	f008 f812 	bl	c080 <usb_serial_write>
    405c:	4819      	ldr	r0, [pc, #100]	; (40c4 <menu()+0x2ac>)
    405e:	f005 fac9 	bl	95f4 <Print::println()>
    4062:	211e      	movs	r1, #30
    4064:	481f      	ldr	r0, [pc, #124]	; (40e4 <menu()+0x2cc>)
    4066:	f008 f80b 	bl	c080 <usb_serial_write>
    406a:	4816      	ldr	r0, [pc, #88]	; (40c4 <menu()+0x2ac>)
    406c:	f005 fac2 	bl	95f4 <Print::println()>
    4070:	2120      	movs	r1, #32
    4072:	481d      	ldr	r0, [pc, #116]	; (40e8 <menu()+0x2d0>)
    4074:	f008 f804 	bl	c080 <usb_serial_write>
    4078:	4812      	ldr	r0, [pc, #72]	; (40c4 <menu()+0x2ac>)
    407a:	f005 fabb 	bl	95f4 <Print::println()>
    407e:	2119      	movs	r1, #25
    4080:	481a      	ldr	r0, [pc, #104]	; (40ec <menu()+0x2d4>)
    4082:	f007 fffd 	bl	c080 <usb_serial_write>
    4086:	480f      	ldr	r0, [pc, #60]	; (40c4 <menu()+0x2ac>)
    4088:	f005 fab4 	bl	95f4 <Print::println()>
    408c:	2112      	movs	r1, #18
    408e:	4818      	ldr	r0, [pc, #96]	; (40f0 <menu()+0x2d8>)
    4090:	f007 fff6 	bl	c080 <usb_serial_write>
    4094:	480b      	ldr	r0, [pc, #44]	; (40c4 <menu()+0x2ac>)
    4096:	f005 faad 	bl	95f4 <Print::println()>
    409a:	210d      	movs	r1, #13
    409c:	4815      	ldr	r0, [pc, #84]	; (40f4 <menu()+0x2dc>)
    409e:	f007 ffef 	bl	c080 <usb_serial_write>
    40a2:	4808      	ldr	r0, [pc, #32]	; (40c4 <menu()+0x2ac>)
    40a4:	f005 faa6 	bl	95f4 <Print::println()>
    debug = 0;
    40a8:	2200      	movs	r2, #0
    menuload = 1;
    40aa:	2301      	movs	r3, #1
    debug = 0;
    40ac:	6032      	str	r2, [r6, #0]
    menuload = 1;
    40ae:	6023      	str	r3, [r4, #0]
}
    40b0:	b002      	add	sp, #8
    40b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    40b6:	bf00      	nop
    40b8:	1fffd030 	.word	0x1fffd030
    40bc:	1fffcff4 	.word	0x1fffcff4
    40c0:	1fff884c 	.word	0x1fff884c
    40c4:	1fff89fc 	.word	0x1fff89fc
    40c8:	00014d34 	.word	0x00014d34
    40cc:	00014d3c 	.word	0x00014d3c
    40d0:	00014d50 	.word	0x00014d50
    40d4:	1fff8858 	.word	0x1fff8858
    40d8:	00014d64 	.word	0x00014d64
    40dc:	00014d7c 	.word	0x00014d7c
    40e0:	00014d9c 	.word	0x00014d9c
    40e4:	00014db4 	.word	0x00014db4
    40e8:	00014dd4 	.word	0x00014dd4
    40ec:	00014df8 	.word	0x00014df8
    40f0:	00014e14 	.word	0x00014e14
    40f4:	00014e28 	.word	0x00014e28
        calcur();
    40f8:	f7ff fba0 	bl	383c <calcur()>
  if (menuload == 8) {
    40fc:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    40fe:	6828      	ldr	r0, [r5, #0]
  if (menuload == 8) {
    4100:	2b08      	cmp	r3, #8
    4102:	d171      	bne.n	41e8 <menu()+0x3d0>
    switch (incomingByte) {
    4104:	2832      	cmp	r0, #50	; 0x32
    4106:	d068      	beq.n	41da <menu()+0x3c2>
    4108:	2871      	cmp	r0, #113	; 0x71
    410a:	f43f aede 	beq.w	3eca <menu()+0xb2>
    410e:	2831      	cmp	r0, #49	; 0x31
    4110:	f47f aedf 	bne.w	3ed2 <menu()+0xba>
        virtual int available() { return usb_serial_available(); }
    4114:	f007 ff82 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4118:	2800      	cmp	r0, #0
    411a:	f300 81c5 	bgt.w	44a8 <menu()+0x690>
        if (settings.IgnoreTemp > 3) {
    411e:	4e97      	ldr	r6, [pc, #604]	; (437c <menu()+0x564>)
    4120:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
        bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    4124:	6d33      	ldr	r3, [r6, #80]	; 0x50
    4126:	6c72      	ldr	r2, [r6, #68]	; 0x44
        if (settings.IgnoreTemp > 3) {
    4128:	2903      	cmp	r1, #3
          settings.IgnoreTemp = 0;
    412a:	bf84      	itt	hi
    412c:	2100      	movhi	r1, #0
    412e:	f886 1040 	strbhi.w	r1, [r6, #64]	; 0x40
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    4132:	4893      	ldr	r0, [pc, #588]	; (4380 <menu()+0x568>)
    4134:	f7fd fc4e 	bl	19d4 <BMSModuleManager::setSensors(int, float, float)>
          menuload = 1;
    4138:	2201      	movs	r2, #1
          incomingByte = 'i';
    413a:	2369      	movs	r3, #105	; 0x69
          menuload = 1;
    413c:	6022      	str	r2, [r4, #0]
          incomingByte = 'i';
    413e:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4140:	e001      	b.n	4146 <menu()+0x32e>
        virtual int read() { return usb_serial_getchar(); }
    4142:	f007 ff2f 	bl	bfa4 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4146:	f007 ff69 	bl	c01c <usb_serial_available>
        while (Serial.available()) {
    414a:	4605      	mov	r5, r0
    414c:	2800      	cmp	r0, #0
    414e:	d1f8      	bne.n	4142 <menu()+0x32a>
        SERIALCONSOLE.println();
    4150:	488c      	ldr	r0, [pc, #560]	; (4384 <menu()+0x56c>)
    4152:	f005 fa4f 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4156:	488b      	ldr	r0, [pc, #556]	; (4384 <menu()+0x56c>)
    4158:	f005 fa4c 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    415c:	4889      	ldr	r0, [pc, #548]	; (4384 <menu()+0x56c>)
    415e:	f005 fa49 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4162:	4888      	ldr	r0, [pc, #544]	; (4384 <menu()+0x56c>)
    4164:	f005 fa46 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4168:	4886      	ldr	r0, [pc, #536]	; (4384 <menu()+0x56c>)
    416a:	f005 fa43 	bl	95f4 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    416e:	2115      	movs	r1, #21
    4170:	4885      	ldr	r0, [pc, #532]	; (4388 <menu()+0x570>)
    4172:	f007 ff85 	bl	c080 <usb_serial_write>
    4176:	4883      	ldr	r0, [pc, #524]	; (4384 <menu()+0x56c>)
    4178:	f005 fa3c 	bl	95f4 <Print::println()>
    417c:	2118      	movs	r1, #24
    417e:	4883      	ldr	r0, [pc, #524]	; (438c <menu()+0x574>)
    4180:	f007 ff7e 	bl	c080 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    4184:	462b      	mov	r3, r5
    4186:	220a      	movs	r2, #10
    4188:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
    418c:	487d      	ldr	r0, [pc, #500]	; (4384 <menu()+0x56c>)
    418e:	f005 fa49 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
    4192:	487c      	ldr	r0, [pc, #496]	; (4384 <menu()+0x56c>)
    4194:	f005 fa2e 	bl	95f4 <Print::println()>
    4198:	2128      	movs	r1, #40	; 0x28
    419a:	487d      	ldr	r0, [pc, #500]	; (4390 <menu()+0x578>)
    419c:	f007 ff70 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.IgnoreVolt * 1000, 0);
    41a0:	6c70      	ldr	r0, [r6, #68]	; 0x44
    41a2:	497c      	ldr	r1, [pc, #496]	; (4394 <menu()+0x57c>)
    41a4:	f008 fe4c 	bl	ce40 <__aeabi_fmul>
    41a8:	f008 fc26 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    41ac:	9500      	str	r5, [sp, #0]
    41ae:	460b      	mov	r3, r1
    41b0:	4602      	mov	r2, r0
    41b2:	4874      	ldr	r0, [pc, #464]	; (4384 <menu()+0x56c>)
    41b4:	f005 fa40 	bl	9638 <Print::printFloat(double, unsigned char)>
    41b8:	2102      	movs	r1, #2
    41ba:	4877      	ldr	r0, [pc, #476]	; (4398 <menu()+0x580>)
    41bc:	f007 ff60 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    41c0:	4870      	ldr	r0, [pc, #448]	; (4384 <menu()+0x56c>)
    41c2:	f005 fa17 	bl	95f4 <Print::println()>
    41c6:	2113      	movs	r1, #19
    41c8:	4874      	ldr	r0, [pc, #464]	; (439c <menu()+0x584>)
    41ca:	f007 ff59 	bl	c080 <usb_serial_write>
    41ce:	486d      	ldr	r0, [pc, #436]	; (4384 <menu()+0x56c>)
    41d0:	f005 fa10 	bl	95f4 <Print::println()>
        menuload = 8;
    41d4:	2308      	movs	r3, #8
    41d6:	6023      	str	r3, [r4, #0]
        break;
    41d8:	e684      	b.n	3ee4 <menu()+0xcc>
        virtual int available() { return usb_serial_available(); }
    41da:	f007 ff1f 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    41de:	2800      	cmp	r0, #0
    41e0:	f300 8153 	bgt.w	448a <menu()+0x672>
  if (menuload == 7) {
    41e4:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    41e6:	6828      	ldr	r0, [r5, #0]
  if (menuload == 7) {
    41e8:	2b07      	cmp	r3, #7
    41ea:	d114      	bne.n	4216 <menu()+0x3fe>
    switch (incomingByte) {
    41ec:	2834      	cmp	r0, #52	; 0x34
    41ee:	f73f ae6a 	bgt.w	3ec6 <menu()+0xae>
    41f2:	2830      	cmp	r0, #48	; 0x30
    41f4:	f77f ae6d 	ble.w	3ed2 <menu()+0xba>
    41f8:	3832      	subs	r0, #50	; 0x32
    41fa:	2802      	cmp	r0, #2
    41fc:	f201 8493 	bhi.w	5b26 <menu()+0x1d0e>
    4200:	e8df f000 	tbb	[pc, r0]
    4204:	0298      	.short	0x0298
    4206:	ac          	.byte	0xac
    4207:	00          	.byte	0x00
    4208:	f007 ff08 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    420c:	2800      	cmp	r0, #0
    420e:	f300 8153 	bgt.w	44b8 <menu()+0x6a0>
  if (menuload == 6)  //Charging settings
    4212:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4214:	6828      	ldr	r0, [r5, #0]
  if (menuload == 6)  //Charging settings
    4216:	2b06      	cmp	r3, #6
    4218:	f040 83ac 	bne.w	4974 <menu()+0xb5c>
    switch (incomingByte) {
    421c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4220:	2b41      	cmp	r3, #65	; 0x41
    4222:	f200 8674 	bhi.w	4f0e <menu()+0x10f6>
    4226:	a201      	add	r2, pc, #4	; (adr r2, 422c <menu()+0x414>)
    4228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    422c:	00004dbf 	.word	0x00004dbf
    4230:	00004c6b 	.word	0x00004c6b
    4234:	00004967 	.word	0x00004967
    4238:	00004eeb 	.word	0x00004eeb
    423c:	00004ec7 	.word	0x00004ec7
    4240:	00004eab 	.word	0x00004eab
    4244:	00004e8b 	.word	0x00004e8b
    4248:	00004e75 	.word	0x00004e75
    424c:	00004f0f 	.word	0x00004f0f
    4250:	00004e45 	.word	0x00004e45
    4254:	00004f0f 	.word	0x00004f0f
    4258:	00004f0f 	.word	0x00004f0f
    425c:	00004f0f 	.word	0x00004f0f
    4260:	00004f0f 	.word	0x00004f0f
    4264:	00004f0f 	.word	0x00004f0f
    4268:	00004f0f 	.word	0x00004f0f
    426c:	00004f0f 	.word	0x00004f0f
    4270:	00004f0f 	.word	0x00004f0f
    4274:	00004f0f 	.word	0x00004f0f
    4278:	00004f0f 	.word	0x00004f0f
    427c:	00004f0f 	.word	0x00004f0f
    4280:	00004f0f 	.word	0x00004f0f
    4284:	00004f0f 	.word	0x00004f0f
    4288:	00004f0f 	.word	0x00004f0f
    428c:	00004f0f 	.word	0x00004f0f
    4290:	00004f0f 	.word	0x00004f0f
    4294:	00004f0f 	.word	0x00004f0f
    4298:	00004f0f 	.word	0x00004f0f
    429c:	00004f0f 	.word	0x00004f0f
    42a0:	00004f0f 	.word	0x00004f0f
    42a4:	00004f0f 	.word	0x00004f0f
    42a8:	00004f0f 	.word	0x00004f0f
    42ac:	00004f0f 	.word	0x00004f0f
    42b0:	00004f0f 	.word	0x00004f0f
    42b4:	00004f0f 	.word	0x00004f0f
    42b8:	00004f0f 	.word	0x00004f0f
    42bc:	00004f0f 	.word	0x00004f0f
    42c0:	00004f0f 	.word	0x00004f0f
    42c4:	00004f0f 	.word	0x00004f0f
    42c8:	00004f0f 	.word	0x00004f0f
    42cc:	00004f0f 	.word	0x00004f0f
    42d0:	00004f0f 	.word	0x00004f0f
    42d4:	00004f0f 	.word	0x00004f0f
    42d8:	00004f0f 	.word	0x00004f0f
    42dc:	00004f0f 	.word	0x00004f0f
    42e0:	00004f0f 	.word	0x00004f0f
    42e4:	00004f0f 	.word	0x00004f0f
    42e8:	00004f0f 	.word	0x00004f0f
    42ec:	00004f0f 	.word	0x00004f0f
    42f0:	00004f0f 	.word	0x00004f0f
    42f4:	00004f0f 	.word	0x00004f0f
    42f8:	00004f0f 	.word	0x00004f0f
    42fc:	00004f0f 	.word	0x00004f0f
    4300:	00004f0f 	.word	0x00004f0f
    4304:	00004f0f 	.word	0x00004f0f
    4308:	00004f0f 	.word	0x00004f0f
    430c:	00004f0f 	.word	0x00004f0f
    4310:	00004f0f 	.word	0x00004f0f
    4314:	00004f0f 	.word	0x00004f0f
    4318:	00004f0f 	.word	0x00004f0f
    431c:	00004f0f 	.word	0x00004f0f
    4320:	00004f0f 	.word	0x00004f0f
    4324:	00004f0f 	.word	0x00004f0f
    4328:	00004f0f 	.word	0x00004f0f
    432c:	00004f0f 	.word	0x00004f0f
    4330:	00003ecb 	.word	0x00003ecb
    4334:	f007 fe72 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4338:	2800      	cmp	r0, #0
    433a:	f77f af6a 	ble.w	4212 <menu()+0x3fa>
          settings.CellGap = Serial.parseInt();
    433e:	4811      	ldr	r0, [pc, #68]	; (4384 <menu()+0x56c>)
          settings.CellGap = settings.CellGap * 0.001;
    4340:	4e0e      	ldr	r6, [pc, #56]	; (437c <menu()+0x564>)
          settings.CellGap = Serial.parseInt();
    4342:	f005 fab5 	bl	98b0 <Stream::parseInt()>
    4346:	f008 fd27 	bl	cd98 <__aeabi_i2f>
          settings.CellGap = settings.CellGap * 0.001;
    434a:	4915      	ldr	r1, [pc, #84]	; (43a0 <menu()+0x588>)
    434c:	f008 fd78 	bl	ce40 <__aeabi_fmul>
          menuload = 1;
    4350:	2301      	movs	r3, #1
    4352:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4354:	2361      	movs	r3, #97	; 0x61
          settings.CellGap = settings.CellGap * 0.001;
    4356:	63f0      	str	r0, [r6, #60]	; 0x3c
          incomingByte = 'a';
    4358:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    435a:	e025      	b.n	43a8 <menu()+0x590>
    435c:	f007 fe5e 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4360:	2800      	cmp	r0, #0
    4362:	f77f af56 	ble.w	4212 <menu()+0x3fa>
          settings.triptime = Serial.parseInt();
    4366:	4807      	ldr	r0, [pc, #28]	; (4384 <menu()+0x56c>)
    4368:	4e04      	ldr	r6, [pc, #16]	; (437c <menu()+0x564>)
    436a:	f005 faa1 	bl	98b0 <Stream::parseInt()>
          menuload = 1;
    436e:	2301      	movs	r3, #1
    4370:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4372:	2361      	movs	r3, #97	; 0x61
          settings.triptime = Serial.parseInt();
    4374:	f8a6 00ca 	strh.w	r0, [r6, #202]	; 0xca
          incomingByte = 'a';
    4378:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    437a:	e015      	b.n	43a8 <menu()+0x590>
    437c:	1fffd0d8 	.word	0x1fffd0d8
    4380:	1fff91f0 	.word	0x1fff91f0
    4384:	1fff89fc 	.word	0x1fff89fc
    4388:	00014dfc 	.word	0x00014dfc
    438c:	0001438c 	.word	0x0001438c
    4390:	000143a8 	.word	0x000143a8
    4394:	447a0000 	.word	0x447a0000
    4398:	000143d4 	.word	0x000143d4
    439c:	000143d8 	.word	0x000143d8
    43a0:	3a83126f 	.word	0x3a83126f
        virtual int read() { return usb_serial_getchar(); }
    43a4:	f007 fdfe 	bl	bfa4 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    43a8:	f007 fe38 	bl	c01c <usb_serial_available>
        while (Serial.available()) {
    43ac:	4605      	mov	r5, r0
    43ae:	2800      	cmp	r0, #0
    43b0:	d1f8      	bne.n	43a4 <menu()+0x58c>
        SERIALCONSOLE.println();
    43b2:	48af      	ldr	r0, [pc, #700]	; (4670 <menu()+0x858>)
    43b4:	f005 f91e 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    43b8:	48ad      	ldr	r0, [pc, #692]	; (4670 <menu()+0x858>)
    43ba:	f005 f91b 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    43be:	48ac      	ldr	r0, [pc, #688]	; (4670 <menu()+0x858>)
    43c0:	f005 f918 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    43c4:	48aa      	ldr	r0, [pc, #680]	; (4670 <menu()+0x858>)
    43c6:	f005 f915 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    43ca:	48a9      	ldr	r0, [pc, #676]	; (4670 <menu()+0x858>)
    43cc:	f005 f912 	bl	95f4 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    43d0:	211f      	movs	r1, #31
    43d2:	48a8      	ldr	r0, [pc, #672]	; (4674 <menu()+0x85c>)
    43d4:	f007 fe54 	bl	c080 <usb_serial_write>
    43d8:	48a5      	ldr	r0, [pc, #660]	; (4670 <menu()+0x858>)
    43da:	f005 f90b 	bl	95f4 <Print::println()>
    43de:	211c      	movs	r1, #28
    43e0:	48a5      	ldr	r0, [pc, #660]	; (4678 <menu()+0x860>)
    43e2:	f007 fe4d 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnOff * 1000, 0);
    43e6:	6a70      	ldr	r0, [r6, #36]	; 0x24
    43e8:	49a4      	ldr	r1, [pc, #656]	; (467c <menu()+0x864>)
    43ea:	f008 fd29 	bl	ce40 <__aeabi_fmul>
    43ee:	f008 fb03 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    43f2:	9500      	str	r5, [sp, #0]
    43f4:	4602      	mov	r2, r0
    43f6:	460b      	mov	r3, r1
    43f8:	489d      	ldr	r0, [pc, #628]	; (4670 <menu()+0x858>)
    43fa:	f005 f91d 	bl	9638 <Print::printFloat(double, unsigned char)>
    43fe:	2102      	movs	r1, #2
    4400:	489f      	ldr	r0, [pc, #636]	; (4680 <menu()+0x868>)
    4402:	f007 fe3d 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4406:	489a      	ldr	r0, [pc, #616]	; (4670 <menu()+0x858>)
    4408:	f005 f8f4 	bl	95f4 <Print::println()>
    440c:	2123      	movs	r1, #35	; 0x23
    440e:	489d      	ldr	r0, [pc, #628]	; (4684 <menu()+0x86c>)
    4410:	f007 fe36 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.CellGap * 1000, 0);
    4414:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    4416:	4999      	ldr	r1, [pc, #612]	; (467c <menu()+0x864>)
    4418:	f008 fd12 	bl	ce40 <__aeabi_fmul>
    441c:	f008 faec 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4420:	9500      	str	r5, [sp, #0]
    4422:	4602      	mov	r2, r0
    4424:	460b      	mov	r3, r1
    4426:	4892      	ldr	r0, [pc, #584]	; (4670 <menu()+0x858>)
    4428:	f005 f906 	bl	9638 <Print::printFloat(double, unsigned char)>
    442c:	2102      	movs	r1, #2
    442e:	4894      	ldr	r0, [pc, #592]	; (4680 <menu()+0x868>)
    4430:	f007 fe26 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4434:	488e      	ldr	r0, [pc, #568]	; (4670 <menu()+0x858>)
    4436:	f005 f8dd 	bl	95f4 <Print::println()>
    443a:	2119      	movs	r1, #25
    443c:	4892      	ldr	r0, [pc, #584]	; (4688 <menu()+0x870>)
    443e:	f007 fe1f 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnToff);
    4442:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    4444:	f008 fad8 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4448:	2502      	movs	r5, #2
    444a:	460b      	mov	r3, r1
    444c:	4602      	mov	r2, r0
    444e:	9500      	str	r5, [sp, #0]
    4450:	4887      	ldr	r0, [pc, #540]	; (4670 <menu()+0x858>)
    4452:	f005 f8f1 	bl	9638 <Print::printFloat(double, unsigned char)>
    4456:	4629      	mov	r1, r5
    4458:	488c      	ldr	r0, [pc, #560]	; (468c <menu()+0x874>)
    445a:	f007 fe11 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    445e:	4884      	ldr	r0, [pc, #528]	; (4670 <menu()+0x858>)
    4460:	f005 f8c8 	bl	95f4 <Print::println()>
    4464:	2122      	movs	r1, #34	; 0x22
    4466:	488a      	ldr	r0, [pc, #552]	; (4690 <menu()+0x878>)
    4468:	f007 fe0a 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    446c:	f8b6 10ca 	ldrh.w	r1, [r6, #202]	; 0xca
    4470:	487f      	ldr	r0, [pc, #508]	; (4670 <menu()+0x858>)
    4472:	f005 f8b7 	bl	95e4 <Print::print(long)>
    4476:	2103      	movs	r1, #3
    4478:	4886      	ldr	r0, [pc, #536]	; (4694 <menu()+0x87c>)
    447a:	f007 fe01 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    447e:	487c      	ldr	r0, [pc, #496]	; (4670 <menu()+0x858>)
    4480:	f005 f8b8 	bl	95f4 <Print::println()>
        menuload = 7;
    4484:	2307      	movs	r3, #7
    4486:	6023      	str	r3, [r4, #0]
        break;
    4488:	e52c      	b.n	3ee4 <menu()+0xcc>
          settings.IgnoreVolt = Serial.parseInt();
    448a:	4879      	ldr	r0, [pc, #484]	; (4670 <menu()+0x858>)
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    448c:	4e82      	ldr	r6, [pc, #520]	; (4698 <menu()+0x880>)
          settings.IgnoreVolt = Serial.parseInt();
    448e:	f005 fa0f 	bl	98b0 <Stream::parseInt()>
    4492:	f008 fc81 	bl	cd98 <__aeabi_i2f>
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    4496:	4981      	ldr	r1, [pc, #516]	; (469c <menu()+0x884>)
    4498:	f008 fcd2 	bl	ce40 <__aeabi_fmul>
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    449c:	6d33      	ldr	r3, [r6, #80]	; 0x50
    449e:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    44a2:	6470      	str	r0, [r6, #68]	; 0x44
    44a4:	4602      	mov	r2, r0
    44a6:	e644      	b.n	4132 <menu()+0x31a>
          settings.IgnoreTemp = Serial.parseInt();
    44a8:	4871      	ldr	r0, [pc, #452]	; (4670 <menu()+0x858>)
    44aa:	4e7b      	ldr	r6, [pc, #492]	; (4698 <menu()+0x880>)
    44ac:	f005 fa00 	bl	98b0 <Stream::parseInt()>
    44b0:	b2c1      	uxtb	r1, r0
    44b2:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    44b6:	e635      	b.n	4124 <menu()+0x30c>
          settings.WarnToff = Serial.parseInt();
    44b8:	486d      	ldr	r0, [pc, #436]	; (4670 <menu()+0x858>)
    44ba:	4e77      	ldr	r6, [pc, #476]	; (4698 <menu()+0x880>)
    44bc:	f005 f9f8 	bl	98b0 <Stream::parseInt()>
    44c0:	f008 fc6a 	bl	cd98 <__aeabi_i2f>
          menuload = 1;
    44c4:	2301      	movs	r3, #1
    44c6:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    44c8:	2361      	movs	r3, #97	; 0x61
          settings.WarnToff = Serial.parseInt();
    44ca:	63b0      	str	r0, [r6, #56]	; 0x38
          incomingByte = 'a';
    44cc:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    44ce:	e76b      	b.n	43a8 <menu()+0x590>
        balon = !balon;
    44d0:	4a73      	ldr	r2, [pc, #460]	; (46a0 <menu()+0x888>)
        gaugedebug = !gaugedebug;
    44d2:	6813      	ldr	r3, [r2, #0]
    44d4:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    44d8:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    44da:	2101      	movs	r1, #1
        gaugedebug = !gaugedebug;
    44dc:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    44de:	6021      	str	r1, [r4, #0]
        gaugedebug = !gaugedebug;
    44e0:	6013      	str	r3, [r2, #0]
        incomingByte = 'd';
    44e2:	6028      	str	r0, [r5, #0]
    switch (incomingByte) {
    44e4:	f1a0 0352 	sub.w	r3, r0, #82	; 0x52
    44e8:	2b1f      	cmp	r3, #31
    44ea:	f200 80bc 	bhi.w	4666 <menu()+0x84e>
    44ee:	e8df f013 	tbh	[pc, r3, lsl #1]
    44f2:	05b4      	.short	0x05b4
    44f4:	00ba00ba 	.word	0x00ba00ba
    44f8:	00ba00ba 	.word	0x00ba00ba
    44fc:	00ba00ba 	.word	0x00ba00ba
    4500:	00ba00ba 	.word	0x00ba00ba
    4504:	00ba00ba 	.word	0x00ba00ba
    4508:	00ba00ba 	.word	0x00ba00ba
    450c:	00ba00ba 	.word	0x00ba00ba
    4510:	05b605b1 	.word	0x05b605b1
    4514:	00220b03 	.word	0x00220b03
    4518:	00ba0afa 	.word	0x00ba0afa
    451c:	00ba00ba 	.word	0x00ba00ba
    4520:	00ba0af7 	.word	0x00ba0af7
    4524:	00ba0b06 	.word	0x00ba0b06
    4528:	00ba00ba 	.word	0x00ba00ba
    452c:	00ba00ba 	.word	0x00ba00ba
    4530:	05a1      	.short	0x05a1
        virtual int read() { return usb_serial_getchar(); }
    4532:	f007 fd37 	bl	bfa4 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4536:	f007 fd71 	bl	c01c <usb_serial_available>
        while (Serial.available()) {
    453a:	2800      	cmp	r0, #0
    453c:	d1f9      	bne.n	4532 <menu()+0x71a>
        SERIALCONSOLE.println();
    453e:	484c      	ldr	r0, [pc, #304]	; (4670 <menu()+0x858>)
    4540:	f005 f858 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4544:	484a      	ldr	r0, [pc, #296]	; (4670 <menu()+0x858>)
    4546:	f005 f855 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    454a:	4849      	ldr	r0, [pc, #292]	; (4670 <menu()+0x858>)
    454c:	f005 f852 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4550:	4847      	ldr	r0, [pc, #284]	; (4670 <menu()+0x858>)
    4552:	f005 f84f 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4556:	4846      	ldr	r0, [pc, #280]	; (4670 <menu()+0x858>)
    4558:	f005 f84c 	bl	95f4 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    455c:	2113      	movs	r1, #19
    455e:	4851      	ldr	r0, [pc, #324]	; (46a4 <menu()+0x88c>)
    4560:	f007 fd8e 	bl	c080 <usb_serial_write>
    4564:	4842      	ldr	r0, [pc, #264]	; (4670 <menu()+0x858>)
    4566:	f005 f845 	bl	95f4 <Print::println()>
    456a:	210d      	movs	r1, #13
    456c:	484e      	ldr	r0, [pc, #312]	; (46a8 <menu()+0x890>)
    456e:	f007 fd87 	bl	c080 <usb_serial_write>
    4572:	483f      	ldr	r0, [pc, #252]	; (4670 <menu()+0x858>)
    4574:	f005 f83e 	bl	95f4 <Print::println()>
    4578:	210f      	movs	r1, #15
    457a:	484c      	ldr	r0, [pc, #304]	; (46ac <menu()+0x894>)
    457c:	f007 fd80 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.println(candebug);
    4580:	4b4b      	ldr	r3, [pc, #300]	; (46b0 <menu()+0x898>)
	size_t print(int n)				{ return print((long)n); }
    4582:	483b      	ldr	r0, [pc, #236]	; (4670 <menu()+0x858>)
    4584:	6819      	ldr	r1, [r3, #0]
    4586:	f005 f82d 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    458a:	4839      	ldr	r0, [pc, #228]	; (4670 <menu()+0x858>)
    458c:	f005 f832 	bl	95f4 <Print::println()>
    4590:	2113      	movs	r1, #19
    4592:	4848      	ldr	r0, [pc, #288]	; (46b4 <menu()+0x89c>)
    4594:	f007 fd74 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.println(debugCur);
    4598:	4b47      	ldr	r3, [pc, #284]	; (46b8 <menu()+0x8a0>)
	size_t print(int n)				{ return print((long)n); }
    459a:	4835      	ldr	r0, [pc, #212]	; (4670 <menu()+0x858>)
    459c:	6819      	ldr	r1, [r3, #0]
    459e:	f005 f821 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    45a2:	4833      	ldr	r0, [pc, #204]	; (4670 <menu()+0x858>)
    45a4:	f005 f826 	bl	95f4 <Print::println()>
    45a8:	2112      	movs	r1, #18
    45aa:	4844      	ldr	r0, [pc, #272]	; (46bc <menu()+0x8a4>)
    45ac:	f007 fd68 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.println(outputcheck);
    45b0:	4b43      	ldr	r3, [pc, #268]	; (46c0 <menu()+0x8a8>)
	size_t print(int n)				{ return print((long)n); }
    45b2:	482f      	ldr	r0, [pc, #188]	; (4670 <menu()+0x858>)
    45b4:	6819      	ldr	r1, [r3, #0]
    45b6:	f005 f815 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    45ba:	482d      	ldr	r0, [pc, #180]	; (4670 <menu()+0x858>)
    45bc:	f005 f81a 	bl	95f4 <Print::println()>
    45c0:	2111      	movs	r1, #17
    45c2:	4840      	ldr	r0, [pc, #256]	; (46c4 <menu()+0x8ac>)
    45c4:	f007 fd5c 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.println(inputcheck);
    45c8:	4b3f      	ldr	r3, [pc, #252]	; (46c8 <menu()+0x8b0>)
	size_t print(int n)				{ return print((long)n); }
    45ca:	4829      	ldr	r0, [pc, #164]	; (4670 <menu()+0x858>)
    45cc:	6819      	ldr	r1, [r3, #0]
    45ce:	f005 f809 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    45d2:	4827      	ldr	r0, [pc, #156]	; (4670 <menu()+0x858>)
    45d4:	f005 f80e 	bl	95f4 <Print::println()>
    45d8:	210e      	movs	r1, #14
    45da:	483c      	ldr	r0, [pc, #240]	; (46cc <menu()+0x8b4>)
    45dc:	f007 fd50 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.println(settings.ESSmode);
    45e0:	4b2d      	ldr	r3, [pc, #180]	; (4698 <menu()+0x880>)
	size_t print(int n)				{ return print((long)n); }
    45e2:	4823      	ldr	r0, [pc, #140]	; (4670 <menu()+0x858>)
    45e4:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    45e8:	f004 fffc 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    45ec:	4820      	ldr	r0, [pc, #128]	; (4670 <menu()+0x858>)
    45ee:	f005 f801 	bl	95f4 <Print::println()>
    45f2:	2119      	movs	r1, #25
    45f4:	4836      	ldr	r0, [pc, #216]	; (46d0 <menu()+0x8b8>)
    45f6:	f007 fd43 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.println(cellspresent);
    45fa:	4b36      	ldr	r3, [pc, #216]	; (46d4 <menu()+0x8bc>)
	size_t print(int n)				{ return print((long)n); }
    45fc:	481c      	ldr	r0, [pc, #112]	; (4670 <menu()+0x858>)
    45fe:	6819      	ldr	r1, [r3, #0]
    4600:	f004 fff0 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4604:	481a      	ldr	r0, [pc, #104]	; (4670 <menu()+0x858>)
    4606:	f004 fff5 	bl	95f4 <Print::println()>
    460a:	2111      	movs	r1, #17
    460c:	4832      	ldr	r0, [pc, #200]	; (46d8 <menu()+0x8c0>)
    460e:	f007 fd37 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.println(gaugedebug);
    4612:	4b32      	ldr	r3, [pc, #200]	; (46dc <menu()+0x8c4>)
	size_t print(int n)				{ return print((long)n); }
    4614:	4816      	ldr	r0, [pc, #88]	; (4670 <menu()+0x858>)
    4616:	6819      	ldr	r1, [r3, #0]
    4618:	f004 ffe4 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    461c:	4814      	ldr	r0, [pc, #80]	; (4670 <menu()+0x858>)
    461e:	f004 ffe9 	bl	95f4 <Print::println()>
    4622:	2110      	movs	r1, #16
    4624:	482e      	ldr	r0, [pc, #184]	; (46e0 <menu()+0x8c8>)
    4626:	f007 fd2b 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.println(CSVdebug);
    462a:	4b2e      	ldr	r3, [pc, #184]	; (46e4 <menu()+0x8cc>)
	size_t print(int n)				{ return print((long)n); }
    462c:	4810      	ldr	r0, [pc, #64]	; (4670 <menu()+0x858>)
    462e:	6819      	ldr	r1, [r3, #0]
    4630:	f004 ffd8 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4634:	480e      	ldr	r0, [pc, #56]	; (4670 <menu()+0x858>)
    4636:	f004 ffdd 	bl	95f4 <Print::println()>
    463a:	211c      	movs	r1, #28
    463c:	482a      	ldr	r0, [pc, #168]	; (46e8 <menu()+0x8d0>)
    463e:	f007 fd1f 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.println(debugdigits);
    4642:	4b2a      	ldr	r3, [pc, #168]	; (46ec <menu()+0x8d4>)
	size_t print(int n)				{ return print((long)n); }
    4644:	480a      	ldr	r0, [pc, #40]	; (4670 <menu()+0x858>)
    4646:	6819      	ldr	r1, [r3, #0]
    4648:	f004 ffcc 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    464c:	4808      	ldr	r0, [pc, #32]	; (4670 <menu()+0x858>)
    464e:	f004 ffd1 	bl	95f4 <Print::println()>
    4652:	2113      	movs	r1, #19
    4654:	4826      	ldr	r0, [pc, #152]	; (46f0 <menu()+0x8d8>)
    4656:	f007 fd13 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    465a:	4805      	ldr	r0, [pc, #20]	; (4670 <menu()+0x858>)
    465c:	f004 ffca 	bl	95f4 <Print::println()>
        menuload = 4;
    4660:	2304      	movs	r3, #4
    4662:	6023      	str	r3, [r4, #0]
        break;
    4664:	e43e      	b.n	3ee4 <menu()+0xcc>
  if (incomingByte == 115 & menuload == 0) {
    4666:	6823      	ldr	r3, [r4, #0]
    4668:	e433      	b.n	3ed2 <menu()+0xba>
        debugCur = !debugCur;
    466a:	4a13      	ldr	r2, [pc, #76]	; (46b8 <menu()+0x8a0>)
    466c:	e731      	b.n	44d2 <menu()+0x6ba>
    466e:	bf00      	nop
    4670:	1fff89fc 	.word	0x1fff89fc
    4674:	000145c0 	.word	0x000145c0
    4678:	000145e0 	.word	0x000145e0
    467c:	447a0000 	.word	0x447a0000
    4680:	000143d4 	.word	0x000143d4
    4684:	00014600 	.word	0x00014600
    4688:	00014624 	.word	0x00014624
    468c:	0001459c 	.word	0x0001459c
    4690:	00014640 	.word	0x00014640
    4694:	00014664 	.word	0x00014664
    4698:	1fffd0d8 	.word	0x1fffd0d8
    469c:	3a83126f 	.word	0x3a83126f
    46a0:	1fff91ec 	.word	0x1fff91ec
    46a4:	00014774 	.word	0x00014774
    46a8:	00014788 	.word	0x00014788
    46ac:	00014798 	.word	0x00014798
    46b0:	1fffcf38 	.word	0x1fffcf38
    46b4:	000147a8 	.word	0x000147a8
    46b8:	1fffcfc8 	.word	0x1fffcfc8
    46bc:	000147bc 	.word	0x000147bc
    46c0:	1fffd0c4 	.word	0x1fffd0c4
    46c4:	000147d0 	.word	0x000147d0
    46c8:	1fffcff8 	.word	0x1fffcff8
    46cc:	000147e4 	.word	0x000147e4
    46d0:	000147f4 	.word	0x000147f4
    46d4:	1fffcf3c 	.word	0x1fffcf3c
    46d8:	00014810 	.word	0x00014810
    46dc:	1fffcfdc 	.word	0x1fffcfdc
    46e0:	00014824 	.word	0x00014824
    46e4:	1fff91a4 	.word	0x1fff91a4
    46e8:	00014838 	.word	0x00014838
    46ec:	1fff8850 	.word	0x1fff8850
    46f0:	000143d8 	.word	0x000143d8
        outputcheck = !outputcheck;
    46f4:	4ba9      	ldr	r3, [pc, #676]	; (499c <menu()+0xb84>)
    46f6:	681a      	ldr	r2, [r3, #0]
        menuload = 1;
    46f8:	2101      	movs	r1, #1
        outputcheck = !outputcheck;
    46fa:	2a00      	cmp	r2, #0
    46fc:	bf0c      	ite	eq
    46fe:	460a      	moveq	r2, r1
    4700:	2200      	movne	r2, #0
        menuload = 1;
    4702:	6021      	str	r1, [r4, #0]
        outputcheck = !outputcheck;
    4704:	601a      	str	r2, [r3, #0]
        if (outputcheck == 0) {
    4706:	f041 8150 	bne.w	59aa <menu()+0x1b92>
        incomingByte = 'd';
    470a:	2064      	movs	r0, #100	; 0x64
    470c:	6028      	str	r0, [r5, #0]
  if (menuload == 5) {
    470e:	e6e9      	b.n	44e4 <menu()+0x6cc>
        inputcheck = !inputcheck;
    4710:	4aa3      	ldr	r2, [pc, #652]	; (49a0 <menu()+0xb88>)
    4712:	e6de      	b.n	44d2 <menu()+0x6ba>
        settings.ESSmode = !settings.ESSmode;
    4714:	4ea3      	ldr	r6, [pc, #652]	; (49a4 <menu()+0xb8c>)
    4716:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
    471a:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    471e:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    4720:	2201      	movs	r2, #1
        settings.ESSmode = !settings.ESSmode;
    4722:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4724:	6022      	str	r2, [r4, #0]
        settings.ESSmode = !settings.ESSmode;
    4726:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
        incomingByte = 'd';
    472a:	6028      	str	r0, [r5, #0]
  if (menuload == 5) {
    472c:	e6da      	b.n	44e4 <menu()+0x6cc>
        menuload = 1;
    472e:	2301      	movs	r3, #1
        cellspresent = bms.seriescells();
    4730:	489d      	ldr	r0, [pc, #628]	; (49a8 <menu()+0xb90>)
        menuload = 1;
    4732:	6023      	str	r3, [r4, #0]
        cellspresent = bms.seriescells();
    4734:	f7fc fe42 	bl	13bc <BMSModuleManager::seriescells()>
    4738:	4b9c      	ldr	r3, [pc, #624]	; (49ac <menu()+0xb94>)
        incomingByte = 'd';
    473a:	2264      	movs	r2, #100	; 0x64
        cellspresent = bms.seriescells();
    473c:	6018      	str	r0, [r3, #0]
  if (menuload == 2) {
    473e:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    4740:	602a      	str	r2, [r5, #0]
  if (menuload == 8) {
    4742:	2b08      	cmp	r3, #8
    4744:	f040 8723 	bne.w	558e <menu()+0x1776>
    4748:	2064      	movs	r0, #100	; 0x64
  if (menuload == 3) {
    474a:	f7ff bbc2 	b.w	3ed2 <menu()+0xba>
        gaugedebug = !gaugedebug;
    474e:	4a98      	ldr	r2, [pc, #608]	; (49b0 <menu()+0xb98>)
    4750:	e6bf      	b.n	44d2 <menu()+0x6ba>
        CSVdebug = !CSVdebug;
    4752:	4a98      	ldr	r2, [pc, #608]	; (49b4 <menu()+0xb9c>)
    4754:	e6bd      	b.n	44d2 <menu()+0x6ba>
        menuload = 1;
    4756:	2301      	movs	r3, #1
    4758:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    475a:	f007 fc5f 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    475e:	2800      	cmp	r0, #0
    4760:	f301 8114 	bgt.w	598c <menu()+0x1b74>
        if (debugdigits > 4) {
    4764:	4b94      	ldr	r3, [pc, #592]	; (49b8 <menu()+0xba0>)
    4766:	6818      	ldr	r0, [r3, #0]
    4768:	2804      	cmp	r0, #4
          debugdigits = 2;
    476a:	bfc4      	itt	gt
    476c:	2202      	movgt	r2, #2
    476e:	601a      	strgt	r2, [r3, #0]
        incomingByte = 'd';
    4770:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    4772:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    4774:	602a      	str	r2, [r5, #0]
        break;
    4776:	e7e4      	b.n	4742 <menu()+0x92a>
        candebug = !candebug;
    4778:	4a90      	ldr	r2, [pc, #576]	; (49bc <menu()+0xba4>)
    477a:	e6aa      	b.n	44d2 <menu()+0x6ba>
        settings.invertcur = !settings.invertcur;
    477c:	4e89      	ldr	r6, [pc, #548]	; (49a4 <menu()+0xb8c>)
    477e:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    4780:	fab3 f383 	clz	r3, r3
    4784:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4786:	2201      	movs	r2, #1
        settings.invertcur = !settings.invertcur;
    4788:	67f3      	str	r3, [r6, #124]	; 0x7c
        incomingByte = 'c';
    478a:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    478c:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    478e:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4790:	e001      	b.n	4796 <menu()+0x97e>
        virtual int read() { return usb_serial_getchar(); }
    4792:	f007 fc07 	bl	bfa4 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4796:	f007 fc41 	bl	c01c <usb_serial_available>
        while (Serial.available()) {
    479a:	2800      	cmp	r0, #0
    479c:	d1f9      	bne.n	4792 <menu()+0x97a>
        SERIALCONSOLE.println();
    479e:	4888      	ldr	r0, [pc, #544]	; (49c0 <menu()+0xba8>)
    47a0:	f004 ff28 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    47a4:	4886      	ldr	r0, [pc, #536]	; (49c0 <menu()+0xba8>)
    47a6:	f004 ff25 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    47aa:	4885      	ldr	r0, [pc, #532]	; (49c0 <menu()+0xba8>)
    47ac:	f004 ff22 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    47b0:	4883      	ldr	r0, [pc, #524]	; (49c0 <menu()+0xba8>)
    47b2:	f004 ff1f 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    47b6:	4882      	ldr	r0, [pc, #520]	; (49c0 <menu()+0xba8>)
    47b8:	f004 ff1c 	bl	95f4 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    47bc:	211f      	movs	r1, #31
    47be:	4881      	ldr	r0, [pc, #516]	; (49c4 <menu()+0xbac>)
    47c0:	f007 fc5e 	bl	c080 <usb_serial_write>
    47c4:	487e      	ldr	r0, [pc, #504]	; (49c0 <menu()+0xba8>)
    47c6:	f004 ff15 	bl	95f4 <Print::println()>
    47ca:	211e      	movs	r1, #30
    47cc:	487e      	ldr	r0, [pc, #504]	; (49c8 <menu()+0xbb0>)
    47ce:	f007 fc57 	bl	c080 <usb_serial_write>
    47d2:	487b      	ldr	r0, [pc, #492]	; (49c0 <menu()+0xba8>)
    47d4:	f004 ff0e 	bl	95f4 <Print::println()>
    47d8:	487c      	ldr	r0, [pc, #496]	; (49cc <menu()+0xbb4>)
    47da:	211a      	movs	r1, #26
    47dc:	f007 fc50 	bl	c080 <usb_serial_write>
        switch (settings.cursens) {
    47e0:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    47e4:	2b02      	cmp	r3, #2
    47e6:	f001 810a 	beq.w	59fe <menu()+0x1be6>
    47ea:	2b03      	cmp	r3, #3
    47ec:	f001 80fe 	beq.w	59ec <menu()+0x1bd4>
    47f0:	2b01      	cmp	r3, #1
    47f2:	f001 80f2 	beq.w	59da <menu()+0x1bc2>
    47f6:	4876      	ldr	r0, [pc, #472]	; (49d0 <menu()+0xbb8>)
    47f8:	2109      	movs	r1, #9
    47fa:	f007 fc41 	bl	c080 <usb_serial_write>
    47fe:	4870      	ldr	r0, [pc, #448]	; (49c0 <menu()+0xba8>)
    4800:	f004 fef8 	bl	95f4 <Print::println()>
    4804:	2114      	movs	r1, #20
    4806:	4873      	ldr	r0, [pc, #460]	; (49d4 <menu()+0xbbc>)
    4808:	f007 fc3a 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    480c:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    480e:	486c      	ldr	r0, [pc, #432]	; (49c0 <menu()+0xba8>)
    4810:	f004 fee8 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4814:	486a      	ldr	r0, [pc, #424]	; (49c0 <menu()+0xba8>)
    4816:	f004 feed 	bl	95f4 <Print::println()>
    481a:	211c      	movs	r1, #28
    481c:	486e      	ldr	r0, [pc, #440]	; (49d8 <menu()+0xbc0>)
    481e:	f007 fc2f 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4822:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
    4826:	4866      	ldr	r0, [pc, #408]	; (49c0 <menu()+0xba8>)
    4828:	f004 fedc 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    482c:	4864      	ldr	r0, [pc, #400]	; (49c0 <menu()+0xba8>)
    482e:	f004 fee1 	bl	95f4 <Print::println()>
    4832:	211c      	movs	r1, #28
    4834:	4869      	ldr	r0, [pc, #420]	; (49dc <menu()+0xbc4>)
    4836:	f007 fc23 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    483a:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
    483e:	4860      	ldr	r0, [pc, #384]	; (49c0 <menu()+0xba8>)
    4840:	f004 fed0 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4844:	485e      	ldr	r0, [pc, #376]	; (49c0 <menu()+0xba8>)
    4846:	f004 fed5 	bl	95f4 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    484a:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    484e:	f025 0702 	bic.w	r7, r5, #2
    4852:	2f01      	cmp	r7, #1
    4854:	f000 86b7 	beq.w	55c6 <menu()+0x17ae>
        if (settings.cursens == Canbus) {
    4858:	2d02      	cmp	r5, #2
    485a:	f001 80d9 	beq.w	5a10 <menu()+0x1bf8>
    485e:	2113      	movs	r1, #19
    4860:	485f      	ldr	r0, [pc, #380]	; (49e0 <menu()+0xbc8>)
    4862:	f007 fc0d 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4866:	4856      	ldr	r0, [pc, #344]	; (49c0 <menu()+0xba8>)
    4868:	f004 fec4 	bl	95f4 <Print::println()>
        menuload = 2;
    486c:	2302      	movs	r3, #2
    486e:	6023      	str	r3, [r4, #0]
        break;
    4870:	f7ff bb38 	b.w	3ee4 <menu()+0xcc>
        settings.voltsoc = !settings.voltsoc;
    4874:	4e4b      	ldr	r6, [pc, #300]	; (49a4 <menu()+0xb8c>)
    4876:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
    487a:	fab3 f383 	clz	r3, r3
    487e:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4880:	2201      	movs	r2, #1
        settings.voltsoc = !settings.voltsoc;
    4882:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        incomingByte = 'c';
    4886:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    4888:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    488a:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    488c:	e783      	b.n	4796 <menu()+0x97e>
        menuload = 1;
    488e:	2301      	movs	r3, #1
    4890:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    4892:	f007 fbc3 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4896:	2800      	cmp	r0, #0
    4898:	dd07      	ble.n	48aa <menu()+0xa92>
          settings.convlow = Serial.parseInt();
    489a:	4849      	ldr	r0, [pc, #292]	; (49c0 <menu()+0xba8>)
    489c:	4e41      	ldr	r6, [pc, #260]	; (49a4 <menu()+0xb8c>)
    489e:	f005 f807 	bl	98b0 <Stream::parseInt()>
    48a2:	f008 fa79 	bl	cd98 <__aeabi_i2f>
    48a6:	f8c6 0094 	str.w	r0, [r6, #148]	; 0x94
  if (menuload == 8) {
    48aa:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'c';
    48ac:	2063      	movs	r0, #99	; 0x63
  if (menuload == 7) {
    48ae:	2b07      	cmp	r3, #7
        incomingByte = 'c';
    48b0:	6028      	str	r0, [r5, #0]
  if (menuload == 7) {
    48b2:	f43f ab0e 	beq.w	3ed2 <menu()+0xba>
  if (menuload == 5) {
    48b6:	2b05      	cmp	r3, #5
    48b8:	f041 8118 	bne.w	5aec <menu()+0x1cd4>
          incomingByte = 'i';
    48bc:	2305      	movs	r3, #5
    48be:	f7ff bb08 	b.w	3ed2 <menu()+0xba>
        menuload = 1;
    48c2:	2301      	movs	r3, #1
    48c4:	6023      	str	r3, [r4, #0]
    48c6:	f007 fba9 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    48ca:	2800      	cmp	r0, #0
    48cc:	dded      	ble.n	48aa <menu()+0xa92>
          settings.convhigh = Serial.parseInt();
    48ce:	483c      	ldr	r0, [pc, #240]	; (49c0 <menu()+0xba8>)
    48d0:	4e34      	ldr	r6, [pc, #208]	; (49a4 <menu()+0xb8c>)
    48d2:	f004 ffed 	bl	98b0 <Stream::parseInt()>
    48d6:	f008 fa5f 	bl	cd98 <__aeabi_i2f>
    48da:	f8c6 0090 	str.w	r0, [r6, #144]	; 0x90
    48de:	e7e4      	b.n	48aa <menu()+0xa92>
        menuload = 1;
    48e0:	2301      	movs	r3, #1
    48e2:	6023      	str	r3, [r4, #0]
    48e4:	f007 fb9a 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    48e8:	2800      	cmp	r0, #0
    48ea:	f301 8056 	bgt.w	599a <menu()+0x1b82>
    48ee:	4e2d      	ldr	r6, [pc, #180]	; (49a4 <menu()+0xb8c>)
        menuload = 1;
    48f0:	2201      	movs	r2, #1
        incomingByte = 'c';
    48f2:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    48f4:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    48f6:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    48f8:	e74d      	b.n	4796 <menu()+0x97e>
        menuload = 1;
    48fa:	2301      	movs	r3, #1
    48fc:	6023      	str	r3, [r4, #0]
    48fe:	f007 fb8d 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4902:	2800      	cmp	r0, #0
    4904:	ddf3      	ble.n	48ee <menu()+0xad6>
          settings.changecur = Serial.parseInt();
    4906:	482e      	ldr	r0, [pc, #184]	; (49c0 <menu()+0xba8>)
    4908:	4e26      	ldr	r6, [pc, #152]	; (49a4 <menu()+0xb8c>)
    490a:	f004 ffd1 	bl	98b0 <Stream::parseInt()>
    490e:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c
    4912:	e7ed      	b.n	48f0 <menu()+0xad8>
        menuload = 1;
    4914:	2301      	movs	r3, #1
    4916:	6023      	str	r3, [r4, #0]
    4918:	f007 fb80 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    491c:	2800      	cmp	r0, #0
    491e:	ddc4      	ble.n	48aa <menu()+0xa92>
          settings.CurDead = Serial.parseInt();
    4920:	4827      	ldr	r0, [pc, #156]	; (49c0 <menu()+0xba8>)
    4922:	4e20      	ldr	r6, [pc, #128]	; (49a4 <menu()+0xb8c>)
    4924:	f004 ffc4 	bl	98b0 <Stream::parseInt()>
    4928:	f8a6 00c2 	strh.w	r0, [r6, #194]	; 0xc2
    492c:	e7bd      	b.n	48aa <menu()+0xa92>
        settings.curcan++;
    492e:	4e1d      	ldr	r6, [pc, #116]	; (49a4 <menu()+0xb8c>)
    4930:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
        menuload = 1;
    4934:	2201      	movs	r2, #1
        settings.curcan++;
    4936:	4413      	add	r3, r2
          settings.curcan = 1;
    4938:	2b05      	cmp	r3, #5
    493a:	bfa8      	it	ge
    493c:	4613      	movge	r3, r2
        menuload = 1;
    493e:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    4940:	2263      	movs	r2, #99	; 0x63
    4942:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
    4946:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    4948:	e725      	b.n	4796 <menu()+0x97e>
        settings.cursens++;
    494a:	4e16      	ldr	r6, [pc, #88]	; (49a4 <menu()+0xb8c>)
    494c:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
        menuload = 1;
    4950:	2201      	movs	r2, #1
        settings.cursens++;
    4952:	4413      	add	r3, r2
          settings.cursens = 0;
    4954:	2b04      	cmp	r3, #4
        menuload = 1;
    4956:	6022      	str	r2, [r4, #0]
          settings.cursens = 0;
    4958:	bfa8      	it	ge
    495a:	2300      	movge	r3, #0
        incomingByte = 'c';
    495c:	2263      	movs	r2, #99	; 0x63
    495e:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
    4962:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    4964:	e717      	b.n	4796 <menu()+0x97e>
    4966:	f007 fb59 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    496a:	2800      	cmp	r0, #0
    496c:	f300 87fe 	bgt.w	596c <menu()+0x1b54>
  if (menuload == 5) {
    4970:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4972:	6828      	ldr	r0, [r5, #0]
  if (menuload == 5) {
    4974:	2b05      	cmp	r3, #5
    4976:	d13c      	bne.n	49f2 <menu()+0xbda>
    switch (incomingByte) {
    4978:	2836      	cmp	r0, #54	; 0x36
    497a:	f300 85cd 	bgt.w	5518 <menu()+0x1700>
    497e:	2830      	cmp	r0, #48	; 0x30
    4980:	f77f aaa7 	ble.w	3ed2 <menu()+0xba>
    4984:	3832      	subs	r0, #50	; 0x32
    4986:	2804      	cmp	r0, #4
    4988:	f201 80bc 	bhi.w	5b04 <menu()+0x1cec>
    498c:	e8df f010 	tbh	[pc, r0, lsl #1]
    4990:	0140015d 	.word	0x0140015d
    4994:	002a00c2 	.word	0x002a00c2
    4998:	0150      	.short	0x0150
    499a:	bf00      	nop
    499c:	1fffd0c4 	.word	0x1fffd0c4
    49a0:	1fffcff8 	.word	0x1fffcff8
    49a4:	1fffd0d8 	.word	0x1fffd0d8
    49a8:	1fff91f0 	.word	0x1fff91f0
    49ac:	1fffcf3c 	.word	0x1fffcf3c
    49b0:	1fffcfdc 	.word	0x1fffcfdc
    49b4:	1fff91a4 	.word	0x1fff91a4
    49b8:	1fff8850 	.word	0x1fff8850
    49bc:	1fffcf38 	.word	0x1fffcf38
    49c0:	1fff89fc 	.word	0x1fff89fc
    49c4:	00014858 	.word	0x00014858
    49c8:	00014878 	.word	0x00014878
    49cc:	00014898 	.word	0x00014898
    49d0:	00014910 	.word	0x00014910
    49d4:	0001491c 	.word	0x0001491c
    49d8:	00014934 	.word	0x00014934
    49dc:	00014954 	.word	0x00014954
    49e0:	000143d8 	.word	0x000143d8
    49e4:	f007 fb1a 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    49e8:	2800      	cmp	r0, #0
    49ea:	f300 865b 	bgt.w	56a4 <menu()+0x188c>
  if (menuload == 3) {
    49ee:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    49f0:	6828      	ldr	r0, [r5, #0]
  if (menuload == 3) {
    49f2:	2b03      	cmp	r3, #3
    49f4:	f040 85c6 	bne.w	5584 <menu()+0x176c>
    switch (incomingByte) {
    49f8:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    49fc:	2a42      	cmp	r2, #66	; 0x42
    49fe:	f63f aa68 	bhi.w	3ed2 <menu()+0xba>
    4a02:	a101      	add	r1, pc, #4	; (adr r1, 4a08 <menu()+0xbf0>)
    4a04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4a08:	00005813 	.word	0x00005813
    4a0c:	0000583d 	.word	0x0000583d
    4a10:	000057f3 	.word	0x000057f3
    4a14:	00005939 	.word	0x00005939
    4a18:	0000591f 	.word	0x0000591f
    4a1c:	000058ff 	.word	0x000058ff
    4a20:	000058c5 	.word	0x000058c5
    4a24:	000058af 	.word	0x000058af
    4a28:	00005893 	.word	0x00005893
    4a2c:	00005873 	.word	0x00005873
    4a30:	00003ed3 	.word	0x00003ed3
    4a34:	00003ed3 	.word	0x00003ed3
    4a38:	00003ed3 	.word	0x00003ed3
    4a3c:	00003ed3 	.word	0x00003ed3
    4a40:	00003ed3 	.word	0x00003ed3
    4a44:	00003ed3 	.word	0x00003ed3
    4a48:	00003ed3 	.word	0x00003ed3
    4a4c:	00003ed3 	.word	0x00003ed3
    4a50:	00003ed3 	.word	0x00003ed3
    4a54:	00003ed3 	.word	0x00003ed3
    4a58:	00003ed3 	.word	0x00003ed3
    4a5c:	00003ed3 	.word	0x00003ed3
    4a60:	00003ed3 	.word	0x00003ed3
    4a64:	00003ed3 	.word	0x00003ed3
    4a68:	00003ed3 	.word	0x00003ed3
    4a6c:	00003ed3 	.word	0x00003ed3
    4a70:	00003ed3 	.word	0x00003ed3
    4a74:	00003ed3 	.word	0x00003ed3
    4a78:	00003ed3 	.word	0x00003ed3
    4a7c:	00003ed3 	.word	0x00003ed3
    4a80:	00003ed3 	.word	0x00003ed3
    4a84:	00003ed3 	.word	0x00003ed3
    4a88:	00003ed3 	.word	0x00003ed3
    4a8c:	00003ed3 	.word	0x00003ed3
    4a90:	00003ed3 	.word	0x00003ed3
    4a94:	00003ed3 	.word	0x00003ed3
    4a98:	00003ed3 	.word	0x00003ed3
    4a9c:	00003ed3 	.word	0x00003ed3
    4aa0:	00003ed3 	.word	0x00003ed3
    4aa4:	00003ed3 	.word	0x00003ed3
    4aa8:	00003ed3 	.word	0x00003ed3
    4aac:	00003ed3 	.word	0x00003ed3
    4ab0:	00003ed3 	.word	0x00003ed3
    4ab4:	00003ed3 	.word	0x00003ed3
    4ab8:	00003ed3 	.word	0x00003ed3
    4abc:	00003ed3 	.word	0x00003ed3
    4ac0:	00003ed3 	.word	0x00003ed3
    4ac4:	00003ed3 	.word	0x00003ed3
    4ac8:	00003ed3 	.word	0x00003ed3
    4acc:	0000585d 	.word	0x0000585d
    4ad0:	00005579 	.word	0x00005579
    4ad4:	000056e7 	.word	0x000056e7
    4ad8:	00005713 	.word	0x00005713
    4adc:	000056fd 	.word	0x000056fd
    4ae0:	00005785 	.word	0x00005785
    4ae4:	0000552f 	.word	0x0000552f
    4ae8:	00005553 	.word	0x00005553
    4aec:	00003ed3 	.word	0x00003ed3
    4af0:	00005953 	.word	0x00005953
    4af4:	000057d1 	.word	0x000057d1
    4af8:	00003ed3 	.word	0x00003ed3
    4afc:	00003ed3 	.word	0x00003ed3
    4b00:	00003ed3 	.word	0x00003ed3
    4b04:	00003ed3 	.word	0x00003ed3
    4b08:	00003ed3 	.word	0x00003ed3
    4b0c:	000057c3 	.word	0x000057c3
    4b10:	000056b9 	.word	0x000056b9
    4b14:	f007 fa82 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4b18:	2800      	cmp	r0, #0
    4b1a:	f77f af68 	ble.w	49ee <menu()+0xbd6>
          settings.gaugelow = Serial.parseInt();
    4b1e:	48b4      	ldr	r0, [pc, #720]	; (4df0 <menu()+0xfd8>)
    4b20:	4eb4      	ldr	r6, [pc, #720]	; (4df4 <menu()+0xfdc>)
    4b22:	f004 fec5 	bl	98b0 <Stream::parseInt()>
          gaugedebug = 2;
    4b26:	4bb4      	ldr	r3, [pc, #720]	; (4df8 <menu()+0xfe0>)
          settings.gaugelow = Serial.parseInt();
    4b28:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
          gaugedebug = 2;
    4b2c:	2202      	movs	r2, #2
          gaugedebug = 3;
    4b2e:	601a      	str	r2, [r3, #0]
          gaugeupdate();
    4b30:	f7fd fdd6 	bl	26e0 <gaugeupdate()>
          menuload = 1;
    4b34:	2201      	movs	r2, #1
          incomingByte = 'k';
    4b36:	236b      	movs	r3, #107	; 0x6b
          menuload = 1;
    4b38:	6022      	str	r2, [r4, #0]
          incomingByte = 'k';
    4b3a:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4b3c:	e001      	b.n	4b42 <menu()+0xd2a>
        virtual int read() { return usb_serial_getchar(); }
    4b3e:	f007 fa31 	bl	bfa4 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4b42:	f007 fa6b 	bl	c01c <usb_serial_available>
        while (Serial.available()) {
    4b46:	2800      	cmp	r0, #0
    4b48:	d1f9      	bne.n	4b3e <menu()+0xd26>
        SERIALCONSOLE.println();
    4b4a:	48a9      	ldr	r0, [pc, #676]	; (4df0 <menu()+0xfd8>)
    4b4c:	f004 fd52 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4b50:	48a7      	ldr	r0, [pc, #668]	; (4df0 <menu()+0xfd8>)
    4b52:	f004 fd4f 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4b56:	48a6      	ldr	r0, [pc, #664]	; (4df0 <menu()+0xfd8>)
    4b58:	f004 fd4c 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4b5c:	48a4      	ldr	r0, [pc, #656]	; (4df0 <menu()+0xfd8>)
    4b5e:	f004 fd49 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4b62:	48a3      	ldr	r0, [pc, #652]	; (4df0 <menu()+0xfd8>)
    4b64:	f004 fd46 	bl	95f4 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4b68:	2121      	movs	r1, #33	; 0x21
    4b6a:	48a4      	ldr	r0, [pc, #656]	; (4dfc <menu()+0xfe4>)
    4b6c:	f007 fa88 	bl	c080 <usb_serial_write>
    4b70:	489f      	ldr	r0, [pc, #636]	; (4df0 <menu()+0xfd8>)
    4b72:	f004 fd3f 	bl	95f4 <Print::println()>
    4b76:	2115      	movs	r1, #21
    4b78:	48a1      	ldr	r0, [pc, #644]	; (4e00 <menu()+0xfe8>)
    4b7a:	f007 fa81 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4b7e:	f8d6 1098 	ldr.w	r1, [r6, #152]	; 0x98
    4b82:	489b      	ldr	r0, [pc, #620]	; (4df0 <menu()+0xfd8>)
    4b84:	f004 fd2e 	bl	95e4 <Print::print(long)>
    4b88:	2102      	movs	r1, #2
    4b8a:	489e      	ldr	r0, [pc, #632]	; (4e04 <menu()+0xfec>)
    4b8c:	f007 fa78 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4b90:	4897      	ldr	r0, [pc, #604]	; (4df0 <menu()+0xfd8>)
    4b92:	f004 fd2f 	bl	95f4 <Print::println()>
    4b96:	211e      	movs	r1, #30
    4b98:	489b      	ldr	r0, [pc, #620]	; (4e08 <menu()+0xff0>)
    4b9a:	f007 fa71 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4b9e:	f8d6 10a0 	ldr.w	r1, [r6, #160]	; 0xa0
    4ba2:	4893      	ldr	r0, [pc, #588]	; (4df0 <menu()+0xfd8>)
    4ba4:	f004 fd1e 	bl	95e4 <Print::print(long)>
    4ba8:	2103      	movs	r1, #3
    4baa:	4898      	ldr	r0, [pc, #608]	; (4e0c <menu()+0xff4>)
    4bac:	f007 fa68 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4bb0:	488f      	ldr	r0, [pc, #572]	; (4df0 <menu()+0xfd8>)
    4bb2:	f004 fd1f 	bl	95f4 <Print::println()>
    4bb6:	211e      	movs	r1, #30
    4bb8:	4895      	ldr	r0, [pc, #596]	; (4e10 <menu()+0xff8>)
    4bba:	f007 fa61 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4bbe:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    4bc2:	488b      	ldr	r0, [pc, #556]	; (4df0 <menu()+0xfd8>)
    4bc4:	f004 fd0e 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4bc8:	4889      	ldr	r0, [pc, #548]	; (4df0 <menu()+0xfd8>)
    4bca:	f004 fd13 	bl	95f4 <Print::println()>
    4bce:	211d      	movs	r1, #29
    4bd0:	4890      	ldr	r0, [pc, #576]	; (4e14 <menu()+0xffc>)
    4bd2:	f007 fa55 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4bd6:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
    4bda:	4885      	ldr	r0, [pc, #532]	; (4df0 <menu()+0xfd8>)
    4bdc:	f004 fd02 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4be0:	4883      	ldr	r0, [pc, #524]	; (4df0 <menu()+0xfd8>)
    4be2:	f004 fd07 	bl	95f4 <Print::println()>
    4be6:	211e      	movs	r1, #30
    4be8:	488b      	ldr	r0, [pc, #556]	; (4e18 <menu()+0x1000>)
    4bea:	f007 fa49 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4bee:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
    4bf2:	487f      	ldr	r0, [pc, #508]	; (4df0 <menu()+0xfd8>)
    4bf4:	f004 fcf6 	bl	95e4 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4bf8:	487d      	ldr	r0, [pc, #500]	; (4df0 <menu()+0xfd8>)
    4bfa:	f004 fcfb 	bl	95f4 <Print::println()>
        if (settings.ESSmode == 1) {
    4bfe:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
    4c02:	2b01      	cmp	r3, #1
    4c04:	f000 8719 	beq.w	5a3a <menu()+0x1c22>
        menuload = 5;
    4c08:	2305      	movs	r3, #5
    4c0a:	6023      	str	r3, [r4, #0]
        break;
    4c0c:	f7ff b96a 	b.w	3ee4 <menu()+0xcc>
        virtual int available() { return usb_serial_available(); }
    4c10:	f007 fa04 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4c14:	2800      	cmp	r0, #0
    4c16:	f77f aeea 	ble.w	49ee <menu()+0xbd6>
          settings.conthold = Serial.parseInt();
    4c1a:	4875      	ldr	r0, [pc, #468]	; (4df0 <menu()+0xfd8>)
    4c1c:	4e75      	ldr	r6, [pc, #468]	; (4df4 <menu()+0xfdc>)
    4c1e:	f004 fe47 	bl	98b0 <Stream::parseInt()>
          menuload = 1;
    4c22:	2301      	movs	r3, #1
    4c24:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    4c26:	236b      	movs	r3, #107	; 0x6b
          settings.conthold = Serial.parseInt();
    4c28:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
          incomingByte = 'k';
    4c2c:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4c2e:	e788      	b.n	4b42 <menu()+0xd2a>
        settings.tripcont = !settings.tripcont;
    4c30:	4e70      	ldr	r6, [pc, #448]	; (4df4 <menu()+0xfdc>)
    4c32:	f896 30c9 	ldrb.w	r3, [r6, #201]	; 0xc9
          menuload = 1;
    4c36:	2201      	movs	r2, #1
        settings.tripcont = !settings.tripcont;
    4c38:	fab3 f383 	clz	r3, r3
          menuload = 1;
    4c3c:	6022      	str	r2, [r4, #0]
        settings.tripcont = !settings.tripcont;
    4c3e:	095b      	lsrs	r3, r3, #5
          incomingByte = 'k';
    4c40:	226b      	movs	r2, #107	; 0x6b
        settings.tripcont = !settings.tripcont;
    4c42:	f886 30c9 	strb.w	r3, [r6, #201]	; 0xc9
          incomingByte = 'k';
    4c46:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    4c48:	e77b      	b.n	4b42 <menu()+0xd2a>
    4c4a:	f007 f9e7 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4c4e:	2800      	cmp	r0, #0
    4c50:	f77f aecd 	ble.w	49ee <menu()+0xbd6>
          settings.Precurrent = Serial.parseInt();
    4c54:	4866      	ldr	r0, [pc, #408]	; (4df0 <menu()+0xfd8>)
    4c56:	4e67      	ldr	r6, [pc, #412]	; (4df4 <menu()+0xfdc>)
    4c58:	f004 fe2a 	bl	98b0 <Stream::parseInt()>
          menuload = 1;
    4c5c:	2301      	movs	r3, #1
    4c5e:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    4c60:	236b      	movs	r3, #107	; 0x6b
          settings.Precurrent = Serial.parseInt();
    4c62:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
          incomingByte = 'k';
    4c66:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4c68:	e76b      	b.n	4b42 <menu()+0xd2a>
    4c6a:	f007 f9d7 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4c6e:	2800      	cmp	r0, #0
    4c70:	f77f ae7e 	ble.w	4970 <menu()+0xb58>
          settings.ChargeVsetpoint = Serial.parseInt();
    4c74:	485e      	ldr	r0, [pc, #376]	; (4df0 <menu()+0xfd8>)
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    4c76:	4e5f      	ldr	r6, [pc, #380]	; (4df4 <menu()+0xfdc>)
          settings.ChargeVsetpoint = Serial.parseInt();
    4c78:	f004 fe1a 	bl	98b0 <Stream::parseInt()>
    4c7c:	f008 f88c 	bl	cd98 <__aeabi_i2f>
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    4c80:	4966      	ldr	r1, [pc, #408]	; (4e1c <menu()+0x1004>)
    4c82:	f008 f991 	bl	cfa8 <__aeabi_fdiv>
          menuload = 1;
    4c86:	2301      	movs	r3, #1
    4c88:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    4c8a:	2365      	movs	r3, #101	; 0x65
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    4c8c:	6170      	str	r0, [r6, #20]
          incomingByte = 'e';
    4c8e:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4c90:	e001      	b.n	4c96 <menu()+0xe7e>
        virtual int read() { return usb_serial_getchar(); }
    4c92:	f007 f987 	bl	bfa4 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4c96:	f007 f9c1 	bl	c01c <usb_serial_available>
        while (Serial.available()) {
    4c9a:	4605      	mov	r5, r0
    4c9c:	2800      	cmp	r0, #0
    4c9e:	d1f8      	bne.n	4c92 <menu()+0xe7a>
        SERIALCONSOLE.println();
    4ca0:	4853      	ldr	r0, [pc, #332]	; (4df0 <menu()+0xfd8>)
    4ca2:	f004 fca7 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4ca6:	4852      	ldr	r0, [pc, #328]	; (4df0 <menu()+0xfd8>)
    4ca8:	f004 fca4 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4cac:	4850      	ldr	r0, [pc, #320]	; (4df0 <menu()+0xfd8>)
    4cae:	f004 fca1 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4cb2:	484f      	ldr	r0, [pc, #316]	; (4df0 <menu()+0xfd8>)
    4cb4:	f004 fc9e 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    4cb8:	484d      	ldr	r0, [pc, #308]	; (4df0 <menu()+0xfd8>)
    4cba:	f004 fc9b 	bl	95f4 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4cbe:	2111      	movs	r1, #17
    4cc0:	4857      	ldr	r0, [pc, #348]	; (4e20 <menu()+0x1008>)
    4cc2:	f007 f9dd 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4cc6:	484a      	ldr	r0, [pc, #296]	; (4df0 <menu()+0xfd8>)
    4cc8:	f004 fc94 	bl	95f4 <Print::println()>
    4ccc:	2128      	movs	r1, #40	; 0x28
    4cce:	4855      	ldr	r0, [pc, #340]	; (4e24 <menu()+0x100c>)
    4cd0:	f007 f9d6 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeVsetpoint * 1000, 0);
    4cd4:	6970      	ldr	r0, [r6, #20]
    4cd6:	4951      	ldr	r1, [pc, #324]	; (4e1c <menu()+0x1004>)
    4cd8:	f008 f8b2 	bl	ce40 <__aeabi_fmul>
    4cdc:	f007 fe8c 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4ce0:	9500      	str	r5, [sp, #0]
    4ce2:	4602      	mov	r2, r0
    4ce4:	460b      	mov	r3, r1
    4ce6:	4842      	ldr	r0, [pc, #264]	; (4df0 <menu()+0xfd8>)
    4ce8:	f004 fca6 	bl	9638 <Print::printFloat(double, unsigned char)>
    4cec:	2102      	movs	r1, #2
    4cee:	484e      	ldr	r0, [pc, #312]	; (4e28 <menu()+0x1010>)
    4cf0:	f007 f9c6 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4cf4:	483e      	ldr	r0, [pc, #248]	; (4df0 <menu()+0xfd8>)
    4cf6:	f004 fc7d 	bl	95f4 <Print::println()>
    4cfa:	2116      	movs	r1, #22
    4cfc:	484b      	ldr	r0, [pc, #300]	; (4e2c <menu()+0x1014>)
    4cfe:	f007 f9bf 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeHys * 1000, 0);
    4d02:	69f0      	ldr	r0, [r6, #28]
    4d04:	4945      	ldr	r1, [pc, #276]	; (4e1c <menu()+0x1004>)
    4d06:	f008 f89b 	bl	ce40 <__aeabi_fmul>
    4d0a:	f007 fe75 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4d0e:	9500      	str	r5, [sp, #0]
    4d10:	460b      	mov	r3, r1
    4d12:	4602      	mov	r2, r0
    4d14:	4836      	ldr	r0, [pc, #216]	; (4df0 <menu()+0xfd8>)
    4d16:	f004 fc8f 	bl	9638 <Print::printFloat(double, unsigned char)>
    4d1a:	2102      	movs	r1, #2
    4d1c:	4842      	ldr	r0, [pc, #264]	; (4e28 <menu()+0x1010>)
    4d1e:	f007 f9af 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4d22:	4833      	ldr	r0, [pc, #204]	; (4df0 <menu()+0xfd8>)
    4d24:	f004 fc66 	bl	95f4 <Print::println()>
        if (settings.chargertype > 0) {
    4d28:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
    4d2c:	2b00      	cmp	r3, #0
    4d2e:	dd32      	ble.n	4d96 <menu()+0xf7e>
    4d30:	211d      	movs	r1, #29
    4d32:	483f      	ldr	r0, [pc, #252]	; (4e30 <menu()+0x1018>)
    4d34:	f007 f9a4 	bl	c080 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentmax * 0.1);
    4d38:	6e30      	ldr	r0, [r6, #96]	; 0x60
    4d3a:	f008 f82d 	bl	cd98 <__aeabi_i2f>
    4d3e:	493d      	ldr	r1, [pc, #244]	; (4e34 <menu()+0x101c>)
    4d40:	f008 f87e 	bl	ce40 <__aeabi_fmul>
    4d44:	f007 fe58 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4d48:	2502      	movs	r5, #2
    4d4a:	4602      	mov	r2, r0
    4d4c:	460b      	mov	r3, r1
    4d4e:	4828      	ldr	r0, [pc, #160]	; (4df0 <menu()+0xfd8>)
    4d50:	9500      	str	r5, [sp, #0]
    4d52:	f004 fc71 	bl	9638 <Print::printFloat(double, unsigned char)>
    4d56:	2101      	movs	r1, #1
    4d58:	4837      	ldr	r0, [pc, #220]	; (4e38 <menu()+0x1020>)
    4d5a:	f007 f991 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4d5e:	4824      	ldr	r0, [pc, #144]	; (4df0 <menu()+0xfd8>)
    4d60:	f004 fc48 	bl	95f4 <Print::println()>
    4d64:	211f      	movs	r1, #31
    4d66:	4835      	ldr	r0, [pc, #212]	; (4e3c <menu()+0x1024>)
    4d68:	f007 f98a 	bl	c080 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentend * 0.1);
    4d6c:	6e70      	ldr	r0, [r6, #100]	; 0x64
    4d6e:	f008 f813 	bl	cd98 <__aeabi_i2f>
    4d72:	4930      	ldr	r1, [pc, #192]	; (4e34 <menu()+0x101c>)
    4d74:	f008 f864 	bl	ce40 <__aeabi_fmul>
    4d78:	f007 fe3e 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4d7c:	9500      	str	r5, [sp, #0]
    4d7e:	4602      	mov	r2, r0
    4d80:	460b      	mov	r3, r1
    4d82:	481b      	ldr	r0, [pc, #108]	; (4df0 <menu()+0xfd8>)
    4d84:	f004 fc58 	bl	9638 <Print::printFloat(double, unsigned char)>
    4d88:	482b      	ldr	r0, [pc, #172]	; (4e38 <menu()+0x1020>)
    4d8a:	2101      	movs	r1, #1
    4d8c:	f007 f978 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4d90:	4817      	ldr	r0, [pc, #92]	; (4df0 <menu()+0xfd8>)
    4d92:	f004 fc2f 	bl	95f4 <Print::println()>
    4d96:	482a      	ldr	r0, [pc, #168]	; (4e40 <menu()+0x1028>)
    4d98:	2111      	movs	r1, #17
    4d9a:	f007 f971 	bl	c080 <usb_serial_write>
        switch (settings.chargertype) {
    4d9e:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
    4da2:	2b08      	cmp	r3, #8
    4da4:	f200 80ba 	bhi.w	4f1c <menu()+0x1104>
    4da8:	e8df f013 	tbh	[pc, r3, lsl #1]
    4dac:	013f013a 	.word	0x013f013a
    4db0:	01300135 	.word	0x01300135
    4db4:	0126012b 	.word	0x0126012b
    4db8:	011c0121 	.word	0x011c0121
    4dbc:	00b4      	.short	0x00b4
        virtual int available() { return usb_serial_available(); }
    4dbe:	f007 f92d 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4dc2:	2800      	cmp	r0, #0
    4dc4:	f77f add4 	ble.w	4970 <menu()+0xb58>
          settings.chargecurrentcold = Serial.parseInt() * 10;
    4dc8:	4809      	ldr	r0, [pc, #36]	; (4df0 <menu()+0xfd8>)
    4dca:	4e0a      	ldr	r6, [pc, #40]	; (4df4 <menu()+0xfdc>)
    4dcc:	f004 fd70 	bl	98b0 <Stream::parseInt()>
    4dd0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
          if (settings.chargecurrentcold > settings.chargecurrentmax) {
    4dd4:	6e32      	ldr	r2, [r6, #96]	; 0x60
          settings.chargecurrentcold = Serial.parseInt() * 10;
    4dd6:	0043      	lsls	r3, r0, #1
    4dd8:	b21b      	sxth	r3, r3
          if (settings.chargecurrentcold > settings.chargecurrentmax) {
    4dda:	4293      	cmp	r3, r2
          settings.chargecurrentcold = Serial.parseInt() * 10;
    4ddc:	f8a6 30d0 	strh.w	r3, [r6, #208]	; 0xd0
            settings.chargecurrentcold = settings.chargecurrentmax;
    4de0:	bfc8      	it	gt
    4de2:	f8a6 20d0 	strhgt.w	r2, [r6, #208]	; 0xd0
          incomingByte = 'e';
    4de6:	2365      	movs	r3, #101	; 0x65
          menuload = 1;
    4de8:	2201      	movs	r2, #1
    4dea:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    4dec:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4dee:	e752      	b.n	4c96 <menu()+0xe7e>
    4df0:	1fff89fc 	.word	0x1fff89fc
    4df4:	1fffd0d8 	.word	0x1fffd0d8
    4df8:	1fffcfdc 	.word	0x1fffcfdc
    4dfc:	00014668 	.word	0x00014668
    4e00:	0001468c 	.word	0x0001468c
    4e04:	00014530 	.word	0x00014530
    4e08:	000146a4 	.word	0x000146a4
    4e0c:	00014220 	.word	0x00014220
    4e10:	000146c4 	.word	0x000146c4
    4e14:	000146e4 	.word	0x000146e4
    4e18:	00014704 	.word	0x00014704
    4e1c:	447a0000 	.word	0x447a0000
    4e20:	00014da0 	.word	0x00014da0
    4e24:	000143ec 	.word	0x000143ec
    4e28:	000143d4 	.word	0x000143d4
    4e2c:	00014418 	.word	0x00014418
    4e30:	00014430 	.word	0x00014430
    4e34:	3dcccccd 	.word	0x3dcccccd
    4e38:	00014998 	.word	0x00014998
    4e3c:	00014450 	.word	0x00014450
    4e40:	00014470 	.word	0x00014470
    4e44:	f007 f8ea 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4e48:	2800      	cmp	r0, #0
    4e4a:	f77f ad91 	ble.w	4970 <menu()+0xb58>
          settings.ChargeTSetpoint = Serial.parseInt();
    4e4e:	4885      	ldr	r0, [pc, #532]	; (5064 <menu()+0x124c>)
          if (settings.ChargeTSetpoint < settings.UnderTSetpoint) {
    4e50:	4e85      	ldr	r6, [pc, #532]	; (5068 <menu()+0x1250>)
          settings.ChargeTSetpoint = Serial.parseInt();
    4e52:	f004 fd2d 	bl	98b0 <Stream::parseInt()>
    4e56:	f007 ff9f 	bl	cd98 <__aeabi_i2f>
          if (settings.ChargeTSetpoint < settings.UnderTSetpoint) {
    4e5a:	6af7      	ldr	r7, [r6, #44]	; 0x2c
    4e5c:	4639      	mov	r1, r7
          settings.ChargeTSetpoint = Serial.parseInt();
    4e5e:	4680      	mov	r8, r0
          if (settings.ChargeTSetpoint < settings.UnderTSetpoint) {
    4e60:	f008 f98c 	bl	d17c <__aeabi_fcmplt>
    4e64:	b900      	cbnz	r0, 4e68 <menu()+0x1050>
            settings.ChargeTSetpoint = settings.UnderTSetpoint;
    4e66:	4647      	mov	r7, r8
          menuload = 1;
    4e68:	2301      	movs	r3, #1
    4e6a:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    4e6c:	2365      	movs	r3, #101	; 0x65
    4e6e:	6337      	str	r7, [r6, #48]	; 0x30
    4e70:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4e72:	e710      	b.n	4c96 <menu()+0xe7e>
        if (settings.ChargerDirect == 1) {
    4e74:	4e7c      	ldr	r6, [pc, #496]	; (5068 <menu()+0x1250>)
    4e76:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
          menuload = 1;
    4e7a:	2201      	movs	r2, #1
        if (settings.ChargerDirect == 1) {
    4e7c:	4053      	eors	r3, r2
          menuload = 1;
    4e7e:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    4e80:	2265      	movs	r2, #101	; 0x65
    4e82:	f886 30c8 	strb.w	r3, [r6, #200]	; 0xc8
    4e86:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    4e88:	e705      	b.n	4c96 <menu()+0xe7e>
    4e8a:	f007 f8c7 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4e8e:	2800      	cmp	r0, #0
    4e90:	f77f ad6e 	ble.w	4970 <menu()+0xb58>
          settings.chargerspd = Serial.parseInt();
    4e94:	4873      	ldr	r0, [pc, #460]	; (5064 <menu()+0x124c>)
    4e96:	4e74      	ldr	r6, [pc, #464]	; (5068 <menu()+0x1250>)
    4e98:	f004 fd0a 	bl	98b0 <Stream::parseInt()>
          menuload = 1;
    4e9c:	2301      	movs	r3, #1
    4e9e:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    4ea0:	2365      	movs	r3, #101	; 0x65
          settings.chargerspd = Serial.parseInt();
    4ea2:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
          incomingByte = 'e';
    4ea6:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4ea8:	e6f5      	b.n	4c96 <menu()+0xe7e>
        settings.chargertype = settings.chargertype + 1;
    4eaa:	4e6f      	ldr	r6, [pc, #444]	; (5068 <menu()+0x1250>)
    4eac:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
          menuload = 1;
    4eb0:	2201      	movs	r2, #1
        settings.chargertype = settings.chargertype + 1;
    4eb2:	4413      	add	r3, r2
          settings.chargertype = 0;
    4eb4:	2b09      	cmp	r3, #9
          menuload = 1;
    4eb6:	6022      	str	r2, [r4, #0]
          settings.chargertype = 0;
    4eb8:	bfa8      	it	ge
    4eba:	2300      	movge	r3, #0
          incomingByte = 'e';
    4ebc:	2265      	movs	r2, #101	; 0x65
    4ebe:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
    4ec2:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    4ec4:	e6e7      	b.n	4c96 <menu()+0xe7e>
    4ec6:	f007 f8a9 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4eca:	2800      	cmp	r0, #0
    4ecc:	f77f ad50 	ble.w	4970 <menu()+0xb58>
          settings.chargecurrentend = Serial.parseInt() * 10;
    4ed0:	4864      	ldr	r0, [pc, #400]	; (5064 <menu()+0x124c>)
    4ed2:	4e65      	ldr	r6, [pc, #404]	; (5068 <menu()+0x1250>)
    4ed4:	f004 fcec 	bl	98b0 <Stream::parseInt()>
    4ed8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4edc:	0040      	lsls	r0, r0, #1
          menuload = 1;
    4ede:	2201      	movs	r2, #1
          incomingByte = 'e';
    4ee0:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentend = Serial.parseInt() * 10;
    4ee2:	6670      	str	r0, [r6, #100]	; 0x64
          menuload = 1;
    4ee4:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    4ee6:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4ee8:	e6d5      	b.n	4c96 <menu()+0xe7e>
    4eea:	f007 f897 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    4eee:	2800      	cmp	r0, #0
    4ef0:	f77f ad3e 	ble.w	4970 <menu()+0xb58>
          settings.chargecurrentmax = Serial.parseInt() * 10;
    4ef4:	485b      	ldr	r0, [pc, #364]	; (5064 <menu()+0x124c>)
    4ef6:	4e5c      	ldr	r6, [pc, #368]	; (5068 <menu()+0x1250>)
    4ef8:	f004 fcda 	bl	98b0 <Stream::parseInt()>
    4efc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    4f00:	0040      	lsls	r0, r0, #1
          menuload = 1;
    4f02:	2201      	movs	r2, #1
          incomingByte = 'e';
    4f04:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentmax = Serial.parseInt() * 10;
    4f06:	6630      	str	r0, [r6, #96]	; 0x60
          menuload = 1;
    4f08:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    4f0a:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4f0c:	e6c3      	b.n	4c96 <menu()+0xe7e>
  if (menuload == 5) {
    4f0e:	2306      	movs	r3, #6
    4f10:	f7fe bfdf 	b.w	3ed2 <menu()+0xba>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4f14:	4855      	ldr	r0, [pc, #340]	; (506c <menu()+0x1254>)
    4f16:	2111      	movs	r1, #17
    4f18:	f007 f8b2 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.println();
    4f1c:	4851      	ldr	r0, [pc, #324]	; (5064 <menu()+0x124c>)
    4f1e:	f004 fb69 	bl	95f4 <Print::println()>
        if (settings.chargertype > 0) {
    4f22:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
    4f26:	2b00      	cmp	r3, #0
    4f28:	dd12      	ble.n	4f50 <menu()+0x1138>
    4f2a:	2118      	movs	r1, #24
    4f2c:	4850      	ldr	r0, [pc, #320]	; (5070 <menu()+0x1258>)
    4f2e:	f007 f8a7 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4f32:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
    4f36:	484b      	ldr	r0, [pc, #300]	; (5064 <menu()+0x124c>)
    4f38:	f004 fb54 	bl	95e4 <Print::print(long)>
    4f3c:	2102      	movs	r1, #2
    4f3e:	484d      	ldr	r0, [pc, #308]	; (5074 <menu()+0x125c>)
    4f40:	f007 f89e 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4f44:	4847      	ldr	r0, [pc, #284]	; (5064 <menu()+0x124c>)
    4f46:	f004 fb55 	bl	95f4 <Print::println()>
          SERIALCONSOLE.println();
    4f4a:	4846      	ldr	r0, [pc, #280]	; (5064 <menu()+0x124c>)
    4f4c:	f004 fb52 	bl	95f4 <Print::println()>
    4f50:	4849      	ldr	r0, [pc, #292]	; (5078 <menu()+0x1260>)
    4f52:	211b      	movs	r1, #27
    4f54:	f007 f894 	bl	c080 <usb_serial_write>
        switch (settings.ChargerDirect) {
    4f58:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
    4f5c:	2b00      	cmp	r3, #0
    4f5e:	f040 8323 	bne.w	55a8 <menu()+0x1790>
    4f62:	4846      	ldr	r0, [pc, #280]	; (507c <menu()+0x1264>)
    4f64:	2112      	movs	r1, #18
    4f66:	f007 f88b 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.println();
    4f6a:	483e      	ldr	r0, [pc, #248]	; (5064 <menu()+0x124c>)
    4f6c:	f004 fb42 	bl	95f4 <Print::println()>
    4f70:	211f      	movs	r1, #31
    4f72:	4843      	ldr	r0, [pc, #268]	; (5080 <menu()+0x1268>)
    4f74:	f007 f884 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeTSetpoint);
    4f78:	6b30      	ldr	r0, [r6, #48]	; 0x30
    4f7a:	f007 fd3d 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4f7e:	2502      	movs	r5, #2
    4f80:	4602      	mov	r2, r0
    4f82:	460b      	mov	r3, r1
    4f84:	4837      	ldr	r0, [pc, #220]	; (5064 <menu()+0x124c>)
    4f86:	9500      	str	r5, [sp, #0]
    4f88:	f004 fb56 	bl	9638 <Print::printFloat(double, unsigned char)>
    4f8c:	4629      	mov	r1, r5
    4f8e:	483d      	ldr	r0, [pc, #244]	; (5084 <menu()+0x126c>)
    4f90:	f007 f876 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4f94:	4833      	ldr	r0, [pc, #204]	; (5064 <menu()+0x124c>)
    4f96:	f004 fb2d 	bl	95f4 <Print::println()>
    4f9a:	211e      	movs	r1, #30
    4f9c:	483a      	ldr	r0, [pc, #232]	; (5088 <menu()+0x1270>)
    4f9e:	f007 f86f 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.chargecurrentcold * 0.1);
    4fa2:	f9b6 00d0 	ldrsh.w	r0, [r6, #208]	; 0xd0
    4fa6:	f007 fef7 	bl	cd98 <__aeabi_i2f>
    4faa:	4938      	ldr	r1, [pc, #224]	; (508c <menu()+0x1274>)
    4fac:	f007 ff48 	bl	ce40 <__aeabi_fmul>
    4fb0:	f007 fd22 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4fb4:	9500      	str	r5, [sp, #0]
    4fb6:	460b      	mov	r3, r1
    4fb8:	4602      	mov	r2, r0
    4fba:	482a      	ldr	r0, [pc, #168]	; (5064 <menu()+0x124c>)
    4fbc:	f004 fb3c 	bl	9638 <Print::printFloat(double, unsigned char)>
    4fc0:	2101      	movs	r1, #1
    4fc2:	4833      	ldr	r0, [pc, #204]	; (5090 <menu()+0x1278>)
    4fc4:	f007 f85c 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4fc8:	4826      	ldr	r0, [pc, #152]	; (5064 <menu()+0x124c>)
    4fca:	f004 fb13 	bl	95f4 <Print::println()>
    4fce:	2113      	movs	r1, #19
    4fd0:	4830      	ldr	r0, [pc, #192]	; (5094 <menu()+0x127c>)
    4fd2:	f007 f855 	bl	c080 <usb_serial_write>
    4fd6:	4823      	ldr	r0, [pc, #140]	; (5064 <menu()+0x124c>)
    4fd8:	f004 fb0c 	bl	95f4 <Print::println()>
        menuload = 6;
    4fdc:	2306      	movs	r3, #6
    4fde:	6023      	str	r3, [r4, #0]
        break;
    4fe0:	f7fe bf80 	b.w	3ee4 <menu()+0xcc>
    4fe4:	2114      	movs	r1, #20
    4fe6:	482c      	ldr	r0, [pc, #176]	; (5098 <menu()+0x1280>)
    4fe8:	f007 f84a 	bl	c080 <usb_serial_write>
    4fec:	e796      	b.n	4f1c <menu()+0x1104>
    4fee:	2104      	movs	r1, #4
    4ff0:	482a      	ldr	r0, [pc, #168]	; (509c <menu()+0x1284>)
    4ff2:	f007 f845 	bl	c080 <usb_serial_write>
    4ff6:	e791      	b.n	4f1c <menu()+0x1104>
    4ff8:	210b      	movs	r1, #11
    4ffa:	4829      	ldr	r0, [pc, #164]	; (50a0 <menu()+0x1288>)
    4ffc:	f007 f840 	bl	c080 <usb_serial_write>
    5000:	e78c      	b.n	4f1c <menu()+0x1104>
    5002:	210d      	movs	r1, #13
    5004:	4827      	ldr	r0, [pc, #156]	; (50a4 <menu()+0x128c>)
    5006:	f007 f83b 	bl	c080 <usb_serial_write>
    500a:	e787      	b.n	4f1c <menu()+0x1104>
    500c:	210d      	movs	r1, #13
    500e:	4826      	ldr	r0, [pc, #152]	; (50a8 <menu()+0x1290>)
    5010:	f007 f836 	bl	c080 <usb_serial_write>
    5014:	e782      	b.n	4f1c <menu()+0x1104>
    5016:	210c      	movs	r1, #12
    5018:	4824      	ldr	r0, [pc, #144]	; (50ac <menu()+0x1294>)
    501a:	f007 f831 	bl	c080 <usb_serial_write>
    501e:	e77d      	b.n	4f1c <menu()+0x1104>
    5020:	210d      	movs	r1, #13
    5022:	4823      	ldr	r0, [pc, #140]	; (50b0 <menu()+0x1298>)
    5024:	f007 f82c 	bl	c080 <usb_serial_write>
    5028:	e778      	b.n	4f1c <menu()+0x1104>
    502a:	210c      	movs	r1, #12
    502c:	4821      	ldr	r0, [pc, #132]	; (50b4 <menu()+0x129c>)
    502e:	f007 f827 	bl	c080 <usb_serial_write>
    5032:	e773      	b.n	4f1c <menu()+0x1104>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value, "You can not use this type with EEPROM.put"); // the code below only makes sense if you can "memcpy" T
        #endif
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    5034:	22d8      	movs	r2, #216	; 0xd8
    5036:	2100      	movs	r1, #0
    5038:	480b      	ldr	r0, [pc, #44]	; (5068 <menu()+0x1250>)
        debug = 1;
    503a:	4e1f      	ldr	r6, [pc, #124]	; (50b8 <menu()+0x12a0>)
    503c:	f004 fd34 	bl	9aa8 <eeprom_write_block>
  if (incomingByte == 115 & menuload == 0) {
    5040:	682b      	ldr	r3, [r5, #0]
        menuload = 0;
    5042:	2100      	movs	r1, #0
        debug = 1;
    5044:	2201      	movs	r2, #1
  if (incomingByte == 115 & menuload == 0) {
    5046:	2b73      	cmp	r3, #115	; 0x73
        menuload = 0;
    5048:	6021      	str	r1, [r4, #0]
        debug = 1;
    504a:	6032      	str	r2, [r6, #0]
  if (incomingByte == 115 & menuload == 0) {
    504c:	f47e af4a 	bne.w	3ee4 <menu()+0xcc>
    5050:	f7fe bfd5 	b.w	3ffe <menu()+0x1e6>
    5054:	4e04      	ldr	r6, [pc, #16]	; (5068 <menu()+0x1250>)
    5056:	f7ff b9a7 	b.w	43a8 <menu()+0x590>
        CPU_REBOOT;
    505a:	f006 fb47 	bl	b6ec <_reboot_Teensyduino_>
    505e:	4e02      	ldr	r6, [pc, #8]	; (5068 <menu()+0x1250>)
    5060:	e02e      	b.n	50c0 <menu()+0x12a8>
    5062:	bf00      	nop
    5064:	1fff89fc 	.word	0x1fff89fc
    5068:	1fffd0d8 	.word	0x1fffd0d8
    506c:	00014500 	.word	0x00014500
    5070:	00014514 	.word	0x00014514
    5074:	00014530 	.word	0x00014530
    5078:	00014534 	.word	0x00014534
    507c:	00014550 	.word	0x00014550
    5080:	0001457c 	.word	0x0001457c
    5084:	0001459c 	.word	0x0001459c
    5088:	000145a0 	.word	0x000145a0
    508c:	3dcccccd 	.word	0x3dcccccd
    5090:	00014998 	.word	0x00014998
    5094:	000143d8 	.word	0x000143d8
    5098:	000144e8 	.word	0x000144e8
    509c:	000144e0 	.word	0x000144e0
    50a0:	000144d4 	.word	0x000144d4
    50a4:	000144c4 	.word	0x000144c4
    50a8:	000144b4 	.word	0x000144b4
    50ac:	000144a4 	.word	0x000144a4
    50b0:	00014484 	.word	0x00014484
    50b4:	00014494 	.word	0x00014494
    50b8:	1fff884c 	.word	0x1fff884c
        virtual int read() { return usb_serial_getchar(); }
    50bc:	f006 ff72 	bl	bfa4 <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    50c0:	f006 ffac 	bl	c01c <usb_serial_available>
        while (Serial.available()) {
    50c4:	4605      	mov	r5, r0
    50c6:	2800      	cmp	r0, #0
    50c8:	d1f8      	bne.n	50bc <menu()+0x12a4>
        SERIALCONSOLE.println();
    50ca:	48c2      	ldr	r0, [pc, #776]	; (53d4 <menu()+0x15bc>)
    50cc:	f004 fa92 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    50d0:	48c0      	ldr	r0, [pc, #768]	; (53d4 <menu()+0x15bc>)
    50d2:	f004 fa8f 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    50d6:	48bf      	ldr	r0, [pc, #764]	; (53d4 <menu()+0x15bc>)
    50d8:	f004 fa8c 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    50dc:	48bd      	ldr	r0, [pc, #756]	; (53d4 <menu()+0x15bc>)
    50de:	f004 fa89 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    50e2:	48bc      	ldr	r0, [pc, #752]	; (53d4 <menu()+0x15bc>)
    50e4:	f004 fa86 	bl	95f4 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    50e8:	2115      	movs	r1, #21
    50ea:	48bb      	ldr	r0, [pc, #748]	; (53d8 <menu()+0x15c0>)
    50ec:	f006 ffc8 	bl	c080 <usb_serial_write>
    50f0:	48b8      	ldr	r0, [pc, #736]	; (53d4 <menu()+0x15bc>)
    50f2:	f004 fa7f 	bl	95f4 <Print::println()>
    50f6:	2114      	movs	r1, #20
    50f8:	48b8      	ldr	r0, [pc, #736]	; (53dc <menu()+0x15c4>)
    50fa:	f006 ffc1 	bl	c080 <usb_serial_write>
    50fe:	48b5      	ldr	r0, [pc, #724]	; (53d4 <menu()+0x15bc>)
    5100:	f004 fa78 	bl	95f4 <Print::println()>
    5104:	211b      	movs	r1, #27
    5106:	48b6      	ldr	r0, [pc, #728]	; (53e0 <menu()+0x15c8>)
    5108:	f006 ffba 	bl	c080 <usb_serial_write>
    510c:	48b1      	ldr	r0, [pc, #708]	; (53d4 <menu()+0x15bc>)
    510e:	f004 fa71 	bl	95f4 <Print::println()>
    5112:	2113      	movs	r1, #19
    5114:	48b3      	ldr	r0, [pc, #716]	; (53e4 <menu()+0x15cc>)
    5116:	f006 ffb3 	bl	c080 <usb_serial_write>
    511a:	48ae      	ldr	r0, [pc, #696]	; (53d4 <menu()+0x15bc>)
    511c:	f004 fa6a 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    5120:	48ac      	ldr	r0, [pc, #688]	; (53d4 <menu()+0x15bc>)
    5122:	f004 fa67 	bl	95f4 <Print::println()>
        SERIALCONSOLE.println();
    5126:	48ab      	ldr	r0, [pc, #684]	; (53d4 <menu()+0x15bc>)
    5128:	f004 fa64 	bl	95f4 <Print::println()>
    512c:	2120      	movs	r1, #32
    512e:	48ae      	ldr	r0, [pc, #696]	; (53e8 <menu()+0x15d0>)
    5130:	f006 ffa6 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverVSetpoint * 1000, 0);
    5134:	68f0      	ldr	r0, [r6, #12]
    5136:	49ad      	ldr	r1, [pc, #692]	; (53ec <menu()+0x15d4>)
    5138:	f007 fe82 	bl	ce40 <__aeabi_fmul>
    513c:	f007 fc5c 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5140:	9500      	str	r5, [sp, #0]
    5142:	4602      	mov	r2, r0
    5144:	460b      	mov	r3, r1
    5146:	48a3      	ldr	r0, [pc, #652]	; (53d4 <menu()+0x15bc>)
    5148:	f004 fa76 	bl	9638 <Print::printFloat(double, unsigned char)>
    514c:	2102      	movs	r1, #2
    514e:	48a8      	ldr	r0, [pc, #672]	; (53f0 <menu()+0x15d8>)
    5150:	f006 ff96 	bl	c080 <usb_serial_write>
    5154:	2102      	movs	r1, #2
    5156:	48a7      	ldr	r0, [pc, #668]	; (53f4 <menu()+0x15dc>)
    5158:	f006 ff92 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    515c:	489d      	ldr	r0, [pc, #628]	; (53d4 <menu()+0x15bc>)
    515e:	f004 fa49 	bl	95f4 <Print::println()>
    5162:	2121      	movs	r1, #33	; 0x21
    5164:	48a4      	ldr	r0, [pc, #656]	; (53f8 <menu()+0x15e0>)
    5166:	f006 ff8b 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderVSetpoint * 1000, 0);
    516a:	6930      	ldr	r0, [r6, #16]
    516c:	499f      	ldr	r1, [pc, #636]	; (53ec <menu()+0x15d4>)
    516e:	f007 fe67 	bl	ce40 <__aeabi_fmul>
    5172:	f007 fc41 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5176:	9500      	str	r5, [sp, #0]
    5178:	4602      	mov	r2, r0
    517a:	460b      	mov	r3, r1
    517c:	4895      	ldr	r0, [pc, #596]	; (53d4 <menu()+0x15bc>)
    517e:	f004 fa5b 	bl	9638 <Print::printFloat(double, unsigned char)>
    5182:	2102      	movs	r1, #2
    5184:	489a      	ldr	r0, [pc, #616]	; (53f0 <menu()+0x15d8>)
    5186:	f006 ff7b 	bl	c080 <usb_serial_write>
    518a:	2102      	movs	r1, #2
    518c:	4899      	ldr	r0, [pc, #612]	; (53f4 <menu()+0x15dc>)
    518e:	f006 ff77 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5192:	4890      	ldr	r0, [pc, #576]	; (53d4 <menu()+0x15bc>)
    5194:	f004 fa2e 	bl	95f4 <Print::println()>
    5198:	211f      	movs	r1, #31
    519a:	4898      	ldr	r0, [pc, #608]	; (53fc <menu()+0x15e4>)
    519c:	f006 ff70 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverTSetpoint);
    51a0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    51a2:	f007 fc29 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    51a6:	2702      	movs	r7, #2
    51a8:	4602      	mov	r2, r0
    51aa:	460b      	mov	r3, r1
    51ac:	4889      	ldr	r0, [pc, #548]	; (53d4 <menu()+0x15bc>)
    51ae:	9700      	str	r7, [sp, #0]
    51b0:	f004 fa42 	bl	9638 <Print::printFloat(double, unsigned char)>
    51b4:	2101      	movs	r1, #1
    51b6:	4892      	ldr	r0, [pc, #584]	; (5400 <menu()+0x15e8>)
    51b8:	f006 ff62 	bl	c080 <usb_serial_write>
    51bc:	4639      	mov	r1, r7
    51be:	488d      	ldr	r0, [pc, #564]	; (53f4 <menu()+0x15dc>)
    51c0:	f006 ff5e 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    51c4:	4883      	ldr	r0, [pc, #524]	; (53d4 <menu()+0x15bc>)
    51c6:	f004 fa15 	bl	95f4 <Print::println()>
    51ca:	2120      	movs	r1, #32
    51cc:	488d      	ldr	r0, [pc, #564]	; (5404 <menu()+0x15ec>)
    51ce:	f006 ff57 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderTSetpoint);
    51d2:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    51d4:	f007 fc10 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    51d8:	9700      	str	r7, [sp, #0]
    51da:	4602      	mov	r2, r0
    51dc:	460b      	mov	r3, r1
    51de:	487d      	ldr	r0, [pc, #500]	; (53d4 <menu()+0x15bc>)
    51e0:	f004 fa2a 	bl	9638 <Print::printFloat(double, unsigned char)>
    51e4:	2101      	movs	r1, #1
    51e6:	4886      	ldr	r0, [pc, #536]	; (5400 <menu()+0x15e8>)
    51e8:	f006 ff4a 	bl	c080 <usb_serial_write>
    51ec:	4639      	mov	r1, r7
    51ee:	4881      	ldr	r0, [pc, #516]	; (53f4 <menu()+0x15dc>)
    51f0:	f006 ff46 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    51f4:	4877      	ldr	r0, [pc, #476]	; (53d4 <menu()+0x15bc>)
    51f6:	f004 f9fd 	bl	95f4 <Print::println()>
    51fa:	2123      	movs	r1, #35	; 0x23
    51fc:	4882      	ldr	r0, [pc, #520]	; (5408 <menu()+0x15f0>)
    51fe:	f006 ff3f 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceVoltage * 1000, 0);
    5202:	6cb0      	ldr	r0, [r6, #72]	; 0x48
    5204:	4979      	ldr	r1, [pc, #484]	; (53ec <menu()+0x15d4>)
    5206:	f007 fe1b 	bl	ce40 <__aeabi_fmul>
    520a:	f007 fbf5 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    520e:	9500      	str	r5, [sp, #0]
    5210:	4602      	mov	r2, r0
    5212:	460b      	mov	r3, r1
    5214:	486f      	ldr	r0, [pc, #444]	; (53d4 <menu()+0x15bc>)
    5216:	f004 fa0f 	bl	9638 <Print::printFloat(double, unsigned char)>
    521a:	4639      	mov	r1, r7
    521c:	4874      	ldr	r0, [pc, #464]	; (53f0 <menu()+0x15d8>)
    521e:	f006 ff2f 	bl	c080 <usb_serial_write>
    5222:	4639      	mov	r1, r7
    5224:	4873      	ldr	r0, [pc, #460]	; (53f4 <menu()+0x15dc>)
    5226:	f006 ff2b 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    522a:	486a      	ldr	r0, [pc, #424]	; (53d4 <menu()+0x15bc>)
    522c:	f004 f9e2 	bl	95f4 <Print::println()>
    5230:	211f      	movs	r1, #31
    5232:	4876      	ldr	r0, [pc, #472]	; (540c <menu()+0x15f4>)
    5234:	f006 ff24 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceHyst * 1000, 0);
    5238:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    523a:	496c      	ldr	r1, [pc, #432]	; (53ec <menu()+0x15d4>)
    523c:	f007 fe00 	bl	ce40 <__aeabi_fmul>
    5240:	f007 fbda 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5244:	9500      	str	r5, [sp, #0]
    5246:	4602      	mov	r2, r0
    5248:	460b      	mov	r3, r1
    524a:	4862      	ldr	r0, [pc, #392]	; (53d4 <menu()+0x15bc>)
    524c:	f004 f9f4 	bl	9638 <Print::printFloat(double, unsigned char)>
    5250:	4639      	mov	r1, r7
    5252:	4867      	ldr	r0, [pc, #412]	; (53f0 <menu()+0x15d8>)
    5254:	f006 ff14 	bl	c080 <usb_serial_write>
    5258:	4639      	mov	r1, r7
    525a:	4866      	ldr	r0, [pc, #408]	; (53f4 <menu()+0x15dc>)
    525c:	f006 ff10 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5260:	485c      	ldr	r0, [pc, #368]	; (53d4 <menu()+0x15bc>)
    5262:	f004 f9c7 	bl	95f4 <Print::println()>
    5266:	2119      	movs	r1, #25
    5268:	4869      	ldr	r0, [pc, #420]	; (5410 <menu()+0x15f8>)
    526a:	f006 ff09 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    526e:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    5270:	4858      	ldr	r0, [pc, #352]	; (53d4 <menu()+0x15bc>)
    5272:	f004 f9b7 	bl	95e4 <Print::print(long)>
    5276:	4639      	mov	r1, r7
    5278:	4866      	ldr	r0, [pc, #408]	; (5414 <menu()+0x15fc>)
    527a:	f006 ff01 	bl	c080 <usb_serial_write>
    527e:	4639      	mov	r1, r7
    5280:	485c      	ldr	r0, [pc, #368]	; (53f4 <menu()+0x15dc>)
    5282:	f006 fefd 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5286:	4853      	ldr	r0, [pc, #332]	; (53d4 <menu()+0x15bc>)
    5288:	f004 f9b4 	bl	95f4 <Print::println()>
    528c:	2118      	movs	r1, #24
    528e:	4862      	ldr	r0, [pc, #392]	; (5418 <menu()+0x1600>)
    5290:	f006 fef6 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.discurrentmax * 0.1);
    5294:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    5296:	f007 fd7f 	bl	cd98 <__aeabi_i2f>
    529a:	4960      	ldr	r1, [pc, #384]	; (541c <menu()+0x1604>)
    529c:	f007 fdd0 	bl	ce40 <__aeabi_fmul>
    52a0:	f007 fbaa 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    52a4:	9700      	str	r7, [sp, #0]
    52a6:	4602      	mov	r2, r0
    52a8:	460b      	mov	r3, r1
    52aa:	484a      	ldr	r0, [pc, #296]	; (53d4 <menu()+0x15bc>)
    52ac:	f004 f9c4 	bl	9638 <Print::printFloat(double, unsigned char)>
    52b0:	2101      	movs	r1, #1
    52b2:	485b      	ldr	r0, [pc, #364]	; (5420 <menu()+0x1608>)
    52b4:	f006 fee4 	bl	c080 <usb_serial_write>
    52b8:	4639      	mov	r1, r7
    52ba:	484e      	ldr	r0, [pc, #312]	; (53f4 <menu()+0x15dc>)
    52bc:	f006 fee0 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    52c0:	4844      	ldr	r0, [pc, #272]	; (53d4 <menu()+0x15bc>)
    52c2:	f004 f997 	bl	95f4 <Print::println()>
    52c6:	212b      	movs	r1, #43	; 0x2b
    52c8:	4856      	ldr	r0, [pc, #344]	; (5424 <menu()+0x160c>)
    52ca:	f006 fed9 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischVsetpoint * 1000, 0);
    52ce:	69b0      	ldr	r0, [r6, #24]
    52d0:	4946      	ldr	r1, [pc, #280]	; (53ec <menu()+0x15d4>)
    52d2:	f007 fdb5 	bl	ce40 <__aeabi_fmul>
    52d6:	f007 fb8f 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    52da:	9500      	str	r5, [sp, #0]
    52dc:	4602      	mov	r2, r0
    52de:	460b      	mov	r3, r1
    52e0:	483c      	ldr	r0, [pc, #240]	; (53d4 <menu()+0x15bc>)
    52e2:	f004 f9a9 	bl	9638 <Print::printFloat(double, unsigned char)>
    52e6:	4639      	mov	r1, r7
    52e8:	4841      	ldr	r0, [pc, #260]	; (53f0 <menu()+0x15d8>)
    52ea:	f006 fec9 	bl	c080 <usb_serial_write>
    52ee:	4639      	mov	r1, r7
    52f0:	4840      	ldr	r0, [pc, #256]	; (53f4 <menu()+0x15dc>)
    52f2:	f006 fec5 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    52f6:	4837      	ldr	r0, [pc, #220]	; (53d4 <menu()+0x15bc>)
    52f8:	f004 f97c 	bl	95f4 <Print::println()>
    52fc:	211f      	movs	r1, #31
    52fe:	484a      	ldr	r0, [pc, #296]	; (5428 <menu()+0x1610>)
    5300:	f006 febe 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5304:	6db1      	ldr	r1, [r6, #88]	; 0x58
    5306:	4833      	ldr	r0, [pc, #204]	; (53d4 <menu()+0x15bc>)
    5308:	f004 f96c 	bl	95e4 <Print::print(long)>
    530c:	4639      	mov	r1, r7
    530e:	4839      	ldr	r0, [pc, #228]	; (53f4 <menu()+0x15dc>)
    5310:	f006 feb6 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5314:	482f      	ldr	r0, [pc, #188]	; (53d4 <menu()+0x15bc>)
    5316:	f004 f96d 	bl	95f4 <Print::println()>
    531a:	2120      	movs	r1, #32
    531c:	4843      	ldr	r0, [pc, #268]	; (542c <menu()+0x1614>)
    531e:	f006 feaf 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5322:	6d71      	ldr	r1, [r6, #84]	; 0x54
    5324:	482b      	ldr	r0, [pc, #172]	; (53d4 <menu()+0x15bc>)
    5326:	f004 f95d 	bl	95e4 <Print::print(long)>
    532a:	4639      	mov	r1, r7
    532c:	4831      	ldr	r0, [pc, #196]	; (53f4 <menu()+0x15dc>)
    532e:	f006 fea7 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5332:	4828      	ldr	r0, [pc, #160]	; (53d4 <menu()+0x15bc>)
    5334:	f004 f95e 	bl	95f4 <Print::println()>
    5338:	2110      	movs	r1, #16
    533a:	483d      	ldr	r0, [pc, #244]	; (5430 <menu()+0x1618>)
    533c:	f006 fea0 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5340:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
    5342:	4824      	ldr	r0, [pc, #144]	; (53d4 <menu()+0x15bc>)
    5344:	f004 f94e 	bl	95e4 <Print::print(long)>
    5348:	4639      	mov	r1, r7
    534a:	4829      	ldr	r0, [pc, #164]	; (53f0 <menu()+0x15d8>)
    534c:	f006 fe98 	bl	c080 <usb_serial_write>
    5350:	4639      	mov	r1, r7
    5352:	4828      	ldr	r0, [pc, #160]	; (53f4 <menu()+0x15dc>)
    5354:	f006 fe94 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5358:	481e      	ldr	r0, [pc, #120]	; (53d4 <menu()+0x15bc>)
    535a:	f004 f94b 	bl	95f4 <Print::println()>
    535e:	2113      	movs	r1, #19
    5360:	4834      	ldr	r0, [pc, #208]	; (5434 <menu()+0x161c>)
    5362:	f006 fe8d 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5366:	6f31      	ldr	r1, [r6, #112]	; 0x70
    5368:	481a      	ldr	r0, [pc, #104]	; (53d4 <menu()+0x15bc>)
    536a:	f004 f93b 	bl	95e4 <Print::print(long)>
    536e:	2101      	movs	r1, #1
    5370:	4831      	ldr	r0, [pc, #196]	; (5438 <menu()+0x1620>)
    5372:	f006 fe85 	bl	c080 <usb_serial_write>
    5376:	4639      	mov	r1, r7
    5378:	481e      	ldr	r0, [pc, #120]	; (53f4 <menu()+0x15dc>)
    537a:	f006 fe81 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    537e:	4815      	ldr	r0, [pc, #84]	; (53d4 <menu()+0x15bc>)
    5380:	f004 f938 	bl	95f4 <Print::println()>
    5384:	2110      	movs	r1, #16
    5386:	482d      	ldr	r0, [pc, #180]	; (543c <menu()+0x1624>)
    5388:	f006 fe7a 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    538c:	6f71      	ldr	r1, [r6, #116]	; 0x74
    538e:	4811      	ldr	r0, [pc, #68]	; (53d4 <menu()+0x15bc>)
    5390:	f004 f928 	bl	95e4 <Print::print(long)>
    5394:	4639      	mov	r1, r7
    5396:	4816      	ldr	r0, [pc, #88]	; (53f0 <menu()+0x15d8>)
    5398:	f006 fe72 	bl	c080 <usb_serial_write>
    539c:	4639      	mov	r1, r7
    539e:	4815      	ldr	r0, [pc, #84]	; (53f4 <menu()+0x15dc>)
    53a0:	f006 fe6e 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    53a4:	480b      	ldr	r0, [pc, #44]	; (53d4 <menu()+0x15bc>)
    53a6:	f004 f925 	bl	95f4 <Print::println()>
    53aa:	2114      	movs	r1, #20
    53ac:	4824      	ldr	r0, [pc, #144]	; (5440 <menu()+0x1628>)
    53ae:	f006 fe67 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    53b2:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    53b4:	4807      	ldr	r0, [pc, #28]	; (53d4 <menu()+0x15bc>)
    53b6:	f004 f915 	bl	95e4 <Print::print(long)>
    53ba:	2101      	movs	r1, #1
    53bc:	481e      	ldr	r0, [pc, #120]	; (5438 <menu()+0x1620>)
    53be:	f006 fe5f 	bl	c080 <usb_serial_write>
    53c2:	4639      	mov	r1, r7
    53c4:	480b      	ldr	r0, [pc, #44]	; (53f4 <menu()+0x15dc>)
    53c6:	f006 fe5b 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    53ca:	4802      	ldr	r0, [pc, #8]	; (53d4 <menu()+0x15bc>)
    53cc:	f004 f912 	bl	95f4 <Print::println()>
    53d0:	2116      	movs	r1, #22
    53d2:	e037      	b.n	5444 <menu()+0x162c>
    53d4:	1fff89fc 	.word	0x1fff89fc
    53d8:	00014a7c 	.word	0x00014a7c
    53dc:	00014a94 	.word	0x00014a94
    53e0:	00014aac 	.word	0x00014aac
    53e4:	000143d8 	.word	0x000143d8
    53e8:	00014ac8 	.word	0x00014ac8
    53ec:	447a0000 	.word	0x447a0000
    53f0:	000143d4 	.word	0x000143d4
    53f4:	00014ea8 	.word	0x00014ea8
    53f8:	00014aec 	.word	0x00014aec
    53fc:	00014b10 	.word	0x00014b10
    5400:	00014b30 	.word	0x00014b30
    5404:	00014b34 	.word	0x00014b34
    5408:	00014b58 	.word	0x00014b58
    540c:	00014b7c 	.word	0x00014b7c
    5410:	00014b9c 	.word	0x00014b9c
    5414:	00014bb8 	.word	0x00014bb8
    5418:	00014bbc 	.word	0x00014bbc
    541c:	3dcccccd 	.word	0x3dcccccd
    5420:	00014998 	.word	0x00014998
    5424:	00014bd8 	.word	0x00014bd8
    5428:	00014c04 	.word	0x00014c04
    542c:	00014c24 	.word	0x00014c24
    5430:	00014c48 	.word	0x00014c48
    5434:	00014c5c 	.word	0x00014c5c
    5438:	00014c70 	.word	0x00014c70
    543c:	00014c74 	.word	0x00014c74
    5440:	00014c88 	.word	0x00014c88
    5444:	48b8      	ldr	r0, [pc, #736]	; (5728 <menu()+0x1910>)
    5446:	f006 fe1b 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.StoreVsetpoint * 1000, 0);
    544a:	6a30      	ldr	r0, [r6, #32]
    544c:	49b7      	ldr	r1, [pc, #732]	; (572c <menu()+0x1914>)
    544e:	f007 fcf7 	bl	ce40 <__aeabi_fmul>
    5452:	f007 fad1 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5456:	9500      	str	r5, [sp, #0]
    5458:	4602      	mov	r2, r0
    545a:	460b      	mov	r3, r1
    545c:	48b4      	ldr	r0, [pc, #720]	; (5730 <menu()+0x1918>)
    545e:	f004 f8eb 	bl	9638 <Print::printFloat(double, unsigned char)>
    5462:	4639      	mov	r1, r7
    5464:	48b3      	ldr	r0, [pc, #716]	; (5734 <menu()+0x191c>)
    5466:	f006 fe0b 	bl	c080 <usb_serial_write>
    546a:	4639      	mov	r1, r7
    546c:	48b2      	ldr	r0, [pc, #712]	; (5738 <menu()+0x1920>)
    546e:	f006 fe07 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5472:	48af      	ldr	r0, [pc, #700]	; (5730 <menu()+0x1918>)
    5474:	f004 f8be 	bl	95f4 <Print::println()>
    5478:	2124      	movs	r1, #36	; 0x24
    547a:	48b0      	ldr	r0, [pc, #704]	; (573c <menu()+0x1924>)
    547c:	f006 fe00 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTaper * 1000, 0);
    5480:	f8d6 00c4 	ldr.w	r0, [r6, #196]	; 0xc4
    5484:	49a9      	ldr	r1, [pc, #676]	; (572c <menu()+0x1914>)
    5486:	f007 fcdb 	bl	ce40 <__aeabi_fmul>
    548a:	f007 fab5 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    548e:	9500      	str	r5, [sp, #0]
    5490:	4602      	mov	r2, r0
    5492:	460b      	mov	r3, r1
    5494:	48a6      	ldr	r0, [pc, #664]	; (5730 <menu()+0x1918>)
    5496:	f004 f8cf 	bl	9638 <Print::printFloat(double, unsigned char)>
    549a:	4639      	mov	r1, r7
    549c:	48a5      	ldr	r0, [pc, #660]	; (5734 <menu()+0x191c>)
    549e:	f006 fdef 	bl	c080 <usb_serial_write>
    54a2:	4639      	mov	r1, r7
    54a4:	48a4      	ldr	r0, [pc, #656]	; (5738 <menu()+0x1920>)
    54a6:	f006 fdeb 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    54aa:	48a1      	ldr	r0, [pc, #644]	; (5730 <menu()+0x1918>)
    54ac:	f004 f8a2 	bl	95f4 <Print::println()>
    54b0:	212b      	movs	r1, #43	; 0x2b
    54b2:	48a3      	ldr	r0, [pc, #652]	; (5740 <menu()+0x1928>)
    54b4:	f006 fde4 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTSetpoint);
    54b8:	6b70      	ldr	r0, [r6, #52]	; 0x34
    54ba:	f007 fa9d 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    54be:	9700      	str	r7, [sp, #0]
    54c0:	4602      	mov	r2, r0
    54c2:	460b      	mov	r3, r1
    54c4:	489a      	ldr	r0, [pc, #616]	; (5730 <menu()+0x1918>)
    54c6:	f004 f8b7 	bl	9638 <Print::printFloat(double, unsigned char)>
    54ca:	2101      	movs	r1, #1
    54cc:	489d      	ldr	r0, [pc, #628]	; (5744 <menu()+0x192c>)
    54ce:	f006 fdd7 	bl	c080 <usb_serial_write>
    54d2:	4639      	mov	r1, r7
    54d4:	4898      	ldr	r0, [pc, #608]	; (5738 <menu()+0x1920>)
    54d6:	f006 fdd3 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    54da:	4895      	ldr	r0, [pc, #596]	; (5730 <menu()+0x1918>)
    54dc:	f004 f88a 	bl	95f4 <Print::println()>
    54e0:	2127      	movs	r1, #39	; 0x27
    54e2:	4899      	ldr	r0, [pc, #612]	; (5748 <menu()+0x1930>)
    54e4:	f006 fdcc 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischHys * 1000, 0);
    54e8:	f8d6 00cc 	ldr.w	r0, [r6, #204]	; 0xcc
    54ec:	498f      	ldr	r1, [pc, #572]	; (572c <menu()+0x1914>)
    54ee:	f007 fca7 	bl	ce40 <__aeabi_fmul>
    54f2:	f007 fa81 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    54f6:	9500      	str	r5, [sp, #0]
    54f8:	460b      	mov	r3, r1
    54fa:	4602      	mov	r2, r0
    54fc:	488c      	ldr	r0, [pc, #560]	; (5730 <menu()+0x1918>)
    54fe:	f004 f89b 	bl	9638 <Print::printFloat(double, unsigned char)>
    5502:	4639      	mov	r1, r7
    5504:	488b      	ldr	r0, [pc, #556]	; (5734 <menu()+0x191c>)
    5506:	f006 fdbb 	bl	c080 <usb_serial_write>
        SERIALCONSOLE.println();
    550a:	4889      	ldr	r0, [pc, #548]	; (5730 <menu()+0x1918>)
    550c:	f004 f872 	bl	95f4 <Print::println()>
        menuload = 3;
    5510:	2303      	movs	r3, #3
    5512:	6023      	str	r3, [r4, #0]
        break;
    5514:	f7fe bce6 	b.w	3ee4 <menu()+0xcc>
    switch (incomingByte) {
    5518:	2871      	cmp	r0, #113	; 0x71
    551a:	f47f a9cf 	bne.w	48bc <menu()+0xaa4>
        gaugedebug = 0;
    551e:	4a8b      	ldr	r2, [pc, #556]	; (574c <menu()+0x1934>)
    5520:	2300      	movs	r3, #0
          incomingByte = 'k';
    5522:	2073      	movs	r0, #115	; 0x73
        gaugedebug = 0;
    5524:	6013      	str	r3, [r2, #0]
          menuload = 1;
    5526:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    5528:	6028      	str	r0, [r5, #0]
  if (menuload == 1) {
    552a:	f7fe bcd2 	b.w	3ed2 <menu()+0xba>
        virtual int available() { return usb_serial_available(); }
    552e:	f006 fd75 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5532:	2800      	cmp	r0, #0
    5534:	dd0d      	ble.n	5552 <menu()+0x173a>
          settings.StoreVsetpoint = Serial.parseInt();
    5536:	487e      	ldr	r0, [pc, #504]	; (5730 <menu()+0x1918>)
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    5538:	4e85      	ldr	r6, [pc, #532]	; (5750 <menu()+0x1938>)
          settings.StoreVsetpoint = Serial.parseInt();
    553a:	f004 f9b9 	bl	98b0 <Stream::parseInt()>
    553e:	f007 fc2b 	bl	cd98 <__aeabi_i2f>
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    5542:	497a      	ldr	r1, [pc, #488]	; (572c <menu()+0x1914>)
    5544:	f007 fd30 	bl	cfa8 <__aeabi_fdiv>
          menuload = 1;
    5548:	2201      	movs	r2, #1
          incomingByte = 'b';
    554a:	2362      	movs	r3, #98	; 0x62
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    554c:	6230      	str	r0, [r6, #32]
          menuload = 1;
    554e:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    5550:	602b      	str	r3, [r5, #0]
    5552:	f006 fd63 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5556:	2800      	cmp	r0, #0
    5558:	dd0e      	ble.n	5578 <menu()+0x1760>
          settings.DisTaper = Serial.parseInt();
    555a:	4875      	ldr	r0, [pc, #468]	; (5730 <menu()+0x1918>)
          settings.DisTaper = settings.DisTaper / 1000;
    555c:	4e7c      	ldr	r6, [pc, #496]	; (5750 <menu()+0x1938>)
          settings.DisTaper = Serial.parseInt();
    555e:	f004 f9a7 	bl	98b0 <Stream::parseInt()>
    5562:	f007 fc19 	bl	cd98 <__aeabi_i2f>
          settings.DisTaper = settings.DisTaper / 1000;
    5566:	4971      	ldr	r1, [pc, #452]	; (572c <menu()+0x1914>)
    5568:	f007 fd1e 	bl	cfa8 <__aeabi_fdiv>
          menuload = 1;
    556c:	2201      	movs	r2, #1
          incomingByte = 'b';
    556e:	2362      	movs	r3, #98	; 0x62
          settings.DisTaper = settings.DisTaper / 1000;
    5570:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
          menuload = 1;
    5574:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    5576:	602b      	str	r3, [r5, #0]
    5578:	f006 fd50 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    557c:	2800      	cmp	r0, #0
    557e:	dc18      	bgt.n	55b2 <menu()+0x179a>
  if (menuload == 1) {
    5580:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    5582:	6828      	ldr	r0, [r5, #0]
  if (menuload == 1) {
    5584:	2b01      	cmp	r3, #1
    5586:	f47e aca4 	bne.w	3ed2 <menu()+0xba>
    558a:	f7fe bfab 	b.w	44e4 <menu()+0x6cc>
  if (menuload == 7) {
    558e:	2b07      	cmp	r3, #7
    5590:	f43f a8da 	beq.w	4748 <menu()+0x930>
  if (menuload == 6)  //Charging settings
    5594:	2b06      	cmp	r3, #6
    5596:	f04f 0064 	mov.w	r0, #100	; 0x64
    559a:	f43f acb8 	beq.w	4f0e <menu()+0x10f6>
  if (menuload == 5) {
    559e:	2b05      	cmp	r3, #5
    55a0:	f43f a98c 	beq.w	48bc <menu()+0xaa4>
    55a4:	f7ff ba25 	b.w	49f2 <menu()+0xbda>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    55a8:	2114      	movs	r1, #20
    55aa:	486a      	ldr	r0, [pc, #424]	; (5754 <menu()+0x193c>)
    55ac:	f006 fd68 	bl	c080 <usb_serial_write>
    55b0:	e4db      	b.n	4f6a <menu()+0x1152>
          settings.socvolt[0] = Serial.parseInt();
    55b2:	485f      	ldr	r0, [pc, #380]	; (5730 <menu()+0x1918>)
    55b4:	4e66      	ldr	r6, [pc, #408]	; (5750 <menu()+0x1938>)
    55b6:	f004 f97b 	bl	98b0 <Stream::parseInt()>
    55ba:	66f0      	str	r0, [r6, #108]	; 0x6c
        menuload = 1;
    55bc:	2201      	movs	r2, #1
        incomingByte = 'b';
    55be:	2362      	movs	r3, #98	; 0x62
        menuload = 1;
    55c0:	6022      	str	r2, [r4, #0]
        incomingByte = 'b';
    55c2:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    55c4:	e57c      	b.n	50c0 <menu()+0x12a8>
    55c6:	211c      	movs	r1, #28
    55c8:	4863      	ldr	r0, [pc, #396]	; (5758 <menu()+0x1940>)
    55ca:	f006 fd59 	bl	c080 <usb_serial_write>
          SERIALCONSOLE.print(settings.convlow * 0.1, 1);
    55ce:	f8d6 0094 	ldr.w	r0, [r6, #148]	; 0x94
    55d2:	4962      	ldr	r1, [pc, #392]	; (575c <menu()+0x1944>)
    55d4:	f007 fc34 	bl	ce40 <__aeabi_fmul>
    55d8:	f007 fa0e 	bl	c9f8 <__aeabi_f2d>
    55dc:	9700      	str	r7, [sp, #0]
    55de:	4602      	mov	r2, r0
    55e0:	460b      	mov	r3, r1
    55e2:	4853      	ldr	r0, [pc, #332]	; (5730 <menu()+0x1918>)
    55e4:	f004 f828 	bl	9638 <Print::printFloat(double, unsigned char)>
    55e8:	2105      	movs	r1, #5
    55ea:	485d      	ldr	r0, [pc, #372]	; (5760 <menu()+0x1948>)
    55ec:	f006 fd48 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    55f0:	484f      	ldr	r0, [pc, #316]	; (5730 <menu()+0x1918>)
    55f2:	f003 ffff 	bl	95f4 <Print::println()>
        if (settings.cursens == Analoguedual) {
    55f6:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    55fa:	2d01      	cmp	r5, #1
    55fc:	d119      	bne.n	5632 <menu()+0x181a>
    55fe:	211d      	movs	r1, #29
    5600:	4858      	ldr	r0, [pc, #352]	; (5764 <menu()+0x194c>)
    5602:	f006 fd3d 	bl	c080 <usb_serial_write>
          SERIALCONSOLE.print(settings.convhigh * 0.1, 1);
    5606:	f8d6 0090 	ldr.w	r0, [r6, #144]	; 0x90
    560a:	4954      	ldr	r1, [pc, #336]	; (575c <menu()+0x1944>)
    560c:	f007 fc18 	bl	ce40 <__aeabi_fmul>
    5610:	f007 f9f2 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5614:	9500      	str	r5, [sp, #0]
    5616:	4602      	mov	r2, r0
    5618:	460b      	mov	r3, r1
    561a:	4845      	ldr	r0, [pc, #276]	; (5730 <menu()+0x1918>)
    561c:	f004 f80c 	bl	9638 <Print::printFloat(double, unsigned char)>
    5620:	2105      	movs	r1, #5
    5622:	484f      	ldr	r0, [pc, #316]	; (5760 <menu()+0x1948>)
    5624:	f006 fd2c 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5628:	4841      	ldr	r0, [pc, #260]	; (5730 <menu()+0x1918>)
    562a:	f003 ffe3 	bl	95f4 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    562e:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    5632:	f025 0302 	bic.w	r3, r5, #2
    5636:	2b01      	cmp	r3, #1
    5638:	f47f a90e 	bne.w	4858 <menu()+0xa40>
    563c:	211c      	movs	r1, #28
    563e:	484a      	ldr	r0, [pc, #296]	; (5768 <menu()+0x1950>)
    5640:	f006 fd1e 	bl	c080 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5644:	f8b6 10c2 	ldrh.w	r1, [r6, #194]	; 0xc2
    5648:	4839      	ldr	r0, [pc, #228]	; (5730 <menu()+0x1918>)
    564a:	f003 ffcb 	bl	95e4 <Print::print(long)>
    564e:	2103      	movs	r1, #3
    5650:	4846      	ldr	r0, [pc, #280]	; (576c <menu()+0x1954>)
    5652:	f006 fd15 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5656:	4836      	ldr	r0, [pc, #216]	; (5730 <menu()+0x1918>)
    5658:	f003 ffcc 	bl	95f4 <Print::println()>
        if (settings.cursens == Analoguedual) {
    565c:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    5660:	2d01      	cmp	r5, #1
    5662:	f47f a8f9 	bne.w	4858 <menu()+0xa40>
    5666:	211f      	movs	r1, #31
    5668:	4841      	ldr	r0, [pc, #260]	; (5770 <menu()+0x1958>)
    566a:	f006 fd09 	bl	c080 <usb_serial_write>
          SERIALCONSOLE.print(settings.changecur * 0.001);
    566e:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
    5672:	f007 fb91 	bl	cd98 <__aeabi_i2f>
    5676:	493f      	ldr	r1, [pc, #252]	; (5774 <menu()+0x195c>)
    5678:	f007 fbe2 	bl	ce40 <__aeabi_fmul>
    567c:	f007 f9bc 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5680:	2502      	movs	r5, #2
    5682:	4602      	mov	r2, r0
    5684:	460b      	mov	r3, r1
    5686:	9500      	str	r5, [sp, #0]
    5688:	4829      	ldr	r0, [pc, #164]	; (5730 <menu()+0x1918>)
    568a:	f003 ffd5 	bl	9638 <Print::printFloat(double, unsigned char)>
    568e:	4629      	mov	r1, r5
    5690:	4839      	ldr	r0, [pc, #228]	; (5778 <menu()+0x1960>)
    5692:	f006 fcf5 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5696:	4826      	ldr	r0, [pc, #152]	; (5730 <menu()+0x1918>)
    5698:	f003 ffac 	bl	95f4 <Print::println()>
        if (settings.cursens == Canbus) {
    569c:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    56a0:	f7ff b8da 	b.w	4858 <menu()+0xa40>
          settings.gaugehigh = Serial.parseInt();
    56a4:	4822      	ldr	r0, [pc, #136]	; (5730 <menu()+0x1918>)
    56a6:	4e2a      	ldr	r6, [pc, #168]	; (5750 <menu()+0x1938>)
    56a8:	f004 f902 	bl	98b0 <Stream::parseInt()>
          gaugedebug = 3;
    56ac:	4b27      	ldr	r3, [pc, #156]	; (574c <menu()+0x1934>)
          settings.gaugehigh = Serial.parseInt();
    56ae:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
          gaugedebug = 3;
    56b2:	2203      	movs	r2, #3
    56b4:	f7ff ba3b 	b.w	4b2e <menu()+0xd16>
        SOCreset = 1;
    56b8:	4b30      	ldr	r3, [pc, #192]	; (577c <menu()+0x1964>)
    56ba:	481f      	ldr	r0, [pc, #124]	; (5738 <menu()+0x1920>)
    56bc:	2102      	movs	r1, #2
    56be:	2201      	movs	r2, #1
    56c0:	601a      	str	r2, [r3, #0]
    56c2:	f006 fcdd 	bl	c080 <usb_serial_write>
    56c6:	481a      	ldr	r0, [pc, #104]	; (5730 <menu()+0x1918>)
    56c8:	f003 ff94 	bl	95f4 <Print::println()>
    56cc:	482c      	ldr	r0, [pc, #176]	; (5780 <menu()+0x1968>)
    56ce:	210b      	movs	r1, #11
    56d0:	f006 fcd6 	bl	c080 <usb_serial_write>
    56d4:	2102      	movs	r1, #2
    56d6:	4818      	ldr	r0, [pc, #96]	; (5738 <menu()+0x1920>)
    56d8:	4e1d      	ldr	r6, [pc, #116]	; (5750 <menu()+0x1938>)
    56da:	f006 fcd1 	bl	c080 <usb_serial_write>
    56de:	4814      	ldr	r0, [pc, #80]	; (5730 <menu()+0x1918>)
    56e0:	f003 ff88 	bl	95f4 <Print::println()>
        break;
    56e4:	e76a      	b.n	55bc <menu()+0x17a4>
        virtual int available() { return usb_serial_available(); }
    56e6:	f006 fc99 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    56ea:	2800      	cmp	r0, #0
    56ec:	f77f af48 	ble.w	5580 <menu()+0x1768>
          settings.socvolt[1] = Serial.parseInt();
    56f0:	480f      	ldr	r0, [pc, #60]	; (5730 <menu()+0x1918>)
    56f2:	4e17      	ldr	r6, [pc, #92]	; (5750 <menu()+0x1938>)
    56f4:	f004 f8dc 	bl	98b0 <Stream::parseInt()>
    56f8:	6730      	str	r0, [r6, #112]	; 0x70
          incomingByte = 'b';
    56fa:	e75f      	b.n	55bc <menu()+0x17a4>
    56fc:	f006 fc8e 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5700:	2800      	cmp	r0, #0
    5702:	f77f af3d 	ble.w	5580 <menu()+0x1768>
          settings.socvolt[3] = Serial.parseInt();
    5706:	480a      	ldr	r0, [pc, #40]	; (5730 <menu()+0x1918>)
    5708:	4e11      	ldr	r6, [pc, #68]	; (5750 <menu()+0x1938>)
    570a:	f004 f8d1 	bl	98b0 <Stream::parseInt()>
    570e:	67b0      	str	r0, [r6, #120]	; 0x78
          incomingByte = 'b';
    5710:	e754      	b.n	55bc <menu()+0x17a4>
    5712:	f006 fc83 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5716:	2800      	cmp	r0, #0
    5718:	f77f af32 	ble.w	5580 <menu()+0x1768>
          settings.socvolt[2] = Serial.parseInt();
    571c:	4804      	ldr	r0, [pc, #16]	; (5730 <menu()+0x1918>)
    571e:	4e0c      	ldr	r6, [pc, #48]	; (5750 <menu()+0x1938>)
    5720:	f004 f8c6 	bl	98b0 <Stream::parseInt()>
    5724:	6770      	str	r0, [r6, #116]	; 0x74
          incomingByte = 'b';
    5726:	e749      	b.n	55bc <menu()+0x17a4>
    5728:	00014ca0 	.word	0x00014ca0
    572c:	447a0000 	.word	0x447a0000
    5730:	1fff89fc 	.word	0x1fff89fc
    5734:	000143d4 	.word	0x000143d4
    5738:	00014ea8 	.word	0x00014ea8
    573c:	00014cb8 	.word	0x00014cb8
    5740:	00014ce0 	.word	0x00014ce0
    5744:	00014b30 	.word	0x00014b30
    5748:	00014d0c 	.word	0x00014d0c
    574c:	1fffcfdc 	.word	0x1fffcfdc
    5750:	1fffd0d8 	.word	0x1fffd0d8
    5754:	00014564 	.word	0x00014564
    5758:	00014974 	.word	0x00014974
    575c:	3dcccccd 	.word	0x3dcccccd
    5760:	00014994 	.word	0x00014994
    5764:	0001499c 	.word	0x0001499c
    5768:	000149bc 	.word	0x000149bc
    576c:	000149dc 	.word	0x000149dc
    5770:	000149e0 	.word	0x000149e0
    5774:	3a83126f 	.word	0x3a83126f
    5778:	00014a00 	.word	0x00014a00
    577c:	1fff91c8 	.word	0x1fff91c8
    5780:	00014380 	.word	0x00014380
        loadSettings();
    5784:	f7fc fe68 	bl	2458 <loadSettings()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5788:	2102      	movs	r1, #2
    578a:	48b8      	ldr	r0, [pc, #736]	; (5a6c <menu()+0x1c54>)
    578c:	f006 fc78 	bl	c080 <usb_serial_write>
    5790:	48b7      	ldr	r0, [pc, #732]	; (5a70 <menu()+0x1c58>)
    5792:	f003 ff2f 	bl	95f4 <Print::println()>
    5796:	2102      	movs	r1, #2
    5798:	48b4      	ldr	r0, [pc, #720]	; (5a6c <menu()+0x1c54>)
    579a:	f006 fc71 	bl	c080 <usb_serial_write>
    579e:	48b4      	ldr	r0, [pc, #720]	; (5a70 <menu()+0x1c58>)
    57a0:	f003 ff28 	bl	95f4 <Print::println()>
    57a4:	2102      	movs	r1, #2
    57a6:	48b1      	ldr	r0, [pc, #708]	; (5a6c <menu()+0x1c54>)
    57a8:	f006 fc6a 	bl	c080 <usb_serial_write>
    57ac:	48b0      	ldr	r0, [pc, #704]	; (5a70 <menu()+0x1c58>)
    57ae:	f003 ff21 	bl	95f4 <Print::println()>
    57b2:	2117      	movs	r1, #23
    57b4:	48af      	ldr	r0, [pc, #700]	; (5a74 <menu()+0x1c5c>)
    57b6:	f006 fc63 	bl	c080 <usb_serial_write>
    57ba:	48ad      	ldr	r0, [pc, #692]	; (5a70 <menu()+0x1c58>)
    57bc:	f003 ff1a 	bl	95f4 <Print::println()>
    57c0:	e788      	b.n	56d4 <menu()+0x18bc>
        menuload = 0;
    57c2:	2200      	movs	r2, #0
        incomingByte = 115;
    57c4:	2373      	movs	r3, #115	; 0x73
    57c6:	4eac      	ldr	r6, [pc, #688]	; (5a78 <menu()+0x1c60>)
        menuload = 0;
    57c8:	6022      	str	r2, [r4, #0]
        incomingByte = 115;
    57ca:	602b      	str	r3, [r5, #0]
  if (incomingByte == 115 & menuload == 0) {
    57cc:	f7fe bc17 	b.w	3ffe <menu()+0x1e6>
        virtual int available() { return usb_serial_available(); }
    57d0:	f006 fc24 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    57d4:	2800      	cmp	r0, #0
    57d6:	f77f aed3 	ble.w	5580 <menu()+0x1768>
          settings.DischHys = Serial.parseInt();
    57da:	48a5      	ldr	r0, [pc, #660]	; (5a70 <menu()+0x1c58>)
          settings.DischHys = settings.DischHys / 1000;
    57dc:	4ea7      	ldr	r6, [pc, #668]	; (5a7c <menu()+0x1c64>)
          settings.DischHys = Serial.parseInt();
    57de:	f004 f867 	bl	98b0 <Stream::parseInt()>
    57e2:	f007 fad9 	bl	cd98 <__aeabi_i2f>
          settings.DischHys = settings.DischHys / 1000;
    57e6:	49a6      	ldr	r1, [pc, #664]	; (5a80 <menu()+0x1c68>)
    57e8:	f007 fbde 	bl	cfa8 <__aeabi_fdiv>
    57ec:	f8c6 00cc 	str.w	r0, [r6, #204]	; 0xcc
          incomingByte = 'b';
    57f0:	e6e4      	b.n	55bc <menu()+0x17a4>
    57f2:	f006 fc13 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    57f6:	2800      	cmp	r0, #0
    57f8:	f77f aec2 	ble.w	5580 <menu()+0x1768>
          settings.UnderVSetpoint = Serial.parseInt();
    57fc:	489c      	ldr	r0, [pc, #624]	; (5a70 <menu()+0x1c58>)
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    57fe:	4e9f      	ldr	r6, [pc, #636]	; (5a7c <menu()+0x1c64>)
          settings.UnderVSetpoint = Serial.parseInt();
    5800:	f004 f856 	bl	98b0 <Stream::parseInt()>
    5804:	f007 fac8 	bl	cd98 <__aeabi_i2f>
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    5808:	499d      	ldr	r1, [pc, #628]	; (5a80 <menu()+0x1c68>)
    580a:	f007 fbcd 	bl	cfa8 <__aeabi_fdiv>
    580e:	6130      	str	r0, [r6, #16]
          incomingByte = 'b';
    5810:	e6d4      	b.n	55bc <menu()+0x17a4>
    5812:	f006 fc03 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5816:	2800      	cmp	r0, #0
    5818:	f77f aeb2 	ble.w	5580 <menu()+0x1768>
          settings.Pstrings = Serial.parseInt();
    581c:	4894      	ldr	r0, [pc, #592]	; (5a70 <menu()+0x1c58>)
    581e:	4e97      	ldr	r6, [pc, #604]	; (5a7c <menu()+0x1c64>)
    5820:	f004 f846 	bl	98b0 <Stream::parseInt()>
          menuload = 1;
    5824:	2301      	movs	r3, #1
          settings.Pstrings = Serial.parseInt();
    5826:	4601      	mov	r1, r0
          menuload = 1;
    5828:	6023      	str	r3, [r4, #0]
          bms.setPstrings(settings.Pstrings);
    582a:	4896      	ldr	r0, [pc, #600]	; (5a84 <menu()+0x1c6c>)
          settings.Pstrings = Serial.parseInt();
    582c:	65b1      	str	r1, [r6, #88]	; 0x58
          incomingByte = 'b';
    582e:	2362      	movs	r3, #98	; 0x62
    5830:	602b      	str	r3, [r5, #0]
          bms.setPstrings(settings.Pstrings);
    5832:	f7fc f8cd 	bl	19d0 <BMSModuleManager::setPstrings(int)>
  if (menuload == 1) {
    5836:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    5838:	6828      	ldr	r0, [r5, #0]
    583a:	e6a3      	b.n	5584 <menu()+0x176c>
    583c:	f006 fbee 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5840:	2800      	cmp	r0, #0
    5842:	f77f ae9d 	ble.w	5580 <menu()+0x1768>
          settings.OverVSetpoint = Serial.parseInt();
    5846:	488a      	ldr	r0, [pc, #552]	; (5a70 <menu()+0x1c58>)
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    5848:	4e8c      	ldr	r6, [pc, #560]	; (5a7c <menu()+0x1c64>)
          settings.OverVSetpoint = Serial.parseInt();
    584a:	f004 f831 	bl	98b0 <Stream::parseInt()>
    584e:	f007 faa3 	bl	cd98 <__aeabi_i2f>
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    5852:	498b      	ldr	r1, [pc, #556]	; (5a80 <menu()+0x1c68>)
    5854:	f007 fba8 	bl	cfa8 <__aeabi_fdiv>
    5858:	60f0      	str	r0, [r6, #12]
          incomingByte = 'b';
    585a:	e6af      	b.n	55bc <menu()+0x17a4>
    585c:	f006 fbde 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5860:	2800      	cmp	r0, #0
    5862:	f77f ae8d 	ble.w	5580 <menu()+0x1768>
          settings.Scells = Serial.parseInt();
    5866:	4882      	ldr	r0, [pc, #520]	; (5a70 <menu()+0x1c58>)
    5868:	4e84      	ldr	r6, [pc, #528]	; (5a7c <menu()+0x1c64>)
    586a:	f004 f821 	bl	98b0 <Stream::parseInt()>
    586e:	6570      	str	r0, [r6, #84]	; 0x54
          incomingByte = 'b';
    5870:	e6a4      	b.n	55bc <menu()+0x17a4>
    5872:	f006 fbd3 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5876:	2800      	cmp	r0, #0
    5878:	f77f ae82 	ble.w	5580 <menu()+0x1768>
          settings.DischVsetpoint = Serial.parseInt();
    587c:	487c      	ldr	r0, [pc, #496]	; (5a70 <menu()+0x1c58>)
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    587e:	4e7f      	ldr	r6, [pc, #508]	; (5a7c <menu()+0x1c64>)
          settings.DischVsetpoint = Serial.parseInt();
    5880:	f004 f816 	bl	98b0 <Stream::parseInt()>
    5884:	f007 fa88 	bl	cd98 <__aeabi_i2f>
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    5888:	497d      	ldr	r1, [pc, #500]	; (5a80 <menu()+0x1c68>)
    588a:	f007 fb8d 	bl	cfa8 <__aeabi_fdiv>
    588e:	61b0      	str	r0, [r6, #24]
          incomingByte = 'b';
    5890:	e694      	b.n	55bc <menu()+0x17a4>
    5892:	f006 fbc3 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5896:	2800      	cmp	r0, #0
    5898:	f77f ae72 	ble.w	5580 <menu()+0x1768>
          settings.discurrentmax = Serial.parseInt() * 10;
    589c:	4874      	ldr	r0, [pc, #464]	; (5a70 <menu()+0x1c58>)
    589e:	4e77      	ldr	r6, [pc, #476]	; (5a7c <menu()+0x1c64>)
    58a0:	f004 f806 	bl	98b0 <Stream::parseInt()>
    58a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    58a8:	0040      	lsls	r0, r0, #1
    58aa:	66b0      	str	r0, [r6, #104]	; 0x68
          incomingByte = 'b';
    58ac:	e686      	b.n	55bc <menu()+0x17a4>
    58ae:	f006 fbb5 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    58b2:	2800      	cmp	r0, #0
    58b4:	f77f ae64 	ble.w	5580 <menu()+0x1768>
          settings.CAP = Serial.parseInt();
    58b8:	486d      	ldr	r0, [pc, #436]	; (5a70 <menu()+0x1c58>)
    58ba:	4e70      	ldr	r6, [pc, #448]	; (5a7c <menu()+0x1c64>)
    58bc:	f003 fff8 	bl	98b0 <Stream::parseInt()>
    58c0:	65f0      	str	r0, [r6, #92]	; 0x5c
          incomingByte = 'b';
    58c2:	e67b      	b.n	55bc <menu()+0x17a4>
    58c4:	f006 fbaa 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    58c8:	2800      	cmp	r0, #0
    58ca:	f77f ae59 	ble.w	5580 <menu()+0x1768>
          settings.balanceHyst = Serial.parseInt();
    58ce:	4868      	ldr	r0, [pc, #416]	; (5a70 <menu()+0x1c58>)
          settings.balanceHyst = settings.balanceHyst / 1000;
    58d0:	4e6a      	ldr	r6, [pc, #424]	; (5a7c <menu()+0x1c64>)
          settings.balanceHyst = Serial.parseInt();
    58d2:	f003 ffed 	bl	98b0 <Stream::parseInt()>
    58d6:	f007 fa5f 	bl	cd98 <__aeabi_i2f>
          settings.balanceHyst = settings.balanceHyst / 1000;
    58da:	4969      	ldr	r1, [pc, #420]	; (5a80 <menu()+0x1c68>)
    58dc:	f007 fb64 	bl	cfa8 <__aeabi_fdiv>
          menuload = 1;
    58e0:	2301      	movs	r3, #1
          settings.balanceHyst = settings.balanceHyst / 1000;
    58e2:	4601      	mov	r1, r0
    58e4:	64f0      	str	r0, [r6, #76]	; 0x4c
          bms.setBalanceHyst(settings.balanceHyst);
    58e6:	4867      	ldr	r0, [pc, #412]	; (5a84 <menu()+0x1c6c>)
          menuload = 1;
    58e8:	6023      	str	r3, [r4, #0]
          bms.setBalanceHyst(settings.balanceHyst);
    58ea:	f7fb fa89 	bl	e00 <BMSModuleManager::setBalanceHyst(float)>
  if (menuload == 1) {
    58ee:	6823      	ldr	r3, [r4, #0]
          incomingByte = 'b';
    58f0:	2262      	movs	r2, #98	; 0x62
  if (menuload == 1) {
    58f2:	2b01      	cmp	r3, #1
          incomingByte = 'b';
    58f4:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    58f6:	f47e aaf5 	bne.w	3ee4 <menu()+0xcc>
    58fa:	f7ff bbe1 	b.w	50c0 <menu()+0x12a8>
    58fe:	f006 fb8d 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5902:	2800      	cmp	r0, #0
    5904:	f77f ae3c 	ble.w	5580 <menu()+0x1768>
          settings.balanceVoltage = Serial.parseInt();
    5908:	4859      	ldr	r0, [pc, #356]	; (5a70 <menu()+0x1c58>)
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    590a:	4e5c      	ldr	r6, [pc, #368]	; (5a7c <menu()+0x1c64>)
          settings.balanceVoltage = Serial.parseInt();
    590c:	f003 ffd0 	bl	98b0 <Stream::parseInt()>
    5910:	f007 fa42 	bl	cd98 <__aeabi_i2f>
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    5914:	495a      	ldr	r1, [pc, #360]	; (5a80 <menu()+0x1c68>)
    5916:	f007 fb47 	bl	cfa8 <__aeabi_fdiv>
    591a:	64b0      	str	r0, [r6, #72]	; 0x48
          incomingByte = 'b';
    591c:	e64e      	b.n	55bc <menu()+0x17a4>
    591e:	f006 fb7d 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5922:	2800      	cmp	r0, #0
    5924:	f77f ae2c 	ble.w	5580 <menu()+0x1768>
          settings.UnderTSetpoint = Serial.parseInt();
    5928:	4851      	ldr	r0, [pc, #324]	; (5a70 <menu()+0x1c58>)
    592a:	4e54      	ldr	r6, [pc, #336]	; (5a7c <menu()+0x1c64>)
    592c:	f003 ffc0 	bl	98b0 <Stream::parseInt()>
    5930:	f007 fa32 	bl	cd98 <__aeabi_i2f>
    5934:	62f0      	str	r0, [r6, #44]	; 0x2c
          incomingByte = 'b';
    5936:	e641      	b.n	55bc <menu()+0x17a4>
    5938:	f006 fb70 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    593c:	2800      	cmp	r0, #0
    593e:	f77f ae1f 	ble.w	5580 <menu()+0x1768>
          settings.OverTSetpoint = Serial.parseInt();
    5942:	484b      	ldr	r0, [pc, #300]	; (5a70 <menu()+0x1c58>)
    5944:	4e4d      	ldr	r6, [pc, #308]	; (5a7c <menu()+0x1c64>)
    5946:	f003 ffb3 	bl	98b0 <Stream::parseInt()>
    594a:	f007 fa25 	bl	cd98 <__aeabi_i2f>
    594e:	62b0      	str	r0, [r6, #40]	; 0x28
          incomingByte = 'b';
    5950:	e634      	b.n	55bc <menu()+0x17a4>
    5952:	f006 fb63 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5956:	2800      	cmp	r0, #0
    5958:	f77f ae12 	ble.w	5580 <menu()+0x1768>
          settings.DisTSetpoint = Serial.parseInt();
    595c:	4844      	ldr	r0, [pc, #272]	; (5a70 <menu()+0x1c58>)
    595e:	4e47      	ldr	r6, [pc, #284]	; (5a7c <menu()+0x1c64>)
    5960:	f003 ffa6 	bl	98b0 <Stream::parseInt()>
    5964:	f007 fa18 	bl	cd98 <__aeabi_i2f>
    5968:	6370      	str	r0, [r6, #52]	; 0x34
          incomingByte = 'b';
    596a:	e627      	b.n	55bc <menu()+0x17a4>
          settings.ChargeHys = Serial.parseInt();
    596c:	4840      	ldr	r0, [pc, #256]	; (5a70 <menu()+0x1c58>)
          settings.ChargeHys = settings.ChargeHys / 1000;
    596e:	4e43      	ldr	r6, [pc, #268]	; (5a7c <menu()+0x1c64>)
          settings.ChargeHys = Serial.parseInt();
    5970:	f003 ff9e 	bl	98b0 <Stream::parseInt()>
    5974:	f007 fa10 	bl	cd98 <__aeabi_i2f>
          settings.ChargeHys = settings.ChargeHys / 1000;
    5978:	4941      	ldr	r1, [pc, #260]	; (5a80 <menu()+0x1c68>)
    597a:	f007 fb15 	bl	cfa8 <__aeabi_fdiv>
          menuload = 1;
    597e:	2301      	movs	r3, #1
    5980:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    5982:	2365      	movs	r3, #101	; 0x65
          settings.ChargeHys = settings.ChargeHys / 1000;
    5984:	61f0      	str	r0, [r6, #28]
          incomingByte = 'e';
    5986:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5988:	f7ff b985 	b.w	4c96 <menu()+0xe7e>
          debugdigits = Serial.parseInt();
    598c:	4838      	ldr	r0, [pc, #224]	; (5a70 <menu()+0x1c58>)
    598e:	f003 ff8f 	bl	98b0 <Stream::parseInt()>
    5992:	4b3d      	ldr	r3, [pc, #244]	; (5a88 <menu()+0x1c70>)
    5994:	6018      	str	r0, [r3, #0]
    5996:	f7fe bee7 	b.w	4768 <menu()+0x950>
          settings.ncur = Serial.parseInt();
    599a:	4835      	ldr	r0, [pc, #212]	; (5a70 <menu()+0x1c58>)
    599c:	4e37      	ldr	r6, [pc, #220]	; (5a7c <menu()+0x1c64>)
    599e:	f003 ff87 	bl	98b0 <Stream::parseInt()>
    59a2:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
    59a6:	f7fe bfa3 	b.w	48f0 <menu()+0xad8>
          contctrl = 0;
    59aa:	4b38      	ldr	r3, [pc, #224]	; (5a8c <menu()+0x1c74>)
    59ac:	2600      	movs	r6, #0
          digitalWrite(OUT1, LOW);
    59ae:	200b      	movs	r0, #11
    59b0:	4631      	mov	r1, r6
          contctrl = 0;
    59b2:	601e      	str	r6, [r3, #0]
          digitalWrite(OUT1, LOW);
    59b4:	f004 fcf0 	bl	a398 <digitalWrite>
          digitalWrite(OUT2, LOW);
    59b8:	4631      	mov	r1, r6
    59ba:	200c      	movs	r0, #12
    59bc:	f004 fcec 	bl	a398 <digitalWrite>
          digitalWrite(OUT3, LOW);
    59c0:	4631      	mov	r1, r6
    59c2:	2014      	movs	r0, #20
    59c4:	f004 fce8 	bl	a398 <digitalWrite>
          digitalWrite(OUT4, LOW);
    59c8:	4631      	mov	r1, r6
    59ca:	2015      	movs	r0, #21
    59cc:	f004 fce4 	bl	a398 <digitalWrite>
        incomingByte = 'd';
    59d0:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    59d2:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    59d4:	602a      	str	r2, [r5, #0]
        break;
    59d6:	f7fe beb4 	b.w	4742 <menu()+0x92a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    59da:	211e      	movs	r1, #30
    59dc:	482c      	ldr	r0, [pc, #176]	; (5a90 <menu()+0x1c78>)
    59de:	f006 fb4f 	bl	c080 <usb_serial_write>
    59e2:	4823      	ldr	r0, [pc, #140]	; (5a70 <menu()+0x1c58>)
    59e4:	f003 fe06 	bl	95f4 <Print::println()>
    59e8:	f7fe bf0c 	b.w	4804 <menu()+0x9ec>
    59ec:	2120      	movs	r1, #32
    59ee:	4829      	ldr	r0, [pc, #164]	; (5a94 <menu()+0x1c7c>)
    59f0:	f006 fb46 	bl	c080 <usb_serial_write>
    59f4:	481e      	ldr	r0, [pc, #120]	; (5a70 <menu()+0x1c58>)
    59f6:	f003 fdfd 	bl	95f4 <Print::println()>
    59fa:	f7fe bf03 	b.w	4804 <menu()+0x9ec>
    59fe:	2117      	movs	r1, #23
    5a00:	4825      	ldr	r0, [pc, #148]	; (5a98 <menu()+0x1c80>)
    5a02:	f006 fb3d 	bl	c080 <usb_serial_write>
    5a06:	481a      	ldr	r0, [pc, #104]	; (5a70 <menu()+0x1c58>)
    5a08:	f003 fdf4 	bl	95f4 <Print::println()>
    5a0c:	f7fe befa 	b.w	4804 <menu()+0x9ec>
    5a10:	4822      	ldr	r0, [pc, #136]	; (5a9c <menu()+0x1c84>)
    5a12:	2117      	movs	r1, #23
    5a14:	f006 fb34 	bl	c080 <usb_serial_write>
          if (settings.curcan == LemCAB300) {
    5a18:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
    5a1c:	2b01      	cmp	r3, #1
    5a1e:	d047      	beq.n	5ab0 <menu()+0x1c98>
          } else if (settings.curcan == LemCAB500) {
    5a20:	2b02      	cmp	r3, #2
    5a22:	d04e      	beq.n	5ac2 <menu()+0x1caa>
          } else if (settings.curcan == IsaScale) {
    5a24:	2b03      	cmp	r3, #3
    5a26:	d055      	beq.n	5ad4 <menu()+0x1cbc>
          } else if (settings.curcan == VictronLynx) {
    5a28:	2b04      	cmp	r3, #4
    5a2a:	f47e af18 	bne.w	485e <menu()+0xa46>
            SERIALCONSOLE.println(" Victron Lynx VE.CAN Shunt");
    5a2e:	491c      	ldr	r1, [pc, #112]	; (5aa0 <menu()+0x1c88>)
    5a30:	480f      	ldr	r0, [pc, #60]	; (5a70 <menu()+0x1c58>)
    5a32:	f7fc fcff 	bl	2434 <Print::println(char const*) [clone .isra.0]>
    5a36:	f7fe bf12 	b.w	485e <menu()+0xa46>
    5a3a:	481a      	ldr	r0, [pc, #104]	; (5aa4 <menu()+0x1c8c>)
    5a3c:	2120      	movs	r1, #32
    5a3e:	f006 fb1f 	bl	c080 <usb_serial_write>
          if (settings.tripcont == 0) {
    5a42:	f896 30c9 	ldrb.w	r3, [r6, #201]	; 0xc9
    5a46:	b943      	cbnz	r3, 5a5a <menu()+0x1c42>
    5a48:	210a      	movs	r1, #10
    5a4a:	4817      	ldr	r0, [pc, #92]	; (5aa8 <menu()+0x1c90>)
    5a4c:	f006 fb18 	bl	c080 <usb_serial_write>
    5a50:	4807      	ldr	r0, [pc, #28]	; (5a70 <menu()+0x1c58>)
    5a52:	f003 fdcf 	bl	95f4 <Print::println()>
    5a56:	f7ff b8d7 	b.w	4c08 <menu()+0xdf0>
    5a5a:	211c      	movs	r1, #28
    5a5c:	4813      	ldr	r0, [pc, #76]	; (5aac <menu()+0x1c94>)
    5a5e:	f006 fb0f 	bl	c080 <usb_serial_write>
    5a62:	4803      	ldr	r0, [pc, #12]	; (5a70 <menu()+0x1c58>)
    5a64:	f003 fdc6 	bl	95f4 <Print::println()>
    5a68:	f7ff b8ce 	b.w	4c08 <menu()+0xdf0>
    5a6c:	00014ea8 	.word	0x00014ea8
    5a70:	1fff89fc 	.word	0x1fff89fc
    5a74:	00014368 	.word	0x00014368
    5a78:	1fff884c 	.word	0x1fff884c
    5a7c:	1fffd0d8 	.word	0x1fffd0d8
    5a80:	447a0000 	.word	0x447a0000
    5a84:	1fff91f0 	.word	0x1fff91f0
    5a88:	1fff8850 	.word	0x1fff8850
    5a8c:	1fffcfb0 	.word	0x1fffcfb0
    5a90:	000148b4 	.word	0x000148b4
    5a94:	000148d4 	.word	0x000148d4
    5a98:	000148f8 	.word	0x000148f8
    5a9c:	00014a04 	.word	0x00014a04
    5aa0:	00014a60 	.word	0x00014a60
    5aa4:	00014724 	.word	0x00014724
    5aa8:	00014748 	.word	0x00014748
    5aac:	00014754 	.word	0x00014754
    5ab0:	2117      	movs	r1, #23
    5ab2:	4827      	ldr	r0, [pc, #156]	; (5b50 <menu()+0x1d38>)
    5ab4:	f006 fae4 	bl	c080 <usb_serial_write>
    5ab8:	4826      	ldr	r0, [pc, #152]	; (5b54 <menu()+0x1d3c>)
    5aba:	f003 fd9b 	bl	95f4 <Print::println()>
    5abe:	f7fe bece 	b.w	485e <menu()+0xa46>
    5ac2:	2114      	movs	r1, #20
    5ac4:	4824      	ldr	r0, [pc, #144]	; (5b58 <menu()+0x1d40>)
    5ac6:	f006 fadb 	bl	c080 <usb_serial_write>
    5aca:	4822      	ldr	r0, [pc, #136]	; (5b54 <menu()+0x1d3c>)
    5acc:	f003 fd92 	bl	95f4 <Print::println()>
    5ad0:	f7fe bec5 	b.w	485e <menu()+0xa46>
            SERIALCONSOLE.println(" IsaScale IVT-S ");
    5ad4:	4921      	ldr	r1, [pc, #132]	; (5b5c <menu()+0x1d44>)
    5ad6:	481f      	ldr	r0, [pc, #124]	; (5b54 <menu()+0x1d3c>)
    5ad8:	f7fc fcac 	bl	2434 <Print::println(char const*) [clone .isra.0]>
    5adc:	f7fe bebf 	b.w	485e <menu()+0xa46>
    5ae0:	4e1f      	ldr	r6, [pc, #124]	; (5b60 <menu()+0x1d48>)
    5ae2:	f7fe bb30 	b.w	4146 <menu()+0x32e>
    5ae6:	4e1e      	ldr	r6, [pc, #120]	; (5b60 <menu()+0x1d48>)
    5ae8:	f7ff b8d5 	b.w	4c96 <menu()+0xe7e>
  if (menuload == 3) {
    5aec:	2b03      	cmp	r3, #3
    5aee:	f43f adfa 	beq.w	56e6 <menu()+0x18ce>
  if (menuload == 1) {
    5af2:	2b01      	cmp	r3, #1
    5af4:	f47e a9ed 	bne.w	3ed2 <menu()+0xba>
    5af8:	4e19      	ldr	r6, [pc, #100]	; (5b60 <menu()+0x1d48>)
    5afa:	f7fe be4c 	b.w	4796 <menu()+0x97e>
    5afe:	4e18      	ldr	r6, [pc, #96]	; (5b60 <menu()+0x1d48>)
    5b00:	f7ff b81f 	b.w	4b42 <menu()+0xd2a>
        virtual int available() { return usb_serial_available(); }
    5b04:	f006 fa8a 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5b08:	2800      	cmp	r0, #0
    5b0a:	f77e af70 	ble.w	49ee <menu()+0xbd6>
          settings.Pretime = Serial.parseInt();
    5b0e:	4811      	ldr	r0, [pc, #68]	; (5b54 <menu()+0x1d3c>)
    5b10:	4e13      	ldr	r6, [pc, #76]	; (5b60 <menu()+0x1d48>)
    5b12:	f003 fecd 	bl	98b0 <Stream::parseInt()>
          menuload = 1;
    5b16:	2301      	movs	r3, #1
    5b18:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    5b1a:	236b      	movs	r3, #107	; 0x6b
          settings.Pretime = Serial.parseInt();
    5b1c:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
          incomingByte = 'k';
    5b20:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5b22:	f7ff b80e 	b.w	4b42 <menu()+0xd2a>
    5b26:	f006 fa79 	bl	c01c <usb_serial_available>
        if (Serial.available() > 0) {
    5b2a:	2800      	cmp	r0, #0
    5b2c:	f77e ab71 	ble.w	4212 <menu()+0x3fa>
          settings.WarnOff = Serial.parseInt();
    5b30:	4808      	ldr	r0, [pc, #32]	; (5b54 <menu()+0x1d3c>)
          settings.WarnOff = settings.WarnOff * 0.001;
    5b32:	4e0b      	ldr	r6, [pc, #44]	; (5b60 <menu()+0x1d48>)
          settings.WarnOff = Serial.parseInt();
    5b34:	f003 febc 	bl	98b0 <Stream::parseInt()>
    5b38:	f007 f92e 	bl	cd98 <__aeabi_i2f>
          settings.WarnOff = settings.WarnOff * 0.001;
    5b3c:	4909      	ldr	r1, [pc, #36]	; (5b64 <menu()+0x1d4c>)
    5b3e:	f007 f97f 	bl	ce40 <__aeabi_fmul>
          menuload = 1;
    5b42:	2301      	movs	r3, #1
    5b44:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    5b46:	2361      	movs	r3, #97	; 0x61
          settings.WarnOff = settings.WarnOff * 0.001;
    5b48:	6270      	str	r0, [r6, #36]	; 0x24
          incomingByte = 'a';
    5b4a:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5b4c:	f7fe bc2c 	b.w	43a8 <menu()+0x590>
    5b50:	00014a1c 	.word	0x00014a1c
    5b54:	1fff89fc 	.word	0x1fff89fc
    5b58:	00014a34 	.word	0x00014a34
    5b5c:	00014a4c 	.word	0x00014a4c
    5b60:	1fffd0d8 	.word	0x1fffd0d8
    5b64:	3a83126f 	.word	0x3a83126f

00005b68 <CAB300()>:
void CAB300() {
    5b68:	b538      	push	{r3, r4, r5, lr}
    5b6a:	4c18      	ldr	r4, [pc, #96]	; (5bcc <CAB300()+0x64>)
    5b6c:	4b18      	ldr	r3, [pc, #96]	; (5bd0 <CAB300()+0x68>)
    5b6e:	6822      	ldr	r2, [r4, #0]
    5b70:	1d18      	adds	r0, r3, #4
    inbox = (inbox << 8) | inMsg.buf[i];
    5b72:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for (int i = 0; i < 4; i++) {
    5b76:	4298      	cmp	r0, r3
    inbox = (inbox << 8) | inMsg.buf[i];
    5b78:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  for (int i = 0; i < 4; i++) {
    5b7c:	d1f9      	bne.n	5b72 <CAB300()+0xa>
  if (settings.cursens == Canbus) {
    5b7e:	4b15      	ldr	r3, [pc, #84]	; (5bd4 <CAB300()+0x6c>)
    5b80:	4d15      	ldr	r5, [pc, #84]	; (5bd8 <CAB300()+0x70>)
    5b82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    5b86:	6022      	str	r2, [r4, #0]
    CANmilliamps = (0x80000000 - CANmilliamps) * -1;
    5b88:	f102 4000 	add.w	r0, r2, #2147483648	; 0x80000000
  if (settings.cursens == Canbus) {
    5b8c:	2b02      	cmp	r3, #2
    5b8e:	6028      	str	r0, [r5, #0]
    5b90:	d004      	beq.n	5b9c <CAB300()+0x34>
  if (candebug == 1) {
    5b92:	4b12      	ldr	r3, [pc, #72]	; (5bdc <CAB300()+0x74>)
    5b94:	681b      	ldr	r3, [r3, #0]
    5b96:	2b01      	cmp	r3, #1
    5b98:	d00a      	beq.n	5bb0 <CAB300()+0x48>
}
    5b9a:	bd38      	pop	{r3, r4, r5, pc}
    RawCur = CANmilliamps;
    5b9c:	f007 f8fc 	bl	cd98 <__aeabi_i2f>
    5ba0:	4c0f      	ldr	r4, [pc, #60]	; (5be0 <CAB300()+0x78>)
    5ba2:	6020      	str	r0, [r4, #0]
    getcurrent();
    5ba4:	f7fd f87a 	bl	2c9c <getcurrent()>
  if (candebug == 1) {
    5ba8:	4b0c      	ldr	r3, [pc, #48]	; (5bdc <CAB300()+0x74>)
    5baa:	681b      	ldr	r3, [r3, #0]
    5bac:	2b01      	cmp	r3, #1
    5bae:	d1f4      	bne.n	5b9a <CAB300()+0x32>
    Serial.println();
    5bb0:	480c      	ldr	r0, [pc, #48]	; (5be4 <CAB300()+0x7c>)
    5bb2:	f003 fd1f 	bl	95f4 <Print::println()>
    Serial.print(CANmilliamps);
    5bb6:	6829      	ldr	r1, [r5, #0]
    5bb8:	480a      	ldr	r0, [pc, #40]	; (5be4 <CAB300()+0x7c>)
    5bba:	f003 fd13 	bl	95e4 <Print::print(long)>
}
    5bbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5bc2:	4809      	ldr	r0, [pc, #36]	; (5be8 <CAB300()+0x80>)
    5bc4:	2103      	movs	r1, #3
    5bc6:	f006 ba5b 	b.w	c080 <usb_serial_write>
    5bca:	bf00      	nop
    5bcc:	1fffcff0 	.word	0x1fffcff0
    5bd0:	1fffcfe7 	.word	0x1fffcfe7
    5bd4:	1fffd0d8 	.word	0x1fffd0d8
    5bd8:	1fff91a0 	.word	0x1fff91a0
    5bdc:	1fffcf38 	.word	0x1fffcf38
    5be0:	1fff91c0 	.word	0x1fff91c0
    5be4:	1fff89fc 	.word	0x1fff89fc
    5be8:	00014e38 	.word	0x00014e38

00005bec <CAB500()>:
void CAB500() {
    5bec:	b570      	push	{r4, r5, r6, lr}
    inbox = (inbox << 8) | inMsg.buf[i];
    5bee:	4b1e      	ldr	r3, [pc, #120]	; (5c68 <CAB500()+0x7c>)
  if (candebug == 1) {
    5bf0:	4c1e      	ldr	r4, [pc, #120]	; (5c6c <CAB500()+0x80>)
    inbox = (inbox << 8) | inMsg.buf[i];
    5bf2:	7a59      	ldrb	r1, [r3, #9]
    5bf4:	7a9a      	ldrb	r2, [r3, #10]
    5bf6:	7adb      	ldrb	r3, [r3, #11]
  CANmilliamps = inbox;
    5bf8:	4d1d      	ldr	r5, [pc, #116]	; (5c70 <CAB500()+0x84>)
    inbox = (inbox << 8) | inMsg.buf[i];
    5bfa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5bfe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (candebug == 1) {
    5c02:	6822      	ldr	r2, [r4, #0]
    5c04:	491b      	ldr	r1, [pc, #108]	; (5c74 <CAB500()+0x88>)
  CANmilliamps = inbox;
    5c06:	602b      	str	r3, [r5, #0]
  if (candebug == 1) {
    5c08:	2a01      	cmp	r2, #1
    5c0a:	600b      	str	r3, [r1, #0]
    5c0c:	d00c      	beq.n	5c28 <CAB500()+0x3c>
    5c0e:	4618      	mov	r0, r3
  if (settings.cursens == Canbus) {
    5c10:	4b19      	ldr	r3, [pc, #100]	; (5c78 <CAB500()+0x8c>)
    5c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    CANmilliamps = (0x800000 - CANmilliamps) * -1;
    5c16:	f5a0 0000 	sub.w	r0, r0, #8388608	; 0x800000
  if (settings.cursens == Canbus) {
    5c1a:	2b02      	cmp	r3, #2
    5c1c:	6028      	str	r0, [r5, #0]
    5c1e:	d01b      	beq.n	5c58 <CAB500()+0x6c>
  if (candebug == 1) {
    5c20:	6823      	ldr	r3, [r4, #0]
    5c22:	2b01      	cmp	r3, #1
    5c24:	d00b      	beq.n	5c3e <CAB500()+0x52>
}
    5c26:	bd70      	pop	{r4, r5, r6, pc}
    Serial.println();
    5c28:	4814      	ldr	r0, [pc, #80]	; (5c7c <CAB500()+0x90>)
    5c2a:	f003 fce3 	bl	95f4 <Print::println()>
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    5c2e:	6829      	ldr	r1, [r5, #0]
    5c30:	4812      	ldr	r0, [pc, #72]	; (5c7c <CAB500()+0x90>)
    5c32:	2300      	movs	r3, #0
    5c34:	2210      	movs	r2, #16
    5c36:	f003 fcf5 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  if (CANmilliamps > 0x800000) {
    5c3a:	6828      	ldr	r0, [r5, #0]
    5c3c:	e7e8      	b.n	5c10 <CAB500()+0x24>
    Serial.println();
    5c3e:	480f      	ldr	r0, [pc, #60]	; (5c7c <CAB500()+0x90>)
    5c40:	f003 fcd8 	bl	95f4 <Print::println()>
    Serial.print(CANmilliamps);
    5c44:	6829      	ldr	r1, [r5, #0]
    5c46:	480d      	ldr	r0, [pc, #52]	; (5c7c <CAB500()+0x90>)
    5c48:	f003 fccc 	bl	95e4 <Print::print(long)>
}
    5c4c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5c50:	480b      	ldr	r0, [pc, #44]	; (5c80 <CAB500()+0x94>)
    5c52:	2103      	movs	r1, #3
    5c54:	f006 ba14 	b.w	c080 <usb_serial_write>
    RawCur = CANmilliamps;
    5c58:	f007 f89e 	bl	cd98 <__aeabi_i2f>
    5c5c:	4e09      	ldr	r6, [pc, #36]	; (5c84 <CAB500()+0x98>)
    5c5e:	6030      	str	r0, [r6, #0]
    getcurrent();
    5c60:	f7fd f81c 	bl	2c9c <getcurrent()>
    5c64:	e7dc      	b.n	5c20 <CAB500()+0x34>
    5c66:	bf00      	nop
    5c68:	1fffcfe0 	.word	0x1fffcfe0
    5c6c:	1fffcf38 	.word	0x1fffcf38
    5c70:	1fff91a0 	.word	0x1fff91a0
    5c74:	1fffcff0 	.word	0x1fffcff0
    5c78:	1fffd0d8 	.word	0x1fffd0d8
    5c7c:	1fff89fc 	.word	0x1fff89fc
    5c80:	00014e38 	.word	0x00014e38
    5c84:	1fff91c0 	.word	0x1fff91c0

00005c88 <handleVictronLynx()>:
void handleVictronLynx() {
    5c88:	b538      	push	{r3, r4, r5, lr}
  if (inMsg.buf[4] == 0xff && inMsg.buf[3] == 0xff) return;
    5c8a:	4b17      	ldr	r3, [pc, #92]	; (5ce8 <handleVictronLynx()+0x60>)
    5c8c:	7b1a      	ldrb	r2, [r3, #12]
    5c8e:	7adb      	ldrb	r3, [r3, #11]
    5c90:	ea02 0103 	and.w	r1, r2, r3
    5c94:	29ff      	cmp	r1, #255	; 0xff
    5c96:	d012      	beq.n	5cbe <handleVictronLynx()+0x36>
  current |= inMsg.buf[3];
    5c98:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
  if (settings.cursens == Canbus) {
    5c9c:	4b13      	ldr	r3, [pc, #76]	; (5cec <handleVictronLynx()+0x64>)
  CANmilliamps = current * 100;
    5c9e:	4c14      	ldr	r4, [pc, #80]	; (5cf0 <handleVictronLynx()+0x68>)
  if (settings.cursens == Canbus) {
    5ca0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  CANmilliamps = current * 100;
    5ca4:	b200      	sxth	r0, r0
    5ca6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5caa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5cae:	0080      	lsls	r0, r0, #2
  if (settings.cursens == Canbus) {
    5cb0:	2b02      	cmp	r3, #2
  CANmilliamps = current * 100;
    5cb2:	6020      	str	r0, [r4, #0]
  if (settings.cursens == Canbus) {
    5cb4:	d011      	beq.n	5cda <handleVictronLynx()+0x52>
  if (candebug == 1) {
    5cb6:	4b0f      	ldr	r3, [pc, #60]	; (5cf4 <handleVictronLynx()+0x6c>)
    5cb8:	681b      	ldr	r3, [r3, #0]
    5cba:	2b01      	cmp	r3, #1
    5cbc:	d000      	beq.n	5cc0 <handleVictronLynx()+0x38>
}
    5cbe:	bd38      	pop	{r3, r4, r5, pc}
    Serial.println();
    5cc0:	480d      	ldr	r0, [pc, #52]	; (5cf8 <handleVictronLynx()+0x70>)
    5cc2:	f003 fc97 	bl	95f4 <Print::println()>
    Serial.print(CANmilliamps);
    5cc6:	6821      	ldr	r1, [r4, #0]
    5cc8:	480b      	ldr	r0, [pc, #44]	; (5cf8 <handleVictronLynx()+0x70>)
    5cca:	f003 fc8b 	bl	95e4 <Print::print(long)>
}
    5cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5cd2:	480a      	ldr	r0, [pc, #40]	; (5cfc <handleVictronLynx()+0x74>)
    5cd4:	2103      	movs	r1, #3
    5cd6:	f006 b9d3 	b.w	c080 <usb_serial_write>
    RawCur = CANmilliamps;
    5cda:	f007 f85d 	bl	cd98 <__aeabi_i2f>
    5cde:	4d08      	ldr	r5, [pc, #32]	; (5d00 <handleVictronLynx()+0x78>)
    5ce0:	6028      	str	r0, [r5, #0]
    getcurrent();
    5ce2:	f7fc ffdb 	bl	2c9c <getcurrent()>
    5ce6:	e7e6      	b.n	5cb6 <handleVictronLynx()+0x2e>
    5ce8:	1fffcfe0 	.word	0x1fffcfe0
    5cec:	1fffd0d8 	.word	0x1fffd0d8
    5cf0:	1fff91a0 	.word	0x1fff91a0
    5cf4:	1fffcf38 	.word	0x1fffcf38
    5cf8:	1fff89fc 	.word	0x1fff89fc
    5cfc:	00014e38 	.word	0x00014e38
    5d00:	1fff91c0 	.word	0x1fff91c0

00005d04 <canread()>:
void canread() {
    5d04:	b5f0      	push	{r4, r5, r6, r7, lr}
  Can0.read(inMsg);
    5d06:	4c85      	ldr	r4, [pc, #532]	; (5f1c <canread()+0x218>)
  if (settings.cursens == Canbus) {
    5d08:	4d85      	ldr	r5, [pc, #532]	; (5f20 <canread()+0x21c>)
  Can0.read(inMsg);
    5d0a:	4886      	ldr	r0, [pc, #536]	; (5f24 <canread()+0x220>)
void canread() {
    5d0c:	b083      	sub	sp, #12
  Can0.read(inMsg);
    5d0e:	4621      	mov	r1, r4
    5d10:	f002 fae4 	bl	82dc <FlexCAN::read(CAN_message_t&)>
  if (settings.cursens == Canbus) {
    5d14:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    5d18:	2b02      	cmp	r3, #2
    5d1a:	d033      	beq.n	5d84 <canread()+0x80>
  if (inMsg.id < 0x300)  //do VW BMS magic if ids are ones identified to be modules
    5d1c:	6823      	ldr	r3, [r4, #0]
    if (candebug == 1) {
    5d1e:	4d82      	ldr	r5, [pc, #520]	; (5f28 <canread()+0x224>)
  if (inMsg.id < 0x300)  //do VW BMS magic if ids are ones identified to be modules
    5d20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    5d24:	d208      	bcs.n	5d38 <canread()+0x34>
    if (candebug == 1) {
    5d26:	682a      	ldr	r2, [r5, #0]
      bms.decodecan(inMsg, 1);  //do VW BMS if ids are ones identified to be modules
    5d28:	497c      	ldr	r1, [pc, #496]	; (5f1c <canread()+0x218>)
    5d2a:	4880      	ldr	r0, [pc, #512]	; (5f2c <canread()+0x228>)
    if (candebug == 1) {
    5d2c:	2a01      	cmp	r2, #1
      bms.decodecan(inMsg, 0);  //do VW BMS if ids are ones identified to be modules
    5d2e:	bf18      	it	ne
    5d30:	2200      	movne	r2, #0
    5d32:	f7fb fbd7 	bl	14e4 <BMSModuleManager::decodecan(CAN_message_t&, int)>
  if ((inMsg.id & 0x1FFFFFFF) < 0x1A555440 && (inMsg.id & 0x1FFFFFFF) > 0x1A555400)  // Determine if ID is Temperature CAN-ID
    5d36:	6823      	ldr	r3, [r4, #0]
    5d38:	4a7d      	ldr	r2, [pc, #500]	; (5f30 <canread()+0x22c>)
    5d3a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    5d3e:	441a      	add	r2, r3
    5d40:	2a3e      	cmp	r2, #62	; 0x3e
    5d42:	d80c      	bhi.n	5d5e <canread()+0x5a>
    if (candebug == 1) {
    5d44:	682b      	ldr	r3, [r5, #0]
    5d46:	2b01      	cmp	r3, #1
    5d48:	f000 808f 	beq.w	5e6a <canread()+0x166>
      bms.decodetemp(inMsg, 0, 1);
    5d4c:	2301      	movs	r3, #1
    5d4e:	4973      	ldr	r1, [pc, #460]	; (5f1c <canread()+0x218>)
    5d50:	4876      	ldr	r0, [pc, #472]	; (5f2c <canread()+0x228>)
    5d52:	2200      	movs	r2, #0
    5d54:	f7fb fb54 	bl	1400 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>
  if ((inMsg.id & 0x1FFFFFFF) < 0x1A5555FF && (inMsg.id & 0x1FFFFFFF) > 0x1A5555EF)  // Determine if ID is Temperature CAN-ID FOR MEB
    5d58:	6823      	ldr	r3, [r4, #0]
    5d5a:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    5d5e:	4a75      	ldr	r2, [pc, #468]	; (5f34 <canread()+0x230>)
    5d60:	441a      	add	r2, r3
    5d62:	2a0e      	cmp	r2, #14
    5d64:	d809      	bhi.n	5d7a <canread()+0x76>
    if (candebug == 1) {
    5d66:	682a      	ldr	r2, [r5, #0]
      bms.decodetemp(inMsg, 1, 2);
    5d68:	496c      	ldr	r1, [pc, #432]	; (5f1c <canread()+0x218>)
    5d6a:	4870      	ldr	r0, [pc, #448]	; (5f2c <canread()+0x228>)
    if (candebug == 1) {
    5d6c:	2a01      	cmp	r2, #1
      bms.decodetemp(inMsg, 1, 2);
    5d6e:	f04f 0302 	mov.w	r3, #2
      bms.decodetemp(inMsg, 0, 2);
    5d72:	bf18      	it	ne
    5d74:	2200      	movne	r2, #0
    5d76:	f7fb fb43 	bl	1400 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>
  if (candebug == 1) {
    5d7a:	682b      	ldr	r3, [r5, #0]
    5d7c:	2b01      	cmp	r3, #1
    5d7e:	d038      	beq.n	5df2 <canread()+0xee>
}
    5d80:	b003      	add	sp, #12
    5d82:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (settings.curcan == 1) {
    5d84:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    5d88:	6823      	ldr	r3, [r4, #0]
    if (settings.curcan == 1) {
    5d8a:	2a01      	cmp	r2, #1
    5d8c:	f000 8095 	beq.w	5eba <canread()+0x1b6>
    if (settings.curcan == 2) {
    5d90:	2a02      	cmp	r2, #2
    5d92:	d073      	beq.n	5e7c <canread()+0x178>
    if (settings.curcan == 3) {
    5d94:	2a03      	cmp	r2, #3
    5d96:	d121      	bne.n	5ddc <canread()+0xd8>
      switch (inMsg.id) {
    5d98:	f240 5222 	movw	r2, #1314	; 0x522
    5d9c:	4293      	cmp	r3, r2
    5d9e:	f000 80b3 	beq.w	5f08 <canread()+0x204>
    5da2:	f240 5223 	movw	r2, #1315	; 0x523
    5da6:	4293      	cmp	r3, r2
    5da8:	f000 80a5 	beq.w	5ef6 <canread()+0x1f2>
    5dac:	f240 5221 	movw	r2, #1313	; 0x521
    5db0:	4293      	cmp	r3, r2
    5db2:	d1b4      	bne.n	5d1e <canread()+0x1a>
          CANmilliamps = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    5db4:	89a2      	ldrh	r2, [r4, #12]
    5db6:	8960      	ldrh	r0, [r4, #10]
    5db8:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    5dbc:	4a5e      	ldr	r2, [pc, #376]	; (5f38 <canread()+0x234>)
    5dbe:	ba00      	rev	r0, r0
    5dc0:	6010      	str	r0, [r2, #0]
          if (settings.cursens == Canbus) {
    5dc2:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    5dc6:	2a02      	cmp	r2, #2
    5dc8:	d111      	bne.n	5dee <canread()+0xea>
            RawCur = CANmilliamps;
    5dca:	f006 ffe5 	bl	cd98 <__aeabi_i2f>
    5dce:	4e5b      	ldr	r6, [pc, #364]	; (5f3c <canread()+0x238>)
    5dd0:	6030      	str	r0, [r6, #0]
            getcurrent();
    5dd2:	f7fc ff63 	bl	2c9c <getcurrent()>
    if (settings.curcan == 4) {
    5dd6:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    5dda:	6823      	ldr	r3, [r4, #0]
    if (settings.curcan == 4) {
    5ddc:	2a04      	cmp	r2, #4
    5dde:	d19e      	bne.n	5d1e <canread()+0x1a>
  if ((canId & 0x10000000) == 0x10000000) {
    5de0:	00d9      	lsls	r1, r3, #3
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    5de2:	4a57      	ldr	r2, [pc, #348]	; (5f40 <canread()+0x23c>)
  if ((canId & 0x10000000) == 0x10000000) {
    5de4:	d578      	bpl.n	5ed8 <canread()+0x1d4>
    return (canId & 0x03FFFF00) >> 8;
    5de6:	f3c3 2111 	ubfx	r1, r3, #8, #18
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    5dea:	4291      	cmp	r1, r2
    5dec:	d077      	beq.n	5ede <canread()+0x1da>
    5dee:	4d4e      	ldr	r5, [pc, #312]	; (5f28 <canread()+0x224>)
    5df0:	e7a2      	b.n	5d38 <canread()+0x34>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5df2:	4b54      	ldr	r3, [pc, #336]	; (5f44 <canread()+0x240>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    5df4:	4854      	ldr	r0, [pc, #336]	; (5f48 <canread()+0x244>)
    5df6:	681b      	ldr	r3, [r3, #0]
    5df8:	9301      	str	r3, [sp, #4]
	return ret;
    5dfa:	9901      	ldr	r1, [sp, #4]
    5dfc:	2300      	movs	r3, #0
    5dfe:	220a      	movs	r2, #10
    5e00:	f003 fc10 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    5e04:	6822      	ldr	r2, [r4, #0]
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    5e06:	79e3      	ldrb	r3, [r4, #7]
      sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    5e08:	4850      	ldr	r0, [pc, #320]	; (5f4c <canread()+0x248>)
    if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    5e0a:	2a00      	cmp	r2, #0
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    5e0c:	bfb6      	itet	lt
    5e0e:	4950      	ldrlt	r1, [pc, #320]	; (5f50 <canread()+0x24c>)
      sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    5e10:	4950      	ldrge	r1, [pc, #320]	; (5f54 <canread()+0x250>)
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    5e12:	f022 4260 	biclt.w	r2, r2, #3758096384	; 0xe0000000
      sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    5e16:	f007 ffb3 	bl	dd80 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    5e1a:	484c      	ldr	r0, [pc, #304]	; (5f4c <canread()+0x248>)
    5e1c:	f008 f9d0 	bl	e1c0 <strlen>
    5e20:	4601      	mov	r1, r0
    5e22:	484a      	ldr	r0, [pc, #296]	; (5f4c <canread()+0x248>)
    5e24:	f006 f92c 	bl	c080 <usb_serial_write>
    if ((inMsg.id & 0x40000000) == 0x40000000) {  // Determine if message is a remote request frame.
    5e28:	6825      	ldr	r5, [r4, #0]
    5e2a:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    5e2e:	d131      	bne.n	5e94 <canread()+0x190>
      for (byte i = 0; i < inMsg.len; i++) {
    5e30:	79e3      	ldrb	r3, [r4, #7]
    5e32:	b1a3      	cbz	r3, 5e5e <canread()+0x15a>
        sprintf(msgString, ", 0x%.2X", inMsg.buf[i]);
    5e34:	4f48      	ldr	r7, [pc, #288]	; (5f58 <canread()+0x254>)
    5e36:	4e45      	ldr	r6, [pc, #276]	; (5f4c <canread()+0x248>)
    5e38:	462b      	mov	r3, r5
    5e3a:	4423      	add	r3, r4
    5e3c:	4639      	mov	r1, r7
    5e3e:	7a1a      	ldrb	r2, [r3, #8]
    5e40:	4630      	mov	r0, r6
    5e42:	f007 ff9d 	bl	dd80 <sprintf>
    5e46:	4630      	mov	r0, r6
    5e48:	f008 f9ba 	bl	e1c0 <strlen>
    5e4c:	4601      	mov	r1, r0
    5e4e:	4630      	mov	r0, r6
    5e50:	f006 f916 	bl	c080 <usb_serial_write>
      for (byte i = 0; i < inMsg.len; i++) {
    5e54:	3501      	adds	r5, #1
    5e56:	79e2      	ldrb	r2, [r4, #7]
    5e58:	b2eb      	uxtb	r3, r5
    5e5a:	429a      	cmp	r2, r3
    5e5c:	d8ed      	bhi.n	5e3a <canread()+0x136>
    Serial.println();
    5e5e:	483a      	ldr	r0, [pc, #232]	; (5f48 <canread()+0x244>)
}
    5e60:	b003      	add	sp, #12
    5e62:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Serial.println();
    5e66:	f003 bbc5 	b.w	95f4 <Print::println()>
      bms.decodetemp(inMsg, 1, 1);
    5e6a:	461a      	mov	r2, r3
    5e6c:	492b      	ldr	r1, [pc, #172]	; (5f1c <canread()+0x218>)
    5e6e:	482f      	ldr	r0, [pc, #188]	; (5f2c <canread()+0x228>)
    5e70:	f7fb fac6 	bl	1400 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>
  if ((inMsg.id & 0x1FFFFFFF) < 0x1A5555FF && (inMsg.id & 0x1FFFFFFF) > 0x1A5555EF)  // Determine if ID is Temperature CAN-ID FOR MEB
    5e74:	6823      	ldr	r3, [r4, #0]
    5e76:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    5e7a:	e770      	b.n	5d5e <canread()+0x5a>
      switch (inMsg.id) {
    5e7c:	f46f 7070 	mvn.w	r0, #960	; 0x3c0
    5e80:	181a      	adds	r2, r3, r0
    5e82:	2a01      	cmp	r2, #1
    5e84:	f63f af4b 	bhi.w	5d1e <canread()+0x1a>
          CAB500();
    5e88:	f7ff feb0 	bl	5bec <CAB500()>
    if (settings.curcan == 3) {
    5e8c:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    5e90:	6823      	ldr	r3, [r4, #0]
          break;
    5e92:	e77f      	b.n	5d94 <canread()+0x90>
      sprintf(msgString, " REMOTE REQUEST FRAME");
    5e94:	4d31      	ldr	r5, [pc, #196]	; (5f5c <canread()+0x258>)
    5e96:	4c2d      	ldr	r4, [pc, #180]	; (5f4c <canread()+0x248>)
    5e98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5e9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5e9c:	e895 0003 	ldmia.w	r5, {r0, r1}
    5ea0:	f844 0b04 	str.w	r0, [r4], #4
    5ea4:	4620      	mov	r0, r4
    5ea6:	f820 1914 	strh.w	r1, [r0], #-20
    5eaa:	f008 f989 	bl	e1c0 <strlen>
    5eae:	4601      	mov	r1, r0
    5eb0:	f1a4 0014 	sub.w	r0, r4, #20
    5eb4:	f006 f8e4 	bl	c080 <usb_serial_write>
    5eb8:	e7d1      	b.n	5e5e <canread()+0x15a>
      switch (inMsg.id) {
    5eba:	f240 32c1 	movw	r2, #961	; 0x3c1
    5ebe:	4293      	cmp	r3, r2
    5ec0:	d013      	beq.n	5eea <canread()+0x1e6>
    5ec2:	f240 32c2 	movw	r2, #962	; 0x3c2
    5ec6:	4293      	cmp	r3, r2
    5ec8:	f47f af29 	bne.w	5d1e <canread()+0x1a>
          CAB300();
    5ecc:	f7ff fe4c 	bl	5b68 <CAB300()>
    if (settings.curcan == 2) {
    5ed0:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    5ed4:	6823      	ldr	r3, [r4, #0]
          break;
    5ed6:	e75b      	b.n	5d90 <canread()+0x8c>
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    5ed8:	4293      	cmp	r3, r2
    5eda:	f47f af20 	bne.w	5d1e <canread()+0x1a>
    5ede:	7a22      	ldrb	r2, [r4, #8]
    5ee0:	2a00      	cmp	r2, #0
    5ee2:	d184      	bne.n	5dee <canread()+0xea>
        handleVictronLynx();
    5ee4:	f7ff fed0 	bl	5c88 <handleVictronLynx()>
    5ee8:	e718      	b.n	5d1c <canread()+0x18>
          CAB500();
    5eea:	f7ff fe7f 	bl	5bec <CAB500()>
    if (settings.curcan == 2) {
    5eee:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    5ef2:	6823      	ldr	r3, [r4, #0]
          break;
    5ef4:	e74c      	b.n	5d90 <canread()+0x8c>
          voltage2 = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    5ef6:	8962      	ldrh	r2, [r4, #10]
    5ef8:	89a0      	ldrh	r0, [r4, #12]
    5efa:	4919      	ldr	r1, [pc, #100]	; (5f60 <canread()+0x25c>)
    5efc:	4d0a      	ldr	r5, [pc, #40]	; (5f28 <canread()+0x224>)
    5efe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    5f02:	ba12      	rev	r2, r2
    5f04:	600a      	str	r2, [r1, #0]
          break;
    5f06:	e717      	b.n	5d38 <canread()+0x34>
          voltage1 = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    5f08:	8962      	ldrh	r2, [r4, #10]
    5f0a:	89a0      	ldrh	r0, [r4, #12]
    5f0c:	4915      	ldr	r1, [pc, #84]	; (5f64 <canread()+0x260>)
    5f0e:	4d06      	ldr	r5, [pc, #24]	; (5f28 <canread()+0x224>)
    5f10:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    5f14:	ba12      	rev	r2, r2
    5f16:	600a      	str	r2, [r1, #0]
          break;
    5f18:	e70e      	b.n	5d38 <canread()+0x34>
    5f1a:	bf00      	nop
    5f1c:	1fffcfe0 	.word	0x1fffcfe0
    5f20:	1fffd0d8 	.word	0x1fffd0d8
    5f24:	1fffd1cc 	.word	0x1fffd1cc
    5f28:	1fffcf38 	.word	0x1fffcf38
    5f2c:	1fff91f0 	.word	0x1fff91f0
    5f30:	e5aaabff 	.word	0xe5aaabff
    5f34:	e5aaaa10 	.word	0xe5aaaa10
    5f38:	1fff91a0 	.word	0x1fff91a0
    5f3c:	1fff91c0 	.word	0x1fff91c0
    5f40:	0001f214 	.word	0x0001f214
    5f44:	1fffd3c0 	.word	0x1fffd3c0
    5f48:	1fff89fc 	.word	0x1fff89fc
    5f4c:	1fffd044 	.word	0x1fffd044
    5f50:	00014e3c 	.word	0x00014e3c
    5f54:	00014e64 	.word	0x00014e64
    5f58:	00014e90 	.word	0x00014e90
    5f5c:	00014e78 	.word	0x00014e78
    5f60:	1fffd1c0 	.word	0x1fffd1c0
    5f64:	1fffd1bc 	.word	0x1fffd1bc

00005f68 <currentlimit()>:
void currentlimit() {
    5f68:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (bmsstatus == Error) {
    5f6c:	4b8f      	ldr	r3, [pc, #572]	; (61ac <currentlimit()+0x244>)
    5f6e:	781b      	ldrb	r3, [r3, #0]
    5f70:	2b05      	cmp	r3, #5
    5f72:	d106      	bne.n	5f82 <currentlimit()+0x1a>
    discurrent = 0;
    5f74:	498e      	ldr	r1, [pc, #568]	; (61b0 <currentlimit()+0x248>)
    chargecurrent = 0;
    5f76:	4a8f      	ldr	r2, [pc, #572]	; (61b4 <currentlimit()+0x24c>)
    discurrent = 0;
    5f78:	2300      	movs	r3, #0
    5f7a:	600b      	str	r3, [r1, #0]
    chargecurrent = 0;
    5f7c:	6013      	str	r3, [r2, #0]
}
    5f7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    discurrent = settings.discurrentmax;
    5f82:	4c8d      	ldr	r4, [pc, #564]	; (61b8 <currentlimit()+0x250>)
    5f84:	4e8a      	ldr	r6, [pc, #552]	; (61b0 <currentlimit()+0x248>)
    chargecurrent = settings.chargecurrentmax;
    5f86:	4d8b      	ldr	r5, [pc, #556]	; (61b4 <currentlimit()+0x24c>)
    discurrent = settings.discurrentmax;
    5f88:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    chargecurrent = settings.chargecurrentmax;
    5f8a:	6e23      	ldr	r3, [r4, #96]	; 0x60
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    5f8c:	488b      	ldr	r0, [pc, #556]	; (61bc <currentlimit()+0x254>)
    discurrent = settings.discurrentmax;
    5f8e:	6032      	str	r2, [r6, #0]
    chargecurrent = settings.chargecurrentmax;
    5f90:	602b      	str	r3, [r5, #0]
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    5f92:	f7fb fda3 	bl	1adc <BMSModuleManager::getLowTemperature()>
    5f96:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    5f98:	f007 f8f0 	bl	d17c <__aeabi_fcmplt>
    5f9c:	b110      	cbz	r0, 5fa4 <currentlimit()+0x3c>
      chargecurrent = settings.chargecurrentcold;
    5f9e:	f9b4 30d0 	ldrsh.w	r3, [r4, #208]	; 0xd0
    5fa2:	602b      	str	r3, [r5, #0]
    if (bms.getHighTemperature() > settings.OverTSetpoint) {
    5fa4:	4885      	ldr	r0, [pc, #532]	; (61bc <currentlimit()+0x254>)
    5fa6:	f7fb fd97 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    5faa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    5fac:	f007 f904 	bl	d1b8 <__aeabi_fcmpgt>
    5fb0:	b110      	cbz	r0, 5fb8 <currentlimit()+0x50>
      discurrent = 0;
    5fb2:	2300      	movs	r3, #0
    5fb4:	6033      	str	r3, [r6, #0]
      chargecurrent = 0;
    5fb6:	602b      	str	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    5fb8:	4880      	ldr	r0, [pc, #512]	; (61bc <currentlimit()+0x254>)
    5fba:	f7fb fcdd 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    5fbe:	68e1      	ldr	r1, [r4, #12]
    5fc0:	f007 f8fa 	bl	d1b8 <__aeabi_fcmpgt>
    5fc4:	b108      	cbz	r0, 5fca <currentlimit()+0x62>
      chargecurrent = 0;
    5fc6:	2300      	movs	r3, #0
    5fc8:	602b      	str	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    5fca:	487c      	ldr	r0, [pc, #496]	; (61bc <currentlimit()+0x254>)
    5fcc:	f7fb fcd4 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    5fd0:	68e1      	ldr	r1, [r4, #12]
    5fd2:	f007 f8f1 	bl	d1b8 <__aeabi_fcmpgt>
    5fd6:	b108      	cbz	r0, 5fdc <currentlimit()+0x74>
      chargecurrent = 0;
    5fd8:	2300      	movs	r3, #0
    5fda:	602b      	str	r3, [r5, #0]
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    5fdc:	4877      	ldr	r0, [pc, #476]	; (61bc <currentlimit()+0x254>)
    5fde:	f7fb fca5 	bl	192c <BMSModuleManager::getLowCellVolt()>
    5fe2:	6921      	ldr	r1, [r4, #16]
    5fe4:	f007 f8ca 	bl	d17c <__aeabi_fcmplt>
    5fe8:	b198      	cbz	r0, 6012 <currentlimit()+0xaa>
      discurrent = 0;
    5fea:	2300      	movs	r3, #0
    5fec:	6033      	str	r3, [r6, #0]
    if (chargecurrent > settings.chargecurrentcold) {
    5fee:	f9b4 20d0 	ldrsh.w	r2, [r4, #208]	; 0xd0
    5ff2:	682b      	ldr	r3, [r5, #0]
    5ff4:	429a      	cmp	r2, r3
    5ff6:	db62      	blt.n	60be <currentlimit()+0x156>
  if (discurrent < 0) {
    5ff8:	6833      	ldr	r3, [r6, #0]
    5ffa:	2b00      	cmp	r3, #0
  if (chargecurrent < 0) {
    5ffc:	bfb7      	itett	lt
    5ffe:	682b      	ldrlt	r3, [r5, #0]
    6000:	682b      	ldrge	r3, [r5, #0]
    discurrent = 0;
    6002:	2200      	movlt	r2, #0
    6004:	6032      	strlt	r2, [r6, #0]
  if (chargecurrent < 0) {
    6006:	2b00      	cmp	r3, #0
    chargecurrent = 0;
    6008:	bfbc      	itt	lt
    600a:	2300      	movlt	r3, #0
    600c:	602b      	strlt	r3, [r5, #0]
}
    600e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    6012:	486a      	ldr	r0, [pc, #424]	; (61bc <currentlimit()+0x254>)
    6014:	f7fb fc8a 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6018:	69a1      	ldr	r1, [r4, #24]
    601a:	f007 f8af 	bl	d17c <__aeabi_fcmplt>
    601e:	2800      	cmp	r0, #0
    6020:	d1e3      	bne.n	5fea <currentlimit()+0x82>
    if (discurrent > 0) {
    6022:	6833      	ldr	r3, [r6, #0]
    6024:	2b00      	cmp	r3, #0
    6026:	dde2      	ble.n	5fee <currentlimit()+0x86>
      if (bms.getHighTemperature() > settings.DisTSetpoint) {
    6028:	4864      	ldr	r0, [pc, #400]	; (61bc <currentlimit()+0x254>)
    602a:	f7fb fd55 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    602e:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6030:	f007 f8c2 	bl	d1b8 <__aeabi_fcmpgt>
    6034:	2800      	cmp	r0, #0
    6036:	f040 808e 	bne.w	6156 <currentlimit()+0x1ee>
      if (bms.getLowCellVolt() < (settings.DischVsetpoint + settings.DisTaper)) {
    603a:	4860      	ldr	r0, [pc, #384]	; (61bc <currentlimit()+0x254>)
    603c:	f7fb fc76 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6040:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    6044:	4607      	mov	r7, r0
    6046:	69a0      	ldr	r0, [r4, #24]
    6048:	f006 fdf2 	bl	cc30 <__addsf3>
    604c:	4601      	mov	r1, r0
    604e:	4638      	mov	r0, r7
    6050:	f007 f894 	bl	d17c <__aeabi_fcmplt>
    6054:	2800      	cmp	r0, #0
    6056:	d0ca      	beq.n	5fee <currentlimit()+0x86>
        discurrent = discurrent - map(bms.getLowCellVolt(), settings.DischVsetpoint, (settings.DischVsetpoint + settings.DisTaper), settings.discurrentmax, 0);
    6058:	6830      	ldr	r0, [r6, #0]
    605a:	f006 fe9d 	bl	cd98 <__aeabi_i2f>
    605e:	4680      	mov	r8, r0
    6060:	4856      	ldr	r0, [pc, #344]	; (61bc <currentlimit()+0x254>)
    6062:	f7fb fc63 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6066:	4681      	mov	r9, r0
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    6068:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    606a:	f8d4 a018 	ldr.w	sl, [r4, #24]
    606e:	f006 fe93 	bl	cd98 <__aeabi_i2f>
    6072:	4651      	mov	r1, sl
    6074:	4607      	mov	r7, r0
    6076:	4648      	mov	r0, r9
    6078:	f006 fdd8 	bl	cc2c <__aeabi_fsub>
    607c:	4639      	mov	r1, r7
    607e:	4681      	mov	r9, r0
    6080:	2000      	movs	r0, #0
    6082:	f006 fdd3 	bl	cc2c <__aeabi_fsub>
    6086:	4601      	mov	r1, r0
    6088:	4648      	mov	r0, r9
    608a:	f006 fed9 	bl	ce40 <__aeabi_fmul>
    608e:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    6092:	4681      	mov	r9, r0
    6094:	4650      	mov	r0, sl
    6096:	f006 fdcb 	bl	cc30 <__addsf3>
    609a:	4651      	mov	r1, sl
    609c:	f006 fdc6 	bl	cc2c <__aeabi_fsub>
    60a0:	4601      	mov	r1, r0
    60a2:	4648      	mov	r0, r9
    60a4:	f006 ff80 	bl	cfa8 <__aeabi_fdiv>
    60a8:	4639      	mov	r1, r7
    60aa:	f006 fdc1 	bl	cc30 <__addsf3>
    60ae:	4601      	mov	r1, r0
    60b0:	4640      	mov	r0, r8
    60b2:	f006 fdbb 	bl	cc2c <__aeabi_fsub>
    60b6:	f007 f889 	bl	d1cc <__aeabi_f2iz>
    60ba:	6030      	str	r0, [r6, #0]
    60bc:	e797      	b.n	5fee <currentlimit()+0x86>
      if (bms.getLowTemperature() < settings.ChargeTSetpoint) {
    60be:	483f      	ldr	r0, [pc, #252]	; (61bc <currentlimit()+0x254>)
    60c0:	f7fb fd0c 	bl	1adc <BMSModuleManager::getLowTemperature()>
    60c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
    60c6:	f007 f859 	bl	d17c <__aeabi_fcmplt>
    60ca:	2800      	cmp	r0, #0
    60cc:	f040 80be 	bne.w	624c <currentlimit()+0x2e4>
      if (storagemode == 1) {
    60d0:	4b3b      	ldr	r3, [pc, #236]	; (61c0 <currentlimit()+0x258>)
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    60d2:	483a      	ldr	r0, [pc, #232]	; (61bc <currentlimit()+0x254>)
      if (storagemode == 1) {
    60d4:	681b      	ldr	r3, [r3, #0]
    60d6:	2b01      	cmp	r3, #1
    60d8:	d074      	beq.n	61c4 <currentlimit()+0x25c>
        if (bms.getHighCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    60da:	f7fb fc4d 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    60de:	69e1      	ldr	r1, [r4, #28]
    60e0:	4607      	mov	r7, r0
    60e2:	6960      	ldr	r0, [r4, #20]
    60e4:	f006 fda2 	bl	cc2c <__aeabi_fsub>
    60e8:	4601      	mov	r1, r0
    60ea:	4638      	mov	r0, r7
    60ec:	f007 f864 	bl	d1b8 <__aeabi_fcmpgt>
    60f0:	2800      	cmp	r0, #0
    60f2:	d081      	beq.n	5ff8 <currentlimit()+0x90>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.ChargeVsetpoint - settings.ChargeHys), settings.ChargeVsetpoint, 0, (settings.chargecurrentmax - settings.chargecurrentend));
    60f4:	6828      	ldr	r0, [r5, #0]
    60f6:	f006 fe4f 	bl	cd98 <__aeabi_i2f>
    60fa:	4680      	mov	r8, r0
    60fc:	482f      	ldr	r0, [pc, #188]	; (61bc <currentlimit()+0x254>)
    60fe:	f7fb fc3b 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6102:	f8d4 9014 	ldr.w	r9, [r4, #20]
    6106:	69e1      	ldr	r1, [r4, #28]
    6108:	4682      	mov	sl, r0
    610a:	4648      	mov	r0, r9
    610c:	f006 fd8e 	bl	cc2c <__aeabi_fsub>
    6110:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6112:	4607      	mov	r7, r0
    6114:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6116:	1ac0      	subs	r0, r0, r3
    6118:	f006 fe3e 	bl	cd98 <__aeabi_i2f>
    611c:	4639      	mov	r1, r7
    611e:	4604      	mov	r4, r0
    6120:	4650      	mov	r0, sl
    6122:	f006 fd83 	bl	cc2c <__aeabi_fsub>
    6126:	4601      	mov	r1, r0
    6128:	4620      	mov	r0, r4
    612a:	f006 fe89 	bl	ce40 <__aeabi_fmul>
    612e:	4639      	mov	r1, r7
    6130:	4604      	mov	r4, r0
    6132:	4648      	mov	r0, r9
    6134:	f006 fd7a 	bl	cc2c <__aeabi_fsub>
    6138:	4601      	mov	r1, r0
    613a:	4620      	mov	r0, r4
    613c:	f006 ff34 	bl	cfa8 <__aeabi_fdiv>
    6140:	2100      	movs	r1, #0
    6142:	f006 fd75 	bl	cc30 <__addsf3>
    6146:	4601      	mov	r1, r0
    6148:	4640      	mov	r0, r8
    614a:	f006 fd6f 	bl	cc2c <__aeabi_fsub>
    614e:	f007 f83d 	bl	d1cc <__aeabi_f2iz>
    6152:	6028      	str	r0, [r5, #0]
    6154:	e750      	b.n	5ff8 <currentlimit()+0x90>
        discurrent = discurrent - map(bms.getHighTemperature(), settings.DisTSetpoint, settings.OverTSetpoint, 0, settings.discurrentmax);
    6156:	6830      	ldr	r0, [r6, #0]
    6158:	f006 fe1e 	bl	cd98 <__aeabi_i2f>
    615c:	4607      	mov	r7, r0
    615e:	4817      	ldr	r0, [pc, #92]	; (61bc <currentlimit()+0x254>)
    6160:	f7fb fcba 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    6164:	4681      	mov	r9, r0
    6166:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    6168:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
    616c:	f006 fe14 	bl	cd98 <__aeabi_i2f>
    6170:	4651      	mov	r1, sl
    6172:	4680      	mov	r8, r0
    6174:	4648      	mov	r0, r9
    6176:	f006 fd59 	bl	cc2c <__aeabi_fsub>
    617a:	4601      	mov	r1, r0
    617c:	4640      	mov	r0, r8
    617e:	f006 fe5f 	bl	ce40 <__aeabi_fmul>
    6182:	4651      	mov	r1, sl
    6184:	4680      	mov	r8, r0
    6186:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    6188:	f006 fd50 	bl	cc2c <__aeabi_fsub>
    618c:	4601      	mov	r1, r0
    618e:	4640      	mov	r0, r8
    6190:	f006 ff0a 	bl	cfa8 <__aeabi_fdiv>
    6194:	2100      	movs	r1, #0
    6196:	f006 fd4b 	bl	cc30 <__addsf3>
    619a:	4601      	mov	r1, r0
    619c:	4638      	mov	r0, r7
    619e:	f006 fd45 	bl	cc2c <__aeabi_fsub>
    61a2:	f007 f813 	bl	d1cc <__aeabi_f2iz>
    61a6:	6030      	str	r0, [r6, #0]
    61a8:	e747      	b.n	603a <currentlimit()+0xd2>
    61aa:	bf00      	nop
    61ac:	1fffcf34 	.word	0x1fffcf34
    61b0:	1fffcfcc 	.word	0x1fffcfcc
    61b4:	1fffcf40 	.word	0x1fffcf40
    61b8:	1fffd0d8 	.word	0x1fffd0d8
    61bc:	1fff91f0 	.word	0x1fff91f0
    61c0:	1fffd1b0 	.word	0x1fffd1b0
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    61c4:	f7fb fbd8 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    61c8:	69e1      	ldr	r1, [r4, #28]
    61ca:	4607      	mov	r7, r0
    61cc:	6a20      	ldr	r0, [r4, #32]
    61ce:	f006 fd2d 	bl	cc2c <__aeabi_fsub>
    61d2:	4601      	mov	r1, r0
    61d4:	4638      	mov	r0, r7
    61d6:	f006 ffef 	bl	d1b8 <__aeabi_fcmpgt>
    61da:	2800      	cmp	r0, #0
    61dc:	f43f af0c 	beq.w	5ff8 <currentlimit()+0x90>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.StoreVsetpoint - settings.ChargeHys), settings.StoreVsetpoint, settings.chargecurrentend, settings.chargecurrentmax);
    61e0:	6828      	ldr	r0, [r5, #0]
    61e2:	f006 fdd9 	bl	cd98 <__aeabi_i2f>
    61e6:	4681      	mov	r9, r0
    61e8:	4831      	ldr	r0, [pc, #196]	; (62b0 <currentlimit()+0x348>)
    61ea:	f7fb fbc5 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    61ee:	f8d4 a020 	ldr.w	sl, [r4, #32]
    61f2:	69e1      	ldr	r1, [r4, #28]
    61f4:	4683      	mov	fp, r0
    61f6:	4650      	mov	r0, sl
    61f8:	f006 fd18 	bl	cc2c <__aeabi_fsub>
    61fc:	4680      	mov	r8, r0
    61fe:	6e60      	ldr	r0, [r4, #100]	; 0x64
    6200:	f006 fdca 	bl	cd98 <__aeabi_i2f>
    6204:	4607      	mov	r7, r0
    6206:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6208:	f006 fdc6 	bl	cd98 <__aeabi_i2f>
    620c:	4639      	mov	r1, r7
    620e:	f006 fd0d 	bl	cc2c <__aeabi_fsub>
    6212:	4641      	mov	r1, r8
    6214:	4604      	mov	r4, r0
    6216:	4658      	mov	r0, fp
    6218:	f006 fd08 	bl	cc2c <__aeabi_fsub>
    621c:	4601      	mov	r1, r0
    621e:	4620      	mov	r0, r4
    6220:	f006 fe0e 	bl	ce40 <__aeabi_fmul>
    6224:	4641      	mov	r1, r8
    6226:	4604      	mov	r4, r0
    6228:	4650      	mov	r0, sl
    622a:	f006 fcff 	bl	cc2c <__aeabi_fsub>
    622e:	4601      	mov	r1, r0
    6230:	4620      	mov	r0, r4
    6232:	f006 feb9 	bl	cfa8 <__aeabi_fdiv>
    6236:	4639      	mov	r1, r7
    6238:	f006 fcfa 	bl	cc30 <__addsf3>
    623c:	4601      	mov	r1, r0
    623e:	4648      	mov	r0, r9
    6240:	f006 fcf4 	bl	cc2c <__aeabi_fsub>
    6244:	f006 ffc2 	bl	d1cc <__aeabi_f2iz>
    6248:	6028      	str	r0, [r5, #0]
    624a:	e6d5      	b.n	5ff8 <currentlimit()+0x90>
        chargecurrent = chargecurrent - map(bms.getLowTemperature(), settings.UnderTSetpoint, settings.ChargeTSetpoint, (settings.chargecurrentmax - settings.chargecurrentcold), 0);
    624c:	6828      	ldr	r0, [r5, #0]
    624e:	f006 fda3 	bl	cd98 <__aeabi_i2f>
    6252:	4680      	mov	r8, r0
    6254:	4816      	ldr	r0, [pc, #88]	; (62b0 <currentlimit()+0x348>)
    6256:	f7fb fc41 	bl	1adc <BMSModuleManager::getLowTemperature()>
    625a:	f9b4 30d0 	ldrsh.w	r3, [r4, #208]	; 0xd0
    625e:	4681      	mov	r9, r0
    6260:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6262:	1ac0      	subs	r0, r0, r3
    6264:	f006 fd98 	bl	cd98 <__aeabi_i2f>
    6268:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
    626c:	4607      	mov	r7, r0
    626e:	4651      	mov	r1, sl
    6270:	4648      	mov	r0, r9
    6272:	f006 fcdb 	bl	cc2c <__aeabi_fsub>
    6276:	4639      	mov	r1, r7
    6278:	4681      	mov	r9, r0
    627a:	2000      	movs	r0, #0
    627c:	f006 fcd6 	bl	cc2c <__aeabi_fsub>
    6280:	4601      	mov	r1, r0
    6282:	4648      	mov	r0, r9
    6284:	f006 fddc 	bl	ce40 <__aeabi_fmul>
    6288:	4651      	mov	r1, sl
    628a:	4681      	mov	r9, r0
    628c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    628e:	f006 fccd 	bl	cc2c <__aeabi_fsub>
    6292:	4601      	mov	r1, r0
    6294:	4648      	mov	r0, r9
    6296:	f006 fe87 	bl	cfa8 <__aeabi_fdiv>
    629a:	4639      	mov	r1, r7
    629c:	f006 fcc8 	bl	cc30 <__addsf3>
    62a0:	4601      	mov	r1, r0
    62a2:	4640      	mov	r0, r8
    62a4:	f006 fcc2 	bl	cc2c <__aeabi_fsub>
    62a8:	f006 ff90 	bl	d1cc <__aeabi_f2iz>
    62ac:	6028      	str	r0, [r5, #0]
    62ae:	e70f      	b.n	60d0 <currentlimit()+0x168>
    62b0:	1fff91f0 	.word	0x1fff91f0

000062b4 <inputdebug()>:
void inputdebug() {
    62b4:	b508      	push	{r3, lr}
  Serial.println();
    62b6:	4828      	ldr	r0, [pc, #160]	; (6358 <inputdebug()+0xa4>)
    62b8:	f003 f99c 	bl	95f4 <Print::println()>
    62bc:	4827      	ldr	r0, [pc, #156]	; (635c <inputdebug()+0xa8>)
    62be:	2107      	movs	r1, #7
    62c0:	f005 fede 	bl	c080 <usb_serial_write>
  if (digitalRead(IN1)) {
    62c4:	2011      	movs	r0, #17
    62c6:	f004 f88d 	bl	a3e4 <digitalRead>
    62ca:	b300      	cbz	r0, 630e <inputdebug()+0x5a>
    62cc:	4824      	ldr	r0, [pc, #144]	; (6360 <inputdebug()+0xac>)
    62ce:	2106      	movs	r1, #6
    62d0:	f005 fed6 	bl	c080 <usb_serial_write>
  if (digitalRead(IN3)) {
    62d4:	2012      	movs	r0, #18
    62d6:	f004 f885 	bl	a3e4 <digitalRead>
    62da:	b308      	cbz	r0, 6320 <inputdebug()+0x6c>
    62dc:	4821      	ldr	r0, [pc, #132]	; (6364 <inputdebug()+0xb0>)
    62de:	2106      	movs	r1, #6
    62e0:	f005 fece 	bl	c080 <usb_serial_write>
  if (digitalRead(IN3)) {
    62e4:	2012      	movs	r0, #18
    62e6:	f004 f87d 	bl	a3e4 <digitalRead>
    62ea:	b310      	cbz	r0, 6332 <inputdebug()+0x7e>
    62ec:	481e      	ldr	r0, [pc, #120]	; (6368 <inputdebug()+0xb4>)
    62ee:	2106      	movs	r1, #6
    62f0:	f005 fec6 	bl	c080 <usb_serial_write>
  if (digitalRead(IN4)) {
    62f4:	2013      	movs	r0, #19
    62f6:	f004 f875 	bl	a3e4 <digitalRead>
    62fa:	b318      	cbz	r0, 6344 <inputdebug()+0x90>
    62fc:	481b      	ldr	r0, [pc, #108]	; (636c <inputdebug()+0xb8>)
    62fe:	2106      	movs	r1, #6
    6300:	f005 febe 	bl	c080 <usb_serial_write>
}
    6304:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    6308:	4813      	ldr	r0, [pc, #76]	; (6358 <inputdebug()+0xa4>)
    630a:	f003 b973 	b.w	95f4 <Print::println()>
    630e:	4818      	ldr	r0, [pc, #96]	; (6370 <inputdebug()+0xbc>)
    6310:	2106      	movs	r1, #6
    6312:	f005 feb5 	bl	c080 <usb_serial_write>
  if (digitalRead(IN3)) {
    6316:	2012      	movs	r0, #18
    6318:	f004 f864 	bl	a3e4 <digitalRead>
    631c:	2800      	cmp	r0, #0
    631e:	d1dd      	bne.n	62dc <inputdebug()+0x28>
    6320:	4814      	ldr	r0, [pc, #80]	; (6374 <inputdebug()+0xc0>)
    6322:	2106      	movs	r1, #6
    6324:	f005 feac 	bl	c080 <usb_serial_write>
  if (digitalRead(IN3)) {
    6328:	2012      	movs	r0, #18
    632a:	f004 f85b 	bl	a3e4 <digitalRead>
    632e:	2800      	cmp	r0, #0
    6330:	d1dc      	bne.n	62ec <inputdebug()+0x38>
    6332:	4811      	ldr	r0, [pc, #68]	; (6378 <inputdebug()+0xc4>)
    6334:	2106      	movs	r1, #6
    6336:	f005 fea3 	bl	c080 <usb_serial_write>
  if (digitalRead(IN4)) {
    633a:	2013      	movs	r0, #19
    633c:	f004 f852 	bl	a3e4 <digitalRead>
    6340:	2800      	cmp	r0, #0
    6342:	d1db      	bne.n	62fc <inputdebug()+0x48>
    6344:	480d      	ldr	r0, [pc, #52]	; (637c <inputdebug()+0xc8>)
    6346:	2106      	movs	r1, #6
    6348:	f005 fe9a 	bl	c080 <usb_serial_write>
}
    634c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    6350:	4801      	ldr	r0, [pc, #4]	; (6358 <inputdebug()+0xa4>)
    6352:	f003 b94f 	b.w	95f4 <Print::println()>
    6356:	bf00      	nop
    6358:	1fff89fc 	.word	0x1fff89fc
    635c:	00014e9c 	.word	0x00014e9c
    6360:	00014ea4 	.word	0x00014ea4
    6364:	00014eb4 	.word	0x00014eb4
    6368:	00014ec4 	.word	0x00014ec4
    636c:	00014ed4 	.word	0x00014ed4
    6370:	00014eac 	.word	0x00014eac
    6374:	00014ebc 	.word	0x00014ebc
    6378:	00014ecc 	.word	0x00014ecc
    637c:	00014edc 	.word	0x00014edc

00006380 <outputdebug()>:
void outputdebug() {
    6380:	b510      	push	{r4, lr}
  if (outputstate < 5) {
    6382:	4c29      	ldr	r4, [pc, #164]	; (6428 <outputdebug()+0xa8>)
    6384:	6823      	ldr	r3, [r4, #0]
    6386:	2b04      	cmp	r3, #4
    6388:	dc26      	bgt.n	63d8 <outputdebug()+0x58>
    digitalWrite(OUT1, HIGH);
    638a:	2101      	movs	r1, #1
    638c:	200b      	movs	r0, #11
    638e:	f004 f803 	bl	a398 <digitalWrite>
    digitalWrite(OUT2, HIGH);
    6392:	2101      	movs	r1, #1
    6394:	200c      	movs	r0, #12
    6396:	f003 ffff 	bl	a398 <digitalWrite>
    digitalWrite(OUT3, HIGH);
    639a:	2101      	movs	r1, #1
    639c:	2014      	movs	r0, #20
    639e:	f003 fffb 	bl	a398 <digitalWrite>
    digitalWrite(OUT4, HIGH);
    63a2:	2101      	movs	r1, #1
    63a4:	2015      	movs	r0, #21
    63a6:	f003 fff7 	bl	a398 <digitalWrite>
    analogWrite(OUT5, 255);
    63aa:	21ff      	movs	r1, #255	; 0xff
    63ac:	2016      	movs	r0, #22
    63ae:	f003 fe77 	bl	a0a0 <analogWrite>
    analogWrite(OUT6, 255);
    63b2:	21ff      	movs	r1, #255	; 0xff
    63b4:	2017      	movs	r0, #23
    63b6:	f003 fe73 	bl	a0a0 <analogWrite>
    analogWrite(OUT7, 255);
    63ba:	21ff      	movs	r1, #255	; 0xff
    63bc:	2005      	movs	r0, #5
    63be:	f003 fe6f 	bl	a0a0 <analogWrite>
    analogWrite(OUT8, 255);
    63c2:	21ff      	movs	r1, #255	; 0xff
    63c4:	2006      	movs	r0, #6
    63c6:	f003 fe6b 	bl	a0a0 <analogWrite>
    outputstate++;
    63ca:	6823      	ldr	r3, [r4, #0]
    63cc:	3301      	adds	r3, #1
  if (outputstate > 10) {
    63ce:	2b0a      	cmp	r3, #10
    outputstate = 0;
    63d0:	bfc8      	it	gt
    63d2:	2300      	movgt	r3, #0
    63d4:	6023      	str	r3, [r4, #0]
}
    63d6:	bd10      	pop	{r4, pc}
    digitalWrite(OUT1, LOW);
    63d8:	2100      	movs	r1, #0
    63da:	200b      	movs	r0, #11
    63dc:	f003 ffdc 	bl	a398 <digitalWrite>
    digitalWrite(OUT2, LOW);
    63e0:	2100      	movs	r1, #0
    63e2:	200c      	movs	r0, #12
    63e4:	f003 ffd8 	bl	a398 <digitalWrite>
    digitalWrite(OUT3, LOW);
    63e8:	2100      	movs	r1, #0
    63ea:	2014      	movs	r0, #20
    63ec:	f003 ffd4 	bl	a398 <digitalWrite>
    digitalWrite(OUT4, LOW);
    63f0:	2100      	movs	r1, #0
    63f2:	2015      	movs	r0, #21
    63f4:	f003 ffd0 	bl	a398 <digitalWrite>
    analogWrite(OUT5, 0);
    63f8:	2100      	movs	r1, #0
    63fa:	2016      	movs	r0, #22
    63fc:	f003 fe50 	bl	a0a0 <analogWrite>
    analogWrite(OUT6, 0);
    6400:	2100      	movs	r1, #0
    6402:	2017      	movs	r0, #23
    6404:	f003 fe4c 	bl	a0a0 <analogWrite>
    analogWrite(OUT7, 0);
    6408:	2100      	movs	r1, #0
    640a:	2005      	movs	r0, #5
    640c:	f003 fe48 	bl	a0a0 <analogWrite>
    analogWrite(OUT8, 0);
    6410:	2100      	movs	r1, #0
    6412:	2006      	movs	r0, #6
    6414:	f003 fe44 	bl	a0a0 <analogWrite>
    outputstate++;
    6418:	6823      	ldr	r3, [r4, #0]
    641a:	3301      	adds	r3, #1
  if (outputstate > 10) {
    641c:	2b0a      	cmp	r3, #10
    outputstate = 0;
    641e:	bfc8      	it	gt
    6420:	2300      	movgt	r3, #0
    6422:	6023      	str	r3, [r4, #0]
}
    6424:	bd10      	pop	{r4, pc}
    6426:	bf00      	nop
    6428:	1fffd0c8 	.word	0x1fffd0c8

0000642c <sendcommand()>:
void sendcommand() {
    642c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg.id = controlid;
    642e:	4f0f      	ldr	r7, [pc, #60]	; (646c <sendcommand()+0x40>)
    6430:	4c0f      	ldr	r4, [pc, #60]	; (6470 <sendcommand()+0x44>)
  Can0.write(msg);
    6432:	4e10      	ldr	r6, [pc, #64]	; (6474 <sendcommand()+0x48>)
  msg.id = controlid;
    6434:	683b      	ldr	r3, [r7, #0]
    6436:	6023      	str	r3, [r4, #0]
  Can0.write(msg);
    6438:	4621      	mov	r1, r4
  msg.buf[0] = 0x00;
    643a:	2300      	movs	r3, #0
  msg.len = 8;
    643c:	2508      	movs	r5, #8
  Can0.write(msg);
    643e:	4630      	mov	r0, r6
  msg.buf[0] = 0x00;
    6440:	60a3      	str	r3, [r4, #8]
  msg.buf[4] = 0x00;
    6442:	60e3      	str	r3, [r4, #12]
  msg.len = 8;
    6444:	71e5      	strb	r5, [r4, #7]
  Can0.write(msg);
    6446:	f002 f805 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
  delay(1);
    644a:	2001      	movs	r0, #1
    644c:	f004 f834 	bl	a4b8 <delay>
  msg.id = controlid;
    6450:	683b      	ldr	r3, [r7, #0]
    6452:	6023      	str	r3, [r4, #0]
  msg.buf[0] = 0x45;
    6454:	4a08      	ldr	r2, [pc, #32]	; (6478 <sendcommand()+0x4c>)
  msg.len = 8;
    6456:	71e5      	strb	r5, [r4, #7]
  msg.buf[4] = 0x00;
    6458:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  Can0.write(msg);
    645c:	4630      	mov	r0, r6
    645e:	4621      	mov	r1, r4
  msg.buf[0] = 0x45;
    6460:	60a2      	str	r2, [r4, #8]
  msg.buf[4] = 0x00;
    6462:	60e3      	str	r3, [r4, #12]
}
    6464:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Can0.write(msg);
    6468:	f001 bff4 	b.w	8454 <FlexCAN::write(CAN_message_t const&)>
    646c:	1fff8848 	.word	0x1fff8848
    6470:	1fffd034 	.word	0x1fffd034
    6474:	1fffd1cc 	.word	0x1fffd1cc
    6478:	00280145 	.word	0x00280145

0000647c <dashupdate()>:
void dashupdate() {
    647c:	b530      	push	{r4, r5, lr}
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial2_write((const uint8_t *)str, len);
    647e:	48af      	ldr	r0, [pc, #700]	; (673c <dashupdate()+0x2c0>)
    6480:	b083      	sub	sp, #12
    6482:	2109      	movs	r1, #9
    6484:	f004 face 	bl	aa24 <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6488:	2022      	movs	r0, #34	; 0x22
    648a:	f004 fa4f 	bl	a92c <serial2_putchar>
  if (settings.ESSmode == 1) {
    648e:	4bac      	ldr	r3, [pc, #688]	; (6740 <dashupdate()+0x2c4>)
    6490:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    6494:	2b01      	cmp	r3, #1
    switch (bmsstatus) {
    6496:	4bab      	ldr	r3, [pc, #684]	; (6744 <dashupdate()+0x2c8>)
    6498:	781b      	ldrb	r3, [r3, #0]
  if (settings.ESSmode == 1) {
    649a:	d009      	beq.n	64b0 <dashupdate()+0x34>
    switch (bmsstatus) {
    649c:	2b05      	cmp	r3, #5
    649e:	d810      	bhi.n	64c2 <dashupdate()+0x46>
    64a0:	e8df f013 	tbh	[pc, r3, lsl #1]
    64a4:	01370132 	.word	0x01370132
    64a8:	0141013c 	.word	0x0141013c
    64ac:	000b012d 	.word	0x000b012d
    switch (bmsstatus) {
    64b0:	2b00      	cmp	r3, #0
    64b2:	f000 813d 	beq.w	6730 <dashupdate()+0x2b4>
    64b6:	2b05      	cmp	r3, #5
    64b8:	d103      	bne.n	64c2 <dashupdate()+0x46>
					{ serial2_write(buffer, size); return size; }
    64ba:	48a3      	ldr	r0, [pc, #652]	; (6748 <dashupdate()+0x2cc>)
    64bc:	2107      	movs	r1, #7
    64be:	f004 fab1 	bl	aa24 <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    64c2:	2022      	movs	r0, #34	; 0x22
    64c4:	f004 fa32 	bl	a92c <serial2_putchar>
    64c8:	20ff      	movs	r0, #255	; 0xff
    64ca:	f004 fa2f 	bl	a92c <serial2_putchar>
    64ce:	20ff      	movs	r0, #255	; 0xff
    64d0:	f004 fa2c 	bl	a92c <serial2_putchar>
  Serial2.print(SOC);
    64d4:	4c9d      	ldr	r4, [pc, #628]	; (674c <dashupdate()+0x2d0>)
    64d6:	20ff      	movs	r0, #255	; 0xff
    64d8:	f004 fa28 	bl	a92c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    64dc:	489c      	ldr	r0, [pc, #624]	; (6750 <dashupdate()+0x2d4>)
    64de:	2108      	movs	r1, #8
    64e0:	f004 faa0 	bl	aa24 <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    64e4:	6821      	ldr	r1, [r4, #0]
    64e6:	489b      	ldr	r0, [pc, #620]	; (6754 <dashupdate()+0x2d8>)
    64e8:	f003 f87c 	bl	95e4 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    64ec:	20ff      	movs	r0, #255	; 0xff
    64ee:	f004 fa1d 	bl	a92c <serial2_putchar>
    64f2:	20ff      	movs	r0, #255	; 0xff
    64f4:	f004 fa1a 	bl	a92c <serial2_putchar>
    64f8:	20ff      	movs	r0, #255	; 0xff
    64fa:	f004 fa17 	bl	a92c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    64fe:	4896      	ldr	r0, [pc, #600]	; (6758 <dashupdate()+0x2dc>)
    6500:	2109      	movs	r1, #9
    6502:	f004 fa8f 	bl	aa24 <serial2_write>
    6506:	6821      	ldr	r1, [r4, #0]
    6508:	4892      	ldr	r0, [pc, #584]	; (6754 <dashupdate()+0x2d8>)
    650a:	f003 f86b 	bl	95e4 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    650e:	20ff      	movs	r0, #255	; 0xff
    6510:	f004 fa0c 	bl	a92c <serial2_putchar>
    6514:	20ff      	movs	r0, #255	; 0xff
    6516:	f004 fa09 	bl	a92c <serial2_putchar>
    651a:	20ff      	movs	r0, #255	; 0xff
    651c:	f004 fa06 	bl	a92c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6520:	488e      	ldr	r0, [pc, #568]	; (675c <dashupdate()+0x2e0>)
    6522:	210c      	movs	r1, #12
    6524:	f004 fa7e 	bl	aa24 <serial2_write>
  Serial2.print(currentact / 100, 0);
    6528:	4b8d      	ldr	r3, [pc, #564]	; (6760 <dashupdate()+0x2e4>)
    652a:	498e      	ldr	r1, [pc, #568]	; (6764 <dashupdate()+0x2e8>)
    652c:	6818      	ldr	r0, [r3, #0]
    652e:	f006 fd3b 	bl	cfa8 <__aeabi_fdiv>
    6532:	f006 fa61 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    6536:	2400      	movs	r4, #0
    6538:	4602      	mov	r2, r0
    653a:	460b      	mov	r3, r1
    653c:	9400      	str	r4, [sp, #0]
    653e:	4885      	ldr	r0, [pc, #532]	; (6754 <dashupdate()+0x2d8>)
    6540:	f003 f87a 	bl	9638 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6544:	20ff      	movs	r0, #255	; 0xff
    6546:	f004 f9f1 	bl	a92c <serial2_putchar>
    654a:	20ff      	movs	r0, #255	; 0xff
    654c:	f004 f9ee 	bl	a92c <serial2_putchar>
    6550:	20ff      	movs	r0, #255	; 0xff
    6552:	f004 f9eb 	bl	a92c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6556:	2109      	movs	r1, #9
    6558:	4883      	ldr	r0, [pc, #524]	; (6768 <dashupdate()+0x2ec>)
    655a:	f004 fa63 	bl	aa24 <serial2_write>
  Serial2.print(bms.getAvgTemperature(), 0);
    655e:	4883      	ldr	r0, [pc, #524]	; (676c <dashupdate()+0x2f0>)
    6560:	f7fb fa5c 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    6564:	f006 fa48 	bl	c9f8 <__aeabi_f2d>
    6568:	9400      	str	r4, [sp, #0]
    656a:	4602      	mov	r2, r0
    656c:	460b      	mov	r3, r1
    656e:	4879      	ldr	r0, [pc, #484]	; (6754 <dashupdate()+0x2d8>)
    6570:	f003 f862 	bl	9638 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6574:	20ff      	movs	r0, #255	; 0xff
    6576:	f004 f9d9 	bl	a92c <serial2_putchar>
    657a:	20ff      	movs	r0, #255	; 0xff
    657c:	f004 f9d6 	bl	a92c <serial2_putchar>
    6580:	20ff      	movs	r0, #255	; 0xff
    6582:	f004 f9d3 	bl	a92c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6586:	210c      	movs	r1, #12
    6588:	4879      	ldr	r0, [pc, #484]	; (6770 <dashupdate()+0x2f4>)
    658a:	f004 fa4b 	bl	aa24 <serial2_write>
  Serial2.print(bms.getLowTemperature(), 0);
    658e:	4877      	ldr	r0, [pc, #476]	; (676c <dashupdate()+0x2f0>)
    6590:	f7fb faa4 	bl	1adc <BMSModuleManager::getLowTemperature()>
    6594:	f006 fa30 	bl	c9f8 <__aeabi_f2d>
    6598:	9400      	str	r4, [sp, #0]
    659a:	4602      	mov	r2, r0
    659c:	460b      	mov	r3, r1
    659e:	486d      	ldr	r0, [pc, #436]	; (6754 <dashupdate()+0x2d8>)
    65a0:	f003 f84a 	bl	9638 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    65a4:	20ff      	movs	r0, #255	; 0xff
    65a6:	f004 f9c1 	bl	a92c <serial2_putchar>
    65aa:	20ff      	movs	r0, #255	; 0xff
    65ac:	f004 f9be 	bl	a92c <serial2_putchar>
    65b0:	20ff      	movs	r0, #255	; 0xff
    65b2:	f004 f9bb 	bl	a92c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    65b6:	210d      	movs	r1, #13
    65b8:	486e      	ldr	r0, [pc, #440]	; (6774 <dashupdate()+0x2f8>)
    65ba:	f004 fa33 	bl	aa24 <serial2_write>
  Serial2.print(bms.getHighTemperature(), 0);
    65be:	486b      	ldr	r0, [pc, #428]	; (676c <dashupdate()+0x2f0>)
    65c0:	f7fb fa8a 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    65c4:	f006 fa18 	bl	c9f8 <__aeabi_f2d>
    65c8:	9400      	str	r4, [sp, #0]
    65ca:	4602      	mov	r2, r0
    65cc:	460b      	mov	r3, r1
    65ce:	4861      	ldr	r0, [pc, #388]	; (6754 <dashupdate()+0x2d8>)
    65d0:	f003 f832 	bl	9638 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    65d4:	20ff      	movs	r0, #255	; 0xff
    65d6:	f004 f9a9 	bl	a92c <serial2_putchar>
    65da:	20ff      	movs	r0, #255	; 0xff
    65dc:	f004 f9a6 	bl	a92c <serial2_putchar>
    65e0:	20ff      	movs	r0, #255	; 0xff
    65e2:	f004 f9a3 	bl	a92c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    65e6:	2109      	movs	r1, #9
    65e8:	4863      	ldr	r0, [pc, #396]	; (6778 <dashupdate()+0x2fc>)
    65ea:	f004 fa1b 	bl	aa24 <serial2_write>
  Serial2.print(bms.getPackVoltage() * 10, 0);
    65ee:	485f      	ldr	r0, [pc, #380]	; (676c <dashupdate()+0x2f0>)
    65f0:	f7fb f9e6 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    65f4:	4961      	ldr	r1, [pc, #388]	; (677c <dashupdate()+0x300>)
    65f6:	f006 fc23 	bl	ce40 <__aeabi_fmul>
    65fa:	f006 f9fd 	bl	c9f8 <__aeabi_f2d>
    65fe:	9400      	str	r4, [sp, #0]
    6600:	4602      	mov	r2, r0
    6602:	460b      	mov	r3, r1
    6604:	4853      	ldr	r0, [pc, #332]	; (6754 <dashupdate()+0x2d8>)
    6606:	f003 f817 	bl	9638 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    660a:	20ff      	movs	r0, #255	; 0xff
    660c:	f004 f98e 	bl	a92c <serial2_putchar>
    6610:	20ff      	movs	r0, #255	; 0xff
    6612:	f004 f98b 	bl	a92c <serial2_putchar>
    6616:	20ff      	movs	r0, #255	; 0xff
    6618:	f004 f988 	bl	a92c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    661c:	210c      	movs	r1, #12
    661e:	4858      	ldr	r0, [pc, #352]	; (6780 <dashupdate()+0x304>)
    6620:	f004 fa00 	bl	aa24 <serial2_write>
  Serial2.print(bms.getLowCellVolt() * 1000, 0);
    6624:	4851      	ldr	r0, [pc, #324]	; (676c <dashupdate()+0x2f0>)
    6626:	f7fb f981 	bl	192c <BMSModuleManager::getLowCellVolt()>
    662a:	4956      	ldr	r1, [pc, #344]	; (6784 <dashupdate()+0x308>)
    662c:	f006 fc08 	bl	ce40 <__aeabi_fmul>
    6630:	f006 f9e2 	bl	c9f8 <__aeabi_f2d>
    6634:	9400      	str	r4, [sp, #0]
    6636:	4602      	mov	r2, r0
    6638:	460b      	mov	r3, r1
    663a:	4846      	ldr	r0, [pc, #280]	; (6754 <dashupdate()+0x2d8>)
    663c:	f002 fffc 	bl	9638 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6640:	20ff      	movs	r0, #255	; 0xff
    6642:	f004 f973 	bl	a92c <serial2_putchar>
    6646:	20ff      	movs	r0, #255	; 0xff
    6648:	f004 f970 	bl	a92c <serial2_putchar>
    664c:	20ff      	movs	r0, #255	; 0xff
    664e:	f004 f96d 	bl	a92c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6652:	210d      	movs	r1, #13
    6654:	484c      	ldr	r0, [pc, #304]	; (6788 <dashupdate()+0x30c>)
    6656:	f004 f9e5 	bl	aa24 <serial2_write>
  Serial2.print(bms.getHighCellVolt() * 1000, 0);
    665a:	4844      	ldr	r0, [pc, #272]	; (676c <dashupdate()+0x2f0>)
    665c:	f7fb f98c 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6660:	4948      	ldr	r1, [pc, #288]	; (6784 <dashupdate()+0x308>)
    6662:	f006 fbed 	bl	ce40 <__aeabi_fmul>
    6666:	f006 f9c7 	bl	c9f8 <__aeabi_f2d>
    666a:	9400      	str	r4, [sp, #0]
    666c:	4602      	mov	r2, r0
    666e:	460b      	mov	r3, r1
    6670:	4838      	ldr	r0, [pc, #224]	; (6754 <dashupdate()+0x2d8>)
    6672:	f002 ffe1 	bl	9638 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6676:	20ff      	movs	r0, #255	; 0xff
    6678:	f004 f958 	bl	a92c <serial2_putchar>
    667c:	20ff      	movs	r0, #255	; 0xff
    667e:	f004 f955 	bl	a92c <serial2_putchar>
    6682:	20ff      	movs	r0, #255	; 0xff
    6684:	f004 f952 	bl	a92c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6688:	4840      	ldr	r0, [pc, #256]	; (678c <dashupdate()+0x310>)
    668a:	2109      	movs	r1, #9
    668c:	f004 f9ca 	bl	aa24 <serial2_write>
  Serial2.print(firmver);
    6690:	4b3f      	ldr	r3, [pc, #252]	; (6790 <dashupdate()+0x314>)
	size_t print(int n)				{ return print((long)n); }
    6692:	4830      	ldr	r0, [pc, #192]	; (6754 <dashupdate()+0x2d8>)
    6694:	6819      	ldr	r1, [r3, #0]
    6696:	f002 ffa5 	bl	95e4 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    669a:	20ff      	movs	r0, #255	; 0xff
    669c:	f004 f946 	bl	a92c <serial2_putchar>
    66a0:	20ff      	movs	r0, #255	; 0xff
    66a2:	f004 f943 	bl	a92c <serial2_putchar>
    66a6:	20ff      	movs	r0, #255	; 0xff
    66a8:	f004 f940 	bl	a92c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    66ac:	210e      	movs	r1, #14
    66ae:	4839      	ldr	r0, [pc, #228]	; (6794 <dashupdate()+0x318>)
    66b0:	f004 f9b8 	bl	aa24 <serial2_write>
  Serial2.print((bms.getHighCellVolt() - bms.getLowCellVolt()) * 1000, 0);
    66b4:	482d      	ldr	r0, [pc, #180]	; (676c <dashupdate()+0x2f0>)
    66b6:	f7fb f95f 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    66ba:	4605      	mov	r5, r0
    66bc:	482b      	ldr	r0, [pc, #172]	; (676c <dashupdate()+0x2f0>)
    66be:	f7fb f935 	bl	192c <BMSModuleManager::getLowCellVolt()>
    66c2:	4601      	mov	r1, r0
    66c4:	4628      	mov	r0, r5
    66c6:	f006 fab1 	bl	cc2c <__aeabi_fsub>
    66ca:	492e      	ldr	r1, [pc, #184]	; (6784 <dashupdate()+0x308>)
    66cc:	f006 fbb8 	bl	ce40 <__aeabi_fmul>
    66d0:	f006 f992 	bl	c9f8 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    66d4:	9400      	str	r4, [sp, #0]
    66d6:	4602      	mov	r2, r0
    66d8:	460b      	mov	r3, r1
    66da:	481e      	ldr	r0, [pc, #120]	; (6754 <dashupdate()+0x2d8>)
    66dc:	f002 ffac 	bl	9638 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    66e0:	20ff      	movs	r0, #255	; 0xff
    66e2:	f004 f923 	bl	a92c <serial2_putchar>
    66e6:	20ff      	movs	r0, #255	; 0xff
    66e8:	f004 f920 	bl	a92c <serial2_putchar>
    66ec:	20ff      	movs	r0, #255	; 0xff
    66ee:	f004 f91d 	bl	a92c <serial2_putchar>
    66f2:	20ff      	movs	r0, #255	; 0xff
}
    66f4:	b003      	add	sp, #12
    66f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    66fa:	f004 b917 	b.w	a92c <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    66fe:	4826      	ldr	r0, [pc, #152]	; (6798 <dashupdate()+0x31c>)
    6700:	210b      	movs	r1, #11
    6702:	f004 f98f 	bl	aa24 <serial2_write>
    6706:	e6dc      	b.n	64c2 <dashupdate()+0x46>
    6708:	4824      	ldr	r0, [pc, #144]	; (679c <dashupdate()+0x320>)
    670a:	2106      	movs	r1, #6
    670c:	f004 f98a 	bl	aa24 <serial2_write>
    6710:	e6d7      	b.n	64c2 <dashupdate()+0x46>
    6712:	4823      	ldr	r0, [pc, #140]	; (67a0 <dashupdate()+0x324>)
    6714:	2107      	movs	r1, #7
    6716:	f004 f985 	bl	aa24 <serial2_write>
    671a:	e6d2      	b.n	64c2 <dashupdate()+0x46>
    671c:	4821      	ldr	r0, [pc, #132]	; (67a4 <dashupdate()+0x328>)
    671e:	2107      	movs	r1, #7
    6720:	f004 f980 	bl	aa24 <serial2_write>
    6724:	e6cd      	b.n	64c2 <dashupdate()+0x46>
    6726:	4820      	ldr	r0, [pc, #128]	; (67a8 <dashupdate()+0x32c>)
    6728:	2108      	movs	r1, #8
    672a:	f004 f97b 	bl	aa24 <serial2_write>
    672e:	e6c8      	b.n	64c2 <dashupdate()+0x46>
    6730:	481e      	ldr	r0, [pc, #120]	; (67ac <dashupdate()+0x330>)
    6732:	2108      	movs	r1, #8
    6734:	f004 f976 	bl	aa24 <serial2_write>
    6738:	e6c3      	b.n	64c2 <dashupdate()+0x46>
    673a:	bf00      	nop
    673c:	00014ee4 	.word	0x00014ee4
    6740:	1fffd0d8 	.word	0x1fffd0d8
    6744:	1fffcf34 	.word	0x1fffcf34
    6748:	000141a0 	.word	0x000141a0
    674c:	1fff8828 	.word	0x1fff8828
    6750:	00014efc 	.word	0x00014efc
    6754:	1fff88bc 	.word	0x1fff88bc
    6758:	00014f08 	.word	0x00014f08
    675c:	00014f14 	.word	0x00014f14
    6760:	1fffcfc4 	.word	0x1fffcfc4
    6764:	42c80000 	.word	0x42c80000
    6768:	00014f24 	.word	0x00014f24
    676c:	1fff91f0 	.word	0x1fff91f0
    6770:	00014f30 	.word	0x00014f30
    6774:	00014f40 	.word	0x00014f40
    6778:	00014f50 	.word	0x00014f50
    677c:	41200000 	.word	0x41200000
    6780:	00014f5c 	.word	0x00014f5c
    6784:	447a0000 	.word	0x447a0000
    6788:	00014f6c 	.word	0x00014f6c
    678c:	00014f7c 	.word	0x00014f7c
    6790:	1fff8858 	.word	0x1fff8858
    6794:	00014f88 	.word	0x00014f88
    6798:	00014180 	.word	0x00014180
    679c:	00014170 	.word	0x00014170
    67a0:	00014178 	.word	0x00014178
    67a4:	0001418c 	.word	0x0001418c
    67a8:	00014194 	.word	0x00014194
    67ac:	00014ef0 	.word	0x00014ef0

000067b0 <chargercomms()>:
void chargercomms() {
    67b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (settings.chargertype == Elcon) {
    67b2:	4eab      	ldr	r6, [pc, #684]	; (6a60 <chargercomms()+0x2b0>)
    67b4:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    67b8:	2d04      	cmp	r5, #4
    67ba:	f000 816f 	beq.w	6a9c <chargercomms()+0x2ec>
  if (settings.chargertype == Eltek) {
    67be:	2d03      	cmp	r5, #3
    67c0:	f000 8124 	beq.w	6a0c <chargercomms()+0x25c>
  if (settings.chargertype == BrusaNLG5) {
    67c4:	2d01      	cmp	r5, #1
    67c6:	f000 80ae 	beq.w	6926 <chargercomms()+0x176>
  if (settings.chargertype == ChevyVolt) {
    67ca:	2d02      	cmp	r5, #2
    67cc:	d078      	beq.n	68c0 <chargercomms()+0x110>
  if (settings.chargertype == Coda) {
    67ce:	2d06      	cmp	r5, #6
    67d0:	d002      	beq.n	67d8 <chargercomms()+0x28>
  if (settings.chargertype == Outlander) {
    67d2:	2d08      	cmp	r5, #8
    67d4:	d03e      	beq.n	6854 <chargercomms()+0xa4>
}
    67d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    msg.id = 0x050;
    67d8:	4ca2      	ldr	r4, [pc, #648]	; (6a64 <chargercomms()+0x2b4>)
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    67da:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.len = 8;
    67dc:	2308      	movs	r3, #8
    msg.id = 0x050;
    67de:	2250      	movs	r2, #80	; 0x50
    msg.len = 8;
    67e0:	71e3      	strb	r3, [r4, #7]
    msg.buf[0] = 0x00;
    67e2:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
    msg.id = 0x050;
    67e6:	6022      	str	r2, [r4, #0]
    msg.buf[0] = 0x00;
    67e8:	8123      	strh	r3, [r4, #8]
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    67ea:	f006 fad5 	bl	cd98 <__aeabi_i2f>
    67ee:	6971      	ldr	r1, [r6, #20]
    67f0:	f006 fb26 	bl	ce40 <__aeabi_fmul>
    67f4:	499c      	ldr	r1, [pc, #624]	; (6a68 <chargercomms()+0x2b8>)
    67f6:	4605      	mov	r5, r0
    67f8:	f006 fcde 	bl	d1b8 <__aeabi_fcmpgt>
    67fc:	2800      	cmp	r0, #0
    67fe:	f040 817a 	bne.w	6af6 <chargercomms()+0x346>
    6802:	2201      	movs	r2, #1
    6804:	2390      	movs	r3, #144	; 0x90
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    6806:	72a2      	strb	r2, [r4, #10]
    if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    6808:	4a98      	ldr	r2, [pc, #608]	; (6a6c <chargercomms()+0x2bc>)
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    680a:	72e3      	strb	r3, [r4, #11]
    msg.buf[4] = 0x00;
    680c:	2100      	movs	r1, #0
    if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    680e:	6810      	ldr	r0, [r2, #0]
    msg.buf[4] = 0x00;
    6810:	7321      	strb	r1, [r4, #12]
    if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    6812:	f006 fac1 	bl	cd98 <__aeabi_i2f>
    6816:	4629      	mov	r1, r5
    6818:	f006 fb12 	bl	ce40 <__aeabi_fmul>
    681c:	4994      	ldr	r1, [pc, #592]	; (6a70 <chargercomms()+0x2c0>)
    681e:	4605      	mov	r5, r0
    6820:	f006 fcac 	bl	d17c <__aeabi_fcmplt>
    6824:	2800      	cmp	r0, #0
    6826:	f000 817c 	beq.w	6b22 <chargercomms()+0x372>
      msg.buf[5] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    682a:	4992      	ldr	r1, [pc, #584]	; (6a74 <chargercomms()+0x2c4>)
    682c:	4628      	mov	r0, r5
    682e:	f006 fbbb 	bl	cfa8 <__aeabi_fdiv>
    6832:	f006 fcf1 	bl	d218 <__aeabi_f2uiz>
    6836:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[6] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    683a:	4618      	mov	r0, r3
    msg.buf[7] = 0x01;  //HV charging
    683c:	2201      	movs	r2, #1
      msg.buf[5] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    683e:	7360      	strb	r0, [r4, #13]
    Can0.write(msg);
    6840:	4988      	ldr	r1, [pc, #544]	; (6a64 <chargercomms()+0x2b4>)
    6842:	488d      	ldr	r0, [pc, #564]	; (6a78 <chargercomms()+0x2c8>)
    msg.buf[7] = 0x01;  //HV charging
    6844:	73e2      	strb	r2, [r4, #15]
      msg.buf[6] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    6846:	73a3      	strb	r3, [r4, #14]
    Can0.write(msg);
    6848:	f001 fe04 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == Outlander) {
    684c:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    6850:	2d08      	cmp	r5, #8
    6852:	d1c0      	bne.n	67d6 <chargercomms()+0x26>
    msg.id = 0x285;
    6854:	4c83      	ldr	r4, [pc, #524]	; (6a64 <chargercomms()+0x2b4>)
    Can0.write(msg);
    6856:	4888      	ldr	r0, [pc, #544]	; (6a78 <chargercomms()+0x2c8>)
    msg.len = 8;
    6858:	71e5      	strb	r5, [r4, #7]
    msg.id = 0x285;
    685a:	f240 2385 	movw	r3, #645	; 0x285
    msg.buf[4] = 0x0;
    685e:	2700      	movs	r7, #0
    Can0.write(msg);
    6860:	4621      	mov	r1, r4
    msg.id = 0x285;
    6862:	6023      	str	r3, [r4, #0]
    msg.buf[0] = 0x0;
    6864:	f44f 0336 	mov.w	r3, #11927552	; 0xb60000
    6868:	60a3      	str	r3, [r4, #8]
    msg.buf[4] = 0x0;
    686a:	81a7      	strh	r7, [r4, #12]
    msg.buf[6] = 0x0;
    686c:	73a7      	strb	r7, [r4, #14]
    Can0.write(msg);
    686e:	f001 fdf1 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    6872:	2002      	movs	r0, #2
    6874:	f003 fe20 	bl	a4b8 <delay>
    msg.id = 0x286;
    6878:	f240 2386 	movw	r3, #646	; 0x286
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));  //volage
    687c:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.id = 0x286;
    687e:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    6880:	71e5      	strb	r5, [r4, #7]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));  //volage
    6882:	f006 fa89 	bl	cd98 <__aeabi_i2f>
    6886:	6971      	ldr	r1, [r6, #20]
    6888:	f006 fada 	bl	ce40 <__aeabi_fmul>
    688c:	497b      	ldr	r1, [pc, #492]	; (6a7c <chargercomms()+0x2cc>)
    688e:	f006 fad7 	bl	ce40 <__aeabi_fmul>
    6892:	f006 fcc1 	bl	d218 <__aeabi_f2uiz>
    if (chargecurrent / ncharger > 120) {
    6896:	4a7a      	ldr	r2, [pc, #488]	; (6a80 <chargercomms()+0x2d0>)
    6898:	4b74      	ldr	r3, [pc, #464]	; (6a6c <chargercomms()+0x2bc>)
    689a:	6811      	ldr	r1, [r2, #0]
    689c:	681b      	ldr	r3, [r3, #0]
    689e:	fb93 f3f1 	sdiv	r3, r3, r1
    68a2:	2b78      	cmp	r3, #120	; 0x78
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));  //volage
    68a4:	ba42      	rev16	r2, r0
    68a6:	bfa8      	it	ge
    68a8:	2378      	movge	r3, #120	; 0x78
    Can0.write(msg);
    68aa:	4621      	mov	r1, r4
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));  //volage
    68ac:	8122      	strh	r2, [r4, #8]
    if (chargecurrent / ncharger > 120) {
    68ae:	72a3      	strb	r3, [r4, #10]
    msg.buf[3] = 0x0;
    68b0:	72e7      	strb	r7, [r4, #11]
    msg.buf[4] = 0x0;
    68b2:	81a7      	strh	r7, [r4, #12]
    msg.buf[6] = 0x0;
    68b4:	73a7      	strb	r7, [r4, #14]
    Can0.write(msg);
    68b6:	4870      	ldr	r0, [pc, #448]	; (6a78 <chargercomms()+0x2c8>)
}
    68b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Can0.write(msg);
    68bc:	f001 bdca 	b.w	8454 <FlexCAN::write(CAN_message_t const&)>
    msg.id = 0x30E;
    68c0:	4c68      	ldr	r4, [pc, #416]	; (6a64 <chargercomms()+0x2b4>)
    Can0.write(msg);
    68c2:	486d      	ldr	r0, [pc, #436]	; (6a78 <chargercomms()+0x2c8>)
    msg.buf[0] = 0x02;  //only HV charging , 0x03 hv and 12V charging
    68c4:	7225      	strb	r5, [r4, #8]
    msg.id = 0x30E;
    68c6:	f240 330e 	movw	r3, #782	; 0x30e
    68ca:	6023      	str	r3, [r4, #0]
    Can0.write(msg);
    68cc:	4621      	mov	r1, r4
    msg.len = 1;
    68ce:	2301      	movs	r3, #1
    68d0:	71e3      	strb	r3, [r4, #7]
    Can0.write(msg);
    68d2:	f001 fdbf 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    if ((chargecurrent * 2) > 255) {
    68d6:	4b65      	ldr	r3, [pc, #404]	; (6a6c <chargercomms()+0x2bc>)
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    68d8:	6d70      	ldr	r0, [r6, #84]	; 0x54
    if ((chargecurrent * 2) > 255) {
    68da:	681b      	ldr	r3, [r3, #0]
    68dc:	005b      	lsls	r3, r3, #1
    68de:	2bff      	cmp	r3, #255	; 0xff
    msg.len = 4;
    68e0:	f04f 0204 	mov.w	r2, #4
      msg.buf[1] = (chargecurrent * 2);
    68e4:	bfd4      	ite	le
    68e6:	b2db      	uxtble	r3, r3
      msg.buf[1] = 255;
    68e8:	23ff      	movgt	r3, #255	; 0xff
    msg.id = 0x304;
    68ea:	f44f 7141 	mov.w	r1, #772	; 0x304
    msg.len = 4;
    68ee:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x40;  //fixed
    68f0:	2240      	movs	r2, #64	; 0x40
    msg.id = 0x304;
    68f2:	6021      	str	r1, [r4, #0]
    msg.buf[0] = 0x40;  //fixed
    68f4:	7222      	strb	r2, [r4, #8]
      msg.buf[1] = (chargecurrent * 2);
    68f6:	7263      	strb	r3, [r4, #9]
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    68f8:	f006 fa4e 	bl	cd98 <__aeabi_i2f>
    68fc:	6971      	ldr	r1, [r6, #20]
    68fe:	f006 fa9f 	bl	ce40 <__aeabi_fmul>
    6902:	4959      	ldr	r1, [pc, #356]	; (6a68 <chargercomms()+0x2b8>)
    6904:	4605      	mov	r5, r0
    6906:	f006 fc57 	bl	d1b8 <__aeabi_fcmpgt>
    690a:	2800      	cmp	r0, #0
    690c:	f040 80ff 	bne.w	6b0e <chargercomms()+0x35e>
    6910:	2301      	movs	r3, #1
    6912:	2090      	movs	r0, #144	; 0x90
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6914:	72e0      	strb	r0, [r4, #11]
    Can0.write(msg);
    6916:	4953      	ldr	r1, [pc, #332]	; (6a64 <chargercomms()+0x2b4>)
    6918:	4857      	ldr	r0, [pc, #348]	; (6a78 <chargercomms()+0x2c8>)
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    691a:	72a3      	strb	r3, [r4, #10]
    Can0.write(msg);
    691c:	f001 fd9a 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == Coda) {
    6920:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    6924:	e753      	b.n	67ce <chargercomms()+0x1e>
    msg.id = chargerid1;
    6926:	4b57      	ldr	r3, [pc, #348]	; (6a84 <chargercomms()+0x2d4>)
    6928:	4c4e      	ldr	r4, [pc, #312]	; (6a64 <chargercomms()+0x2b4>)
    692a:	6819      	ldr	r1, [r3, #0]
    692c:	6021      	str	r1, [r4, #0]
    msg.len = 7;
    692e:	2207      	movs	r2, #7
    msg.buf[0] = 0x80;
    6930:	2380      	movs	r3, #128	; 0x80
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6932:	2010      	movs	r0, #16
    msg.len = 7;
    6934:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x80;
    6936:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6938:	f003 fd54 	bl	a3e4 <digitalRead>
    693c:	2800      	cmp	r0, #0
    693e:	f000 80e4 	beq.w	6b0a <chargercomms()+0x35a>
      msg.buf[1] = highByte(maxac2 * 10);
    6942:	4b51      	ldr	r3, [pc, #324]	; (6a88 <chargercomms()+0x2d8>)
    6944:	681b      	ldr	r3, [r3, #0]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6946:	4d49      	ldr	r5, [pc, #292]	; (6a6c <chargercomms()+0x2bc>)
    6948:	4f4d      	ldr	r7, [pc, #308]	; (6a80 <chargercomms()+0x2d0>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    694a:	6d70      	ldr	r0, [r6, #84]	; 0x54
      msg.buf[1] = highByte(maxac2 * 10);
    694c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6950:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    6952:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    6954:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[1] = highByte(maxac1 * 10);
    6958:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = lowByte(maxac1 * 10);
    695a:	72a2      	strb	r2, [r4, #10]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    695c:	682b      	ldr	r3, [r5, #0]
    695e:	683a      	ldr	r2, [r7, #0]
    6960:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    6964:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6966:	121b      	asrs	r3, r3, #8
    6968:	7363      	strb	r3, [r4, #13]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    696a:	f006 fa15 	bl	cd98 <__aeabi_i2f>
    696e:	6971      	ldr	r1, [r6, #20]
    6970:	f006 fa66 	bl	ce40 <__aeabi_fmul>
    6974:	4b45      	ldr	r3, [pc, #276]	; (6a8c <chargercomms()+0x2dc>)
    6976:	6819      	ldr	r1, [r3, #0]
    6978:	f006 f958 	bl	cc2c <__aeabi_fsub>
    697c:	493f      	ldr	r1, [pc, #252]	; (6a7c <chargercomms()+0x2cc>)
    697e:	f006 fa5f 	bl	ce40 <__aeabi_fmul>
    6982:	f006 fc49 	bl	d218 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6986:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6988:	f3c0 2007 	ubfx	r0, r0, #8, #8
    Can0.write(msg);
    698c:	4935      	ldr	r1, [pc, #212]	; (6a64 <chargercomms()+0x2b4>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    698e:	72e0      	strb	r0, [r4, #11]
    Can0.write(msg);
    6990:	4839      	ldr	r0, [pc, #228]	; (6a78 <chargercomms()+0x2c8>)
    6992:	f001 fd5f 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    6996:	2002      	movs	r0, #2
    6998:	f003 fd8e 	bl	a4b8 <delay>
    msg.id = chargerid2;
    699c:	4b3c      	ldr	r3, [pc, #240]	; (6a90 <chargercomms()+0x2e0>)
    699e:	681b      	ldr	r3, [r3, #0]
    69a0:	6023      	str	r3, [r4, #0]
    msg.len = 7;
    69a2:	2307      	movs	r3, #7
    69a4:	71e3      	strb	r3, [r4, #7]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    69a6:	2010      	movs	r0, #16
    msg.buf[0] = 0x80;
    69a8:	2380      	movs	r3, #128	; 0x80
    69aa:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    69ac:	f003 fd1a 	bl	a3e4 <digitalRead>
    69b0:	2800      	cmp	r0, #0
    69b2:	f040 80b8 	bne.w	6b26 <chargercomms()+0x376>
      msg.buf[1] = highByte(maxac1 * 10);
    69b6:	4b37      	ldr	r3, [pc, #220]	; (6a94 <chargercomms()+0x2e4>)
      msg.buf[1] = highByte(maxac2 * 10);
    69b8:	681b      	ldr	r3, [r3, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    69ba:	6d70      	ldr	r0, [r6, #84]	; 0x54
      msg.buf[1] = highByte(maxac2 * 10);
    69bc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    69c0:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    69c2:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    69c4:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[2] = lowByte(maxac1 * 10);
    69c8:	72a2      	strb	r2, [r4, #10]
      msg.buf[1] = highByte(maxac1 * 10);
    69ca:	7263      	strb	r3, [r4, #9]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    69cc:	f006 f9e4 	bl	cd98 <__aeabi_i2f>
    69d0:	6971      	ldr	r1, [r6, #20]
    69d2:	f006 fa35 	bl	ce40 <__aeabi_fmul>
    69d6:	4b30      	ldr	r3, [pc, #192]	; (6a98 <chargercomms()+0x2e8>)
    69d8:	6819      	ldr	r1, [r3, #0]
    69da:	f006 f927 	bl	cc2c <__aeabi_fsub>
    69de:	4927      	ldr	r1, [pc, #156]	; (6a7c <chargercomms()+0x2cc>)
    69e0:	f006 fa2e 	bl	ce40 <__aeabi_fmul>
    69e4:	f006 fc18 	bl	d218 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    69e8:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    69ea:	f3c0 2007 	ubfx	r0, r0, #8, #8
    msg.buf[5] = highByte(chargecurrent / ncharger);
    69ee:	682b      	ldr	r3, [r5, #0]
    69f0:	683a      	ldr	r2, [r7, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    69f2:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    69f4:	fb93 f3f2 	sdiv	r3, r3, r2
    Can0.write(msg);
    69f8:	491a      	ldr	r1, [pc, #104]	; (6a64 <chargercomms()+0x2b4>)
    69fa:	481f      	ldr	r0, [pc, #124]	; (6a78 <chargercomms()+0x2c8>)
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    69fc:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    69fe:	121a      	asrs	r2, r3, #8
    6a00:	7362      	strb	r2, [r4, #13]
    Can0.write(msg);
    6a02:	f001 fd27 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == ChevyVolt) {
    6a06:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    6a0a:	e6de      	b.n	67ca <chargercomms()+0x1a>
    msg.id = 0x2FF;  //broadcast to all Elteks
    6a0c:	4c15      	ldr	r4, [pc, #84]	; (6a64 <chargercomms()+0x2b4>)
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6a0e:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.buf[2] = highByte(1000);
    6a10:	72a5      	strb	r5, [r4, #10]
    msg.id = 0x2FF;  //broadcast to all Elteks
    6a12:	f240 23ff 	movw	r3, #767	; 0x2ff
    msg.len = 7;
    6a16:	2207      	movs	r2, #7
    msg.id = 0x2FF;  //broadcast to all Elteks
    6a18:	6023      	str	r3, [r4, #0]
    msg.buf[0] = 0x01;
    6a1a:	f64e 0301 	movw	r3, #59393	; 0xe801
    msg.len = 7;
    6a1e:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x01;
    6a20:	8123      	strh	r3, [r4, #8]
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6a22:	f006 f9b9 	bl	cd98 <__aeabi_i2f>
    6a26:	6971      	ldr	r1, [r6, #20]
    6a28:	f006 fa0a 	bl	ce40 <__aeabi_fmul>
    6a2c:	4913      	ldr	r1, [pc, #76]	; (6a7c <chargercomms()+0x2cc>)
    6a2e:	f006 fa07 	bl	ce40 <__aeabi_fmul>
    6a32:	f006 fbf1 	bl	d218 <__aeabi_f2uiz>
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    6a36:	4a12      	ldr	r2, [pc, #72]	; (6a80 <chargercomms()+0x2d0>)
    6a38:	4b0c      	ldr	r3, [pc, #48]	; (6a6c <chargercomms()+0x2bc>)
    6a3a:	6811      	ldr	r1, [r2, #0]
    6a3c:	681b      	ldr	r3, [r3, #0]
    6a3e:	fb93 f3f1 	sdiv	r3, r3, r1
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6a42:	b280      	uxth	r0, r0
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6a44:	0a02      	lsrs	r2, r0, #8
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6a46:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    6a48:	7363      	strb	r3, [r4, #13]
    Can0.write(msg);
    6a4a:	480b      	ldr	r0, [pc, #44]	; (6a78 <chargercomms()+0x2c8>)
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6a4c:	7322      	strb	r2, [r4, #12]
    msg.buf[6] = highByte(chargecurrent / ncharger);
    6a4e:	121b      	asrs	r3, r3, #8
    Can0.write(msg);
    6a50:	4621      	mov	r1, r4
    msg.buf[6] = highByte(chargecurrent / ncharger);
    6a52:	73a3      	strb	r3, [r4, #14]
    Can0.write(msg);
    6a54:	f001 fcfe 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == BrusaNLG5) {
    6a58:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    6a5c:	e6b2      	b.n	67c4 <chargercomms()+0x14>
    6a5e:	bf00      	nop
    6a60:	1fffd0d8 	.word	0x1fffd0d8
    6a64:	1fffd034 	.word	0x1fffd034
    6a68:	43480000 	.word	0x43480000
    6a6c:	1fffcf40 	.word	0x1fffcf40
    6a70:	454e4000 	.word	0x454e4000
    6a74:	43700000 	.word	0x43700000
    6a78:	1fffd1cc 	.word	0x1fffd1cc
    6a7c:	41200000 	.word	0x41200000
    6a80:	1fff8864 	.word	0x1fff8864
    6a84:	1fff8840 	.word	0x1fff8840
    6a88:	1fff8860 	.word	0x1fff8860
    6a8c:	1fffcf48 	.word	0x1fffcf48
    6a90:	1fff8844 	.word	0x1fff8844
    6a94:	1fff885c 	.word	0x1fff885c
    6a98:	1fffcf44 	.word	0x1fffcf44
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    6a9c:	4c23      	ldr	r4, [pc, #140]	; (6b2c <chargercomms()+0x37c>)
    6a9e:	4a24      	ldr	r2, [pc, #144]	; (6b30 <chargercomms()+0x380>)
    msg.ext = 1;
    6aa0:	88e3      	ldrh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6aa2:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    6aa4:	6022      	str	r2, [r4, #0]
    msg.ext = 1;
    6aa6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    6aaa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    6aae:	f043 0301 	orr.w	r3, r3, #1
    6ab2:	80e3      	strh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6ab4:	f006 f970 	bl	cd98 <__aeabi_i2f>
    6ab8:	6971      	ldr	r1, [r6, #20]
    6aba:	f006 f9c1 	bl	ce40 <__aeabi_fmul>
    6abe:	491d      	ldr	r1, [pc, #116]	; (6b34 <chargercomms()+0x384>)
    6ac0:	f006 f9be 	bl	ce40 <__aeabi_fmul>
    6ac4:	f006 fba8 	bl	d218 <__aeabi_f2uiz>
    msg.buf[2] = highByte(chargecurrent / ncharger);
    6ac8:	4b1b      	ldr	r3, [pc, #108]	; (6b38 <chargercomms()+0x388>)
    6aca:	4a1c      	ldr	r2, [pc, #112]	; (6b3c <chargercomms()+0x38c>)
    6acc:	681b      	ldr	r3, [r3, #0]
    6ace:	6812      	ldr	r2, [r2, #0]
    6ad0:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6ad4:	ba40      	rev16	r0, r0
    msg.buf[2] = highByte(chargecurrent / ncharger);
    6ad6:	ba5b      	rev16	r3, r3
    msg.buf[4] = 0x00;
    6ad8:	2700      	movs	r7, #0
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6ada:	8120      	strh	r0, [r4, #8]
    Can0.write(msg);
    6adc:	4621      	mov	r1, r4
    6ade:	4818      	ldr	r0, [pc, #96]	; (6b40 <chargercomms()+0x390>)
    msg.buf[2] = highByte(chargecurrent / ncharger);
    6ae0:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = 0x00;
    6ae2:	60e7      	str	r7, [r4, #12]
    Can0.write(msg);
    6ae4:	f001 fcb6 	bl	8454 <FlexCAN::write(CAN_message_t const&)>
    msg.ext = 0;
    6ae8:	79a3      	ldrb	r3, [r4, #6]
  if (settings.chargertype == Eltek) {
    6aea:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    msg.ext = 0;
    6aee:	f367 0300 	bfi	r3, r7, #0, #1
    6af2:	71a3      	strb	r3, [r4, #6]
    6af4:	e663      	b.n	67be <chargercomms()+0xe>
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    6af6:	490f      	ldr	r1, [pc, #60]	; (6b34 <chargercomms()+0x384>)
    6af8:	4628      	mov	r0, r5
    6afa:	f006 f9a1 	bl	ce40 <__aeabi_fmul>
    6afe:	f006 fb8b 	bl	d218 <__aeabi_f2uiz>
    6b02:	f3c0 2207 	ubfx	r2, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    6b06:	b2c3      	uxtb	r3, r0
    6b08:	e67d      	b.n	6806 <chargercomms()+0x56>
      msg.buf[1] = highByte(maxac1 * 10);
    6b0a:	4b0e      	ldr	r3, [pc, #56]	; (6b44 <chargercomms()+0x394>)
    6b0c:	e71a      	b.n	6944 <chargercomms()+0x194>
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6b0e:	4629      	mov	r1, r5
    6b10:	4628      	mov	r0, r5
    6b12:	f006 f88d 	bl	cc30 <__addsf3>
    6b16:	f006 fb7f 	bl	d218 <__aeabi_f2uiz>
    6b1a:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6b1e:	b2c0      	uxtb	r0, r0
    6b20:	e6f8      	b.n	6914 <chargercomms()+0x164>
    6b22:	2396      	movs	r3, #150	; 0x96
    6b24:	e68a      	b.n	683c <chargercomms()+0x8c>
      msg.buf[1] = highByte(maxac2 * 10);
    6b26:	4b08      	ldr	r3, [pc, #32]	; (6b48 <chargercomms()+0x398>)
    6b28:	e746      	b.n	69b8 <chargercomms()+0x208>
    6b2a:	bf00      	nop
    6b2c:	1fffd034 	.word	0x1fffd034
    6b30:	1806e5f4 	.word	0x1806e5f4
    6b34:	41200000 	.word	0x41200000
    6b38:	1fffcf40 	.word	0x1fffcf40
    6b3c:	1fff8864 	.word	0x1fff8864
    6b40:	1fffd1cc 	.word	0x1fffd1cc
    6b44:	1fff885c 	.word	0x1fff885c
    6b48:	1fff8860 	.word	0x1fff8860

00006b4c <loop>:
void loop() {
    6b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (Can0.available()) {
    6b50:	4c99      	ldr	r4, [pc, #612]	; (6db8 <loop+0x26c>)
void loop() {
    6b52:	b097      	sub	sp, #92	; 0x5c
  while (Can0.available()) {
    6b54:	e001      	b.n	6b5a <loop+0xe>
    canread();
    6b56:	f7ff f8d5 	bl	5d04 <canread()>
  while (Can0.available()) {
    6b5a:	4620      	mov	r0, r4
    6b5c:	f001 fb8c 	bl	8278 <FlexCAN::available()>
    6b60:	2800      	cmp	r0, #0
    6b62:	d1f8      	bne.n	6b56 <loop+0xa>
        virtual int available() { return usb_serial_available(); }
    6b64:	f005 fa5a 	bl	c01c <usb_serial_available>
  if (SERIALCONSOLE.available() > 0) {
    6b68:	2800      	cmp	r0, #0
    6b6a:	dd01      	ble.n	6b70 <loop+0x24>
    menu();
    6b6c:	f7fd f954 	bl	3e18 <menu()>
  if (outputcheck != 1) {
    6b70:	4e92      	ldr	r6, [pc, #584]	; (6dbc <loop+0x270>)
    if (settings.ESSmode == 1) {
    6b72:	4d93      	ldr	r5, [pc, #588]	; (6dc0 <loop+0x274>)
  if (outputcheck != 1) {
    6b74:	6833      	ldr	r3, [r6, #0]
    6b76:	2b01      	cmp	r3, #1
    6b78:	d12e      	bne.n	6bd8 <loop+0x8c>
    6b7a:	4c92      	ldr	r4, [pc, #584]	; (6dc4 <loop+0x278>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6b7c:	6823      	ldr	r3, [r4, #0]
  if (millis() - looptime > 500) {
    6b7e:	4a92      	ldr	r2, [pc, #584]	; (6dc8 <loop+0x27c>)
    6b80:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    6b82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6b84:	6811      	ldr	r1, [r2, #0]
    6b86:	1a5b      	subs	r3, r3, r1
    6b88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    6b8c:	d850      	bhi.n	6c30 <loop+0xe4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6b8e:	6823      	ldr	r3, [r4, #0]
  if (millis() - cleartime > 20000) {
    6b90:	4e8e      	ldr	r6, [pc, #568]	; (6dcc <loop+0x280>)
    6b92:	9312      	str	r3, [sp, #72]	; 0x48
    6b94:	6832      	ldr	r2, [r6, #0]
	return ret;
    6b96:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6b98:	1a9b      	subs	r3, r3, r2
    6b9a:	f644 6220 	movw	r2, #20000	; 0x4e20
    6b9e:	4293      	cmp	r3, r2
    6ba0:	d82e      	bhi.n	6c00 <loop+0xb4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6ba2:	6823      	ldr	r3, [r4, #0]
  if (millis() - looptime1 > settings.chargerspd) {
    6ba4:	4a8a      	ldr	r2, [pc, #552]	; (6dd0 <loop+0x284>)
    6ba6:	9314      	str	r3, [sp, #80]	; 0x50
    6ba8:	6811      	ldr	r1, [r2, #0]
	return ret;
    6baa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6bac:	1a5b      	subs	r3, r3, r1
    6bae:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
    6bb2:	428b      	cmp	r3, r1
    6bb4:	d90d      	bls.n	6bd2 <loop+0x86>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6bb6:	6823      	ldr	r3, [r4, #0]
    6bb8:	9315      	str	r3, [sp, #84]	; 0x54
    if (settings.ESSmode == 1) {
    6bba:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	return ret;
    6bbe:	9915      	ldr	r1, [sp, #84]	; 0x54
    looptime1 = millis();
    6bc0:	6011      	str	r1, [r2, #0]
    if (settings.ESSmode == 1) {
    6bc2:	2b01      	cmp	r3, #1
    6bc4:	f000 80d6 	beq.w	6d74 <loop+0x228>
      if (bmsstatus == Charge) {
    6bc8:	4b82      	ldr	r3, [pc, #520]	; (6dd4 <loop+0x288>)
    6bca:	781b      	ldrb	r3, [r3, #0]
    6bcc:	2b03      	cmp	r3, #3
    6bce:	f000 80d1 	beq.w	6d74 <loop+0x228>
}
    6bd2:	b017      	add	sp, #92	; 0x5c
    6bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    contcon();
    6bd8:	f7fc fd36 	bl	3648 <contcon()>
    if (settings.ESSmode == 1) {
    6bdc:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
      if (bmsstatus != Error && bmsstatus != Boot) {
    6be0:	4f7c      	ldr	r7, [pc, #496]	; (6dd4 <loop+0x288>)
    if (settings.ESSmode == 1) {
    6be2:	2c01      	cmp	r4, #1
      if (bmsstatus != Error && bmsstatus != Boot) {
    6be4:	783b      	ldrb	r3, [r7, #0]
    if (settings.ESSmode == 1) {
    6be6:	f000 810d 	beq.w	6e04 <loop+0x2b8>
      switch (bmsstatus) {
    6bea:	2b05      	cmp	r3, #5
    6bec:	f200 80a8 	bhi.w	6d40 <loop+0x1f4>
    6bf0:	e8df f013 	tbh	[pc, r3, lsl #1]
    6bf4:	022f0216 	.word	0x022f0216
    6bf8:	02e50296 	.word	0x02e50296
    6bfc:	02b7020f 	.word	0x02b7020f
    if (bms.checkcomms()) {
    6c00:	4875      	ldr	r0, [pc, #468]	; (6dd8 <loop+0x28c>)
    6c02:	f7fa f8d7 	bl	db4 <BMSModuleManager::checkcomms()>
    6c06:	2800      	cmp	r0, #0
    6c08:	f040 80a5 	bne.w	6d56 <loop+0x20a>
      if (debug != 0) {
    6c0c:	4b73      	ldr	r3, [pc, #460]	; (6ddc <loop+0x290>)
    6c0e:	681b      	ldr	r3, [r3, #0]
    6c10:	2b00      	cmp	r3, #0
    6c12:	f040 81eb 	bne.w	6fec <loop+0x4a0>
      bmsstatus = Error;
    6c16:	4b6f      	ldr	r3, [pc, #444]	; (6dd4 <loop+0x288>)
    6c18:	2205      	movs	r2, #5
    6c1a:	701a      	strb	r2, [r3, #0]
      ErrorReason = ErrorReason | 0x08;
    6c1c:	4a70      	ldr	r2, [pc, #448]	; (6de0 <loop+0x294>)
    6c1e:	6813      	ldr	r3, [r2, #0]
    6c20:	f043 0308 	orr.w	r3, r3, #8
    6c24:	6013      	str	r3, [r2, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6c26:	6823      	ldr	r3, [r4, #0]
    6c28:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    6c2a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cleartime = millis();
    6c2c:	6033      	str	r3, [r6, #0]
    6c2e:	e7b8      	b.n	6ba2 <loop+0x56>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6c30:	6823      	ldr	r3, [r4, #0]
    6c32:	930c      	str	r3, [sp, #48]	; 0x30
    if (SOCset == 1 && balancecells == 1) {
    6c34:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 6de4 <loop+0x298>
	return ret;
    6c38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bms.getAllVoltTemp();
    6c3a:	4867      	ldr	r0, [pc, #412]	; (6dd8 <loop+0x28c>)
    looptime = millis();
    6c3c:	6013      	str	r3, [r2, #0]
    bms.getAllVoltTemp();
    6c3e:	f7fa fdb1 	bl	17a4 <BMSModuleManager::getAllVoltTemp()>
    if (SOCset == 1 && balancecells == 1) {
    6c42:	f8da 3000 	ldr.w	r3, [sl]
    6c46:	2b01      	cmp	r3, #1
    6c48:	f000 815c 	beq.w	6f04 <loop+0x3b8>
    if (settings.ESSmode == 1) {
    6c4c:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
    6c50:	2a01      	cmp	r2, #1
    6c52:	f000 8094 	beq.w	6d7e <loop+0x232>
      if (SOCset != 0) {
    6c56:	2b00      	cmp	r3, #0
    6c58:	f040 815e 	bne.w	6f18 <loop+0x3cc>
    if (debug != 0) {
    6c5c:	f8df 917c 	ldr.w	r9, [pc, #380]	; 6ddc <loop+0x290>
    6c60:	4f5c      	ldr	r7, [pc, #368]	; (6dd4 <loop+0x288>)
    6c62:	f8d9 3000 	ldr.w	r3, [r9]
    6c66:	b133      	cbz	r3, 6c76 <loop+0x12a>
      printbmsstat();
    6c68:	f7fb fe52 	bl	2910 <printbmsstat()>
      bms.printPackDetails(debugdigits);
    6c6c:	4b5e      	ldr	r3, [pc, #376]	; (6de8 <loop+0x29c>)
    6c6e:	485a      	ldr	r0, [pc, #360]	; (6dd8 <loop+0x28c>)
    6c70:	6819      	ldr	r1, [r3, #0]
    6c72:	f7fa ff6f 	bl	1b54 <BMSModuleManager::printPackDetails(int)>
    if (CSVdebug != 0) {
    6c76:	f8df 8174 	ldr.w	r8, [pc, #372]	; 6dec <loop+0x2a0>
    6c7a:	f8d8 3000 	ldr.w	r3, [r8]
    6c7e:	2b00      	cmp	r3, #0
    6c80:	f040 8189 	bne.w	6f96 <loop+0x44a>
    if (inputcheck != 0) {
    6c84:	4b5a      	ldr	r3, [pc, #360]	; (6df0 <loop+0x2a4>)
    6c86:	681b      	ldr	r3, [r3, #0]
    6c88:	2b00      	cmp	r3, #0
    6c8a:	f040 8181 	bne.w	6f90 <loop+0x444>
    if (outputcheck != 0) {
    6c8e:	6833      	ldr	r3, [r6, #0]
    6c90:	2b00      	cmp	r3, #0
    6c92:	f000 8134 	beq.w	6efe <loop+0x3b2>
      outputdebug();
    6c96:	f7ff fb73 	bl	6380 <outputdebug()>
    if (cellspresent == 0 && SOCset == 1) {
    6c9a:	4e56      	ldr	r6, [pc, #344]	; (6df4 <loop+0x2a8>)
    updateSOC();
    6c9c:	f7fc fafc 	bl	3298 <updateSOC()>
    currentlimit();
    6ca0:	f7ff f962 	bl	5f68 <currentlimit()>
    VEcan();
    6ca4:	f7fc fe8c 	bl	39c0 <VEcan()>
    sendcommand();
    6ca8:	f7ff fbc0 	bl	642c <sendcommand()>
    if (cellspresent == 0 && SOCset == 1) {
    6cac:	6833      	ldr	r3, [r6, #0]
      cellspresent = bms.seriescells();
    6cae:	484a      	ldr	r0, [pc, #296]	; (6dd8 <loop+0x28c>)
    if (cellspresent == 0 && SOCset == 1) {
    6cb0:	b923      	cbnz	r3, 6cbc <loop+0x170>
    6cb2:	f8da 3000 	ldr.w	r3, [sl]
    6cb6:	2b01      	cmp	r3, #1
    6cb8:	f000 830f 	beq.w	72da <loop+0x78e>
      if (cellspresent != bms.seriescells() || cellspresent != (settings.Scells * settings.Pstrings))  //detect a fault in cells detected
    6cbc:	f7fa fb7e 	bl	13bc <BMSModuleManager::seriescells()>
    6cc0:	6833      	ldr	r3, [r6, #0]
    6cc2:	4298      	cmp	r0, r3
    6cc4:	f000 8172 	beq.w	6fac <loop+0x460>
        if (debug != 0) {
    6cc8:	f8d9 3000 	ldr.w	r3, [r9]
    6ccc:	2b00      	cmp	r3, #0
    6cce:	f040 817a 	bne.w	6fc6 <loop+0x47a>
        ErrorReason = ErrorReason | 0x04;
    6cd2:	4a43      	ldr	r2, [pc, #268]	; (6de0 <loop+0x294>)
        bmsstatus = Error;
    6cd4:	2305      	movs	r3, #5
    6cd6:	703b      	strb	r3, [r7, #0]
        ErrorReason = ErrorReason | 0x04;
    6cd8:	6813      	ldr	r3, [r2, #0]
    6cda:	f043 0304 	orr.w	r3, r3, #4
    6cde:	6013      	str	r3, [r2, #0]
    alarmupdate();
    6ce0:	f7fb fc6a 	bl	25b8 <alarmupdate()>
    if (CSVdebug != 1) {
    6ce4:	f8d8 3000 	ldr.w	r3, [r8]
    6ce8:	2b01      	cmp	r3, #1
    6cea:	d001      	beq.n	6cf0 <loop+0x1a4>
      dashupdate();
    6cec:	f7ff fbc6 	bl	647c <dashupdate()>
    if (bmsstatus == Error && ErrorReason == 0) {
    6cf0:	783b      	ldrb	r3, [r7, #0]
    6cf2:	2b05      	cmp	r3, #5
    6cf4:	f000 8145 	beq.w	6f82 <loop+0x436>
  noInterrupts();  //   No - reset WDT
    6cf8:	b672      	cpsid	i
  WDOG_REFRESH = 0xA602;
    6cfa:	4b3f      	ldr	r3, [pc, #252]	; (6df8 <loop+0x2ac>)
    6cfc:	f24a 6102 	movw	r1, #42498	; 0xa602
  WDOG_REFRESH = 0xB480;
    6d00:	f24b 4280 	movw	r2, #46208	; 0xb480
  WDOG_REFRESH = 0xA602;
    6d04:	8199      	strh	r1, [r3, #12]
  WDOG_REFRESH = 0xB480;
    6d06:	819a      	strh	r2, [r3, #12]
  interrupts();
    6d08:	b662      	cpsie	i
}
    6d0a:	e740      	b.n	6b8e <loop+0x42>
        Discharge = 0;
    6d0c:	4b3b      	ldr	r3, [pc, #236]	; (6dfc <loop+0x2b0>)
    6d0e:	2400      	movs	r4, #0
        digitalWrite(OUT4, LOW);
    6d10:	4621      	mov	r1, r4
    6d12:	2015      	movs	r0, #21
        Discharge = 0;
    6d14:	601c      	str	r4, [r3, #0]
        digitalWrite(OUT4, LOW);
    6d16:	f003 fb3f 	bl	a398 <digitalWrite>
        digitalWrite(OUT3, LOW);  //turn off charger
    6d1a:	4621      	mov	r1, r4
    6d1c:	2014      	movs	r0, #20
    6d1e:	f003 fb3b 	bl	a398 <digitalWrite>
        digitalWrite(OUT2, LOW);
    6d22:	4621      	mov	r1, r4
    6d24:	200c      	movs	r0, #12
    6d26:	f003 fb37 	bl	a398 <digitalWrite>
        digitalWrite(OUT1, LOW);  //turn off discharge
    6d2a:	4621      	mov	r1, r4
    6d2c:	200b      	movs	r0, #11
    6d2e:	f003 fb33 	bl	a398 <digitalWrite>
        contctrl = 0;             //turn off out 5 and 6
    6d32:	4b33      	ldr	r3, [pc, #204]	; (6e00 <loop+0x2b4>)
    6d34:	601c      	str	r4, [r3, #0]
        if (SOCset == 1) {
    6d36:	4b2b      	ldr	r3, [pc, #172]	; (6de4 <loop+0x298>)
    6d38:	6819      	ldr	r1, [r3, #0]
    6d3a:	2901      	cmp	r1, #1
    6d3c:	f000 826b 	beq.w	7216 <loop+0x6ca>
    6d40:	4c20      	ldr	r4, [pc, #128]	; (6dc4 <loop+0x278>)
    if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    6d42:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    6d46:	f023 0302 	bic.w	r3, r3, #2
    6d4a:	2b01      	cmp	r3, #1
    6d4c:	f47f af16 	bne.w	6b7c <loop+0x30>
      getcurrent();
    6d50:	f7fb ffa4 	bl	2c9c <getcurrent()>
    6d54:	e712      	b.n	6b7c <loop+0x30>
      ErrorReason = ErrorReason & ~0x08;
    6d56:	4a22      	ldr	r2, [pc, #136]	; (6de0 <loop+0x294>)
    6d58:	6813      	ldr	r3, [r2, #0]
    6d5a:	f023 0308 	bic.w	r3, r3, #8
    6d5e:	6013      	str	r3, [r2, #0]
      if (bmsstatus == Error && ErrorReason == 0) {
    6d60:	4a1c      	ldr	r2, [pc, #112]	; (6dd4 <loop+0x288>)
    6d62:	7811      	ldrb	r1, [r2, #0]
    6d64:	2905      	cmp	r1, #5
    6d66:	f47f af5e 	bne.w	6c26 <loop+0xda>
    6d6a:	2b00      	cmp	r3, #0
    6d6c:	f47f af5b 	bne.w	6c26 <loop+0xda>
        bmsstatus = Boot;
    6d70:	7013      	strb	r3, [r2, #0]
    6d72:	e758      	b.n	6c26 <loop+0xda>
}
    6d74:	b017      	add	sp, #92	; 0x5c
    6d76:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      chargercomms();
    6d7a:	f7ff bd19 	b.w	67b0 <chargercomms()>
      if (SOCset != 0) {
    6d7e:	2b00      	cmp	r3, #0
    6d80:	f43f af6c 	beq.w	6c5c <loop+0x110>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    6d84:	4814      	ldr	r0, [pc, #80]	; (6dd8 <loop+0x28c>)
    6d86:	f7fa fdd1 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6d8a:	6929      	ldr	r1, [r5, #16]
    6d8c:	f006 f9f6 	bl	d17c <__aeabi_fcmplt>
    6d90:	2800      	cmp	r0, #0
    6d92:	f000 83d0 	beq.w	7536 <loop+0x9ea>
          if (debug != 0) {
    6d96:	f8df 9044 	ldr.w	r9, [pc, #68]	; 6ddc <loop+0x290>
    6d9a:	f8d9 3000 	ldr.w	r3, [r9]
    6d9e:	2b00      	cmp	r3, #0
    6da0:	f040 8429 	bne.w	75f6 <loop+0xaaa>
          ErrorReason = ErrorReason | 0x01;
    6da4:	4a0e      	ldr	r2, [pc, #56]	; (6de0 <loop+0x294>)
          bmsstatus = Error;
    6da6:	4f0b      	ldr	r7, [pc, #44]	; (6dd4 <loop+0x288>)
          ErrorReason = ErrorReason | 0x01;
    6da8:	6813      	ldr	r3, [r2, #0]
    6daa:	f043 0301 	orr.w	r3, r3, #1
    6dae:	6013      	str	r3, [r2, #0]
          bmsstatus = Error;
    6db0:	2305      	movs	r3, #5
    6db2:	703b      	strb	r3, [r7, #0]
    if (debug != 0) {
    6db4:	e75f      	b.n	6c76 <loop+0x12a>
    6db6:	bf00      	nop
    6db8:	1fffd1cc 	.word	0x1fffd1cc
    6dbc:	1fffd0c4 	.word	0x1fffd0c4
    6dc0:	1fffd0d8 	.word	0x1fffd0d8
    6dc4:	1fffd3c0 	.word	0x1fffd3c0
    6dc8:	1fffd004 	.word	0x1fffd004
    6dcc:	1fffcf4c 	.word	0x1fffcf4c
    6dd0:	1fffd008 	.word	0x1fffd008
    6dd4:	1fffcf34 	.word	0x1fffcf34
    6dd8:	1fff91f0 	.word	0x1fff91f0
    6ddc:	1fff884c 	.word	0x1fff884c
    6de0:	1fff91b0 	.word	0x1fff91b0
    6de4:	1fff91cc 	.word	0x1fff91cc
    6de8:	1fff8850 	.word	0x1fff8850
    6dec:	1fff91a4 	.word	0x1fff91a4
    6df0:	1fffcff8 	.word	0x1fffcff8
    6df4:	1fffcf3c 	.word	0x1fffcf3c
    6df8:	40052000 	.word	0x40052000
    6dfc:	1fff91ac 	.word	0x1fff91ac
    6e00:	1fffcfb0 	.word	0x1fffcfb0
      if (bmsstatus != Error && bmsstatus != Boot) {
    6e04:	2b05      	cmp	r3, #5
    6e06:	d081      	beq.n	6d0c <loop+0x1c0>
    6e08:	2b00      	cmp	r3, #0
    6e0a:	f43f af7f 	beq.w	6d0c <loop+0x1c0>
        contctrl = contctrl | 4;  //turn on negative contactor
    6e0e:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 70d0 <loop+0x584>
        if (settings.tripcont != 0) {
    6e12:	f895 20c9 	ldrb.w	r2, [r5, #201]	; 0xc9
        contctrl = contctrl | 4;  //turn on negative contactor
    6e16:	f8d8 3000 	ldr.w	r3, [r8]
    6e1a:	f043 0304 	orr.w	r3, r3, #4
    6e1e:	f8c8 3000 	str.w	r3, [r8]
        if (settings.tripcont != 0) {
    6e22:	2a00      	cmp	r2, #0
    6e24:	f040 8235 	bne.w	7292 <loop+0x746>
    6e28:	4caa      	ldr	r4, [pc, #680]	; (70d4 <loop+0x588>)
          if (storagemode == 1) {
    6e2a:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 70d8 <loop+0x58c>
        if (digitalRead(IN1) == LOW)  //Key OFF
    6e2e:	2011      	movs	r0, #17
    6e30:	f003 fad8 	bl	a3e4 <digitalRead>
          if (storagemode == 1) {
    6e34:	f8d9 3000 	ldr.w	r3, [r9]
        if (digitalRead(IN1) == LOW)  //Key OFF
    6e38:	2800      	cmp	r0, #0
    6e3a:	f000 8224 	beq.w	7286 <loop+0x73a>
          if (storagemode == 0) {
    6e3e:	b913      	cbnz	r3, 6e46 <loop+0x2fa>
            storagemode = 1;
    6e40:	2301      	movs	r3, #1
    6e42:	f8c9 3000 	str.w	r3, [r9]
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    6e46:	48a5      	ldr	r0, [pc, #660]	; (70dc <loop+0x590>)
    6e48:	f7fa fd96 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6e4c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    6e4e:	f006 f9b3 	bl	d1b8 <__aeabi_fcmpgt>
    6e52:	2800      	cmp	r0, #0
    6e54:	f040 8277 	bne.w	7346 <loop+0x7fa>
        if (storagemode == 1) {
    6e58:	f8d9 9000 	ldr.w	r9, [r9]
    6e5c:	4ba0      	ldr	r3, [pc, #640]	; (70e0 <loop+0x594>)
    6e5e:	f1b9 0f01 	cmp.w	r9, #1
    6e62:	6018      	str	r0, [r3, #0]
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0) {
    6e64:	489d      	ldr	r0, [pc, #628]	; (70dc <loop+0x590>)
        if (storagemode == 1) {
    6e66:	f000 8254 	beq.w	7312 <loop+0x7c6>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0) {
    6e6a:	f7fa fd85 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6e6e:	68e9      	ldr	r1, [r5, #12]
    6e70:	f006 f9a2 	bl	d1b8 <__aeabi_fcmpgt>
    6e74:	2800      	cmp	r0, #0
    6e76:	f000 82f7 	beq.w	7468 <loop+0x91c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6e7a:	6823      	ldr	r3, [r4, #0]
    6e7c:	9305      	str	r3, [sp, #20]
            if ((millis() - overtriptimer) > settings.triptime) {
    6e7e:	4b99      	ldr	r3, [pc, #612]	; (70e4 <loop+0x598>)
    6e80:	681a      	ldr	r2, [r3, #0]
	return ret;
    6e82:	9b05      	ldr	r3, [sp, #20]
    6e84:	1a9b      	subs	r3, r3, r2
    6e86:	f8b5 20ca 	ldrh.w	r2, [r5, #202]	; 0xca
    6e8a:	4293      	cmp	r3, r2
    6e8c:	f200 8331 	bhi.w	74f2 <loop+0x9a6>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    6e90:	4892      	ldr	r0, [pc, #584]	; (70dc <loop+0x590>)
    6e92:	f7fa fd4b 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6e96:	6929      	ldr	r1, [r5, #16]
    6e98:	f006 f970 	bl	d17c <__aeabi_fcmplt>
    6e9c:	b940      	cbnz	r0, 6eb0 <loop+0x364>
    6e9e:	488f      	ldr	r0, [pc, #572]	; (70dc <loop+0x590>)
    6ea0:	f7fa fd44 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6ea4:	69a9      	ldr	r1, [r5, #24]
    6ea6:	f006 f969 	bl	d17c <__aeabi_fcmplt>
    6eaa:	2800      	cmp	r0, #0
    6eac:	f000 8358 	beq.w	7560 <loop+0xa14>
          if (digitalRead(OUT1) == 1) {
    6eb0:	200b      	movs	r0, #11
    6eb2:	f003 fa97 	bl	a3e4 <digitalRead>
    6eb6:	2801      	cmp	r0, #1
    6eb8:	f000 8257 	beq.w	736a <loop+0x81e>
        if (SOCset == 1) {
    6ebc:	4b8a      	ldr	r3, [pc, #552]	; (70e8 <loop+0x59c>)
    6ebe:	681b      	ldr	r3, [r3, #0]
    6ec0:	2b01      	cmp	r3, #1
    6ec2:	f47f af3e 	bne.w	6d42 <loop+0x1f6>
          if (settings.tripcont == 0) {
    6ec6:	f895 30c9 	ldrb.w	r3, [r5, #201]	; 0xc9
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6eca:	4884      	ldr	r0, [pc, #528]	; (70dc <loop+0x590>)
          if (settings.tripcont == 0) {
    6ecc:	2b00      	cmp	r3, #0
    6ece:	f040 8371 	bne.w	75b4 <loop+0xa68>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6ed2:	f7fa fd2b 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6ed6:	6929      	ldr	r1, [r5, #16]
    6ed8:	f006 f950 	bl	d17c <__aeabi_fcmplt>
    6edc:	b940      	cbnz	r0, 6ef0 <loop+0x3a4>
    6ede:	487f      	ldr	r0, [pc, #508]	; (70dc <loop+0x590>)
    6ee0:	f7fa fd4a 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6ee4:	68e9      	ldr	r1, [r5, #12]
    6ee6:	f006 f967 	bl	d1b8 <__aeabi_fcmpgt>
    6eea:	2800      	cmp	r0, #0
    6eec:	f000 8424 	beq.w	7738 <loop+0xbec>
              digitalWrite(OUT2, HIGH);  //trip breaker
    6ef0:	2101      	movs	r1, #1
    6ef2:	200c      	movs	r0, #12
    6ef4:	f003 fa50 	bl	a398 <digitalWrite>
              bmsstatus = Error;
    6ef8:	2305      	movs	r3, #5
    6efa:	703b      	strb	r3, [r7, #0]
    6efc:	e721      	b.n	6d42 <loop+0x1f6>
      gaugeupdate();
    6efe:	f7fb fbef 	bl	26e0 <gaugeupdate()>
    6f02:	e6ca      	b.n	6c9a <loop+0x14e>
    if (SOCset == 1 && balancecells == 1) {
    6f04:	4b76      	ldr	r3, [pc, #472]	; (70e0 <loop+0x594>)
    6f06:	681b      	ldr	r3, [r3, #0]
    6f08:	2b01      	cmp	r3, #1
    6f0a:	f000 81fb 	beq.w	7304 <loop+0x7b8>
    if (settings.ESSmode == 1) {
    6f0e:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    6f12:	2b01      	cmp	r3, #1
    6f14:	f43f af36 	beq.w	6d84 <loop+0x238>
      if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    6f18:	4870      	ldr	r0, [pc, #448]	; (70dc <loop+0x590>)
    6f1a:	f7fa fd07 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6f1e:	6929      	ldr	r1, [r5, #16]
    6f20:	f006 f92c 	bl	d17c <__aeabi_fcmplt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f24:	6823      	ldr	r3, [r4, #0]
    6f26:	2800      	cmp	r0, #0
    6f28:	f040 816b 	bne.w	7202 <loop+0x6b6>
    6f2c:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
    6f2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
        UnderTime = millis() + settings.triptime;
    6f30:	f8b5 30ca 	ldrh.w	r3, [r5, #202]	; 0xca
    6f34:	4f6d      	ldr	r7, [pc, #436]	; (70ec <loop+0x5a0>)
    6f36:	4413      	add	r3, r2
    6f38:	4a6d      	ldr	r2, [pc, #436]	; (70f0 <loop+0x5a4>)
    6f3a:	6013      	str	r3, [r2, #0]
      if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6f3c:	4867      	ldr	r0, [pc, #412]	; (70dc <loop+0x590>)
    6f3e:	f7fa fd1b 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6f42:	6929      	ldr	r1, [r5, #16]
    6f44:	f006 f91a 	bl	d17c <__aeabi_fcmplt>
    6f48:	2800      	cmp	r0, #0
    6f4a:	f000 81d1 	beq.w	72f0 <loop+0x7a4>
        bmsstatus = Error;
    6f4e:	2305      	movs	r3, #5
    6f50:	703b      	strb	r3, [r7, #0]
      if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    6f52:	4862      	ldr	r0, [pc, #392]	; (70dc <loop+0x590>)
    6f54:	f7fa fd10 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6f58:	68e9      	ldr	r1, [r5, #12]
    6f5a:	f006 f92d 	bl	d1b8 <__aeabi_fcmpgt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f5e:	6823      	ldr	r3, [r4, #0]
    6f60:	2800      	cmp	r0, #0
    6f62:	f000 81ae 	beq.w	72c2 <loop+0x776>
    6f66:	930f      	str	r3, [sp, #60]	; 0x3c
        if (OverTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    6f68:	4b62      	ldr	r3, [pc, #392]	; (70f4 <loop+0x5a8>)
    if (debug != 0) {
    6f6a:	f8df 918c 	ldr.w	r9, [pc, #396]	; 70f8 <loop+0x5ac>
        if (OverTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    6f6e:	681a      	ldr	r2, [r3, #0]
	return ret;
    6f70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    6f72:	429a      	cmp	r2, r3
    6f74:	f080 81ae 	bcs.w	72d4 <loop+0x788>
          bmsstatus = Error;
    6f78:	2305      	movs	r3, #5
    6f7a:	703b      	strb	r3, [r7, #0]
    if (debug != 0) {
    6f7c:	f8d9 3000 	ldr.w	r3, [r9]
    6f80:	e671      	b.n	6c66 <loop+0x11a>
    if (bmsstatus == Error && ErrorReason == 0) {
    6f82:	4b5e      	ldr	r3, [pc, #376]	; (70fc <loop+0x5b0>)
    6f84:	681b      	ldr	r3, [r3, #0]
    6f86:	2b00      	cmp	r3, #0
    6f88:	f47f aeb6 	bne.w	6cf8 <loop+0x1ac>
      bmsstatus = Boot;
    6f8c:	703b      	strb	r3, [r7, #0]
    6f8e:	e6b3      	b.n	6cf8 <loop+0x1ac>
      inputdebug();
    6f90:	f7ff f990 	bl	62b4 <inputdebug()>
    6f94:	e67b      	b.n	6c8e <loop+0x142>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6f96:	6823      	ldr	r3, [r4, #0]
    6f98:	9311      	str	r3, [sp, #68]	; 0x44
      bms.printAllCSV(millis(), currentact, SOC);
    6f9a:	4a59      	ldr	r2, [pc, #356]	; (7100 <loop+0x5b4>)
    6f9c:	4b59      	ldr	r3, [pc, #356]	; (7104 <loop+0x5b8>)
	return ret;
    6f9e:	9911      	ldr	r1, [sp, #68]	; 0x44
    6fa0:	681b      	ldr	r3, [r3, #0]
    6fa2:	6812      	ldr	r2, [r2, #0]
    6fa4:	484d      	ldr	r0, [pc, #308]	; (70dc <loop+0x590>)
    6fa6:	f7fa ff3f 	bl	1e28 <BMSModuleManager::printAllCSV(unsigned long, float, int)>
    6faa:	e66b      	b.n	6c84 <loop+0x138>
      if (cellspresent != bms.seriescells() || cellspresent != (settings.Scells * settings.Pstrings))  //detect a fault in cells detected
    6fac:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    6fae:	6daa      	ldr	r2, [r5, #88]	; 0x58
    6fb0:	fb02 f303 	mul.w	r3, r2, r3
    6fb4:	4298      	cmp	r0, r3
    6fb6:	f47f ae87 	bne.w	6cc8 <loop+0x17c>
        ErrorReason = ErrorReason & ~0x04;
    6fba:	4a50      	ldr	r2, [pc, #320]	; (70fc <loop+0x5b0>)
    6fbc:	6813      	ldr	r3, [r2, #0]
    6fbe:	f023 0304 	bic.w	r3, r3, #4
    6fc2:	6013      	str	r3, [r2, #0]
    6fc4:	e68c      	b.n	6ce0 <loop+0x194>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    6fc6:	2102      	movs	r1, #2
    6fc8:	484f      	ldr	r0, [pc, #316]	; (7108 <loop+0x5bc>)
    6fca:	f005 f859 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    6fce:	484f      	ldr	r0, [pc, #316]	; (710c <loop+0x5c0>)
    6fd0:	f002 fb10 	bl	95f4 <Print::println()>
    6fd4:	211d      	movs	r1, #29
    6fd6:	484e      	ldr	r0, [pc, #312]	; (7110 <loop+0x5c4>)
    6fd8:	f005 f852 	bl	c080 <usb_serial_write>
    6fdc:	2102      	movs	r1, #2
    6fde:	484a      	ldr	r0, [pc, #296]	; (7108 <loop+0x5bc>)
    6fe0:	f005 f84e 	bl	c080 <usb_serial_write>
    6fe4:	4849      	ldr	r0, [pc, #292]	; (710c <loop+0x5c0>)
    6fe6:	f002 fb05 	bl	95f4 <Print::println()>
    6fea:	e672      	b.n	6cd2 <loop+0x186>
    6fec:	2102      	movs	r1, #2
    6fee:	4846      	ldr	r0, [pc, #280]	; (7108 <loop+0x5bc>)
    6ff0:	f005 f846 	bl	c080 <usb_serial_write>
    6ff4:	4845      	ldr	r0, [pc, #276]	; (710c <loop+0x5c0>)
    6ff6:	f002 fafd 	bl	95f4 <Print::println()>
    6ffa:	2119      	movs	r1, #25
    6ffc:	4845      	ldr	r0, [pc, #276]	; (7114 <loop+0x5c8>)
    6ffe:	f005 f83f 	bl	c080 <usb_serial_write>
    7002:	2102      	movs	r1, #2
    7004:	4840      	ldr	r0, [pc, #256]	; (7108 <loop+0x5bc>)
    7006:	f005 f83b 	bl	c080 <usb_serial_write>
    700a:	4840      	ldr	r0, [pc, #256]	; (710c <loop+0x5c0>)
    700c:	f002 faf2 	bl	95f4 <Print::println()>
    7010:	e601      	b.n	6c16 <loop+0xca>
          Discharge = 0;
    7012:	4b41      	ldr	r3, [pc, #260]	; (7118 <loop+0x5cc>)
    7014:	4c2f      	ldr	r4, [pc, #188]	; (70d4 <loop+0x588>)
    7016:	2200      	movs	r2, #0
    7018:	601a      	str	r2, [r3, #0]
          Prechargecon();
    701a:	f7fc faa3 	bl	3564 <Prechargecon()>
          break;
    701e:	e690      	b.n	6d42 <loop+0x1f6>
          Discharge = 0;
    7020:	4b3d      	ldr	r3, [pc, #244]	; (7118 <loop+0x5cc>)
    7022:	2400      	movs	r4, #0
          digitalWrite(OUT4, LOW);
    7024:	4621      	mov	r1, r4
    7026:	2015      	movs	r0, #21
          Discharge = 0;
    7028:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    702a:	f003 f9b5 	bl	a398 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    702e:	4621      	mov	r1, r4
    7030:	2014      	movs	r0, #20
    7032:	f003 f9b1 	bl	a398 <digitalWrite>
          digitalWrite(OUT2, LOW);
    7036:	4621      	mov	r1, r4
    7038:	200c      	movs	r0, #12
    703a:	f003 f9ad 	bl	a398 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    703e:	4621      	mov	r1, r4
    7040:	200b      	movs	r0, #11
    7042:	f003 f9a9 	bl	a398 <digitalWrite>
          contctrl = 0;
    7046:	4b22      	ldr	r3, [pc, #136]	; (70d0 <loop+0x584>)
    7048:	601c      	str	r4, [r3, #0]
          bmsstatus = Ready;
    704a:	2301      	movs	r3, #1
    704c:	4c21      	ldr	r4, [pc, #132]	; (70d4 <loop+0x588>)
    704e:	703b      	strb	r3, [r7, #0]
          break;
    7050:	e677      	b.n	6d42 <loop+0x1f6>
          Discharge = 0;
    7052:	4b31      	ldr	r3, [pc, #196]	; (7118 <loop+0x5cc>)
    7054:	2400      	movs	r4, #0
          digitalWrite(OUT4, LOW);
    7056:	4621      	mov	r1, r4
    7058:	2015      	movs	r0, #21
          Discharge = 0;
    705a:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    705c:	f003 f99c 	bl	a398 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    7060:	4621      	mov	r1, r4
    7062:	2014      	movs	r0, #20
    7064:	f003 f998 	bl	a398 <digitalWrite>
          digitalWrite(OUT2, LOW);
    7068:	4621      	mov	r1, r4
    706a:	200c      	movs	r0, #12
    706c:	f003 f994 	bl	a398 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    7070:	4621      	mov	r1, r4
    7072:	200b      	movs	r0, #11
    7074:	f003 f990 	bl	a398 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    7078:	4b15      	ldr	r3, [pc, #84]	; (70d0 <loop+0x584>)
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    707a:	4818      	ldr	r0, [pc, #96]	; (70dc <loop+0x590>)
          contctrl = 0;             //turn off out 5 and 6
    707c:	601c      	str	r4, [r3, #0]
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    707e:	f7fa fc7b 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7082:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    7084:	f006 f898 	bl	d1b8 <__aeabi_fcmpgt>
    7088:	2800      	cmp	r0, #0
    708a:	f040 81db 	bne.w	7444 <loop+0x8f8>
    708e:	4b14      	ldr	r3, [pc, #80]	; (70e0 <loop+0x594>)
    7090:	6018      	str	r0, [r3, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    7092:	2012      	movs	r0, #18
    7094:	f003 f9a6 	bl	a3e4 <digitalRead>
    7098:	2801      	cmp	r0, #1
    709a:	f000 82ca 	beq.w	7632 <loop+0xae6>
    709e:	4c0d      	ldr	r4, [pc, #52]	; (70d4 <loop+0x588>)
          if (digitalRead(IN1) == HIGH && bms.getLowCellVolt() > settings.DischVsetpoint)  //detect Key ON
    70a0:	2011      	movs	r0, #17
    70a2:	f003 f99f 	bl	a3e4 <digitalRead>
    70a6:	2801      	cmp	r0, #1
    70a8:	f47f ae4b 	bne.w	6d42 <loop+0x1f6>
    70ac:	480b      	ldr	r0, [pc, #44]	; (70dc <loop+0x590>)
    70ae:	f7fa fc3d 	bl	192c <BMSModuleManager::getLowCellVolt()>
    70b2:	69a9      	ldr	r1, [r5, #24]
    70b4:	f006 f880 	bl	d1b8 <__aeabi_fcmpgt>
    70b8:	2800      	cmp	r0, #0
    70ba:	f43f ae42 	beq.w	6d42 <loop+0x1f6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    70be:	6822      	ldr	r2, [r4, #0]
    70c0:	920a      	str	r2, [sp, #40]	; 0x28
            bmsstatus = Precharge;
    70c2:	2304      	movs	r3, #4
    70c4:	703b      	strb	r3, [r7, #0]
            Pretimer = millis();
    70c6:	4b15      	ldr	r3, [pc, #84]	; (711c <loop+0x5d0>)
	return ret;
    70c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    70ca:	601a      	str	r2, [r3, #0]
    70cc:	e639      	b.n	6d42 <loop+0x1f6>
    70ce:	bf00      	nop
    70d0:	1fffcfb0 	.word	0x1fffcfb0
    70d4:	1fffd3c0 	.word	0x1fffd3c0
    70d8:	1fffd1b0 	.word	0x1fffd1b0
    70dc:	1fff91f0 	.word	0x1fff91f0
    70e0:	1fff91e8 	.word	0x1fff91e8
    70e4:	1fffd0cc 	.word	0x1fffd0cc
    70e8:	1fff91cc 	.word	0x1fff91cc
    70ec:	1fffcf34 	.word	0x1fffcf34
    70f0:	1fff91d4 	.word	0x1fff91d4
    70f4:	1fff91b4 	.word	0x1fff91b4
    70f8:	1fff884c 	.word	0x1fff884c
    70fc:	1fff91b0 	.word	0x1fff91b0
    7100:	1fffcfc4 	.word	0x1fffcfc4
    7104:	1fff8828 	.word	0x1fff8828
    7108:	00014ea8 	.word	0x00014ea8
    710c:	1fff89fc 	.word	0x1fff89fc
    7110:	0001503c 	.word	0x0001503c
    7114:	0001505c 	.word	0x0001505c
    7118:	1fff91ac 	.word	0x1fff91ac
    711c:	1fff91b8 	.word	0x1fff91b8
          Discharge = 1;
    7120:	4ba3      	ldr	r3, [pc, #652]	; (73b0 <loop+0x864>)
    7122:	2401      	movs	r4, #1
          if (digitalRead(IN1) == LOW)  //Key OFF
    7124:	2011      	movs	r0, #17
          Discharge = 1;
    7126:	601c      	str	r4, [r3, #0]
          if (digitalRead(IN1) == LOW)  //Key OFF
    7128:	f003 f95c 	bl	a3e4 <digitalRead>
    712c:	b900      	cbnz	r0, 7130 <loop+0x5e4>
            bmsstatus = Ready;
    712e:	703c      	strb	r4, [r7, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    7130:	2012      	movs	r0, #18
    7132:	f003 f957 	bl	a3e4 <digitalRead>
    7136:	2801      	cmp	r0, #1
    7138:	f47f ae02 	bne.w	6d40 <loop+0x1f4>
    713c:	489d      	ldr	r0, [pc, #628]	; (73b4 <loop+0x868>)
    713e:	f7fa fc1b 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7142:	69e9      	ldr	r1, [r5, #28]
    7144:	4604      	mov	r4, r0
    7146:	6968      	ldr	r0, [r5, #20]
    7148:	f005 fd70 	bl	cc2c <__aeabi_fsub>
    714c:	4601      	mov	r1, r0
    714e:	4620      	mov	r0, r4
    7150:	f006 f814 	bl	d17c <__aeabi_fcmplt>
    7154:	2800      	cmp	r0, #0
    7156:	f43f adf3 	beq.w	6d40 <loop+0x1f4>
            bmsstatus = Charge;
    715a:	2303      	movs	r3, #3
    715c:	4c96      	ldr	r4, [pc, #600]	; (73b8 <loop+0x86c>)
    715e:	703b      	strb	r3, [r7, #0]
    7160:	e5ef      	b.n	6d42 <loop+0x1f6>
          Discharge = 0;
    7162:	4b93      	ldr	r3, [pc, #588]	; (73b0 <loop+0x864>)
    7164:	2400      	movs	r4, #0
          digitalWrite(OUT4, LOW);
    7166:	4621      	mov	r1, r4
    7168:	2015      	movs	r0, #21
          Discharge = 0;
    716a:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    716c:	f003 f914 	bl	a398 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    7170:	4621      	mov	r1, r4
    7172:	2014      	movs	r0, #20
    7174:	f003 f910 	bl	a398 <digitalWrite>
          digitalWrite(OUT2, LOW);
    7178:	4621      	mov	r1, r4
    717a:	200c      	movs	r0, #12
    717c:	f003 f90c 	bl	a398 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    7180:	4621      	mov	r1, r4
    7182:	200b      	movs	r0, #11
    7184:	f003 f908 	bl	a398 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    7188:	4b8c      	ldr	r3, [pc, #560]	; (73bc <loop+0x870>)
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    718a:	488a      	ldr	r0, [pc, #552]	; (73b4 <loop+0x868>)
          contctrl = 0;             //turn off out 5 and 6
    718c:	601c      	str	r4, [r3, #0]
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    718e:	f7fa fbcd 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7192:	6929      	ldr	r1, [r5, #16]
    7194:	f006 f806 	bl	d1a4 <__aeabi_fcmpge>
    7198:	2800      	cmp	r0, #0
    719a:	f43f add1 	beq.w	6d40 <loop+0x1f4>
    719e:	4885      	ldr	r0, [pc, #532]	; (73b4 <loop+0x868>)
    71a0:	f7fa fbea 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    71a4:	68e9      	ldr	r1, [r5, #12]
    71a6:	f005 fff3 	bl	d190 <__aeabi_fcmple>
    71aa:	2800      	cmp	r0, #0
    71ac:	f43f adc8 	beq.w	6d40 <loop+0x1f4>
    71b0:	2011      	movs	r0, #17
    71b2:	f003 f917 	bl	a3e4 <digitalRead>
    71b6:	2800      	cmp	r0, #0
    71b8:	f43f af47 	beq.w	704a <loop+0x4fe>
    71bc:	e5c0      	b.n	6d40 <loop+0x1f4>
          Discharge = 0;
    71be:	4b7c      	ldr	r3, [pc, #496]	; (73b0 <loop+0x864>)
    71c0:	4c7f      	ldr	r4, [pc, #508]	; (73c0 <loop+0x874>)
    71c2:	2200      	movs	r2, #0
          digitalWrite(OUT3, HIGH);  //enable charger
    71c4:	2101      	movs	r1, #1
    71c6:	2014      	movs	r0, #20
          Discharge = 0;
    71c8:	601a      	str	r2, [r3, #0]
          digitalWrite(OUT3, HIGH);  //enable charger
    71ca:	f003 f8e5 	bl	a398 <digitalWrite>
          if (bms.getHighCellVolt() > settings.balanceVoltage) {
    71ce:	4879      	ldr	r0, [pc, #484]	; (73b4 <loop+0x868>)
    71d0:	f7fa fbd2 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    71d4:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    71d6:	f005 ffef 	bl	d1b8 <__aeabi_fcmpgt>
    71da:	3800      	subs	r0, #0
    71dc:	bf18      	it	ne
    71de:	2001      	movne	r0, #1
    71e0:	6020      	str	r0, [r4, #0]
          if (bms.getHighCellVolt() > settings.ChargeVsetpoint) {
    71e2:	4874      	ldr	r0, [pc, #464]	; (73b4 <loop+0x868>)
    71e4:	f7fa fbc8 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    71e8:	6969      	ldr	r1, [r5, #20]
    71ea:	f005 ffe5 	bl	d1b8 <__aeabi_fcmpgt>
    71ee:	2800      	cmp	r0, #0
    71f0:	f040 8100 	bne.w	73f4 <loop+0x8a8>
          if (digitalRead(IN3) == LOW)  //detect AC not present for charging
    71f4:	2012      	movs	r0, #18
    71f6:	f003 f8f5 	bl	a3e4 <digitalRead>
    71fa:	2800      	cmp	r0, #0
    71fc:	f43f af25 	beq.w	704a <loop+0x4fe>
    7200:	e59e      	b.n	6d40 <loop+0x1f4>
        if (UnderTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    7202:	4a70      	ldr	r2, [pc, #448]	; (73c4 <loop+0x878>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7204:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    7206:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7208:	6812      	ldr	r2, [r2, #0]
          bmsstatus = Error;
    720a:	4f6f      	ldr	r7, [pc, #444]	; (73c8 <loop+0x87c>)
        if (UnderTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    720c:	429a      	cmp	r2, r3
          bmsstatus = Error;
    720e:	bf3c      	itt	cc
    7210:	2305      	movcc	r3, #5
    7212:	703b      	strbcc	r3, [r7, #0]
    7214:	e692      	b.n	6f3c <loop+0x3f0>
          if (settings.tripcont == 0) {
    7216:	f895 30c9 	ldrb.w	r3, [r5, #201]	; 0xc9
    721a:	2b00      	cmp	r3, #0
    721c:	f040 80bf 	bne.w	739e <loop+0x852>
            digitalWrite(OUT2, HIGH);  //trip breaker
    7220:	200c      	movs	r0, #12
    7222:	f003 f8b9 	bl	a398 <digitalWrite>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint && bms.getHighTemperature() < settings.OverTSetpoint && cellspresent == bms.seriescells() && cellspresent == (settings.Scells * settings.Pstrings)) {
    7226:	4863      	ldr	r0, [pc, #396]	; (73b4 <loop+0x868>)
    7228:	f7fa fb80 	bl	192c <BMSModuleManager::getLowCellVolt()>
    722c:	6929      	ldr	r1, [r5, #16]
    722e:	f005 ffc3 	bl	d1b8 <__aeabi_fcmpgt>
    7232:	2800      	cmp	r0, #0
    7234:	f43f ad84 	beq.w	6d40 <loop+0x1f4>
    7238:	485e      	ldr	r0, [pc, #376]	; (73b4 <loop+0x868>)
    723a:	f7fa fb9d 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    723e:	68e9      	ldr	r1, [r5, #12]
    7240:	f005 ff9c 	bl	d17c <__aeabi_fcmplt>
    7244:	2800      	cmp	r0, #0
    7246:	f43f ad7b 	beq.w	6d40 <loop+0x1f4>
    724a:	485a      	ldr	r0, [pc, #360]	; (73b4 <loop+0x868>)
    724c:	f7fa fc44 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    7250:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    7252:	f005 ff93 	bl	d17c <__aeabi_fcmplt>
    7256:	2800      	cmp	r0, #0
    7258:	f43f ad72 	beq.w	6d40 <loop+0x1f4>
    725c:	4855      	ldr	r0, [pc, #340]	; (73b4 <loop+0x868>)
    725e:	f7fa f8ad 	bl	13bc <BMSModuleManager::seriescells()>
    7262:	4a5a      	ldr	r2, [pc, #360]	; (73cc <loop+0x880>)
    7264:	6812      	ldr	r2, [r2, #0]
    7266:	4290      	cmp	r0, r2
    7268:	f47f ad6a 	bne.w	6d40 <loop+0x1f4>
    726c:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    726e:	6da9      	ldr	r1, [r5, #88]	; 0x58
    7270:	fb01 f202 	mul.w	r2, r1, r2
    7274:	4290      	cmp	r0, r2
    7276:	f47f ad63 	bne.w	6d40 <loop+0x1f4>
            if (ErrorReason == 0) {
    727a:	4b55      	ldr	r3, [pc, #340]	; (73d0 <loop+0x884>)
    727c:	681b      	ldr	r3, [r3, #0]
    727e:	2b00      	cmp	r3, #0
    7280:	f43f aee3 	beq.w	704a <loop+0x4fe>
    7284:	e55c      	b.n	6d40 <loop+0x1f4>
          if (storagemode == 1) {
    7286:	2b01      	cmp	r3, #1
    7288:	f47f addd 	bne.w	6e46 <loop+0x2fa>
            storagemode = 0;
    728c:	f8c9 0000 	str.w	r0, [r9]
    7290:	e5d9      	b.n	6e46 <loop+0x2fa>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    7292:	4848      	ldr	r0, [pc, #288]	; (73b4 <loop+0x868>)
    7294:	f7fa fb4a 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7298:	6929      	ldr	r1, [r5, #16]
    729a:	f005 ff8d 	bl	d1b8 <__aeabi_fcmpgt>
    729e:	b140      	cbz	r0, 72b2 <loop+0x766>
    72a0:	4844      	ldr	r0, [pc, #272]	; (73b4 <loop+0x868>)
    72a2:	f7fa fb69 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    72a6:	68e9      	ldr	r1, [r5, #12]
    72a8:	f005 ff68 	bl	d17c <__aeabi_fcmplt>
    72ac:	2800      	cmp	r0, #0
    72ae:	f040 81d8 	bne.w	7662 <loop+0xb16>
            digitalWrite(OUT4, LOW);  //ensure precharge is low
    72b2:	2100      	movs	r1, #0
    72b4:	2015      	movs	r0, #21
    72b6:	f003 f86f 	bl	a398 <digitalWrite>
            mainconttimer = 0;
    72ba:	4b46      	ldr	r3, [pc, #280]	; (73d4 <loop+0x888>)
    72bc:	2200      	movs	r2, #0
    72be:	601a      	str	r2, [r3, #0]
    72c0:	e5b2      	b.n	6e28 <loop+0x2dc>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    72c2:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    72c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
        OverTime = millis() + settings.triptime;
    72c6:	f8b5 30ca 	ldrh.w	r3, [r5, #202]	; 0xca
    if (debug != 0) {
    72ca:	f8df 910c 	ldr.w	r9, [pc, #268]	; 73d8 <loop+0x88c>
        OverTime = millis() + settings.triptime;
    72ce:	4413      	add	r3, r2
    72d0:	4a42      	ldr	r2, [pc, #264]	; (73dc <loop+0x890>)
    72d2:	6013      	str	r3, [r2, #0]
    if (debug != 0) {
    72d4:	f8d9 3000 	ldr.w	r3, [r9]
    72d8:	e4c5      	b.n	6c66 <loop+0x11a>
      cellspresent = bms.seriescells();
    72da:	f7fa f86f 	bl	13bc <BMSModuleManager::seriescells()>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    72de:	6d2b      	ldr	r3, [r5, #80]	; 0x50
      cellspresent = bms.seriescells();
    72e0:	6030      	str	r0, [r6, #0]
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    72e2:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    72e4:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    72e8:	4832      	ldr	r0, [pc, #200]	; (73b4 <loop+0x868>)
    72ea:	f7fa fb73 	bl	19d4 <BMSModuleManager::setSensors(int, float, float)>
    72ee:	e4f7      	b.n	6ce0 <loop+0x194>
      if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    72f0:	4830      	ldr	r0, [pc, #192]	; (73b4 <loop+0x868>)
    72f2:	f7fa fbf1 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    72f6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    72f8:	f005 ff5e 	bl	d1b8 <__aeabi_fcmpgt>
    72fc:	2800      	cmp	r0, #0
    72fe:	f47f ae26 	bne.w	6f4e <loop+0x402>
    7302:	e626      	b.n	6f52 <loop+0x406>
      bms.balanceCells(0);  //1 is debug
    7304:	482b      	ldr	r0, [pc, #172]	; (73b4 <loop+0x868>)
    7306:	2100      	movs	r1, #0
    7308:	f7f9 fd7c 	bl	e04 <BMSModuleManager::balanceCells(int)>
      if (SOCset != 0) {
    730c:	f8da 3000 	ldr.w	r3, [sl]
    7310:	e49c      	b.n	6c4c <loop+0x100>
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0) {
    7312:	f7fa fb31 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7316:	6a29      	ldr	r1, [r5, #32]
    7318:	f005 ff4e 	bl	d1b8 <__aeabi_fcmpgt>
    731c:	4682      	mov	sl, r0
    731e:	2800      	cmp	r0, #0
    7320:	f040 80cb 	bne.w	74ba <loop+0x96e>
    7324:	4b2e      	ldr	r3, [pc, #184]	; (73e0 <loop+0x894>)
    7326:	681b      	ldr	r3, [r3, #0]
    7328:	2b00      	cmp	r3, #0
    732a:	f000 80c6 	beq.w	74ba <loop+0x96e>
            if (Charged == 1) {
    732e:	4b2d      	ldr	r3, [pc, #180]	; (73e4 <loop+0x898>)
    7330:	f8d3 b000 	ldr.w	fp, [r3]
    7334:	f1bb 0f01 	cmp.w	fp, #1
    7338:	f000 81e6 	beq.w	7708 <loop+0xbbc>
                digitalWrite(OUT3, HIGH);  //turn on charger
    733c:	2101      	movs	r1, #1
    733e:	2014      	movs	r0, #20
    7340:	f003 f82a 	bl	a398 <digitalWrite>
    7344:	e5a4      	b.n	6e90 <loop+0x344>
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    7346:	481b      	ldr	r0, [pc, #108]	; (73b4 <loop+0x868>)
    7348:	f7fa fb16 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    734c:	4682      	mov	sl, r0
    734e:	4819      	ldr	r0, [pc, #100]	; (73b4 <loop+0x868>)
    7350:	f7fa faec 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7354:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    7356:	f005 fc6b 	bl	cc30 <__addsf3>
    735a:	4601      	mov	r1, r0
    735c:	4650      	mov	r0, sl
    735e:	f005 ff2b 	bl	d1b8 <__aeabi_fcmpgt>
    7362:	3800      	subs	r0, #0
    7364:	bf18      	it	ne
    7366:	2001      	movne	r0, #1
    7368:	e576      	b.n	6e58 <loop+0x30c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    736a:	6823      	ldr	r3, [r4, #0]
    736c:	9307      	str	r3, [sp, #28]
            if ((millis() - undertriptimer) > settings.triptime) {
    736e:	4b1e      	ldr	r3, [pc, #120]	; (73e8 <loop+0x89c>)
    7370:	681a      	ldr	r2, [r3, #0]
	return ret;
    7372:	9b07      	ldr	r3, [sp, #28]
    7374:	1a9b      	subs	r3, r3, r2
    7376:	f8b5 20ca 	ldrh.w	r2, [r5, #202]	; 0xca
    737a:	4293      	cmp	r3, r2
    737c:	f67f ad9e 	bls.w	6ebc <loop+0x370>
              Serial.println();
    7380:	481a      	ldr	r0, [pc, #104]	; (73ec <loop+0x8a0>)
    7382:	f002 f937 	bl	95f4 <Print::println()>
    7386:	2112      	movs	r1, #18
    7388:	4819      	ldr	r0, [pc, #100]	; (73f0 <loop+0x8a4>)
    738a:	f004 fe79 	bl	c080 <usb_serial_write>
    738e:	4817      	ldr	r0, [pc, #92]	; (73ec <loop+0x8a0>)
    7390:	f002 f930 	bl	95f4 <Print::println()>
              digitalWrite(OUT1, LOW);  //turn off discharge
    7394:	2100      	movs	r1, #0
    7396:	200b      	movs	r0, #11
    7398:	f002 fffe 	bl	a398 <digitalWrite>
    739c:	e58e      	b.n	6ebc <loop+0x370>
            digitalWrite(OUT2, LOW);  //turn off contactor
    739e:	4621      	mov	r1, r4
    73a0:	200c      	movs	r0, #12
    73a2:	f002 fff9 	bl	a398 <digitalWrite>
            digitalWrite(OUT4, LOW);  //ensure precharge is low
    73a6:	4621      	mov	r1, r4
    73a8:	2015      	movs	r0, #21
    73aa:	f002 fff5 	bl	a398 <digitalWrite>
    73ae:	e73a      	b.n	7226 <loop+0x6da>
    73b0:	1fff91ac 	.word	0x1fff91ac
    73b4:	1fff91f0 	.word	0x1fff91f0
    73b8:	1fffd3c0 	.word	0x1fffd3c0
    73bc:	1fffcfb0 	.word	0x1fffcfb0
    73c0:	1fff91e8 	.word	0x1fff91e8
    73c4:	1fff91d4 	.word	0x1fff91d4
    73c8:	1fffcf34 	.word	0x1fffcf34
    73cc:	1fffcf3c 	.word	0x1fffcf3c
    73d0:	1fff91b0 	.word	0x1fff91b0
    73d4:	1fffd02c 	.word	0x1fffd02c
    73d8:	1fff884c 	.word	0x1fff884c
    73dc:	1fff91b4 	.word	0x1fff91b4
    73e0:	1fffcf40 	.word	0x1fffcf40
    73e4:	1fff91a8 	.word	0x1fff91a8
    73e8:	1fffd1b4 	.word	0x1fffd1b4
    73ec:	1fff89fc 	.word	0x1fff89fc
    73f0:	00014fec 	.word	0x00014fec
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    73f4:	48b0      	ldr	r0, [pc, #704]	; (76b8 <loop+0xb6c>)
    73f6:	f7fa fb73 	bl	1ae0 <BMSModuleManager::getAvgCellVolt()>
    73fa:	69e9      	ldr	r1, [r5, #28]
    73fc:	4604      	mov	r4, r0
    73fe:	6968      	ldr	r0, [r5, #20]
    7400:	f005 fc14 	bl	cc2c <__aeabi_fsub>
    7404:	4601      	mov	r1, r0
    7406:	4620      	mov	r0, r4
    7408:	f005 fed6 	bl	d1b8 <__aeabi_fcmpgt>
    SOC = 100;
    740c:	4bab      	ldr	r3, [pc, #684]	; (76bc <loop+0xb70>)
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    740e:	2800      	cmp	r0, #0
    7410:	f000 8125 	beq.w	765e <loop+0xb12>
    SOC = 100;
    7414:	2264      	movs	r2, #100	; 0x64
    SOC = 95;
    7416:	601a      	str	r2, [r3, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7418:	6daa      	ldr	r2, [r5, #88]	; 0x58
    741a:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    741c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7420:	fb02 f303 	mul.w	r3, r2, r3
    7424:	fb03 f000 	mul.w	r0, r3, r0
    7428:	f005 fcb6 	bl	cd98 <__aeabi_i2f>
    742c:	49a4      	ldr	r1, [pc, #656]	; (76c0 <loop+0xb74>)
    742e:	f005 fdbb 	bl	cfa8 <__aeabi_fdiv>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7432:	4aa4      	ldr	r2, [pc, #656]	; (76c4 <loop+0xb78>)
            digitalWrite(OUT3, LOW);  //turn off charger
    7434:	2100      	movs	r1, #0
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7436:	6010      	str	r0, [r2, #0]
            digitalWrite(OUT3, LOW);  //turn off charger
    7438:	2014      	movs	r0, #20
    743a:	f002 ffad 	bl	a398 <digitalWrite>
            bmsstatus = Ready;
    743e:	2301      	movs	r3, #1
    7440:	703b      	strb	r3, [r7, #0]
    7442:	e6d7      	b.n	71f4 <loop+0x6a8>
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    7444:	489c      	ldr	r0, [pc, #624]	; (76b8 <loop+0xb6c>)
    7446:	f7fa fa97 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    744a:	4604      	mov	r4, r0
    744c:	489a      	ldr	r0, [pc, #616]	; (76b8 <loop+0xb6c>)
    744e:	f7fa fa6d 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7452:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    7454:	f005 fbec 	bl	cc30 <__addsf3>
    7458:	4601      	mov	r1, r0
    745a:	4620      	mov	r0, r4
    745c:	f005 feac 	bl	d1b8 <__aeabi_fcmpgt>
    7460:	3800      	subs	r0, #0
    7462:	bf18      	it	ne
    7464:	2001      	movne	r0, #1
    7466:	e612      	b.n	708e <loop+0x542>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0) {
    7468:	4893      	ldr	r0, [pc, #588]	; (76b8 <loop+0xb6c>)
    746a:	f7fa fa85 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    746e:	6969      	ldr	r1, [r5, #20]
    7470:	f005 fea2 	bl	d1b8 <__aeabi_fcmpgt>
    7474:	2800      	cmp	r0, #0
    7476:	f47f ad00 	bne.w	6e7a <loop+0x32e>
    747a:	4b93      	ldr	r3, [pc, #588]	; (76c8 <loop+0xb7c>)
    747c:	681b      	ldr	r3, [r3, #0]
    747e:	2b00      	cmp	r3, #0
    7480:	f43f acfb 	beq.w	6e7a <loop+0x32e>
            if (Charged == 1) {
    7484:	f8df b244 	ldr.w	fp, [pc, #580]	; 76cc <loop+0xb80>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7488:	6823      	ldr	r3, [r4, #0]
    748a:	f8db a000 	ldr.w	sl, [fp]
    748e:	9306      	str	r3, [sp, #24]
            overtriptimer = millis();
    7490:	4b8f      	ldr	r3, [pc, #572]	; (76d0 <loop+0xb84>)
	return ret;
    7492:	9a06      	ldr	r2, [sp, #24]
    7494:	601a      	str	r2, [r3, #0]
            if (Charged == 1) {
    7496:	f1ba 0f01 	cmp.w	sl, #1
    749a:	f000 8167 	beq.w	776c <loop+0xc20>
              if (digitalRead(OUT3) == 0) {
    749e:	2014      	movs	r0, #20
    74a0:	f002 ffa0 	bl	a3e4 <digitalRead>
    74a4:	2800      	cmp	r0, #0
    74a6:	f47f acf3 	bne.w	6e90 <loop+0x344>
                Serial.println();
    74aa:	488a      	ldr	r0, [pc, #552]	; (76d4 <loop+0xb88>)
    74ac:	f002 f8a2 	bl	95f4 <Print::println()>
                Serial.println("Reset Over Voltage Trip Not Charged");
    74b0:	4989      	ldr	r1, [pc, #548]	; (76d8 <loop+0xb8c>)
    74b2:	4888      	ldr	r0, [pc, #544]	; (76d4 <loop+0xb88>)
    74b4:	f7fa ffbe 	bl	2434 <Print::println(char const*) [clone .isra.0]>
    74b8:	e740      	b.n	733c <loop+0x7f0>
            digitalWrite(OUT3, LOW);  //turn off charger
    74ba:	2100      	movs	r1, #0
    74bc:	2014      	movs	r0, #20
    74be:	f002 ff6b 	bl	a398 <digitalWrite>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    74c2:	6daa      	ldr	r2, [r5, #88]	; 0x58
    74c4:	6deb      	ldr	r3, [r5, #92]	; 0x5c
            Charged = 1;
    74c6:	4981      	ldr	r1, [pc, #516]	; (76cc <loop+0xb80>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    74c8:	fb02 f303 	mul.w	r3, r2, r3
    74cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    74d0:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    74d4:	4a79      	ldr	r2, [pc, #484]	; (76bc <loop+0xb70>)
            Charged = 1;
    74d6:	2301      	movs	r3, #1
    74d8:	600b      	str	r3, [r1, #0]
    SOC = 100;
    74da:	2364      	movs	r3, #100	; 0x64
    74dc:	6013      	str	r3, [r2, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    74de:	f005 fc5b 	bl	cd98 <__aeabi_i2f>
    74e2:	4977      	ldr	r1, [pc, #476]	; (76c0 <loop+0xb74>)
    74e4:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 76c4 <loop+0xb78>
    74e8:	f005 fd5e 	bl	cfa8 <__aeabi_fdiv>
    74ec:	f8c9 0000 	str.w	r0, [r9]
    74f0:	e4ce      	b.n	6e90 <loop+0x344>
              if (digitalRead(OUT3) == 1) {
    74f2:	2014      	movs	r0, #20
    74f4:	f002 ff76 	bl	a3e4 <digitalRead>
    74f8:	2801      	cmp	r0, #1
    74fa:	4681      	mov	r9, r0
    74fc:	f47f acc8 	bne.w	6e90 <loop+0x344>
                Serial.println();
    7500:	4874      	ldr	r0, [pc, #464]	; (76d4 <loop+0xb88>)
    7502:	f002 f877 	bl	95f4 <Print::println()>
    7506:	2111      	movs	r1, #17
    7508:	4874      	ldr	r0, [pc, #464]	; (76dc <loop+0xb90>)
    750a:	f004 fdb9 	bl	c080 <usb_serial_write>
    750e:	4871      	ldr	r0, [pc, #452]	; (76d4 <loop+0xb88>)
    7510:	f002 f870 	bl	95f4 <Print::println()>
                digitalWrite(OUT3, LOW);  //turn off charger
    7514:	2014      	movs	r0, #20
    7516:	2100      	movs	r1, #0
    7518:	f002 ff3e 	bl	a398 <digitalWrite>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    751c:	6daa      	ldr	r2, [r5, #88]	; 0x58
    751e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    7520:	fb02 f303 	mul.w	r3, r2, r3
                Charged = 1;
    7524:	4a69      	ldr	r2, [pc, #420]	; (76cc <loop+0xb80>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
                Charged = 1;
    752a:	f8c2 9000 	str.w	r9, [r2]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    752e:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    7532:	4a62      	ldr	r2, [pc, #392]	; (76bc <loop+0xb70>)
    7534:	e7d1      	b.n	74da <loop+0x98e>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    7536:	4860      	ldr	r0, [pc, #384]	; (76b8 <loop+0xb6c>)
    7538:	f7fa fa1e 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    753c:	6929      	ldr	r1, [r5, #16]
    753e:	f005 fe1d 	bl	d17c <__aeabi_fcmplt>
    7542:	2800      	cmp	r0, #0
    7544:	f47f ac27 	bne.w	6d96 <loop+0x24a>
          ErrorReason = ErrorReason & ~0x01;
    7548:	4a65      	ldr	r2, [pc, #404]	; (76e0 <loop+0xb94>)
          if (debug != 0) {
    754a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 76e4 <loop+0xb98>
          ErrorReason = ErrorReason & ~0x01;
    754e:	6813      	ldr	r3, [r2, #0]
    7550:	4f65      	ldr	r7, [pc, #404]	; (76e8 <loop+0xb9c>)
    7552:	f023 0301 	bic.w	r3, r3, #1
    7556:	6013      	str	r3, [r2, #0]
          if (debug != 0) {
    7558:	f8d9 3000 	ldr.w	r3, [r9]
    755c:	f7ff bb83 	b.w	6c66 <loop+0x11a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7560:	6823      	ldr	r3, [r4, #0]
    7562:	9308      	str	r3, [sp, #32]
          undertriptimer = millis();
    7564:	4b61      	ldr	r3, [pc, #388]	; (76ec <loop+0xba0>)
	return ret;
    7566:	9a08      	ldr	r2, [sp, #32]
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys) {
    7568:	4853      	ldr	r0, [pc, #332]	; (76b8 <loop+0xb6c>)
          undertriptimer = millis();
    756a:	601a      	str	r2, [r3, #0]
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys) {
    756c:	f7fa f9de 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7570:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
    7574:	4681      	mov	r9, r0
    7576:	69a8      	ldr	r0, [r5, #24]
    7578:	f005 fb5a 	bl	cc30 <__addsf3>
    757c:	4601      	mov	r1, r0
    757e:	4648      	mov	r0, r9
    7580:	f005 fe1a 	bl	d1b8 <__aeabi_fcmpgt>
    7584:	2800      	cmp	r0, #0
    7586:	f43f ac99 	beq.w	6ebc <loop+0x370>
            if (digitalRead(OUT1) == 0) {
    758a:	200b      	movs	r0, #11
    758c:	f002 ff2a 	bl	a3e4 <digitalRead>
    7590:	2800      	cmp	r0, #0
    7592:	f47f ac93 	bne.w	6ebc <loop+0x370>
              Serial.println();
    7596:	484f      	ldr	r0, [pc, #316]	; (76d4 <loop+0xb88>)
    7598:	f002 f82c 	bl	95f4 <Print::println()>
    759c:	2118      	movs	r1, #24
    759e:	4854      	ldr	r0, [pc, #336]	; (76f0 <loop+0xba4>)
    75a0:	f004 fd6e 	bl	c080 <usb_serial_write>
    75a4:	484b      	ldr	r0, [pc, #300]	; (76d4 <loop+0xb88>)
    75a6:	f002 f825 	bl	95f4 <Print::println()>
              digitalWrite(OUT1, HIGH);  //turn on discharge
    75aa:	2101      	movs	r1, #1
    75ac:	200b      	movs	r0, #11
    75ae:	f002 fef3 	bl	a398 <digitalWrite>
    75b2:	e483      	b.n	6ebc <loop+0x370>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    75b4:	f7fa f9ba 	bl	192c <BMSModuleManager::getLowCellVolt()>
    75b8:	6929      	ldr	r1, [r5, #16]
    75ba:	f005 fddf 	bl	d17c <__aeabi_fcmplt>
    75be:	b940      	cbnz	r0, 75d2 <loop+0xa86>
    75c0:	483d      	ldr	r0, [pc, #244]	; (76b8 <loop+0xb6c>)
    75c2:	f7fa f9d9 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    75c6:	68e9      	ldr	r1, [r5, #12]
    75c8:	f005 fdf6 	bl	d1b8 <__aeabi_fcmpgt>
    75cc:	2800      	cmp	r0, #0
    75ce:	f000 80c2 	beq.w	7756 <loop+0xc0a>
              digitalWrite(OUT2, LOW);    //turn off contactor
    75d2:	2100      	movs	r1, #0
    75d4:	200c      	movs	r0, #12
    75d6:	f002 fedf 	bl	a398 <digitalWrite>
              contctrl = contctrl & 253;  //turn off contactor
    75da:	f8d8 3000 	ldr.w	r3, [r8]
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    75de:	2100      	movs	r1, #0
              contctrl = contctrl & 253;  //turn off contactor
    75e0:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    75e4:	2015      	movs	r0, #21
              contctrl = contctrl & 253;  //turn off contactor
    75e6:	f8c8 3000 	str.w	r3, [r8]
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    75ea:	f002 fed5 	bl	a398 <digitalWrite>
              bmsstatus = Error;
    75ee:	2305      	movs	r3, #5
    75f0:	703b      	strb	r3, [r7, #0]
    75f2:	f7ff bba6 	b.w	6d42 <loop+0x1f6>
    75f6:	2102      	movs	r1, #2
    75f8:	483e      	ldr	r0, [pc, #248]	; (76f4 <loop+0xba8>)
          bmsstatus = Error;
    75fa:	4f3b      	ldr	r7, [pc, #236]	; (76e8 <loop+0xb9c>)
    75fc:	f004 fd40 	bl	c080 <usb_serial_write>
    7600:	4834      	ldr	r0, [pc, #208]	; (76d4 <loop+0xb88>)
    7602:	f001 fff7 	bl	95f4 <Print::println()>
    7606:	211d      	movs	r1, #29
    7608:	483b      	ldr	r0, [pc, #236]	; (76f8 <loop+0xbac>)
    760a:	f004 fd39 	bl	c080 <usb_serial_write>
    760e:	2102      	movs	r1, #2
    7610:	4838      	ldr	r0, [pc, #224]	; (76f4 <loop+0xba8>)
    7612:	f004 fd35 	bl	c080 <usb_serial_write>
    7616:	482f      	ldr	r0, [pc, #188]	; (76d4 <loop+0xb88>)
    7618:	f001 ffec 	bl	95f4 <Print::println()>
          ErrorReason = ErrorReason | 0x01;
    761c:	4a30      	ldr	r2, [pc, #192]	; (76e0 <loop+0xb94>)
    761e:	6813      	ldr	r3, [r2, #0]
    7620:	f043 0301 	orr.w	r3, r3, #1
    7624:	6013      	str	r3, [r2, #0]
          bmsstatus = Error;
    7626:	2305      	movs	r3, #5
    7628:	703b      	strb	r3, [r7, #0]
    if (debug != 0) {
    762a:	f8d9 3000 	ldr.w	r3, [r9]
          ErrorReason = ErrorReason | 0x01;
    762e:	f7ff bb1a 	b.w	6c66 <loop+0x11a>
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    7632:	4821      	ldr	r0, [pc, #132]	; (76b8 <loop+0xb6c>)
    7634:	f7fa f9a0 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7638:	69e9      	ldr	r1, [r5, #28]
    763a:	4604      	mov	r4, r0
    763c:	6968      	ldr	r0, [r5, #20]
    763e:	f005 faf5 	bl	cc2c <__aeabi_fsub>
    7642:	4601      	mov	r1, r0
    7644:	4620      	mov	r0, r4
    7646:	f005 fd99 	bl	d17c <__aeabi_fcmplt>
    764a:	2800      	cmp	r0, #0
    764c:	f43f ad27 	beq.w	709e <loop+0x552>
            if (settings.ChargerDirect == 1) {
    7650:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    7654:	b33b      	cbz	r3, 76a6 <loop+0xb5a>
              bmsstatus = Charge;
    7656:	2303      	movs	r3, #3
    7658:	4c28      	ldr	r4, [pc, #160]	; (76fc <loop+0xbb0>)
    765a:	703b      	strb	r3, [r7, #0]
    765c:	e520      	b.n	70a0 <loop+0x554>
    SOC = 95;
    765e:	225f      	movs	r2, #95	; 0x5f
    7660:	e6d9      	b.n	7416 <loop+0x8ca>
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW) {
    7662:	200c      	movs	r0, #12
    7664:	f002 febe 	bl	a3e4 <digitalRead>
    7668:	2800      	cmp	r0, #0
    766a:	f000 80c0 	beq.w	77ee <loop+0xca2>
    766e:	f8df 9090 	ldr.w	r9, [pc, #144]	; 7700 <loop+0xbb4>
    7672:	4c22      	ldr	r4, [pc, #136]	; (76fc <loop+0xbb0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7674:	6823      	ldr	r3, [r4, #0]
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent) {
    7676:	f8d9 2000 	ldr.w	r2, [r9]
    767a:	9302      	str	r3, [sp, #8]
    767c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    7680:	4413      	add	r3, r2
	return ret;
    7682:	9a02      	ldr	r2, [sp, #8]
    7684:	4293      	cmp	r3, r2
    7686:	f0c0 8096 	bcc.w	77b6 <loop+0xc6a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    768a:	6822      	ldr	r2, [r4, #0]
    768c:	9204      	str	r2, [sp, #16]
	return ret;
    768e:	9a04      	ldr	r2, [sp, #16]
            if (mainconttimer + settings.Pretime + 1000 < millis()) {
    7690:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    7694:	4293      	cmp	r3, r2
    7696:	f4bf abc8 	bcs.w	6e2a <loop+0x2de>
              digitalWrite(OUT4, LOW);  //ensure precharge is low
    769a:	2100      	movs	r1, #0
    769c:	2015      	movs	r0, #21
    769e:	f002 fe7b 	bl	a398 <digitalWrite>
    76a2:	f7ff bbc2 	b.w	6e2a <loop+0x2de>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    76a6:	4c15      	ldr	r4, [pc, #84]	; (76fc <loop+0xbb0>)
              bmsstatus = Precharge;
    76a8:	2304      	movs	r3, #4
    76aa:	703b      	strb	r3, [r7, #0]
    76ac:	6823      	ldr	r3, [r4, #0]
    76ae:	9309      	str	r3, [sp, #36]	; 0x24
              Pretimer = millis();
    76b0:	4b14      	ldr	r3, [pc, #80]	; (7704 <loop+0xbb8>)
	return ret;
    76b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    76b4:	601a      	str	r2, [r3, #0]
    76b6:	e4f3      	b.n	70a0 <loop+0x554>
    76b8:	1fff91f0 	.word	0x1fff91f0
    76bc:	1fff8828 	.word	0x1fff8828
    76c0:	3e8e38e4 	.word	0x3e8e38e4
    76c4:	1fff91e4 	.word	0x1fff91e4
    76c8:	1fffcf40 	.word	0x1fffcf40
    76cc:	1fff91a8 	.word	0x1fff91a8
    76d0:	1fffd0cc 	.word	0x1fffd0cc
    76d4:	1fff89fc 	.word	0x1fff89fc
    76d8:	00014fc8 	.word	0x00014fc8
    76dc:	00014fb4 	.word	0x00014fb4
    76e0:	1fff91b0 	.word	0x1fff91b0
    76e4:	1fff884c 	.word	0x1fff884c
    76e8:	1fffcf34 	.word	0x1fffcf34
    76ec:	1fffd1b4 	.word	0x1fffd1b4
    76f0:	00015000 	.word	0x00015000
    76f4:	00014ea8 	.word	0x00014ea8
    76f8:	0001501c 	.word	0x0001501c
    76fc:	1fffd3c0 	.word	0x1fffd3c0
    7700:	1fffd02c 	.word	0x1fffd02c
    7704:	1fff91b8 	.word	0x1fff91b8
              if (bms.getHighCellVolt() < (settings.StoreVsetpoint - settings.ChargeHys)) {
    7708:	485c      	ldr	r0, [pc, #368]	; (787c <loop+0xd30>)
    770a:	f7fa f935 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    770e:	69e9      	ldr	r1, [r5, #28]
    7710:	4681      	mov	r9, r0
    7712:	6a28      	ldr	r0, [r5, #32]
    7714:	f005 fa8a 	bl	cc2c <__aeabi_fsub>
    7718:	4601      	mov	r1, r0
    771a:	4648      	mov	r0, r9
    771c:	f005 fd2e 	bl	d17c <__aeabi_fcmplt>
    7720:	4b57      	ldr	r3, [pc, #348]	; (7880 <loop+0xd34>)
    7722:	2800      	cmp	r0, #0
    7724:	f43f abb4 	beq.w	6e90 <loop+0x344>
                digitalWrite(OUT3, HIGH);  //turn on charger
    7728:	4659      	mov	r1, fp
    772a:	2014      	movs	r0, #20
                Charged = 0;
    772c:	f8c3 a000 	str.w	sl, [r3]
                digitalWrite(OUT3, HIGH);  //turn on charger
    7730:	f002 fe32 	bl	a398 <digitalWrite>
    7734:	f7ff bbac 	b.w	6e90 <loop+0x344>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    7738:	4850      	ldr	r0, [pc, #320]	; (787c <loop+0xd30>)
    773a:	f7fa f9cd 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    773e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    7740:	f005 fd3a 	bl	d1b8 <__aeabi_fcmpgt>
    7744:	4601      	mov	r1, r0
    7746:	2800      	cmp	r0, #0
    7748:	f47f abd2 	bne.w	6ef0 <loop+0x3a4>
              digitalWrite(OUT2, LOW);  //trip breaker
    774c:	200c      	movs	r0, #12
    774e:	f002 fe23 	bl	a398 <digitalWrite>
    7752:	f7ff baf6 	b.w	6d42 <loop+0x1f6>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    7756:	4849      	ldr	r0, [pc, #292]	; (787c <loop+0xd30>)
    7758:	f7fa f9be 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    775c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    775e:	f005 fd2b 	bl	d1b8 <__aeabi_fcmpgt>
    7762:	2800      	cmp	r0, #0
    7764:	f47f af35 	bne.w	75d2 <loop+0xa86>
    7768:	f7ff baeb 	b.w	6d42 <loop+0x1f6>
              if (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) {
    776c:	4843      	ldr	r0, [pc, #268]	; (787c <loop+0xd30>)
    776e:	f7fa f903 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7772:	69e9      	ldr	r1, [r5, #28]
    7774:	4681      	mov	r9, r0
    7776:	6968      	ldr	r0, [r5, #20]
    7778:	f005 fa58 	bl	cc2c <__aeabi_fsub>
    777c:	4601      	mov	r1, r0
    777e:	4648      	mov	r0, r9
    7780:	f005 fcfc 	bl	d17c <__aeabi_fcmplt>
    7784:	2800      	cmp	r0, #0
    7786:	f43f ab83 	beq.w	6e90 <loop+0x344>
                if (digitalRead(OUT3) == 0) {
    778a:	2014      	movs	r0, #20
    778c:	f002 fe2a 	bl	a3e4 <digitalRead>
    7790:	4681      	mov	r9, r0
    7792:	2800      	cmp	r0, #0
    7794:	f47f ab7c 	bne.w	6e90 <loop+0x344>
                  Serial.println();
    7798:	483a      	ldr	r0, [pc, #232]	; (7884 <loop+0xd38>)
    779a:	f001 ff2b 	bl	95f4 <Print::println()>
                  Serial.println("Reset Over Voltage Trip Not Charged");
    779e:	493a      	ldr	r1, [pc, #232]	; (7888 <loop+0xd3c>)
    77a0:	4838      	ldr	r0, [pc, #224]	; (7884 <loop+0xd38>)
    77a2:	f7fa fe47 	bl	2434 <Print::println(char const*) [clone .isra.0]>
                  digitalWrite(OUT3, HIGH);  //turn on charger
    77a6:	4651      	mov	r1, sl
    77a8:	2014      	movs	r0, #20
                  Charged = 0;
    77aa:	f8cb 9000 	str.w	r9, [fp]
                  digitalWrite(OUT3, HIGH);  //turn on charger
    77ae:	f002 fdf3 	bl	a398 <digitalWrite>
    77b2:	f7ff bb6d 	b.w	6e90 <loop+0x344>
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent) {
    77b6:	200c      	movs	r0, #12
    77b8:	f002 fe14 	bl	a3e4 <digitalRead>
    77bc:	b988      	cbnz	r0, 77e2 <loop+0xc96>
    77be:	4b33      	ldr	r3, [pc, #204]	; (788c <loop+0xd40>)
    77c0:	f8d3 a000 	ldr.w	sl, [r3]
    77c4:	2100      	movs	r1, #0
    77c6:	4650      	mov	r0, sl
    77c8:	f005 fcf6 	bl	d1b8 <__aeabi_fcmpgt>
    77cc:	b908      	cbnz	r0, 77d2 <loop+0xc86>
    77ce:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    77d2:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    77d6:	f005 fadf 	bl	cd98 <__aeabi_i2f>
    77da:	4651      	mov	r1, sl
    77dc:	f005 fcec 	bl	d1b8 <__aeabi_fcmpgt>
    77e0:	bb68      	cbnz	r0, 783e <loop+0xcf2>
            if (mainconttimer + settings.Pretime + 1000 < millis()) {
    77e2:	f8d9 2000 	ldr.w	r2, [r9]
    77e6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    77ea:	4413      	add	r3, r2
    77ec:	e74d      	b.n	768a <loop+0xb3e>
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW) {
    77ee:	2015      	movs	r0, #21
    77f0:	f002 fdf8 	bl	a3e4 <digitalRead>
    77f4:	4682      	mov	sl, r0
    77f6:	2800      	cmp	r0, #0
    77f8:	f47f af39 	bne.w	766e <loop+0xb22>
              digitalWrite(OUT4, HIGH);  //Precharge start
    77fc:	4621      	mov	r1, r4
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    77fe:	4c24      	ldr	r4, [pc, #144]	; (7890 <loop+0xd44>)
              mainconttimer = millis();
    7800:	f8df 9090 	ldr.w	r9, [pc, #144]	; 7894 <loop+0xd48>
    7804:	6823      	ldr	r3, [r4, #0]
    7806:	9301      	str	r3, [sp, #4]
	return ret;
    7808:	9b01      	ldr	r3, [sp, #4]
    780a:	f8c9 3000 	str.w	r3, [r9]
              digitalWrite(OUT4, HIGH);  //Precharge start
    780e:	2015      	movs	r0, #21
    7810:	f002 fdc2 	bl	a398 <digitalWrite>
              Serial.println();
    7814:	481b      	ldr	r0, [pc, #108]	; (7884 <loop+0xd38>)
    7816:	f001 feed 	bl	95f4 <Print::println()>
              Serial.println("Precharge!!!");
    781a:	491f      	ldr	r1, [pc, #124]	; (7898 <loop+0xd4c>)
    781c:	4819      	ldr	r0, [pc, #100]	; (7884 <loop+0xd38>)
    781e:	f7fa fe09 	bl	2434 <Print::println(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    7822:	f8d9 1000 	ldr.w	r1, [r9]
    7826:	4817      	ldr	r0, [pc, #92]	; (7884 <loop+0xd38>)
    7828:	4653      	mov	r3, sl
    782a:	220a      	movs	r2, #10
    782c:	f001 fefa 	bl	9624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    7830:	4814      	ldr	r0, [pc, #80]	; (7884 <loop+0xd38>)
    7832:	f001 fedf 	bl	95f4 <Print::println()>
              Serial.println();
    7836:	4813      	ldr	r0, [pc, #76]	; (7884 <loop+0xd38>)
    7838:	f001 fedc 	bl	95f4 <Print::println()>
    783c:	e71a      	b.n	7674 <loop+0xb28>
              digitalWrite(OUT2, HIGH);  //turn on contactor
    783e:	2101      	movs	r1, #1
    7840:	200c      	movs	r0, #12
    7842:	f002 fda9 	bl	a398 <digitalWrite>
              contctrl = contctrl | 2;   //turn on contactor
    7846:	f8d8 3000 	ldr.w	r3, [r8]
              Serial.println();
    784a:	480e      	ldr	r0, [pc, #56]	; (7884 <loop+0xd38>)
              contctrl = contctrl | 2;   //turn on contactor
    784c:	f043 0302 	orr.w	r3, r3, #2
    7850:	f8c8 3000 	str.w	r3, [r8]
              Serial.println();
    7854:	f001 fece 	bl	95f4 <Print::println()>
              Serial.println("Main On!!!");
    7858:	4910      	ldr	r1, [pc, #64]	; (789c <loop+0xd50>)
    785a:	480a      	ldr	r0, [pc, #40]	; (7884 <loop+0xd38>)
    785c:	f7fa fdea 	bl	2434 <Print::println(char const*) [clone .isra.0]>
              Serial.println();
    7860:	4808      	ldr	r0, [pc, #32]	; (7884 <loop+0xd38>)
    7862:	f001 fec7 	bl	95f4 <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7866:	6823      	ldr	r3, [r4, #0]
    7868:	9303      	str	r3, [sp, #12]
	return ret;
    786a:	9a03      	ldr	r2, [sp, #12]
              mainconttimer = millis() + settings.Pretime;
    786c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    7870:	441a      	add	r2, r3
    7872:	f8c9 2000 	str.w	r2, [r9]
    7876:	4413      	add	r3, r2
    7878:	e707      	b.n	768a <loop+0xb3e>
    787a:	bf00      	nop
    787c:	1fff91f0 	.word	0x1fff91f0
    7880:	1fff91a8 	.word	0x1fff91a8
    7884:	1fff89fc 	.word	0x1fff89fc
    7888:	00014fc8 	.word	0x00014fc8
    788c:	1fffcfc4 	.word	0x1fffcfc4
    7890:	1fffd3c0 	.word	0x1fffd3c0
    7894:	1fffd02c 	.word	0x1fffd02c
    7898:	00014f98 	.word	0x00014f98
    789c:	00014fa8 	.word	0x00014fa8

000078a0 <low_voltage_isr>:

void low_voltage_isr(void) {
  EEPROM.update(1000, uint8_t(SOC));
    78a0:	4b0b      	ldr	r3, [pc, #44]	; (78d0 <low_voltage_isr+0x30>)
void low_voltage_isr(void) {
    78a2:	b510      	push	{r4, lr}
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    78a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  EEPROM.update(1000, uint8_t(SOC));
    78a8:	781c      	ldrb	r4, [r3, #0]
    78aa:	f002 f8bd 	bl	9a28 <eeprom_read_byte>
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    78ae:	4284      	cmp	r4, r0
    78b0:	d004      	beq.n	78bc <low_voltage_isr+0x1c>
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    78b2:	4621      	mov	r1, r4
    78b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    78b8:	f002 f8d0 	bl	9a5c <eeprom_write_byte>

  PMC_LVDSC2 |= PMC_LVDSC2_LVWACK;  // clear if we can
    78bc:	4b05      	ldr	r3, [pc, #20]	; (78d4 <low_voltage_isr+0x34>)
    78be:	785a      	ldrb	r2, [r3, #1]
    78c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    78c4:	705a      	strb	r2, [r3, #1]
  PMC_LVDSC1 |= PMC_LVDSC1_LVDACK;
    78c6:	781a      	ldrb	r2, [r3, #0]
    78c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    78cc:	701a      	strb	r2, [r3, #0]
}
    78ce:	bd10      	pop	{r4, pc}
    78d0:	1fff8828 	.word	0x1fff8828
    78d4:	4007d000 	.word	0x4007d000

000078d8 <_GLOBAL__sub_I_bms>:
    78d8:	b510      	push	{r4, lr}
    EEPROMClass()                        { eeprom_initialize(); }
    78da:	f002 f86f 	bl	99bc <eeprom_initialize>
BMSModuleManager bms;
    78de:	480b      	ldr	r0, [pc, #44]	; (790c <_GLOBAL__sub_I_bms+0x34>)
    78e0:	f7f9 fa34 	bl	d4c <BMSModuleManager::BMSModuleManager()>
SerialConsole console;
    78e4:	480a      	ldr	r0, [pc, #40]	; (7910 <_GLOBAL__sub_I_bms+0x38>)
    78e6:	f7fa fd37 	bl	2358 <SerialConsole::SerialConsole()>
FilterOnePole lowpassFilter(LOWPASS, filterFrequency);
    78ea:	4a0a      	ldr	r2, [pc, #40]	; (7914 <_GLOBAL__sub_I_bms+0x3c>)
    78ec:	480a      	ldr	r0, [pc, #40]	; (7918 <_GLOBAL__sub_I_bms+0x40>)
    78ee:	6812      	ldr	r2, [r2, #0]
    78f0:	2300      	movs	r3, #0
    78f2:	2101      	movs	r1, #1
    78f4:	f001 fbd8 	bl	90a8 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>
ADC* adc = new ADC();  // adc object
    78f8:	2094      	movs	r0, #148	; 0x94
    78fa:	f002 faa9 	bl	9e50 <operator new(unsigned int)>
    78fe:	4604      	mov	r4, r0
    7900:	f000 ff9e 	bl	8840 <ADC::ADC()>
    7904:	4b05      	ldr	r3, [pc, #20]	; (791c <_GLOBAL__sub_I_bms+0x44>)
    7906:	601c      	str	r4, [r3, #0]
}
    7908:	bd10      	pop	{r4, pc}
    790a:	bf00      	nop
    790c:	1fff91f0 	.word	0x1fff91f0
    7910:	1fffcf50 	.word	0x1fffcf50
    7914:	1fff8854 	.word	0x1fff8854
    7918:	1fffd00c 	.word	0x1fffd00c
    791c:	1fff91dc 	.word	0x1fff91dc

00007920 <setup>:
void setup() {
    7920:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  delay(4000);  //just for easy debugging. It takes a few seconds for USB to come up properly on most OS's
    7924:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
void setup() {
    7928:	b087      	sub	sp, #28
  delay(4000);  //just for easy debugging. It takes a few seconds for USB to come up properly on most OS's
    792a:	f002 fdc5 	bl	a4b8 <delay>
  pinMode(ACUR1, INPUT);
    792e:	2100      	movs	r1, #0
    7930:	200f      	movs	r0, #15
    7932:	f002 fd65 	bl	a400 <pinMode>
  pinMode(ACUR2, INPUT);
    7936:	2100      	movs	r1, #0
    7938:	200e      	movs	r0, #14
    793a:	f002 fd61 	bl	a400 <pinMode>
  pinMode(IN1, INPUT);
    793e:	2100      	movs	r1, #0
    7940:	2011      	movs	r0, #17
    7942:	f002 fd5d 	bl	a400 <pinMode>
  pinMode(IN2, INPUT);
    7946:	2100      	movs	r1, #0
    7948:	2010      	movs	r0, #16
    794a:	f002 fd59 	bl	a400 <pinMode>
  pinMode(IN3, INPUT);
    794e:	2100      	movs	r1, #0
    7950:	2012      	movs	r0, #18
    7952:	f002 fd55 	bl	a400 <pinMode>
  pinMode(IN4, INPUT);
    7956:	2100      	movs	r1, #0
    7958:	2013      	movs	r0, #19
    795a:	f002 fd51 	bl	a400 <pinMode>
  pinMode(OUT1, OUTPUT);  // drive contactor
    795e:	2101      	movs	r1, #1
    7960:	200b      	movs	r0, #11
    7962:	f002 fd4d 	bl	a400 <pinMode>
  digitalWrite(OUT1, LOW);
    7966:	2100      	movs	r1, #0
    7968:	200b      	movs	r0, #11
    796a:	f002 fd15 	bl	a398 <digitalWrite>
  pinMode(OUT2, OUTPUT);  // precharge
    796e:	2101      	movs	r1, #1
    7970:	200c      	movs	r0, #12
    7972:	f002 fd45 	bl	a400 <pinMode>
  digitalWrite(OUT2, LOW);
    7976:	2100      	movs	r1, #0
    7978:	200c      	movs	r0, #12
    797a:	f002 fd0d 	bl	a398 <digitalWrite>
  pinMode(OUT3, OUTPUT);  // charge relay
    797e:	2101      	movs	r1, #1
    7980:	2014      	movs	r0, #20
    7982:	f002 fd3d 	bl	a400 <pinMode>
  digitalWrite(OUT3, LOW);
    7986:	2100      	movs	r1, #0
    7988:	2014      	movs	r0, #20
    798a:	f002 fd05 	bl	a398 <digitalWrite>
  pinMode(OUT4, OUTPUT);  // Negative contactor
    798e:	2101      	movs	r1, #1
    7990:	2015      	movs	r0, #21
    7992:	f002 fd35 	bl	a400 <pinMode>
  digitalWrite(OUT4, LOW);
    7996:	2100      	movs	r1, #0
    7998:	2015      	movs	r0, #21
    799a:	f002 fcfd 	bl	a398 <digitalWrite>
  pinMode(OUT5, OUTPUT);  // pwm driver output
    799e:	2101      	movs	r1, #1
    79a0:	2016      	movs	r0, #22
    79a2:	f002 fd2d 	bl	a400 <pinMode>
  digitalWrite(OUT5, LOW);
    79a6:	2100      	movs	r1, #0
    79a8:	2016      	movs	r0, #22
    79aa:	f002 fcf5 	bl	a398 <digitalWrite>
  pinMode(OUT6, OUTPUT);  // pwm driver output
    79ae:	2101      	movs	r1, #1
    79b0:	2017      	movs	r0, #23
    79b2:	f002 fd25 	bl	a400 <pinMode>
  digitalWrite(OUT6, LOW);
    79b6:	2100      	movs	r1, #0
    79b8:	2017      	movs	r0, #23
    79ba:	f002 fced 	bl	a398 <digitalWrite>
  pinMode(OUT7, OUTPUT);  // pwm driver output
    79be:	2101      	movs	r1, #1
    79c0:	2005      	movs	r0, #5
    79c2:	f002 fd1d 	bl	a400 <pinMode>
  digitalWrite(OUT7, LOW);
    79c6:	2100      	movs	r1, #0
    79c8:	2005      	movs	r0, #5
    79ca:	f002 fce5 	bl	a398 <digitalWrite>
  pinMode(OUT8, OUTPUT);  // pwm driver output
    79ce:	2101      	movs	r1, #1
    79d0:	2006      	movs	r0, #6
    79d2:	f002 fd15 	bl	a400 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    79d6:	4cb3      	ldr	r4, [pc, #716]	; (7ca4 <L_28854_delayMicroseconds+0x112>)
    79d8:	4db3      	ldr	r5, [pc, #716]	; (7ca8 <L_28854_delayMicroseconds+0x116>)
    Can0.setFilter(filter, i);
    79da:	4eb4      	ldr	r6, [pc, #720]	; (7cac <L_28854_delayMicroseconds+0x11a>)
  digitalWrite(OUT8, LOW);
    79dc:	2100      	movs	r1, #0
    79de:	2006      	movs	r0, #6
    79e0:	f002 fcda 	bl	a398 <digitalWrite>
  pinMode(led, OUTPUT);
    79e4:	2101      	movs	r1, #1
    79e6:	200d      	movs	r0, #13
    79e8:	f002 fd0a 	bl	a400 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    79ec:	8820      	ldrh	r0, [r4, #0]
    79ee:	f005 f9cf 	bl	cd90 <__aeabi_ui2f>
    79f2:	4601      	mov	r1, r0
    79f4:	2016      	movs	r0, #22
    79f6:	f002 fc65 	bl	a2c4 <analogWriteFrequency>
  analogWriteFrequency(OUT6, pwmfreq);
    79fa:	8820      	ldrh	r0, [r4, #0]
    79fc:	f005 f9c8 	bl	cd90 <__aeabi_ui2f>
    7a00:	4601      	mov	r1, r0
    7a02:	2017      	movs	r0, #23
    7a04:	f002 fc5e 	bl	a2c4 <analogWriteFrequency>
  analogWriteFrequency(OUT7, pwmfreq);
    7a08:	8820      	ldrh	r0, [r4, #0]
    7a0a:	f005 f9c1 	bl	cd90 <__aeabi_ui2f>
    7a0e:	4601      	mov	r1, r0
    7a10:	2005      	movs	r0, #5
    7a12:	f002 fc57 	bl	a2c4 <analogWriteFrequency>
  analogWriteFrequency(OUT8, pwmfreq);
    7a16:	8820      	ldrh	r0, [r4, #0]
    7a18:	f005 f9ba 	bl	cd90 <__aeabi_ui2f>
  Can0.begin(500000);
    7a1c:	2400      	movs	r4, #0
  analogWriteFrequency(OUT8, pwmfreq);
    7a1e:	4601      	mov	r1, r0
    7a20:	2006      	movs	r0, #6
    7a22:	f002 fc4f 	bl	a2c4 <analogWriteFrequency>
  Can0.begin(500000);
    7a26:	4aa2      	ldr	r2, [pc, #648]	; (7cb0 <L_28854_delayMicroseconds+0x11e>)
    7a28:	49a2      	ldr	r1, [pc, #648]	; (7cb4 <L_28854_delayMicroseconds+0x122>)
    7a2a:	48a0      	ldr	r0, [pc, #640]	; (7cac <L_28854_delayMicroseconds+0x11a>)
    7a2c:	9400      	str	r4, [sp, #0]
    7a2e:	4623      	mov	r3, r4
    7a30:	f000 fb46 	bl	80c0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>
    filter.flags.extended = 0;
    7a34:	792b      	ldrb	r3, [r5, #4]
    Can0.setFilter(filter, i);
    7a36:	b2e2      	uxtb	r2, r4
    filter.flags.extended = 0;
    7a38:	f36f 0300 	bfc	r3, #0, #1
    Can0.setFilter(filter, i);
    7a3c:	4629      	mov	r1, r5
    7a3e:	4630      	mov	r0, r6
  for (int i = 0; i < 8; i++) {
    7a40:	3401      	adds	r4, #1
    filter.flags.extended = 0;
    7a42:	712b      	strb	r3, [r5, #4]
    Can0.setFilter(filter, i);
    7a44:	f000 fac8 	bl	7fd8 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 0; i < 8; i++) {
    7a48:	2c08      	cmp	r4, #8
    7a4a:	d1f3      	bne.n	7a34 <setup+0x114>
    Can0.setFilter(filter, i);
    7a4c:	4f96      	ldr	r7, [pc, #600]	; (7ca8 <L_28854_delayMicroseconds+0x116>)
    7a4e:	4e97      	ldr	r6, [pc, #604]	; (7cac <L_28854_delayMicroseconds+0x11a>)
  for (int i = 9; i < 13; i++) {
    7a50:	2409      	movs	r4, #9
    filter.flags.extended = 1;
    7a52:	792b      	ldrb	r3, [r5, #4]
    Can0.setFilter(filter, i);
    7a54:	b2e2      	uxtb	r2, r4
    filter.flags.extended = 1;
    7a56:	f043 0301 	orr.w	r3, r3, #1
    Can0.setFilter(filter, i);
    7a5a:	4639      	mov	r1, r7
    7a5c:	4630      	mov	r0, r6
  for (int i = 9; i < 13; i++) {
    7a5e:	3401      	adds	r4, #1
    filter.flags.extended = 1;
    7a60:	712b      	strb	r3, [r5, #4]
    Can0.setFilter(filter, i);
    7a62:	f000 fab9 	bl	7fd8 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 9; i < 13; i++) {
    7a66:	2c0d      	cmp	r4, #13
    7a68:	d1f3      	bne.n	7a52 <setup+0x132>
  adc->adc0->setAveraging(16);   // set number of averages
    7a6a:	4c93      	ldr	r4, [pc, #588]	; (7cb8 <L_28854_delayMicroseconds+0x126>)
		uint32_t millis_begin = systick_millis_count;
    7a6c:	4f93      	ldr	r7, [pc, #588]	; (7cbc <L_28854_delayMicroseconds+0x12a>)
    7a6e:	6823      	ldr	r3, [r4, #0]
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7a70:	4e93      	ldr	r6, [pc, #588]	; (7cc0 <L_28854_delayMicroseconds+0x12e>)
    7a72:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    7a76:	f8df 924c 	ldr.w	r9, [pc, #588]	; 7cc4 <L_28854_delayMicroseconds+0x132>
    7a7a:	2110      	movs	r1, #16
    7a7c:	f001 f9b8 	bl	8df0 <ADC_Module::setAveraging(unsigned char)>
  adc->adc0->setResolution(16);  // set bits of resolution
    7a80:	6823      	ldr	r3, [r4, #0]
    7a82:	2110      	movs	r1, #16
    7a84:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7a88:	f001 f878 	bl	8b7c <ADC_Module::setResolution(unsigned char)>
  adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    7a8c:	6823      	ldr	r3, [r4, #0]
    7a8e:	2102      	movs	r1, #2
    7a90:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7a94:	f000 ff5a 	bl	894c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
  adc->adc0->setSamplingSpeed(ADC_SAMPLING_SPEED::MED_SPEED);
    7a98:	6823      	ldr	r3, [r4, #0]
    7a9a:	2102      	movs	r1, #2
    7a9c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7aa0:	f001 f952 	bl	8d48 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
  adc->adc0->startContinuous(ACUR1);
    7aa4:	6823      	ldr	r3, [r4, #0]
    7aa6:	4c88      	ldr	r4, [pc, #544]	; (7cc8 <L_28854_delayMicroseconds+0x136>)
    7aa8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7aac:	210f      	movs	r1, #15
    7aae:	f001 fa03 	bl	8eb8 <ADC_Module::startContinuous(unsigned char)>
		uint32_t millis_begin = systick_millis_count;
    7ab2:	683d      	ldr	r5, [r7, #0]
				if (elapsed > 750) break;
    7ab4:	f240 28ee 	movw	r8, #750	; 0x2ee
		yield();
    7ab8:	f004 fbe8 	bl	c28c <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7abc:	7823      	ldrb	r3, [r4, #0]
    7abe:	2b00      	cmp	r3, #0
    7ac0:	f000 8136 	beq.w	7d30 <L_28854_delayMicroseconds+0x19e>
    7ac4:	7833      	ldrb	r3, [r6, #0]
    7ac6:	07d8      	lsls	r0, r3, #31
    7ac8:	f140 8132 	bpl.w	7d30 <L_28854_delayMicroseconds+0x19e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    7acc:	683b      	ldr	r3, [r7, #0]
    7ace:	f8d9 2000 	ldr.w	r2, [r9]
    7ad2:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7ad4:	2b0e      	cmp	r3, #14
    7ad6:	f240 812b 	bls.w	7d30 <L_28854_delayMicroseconds+0x19e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7ada:	210c      	movs	r1, #12
    7adc:	487b      	ldr	r0, [pc, #492]	; (7ccc <L_28854_delayMicroseconds+0x13a>)
    7ade:	f004 facf 	bl	c080 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    7ae2:	487b      	ldr	r0, [pc, #492]	; (7cd0 <L_28854_delayMicroseconds+0x13e>)
    7ae4:	f001 fd86 	bl	95f4 <Print::println()>
    7ae8:	210d      	movs	r1, #13
    7aea:	487a      	ldr	r0, [pc, #488]	; (7cd4 <L_28854_delayMicroseconds+0x142>)
    7aec:	f004 fac8 	bl	c080 <usb_serial_write>
    7af0:	4877      	ldr	r0, [pc, #476]	; (7cd0 <L_28854_delayMicroseconds+0x13e>)
    7af2:	f001 fd7f 	bl	95f4 <Print::println()>
  Serial2.begin(115200);
    7af6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    7afa:	4877      	ldr	r0, [pc, #476]	; (7cd8 <L_28854_delayMicroseconds+0x146>)
    7afc:	f001 fbc0 	bl	9280 <HardwareSerial2::begin(unsigned long)>
  Serial.println();
    7b00:	4873      	ldr	r0, [pc, #460]	; (7cd0 <L_28854_delayMicroseconds+0x13e>)
    7b02:	f001 fd77 	bl	95f4 <Print::println()>
    7b06:	2117      	movs	r1, #23
    7b08:	4874      	ldr	r0, [pc, #464]	; (7cdc <L_28854_delayMicroseconds+0x14a>)
    7b0a:	f004 fab9 	bl	c080 <usb_serial_write>
    7b0e:	4870      	ldr	r0, [pc, #448]	; (7cd0 <L_28854_delayMicroseconds+0x13e>)
    7b10:	f001 fd70 	bl	95f4 <Print::println()>
  if (RCM_SRS1 & RCM_SRS1_SACKERR) Serial.println("Stop Mode Acknowledge Error Reset");
    7b14:	4b72      	ldr	r3, [pc, #456]	; (7ce0 <L_28854_delayMicroseconds+0x14e>)
    7b16:	785b      	ldrb	r3, [r3, #1]
    7b18:	0699      	lsls	r1, r3, #26
    7b1a:	f100 8163 	bmi.w	7de4 <L_28854_delayMicroseconds+0x252>
  if (RCM_SRS1 & RCM_SRS1_MDM_AP) Serial.println("MDM-AP Reset");
    7b1e:	4b70      	ldr	r3, [pc, #448]	; (7ce0 <L_28854_delayMicroseconds+0x14e>)
    7b20:	785b      	ldrb	r3, [r3, #1]
    7b22:	071a      	lsls	r2, r3, #28
    7b24:	f100 8156 	bmi.w	7dd4 <L_28854_delayMicroseconds+0x242>
  if (RCM_SRS1 & RCM_SRS1_SW) Serial.println("Software Reset");  // reboot with SCB_AIRCR = 0x05FA0004
    7b28:	4b6d      	ldr	r3, [pc, #436]	; (7ce0 <L_28854_delayMicroseconds+0x14e>)
    7b2a:	785b      	ldrb	r3, [r3, #1]
    7b2c:	075b      	lsls	r3, r3, #29
    7b2e:	f100 8149 	bmi.w	7dc4 <L_28854_delayMicroseconds+0x232>
  if (RCM_SRS1 & RCM_SRS1_LOCKUP) Serial.println("Core Lockup Event Reset");
    7b32:	4b6b      	ldr	r3, [pc, #428]	; (7ce0 <L_28854_delayMicroseconds+0x14e>)
    7b34:	785b      	ldrb	r3, [r3, #1]
    7b36:	079e      	lsls	r6, r3, #30
    7b38:	f100 8130 	bmi.w	7d9c <L_28854_delayMicroseconds+0x20a>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    7b3c:	4b68      	ldr	r3, [pc, #416]	; (7ce0 <L_28854_delayMicroseconds+0x14e>)
    7b3e:	781b      	ldrb	r3, [r3, #0]
    7b40:	061d      	lsls	r5, r3, #24
    7b42:	f100 8137 	bmi.w	7db4 <L_28854_delayMicroseconds+0x222>
  if (RCM_SRS0 & RCM_SRS0_PIN) Serial.println("External Pin Reset");    // Reboot with software download
    7b46:	4b66      	ldr	r3, [pc, #408]	; (7ce0 <L_28854_delayMicroseconds+0x14e>)
    7b48:	781b      	ldrb	r3, [r3, #0]
    7b4a:	065c      	lsls	r4, r3, #25
    7b4c:	f100 811e 	bmi.w	7d8c <L_28854_delayMicroseconds+0x1fa>
  if (RCM_SRS0 & RCM_SRS0_WDOG) Serial.println("Watchdog(COP) Reset");  // WDT timed out
    7b50:	4b63      	ldr	r3, [pc, #396]	; (7ce0 <L_28854_delayMicroseconds+0x14e>)
    7b52:	781b      	ldrb	r3, [r3, #0]
    7b54:	0698      	lsls	r0, r3, #26
    7b56:	f100 8111 	bmi.w	7d7c <L_28854_delayMicroseconds+0x1ea>
  if (RCM_SRS0 & RCM_SRS0_LOC) Serial.println("Loss of External Clock Reset");
    7b5a:	4b61      	ldr	r3, [pc, #388]	; (7ce0 <L_28854_delayMicroseconds+0x14e>)
    7b5c:	781b      	ldrb	r3, [r3, #0]
    7b5e:	0759      	lsls	r1, r3, #29
    7b60:	f100 8104 	bmi.w	7d6c <L_28854_delayMicroseconds+0x1da>
  if (RCM_SRS0 & RCM_SRS0_LOL) Serial.println("Loss of Lock in PLL Reset");
    7b64:	4b5e      	ldr	r3, [pc, #376]	; (7ce0 <L_28854_delayMicroseconds+0x14e>)
    7b66:	781b      	ldrb	r3, [r3, #0]
    7b68:	071a      	lsls	r2, r3, #28
    7b6a:	f100 80f7 	bmi.w	7d5c <L_28854_delayMicroseconds+0x1ca>
  if (RCM_SRS0 & RCM_SRS0_LVD) Serial.println("Low-voltage Detect Reset");
    7b6e:	4b5c      	ldr	r3, [pc, #368]	; (7ce0 <L_28854_delayMicroseconds+0x14e>)
    7b70:	781b      	ldrb	r3, [r3, #0]
    7b72:	079b      	lsls	r3, r3, #30
    7b74:	f100 80ea 	bmi.w	7d4c <L_28854_delayMicroseconds+0x1ba>
  Serial.println();
    7b78:	4855      	ldr	r0, [pc, #340]	; (7cd0 <L_28854_delayMicroseconds+0x13e>)
    7b7a:	f001 fd3b 	bl	95f4 <Print::println()>
  noInterrupts();                  // don't allow interrupts while setting up WDOG
    7b7e:	b672      	cpsid	i
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    7b80:	4b58      	ldr	r3, [pc, #352]	; (7ce4 <L_28854_delayMicroseconds+0x152>)
    7b82:	f24c 5120 	movw	r1, #50464	; 0xc520
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    7b86:	f64d 1228 	movw	r2, #55592	; 0xd928
#elif F_CPU == 2000000
	uint32_t n = usec >> 1;
#endif
    // changed because a delay of 1 micro Sec @ 2MHz will be 0
	if (n == 0) return;
	__asm__ volatile(
    7b8a:	2420      	movs	r4, #32
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    7b8c:	81d9      	strh	r1, [r3, #14]
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    7b8e:	81da      	strh	r2, [r3, #14]
    7b90:	4622      	mov	r2, r4

00007b92 <L_28854_delayMicroseconds>:
    7b92:	3a01      	subs	r2, #1
    7b94:	d1fd      	bne.n	7b92 <L_28854_delayMicroseconds>
  WDOG_TOVALL = 0x0000;
    7b96:	2200      	movs	r2, #0
  WDOG_TOVALH = 0x1000;
    7b98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7b9c:	8099      	strh	r1, [r3, #4]
  WDOG_TOVALL = 0x0000;
    7b9e:	80da      	strh	r2, [r3, #6]
  WDOG_PRESC = 0;
    7ba0:	82da      	strh	r2, [r3, #22]
  WDOG_STCTRLH |= WDOG_STCTRLH_ALLOWUPDATE | WDOG_STCTRLH_WDOGEN | WDOG_STCTRLH_WAITEN | WDOG_STCTRLH_STOPEN | WDOG_STCTRLH_CLKSRC;
    7ba2:	881a      	ldrh	r2, [r3, #0]
    7ba4:	b292      	uxth	r2, r2
    7ba6:	f042 02d3 	orr.w	r2, r2, #211	; 0xd3
    7baa:	801a      	strh	r2, [r3, #0]
  interrupts();
    7bac:	b662      	cpsie	i
  SERIALBMS.begin(115200);
    7bae:	484e      	ldr	r0, [pc, #312]	; (7ce8 <L_28854_delayMicroseconds+0x156>)
    7bb0:	f8df 8138 	ldr.w	r8, [pc, #312]	; 7cec <L_28854_delayMicroseconds+0x15a>
    7bb4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    7bb8:	f001 fc1a 	bl	93f0 <HardwareSerial3::begin(unsigned long)>
    7bbc:	4621      	mov	r1, r4
    7bbe:	484c      	ldr	r0, [pc, #304]	; (7cf0 <L_28854_delayMicroseconds+0x15e>)
    7bc0:	f004 fa5e 	bl	c080 <usb_serial_write>
    7bc4:	4842      	ldr	r0, [pc, #264]	; (7cd0 <L_28854_delayMicroseconds+0x13e>)
    7bc6:	f001 fd15 	bl	95f4 <Print::println()>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    7bca:	f108 34ff 	add.w	r4, r8, #4294967295
    7bce:	f108 06d7 	add.w	r6, r8, #215	; 0xd7
    7bd2:	f1c8 0501 	rsb	r5, r8, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7bd6:	1928      	adds	r0, r5, r4
    7bd8:	f001 ff26 	bl	9a28 <eeprom_read_byte>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    7bdc:	f804 0f01 	strb.w	r0, [r4, #1]!
    7be0:	42b4      	cmp	r4, r6
    7be2:	d1f8      	bne.n	7bd6 <L_28854_delayMicroseconds+0x44>
  if (settings.version != EEPROM_VERSION) {
    7be4:	f898 3000 	ldrb.w	r3, [r8]
    7be8:	2b12      	cmp	r3, #18
    7bea:	d004      	beq.n	7bf6 <L_28854_delayMicroseconds+0x64>
    Serial.println();
    7bec:	4838      	ldr	r0, [pc, #224]	; (7cd0 <L_28854_delayMicroseconds+0x13e>)
    7bee:	f001 fd01 	bl	95f4 <Print::println()>
    loadSettings();
    7bf2:	f7fa fc31 	bl	2458 <loadSettings()>
  Logger::setLoglevel(Logger::Off);  //Debug = 0, Info = 1, Warn = 2, Error = 3, Off = 4
    7bf6:	2004      	movs	r0, #4
    7bf8:	f7fa fa46 	bl	2088 <Logger::setLoglevel(Logger::LogLevel)>
  lastUpdate = 0;
    7bfc:	4b3d      	ldr	r3, [pc, #244]	; (7cf4 <L_28854_delayMicroseconds+0x162>)
    7bfe:	2200      	movs	r2, #0
  digitalWrite(led, HIGH);
    7c00:	2101      	movs	r1, #1
    7c02:	200d      	movs	r0, #13
  lastUpdate = 0;
    7c04:	601a      	str	r2, [r3, #0]
  digitalWrite(led, HIGH);
    7c06:	f002 fbc7 	bl	a398 <digitalWrite>
  bms.setPstrings(settings.Pstrings);
    7c0a:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
    7c0e:	483a      	ldr	r0, [pc, #232]	; (7cf8 <L_28854_delayMicroseconds+0x166>)
    7c10:	f7f9 fede 	bl	19d0 <BMSModuleManager::setPstrings(int)>
  bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    7c14:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    7c18:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
    7c1c:	f898 1040 	ldrb.w	r1, [r8, #64]	; 0x40
    7c20:	4835      	ldr	r0, [pc, #212]	; (7cf8 <L_28854_delayMicroseconds+0x166>)
    7c22:	f7f9 fed7 	bl	19d4 <BMSModuleManager::setSensors(int, float, float)>
  bms.setBalanceHyst(settings.balanceHyst);
    7c26:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
    7c2a:	4833      	ldr	r0, [pc, #204]	; (7cf8 <L_28854_delayMicroseconds+0x166>)
    7c2c:	f7f9 f8e8 	bl	e00 <BMSModuleManager::setBalanceHyst(float)>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7c30:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7c34:	f001 fef8 	bl	9a28 <eeprom_read_byte>
  if (settings.voltsoc == 1) {
    7c38:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
  SOC = (EEPROM.read(1000));
    7c3c:	4a2f      	ldr	r2, [pc, #188]	; (7cfc <L_28854_delayMicroseconds+0x16a>)
  if (settings.voltsoc == 1) {
    7c3e:	2b01      	cmp	r3, #1
  SOC = (EEPROM.read(1000));
    7c40:	6010      	str	r0, [r2, #0]
  if (settings.voltsoc == 1) {
    7c42:	d001      	beq.n	7c48 <L_28854_delayMicroseconds+0xb6>
    if (SOC > 100) {
    7c44:	2864      	cmp	r0, #100	; 0x64
    7c46:	dd02      	ble.n	7c4e <L_28854_delayMicroseconds+0xbc>
    SOCmem = 0;
    7c48:	4b2d      	ldr	r3, [pc, #180]	; (7d00 <L_28854_delayMicroseconds+0x16e>)
    7c4a:	2200      	movs	r2, #0
    7c4c:	601a      	str	r2, [r3, #0]
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    7c4e:	4b2d      	ldr	r3, [pc, #180]	; (7d04 <L_28854_delayMicroseconds+0x172>)
    7c50:	4a2d      	ldr	r2, [pc, #180]	; (7d08 <L_28854_delayMicroseconds+0x176>)
    7c52:	681b      	ldr	r3, [r3, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c54:	6839      	ldr	r1, [r7, #0]
    7c56:	9105      	str	r1, [sp, #20]
    7c58:	fb82 0203 	smull	r0, r2, r2, r3
    7c5c:	17db      	asrs	r3, r3, #31
    7c5e:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    7c62:	4a2a      	ldr	r2, [pc, #168]	; (7d0c <L_28854_delayMicroseconds+0x17a>)
    7c64:	4c2a      	ldr	r4, [pc, #168]	; (7d10 <L_28854_delayMicroseconds+0x17e>)
    7c66:	6812      	ldr	r2, [r2, #0]
	return ret;
    7c68:	9905      	ldr	r1, [sp, #20]
    7c6a:	fb13 f302 	smulbb	r3, r3, r2
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c6e:	683a      	ldr	r2, [r7, #0]
    7c70:	9204      	str	r2, [sp, #16]
    7c72:	8023      	strh	r3, [r4, #0]
  Pretimer = millis();
    7c74:	4a27      	ldr	r2, [pc, #156]	; (7d14 <L_28854_delayMicroseconds+0x182>)
  Pretimer1 = millis();
    7c76:	4b28      	ldr	r3, [pc, #160]	; (7d18 <L_28854_delayMicroseconds+0x186>)
	return ret;
    7c78:	9804      	ldr	r0, [sp, #16]
  Pretimer = millis();
    7c7a:	6011      	str	r1, [r2, #0]
  Pretimer1 = millis();
    7c7c:	6018      	str	r0, [r3, #0]
  attachInterrupt(IN4, isrCP, CHANGE);  // attach BUTTON 1 interrupt handler [ pin# 7 ]
    7c7e:	4927      	ldr	r1, [pc, #156]	; (7d1c <L_28854_delayMicroseconds+0x18a>)
    7c80:	2204      	movs	r2, #4
    7c82:	2013      	movs	r0, #19
    7c84:	f002 f93a 	bl	9efc <attachInterrupt>
  PMC_LVDSC1 = PMC_LVDSC1_LVDV(1);                     // enable hi v
    7c88:	4b25      	ldr	r3, [pc, #148]	; (7d20 <L_28854_delayMicroseconds+0x18e>)
  NVIC_ENABLE_IRQ(IRQ_LOW_VOLTAGE);
    7c8a:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  PMC_LVDSC1 = PMC_LVDSC1_LVDV(1);                     // enable hi v
    7c8e:	2001      	movs	r0, #1
  PMC_LVDSC2 = PMC_LVDSC2_LVWIE | PMC_LVDSC2_LVWV(3);  // 2.92-3.08v
    7c90:	2123      	movs	r1, #35	; 0x23
  PMC_LVDSC1 = PMC_LVDSC1_LVDV(1);                     // enable hi v
    7c92:	7018      	strb	r0, [r3, #0]
  PMC_LVDSC2 = PMC_LVDSC2_LVWIE | PMC_LVDSC2_LVWV(3);  // 2.92-3.08v
    7c94:	7059      	strb	r1, [r3, #1]
  NVIC_ENABLE_IRQ(IRQ_LOW_VOLTAGE);
    7c96:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    7c9a:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7c9e:	683a      	ldr	r2, [r7, #0]
    7ca0:	9203      	str	r2, [sp, #12]
    7ca2:	e03f      	b.n	7d24 <L_28854_delayMicroseconds+0x192>
    7ca4:	1fff8874 	.word	0x1fff8874
    7ca8:	1fffcfd4 	.word	0x1fffcfd4
    7cac:	1fffd1cc 	.word	0x1fffd1cc
    7cb0:	1fffd368 	.word	0x1fffd368
    7cb4:	0007a120 	.word	0x0007a120
    7cb8:	1fff91dc 	.word	0x1fff91dc
    7cbc:	1fffd3c0 	.word	0x1fffd3c0
    7cc0:	1fffd5dc 	.word	0x1fffd5dc
    7cc4:	1fffd5e0 	.word	0x1fffd5e0
    7cc8:	1fffd5b8 	.word	0x1fffd5b8
    7ccc:	00015078 	.word	0x00015078
    7cd0:	1fff89fc 	.word	0x1fff89fc
    7cd4:	00015088 	.word	0x00015088
    7cd8:	1fff88bc 	.word	0x1fff88bc
    7cdc:	00015098 	.word	0x00015098
    7ce0:	4007f000 	.word	0x4007f000
    7ce4:	40052000 	.word	0x40052000
    7ce8:	1fff88d0 	.word	0x1fff88d0
    7cec:	1fffd0d8 	.word	0x1fffd0d8
    7cf0:	0001519c 	.word	0x0001519c
    7cf4:	1fffcffc 	.word	0x1fffcffc
    7cf8:	1fff91f0 	.word	0x1fff91f0
    7cfc:	1fff8828 	.word	0x1fff8828
    7d00:	1fff91c4 	.word	0x1fff91c4
    7d04:	1fff8870 	.word	0x1fff8870
    7d08:	51eb851f 	.word	0x51eb851f
    7d0c:	1fff886c 	.word	0x1fff886c
    7d10:	1fffd0d4 	.word	0x1fffd0d4
    7d14:	1fff91b8 	.word	0x1fff91b8
    7d18:	1fff91bc 	.word	0x1fff91bc
    7d1c:	00002385 	.word	0x00002385
    7d20:	4007d000 	.word	0x4007d000
  cleartime = millis();
    7d24:	4b33      	ldr	r3, [pc, #204]	; (7df4 <L_28854_delayMicroseconds+0x262>)
	return ret;
    7d26:	9a03      	ldr	r2, [sp, #12]
    7d28:	601a      	str	r2, [r3, #0]
}
    7d2a:	b007      	add	sp, #28
    7d2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
    7d30:	683b      	ldr	r3, [r7, #0]
			if (usb_configuration) {
    7d32:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    7d34:	1b5b      	subs	r3, r3, r5
			if (usb_configuration) {
    7d36:	b132      	cbz	r2, 7d46 <L_28854_delayMicroseconds+0x1b4>
				if (elapsed > 2000) break;
    7d38:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    7d3c:	f63f aecd 	bhi.w	7ada <setup+0x1ba>
			yield();
    7d40:	f004 faa4 	bl	c28c <yield>
    7d44:	e6b8      	b.n	7ab8 <setup+0x198>
				if (elapsed > 750) break;
    7d46:	4543      	cmp	r3, r8
    7d48:	d9fa      	bls.n	7d40 <L_28854_delayMicroseconds+0x1ae>
    7d4a:	e6c6      	b.n	7ada <setup+0x1ba>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7d4c:	2118      	movs	r1, #24
    7d4e:	482a      	ldr	r0, [pc, #168]	; (7df8 <L_28854_delayMicroseconds+0x266>)
    7d50:	f004 f996 	bl	c080 <usb_serial_write>
    7d54:	4829      	ldr	r0, [pc, #164]	; (7dfc <L_28854_delayMicroseconds+0x26a>)
    7d56:	f001 fc4d 	bl	95f4 <Print::println()>
    7d5a:	e70d      	b.n	7b78 <setup+0x258>
    7d5c:	2119      	movs	r1, #25
    7d5e:	4828      	ldr	r0, [pc, #160]	; (7e00 <L_28854_delayMicroseconds+0x26e>)
    7d60:	f004 f98e 	bl	c080 <usb_serial_write>
    7d64:	4825      	ldr	r0, [pc, #148]	; (7dfc <L_28854_delayMicroseconds+0x26a>)
    7d66:	f001 fc45 	bl	95f4 <Print::println()>
    7d6a:	e700      	b.n	7b6e <setup+0x24e>
    7d6c:	211c      	movs	r1, #28
    7d6e:	4825      	ldr	r0, [pc, #148]	; (7e04 <L_28854_delayMicroseconds+0x272>)
    7d70:	f004 f986 	bl	c080 <usb_serial_write>
    7d74:	4821      	ldr	r0, [pc, #132]	; (7dfc <L_28854_delayMicroseconds+0x26a>)
    7d76:	f001 fc3d 	bl	95f4 <Print::println()>
    7d7a:	e6f3      	b.n	7b64 <setup+0x244>
    7d7c:	2113      	movs	r1, #19
    7d7e:	4822      	ldr	r0, [pc, #136]	; (7e08 <L_28854_delayMicroseconds+0x276>)
    7d80:	f004 f97e 	bl	c080 <usb_serial_write>
    7d84:	481d      	ldr	r0, [pc, #116]	; (7dfc <L_28854_delayMicroseconds+0x26a>)
    7d86:	f001 fc35 	bl	95f4 <Print::println()>
    7d8a:	e6e6      	b.n	7b5a <setup+0x23a>
    7d8c:	2112      	movs	r1, #18
    7d8e:	481f      	ldr	r0, [pc, #124]	; (7e0c <L_28854_delayMicroseconds+0x27a>)
    7d90:	f004 f976 	bl	c080 <usb_serial_write>
    7d94:	4819      	ldr	r0, [pc, #100]	; (7dfc <L_28854_delayMicroseconds+0x26a>)
    7d96:	f001 fc2d 	bl	95f4 <Print::println()>
    7d9a:	e6d9      	b.n	7b50 <setup+0x230>
    7d9c:	2117      	movs	r1, #23
    7d9e:	481c      	ldr	r0, [pc, #112]	; (7e10 <L_28854_delayMicroseconds+0x27e>)
    7da0:	f004 f96e 	bl	c080 <usb_serial_write>
    7da4:	4815      	ldr	r0, [pc, #84]	; (7dfc <L_28854_delayMicroseconds+0x26a>)
    7da6:	f001 fc25 	bl	95f4 <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    7daa:	4b1a      	ldr	r3, [pc, #104]	; (7e14 <L_28854_delayMicroseconds+0x282>)
    7dac:	781b      	ldrb	r3, [r3, #0]
    7dae:	061d      	lsls	r5, r3, #24
    7db0:	f57f aec9 	bpl.w	7b46 <setup+0x226>
    7db4:	210e      	movs	r1, #14
    7db6:	4818      	ldr	r0, [pc, #96]	; (7e18 <L_28854_delayMicroseconds+0x286>)
    7db8:	f004 f962 	bl	c080 <usb_serial_write>
    7dbc:	480f      	ldr	r0, [pc, #60]	; (7dfc <L_28854_delayMicroseconds+0x26a>)
    7dbe:	f001 fc19 	bl	95f4 <Print::println()>
    7dc2:	e6c0      	b.n	7b46 <setup+0x226>
    7dc4:	210e      	movs	r1, #14
    7dc6:	4815      	ldr	r0, [pc, #84]	; (7e1c <L_28854_delayMicroseconds+0x28a>)
    7dc8:	f004 f95a 	bl	c080 <usb_serial_write>
    7dcc:	480b      	ldr	r0, [pc, #44]	; (7dfc <L_28854_delayMicroseconds+0x26a>)
    7dce:	f001 fc11 	bl	95f4 <Print::println()>
    7dd2:	e6ae      	b.n	7b32 <setup+0x212>
    7dd4:	210c      	movs	r1, #12
    7dd6:	4812      	ldr	r0, [pc, #72]	; (7e20 <L_28854_delayMicroseconds+0x28e>)
    7dd8:	f004 f952 	bl	c080 <usb_serial_write>
    7ddc:	4807      	ldr	r0, [pc, #28]	; (7dfc <L_28854_delayMicroseconds+0x26a>)
    7dde:	f001 fc09 	bl	95f4 <Print::println()>
    7de2:	e6a1      	b.n	7b28 <setup+0x208>
    7de4:	2121      	movs	r1, #33	; 0x21
    7de6:	480f      	ldr	r0, [pc, #60]	; (7e24 <L_28854_delayMicroseconds+0x292>)
    7de8:	f004 f94a 	bl	c080 <usb_serial_write>
    7dec:	4803      	ldr	r0, [pc, #12]	; (7dfc <L_28854_delayMicroseconds+0x26a>)
    7dee:	f001 fc01 	bl	95f4 <Print::println()>
    7df2:	e694      	b.n	7b1e <setup+0x1fe>
    7df4:	1fffcf4c 	.word	0x1fffcf4c
    7df8:	00015180 	.word	0x00015180
    7dfc:	1fff89fc 	.word	0x1fff89fc
    7e00:	00015164 	.word	0x00015164
    7e04:	00015144 	.word	0x00015144
    7e08:	00015130 	.word	0x00015130
    7e0c:	0001511c 	.word	0x0001511c
    7e10:	000150f4 	.word	0x000150f4
    7e14:	4007f000 	.word	0x4007f000
    7e18:	0001510c 	.word	0x0001510c
    7e1c:	000150e4 	.word	0x000150e4
    7e20:	000150d4 	.word	0x000150d4
    7e24:	000150b0 	.word	0x000150b0

00007e28 <CANListener::frameHandler(CAN_message_t&, int, unsigned char)>:
{

    /* default implementation that doesn't handle frames */

    return (false);
}
    7e28:	2000      	movs	r0, #0
    7e2a:	4770      	bx	lr

00007e2c <CANListener::txHandler(int, unsigned char)>:
 */

void CANListener::txHandler (int /*mailbox*/, uint8_t /*controller*/)
{

}
    7e2c:	4770      	bx	lr
    7e2e:	bf00      	nop

00007e30 <FlexCAN::FlexCAN(unsigned char)>:
FlexCAN::FlexCAN (uint8_t id)
    7e30:	b538      	push	{r3, r4, r5, lr}
    defaultMask.id = 0;
    7e32:	4b1b      	ldr	r3, [pc, #108]	; (7ea0 <FlexCAN::FlexCAN(unsigned char)+0x70>)
    flexcanBase = FLEXCAN0_BASE;
    7e34:	491b      	ldr	r1, [pc, #108]	; (7ea4 <FlexCAN::FlexCAN(unsigned char)+0x74>)
    defaultMask.flags.extended = 0;
    7e36:	791a      	ldrb	r2, [r3, #4]
FlexCAN::FlexCAN (uint8_t id)
    7e38:	4604      	mov	r4, r0
    defaultMask.id = 0;
    7e3a:	2500      	movs	r5, #0
    flexcanBase = FLEXCAN0_BASE;
    7e3c:	6021      	str	r1, [r4, #0]
    defaultMask.flags.extended = 0;
    7e3e:	f022 0203 	bic.w	r2, r2, #3
    IrqMessage=IRQ_CAN_MESSAGE;
    7e42:	211d      	movs	r1, #29
    7e44:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
    defaultMask.id = 0;
    7e48:	601d      	str	r5, [r3, #0]
    defaultMask.flags.extended = 0;
    7e4a:	711a      	strb	r2, [r3, #4]
    numTxMailboxes=2;
    7e4c:	2002      	movs	r0, #2
    sizeTxBuffer=SIZE_TX_BUFFER;
    7e4e:	2310      	movs	r3, #16
    sizeRxBuffer=SIZE_RX_BUFFER;
    7e50:	2120      	movs	r1, #32
    sizeTxBuffer=SIZE_TX_BUFFER;
    7e52:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
    numTxMailboxes=2;
    7e56:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    sizeRxBuffer=SIZE_RX_BUFFER;
    7e5a:	f8a4 1196 	strh.w	r1, [r4, #406]	; 0x196
    tx_buffer=0;
    7e5e:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
      txRings[i]=0;
    7e62:	4629      	mov	r1, r5
    rx_buffer=0;
    7e64:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
      txRings[i]=0;
    7e68:	2240      	movs	r2, #64	; 0x40
    7e6a:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    7e6e:	f006 f869 	bl	df44 <memset>
        listener[i] = NULL;
    7e72:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    7e76:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    7e7a:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
    7e7e:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    memset (&stats, 0, sizeof(stats));
    7e82:	2298      	movs	r2, #152	; 0x98
    7e84:	4629      	mov	r1, r5
    7e86:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
    7e8a:	f006 f85b 	bl	df44 <memset>
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    7e8e:	221f      	movs	r2, #31
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    7e90:	230f      	movs	r3, #15
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    7e92:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    7e96:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
}
    7e9a:	4620      	mov	r0, r4
    7e9c:	bd38      	pop	{r3, r4, r5, pc}
    7e9e:	bf00      	nop
    7ea0:	1fffd368 	.word	0x1fffd368
    7ea4:	40024000 	.word	0x40024000

00007ea8 <FlexCAN::setBaudRate(unsigned long)>:
void FlexCAN::setBaudRate(uint32_t baud) {
    7ea8:	b570      	push	{r4, r5, r6, lr}
    uint32_t result = 16000000 / baud / (divisor + 1);
    7eaa:	4e2d      	ldr	r6, [pc, #180]	; (7f60 <FlexCAN::setBaudRate(unsigned long)+0xb8>)
    7eac:	fbb6 fcf1 	udiv	ip, r6, r1
    while (result > 5) {
    7eb0:	f1bc 0f05 	cmp.w	ip, #5
    int error = baud - (16000000 / (result * (divisor + 1)));
    7eb4:	fbb6 f4fc 	udiv	r4, r6, ip
    uint32_t bestDivisor = 0;
    7eb8:	f04f 0500 	mov.w	r5, #0
    int error = baud - (16000000 / (result * (divisor + 1)));
    7ebc:	eba1 0404 	sub.w	r4, r1, r4
    while (result > 5) {
    7ec0:	d921      	bls.n	7f06 <FlexCAN::setBaudRate(unsigned long)+0x5e>
    uint32_t divisor = 0;
    7ec2:	462b      	mov	r3, r5
        divisor++;
    7ec4:	f103 0e01 	add.w	lr, r3, #1
        result = 16000000 / baud / (divisor + 1);
    7ec8:	3302      	adds	r3, #2
    7eca:	fbbc f2f3 	udiv	r2, ip, r3
        if (result <= 25) {
    7ece:	2a19      	cmp	r2, #25
            error = baud - (16000000 / (result * (divisor + 1)));
    7ed0:	fb02 f303 	mul.w	r3, r2, r3
        if (result <= 25) {
    7ed4:	d80f      	bhi.n	7ef6 <FlexCAN::setBaudRate(unsigned long)+0x4e>
            error = baud - (16000000 / (result * (divisor + 1)));
    7ed6:	fbb6 f3f3 	udiv	r3, r6, r3
    7eda:	1acb      	subs	r3, r1, r3
            if (error < 0)
    7edc:	2b00      	cmp	r3, #0
    7ede:	bfb8      	it	lt
    7ee0:	425b      	neglt	r3, r3
            if (error < bestError) {
    7ee2:	42a3      	cmp	r3, r4
    7ee4:	da09      	bge.n	7efa <FlexCAN::setBaudRate(unsigned long)+0x52>
    7ee6:	461c      	mov	r4, r3
                bestDivisor = divisor;
    7ee8:	4675      	mov	r5, lr
            if ((error == bestError) && (result > 11) && (result < 19)) {
    7eea:	2a0b      	cmp	r2, #11
    7eec:	d906      	bls.n	7efc <FlexCAN::setBaudRate(unsigned long)+0x54>
    7eee:	2a12      	cmp	r2, #18
    7ef0:	bf9c      	itt	ls
    7ef2:	461c      	movls	r4, r3
    7ef4:	4675      	movls	r5, lr
void FlexCAN::setBaudRate(uint32_t baud) {
    7ef6:	4673      	mov	r3, lr
    7ef8:	e7e4      	b.n	7ec4 <FlexCAN::setBaudRate(unsigned long)+0x1c>
            if ((error == bestError) && (result > 11) && (result < 19)) {
    7efa:	d0f6      	beq.n	7eea <FlexCAN::setBaudRate(unsigned long)+0x42>
    while (result > 5) {
    7efc:	2a05      	cmp	r2, #5
    7efe:	d8fa      	bhi.n	7ef6 <FlexCAN::setBaudRate(unsigned long)+0x4e>
    result = 16000000 / baud / (divisor + 1);
    7f00:	1c6b      	adds	r3, r5, #1
    7f02:	fbbc fcf3 	udiv	ip, ip, r3
    if ((result < 5) || (result > 25) || (bestError > 300)) {
    7f06:	f1ac 0c05 	sub.w	ip, ip, #5
    7f0a:	f1bc 0f14 	cmp.w	ip, #20
    7f0e:	d81e      	bhi.n	7f4e <FlexCAN::setBaudRate(unsigned long)+0xa6>
    7f10:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    7f14:	dc1b      	bgt.n	7f4e <FlexCAN::setBaudRate(unsigned long)+0xa6>
    uint8_t pSeg1   = bitTimingTable[result][1];
    7f16:	4b13      	ldr	r3, [pc, #76]	; (7f64 <FlexCAN::setBaudRate(unsigned long)+0xbc>)
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    7f18:	6800      	ldr	r0, [r0, #0]
    uint8_t pSeg1   = bitTimingTable[result][1];
    7f1a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    7f1e:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    7f22:	f813 100c 	ldrb.w	r1, [r3, ip]
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    7f26:	7853      	ldrb	r3, [r2, #1]
    7f28:	7892      	ldrb	r2, [r2, #2]
    7f2a:	04db      	lsls	r3, r3, #19
    7f2c:	0412      	lsls	r2, r2, #16
    7f2e:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
    7f32:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    7f36:	f001 0107 	and.w	r1, r1, #7
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    7f3a:	4313      	orrs	r3, r2
    7f3c:	430b      	orrs	r3, r1
    7f3e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    7f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    7f46:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    7f4a:	6043      	str	r3, [r0, #4]
}
    7f4c:	bd70      	pop	{r4, r5, r6, pc}
    7f4e:	4806      	ldr	r0, [pc, #24]	; (7f68 <FlexCAN::setBaudRate(unsigned long)+0xc0>)
    7f50:	2139      	movs	r1, #57	; 0x39
    7f52:	f004 f895 	bl	c080 <usb_serial_write>
    7f56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7f5a:	4804      	ldr	r0, [pc, #16]	; (7f6c <FlexCAN::setBaudRate(unsigned long)+0xc4>)
    7f5c:	f001 bb4a 	b.w	95f4 <Print::println()>
    7f60:	00f42400 	.word	0x00f42400
    7f64:	1fff887c 	.word	0x1fff887c
    7f68:	000151c0 	.word	0x000151c0
    7f6c:	1fff89fc 	.word	0x1fff89fc

00007f70 <FlexCAN::setNumTxBoxes(unsigned char)>:
{
    7f70:	b530      	push	{r4, r5, lr}
    7f72:	2901      	cmp	r1, #1
    7f74:	4604      	mov	r4, r0
    7f76:	bf38      	it	cc
    7f78:	2101      	movcc	r1, #1
    7f7a:	290f      	cmp	r1, #15
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    7f7c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    7f80:	4608      	mov	r0, r1
    7f82:	bf28      	it	cs
    7f84:	200f      	movcs	r0, #15
    numTxMailboxes = txboxes;
    7f86:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    7f8a:	b31b      	cbz	r3, 7fd4 <FlexCAN::setNumTxBoxes(unsigned char)+0x64>
    void setMailBoxTxBufferSize(uint8_t mbox, uint16_t size);

    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    inline uint8_t getLastTxBox() { return getNumMailBoxes()-1; }
    inline uint8_t getNumMailBoxes() { return NUM_MAILBOXES; }
    inline uint8_t getNumRxBoxes() { return getNumMailBoxes()-numTxMailboxes; }
    7f8c:	f1c0 0e10 	rsb	lr, r0, #16
    7f90:	fa5f f58e 	uxtb.w	r5, lr
    7f94:	46ae      	mov	lr, r5
    7f96:	2200      	movs	r2, #0
    7f98:	012d      	lsls	r5, r5, #4
        oldIde = FLEXCANb_MBn_CS(flexcanBase, c) & FLEXCAN_MB_CS_IDE;
    7f9a:	6823      	ldr	r3, [r4, #0]
    7f9c:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    7fa0:	f85c 3002 	ldr.w	r3, [ip, r2]
    7fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | oldIde;
    7fa8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    7fac:	f84c 3002 	str.w	r3, [ip, r2]
    for (c = 0; c < getNumRxBoxes(); c++) {
    7fb0:	3210      	adds	r2, #16
    7fb2:	4295      	cmp	r5, r2
    7fb4:	d1f1      	bne.n	7f9a <FlexCAN::setNumTxBoxes(unsigned char)+0x2a>
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    7fb6:	2510      	movs	r5, #16
    7fb8:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    7fbc:	6823      	ldr	r3, [r4, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    7fbe:	f10e 0201 	add.w	r2, lr, #1
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    7fc2:	3380      	adds	r3, #128	; 0x80
    7fc4:	fb15 330e 	smlabb	r3, r5, lr, r3
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    7fc8:	fa5f fe82 	uxtb.w	lr, r2
    7fcc:	f1be 0f10 	cmp.w	lr, #16
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    7fd0:	6019      	str	r1, [r3, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    7fd2:	d1f3      	bne.n	7fbc <FlexCAN::setNumTxBoxes(unsigned char)+0x4c>
}
    7fd4:	bd30      	pop	{r4, r5, pc}
    7fd6:	bf00      	nop

00007fd8 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>:
    7fd8:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    7fdc:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    7fe0:	b2db      	uxtb	r3, r3
    7fe2:	429a      	cmp	r2, r3
    7fe4:	d222      	bcs.n	802c <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x54>
{
    7fe6:	b510      	push	{r4, lr}
    7fe8:	468c      	mov	ip, r1
    7fea:	4686      	mov	lr, r0
        MBFilters[mbox] = filter;
    7fec:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    7ff0:	e9d1 0100 	ldrd	r0, r1, [r1]
    7ff4:	3304      	adds	r3, #4
    7ff6:	e883 0003 	stmia.w	r3, {r0, r1}
        if (filter.flags.extended) {
    7ffa:	f89c 3004 	ldrb.w	r3, [ip, #4]
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    7ffe:	f8de 1000 	ldr.w	r1, [lr]
        if (filter.flags.extended) {
    8002:	07db      	lsls	r3, r3, #31
    8004:	d513      	bpl.n	802e <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x56>
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    8006:	f8dc 0000 	ldr.w	r0, [ip]
    800a:	2310      	movs	r3, #16
    800c:	3184      	adds	r1, #132	; 0x84
    800e:	fb13 1102 	smlabb	r1, r3, r2, r1
    8012:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
    8016:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) |= FLEXCAN_MB_CS_IDE;
    8018:	f8de 1000 	ldr.w	r1, [lr]
    801c:	3180      	adds	r1, #128	; 0x80
    801e:	fb13 1302 	smlabb	r3, r3, r2, r1
    8022:	681a      	ldr	r2, [r3, #0]
    8024:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    8028:	601a      	str	r2, [r3, #0]
}
    802a:	bd10      	pop	{r4, pc}
    802c:	4770      	bx	lr
            FLEXCANb_MBn_ID(flexcanBase, mbox) = FLEXCAN_MB_ID_IDSTD(filter.id);
    802e:	f8dc 4000 	ldr.w	r4, [ip]
    8032:	4809      	ldr	r0, [pc, #36]	; (8058 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x80>)
    8034:	2310      	movs	r3, #16
    8036:	3184      	adds	r1, #132	; 0x84
    8038:	fb13 1102 	smlabb	r1, r3, r2, r1
    803c:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    8040:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) &= ~FLEXCAN_MB_CS_IDE;
    8042:	f8de 1000 	ldr.w	r1, [lr]
    8046:	3180      	adds	r1, #128	; 0x80
    8048:	fb13 1302 	smlabb	r3, r3, r2, r1
    804c:	681a      	ldr	r2, [r3, #0]
    804e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    8052:	601a      	str	r2, [r3, #0]
}
    8054:	bd10      	pop	{r4, pc}
    8056:	bf00      	nop
    8058:	1ffc0000 	.word	0x1ffc0000

0000805c <FlexCAN::setMask(unsigned long, unsigned char)>:
    805c:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    8060:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    8064:	b2db      	uxtb	r3, r3
    8066:	429a      	cmp	r2, r3
    8068:	d221      	bcs.n	80ae <FlexCAN::setMask(unsigned long, unsigned char)+0x52>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    806a:	6803      	ldr	r3, [r0, #0]
{
    806c:	b410      	push	{r4}
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    806e:	681c      	ldr	r4, [r3, #0]
      if (!wasFrozen) {
    8070:	01e4      	lsls	r4, r4, #7
    8072:	d41d      	bmi.n	80b0 <FlexCAN::setMask(unsigned long, unsigned char)+0x54>
  FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_FRZ;
    8074:	681c      	ldr	r4, [r3, #0]
    8076:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    807a:	601c      	str	r4, [r3, #0]
    FLEXCANb_MCR(flexcanBase) |= (FLEXCAN_MCR_HALT);
    807c:	6804      	ldr	r4, [r0, #0]
    807e:	6823      	ldr	r3, [r4, #0]
    8080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    8084:	6023      	str	r3, [r4, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    8086:	6804      	ldr	r4, [r0, #0]
    8088:	6823      	ldr	r3, [r4, #0]
  while (!isFrozen());
    808a:	01db      	lsls	r3, r3, #7
    808c:	d5fc      	bpl.n	8088 <FlexCAN::setMask(unsigned long, unsigned char)+0x2c>
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    808e:	f504 6408 	add.w	r4, r4, #2176	; 0x880
    8092:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    8096:	6021      	str	r1, [r4, #0]
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    8098:	6802      	ldr	r2, [r0, #0]
    809a:	6813      	ldr	r3, [r2, #0]
    809c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    80a0:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    80a2:	6802      	ldr	r2, [r0, #0]
    80a4:	6813      	ldr	r3, [r2, #0]
  while (isFrozen());
    80a6:	01db      	lsls	r3, r3, #7
    80a8:	d4fc      	bmi.n	80a4 <FlexCAN::setMask(unsigned long, unsigned char)+0x48>
}
    80aa:	bc10      	pop	{r4}
    80ac:	4770      	bx	lr
    80ae:	4770      	bx	lr
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    80b0:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    80b4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
    80b8:	bc10      	pop	{r4}
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    80ba:	6019      	str	r1, [r3, #0]
}
    80bc:	4770      	bx	lr
    80be:	bf00      	nop

000080c0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>:
{
    80c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    80c4:	4617      	mov	r7, r2
    if ( isInitialized() ) return;
    80c6:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
{
    80ca:	f89d 8018 	ldrb.w	r8, [sp, #24]
    80ce:	4606      	mov	r6, r0
    80d0:	460d      	mov	r5, r1
    80d2:	461c      	mov	r4, r3
    if ( isInitialized() ) return;
    80d4:	2a00      	cmp	r2, #0
    80d6:	f000 808f 	beq.w	81f8 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x138>
    if (flexcanBase == FLEXCAN0_BASE) {
    80da:	4a63      	ldr	r2, [pc, #396]	; (8268 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a8>)
    80dc:	6831      	ldr	r1, [r6, #0]
    80de:	4291      	cmp	r1, r2
    80e0:	d07c      	beq.n	81dc <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x11c>
    OSC0_CR |= OSC_ERCLKEN;
    80e2:	4a62      	ldr	r2, [pc, #392]	; (826c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1ac>)
    80e4:	7813      	ldrb	r3, [r2, #0]
    80e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    80ea:	7013      	strb	r3, [r2, #0]
    if (flexcanBase == FLEXCAN0_BASE) {
    80ec:	6833      	ldr	r3, [r6, #0]
    80ee:	f5a2 2282 	sub.w	r2, r2, #266240	; 0x41000
    80f2:	4293      	cmp	r3, r2
    80f4:	d106      	bne.n	8104 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x44>
        SIM_SCGC6 |=  SIM_SCGC6_FLEXCAN0;
    80f6:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    80fa:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    80fc:	f043 0310 	orr.w	r3, r3, #16
    8100:	63d3      	str	r3, [r2, #60]	; 0x3c
    FLEXCANb_CTRL1(flexcanBase) &= ~FLEXCAN_CTRL_CLK_SRC;
    8102:	6833      	ldr	r3, [r6, #0]
    8104:	685a      	ldr	r2, [r3, #4]
    8106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    810a:	605a      	str	r2, [r3, #4]
    FLEXCANb_MCR (flexcanBase) |=  FLEXCAN_MCR_FRZ;
    810c:	6832      	ldr	r2, [r6, #0]
    810e:	6813      	ldr	r3, [r2, #0]
    8110:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    8114:	6013      	str	r3, [r2, #0]
    FLEXCANb_MCR (flexcanBase) &= ~FLEXCAN_MCR_MDIS;
    8116:	6832      	ldr	r2, [r6, #0]
    8118:	6813      	ldr	r3, [r2, #0]
    811a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    811e:	6013      	str	r3, [r2, #0]
    while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_LPM_ACK)
    8120:	6832      	ldr	r2, [r6, #0]
    8122:	6813      	ldr	r3, [r2, #0]
    8124:	02d9      	lsls	r1, r3, #11
    8126:	d4fc      	bmi.n	8122 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x62>
  FLEXCANb_MCR (flexcanBase) ^=  FLEXCAN_MCR_SOFT_RST;
    8128:	6813      	ldr	r3, [r2, #0]
    812a:	f083 7300 	eor.w	r3, r3, #33554432	; 0x2000000
    812e:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR (flexcanBase) & FLEXCAN_MCR_SOFT_RST)
    8130:	6833      	ldr	r3, [r6, #0]
    8132:	681c      	ldr	r4, [r3, #0]
    8134:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
    8138:	d1fb      	bne.n	8132 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x72>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    813a:	681a      	ldr	r2, [r3, #0]
  while (!isFrozen());
    813c:	01d2      	lsls	r2, r2, #7
    813e:	d5fc      	bpl.n	813a <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x7a>
    FLEXCANb_MCR (flexcanBase) |= FLEXCAN_MCR_SRX_DIS;
    8140:	681a      	ldr	r2, [r3, #0]
    8142:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    8146:	601a      	str	r2, [r3, #0]
    setBaudRate(baud);
    8148:	4629      	mov	r1, r5
    814a:	4630      	mov	r0, r6
    814c:	f7ff feac 	bl	7ea8 <FlexCAN::setBaudRate(unsigned long)>
    FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_IRMQ;
    8150:	6832      	ldr	r2, [r6, #0]
    8152:	6813      	ldr	r3, [r2, #0]
    8154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    8158:	6013      	str	r3, [r2, #0]
    815a:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    815e:	2910      	cmp	r1, #16
    8160:	d012      	beq.n	8188 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xc8>
    8162:	2500      	movs	r5, #0
        setMask (0, c);
    8164:	462a      	mov	r2, r5
    8166:	4630      	mov	r0, r6
    8168:	2100      	movs	r1, #0
    816a:	f7ff ff77 	bl	805c <FlexCAN::setMask(unsigned long, unsigned char)>
        setFilter (mask, c);
    816e:	462a      	mov	r2, r5
    8170:	4639      	mov	r1, r7
    8172:	f7ff ff31 	bl	7fd8 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
    8176:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    817a:	3401      	adds	r4, #1
    817c:	f1c1 0310 	rsb	r3, r1, #16
    8180:	b2e5      	uxtb	r5, r4
    8182:	b2db      	uxtb	r3, r3
    8184:	429d      	cmp	r5, r3
    8186:	d3ed      	bcc.n	8164 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xa4>
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    8188:	6832      	ldr	r2, [r6, #0]
    818a:	6813      	ldr	r3, [r2, #0]
    818c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    8190:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    8192:	6833      	ldr	r3, [r6, #0]
    8194:	681a      	ldr	r2, [r3, #0]
  while (isFrozen());
    8196:	01d0      	lsls	r0, r2, #7
    8198:	d4fc      	bmi.n	8194 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xd4>
  while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_NOT_RDY);
    819a:	681a      	ldr	r2, [r3, #0]
    819c:	0112      	lsls	r2, r2, #4
    819e:	d4fc      	bmi.n	819a <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xda>
    setNumTxBoxes (numTxMailboxes);
    81a0:	4630      	mov	r0, r6
    81a2:	f7ff fee5 	bl	7f70 <FlexCAN::setNumTxBoxes(unsigned char)>
    NVIC_SET_PRIORITY (IrqMessage, IRQ_PRIORITY);
    81a6:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    81aa:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    81ae:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    81b2:	2240      	movs	r2, #64	; 0x40
    81b4:	701a      	strb	r2, [r3, #0]
    NVIC_ENABLE_IRQ (IrqMessage);
    81b6:	f8d6 20f8 	ldr.w	r2, [r6, #248]	; 0xf8
    81ba:	0953      	lsrs	r3, r2, #5
    81bc:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    81c0:	3340      	adds	r3, #64	; 0x40
    81c2:	009b      	lsls	r3, r3, #2
    81c4:	2101      	movs	r1, #1
    81c6:	f002 021f 	and.w	r2, r2, #31
    81ca:	fa01 f202 	lsl.w	r2, r1, r2
    81ce:	601a      	str	r2, [r3, #0]
    FLEXCANb_IMASK1 (flexcanBase) = 0xFFFF;
    81d0:	6833      	ldr	r3, [r6, #0]
    81d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
    81d6:	6298      	str	r0, [r3, #40]	; 0x28
}
    81d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (txAlt == 1)
    81dc:	2c01      	cmp	r4, #1
    81de:	d02b      	beq.n	8238 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x178>
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    81e0:	4b23      	ldr	r3, [pc, #140]	; (8270 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    81e2:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    81e6:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    81ea:	631a      	str	r2, [r3, #48]	; 0x30
        if (rxAlt == 1)
    81ec:	d02b      	beq.n	8246 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x186>
            CORE_PIN4_CONFIG = PORT_PCR_MUX(2);
    81ee:	4b20      	ldr	r3, [pc, #128]	; (8270 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    81f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    81f4:	635a      	str	r2, [r3, #52]	; 0x34
    81f6:	e774      	b.n	80e2 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    81f8:	f8b0 0198 	ldrh.w	r0, [r0, #408]	; 0x198
    81fc:	0100      	lsls	r0, r0, #4
    81fe:	f001 fe29 	bl	9e54 <operator new[](unsigned int)>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    8202:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    8206:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    820a:	b30b      	cbz	r3, 8250 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x190>
    ring.buffer = buffer;
    820c:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
    ring.head = 0;
    8210:	2300      	movs	r3, #0
    8212:	f8a6 3094 	strh.w	r3, [r6, #148]	; 0x94
    ring.tail = 0;
    8216:	f8a6 3096 	strh.w	r3, [r6, #150]	; 0x96
    ring.head = 0;
    821a:	f8a6 30a4 	strh.w	r3, [r6, #164]	; 0xa4
    ring.tail = 0;
    821e:	f8a6 30a6 	strh.w	r3, [r6, #166]	; 0xa6
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    8222:	f8b6 3198 	ldrh.w	r3, [r6, #408]	; 0x198
    ring.size = size;
    8226:	f8a6 3098 	strh.w	r3, [r6, #152]	; 0x98
    initRingBuffer (rxRing, rx_buffer, sizeRxBuffer);
    822a:	f8b6 3196 	ldrh.w	r3, [r6, #406]	; 0x196
    ring.buffer = buffer;
    822e:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
    ring.size = size;
    8232:	f8a6 30a8 	strh.w	r3, [r6, #168]	; 0xa8
    ring.tail = 0;
    8236:	e750      	b.n	80da <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a>
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    8238:	4b0e      	ldr	r3, [pc, #56]	; (8274 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    823a:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    823e:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    8242:	649a      	str	r2, [r3, #72]	; 0x48
        if (rxAlt == 1)
    8244:	d1d3      	bne.n	81ee <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x12e>
            CORE_PIN25_CONFIG = PORT_PCR_MUX(2);
    8246:	4b0b      	ldr	r3, [pc, #44]	; (8274 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    8248:	f44f 7200 	mov.w	r2, #512	; 0x200
    824c:	64da      	str	r2, [r3, #76]	; 0x4c
    824e:	e748      	b.n	80e2 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    8250:	f8b6 0196 	ldrh.w	r0, [r6, #406]	; 0x196
    8254:	0100      	lsls	r0, r0, #4
    8256:	f001 fdfd 	bl	9e54 <operator new[](unsigned int)>
    825a:	4603      	mov	r3, r0
    825c:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    8260:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
    8264:	e7d2      	b.n	820c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x14c>
    8266:	bf00      	nop
    8268:	40024000 	.word	0x40024000
    826c:	40065000 	.word	0x40065000
    8270:	40049000 	.word	0x40049000
    8274:	4004a000 	.word	0x4004a000

00008278 <FlexCAN::available()>:
{
    8278:	b410      	push	{r4}
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    827a:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    827e:	0963      	lsrs	r3, r4, #5
    8280:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8284:	3340      	adds	r3, #64	; 0x40
    8286:	009b      	lsls	r3, r3, #2
    8288:	4602      	mov	r2, r0
    828a:	f004 041f 	and.w	r4, r4, #31
    828e:	6818      	ldr	r0, [r3, #0]
    8290:	2101      	movs	r1, #1
    8292:	40a1      	lsls	r1, r4
    8294:	ea10 0401 	ands.w	r4, r0, r1
    8298:	bf14      	ite	ne
    829a:	2001      	movne	r0, #1
    829c:	2000      	moveq	r0, #0
    829e:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    82a2:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    entries = ring.head - ring.tail;
    82a6:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
    82aa:	f8b2 30a6 	ldrh.w	r3, [r2, #166]	; 0xa6
    82ae:	b280      	uxth	r0, r0
    82b0:	b29b      	uxth	r3, r3
    if (entries < 0) {
    82b2:	1ac0      	subs	r0, r0, r3
        entries += ring.size;
    82b4:	bf44      	itt	mi
    82b6:	f8b2 30a8 	ldrhmi.w	r3, [r2, #168]	; 0xa8
    82ba:	18c0      	addmi	r0, r0, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    82bc:	b164      	cbz	r4, 82d8 <FlexCAN::available()+0x60>
    82be:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
    82c2:	0953      	lsrs	r3, r2, #5
    82c4:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    82c8:	3340      	adds	r3, #64	; 0x40
    82ca:	2101      	movs	r1, #1
    82cc:	009b      	lsls	r3, r3, #2
    82ce:	f002 021f 	and.w	r2, r2, #31
    82d2:	fa01 f202 	lsl.w	r2, r1, r2
    82d6:	601a      	str	r2, [r3, #0]
}
    82d8:	bc10      	pop	{r4}
    82da:	4770      	bx	lr

000082dc <FlexCAN::read(CAN_message_t&)>:
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    82dc:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
{
    82e0:	b538      	push	{r3, r4, r5, lr}
    82e2:	0953      	lsrs	r3, r2, #5
    82e4:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    82e8:	3340      	adds	r3, #64	; 0x40
    82ea:	009b      	lsls	r3, r3, #2
    82ec:	4604      	mov	r4, r0
    82ee:	2501      	movs	r5, #1
    82f0:	4608      	mov	r0, r1
    82f2:	f002 021f 	and.w	r2, r2, #31
    82f6:	6819      	ldr	r1, [r3, #0]
    82f8:	fa05 f202 	lsl.w	r2, r5, r2
    82fc:	4211      	tst	r1, r2
    82fe:	bf14      	ite	ne
    8300:	4629      	movne	r1, r5
    8302:	2100      	moveq	r1, #0
    8304:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
    8308:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    830c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    8310:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8314:	b292      	uxth	r2, r2
    8316:	b29b      	uxth	r3, r3
    8318:	429a      	cmp	r2, r3
    831a:	d028      	beq.n	836e <FlexCAN::read(CAN_message_t&)+0x92>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    831c:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8320:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    8324:	b29b      	uxth	r3, r3
    8326:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    832a:	2210      	movs	r2, #16
    832c:	f001 fc42 	bl	9bb4 <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    8330:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8334:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
    8338:	b29b      	uxth	r3, r3
    833a:	442b      	add	r3, r5
    833c:	fbb3 f1f2 	udiv	r1, r3, r2
    8340:	fb02 3311 	mls	r3, r2, r1, r3
    8344:	b29b      	uxth	r3, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    8346:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    834a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
        result=1;
    834e:	4628      	mov	r0, r5
    8350:	b161      	cbz	r1, 836c <FlexCAN::read(CAN_message_t&)+0x90>
    8352:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    8356:	0953      	lsrs	r3, r2, #5
    8358:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    835c:	3340      	adds	r3, #64	; 0x40
    835e:	2101      	movs	r1, #1
    8360:	009b      	lsls	r3, r3, #2
    8362:	f002 021f 	and.w	r2, r2, #31
    8366:	fa01 f202 	lsl.w	r2, r1, r2
    836a:	601a      	str	r2, [r3, #0]
}
    836c:	bd38      	pop	{r3, r4, r5, pc}
    int result=0;
    836e:	2000      	movs	r0, #0
    8370:	e7ee      	b.n	8350 <FlexCAN::read(CAN_message_t&)+0x74>
    8372:	bf00      	nop

00008374 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>:
{
    8374:	b530      	push	{r4, r5, lr}
    if (msg.flags.extended) {
    8376:	798b      	ldrb	r3, [r1, #6]
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    8378:	6804      	ldr	r4, [r0, #0]
    837a:	f04f 0e10 	mov.w	lr, #16
    837e:	f104 0c84 	add.w	ip, r4, #132	; 0x84
    if (msg.flags.extended) {
    8382:	07dc      	lsls	r4, r3, #31
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    8384:	fb1e cc02 	smlabb	ip, lr, r2, ip
    if (msg.flags.extended) {
    8388:	d525      	bpl.n	83d6 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0x62>
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    838a:	680c      	ldr	r4, [r1, #0]
    838c:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    8390:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    8394:	6804      	ldr	r4, [r0, #0]
    8396:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    839a:	688c      	ldr	r4, [r1, #8]
    839c:	fb1e cc02 	smlabb	ip, lr, r2, ip
    83a0:	ba24      	rev	r4, r4
    83a2:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    83a6:	6804      	ldr	r4, [r0, #0]
    83a8:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    83ac:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    83b0:	fb12 fe0e 	smulbb	lr, r2, lr
    83b4:	68ca      	ldr	r2, [r1, #12]
    83b6:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    83b8:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    83bc:	079a      	lsls	r2, r3, #30
    83be:	d53c      	bpl.n	843a <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xc6>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    83c0:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    83c2:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    83c4:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    83c6:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    83c8:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                                                   FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_RTR;
    83cc:	f043 6347 	orr.w	r3, r3, #208666624	; 0xc700000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    83d0:	f842 300e 	str.w	r3, [r2, lr]
}
    83d4:	bd30      	pop	{r4, r5, pc}
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    83d6:	680d      	ldr	r5, [r1, #0]
    83d8:	4c1d      	ldr	r4, [pc, #116]	; (8450 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xdc>)
    83da:	ea04 4485 	and.w	r4, r4, r5, lsl #18
    83de:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    83e2:	6804      	ldr	r4, [r0, #0]
    83e4:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    83e8:	688c      	ldr	r4, [r1, #8]
    83ea:	fb1e cc02 	smlabb	ip, lr, r2, ip
    83ee:	ba24      	rev	r4, r4
    83f0:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    83f4:	6804      	ldr	r4, [r0, #0]
    83f6:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    83fa:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    83fe:	fb12 fe0e 	smulbb	lr, r2, lr
    8402:	68ca      	ldr	r2, [r1, #12]
        if (msg.flags.remote) {
    8404:	079b      	lsls	r3, r3, #30
    8406:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    8408:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    840c:	d50a      	bpl.n	8424 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xb0>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    840e:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8410:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    8412:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8414:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    8416:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    841a:	f043 6341 	orr.w	r3, r3, #202375168	; 0xc100000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    841e:	f842 300e 	str.w	r3, [r2, lr]
}
    8422:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    8424:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8426:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    8428:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    842a:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    842c:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8430:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
    8434:	f842 300e 	str.w	r3, [r2, lr]
}
    8438:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    843a:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    843c:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    843e:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8440:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8442:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    8446:	f043 6346 	orr.w	r3, r3, #207618048	; 0xc600000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    844a:	f842 300e 	str.w	r3, [r2, lr]
}
    844e:	bd30      	pop	{r4, r5, pc}
    8450:	1ffc0000 	.word	0x1ffc0000

00008454 <FlexCAN::write(CAN_message_t const&)>:
{
    8454:	b570      	push	{r4, r5, r6, lr}
    8456:	4604      	mov	r4, r0
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    8458:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
    845c:	0943      	lsrs	r3, r0, #5
    845e:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8462:	3340      	adds	r3, #64	; 0x40
    8464:	009b      	lsls	r3, r3, #2
    8466:	f000 001f 	and.w	r0, r0, #31
    846a:	681d      	ldr	r5, [r3, #0]
    846c:	2201      	movs	r2, #1
    846e:	4082      	lsls	r2, r0
    8470:	4215      	tst	r5, r2
    8472:	bf14      	ite	ne
    8474:	2501      	movne	r5, #1
    8476:	2500      	moveq	r5, #0
    8478:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
    847c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    8480:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    8484:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    8488:	b29b      	uxth	r3, r3
    848a:	b292      	uxth	r2, r2
    848c:	429a      	cmp	r2, r3
    848e:	d02d      	beq.n	84ec <FlexCAN::write(CAN_message_t const&)+0x98>
    nextEntry = (ring.head + 1) % ring.size;
    8490:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    8494:	f8b4 0098 	ldrh.w	r0, [r4, #152]	; 0x98
    if (nextEntry == ring.tail) {
    8498:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    nextEntry = (ring.head + 1) % ring.size;
    849c:	b29b      	uxth	r3, r3
    849e:	3301      	adds	r3, #1
    84a0:	fbb3 f6f0 	udiv	r6, r3, r0
    84a4:	fb00 3316 	mls	r3, r0, r6, r3
    if (nextEntry == ring.tail) {
    84a8:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    84aa:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    84ac:	4296      	cmp	r6, r2
    84ae:	d042      	beq.n	8536 <FlexCAN::write(CAN_message_t const&)+0xe2>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    84b0:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    84b4:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    84b8:	b29b      	uxth	r3, r3
    84ba:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    84be:	2210      	movs	r2, #16
    84c0:	f001 fb78 	bl	9bb4 <memcpy>
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    84c4:	f894 50f4 	ldrb.w	r5, [r4, #244]	; 0xf4
    ring.head = nextEntry;
    84c8:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
            result=1;
    84cc:	2001      	movs	r0, #1
    84ce:	b165      	cbz	r5, 84ea <FlexCAN::write(CAN_message_t const&)+0x96>
    84d0:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    84d4:	0953      	lsrs	r3, r2, #5
    84d6:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    84da:	3340      	adds	r3, #64	; 0x40
    84dc:	2101      	movs	r1, #1
    84de:	009b      	lsls	r3, r3, #2
    84e0:	f002 021f 	and.w	r2, r2, #31
    84e4:	fa01 f202 	lsl.w	r2, r1, r2
    84e8:	601a      	str	r2, [r3, #0]
}
    84ea:	bd70      	pop	{r4, r5, r6, pc}
    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    84ec:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    84f0:	f1c2 0210 	rsb	r2, r2, #16
      for (index = getFirstTxBox(); index < getNumMailBoxes(); index++) {
    84f4:	b2d2      	uxtb	r2, r2
    84f6:	2a0f      	cmp	r2, #15
    84f8:	d8ca      	bhi.n	8490 <FlexCAN::write(CAN_message_t const&)+0x3c>
    84fa:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    84fe:	332c      	adds	r3, #44	; 0x2c
    8500:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8504:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
    8508:	e003      	b.n	8512 <FlexCAN::write(CAN_message_t const&)+0xbe>
    850a:	4563      	cmp	r3, ip
    850c:	f102 0201 	add.w	r2, r2, #1
    8510:	d0be      	beq.n	8490 <FlexCAN::write(CAN_message_t const&)+0x3c>
    bool usesGlobalTxRing(uint8_t mbox) { return (mbox<getNumMailBoxes()?txRings[mbox]==0:true); }
    8512:	f853 0f04 	ldr.w	r0, [r3, #4]!
    8516:	2800      	cmp	r0, #0
    8518:	d1f7      	bne.n	850a <FlexCAN::write(CAN_message_t const&)+0xb6>
          if ( usesGlobalTxRing(index) && FLEXCAN_get_code(FLEXCANb_MBn_CS(flexcanBase, index)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    851a:	6826      	ldr	r6, [r4, #0]
    851c:	0110      	lsls	r0, r2, #4
    851e:	3680      	adds	r6, #128	; 0x80
    8520:	5830      	ldr	r0, [r6, r0]
    8522:	f3c0 6003 	ubfx	r0, r0, #24, #4
    8526:	2808      	cmp	r0, #8
    8528:	d1ef      	bne.n	850a <FlexCAN::write(CAN_message_t const&)+0xb6>
        writeTxRegisters (msg, index);
    852a:	4620      	mov	r0, r4
    852c:	b2d2      	uxtb	r2, r2
    852e:	f7ff ff21 	bl	8374 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
        result=1;
    8532:	2001      	movs	r0, #1
    8534:	e7cb      	b.n	84ce <FlexCAN::write(CAN_message_t const&)+0x7a>
    int result=0;
    8536:	2000      	movs	r0, #0
    8538:	e7c9      	b.n	84ce <FlexCAN::write(CAN_message_t const&)+0x7a>
    853a:	bf00      	nop

0000853c <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>:
{
    853c:	460b      	mov	r3, r1
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    853e:	6801      	ldr	r1, [r0, #0]
    8540:	f04f 0c10 	mov.w	ip, #16
    8544:	3180      	adds	r1, #128	; 0x80
    8546:	fb1c 1102 	smlabb	r1, ip, r2, r1
{
    854a:	b570      	push	{r4, r5, r6, lr}
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    854c:	6809      	ldr	r1, [r1, #0]
    msg.timestamp = FLEXCAN_get_timestamp (mb_CS);
    854e:	8099      	strh	r1, [r3, #4]
    msg.len = FLEXCAN_get_length (mb_CS);
    8550:	f3c1 4603 	ubfx	r6, r1, #16, #4
    8554:	71de      	strb	r6, [r3, #7]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8556:	6804      	ldr	r4, [r0, #0]
    8558:	3484      	adds	r4, #132	; 0x84
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    855a:	fb12 fe0c 	smulbb	lr, r2, ip
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    855e:	fb1c 4c02 	smlabb	ip, ip, r2, r4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    8562:	f3c1 5500 	ubfx	r5, r1, #20, #1
    8566:	f3c1 5240 	ubfx	r2, r1, #21, #1
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    856a:	f8dc 4000 	ldr.w	r4, [ip]
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    856e:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    8572:	f3c1 6c03 	ubfx	ip, r1, #24, #4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    8576:	719a      	strb	r2, [r3, #6]
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    8578:	f1ac 0c06 	sub.w	ip, ip, #6
    if (!msg.flags.extended) {
    857c:	b2d2      	uxtb	r2, r2
    857e:	07d2      	lsls	r2, r2, #31
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    8580:	fabc fc8c 	clz	ip, ip
    8584:	799a      	ldrb	r2, [r3, #6]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8586:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    858a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    858e:	601c      	str	r4, [r3, #0]
    8590:	f36c 0282 	bfi	r2, ip, #2, #1
        msg.id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    8594:	bf5c      	itt	pl
    8596:	0ca4      	lsrpl	r4, r4, #18
    8598:	601c      	strpl	r4, [r3, #0]
    859a:	719a      	strb	r2, [r3, #6]
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    859c:	6802      	ldr	r2, [r0, #0]
    859e:	3288      	adds	r2, #136	; 0x88
    if (msg.len > 4) {
    85a0:	2e04      	cmp	r6, #4
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    85a2:	f852 200e 	ldr.w	r2, [r2, lr]
    msg.buf[0] = dataIn;
    85a6:	ba12      	rev	r2, r2
    msg.len = FLEXCAN_get_length (mb_CS);
    85a8:	f3c1 4507 	ubfx	r5, r1, #16, #8
    msg.buf[0] = dataIn;
    85ac:	609a      	str	r2, [r3, #8]
    if (msg.len > 4) {
    85ae:	d905      	bls.n	85bc <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x80>
        dataIn = FLEXCANb_MBn_WORD1(flexcanBase, buffer);
    85b0:	6802      	ldr	r2, [r0, #0]
    85b2:	328c      	adds	r2, #140	; 0x8c
    85b4:	f852 200e 	ldr.w	r2, [r2, lr]
        msg.buf[4] = dataIn;
    85b8:	ba12      	rev	r2, r2
    85ba:	60da      	str	r2, [r3, #12]
    for (uint32_t loop=msg.len; loop < 8; loop++ ) {
    85bc:	f015 0108 	ands.w	r1, r5, #8
    85c0:	d108      	bne.n	85d4 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x98>
        msg.buf[loop] = 0;
    85c2:	f106 0008 	add.w	r0, r6, #8
    85c6:	f1c6 0208 	rsb	r2, r6, #8
    85ca:	4418      	add	r0, r3
}
    85cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        msg.buf[loop] = 0;
    85d0:	f005 bcb8 	b.w	df44 <memset>
}
    85d4:	bd70      	pop	{r4, r5, r6, pc}
    85d6:	bf00      	nop

000085d8 <FlexCAN::message_isr()>:
{
    85d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    85dc:	4683      	mov	fp, r0
{
    85de:	b089      	sub	sp, #36	; 0x24
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    85e0:	f85b 2bb4 	ldr.w	r2, [fp], #180
    85e4:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
    85e8:	f8cd 900c 	str.w	r9, [sp, #12]
{
    85ec:	4605      	mov	r5, r0
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    85ee:	4682      	mov	sl, r0
    for (i = 0; i < getNumMailBoxes(); i++) {
    85f0:	2400      	movs	r4, #0
    85f2:	e008      	b.n	8606 <FlexCAN::message_isr()+0x2e>
        switch (code) {
    85f4:	2b02      	cmp	r3, #2
    85f6:	d04c      	beq.n	8692 <FlexCAN::message_isr()+0xba>
    for (i = 0; i < getNumMailBoxes(); i++) {
    85f8:	3401      	adds	r4, #1
    85fa:	2c10      	cmp	r4, #16
    85fc:	f10a 0a08 	add.w	sl, sl, #8
    8600:	f10b 0b04 	add.w	fp, fp, #4
    8604:	d040      	beq.n	8688 <FlexCAN::message_isr()+0xb0>
        if ((status & (1UL << i)) == 0) {
    8606:	fa29 f304 	lsr.w	r3, r9, r4
    860a:	07d9      	lsls	r1, r3, #31
    860c:	d5f4      	bpl.n	85f8 <FlexCAN::message_isr()+0x20>
        uint32_t code = FLEXCAN_get_code (FLEXCANb_MBn_CS(flexcanBase, i));
    860e:	0127      	lsls	r7, r4, #4
    8610:	f102 0380 	add.w	r3, r2, #128	; 0x80
    8614:	59db      	ldr	r3, [r3, r7]
    8616:	f3c3 6303 	ubfx	r3, r3, #24, #4
        switch (code) {
    861a:	2b06      	cmp	r3, #6
    861c:	d039      	beq.n	8692 <FlexCAN::message_isr()+0xba>
    861e:	2b08      	cmp	r3, #8
    8620:	d1e8      	bne.n	85f4 <FlexCAN::message_isr()+0x1c>
    8622:	f8db 6000 	ldr.w	r6, [fp]
    8626:	2e00      	cmp	r6, #0
    8628:	f000 80b9 	beq.w	879e <FlexCAN::message_isr()+0x1c6>
    if (ring.head == ring.tail) {
    862c:	8831      	ldrh	r1, [r6, #0]
    862e:	8873      	ldrh	r3, [r6, #2]
    8630:	b289      	uxth	r1, r1
    8632:	b29b      	uxth	r3, r3
    8634:	4299      	cmp	r1, r3
    8636:	f000 80be 	beq.w	87b6 <FlexCAN::message_isr()+0x1de>
    863a:	8831      	ldrh	r1, [r6, #0]
    863c:	8873      	ldrh	r3, [r6, #2]
    863e:	b289      	uxth	r1, r1
    8640:	b29b      	uxth	r3, r3
    8642:	4299      	cmp	r1, r3
    8644:	d0d8      	beq.n	85f8 <FlexCAN::message_isr()+0x20>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    8646:	8873      	ldrh	r3, [r6, #2]
    8648:	68b1      	ldr	r1, [r6, #8]
    864a:	b29b      	uxth	r3, r3
    864c:	2210      	movs	r2, #16
    864e:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    8652:	eb0d 0002 	add.w	r0, sp, r2
    8656:	f001 faad 	bl	9bb4 <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    865a:	8873      	ldrh	r3, [r6, #2]
    865c:	88b2      	ldrh	r2, [r6, #4]
    865e:	b29b      	uxth	r3, r3
    8660:	3301      	adds	r3, #1
    8662:	fbb3 f1f2 	udiv	r1, r3, r2
    8666:	fb02 3311 	mls	r3, r2, r1, r3
    866a:	b29b      	uxth	r3, r3
                    writeTxRegisters (msg, i);
    866c:	b2e2      	uxtb	r2, r4
    ring.tail = (ring.tail + 1) % ring.size;
    866e:	8073      	strh	r3, [r6, #2]
                    writeTxRegisters (msg, i);
    8670:	a904      	add	r1, sp, #16
    8672:	4628      	mov	r0, r5
    for (i = 0; i < getNumMailBoxes(); i++) {
    8674:	3401      	adds	r4, #1
                    writeTxRegisters (msg, i);
    8676:	f7ff fe7d 	bl	8374 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
    for (i = 0; i < getNumMailBoxes(); i++) {
    867a:	2c10      	cmp	r4, #16
    FLEXCANb_IFLAG1(flexcanBase) = status;
    867c:	682a      	ldr	r2, [r5, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    867e:	f10a 0a08 	add.w	sl, sl, #8
    8682:	f10b 0b04 	add.w	fp, fp, #4
    8686:	d1be      	bne.n	8606 <FlexCAN::message_isr()+0x2e>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    8688:	9b03      	ldr	r3, [sp, #12]
    868a:	6313      	str	r3, [r2, #48]	; 0x30
}
    868c:	b009      	add	sp, #36	; 0x24
    868e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            readRxRegisters (msg, i);
    8692:	b2e2      	uxtb	r2, r4
    8694:	a904      	add	r1, sp, #16
    8696:	4628      	mov	r0, r5
    8698:	f7ff ff50 	bl	853c <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>
            if (stats.enabled == true) {
    869c:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    86a0:	b16b      	cbz	r3, 86be <FlexCAN::message_isr()+0xe6>
                stats.mb[i].refCount++;
    86a2:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
    86a6:	3301      	adds	r3, #1
    86a8:	f8ca 3114 	str.w	r3, [sl, #276]	; 0x114
                if (msg.flags.overrun) {
    86ac:	f89d 3016 	ldrb.w	r3, [sp, #22]
    86b0:	075b      	lsls	r3, r3, #29
    86b2:	d504      	bpl.n	86be <FlexCAN::message_isr()+0xe6>
                    stats.mb[i].overrunCount++;
    86b4:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    86b8:	3301      	adds	r3, #1
    86ba:	f8ca 3118 	str.w	r3, [sl, #280]	; 0x118
    86be:	2301      	movs	r3, #1
    86c0:	40a3      	lsls	r3, r4
    86c2:	9300      	str	r3, [sp, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    86c4:	2300      	movs	r3, #0
    86c6:	f105 0680 	add.w	r6, r5, #128	; 0x80
    86ca:	f105 0890 	add.w	r8, r5, #144	; 0x90
    86ce:	9301      	str	r3, [sp, #4]
    86d0:	f8cd b008 	str.w	fp, [sp, #8]
                thisListener = listener[listenerPos];
    86d4:	f856 0f04 	ldr.w	r0, [r6, #4]!
                if (thisListener != NULL) {
    86d8:	b148      	cbz	r0, 86ee <FlexCAN::message_isr()+0x116>
                    if (thisListener->callbacksActive & (1UL << i)) {
    86da:	6842      	ldr	r2, [r0, #4]
    86dc:	9b00      	ldr	r3, [sp, #0]
    86de:	4013      	ands	r3, r2
    86e0:	d033      	beq.n	874a <FlexCAN::message_isr()+0x172>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    86e2:	6803      	ldr	r3, [r0, #0]
    86e4:	f8d3 b000 	ldr.w	fp, [r3]
    86e8:	4b45      	ldr	r3, [pc, #276]	; (8800 <FlexCAN::message_isr()+0x228>)
    86ea:	459b      	cmp	fp, r3
    86ec:	d15a      	bne.n	87a4 <FlexCAN::message_isr()+0x1cc>
            for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    86ee:	45b0      	cmp	r8, r6
    86f0:	d1f0      	bne.n	86d4 <FlexCAN::message_isr()+0xfc>
            if (handledFrame == false) {
    86f2:	9b01      	ldr	r3, [sp, #4]
    86f4:	f8dd b008 	ldr.w	fp, [sp, #8]
    86f8:	b393      	cbz	r3, 8760 <FlexCAN::message_isr()+0x188>
            if (stats.enabled == true) {
    86fa:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    86fe:	b183      	cbz	r3, 8722 <FlexCAN::message_isr()+0x14a>
    entries = ring.head - ring.tail;
    8700:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    8704:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    8708:	b29b      	uxth	r3, r3
    870a:	b292      	uxth	r2, r2
    if (entries < 0) {
    870c:	1a9b      	subs	r3, r3, r2
        entries += ring.size;
    870e:	bf44      	itt	mi
    8710:	f8b5 20a8 	ldrhmi.w	r2, [r5, #168]	; 0xa8
    8714:	189b      	addmi	r3, r3, r2
                if (stats.ringRxHighWater < rxEntries) {
    8716:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    871a:	429a      	cmp	r2, r3
                    stats.ringRxHighWater = rxEntries;
    871c:	bf38      	it	cc
    871e:	f8c5 3104 	strcc.w	r3, [r5, #260]	; 0x104
            if (MBFilters[i].flags.extended) {
    8722:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    8726:	f8da 2004 	ldr.w	r2, [sl, #4]
            if (MBFilters[i].flags.extended) {
    872a:	7a1b      	ldrb	r3, [r3, #8]
    872c:	f013 0f01 	tst.w	r3, #1
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    8730:	682b      	ldr	r3, [r5, #0]
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    8732:	bf08      	it	eq
    8734:	4933      	ldreq	r1, [pc, #204]	; (8804 <FlexCAN::message_isr()+0x22c>)
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    8736:	f103 0384 	add.w	r3, r3, #132	; 0x84
    873a:	bf14      	ite	ne
    873c:	f022 4260 	bicne.w	r2, r2, #3758096384	; 0xe0000000
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    8740:	ea01 4282 	andeq.w	r2, r1, r2, lsl #18
    8744:	51da      	str	r2, [r3, r7]
    FLEXCANb_IFLAG1(flexcanBase) = status;
    8746:	682a      	ldr	r2, [r5, #0]
    8748:	e756      	b.n	85f8 <FlexCAN::message_isr()+0x20>
                    } else if (thisListener->callbacksActive & (1UL << 31)) {
    874a:	2a00      	cmp	r2, #0
    874c:	dacf      	bge.n	86ee <FlexCAN::message_isr()+0x116>
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    874e:	6802      	ldr	r2, [r0, #0]
    8750:	f8d2 b000 	ldr.w	fp, [r2]
    8754:	4a2a      	ldr	r2, [pc, #168]	; (8800 <FlexCAN::message_isr()+0x228>)
    8756:	4593      	cmp	fp, r2
    8758:	d0c9      	beq.n	86ee <FlexCAN::message_isr()+0x116>
    875a:	f04f 32ff 	mov.w	r2, #4294967295
    875e:	e023      	b.n	87a8 <FlexCAN::message_isr()+0x1d0>
    nextEntry = (ring.head + 1) % ring.size;
    8760:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    8764:	f8b5 10a8 	ldrh.w	r1, [r5, #168]	; 0xa8
    if (nextEntry == ring.tail) {
    8768:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    nextEntry = (ring.head + 1) % ring.size;
    876c:	b29b      	uxth	r3, r3
    876e:	3301      	adds	r3, #1
    8770:	fbb3 f0f1 	udiv	r0, r3, r1
    8774:	fb01 3310 	mls	r3, r1, r0, r3
    if (nextEntry == ring.tail) {
    8778:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    877a:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    877c:	4296      	cmp	r6, r2
    877e:	d031      	beq.n	87e4 <FlexCAN::message_isr()+0x20c>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    8780:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    8784:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
    8788:	b29b      	uxth	r3, r3
    878a:	2210      	movs	r2, #16
    878c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    8790:	eb0d 0102 	add.w	r1, sp, r2
    8794:	f001 fa0e 	bl	9bb4 <memcpy>
    ring.head = nextEntry;
    8798:	f8a5 60a4 	strh.w	r6, [r5, #164]	; 0xa4
    return (true);
    879c:	e7ad      	b.n	86fa <FlexCAN::message_isr()+0x122>
            pRing=( usesGlobalTxRing(i) ? &txRing : txRings[i] );
    879e:	f105 0694 	add.w	r6, r5, #148	; 0x94
    87a2:	e743      	b.n	862c <FlexCAN::message_isr()+0x54>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    87a4:	2300      	movs	r3, #0
    87a6:	4622      	mov	r2, r4
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    87a8:	a904      	add	r1, sp, #16
    87aa:	47d8      	blx	fp
    87ac:	9b01      	ldr	r3, [sp, #4]
    87ae:	4318      	orrs	r0, r3
    87b0:	b2c3      	uxtb	r3, r0
    87b2:	9301      	str	r3, [sp, #4]
    87b4:	e79b      	b.n	86ee <FlexCAN::message_isr()+0x116>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    87b6:	2701      	movs	r7, #1
    87b8:	40a7      	lsls	r7, r4
    87ba:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
    87be:	f105 0680 	add.w	r6, r5, #128	; 0x80
    87c2:	f105 0890 	add.w	r8, r5, #144	; 0x90
                    thisListener = listener[listenerPos];
    87c6:	f856 0f04 	ldr.w	r0, [r6, #4]!
                    if (thisListener != NULL) {
    87ca:	b138      	cbz	r0, 87dc <FlexCAN::message_isr()+0x204>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    87cc:	6843      	ldr	r3, [r0, #4]
    87ce:	421f      	tst	r7, r3
    87d0:	d004      	beq.n	87dc <FlexCAN::message_isr()+0x204>
                            thisListener->txHandler (i, controller);
    87d2:	6803      	ldr	r3, [r0, #0]
    87d4:	4a0c      	ldr	r2, [pc, #48]	; (8808 <FlexCAN::message_isr()+0x230>)
    87d6:	685b      	ldr	r3, [r3, #4]
    87d8:	4293      	cmp	r3, r2
    87da:	d10d      	bne.n	87f8 <FlexCAN::message_isr()+0x220>
                for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    87dc:	45b0      	cmp	r8, r6
    87de:	d1f2      	bne.n	87c6 <FlexCAN::message_isr()+0x1ee>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    87e0:	682a      	ldr	r2, [r5, #0]
    87e2:	e709      	b.n	85f8 <FlexCAN::message_isr()+0x20>
                    if (stats.enabled == true) {
    87e4:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    87e8:	2b00      	cmp	r3, #0
    87ea:	d09a      	beq.n	8722 <FlexCAN::message_isr()+0x14a>
                        stats.ringRxFramesLost++;
    87ec:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    87f0:	3301      	adds	r3, #1
    87f2:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            if (stats.enabled == true) {
    87f6:	e783      	b.n	8700 <FlexCAN::message_isr()+0x128>
                            thisListener->txHandler (i, controller);
    87f8:	2200      	movs	r2, #0
    87fa:	4621      	mov	r1, r4
    87fc:	4798      	blx	r3
    87fe:	e7ed      	b.n	87dc <FlexCAN::message_isr()+0x204>
    8800:	00007e29 	.word	0x00007e29
    8804:	1ffc0000 	.word	0x1ffc0000
    8808:	00007e2d 	.word	0x00007e2d

0000880c <can0_message_isr>:
    Can0.message_isr ();
    880c:	4801      	ldr	r0, [pc, #4]	; (8814 <can0_message_isr+0x8>)
    880e:	f7ff bee3 	b.w	85d8 <FlexCAN::message_isr()>
    8812:	bf00      	nop
    8814:	1fffd1cc 	.word	0x1fffd1cc

00008818 <can0_bus_off_isr>:
}
    8818:	4770      	bx	lr
    881a:	bf00      	nop

0000881c <can0_error_isr>:
    uint32_t status = FLEXCANb_ESR1 (flexcanBase);
    881c:	4b01      	ldr	r3, [pc, #4]	; (8824 <can0_error_isr+0x8>)
    881e:	681b      	ldr	r3, [r3, #0]
    8820:	6a1b      	ldr	r3, [r3, #32]
}
    8822:	4770      	bx	lr
    8824:	1fffd1cc 	.word	0x1fffd1cc

00008828 <can0_tx_warn_isr>:
    8828:	4770      	bx	lr
    882a:	bf00      	nop

0000882c <can0_rx_warn_isr>:
    882c:	4770      	bx	lr
    882e:	bf00      	nop

00008830 <can0_wakeup_isr>:
    8830:	4770      	bx	lr
    8832:	bf00      	nop

00008834 <_GLOBAL__sub_I_Can0>:
FlexCAN Can0 (0);
    8834:	4801      	ldr	r0, [pc, #4]	; (883c <_GLOBAL__sub_I_Can0+0x8>)
    8836:	2100      	movs	r1, #0
    8838:	f7ff bafa 	b.w	7e30 <FlexCAN::FlexCAN(unsigned char)>
    883c:	1fffd1cc 	.word	0x1fffd1cc

00008840 <ADC::ADC()>:
    0, 0, 0, 0, 0, 0                                    //22-27
};
#endif

// Constructor
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    8840:	b530      	push	{r4, r5, lr}
    8842:	b083      	sub	sp, #12
#if ADC_DIFF_PAIRS > 0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    8844:	490f      	ldr	r1, [pc, #60]	; (8884 <ADC::ADC()+0x44>)
    8846:	9100      	str	r1, [sp, #0]
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    8848:	4604      	mov	r4, r0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    884a:	4b0f      	ldr	r3, [pc, #60]	; (8888 <ADC::ADC()+0x48>)
    884c:	4a0f      	ldr	r2, [pc, #60]	; (888c <ADC::ADC()+0x4c>)
    884e:	2100      	movs	r1, #0
    8850:	f000 fa60 	bl	8d14 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
#ifdef ADC_DUAL_ADCS
             ,
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    8854:	f104 0540 	add.w	r5, r4, #64	; 0x40
    8858:	490d      	ldr	r1, [pc, #52]	; (8890 <ADC::ADC()+0x50>)
    885a:	9100      	str	r1, [sp, #0]
    885c:	4b0d      	ldr	r3, [pc, #52]	; (8894 <ADC::ADC()+0x54>)
    885e:	4a0e      	ldr	r2, [pc, #56]	; (8898 <ADC::ADC()+0x58>)
    8860:	2101      	movs	r1, #1
    8862:	4628      	mov	r0, r5
    8864:	f000 fa56 	bl	8d14 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
    8868:	2302      	movs	r3, #2
#endif
{
    //ctor

    //digitalWriteFast(LED_BUILTIN, HIGH);
}
    886a:	4620      	mov	r0, r4
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    886c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    8870:	f8c4 4084 	str.w	r4, [r4, #132]	; 0x84
    8874:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    8878:	f8c4 408c 	str.w	r4, [r4, #140]	; 0x8c
    887c:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
    8880:	b003      	add	sp, #12
    8882:	bd30      	pop	{r4, r5, pc}
    8884:	4003b000 	.word	0x4003b000
    8888:	000151fc 	.word	0x000151fc
    888c:	00015204 	.word	0x00015204
    8890:	400bb000 	.word	0x400bb000
    8894:	00015200 	.word	0x00015200
    8898:	00015230 	.word	0x00015230

0000889c <ADC::startContinuous(unsigned char, signed char)>:
#ifdef ADC_SINGLE_ADC
    return adc0->startContinuous(pin); // use ADC0
#else
    /* Teensy 3.1
    */
    if (adc_num == -1)
    889c:	1c53      	adds	r3, r2, #1
{
    889e:	b570      	push	{r4, r5, r6, lr}
    88a0:	4604      	mov	r4, r0
    if (adc_num == -1)
    88a2:	d011      	beq.n	88c8 <ADC::startContinuous(unsigned char, signed char)+0x2c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
            return false; // all others are invalid
        }
    }
    else if (adc_num == 0)
    88a4:	b152      	cbz	r2, 88bc <ADC::startContinuous(unsigned char, signed char)+0x20>
    { // user wants ADC0
        return adc0->startContinuous(pin);
    }
    else if (adc_num == 1)
    88a6:	2a01      	cmp	r2, #1
    88a8:	d029      	beq.n	88fe <ADC::startContinuous(unsigned char, signed char)+0x62>
    { // user wants ADC 1
        return adc1->startContinuous(pin);
    }
    adc0->fail_flag |= ADC_ERROR::OTHER;
    88aa:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    88ae:	8ad3      	ldrh	r3, [r2, #22]
    88b0:	b29b      	uxth	r3, r3
    88b2:	f043 0301 	orr.w	r3, r3, #1
    88b6:	82d3      	strh	r3, [r2, #22]
    return false;
#endif
}
    88b8:	2000      	movs	r0, #0
    88ba:	bd70      	pop	{r4, r5, r6, pc}
    88bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc0->startContinuous(pin);
    88c0:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    88c4:	f000 baf8 	b.w	8eb8 <ADC_Module::startContinuous(unsigned char)>
        bool adc0Pin = adc0->checkPin(pin);
    88c8:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    88cc:	460d      	mov	r5, r1
    88ce:	f000 fac9 	bl	8e64 <ADC_Module::checkPin(unsigned char)>
        bool adc1Pin = adc1->checkPin(pin);
    88d2:	4629      	mov	r1, r5
        bool adc0Pin = adc0->checkPin(pin);
    88d4:	4606      	mov	r6, r0
        bool adc1Pin = adc1->checkPin(pin);
    88d6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    88da:	f000 fac3 	bl	8e64 <ADC_Module::checkPin(unsigned char)>
        if (adc0Pin && adc1Pin)
    88de:	b1a6      	cbz	r6, 890a <ADC::startContinuous(unsigned char, signed char)+0x6e>
    88e0:	b318      	cbz	r0, 892a <ADC::startContinuous(unsigned char, signed char)+0x8e>
            if ((adc0->num_measurements) > (adc1->num_measurements))
    88e2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    88e6:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    88ea:	7d59      	ldrb	r1, [r3, #21]
    88ec:	7d42      	ldrb	r2, [r0, #21]
    88ee:	4291      	cmp	r1, r2
                return adc1->startContinuous(pin);
    88f0:	4629      	mov	r1, r5
            if ((adc0->num_measurements) > (adc1->num_measurements))
    88f2:	d806      	bhi.n	8902 <ADC::startContinuous(unsigned char, signed char)+0x66>
}
    88f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                return adc0->startContinuous(pin);
    88f8:	4618      	mov	r0, r3
    88fa:	f000 badd 	b.w	8eb8 <ADC_Module::startContinuous(unsigned char)>
        return adc1->startContinuous(pin);
    88fe:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
}
    8902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc1->startContinuous(pin);
    8906:	f000 bad7 	b.w	8eb8 <ADC_Module::startContinuous(unsigned char)>
        else if (adc1Pin)
    890a:	b9a8      	cbnz	r0, 8938 <ADC::startContinuous(unsigned char, signed char)+0x9c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
    890c:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
    8910:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    8914:	8acb      	ldrh	r3, [r1, #22]
    8916:	b29b      	uxth	r3, r3
    8918:	f043 0304 	orr.w	r3, r3, #4
    891c:	82cb      	strh	r3, [r1, #22]
    891e:	8ad3      	ldrh	r3, [r2, #22]
    8920:	b29b      	uxth	r3, r3
    8922:	f043 0304 	orr.w	r3, r3, #4
    8926:	82d3      	strh	r3, [r2, #22]
            return false; // all others are invalid
    8928:	e7c6      	b.n	88b8 <ADC::startContinuous(unsigned char, signed char)+0x1c>
            return adc0->startContinuous(pin);
    892a:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    892e:	4629      	mov	r1, r5
}
    8930:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc0->startContinuous(pin);
    8934:	f000 bac0 	b.w	8eb8 <ADC_Module::startContinuous(unsigned char)>
            return adc1->startContinuous(pin);
    8938:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    893c:	4629      	mov	r1, r5
}
    893e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc1->startContinuous(pin);
    8942:	f000 bab9 	b.w	8eb8 <ADC_Module::startContinuous(unsigned char)>
    8946:	bf00      	nop

00008948 <ADC_Module::getMaxValue()>:
*
*/
uint32_t ADC_Module::getMaxValue()
{
    return analog_max_val;
}
    8948:	69c0      	ldr	r0, [r0, #28]
    894a:	4770      	bx	lr

0000894c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setConversionSpeed(ADC_CONVERSION_SPEED speed)
{

    if (speed == conversion_speed)
    894c:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    8950:	428b      	cmp	r3, r1
    8952:	d00a      	beq.n	896a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e>
{
    8954:	b470      	push	{r4, r5, r6}
    //if (calibrating) wait_for_cal();

    bool is_adack = false;
    uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

    switch (speed)
    8956:	2909      	cmp	r1, #9
    8958:	f200 8093 	bhi.w	8a82 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x136>
    895c:	e8df f001 	tbb	[pc, r1]
    8960:	06612f2f 	.word	0x06612f2f
    8964:	8e817106 	.word	0x8e817106
    8968:	5440      	.short	0x5440
    896a:	4770      	bx	lr
    case ADC_CONVERSION_SPEED::HIGH_SPEED:
#ifdef ADC_TEENSY_4
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
#else
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    896c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    *   \return A pointer to the aliased address of the bit of reg
    */
    template <typename T>
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    {
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    896e:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8972:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8976:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    897a:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, bit) = 0;
    }
    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    897e:	2400      	movs	r4, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8980:	2201      	movs	r2, #1
    8982:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8986:	4626      	mov	r6, r4
    8988:	61dc      	str	r4, [r3, #28]
    898a:	2500      	movs	r5, #0
    898c:	f8cc 500c 	str.w	r5, [ip, #12]
        bitband_address(reg, bit) = state;
    }
    template <typename T>
    __attribute__((always_inline)) inline void changeBitFlag(volatile T &reg, T flag, T state)
    {
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8990:	601e      	str	r6, [r3, #0]
        if (__builtin_popcount(flag) > 1)
        {
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8992:	605d      	str	r5, [r3, #4]
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8994:	615c      	str	r4, [r3, #20]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8996:	619a      	str	r2, [r3, #24]
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADICLK(3), ADC_CFG1_speed & ADC_CFG1_ADICLK(3));
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADIV(3), ADC_CFG1_speed & ADC_CFG1_ADIV(3));
#endif
    }

    conversion_speed = speed;
    8998:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    __disable_irq();
    899c:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    899e:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    89a0:	015b      	lsls	r3, r3, #5
    89a2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    calibrating = 1;
    89a6:	2201      	movs	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    89a8:	2100      	movs	r1, #0
    89aa:	7642      	strb	r2, [r0, #25]
    89ac:	f8c3 149c 	str.w	r1, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    89b0:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    89b4:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    89b8:	b662      	cpsie	i
    calibrate();
}
    89ba:	bc70      	pop	{r4, r5, r6}
    89bc:	4770      	bx	lr
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    89be:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    89c0:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    89c4:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    89c8:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    89cc:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    89d0:	2200      	movs	r2, #0
    89d2:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    89d6:	2201      	movs	r2, #1
    89d8:	61da      	str	r2, [r3, #28]
    89da:	4614      	mov	r4, r2
    89dc:	4616      	mov	r6, r2
    89de:	e7d4      	b.n	898a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    89e0:	6b43      	ldr	r3, [r0, #52]	; 0x34
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    89e2:	2400      	movs	r4, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    89e4:	015a      	lsls	r2, r3, #5
    89e6:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    89ea:	f502 7380 	add.w	r3, r2, #256	; 0x100
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    89ee:	f8c2 4188 	str.w	r4, [r2, #392]	; 0x188
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    89f2:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    89f6:	61dc      	str	r4, [r3, #28]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    89f8:	2401      	movs	r4, #1
    89fa:	60d4      	str	r4, [r2, #12]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    89fc:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    89fe:	605c      	str	r4, [r3, #4]
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8a00:	601c      	str	r4, [r3, #0]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8a02:	619a      	str	r2, [r3, #24]
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8a04:	615a      	str	r2, [r3, #20]
    }
    8a06:	e7c7      	b.n	8998 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x4c>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8a08:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a0a:	015a      	lsls	r2, r3, #5
    8a0c:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8a10:	f502 7380 	add.w	r3, r2, #256	; 0x100
    8a14:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8a18:	2401      	movs	r4, #1
    8a1a:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8a1c:	2400      	movs	r4, #0
    8a1e:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    8a20:	e7ea      	b.n	89f8 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8a22:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a24:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8a28:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8a2c:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8a30:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8a34:	2600      	movs	r6, #0
    8a36:	2201      	movs	r2, #1
    8a38:	f8cc 6008 	str.w	r6, [ip, #8]
    8a3c:	4614      	mov	r4, r2
    8a3e:	61de      	str	r6, [r3, #28]
    if (is_adack)
    8a40:	e7a3      	b.n	898a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8a42:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a44:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8a48:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8a4c:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8a50:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8a54:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8a56:	2401      	movs	r4, #1
    8a58:	f8cc 4008 	str.w	r4, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8a5c:	4616      	mov	r6, r2
    8a5e:	61da      	str	r2, [r3, #28]
    if (is_adack)
    8a60:	e793      	b.n	898a <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8a62:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a64:	015a      	lsls	r2, r3, #5
    8a66:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8a6a:	f502 7380 	add.w	r3, r2, #256	; 0x100
    8a6e:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8a72:	2400      	movs	r4, #0
    8a74:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8a76:	2401      	movs	r4, #1
    8a78:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    8a7a:	e7bd      	b.n	89f8 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8a7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8a7e:	2401      	movs	r4, #1
    8a80:	e7b0      	b.n	89e4 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x98>
    8a82:	8ac3      	ldrh	r3, [r0, #22]
    8a84:	b29b      	uxth	r3, r3
    8a86:	f043 0301 	orr.w	r3, r3, #1
    8a8a:	82c3      	strh	r3, [r0, #22]
    8a8c:	e795      	b.n	89ba <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x6e>
    8a8e:	bf00      	nop

00008a90 <ADC_Module::wait_for_cal()>:
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8a90:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a92:	015b      	lsls	r3, r3, #5
    8a94:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
{
    8a98:	b510      	push	{r4, lr}
        return (volatile bool)bitband_address(reg, bit);
    }
    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    8a9a:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8a9e:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    8aa2:	4604      	mov	r4, r0
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8aa4:	b152      	cbz	r2, 8abc <ADC_Module::wait_for_cal()+0x2c>
        yield();
    8aa6:	f003 fbf1 	bl	c28c <yield>
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8aaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8aac:	015b      	lsls	r3, r3, #5
    8aae:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    8ab2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    8ab6:	69da      	ldr	r2, [r3, #28]
    8ab8:	2a00      	cmp	r2, #0
    8aba:	d1f4      	bne.n	8aa6 <ADC_Module::wait_for_cal()+0x16>
    8abc:	699b      	ldr	r3, [r3, #24]
    if (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CALF))
    8abe:	b123      	cbz	r3, 8aca <ADC_Module::wait_for_cal()+0x3a>
    8ac0:	8ae3      	ldrh	r3, [r4, #22]
    8ac2:	b29b      	uxth	r3, r3
    8ac4:	f043 0302 	orr.w	r3, r3, #2
    8ac8:	82e3      	strh	r3, [r4, #22]
    __disable_irq();
    8aca:	b672      	cpsid	i
    if (calibrating)
    8acc:	7e63      	ldrb	r3, [r4, #25]
    8ace:	b303      	cbz	r3, 8b12 <ADC_Module::wait_for_cal()+0x82>
        sum = adc_regs.CLPS + adc_regs.CLP4 + adc_regs.CLP3 + adc_regs.CLP2 + adc_regs.CLP1 + adc_regs.CLP0;
    8ad0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8ad2:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8ad4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    8ad6:	440b      	add	r3, r1
    8ad8:	6c11      	ldr	r1, [r2, #64]	; 0x40
    8ada:	6c50      	ldr	r0, [r2, #68]	; 0x44
    8adc:	440b      	add	r3, r1
    8ade:	6c91      	ldr	r1, [r2, #72]	; 0x48
    8ae0:	4403      	add	r3, r0
    8ae2:	440b      	add	r3, r1
    8ae4:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    8ae6:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    8ae8:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.PG = sum;
    8aec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8af0:	62d3      	str	r3, [r2, #44]	; 0x2c
        sum = adc_regs.CLMS + adc_regs.CLM4 + adc_regs.CLM3 + adc_regs.CLM2 + adc_regs.CLM1 + adc_regs.CLM0;
    8af2:	6d93      	ldr	r3, [r2, #88]	; 0x58
    8af4:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    8af6:	440b      	add	r3, r1
    8af8:	6e11      	ldr	r1, [r2, #96]	; 0x60
    8afa:	6e50      	ldr	r0, [r2, #100]	; 0x64
    8afc:	440b      	add	r3, r1
    8afe:	6e91      	ldr	r1, [r2, #104]	; 0x68
    8b00:	4403      	add	r3, r0
    8b02:	440b      	add	r3, r1
    8b04:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    8b06:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    8b08:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.MG = sum;
    8b0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8b10:	6313      	str	r3, [r2, #48]	; 0x30
    __enable_irq();
    8b12:	b662      	cpsie	i
    if (init_calib)
    8b14:	7ea3      	ldrb	r3, [r4, #26]
    calibrating = 0;
    8b16:	2200      	movs	r2, #0
    8b18:	7662      	strb	r2, [r4, #25]
    if (init_calib)
    8b1a:	b903      	cbnz	r3, 8b1e <ADC_Module::wait_for_cal()+0x8e>
}
    8b1c:	bd10      	pop	{r4, pc}
        setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    8b1e:	2102      	movs	r1, #2
    8b20:	4620      	mov	r0, r4
    8b22:	f7ff ff13 	bl	894c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setSamplingSpeed(ADC_SAMPLING_SPEED speed)
{
    if (calibrating)
    8b26:	7e63      	ldrb	r3, [r4, #25]
    8b28:	bb03      	cbnz	r3, 8b6c <ADC_Module::wait_for_cal()+0xdc>
    case ADC_SAMPLING_SPEED::LOW_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
        atomic::changeBitFlag(adc_regs.CFG2, ADC_CFG2_ADLSTS(3), ADC_CFG2_ADLSTS(1)); // high sampling time (+16 ADCK)
        break;
    case ADC_SAMPLING_SPEED::MED_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8b2a:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b2c:	0159      	lsls	r1, r3, #5
    8b2e:	f101 4284 	add.w	r2, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b32:	2001      	movs	r0, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8b34:	2100      	movs	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b36:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8b3a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8b3e:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
*
*/
void ADC_Module::setAveraging(uint8_t num)
{

    if (calibrating)
    8b42:	7e62      	ldrb	r2, [r4, #25]
    sampling_speed = speed;
    8b44:	2102      	movs	r1, #2
    8b46:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if (calibrating)
    8b4a:	b992      	cbnz	r2, 8b72 <ADC_Module::wait_for_cal()+0xe2>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b4c:	015b      	lsls	r3, r3, #5
    8b4e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b52:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b54:	2001      	movs	r0, #1
#else
            atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGS(3));
#endif
        }
    }
    analog_num_average = num;
    8b56:	2104      	movs	r1, #4
    8b58:	f8c3 0488 	str.w	r0, [r3, #1160]	; 0x488
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b5c:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8b60:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    8b64:	f884 1020 	strb.w	r1, [r4, #32]
        init_calib = 0; // clear
    8b68:	76a2      	strb	r2, [r4, #26]
}
    8b6a:	bd10      	pop	{r4, pc}
        wait_for_cal();
    8b6c:	f7ff ff90 	bl	8a90 <ADC_Module::wait_for_cal()>
    8b70:	e7db      	b.n	8b2a <ADC_Module::wait_for_cal()+0x9a>
        wait_for_cal();
    8b72:	4620      	mov	r0, r4
    8b74:	f7ff ff8c 	bl	8a90 <ADC_Module::wait_for_cal()>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8b78:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8b7a:	e7e7      	b.n	8b4c <ADC_Module::wait_for_cal()+0xbc>

00008b7c <ADC_Module::setResolution(unsigned char)>:
{
    8b7c:	b538      	push	{r3, r4, r5, lr}
    if (analog_res_bits == bits)
    8b7e:	7ec3      	ldrb	r3, [r0, #27]
    8b80:	428b      	cmp	r3, r1
    8b82:	d012      	beq.n	8baa <ADC_Module::setResolution(unsigned char)+0x2e>
    if (calibrating)
    8b84:	7e43      	ldrb	r3, [r0, #25]
    8b86:	4604      	mov	r4, r0
    8b88:	460d      	mov	r5, r1
    8b8a:	bb0b      	cbnz	r3, 8bd0 <ADC_Module::setResolution(unsigned char)+0x54>
    if (bits <= 9)
    8b8c:	2d09      	cmp	r5, #9
    8b8e:	d80d      	bhi.n	8bac <ADC_Module::setResolution(unsigned char)+0x30>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    8b90:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b92:	015b      	lsls	r3, r3, #5
    8b94:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b98:	2000      	movs	r0, #0
    8b9a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    8b9e:	21ff      	movs	r1, #255	; 0xff
        config = 8;
    8ba0:	2208      	movs	r2, #8
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8ba2:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    8ba6:	61e1      	str	r1, [r4, #28]
    analog_res_bits = config;
    8ba8:	76e2      	strb	r2, [r4, #27]
}
    8baa:	bd38      	pop	{r3, r4, r5, pc}
    else if (bits <= 11)
    8bac:	2d0b      	cmp	r5, #11
    8bae:	d912      	bls.n	8bd6 <ADC_Module::setResolution(unsigned char)+0x5a>
    else if (bits <= 13)
    8bb0:	2d0d      	cmp	r5, #13
    8bb2:	d81e      	bhi.n	8bf2 <ADC_Module::setResolution(unsigned char)+0x76>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(1));
    8bb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8bb6:	015b      	lsls	r3, r3, #5
    8bb8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8bbc:	2200      	movs	r2, #0
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8bbe:	2001      	movs	r0, #1
    8bc0:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    8bc4:	f640 71ff 	movw	r1, #4095	; 0xfff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8bc8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 12;
    8bcc:	220c      	movs	r2, #12
    8bce:	e7ea      	b.n	8ba6 <ADC_Module::setResolution(unsigned char)+0x2a>
        wait_for_cal();
    8bd0:	f7ff ff5e 	bl	8a90 <ADC_Module::wait_for_cal()>
    8bd4:	e7da      	b.n	8b8c <ADC_Module::setResolution(unsigned char)+0x10>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(2));
    8bd6:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8bd8:	015b      	lsls	r3, r3, #5
    8bda:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8bde:	2201      	movs	r2, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8be0:	2000      	movs	r0, #0
    8be2:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    8be6:	f240 31ff 	movw	r1, #1023	; 0x3ff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8bea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 10;
    8bee:	220a      	movs	r2, #10
    8bf0:	e7d9      	b.n	8ba6 <ADC_Module::setResolution(unsigned char)+0x2a>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    8bf2:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8bf4:	015b      	lsls	r3, r3, #5
    8bf6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8bfa:	2001      	movs	r0, #1
    8bfc:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8c00:	f64f 71ff 	movw	r1, #65535	; 0xffff
        config = 16;
    8c04:	2210      	movs	r2, #16
    8c06:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 65535;
    8c0a:	e7cc      	b.n	8ba6 <ADC_Module::setResolution(unsigned char)+0x2a>

00008c0c <ADC_Module::analog_init()>:
{
    8c0c:	b538      	push	{r3, r4, r5, lr}
        else
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
        }
#else
        if (ADC_num == 0)
    8c0e:	7e03      	ldrb	r3, [r0, #24]
        {
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    8c10:	4a3d      	ldr	r2, [pc, #244]	; (8d08 <ADC_Module::analog_init()+0xfc>)
    8c12:	4604      	mov	r4, r0
        if (ADC_num == 0)
    8c14:	2b00      	cmp	r3, #0
    8c16:	d16a      	bne.n	8cee <ADC_Module::analog_init()+0xe2>
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    8c18:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    8c1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    8c1e:	63d3      	str	r3, [r2, #60]	; 0x3c
    atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    8c20:	6b62      	ldr	r2, [r4, #52]	; 0x34
    //! Stops the internal reference
    /** This is called automatically by ADC_Module::setReference(ref) when ref is any other than REF_1V2
    */
    __attribute__((always_inline)) inline void stop()
    {
        VREF_SC = 0;
    8c22:	483a      	ldr	r0, [pc, #232]	; (8d0c <ADC_Module::analog_init()+0x100>)
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8c24:	493a      	ldr	r1, [pc, #232]	; (8d10 <ADC_Module::analog_init()+0x104>)
    pga_value = 1;
    8c26:	f240 4501 	movw	r5, #1025	; 0x401
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8c2a:	0152      	lsls	r2, r2, #5
    8c2c:	8465      	strh	r5, [r4, #34]	; 0x22
    8c2e:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    8c32:	2504      	movs	r5, #4
    analog_res_bits = 0;
    8c34:	2300      	movs	r3, #0
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    8c36:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8c3a:	2501      	movs	r5, #1
    analog_res_bits = 0;
    8c3c:	76e3      	strb	r3, [r4, #27]
    analog_max_val = 0;
    8c3e:	61e3      	str	r3, [r4, #28]
    analog_num_average = 0;
    8c40:	f884 3020 	strb.w	r3, [r4, #32]
    interrupts_enabled = false;
    8c44:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    calibrating = 0;
    8c48:	7663      	strb	r3, [r4, #25]
    fail_flag = ADC_ERROR::CLEAR; // clear all errors
    8c4a:	82e3      	strh	r3, [r4, #22]
    num_measurements = 0;
    8c4c:	7563      	strb	r3, [r4, #21]
    8c4e:	f8c2 5190 	str.w	r5, [r2, #400]	; 0x190
    8c52:	7043      	strb	r3, [r0, #1]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8c54:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
        atomic::clearBitFlag(adc_regs.SC2, ADC_SC2_REFSEL(1));
    8c58:	6b62      	ldr	r2, [r4, #52]	; 0x34
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    8c5a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8c5e:	0152      	lsls	r2, r2, #5
    8c60:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8c64:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
    __disable_irq();
    8c68:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8c6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    calibrating = 1;
    8c6c:	7665      	strb	r5, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8c6e:	0152      	lsls	r2, r2, #5
    8c70:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8c74:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8c78:	f8c2 5498 	str.w	r5, [r2, #1176]	; 0x498
    8c7c:	f8c2 549c 	str.w	r5, [r2, #1180]	; 0x49c
    __enable_irq();
    8c80:	b662      	cpsie	i
    setResolution(10);
    8c82:	210a      	movs	r1, #10
    8c84:	4620      	mov	r0, r4
    8c86:	f7ff ff79 	bl	8b7c <ADC_Module::setResolution(unsigned char)>
    if (calibrating)
    8c8a:	7e63      	ldrb	r3, [r4, #25]
    init_calib = 1;
    8c8c:	76a5      	strb	r5, [r4, #26]
    if (calibrating)
    8c8e:	bb9b      	cbnz	r3, 8cf8 <ADC_Module::analog_init()+0xec>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8c92:	015b      	lsls	r3, r3, #5
    8c94:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8c98:	2101      	movs	r1, #1
    analog_num_average = num;
    8c9a:	2220      	movs	r2, #32
    8c9c:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    8ca0:	4620      	mov	r0, r4
    8ca2:	f8c3 1484 	str.w	r1, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8ca6:	f8c3 1480 	str.w	r1, [r3, #1152]	; 0x480
    analog_num_average = num;
    8caa:	f884 2020 	strb.w	r2, [r4, #32]
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    8cae:	f7ff fe4d 	bl	894c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    if (calibrating)
    8cb2:	7e63      	ldrb	r3, [r4, #25]
    8cb4:	bb23      	cbnz	r3, 8d00 <ADC_Module::analog_init()+0xf4>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8cb6:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8cb8:	0159      	lsls	r1, r3, #5
    8cba:	f101 4384 	add.w	r3, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8cbe:	2201      	movs	r2, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8cc0:	2000      	movs	r0, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8cc2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8cc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8cca:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    sampling_speed = speed;
    8cce:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __disable_irq();
    8cd2:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8cd4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    calibrating = 1;
    8cd6:	7662      	strb	r2, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8cd8:	015b      	lsls	r3, r3, #5
    8cda:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8cde:	f8c3 049c 	str.w	r0, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ce2:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    8ce6:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    8cea:	b662      	cpsie	i
}
    8cec:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
            SIM_SCGC3 |= SIM_SCGC3_ADC1;
    8cee:	6b13      	ldr	r3, [r2, #48]	; 0x30
    8cf0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    8cf4:	6313      	str	r3, [r2, #48]	; 0x30
    8cf6:	e793      	b.n	8c20 <ADC_Module::analog_init()+0x14>
        wait_for_cal();
    8cf8:	4620      	mov	r0, r4
    8cfa:	f7ff fec9 	bl	8a90 <ADC_Module::wait_for_cal()>
    8cfe:	e7c7      	b.n	8c90 <ADC_Module::analog_init()+0x84>
        wait_for_cal();
    8d00:	f7ff fec6 	bl	8a90 <ADC_Module::wait_for_cal()>
    8d04:	e7d7      	b.n	8cb6 <ADC_Module::analog_init()+0xaa>
    8d06:	bf00      	nop
    8d08:	40048000 	.word	0x40048000
    8d0c:	40074000 	.word	0x40074000
    8d10:	42fa0000 	.word	0x42fa0000

00008d14 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>:
ADC_Module::ADC_Module(uint8_t ADC_number,
    8d14:	b510      	push	{r4, lr}
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8d16:	2900      	cmp	r1, #0
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    8d18:	6282      	str	r2, [r0, #40]	; 0x28
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8d1a:	4a09      	ldr	r2, [pc, #36]	; (8d40 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x2c>)
                                                 diff_table(a_diff_table)
    8d1c:	6303      	str	r3, [r0, #48]	; 0x30
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8d1e:	bf0c      	ite	eq
    8d20:	2339      	moveq	r3, #57	; 0x39
    8d22:	233a      	movne	r3, #58	; 0x3a
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    8d24:	7601      	strb	r1, [r0, #24]
                                                 IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC1 : IRQ_NUMBER_t::IRQ_ADC0)
    8d26:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8d2a:	4906      	ldr	r1, [pc, #24]	; (8d44 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x30>)
ADC_Module::ADC_Module(uint8_t ADC_number,
    8d2c:	9b02      	ldr	r3, [sp, #8]
                                                 adc_regs(a_adc_regs)
    8d2e:	6343      	str	r3, [r0, #52]	; 0x34
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8d30:	bf18      	it	ne
    8d32:	4611      	movne	r1, r2
ADC_Module::ADC_Module(uint8_t ADC_number,
    8d34:	4604      	mov	r4, r0
    8d36:	6381      	str	r1, [r0, #56]	; 0x38
    analog_init();
    8d38:	f7ff ff68 	bl	8c0c <ADC_Module::analog_init()>
}
    8d3c:	4620      	mov	r0, r4
    8d3e:	bd10      	pop	{r4, pc}
    8d40:	40036038 	.word	0x40036038
    8d44:	40036010 	.word	0x40036010

00008d48 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
{
    8d48:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    8d4a:	7e43      	ldrb	r3, [r0, #25]
{
    8d4c:	4605      	mov	r5, r0
    8d4e:	460c      	mov	r4, r1
    if (calibrating)
    8d50:	b9a3      	cbnz	r3, 8d7c <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x34>
    switch (speed)
    8d52:	2c04      	cmp	r4, #4
    8d54:	d80f      	bhi.n	8d76 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x2e>
    8d56:	e8df f004 	tbb	[pc, r4]
    8d5a:	2d1e      	.short	0x2d1e
    8d5c:	033c      	.short	0x033c
    8d5e:	14          	.byte	0x14
    8d5f:	00          	.byte	0x00
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);    // long sampling time enable
    8d60:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8d62:	015a      	lsls	r2, r3, #5
    8d64:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8d68:	2101      	movs	r1, #1
    8d6a:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
    8d6e:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8d72:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    8d76:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8d7a:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    8d7c:	f7ff fe88 	bl	8a90 <ADC_Module::wait_for_cal()>
    8d80:	e7e7      	b.n	8d52 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP); // shortest sampling time
    8d82:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8d84:	015b      	lsls	r3, r3, #5
    8d86:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8d8a:	2200      	movs	r2, #0
    8d8c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    sampling_speed = speed;
    8d90:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8d94:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);      // long sampling time enable
    8d96:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8d98:	015a      	lsls	r2, r3, #5
    8d9a:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8d9e:	2101      	movs	r1, #1
    8da0:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8da4:	2100      	movs	r1, #0
    8da6:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8daa:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    8dae:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8db2:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8db4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8db6:	015a      	lsls	r2, r3, #5
    8db8:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8dbc:	2101      	movs	r1, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8dbe:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8dc0:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8dc4:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8dc8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    sampling_speed = speed;
    8dcc:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8dd0:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8dd2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8dd4:	015a      	lsls	r2, r3, #5
    8dd6:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8dda:	2101      	movs	r1, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8ddc:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8dde:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8de2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8de6:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    sampling_speed = speed;
    8dea:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8dee:	bd38      	pop	{r3, r4, r5, pc}

00008df0 <ADC_Module::setAveraging(unsigned char)>:
{
    8df0:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    8df2:	7e43      	ldrb	r3, [r0, #25]
{
    8df4:	4604      	mov	r4, r0
    8df6:	460d      	mov	r5, r1
    if (calibrating)
    8df8:	bb2b      	cbnz	r3, 8e46 <ADC_Module::setAveraging(unsigned char)+0x56>
    if (num <= 1)
    8dfa:	2d01      	cmp	r5, #1
        atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8dfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (num <= 1)
    8dfe:	d918      	bls.n	8e32 <ADC_Module::setAveraging(unsigned char)+0x42>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8e00:	015b      	lsls	r3, r3, #5
    8e02:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    8e06:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8e0a:	2101      	movs	r1, #1
        if (num <= 4)
    8e0c:	2d04      	cmp	r5, #4
    8e0e:	6099      	str	r1, [r3, #8]
    8e10:	d806      	bhi.n	8e20 <ADC_Module::setAveraging(unsigned char)+0x30>
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8e12:	2100      	movs	r1, #0
    8e14:	6059      	str	r1, [r3, #4]
            num = 4;
    8e16:	2204      	movs	r2, #4
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8e18:	6019      	str	r1, [r3, #0]
    analog_num_average = num;
    8e1a:	f884 2020 	strb.w	r2, [r4, #32]
}
    8e1e:	bd38      	pop	{r3, r4, r5, pc}
        else if (num <= 8)
    8e20:	2d08      	cmp	r5, #8
    8e22:	d913      	bls.n	8e4c <ADC_Module::setAveraging(unsigned char)+0x5c>
        else if (num <= 16)
    8e24:	2d10      	cmp	r5, #16
    8e26:	d818      	bhi.n	8e5a <ADC_Module::setAveraging(unsigned char)+0x6a>
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8e28:	2200      	movs	r2, #0
    8e2a:	601a      	str	r2, [r3, #0]
            num = 16;
    8e2c:	2210      	movs	r2, #16
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8e2e:	6059      	str	r1, [r3, #4]
    }
    8e30:	e7f3      	b.n	8e1a <ADC_Module::setAveraging(unsigned char)+0x2a>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8e32:	015b      	lsls	r3, r3, #5
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8e34:	2100      	movs	r1, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8e36:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        num = 0;
    8e3a:	460a      	mov	r2, r1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8e3c:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    analog_num_average = num;
    8e40:	f884 2020 	strb.w	r2, [r4, #32]
}
    8e44:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    8e46:	f7ff fe23 	bl	8a90 <ADC_Module::wait_for_cal()>
    8e4a:	e7d6      	b.n	8dfa <ADC_Module::setAveraging(unsigned char)+0xa>
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8e4c:	2000      	movs	r0, #0
            num = 8;
    8e4e:	2208      	movs	r2, #8
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8e50:	6019      	str	r1, [r3, #0]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8e52:	6058      	str	r0, [r3, #4]
    analog_num_average = num;
    8e54:	f884 2020 	strb.w	r2, [r4, #32]
}
    8e58:	bd38      	pop	{r3, r4, r5, pc}
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8e5a:	6059      	str	r1, [r3, #4]
            num = 32;
    8e5c:	2220      	movs	r2, #32
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8e5e:	6019      	str	r1, [r3, #0]
    }
    8e60:	e7db      	b.n	8e1a <ADC_Module::setAveraging(unsigned char)+0x2a>
    8e62:	bf00      	nop

00008e64 <ADC_Module::checkPin(unsigned char)>:

// check whether the pin is a valid analog pin
bool ADC_Module::checkPin(uint8_t pin)
{

    if (pin > ADC_MAX_PIN)
    8e64:	292b      	cmp	r1, #43	; 0x2b
    8e66:	d807      	bhi.n	8e78 <ADC_Module::checkPin(unsigned char)+0x14>
    {
        return false; // all others are invalid
    }

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8e68:	6a83      	ldr	r3, [r0, #40]	; 0x28

    // check for valid pin
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    8e6a:	5c58      	ldrb	r0, [r3, r1]
    8e6c:	f000 001f 	and.w	r0, r0, #31
    8e70:	381f      	subs	r0, #31
    8e72:	bf18      	it	ne
    8e74:	2001      	movne	r0, #1
    8e76:	4770      	bx	lr
        return false; // all others are invalid
    8e78:	2000      	movs	r0, #0
    {
        return false; // all others are invalid
    }

    return true;
}
    8e7a:	4770      	bx	lr

00008e7c <ADC_Module::startReadFast(unsigned char)>:
// It doesn't change the continuous conversion bit
void ADC_Module::startReadFast(uint8_t pin)
{

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8e7c:	6a83      	ldr	r3, [r0, #40]	; 0x28

#ifdef ADC_TEENSY_4
// Teensy 4 has no a or b channels
#else
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    8e7e:	565a      	ldrsb	r2, [r3, r1]
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8e80:	5c5b      	ldrb	r3, [r3, r1]
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    8e82:	2a00      	cmp	r2, #0
    { // mux a
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    8e84:	6b42      	ldr	r2, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8e86:	ea4f 1242 	mov.w	r2, r2, lsl #5
    8e8a:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8e8e:	bfb4      	ite	lt
    8e90:	2100      	movlt	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8e92:	2101      	movge	r1, #1
    8e94:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    }
#endif

    // select pin for single-ended mode and start conversion, enable interrupts if requested
    __disable_irq();
    8e98:	b672      	cpsid	i
#ifdef ADC_TEENSY_4
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
#else
    adc_regs.SC1A = (sc1a_pin & ADC_SC1A_CHANNELS) + atomic::getBitFlag(adc_regs.SC1A, ADC_SC1_AIEN) * ADC_SC1_AIEN;
    8e9a:	6b41      	ldr	r1, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8e9c:	014a      	lsls	r2, r1, #5
    8e9e:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8ea2:	f003 031f 	and.w	r3, r3, #31
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    8ea6:	6992      	ldr	r2, [r2, #24]
    8ea8:	3a00      	subs	r2, #0
    8eaa:	bf18      	it	ne
    8eac:	2201      	movne	r2, #1
    8eae:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    8eb2:	600b      	str	r3, [r1, #0]
#endif
    __enable_irq();
    8eb4:	b662      	cpsie	i
}
    8eb6:	4770      	bx	lr

00008eb8 <ADC_Module::startContinuous(unsigned char)>:
/* Starts continuous conversion on the pin
 * It returns as soon as the ADC is set, use analogReadContinuous() to read the values
 * Set the resolution, number of averages and voltage reference using the appropriate functions BEFORE calling this function
*/
bool ADC_Module::startContinuous(uint8_t pin)
{
    8eb8:	b550      	push	{r4, r6, lr}
    if (pin > ADC_MAX_PIN)
    8eba:	292b      	cmp	r1, #43	; 0x2b
{
    8ebc:	b083      	sub	sp, #12
    8ebe:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
    8ec0:	d817      	bhi.n	8ef2 <ADC_Module::startContinuous(unsigned char)+0x3a>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8ec2:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    8ec4:	5c5b      	ldrb	r3, [r3, r1]
    8ec6:	f003 031f 	and.w	r3, r3, #31
    8eca:	2b1f      	cmp	r3, #31
    8ecc:	d011      	beq.n	8ef2 <ADC_Module::startContinuous(unsigned char)+0x3a>
        fail_flag |= ADC_ERROR::WRONG_PIN;
        return false;
    }

    // check for calibration before setting channels,
    if (calibrating)
    8ece:	7e43      	ldrb	r3, [r0, #25]
    8ed0:	b9bb      	cbnz	r3, 8f02 <ADC_Module::startContinuous(unsigned char)+0x4a>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_ADCO);
    8ed2:	6b63      	ldr	r3, [r4, #52]	; 0x34
        wait_for_cal();

    // increase the counter of measurements
    num_measurements++;
    8ed4:	7d62      	ldrb	r2, [r4, #21]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8ed6:	015b      	lsls	r3, r3, #5
    8ed8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    8edc:	3201      	adds	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ede:	2601      	movs	r6, #1
    8ee0:	7562      	strb	r2, [r4, #21]

    // set continuous conversion flag
    continuousMode();

    startReadFast(pin);
    8ee2:	4620      	mov	r0, r4
    8ee4:	f8c3 648c 	str.w	r6, [r3, #1164]	; 0x48c
    8ee8:	f7ff ffc8 	bl	8e7c <ADC_Module::startReadFast(unsigned char)>

    return true;
    8eec:	4630      	mov	r0, r6
}
    8eee:	b003      	add	sp, #12
    8ef0:	bd50      	pop	{r4, r6, pc}
    8ef2:	8ae3      	ldrh	r3, [r4, #22]
    8ef4:	b29b      	uxth	r3, r3
        return false;
    8ef6:	2000      	movs	r0, #0
    8ef8:	f043 0304 	orr.w	r3, r3, #4
    8efc:	82e3      	strh	r3, [r4, #22]
}
    8efe:	b003      	add	sp, #12
    8f00:	bd50      	pop	{r4, r6, pc}
    8f02:	9101      	str	r1, [sp, #4]
        wait_for_cal();
    8f04:	f7ff fdc4 	bl	8a90 <ADC_Module::wait_for_cal()>
    8f08:	9901      	ldr	r1, [sp, #4]
    8f0a:	e7e2      	b.n	8ed2 <ADC_Module::startContinuous(unsigned char)+0x1a>

00008f0c <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    8f0c:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    8f10:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    8f12:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    8f16:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    8f18:	d101      	bne.n	8f1e <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    8f1a:	6883      	ldr	r3, [r0, #8]
    8f1c:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    8f1e:	f000 b941 	b.w	91a4 <EventResponder::triggerEventNotImmediate()>
    8f22:	bf00      	nop

00008f24 <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
    8f24:	b470      	push	{r4, r5, r6}
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    8f26:	6b01      	ldr	r1, [r0, #48]	; 0x30
    8f28:	4a4a      	ldr	r2, [pc, #296]	; (9054 <SPIClass::dma_rxisr()+0x130>)
    8f2a:	7909      	ldrb	r1, [r1, #4]
    8f2c:	77d1      	strb	r1, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    8f2e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    8f30:	7909      	ldrb	r1, [r1, #4]
    8f32:	7711      	strb	r1, [r2, #28]
    8f34:	6b01      	ldr	r1, [r0, #48]	; 0x30
    8f36:	7909      	ldrb	r1, [r1, #4]
    8f38:	7711      	strb	r1, [r2, #28]
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    8f3a:	6a82      	ldr	r2, [r0, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
    8f3c:	4603      	mov	r3, r0
	if (_dma_count_remaining) {
    8f3e:	b32a      	cbz	r2, 8f8c <SPIClass::dma_rxisr()+0x68>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    8f40:	6841      	ldr	r1, [r0, #4]
    8f42:	68c9      	ldr	r1, [r1, #12]
    8f44:	428a      	cmp	r2, r1
    8f46:	d943      	bls.n	8fd0 <SPIClass::dma_rxisr()+0xac>
			_dma_count_remaining -= hardware().max_dma_count;
    8f48:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    8f4a:	6b00      	ldr	r0, [r0, #48]	; 0x30
			_dma_count_remaining -= hardware().max_dma_count;
    8f4c:	1a52      	subs	r2, r2, r1
    8f4e:	6821      	ldr	r1, [r4, #0]
    8f50:	629a      	str	r2, [r3, #40]	; 0x28
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8f52:	680d      	ldr	r5, [r1, #0]
    8f54:	f103 0424 	add.w	r4, r3, #36	; 0x24
    8f58:	42a5      	cmp	r5, r4
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    8f5a:	f04f 0201 	mov.w	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    8f5e:	d059      	beq.n	9014 <SPIClass::dma_rxisr()+0xf0>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    8f60:	681c      	ldr	r4, [r3, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    8f62:	68e5      	ldr	r5, [r4, #12]
    8f64:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    8f68:	680d      	ldr	r5, [r1, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    8f6a:	d129      	bne.n	8fc0 <SPIClass::dma_rxisr()+0x9c>
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    8f6c:	782d      	ldrb	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    8f6e:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8f70:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    8f74:	3601      	adds	r6, #1
    8f76:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8f78:	6365      	str	r5, [r4, #52]	; 0x34
		DMA_SERQ = channel;
    8f7a:	4936      	ldr	r1, [pc, #216]	; (9054 <SPIClass::dma_rxisr()+0x130>)
    8f7c:	7900      	ldrb	r0, [r0, #4]
    8f7e:	76c8      	strb	r0, [r1, #27]
			}
		}
		_dmaRX->enable();
		if (should_reenable_tx)
    8f80:	b112      	cbz	r2, 8f88 <SPIClass::dma_rxisr()+0x64>
    8f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    8f84:	791b      	ldrb	r3, [r3, #4]
    8f86:	76cb      	strb	r3, [r1, #27]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();

	}
}
    8f88:	bc70      	pop	{r4, r5, r6}
    8f8a:	4770      	bx	lr
    8f8c:	6801      	ldr	r1, [r0, #0]
		port().SR = 0xFF0F0000;
    8f8e:	4c32      	ldr	r4, [pc, #200]	; (9058 <SPIClass::dma_rxisr()+0x134>)
		_dma_event_responder->triggerEvent();
    8f90:	6b40      	ldr	r0, [r0, #52]	; 0x34
		port().RSER = 0;
    8f92:	630a      	str	r2, [r1, #48]	; 0x30
		port().SR = 0xFF0F0000;
    8f94:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    8f96:	68cc      	ldr	r4, [r1, #12]
    8f98:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
    8f9c:	60cc      	str	r4, [r1, #12]
		_dma_event_responder->triggerEvent();
    8f9e:	6804      	ldr	r4, [r0, #0]
    8fa0:	492e      	ldr	r1, [pc, #184]	; (905c <SPIClass::dma_rxisr()+0x138>)
    8fa2:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    8fa4:	f04f 0c03 	mov.w	ip, #3
    8fa8:	428c      	cmp	r4, r1
    8faa:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
		_dma_event_responder->triggerEvent();
    8fae:	d139      	bne.n	9024 <SPIClass::dma_rxisr()+0x100>
		if (_type == EventTypeImmediate) {
    8fb0:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    8fb2:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    8fb4:	2b02      	cmp	r3, #2
		_data = data;
    8fb6:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    8fb8:	d138      	bne.n	902c <SPIClass::dma_rxisr()+0x108>
}
    8fba:	bc70      	pop	{r4, r5, r6}
			(*_function)(*this);
    8fbc:	6883      	ldr	r3, [r0, #8]
    8fbe:	4718      	bx	r3
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    8fc0:	882d      	ldrh	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    8fc2:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8fc4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    8fc8:	3602      	adds	r6, #2
    8fca:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    8fcc:	6365      	str	r5, [r4, #52]	; 0x34
    8fce:	e7d4      	b.n	8f7a <SPIClass::dma_rxisr()+0x56>
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    8fd0:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    8fd2:	6809      	ldr	r1, [r1, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    8fd4:	8bcc      	ldrh	r4, [r1, #30]
    8fd6:	0426      	lsls	r6, r4, #16
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    8fd8:	f102 30ff 	add.w	r0, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    8fdc:	d431      	bmi.n	9042 <SPIClass::dma_rxisr()+0x11e>
		tcd->BITER = len & 0x7fff;
    8fde:	f3c0 000e 	ubfx	r0, r0, #0, #15
    8fe2:	83c8      	strh	r0, [r1, #30]
	tcd->CITER = tcd->BITER; 
    8fe4:	8bcc      	ldrh	r4, [r1, #30]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    8fe6:	6b18      	ldr	r0, [r3, #48]	; 0x30
	tcd->CITER = tcd->BITER; 
    8fe8:	b2a4      	uxth	r4, r4
    8fea:	82cc      	strh	r4, [r1, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    8fec:	6804      	ldr	r4, [r0, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    8fee:	8be5      	ldrh	r5, [r4, #30]
    8ff0:	042d      	lsls	r5, r5, #16
    8ff2:	d41e      	bmi.n	9032 <SPIClass::dma_rxisr()+0x10e>
		tcd->BITER = len & 0x7fff;
    8ff4:	f3c2 050e 	ubfx	r5, r2, #0, #15
    8ff8:	83e5      	strh	r5, [r4, #30]
	tcd->CITER = tcd->BITER; 
    8ffa:	8be5      	ldrh	r5, [r4, #30]
    8ffc:	b2ad      	uxth	r5, r5
    8ffe:	82e5      	strh	r5, [r4, #22]
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    9000:	680d      	ldr	r5, [r1, #0]
			_dma_count_remaining = 0;
    9002:	2400      	movs	r4, #0
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    9004:	3a01      	subs	r2, #1
			_dma_count_remaining = 0;
    9006:	629c      	str	r4, [r3, #40]	; 0x28
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    9008:	f103 0424 	add.w	r4, r3, #36	; 0x24
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    900c:	bf18      	it	ne
    900e:	2201      	movne	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    9010:	42a5      	cmp	r5, r4
    9012:	d1a5      	bne.n	8f60 <SPIClass::dma_rxisr()+0x3c>
    9014:	6819      	ldr	r1, [r3, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    9016:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    9018:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
    901c:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    9020:	634c      	str	r4, [r1, #52]	; 0x34
    9022:	e7aa      	b.n	8f7a <SPIClass::dma_rxisr()+0x56>
		_dma_event_responder->triggerEvent();
    9024:	4623      	mov	r3, r4
    9026:	4611      	mov	r1, r2
}
    9028:	bc70      	pop	{r4, r5, r6}
		_dma_event_responder->triggerEvent();
    902a:	4718      	bx	r3
}
    902c:	bc70      	pop	{r4, r5, r6}
			triggerEventNotImmediate();
    902e:	f000 b8b9 	b.w	91a4 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    9032:	8be5      	ldrh	r5, [r4, #30]
    9034:	f3c2 0608 	ubfx	r6, r2, #0, #9
    9038:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
    903c:	4335      	orrs	r5, r6
    903e:	83e5      	strh	r5, [r4, #30]
    9040:	e7db      	b.n	8ffa <SPIClass::dma_rxisr()+0xd6>
    9042:	8bcc      	ldrh	r4, [r1, #30]
    9044:	f3c0 0008 	ubfx	r0, r0, #0, #9
    9048:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    904c:	4320      	orrs	r0, r4
    904e:	83c8      	strh	r0, [r1, #30]
    9050:	e7c8      	b.n	8fe4 <SPIClass::dma_rxisr()+0xc0>
    9052:	bf00      	nop
    9054:	40008000 	.word	0x40008000
    9058:	ff0f0000 	.word	0xff0f0000
    905c:	00008f0d 	.word	0x00008f0d

00009060 <_spi_dma_rxISR0()>:
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    9060:	b508      	push	{r3, lr}
    9062:	4802      	ldr	r0, [pc, #8]	; (906c <_spi_dma_rxISR0()+0xc>)
    9064:	f7ff ff5e 	bl	8f24 <SPIClass::dma_rxisr()>
    9068:	bd08      	pop	{r3, pc}
    906a:	bf00      	nop
    906c:	1fffd370 	.word	0x1fffd370

00009070 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v>:
		: port_addr(myport), hardware_addr(myhardware) {
    9070:	4a0a      	ldr	r2, [pc, #40]	; (909c <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x2c>)
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);
    9072:	490b      	ldr	r1, [pc, #44]	; (90a0 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x30>)
    9074:	2300      	movs	r3, #0
}
    9076:	b410      	push	{r4}
    9078:	4c0a      	ldr	r4, [pc, #40]	; (90a4 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x34>)
    907a:	6093      	str	r3, [r2, #8]
    907c:	8493      	strh	r3, [r2, #36]	; 0x24
    907e:	6014      	str	r4, [r2, #0]
    9080:	6051      	str	r1, [r2, #4]
    9082:	bc10      	pop	{r4}
    9084:	60d3      	str	r3, [r2, #12]
    9086:	6193      	str	r3, [r2, #24]
    9088:	6293      	str	r3, [r2, #40]	; 0x28
    908a:	62d3      	str	r3, [r2, #44]	; 0x2c
    908c:	6313      	str	r3, [r2, #48]	; 0x30
    908e:	6353      	str	r3, [r2, #52]	; 0x34
    9090:	6113      	str	r3, [r2, #16]
    9092:	6153      	str	r3, [r2, #20]
    9094:	61d3      	str	r3, [r2, #28]
    9096:	6213      	str	r3, [r2, #32]
    9098:	4770      	bx	lr
    909a:	bf00      	nop
    909c:	1fffd370 	.word	0x1fffd370
    90a0:	0001525c 	.word	0x0001525c
    90a4:	4002c000 	.word	0x4002c000

000090a8 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>:
#include "FilterOnePole.h"
#include "FloatDefine.h"

FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    90a8:	b538      	push	{r3, r4, r5, lr}
    90aa:	4604      	mov	r4, r0
    90ac:	4608      	mov	r0, r1
  setFilter( ft, fc, initialValue );
}

void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
  FT = ft;
    90ae:	7020      	strb	r0, [r4, #0]

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    90b0:	490a      	ldr	r1, [pc, #40]	; (90dc <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x34>)
    90b2:	4610      	mov	r0, r2
FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    90b4:	461d      	mov	r5, r3
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    90b6:	f003 fec3 	bl	ce40 <__aeabi_fmul>
    90ba:	4601      	mov	r1, r0
    90bc:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    90c0:	f003 ff72 	bl	cfa8 <__aeabi_fdiv>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    90c4:	4906      	ldr	r1, [pc, #24]	; (90e0 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x38>)
    90c6:	f003 febb 	bl	ce40 <__aeabi_fmul>
  Y = initialValue;
    90ca:	60e5      	str	r5, [r4, #12]
  TauUS = newTau * 1e6;
    90cc:	6060      	str	r0, [r4, #4]
  Ylast = initialValue;
    90ce:	6125      	str	r5, [r4, #16]
  X = initialValue;
    90d0:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    90d2:	f001 f9d1 	bl	a478 <micros>
    90d6:	61e0      	str	r0, [r4, #28]
}
    90d8:	4620      	mov	r0, r4
    90da:	bd38      	pop	{r3, r4, r5, pc}
    90dc:	40c90fdb 	.word	0x40c90fdb
    90e0:	49742400 	.word	0x49742400

000090e4 <FilterOnePole::output()>:
}

float FilterOnePole::output() {
    // figure out which button to read
  switch (FT) {
    90e4:	7803      	ldrb	r3, [r0, #0]
float FilterOnePole::output() {
    90e6:	b510      	push	{r4, lr}
    90e8:	4604      	mov	r4, r0
  switch (FT) {
    90ea:	2b03      	cmp	r3, #3
    90ec:	d821      	bhi.n	9132 <FilterOnePole::output()+0x4e>
    90ee:	e8df f003 	tbb	[pc, r3]
    90f2:	1e19      	.short	0x1e19
    90f4:	0211      	.short	0x0211
      // highpass is the _difference_
      return X-Y;
      break;
    case DIFFERENTIATOR:
      // like a highpass, but normalize
      return (X-Y)/(TauUS/1.0e6);
    90f6:	68c1      	ldr	r1, [r0, #12]
    90f8:	6940      	ldr	r0, [r0, #20]
    90fa:	f003 fd97 	bl	cc2c <__aeabi_fsub>
    90fe:	490e      	ldr	r1, [pc, #56]	; (9138 <FilterOnePole::output()+0x54>)
    9100:	4603      	mov	r3, r0
    9102:	6860      	ldr	r0, [r4, #4]
    9104:	461c      	mov	r4, r3
    9106:	f003 ff4f 	bl	cfa8 <__aeabi_fdiv>
    910a:	4601      	mov	r1, r0
    910c:	4620      	mov	r0, r4
    910e:	f003 ff4b 	bl	cfa8 <__aeabi_fdiv>
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    9112:	bd10      	pop	{r4, pc}
      return Y * (TauUS/1.0e6);
    9114:	4908      	ldr	r1, [pc, #32]	; (9138 <FilterOnePole::output()+0x54>)
    9116:	6840      	ldr	r0, [r0, #4]
    9118:	f003 ff46 	bl	cfa8 <__aeabi_fdiv>
    911c:	68e1      	ldr	r1, [r4, #12]
    911e:	f003 fe8f 	bl	ce40 <__aeabi_fmul>
}
    9122:	bd10      	pop	{r4, pc}
      return X-Y;
    9124:	68c1      	ldr	r1, [r0, #12]
    9126:	6940      	ldr	r0, [r0, #20]
    9128:	f003 fd80 	bl	cc2c <__aeabi_fsub>
}
    912c:	bd10      	pop	{r4, pc}
      return Y; 
    912e:	68c0      	ldr	r0, [r0, #12]
}
    9130:	bd10      	pop	{r4, pc}
  switch (FT) {
    9132:	2000      	movs	r0, #0
}
    9134:	bd10      	pop	{r4, pc}
    9136:	bf00      	nop
    9138:	49742400 	.word	0x49742400

0000913c <FilterOnePole::input(float)>:
float FilterOnePole::input( float inVal ) {
    913c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    913e:	4604      	mov	r4, r0
    9140:	460e      	mov	r6, r1
  long time = micros();
    9142:	f001 f999 	bl	a478 <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    9146:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    9148:	4605      	mov	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    914a:	1ac0      	subs	r0, r0, r3
    914c:	f003 fe24 	bl	cd98 <__aeabi_i2f>
  Ylast = Y;
    9150:	68e7      	ldr	r7, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    9152:	61a0      	str	r0, [r4, #24]
    9154:	4601      	mov	r1, r0
  LastUS = time;                      // update this now
    9156:	61e5      	str	r5, [r4, #28]
  TauSamps = TauUS / ElapsedUS;
    9158:	6860      	ldr	r0, [r4, #4]
  X = inVal;                          // this is now the most recent input value
    915a:	6166      	str	r6, [r4, #20]
  Ylast = Y;
    915c:	6127      	str	r7, [r4, #16]
  TauSamps = TauUS / ElapsedUS;
    915e:	f003 ff23 	bl	cfa8 <__aeabi_fdiv>
    9162:	4601      	mov	r1, r0
    9164:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    9166:	480e      	ldr	r0, [pc, #56]	; (91a0 <FilterOnePole::input(float)+0x64>)
    9168:	f003 ff1e 	bl	cfa8 <__aeabi_fdiv>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    916c:	f003 f968 	bl	c440 <expf>
    9170:	4605      	mov	r5, r0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    9172:	4601      	mov	r1, r0
    9174:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    9178:	f003 fd58 	bl	cc2c <__aeabi_fsub>
    917c:	4631      	mov	r1, r6
    917e:	f003 fe5f 	bl	ce40 <__aeabi_fmul>
    9182:	4629      	mov	r1, r5
    9184:	4606      	mov	r6, r0
    9186:	4638      	mov	r0, r7
    9188:	f003 fe5a 	bl	ce40 <__aeabi_fmul>
    918c:	4601      	mov	r1, r0
    918e:	4630      	mov	r0, r6
    9190:	f003 fd4e 	bl	cc30 <__addsf3>
    9194:	60e0      	str	r0, [r4, #12]
  return output();
    9196:	4620      	mov	r0, r4
}
    9198:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return output();
    919c:	f7ff bfa2 	b.w	90e4 <FilterOnePole::output()>
    91a0:	bf800000 	.word	0xbf800000

000091a4 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    91a4:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    91a8:	b672      	cpsid	i
extern const uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    91aa:	7f43      	ldrb	r3, [r0, #29]
    91ac:	b95b      	cbnz	r3, 91c6 <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    91ae:	7f01      	ldrb	r1, [r0, #28]
    91b0:	2901      	cmp	r1, #1
{
    91b2:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    91b4:	d00b      	beq.n	91ce <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    91b6:	2903      	cmp	r1, #3
    91b8:	d013      	beq.n	91e2 <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    91ba:	2301      	movs	r3, #1
    91bc:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    91be:	b902      	cbnz	r2, 91c2 <EventResponder::triggerEventNotImmediate()+0x1e>
    91c0:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    91c2:	bc30      	pop	{r4, r5}
    91c4:	4770      	bx	lr
    91c6:	b90a      	cbnz	r2, 91cc <EventResponder::triggerEventNotImmediate()+0x28>
    91c8:	b662      	cpsie	i
    91ca:	4770      	bx	lr
    91cc:	4770      	bx	lr
			if (firstYield == nullptr) {
    91ce:	4c12      	ldr	r4, [pc, #72]	; (9218 <EventResponder::triggerEventNotImmediate()+0x74>)
    91d0:	6821      	ldr	r1, [r4, #0]
    91d2:	b1b1      	cbz	r1, 9202 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    91d4:	4911      	ldr	r1, [pc, #68]	; (921c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    91d6:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    91d8:	680b      	ldr	r3, [r1, #0]
    91da:	6183      	str	r3, [r0, #24]
				lastYield = this;
    91dc:	6008      	str	r0, [r1, #0]
				_prev->_next = this;
    91de:	6158      	str	r0, [r3, #20]
				lastYield = this;
    91e0:	e7eb      	b.n	91ba <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    91e2:	4d0f      	ldr	r5, [pc, #60]	; (9220 <EventResponder::triggerEventNotImmediate()+0x7c>)
    91e4:	490f      	ldr	r1, [pc, #60]	; (9224 <EventResponder::triggerEventNotImmediate()+0x80>)
    91e6:	682c      	ldr	r4, [r5, #0]
    91e8:	b18c      	cbz	r4, 920e <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    91ea:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    91ec:	680b      	ldr	r3, [r1, #0]
    91ee:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    91f0:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    91f2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    91f6:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    91fa:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    91fc:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    9200:	e7db      	b.n	91ba <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    9202:	4b06      	ldr	r3, [pc, #24]	; (921c <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    9204:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    9206:	6181      	str	r1, [r0, #24]
				firstYield = this;
    9208:	6020      	str	r0, [r4, #0]
				lastYield = this;
    920a:	6018      	str	r0, [r3, #0]
    920c:	e7d5      	b.n	91ba <EventResponder::triggerEventNotImmediate()+0x16>
				_next = nullptr;
    920e:	6144      	str	r4, [r0, #20]
				_prev = nullptr;
    9210:	6184      	str	r4, [r0, #24]
				firstInterrupt = this;
    9212:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    9214:	e7ed      	b.n	91f2 <EventResponder::triggerEventNotImmediate()+0x4e>
    9216:	bf00      	nop
    9218:	1fffd3a8 	.word	0x1fffd3a8
    921c:	1fffd3b8 	.word	0x1fffd3b8
    9220:	1fffd3b0 	.word	0x1fffd3b0
    9224:	1fffd3ac 	.word	0x1fffd3ac

00009228 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    9228:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    922a:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    922e:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9230:	4c0c      	ldr	r4, [pc, #48]	; (9264 <EventResponder::runFromInterrupt()+0x3c>)
    9232:	6820      	ldr	r0, [r4, #0]
		if (first) {
    9234:	b180      	cbz	r0, 9258 <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    9236:	4e0c      	ldr	r6, [pc, #48]	; (9268 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    9238:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    923a:	6943      	ldr	r3, [r0, #20]
    923c:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    923e:	b173      	cbz	r3, 925e <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    9240:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    9242:	b902      	cbnz	r2, 9246 <EventResponder::runFromInterrupt()+0x1e>
    9244:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    9246:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    9248:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    924a:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    924c:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    9250:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    9252:	6820      	ldr	r0, [r4, #0]
		if (first) {
    9254:	2800      	cmp	r0, #0
    9256:	d1f0      	bne.n	923a <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    9258:	b902      	cbnz	r2, 925c <EventResponder::runFromInterrupt()+0x34>
    925a:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    925c:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    925e:	6033      	str	r3, [r6, #0]
    9260:	e7ef      	b.n	9242 <EventResponder::runFromInterrupt()+0x1a>
    9262:	bf00      	nop
    9264:	1fffd3b0 	.word	0x1fffd3b0
    9268:	1fffd3ac 	.word	0x1fffd3ac

0000926c <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    926c:	f7ff bfdc 	b.w	9228 <EventResponder::runFromInterrupt()>

00009270 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    9270:	4a02      	ldr	r2, [pc, #8]	; (927c <systick_isr+0xc>)
    9272:	6813      	ldr	r3, [r2, #0]
    9274:	3301      	adds	r3, #1
    9276:	6013      	str	r3, [r2, #0]
}
    9278:	4770      	bx	lr
    927a:	bf00      	nop
    927c:	1fffd3c0 	.word	0x1fffd3c0

00009280 <HardwareSerial2::begin(unsigned long)>:
HardwareSerial2 Serial2(&serialEvent2);

uint8_t _serialEvent2_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial2::begin(uint32_t baud) {
	serial2_begin(BAUD2DIV2(baud));
    9280:	084b      	lsrs	r3, r1, #1
    9282:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
    9286:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
void HardwareSerial2::begin(uint32_t baud) {
    928a:	b510      	push	{r4, lr}
    928c:	4604      	mov	r4, r0
	serial2_begin(BAUD2DIV2(baud));
    928e:	fbb3 f0f1 	udiv	r0, r3, r1
    9292:	f001 f95d 	bl	a550 <serial2_begin>
	if (!_serialEvent2_default) addToSerialEventsList();
    9296:	4b04      	ldr	r3, [pc, #16]	; (92a8 <HardwareSerial2::begin(unsigned long)+0x28>)
    9298:	781b      	ldrb	r3, [r3, #0]
    929a:	b103      	cbz	r3, 929e <HardwareSerial2::begin(unsigned long)+0x1e>
}
    929c:	bd10      	pop	{r4, pc}
	if (!_serialEvent2_default) addToSerialEventsList();
    929e:	4620      	mov	r0, r4
}
    92a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent2_default) addToSerialEventsList();
    92a4:	f003 b86a 	b.w	c37c <HardwareSerial::addToSerialEventsList()>
    92a8:	1fff89f9 	.word	0x1fff89f9

000092ac <HardwareSerial2::write9bit(unsigned long)>:
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    92ac:	b508      	push	{r3, lr}
    92ae:	4608      	mov	r0, r1
    92b0:	f001 fb3c 	bl	a92c <serial2_putchar>
    92b4:	2001      	movs	r0, #1
    92b6:	bd08      	pop	{r3, pc}

000092b8 <HardwareSerial2::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    92b8:	b508      	push	{r3, lr}
    92ba:	4608      	mov	r0, r1
    92bc:	f001 fb36 	bl	a92c <serial2_putchar>
    92c0:	2001      	movs	r0, #1
    92c2:	bd08      	pop	{r3, pc}

000092c4 <HardwareSerial2::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    92c4:	b538      	push	{r3, r4, r5, lr}
    92c6:	4608      	mov	r0, r1
    92c8:	460d      	mov	r5, r1
    92ca:	f004 ff79 	bl	e1c0 <strlen>
    92ce:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    92d0:	4601      	mov	r1, r0
    92d2:	4628      	mov	r0, r5
    92d4:	f001 fba6 	bl	aa24 <serial2_write>
					  return len; }
    92d8:	4620      	mov	r0, r4
    92da:	bd38      	pop	{r3, r4, r5, pc}

000092dc <HardwareSerial2::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    92dc:	b510      	push	{r4, lr}
    92de:	4608      	mov	r0, r1
    92e0:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    92e2:	4611      	mov	r1, r2
    92e4:	f001 fb9e 	bl	aa24 <serial2_write>
    92e8:	4620      	mov	r0, r4
    92ea:	bd10      	pop	{r4, pc}

000092ec <HardwareSerial2::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial2_add_memory_for_write(buffer, length);}
    92ec:	4608      	mov	r0, r1
    92ee:	4611      	mov	r1, r2
    92f0:	f001 bdc6 	b.w	ae80 <serial2_add_memory_for_write>

000092f4 <HardwareSerial2::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial2_add_memory_for_read(buffer, length);}
    92f4:	4608      	mov	r0, r1
    92f6:	4611      	mov	r1, r2
    92f8:	f001 bda6 	b.w	ae48 <serial2_add_memory_for_read>

000092fc <HardwareSerial2::clear()>:
	virtual void clear(void)	{ serial2_clear(); }
    92fc:	f001 bcbe 	b.w	ac7c <serial2_clear>

00009300 <HardwareSerial2::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
    9300:	b508      	push	{r3, lr}
    9302:	4608      	mov	r0, r1
    9304:	f001 faf2 	bl	a8ec <serial2_set_cts>
    9308:	3800      	subs	r0, #0
    930a:	bf18      	it	ne
    930c:	2001      	movne	r0, #1
    930e:	bd08      	pop	{r3, pc}

00009310 <HardwareSerial2::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
    9310:	b508      	push	{r3, lr}
    9312:	4608      	mov	r0, r1
    9314:	f001 fac8 	bl	a8a8 <serial2_set_rts>
    9318:	3800      	subs	r0, #0
    931a:	bf18      	it	ne
    931c:	2001      	movne	r0, #1
    931e:	bd08      	pop	{r3, pc}

00009320 <HardwareSerial2::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
    9320:	4608      	mov	r0, r1
    9322:	4611      	mov	r1, r2
    9324:	f001 ba54 	b.w	a7d0 <serial2_set_tx>

00009328 <HardwareSerial2::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
    9328:	4608      	mov	r0, r1
    932a:	f001 ba8f 	b.w	a84c <serial2_set_rx>
    932e:	bf00      	nop

00009330 <HardwareSerial2::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
    9330:	4608      	mov	r0, r1
    9332:	f001 ba31 	b.w	a798 <serial2_set_transmit_pin>
    9336:	bf00      	nop

00009338 <HardwareSerial2::end()>:
	virtual void end(void)		{ serial2_end(); }
    9338:	f001 b9c6 	b.w	a6c8 <serial2_end>

0000933c <HardwareSerial2::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    933c:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV2(baud));
    933e:	084b      	lsrs	r3, r1, #1
    9340:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
	virtual void begin(uint32_t baud, uint32_t format) {
    9344:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV2(baud));
    9346:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
    934a:	fbb3 f0f1 	udiv	r0, r3, r1
    934e:	f001 f8ff 	bl	a550 <serial2_begin>
					  serial2_format(format); }
    9352:	4620      	mov	r0, r4
    9354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9358:	f001 b968 	b.w	a62c <serial2_format>

0000935c <HardwareSerial2::peek()>:
	virtual int peek(void)          { return serial2_peek(); }
    935c:	f001 bc68 	b.w	ac30 <serial2_peek>

00009360 <HardwareSerial2::read()>:
	virtual int read(void)          { return serial2_getchar(); }
    9360:	f001 bc20 	b.w	aba4 <serial2_getchar>

00009364 <HardwareSerial2::available()>:
	virtual int available(void)     { return serial2_available(); }
    9364:	f001 bc0a 	b.w	ab7c <serial2_available>

00009368 <HardwareSerial2::flush()>:
	virtual void flush(void)        { serial2_flush(); }
    9368:	f001 bbe4 	b.w	ab34 <serial2_flush>

0000936c <HardwareSerial2::availableForWrite()>:
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
    936c:	f001 bbee 	b.w	ab4c <serial2_write_buffer_free>

00009370 <HardwareSerial2::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    9370:	6803      	ldr	r3, [r0, #0]
    9372:	4a06      	ldr	r2, [pc, #24]	; (938c <HardwareSerial2::write(int)+0x1c>)
    9374:	681b      	ldr	r3, [r3, #0]
    9376:	4293      	cmp	r3, r2
    9378:	d105      	bne.n	9386 <HardwareSerial2::write(int)+0x16>
    937a:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    937c:	b2c8      	uxtb	r0, r1
    937e:	f001 fad5 	bl	a92c <serial2_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    9382:	2001      	movs	r0, #1
    9384:	bd10      	pop	{r4, pc}
    9386:	b2c9      	uxtb	r1, r1
    9388:	4718      	bx	r3
    938a:	bf00      	nop
    938c:	000092b9 	.word	0x000092b9

00009390 <HardwareSerial2::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    9390:	6803      	ldr	r3, [r0, #0]
    9392:	4a06      	ldr	r2, [pc, #24]	; (93ac <HardwareSerial2::write(unsigned long)+0x1c>)
    9394:	681b      	ldr	r3, [r3, #0]
    9396:	4293      	cmp	r3, r2
    9398:	d105      	bne.n	93a6 <HardwareSerial2::write(unsigned long)+0x16>
    939a:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    939c:	b2c8      	uxtb	r0, r1
    939e:	f001 fac5 	bl	a92c <serial2_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    93a2:	2001      	movs	r0, #1
    93a4:	bd10      	pop	{r4, pc}
    93a6:	b2c9      	uxtb	r1, r1
    93a8:	4718      	bx	r3
    93aa:	bf00      	nop
    93ac:	000092b9 	.word	0x000092b9

000093b0 <HardwareSerial2::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    93b0:	6803      	ldr	r3, [r0, #0]
    93b2:	4a06      	ldr	r2, [pc, #24]	; (93cc <HardwareSerial2::write(long)+0x1c>)
    93b4:	681b      	ldr	r3, [r3, #0]
    93b6:	4293      	cmp	r3, r2
    93b8:	d105      	bne.n	93c6 <HardwareSerial2::write(long)+0x16>
    93ba:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    93bc:	b2c8      	uxtb	r0, r1
    93be:	f001 fab5 	bl	a92c <serial2_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    93c2:	2001      	movs	r0, #1
    93c4:	bd10      	pop	{r4, pc}
    93c6:	b2c9      	uxtb	r1, r1
    93c8:	4718      	bx	r3
    93ca:	bf00      	nop
    93cc:	000092b9 	.word	0x000092b9

000093d0 <HardwareSerial2::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    93d0:	6803      	ldr	r3, [r0, #0]
    93d2:	4a06      	ldr	r2, [pc, #24]	; (93ec <HardwareSerial2::write(unsigned int)+0x1c>)
    93d4:	681b      	ldr	r3, [r3, #0]
    93d6:	4293      	cmp	r3, r2
    93d8:	d105      	bne.n	93e6 <HardwareSerial2::write(unsigned int)+0x16>
    93da:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    93dc:	b2c8      	uxtb	r0, r1
    93de:	f001 faa5 	bl	a92c <serial2_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    93e2:	2001      	movs	r0, #1
    93e4:	bd10      	pop	{r4, pc}
    93e6:	b2c9      	uxtb	r1, r1
    93e8:	4718      	bx	r3
    93ea:	bf00      	nop
    93ec:	000092b9 	.word	0x000092b9

000093f0 <HardwareSerial3::begin(unsigned long)>:
HardwareSerial3 Serial3(&serialEvent3);

uint8_t _serialEvent3_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial3::begin(uint32_t baud) { 
	serial3_begin(BAUD2DIV3(baud));
    93f0:	084b      	lsrs	r3, r1, #1
    93f2:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
    93f6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
void HardwareSerial3::begin(uint32_t baud) { 
    93fa:	b510      	push	{r4, lr}
    93fc:	4604      	mov	r4, r0
	serial3_begin(BAUD2DIV3(baud));
    93fe:	fbb3 f0f1 	udiv	r0, r3, r1
    9402:	f001 fdc3 	bl	af8c <serial3_begin>
	if (!_serialEvent3_default) addToSerialEventsList();
    9406:	4b04      	ldr	r3, [pc, #16]	; (9418 <HardwareSerial3::begin(unsigned long)+0x28>)
    9408:	781b      	ldrb	r3, [r3, #0]
    940a:	b103      	cbz	r3, 940e <HardwareSerial3::begin(unsigned long)+0x1e>
}
    940c:	bd10      	pop	{r4, pc}
	if (!_serialEvent3_default) addToSerialEventsList();
    940e:	4620      	mov	r0, r4
}
    9410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent3_default) addToSerialEventsList();
    9414:	f002 bfb2 	b.w	c37c <HardwareSerial::addToSerialEventsList()>
    9418:	1fff89fa 	.word	0x1fff89fa

0000941c <HardwareSerial3::write9bit(unsigned long)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    941c:	b508      	push	{r3, lr}
    941e:	4608      	mov	r0, r1
    9420:	f001 ff10 	bl	b244 <serial3_putchar>
    9424:	2001      	movs	r0, #1
    9426:	bd08      	pop	{r3, pc}

00009428 <HardwareSerial3::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9428:	b508      	push	{r3, lr}
    942a:	4608      	mov	r0, r1
    942c:	f001 ff0a 	bl	b244 <serial3_putchar>
    9430:	2001      	movs	r0, #1
    9432:	bd08      	pop	{r3, pc}

00009434 <HardwareSerial3::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    9434:	b538      	push	{r3, r4, r5, lr}
    9436:	4608      	mov	r0, r1
    9438:	460d      	mov	r5, r1
    943a:	f004 fec1 	bl	e1c0 <strlen>
    943e:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    9440:	4601      	mov	r1, r0
    9442:	4628      	mov	r0, r5
    9444:	f001 ff08 	bl	b258 <serial3_write>
					  return len; }
    9448:	4620      	mov	r0, r4
    944a:	bd38      	pop	{r3, r4, r5, pc}

0000944c <HardwareSerial3::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    944c:	b510      	push	{r4, lr}
    944e:	4608      	mov	r0, r1
    9450:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    9452:	4611      	mov	r1, r2
    9454:	f001 ff00 	bl	b258 <serial3_write>
    9458:	4620      	mov	r0, r4
    945a:	bd10      	pop	{r4, pc}

0000945c <HardwareSerial3::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial3_add_memory_for_write(buffer, length);}
    945c:	4608      	mov	r0, r1
    945e:	4611      	mov	r1, r2
    9460:	f002 b874 	b.w	b54c <serial3_add_memory_for_write>

00009464 <HardwareSerial3::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial3_add_memory_for_read(buffer, length);}
    9464:	4608      	mov	r0, r1
    9466:	4611      	mov	r1, r2
    9468:	f002 b854 	b.w	b514 <serial3_add_memory_for_read>

0000946c <HardwareSerial3::clear()>:
	virtual void clear(void)	{ serial3_clear(); }
    946c:	f001 bfac 	b.w	b3c8 <serial3_clear>

00009470 <HardwareSerial3::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
    9470:	b508      	push	{r3, lr}
    9472:	4608      	mov	r0, r1
    9474:	f001 fec6 	bl	b204 <serial3_set_cts>
    9478:	3800      	subs	r0, #0
    947a:	bf18      	it	ne
    947c:	2001      	movne	r0, #1
    947e:	bd08      	pop	{r3, pc}

00009480 <HardwareSerial3::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
    9480:	b508      	push	{r3, lr}
    9482:	4608      	mov	r0, r1
    9484:	f001 fe9c 	bl	b1c0 <serial3_set_rts>
    9488:	3800      	subs	r0, #0
    948a:	bf18      	it	ne
    948c:	2001      	movne	r0, #1
    948e:	bd08      	pop	{r3, pc}

00009490 <HardwareSerial3::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
    9490:	4608      	mov	r0, r1
    9492:	4611      	mov	r1, r2
    9494:	f001 be66 	b.w	b164 <serial3_set_tx>

00009498 <HardwareSerial3::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
    9498:	4608      	mov	r0, r1
    949a:	f001 be8f 	b.w	b1bc <serial3_set_rx>
    949e:	bf00      	nop

000094a0 <HardwareSerial3::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
    94a0:	4608      	mov	r0, r1
    94a2:	f001 be43 	b.w	b12c <serial3_set_transmit_pin>
    94a6:	bf00      	nop

000094a8 <HardwareSerial3::end()>:
	virtual void end(void)          { serial3_end(); }
    94a8:	f001 be0a 	b.w	b0c0 <serial3_end>

000094ac <HardwareSerial3::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    94ac:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    94ae:	084b      	lsrs	r3, r1, #1
    94b0:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
	virtual void begin(uint32_t baud, uint32_t format) {
    94b4:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    94b6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    94ba:	fbb3 f0f1 	udiv	r0, r3, r1
    94be:	f001 fd65 	bl	af8c <serial3_begin>
					  serial3_format(format); }
    94c2:	4620      	mov	r0, r4
    94c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    94c8:	f001 bdac 	b.w	b024 <serial3_format>

000094cc <HardwareSerial3::peek()>:
	virtual int peek(void)          { return serial3_peek(); }
    94cc:	f001 bf56 	b.w	b37c <serial3_peek>

000094d0 <HardwareSerial3::read()>:
	virtual int read(void)          { return serial3_getchar(); }
    94d0:	f001 bf0e 	b.w	b2f0 <serial3_getchar>

000094d4 <HardwareSerial3::available()>:
	virtual int available(void)     { return serial3_available(); }
    94d4:	f001 bef8 	b.w	b2c8 <serial3_available>

000094d8 <HardwareSerial3::flush()>:
	virtual void flush(void)        { serial3_flush(); }
    94d8:	f001 bed2 	b.w	b280 <serial3_flush>

000094dc <HardwareSerial3::availableForWrite()>:
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
    94dc:	f001 bedc 	b.w	b298 <serial3_write_buffer_free>

000094e0 <HardwareSerial3::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    94e0:	6803      	ldr	r3, [r0, #0]
    94e2:	4a06      	ldr	r2, [pc, #24]	; (94fc <HardwareSerial3::write(int)+0x1c>)
    94e4:	681b      	ldr	r3, [r3, #0]
    94e6:	4293      	cmp	r3, r2
    94e8:	d105      	bne.n	94f6 <HardwareSerial3::write(int)+0x16>
    94ea:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    94ec:	b2c8      	uxtb	r0, r1
    94ee:	f001 fea9 	bl	b244 <serial3_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    94f2:	2001      	movs	r0, #1
    94f4:	bd10      	pop	{r4, pc}
    94f6:	b2c9      	uxtb	r1, r1
    94f8:	4718      	bx	r3
    94fa:	bf00      	nop
    94fc:	00009429 	.word	0x00009429

00009500 <HardwareSerial3::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    9500:	6803      	ldr	r3, [r0, #0]
    9502:	4a06      	ldr	r2, [pc, #24]	; (951c <HardwareSerial3::write(unsigned long)+0x1c>)
    9504:	681b      	ldr	r3, [r3, #0]
    9506:	4293      	cmp	r3, r2
    9508:	d105      	bne.n	9516 <HardwareSerial3::write(unsigned long)+0x16>
    950a:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    950c:	b2c8      	uxtb	r0, r1
    950e:	f001 fe99 	bl	b244 <serial3_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    9512:	2001      	movs	r0, #1
    9514:	bd10      	pop	{r4, pc}
    9516:	b2c9      	uxtb	r1, r1
    9518:	4718      	bx	r3
    951a:	bf00      	nop
    951c:	00009429 	.word	0x00009429

00009520 <HardwareSerial3::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    9520:	6803      	ldr	r3, [r0, #0]
    9522:	4a06      	ldr	r2, [pc, #24]	; (953c <HardwareSerial3::write(long)+0x1c>)
    9524:	681b      	ldr	r3, [r3, #0]
    9526:	4293      	cmp	r3, r2
    9528:	d105      	bne.n	9536 <HardwareSerial3::write(long)+0x16>
    952a:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    952c:	b2c8      	uxtb	r0, r1
    952e:	f001 fe89 	bl	b244 <serial3_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    9532:	2001      	movs	r0, #1
    9534:	bd10      	pop	{r4, pc}
    9536:	b2c9      	uxtb	r1, r1
    9538:	4718      	bx	r3
    953a:	bf00      	nop
    953c:	00009429 	.word	0x00009429

00009540 <HardwareSerial3::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9540:	6803      	ldr	r3, [r0, #0]
    9542:	4a06      	ldr	r2, [pc, #24]	; (955c <HardwareSerial3::write(unsigned int)+0x1c>)
    9544:	681b      	ldr	r3, [r3, #0]
    9546:	4293      	cmp	r3, r2
    9548:	d105      	bne.n	9556 <HardwareSerial3::write(unsigned int)+0x16>
    954a:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    954c:	b2c8      	uxtb	r0, r1
    954e:	f001 fe79 	bl	b244 <serial3_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9552:	2001      	movs	r0, #1
    9554:	bd10      	pop	{r4, pc}
    9556:	b2c9      	uxtb	r1, r1
    9558:	4718      	bx	r3
    955a:	bf00      	nop
    955c:	00009429 	.word	0x00009429

00009560 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
        return write(p, sizeof(buf) - (p - buf));
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    9560:	b570      	push	{r4, r5, r6, lr}
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    9562:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    9564:	b08a      	sub	sp, #40	; 0x28
		base = 10;
    9566:	bf08      	it	eq
    9568:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    956a:	b3a1      	cbz	r1, 95d6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    956c:	f04f 0e21 	mov.w	lr, #33	; 0x21
    9570:	e002      	b.n	9578 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    9572:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
    9576:	4629      	mov	r1, r5
			digit = n % base;
    9578:	fbb1 f5f2 	udiv	r5, r1, r2
    957c:	fb02 1415 	mls	r4, r2, r5, r1
    9580:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9584:	2c09      	cmp	r4, #9
    9586:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    958a:	bf98      	it	ls
    958c:	fa5f fc84 	uxtbls.w	ip, r4
    9590:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    9594:	bf88      	it	hi
    9596:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
    959a:	446c      	add	r4, sp
    959c:	bf88      	it	hi
    959e:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
    95a2:	4291      	cmp	r1, r2
			i--;
    95a4:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    95a8:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    95ac:	d2e1      	bcs.n	9572 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    95ae:	b14b      	cbz	r3, 95c4 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
    95b0:	f10e 3eff 	add.w	lr, lr, #4294967295
    95b4:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    95b8:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    95bc:	446b      	add	r3, sp
    95be:	222d      	movs	r2, #45	; 0x2d
    95c0:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    95c4:	6803      	ldr	r3, [r0, #0]
    95c6:	a901      	add	r1, sp, #4
    95c8:	685b      	ldr	r3, [r3, #4]
    95ca:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    95ce:	4471      	add	r1, lr
    95d0:	4798      	blx	r3
}
    95d2:	b00a      	add	sp, #40	; 0x28
    95d4:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    95d6:	2230      	movs	r2, #48	; 0x30
    95d8:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    95dc:	f04f 0e21 	mov.w	lr, #33	; 0x21
    95e0:	e7e5      	b.n	95ae <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
    95e2:	bf00      	nop

000095e4 <Print::print(long)>:
	if (n < 0) {
    95e4:	2900      	cmp	r1, #0
		n = -n;
    95e6:	bfba      	itte	lt
    95e8:	4249      	neglt	r1, r1
		sign = '-';
    95ea:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    95ec:	2300      	movge	r3, #0
	if (base == 0) {
    95ee:	220a      	movs	r2, #10
    95f0:	f7ff bfb6 	b.w	9560 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

000095f4 <Print::println()>:
{
    95f4:	b500      	push	{lr}
	return write(buf, 2);
    95f6:	6803      	ldr	r3, [r0, #0]
{
    95f8:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    95fa:	f640 220d 	movw	r2, #2573	; 0xa0d
    95fe:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    9602:	685b      	ldr	r3, [r3, #4]
    9604:	2202      	movs	r2, #2
    9606:	a901      	add	r1, sp, #4
    9608:	4798      	blx	r3
}
    960a:	b003      	add	sp, #12
    960c:	f85d fb04 	ldr.w	pc, [sp], #4

00009610 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    9610:	4b03      	ldr	r3, [pc, #12]	; (9620 <_write+0x10>)
    9612:	2802      	cmp	r0, #2
    9614:	bf88      	it	hi
    9616:	4603      	movhi	r3, r0
    9618:	4618      	mov	r0, r3
    961a:	681b      	ldr	r3, [r3, #0]
    961c:	685b      	ldr	r3, [r3, #4]
    961e:	4718      	bx	r3
    9620:	1fff89fc 	.word	0x1fff89fc

00009624 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    9624:	b932      	cbnz	r2, 9634 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    9626:	6803      	ldr	r3, [r0, #0]
{
    9628:	b500      	push	{lr}
		return write((uint8_t)n);
    962a:	681b      	ldr	r3, [r3, #0]
}
    962c:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    9630:	b2c9      	uxtb	r1, r1
    9632:	4718      	bx	r3
    9634:	f7ff bf94 	b.w	9560 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00009638 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    9638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    963c:	4619      	mov	r1, r3
{
    963e:	b087      	sub	sp, #28
    9640:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    9642:	4610      	mov	r0, r2
{
    9644:	4614      	mov	r4, r2
    9646:	469a      	mov	sl, r3
	if (isnan(number)) return print("nan");
    9648:	f003 fab6 	bl	cbb8 <__aeabi_dcmpun>
{
    964c:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
	if (isnan(number)) return print("nan");
    9650:	2800      	cmp	r0, #0
    9652:	f040 80a9 	bne.w	97a8 <Print::printFloat(double, unsigned char)+0x170>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    9656:	f02a 4500 	bic.w	r5, sl, #2147483648	; 0x80000000
    	if (isinf(number)) return print("inf");
    965a:	4b5f      	ldr	r3, [pc, #380]	; (97d8 <Print::printFloat(double, unsigned char)+0x1a0>)
    965c:	4620      	mov	r0, r4
    965e:	4629      	mov	r1, r5
    9660:	f04f 32ff 	mov.w	r2, #4294967295
    9664:	f003 faa8 	bl	cbb8 <__aeabi_dcmpun>
    9668:	b948      	cbnz	r0, 967e <Print::printFloat(double, unsigned char)+0x46>
    966a:	4b5b      	ldr	r3, [pc, #364]	; (97d8 <Print::printFloat(double, unsigned char)+0x1a0>)
    966c:	4620      	mov	r0, r4
    966e:	4629      	mov	r1, r5
    9670:	f04f 32ff 	mov.w	r2, #4294967295
    9674:	f003 fa82 	bl	cb7c <__aeabi_dcmple>
    9678:	2800      	cmp	r0, #0
    967a:	f000 808e 	beq.w	979a <Print::printFloat(double, unsigned char)+0x162>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    967e:	4b57      	ldr	r3, [pc, #348]	; (97dc <Print::printFloat(double, unsigned char)+0x1a4>)
    9680:	4620      	mov	r0, r4
    9682:	4651      	mov	r1, sl
    9684:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    9688:	f003 fa8c 	bl	cba4 <__aeabi_dcmpgt>
    968c:	2800      	cmp	r0, #0
    968e:	d17b      	bne.n	9788 <Print::printFloat(double, unsigned char)+0x150>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    9690:	4b53      	ldr	r3, [pc, #332]	; (97e0 <Print::printFloat(double, unsigned char)+0x1a8>)
    9692:	4620      	mov	r0, r4
    9694:	4651      	mov	r1, sl
    9696:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    969a:	f003 fa65 	bl	cb68 <__aeabi_dcmplt>
    969e:	2800      	cmp	r0, #0
    96a0:	d172      	bne.n	9788 <Print::printFloat(double, unsigned char)+0x150>
	
	// Handle negative numbers
	if (number < 0.0) {
    96a2:	4620      	mov	r0, r4
    96a4:	4651      	mov	r1, sl
    96a6:	2200      	movs	r2, #0
    96a8:	2300      	movs	r3, #0
    96aa:	f003 fa5d 	bl	cb68 <__aeabi_dcmplt>
    96ae:	4605      	mov	r5, r0
    96b0:	2800      	cmp	r0, #0
    96b2:	d175      	bne.n	97a0 <Print::printFloat(double, unsigned char)+0x168>
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    96b4:	2f00      	cmp	r7, #0
    96b6:	d07a      	beq.n	97ae <Print::printFloat(double, unsigned char)+0x176>
		rounding *= 0.1;
    96b8:	f20f 1914 	addw	r9, pc, #276	; 0x114
    96bc:	e9d9 8900 	ldrd	r8, r9, [r9]
	double rounding = 0.5;
    96c0:	4948      	ldr	r1, [pc, #288]	; (97e4 <Print::printFloat(double, unsigned char)+0x1ac>)
	for (uint8_t i=0; i<digits; ++i) {
    96c2:	f04f 0b00 	mov.w	fp, #0
	double rounding = 0.5;
    96c6:	2000      	movs	r0, #0
		rounding *= 0.1;
    96c8:	464b      	mov	r3, r9
	for (uint8_t i=0; i<digits; ++i) {
    96ca:	f10b 0b01 	add.w	fp, fp, #1
		rounding *= 0.1;
    96ce:	4642      	mov	r2, r8
    96d0:	f00a f822 	bl	13718 <__aeabi_dmul>
	for (uint8_t i=0; i<digits; ++i) {
    96d4:	fa5f f38b 	uxtb.w	r3, fp
    96d8:	42bb      	cmp	r3, r7
    96da:	d3f5      	bcc.n	96c8 <Print::printFloat(double, unsigned char)+0x90>
	}
	number += rounding;
    96dc:	4602      	mov	r2, r0
    96de:	460b      	mov	r3, r1
    96e0:	4620      	mov	r0, r4
    96e2:	4651      	mov	r1, sl
    96e4:	f003 f82a 	bl	c73c <__adddf3>
    96e8:	4689      	mov	r9, r1
    96ea:	4680      	mov	r8, r0

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    96ec:	f003 fa7a 	bl	cbe4 <__aeabi_d2uiz>
    96f0:	2f0f      	cmp	r7, #15
    96f2:	bf28      	it	cs
    96f4:	270f      	movcs	r7, #15
    96f6:	4682      	mov	sl, r0
	double remainder = number - (double)int_part;
    96f8:	9701      	str	r7, [sp, #4]
    96fa:	f003 f95b 	bl	c9b4 <__aeabi_ui2d>
    96fe:	4602      	mov	r2, r0
    9700:	460b      	mov	r3, r1
    9702:	4640      	mov	r0, r8
    9704:	4649      	mov	r1, r9
    9706:	f003 f817 	bl	c738 <__aeabi_dsub>
    970a:	462b      	mov	r3, r5
    970c:	4680      	mov	r8, r0
    970e:	4689      	mov	r9, r1
    9710:	220a      	movs	r2, #10
    9712:	4651      	mov	r1, sl
    9714:	4630      	mov	r0, r6
    9716:	f7ff ff23 	bl	9560 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    971a:	232e      	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    971c:	464d      	mov	r5, r9
		buf[0] = '.';
    971e:	f88d 3008 	strb.w	r3, [sp, #8]
    9722:	f10d 0209 	add.w	r2, sp, #9

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    9726:	1e7b      	subs	r3, r7, #1
			remainder *= 10.0;
    9728:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 97e8 <Print::printFloat(double, unsigned char)+0x1b0>
	double remainder = number - (double)int_part;
    972c:	4644      	mov	r4, r8
	if (base == 0) {
    972e:	4683      	mov	fp, r0
		while (digits-- > 0) {
    9730:	fa52 fa83 	uxtab	sl, r2, r3
    9734:	af02      	add	r7, sp, #8
			remainder *= 10.0;
    9736:	f04f 0800 	mov.w	r8, #0
    973a:	4642      	mov	r2, r8
    973c:	464b      	mov	r3, r9
    973e:	4620      	mov	r0, r4
    9740:	4629      	mov	r1, r5
    9742:	f009 ffe9 	bl	13718 <__aeabi_dmul>
    9746:	460d      	mov	r5, r1
    9748:	4604      	mov	r4, r0
			n = (uint8_t)(remainder);
    974a:	f003 fa4b 	bl	cbe4 <__aeabi_d2uiz>
    974e:	b2c0      	uxtb	r0, r0
			buf[count++] = '0' + n;
    9750:	f100 0330 	add.w	r3, r0, #48	; 0x30
    9754:	f807 3f01 	strb.w	r3, [r7, #1]!
			remainder -= n; 
    9758:	f003 f93c 	bl	c9d4 <__aeabi_i2d>
    975c:	4602      	mov	r2, r0
    975e:	460b      	mov	r3, r1
    9760:	4620      	mov	r0, r4
    9762:	4629      	mov	r1, r5
    9764:	f002 ffe8 	bl	c738 <__aeabi_dsub>
		while (digits-- > 0) {
    9768:	45ba      	cmp	sl, r7
			remainder -= n; 
    976a:	4604      	mov	r4, r0
    976c:	460d      	mov	r5, r1
		while (digits-- > 0) {
    976e:	d1e4      	bne.n	973a <Print::printFloat(double, unsigned char)+0x102>
			buf[count++] = '0' + n;
    9770:	9a01      	ldr	r2, [sp, #4]
		}
		count += write(buf, count);
    9772:	6833      	ldr	r3, [r6, #0]
			buf[count++] = '0' + n;
    9774:	3201      	adds	r2, #1
		count += write(buf, count);
    9776:	685b      	ldr	r3, [r3, #4]
    9778:	b2d2      	uxtb	r2, r2
    977a:	a902      	add	r1, sp, #8
    977c:	4630      	mov	r0, r6
    977e:	4798      	blx	r3
	}
	return count;
}
    9780:	4658      	mov	r0, fp
    9782:	b007      	add	sp, #28
    9784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    9788:	6833      	ldr	r3, [r6, #0]
    978a:	4918      	ldr	r1, [pc, #96]	; (97ec <Print::printFloat(double, unsigned char)+0x1b4>)
    978c:	685b      	ldr	r3, [r3, #4]
    978e:	2203      	movs	r2, #3
    9790:	4630      	mov	r0, r6
    9792:	b007      	add	sp, #28
    9794:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9798:	4718      	bx	r3
    979a:	6833      	ldr	r3, [r6, #0]
    979c:	4914      	ldr	r1, [pc, #80]	; (97f0 <Print::printFloat(double, unsigned char)+0x1b8>)
    979e:	e7f5      	b.n	978c <Print::printFloat(double, unsigned char)+0x154>
		number = -number;
    97a0:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
		sign = 1;
    97a4:	2501      	movs	r5, #1
    97a6:	e785      	b.n	96b4 <Print::printFloat(double, unsigned char)+0x7c>
    97a8:	6833      	ldr	r3, [r6, #0]
    97aa:	4912      	ldr	r1, [pc, #72]	; (97f4 <Print::printFloat(double, unsigned char)+0x1bc>)
    97ac:	e7ee      	b.n	978c <Print::printFloat(double, unsigned char)+0x154>
	number += rounding;
    97ae:	4b0d      	ldr	r3, [pc, #52]	; (97e4 <Print::printFloat(double, unsigned char)+0x1ac>)
    97b0:	2200      	movs	r2, #0
    97b2:	4620      	mov	r0, r4
    97b4:	4651      	mov	r1, sl
    97b6:	f002 ffc1 	bl	c73c <__adddf3>
	unsigned long int_part = (unsigned long)number;
    97ba:	f003 fa13 	bl	cbe4 <__aeabi_d2uiz>
    97be:	462b      	mov	r3, r5
    97c0:	4601      	mov	r1, r0
    97c2:	220a      	movs	r2, #10
    97c4:	4630      	mov	r0, r6
}
    97c6:	b007      	add	sp, #28
    97c8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    97cc:	f7ff bec8 	b.w	9560 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    97d0:	a0000000 	.word	0xa0000000
    97d4:	3fb99999 	.word	0x3fb99999
    97d8:	7fefffff 	.word	0x7fefffff
    97dc:	41efffff 	.word	0x41efffff
    97e0:	c1efffff 	.word	0xc1efffff
    97e4:	3fe00000 	.word	0x3fe00000
    97e8:	40240000 	.word	0x40240000
    97ec:	000153b0 	.word	0x000153b0
    97f0:	000153ac 	.word	0x000153ac
    97f4:	000153a8 	.word	0x000153a8

000097f8 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    97f8:	b570      	push	{r4, r5, r6, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    97fa:	4d0e      	ldr	r5, [pc, #56]	; (9834 <Stream::timedPeek()+0x3c>)
    97fc:	b082      	sub	sp, #8
    97fe:	682b      	ldr	r3, [r5, #0]
    9800:	9300      	str	r3, [sp, #0]
	return ret;
    9802:	9e00      	ldr	r6, [sp, #0]
    9804:	4604      	mov	r4, r0
    9806:	e008      	b.n	981a <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    9808:	f002 fd40 	bl	c28c <yield>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    980c:	682b      	ldr	r3, [r5, #0]
    980e:	9301      	str	r3, [sp, #4]
	return ret;
    9810:	9b01      	ldr	r3, [sp, #4]
  } while(millis() - startMillis < _timeout);
    9812:	68a2      	ldr	r2, [r4, #8]
    9814:	1b9b      	subs	r3, r3, r6
    9816:	4293      	cmp	r3, r2
    9818:	d207      	bcs.n	982a <Stream::timedPeek()+0x32>
    c = peek();
    981a:	6823      	ldr	r3, [r4, #0]
    981c:	4620      	mov	r0, r4
    981e:	699b      	ldr	r3, [r3, #24]
    9820:	4798      	blx	r3
    if (c >= 0) return c;
    9822:	2800      	cmp	r0, #0
    9824:	dbf0      	blt.n	9808 <Stream::timedPeek()+0x10>
  return -1;     // -1 indicates timeout
}
    9826:	b002      	add	sp, #8
    9828:	bd70      	pop	{r4, r5, r6, pc}
  return -1;     // -1 indicates timeout
    982a:	f04f 30ff 	mov.w	r0, #4294967295
}
    982e:	b002      	add	sp, #8
    9830:	bd70      	pop	{r4, r5, r6, pc}
    9832:	bf00      	nop
    9834:	1fffd3c0 	.word	0x1fffd3c0

00009838 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    9838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    983a:	4604      	mov	r4, r0
    983c:	460d      	mov	r5, r1
int Stream::peekNextDigit()
    983e:	e006      	b.n	984e <Stream::parseInt(char)+0x16>
    if (c == '-') return c;
    9840:	2b2d      	cmp	r3, #45	; 0x2d
    9842:	d00f      	beq.n	9864 <Stream::parseInt(char)+0x2c>
    if (c >= '0' && c <= '9') return c;
    9844:	2a09      	cmp	r2, #9
    9846:	d90d      	bls.n	9864 <Stream::parseInt(char)+0x2c>
    read();  // discard non-numeric
    9848:	6823      	ldr	r3, [r4, #0]
    984a:	695b      	ldr	r3, [r3, #20]
    984c:	4798      	blx	r3
    c = timedPeek();
    984e:	4620      	mov	r0, r4
    9850:	f7ff ffd2 	bl	97f8 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    9854:	1e03      	subs	r3, r0, #0
    if (c >= '0' && c <= '9') return c;
    9856:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    985a:	4620      	mov	r0, r4
    if (c < 0) return c;  // timeout
    985c:	daf0      	bge.n	9840 <Stream::parseInt(char)+0x8>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    985e:	2700      	movs	r7, #0
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    9860:	4638      	mov	r0, r7
    9862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(c == skipChar)
    9864:	2700      	movs	r7, #0
    9866:	463e      	mov	r6, r7
    9868:	42ab      	cmp	r3, r5
    986a:	d00b      	beq.n	9884 <Stream::parseInt(char)+0x4c>
    else if(c == '-')
    986c:	2b2d      	cmp	r3, #45	; 0x2d
    986e:	d01c      	beq.n	98aa <Stream::parseInt(char)+0x72>
    else if(c >= '0' && c <= '9')        // is c a digit?
    9870:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    9874:	2a09      	cmp	r2, #9
    9876:	d805      	bhi.n	9884 <Stream::parseInt(char)+0x4c>
      value = value * 10 + c - '0';
    9878:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    987c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    9880:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
    read();  // consume the character we got with peek
    9884:	6823      	ldr	r3, [r4, #0]
    9886:	4620      	mov	r0, r4
    9888:	695b      	ldr	r3, [r3, #20]
    988a:	4798      	blx	r3
    c = timedPeek();
    988c:	4620      	mov	r0, r4
    988e:	f7ff ffb3 	bl	97f8 <Stream::timedPeek()>
  while( (c >= '0' && c <= '9') || c == skipChar );
    9892:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    9896:	2a09      	cmp	r2, #9
    c = timedPeek();
    9898:	4603      	mov	r3, r0
  while( (c >= '0' && c <= '9') || c == skipChar );
    989a:	d9e5      	bls.n	9868 <Stream::parseInt(char)+0x30>
    989c:	42a8      	cmp	r0, r5
    989e:	d0f1      	beq.n	9884 <Stream::parseInt(char)+0x4c>
  if(isNegative)
    98a0:	2e00      	cmp	r6, #0
    98a2:	d0dd      	beq.n	9860 <Stream::parseInt(char)+0x28>
    value = -value;
    98a4:	427f      	negs	r7, r7
}
    98a6:	4638      	mov	r0, r7
    98a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      isNegative = true;
    98aa:	2601      	movs	r6, #1
    98ac:	e7ea      	b.n	9884 <Stream::parseInt(char)+0x4c>
    98ae:	bf00      	nop

000098b0 <Stream::parseInt()>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    98b0:	2101      	movs	r1, #1
    98b2:	f7ff bfc1 	b.w	9838 <Stream::parseInt(char)>
    98b6:	bf00      	nop

000098b8 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    98b8:	4b2a      	ldr	r3, [pc, #168]	; (9964 <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    98ba:	4a2b      	ldr	r2, [pc, #172]	; (9968 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    98bc:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    98be:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    98c0:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    98c2:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    98c4:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    98c6:	4829      	ldr	r0, [pc, #164]	; (996c <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    98c8:	2b08      	cmp	r3, #8
    98ca:	d034      	beq.n	9936 <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    98cc:	2b0a      	cmp	r3, #10
    98ce:	d020      	beq.n	9912 <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    98d0:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    98d2:	4b27      	ldr	r3, [pc, #156]	; (9970 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    98d4:	bf0c      	ite	eq
    98d6:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    98d8:	213d      	movne	r1, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    98da:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    98dc:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    98de:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    98e0:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    98e2:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    98e4:	4b23      	ldr	r3, [pc, #140]	; (9974 <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    98e6:	4921      	ldr	r1, [pc, #132]	; (996c <analog_init+0xb4>)
	if (analog_reference_internal) {
    98e8:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    98ea:	4a21      	ldr	r2, [pc, #132]	; (9970 <analog_init+0xb8>)
	if (analog_reference_internal) {
    98ec:	b1cb      	cbz	r3, 9922 <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    98ee:	2301      	movs	r3, #1
    98f0:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    98f2:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    98f4:	4b20      	ldr	r3, [pc, #128]	; (9978 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    98f6:	491d      	ldr	r1, [pc, #116]	; (996c <analog_init+0xb4>)
	num = analog_num_average;
    98f8:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    98fa:	4a1d      	ldr	r2, [pc, #116]	; (9970 <analog_init+0xb8>)
	if (num <= 1) {
    98fc:	2b01      	cmp	r3, #1
    98fe:	d913      	bls.n	9928 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    9900:	2b04      	cmp	r3, #4
    9902:	d81b      	bhi.n	993c <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    9904:	2384      	movs	r3, #132	; 0x84
    9906:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    9908:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    990a:	4b1c      	ldr	r3, [pc, #112]	; (997c <analog_init+0xc4>)
    990c:	2201      	movs	r2, #1
    990e:	701a      	strb	r2, [r3, #0]
}
    9910:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9912:	4b17      	ldr	r3, [pc, #92]	; (9970 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9914:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    9916:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9918:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    991a:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    991c:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    991e:	60da      	str	r2, [r3, #12]
    9920:	e7e0      	b.n	98e4 <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    9922:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    9924:	6213      	str	r3, [r2, #32]
    9926:	e7e5      	b.n	98f4 <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    9928:	2380      	movs	r3, #128	; 0x80
    992a:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    992c:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    992e:	4b13      	ldr	r3, [pc, #76]	; (997c <analog_init+0xc4>)
    9930:	2201      	movs	r2, #1
    9932:	701a      	strb	r2, [r3, #0]
}
    9934:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    9936:	4b0e      	ldr	r3, [pc, #56]	; (9970 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    9938:	2101      	movs	r1, #1
    993a:	e7ec      	b.n	9916 <analog_init+0x5e>
	} else if (num <= 8) {
    993c:	2b08      	cmp	r3, #8
    993e:	d806      	bhi.n	994e <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    9940:	2385      	movs	r3, #133	; 0x85
    9942:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    9944:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    9946:	4b0d      	ldr	r3, [pc, #52]	; (997c <analog_init+0xc4>)
    9948:	2201      	movs	r2, #1
    994a:	701a      	strb	r2, [r3, #0]
}
    994c:	4770      	bx	lr
	} else if (num <= 16) {
    994e:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    9950:	bf94      	ite	ls
    9952:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    9954:	2387      	movhi	r3, #135	; 0x87
    9956:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    9958:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    995a:	4b08      	ldr	r3, [pc, #32]	; (997c <analog_init+0xc4>)
    995c:	2201      	movs	r2, #1
    995e:	701a      	strb	r2, [r3, #0]
}
    9960:	4770      	bx	lr
    9962:	bf00      	nop
    9964:	40074000 	.word	0x40074000
    9968:	1fff88e4 	.word	0x1fff88e4
    996c:	4003b000 	.word	0x4003b000
    9970:	400bb000 	.word	0x400bb000
    9974:	1fffd3bc 	.word	0x1fffd3bc
    9978:	1fff88e5 	.word	0x1fff88e5
    997c:	1fffd3bd 	.word	0x1fffd3bd

00009980 <analogWriteDAC0>:
typedef int16_t __attribute__((__may_alias__)) aliased_int16_t;

void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    9980:	4a0b      	ldr	r2, [pc, #44]	; (99b0 <analogWriteDAC0+0x30>)
	if (analog_reference_internal) {
    9982:	490c      	ldr	r1, [pc, #48]	; (99b4 <analogWriteDAC0+0x34>)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    9984:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    9986:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    998a:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (analog_reference_internal) {
    998c:	780b      	ldrb	r3, [r1, #0]
    998e:	b14b      	cbz	r3, 99a4 <analogWriteDAC0+0x24>
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
    9990:	4b09      	ldr	r3, [pc, #36]	; (99b8 <analogWriteDAC0+0x38>)
    9992:	2280      	movs	r2, #128	; 0x80
    9994:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    9998:	4b07      	ldr	r3, [pc, #28]	; (99b8 <analogWriteDAC0+0x38>)
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095
    999a:	f380 000c 	usat	r0, #12, r0
	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    999e:	b200      	sxth	r0, r0
    99a0:	8018      	strh	r0, [r3, #0]
	if (val < 0) val = 0;
	else if (val > 4095) val = 4095;

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
#endif
}
    99a2:	4770      	bx	lr
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
    99a4:	4b04      	ldr	r3, [pc, #16]	; (99b8 <analogWriteDAC0+0x38>)
    99a6:	22c0      	movs	r2, #192	; 0xc0
    99a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    99ac:	e7f4      	b.n	9998 <analogWriteDAC0+0x18>
    99ae:	bf00      	nop
    99b0:	40048000 	.word	0x40048000
    99b4:	1fffd3bc 	.word	0x1fffd3bc
    99b8:	400cc000 	.word	0x400cc000

000099bc <eeprom_initialize>:
//
#define HANDLE_UNALIGNED_WRITES


void eeprom_initialize(void)
{
    99bc:	b510      	push	{r4, lr}
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    99be:	4b17      	ldr	r3, [pc, #92]	; (9a1c <eeprom_initialize+0x60>)
    99c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
    99c2:	b084      	sub	sp, #16
	uint16_t do_flash_cmd[] = {
    99c4:	46ec      	mov	ip, sp
    99c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    99ca:	4b15      	ldr	r3, [pc, #84]	; (9a20 <eeprom_initialize+0x64>)
    99cc:	785a      	ldrb	r2, [r3, #1]
    99ce:	0791      	lsls	r1, r2, #30
    99d0:	d517      	bpl.n	9a02 <eeprom_initialize+0x46>
		uint8_t stat = FTFL_FSTAT & 0x70;
    99d2:	781a      	ldrb	r2, [r3, #0]
		if (stat) FTFL_FSTAT = stat;
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    99d4:	4c12      	ldr	r4, [pc, #72]	; (9a20 <eeprom_initialize+0x64>)
		if (stat) FTFL_FSTAT = stat;
    99d6:	f012 0270 	ands.w	r2, r2, #112	; 0x70
    99da:	bf18      	it	ne
    99dc:	701a      	strbne	r2, [r3, #0]
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    99de:	2180      	movs	r1, #128	; 0x80
		FTFL_FCCOB3 = 0;
    99e0:	2300      	movs	r3, #0
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    99e2:	71e1      	strb	r1, [r4, #7]
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    99e4:	2233      	movs	r2, #51	; 0x33
		FTFL_FCCOB3 = 0;
    99e6:	7123      	strb	r3, [r4, #4]
		FTFL_FCCOB5 = EEPARTITION;
    99e8:	2303      	movs	r3, #3
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    99ea:	72e2      	strb	r2, [r4, #11]
		FTFL_FCCOB5 = EEPARTITION;
    99ec:	72a3      	strb	r3, [r4, #10]
		__disable_irq();
    99ee:	b672      	cpsid	i
		// do_flash_cmd() must execute from RAM.  Luckily the C syntax is simple...
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
    99f0:	f04c 0301 	orr.w	r3, ip, #1
    99f4:	4620      	mov	r0, r4
    99f6:	4798      	blx	r3
		__enable_irq();
    99f8:	b662      	cpsie	i
		kinetis_hsrun_enable();
		status = FTFL_FSTAT;
    99fa:	7823      	ldrb	r3, [r4, #0]
		if (status & 0x70) {
    99fc:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    9a00:	d109      	bne.n	9a16 <eeprom_initialize+0x5a>
{
    9a02:	4b08      	ldr	r3, [pc, #32]	; (9a24 <eeprom_initialize+0x68>)
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9a04:	4906      	ldr	r1, [pc, #24]	; (9a20 <eeprom_initialize+0x64>)
    9a06:	e001      	b.n	9a0c <eeprom_initialize+0x50>
		if (++count > 200000) break;
    9a08:	3b01      	subs	r3, #1
    9a0a:	d002      	beq.n	9a12 <eeprom_initialize+0x56>
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9a0c:	784a      	ldrb	r2, [r1, #1]
    9a0e:	07d2      	lsls	r2, r2, #31
    9a10:	d5fa      	bpl.n	9a08 <eeprom_initialize+0x4c>
	}
}
    9a12:	b004      	add	sp, #16
    9a14:	bd10      	pop	{r4, pc}
			FTFL_FSTAT = (status & 0x70);
    9a16:	7023      	strb	r3, [r4, #0]
}
    9a18:	b004      	add	sp, #16
    9a1a:	bd10      	pop	{r4, pc}
    9a1c:	000153b4 	.word	0x000153b4
    9a20:	40020000 	.word	0x40020000
    9a24:	00030d41 	.word	0x00030d41

00009a28 <eeprom_read_byte>:
#define FlexRAM ((volatile uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    9a28:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    9a2c:	d211      	bcs.n	9a52 <eeprom_read_byte+0x2a>
{
    9a2e:	b510      	push	{r4, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9a30:	4b09      	ldr	r3, [pc, #36]	; (9a58 <eeprom_read_byte+0x30>)
    9a32:	785b      	ldrb	r3, [r3, #1]
    9a34:	07db      	lsls	r3, r3, #31
    9a36:	4604      	mov	r4, r0
    9a38:	d504      	bpl.n	9a44 <eeprom_read_byte+0x1c>
	return FlexRAM[offset];
    9a3a:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    9a3e:	7820      	ldrb	r0, [r4, #0]
    9a40:	b2c0      	uxtb	r0, r0
}
    9a42:	bd10      	pop	{r4, pc}
	return FlexRAM[offset];
    9a44:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9a48:	f7ff ffb8 	bl	99bc <eeprom_initialize>
	return FlexRAM[offset];
    9a4c:	7820      	ldrb	r0, [r4, #0]
    9a4e:	b2c0      	uxtb	r0, r0
}
    9a50:	bd10      	pop	{r4, pc}
	if (offset >= EEPROM_SIZE) return 0;
    9a52:	2000      	movs	r0, #0
}
    9a54:	4770      	bx	lr
    9a56:	bf00      	nop
    9a58:	40020000 	.word	0x40020000

00009a5c <eeprom_write_byte>:

void eeprom_write_byte(uint8_t *addr, uint8_t value)
{
	uint32_t offset = (uint32_t)addr;

	if (offset >= EEPROM_SIZE) return;
    9a5c:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    9a60:	d21f      	bcs.n	9aa2 <eeprom_write_byte+0x46>
{
    9a62:	b538      	push	{r3, r4, r5, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9a64:	4b0f      	ldr	r3, [pc, #60]	; (9aa4 <eeprom_write_byte+0x48>)
    9a66:	785b      	ldrb	r3, [r3, #1]
    9a68:	07da      	lsls	r2, r3, #31
    9a6a:	4604      	mov	r4, r0
    9a6c:	460d      	mov	r5, r1
    9a6e:	d510      	bpl.n	9a92 <eeprom_write_byte+0x36>
	if (FlexRAM[offset] != value) {
    9a70:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    9a74:	7823      	ldrb	r3, [r4, #0]
    9a76:	42ab      	cmp	r3, r5
    9a78:	d00a      	beq.n	9a90 <eeprom_write_byte+0x34>
		kinetis_hsrun_disable();
		uint8_t stat = FTFL_FSTAT & 0x70;
    9a7a:	4a0a      	ldr	r2, [pc, #40]	; (9aa4 <eeprom_write_byte+0x48>)
    9a7c:	7813      	ldrb	r3, [r2, #0]
		if (stat) FTFL_FSTAT = stat;
    9a7e:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    9a82:	bf18      	it	ne
    9a84:	7013      	strbne	r3, [r2, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9a86:	4a07      	ldr	r2, [pc, #28]	; (9aa4 <eeprom_write_byte+0x48>)
		FlexRAM[offset] = value;
    9a88:	7025      	strb	r5, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9a8a:	7853      	ldrb	r3, [r2, #1]
    9a8c:	07db      	lsls	r3, r3, #31
    9a8e:	d5fc      	bpl.n	9a8a <eeprom_write_byte+0x2e>
		flexram_wait();
		kinetis_hsrun_enable();
	}
}
    9a90:	bd38      	pop	{r3, r4, r5, pc}
	if (FlexRAM[offset] != value) {
    9a92:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9a96:	f7ff ff91 	bl	99bc <eeprom_initialize>
	if (FlexRAM[offset] != value) {
    9a9a:	7823      	ldrb	r3, [r4, #0]
    9a9c:	42ab      	cmp	r3, r5
    9a9e:	d1ec      	bne.n	9a7a <eeprom_write_byte+0x1e>
    9aa0:	e7f6      	b.n	9a90 <eeprom_write_byte+0x34>
    9aa2:	4770      	bx	lr
    9aa4:	40020000 	.word	0x40020000

00009aa8 <eeprom_write_block>:
void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint32_t offset = (uint32_t)addr;
	const uint8_t *src = (const uint8_t *)buf;

	if (offset >= EEPROM_SIZE) return;
    9aa8:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    9aac:	d276      	bcs.n	9b9c <eeprom_write_block+0xf4>
{
    9aae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9ab0:	4b3b      	ldr	r3, [pc, #236]	; (9ba0 <eeprom_write_block+0xf8>)
    9ab2:	785b      	ldrb	r3, [r3, #1]
    9ab4:	07db      	lsls	r3, r3, #31
    9ab6:	460e      	mov	r6, r1
    9ab8:	4604      	mov	r4, r0
    9aba:	4617      	mov	r7, r2
    9abc:	460d      	mov	r5, r1
    9abe:	d51f      	bpl.n	9b00 <eeprom_write_block+0x58>
	if (len >= EEPROM_SIZE) len = EEPROM_SIZE;
    9ac0:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
    9ac4:	4638      	mov	r0, r7
    9ac6:	bf28      	it	cs
    9ac8:	f44f 6000 	movcs.w	r0, #2048	; 0x800
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    9acc:	1833      	adds	r3, r6, r0
    9ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    9ad2:	d212      	bcs.n	9afa <eeprom_write_block+0x52>
	while (len > 0) {
    9ad4:	b187      	cbz	r7, 9af8 <eeprom_write_block+0x50>
		} else {
			// write 8 bits
			uint8_t val8 = *src++;
			if (FlexRAM[offset] != val8) {
				kinetis_hsrun_disable();
				uint8_t stat = FTFL_FSTAT & 0x70;
    9ad6:	4a32      	ldr	r2, [pc, #200]	; (9ba0 <eeprom_write_block+0xf8>)
		if (lsb == 0 && len >= 4) {
    9ad8:	f015 0303 	ands.w	r3, r5, #3
    9adc:	d026      	beq.n	9b2c <eeprom_write_block+0x84>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    9ade:	2b02      	cmp	r3, #2
    9ae0:	d011      	beq.n	9b06 <eeprom_write_block+0x5e>
			if (FlexRAM[offset] != val8) {
    9ae2:	f105 53a0 	add.w	r3, r5, #335544320	; 0x14000000
			uint8_t val8 = *src++;
    9ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
			if (FlexRAM[offset] != val8) {
    9aea:	781e      	ldrb	r6, [r3, #0]
    9aec:	428e      	cmp	r6, r1
    9aee:	d137      	bne.n	9b60 <eeprom_write_block+0xb8>
				FlexRAM[offset] = val8;
				flexram_wait();
				kinetis_hsrun_enable();
			}
			offset++;
			len--;
    9af0:	3801      	subs	r0, #1
			offset++;
    9af2:	3501      	adds	r5, #1
	while (len > 0) {
    9af4:	2800      	cmp	r0, #0
    9af6:	d1ef      	bne.n	9ad8 <eeprom_write_block+0x30>
		}
	}
}
    9af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    9afa:	f5c6 6000 	rsb	r0, r6, #2048	; 0x800
	while (len > 0) {
    9afe:	e7ea      	b.n	9ad6 <eeprom_write_block+0x2e>
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9b00:	f7ff ff5c 	bl	99bc <eeprom_initialize>
    9b04:	e7dc      	b.n	9ac0 <eeprom_write_block+0x18>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    9b06:	2801      	cmp	r0, #1
    9b08:	d0eb      	beq.n	9ae2 <eeprom_write_block+0x3a>
			val16 |= (*src++ << 8);
    9b0a:	4621      	mov	r1, r4
			if (*(uint16_t *)(&FlexRAM[offset]) != val16) {
    9b0c:	f105 56a0 	add.w	r6, r5, #335544320	; 0x14000000
    9b10:	7867      	ldrb	r7, [r4, #1]
    9b12:	f811 3b02 	ldrb.w	r3, [r1], #2
    9b16:	8834      	ldrh	r4, [r6, #0]
    9b18:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    9b1c:	429c      	cmp	r4, r3
    9b1e:	d129      	bne.n	9b74 <eeprom_write_block+0xcc>
			len -= 2;
    9b20:	3802      	subs	r0, #2
			offset += 2;
    9b22:	3502      	adds	r5, #2
			val16 |= (*src++ << 8);
    9b24:	460c      	mov	r4, r1
	while (len > 0) {
    9b26:	2800      	cmp	r0, #0
    9b28:	d1d6      	bne.n	9ad8 <eeprom_write_block+0x30>
    9b2a:	e7e5      	b.n	9af8 <eeprom_write_block+0x50>
		if (lsb == 0 && len >= 4) {
    9b2c:	2803      	cmp	r0, #3
    9b2e:	d9ea      	bls.n	9b06 <eeprom_write_block+0x5e>
			val32 |= (*src++ << 24);
    9b30:	4621      	mov	r1, r4
    9b32:	f894 c001 	ldrb.w	ip, [r4, #1]
    9b36:	f811 3b04 	ldrb.w	r3, [r1], #4
    9b3a:	78a7      	ldrb	r7, [r4, #2]
    9b3c:	78e6      	ldrb	r6, [r4, #3]
    9b3e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    9b42:	f105 54a0 	add.w	r4, r5, #335544320	; 0x14000000
			val32 |= (*src++ << 24);
    9b46:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    9b4a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    9b4e:	6826      	ldr	r6, [r4, #0]
    9b50:	429e      	cmp	r6, r3
    9b52:	d119      	bne.n	9b88 <eeprom_write_block+0xe0>
			len -= 4;
    9b54:	3804      	subs	r0, #4
			offset += 4;
    9b56:	3504      	adds	r5, #4
			val32 |= (*src++ << 24);
    9b58:	460c      	mov	r4, r1
	while (len > 0) {
    9b5a:	2800      	cmp	r0, #0
    9b5c:	d1bc      	bne.n	9ad8 <eeprom_write_block+0x30>
    9b5e:	e7cb      	b.n	9af8 <eeprom_write_block+0x50>
				uint8_t stat = FTFL_FSTAT & 0x70;
    9b60:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    9b62:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    9b66:	bf18      	it	ne
    9b68:	7016      	strbne	r6, [r2, #0]
				FlexRAM[offset] = val8;
    9b6a:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9b6c:	7853      	ldrb	r3, [r2, #1]
    9b6e:	07db      	lsls	r3, r3, #31
    9b70:	d5fc      	bpl.n	9b6c <eeprom_write_block+0xc4>
    9b72:	e7bd      	b.n	9af0 <eeprom_write_block+0x48>
				uint8_t stat = FTFL_FSTAT & 0x70;
    9b74:	7814      	ldrb	r4, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    9b76:	f014 0470 	ands.w	r4, r4, #112	; 0x70
    9b7a:	bf18      	it	ne
    9b7c:	7014      	strbne	r4, [r2, #0]
				*(uint16_t *)(&FlexRAM[offset]) = val16;
    9b7e:	8033      	strh	r3, [r6, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9b80:	7853      	ldrb	r3, [r2, #1]
    9b82:	07dc      	lsls	r4, r3, #31
    9b84:	d5fc      	bpl.n	9b80 <eeprom_write_block+0xd8>
    9b86:	e7cb      	b.n	9b20 <eeprom_write_block+0x78>
				uint8_t stat = FTFL_FSTAT & 0x70;
    9b88:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    9b8a:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    9b8e:	bf18      	it	ne
    9b90:	7016      	strbne	r6, [r2, #0]
				*(uint32_t *)(&FlexRAM[offset]) = val32;
    9b92:	6023      	str	r3, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9b94:	7853      	ldrb	r3, [r2, #1]
    9b96:	07de      	lsls	r6, r3, #31
    9b98:	d5fc      	bpl.n	9b94 <eeprom_write_block+0xec>
    9b9a:	e7db      	b.n	9b54 <eeprom_write_block+0xac>
    9b9c:	4770      	bx	lr
    9b9e:	bf00      	nop
    9ba0:	40020000 	.word	0x40020000

00009ba4 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    9ba4:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    9ba6:	f7fd febb 	bl	7920 <setup>
	while (1) {
		loop();
    9baa:	f7fc ffcf 	bl	6b4c <loop>
		yield();
    9bae:	f002 fb6d 	bl	c28c <yield>
	while (1) {
    9bb2:	e7fa      	b.n	9baa <main+0x6>

00009bb4 <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    9bb4:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    9bb6:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9bba:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9bbe:	d16f      	bne.n	9ca0 <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9bc0:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9bc2:	d341      	bcc.n	9c48 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9bc4:	f851 3b04 	ldr.w	r3, [r1], #4
    9bc8:	f840 3b04 	str.w	r3, [r0], #4
    9bcc:	f851 3b04 	ldr.w	r3, [r1], #4
    9bd0:	f840 3b04 	str.w	r3, [r0], #4
    9bd4:	f851 3b04 	ldr.w	r3, [r1], #4
    9bd8:	f840 3b04 	str.w	r3, [r0], #4
    9bdc:	f851 3b04 	ldr.w	r3, [r1], #4
    9be0:	f840 3b04 	str.w	r3, [r0], #4
    9be4:	f851 3b04 	ldr.w	r3, [r1], #4
    9be8:	f840 3b04 	str.w	r3, [r0], #4
    9bec:	f851 3b04 	ldr.w	r3, [r1], #4
    9bf0:	f840 3b04 	str.w	r3, [r0], #4
    9bf4:	f851 3b04 	ldr.w	r3, [r1], #4
    9bf8:	f840 3b04 	str.w	r3, [r0], #4
    9bfc:	f851 3b04 	ldr.w	r3, [r1], #4
    9c00:	f840 3b04 	str.w	r3, [r0], #4
    9c04:	f851 3b04 	ldr.w	r3, [r1], #4
    9c08:	f840 3b04 	str.w	r3, [r0], #4
    9c0c:	f851 3b04 	ldr.w	r3, [r1], #4
    9c10:	f840 3b04 	str.w	r3, [r0], #4
    9c14:	f851 3b04 	ldr.w	r3, [r1], #4
    9c18:	f840 3b04 	str.w	r3, [r0], #4
    9c1c:	f851 3b04 	ldr.w	r3, [r1], #4
    9c20:	f840 3b04 	str.w	r3, [r0], #4
    9c24:	f851 3b04 	ldr.w	r3, [r1], #4
    9c28:	f840 3b04 	str.w	r3, [r0], #4
    9c2c:	f851 3b04 	ldr.w	r3, [r1], #4
    9c30:	f840 3b04 	str.w	r3, [r0], #4
    9c34:	f851 3b04 	ldr.w	r3, [r1], #4
    9c38:	f840 3b04 	str.w	r3, [r0], #4
    9c3c:	f851 3b04 	ldr.w	r3, [r1], #4
    9c40:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9c44:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9c46:	d2bd      	bcs.n	9bc4 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9c48:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9c4a:	d311      	bcc.n	9c70 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9c4c:	f851 3b04 	ldr.w	r3, [r1], #4
    9c50:	f840 3b04 	str.w	r3, [r0], #4
    9c54:	f851 3b04 	ldr.w	r3, [r1], #4
    9c58:	f840 3b04 	str.w	r3, [r0], #4
    9c5c:	f851 3b04 	ldr.w	r3, [r1], #4
    9c60:	f840 3b04 	str.w	r3, [r0], #4
    9c64:	f851 3b04 	ldr.w	r3, [r1], #4
    9c68:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9c6c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    9c6e:	d2ed      	bcs.n	9c4c <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9c70:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    9c72:	d305      	bcc.n	9c80 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9c74:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9c78:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    9c7c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9c7e:	d2f9      	bcs.n	9c74 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9c80:	3204      	adds	r2, #4
	beq	.Ldone
    9c82:	d00a      	beq.n	9c9a <memcpy+0xe6>

	lsls	r2, r2, #31
    9c84:	07d2      	lsls	r2, r2, #31
	itt ne
    9c86:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9c88:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9c8c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9c90:	d303      	bcc.n	9c9a <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    9c92:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9c94:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9c96:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9c98:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    9c9a:	bc01      	pop	{r0}
#endif
	bx	lr
    9c9c:	4770      	bx	lr
    9c9e:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    9ca0:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    9ca2:	d34a      	bcc.n	9d3a <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9ca4:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9ca8:	d011      	beq.n	9cce <memcpy+0x11a>

	rsb	r3, #4
    9caa:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    9cae:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    9cb0:	07db      	lsls	r3, r3, #31
	itt ne
    9cb2:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9cb4:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9cb8:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9cbc:	d307      	bcc.n	9cce <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    9cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9cc2:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    9cc6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9cca:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    9cce:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    9cd2:	f43f af75 	beq.w	9bc0 <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    9cd6:	b430      	push	{r4, r5}
	subs	r2, #4
    9cd8:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    9cda:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    9cdc:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    9ce0:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    9ce4:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    9ce6:	d019      	beq.n	9d1c <memcpy+0x168>
	cmp	r3, #3
    9ce8:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    9cea:	d00b      	beq.n	9d04 <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    9cec:	0a24      	lsrs	r4, r4, #8
    9cee:	f851 3b04 	ldr.w	r3, [r1], #4
    9cf2:	061d      	lsls	r5, r3, #24
    9cf4:	ea44 0405 	orr.w	r4, r4, r5
    9cf8:	f840 4b04 	str.w	r4, [r0], #4
    9cfc:	461c      	mov	r4, r3
    9cfe:	3a04      	subs	r2, #4
    9d00:	d2f4      	bcs.n	9cec <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    9d02:	e016      	b.n	9d32 <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    9d04:	0e24      	lsrs	r4, r4, #24
    9d06:	f851 3b04 	ldr.w	r3, [r1], #4
    9d0a:	021d      	lsls	r5, r3, #8
    9d0c:	ea44 0405 	orr.w	r4, r4, r5
    9d10:	f840 4b04 	str.w	r4, [r0], #4
    9d14:	461c      	mov	r4, r3
    9d16:	3a04      	subs	r2, #4
    9d18:	d2f4      	bcs.n	9d04 <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    9d1a:	e00a      	b.n	9d32 <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    9d1c:	0c24      	lsrs	r4, r4, #16
    9d1e:	f851 3b04 	ldr.w	r3, [r1], #4
    9d22:	041d      	lsls	r5, r3, #16
    9d24:	ea44 0405 	orr.w	r4, r4, r5
    9d28:	f840 4b04 	str.w	r4, [r0], #4
    9d2c:	461c      	mov	r4, r3
    9d2e:	3a04      	subs	r2, #4
    9d30:	d2f4      	bcs.n	9d1c <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    9d32:	3204      	adds	r2, #4
	subs	r1, ip
    9d34:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    9d38:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9d3a:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    9d3c:	d3a0      	bcc.n	9c80 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9d3e:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    9d40:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9d44:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9d48:	d2f9      	bcs.n	9d3e <memcpy+0x18a>

	ldrb	r3, [r1]
    9d4a:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9d4c:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9d4e:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9d50:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9d52:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9d54:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    9d56:	bc01      	pop	{r0}
#endif
	bx	lr
    9d58:	4770      	bx	lr
    9d5a:	bf00      	nop

00009d5c <fault_isr>:
{
    9d5c:	b508      	push	{r3, lr}
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9d5e:	4c0f      	ldr	r4, [pc, #60]	; (9d9c <fault_isr+0x40>)
    9d60:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9d62:	0358      	lsls	r0, r3, #13
    9d64:	d40d      	bmi.n	9d82 <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9d66:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9d68:	0559      	lsls	r1, r3, #21
    9d6a:	d40f      	bmi.n	9d8c <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9d6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9d6e:	051a      	lsls	r2, r3, #20
    9d70:	d411      	bmi.n	9d96 <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    9d72:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9d74:	04db      	lsls	r3, r3, #19
    9d76:	d5f3      	bpl.n	9d60 <fault_isr+0x4>
    9d78:	f001 fb38 	bl	b3ec <uart2_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9d7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9d7e:	0358      	lsls	r0, r3, #13
    9d80:	d5f1      	bpl.n	9d66 <fault_isr+0xa>
    9d82:	f001 fcb5 	bl	b6f0 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9d88:	0559      	lsls	r1, r3, #21
    9d8a:	d5ef      	bpl.n	9d6c <fault_isr+0x10>
    9d8c:	f000 f808 	bl	9da0 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9d90:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9d92:	051a      	lsls	r2, r3, #20
    9d94:	d5ed      	bpl.n	9d72 <fault_isr+0x16>
    9d96:	f000 ff95 	bl	acc4 <uart1_status_isr>
    9d9a:	e7ea      	b.n	9d72 <fault_isr+0x16>
    9d9c:	40048000 	.word	0x40048000

00009da0 <unused_isr>:
{
    9da0:	b508      	push	{r3, lr}
	fault_isr();
    9da2:	f7ff ffdb 	bl	9d5c <fault_isr>
    9da6:	bf00      	nop

00009da8 <startup_early_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    9da8:	4b01      	ldr	r3, [pc, #4]	; (9db0 <startup_early_hook+0x8>)
    9daa:	2210      	movs	r2, #16
    9dac:	801a      	strh	r2, [r3, #0]
}
    9dae:	4770      	bx	lr
    9db0:	40052000 	.word	0x40052000

00009db4 <startup_late_hook>:
static void startup_default_late_hook(void) {}
    9db4:	4770      	bx	lr
    9db6:	bf00      	nop

00009db8 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    9db8:	4a09      	ldr	r2, [pc, #36]	; (9de0 <_sbrk+0x28>)
{
    9dba:	b508      	push	{r3, lr}
    9dbc:	4603      	mov	r3, r0
	prev = __brkval;
    9dbe:	6810      	ldr	r0, [r2, #0]
	if (incr != 0) {
    9dc0:	b133      	cbz	r3, 9dd0 <_sbrk+0x18>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    9dc2:	4669      	mov	r1, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    9dc4:	4403      	add	r3, r0
    9dc6:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    9dca:	428b      	cmp	r3, r1
    9dcc:	d201      	bcs.n	9dd2 <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9dce:	6013      	str	r3, [r2, #0]
	}
	return prev;
}
    9dd0:	bd08      	pop	{r3, pc}
			errno = ENOMEM;
    9dd2:	f004 f9a7 	bl	e124 <__errno>
    9dd6:	230c      	movs	r3, #12
    9dd8:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    9dda:	f04f 30ff 	mov.w	r0, #4294967295
}
    9dde:	bd08      	pop	{r3, pc}
    9de0:	1fff88e8 	.word	0x1fff88e8

00009de4 <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    9de4:	2000      	movs	r0, #0
    9de6:	4770      	bx	lr

00009de8 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    9de8:	f04f 30ff 	mov.w	r0, #4294967295
    9dec:	4770      	bx	lr
    9dee:	bf00      	nop

00009df0 <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    9df0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9df4:	604b      	str	r3, [r1, #4]
	return 0;
}
    9df6:	2000      	movs	r0, #0
    9df8:	4770      	bx	lr
    9dfa:	bf00      	nop

00009dfc <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    9dfc:	2001      	movs	r0, #1
    9dfe:	4770      	bx	lr

00009e00 <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    9e00:	f04f 30ff 	mov.w	r0, #4294967295
    9e04:	4770      	bx	lr
    9e06:	bf00      	nop

00009e08 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) ;
    9e08:	e7fe      	b.n	9e08 <abort>
    9e0a:	Address 0x00009e0a is out of bounds.


00009e0c <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    9e0c:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    9e10:	b9cb      	cbnz	r3, 9e46 <nvic_execution_priority+0x3a>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9e12:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    9e16:	b9a0      	cbnz	r0, 9e42 <nvic_execution_priority+0x36>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9e18:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    9e1c:	b943      	cbnz	r3, 9e30 <nvic_execution_priority+0x24>
	uint32_t priority=256;
    9e1e:	f44f 7080 	mov.w	r0, #256	; 0x100
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    9e22:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    9e26:	b15b      	cbz	r3, 9e40 <nvic_execution_priority+0x34>
    9e28:	4298      	cmp	r0, r3
    9e2a:	bf28      	it	cs
    9e2c:	4618      	movcs	r0, r3
	return priority;
    9e2e:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    9e30:	2b0f      	cmp	r3, #15
    9e32:	d9f6      	bls.n	9e22 <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    9e34:	4a05      	ldr	r2, [pc, #20]	; (9e4c <nvic_execution_priority+0x40>)
    9e36:	5cd0      	ldrb	r0, [r2, r3]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    9e38:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    9e3c:	2b00      	cmp	r3, #0
    9e3e:	d1f3      	bne.n	9e28 <nvic_execution_priority+0x1c>
}
    9e40:	4770      	bx	lr
	if (primask) return 0;
    9e42:	4618      	mov	r0, r3
}
    9e44:	4770      	bx	lr
	if (faultmask) return -1;
    9e46:	f04f 30ff 	mov.w	r0, #4294967295
    9e4a:	4770      	bx	lr
    9e4c:	e000e3f0 	.word	0xe000e3f0

00009e50 <operator new(unsigned int)>:

#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    9e50:	f003 ba02 	b.w	d258 <malloc>

00009e54 <operator new[](unsigned int)>:
    9e54:	f003 ba00 	b.w	d258 <malloc>

00009e58 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    9e58:	f101 3cff 	add.w	ip, r1, #4294967295
{
    9e5c:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    9e5e:	4665      	mov	r5, ip
	int i=0, j;
    9e60:	2400      	movs	r4, #0
    9e62:	e001      	b.n	9e68 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    9e64:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    9e66:	3401      	adds	r4, #1
		digit = val % radix;
    9e68:	fbb0 fef2 	udiv	lr, r0, r2
    9e6c:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9e70:	2b09      	cmp	r3, #9
    9e72:	f103 0630 	add.w	r6, r3, #48	; 0x30
    9e76:	bf8a      	itet	hi
    9e78:	3337      	addhi	r3, #55	; 0x37
    9e7a:	b2f3      	uxtbls	r3, r6
    9e7c:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    9e7e:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9e80:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    9e84:	d2ee      	bcs.n	9e64 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    9e86:	1c63      	adds	r3, r4, #1
    9e88:	2200      	movs	r2, #0
    9e8a:	54ca      	strb	r2, [r1, r3]
    9e8c:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    9e8e:	b17c      	cbz	r4, 9eb0 <ultoa+0x58>
		t = buf[j];
    9e90:	4662      	mov	r2, ip
    9e92:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    9e96:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    9e9a:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    9e9e:	eba1 030c 	sub.w	r3, r1, ip
    9ea2:	3202      	adds	r2, #2
    9ea4:	3b01      	subs	r3, #1
    9ea6:	1a52      	subs	r2, r2, r1
    9ea8:	4423      	add	r3, r4
    9eaa:	429a      	cmp	r2, r3
		buf[i] = t;
    9eac:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    9eae:	dbef      	blt.n	9e90 <ultoa+0x38>
	}
	return buf;
}
    9eb0:	4608      	mov	r0, r1
    9eb2:	bd70      	pop	{r4, r5, r6, pc}

00009eb4 <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    9eb4:	4770      	bx	lr
    9eb6:	bf00      	nop

00009eb8 <digitalWrite.part.0>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    9eb8:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    9eba:	4b0f      	ldr	r3, [pc, #60]	; (9ef8 <digitalWrite.part.0+0x40>)
    9ebc:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    9ec0:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    9ec4:	b12c      	cbz	r4, 9ed2 <digitalWrite.part.0+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    9ec6:	2301      	movs	r3, #1
		if (val) {
    9ec8:	b191      	cbz	r1, 9ef0 <digitalWrite.part.0+0x38>
			*portSetRegister(pin) = 1;
    9eca:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    9ece:	bc10      	pop	{r4}
    9ed0:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    9ed2:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    9ed6:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9ed8:	681a      	ldr	r2, [r3, #0]
		if (val) {
    9eda:	b921      	cbnz	r1, 9ee6 <digitalWrite.part.0+0x2e>
			*config &= ~(PORT_PCR_PE);
    9edc:	f022 0202 	bic.w	r2, r2, #2
}
    9ee0:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    9ee2:	601a      	str	r2, [r3, #0]
}
    9ee4:	4770      	bx	lr
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9ee6:	f042 0203 	orr.w	r2, r2, #3
}
    9eea:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    9eec:	601a      	str	r2, [r3, #0]
}
    9eee:	4770      	bx	lr
			*portClearRegister(pin) = 1;
    9ef0:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    9ef4:	bc10      	pop	{r4}
    9ef6:	4770      	bx	lr
    9ef8:	000153d8 	.word	0x000153d8

00009efc <attachInterrupt>:
	if (pin >= CORE_NUM_DIGITAL) return;
    9efc:	2821      	cmp	r0, #33	; 0x21
    9efe:	d835      	bhi.n	9f6c <attachInterrupt+0x70>
	switch (mode) {
    9f00:	2a04      	cmp	r2, #4
    9f02:	d833      	bhi.n	9f6c <attachInterrupt+0x70>
{
    9f04:	b430      	push	{r4, r5}
	mask = (mask << 16) | 0x01000000;
    9f06:	4b2a      	ldr	r3, [pc, #168]	; (9fb0 <attachInterrupt+0xb4>)
	config = portConfigRegister(pin);
    9f08:	4d2a      	ldr	r5, [pc, #168]	; (9fb4 <attachInterrupt+0xb8>)
	mask = (mask << 16) | 0x01000000;
    9f0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	config = portConfigRegister(pin);
    9f0e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
	mask = (mask << 16) | 0x01000000;
    9f12:	041b      	lsls	r3, r3, #16
	config = portConfigRegister(pin);
    9f14:	6854      	ldr	r4, [r2, #4]
	if ((*config & 0x00000700) == 0) {
    9f16:	6822      	ldr	r2, [r4, #0]
    9f18:	f412 62e0 	ands.w	r2, r2, #1792	; 0x700
    9f1c:	d039      	beq.n	9f92 <attachInterrupt+0x96>
	_VectorsRam[irq + 16] = function;
    9f1e:	4a26      	ldr	r2, [pc, #152]	; (9fb8 <attachInterrupt+0xbc>)
    9f20:	4826      	ldr	r0, [pc, #152]	; (9fbc <attachInterrupt+0xc0>)
    9f22:	f8c2 019c 	str.w	r0, [r2, #412]	; 0x19c
    9f26:	4826      	ldr	r0, [pc, #152]	; (9fc0 <attachInterrupt+0xc4>)
    9f28:	f8c2 01a0 	str.w	r0, [r2, #416]	; 0x1a0
    9f2c:	4825      	ldr	r0, [pc, #148]	; (9fc4 <attachInterrupt+0xc8>)
    9f2e:	f8c2 01a4 	str.w	r0, [r2, #420]	; 0x1a4
    9f32:	4825      	ldr	r0, [pc, #148]	; (9fc8 <attachInterrupt+0xcc>)
    9f34:	f8c2 01a8 	str.w	r0, [r2, #424]	; 0x1a8
    9f38:	4824      	ldr	r0, [pc, #144]	; (9fcc <attachInterrupt+0xd0>)
    9f3a:	f8c2 01ac 	str.w	r0, [r2, #428]	; 0x1ac
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    9f3e:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
    9f42:	f5a2 2092 	sub.w	r0, r2, #299008	; 0x49000
    9f46:	287c      	cmp	r0, #124	; 0x7c
    9f48:	d811      	bhi.n	9f6e <attachInterrupt+0x72>
    9f4a:	4821      	ldr	r0, [pc, #132]	; (9fd0 <attachInterrupt+0xd4>)
	__disable_irq();
    9f4c:	b672      	cpsid	i
	cfg = *config;
    9f4e:	6822      	ldr	r2, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    9f50:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
	*config = cfg;
    9f54:	6022      	str	r2, [r4, #0]
    9f56:	4313      	orrs	r3, r2
	return (v % 128) / 4;
    9f58:	f3c4 0284 	ubfx	r2, r4, #2, #5
	cfg |= mask;
    9f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	isr_table[pin_index] = function;	// set the function pointer
    9f60:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	*config = cfg;			// enable the new interrupt
    9f64:	6023      	str	r3, [r4, #0]
	__enable_irq();
    9f66:	b662      	cpsie	i
}
    9f68:	bc30      	pop	{r4, r5}
    9f6a:	4770      	bx	lr
    9f6c:	4770      	bx	lr
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    9f6e:	f5a2 2094 	sub.w	r0, r2, #303104	; 0x4a000
    9f72:	287c      	cmp	r0, #124	; 0x7c
    9f74:	d915      	bls.n	9fa2 <attachInterrupt+0xa6>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    9f76:	f5a2 2096 	sub.w	r0, r2, #307200	; 0x4b000
    9f7a:	287c      	cmp	r0, #124	; 0x7c
    9f7c:	d913      	bls.n	9fa6 <attachInterrupt+0xaa>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    9f7e:	f5a2 2098 	sub.w	r0, r2, #311296	; 0x4c000
    9f82:	287c      	cmp	r0, #124	; 0x7c
    9f84:	d911      	bls.n	9faa <attachInterrupt+0xae>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    9f86:	f5a2 229a 	sub.w	r2, r2, #315392	; 0x4d000
    9f8a:	2a7c      	cmp	r2, #124	; 0x7c
    9f8c:	d8ec      	bhi.n	9f68 <attachInterrupt+0x6c>
    9f8e:	4811      	ldr	r0, [pc, #68]	; (9fd4 <attachInterrupt+0xd8>)
    9f90:	e7dc      	b.n	9f4c <attachInterrupt+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    9f92:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
    9f96:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    9f9a:	f44f 7280 	mov.w	r2, #256	; 0x100
    9f9e:	6022      	str	r2, [r4, #0]
    9fa0:	e7bd      	b.n	9f1e <attachInterrupt+0x22>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    9fa2:	480d      	ldr	r0, [pc, #52]	; (9fd8 <attachInterrupt+0xdc>)
    9fa4:	e7d2      	b.n	9f4c <attachInterrupt+0x50>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    9fa6:	480d      	ldr	r0, [pc, #52]	; (9fdc <attachInterrupt+0xe0>)
    9fa8:	e7d0      	b.n	9f4c <attachInterrupt+0x50>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    9faa:	480d      	ldr	r0, [pc, #52]	; (9fe0 <attachInterrupt+0xe4>)
    9fac:	e7ce      	b.n	9f4c <attachInterrupt+0x50>
    9fae:	bf00      	nop
    9fb0:	000153c4 	.word	0x000153c4
    9fb4:	000153d8 	.word	0x000153d8
    9fb8:	1fff8200 	.word	0x1fff8200
    9fbc:	1fff87f1 	.word	0x1fff87f1
    9fc0:	1fff87bd 	.word	0x1fff87bd
    9fc4:	1fff8789 	.word	0x1fff8789
    9fc8:	1fff8755 	.word	0x1fff8755
    9fcc:	1fff8721 	.word	0x1fff8721
    9fd0:	1fff88f0 	.word	0x1fff88f0
    9fd4:	1fff89c8 	.word	0x1fff89c8
    9fd8:	1fff8928 	.word	0x1fff8928
    9fdc:	1fff8978 	.word	0x1fff8978
    9fe0:	1fff89a8 	.word	0x1fff89a8

00009fe4 <rtc_set>:
	RTC_SR = 0;
    9fe4:	4b03      	ldr	r3, [pc, #12]	; (9ff4 <rtc_set+0x10>)
    9fe6:	2200      	movs	r2, #0
	RTC_SR = RTC_SR_TCE;
    9fe8:	2110      	movs	r1, #16
	RTC_SR = 0;
    9fea:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    9fec:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    9fee:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    9ff0:	6159      	str	r1, [r3, #20]
}
    9ff2:	4770      	bx	lr
    9ff4:	4003d000 	.word	0x4003d000

00009ff8 <startup_middle_hook>:
static void startup_default_middle_hook(void) {}
    9ff8:	4770      	bx	lr
    9ffa:	bf00      	nop

00009ffc <_init_Teensyduino_internal_>:
{
    9ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    9ffe:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    a002:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    a006:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    a00a:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    a00e:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    a012:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    a016:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_CNT = 0;
    a01a:	4a1d      	ldr	r2, [pc, #116]	; (a090 <_init_Teensyduino_internal_+0x94>)
	FTM1_CNT = 0;
    a01c:	481d      	ldr	r0, [pc, #116]	; (a094 <_init_Teensyduino_internal_+0x98>)
	FTM2_CNT = 0;
    a01e:	491e      	ldr	r1, [pc, #120]	; (a098 <_init_Teensyduino_internal_+0x9c>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    a020:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
    a024:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    a028:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    a02a:	2700      	movs	r7, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    a02c:	f64b 76ff 	movw	r6, #49151	; 0xbfff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a030:	2509      	movs	r5, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    a032:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    a036:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
{
    a03a:	b083      	sub	sp, #12
	FTM0_CNT = 0;
    a03c:	6057      	str	r7, [r2, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    a03e:	6096      	str	r6, [r2, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    a040:	60d3      	str	r3, [r2, #12]
	FTM0_C1SC = 0x28;
    a042:	6153      	str	r3, [r2, #20]
	FTM0_C2SC = 0x28;
    a044:	61d3      	str	r3, [r2, #28]
	FTM0_C3SC = 0x28;
    a046:	6253      	str	r3, [r2, #36]	; 0x24
	FTM0_C4SC = 0x28;
    a048:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    a04a:	6353      	str	r3, [r2, #52]	; 0x34
	FTM0_C6SC = 0x28;
    a04c:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    a04e:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a050:	6015      	str	r5, [r2, #0]
	FTM1_CNT = 0;
    a052:	6047      	str	r7, [r0, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    a054:	6086      	str	r6, [r0, #8]
	FTM1_C0SC = 0x28;
    a056:	60c3      	str	r3, [r0, #12]
	FTM1_C1SC = 0x28;
    a058:	6143      	str	r3, [r0, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a05a:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
    a05c:	604f      	str	r7, [r1, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    a05e:	608e      	str	r6, [r1, #8]
	FTM2_C0SC = 0x28;
    a060:	60cb      	str	r3, [r1, #12]
	FTM2_C1SC = 0x28;
    a062:	614b      	str	r3, [r1, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a064:	600d      	str	r5, [r1, #0]
	analog_init();
    a066:	f7ff fc27 	bl	98b8 <analog_init>
	startup_middle_hook();
    a06a:	f7ff ffc5 	bl	9ff8 <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    a06e:	4c0b      	ldr	r4, [pc, #44]	; (a09c <_init_Teensyduino_internal_+0xa0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a070:	6823      	ldr	r3, [r4, #0]
    a072:	9300      	str	r3, [sp, #0]
	return ret;
    a074:	9b00      	ldr	r3, [sp, #0]
    a076:	2b13      	cmp	r3, #19
    a078:	d9fa      	bls.n	a070 <_init_Teensyduino_internal_+0x74>
	usb_init();
    a07a:	f001 fef3 	bl	be64 <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a07e:	6823      	ldr	r3, [r4, #0]
    a080:	9301      	str	r3, [sp, #4]
	return ret;
    a082:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    a084:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    a088:	d3f9      	bcc.n	a07e <_init_Teensyduino_internal_+0x82>
}
    a08a:	b003      	add	sp, #12
    a08c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a08e:	bf00      	nop
    a090:	40038000 	.word	0x40038000
    a094:	40039000 	.word	0x40039000
    a098:	400b8000 	.word	0x400b8000
    a09c:	1fffd3c0 	.word	0x1fffd3c0

0000a0a0 <analogWrite>:
	if (pin == A14) {
    a0a0:	2828      	cmp	r0, #40	; 0x28
		uint8_t res = analog_write_res;
    a0a2:	4b7f      	ldr	r3, [pc, #508]	; (a2a0 <analogWrite+0x200>)
	if (pin == A14) {
    a0a4:	d036      	beq.n	a114 <analogWrite+0x74>
	if (val <= 0) {
    a0a6:	2900      	cmp	r1, #0
	max = 1 << analog_write_res;
    a0a8:	781b      	ldrb	r3, [r3, #0]
	if (val <= 0) {
    a0aa:	dd3f      	ble.n	a12c <analogWrite+0x8c>
	max = 1 << analog_write_res;
    a0ac:	2201      	movs	r2, #1
    a0ae:	fa02 fc03 	lsl.w	ip, r2, r3
	} else if (val >= max) {
    a0b2:	4561      	cmp	r1, ip
{
    a0b4:	b510      	push	{r4, lr}
	} else if (val >= max) {
    a0b6:	d254      	bcs.n	a162 <analogWrite+0xc2>
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    a0b8:	1ec2      	subs	r2, r0, #3
    a0ba:	2a01      	cmp	r2, #1
    a0bc:	d970      	bls.n	a1a0 <analogWrite+0x100>
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
    a0be:	2820      	cmp	r0, #32
    a0c0:	d067      	beq.n	a192 <analogWrite+0xf2>
    a0c2:	2819      	cmp	r0, #25
    a0c4:	d065      	beq.n	a192 <analogWrite+0xf2>
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
    a0c6:	4a77      	ldr	r2, [pc, #476]	; (a2a4 <analogWrite+0x204>)
    a0c8:	6892      	ldr	r2, [r2, #8]
    a0ca:	fb02 1201 	mla	r2, r2, r1, r1
    a0ce:	fa22 f303 	lsr.w	r3, r2, r3
	switch (pin) {
    a0d2:	1f42      	subs	r2, r0, #5
    a0d4:	2a1b      	cmp	r2, #27
    a0d6:	d87d      	bhi.n	a1d4 <analogWrite+0x134>
    a0d8:	e8df f012 	tbh	[pc, r2, lsl #1]
    a0dc:	00bf00c6 	.word	0x00bf00c6
    a0e0:	007c007c 	.word	0x007c007c
    a0e4:	00b100b8 	.word	0x00b100b8
    a0e8:	007c007c 	.word	0x007c007c
    a0ec:	007c007c 	.word	0x007c007c
    a0f0:	007c007c 	.word	0x007c007c
    a0f4:	007c007c 	.word	0x007c007c
    a0f8:	00aa007c 	.word	0x00aa007c
    a0fc:	009c00a3 	.word	0x009c00a3
    a100:	007c0095 	.word	0x007c0095
    a104:	007c00cd 	.word	0x007c00cd
    a108:	007c007c 	.word	0x007c007c
    a10c:	007c007c 	.word	0x007c007c
    a110:	00d4007c 	.word	0x00d4007c
		uint8_t res = analog_write_res;
    a114:	7818      	ldrb	r0, [r3, #0]
		if (res < 12) {
    a116:	280b      	cmp	r0, #11
			val <<= 12 - res;
    a118:	bf95      	itete	ls
    a11a:	f1c0 000c 	rsbls	r0, r0, #12
			val >>= res - 12;
    a11e:	380c      	subhi	r0, #12
			val <<= 12 - res;
    a120:	fa01 f000 	lslls.w	r0, r1, r0
			val >>= res - 12;
    a124:	fa41 f000 	asrhi.w	r0, r1, r0
		analogWriteDAC0(val);
    a128:	f7ff bc2a 	b.w	9980 <analogWriteDAC0>
	if (pin >= CORE_NUM_DIGITAL) return;
    a12c:	2821      	cmp	r0, #33	; 0x21
    a12e:	d817      	bhi.n	a160 <analogWrite+0xc0>
	if (*portModeRegister(pin)) {
    a130:	4b5d      	ldr	r3, [pc, #372]	; (a2a8 <analogWrite+0x208>)
    a132:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    a136:	f892 1280 	ldrb.w	r1, [r2, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    a13a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    a13e:	2900      	cmp	r1, #0
    a140:	d03c      	beq.n	a1bc <analogWrite+0x11c>
			*portClearRegister(pin) = 1;
    a142:	2101      	movs	r1, #1
		volatile uint32_t *config = portConfigRegister(pin);
    a144:	685b      	ldr	r3, [r3, #4]
			*portClearRegister(pin) = 1;
    a146:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		*portModeRegister(pin) = 1;
    a14a:	2001      	movs	r0, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a14c:	f44f 71a2 	mov.w	r1, #324	; 0x144
		*portModeRegister(pin) = 1;
    a150:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a154:	6019      	str	r1, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a156:	681a      	ldr	r2, [r3, #0]
    a158:	f022 0220 	bic.w	r2, r2, #32
    a15c:	601a      	str	r2, [r3, #0]
    a15e:	4770      	bx	lr
    a160:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
    a162:	2821      	cmp	r0, #33	; 0x21
    a164:	d814      	bhi.n	a190 <analogWrite+0xf0>
	if (*portModeRegister(pin)) {
    a166:	4b50      	ldr	r3, [pc, #320]	; (a2a8 <analogWrite+0x208>)
    a168:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
    a16c:	f891 4280 	ldrb.w	r4, [r1, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    a170:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    a174:	b344      	cbz	r4, a1c8 <analogWrite+0x128>
		volatile uint32_t *config = portConfigRegister(pin);
    a176:	685b      	ldr	r3, [r3, #4]
			*portSetRegister(pin) = 1;
    a178:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a17c:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a180:	2001      	movs	r0, #1
    a182:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a186:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a188:	681a      	ldr	r2, [r3, #0]
    a18a:	f022 0220 	bic.w	r2, r2, #32
    a18e:	601a      	str	r2, [r3, #0]
}
    a190:	bd10      	pop	{r4, pc}
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
    a192:	4a46      	ldr	r2, [pc, #280]	; (a2ac <analogWrite+0x20c>)
    a194:	6892      	ldr	r2, [r2, #8]
    a196:	fb02 1201 	mla	r2, r2, r1, r1
    a19a:	fa22 f303 	lsr.w	r3, r2, r3
    a19e:	e798      	b.n	a0d2 <analogWrite+0x32>
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    a1a0:	4c43      	ldr	r4, [pc, #268]	; (a2b0 <analogWrite+0x210>)
    a1a2:	68a2      	ldr	r2, [r4, #8]
	switch (pin) {
    a1a4:	2804      	cmp	r0, #4
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    a1a6:	fb02 1201 	mla	r2, r2, r1, r1
    a1aa:	fa22 f203 	lsr.w	r2, r2, r3
	switch (pin) {
    a1ae:	d170      	bne.n	a292 <analogWrite+0x1f2>
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a1b0:	4b40      	ldr	r3, [pc, #256]	; (a2b4 <analogWrite+0x214>)
		FTM1_C1V = cval;
    a1b2:	61a2      	str	r2, [r4, #24]
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a1b4:	f44f 7151 	mov.w	r1, #836	; 0x344
    a1b8:	6359      	str	r1, [r3, #52]	; 0x34
}
    a1ba:	bd10      	pop	{r4, pc}
		volatile uint32_t *config = portConfigRegister(pin);
    a1bc:	685b      	ldr	r3, [r3, #4]
			*config &= ~(PORT_PCR_PE);
    a1be:	6819      	ldr	r1, [r3, #0]
    a1c0:	f021 0102 	bic.w	r1, r1, #2
    a1c4:	6019      	str	r1, [r3, #0]
    a1c6:	e7c0      	b.n	a14a <analogWrite+0xaa>
		volatile uint32_t *config = portConfigRegister(pin);
    a1c8:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a1ca:	681a      	ldr	r2, [r3, #0]
    a1cc:	f042 0203 	orr.w	r2, r2, #3
    a1d0:	601a      	str	r2, [r3, #0]
    a1d2:	e7d3      	b.n	a17c <analogWrite+0xdc>
	if (pin >= CORE_NUM_DIGITAL) return;
    a1d4:	2821      	cmp	r0, #33	; 0x21
    a1d6:	d8db      	bhi.n	a190 <analogWrite+0xf0>
    a1d8:	297f      	cmp	r1, #127	; 0x7f
    a1da:	bfd4      	ite	le
    a1dc:	2100      	movle	r1, #0
    a1de:	2101      	movgt	r1, #1
    a1e0:	f7ff fe6a 	bl	9eb8 <digitalWrite.part.0>
	config = portConfigRegister(pin);
    a1e4:	4b30      	ldr	r3, [pc, #192]	; (a2a8 <analogWrite+0x208>)
    a1e6:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
		*portModeRegister(pin) = 1;
    a1ea:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
	config = portConfigRegister(pin);
    a1ee:	6853      	ldr	r3, [r2, #4]
		*portModeRegister(pin) = 1;
    a1f0:	2401      	movs	r4, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a1f2:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a1f6:	f881 4280 	strb.w	r4, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a1fa:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a1fc:	681a      	ldr	r2, [r3, #0]
    a1fe:	f022 0220 	bic.w	r2, r2, #32
    a202:	601a      	str	r2, [r3, #0]
}
    a204:	bd10      	pop	{r4, pc}
		FTM0_C1V = cval;
    a206:	4827      	ldr	r0, [pc, #156]	; (a2a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a208:	4a2b      	ldr	r2, [pc, #172]	; (a2b8 <analogWrite+0x218>)
		FTM0_C1V = cval;
    a20a:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a20c:	f240 4144 	movw	r1, #1092	; 0x444
    a210:	6091      	str	r1, [r2, #8]
}
    a212:	bd10      	pop	{r4, pc}
		FTM0_C0V = cval;
    a214:	4823      	ldr	r0, [pc, #140]	; (a2a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a216:	4a28      	ldr	r2, [pc, #160]	; (a2b8 <analogWrite+0x218>)
		FTM0_C0V = cval;
    a218:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a21a:	f240 4144 	movw	r1, #1092	; 0x444
    a21e:	6051      	str	r1, [r2, #4]
}
    a220:	bd10      	pop	{r4, pc}
		FTM0_C6V = cval;
    a222:	4820      	ldr	r0, [pc, #128]	; (a2a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a224:	4a25      	ldr	r2, [pc, #148]	; (a2bc <analogWrite+0x21c>)
		FTM0_C6V = cval;
    a226:	6403      	str	r3, [r0, #64]	; 0x40
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a228:	f240 4144 	movw	r1, #1092	; 0x444
    a22c:	6191      	str	r1, [r2, #24]
}
    a22e:	bd10      	pop	{r4, pc}
		FTM0_C5V = cval;
    a230:	481c      	ldr	r0, [pc, #112]	; (a2a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a232:	4a22      	ldr	r2, [pc, #136]	; (a2bc <analogWrite+0x21c>)
		FTM0_C5V = cval;
    a234:	6383      	str	r3, [r0, #56]	; 0x38
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a236:	f240 4144 	movw	r1, #1092	; 0x444
    a23a:	6151      	str	r1, [r2, #20]
}
    a23c:	bd10      	pop	{r4, pc}
		FTM0_C3V = cval;
    a23e:	4819      	ldr	r0, [pc, #100]	; (a2a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a240:	4a1d      	ldr	r2, [pc, #116]	; (a2b8 <analogWrite+0x218>)
		FTM0_C3V = cval;
    a242:	6283      	str	r3, [r0, #40]	; 0x28
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a244:	f240 4144 	movw	r1, #1092	; 0x444
    a248:	6111      	str	r1, [r2, #16]
}
    a24a:	bd10      	pop	{r4, pc}
		FTM0_C2V = cval;
    a24c:	4815      	ldr	r0, [pc, #84]	; (a2a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a24e:	4a1a      	ldr	r2, [pc, #104]	; (a2b8 <analogWrite+0x218>)
		FTM0_C2V = cval;
    a250:	6203      	str	r3, [r0, #32]
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a252:	f240 4144 	movw	r1, #1092	; 0x444
    a256:	60d1      	str	r1, [r2, #12]
}
    a258:	bd10      	pop	{r4, pc}
		FTM0_C4V = cval;
    a25a:	4812      	ldr	r0, [pc, #72]	; (a2a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a25c:	4a17      	ldr	r2, [pc, #92]	; (a2bc <analogWrite+0x21c>)
		FTM0_C4V = cval;
    a25e:	6303      	str	r3, [r0, #48]	; 0x30
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a260:	f240 4144 	movw	r1, #1092	; 0x444
    a264:	6111      	str	r1, [r2, #16]
}
    a266:	bd10      	pop	{r4, pc}
		FTM0_C7V = cval;
    a268:	480e      	ldr	r0, [pc, #56]	; (a2a4 <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a26a:	4a14      	ldr	r2, [pc, #80]	; (a2bc <analogWrite+0x21c>)
		FTM0_C7V = cval;
    a26c:	6483      	str	r3, [r0, #72]	; 0x48
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a26e:	f240 4144 	movw	r1, #1092	; 0x444
    a272:	61d1      	str	r1, [r2, #28]
}
    a274:	bd10      	pop	{r4, pc}
		FTM2_C1V = cval;
    a276:	480d      	ldr	r0, [pc, #52]	; (a2ac <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a278:	4a11      	ldr	r2, [pc, #68]	; (a2c0 <analogWrite+0x220>)
		FTM2_C1V = cval;
    a27a:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a27c:	f44f 7151 	mov.w	r1, #836	; 0x344
    a280:	64d1      	str	r1, [r2, #76]	; 0x4c
}
    a282:	bd10      	pop	{r4, pc}
		FTM2_C0V = cval;
    a284:	4809      	ldr	r0, [pc, #36]	; (a2ac <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a286:	4a0e      	ldr	r2, [pc, #56]	; (a2c0 <analogWrite+0x220>)
		FTM2_C0V = cval;
    a288:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a28a:	f44f 7151 	mov.w	r1, #836	; 0x344
    a28e:	6491      	str	r1, [r2, #72]	; 0x48
}
    a290:	bd10      	pop	{r4, pc}
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a292:	4b08      	ldr	r3, [pc, #32]	; (a2b4 <analogWrite+0x214>)
		FTM1_C0V = cval;
    a294:	6122      	str	r2, [r4, #16]
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a296:	f44f 7151 	mov.w	r1, #836	; 0x344
    a29a:	6319      	str	r1, [r3, #48]	; 0x30
}
    a29c:	bd10      	pop	{r4, pc}
    a29e:	bf00      	nop
    a2a0:	1fff88ec 	.word	0x1fff88ec
    a2a4:	40038000 	.word	0x40038000
    a2a8:	000153d8 	.word	0x000153d8
    a2ac:	400b8000 	.word	0x400b8000
    a2b0:	40039000 	.word	0x40039000
    a2b4:	40049000 	.word	0x40049000
    a2b8:	4004b000 	.word	0x4004b000
    a2bc:	4004c000 	.word	0x4004c000
    a2c0:	4004a000 	.word	0x4004a000

0000a2c4 <analogWriteFrequency>:
{
    a2c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a2c8:	460e      	mov	r6, r1
    a2ca:	4680      	mov	r8, r0
	if (frequency < (float)(F_TIMER >> 7) / 65536.0f) {
    a2cc:	492c      	ldr	r1, [pc, #176]	; (a380 <analogWriteFrequency+0xbc>)
    a2ce:	4630      	mov	r0, r6
    a2d0:	f002 ff54 	bl	d17c <__aeabi_fcmplt>
		ftmClockSource = 1; 	// Use default F_TIMER clock source
    a2d4:	4b2b      	ldr	r3, [pc, #172]	; (a384 <analogWriteFrequency+0xc0>)
    a2d6:	2800      	cmp	r0, #0
    a2d8:	f647 2712 	movw	r7, #31250	; 0x7a12
    a2dc:	bf12      	itee	ne
    a2de:	f04f 0a02 	movne.w	sl, #2
    a2e2:	f04f 0a01 	moveq.w	sl, #1
    a2e6:	461f      	moveq	r7, r3
	for (prescale = 0; prescale < 7; prescale++) {
    a2e8:	2400      	movs	r4, #0
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
    a2ea:	f04f 595e 	mov.w	r9, #931135488	; 0x37800000
    a2ee:	fa27 f004 	lsr.w	r0, r7, r4
    a2f2:	f002 fd4d 	bl	cd90 <__aeabi_ui2f>
    a2f6:	4649      	mov	r1, r9
    a2f8:	4605      	mov	r5, r0
    a2fa:	f002 fda1 	bl	ce40 <__aeabi_fmul>
    a2fe:	4601      	mov	r1, r0
		if (frequency >= minfreq) break;
    a300:	4630      	mov	r0, r6
    a302:	f002 ff4f 	bl	d1a4 <__aeabi_fcmpge>
    a306:	b930      	cbnz	r0, a316 <analogWriteFrequency+0x52>
	for (prescale = 0; prescale < 7; prescale++) {
    a308:	3401      	adds	r4, #1
    a30a:	2c07      	cmp	r4, #7
    a30c:	d1ef      	bne.n	a2ee <analogWriteFrequency+0x2a>
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
    a30e:	09f8      	lsrs	r0, r7, #7
    a310:	f002 fd3e 	bl	cd90 <__aeabi_ui2f>
    a314:	4605      	mov	r5, r0
    a316:	4631      	mov	r1, r6
    a318:	4628      	mov	r0, r5
    a31a:	f002 fe45 	bl	cfa8 <__aeabi_fdiv>
    a31e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    a322:	f002 fc83 	bl	cc2c <__aeabi_fsub>
    a326:	f002 ff77 	bl	d218 <__aeabi_f2uiz>
    a32a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a32e:	4298      	cmp	r0, r3
    a330:	bf28      	it	cs
    a332:	4618      	movcs	r0, r3
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    a334:	f1a8 0303 	sub.w	r3, r8, #3
    a338:	2b01      	cmp	r3, #1
    a33a:	d911      	bls.n	a360 <analogWriteFrequency+0x9c>
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
    a33c:	f1a8 0805 	sub.w	r8, r8, #5
    a340:	fa5f f888 	uxtb.w	r8, r8
    a344:	f1b8 0f1b 	cmp.w	r8, #27
    a348:	d808      	bhi.n	a35c <analogWriteFrequency+0x98>
    a34a:	4a0f      	ldr	r2, [pc, #60]	; (a388 <analogWriteFrequency+0xc4>)
    a34c:	2301      	movs	r3, #1
    a34e:	fa03 f308 	lsl.w	r3, r3, r8
    a352:	401a      	ands	r2, r3
    a354:	d110      	bne.n	a378 <analogWriteFrequency+0xb4>
    a356:	f013 6f01 	tst.w	r3, #135266304	; 0x8100000
    a35a:	d10b      	bne.n	a374 <analogWriteFrequency+0xb0>
}
    a35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM1_SC = 0;
    a360:	4b0a      	ldr	r3, [pc, #40]	; (a38c <analogWriteFrequency+0xc8>)
    a362:	2200      	movs	r2, #0
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    a364:	ea44 04ca 	orr.w	r4, r4, sl, lsl #3
		FTM2_SC = 0;
    a368:	601a      	str	r2, [r3, #0]
		FTM2_CNT = 0;
    a36a:	605a      	str	r2, [r3, #4]
		FTM2_MOD = mod;
    a36c:	6098      	str	r0, [r3, #8]
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    a36e:	601c      	str	r4, [r3, #0]
}
    a370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM2_SC = 0;
    a374:	4b06      	ldr	r3, [pc, #24]	; (a390 <analogWriteFrequency+0xcc>)
    a376:	e7f5      	b.n	a364 <analogWriteFrequency+0xa0>
		FTM0_SC = 0;
    a378:	4b06      	ldr	r3, [pc, #24]	; (a394 <analogWriteFrequency+0xd0>)
    a37a:	2200      	movs	r2, #0
    a37c:	e7f2      	b.n	a364 <analogWriteFrequency+0xa0>
    a37e:	bf00      	nop
    a380:	40b71b00 	.word	0x40b71b00
    a384:	02dc6c00 	.word	0x02dc6c00
    a388:	00078033 	.word	0x00078033
    a38c:	40039000 	.word	0x40039000
    a390:	400b8000 	.word	0x400b8000
    a394:	40038000 	.word	0x40038000

0000a398 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    a398:	2821      	cmp	r0, #33	; 0x21
    a39a:	d816      	bhi.n	a3ca <digitalWrite+0x32>
{
    a39c:	b410      	push	{r4}
	if (*portModeRegister(pin)) {
    a39e:	4b10      	ldr	r3, [pc, #64]	; (a3e0 <digitalWrite+0x48>)
    a3a0:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    a3a4:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    a3a8:	b12c      	cbz	r4, a3b6 <digitalWrite+0x1e>
			*portSetRegister(pin) = 1;
    a3aa:	2301      	movs	r3, #1
		if (val) {
    a3ac:	b971      	cbnz	r1, a3cc <digitalWrite+0x34>
			*portClearRegister(pin) = 1;
    a3ae:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    a3b2:	bc10      	pop	{r4}
    a3b4:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    a3b6:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    a3ba:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a3bc:	681a      	ldr	r2, [r3, #0]
		if (val) {
    a3be:	b149      	cbz	r1, a3d4 <digitalWrite+0x3c>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a3c0:	f042 0203 	orr.w	r2, r2, #3
}
    a3c4:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a3c6:	601a      	str	r2, [r3, #0]
}
    a3c8:	4770      	bx	lr
    a3ca:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    a3cc:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    a3d0:	bc10      	pop	{r4}
    a3d2:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    a3d4:	f022 0202 	bic.w	r2, r2, #2
}
    a3d8:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    a3da:	601a      	str	r2, [r3, #0]
}
    a3dc:	4770      	bx	lr
    a3de:	bf00      	nop
    a3e0:	000153d8 	.word	0x000153d8

0000a3e4 <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
    a3e4:	2821      	cmp	r0, #33	; 0x21
    a3e6:	d806      	bhi.n	a3f6 <digitalRead+0x12>
	return *portInputRegister(pin);
    a3e8:	4b04      	ldr	r3, [pc, #16]	; (a3fc <digitalRead+0x18>)
    a3ea:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    a3ee:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    a3f2:	b2c0      	uxtb	r0, r0
    a3f4:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    a3f6:	2000      	movs	r0, #0
}
    a3f8:	4770      	bx	lr
    a3fa:	bf00      	nop
    a3fc:	000153d8 	.word	0x000153d8

0000a400 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    a400:	2821      	cmp	r0, #33	; 0x21
    a402:	d820      	bhi.n	a446 <pinMode+0x46>
	config = portConfigRegister(pin);
    a404:	4a1b      	ldr	r2, [pc, #108]	; (a474 <pinMode+0x74>)
    a406:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a40a:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    a40c:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a40e:	d00f      	beq.n	a430 <pinMode+0x30>
    a410:	2904      	cmp	r1, #4
    a412:	d01d      	beq.n	a450 <pinMode+0x50>
		*portModeRegister(pin) = 0;
    a414:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    a418:	2200      	movs	r2, #0
    a41a:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
		if (mode == INPUT) {
    a41e:	b199      	cbz	r1, a448 <pinMode+0x48>
		} else if (mode == INPUT_PULLUP) {
    a420:	2902      	cmp	r1, #2
    a422:	d022      	beq.n	a46a <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    a424:	2903      	cmp	r1, #3
    a426:	d10d      	bne.n	a444 <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    a428:	f44f 7281 	mov.w	r2, #258	; 0x102
    a42c:	601a      	str	r2, [r3, #0]
    a42e:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    a430:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a434:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a438:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a43c:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a43e:	681a      	ldr	r2, [r3, #0]
    a440:	f022 0220 	bic.w	r2, r2, #32
    a444:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    a446:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    a448:	f44f 7280 	mov.w	r2, #256	; 0x100
    a44c:	601a      	str	r2, [r3, #0]
    a44e:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    a450:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a454:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a458:	2001      	movs	r0, #1
    a45a:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a45e:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    a460:	681a      	ldr	r2, [r3, #0]
    a462:	f042 0220 	orr.w	r2, r2, #32
    a466:	601a      	str	r2, [r3, #0]
    a468:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    a46a:	f240 1203 	movw	r2, #259	; 0x103
    a46e:	601a      	str	r2, [r3, #0]
    a470:	4770      	bx	lr
    a472:	bf00      	nop
    a474:	000153d8 	.word	0x000153d8

0000a478 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    a478:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    a47a:	490d      	ldr	r1, [pc, #52]	; (a4b0 <micros+0x38>)
	current = SYST_CVR;
    a47c:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a480:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    a482:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a484:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    a488:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a48a:	0152      	lsls	r2, r2, #5
    a48c:	d502      	bpl.n	a494 <micros+0x1c>
    a48e:	2b32      	cmp	r3, #50	; 0x32
    a490:	bf88      	it	hi
    a492:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    a494:	4a07      	ldr	r2, [pc, #28]	; (a4b4 <micros+0x3c>)
	current = ((F_CPU / 1000) - 1) - current;
    a496:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
	return count * 1000 + current / (F_CPU / 1000000);
    a49a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	current = ((F_CPU / 1000) - 1) - current;
    a49e:	33ff      	adds	r3, #255	; 0xff
	return count * 1000 + current / (F_CPU / 1000000);
    a4a0:	fba2 2303 	umull	r2, r3, r2, r3
    a4a4:	fb01 f000 	mul.w	r0, r1, r0
}
    a4a8:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    a4ac:	4770      	bx	lr
    a4ae:	bf00      	nop
    a4b0:	1fffd3c0 	.word	0x1fffd3c0
    a4b4:	aaaaaaab 	.word	0xaaaaaaab

0000a4b8 <delay>:

void delay(uint32_t ms)
{
    a4b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a4bc:	4604      	mov	r4, r0
	__disable_irq();
    a4be:	b672      	cpsid	i
	count = systick_millis_count;
    a4c0:	4f20      	ldr	r7, [pc, #128]	; (a544 <delay+0x8c>)
	current = SYST_CVR;
    a4c2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a4c6:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    a4c8:	683d      	ldr	r5, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a4ca:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    a4ce:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a4d0:	0152      	lsls	r2, r2, #5
    a4d2:	d502      	bpl.n	a4da <delay+0x22>
    a4d4:	2b32      	cmp	r3, #50	; 0x32
    a4d6:	bf88      	it	hi
    a4d8:	3501      	addhi	r5, #1
	uint32_t start = micros();

	if (ms > 0) {
    a4da:	b90c      	cbnz	r4, a4e0 <delay+0x28>
				start += 1000;
			}
			yield();
		}
	}
}
    a4dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	current = ((F_CPU / 1000) - 1) - current;
    a4e0:	f8df 9064 	ldr.w	r9, [pc, #100]	; a548 <delay+0x90>
	return count * 1000 + current / (F_CPU / 1000000);
    a4e4:	f8df 8064 	ldr.w	r8, [pc, #100]	; a54c <delay+0x94>
	current = ((F_CPU / 1000) - 1) - current;
    a4e8:	eba9 0303 	sub.w	r3, r9, r3
	return count * 1000 + current / (F_CPU / 1000000);
    a4ec:	fba8 2303 	umull	r2, r3, r8, r3
    a4f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a4f4:	fb02 f505 	mul.w	r5, r2, r5
    a4f8:	eb05 1593 	add.w	r5, r5, r3, lsr #6
	current = SYST_CVR;
    a4fc:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
	__disable_irq();
    a500:	b672      	cpsid	i
	current = SYST_CVR;
    a502:	69b1      	ldr	r1, [r6, #24]
	count = systick_millis_count;
    a504:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a506:	f8d6 cd04 	ldr.w	ip, [r6, #3332]	; 0xd04
	__enable_irq();
    a50a:	b662      	cpsie	i
	current = ((F_CPU / 1000) - 1) - current;
    a50c:	eba9 0301 	sub.w	r3, r9, r1
	return count * 1000 + current / (F_CPU / 1000000);
    a510:	fba8 0303 	umull	r0, r3, r8, r3
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a514:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
			while ((micros() - start) >= 1000) {
    a518:	ebc5 1393 	rsb	r3, r5, r3, lsr #6
	return count * 1000 + current / (F_CPU / 1000000);
    a51c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a520:	d002      	beq.n	a528 <delay+0x70>
    a522:	2932      	cmp	r1, #50	; 0x32
    a524:	bf88      	it	hi
    a526:	3201      	addhi	r2, #1
			while ((micros() - start) >= 1000) {
    a528:	fb00 3302 	mla	r3, r0, r2, r3
    a52c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    a530:	d304      	bcc.n	a53c <delay+0x84>
				if (ms == 0) return;
    a532:	3c01      	subs	r4, #1
    a534:	d0d2      	beq.n	a4dc <delay+0x24>
				start += 1000;
    a536:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    a53a:	e7e1      	b.n	a500 <delay+0x48>
			yield();
    a53c:	f001 fea6 	bl	c28c <yield>
			while ((micros() - start) >= 1000) {
    a540:	e7de      	b.n	a500 <delay+0x48>
    a542:	bf00      	nop
    a544:	1fffd3c0 	.word	0x1fffd3c0
    a548:	000176ff 	.word	0x000176ff
    a54c:	aaaaaaab 	.word	0xaaaaaaab

0000a550 <serial2_begin>:
#define GPIO_BITBAND_PTR(reg, bit) ((uint32_t *)GPIO_BITBAND_ADDR((reg), (bit)))
#define C3_TXDIR_BIT 5

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a550:	4a2a      	ldr	r2, [pc, #168]	; (a5fc <serial2_begin+0xac>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    a552:	492b      	ldr	r1, [pc, #172]	; (a600 <serial2_begin+0xb0>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a554:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    a556:	b470      	push	{r4, r5, r6}
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a558:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	rx_buffer_head = 0;
    a55c:	4d29      	ldr	r5, [pc, #164]	; (a604 <serial2_begin+0xb4>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a55e:	6353      	str	r3, [r2, #52]	; 0x34
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	switch (rx_pin_num) {
    a560:	4e29      	ldr	r6, [pc, #164]	; (a608 <serial2_begin+0xb8>)
	tx_buffer_head = 0;
    a562:	4c2a      	ldr	r4, [pc, #168]	; (a60c <serial2_begin+0xbc>)
	switch (rx_pin_num) {
    a564:	7832      	ldrb	r2, [r6, #0]
	rx_buffer_head = 0;
    a566:	2300      	movs	r3, #0
    a568:	702b      	strb	r3, [r5, #0]
	rx_buffer_tail = 0;
    a56a:	700b      	strb	r3, [r1, #0]
	tx_buffer_tail = 0;
    a56c:	4928      	ldr	r1, [pc, #160]	; (a610 <serial2_begin+0xc0>)
	tx_buffer_head = 0;
    a56e:	7023      	strb	r3, [r4, #0]
	tx_buffer_tail = 0;
    a570:	700b      	strb	r3, [r1, #0]
	transmitting = 0;
    a572:	4928      	ldr	r1, [pc, #160]	; (a614 <serial2_begin+0xc4>)
	switch (rx_pin_num) {
    a574:	2a09      	cmp	r2, #9
	transmitting = 0;
    a576:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    a578:	d033      	beq.n	a5e2 <serial2_begin+0x92>
    a57a:	2a1a      	cmp	r2, #26
    a57c:	d103      	bne.n	a586 <serial2_begin+0x36>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a57e:	4b26      	ldr	r3, [pc, #152]	; (a618 <serial2_begin+0xc8>)
    a580:	f240 3213 	movw	r2, #787	; 0x313
    a584:	605a      	str	r2, [r3, #4]
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    a586:	4b25      	ldr	r3, [pc, #148]	; (a61c <serial2_begin+0xcc>)
    a588:	781b      	ldrb	r3, [r3, #0]
    a58a:	2b0a      	cmp	r3, #10
    a58c:	d031      	beq.n	a5f2 <serial2_begin+0xa2>
    a58e:	2b1f      	cmp	r3, #31
    a590:	d103      	bne.n	a59a <serial2_begin+0x4a>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    a592:	4b21      	ldr	r3, [pc, #132]	; (a618 <serial2_begin+0xc8>)
    a594:	f44f 7251 	mov.w	r2, #836	; 0x344
    a598:	601a      	str	r2, [r3, #0]
#elif defined(KINETISL)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
#endif
#if defined(HAS_KINETISK_UART1)
	if (divisor < 32) divisor = 32;
    a59a:	2820      	cmp	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    a59c:	4b20      	ldr	r3, [pc, #128]	; (a620 <serial2_begin+0xd0>)
	UART1_BDH = (divisor >> 8) & 0x1F;
	UART1_BDL = divisor & 0xFF;
	UART1_C1 = 0;
#endif
	UART1_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a59e:	4c21      	ldr	r4, [pc, #132]	; (a624 <serial2_begin+0xd4>)
    a5a0:	bf38      	it	cc
    a5a2:	2020      	movcc	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    a5a4:	f3c0 3c44 	ubfx	ip, r0, #13, #5
    a5a8:	f883 c000 	strb.w	ip, [r3]
	UART1_BDL = (divisor >> 5) & 0xFF;
    a5ac:	f3c0 1c47 	ubfx	ip, r0, #5, #8
	UART1_C4 = divisor & 0x1F;
    a5b0:	f000 001f 	and.w	r0, r0, #31
	UART1_BDL = (divisor >> 5) & 0xFF;
    a5b4:	f883 c001 	strb.w	ip, [r3, #1]
	UART1_C1 = UART_C1_ILT;
    a5b8:	2204      	movs	r2, #4
	UART1_C4 = divisor & 0x1F;
    a5ba:	7298      	strb	r0, [r3, #10]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    a5bc:	2002      	movs	r0, #2
	UART1_C1 = UART_C1_ILT;
    a5be:	709a      	strb	r2, [r3, #2]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    a5c0:	74d8      	strb	r0, [r3, #19]
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    a5c2:	2088      	movs	r0, #136	; 0x88
	UART1_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    a5c4:	755a      	strb	r2, [r3, #21]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a5c6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    a5ca:	7418      	strb	r0, [r3, #16]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a5cc:	2240      	movs	r2, #64	; 0x40
	UART1_C2 = C2_TX_INACTIVE;
    a5ce:	203c      	movs	r0, #60	; 0x3c
    a5d0:	70d8      	strb	r0, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a5d2:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a5d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
    a5da:	bc70      	pop	{r4, r5, r6}
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a5dc:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
}
    a5e0:	4770      	bx	lr
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a5e2:	4b11      	ldr	r3, [pc, #68]	; (a628 <serial2_begin+0xd8>)
    a5e4:	f240 3213 	movw	r2, #787	; 0x313
    a5e8:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num) {
    a5ea:	4b0c      	ldr	r3, [pc, #48]	; (a61c <serial2_begin+0xcc>)
    a5ec:	781b      	ldrb	r3, [r3, #0]
    a5ee:	2b0a      	cmp	r3, #10
    a5f0:	d1cd      	bne.n	a58e <serial2_begin+0x3e>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    a5f2:	4b0d      	ldr	r3, [pc, #52]	; (a628 <serial2_begin+0xd8>)
    a5f4:	f44f 7251 	mov.w	r2, #836	; 0x344
    a5f8:	611a      	str	r2, [r3, #16]
    a5fa:	e7ce      	b.n	a59a <serial2_begin+0x4a>
    a5fc:	40048000 	.word	0x40048000
    a600:	1fffd410 	.word	0x1fffd410
    a604:	1fffd408 	.word	0x1fffd408
    a608:	1fff89dc 	.word	0x1fff89dc
    a60c:	1fffd444 	.word	0x1fffd444
    a610:	1fffd44c 	.word	0x1fffd44c
    a614:	1fffd418 	.word	0x1fffd418
    a618:	4004d000 	.word	0x4004d000
    a61c:	1fff89e4 	.word	0x1fff89e4
    a620:	4006b000 	.word	0x4006b000
    a624:	e000e400 	.word	0xe000e400
    a628:	4004b000 	.word	0x4004b000

0000a62c <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    a62c:	4b21      	ldr	r3, [pc, #132]	; (a6b4 <serial2_format+0x88>)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
    a62e:	4921      	ldr	r1, [pc, #132]	; (a6b4 <serial2_format+0x88>)
	c = UART1_C1;
    a630:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    a632:	f000 0203 	and.w	r2, r0, #3
    a636:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    a63a:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    a63c:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a63e:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    a642:	bf48      	it	mi
    a644:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a648:	2a04      	cmp	r2, #4
	UART1_C1 = c;
    a64a:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a64c:	d103      	bne.n	a656 <serial2_format+0x2a>
    a64e:	798b      	ldrb	r3, [r1, #6]
    a650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a654:	718b      	strb	r3, [r1, #6]
	c = UART1_S2 & ~0x10;
    a656:	4b17      	ldr	r3, [pc, #92]	; (a6b4 <serial2_format+0x88>)
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
    a658:	4a16      	ldr	r2, [pc, #88]	; (a6b4 <serial2_format+0x88>)
	c = UART1_S2 & ~0x10;
    a65a:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    a65c:	06c1      	lsls	r1, r0, #27
	c = UART1_S2 & ~0x10;
    a65e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    a662:	bf48      	it	mi
    a664:	f043 0310 	orrmi.w	r3, r3, #16
	UART1_S2 = c;
    a668:	7153      	strb	r3, [r2, #5]
	c = UART1_C3 & ~0x10;
    a66a:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    a66c:	0682      	lsls	r2, r0, #26
	c = UART1_C3 & ~0x10;
    a66e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART1_C3 = c;
    a672:	4a10      	ldr	r2, [pc, #64]	; (a6b4 <serial2_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    a674:	bf48      	it	mi
    a676:	f043 0310 	orrmi.w	r3, r3, #16
		UART1_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
		UART1_BDL = bdl;		// Says BDH not acted on until BDL is written
	}
#endif
	// process request for half duplex.
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    a67a:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART1_C3 = c;
    a67e:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    a680:	d010      	beq.n	a6a4 <serial2_format+0x78>
		c = UART1_C1;
    a682:	7893      	ldrb	r3, [r2, #2]
		#if defined(KINETISL)
		//CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
		half_duplex_mode = 1;
		#else
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a684:	490c      	ldr	r1, [pc, #48]	; (a6b8 <serial2_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    a686:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART1_C1 = c;
    a68a:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a68c:	7809      	ldrb	r1, [r1, #0]
    a68e:	4b0b      	ldr	r3, [pc, #44]	; (a6bc <serial2_format+0x90>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a690:	4a0b      	ldr	r2, [pc, #44]	; (a6c0 <serial2_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a692:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    a696:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a69a:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a69c:	4909      	ldr	r1, [pc, #36]	; (a6c4 <serial2_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    a69e:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a6a0:	6011      	str	r1, [r2, #0]
    a6a2:	4770      	bx	lr

	} else {
		#if defined(KINETISL)
		half_duplex_mode = 0;
		#else
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    a6a4:	4b06      	ldr	r3, [pc, #24]	; (a6c0 <serial2_format+0x94>)
    a6a6:	4a07      	ldr	r2, [pc, #28]	; (a6c4 <serial2_format+0x98>)
    a6a8:	6819      	ldr	r1, [r3, #0]
    a6aa:	4291      	cmp	r1, r2
    a6ac:	bf08      	it	eq
    a6ae:	6018      	streq	r0, [r3, #0]
		#endif
	}
}
    a6b0:	4770      	bx	lr
    a6b2:	bf00      	nop
    a6b4:	4006b000 	.word	0x4006b000
    a6b8:	1fff89e4 	.word	0x1fff89e4
    a6bc:	000153d8 	.word	0x000153d8
    a6c0:	1fffd414 	.word	0x1fffd414
    a6c4:	42d600d4 	.word	0x42d600d4

0000a6c8 <serial2_end>:

void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    a6c8:	4b29      	ldr	r3, [pc, #164]	; (a770 <serial2_end+0xa8>)
    a6ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a6cc:	051b      	lsls	r3, r3, #20
    a6ce:	d54d      	bpl.n	a76c <serial2_end+0xa4>
{
    a6d0:	b510      	push	{r4, lr}
	while (transmitting) yield();  // wait for buffered data to send
    a6d2:	4c28      	ldr	r4, [pc, #160]	; (a774 <serial2_end+0xac>)
    a6d4:	7823      	ldrb	r3, [r4, #0]
    a6d6:	b123      	cbz	r3, a6e2 <serial2_end+0x1a>
    a6d8:	f001 fdd8 	bl	c28c <yield>
    a6dc:	7823      	ldrb	r3, [r4, #0]
    a6de:	2b00      	cmp	r3, #0
    a6e0:	d1fa      	bne.n	a6d8 <serial2_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    a6e2:	4a25      	ldr	r2, [pc, #148]	; (a778 <serial2_end+0xb0>)
#if defined(KINETISK)
	switch (rx_pin_num) {
    a6e4:	4b25      	ldr	r3, [pc, #148]	; (a77c <serial2_end+0xb4>)
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    a6e6:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    a6ea:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	UART1_C2 = 0;
    a6ee:	2100      	movs	r1, #0
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    a6f0:	f8c0 4184 	str.w	r4, [r0, #388]	; 0x184
	UART1_C2 = 0;
    a6f4:	70d1      	strb	r1, [r2, #3]
	switch (rx_pin_num) {
    a6f6:	781b      	ldrb	r3, [r3, #0]
    a6f8:	2b09      	cmp	r3, #9
    a6fa:	d02c      	beq.n	a756 <serial2_end+0x8e>
    a6fc:	2b1a      	cmp	r3, #26
    a6fe:	d01b      	beq.n	a738 <serial2_end+0x70>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
		#endif
	}
	switch (tx_pin_num & 127) {
    a700:	4b1f      	ldr	r3, [pc, #124]	; (a780 <serial2_end+0xb8>)
    a702:	781b      	ldrb	r3, [r3, #0]
    a704:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a708:	2b0a      	cmp	r3, #10
    a70a:	d01f      	beq.n	a74c <serial2_end+0x84>
    a70c:	2b1f      	cmp	r3, #31
    a70e:	d00e      	beq.n	a72e <serial2_end+0x66>
#endif
	UART1_S1;
	UART1_D; // clear leftover error status
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    a710:	4b1c      	ldr	r3, [pc, #112]	; (a784 <serial2_end+0xbc>)
	UART1_S1;
    a712:	4a19      	ldr	r2, [pc, #100]	; (a778 <serial2_end+0xb0>)
	rx_buffer_head = 0;
    a714:	4c1c      	ldr	r4, [pc, #112]	; (a788 <serial2_end+0xc0>)
	rx_buffer_tail = 0;
    a716:	481d      	ldr	r0, [pc, #116]	; (a78c <serial2_end+0xc4>)
	if (rts_pin) rts_deassert();
    a718:	6819      	ldr	r1, [r3, #0]
	UART1_S1;
    a71a:	f892 c004 	ldrb.w	ip, [r2, #4]
	UART1_D; // clear leftover error status
    a71e:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    a720:	2300      	movs	r3, #0
    a722:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    a724:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    a726:	b109      	cbz	r1, a72c <serial2_end+0x64>
    a728:	2301      	movs	r3, #1
    a72a:	700b      	strb	r3, [r1, #0]
}
    a72c:	bd10      	pop	{r4, pc}
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE0
    a72e:	4b18      	ldr	r3, [pc, #96]	; (a790 <serial2_end+0xc8>)
    a730:	f240 1203 	movw	r2, #259	; 0x103
    a734:	601a      	str	r2, [r3, #0]
    a736:	e7eb      	b.n	a710 <serial2_end+0x48>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
    a738:	4b15      	ldr	r3, [pc, #84]	; (a790 <serial2_end+0xc8>)
    a73a:	f240 1203 	movw	r2, #259	; 0x103
    a73e:	605a      	str	r2, [r3, #4]
	switch (tx_pin_num & 127) {
    a740:	4b0f      	ldr	r3, [pc, #60]	; (a780 <serial2_end+0xb8>)
    a742:	781b      	ldrb	r3, [r3, #0]
    a744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a748:	2b0a      	cmp	r3, #10
    a74a:	d1df      	bne.n	a70c <serial2_end+0x44>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    a74c:	4b11      	ldr	r3, [pc, #68]	; (a794 <serial2_end+0xcc>)
    a74e:	f240 1203 	movw	r2, #259	; 0x103
    a752:	611a      	str	r2, [r3, #16]
    a754:	e7dc      	b.n	a710 <serial2_end+0x48>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    a756:	4b0f      	ldr	r3, [pc, #60]	; (a794 <serial2_end+0xcc>)
    a758:	f240 1203 	movw	r2, #259	; 0x103
    a75c:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num & 127) {
    a75e:	4b08      	ldr	r3, [pc, #32]	; (a780 <serial2_end+0xb8>)
    a760:	781b      	ldrb	r3, [r3, #0]
    a762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a766:	2b0a      	cmp	r3, #10
    a768:	d1d0      	bne.n	a70c <serial2_end+0x44>
    a76a:	e7ef      	b.n	a74c <serial2_end+0x84>
    a76c:	4770      	bx	lr
    a76e:	bf00      	nop
    a770:	40048000 	.word	0x40048000
    a774:	1fffd418 	.word	0x1fffd418
    a778:	4006b000 	.word	0x4006b000
    a77c:	1fff89dc 	.word	0x1fff89dc
    a780:	1fff89e4 	.word	0x1fff89e4
    a784:	1fffd3c4 	.word	0x1fffd3c4
    a788:	1fffd408 	.word	0x1fffd408
    a78c:	1fffd410 	.word	0x1fffd410
    a790:	4004d000 	.word	0x4004d000
    a794:	4004b000 	.word	0x4004b000

0000a798 <serial2_set_transmit_pin>:

void serial2_set_transmit_pin(uint8_t pin)
{
	while (transmitting) ;
    a798:	4a0a      	ldr	r2, [pc, #40]	; (a7c4 <serial2_set_transmit_pin+0x2c>)
{
    a79a:	b538      	push	{r3, r4, r5, lr}
    a79c:	4605      	mov	r5, r0
	while (transmitting) ;
    a79e:	7813      	ldrb	r3, [r2, #0]
    a7a0:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    a7a4:	2b00      	cmp	r3, #0
    a7a6:	d1fa      	bne.n	a79e <serial2_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    a7a8:	2101      	movs	r1, #1
    a7aa:	4628      	mov	r0, r5
    a7ac:	f7ff fe28 	bl	a400 <pinMode>
	digitalWrite(pin, LOW);
    a7b0:	4621      	mov	r1, r4
    a7b2:	4628      	mov	r0, r5
    a7b4:	f7ff fdf0 	bl	a398 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    a7b8:	4a03      	ldr	r2, [pc, #12]	; (a7c8 <serial2_set_transmit_pin+0x30>)
    a7ba:	4b04      	ldr	r3, [pc, #16]	; (a7cc <serial2_set_transmit_pin+0x34>)
    a7bc:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    a7c0:	601a      	str	r2, [r3, #0]
	#if defined(KINETISL)
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}
    a7c2:	bd38      	pop	{r3, r4, r5, pc}
    a7c4:	1fffd418 	.word	0x1fffd418
    a7c8:	000153d8 	.word	0x000153d8
    a7cc:	1fffd414 	.word	0x1fffd414

0000a7d0 <serial2_set_tx>:
void serial2_set_tx(uint8_t pin, uint8_t opendrain)
{
	#if defined(KINETISK)
	uint32_t cfg;

	if (opendrain) pin |= 128;
    a7d0:	b109      	cbz	r1, a7d6 <serial2_set_tx+0x6>
    a7d2:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    a7d6:	4a19      	ldr	r2, [pc, #100]	; (a83c <serial2_set_tx+0x6c>)
    a7d8:	7813      	ldrb	r3, [r2, #0]
    a7da:	4283      	cmp	r3, r0
    a7dc:	d017      	beq.n	a80e <serial2_set_tx+0x3e>
{
    a7de:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    a7e0:	4c17      	ldr	r4, [pc, #92]	; (a840 <serial2_set_tx+0x70>)
    a7e2:	6b64      	ldr	r4, [r4, #52]	; 0x34
    a7e4:	0524      	lsls	r4, r4, #20
    a7e6:	d50f      	bpl.n	a808 <serial2_set_tx+0x38>
		switch (tx_pin_num & 127) {
    a7e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a7ec:	2b0a      	cmp	r3, #10
    a7ee:	d021      	beq.n	a834 <serial2_set_tx+0x64>
    a7f0:	2b1f      	cmp	r3, #31
    a7f2:	d014      	beq.n	a81e <serial2_set_tx+0x4e>
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    a7f4:	2900      	cmp	r1, #0
    a7f6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    a7fa:	bf14      	ite	ne
    a7fc:	2160      	movne	r1, #96	; 0x60
    a7fe:	2144      	moveq	r1, #68	; 0x44
		}
		switch (pin & 127) {
    a800:	2b0a      	cmp	r3, #10
    a802:	d010      	beq.n	a826 <serial2_set_tx+0x56>
    a804:	2b1f      	cmp	r3, #31
    a806:	d003      	beq.n	a810 <serial2_set_tx+0x40>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	tx_pin_num = pin;
    a808:	7010      	strb	r0, [r2, #0]
	#endif
}
    a80a:	bc10      	pop	{r4}
    a80c:	4770      	bx	lr
    a80e:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = cfg | PORT_PCR_MUX(3); break;
    a810:	4b0c      	ldr	r3, [pc, #48]	; (a844 <serial2_set_tx+0x74>)
    a812:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    a816:	6019      	str	r1, [r3, #0]
	tx_pin_num = pin;
    a818:	7010      	strb	r0, [r2, #0]
}
    a81a:	bc10      	pop	{r4}
    a81c:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = 0; break; // PTE0
    a81e:	4b09      	ldr	r3, [pc, #36]	; (a844 <serial2_set_tx+0x74>)
    a820:	2400      	movs	r4, #0
    a822:	601c      	str	r4, [r3, #0]
    a824:	e7e6      	b.n	a7f4 <serial2_set_tx+0x24>
			case 10: CORE_PIN10_CONFIG = cfg | PORT_PCR_MUX(3); break;
    a826:	4b08      	ldr	r3, [pc, #32]	; (a848 <serial2_set_tx+0x78>)
    a828:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    a82c:	6119      	str	r1, [r3, #16]
	tx_pin_num = pin;
    a82e:	7010      	strb	r0, [r2, #0]
}
    a830:	bc10      	pop	{r4}
    a832:	4770      	bx	lr
			case 10: CORE_PIN10_CONFIG = 0; break; // PTC4
    a834:	4b04      	ldr	r3, [pc, #16]	; (a848 <serial2_set_tx+0x78>)
    a836:	2400      	movs	r4, #0
    a838:	611c      	str	r4, [r3, #16]
    a83a:	e7db      	b.n	a7f4 <serial2_set_tx+0x24>
    a83c:	1fff89e4 	.word	0x1fff89e4
    a840:	40048000 	.word	0x40048000
    a844:	4004d000 	.word	0x4004d000
    a848:	4004b000 	.word	0x4004b000

0000a84c <serial2_set_rx>:

void serial2_set_rx(uint8_t pin)
{
	#if defined(KINETISK)
	if (pin == rx_pin_num) return;
    a84c:	4b12      	ldr	r3, [pc, #72]	; (a898 <serial2_set_rx+0x4c>)
    a84e:	781a      	ldrb	r2, [r3, #0]
    a850:	4282      	cmp	r2, r0
    a852:	d00c      	beq.n	a86e <serial2_set_rx+0x22>
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    a854:	4911      	ldr	r1, [pc, #68]	; (a89c <serial2_set_rx+0x50>)
    a856:	6b49      	ldr	r1, [r1, #52]	; 0x34
    a858:	0509      	lsls	r1, r1, #20
    a85a:	d507      	bpl.n	a86c <serial2_set_rx+0x20>
		switch (rx_pin_num) {
    a85c:	2a09      	cmp	r2, #9
    a85e:	d016      	beq.n	a88e <serial2_set_rx+0x42>
    a860:	2a1a      	cmp	r2, #26
    a862:	d00a      	beq.n	a87a <serial2_set_rx+0x2e>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
			#endif
		}
		switch (pin) {
    a864:	2809      	cmp	r0, #9
    a866:	d00d      	beq.n	a884 <serial2_set_rx+0x38>
    a868:	281a      	cmp	r0, #26
    a86a:	d001      	beq.n	a870 <serial2_set_rx+0x24>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	rx_pin_num = pin;
    a86c:	7018      	strb	r0, [r3, #0]
	#endif
}
    a86e:	4770      	bx	lr
			case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a870:	4a0b      	ldr	r2, [pc, #44]	; (a8a0 <serial2_set_rx+0x54>)
    a872:	f240 3113 	movw	r1, #787	; 0x313
    a876:	6051      	str	r1, [r2, #4]
    a878:	e7f8      	b.n	a86c <serial2_set_rx+0x20>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    a87a:	4a09      	ldr	r2, [pc, #36]	; (a8a0 <serial2_set_rx+0x54>)
    a87c:	2100      	movs	r1, #0
		switch (pin) {
    a87e:	2809      	cmp	r0, #9
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    a880:	6051      	str	r1, [r2, #4]
		switch (pin) {
    a882:	d1f1      	bne.n	a868 <serial2_set_rx+0x1c>
			case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a884:	4a07      	ldr	r2, [pc, #28]	; (a8a4 <serial2_set_rx+0x58>)
    a886:	f240 3113 	movw	r1, #787	; 0x313
    a88a:	60d1      	str	r1, [r2, #12]
    a88c:	e7ee      	b.n	a86c <serial2_set_rx+0x20>
			case 9: CORE_PIN9_CONFIG = 0; break; // PTC3
    a88e:	4a05      	ldr	r2, [pc, #20]	; (a8a4 <serial2_set_rx+0x58>)
    a890:	2100      	movs	r1, #0
    a892:	60d1      	str	r1, [r2, #12]
    a894:	e7e6      	b.n	a864 <serial2_set_rx+0x18>
    a896:	bf00      	nop
    a898:	1fff89dc 	.word	0x1fff89dc
    a89c:	40048000 	.word	0x40048000
    a8a0:	4004d000 	.word	0x4004d000
    a8a4:	4004b000 	.word	0x4004b000

0000a8a8 <serial2_set_rts>:

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    a8a8:	4b0d      	ldr	r3, [pc, #52]	; (a8e0 <serial2_set_rts+0x38>)
    a8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a8ac:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    a8b0:	d013      	beq.n	a8da <serial2_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    a8b2:	2821      	cmp	r0, #33	; 0x21
    a8b4:	d903      	bls.n	a8be <serial2_set_rts+0x16>
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    a8b6:	4b0b      	ldr	r3, [pc, #44]	; (a8e4 <serial2_set_rts+0x3c>)
    a8b8:	2000      	movs	r0, #0
    a8ba:	6018      	str	r0, [r3, #0]
		return 0;
    a8bc:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    a8be:	4b0a      	ldr	r3, [pc, #40]	; (a8e8 <serial2_set_rts+0x40>)
{
    a8c0:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    a8c2:	4c08      	ldr	r4, [pc, #32]	; (a8e4 <serial2_set_rts+0x3c>)
    a8c4:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    a8c8:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    a8ca:	2101      	movs	r1, #1
    a8cc:	f7ff fd98 	bl	a400 <pinMode>
		rts_assert();
    a8d0:	6823      	ldr	r3, [r4, #0]
    a8d2:	2200      	movs	r2, #0
    a8d4:	701a      	strb	r2, [r3, #0]
		UART1_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    a8d6:	2001      	movs	r0, #1
}
    a8d8:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    a8da:	4618      	mov	r0, r3
}
    a8dc:	4770      	bx	lr
    a8de:	bf00      	nop
    a8e0:	40048000 	.word	0x40048000
    a8e4:	1fffd3c4 	.word	0x1fffd3c4
    a8e8:	000153d8 	.word	0x000153d8

0000a8ec <serial2_set_cts>:

int serial2_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    a8ec:	4b0c      	ldr	r3, [pc, #48]	; (a920 <serial2_set_cts+0x34>)
    a8ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a8f0:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    a8f4:	d012      	beq.n	a91c <serial2_set_cts+0x30>
	if (pin == 23) {
    a8f6:	2817      	cmp	r0, #23
    a8f8:	d109      	bne.n	a90e <serial2_set_cts+0x22>
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    a8fa:	4b0a      	ldr	r3, [pc, #40]	; (a924 <serial2_set_cts+0x38>)
	#endif
	} else {
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_TXCTSE;
    a8fc:	4a0a      	ldr	r2, [pc, #40]	; (a928 <serial2_set_cts+0x3c>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    a8fe:	f240 3102 	movw	r1, #770	; 0x302
    a902:	6099      	str	r1, [r3, #8]
	UART1_MODEM |= UART_MODEM_TXCTSE;
    a904:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    a906:	2001      	movs	r0, #1
	UART1_MODEM |= UART_MODEM_TXCTSE;
    a908:	4303      	orrs	r3, r0
    a90a:	7353      	strb	r3, [r2, #13]
	return 1;
    a90c:	4770      	bx	lr
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    a90e:	4a06      	ldr	r2, [pc, #24]	; (a928 <serial2_set_cts+0x3c>)
    a910:	7b53      	ldrb	r3, [r2, #13]
    a912:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    a916:	2000      	movs	r0, #0
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    a918:	7353      	strb	r3, [r2, #13]
		return 0;
    a91a:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    a91c:	4618      	mov	r0, r3
#else
	return 0;
#endif
}
    a91e:	4770      	bx	lr
    a920:	40048000 	.word	0x40048000
    a924:	4004b000 	.word	0x4004b000
    a928:	4006b000 	.word	0x4006b000

0000a92c <serial2_putchar>:

void serial2_putchar(uint32_t c)
{
    a92c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    a930:	4b33      	ldr	r3, [pc, #204]	; (aa00 <serial2_putchar+0xd4>)
    a932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a934:	051a      	lsls	r2, r3, #20
    a936:	d53a      	bpl.n	a9ae <serial2_putchar+0x82>
	if (transmit_pin) transmit_assert();
    a938:	4b32      	ldr	r3, [pc, #200]	; (aa04 <serial2_putchar+0xd8>)
    a93a:	681b      	ldr	r3, [r3, #0]
    a93c:	4606      	mov	r6, r0
    a93e:	b10b      	cbz	r3, a944 <serial2_putchar+0x18>
    a940:	2201      	movs	r2, #1
    a942:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART1_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    a944:	f8df 90c0 	ldr.w	r9, [pc, #192]	; aa08 <serial2_putchar+0xdc>
	if (++head >= tx_buffer_total_size_) head = 0;
    a948:	f8df 80c0 	ldr.w	r8, [pc, #192]	; aa0c <serial2_putchar+0xe0>
	head = tx_buffer_head;
    a94c:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    a950:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    a954:	4d2e      	ldr	r5, [pc, #184]	; (aa10 <serial2_putchar+0xe4>)
	if (++head >= tx_buffer_total_size_) head = 0;
    a956:	3401      	adds	r4, #1
    a958:	42a3      	cmp	r3, r4
	while (tx_buffer_tail == head) {
    a95a:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    a95c:	d929      	bls.n	a9b2 <serial2_putchar+0x86>
	while (tx_buffer_tail == head) {
    a95e:	429c      	cmp	r4, r3
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
	}
	transmitting = 1;
	tx_buffer_head = head;
    a960:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    a964:	d114      	bne.n	a990 <serial2_putchar+0x64>
			if ((UART1_S1 & UART_S1_TDRE)) {
    a966:	4f2b      	ldr	r7, [pc, #172]	; (aa14 <serial2_putchar+0xe8>)
					n = tx_buffer[tail];
    a968:	f8df b0ac 	ldr.w	fp, [pc, #172]	; aa18 <serial2_putchar+0xec>
    a96c:	e005      	b.n	a97a <serial2_putchar+0x4e>
			if ((UART1_S1 & UART_S1_TDRE)) {
    a96e:	793b      	ldrb	r3, [r7, #4]
    a970:	061b      	lsls	r3, r3, #24
    a972:	d423      	bmi.n	a9bc <serial2_putchar+0x90>
	while (tx_buffer_tail == head) {
    a974:	782b      	ldrb	r3, [r5, #0]
    a976:	42a3      	cmp	r3, r4
    a978:	d10a      	bne.n	a990 <serial2_putchar+0x64>
		int priority = nvic_execution_priority();
    a97a:	f7ff fa47 	bl	9e0c <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    a97e:	2840      	cmp	r0, #64	; 0x40
    a980:	ddf5      	ble.n	a96e <serial2_putchar+0x42>
		} else if (priority >= 256) {
    a982:	28ff      	cmp	r0, #255	; 0xff
    a984:	ddf6      	ble.n	a974 <serial2_putchar+0x48>
			yield(); // wait
    a986:	f001 fc81 	bl	c28c <yield>
	while (tx_buffer_tail == head) {
    a98a:	782b      	ldrb	r3, [r5, #0]
    a98c:	42a3      	cmp	r3, r4
    a98e:	d0f4      	beq.n	a97a <serial2_putchar+0x4e>
	if (head < SERIAL2_TX_BUFFER_SIZE) {
    a990:	2c27      	cmp	r4, #39	; 0x27
    a992:	d929      	bls.n	a9e8 <serial2_putchar+0xbc>
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
    a994:	4b21      	ldr	r3, [pc, #132]	; (aa1c <serial2_putchar+0xf0>)
    a996:	3c28      	subs	r4, #40	; 0x28
    a998:	681b      	ldr	r3, [r3, #0]
    a99a:	b2f6      	uxtb	r6, r6
    a99c:	551e      	strb	r6, [r3, r4]
	transmitting = 1;
    a99e:	4a20      	ldr	r2, [pc, #128]	; (aa20 <serial2_putchar+0xf4>)
	UART1_C2 = C2_TX_ACTIVE;
    a9a0:	4b1c      	ldr	r3, [pc, #112]	; (aa14 <serial2_putchar+0xe8>)
	transmitting = 1;
    a9a2:	2101      	movs	r1, #1
    a9a4:	7011      	strb	r1, [r2, #0]
	UART1_C2 = C2_TX_ACTIVE;
    a9a6:	22bc      	movs	r2, #188	; 0xbc
	tx_buffer_head = head;
    a9a8:	f889 a000 	strb.w	sl, [r9]
	UART1_C2 = C2_TX_ACTIVE;
    a9ac:	70da      	strb	r2, [r3, #3]
}
    a9ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    a9b2:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    a9b6:	b9a3      	cbnz	r3, a9e2 <serial2_putchar+0xb6>
	if (++head >= tx_buffer_total_size_) head = 0;
    a9b8:	4654      	mov	r4, sl
    a9ba:	e7d4      	b.n	a966 <serial2_putchar+0x3a>
				uint32_t tail = tx_buffer_tail;
    a9bc:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a9be:	f8d8 1000 	ldr.w	r1, [r8]
    a9c2:	1c5a      	adds	r2, r3, #1
    a9c4:	4291      	cmp	r1, r2
				uint32_t tail = tx_buffer_tail;
    a9c6:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a9c8:	d908      	bls.n	a9dc <serial2_putchar+0xb0>
				if (tail < SERIAL2_TX_BUFFER_SIZE) {
    a9ca:	2a27      	cmp	r2, #39	; 0x27
    a9cc:	d810      	bhi.n	a9f0 <serial2_putchar+0xc4>
				tx_buffer_tail = tail;
    a9ce:	b2d1      	uxtb	r1, r2
					n = tx_buffer[tail];
    a9d0:	f81b 3002 	ldrb.w	r3, [fp, r2]
    a9d4:	b2db      	uxtb	r3, r3
				UART1_D = n;
    a9d6:	71fb      	strb	r3, [r7, #7]
				tx_buffer_tail = tail;
    a9d8:	7029      	strb	r1, [r5, #0]
    a9da:	e7cb      	b.n	a974 <serial2_putchar+0x48>
    a9dc:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    a9de:	460a      	mov	r2, r1
    a9e0:	e7f6      	b.n	a9d0 <serial2_putchar+0xa4>
	while (tx_buffer_tail == head) {
    a9e2:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    a9e6:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    a9e8:	4b0b      	ldr	r3, [pc, #44]	; (aa18 <serial2_putchar+0xec>)
    a9ea:	b2f6      	uxtb	r6, r6
    a9ec:	551e      	strb	r6, [r3, r4]
    a9ee:	e7d6      	b.n	a99e <serial2_putchar+0x72>
				tx_buffer_tail = tail;
    a9f0:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    a9f2:	4a0a      	ldr	r2, [pc, #40]	; (aa1c <serial2_putchar+0xf0>)
    a9f4:	3b27      	subs	r3, #39	; 0x27
    a9f6:	6812      	ldr	r2, [r2, #0]
    a9f8:	5cd3      	ldrb	r3, [r2, r3]
    a9fa:	b2db      	uxtb	r3, r3
    a9fc:	e7eb      	b.n	a9d6 <serial2_putchar+0xaa>
    a9fe:	bf00      	nop
    aa00:	40048000 	.word	0x40048000
    aa04:	1fffd414 	.word	0x1fffd414
    aa08:	1fffd444 	.word	0x1fffd444
    aa0c:	1fff89e0 	.word	0x1fff89e0
    aa10:	1fffd44c 	.word	0x1fffd44c
    aa14:	4006b000 	.word	0x4006b000
    aa18:	1fffd41c 	.word	0x1fffd41c
    aa1c:	1fffd448 	.word	0x1fffd448
    aa20:	1fffd418 	.word	0x1fffd418

0000aa24 <serial2_write>:

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
    aa24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    aa28:	4b39      	ldr	r3, [pc, #228]	; (ab10 <serial2_write+0xec>)
    aa2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    aa2c:	051a      	lsls	r2, r3, #20
    aa2e:	d53c      	bpl.n	aaaa <serial2_write+0x86>
	if (transmit_pin) transmit_assert();
    aa30:	4b38      	ldr	r3, [pc, #224]	; (ab14 <serial2_write+0xf0>)
    aa32:	681b      	ldr	r3, [r3, #0]
    aa34:	b10b      	cbz	r3, aa3a <serial2_write+0x16>
    aa36:	2201      	movs	r2, #1
    aa38:	701a      	strb	r2, [r3, #0]
	const uint8_t *end = p + count;
    aa3a:	1847      	adds	r7, r0, r1
	while (p < end) {
    aa3c:	42b8      	cmp	r0, r7
    aa3e:	d231      	bcs.n	aaa4 <serial2_write+0x80>
    aa40:	4e35      	ldr	r6, [pc, #212]	; (ab18 <serial2_write+0xf4>)
    aa42:	f8df 80d8 	ldr.w	r8, [pc, #216]	; ab1c <serial2_write+0xf8>
    aa46:	4c36      	ldr	r4, [pc, #216]	; (ab20 <serial2_write+0xfc>)
		head = tx_buffer_head;
		if (++head >= tx_buffer_total_size_) head = 0;
		if (tx_buffer_tail == head) {
			UART1_C2 = C2_TX_ACTIVE;
    aa48:	f8df 90d8 	ldr.w	r9, [pc, #216]	; ab24 <serial2_write+0x100>
    aa4c:	f100 0a01 	add.w	sl, r0, #1
    aa50:	e013      	b.n	aa7a <serial2_write+0x56>
		if (tx_buffer_tail == head) {
    aa52:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    aa56:	b353      	cbz	r3, aaae <serial2_write+0x8a>
    aa58:	f04f 0b00 	mov.w	fp, #0
    aa5c:	465d      	mov	r5, fp
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		if (head < SERIAL2_TX_BUFFER_SIZE) {
			tx_buffer[head] = *p++;
    aa5e:	4a32      	ldr	r2, [pc, #200]	; (ab28 <serial2_write+0x104>)
    aa60:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    aa64:	5553      	strb	r3, [r2, r5]
    aa66:	4652      	mov	r2, sl
		} else {
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
		}
		transmitting = 1;
    aa68:	4930      	ldr	r1, [pc, #192]	; (ab2c <serial2_write+0x108>)
    aa6a:	2301      	movs	r3, #1
	while (p < end) {
    aa6c:	42ba      	cmp	r2, r7
		transmitting = 1;
    aa6e:	700b      	strb	r3, [r1, #0]
	while (p < end) {
    aa70:	f10a 0a01 	add.w	sl, sl, #1
		tx_buffer_head = head;
    aa74:	f886 b000 	strb.w	fp, [r6]
	while (p < end) {
    aa78:	d214      	bcs.n	aaa4 <serial2_write+0x80>
		head = tx_buffer_head;
    aa7a:	7835      	ldrb	r5, [r6, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    aa7c:	f8d8 3000 	ldr.w	r3, [r8]
    aa80:	3501      	adds	r5, #1
    aa82:	42ab      	cmp	r3, r5
		if (tx_buffer_tail == head) {
    aa84:	7823      	ldrb	r3, [r4, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    aa86:	d9e4      	bls.n	aa52 <serial2_write+0x2e>
		if (tx_buffer_tail == head) {
    aa88:	42ab      	cmp	r3, r5
		tx_buffer_head = head;
    aa8a:	fa5f fb85 	uxtb.w	fp, r5
		if (tx_buffer_tail == head) {
    aa8e:	d00f      	beq.n	aab0 <serial2_write+0x8c>
		if (head < SERIAL2_TX_BUFFER_SIZE) {
    aa90:	2d27      	cmp	r5, #39	; 0x27
    aa92:	d9e4      	bls.n	aa5e <serial2_write+0x3a>
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
    aa94:	4b26      	ldr	r3, [pc, #152]	; (ab30 <serial2_write+0x10c>)
    aa96:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    aa9a:	681b      	ldr	r3, [r3, #0]
    aa9c:	3d28      	subs	r5, #40	; 0x28
    aa9e:	555a      	strb	r2, [r3, r5]
    aaa0:	4652      	mov	r2, sl
    aaa2:	e7e1      	b.n	aa68 <serial2_write+0x44>
	}
	UART1_C2 = C2_TX_ACTIVE;
    aaa4:	4b1f      	ldr	r3, [pc, #124]	; (ab24 <serial2_write+0x100>)
    aaa6:	22bc      	movs	r2, #188	; 0xbc
    aaa8:	70da      	strb	r2, [r3, #3]
}
    aaaa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (tx_buffer_tail == head) {
    aaae:	465d      	mov	r5, fp
			UART1_C2 = C2_TX_ACTIVE;
    aab0:	f06f 0343 	mvn.w	r3, #67	; 0x43
    aab4:	f889 3003 	strb.w	r3, [r9, #3]
    aab8:	e006      	b.n	aac8 <serial2_write+0xa4>
					if ((UART1_S1 & UART_S1_TDRE)) {
    aaba:	f899 3004 	ldrb.w	r3, [r9, #4]
    aabe:	061b      	lsls	r3, r3, #24
    aac0:	d40b      	bmi.n	aada <serial2_write+0xb6>
			} while (tx_buffer_tail == head);
    aac2:	7823      	ldrb	r3, [r4, #0]
    aac4:	42ab      	cmp	r3, r5
    aac6:	d1e3      	bne.n	aa90 <serial2_write+0x6c>
				int priority = nvic_execution_priority();
    aac8:	f7ff f9a0 	bl	9e0c <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    aacc:	2840      	cmp	r0, #64	; 0x40
    aace:	ddf4      	ble.n	aaba <serial2_write+0x96>
				} else if (priority >= 256) {
    aad0:	28ff      	cmp	r0, #255	; 0xff
    aad2:	ddf6      	ble.n	aac2 <serial2_write+0x9e>
					yield();
    aad4:	f001 fbda 	bl	c28c <yield>
    aad8:	e7f3      	b.n	aac2 <serial2_write+0x9e>
						uint32_t tail = tx_buffer_tail;
    aada:	7823      	ldrb	r3, [r4, #0]
						if (++tail >= tx_buffer_total_size_) tail = 0;
    aadc:	f8d8 1000 	ldr.w	r1, [r8]
    aae0:	1c5a      	adds	r2, r3, #1
    aae2:	4291      	cmp	r1, r2
						uint32_t tail = tx_buffer_tail;
    aae4:	b2db      	uxtb	r3, r3
						if (++tail >= tx_buffer_total_size_) tail = 0;
    aae6:	d903      	bls.n	aaf0 <serial2_write+0xcc>
						if (tail < SERIAL2_TX_BUFFER_SIZE) {
    aae8:	2a27      	cmp	r2, #39	; 0x27
    aaea:	d80a      	bhi.n	ab02 <serial2_write+0xde>
						tx_buffer_tail = tail;
    aaec:	b2d1      	uxtb	r1, r2
    aaee:	e001      	b.n	aaf4 <serial2_write+0xd0>
    aaf0:	2100      	movs	r1, #0
						if (++tail >= tx_buffer_total_size_) tail = 0;
    aaf2:	460a      	mov	r2, r1
							n = tx_buffer[tail];
    aaf4:	4b0c      	ldr	r3, [pc, #48]	; (ab28 <serial2_write+0x104>)
    aaf6:	5c9b      	ldrb	r3, [r3, r2]
    aaf8:	b2db      	uxtb	r3, r3
						UART1_D = n;
    aafa:	f889 3007 	strb.w	r3, [r9, #7]
						tx_buffer_tail = tail;
    aafe:	7021      	strb	r1, [r4, #0]
    ab00:	e7df      	b.n	aac2 <serial2_write+0x9e>
    ab02:	b2d1      	uxtb	r1, r2
							n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    ab04:	4a0a      	ldr	r2, [pc, #40]	; (ab30 <serial2_write+0x10c>)
    ab06:	3b27      	subs	r3, #39	; 0x27
    ab08:	6812      	ldr	r2, [r2, #0]
    ab0a:	5cd3      	ldrb	r3, [r2, r3]
    ab0c:	b2db      	uxtb	r3, r3
    ab0e:	e7f4      	b.n	aafa <serial2_write+0xd6>
    ab10:	40048000 	.word	0x40048000
    ab14:	1fffd414 	.word	0x1fffd414
    ab18:	1fffd444 	.word	0x1fffd444
    ab1c:	1fff89e0 	.word	0x1fff89e0
    ab20:	1fffd44c 	.word	0x1fffd44c
    ab24:	4006b000 	.word	0x4006b000
    ab28:	1fffd41c 	.word	0x1fffd41c
    ab2c:	1fffd418 	.word	0x1fffd418
    ab30:	1fffd448 	.word	0x1fffd448

0000ab34 <serial2_flush>:
	while (count-- > 0) serial2_putchar(*p++);
}
#endif

void serial2_flush(void)
{
    ab34:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    ab36:	4c04      	ldr	r4, [pc, #16]	; (ab48 <serial2_flush+0x14>)
    ab38:	7823      	ldrb	r3, [r4, #0]
    ab3a:	b123      	cbz	r3, ab46 <serial2_flush+0x12>
    ab3c:	f001 fba6 	bl	c28c <yield>
    ab40:	7823      	ldrb	r3, [r4, #0]
    ab42:	2b00      	cmp	r3, #0
    ab44:	d1fa      	bne.n	ab3c <serial2_flush+0x8>
}
    ab46:	bd10      	pop	{r4, pc}
    ab48:	1fffd418 	.word	0x1fffd418

0000ab4c <serial2_write_buffer_free>:

int serial2_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    ab4c:	4a08      	ldr	r2, [pc, #32]	; (ab70 <serial2_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    ab4e:	4b09      	ldr	r3, [pc, #36]	; (ab74 <serial2_write_buffer_free+0x28>)
	head = tx_buffer_head;
    ab50:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    ab52:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ab54:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    ab56:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    ab58:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ab5a:	d202      	bcs.n	ab62 <serial2_write_buffer_free+0x16>
	return tail - head - 1;
    ab5c:	3b01      	subs	r3, #1
    ab5e:	1a18      	subs	r0, r3, r0
}
    ab60:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ab62:	4a05      	ldr	r2, [pc, #20]	; (ab78 <serial2_write_buffer_free+0x2c>)
    ab64:	6812      	ldr	r2, [r2, #0]
    ab66:	3a01      	subs	r2, #1
    ab68:	4413      	add	r3, r2
    ab6a:	1a18      	subs	r0, r3, r0
    ab6c:	4770      	bx	lr
    ab6e:	bf00      	nop
    ab70:	1fffd444 	.word	0x1fffd444
    ab74:	1fffd44c 	.word	0x1fffd44c
    ab78:	1fff89e0 	.word	0x1fff89e0

0000ab7c <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ab7c:	4a06      	ldr	r2, [pc, #24]	; (ab98 <serial2_available+0x1c>)
	tail = rx_buffer_tail;
    ab7e:	4b07      	ldr	r3, [pc, #28]	; (ab9c <serial2_available+0x20>)
	head = rx_buffer_head;
    ab80:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    ab82:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    ab84:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    ab86:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    ab88:	bf3c      	itt	cc
    ab8a:	4a05      	ldrcc	r2, [pc, #20]	; (aba0 <serial2_available+0x24>)
    ab8c:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    ab8e:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    ab90:	bf38      	it	cc
    ab92:	189b      	addcc	r3, r3, r2
    ab94:	1a18      	subs	r0, r3, r0
}
    ab96:	4770      	bx	lr
    ab98:	1fffd408 	.word	0x1fffd408
    ab9c:	1fffd410 	.word	0x1fffd410
    aba0:	1fff89d8 	.word	0x1fff89d8

0000aba4 <serial2_getchar>:
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    aba4:	4b1b      	ldr	r3, [pc, #108]	; (ac14 <serial2_getchar+0x70>)
	tail = rx_buffer_tail;
    aba6:	491c      	ldr	r1, [pc, #112]	; (ac18 <serial2_getchar+0x74>)
	head = rx_buffer_head;
    aba8:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    abaa:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    abac:	429a      	cmp	r2, r3
    abae:	d02e      	beq.n	ac0e <serial2_getchar+0x6a>
{
    abb0:	b510      	push	{r4, lr}
    abb2:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    abb6:	4a19      	ldr	r2, [pc, #100]	; (ac1c <serial2_getchar+0x78>)
    abb8:	b2d8      	uxtb	r0, r3
    abba:	6812      	ldr	r2, [r2, #0]
    abbc:	1c43      	adds	r3, r0, #1
    abbe:	429a      	cmp	r2, r3
    abc0:	d919      	bls.n	abf6 <serial2_getchar+0x52>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    abc2:	2b3f      	cmp	r3, #63	; 0x3f
    abc4:	d81b      	bhi.n	abfe <serial2_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    abc6:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    abca:	4815      	ldr	r0, [pc, #84]	; (ac20 <serial2_getchar+0x7c>)
    abcc:	5cc0      	ldrb	r0, [r0, r3]
    abce:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    abd0:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    abd4:	4913      	ldr	r1, [pc, #76]	; (ac24 <serial2_getchar+0x80>)
    abd6:	6809      	ldr	r1, [r1, #0]
    abd8:	b161      	cbz	r1, abf4 <serial2_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    abda:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    abdc:	bf3c      	itt	cc
    abde:	4472      	addcc	r2, lr
    abe0:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    abe2:	4a11      	ldr	r2, [pc, #68]	; (ac28 <serial2_getchar+0x84>)
    abe4:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    abe6:	bf28      	it	cs
    abe8:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    abec:	429a      	cmp	r2, r3
    abee:	d301      	bcc.n	abf4 <serial2_getchar+0x50>
    abf0:	2300      	movs	r3, #0
    abf2:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    abf4:	bd10      	pop	{r4, pc}
    abf6:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    abfa:	4663      	mov	r3, ip
    abfc:	e7e5      	b.n	abca <serial2_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    abfe:	4c0b      	ldr	r4, [pc, #44]	; (ac2c <serial2_getchar+0x88>)
    ac00:	383f      	subs	r0, #63	; 0x3f
    ac02:	6824      	ldr	r4, [r4, #0]
    ac04:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    ac06:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    ac0a:	b2c0      	uxtb	r0, r0
    ac0c:	e7e0      	b.n	abd0 <serial2_getchar+0x2c>
	if (head == tail) return -1;
    ac0e:	f04f 30ff 	mov.w	r0, #4294967295
}
    ac12:	4770      	bx	lr
    ac14:	1fffd408 	.word	0x1fffd408
    ac18:	1fffd410 	.word	0x1fffd410
    ac1c:	1fff89d8 	.word	0x1fff89d8
    ac20:	1fffd3c8 	.word	0x1fffd3c8
    ac24:	1fffd3c4 	.word	0x1fffd3c4
    ac28:	1fff89d4 	.word	0x1fff89d4
    ac2c:	1fffd40c 	.word	0x1fffd40c

0000ac30 <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ac30:	4a0d      	ldr	r2, [pc, #52]	; (ac68 <serial2_peek+0x38>)
	tail = rx_buffer_tail;
    ac32:	4b0e      	ldr	r3, [pc, #56]	; (ac6c <serial2_peek+0x3c>)
	head = rx_buffer_head;
    ac34:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    ac36:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    ac38:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    ac3a:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    ac3c:	d011      	beq.n	ac62 <serial2_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    ac3e:	490c      	ldr	r1, [pc, #48]	; (ac70 <serial2_peek+0x40>)
    ac40:	6809      	ldr	r1, [r1, #0]
    ac42:	1c53      	adds	r3, r2, #1
    ac44:	4299      	cmp	r1, r3
    ac46:	d907      	bls.n	ac58 <serial2_peek+0x28>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    ac48:	2b3f      	cmp	r3, #63	; 0x3f
    ac4a:	d906      	bls.n	ac5a <serial2_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    ac4c:	4b09      	ldr	r3, [pc, #36]	; (ac74 <serial2_peek+0x44>)
    ac4e:	3a3f      	subs	r2, #63	; 0x3f
    ac50:	681b      	ldr	r3, [r3, #0]
    ac52:	5c98      	ldrb	r0, [r3, r2]
    ac54:	b2c0      	uxtb	r0, r0
    ac56:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    ac58:	2300      	movs	r3, #0
		return rx_buffer[tail];
    ac5a:	4a07      	ldr	r2, [pc, #28]	; (ac78 <serial2_peek+0x48>)
    ac5c:	5cd0      	ldrb	r0, [r2, r3]
    ac5e:	b2c0      	uxtb	r0, r0
    ac60:	4770      	bx	lr
	if (head == tail) return -1;
    ac62:	f04f 30ff 	mov.w	r0, #4294967295
}
    ac66:	4770      	bx	lr
    ac68:	1fffd408 	.word	0x1fffd408
    ac6c:	1fffd410 	.word	0x1fffd410
    ac70:	1fff89d8 	.word	0x1fff89d8
    ac74:	1fffd40c 	.word	0x1fffd40c
    ac78:	1fffd3c8 	.word	0x1fffd3c8

0000ac7c <serial2_clear>:

void serial2_clear(void)
{
#ifdef HAS_KINETISK_UART1_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    ac7c:	4b0c      	ldr	r3, [pc, #48]	; (acb0 <serial2_clear+0x34>)
    ac7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ac80:	051b      	lsls	r3, r3, #20
    ac82:	d514      	bpl.n	acae <serial2_clear+0x32>
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    ac84:	4b0b      	ldr	r3, [pc, #44]	; (acb4 <serial2_clear+0x38>)
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    ac86:	480c      	ldr	r0, [pc, #48]	; (acb8 <serial2_clear+0x3c>)
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    ac88:	78da      	ldrb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    ac8a:	2140      	movs	r1, #64	; 0x40
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    ac8c:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    ac90:	70da      	strb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    ac92:	7459      	strb	r1, [r3, #17]
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    ac94:	78da      	ldrb	r2, [r3, #3]
	rx_buffer_head = rx_buffer_tail;
    ac96:	4909      	ldr	r1, [pc, #36]	; (acbc <serial2_clear+0x40>)
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    ac98:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    ac9c:	70da      	strb	r2, [r3, #3]
	if (rts_pin) rts_assert();
    ac9e:	4a08      	ldr	r2, [pc, #32]	; (acc0 <serial2_clear+0x44>)
	rx_buffer_head = rx_buffer_tail;
    aca0:	7803      	ldrb	r3, [r0, #0]
	if (rts_pin) rts_assert();
    aca2:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    aca4:	b2db      	uxtb	r3, r3
    aca6:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    aca8:	b10a      	cbz	r2, acae <serial2_clear+0x32>
    acaa:	2300      	movs	r3, #0
    acac:	7013      	strb	r3, [r2, #0]
}
    acae:	4770      	bx	lr
    acb0:	40048000 	.word	0x40048000
    acb4:	4006b000 	.word	0x4006b000
    acb8:	1fffd410 	.word	0x1fffd410
    acbc:	1fffd408 	.word	0x1fffd408
    acc0:	1fffd3c4 	.word	0x1fffd3c4

0000acc4 <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    acc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    acc8:	4c50      	ldr	r4, [pc, #320]	; (ae0c <uart1_status_isr+0x148>)
    acca:	7923      	ldrb	r3, [r4, #4]
    accc:	f013 0f30 	tst.w	r3, #48	; 0x30
    acd0:	d047      	beq.n	ad62 <uart1_status_isr+0x9e>
		__disable_irq();
    acd2:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    acd4:	7da3      	ldrb	r3, [r4, #22]
		if (avail == 0) {
    acd6:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    acda:	2b00      	cmp	r3, #0
    acdc:	d058      	beq.n	ad90 <uart1_status_isr+0xcc>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    acde:	b662      	cpsie	i
			head = rx_buffer_head;
    ace0:	f8df 812c 	ldr.w	r8, [pc, #300]	; ae10 <uart1_status_isr+0x14c>
			tail = rx_buffer_tail;
    ace4:	484b      	ldr	r0, [pc, #300]	; (ae14 <uart1_status_isr+0x150>)
			head = rx_buffer_head;
    ace6:	f898 3000 	ldrb.w	r3, [r8]
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    acea:	4a4b      	ldr	r2, [pc, #300]	; (ae18 <uart1_status_isr+0x154>)
			tail = rx_buffer_tail;
    acec:	7805      	ldrb	r5, [r0, #0]
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    acee:	6816      	ldr	r6, [r2, #0]
				if (newhead != tail) {
					head = newhead;
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
						rx_buffer[head] = n;
    acf0:	4f4a      	ldr	r7, [pc, #296]	; (ae1c <uart1_status_isr+0x158>)
			head = rx_buffer_head;
    acf2:	fa5f fc83 	uxtb.w	ip, r3
					} else {
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    acf6:	4b4a      	ldr	r3, [pc, #296]	; (ae20 <uart1_status_isr+0x15c>)
			tail = rx_buffer_tail;
    acf8:	b2ed      	uxtb	r5, r5
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    acfa:	f8d3 e000 	ldr.w	lr, [r3]
    acfe:	e008      	b.n	ad12 <uart1_status_isr+0x4e>
				if (newhead != tail) {
    ad00:	b11d      	cbz	r5, ad0a <uart1_status_isr+0x46>
    ad02:	f04f 0c00 	mov.w	ip, #0
						rx_buffer[head] = n;
    ad06:	f807 300c 	strb.w	r3, [r7, ip]
					}
				}
			} while (--avail > 0);
    ad0a:	1e4a      	subs	r2, r1, #1
    ad0c:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
    ad10:	d012      	beq.n	ad38 <uart1_status_isr+0x74>
					n = UART1_D;
    ad12:	79e3      	ldrb	r3, [r4, #7]
				newhead = head + 1;
    ad14:	f10c 0201 	add.w	r2, ip, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    ad18:	4296      	cmp	r6, r2
					n = UART1_D;
    ad1a:	b2db      	uxtb	r3, r3
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    ad1c:	d9f0      	bls.n	ad00 <uart1_status_isr+0x3c>
				if (newhead != tail) {
    ad1e:	4295      	cmp	r5, r2
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ad20:	f1ac 003f 	sub.w	r0, ip, #63	; 0x3f
				if (newhead != tail) {
    ad24:	d0f1      	beq.n	ad0a <uart1_status_isr+0x46>
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
    ad26:	2a3f      	cmp	r2, #63	; 0x3f
    ad28:	d96d      	bls.n	ae06 <uart1_status_isr+0x142>
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ad2a:	4694      	mov	ip, r2
			} while (--avail > 0);
    ad2c:	1e4a      	subs	r2, r1, #1
    ad2e:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ad32:	f80e 3000 	strb.w	r3, [lr, r0]
			} while (--avail > 0);
    ad36:	d1ec      	bne.n	ad12 <uart1_status_isr+0x4e>
			rx_buffer_head = head;
    ad38:	fa5f f38c 	uxtb.w	r3, ip
    ad3c:	f888 3000 	strb.w	r3, [r8]
			if (rts_pin) {
    ad40:	4b38      	ldr	r3, [pc, #224]	; (ae24 <uart1_status_isr+0x160>)
    ad42:	6819      	ldr	r1, [r3, #0]
    ad44:	b169      	cbz	r1, ad62 <uart1_status_isr+0x9e>
				int avail;
				if (head >= tail) avail = head - tail;
    ad46:	45ac      	cmp	ip, r5
				else avail = rx_buffer_total_size_ + head - tail;
    ad48:	bf3c      	itt	cc
    ad4a:	1b72      	subcc	r2, r6, r5
    ad4c:	eb02 030c 	addcc.w	r3, r2, ip
				if (avail >= rts_high_watermark_) rts_deassert();
    ad50:	4a35      	ldr	r2, [pc, #212]	; (ae28 <uart1_status_isr+0x164>)
    ad52:	6812      	ldr	r2, [r2, #0]
				if (head >= tail) avail = head - tail;
    ad54:	bf28      	it	cs
    ad56:	ebac 0305 	subcs.w	r3, ip, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    ad5a:	429a      	cmp	r2, r3
    ad5c:	bf9c      	itt	ls
    ad5e:	2301      	movls	r3, #1
    ad60:	700b      	strbls	r3, [r1, #0]
			}
		}
	}
	c = UART1_C2;
    ad62:	482a      	ldr	r0, [pc, #168]	; (ae0c <uart1_status_isr+0x148>)
    ad64:	78c3      	ldrb	r3, [r0, #3]
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    ad66:	061e      	lsls	r6, r3, #24
	c = UART1_C2;
    ad68:	b2dd      	uxtb	r5, r3
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    ad6a:	d416      	bmi.n	ad9a <uart1_status_isr+0xd6>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    ad6c:	066a      	lsls	r2, r5, #25
    ad6e:	d50d      	bpl.n	ad8c <uart1_status_isr+0xc8>
    ad70:	4b26      	ldr	r3, [pc, #152]	; (ae0c <uart1_status_isr+0x148>)
    ad72:	791b      	ldrb	r3, [r3, #4]
    ad74:	065b      	lsls	r3, r3, #25
    ad76:	d509      	bpl.n	ad8c <uart1_status_isr+0xc8>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    ad78:	4b2c      	ldr	r3, [pc, #176]	; (ae2c <uart1_status_isr+0x168>)
		transmitting = 0;
    ad7a:	492d      	ldr	r1, [pc, #180]	; (ae30 <uart1_status_isr+0x16c>)
		if (transmit_pin) transmit_deassert();
    ad7c:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    ad7e:	2200      	movs	r2, #0
    ad80:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    ad82:	b103      	cbz	r3, ad86 <uart1_status_isr+0xc2>
    ad84:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART1_C3 = reg;
			__enable_irq();
		}
		#endif		
		UART1_C2 = C2_TX_INACTIVE;
    ad86:	4b21      	ldr	r3, [pc, #132]	; (ae0c <uart1_status_isr+0x148>)
    ad88:	223c      	movs	r2, #60	; 0x3c
    ad8a:	70da      	strb	r2, [r3, #3]
	}
}
    ad8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    ad90:	2340      	movs	r3, #64	; 0x40
			c = UART1_D;
    ad92:	79e2      	ldrb	r2, [r4, #7]
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    ad94:	7463      	strb	r3, [r4, #17]
			__enable_irq();
    ad96:	b662      	cpsie	i
    ad98:	e7e3      	b.n	ad62 <uart1_status_isr+0x9e>
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    ad9a:	7903      	ldrb	r3, [r0, #4]
    ad9c:	061c      	lsls	r4, r3, #24
    ad9e:	d5e5      	bpl.n	ad6c <uart1_status_isr+0xa8>
		head = tx_buffer_head;
    ada0:	4b24      	ldr	r3, [pc, #144]	; (ae34 <uart1_status_isr+0x170>)
			if (++tail >= tx_buffer_total_size_) tail = 0;
    ada2:	4a25      	ldr	r2, [pc, #148]	; (ae38 <uart1_status_isr+0x174>)
		tail = tx_buffer_tail;
    ada4:	f8df e094 	ldr.w	lr, [pc, #148]	; ae3c <uart1_status_isr+0x178>
		head = tx_buffer_head;
    ada8:	781c      	ldrb	r4, [r3, #0]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    adaa:	6816      	ldr	r6, [r2, #0]
		tail = tx_buffer_tail;
    adac:	f89e 3000 	ldrb.w	r3, [lr]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    adb0:	4a23      	ldr	r2, [pc, #140]	; (ae40 <uart1_status_isr+0x17c>)
				n = tx_buffer[tail];
    adb2:	4f24      	ldr	r7, [pc, #144]	; (ae44 <uart1_status_isr+0x180>)
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    adb4:	f8d2 c000 	ldr.w	ip, [r2]
		head = tx_buffer_head;
    adb8:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    adba:	b2db      	uxtb	r3, r3
    adbc:	e007      	b.n	adce <uart1_status_isr+0x10a>
			avail = UART1_S1;
    adbe:	7903      	ldrb	r3, [r0, #4]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    adc0:	2300      	movs	r3, #0
				n = tx_buffer[tail];
    adc2:	5cfa      	ldrb	r2, [r7, r3]
    adc4:	b2d2      	uxtb	r2, r2
			UART1_D = n;
    adc6:	71c2      	strb	r2, [r0, #7]
		} while (UART1_TCFIFO < 8);
    adc8:	7d02      	ldrb	r2, [r0, #20]
    adca:	2a07      	cmp	r2, #7
    adcc:	d811      	bhi.n	adf2 <uart1_status_isr+0x12e>
			if (tail == head) break;
    adce:	42a3      	cmp	r3, r4
			if (++tail >= tx_buffer_total_size_) tail = 0;
    add0:	f103 0101 	add.w	r1, r3, #1
			if (tail == head) break;
    add4:	d00e      	beq.n	adf4 <uart1_status_isr+0x130>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    add6:	428e      	cmp	r6, r1
    add8:	d9f1      	bls.n	adbe <uart1_status_isr+0xfa>
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    adda:	2927      	cmp	r1, #39	; 0x27
			avail = UART1_S1;
    addc:	7902      	ldrb	r2, [r0, #4]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    adde:	f1a3 0327 	sub.w	r3, r3, #39	; 0x27
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    ade2:	d801      	bhi.n	ade8 <uart1_status_isr+0x124>
    ade4:	460b      	mov	r3, r1
    ade6:	e7ec      	b.n	adc2 <uart1_status_isr+0xfe>
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    ade8:	f81c 2003 	ldrb.w	r2, [ip, r3]
    adec:	460b      	mov	r3, r1
    adee:	b2d2      	uxtb	r2, r2
    adf0:	e7e9      	b.n	adc6 <uart1_status_isr+0x102>
		tx_buffer_tail = tail;
    adf2:	b2dc      	uxtb	r4, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    adf4:	4b05      	ldr	r3, [pc, #20]	; (ae0c <uart1_status_isr+0x148>)
		tx_buffer_tail = tail;
    adf6:	f88e 4000 	strb.w	r4, [lr]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    adfa:	791a      	ldrb	r2, [r3, #4]
    adfc:	0611      	lsls	r1, r2, #24
    adfe:	bf44      	itt	mi
    ae00:	227c      	movmi	r2, #124	; 0x7c
    ae02:	70da      	strbmi	r2, [r3, #3]
    ae04:	e7b2      	b.n	ad6c <uart1_status_isr+0xa8>
    ae06:	4694      	mov	ip, r2
    ae08:	e77d      	b.n	ad06 <uart1_status_isr+0x42>
    ae0a:	bf00      	nop
    ae0c:	4006b000 	.word	0x4006b000
    ae10:	1fffd408 	.word	0x1fffd408
    ae14:	1fffd410 	.word	0x1fffd410
    ae18:	1fff89d8 	.word	0x1fff89d8
    ae1c:	1fffd3c8 	.word	0x1fffd3c8
    ae20:	1fffd40c 	.word	0x1fffd40c
    ae24:	1fffd3c4 	.word	0x1fffd3c4
    ae28:	1fff89d0 	.word	0x1fff89d0
    ae2c:	1fffd414 	.word	0x1fffd414
    ae30:	1fffd418 	.word	0x1fffd418
    ae34:	1fffd444 	.word	0x1fffd444
    ae38:	1fff89e0 	.word	0x1fff89e0
    ae3c:	1fffd44c 	.word	0x1fffd44c
    ae40:	1fffd448 	.word	0x1fffd448
    ae44:	1fffd41c 	.word	0x1fffd41c

0000ae48 <serial2_add_memory_for_read>:

void serial2_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    ae48:	4b09      	ldr	r3, [pc, #36]	; (ae70 <serial2_add_memory_for_read+0x28>)
{
    ae4a:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    ae4c:	6018      	str	r0, [r3, #0]
	if (buffer) {
    ae4e:	b160      	cbz	r0, ae6a <serial2_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE + length;
    ae50:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    ae54:	4b07      	ldr	r3, [pc, #28]	; (ae74 <serial2_add_memory_for_read+0x2c>)
    ae56:	4808      	ldr	r0, [pc, #32]	; (ae78 <serial2_add_memory_for_read+0x30>)
    ae58:	f101 021a 	add.w	r2, r1, #26
    ae5c:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    ae5e:	4b07      	ldr	r3, [pc, #28]	; (ae7c <serial2_add_memory_for_read+0x34>)
    ae60:	6004      	str	r4, [r0, #0]
    ae62:	3128      	adds	r1, #40	; 0x28
}
    ae64:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    ae66:	6019      	str	r1, [r3, #0]
}
    ae68:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
    ae6a:	2440      	movs	r4, #64	; 0x40
    ae6c:	e7f2      	b.n	ae54 <serial2_add_memory_for_read+0xc>
    ae6e:	bf00      	nop
    ae70:	1fffd40c 	.word	0x1fffd40c
    ae74:	1fff89d4 	.word	0x1fff89d4
    ae78:	1fff89d8 	.word	0x1fff89d8
    ae7c:	1fff89d0 	.word	0x1fff89d0

0000ae80 <serial2_add_memory_for_write>:

void serial2_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    ae80:	4b05      	ldr	r3, [pc, #20]	; (ae98 <serial2_add_memory_for_write+0x18>)
    ae82:	6018      	str	r0, [r3, #0]
	if (buffer) {
    ae84:	b118      	cbz	r0, ae8e <serial2_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE + length;
    ae86:	4b05      	ldr	r3, [pc, #20]	; (ae9c <serial2_add_memory_for_write+0x1c>)
    ae88:	3128      	adds	r1, #40	; 0x28
    ae8a:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
	} 
}
    ae8c:	4770      	bx	lr
    ae8e:	4b03      	ldr	r3, [pc, #12]	; (ae9c <serial2_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
    ae90:	2128      	movs	r1, #40	; 0x28
    ae92:	6019      	str	r1, [r3, #0]
}
    ae94:	4770      	bx	lr
    ae96:	bf00      	nop
    ae98:	1fffd448 	.word	0x1fffd448
    ae9c:	1fff89e0 	.word	0x1fff89e0

0000aea0 <serial3_putchar.part.0>:
#else
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
    aea0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
    aea4:	4b31      	ldr	r3, [pc, #196]	; (af6c <serial3_putchar.part.0+0xcc>)
    aea6:	681b      	ldr	r3, [r3, #0]
void serial3_putchar(uint32_t c)
    aea8:	4607      	mov	r7, r0
	if (transmit_pin) transmit_assert();
    aeaa:	b10b      	cbz	r3, aeb0 <serial3_putchar.part.0+0x10>
    aeac:	2201      	movs	r2, #1
    aeae:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART2_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    aeb0:	f8df 90bc 	ldr.w	r9, [pc, #188]	; af70 <serial3_putchar.part.0+0xd0>
	if (++head >= tx_buffer_total_size_) head = 0;
    aeb4:	f8df 80bc 	ldr.w	r8, [pc, #188]	; af74 <serial3_putchar.part.0+0xd4>
	head = tx_buffer_head;
    aeb8:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    aebc:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    aec0:	4d2d      	ldr	r5, [pc, #180]	; (af78 <serial3_putchar.part.0+0xd8>)
	if (++head >= tx_buffer_total_size_) head = 0;
    aec2:	3401      	adds	r4, #1
    aec4:	429c      	cmp	r4, r3
	while (tx_buffer_tail == head) {
    aec6:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    aec8:	d32a      	bcc.n	af20 <serial3_putchar.part.0+0x80>
	while (tx_buffer_tail == head) {
    aeca:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    aece:	2b00      	cmp	r3, #0
    aed0:	d13e      	bne.n	af50 <serial3_putchar.part.0+0xb0>
	if (++head >= tx_buffer_total_size_) head = 0;
    aed2:	4654      	mov	r4, sl
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
    aed4:	4e29      	ldr	r6, [pc, #164]	; (af7c <serial3_putchar.part.0+0xdc>)
				uint32_t tail = tx_buffer_tail;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
					n = tx_buffer[tail];
    aed6:	f8df b0a8 	ldr.w	fp, [pc, #168]	; af80 <serial3_putchar.part.0+0xe0>
    aeda:	e005      	b.n	aee8 <serial3_putchar.part.0+0x48>
			if ((UART2_S1 & UART_S1_TDRE)) {
    aedc:	7933      	ldrb	r3, [r6, #4]
    aede:	061b      	lsls	r3, r3, #24
    aee0:	d423      	bmi.n	af2a <serial3_putchar.part.0+0x8a>
	while (tx_buffer_tail == head) {
    aee2:	782b      	ldrb	r3, [r5, #0]
    aee4:	42a3      	cmp	r3, r4
    aee6:	d10a      	bne.n	aefe <serial3_putchar.part.0+0x5e>
		int priority = nvic_execution_priority();
    aee8:	f7fe ff90 	bl	9e0c <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    aeec:	2840      	cmp	r0, #64	; 0x40
    aeee:	ddf5      	ble.n	aedc <serial3_putchar.part.0+0x3c>
				}
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    aef0:	28ff      	cmp	r0, #255	; 0xff
    aef2:	ddf6      	ble.n	aee2 <serial3_putchar.part.0+0x42>
			yield(); // wait
    aef4:	f001 f9ca 	bl	c28c <yield>
	while (tx_buffer_tail == head) {
    aef8:	782b      	ldrb	r3, [r5, #0]
    aefa:	42a3      	cmp	r3, r4
    aefc:	d0f4      	beq.n	aee8 <serial3_putchar.part.0+0x48>
		}
	}
	if (head < SERIAL3_TX_BUFFER_SIZE) {
    aefe:	2c27      	cmp	r4, #39	; 0x27
    af00:	d929      	bls.n	af56 <serial3_putchar.part.0+0xb6>
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL3_TX_BUFFER_SIZE] = c;
    af02:	4b20      	ldr	r3, [pc, #128]	; (af84 <serial3_putchar.part.0+0xe4>)
    af04:	3c28      	subs	r4, #40	; 0x28
    af06:	681b      	ldr	r3, [r3, #0]
    af08:	b2ff      	uxtb	r7, r7
    af0a:	551f      	strb	r7, [r3, r4]
	}
	transmitting = 1;
    af0c:	4a1e      	ldr	r2, [pc, #120]	; (af88 <serial3_putchar.part.0+0xe8>)
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    af0e:	4b1b      	ldr	r3, [pc, #108]	; (af7c <serial3_putchar.part.0+0xdc>)
	transmitting = 1;
    af10:	2101      	movs	r1, #1
    af12:	7011      	strb	r1, [r2, #0]
	UART2_C2 = C2_TX_ACTIVE;
    af14:	22ac      	movs	r2, #172	; 0xac
	tx_buffer_head = head;
    af16:	f889 a000 	strb.w	sl, [r9]
	UART2_C2 = C2_TX_ACTIVE;
    af1a:	70da      	strb	r2, [r3, #3]
}
    af1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    af20:	429c      	cmp	r4, r3
	tx_buffer_head = head;
    af22:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    af26:	d0d5      	beq.n	aed4 <serial3_putchar.part.0+0x34>
    af28:	e7e9      	b.n	aefe <serial3_putchar.part.0+0x5e>
				uint32_t tail = tx_buffer_tail;
    af2a:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    af2c:	f8d8 1000 	ldr.w	r1, [r8]
    af30:	1c5a      	adds	r2, r3, #1
    af32:	428a      	cmp	r2, r1
				uint32_t tail = tx_buffer_tail;
    af34:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    af36:	d203      	bcs.n	af40 <serial3_putchar.part.0+0xa0>
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
    af38:	2a27      	cmp	r2, #39	; 0x27
    af3a:	d810      	bhi.n	af5e <serial3_putchar.part.0+0xbe>
				tx_buffer_tail = tail;
    af3c:	b2d1      	uxtb	r1, r2
    af3e:	e001      	b.n	af44 <serial3_putchar.part.0+0xa4>
    af40:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    af42:	460a      	mov	r2, r1
					n = tx_buffer[tail];
    af44:	f81b 3002 	ldrb.w	r3, [fp, r2]
    af48:	b2db      	uxtb	r3, r3
				UART2_D = n;
    af4a:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    af4c:	7029      	strb	r1, [r5, #0]
    af4e:	e7c8      	b.n	aee2 <serial3_putchar.part.0+0x42>
	while (tx_buffer_tail == head) {
    af50:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    af54:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    af56:	4b0a      	ldr	r3, [pc, #40]	; (af80 <serial3_putchar.part.0+0xe0>)
    af58:	b2ff      	uxtb	r7, r7
    af5a:	551f      	strb	r7, [r3, r4]
    af5c:	e7d6      	b.n	af0c <serial3_putchar.part.0+0x6c>
				tx_buffer_tail = tail;
    af5e:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    af60:	4a08      	ldr	r2, [pc, #32]	; (af84 <serial3_putchar.part.0+0xe4>)
    af62:	3b27      	subs	r3, #39	; 0x27
    af64:	6812      	ldr	r2, [r2, #0]
    af66:	5cd3      	ldrb	r3, [r2, r3]
    af68:	b2db      	uxtb	r3, r3
    af6a:	e7ee      	b.n	af4a <serial3_putchar.part.0+0xaa>
    af6c:	1fffd4a0 	.word	0x1fffd4a0
    af70:	1fffd4d0 	.word	0x1fffd4d0
    af74:	1fff89f4 	.word	0x1fff89f4
    af78:	1fffd4d8 	.word	0x1fffd4d8
    af7c:	4006c000 	.word	0x4006c000
    af80:	1fffd4a8 	.word	0x1fffd4a8
    af84:	1fffd4d4 	.word	0x1fffd4d4
    af88:	1fffd4a4 	.word	0x1fffd4a4

0000af8c <serial3_begin>:
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    af8c:	4a1d      	ldr	r2, [pc, #116]	; (b004 <serial3_begin+0x78>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    af8e:	491e      	ldr	r1, [pc, #120]	; (b008 <serial3_begin+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    af90:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    af92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    af96:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	transmitting = 0;
    af9a:	4d1c      	ldr	r5, [pc, #112]	; (b00c <serial3_begin+0x80>)
	rx_buffer_head = 0;
    af9c:	f8df 8070 	ldr.w	r8, [pc, #112]	; b010 <serial3_begin+0x84>
	rx_buffer_tail = 0;
    afa0:	f8df 9070 	ldr.w	r9, [pc, #112]	; b014 <serial3_begin+0x88>
	tx_buffer_head = 0;
    afa4:	4f1c      	ldr	r7, [pc, #112]	; (b018 <serial3_begin+0x8c>)
	tx_buffer_tail = 0;
    afa6:	4e1d      	ldr	r6, [pc, #116]	; (b01c <serial3_begin+0x90>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    afa8:	6353      	str	r3, [r2, #52]	; 0x34
	rx_buffer_head = 0;
    afaa:	2300      	movs	r3, #0
    afac:	f888 3000 	strb.w	r3, [r8]
	rx_buffer_tail = 0;
    afb0:	2820      	cmp	r0, #32
    afb2:	f889 3000 	strb.w	r3, [r9]
	tx_buffer_head = 0;
    afb6:	703b      	strb	r3, [r7, #0]
	tx_buffer_tail = 0;
    afb8:	7033      	strb	r3, [r6, #0]
	transmitting = 0;
    afba:	702b      	strb	r3, [r5, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    afbc:	f240 3513 	movw	r5, #787	; 0x313
    afc0:	608d      	str	r5, [r1, #8]
	UART2_BDH = (divisor >> 13) & 0x1F;
    afc2:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    afc6:	bf38      	it	cc
    afc8:	2020      	movcc	r0, #32
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    afca:	f44f 7551 	mov.w	r5, #836	; 0x344
    afce:	60cd      	str	r5, [r1, #12]
	UART2_BDH = (divisor >> 13) & 0x1F;
    afd0:	f3c0 3144 	ubfx	r1, r0, #13, #5
    afd4:	7011      	strb	r1, [r2, #0]
	UART2_BDL = (divisor >> 5) & 0xFF;
    afd6:	f3c0 1e47 	ubfx	lr, r0, #5, #8
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    afda:	4c11      	ldr	r4, [pc, #68]	; (b020 <serial3_begin+0x94>)
	UART2_BDL = (divisor >> 5) & 0xFF;
    afdc:	f882 e001 	strb.w	lr, [r2, #1]
	UART2_C4 = divisor & 0x1F;
    afe0:	f000 001f 	and.w	r0, r0, #31
	UART2_C2 = C2_TX_INACTIVE;
    afe4:	212c      	movs	r1, #44	; 0x2c
	UART2_C4 = divisor & 0x1F;
    afe6:	7290      	strb	r0, [r2, #10]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    afe8:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
	UART2_C1 = 0;
    afec:	7093      	strb	r3, [r2, #2]
	UART2_PFIFO = 0;
    afee:	7413      	strb	r3, [r2, #16]
	UART2_C2 = C2_TX_INACTIVE;
    aff0:	70d1      	strb	r1, [r2, #3]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    aff2:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    aff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    aff8:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    affc:	f8cc 3104 	str.w	r3, [ip, #260]	; 0x104
}
    b000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b004:	40048000 	.word	0x40048000
    b008:	4004c000 	.word	0x4004c000
    b00c:	1fffd4a4 	.word	0x1fffd4a4
    b010:	1fffd494 	.word	0x1fffd494
    b014:	1fffd49c 	.word	0x1fffd49c
    b018:	1fffd4d0 	.word	0x1fffd4d0
    b01c:	1fffd4d8 	.word	0x1fffd4d8
    b020:	e000e400 	.word	0xe000e400

0000b024 <serial3_format>:
	c = UART2_C1;
    b024:	4b21      	ldr	r3, [pc, #132]	; (b0ac <serial3_format+0x88>)
	UART2_C1 = c;
    b026:	4921      	ldr	r1, [pc, #132]	; (b0ac <serial3_format+0x88>)
	c = UART2_C1;
    b028:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    b02a:	f000 0203 	and.w	r2, r0, #3
    b02e:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    b032:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    b034:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b036:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    b03a:	bf48      	it	mi
    b03c:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b040:	2a04      	cmp	r2, #4
	UART2_C1 = c;
    b042:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b044:	d103      	bne.n	b04e <serial3_format+0x2a>
    b046:	798b      	ldrb	r3, [r1, #6]
    b048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b04c:	718b      	strb	r3, [r1, #6]
	c = UART2_S2 & ~0x10;
    b04e:	4b17      	ldr	r3, [pc, #92]	; (b0ac <serial3_format+0x88>)
	UART2_S2 = c;
    b050:	4a16      	ldr	r2, [pc, #88]	; (b0ac <serial3_format+0x88>)
	c = UART2_S2 & ~0x10;
    b052:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    b054:	06c1      	lsls	r1, r0, #27
	c = UART2_S2 & ~0x10;
    b056:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    b05a:	bf48      	it	mi
    b05c:	f043 0310 	orrmi.w	r3, r3, #16
	UART2_S2 = c;
    b060:	7153      	strb	r3, [r2, #5]
	c = UART2_C3 & ~0x10;
    b062:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    b064:	0682      	lsls	r2, r0, #26
	c = UART2_C3 & ~0x10;
    b066:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART2_C3 = c;
    b06a:	4a10      	ldr	r2, [pc, #64]	; (b0ac <serial3_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    b06c:	bf48      	it	mi
    b06e:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    b072:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART2_C3 = c;
    b076:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    b078:	d010      	beq.n	b09c <serial3_format+0x78>
		c = UART2_C1;
    b07a:	7893      	ldrb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b07c:	490c      	ldr	r1, [pc, #48]	; (b0b0 <serial3_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    b07e:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART2_C1 = c;
    b082:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b084:	7809      	ldrb	r1, [r1, #0]
    b086:	4b0b      	ldr	r3, [pc, #44]	; (b0b4 <serial3_format+0x90>)
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    b088:	4a0b      	ldr	r2, [pc, #44]	; (b0b8 <serial3_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b08a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    b08e:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b092:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    b094:	4909      	ldr	r1, [pc, #36]	; (b0bc <serial3_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    b096:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    b098:	6011      	str	r1, [r2, #0]
    b09a:	4770      	bx	lr
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    b09c:	4b06      	ldr	r3, [pc, #24]	; (b0b8 <serial3_format+0x94>)
    b09e:	4a07      	ldr	r2, [pc, #28]	; (b0bc <serial3_format+0x98>)
    b0a0:	6819      	ldr	r1, [r3, #0]
    b0a2:	4291      	cmp	r1, r2
    b0a4:	bf08      	it	eq
    b0a6:	6018      	streq	r0, [r3, #0]
}
    b0a8:	4770      	bx	lr
    b0aa:	bf00      	nop
    b0ac:	4006c000 	.word	0x4006c000
    b0b0:	1fff89f8 	.word	0x1fff89f8
    b0b4:	000153d8 	.word	0x000153d8
    b0b8:	1fffd4a0 	.word	0x1fffd4a0
    b0bc:	42d800d4 	.word	0x42d800d4

0000b0c0 <serial3_end>:
{
    b0c0:	b538      	push	{r3, r4, r5, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b0c2:	4b13      	ldr	r3, [pc, #76]	; (b110 <serial3_end+0x50>)
    b0c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b0c6:	04db      	lsls	r3, r3, #19
    b0c8:	d520      	bpl.n	b10c <serial3_end+0x4c>
	while (transmitting) yield();  // wait for buffered data to send
    b0ca:	4c12      	ldr	r4, [pc, #72]	; (b114 <serial3_end+0x54>)
    b0cc:	7823      	ldrb	r3, [r4, #0]
    b0ce:	b123      	cbz	r3, b0da <serial3_end+0x1a>
    b0d0:	f001 f8dc 	bl	c28c <yield>
    b0d4:	7823      	ldrb	r3, [r4, #0]
    b0d6:	2b00      	cmp	r3, #0
    b0d8:	d1fa      	bne.n	b0d0 <serial3_end+0x10>
	UART2_C2 = 0;
    b0da:	4a0f      	ldr	r2, [pc, #60]	; (b118 <serial3_end+0x58>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b0dc:	490f      	ldr	r1, [pc, #60]	; (b11c <serial3_end+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    b0de:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	UART2_C2 = 0;
    b0e2:	2300      	movs	r3, #0
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b0e4:	f240 1003 	movw	r0, #259	; 0x103
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    b0e8:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    b0ec:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
	UART2_C2 = 0;
    b0f0:	70d3      	strb	r3, [r2, #3]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b0f2:	6088      	str	r0, [r1, #8]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b0f4:	60c8      	str	r0, [r1, #12]
	if (rts_pin) rts_deassert();
    b0f6:	490a      	ldr	r1, [pc, #40]	; (b120 <serial3_end+0x60>)
	rx_buffer_head = 0;
    b0f8:	4c0a      	ldr	r4, [pc, #40]	; (b124 <serial3_end+0x64>)
	rx_buffer_tail = 0;
    b0fa:	480b      	ldr	r0, [pc, #44]	; (b128 <serial3_end+0x68>)
	if (rts_pin) rts_deassert();
    b0fc:	6809      	ldr	r1, [r1, #0]
	UART2_S1;
    b0fe:	7915      	ldrb	r5, [r2, #4]
	UART2_D; // clear leftover error status
    b100:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    b102:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    b104:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    b106:	b109      	cbz	r1, b10c <serial3_end+0x4c>
    b108:	2301      	movs	r3, #1
    b10a:	700b      	strb	r3, [r1, #0]
}
    b10c:	bd38      	pop	{r3, r4, r5, pc}
    b10e:	bf00      	nop
    b110:	40048000 	.word	0x40048000
    b114:	1fffd4a4 	.word	0x1fffd4a4
    b118:	4006c000 	.word	0x4006c000
    b11c:	4004c000 	.word	0x4004c000
    b120:	1fffd450 	.word	0x1fffd450
    b124:	1fffd494 	.word	0x1fffd494
    b128:	1fffd49c 	.word	0x1fffd49c

0000b12c <serial3_set_transmit_pin>:
	while (transmitting) ;
    b12c:	4a0a      	ldr	r2, [pc, #40]	; (b158 <serial3_set_transmit_pin+0x2c>)
{
    b12e:	b538      	push	{r3, r4, r5, lr}
    b130:	4605      	mov	r5, r0
	while (transmitting) ;
    b132:	7813      	ldrb	r3, [r2, #0]
    b134:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    b138:	2b00      	cmp	r3, #0
    b13a:	d1fa      	bne.n	b132 <serial3_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    b13c:	2101      	movs	r1, #1
    b13e:	4628      	mov	r0, r5
    b140:	f7ff f95e 	bl	a400 <pinMode>
	digitalWrite(pin, LOW);
    b144:	4621      	mov	r1, r4
    b146:	4628      	mov	r0, r5
    b148:	f7ff f926 	bl	a398 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    b14c:	4a03      	ldr	r2, [pc, #12]	; (b15c <serial3_set_transmit_pin+0x30>)
    b14e:	4b04      	ldr	r3, [pc, #16]	; (b160 <serial3_set_transmit_pin+0x34>)
    b150:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    b154:	601a      	str	r2, [r3, #0]
}
    b156:	bd38      	pop	{r3, r4, r5, pc}
    b158:	1fffd4a4 	.word	0x1fffd4a4
    b15c:	000153d8 	.word	0x000153d8
    b160:	1fffd4a0 	.word	0x1fffd4a0

0000b164 <serial3_set_tx>:
	if (opendrain) pin |= 128;
    b164:	b109      	cbz	r1, b16a <serial3_set_tx+0x6>
    b166:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    b16a:	4a11      	ldr	r2, [pc, #68]	; (b1b0 <serial3_set_tx+0x4c>)
    b16c:	7813      	ldrb	r3, [r2, #0]
    b16e:	4283      	cmp	r3, r0
    b170:	d016      	beq.n	b1a0 <serial3_set_tx+0x3c>
{
    b172:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART2)) {
    b174:	4c0f      	ldr	r4, [pc, #60]	; (b1b4 <serial3_set_tx+0x50>)
    b176:	6b64      	ldr	r4, [r4, #52]	; 0x34
    b178:	04e4      	lsls	r4, r4, #19
    b17a:	d50e      	bpl.n	b19a <serial3_set_tx+0x36>
		switch (tx_pin_num & 127) {
    b17c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b180:	2b08      	cmp	r3, #8
    b182:	d102      	bne.n	b18a <serial3_set_tx+0x26>
			case 8:  CORE_PIN8_CONFIG = 0; break; // PTD3
    b184:	4b0c      	ldr	r3, [pc, #48]	; (b1b8 <serial3_set_tx+0x54>)
    b186:	2400      	movs	r4, #0
    b188:	60dc      	str	r4, [r3, #12]
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    b18a:	2900      	cmp	r1, #0
		switch (pin & 127) {
    b18c:	f000 037f 	and.w	r3, r0, #127	; 0x7f
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    b190:	bf14      	ite	ne
    b192:	2160      	movne	r1, #96	; 0x60
    b194:	2144      	moveq	r1, #68	; 0x44
		switch (pin & 127) {
    b196:	2b08      	cmp	r3, #8
    b198:	d003      	beq.n	b1a2 <serial3_set_tx+0x3e>
	tx_pin_num = pin;
    b19a:	7010      	strb	r0, [r2, #0]
}
    b19c:	bc10      	pop	{r4}
    b19e:	4770      	bx	lr
    b1a0:	4770      	bx	lr
			case 8:  CORE_PIN8_CONFIG = cfg | PORT_PCR_MUX(3); break;
    b1a2:	4b05      	ldr	r3, [pc, #20]	; (b1b8 <serial3_set_tx+0x54>)
    b1a4:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    b1a8:	60d9      	str	r1, [r3, #12]
	tx_pin_num = pin;
    b1aa:	7010      	strb	r0, [r2, #0]
}
    b1ac:	bc10      	pop	{r4}
    b1ae:	4770      	bx	lr
    b1b0:	1fff89f8 	.word	0x1fff89f8
    b1b4:	40048000 	.word	0x40048000
    b1b8:	4004c000 	.word	0x4004c000

0000b1bc <serial3_set_rx>:
}
    b1bc:	4770      	bx	lr
    b1be:	bf00      	nop

0000b1c0 <serial3_set_rts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b1c0:	4b0d      	ldr	r3, [pc, #52]	; (b1f8 <serial3_set_rts+0x38>)
    b1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b1c4:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    b1c8:	d013      	beq.n	b1f2 <serial3_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    b1ca:	2821      	cmp	r0, #33	; 0x21
    b1cc:	d903      	bls.n	b1d6 <serial3_set_rts+0x16>
		rts_pin = NULL;
    b1ce:	4b0b      	ldr	r3, [pc, #44]	; (b1fc <serial3_set_rts+0x3c>)
    b1d0:	2000      	movs	r0, #0
    b1d2:	6018      	str	r0, [r3, #0]
		return 0;
    b1d4:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    b1d6:	4b0a      	ldr	r3, [pc, #40]	; (b200 <serial3_set_rts+0x40>)
{
    b1d8:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    b1da:	4c08      	ldr	r4, [pc, #32]	; (b1fc <serial3_set_rts+0x3c>)
    b1dc:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    b1e0:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    b1e2:	2101      	movs	r1, #1
    b1e4:	f7ff f90c 	bl	a400 <pinMode>
		rts_assert();
    b1e8:	6823      	ldr	r3, [r4, #0]
    b1ea:	2200      	movs	r2, #0
    b1ec:	701a      	strb	r2, [r3, #0]
	return 1;
    b1ee:	2001      	movs	r0, #1
}
    b1f0:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b1f2:	4618      	mov	r0, r3
}
    b1f4:	4770      	bx	lr
    b1f6:	bf00      	nop
    b1f8:	40048000 	.word	0x40048000
    b1fc:	1fffd450 	.word	0x1fffd450
    b200:	000153d8 	.word	0x000153d8

0000b204 <serial3_set_cts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b204:	4b0c      	ldr	r3, [pc, #48]	; (b238 <serial3_set_cts+0x34>)
    b206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b208:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    b20c:	d012      	beq.n	b234 <serial3_set_cts+0x30>
	if (pin == 14) {
    b20e:	280e      	cmp	r0, #14
    b210:	d109      	bne.n	b226 <serial3_set_cts+0x22>
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    b212:	4b0a      	ldr	r3, [pc, #40]	; (b23c <serial3_set_cts+0x38>)
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b214:	4a0a      	ldr	r2, [pc, #40]	; (b240 <serial3_set_cts+0x3c>)
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    b216:	f240 3102 	movw	r1, #770	; 0x302
    b21a:	6059      	str	r1, [r3, #4]
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b21c:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    b21e:	2001      	movs	r0, #1
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b220:	4303      	orrs	r3, r0
    b222:	7353      	strb	r3, [r2, #13]
	return 1;
    b224:	4770      	bx	lr
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    b226:	4a06      	ldr	r2, [pc, #24]	; (b240 <serial3_set_cts+0x3c>)
    b228:	7b53      	ldrb	r3, [r2, #13]
    b22a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    b22e:	2000      	movs	r0, #0
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    b230:	7353      	strb	r3, [r2, #13]
		return 0;
    b232:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b234:	4618      	mov	r0, r3
}
    b236:	4770      	bx	lr
    b238:	40048000 	.word	0x40048000
    b23c:	4004c000 	.word	0x4004c000
    b240:	4006c000 	.word	0x4006c000

0000b244 <serial3_putchar>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b244:	4b03      	ldr	r3, [pc, #12]	; (b254 <serial3_putchar+0x10>)
    b246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b248:	04db      	lsls	r3, r3, #19
    b24a:	d501      	bpl.n	b250 <serial3_putchar+0xc>
    b24c:	f7ff be28 	b.w	aea0 <serial3_putchar.part.0>
}
    b250:	4770      	bx	lr
    b252:	bf00      	nop
    b254:	40048000 	.word	0x40048000

0000b258 <serial3_write>:

void serial3_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    b258:	b179      	cbz	r1, b27a <serial3_write+0x22>
{
    b25a:	b570      	push	{r4, r5, r6, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b25c:	4e07      	ldr	r6, [pc, #28]	; (b27c <serial3_write+0x24>)
    b25e:	4604      	mov	r4, r0
    b260:	1845      	adds	r5, r0, r1
    b262:	6b73      	ldr	r3, [r6, #52]	; 0x34
    b264:	04db      	lsls	r3, r3, #19
	while (count-- > 0) serial3_putchar(*p++);
    b266:	f104 0401 	add.w	r4, r4, #1
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b26a:	d503      	bpl.n	b274 <serial3_write+0x1c>
    b26c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    b270:	f7ff fe16 	bl	aea0 <serial3_putchar.part.0>
	while (count-- > 0) serial3_putchar(*p++);
    b274:	42ac      	cmp	r4, r5
    b276:	d1f4      	bne.n	b262 <serial3_write+0xa>
}
    b278:	bd70      	pop	{r4, r5, r6, pc}
    b27a:	4770      	bx	lr
    b27c:	40048000 	.word	0x40048000

0000b280 <serial3_flush>:

void serial3_flush(void)
{
    b280:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    b282:	4c04      	ldr	r4, [pc, #16]	; (b294 <serial3_flush+0x14>)
    b284:	7823      	ldrb	r3, [r4, #0]
    b286:	b123      	cbz	r3, b292 <serial3_flush+0x12>
    b288:	f001 f800 	bl	c28c <yield>
    b28c:	7823      	ldrb	r3, [r4, #0]
    b28e:	2b00      	cmp	r3, #0
    b290:	d1fa      	bne.n	b288 <serial3_flush+0x8>
}
    b292:	bd10      	pop	{r4, pc}
    b294:	1fffd4a4 	.word	0x1fffd4a4

0000b298 <serial3_write_buffer_free>:

int serial3_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    b298:	4a08      	ldr	r2, [pc, #32]	; (b2bc <serial3_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    b29a:	4b09      	ldr	r3, [pc, #36]	; (b2c0 <serial3_write_buffer_free+0x28>)
	head = tx_buffer_head;
    b29c:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    b29e:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b2a0:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    b2a2:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    b2a4:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b2a6:	d202      	bcs.n	b2ae <serial3_write_buffer_free+0x16>
	return tail - head - 1;
    b2a8:	3b01      	subs	r3, #1
    b2aa:	1a18      	subs	r0, r3, r0
}
    b2ac:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b2ae:	4a05      	ldr	r2, [pc, #20]	; (b2c4 <serial3_write_buffer_free+0x2c>)
    b2b0:	6812      	ldr	r2, [r2, #0]
    b2b2:	3a01      	subs	r2, #1
    b2b4:	4413      	add	r3, r2
    b2b6:	1a18      	subs	r0, r3, r0
    b2b8:	4770      	bx	lr
    b2ba:	bf00      	nop
    b2bc:	1fffd4d0 	.word	0x1fffd4d0
    b2c0:	1fffd4d8 	.word	0x1fffd4d8
    b2c4:	1fff89f4 	.word	0x1fff89f4

0000b2c8 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    b2c8:	4a06      	ldr	r2, [pc, #24]	; (b2e4 <serial3_available+0x1c>)
	tail = rx_buffer_tail;
    b2ca:	4b07      	ldr	r3, [pc, #28]	; (b2e8 <serial3_available+0x20>)
	head = rx_buffer_head;
    b2cc:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    b2ce:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    b2d0:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    b2d2:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    b2d4:	bf3c      	itt	cc
    b2d6:	4a05      	ldrcc	r2, [pc, #20]	; (b2ec <serial3_available+0x24>)
    b2d8:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    b2da:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    b2dc:	bf38      	it	cc
    b2de:	189b      	addcc	r3, r3, r2
    b2e0:	1a18      	subs	r0, r3, r0
}
    b2e2:	4770      	bx	lr
    b2e4:	1fffd494 	.word	0x1fffd494
    b2e8:	1fffd49c 	.word	0x1fffd49c
    b2ec:	1fff89f0 	.word	0x1fff89f0

0000b2f0 <serial3_getchar>:
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    b2f0:	4b1b      	ldr	r3, [pc, #108]	; (b360 <serial3_getchar+0x70>)
	tail = rx_buffer_tail;
    b2f2:	491c      	ldr	r1, [pc, #112]	; (b364 <serial3_getchar+0x74>)
	head = rx_buffer_head;
    b2f4:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    b2f6:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    b2f8:	429a      	cmp	r2, r3
    b2fa:	d02e      	beq.n	b35a <serial3_getchar+0x6a>
{
    b2fc:	b510      	push	{r4, lr}
    b2fe:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b302:	4a19      	ldr	r2, [pc, #100]	; (b368 <serial3_getchar+0x78>)
    b304:	b2d8      	uxtb	r0, r3
    b306:	6812      	ldr	r2, [r2, #0]
    b308:	1c43      	adds	r3, r0, #1
    b30a:	429a      	cmp	r2, r3
    b30c:	d919      	bls.n	b342 <serial3_getchar+0x52>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    b30e:	2b3f      	cmp	r3, #63	; 0x3f
    b310:	d81b      	bhi.n	b34a <serial3_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    b312:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    b316:	4815      	ldr	r0, [pc, #84]	; (b36c <serial3_getchar+0x7c>)
    b318:	5cc0      	ldrb	r0, [r0, r3]
    b31a:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    b31c:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    b320:	4913      	ldr	r1, [pc, #76]	; (b370 <serial3_getchar+0x80>)
    b322:	6809      	ldr	r1, [r1, #0]
    b324:	b161      	cbz	r1, b340 <serial3_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    b326:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    b328:	bf3c      	itt	cc
    b32a:	4472      	addcc	r2, lr
    b32c:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    b32e:	4a11      	ldr	r2, [pc, #68]	; (b374 <serial3_getchar+0x84>)
    b330:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    b332:	bf28      	it	cs
    b334:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    b338:	429a      	cmp	r2, r3
    b33a:	d301      	bcc.n	b340 <serial3_getchar+0x50>
    b33c:	2300      	movs	r3, #0
    b33e:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    b340:	bd10      	pop	{r4, pc}
    b342:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b346:	4663      	mov	r3, ip
    b348:	e7e5      	b.n	b316 <serial3_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b34a:	4c0b      	ldr	r4, [pc, #44]	; (b378 <serial3_getchar+0x88>)
    b34c:	383f      	subs	r0, #63	; 0x3f
    b34e:	6824      	ldr	r4, [r4, #0]
    b350:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    b352:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b356:	b2c0      	uxtb	r0, r0
    b358:	e7e0      	b.n	b31c <serial3_getchar+0x2c>
	if (head == tail) return -1;
    b35a:	f04f 30ff 	mov.w	r0, #4294967295
}
    b35e:	4770      	bx	lr
    b360:	1fffd494 	.word	0x1fffd494
    b364:	1fffd49c 	.word	0x1fffd49c
    b368:	1fff89f0 	.word	0x1fff89f0
    b36c:	1fffd454 	.word	0x1fffd454
    b370:	1fffd450 	.word	0x1fffd450
    b374:	1fff89ec 	.word	0x1fff89ec
    b378:	1fffd498 	.word	0x1fffd498

0000b37c <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    b37c:	4a0d      	ldr	r2, [pc, #52]	; (b3b4 <serial3_peek+0x38>)
	tail = rx_buffer_tail;
    b37e:	4b0e      	ldr	r3, [pc, #56]	; (b3b8 <serial3_peek+0x3c>)
	head = rx_buffer_head;
    b380:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    b382:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    b384:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    b386:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    b388:	d011      	beq.n	b3ae <serial3_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b38a:	490c      	ldr	r1, [pc, #48]	; (b3bc <serial3_peek+0x40>)
    b38c:	6809      	ldr	r1, [r1, #0]
    b38e:	1c53      	adds	r3, r2, #1
    b390:	4299      	cmp	r1, r3
    b392:	d907      	bls.n	b3a4 <serial3_peek+0x28>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    b394:	2b3f      	cmp	r3, #63	; 0x3f
    b396:	d906      	bls.n	b3a6 <serial3_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b398:	4b09      	ldr	r3, [pc, #36]	; (b3c0 <serial3_peek+0x44>)
    b39a:	3a3f      	subs	r2, #63	; 0x3f
    b39c:	681b      	ldr	r3, [r3, #0]
    b39e:	5c98      	ldrb	r0, [r3, r2]
    b3a0:	b2c0      	uxtb	r0, r0
    b3a2:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b3a4:	2300      	movs	r3, #0
		return rx_buffer[tail];
    b3a6:	4a07      	ldr	r2, [pc, #28]	; (b3c4 <serial3_peek+0x48>)
    b3a8:	5cd0      	ldrb	r0, [r2, r3]
    b3aa:	b2c0      	uxtb	r0, r0
    b3ac:	4770      	bx	lr
	if (head == tail) return -1;
    b3ae:	f04f 30ff 	mov.w	r0, #4294967295
}
    b3b2:	4770      	bx	lr
    b3b4:	1fffd494 	.word	0x1fffd494
    b3b8:	1fffd49c 	.word	0x1fffd49c
    b3bc:	1fff89f0 	.word	0x1fff89f0
    b3c0:	1fffd498 	.word	0x1fffd498
    b3c4:	1fffd454 	.word	0x1fffd454

0000b3c8 <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    b3c8:	4b05      	ldr	r3, [pc, #20]	; (b3e0 <serial3_clear+0x18>)
	if (rts_pin) rts_assert();
    b3ca:	4a06      	ldr	r2, [pc, #24]	; (b3e4 <serial3_clear+0x1c>)
	rx_buffer_head = rx_buffer_tail;
    b3cc:	781b      	ldrb	r3, [r3, #0]
    b3ce:	4906      	ldr	r1, [pc, #24]	; (b3e8 <serial3_clear+0x20>)
	if (rts_pin) rts_assert();
    b3d0:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    b3d2:	b2db      	uxtb	r3, r3
    b3d4:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    b3d6:	b10a      	cbz	r2, b3dc <serial3_clear+0x14>
    b3d8:	2300      	movs	r3, #0
    b3da:	7013      	strb	r3, [r2, #0]
}
    b3dc:	4770      	bx	lr
    b3de:	bf00      	nop
    b3e0:	1fffd49c 	.word	0x1fffd49c
    b3e4:	1fffd450 	.word	0x1fffd450
    b3e8:	1fffd494 	.word	0x1fffd494

0000b3ec <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    b3ec:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    b3ee:	4b3a      	ldr	r3, [pc, #232]	; (b4d8 <uart2_status_isr+0xec>)
    b3f0:	791a      	ldrb	r2, [r3, #4]
    b3f2:	0695      	lsls	r5, r2, #26
    b3f4:	d524      	bpl.n	b440 <uart2_status_isr+0x54>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    b3f6:	4d39      	ldr	r5, [pc, #228]	; (b4dc <uart2_status_isr+0xf0>)
		if (head >= rx_buffer_total_size_) head = 0;
    b3f8:	4939      	ldr	r1, [pc, #228]	; (b4e0 <uart2_status_isr+0xf4>)
			n = UART2_D;
    b3fa:	79db      	ldrb	r3, [r3, #7]
		head = rx_buffer_head + 1;
    b3fc:	782a      	ldrb	r2, [r5, #0]
		if (head >= rx_buffer_total_size_) head = 0;
    b3fe:	680c      	ldr	r4, [r1, #0]
			n = UART2_D;
    b400:	b2d8      	uxtb	r0, r3
		head = rx_buffer_head + 1;
    b402:	1c53      	adds	r3, r2, #1
		if (head >= rx_buffer_total_size_) head = 0;
    b404:	429c      	cmp	r4, r3
		head = rx_buffer_head + 1;
    b406:	b2d2      	uxtb	r2, r2
		if (head >= rx_buffer_total_size_) head = 0;
    b408:	d831      	bhi.n	b46e <uart2_status_isr+0x82>
		if (head != rx_buffer_tail) {
    b40a:	4b36      	ldr	r3, [pc, #216]	; (b4e4 <uart2_status_isr+0xf8>)
    b40c:	781a      	ldrb	r2, [r3, #0]
    b40e:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b412:	b122      	cbz	r2, b41e <uart2_status_isr+0x32>
    b414:	2200      	movs	r2, #0
    b416:	4613      	mov	r3, r2
			if (head < SERIAL3_RX_BUFFER_SIZE) {
				rx_buffer[head] = n;
    b418:	4933      	ldr	r1, [pc, #204]	; (b4e8 <uart2_status_isr+0xfc>)
    b41a:	54c8      	strb	r0, [r1, r3]
			} else {
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
			}

			rx_buffer_head = head;
    b41c:	702a      	strb	r2, [r5, #0]
		}
		if (rts_pin) {
    b41e:	4933      	ldr	r1, [pc, #204]	; (b4ec <uart2_status_isr+0x100>)
    b420:	6809      	ldr	r1, [r1, #0]
    b422:	b169      	cbz	r1, b440 <uart2_status_isr+0x54>
			int avail;
			tail = tx_buffer_tail;
    b424:	4a32      	ldr	r2, [pc, #200]	; (b4f0 <uart2_status_isr+0x104>)
    b426:	7810      	ldrb	r0, [r2, #0]
			if (head >= tail) avail = head - tail;
    b428:	4298      	cmp	r0, r3
			tail = tx_buffer_tail;
    b42a:	b2c2      	uxtb	r2, r0
			else avail = rx_buffer_total_size_ + head - tail;
    b42c:	bf8a      	itet	hi
    b42e:	1aa2      	subhi	r2, r4, r2
			if (head >= tail) avail = head - tail;
    b430:	1a9b      	subls	r3, r3, r2
			else avail = rx_buffer_total_size_ + head - tail;
    b432:	189b      	addhi	r3, r3, r2
			if (avail >= rts_high_watermark_) rts_deassert();
    b434:	4a2f      	ldr	r2, [pc, #188]	; (b4f4 <uart2_status_isr+0x108>)
    b436:	6812      	ldr	r2, [r2, #0]
    b438:	429a      	cmp	r2, r3
    b43a:	bf9c      	itt	ls
    b43c:	2301      	movls	r3, #1
    b43e:	700b      	strbls	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    b440:	4a25      	ldr	r2, [pc, #148]	; (b4d8 <uart2_status_isr+0xec>)
    b442:	78d3      	ldrb	r3, [r2, #3]
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b444:	061c      	lsls	r4, r3, #24
	c = UART2_C2;
    b446:	b2d9      	uxtb	r1, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b448:	d41e      	bmi.n	b488 <uart2_status_isr+0x9c>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    b44a:	064a      	lsls	r2, r1, #25
    b44c:	d50d      	bpl.n	b46a <uart2_status_isr+0x7e>
    b44e:	4b22      	ldr	r3, [pc, #136]	; (b4d8 <uart2_status_isr+0xec>)
    b450:	791b      	ldrb	r3, [r3, #4]
    b452:	065b      	lsls	r3, r3, #25
    b454:	d509      	bpl.n	b46a <uart2_status_isr+0x7e>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    b456:	4b28      	ldr	r3, [pc, #160]	; (b4f8 <uart2_status_isr+0x10c>)
		transmitting = 0;
    b458:	4928      	ldr	r1, [pc, #160]	; (b4fc <uart2_status_isr+0x110>)
		if (transmit_pin) transmit_deassert();
    b45a:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    b45c:	2200      	movs	r2, #0
    b45e:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    b460:	b103      	cbz	r3, b464 <uart2_status_isr+0x78>
    b462:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART2_C3 = reg;
			__enable_irq();
		}
		#endif
		UART2_C2 = C2_TX_INACTIVE;
    b464:	4b1c      	ldr	r3, [pc, #112]	; (b4d8 <uart2_status_isr+0xec>)
    b466:	222c      	movs	r2, #44	; 0x2c
    b468:	70da      	strb	r2, [r3, #3]
	}
}
    b46a:	bc30      	pop	{r4, r5}
    b46c:	4770      	bx	lr
		if (head != rx_buffer_tail) {
    b46e:	491d      	ldr	r1, [pc, #116]	; (b4e4 <uart2_status_isr+0xf8>)
    b470:	7809      	ldrb	r1, [r1, #0]
    b472:	4299      	cmp	r1, r3
    b474:	d0d3      	beq.n	b41e <uart2_status_isr+0x32>
			if (head < SERIAL3_RX_BUFFER_SIZE) {
    b476:	2b3f      	cmp	r3, #63	; 0x3f
    b478:	d92c      	bls.n	b4d4 <uart2_status_isr+0xe8>
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
    b47a:	4921      	ldr	r1, [pc, #132]	; (b500 <uart2_status_isr+0x114>)
    b47c:	3a3f      	subs	r2, #63	; 0x3f
    b47e:	6809      	ldr	r1, [r1, #0]
    b480:	5488      	strb	r0, [r1, r2]
			rx_buffer_head = head;
    b482:	b2da      	uxtb	r2, r3
    b484:	702a      	strb	r2, [r5, #0]
    b486:	e7ca      	b.n	b41e <uart2_status_isr+0x32>
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b488:	7913      	ldrb	r3, [r2, #4]
    b48a:	0618      	lsls	r0, r3, #24
    b48c:	d5dd      	bpl.n	b44a <uart2_status_isr+0x5e>
		head = tx_buffer_head;
    b48e:	4b1d      	ldr	r3, [pc, #116]	; (b504 <uart2_status_isr+0x118>)
		tail = tx_buffer_tail;
    b490:	4817      	ldr	r0, [pc, #92]	; (b4f0 <uart2_status_isr+0x104>)
		head = tx_buffer_head;
    b492:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    b494:	7803      	ldrb	r3, [r0, #0]
		if (head == tail) {
    b496:	429d      	cmp	r5, r3
		tail = tx_buffer_tail;
    b498:	b2dc      	uxtb	r4, r3
		if (head == tail) {
    b49a:	d008      	beq.n	b4ae <uart2_status_isr+0xc2>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b49c:	4a1a      	ldr	r2, [pc, #104]	; (b508 <uart2_status_isr+0x11c>)
    b49e:	6812      	ldr	r2, [r2, #0]
    b4a0:	1c63      	adds	r3, r4, #1
    b4a2:	429a      	cmp	r2, r3
    b4a4:	d906      	bls.n	b4b4 <uart2_status_isr+0xc8>
			if (tail < SERIAL3_TX_BUFFER_SIZE) {
    b4a6:	2b27      	cmp	r3, #39	; 0x27
    b4a8:	d80d      	bhi.n	b4c6 <uart2_status_isr+0xda>
			tx_buffer_tail = tail;
    b4aa:	b2da      	uxtb	r2, r3
    b4ac:	e004      	b.n	b4b8 <uart2_status_isr+0xcc>
			UART2_C2 = C2_TX_COMPLETING;
    b4ae:	236c      	movs	r3, #108	; 0x6c
    b4b0:	70d3      	strb	r3, [r2, #3]
    b4b2:	e7ca      	b.n	b44a <uart2_status_isr+0x5e>
    b4b4:	2200      	movs	r2, #0
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b4b6:	4613      	mov	r3, r2
				n = tx_buffer[tail];
    b4b8:	4c14      	ldr	r4, [pc, #80]	; (b50c <uart2_status_isr+0x120>)
    b4ba:	5ce3      	ldrb	r3, [r4, r3]
    b4bc:	b2db      	uxtb	r3, r3
			UART2_D = n;
    b4be:	4c06      	ldr	r4, [pc, #24]	; (b4d8 <uart2_status_isr+0xec>)
    b4c0:	71e3      	strb	r3, [r4, #7]
			tx_buffer_tail = tail;
    b4c2:	7002      	strb	r2, [r0, #0]
    b4c4:	e7c1      	b.n	b44a <uart2_status_isr+0x5e>
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    b4c6:	4a12      	ldr	r2, [pc, #72]	; (b510 <uart2_status_isr+0x124>)
    b4c8:	3c27      	subs	r4, #39	; 0x27
    b4ca:	6815      	ldr	r5, [r2, #0]
			tx_buffer_tail = tail;
    b4cc:	b2da      	uxtb	r2, r3
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    b4ce:	5d2b      	ldrb	r3, [r5, r4]
    b4d0:	b2db      	uxtb	r3, r3
    b4d2:	e7f4      	b.n	b4be <uart2_status_isr+0xd2>
			rx_buffer_head = head;
    b4d4:	b2da      	uxtb	r2, r3
    b4d6:	e79f      	b.n	b418 <uart2_status_isr+0x2c>
    b4d8:	4006c000 	.word	0x4006c000
    b4dc:	1fffd494 	.word	0x1fffd494
    b4e0:	1fff89f0 	.word	0x1fff89f0
    b4e4:	1fffd49c 	.word	0x1fffd49c
    b4e8:	1fffd454 	.word	0x1fffd454
    b4ec:	1fffd450 	.word	0x1fffd450
    b4f0:	1fffd4d8 	.word	0x1fffd4d8
    b4f4:	1fff89e8 	.word	0x1fff89e8
    b4f8:	1fffd4a0 	.word	0x1fffd4a0
    b4fc:	1fffd4a4 	.word	0x1fffd4a4
    b500:	1fffd498 	.word	0x1fffd498
    b504:	1fffd4d0 	.word	0x1fffd4d0
    b508:	1fff89f4 	.word	0x1fff89f4
    b50c:	1fffd4a8 	.word	0x1fffd4a8
    b510:	1fffd4d4 	.word	0x1fffd4d4

0000b514 <serial3_add_memory_for_read>:

void serial3_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    b514:	4b09      	ldr	r3, [pc, #36]	; (b53c <serial3_add_memory_for_read+0x28>)
{
    b516:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    b518:	6018      	str	r0, [r3, #0]
	if (buffer) {
    b51a:	b160      	cbz	r0, b536 <serial3_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE + length;
    b51c:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    b520:	4b07      	ldr	r3, [pc, #28]	; (b540 <serial3_add_memory_for_read+0x2c>)
    b522:	4808      	ldr	r0, [pc, #32]	; (b544 <serial3_add_memory_for_read+0x30>)
    b524:	f101 021a 	add.w	r2, r1, #26
    b528:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    b52a:	4b07      	ldr	r3, [pc, #28]	; (b548 <serial3_add_memory_for_read+0x34>)
    b52c:	6004      	str	r4, [r0, #0]
    b52e:	3128      	adds	r1, #40	; 0x28
}
    b530:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    b532:	6019      	str	r1, [r3, #0]
}
    b534:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
    b536:	2440      	movs	r4, #64	; 0x40
    b538:	e7f2      	b.n	b520 <serial3_add_memory_for_read+0xc>
    b53a:	bf00      	nop
    b53c:	1fffd498 	.word	0x1fffd498
    b540:	1fff89ec 	.word	0x1fff89ec
    b544:	1fff89f0 	.word	0x1fff89f0
    b548:	1fff89e8 	.word	0x1fff89e8

0000b54c <serial3_add_memory_for_write>:

void serial3_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    b54c:	4b05      	ldr	r3, [pc, #20]	; (b564 <serial3_add_memory_for_write+0x18>)
    b54e:	6018      	str	r0, [r3, #0]
	if (buffer) {
    b550:	b118      	cbz	r0, b55a <serial3_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE + length;
    b552:	4b05      	ldr	r3, [pc, #20]	; (b568 <serial3_add_memory_for_write+0x1c>)
    b554:	3128      	adds	r1, #40	; 0x28
    b556:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
	} 
}
    b558:	4770      	bx	lr
    b55a:	4b03      	ldr	r3, [pc, #12]	; (b568 <serial3_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
    b55c:	2128      	movs	r1, #40	; 0x28
    b55e:	6019      	str	r1, [r3, #0]
}
    b560:	4770      	bx	lr
    b562:	bf00      	nop
    b564:	1fffd4d4 	.word	0x1fffd4d4
    b568:	1fff89f4 	.word	0x1fff89f4

0000b56c <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    b56c:	4770      	bx	lr
    b56e:	bf00      	nop

0000b570 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    b570:	4770      	bx	lr
    b572:	bf00      	nop

0000b574 <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    b574:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b576:	2b03      	cmp	r3, #3
    b578:	d817      	bhi.n	b5aa <usb_rx+0x36>
	__disable_irq();
    b57a:	b672      	cpsid	i
	ret = rx_first[endpoint];
    b57c:	490c      	ldr	r1, [pc, #48]	; (b5b0 <usb_rx+0x3c>)
    b57e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    b582:	b180      	cbz	r0, b5a6 <usb_rx+0x32>
{
    b584:	b410      	push	{r4}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b586:	4c0b      	ldr	r4, [pc, #44]	; (b5b4 <usb_rx+0x40>)
    b588:	f8b0 c000 	ldrh.w	ip, [r0]
    b58c:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    b590:	eba2 020c 	sub.w	r2, r2, ip
		rx_first[endpoint] = ret->next;
    b594:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b598:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b59c:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    b5a0:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    b5a2:	bc10      	pop	{r4}
    b5a4:	4770      	bx	lr
	__enable_irq();
    b5a6:	b662      	cpsie	i
}
    b5a8:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b5aa:	2000      	movs	r0, #0
    b5ac:	4770      	bx	lr
    b5ae:	bf00      	nop
    b5b0:	1fffd56c 	.word	0x1fffd56c
    b5b4:	1fffd5bc 	.word	0x1fffd5bc

0000b5b8 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    b5b8:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b5ba:	2803      	cmp	r0, #3
    b5bc:	d80b      	bhi.n	b5d6 <usb_tx_packet_count+0x1e>
	__disable_irq();
    b5be:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    b5c0:	4b07      	ldr	r3, [pc, #28]	; (b5e0 <usb_tx_packet_count+0x28>)
    b5c2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    b5c6:	b143      	cbz	r3, b5da <usb_tx_packet_count+0x22>
	uint32_t count=0;
    b5c8:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    b5ca:	685b      	ldr	r3, [r3, #4]
    b5cc:	3001      	adds	r0, #1
    b5ce:	2b00      	cmp	r3, #0
    b5d0:	d1fb      	bne.n	b5ca <usb_tx_packet_count+0x12>
	__enable_irq();
    b5d2:	b662      	cpsie	i
	return count;
    b5d4:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b5d6:	2000      	movs	r0, #0
}
    b5d8:	4770      	bx	lr
	uint32_t count=0;
    b5da:	4618      	mov	r0, r3
    b5dc:	e7f9      	b.n	b5d2 <usb_tx_packet_count+0x1a>
    b5de:	bf00      	nop
    b5e0:	1fffd594 	.word	0x1fffd594

0000b5e4 <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    b5e4:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    b5e6:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    b5e8:	4a19      	ldr	r2, [pc, #100]	; (b650 <usb_rx_memory+0x6c>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    b5ea:	4c1a      	ldr	r4, [pc, #104]	; (b654 <usb_rx_memory+0x70>)
	__disable_irq();
    b5ec:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b5ee:	f812 1b01 	ldrb.w	r1, [r2], #1
    b5f2:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b5f4:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b5f8:	d505      	bpl.n	b606 <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b5fa:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    b5fe:	b161      	cbz	r1, b61a <usb_rx_memory+0x36>
			if (table[index(i, RX, ODD)].desc == 0) {
    b600:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    b604:	b1b9      	cbz	r1, b636 <usb_rx_memory+0x52>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    b606:	3304      	adds	r3, #4
    b608:	2b14      	cmp	r3, #20
    b60a:	d1f0      	bne.n	b5ee <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    b60c:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    b60e:	4b12      	ldr	r3, [pc, #72]	; (b658 <usb_rx_memory+0x74>)
    b610:	2200      	movs	r2, #0
    b612:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    b614:	bc10      	pop	{r4}
	usb_free(packet);
    b616:	f000 bc9d 	b.w	bf54 <usb_free>
				usb_rx_memory_needed--;
    b61a:	490f      	ldr	r1, [pc, #60]	; (b658 <usb_rx_memory+0x74>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    b61c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    b620:	3008      	adds	r0, #8
    b622:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    b624:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    b626:	480d      	ldr	r0, [pc, #52]	; (b65c <usb_rx_memory+0x78>)
    b628:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    b62c:	3a01      	subs	r2, #1
    b62e:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    b630:	b662      	cpsie	i
}
    b632:	bc10      	pop	{r4}
    b634:	4770      	bx	lr
				usb_rx_memory_needed--;
    b636:	4a08      	ldr	r2, [pc, #32]	; (b658 <usb_rx_memory+0x74>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b638:	4909      	ldr	r1, [pc, #36]	; (b660 <usb_rx_memory+0x7c>)
				table[index(i, RX, ODD)].addr = packet->buf;
    b63a:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    b63e:	3008      	adds	r0, #8
    b640:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    b642:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b644:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    b648:	3b01      	subs	r3, #1
    b64a:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    b64c:	b662      	cpsie	i
				return;
    b64e:	e7f0      	b.n	b632 <usb_rx_memory+0x4e>
    b650:	00015564 	.word	0x00015564
    b654:	1fff8000 	.word	0x1fff8000
    b658:	1fffd5c4 	.word	0x1fffd5c4
    b65c:	00400088 	.word	0x00400088
    b660:	004000c8 	.word	0x004000c8

0000b664 <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    b664:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    b666:	2a03      	cmp	r2, #3
    b668:	d80e      	bhi.n	b688 <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    b66a:	4b1c      	ldr	r3, [pc, #112]	; (b6dc <usb_tx+0x78>)
    b66c:	0140      	lsls	r0, r0, #5
    b66e:	f040 0010 	orr.w	r0, r0, #16
{
    b672:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    b674:	4403      	add	r3, r0
	__disable_irq();
    b676:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    b678:	4c19      	ldr	r4, [pc, #100]	; (b6e0 <usb_tx+0x7c>)
    b67a:	5ca0      	ldrb	r0, [r4, r2]
    b67c:	2803      	cmp	r0, #3
    b67e:	d81c      	bhi.n	b6ba <usb_tx+0x56>
    b680:	e8df f000 	tbb	[pc, r0]
    b684:	18031513 	.word	0x18031513
    b688:	4770      	bx	lr
    b68a:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    b68c:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b68e:	f013 0f08 	tst.w	r3, #8
    b692:	8808      	ldrh	r0, [r1, #0]
    b694:	bf14      	ite	ne
    b696:	22c8      	movne	r2, #200	; 0xc8
    b698:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    b69a:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b69c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    b6a0:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b6a2:	601a      	str	r2, [r3, #0]
	__enable_irq();
    b6a4:	b662      	cpsie	i
}
    b6a6:	bc10      	pop	{r4}
    b6a8:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    b6aa:	2003      	movs	r0, #3
    b6ac:	e7ee      	b.n	b68c <usb_tx+0x28>
		b++;
    b6ae:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    b6b0:	2002      	movs	r0, #2
		break;
    b6b2:	e7eb      	b.n	b68c <usb_tx+0x28>
		b++;
    b6b4:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    b6b6:	2004      	movs	r0, #4
		break;
    b6b8:	e7e8      	b.n	b68c <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    b6ba:	4b0a      	ldr	r3, [pc, #40]	; (b6e4 <usb_tx+0x80>)
    b6bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b6c0:	b138      	cbz	r0, b6d2 <usb_tx+0x6e>
			tx_last[endpoint]->next = packet;
    b6c2:	4b09      	ldr	r3, [pc, #36]	; (b6e8 <usb_tx+0x84>)
    b6c4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b6c8:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    b6ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    b6ce:	b662      	cpsie	i
		return;
    b6d0:	e7e9      	b.n	b6a6 <usb_tx+0x42>
			tx_first[endpoint] = packet;
    b6d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    b6d6:	4b04      	ldr	r3, [pc, #16]	; (b6e8 <usb_tx+0x84>)
    b6d8:	e7f7      	b.n	b6ca <usb_tx+0x66>
    b6da:	bf00      	nop
    b6dc:	1fff8000 	.word	0x1fff8000
    b6e0:	1fffd5b4 	.word	0x1fffd5b4
    b6e4:	1fffd594 	.word	0x1fffd594
    b6e8:	1fffd5a4 	.word	0x1fffd5a4

0000b6ec <_reboot_Teensyduino_>:


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    b6ec:	be00      	bkpt	0x0000
    b6ee:	bf00      	nop

0000b6f0 <usb_isr>:
}



void usb_isr(void)
{
    b6f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    b6f4:	f8df a2cc 	ldr.w	sl, [pc, #716]	; b9c4 <usb_isr+0x2d4>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b6f8:	f8df b2cc 	ldr.w	fp, [pc, #716]	; b9c8 <usb_isr+0x2d8>
{
    b6fc:	b085      	sub	sp, #20
    b6fe:	e03d      	b.n	b77c <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    b700:	4db2      	ldr	r5, [pc, #712]	; (b9cc <usb_isr+0x2dc>)
    b702:	089e      	lsrs	r6, r3, #2
    b704:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    b708:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    b70a:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    b70c:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    b710:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    b712:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    b716:	f040 80b8 	bne.w	b88a <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    b71a:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    b71e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    b722:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    b724:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    b728:	f000 80a7 	beq.w	b87a <usb_isr+0x18a>
					packet->index = 0;
    b72c:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    b730:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    b734:	4ba6      	ldr	r3, [pc, #664]	; (b9d0 <usb_isr+0x2e0>)
    b736:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    b73a:	2a00      	cmp	r2, #0
    b73c:	f000 8201 	beq.w	bb42 <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    b740:	4ba4      	ldr	r3, [pc, #656]	; (b9d4 <usb_isr+0x2e4>)
    b742:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    b746:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    b748:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    b74c:	4ba2      	ldr	r3, [pc, #648]	; (b9d8 <usb_isr+0x2e8>)
    b74e:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    b752:	4494      	add	ip, r2
    b754:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    b758:	f000 fbdc 	bl	bf14 <usb_malloc>
					if (packet) {
    b75c:	2800      	cmp	r0, #0
    b75e:	f000 81e9 	beq.w	bb34 <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    b762:	f017 0f08 	tst.w	r7, #8
    b766:	4b9d      	ldr	r3, [pc, #628]	; (b9dc <usb_isr+0x2ec>)
						b->addr = packet->buf;
    b768:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    b76c:	bf18      	it	ne
    b76e:	465b      	movne	r3, fp
						b->addr = packet->buf;
    b770:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    b772:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    b776:	2308      	movs	r3, #8
    b778:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    b77c:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    b780:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    b782:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    b784:	d51b      	bpl.n	b7be <usb_isr+0xce>
		if (usb_configuration) {
    b786:	4b96      	ldr	r3, [pc, #600]	; (b9e0 <usb_isr+0x2f0>)
    b788:	781b      	ldrb	r3, [r3, #0]
    b78a:	b1ab      	cbz	r3, b7b8 <usb_isr+0xc8>
			t = usb_reboot_timer;
    b78c:	4995      	ldr	r1, [pc, #596]	; (b9e4 <usb_isr+0x2f4>)
    b78e:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    b790:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b794:	b12a      	cbz	r2, b7a2 <usb_isr+0xb2>
				usb_reboot_timer = --t;
    b796:	3b01      	subs	r3, #1
    b798:	b2db      	uxtb	r3, r3
    b79a:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    b79c:	2b00      	cmp	r3, #0
    b79e:	f000 8346 	beq.w	be2e <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    b7a2:	4991      	ldr	r1, [pc, #580]	; (b9e8 <usb_isr+0x2f8>)
    b7a4:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    b7a6:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b7aa:	b12a      	cbz	r2, b7b8 <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    b7ac:	3b01      	subs	r3, #1
    b7ae:	b2db      	uxtb	r3, r3
    b7b0:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    b7b2:	2b00      	cmp	r3, #0
    b7b4:	f000 81eb 	beq.w	bb8e <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    b7b8:	2304      	movs	r3, #4
    b7ba:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    b7be:	f014 0208 	ands.w	r2, r4, #8
    b7c2:	f000 81cc 	beq.w	bb5e <usb_isr+0x46e>
		stat = USB0_STAT;
    b7c6:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    b7ca:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    b7cc:	0912      	lsrs	r2, r2, #4
    b7ce:	d197      	bne.n	b700 <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    b7d0:	f8df 91f8 	ldr.w	r9, [pc, #504]	; b9cc <usb_isr+0x2dc>
    b7d4:	089b      	lsrs	r3, r3, #2
    b7d6:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    b7da:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    b7de:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    b7e0:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    b7e4:	2809      	cmp	r0, #9
    b7e6:	d07c      	beq.n	b8e2 <usb_isr+0x1f2>
    b7e8:	d80f      	bhi.n	b80a <usb_isr+0x11a>
    b7ea:	3801      	subs	r0, #1
    b7ec:	2801      	cmp	r0, #1
    b7ee:	d808      	bhi.n	b802 <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b7f0:	4a7e      	ldr	r2, [pc, #504]	; (b9ec <usb_isr+0x2fc>)
    b7f2:	8815      	ldrh	r5, [r2, #0]
    b7f4:	f242 0021 	movw	r0, #8225	; 0x2021
    b7f8:	4285      	cmp	r5, r0
    b7fa:	f000 81fb 	beq.w	bbf4 <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    b7fe:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b802:	2301      	movs	r3, #1
    b804:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    b808:	e7b5      	b.n	b776 <usb_isr+0x86>
	switch (pid) {
    b80a:	280d      	cmp	r0, #13
    b80c:	d1f9      	bne.n	b802 <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    b80e:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    b812:	4d77      	ldr	r5, [pc, #476]	; (b9f0 <usb_isr+0x300>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    b814:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    b818:	4e74      	ldr	r6, [pc, #464]	; (b9ec <usb_isr+0x2fc>)
		ep0_tx_data_toggle = 1;
    b81a:	4c76      	ldr	r4, [pc, #472]	; (b9f4 <usb_isr+0x304>)
		table[index(0, TX, EVEN)].desc = 0;
    b81c:	f8c9 2010 	str.w	r2, [r9, #16]
    b820:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    b822:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    b826:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    b82a:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    b82c:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    b82e:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    b832:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    b836:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    b838:	f200 80ff 	bhi.w	ba3a <usb_isr+0x34a>
    b83c:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    b840:	f080 82cb 	bcs.w	bdda <usb_isr+0x6ea>
    b844:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    b848:	f000 8226 	beq.w	bc98 <usb_isr+0x5a8>
    b84c:	f240 80de 	bls.w	ba0c <usb_isr+0x31c>
    b850:	f240 3202 	movw	r2, #770	; 0x302
    b854:	4293      	cmp	r3, r2
    b856:	d17b      	bne.n	b950 <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    b858:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    b85c:	2f04      	cmp	r7, #4
    b85e:	f200 8108 	bhi.w	ba72 <usb_isr+0x382>
    b862:	0c02      	lsrs	r2, r0, #16
    b864:	f040 8105 	bne.w	ba72 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    b868:	4963      	ldr	r1, [pc, #396]	; (b9f8 <usb_isr+0x308>)
    b86a:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    b86e:	f043 0302 	orr.w	r3, r3, #2
    b872:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    b876:	4613      	mov	r3, r2
		break;
    b878:	e070      	b.n	b95c <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b87a:	f017 0f08 	tst.w	r7, #8
    b87e:	4b57      	ldr	r3, [pc, #348]	; (b9dc <usb_isr+0x2ec>)
    b880:	bf18      	it	ne
    b882:	465b      	movne	r3, fp
    b884:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    b888:	e775      	b.n	b776 <usb_isr+0x86>
				usb_free(packet);
    b88a:	f000 fb63 	bl	bf54 <usb_free>
				packet = tx_first[endpoint];
    b88e:	495b      	ldr	r1, [pc, #364]	; (b9fc <usb_isr+0x30c>)
					switch (tx_state[endpoint]) {
    b890:	4a5b      	ldr	r2, [pc, #364]	; (ba00 <usb_isr+0x310>)
				packet = tx_first[endpoint];
    b892:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    b896:	2b00      	cmp	r3, #0
    b898:	f000 8157 	beq.w	bb4a <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    b89c:	6858      	ldr	r0, [r3, #4]
    b89e:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    b8a2:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    b8a4:	f103 0008 	add.w	r0, r3, #8
    b8a8:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    b8aa:	2903      	cmp	r1, #3
    b8ac:	d805      	bhi.n	b8ba <usb_isr+0x1ca>
    b8ae:	e8df f001 	tbb	[pc, r1]
    b8b2:	0f12      	.short	0x0f12
    b8b4:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    b8b6:	2104      	movs	r1, #4
    b8b8:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    b8ba:	881a      	ldrh	r2, [r3, #0]
    b8bc:	f017 0f08 	tst.w	r7, #8
    b8c0:	bf14      	ite	ne
    b8c2:	23c8      	movne	r3, #200	; 0xc8
    b8c4:	2388      	moveq	r3, #136	; 0x88
    b8c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    b8ca:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    b8ce:	e752      	b.n	b776 <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    b8d0:	2102      	movs	r1, #2
    b8d2:	5511      	strb	r1, [r2, r4]
						break;
    b8d4:	e7f1      	b.n	b8ba <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    b8d6:	2103      	movs	r1, #3
    b8d8:	5511      	strb	r1, [r2, r4]
						break;
    b8da:	e7ee      	b.n	b8ba <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    b8dc:	2105      	movs	r1, #5
    b8de:	5511      	strb	r1, [r2, r4]
						break;
    b8e0:	e7eb      	b.n	b8ba <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    b8e2:	4d43      	ldr	r5, [pc, #268]	; (b9f0 <usb_isr+0x300>)
    b8e4:	682a      	ldr	r2, [r5, #0]
		if (data) {
    b8e6:	b33a      	cbz	r2, b938 <usb_isr+0x248>
			size = ep0_tx_len;
    b8e8:	4946      	ldr	r1, [pc, #280]	; (ba04 <usb_isr+0x314>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b8ea:	4c42      	ldr	r4, [pc, #264]	; (b9f4 <usb_isr+0x304>)
			size = ep0_tx_len;
    b8ec:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b8ee:	4846      	ldr	r0, [pc, #280]	; (ba08 <usb_isr+0x318>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b8f0:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b8f4:	7806      	ldrb	r6, [r0, #0]
    b8f6:	2f40      	cmp	r7, #64	; 0x40
    b8f8:	463b      	mov	r3, r7
    b8fa:	bf28      	it	cs
    b8fc:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b8fe:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    b902:	f08e 0e01 	eor.w	lr, lr, #1
    b906:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b90a:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    b90e:	f086 0601 	eor.w	r6, r6, #1
    b912:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b914:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    b918:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b91a:	bf14      	ite	ne
    b91c:	20c8      	movne	r0, #200	; 0xc8
    b91e:	2088      	moveq	r0, #136	; 0x88
    b920:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    b924:	441a      	add	r2, r3
			ep0_tx_len -= size;
    b926:	1afb      	subs	r3, r7, r3
    b928:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b92a:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    b92e:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    b930:	2b00      	cmp	r3, #0
    b932:	f000 8136 	beq.w	bba2 <usb_isr+0x4b2>
    b936:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    b938:	4b2c      	ldr	r3, [pc, #176]	; (b9ec <usb_isr+0x2fc>)
    b93a:	881a      	ldrh	r2, [r3, #0]
    b93c:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    b940:	f47f af5f 	bne.w	b802 <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    b944:	789a      	ldrb	r2, [r3, #2]
    b946:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    b94a:	2200      	movs	r2, #0
    b94c:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    b94e:	e758      	b.n	b802 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    b950:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    b954:	f040 808d 	bne.w	ba72 <usb_isr+0x382>
	uint32_t datalen = 0;
    b958:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    b95a:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    b95c:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b960:	4829      	ldr	r0, [pc, #164]	; (ba08 <usb_isr+0x318>)
    b962:	4594      	cmp	ip, r2
    b964:	bf28      	it	cs
    b966:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    b968:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b96a:	7802      	ldrb	r2, [r0, #0]
    b96c:	2f40      	cmp	r7, #64	; 0x40
    b96e:	bf28      	it	cs
    b970:	2740      	movcs	r7, #64	; 0x40
    b972:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b976:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b978:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b97c:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b980:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b984:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    b988:	2600      	movs	r6, #0
	data += size;
    b98a:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    b98c:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    b98e:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    b992:	f082 0601 	eor.w	r6, r2, #1
    b996:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    b998:	f040 8111 	bne.w	bbbe <usb_isr+0x4ce>
    b99c:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    b9a0:	f04f 0501 	mov.w	r5, #1
    b9a4:	d909      	bls.n	b9ba <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b9a6:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    b9aa:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b9ac:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    b9b0:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    b9b2:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    b9b4:	2388      	movs	r3, #136	; 0x88
    b9b6:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b9ba:	2301      	movs	r3, #1
    b9bc:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    b9c0:	e71f      	b.n	b802 <usb_isr+0x112>
    b9c2:	bf00      	nop
    b9c4:	40072000 	.word	0x40072000
    b9c8:	004000c8 	.word	0x004000c8
    b9cc:	1fff8000 	.word	0x1fff8000
    b9d0:	1fffd56c 	.word	0x1fffd56c
    b9d4:	1fffd57c 	.word	0x1fffd57c
    b9d8:	1fffd5bc 	.word	0x1fffd5bc
    b9dc:	00400088 	.word	0x00400088
    b9e0:	1fffd5b8 	.word	0x1fffd5b8
    b9e4:	1fffd5b9 	.word	0x1fffd5b9
    b9e8:	1fffd5e4 	.word	0x1fffd5e4
    b9ec:	1fffd58c 	.word	0x1fffd58c
    b9f0:	1fffd560 	.word	0x1fffd560
    b9f4:	1fffd55d 	.word	0x1fffd55d
    b9f8:	400720c0 	.word	0x400720c0
    b9fc:	1fffd594 	.word	0x1fffd594
    ba00:	1fffd5b4 	.word	0x1fffd5b4
    ba04:	1fffd55e 	.word	0x1fffd55e
    ba08:	1fffd55c 	.word	0x1fffd55c
	switch (setup.wRequestAndType) {
    ba0c:	2b80      	cmp	r3, #128	; 0x80
    ba0e:	f000 818b 	beq.w	bd28 <usb_isr+0x638>
    ba12:	2b82      	cmp	r3, #130	; 0x82
    ba14:	d12d      	bne.n	ba72 <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    ba16:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    ba1a:	2f04      	cmp	r7, #4
    ba1c:	d829      	bhi.n	ba72 <usb_isr+0x382>
		reply_buffer[0] = 0;
    ba1e:	4aa7      	ldr	r2, [pc, #668]	; (bcbc <usb_isr+0x5cc>)
    ba20:	2300      	movs	r3, #0
    ba22:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    ba24:	4ba6      	ldr	r3, [pc, #664]	; (bcc0 <usb_isr+0x5d0>)
    ba26:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    ba2a:	079f      	lsls	r7, r3, #30
    ba2c:	f140 81fc 	bpl.w	be28 <usb_isr+0x738>
    ba30:	2301      	movs	r3, #1
    ba32:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    ba34:	4ba1      	ldr	r3, [pc, #644]	; (bcbc <usb_isr+0x5cc>)
		datalen = 2;
    ba36:	2202      	movs	r2, #2
    ba38:	e790      	b.n	b95c <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    ba3a:	f242 0c21 	movw	ip, #8225	; 0x2021
    ba3e:	4563      	cmp	r3, ip
    ba40:	d0bb      	beq.n	b9ba <usb_isr+0x2ca>
    ba42:	d91d      	bls.n	ba80 <usb_isr+0x390>
    ba44:	f242 2221 	movw	r2, #8737	; 0x2221
    ba48:	4293      	cmp	r3, r2
    ba4a:	d10d      	bne.n	ba68 <usb_isr+0x378>
		switch (setup.wIndex) {
    ba4c:	b2bf      	uxth	r7, r7
    ba4e:	2f00      	cmp	r7, #0
    ba50:	d182      	bne.n	b958 <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    ba52:	4b9c      	ldr	r3, [pc, #624]	; (bcc4 <usb_isr+0x5d4>)
    ba54:	681a      	ldr	r2, [r3, #0]
    ba56:	4b9c      	ldr	r3, [pc, #624]	; (bcc8 <usb_isr+0x5d8>)
    ba58:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    ba5a:	4b9c      	ldr	r3, [pc, #624]	; (bccc <usb_isr+0x5dc>)
    ba5c:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    ba60:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    ba62:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    ba64:	4613      	mov	r3, r2
			break;
    ba66:	e779      	b.n	b95c <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    ba68:	f242 3221 	movw	r2, #8993	; 0x2321
    ba6c:	4293      	cmp	r3, r2
    ba6e:	f43f af73 	beq.w	b958 <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    ba72:	230f      	movs	r3, #15
    ba74:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    ba78:	2301      	movs	r3, #1
    ba7a:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    ba7e:	e6c0      	b.n	b802 <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    ba80:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    ba84:	f000 814a 	beq.w	bd1c <usb_isr+0x62c>
    ba88:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    ba8c:	d1f1      	bne.n	ba72 <usb_isr+0x382>
		usb_configuration = setup.wValue;
    ba8e:	4b90      	ldr	r3, [pc, #576]	; (bcd0 <usb_isr+0x5e0>)
    ba90:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    ba94:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    ba96:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    ba98:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    ba9c:	061a      	lsls	r2, r3, #24
    ba9e:	d406      	bmi.n	baae <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    baa0:	3501      	adds	r5, #1
    baa2:	2d14      	cmp	r5, #20
    baa4:	d00c      	beq.n	bac0 <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    baa6:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    baaa:	061a      	lsls	r2, r3, #24
    baac:	d5f8      	bpl.n	baa0 <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    baae:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    bab2:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    bab4:	6858      	ldr	r0, [r3, #4]
    bab6:	3808      	subs	r0, #8
    bab8:	f000 fa4c 	bl	bf54 <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    babc:	2d14      	cmp	r5, #20
    babe:	d1f2      	bne.n	baa6 <usb_isr+0x3b6>
    bac0:	4a84      	ldr	r2, [pc, #528]	; (bcd4 <usb_isr+0x5e4>)
    bac2:	4b85      	ldr	r3, [pc, #532]	; (bcd8 <usb_isr+0x5e8>)
    bac4:	9202      	str	r2, [sp, #8]
    bac6:	4a85      	ldr	r2, [pc, #532]	; (bcdc <usb_isr+0x5ec>)
    bac8:	9201      	str	r2, [sp, #4]
    baca:	4e85      	ldr	r6, [pc, #532]	; (bce0 <usb_isr+0x5f0>)
    bacc:	4a85      	ldr	r2, [pc, #532]	; (bce4 <usb_isr+0x5f4>)
    bace:	f8df 8218 	ldr.w	r8, [pc, #536]	; bce8 <usb_isr+0x5f8>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bad2:	9403      	str	r4, [sp, #12]
    bad4:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    bad6:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bad8:	461c      	mov	r4, r3
			p = rx_first[i];
    bada:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    bade:	b12f      	cbz	r7, baec <usb_isr+0x3fc>
				n = p->next;
    bae0:	4638      	mov	r0, r7
    bae2:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    bae4:	f000 fa36 	bl	bf54 <usb_free>
			while (p) {
    bae8:	2f00      	cmp	r7, #0
    baea:	d1f9      	bne.n	bae0 <usb_isr+0x3f0>
			rx_last[i] = NULL;
    baec:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    baee:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    baf2:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    baf6:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    bafa:	9300      	str	r3, [sp, #0]
			while (p) {
    bafc:	b12f      	cbz	r7, bb0a <usb_isr+0x41a>
				n = p->next;
    bafe:	4638      	mov	r0, r7
    bb00:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    bb02:	f000 fa27 	bl	bf54 <usb_free>
			while (p) {
    bb06:	2f00      	cmp	r7, #0
    bb08:	d1f9      	bne.n	bafe <usb_isr+0x40e>
			tx_last[i] = NULL;
    bb0a:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    bb0c:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    bb10:	f843 5b04 	str.w	r5, [r3], #4
    bb14:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    bb16:	9b01      	ldr	r3, [sp, #4]
    bb18:	f823 5b02 	strh.w	r5, [r3], #2
    bb1c:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    bb1e:	7823      	ldrb	r3, [r4, #0]
    bb20:	3b02      	subs	r3, #2
    bb22:	2b03      	cmp	r3, #3
    bb24:	f200 8109 	bhi.w	bd3a <usb_isr+0x64a>
    bb28:	e8df f013 	tbh	[pc, r3, lsl #1]
    bb2c:	0104013f 	.word	0x0104013f
    bb30:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    bb34:	4a6d      	ldr	r2, [pc, #436]	; (bcec <usb_isr+0x5fc>)
						b->desc = 0;
    bb36:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    bb3a:	7813      	ldrb	r3, [r2, #0]
    bb3c:	3301      	adds	r3, #1
    bb3e:	7013      	strb	r3, [r2, #0]
    bb40:	e619      	b.n	b776 <usb_isr+0x86>
						rx_first[endpoint] = packet;
    bb42:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    bb46:	4b67      	ldr	r3, [pc, #412]	; (bce4 <usb_isr+0x5f4>)
    bb48:	e5fe      	b.n	b748 <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    bb4a:	5d11      	ldrb	r1, [r2, r4]
    bb4c:	2902      	cmp	r1, #2
    bb4e:	d026      	beq.n	bb9e <usb_isr+0x4ae>
    bb50:	f67f ae11 	bls.w	b776 <usb_isr+0x86>
    bb54:	2903      	cmp	r1, #3
    bb56:	d11d      	bne.n	bb94 <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bb58:	2301      	movs	r3, #1
    bb5a:	5513      	strb	r3, [r2, r4]
						break;
    bb5c:	e60b      	b.n	b776 <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    bb5e:	07e0      	lsls	r0, r4, #31
    bb60:	d46e      	bmi.n	bc40 <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    bb62:	0621      	lsls	r1, r4, #24
    bb64:	d421      	bmi.n	bbaa <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    bb66:	07a2      	lsls	r2, r4, #30
    bb68:	d508      	bpl.n	bb7c <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    bb6a:	4b61      	ldr	r3, [pc, #388]	; (bcf0 <usb_isr+0x600>)
    bb6c:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    bb70:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    bb72:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    bb74:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    bb78:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    bb7c:	06e3      	lsls	r3, r4, #27
    bb7e:	d503      	bpl.n	bb88 <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    bb80:	4b5b      	ldr	r3, [pc, #364]	; (bcf0 <usb_isr+0x600>)
    bb82:	2210      	movs	r2, #16
    bb84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    bb88:	b005      	add	sp, #20
    bb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    bb8e:	f000 fb59 	bl	c244 <usb_serial_flush_callback>
    bb92:	e611      	b.n	b7b8 <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    bb94:	f017 0f08 	tst.w	r7, #8
    bb98:	bf14      	ite	ne
    bb9a:	2303      	movne	r3, #3
    bb9c:	2302      	moveq	r3, #2
    bb9e:	5513      	strb	r3, [r2, r4]
						break;
    bba0:	e5e9      	b.n	b776 <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    bba2:	2f3f      	cmp	r7, #63	; 0x3f
    bba4:	bf98      	it	ls
    bba6:	2200      	movls	r2, #0
    bba8:	e6c5      	b.n	b936 <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bbaa:	4b51      	ldr	r3, [pc, #324]	; (bcf0 <usb_isr+0x600>)
		USB0_ISTAT = USB_ISTAT_STALL;
    bbac:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bbae:	210d      	movs	r1, #13
    bbb0:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    bbb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    bbb8:	07a2      	lsls	r2, r4, #30
    bbba:	d5df      	bpl.n	bb7c <usb_isr+0x48c>
    bbbc:	e7d5      	b.n	bb6a <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bbbe:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    bbc2:	7002      	strb	r2, [r0, #0]
    bbc4:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bbc6:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    bbca:	463a      	mov	r2, r7
    bbcc:	bf28      	it	cs
    bbce:	2240      	movcs	r2, #64	; 0x40
    bbd0:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bbd2:	0410      	lsls	r0, r2, #16
	data += size;
    bbd4:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bbd6:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    bbda:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    bbdc:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bbde:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    bbe2:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    bbe4:	d055      	beq.n	bc92 <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    bbe6:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    bbe8:	4b42      	ldr	r3, [pc, #264]	; (bcf4 <usb_isr+0x604>)
    bbea:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    bbec:	2301      	movs	r3, #1
    bbee:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    bbf2:	e606      	b.n	b802 <usb_isr+0x112>
			switch (setup.wIndex) {
    bbf4:	8892      	ldrh	r2, [r2, #4]
    bbf6:	b95a      	cbnz	r2, bc10 <usb_isr+0x520>
    bbf8:	4a3f      	ldr	r2, [pc, #252]	; (bcf8 <usb_isr+0x608>)
    bbfa:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    bbfc:	f814 1b01 	ldrb.w	r1, [r4], #1
    bc00:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    bc04:	42ac      	cmp	r4, r5
    bc06:	d1f9      	bne.n	bbfc <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    bc08:	4a3c      	ldr	r2, [pc, #240]	; (bcfc <usb_isr+0x60c>)
    bc0a:	6812      	ldr	r2, [r2, #0]
    bc0c:	2a86      	cmp	r2, #134	; 0x86
    bc0e:	d03c      	beq.n	bc8a <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bc10:	4c3b      	ldr	r4, [pc, #236]	; (bd00 <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bc12:	483c      	ldr	r0, [pc, #240]	; (bd04 <usb_isr+0x614>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bc14:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bc16:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bc18:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    bc1a:	f085 0501 	eor.w	r5, r5, #1
    bc1e:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bc20:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    bc24:	f082 0201 	eor.w	r2, r2, #1
    bc28:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bc2a:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    bc2e:	f04f 0000 	mov.w	r0, #0
    bc32:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bc34:	bf14      	ite	ne
    bc36:	22c8      	movne	r2, #200	; 0xc8
    bc38:	2288      	moveq	r2, #136	; 0x88
    bc3a:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    bc3e:	e5de      	b.n	b7fe <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    bc40:	4b2b      	ldr	r3, [pc, #172]	; (bcf0 <usb_isr+0x600>)
		ep0_tx_bdt_bank = 0;
    bc42:	4830      	ldr	r0, [pc, #192]	; (bd04 <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    bc44:	4930      	ldr	r1, [pc, #192]	; (bd08 <usb_isr+0x618>)
    bc46:	4c31      	ldr	r4, [pc, #196]	; (bd0c <usb_isr+0x61c>)
		USB0_CTL = USB_CTL_ODDRST;
    bc48:	2502      	movs	r5, #2
    bc4a:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    bc4e:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    bc50:	482f      	ldr	r0, [pc, #188]	; (bd10 <usb_isr+0x620>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    bc52:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    bc54:	4d2f      	ldr	r5, [pc, #188]	; (bd14 <usb_isr+0x624>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    bc56:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    bc58:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bc5a:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    bc5c:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    bc5e:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    bc60:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    bc62:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bc64:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    bc68:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    bc6a:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    bc6c:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    bc70:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    bc74:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    bc78:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    bc7c:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    bc80:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    bc84:	b005      	add	sp, #20
    bc86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    bc8a:	4a23      	ldr	r2, [pc, #140]	; (bd18 <usb_isr+0x628>)
    bc8c:	200f      	movs	r0, #15
    bc8e:	7010      	strb	r0, [r2, #0]
    bc90:	e7be      	b.n	bc10 <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    bc92:	2f3f      	cmp	r7, #63	; 0x3f
    bc94:	d8a7      	bhi.n	bbe6 <usb_isr+0x4f6>
    bc96:	e690      	b.n	b9ba <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    bc98:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    bc9c:	2f04      	cmp	r7, #4
    bc9e:	f63f aee8 	bhi.w	ba72 <usb_isr+0x382>
    bca2:	0c00      	lsrs	r0, r0, #16
    bca4:	f47f aee5 	bne.w	ba72 <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    bca8:	4a05      	ldr	r2, [pc, #20]	; (bcc0 <usb_isr+0x5d0>)
    bcaa:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    bcae:	f023 0302 	bic.w	r3, r3, #2
    bcb2:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    bcb6:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    bcb8:	4613      	mov	r3, r2
		break;
    bcba:	e64f      	b.n	b95c <usb_isr+0x26c>
    bcbc:	1fffd564 	.word	0x1fffd564
    bcc0:	400720c0 	.word	0x400720c0
    bcc4:	1fffd3c0 	.word	0x1fffd3c0
    bcc8:	1fffd5e0 	.word	0x1fffd5e0
    bccc:	1fffd5dc 	.word	0x1fffd5dc
    bcd0:	1fffd5b8 	.word	0x1fffd5b8
    bcd4:	1fffd5a4 	.word	0x1fffd5a4
    bcd8:	1fffd5b4 	.word	0x1fffd5b4
    bcdc:	1fffd5bc 	.word	0x1fffd5bc
    bce0:	1fffd56c 	.word	0x1fffd56c
    bce4:	1fffd57c 	.word	0x1fffd57c
    bce8:	1fffd594 	.word	0x1fffd594
    bcec:	1fffd5c4 	.word	0x1fffd5c4
    bcf0:	40072000 	.word	0x40072000
    bcf4:	1fffd55e 	.word	0x1fffd55e
    bcf8:	1fffd5d3 	.word	0x1fffd5d3
    bcfc:	1fffd5d4 	.word	0x1fffd5d4
    bd00:	1fffd55d 	.word	0x1fffd55d
    bd04:	1fffd55c 	.word	0x1fffd55c
    bd08:	1fff8000 	.word	0x1fff8000
    bd0c:	00400088 	.word	0x00400088
    bd10:	1fffd4dc 	.word	0x1fffd4dc
    bd14:	1fffd51c 	.word	0x1fffd51c
    bd18:	1fffd5b9 	.word	0x1fffd5b9
		reply_buffer[0] = usb_configuration;
    bd1c:	4b48      	ldr	r3, [pc, #288]	; (be40 <usb_isr+0x750>)
    bd1e:	4949      	ldr	r1, [pc, #292]	; (be44 <usb_isr+0x754>)
    bd20:	781b      	ldrb	r3, [r3, #0]
    bd22:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    bd24:	460b      	mov	r3, r1
		break;
    bd26:	e619      	b.n	b95c <usb_isr+0x26c>
		reply_buffer[0] = 0;
    bd28:	4a46      	ldr	r2, [pc, #280]	; (be44 <usb_isr+0x754>)
    bd2a:	2300      	movs	r3, #0
    bd2c:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    bd2e:	4b45      	ldr	r3, [pc, #276]	; (be44 <usb_isr+0x754>)
		datalen = 2;
    bd30:	2202      	movs	r2, #2
		break;
    bd32:	e613      	b.n	b95c <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bd34:	f04f 0301 	mov.w	r3, #1
    bd38:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    bd3a:	4b43      	ldr	r3, [pc, #268]	; (be48 <usb_isr+0x758>)
    bd3c:	42b3      	cmp	r3, r6
    bd3e:	f104 0401 	add.w	r4, r4, #1
    bd42:	f47f aeca 	bne.w	bada <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    bd46:	4e41      	ldr	r6, [pc, #260]	; (be4c <usb_isr+0x75c>)
    bd48:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    bd4a:	f8df 8104 	ldr.w	r8, [pc, #260]	; be50 <usb_isr+0x760>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bd4e:	4f41      	ldr	r7, [pc, #260]	; (be54 <usb_isr+0x764>)
		usb_rx_memory_needed = 0;
    bd50:	2300      	movs	r3, #0
    bd52:	7033      	strb	r3, [r6, #0]
    bd54:	2504      	movs	r5, #4
			epconf = *cfg++;
    bd56:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    bd5a:	4a3f      	ldr	r2, [pc, #252]	; (be58 <usb_isr+0x768>)
    bd5c:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    bd5e:	071b      	lsls	r3, r3, #28
    bd60:	d425      	bmi.n	bdae <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    bd62:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    bd66:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    bd6a:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    bd6c:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    bd6e:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    bd70:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    bd74:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    bd78:	d1ed      	bne.n	bd56 <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bd7a:	4f38      	ldr	r7, [pc, #224]	; (be5c <usb_isr+0x76c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd7c:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bd7e:	783a      	ldrb	r2, [r7, #0]
    bd80:	f042 0002 	orr.w	r0, r2, #2
    bd84:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    bd88:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bd8c:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd90:	2d00      	cmp	r5, #0
    bd92:	d14d      	bne.n	be30 <usb_isr+0x740>
    bd94:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    bd96:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    bd9a:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    bd9c:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd9e:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    bda2:	2301      	movs	r3, #1
    bda4:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    bda8:	e52b      	b.n	b802 <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    bdaa:	7025      	strb	r5, [r4, #0]
				break;
    bdac:	e7c5      	b.n	bd3a <usb_isr+0x64a>
				p = usb_malloc();
    bdae:	f000 f8b1 	bl	bf14 <usb_malloc>
				if (p) {
    bdb2:	2800      	cmp	r0, #0
    bdb4:	d032      	beq.n	be1c <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    bdb6:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    bdba:	3008      	adds	r0, #8
    bdbc:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bdbe:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    bdc2:	f000 f8a7 	bl	bf14 <usb_malloc>
				if (p) {
    bdc6:	b308      	cbz	r0, be0c <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    bdc8:	f045 0301 	orr.w	r3, r5, #1
    bdcc:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    bdd0:	3008      	adds	r0, #8
    bdd2:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    bdd4:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    bdd8:	e7c3      	b.n	bd62 <usb_isr+0x672>
			if (list->addr == NULL) break;
    bdda:	4a21      	ldr	r2, [pc, #132]	; (be60 <usb_isr+0x770>)
    bddc:	6853      	ldr	r3, [r2, #4]
    bdde:	2b00      	cmp	r3, #0
    bde0:	f43f ae47 	beq.w	ba72 <usb_isr+0x382>
    bde4:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    bde6:	b2bf      	uxth	r7, r7
    bde8:	e004      	b.n	bdf4 <usb_isr+0x704>
			if (list->addr == NULL) break;
    bdea:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    bdec:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    bdee:	2b00      	cmp	r3, #0
    bdf0:	f43f ae3f 	beq.w	ba72 <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    bdf4:	8811      	ldrh	r1, [r2, #0]
    bdf6:	4281      	cmp	r1, r0
    bdf8:	d1f7      	bne.n	bdea <usb_isr+0x6fa>
    bdfa:	8851      	ldrh	r1, [r2, #2]
    bdfc:	42b9      	cmp	r1, r7
    bdfe:	d1f4      	bne.n	bdea <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    be00:	0a00      	lsrs	r0, r0, #8
    be02:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    be04:	bf0c      	ite	eq
    be06:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    be08:	8912      	ldrhne	r2, [r2, #8]
    be0a:	e5a7      	b.n	b95c <usb_isr+0x26c>
					usb_rx_memory_needed++;
    be0c:	7833      	ldrb	r3, [r6, #0]
    be0e:	3301      	adds	r3, #1
    be10:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    be12:	f045 0301 	orr.w	r3, r5, #1
    be16:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    be1a:	e7a2      	b.n	bd62 <usb_isr+0x672>
					usb_rx_memory_needed++;
    be1c:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    be1e:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    be22:	3301      	adds	r3, #1
    be24:	7033      	strb	r3, [r6, #0]
    be26:	e7cc      	b.n	bdc2 <usb_isr+0x6d2>
		data = reply_buffer;
    be28:	4b06      	ldr	r3, [pc, #24]	; (be44 <usb_isr+0x754>)
		datalen = 2;
    be2a:	2202      	movs	r2, #2
    be2c:	e596      	b.n	b95c <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    be2e:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    be30:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    be32:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    be34:	f082 0601 	eor.w	r6, r2, #1
    be38:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    be3a:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    be3e:	e5bc      	b.n	b9ba <usb_isr+0x2ca>
    be40:	1fffd5b8 	.word	0x1fffd5b8
    be44:	1fffd564 	.word	0x1fffd564
    be48:	1fffd57c 	.word	0x1fffd57c
    be4c:	1fffd5c4 	.word	0x1fffd5c4
    be50:	00015564 	.word	0x00015564
    be54:	00400088 	.word	0x00400088
    be58:	400720c0 	.word	0x400720c0
    be5c:	1fffd55c 	.word	0x1fffd55c
    be60:	00015510 	.word	0x00015510

0000be64 <usb_init>:



void usb_init(void)
{
    be64:	b570      	push	{r4, r5, r6, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    be66:	f000 fab3 	bl	c3d0 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    be6a:	2300      	movs	r3, #0
    be6c:	4a1a      	ldr	r2, [pc, #104]	; (bed8 <usb_init+0x74>)
		table[i].desc = 0;
    be6e:	4619      	mov	r1, r3
    be70:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    be74:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    be78:	3301      	adds	r3, #1
    be7a:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    be7c:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    be7e:	d1f7      	bne.n	be70 <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    be80:	4c16      	ldr	r4, [pc, #88]	; (bedc <usb_init+0x78>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    be82:	4b17      	ldr	r3, [pc, #92]	; (bee0 <usb_init+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    be84:	6b60      	ldr	r0, [r4, #52]	; 0x34

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    be86:	4d17      	ldr	r5, [pc, #92]	; (bee4 <usb_init+0x80>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    be88:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    be8c:	6360      	str	r0, [r4, #52]	; 0x34
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    be8e:	f3c2 2407 	ubfx	r4, r2, #8, #8
    be92:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_USBCTRL = 0;
    be96:	4c14      	ldr	r4, [pc, #80]	; (bee8 <usb_init+0x84>)
	USB0_ISTAT = 0xFF;
    be98:	20ff      	movs	r0, #255	; 0xff
	USB0_CTL = USB_CTL_USBENSOFEN;
    be9a:	f04f 0c01 	mov.w	ip, #1
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    be9e:	f3c2 4607 	ubfx	r6, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    bea2:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    bea4:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    bea8:	f04f 2ee0 	mov.w	lr, #3758153728	; 0xe000e000
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    beac:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_ISTAT = 0xFF;
    beb0:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
	USB0_ERRSTAT = 0xFF;
    beb4:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    beb8:	7418      	strb	r0, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    beba:	f883 c094 	strb.w	ip, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    bebe:	7021      	strb	r1, [r4, #0]
	USB0_INTEN = USB_INTEN_USBRSTEN;
    bec0:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    bec4:	2370      	movs	r3, #112	; 0x70
    bec6:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    beca:	f44f 7200 	mov.w	r2, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    bece:	2310      	movs	r3, #16
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    bed0:	f8ce 2108 	str.w	r2, [lr, #264]	; 0x108
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    bed4:	7223      	strb	r3, [r4, #8]
}
    bed6:	bd70      	pop	{r4, r5, r6, pc}
    bed8:	1fff8000 	.word	0x1fff8000
    bedc:	40048000 	.word	0x40048000
    bee0:	40072000 	.word	0x40072000
    bee4:	e000e400 	.word	0xe000e400
    bee8:	40072100 	.word	0x40072100

0000beec <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    beec:	f000 b8ac 	b.w	c048 <usb_serial_flush_input>

0000bef0 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    bef0:	f000 b87c 	b.w	bfec <usb_serial_peekchar>

0000bef4 <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    bef4:	f000 b856 	b.w	bfa4 <usb_serial_getchar>

0000bef8 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    bef8:	f000 b890 	b.w	c01c <usb_serial_available>

0000befc <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    befc:	f000 b976 	b.w	c1ec <usb_serial_flush_output>

0000bf00 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    bf00:	f000 b950 	b.w	c1a4 <usb_serial_write_buffer_free>

0000bf04 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    bf04:	4608      	mov	r0, r1
    bf06:	4611      	mov	r1, r2
    bf08:	f000 b8ba 	b.w	c080 <usb_serial_write>

0000bf0c <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    bf0c:	4608      	mov	r0, r1
    bf0e:	f000 b93b 	b.w	c188 <usb_serial_putchar>
    bf12:	bf00      	nop

0000bf14 <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    bf14:	b672      	cpsid	i
	avail = usb_buffer_available;
    bf16:	490d      	ldr	r1, [pc, #52]	; (bf4c <usb_malloc+0x38>)
    bf18:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    bf1a:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    bf1e:	280b      	cmp	r0, #11
    bf20:	dc10      	bgt.n	bf44 <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    bf22:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    bf26:	40c2      	lsrs	r2, r0
    bf28:	ea23 0302 	bic.w	r3, r3, r2
    bf2c:	600b      	str	r3, [r1, #0]
	__enable_irq();
    bf2e:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    bf30:	4a07      	ldr	r2, [pc, #28]	; (bf50 <usb_malloc+0x3c>)
    bf32:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    bf36:	00c1      	lsls	r1, r0, #3
    bf38:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    bf3c:	2300      	movs	r3, #0
    bf3e:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    bf40:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    bf42:	4770      	bx	lr
		__enable_irq();
    bf44:	b662      	cpsie	i
		return NULL;
    bf46:	2000      	movs	r0, #0
    bf48:	4770      	bx	lr
    bf4a:	bf00      	nop
    bf4c:	1fff8a0c 	.word	0x1fff8a0c
    bf50:	1fff83bc 	.word	0x1fff83bc

0000bf54 <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    bf54:	4b0e      	ldr	r3, [pc, #56]	; (bf90 <usb_free+0x3c>)
    bf56:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    bf58:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    bf5c:	d210      	bcs.n	bf80 <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    bf5e:	4a0d      	ldr	r2, [pc, #52]	; (bf94 <usb_free+0x40>)
    bf60:	7812      	ldrb	r2, [r2, #0]
    bf62:	b972      	cbnz	r2, bf82 <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    bf64:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    bf66:	4a0c      	ldr	r2, [pc, #48]	; (bf98 <usb_free+0x44>)
	usb_buffer_available |= mask;
    bf68:	490c      	ldr	r1, [pc, #48]	; (bf9c <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    bf6a:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    bf6e:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    bf70:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    bf74:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    bf76:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    bf7a:	4303      	orrs	r3, r0
    bf7c:	600b      	str	r3, [r1, #0]
	__enable_irq();
    bf7e:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    bf80:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    bf82:	4a07      	ldr	r2, [pc, #28]	; (bfa0 <usb_free+0x4c>)
    bf84:	7812      	ldrb	r2, [r2, #0]
    bf86:	2a00      	cmp	r2, #0
    bf88:	d0ec      	beq.n	bf64 <usb_free+0x10>
		usb_rx_memory(p);
    bf8a:	f7ff bb2b 	b.w	b5e4 <usb_rx_memory>
    bf8e:	bf00      	nop
    bf90:	1fff83bc 	.word	0x1fff83bc
    bf94:	1fffd5c4 	.word	0x1fffd5c4
    bf98:	38e38e39 	.word	0x38e38e39
    bf9c:	1fff8a0c 	.word	0x1fff8a0c
    bfa0:	1fffd5b8 	.word	0x1fffd5b8

0000bfa4 <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    bfa4:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    bfa6:	4c0f      	ldr	r4, [pc, #60]	; (bfe4 <usb_serial_getchar+0x40>)
    bfa8:	6820      	ldr	r0, [r4, #0]
    bfaa:	b178      	cbz	r0, bfcc <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    bfac:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    bfae:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    bfb0:	18c1      	adds	r1, r0, r3
    bfb2:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    bfb4:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    bfb6:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    bfb8:	d902      	bls.n	bfc0 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    bfba:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    bfbc:	4628      	mov	r0, r5
    bfbe:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    bfc0:	f7ff ffc8 	bl	bf54 <usb_free>
		rx_packet = NULL;
    bfc4:	2300      	movs	r3, #0
    bfc6:	6023      	str	r3, [r4, #0]
}
    bfc8:	4628      	mov	r0, r5
    bfca:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    bfcc:	4b06      	ldr	r3, [pc, #24]	; (bfe8 <usb_serial_getchar+0x44>)
    bfce:	781b      	ldrb	r3, [r3, #0]
    bfd0:	b12b      	cbz	r3, bfde <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    bfd2:	2003      	movs	r0, #3
    bfd4:	f7ff face 	bl	b574 <usb_rx>
    bfd8:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    bfda:	2800      	cmp	r0, #0
    bfdc:	d1e6      	bne.n	bfac <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    bfde:	f04f 35ff 	mov.w	r5, #4294967295
    bfe2:	e7eb      	b.n	bfbc <usb_serial_getchar+0x18>
    bfe4:	1fffd5c8 	.word	0x1fffd5c8
    bfe8:	1fffd5b8 	.word	0x1fffd5b8

0000bfec <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    bfec:	b510      	push	{r4, lr}
	if (!rx_packet) {
    bfee:	4c09      	ldr	r4, [pc, #36]	; (c014 <usb_serial_peekchar+0x28>)
    bff0:	6820      	ldr	r0, [r4, #0]
    bff2:	b118      	cbz	r0, bffc <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    bff4:	8843      	ldrh	r3, [r0, #2]
    bff6:	4418      	add	r0, r3
    bff8:	7a00      	ldrb	r0, [r0, #8]
}
    bffa:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    bffc:	4b06      	ldr	r3, [pc, #24]	; (c018 <usb_serial_peekchar+0x2c>)
    bffe:	781b      	ldrb	r3, [r3, #0]
    c000:	b12b      	cbz	r3, c00e <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    c002:	2003      	movs	r0, #3
    c004:	f7ff fab6 	bl	b574 <usb_rx>
    c008:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    c00a:	2800      	cmp	r0, #0
    c00c:	d1f2      	bne.n	bff4 <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    c00e:	f04f 30ff 	mov.w	r0, #4294967295
}
    c012:	bd10      	pop	{r4, pc}
    c014:	1fffd5c8 	.word	0x1fffd5c8
    c018:	1fffd5b8 	.word	0x1fffd5b8

0000c01c <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c01c:	4b08      	ldr	r3, [pc, #32]	; (c040 <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    c01e:	4a09      	ldr	r2, [pc, #36]	; (c044 <usb_serial_available+0x28>)
    c020:	681b      	ldr	r3, [r3, #0]
{
    c022:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    c024:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c026:	b11b      	cbz	r3, c030 <usb_serial_available+0x14>
    c028:	881a      	ldrh	r2, [r3, #0]
    c02a:	885b      	ldrh	r3, [r3, #2]
    c02c:	1ad3      	subs	r3, r2, r3
    c02e:	441c      	add	r4, r3
	if (count == 0) yield();
    c030:	b10c      	cbz	r4, c036 <usb_serial_available+0x1a>
	return count;
}
    c032:	4620      	mov	r0, r4
    c034:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    c036:	f000 f929 	bl	c28c <yield>
}
    c03a:	4620      	mov	r0, r4
    c03c:	bd10      	pop	{r4, pc}
    c03e:	bf00      	nop
    c040:	1fffd5c8 	.word	0x1fffd5c8
    c044:	1fffd5bc 	.word	0x1fffd5bc

0000c048 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    c048:	4b0b      	ldr	r3, [pc, #44]	; (c078 <usb_serial_flush_input+0x30>)
    c04a:	781b      	ldrb	r3, [r3, #0]
    c04c:	b19b      	cbz	r3, c076 <usb_serial_flush_input+0x2e>
{
    c04e:	b510      	push	{r4, lr}
	if (rx_packet) {
    c050:	4c0a      	ldr	r4, [pc, #40]	; (c07c <usb_serial_flush_input+0x34>)
    c052:	6820      	ldr	r0, [r4, #0]
    c054:	b148      	cbz	r0, c06a <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    c056:	f7ff ff7d 	bl	bf54 <usb_free>
		rx_packet = NULL;
    c05a:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    c05c:	2003      	movs	r0, #3
		rx_packet = NULL;
    c05e:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    c060:	f7ff fa88 	bl	b574 <usb_rx>
		if (!rx) break;
    c064:	b130      	cbz	r0, c074 <usb_serial_flush_input+0x2c>
		usb_free(rx);
    c066:	f7ff ff75 	bl	bf54 <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    c06a:	2003      	movs	r0, #3
    c06c:	f7ff fa82 	bl	b574 <usb_rx>
		if (!rx) break;
    c070:	2800      	cmp	r0, #0
    c072:	d1f8      	bne.n	c066 <usb_serial_flush_input+0x1e>
	}
}
    c074:	bd10      	pop	{r4, pc}
    c076:	4770      	bx	lr
    c078:	1fffd5b8 	.word	0x1fffd5b8
    c07c:	1fffd5c8 	.word	0x1fffd5c8

0000c080 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    c080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    c084:	f8df 90ec 	ldr.w	r9, [pc, #236]	; c174 <usb_serial_write+0xf4>
{
    c088:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    c08a:	2201      	movs	r2, #1
    c08c:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    c090:	9101      	str	r1, [sp, #4]
    c092:	b379      	cbz	r1, c0f4 <usb_serial_write+0x74>
    c094:	4f38      	ldr	r7, [pc, #224]	; (c178 <usb_serial_write+0xf8>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    c096:	f8df 80e4 	ldr.w	r8, [pc, #228]	; c17c <usb_serial_write+0xfc>
	while (size > 0) {
    c09a:	9d01      	ldr	r5, [sp, #4]
    c09c:	4e38      	ldr	r6, [pc, #224]	; (c180 <usb_serial_write+0x100>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    c09e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c184 <usb_serial_write+0x104>
    c0a2:	4683      	mov	fp, r0
		if (!tx_packet) {
    c0a4:	6839      	ldr	r1, [r7, #0]
    c0a6:	b3a1      	cbz	r1, c112 <usb_serial_write+0x92>
		len = CDC_TX_SIZE - tx_packet->index;
    c0a8:	f8b1 e002 	ldrh.w	lr, [r1, #2]
    c0ac:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    c0b0:	45ac      	cmp	ip, r5
    c0b2:	bf28      	it	cs
    c0b4:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    c0b6:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    c0ba:	2200      	movs	r2, #0
		tx_packet->index += len;
    c0bc:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    c0be:	7032      	strb	r2, [r6, #0]
		size -= len;
    c0c0:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    c0c4:	804c      	strh	r4, [r1, #2]
		dest = tx_packet->buf + tx_packet->index;
    c0c6:	f101 0208 	add.w	r2, r1, #8
		while (len-- > 0) *dest++ = *src++;
    c0ca:	f1bc 0f00 	cmp.w	ip, #0
    c0ce:	d00a      	beq.n	c0e6 <usb_serial_write+0x66>
    c0d0:	f10e 3eff 	add.w	lr, lr, #4294967295
    c0d4:	4472      	add	r2, lr
    c0d6:	44dc      	add	ip, fp
    c0d8:	f81b 4b01 	ldrb.w	r4, [fp], #1
    c0dc:	f802 4f01 	strb.w	r4, [r2, #1]!
    c0e0:	45dc      	cmp	ip, fp
    c0e2:	d1f9      	bne.n	c0d8 <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    c0e4:	884c      	ldrh	r4, [r1, #2]
    c0e6:	2c3f      	cmp	r4, #63	; 0x3f
    c0e8:	d80b      	bhi.n	c102 <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    c0ea:	2205      	movs	r2, #5
    c0ec:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    c0f0:	2d00      	cmp	r5, #0
    c0f2:	d1d7      	bne.n	c0a4 <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    c0f4:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    c0f6:	2300      	movs	r3, #0
    c0f8:	f889 3000 	strb.w	r3, [r9]
}
    c0fc:	b003      	add	sp, #12
    c0fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    c102:	2240      	movs	r2, #64	; 0x40
    c104:	800a      	strh	r2, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c106:	2004      	movs	r0, #4
    c108:	f7ff faac 	bl	b664 <usb_tx>
			tx_packet = NULL;
    c10c:	2200      	movs	r2, #0
    c10e:	603a      	str	r2, [r7, #0]
    c110:	e7eb      	b.n	c0ea <usb_serial_write+0x6a>
				if (!usb_configuration) {
    c112:	f898 2000 	ldrb.w	r2, [r8]
    c116:	b32a      	cbz	r2, c164 <usb_serial_write+0xe4>
    c118:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
    c11c:	e008      	b.n	c130 <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c11e:	3c01      	subs	r4, #1
    c120:	d019      	beq.n	c156 <usb_serial_write+0xd6>
    c122:	7832      	ldrb	r2, [r6, #0]
    c124:	b9ba      	cbnz	r2, c156 <usb_serial_write+0xd6>
				yield();
    c126:	f000 f8b1 	bl	c28c <yield>
				if (!usb_configuration) {
    c12a:	f898 2000 	ldrb.w	r2, [r8]
    c12e:	b1ca      	cbz	r2, c164 <usb_serial_write+0xe4>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    c130:	2004      	movs	r0, #4
    c132:	f7ff fa41 	bl	b5b8 <usb_tx_packet_count>
    c136:	2807      	cmp	r0, #7
    c138:	d8f1      	bhi.n	c11e <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    c13a:	f04f 0301 	mov.w	r3, #1
    c13e:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    c142:	f7ff fee7 	bl	bf14 <usb_malloc>
    c146:	4601      	mov	r1, r0
    c148:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    c14a:	2800      	cmp	r0, #0
    c14c:	d1ac      	bne.n	c0a8 <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c14e:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    c150:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c154:	d1e5      	bne.n	c122 <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    c156:	2301      	movs	r3, #1
					return -1;
    c158:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    c15c:	7033      	strb	r3, [r6, #0]
}
    c15e:	b003      	add	sp, #12
    c160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    c164:	2300      	movs	r3, #0
					return -1;
    c166:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    c16a:	f889 3000 	strb.w	r3, [r9]
}
    c16e:	b003      	add	sp, #12
    c170:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c174:	1fffd5cd 	.word	0x1fffd5cd
    c178:	1fffd5d0 	.word	0x1fffd5d0
    c17c:	1fffd5b8 	.word	0x1fffd5b8
    c180:	1fffd5cc 	.word	0x1fffd5cc
    c184:	1fffd5e4 	.word	0x1fffd5e4

0000c188 <usb_serial_putchar>:
{
    c188:	b500      	push	{lr}
    c18a:	b083      	sub	sp, #12
    c18c:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    c18e:	2101      	movs	r1, #1
    c190:	f10d 0007 	add.w	r0, sp, #7
{
    c194:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    c198:	f7ff ff72 	bl	c080 <usb_serial_write>
}
    c19c:	b003      	add	sp, #12
    c19e:	f85d fb04 	ldr.w	pc, [sp], #4
    c1a2:	bf00      	nop

0000c1a4 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    c1a4:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    c1a6:	4d0e      	ldr	r5, [pc, #56]	; (c1e0 <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    c1a8:	4c0e      	ldr	r4, [pc, #56]	; (c1e4 <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    c1aa:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    c1ac:	2301      	movs	r3, #1
    c1ae:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    c1b0:	b128      	cbz	r0, c1be <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    c1b2:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    c1b4:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    c1b6:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    c1ba:	7023      	strb	r3, [r4, #0]
	return len;
}
    c1bc:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    c1be:	4b0a      	ldr	r3, [pc, #40]	; (c1e8 <usb_serial_write_buffer_free+0x44>)
    c1c0:	781b      	ldrb	r3, [r3, #0]
    c1c2:	b913      	cbnz	r3, c1ca <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    c1c4:	2000      	movs	r0, #0
    c1c6:	7020      	strb	r0, [r4, #0]
}
    c1c8:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    c1ca:	2004      	movs	r0, #4
    c1cc:	f7ff f9f4 	bl	b5b8 <usb_tx_packet_count>
		if (!usb_configuration ||
    c1d0:	2807      	cmp	r0, #7
    c1d2:	d8f7      	bhi.n	c1c4 <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    c1d4:	f7ff fe9e 	bl	bf14 <usb_malloc>
    c1d8:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    c1da:	2800      	cmp	r0, #0
    c1dc:	d1e9      	bne.n	c1b2 <usb_serial_write_buffer_free+0xe>
    c1de:	e7f1      	b.n	c1c4 <usb_serial_write_buffer_free+0x20>
    c1e0:	1fffd5d0 	.word	0x1fffd5d0
    c1e4:	1fffd5cd 	.word	0x1fffd5cd
    c1e8:	1fffd5b8 	.word	0x1fffd5b8

0000c1ec <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    c1ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    c1ee:	4b11      	ldr	r3, [pc, #68]	; (c234 <usb_serial_flush_output+0x48>)
    c1f0:	781b      	ldrb	r3, [r3, #0]
    c1f2:	b18b      	cbz	r3, c218 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    c1f4:	4e10      	ldr	r6, [pc, #64]	; (c238 <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    c1f6:	4d11      	ldr	r5, [pc, #68]	; (c23c <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    c1f8:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    c1fa:	2701      	movs	r7, #1
    c1fc:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    c1fe:	b164      	cbz	r4, c21a <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    c200:	4b0f      	ldr	r3, [pc, #60]	; (c240 <usb_serial_flush_output+0x54>)
    c202:	2700      	movs	r7, #0
    c204:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    c206:	8863      	ldrh	r3, [r4, #2]
    c208:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c20a:	4621      	mov	r1, r4
    c20c:	2004      	movs	r0, #4
    c20e:	f7ff fa29 	bl	b664 <usb_tx>
		tx_packet = NULL;
    c212:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    c214:	2300      	movs	r3, #0
    c216:	702b      	strb	r3, [r5, #0]
}
    c218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    c21a:	f7ff fe7b 	bl	bf14 <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    c21e:	4b08      	ldr	r3, [pc, #32]	; (c240 <usb_serial_flush_output+0x54>)
		if (tx) {
    c220:	4601      	mov	r1, r0
    c222:	b120      	cbz	r0, c22e <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    c224:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    c226:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    c228:	f7ff fa1c 	bl	b664 <usb_tx>
    c22c:	e7f2      	b.n	c214 <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    c22e:	701f      	strb	r7, [r3, #0]
    c230:	e7f0      	b.n	c214 <usb_serial_flush_output+0x28>
    c232:	bf00      	nop
    c234:	1fffd5b8 	.word	0x1fffd5b8
    c238:	1fffd5d0 	.word	0x1fffd5d0
    c23c:	1fffd5cd 	.word	0x1fffd5cd
    c240:	1fffd5e4 	.word	0x1fffd5e4

0000c244 <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    c244:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    c246:	4b0e      	ldr	r3, [pc, #56]	; (c280 <usb_serial_flush_callback+0x3c>)
    c248:	781b      	ldrb	r3, [r3, #0]
    c24a:	b953      	cbnz	r3, c262 <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    c24c:	4c0d      	ldr	r4, [pc, #52]	; (c284 <usb_serial_flush_callback+0x40>)
    c24e:	6821      	ldr	r1, [r4, #0]
    c250:	b141      	cbz	r1, c264 <usb_serial_flush_callback+0x20>
    c252:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    c256:	884b      	ldrh	r3, [r1, #2]
    c258:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c25a:	2004      	movs	r0, #4
    c25c:	f7ff fa02 	bl	b664 <usb_tx>
		tx_packet = NULL;
    c260:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    c262:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    c264:	f7ff fe56 	bl	bf14 <usb_malloc>
		if (tx) {
    c268:	4601      	mov	r1, r0
    c26a:	b120      	cbz	r0, c276 <usb_serial_flush_callback+0x32>
}
    c26c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    c270:	2004      	movs	r0, #4
    c272:	f7ff b9f7 	b.w	b664 <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    c276:	4b04      	ldr	r3, [pc, #16]	; (c288 <usb_serial_flush_callback+0x44>)
    c278:	2201      	movs	r2, #1
    c27a:	701a      	strb	r2, [r3, #0]
}
    c27c:	bd38      	pop	{r3, r4, r5, pc}
    c27e:	bf00      	nop
    c280:	1fffd5cd 	.word	0x1fffd5cd
    c284:	1fffd5d0 	.word	0x1fffd5d0
    c288:	1fffd5e4 	.word	0x1fffd5e4

0000c28c <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    c28c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    c290:	4e32      	ldr	r6, [pc, #200]	; (c35c <yield+0xd0>)
    c292:	7833      	ldrb	r3, [r6, #0]
    c294:	b163      	cbz	r3, c2b0 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    c296:	4f32      	ldr	r7, [pc, #200]	; (c360 <yield+0xd4>)
    c298:	783a      	ldrb	r2, [r7, #0]
    c29a:	b94a      	cbnz	r2, c2b0 <yield+0x24>
	running = 1;
    c29c:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c29e:	07d9      	lsls	r1, r3, #31
	running = 1;
    c2a0:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c2a2:	d443      	bmi.n	c32c <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c2a4:	079a      	lsls	r2, r3, #30
    c2a6:	d426      	bmi.n	c2f6 <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    c2a8:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c2aa:	075b      	lsls	r3, r3, #29
	running = 0;
    c2ac:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c2ae:	d401      	bmi.n	c2b4 <yield+0x28>
	
};
    c2b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    c2b4:	4b2b      	ldr	r3, [pc, #172]	; (c364 <yield+0xd8>)
    c2b6:	681a      	ldr	r2, [r3, #0]
    c2b8:	2a00      	cmp	r2, #0
    c2ba:	d0f9      	beq.n	c2b0 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c2bc:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    c2c0:	2a00      	cmp	r2, #0
    c2c2:	d1f5      	bne.n	c2b0 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c2c4:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    c2c8:	b672      	cpsid	i
		EventResponder *first = firstYield;
    c2ca:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    c2cc:	2800      	cmp	r0, #0
    c2ce:	d03a      	beq.n	c346 <yield+0xba>
		if (runningFromYield) {
    c2d0:	4c25      	ldr	r4, [pc, #148]	; (c368 <yield+0xdc>)
    c2d2:	7821      	ldrb	r1, [r4, #0]
    c2d4:	2900      	cmp	r1, #0
    c2d6:	d136      	bne.n	c346 <yield+0xba>
		firstYield = first->_next;
    c2d8:	6942      	ldr	r2, [r0, #20]
    c2da:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    c2dc:	2301      	movs	r3, #1
    c2de:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    c2e0:	2a00      	cmp	r2, #0
    c2e2:	d037      	beq.n	c354 <yield+0xc8>
			firstYield->_prev = nullptr;
    c2e4:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    c2e6:	b905      	cbnz	r5, c2ea <yield+0x5e>
    c2e8:	b662      	cpsie	i
		first->_triggered = false;
    c2ea:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    c2ec:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    c2ee:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c2f0:	4798      	blx	r3
		runningFromYield = false;
    c2f2:	7025      	strb	r5, [r4, #0]
    c2f4:	e7dc      	b.n	c2b0 <yield+0x24>
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c2f6:	f8df 8074 	ldr.w	r8, [pc, #116]	; c36c <yield+0xe0>
    c2fa:	f898 2000 	ldrb.w	r2, [r8]
    c2fe:	2a00      	cmp	r2, #0
    c300:	d0d2      	beq.n	c2a8 <yield+0x1c>
    c302:	2500      	movs	r5, #0
    c304:	f8df 9068 	ldr.w	r9, [pc, #104]	; c370 <yield+0xe4>
    c308:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    c30a:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		if (available()) (*_serialEvent)();
    c30e:	6823      	ldr	r3, [r4, #0]
    c310:	4620      	mov	r0, r4
    c312:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c314:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    c316:	4798      	blx	r3
    c318:	b108      	cbz	r0, c31e <yield+0x92>
    c31a:	6923      	ldr	r3, [r4, #16]
    c31c:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c31e:	f898 2000 	ldrb.w	r2, [r8]
    c322:	b2eb      	uxtb	r3, r5
    c324:	429a      	cmp	r2, r3
    c326:	d8f0      	bhi.n	c30a <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c328:	7833      	ldrb	r3, [r6, #0]
    c32a:	e7bd      	b.n	c2a8 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    c32c:	f7ff fe76 	bl	c01c <usb_serial_available>
		if (Serial.available()) serialEvent();
    c330:	b968      	cbnz	r0, c34e <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    c332:	4b10      	ldr	r3, [pc, #64]	; (c374 <yield+0xe8>)
    c334:	781b      	ldrb	r3, [r3, #0]
    c336:	b90b      	cbnz	r3, c33c <yield+0xb0>
    c338:	7833      	ldrb	r3, [r6, #0]
    c33a:	e7b3      	b.n	c2a4 <yield+0x18>
    c33c:	7833      	ldrb	r3, [r6, #0]
    c33e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    c342:	7033      	strb	r3, [r6, #0]
    c344:	e7ae      	b.n	c2a4 <yield+0x18>
		if (doit) __enable_irq();
    c346:	2d00      	cmp	r5, #0
    c348:	d1b2      	bne.n	c2b0 <yield+0x24>
    c34a:	b662      	cpsie	i
    c34c:	e7b0      	b.n	c2b0 <yield+0x24>
		if (Serial.available()) serialEvent();
    c34e:	f000 f83d 	bl	c3cc <serialEvent()>
    c352:	e7ee      	b.n	c332 <yield+0xa6>
			lastYield = nullptr;
    c354:	4b08      	ldr	r3, [pc, #32]	; (c378 <yield+0xec>)
    c356:	601a      	str	r2, [r3, #0]
    c358:	e7c5      	b.n	c2e6 <yield+0x5a>
    c35a:	bf00      	nop
    c35c:	1fff8a10 	.word	0x1fff8a10
    c360:	1fffd5e5 	.word	0x1fffd5e5
    c364:	1fffd3a8 	.word	0x1fffd3a8
    c368:	1fffd3b4 	.word	0x1fffd3b4
    c36c:	1fffd5f4 	.word	0x1fffd5f4
    c370:	1fffd5e8 	.word	0x1fffd5e8
    c374:	000152d4 	.word	0x000152d4
    c378:	1fffd3b8 	.word	0x1fffd3b8

0000c37c <HardwareSerial::addToSerialEventsList()>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
    c37c:	b470      	push	{r4, r5, r6}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c37e:	4e10      	ldr	r6, [pc, #64]	; (c3c0 <HardwareSerial::addToSerialEventsList()+0x44>)
    c380:	4d10      	ldr	r5, [pc, #64]	; (c3c4 <HardwareSerial::addToSerialEventsList()+0x48>)
    c382:	7834      	ldrb	r4, [r6, #0]
    c384:	b1d4      	cbz	r4, c3bc <HardwareSerial::addToSerialEventsList()+0x40>
    c386:	1e62      	subs	r2, r4, #1
    c388:	b2d2      	uxtb	r2, r2
    c38a:	1d29      	adds	r1, r5, #4
    c38c:	462b      	mov	r3, r5
    c38e:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    c392:	e001      	b.n	c398 <HardwareSerial::addToSerialEventsList()+0x1c>
    c394:	428b      	cmp	r3, r1
    c396:	d005      	beq.n	c3a4 <HardwareSerial::addToSerialEventsList()+0x28>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    c398:	f853 2b04 	ldr.w	r2, [r3], #4
    c39c:	4282      	cmp	r2, r0
    c39e:	d1f9      	bne.n	c394 <HardwareSerial::addToSerialEventsList()+0x18>
	}

	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
    c3a0:	bc70      	pop	{r4, r5, r6}
    c3a2:	4770      	bx	lr
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c3a4:	1c63      	adds	r3, r4, #1
    c3a6:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c3a8:	4a07      	ldr	r2, [pc, #28]	; (c3c8 <HardwareSerial::addToSerialEventsList()+0x4c>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c3aa:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c3ac:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c3ae:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c3b2:	f043 0302 	orr.w	r3, r3, #2
    c3b6:	7013      	strb	r3, [r2, #0]
}
    c3b8:	bc70      	pop	{r4, r5, r6}
    c3ba:	4770      	bx	lr
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c3bc:	2301      	movs	r3, #1
    c3be:	e7f3      	b.n	c3a8 <HardwareSerial::addToSerialEventsList()+0x2c>
    c3c0:	1fffd5f4 	.word	0x1fffd5f4
    c3c4:	1fffd5e8 	.word	0x1fffd5e8
    c3c8:	1fff8a10 	.word	0x1fff8a10

0000c3cc <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    c3cc:	4770      	bx	lr
    c3ce:	bf00      	nop

0000c3d0 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    c3d0:	b510      	push	{r4, lr}
    c3d2:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    c3d4:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    c3d6:	4a17      	ldr	r2, [pc, #92]	; (c434 <usb_init_serialnumber+0x64>)
    c3d8:	2470      	movs	r4, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    c3da:	2041      	movs	r0, #65	; 0x41
	FTFL_FCCOB1 = 15;
    c3dc:	210f      	movs	r1, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    c3de:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    c3e0:	7014      	strb	r4, [r2, #0]
	FTFL_FCCOB0 = 0x41;
    c3e2:	71d0      	strb	r0, [r2, #7]
	FTFL_FCCOB1 = 15;
    c3e4:	7191      	strb	r1, [r2, #6]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    c3e6:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    c3e8:	7813      	ldrb	r3, [r2, #0]
    c3ea:	061b      	lsls	r3, r3, #24
    c3ec:	d5fc      	bpl.n	c3e8 <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOB7;
    c3ee:	6890      	ldr	r0, [r2, #8]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    c3f0:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c3f2:	4b11      	ldr	r3, [pc, #68]	; (c438 <usb_init_serialnumber+0x68>)
    c3f4:	4c11      	ldr	r4, [pc, #68]	; (c43c <usb_init_serialnumber+0x6c>)
    c3f6:	4298      	cmp	r0, r3
    c3f8:	bf38      	it	cc
    c3fa:	eb00 0080 	addcc.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    c3fe:	a901      	add	r1, sp, #4
	if (num < 10000000) num = num * 10;
    c400:	bf38      	it	cc
    c402:	0040      	lslcc	r0, r0, #1
	ultoa(num, buf, 10);
    c404:	220a      	movs	r2, #10
    c406:	f7fd fd27 	bl	9e58 <ultoa>
	for (i=0; i<10; i++) {
    c40a:	a901      	add	r1, sp, #4
    c40c:	4620      	mov	r0, r4
    c40e:	2300      	movs	r3, #0
		char c = buf[i];
    c410:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    c414:	3301      	adds	r3, #1
		if (!c) break;
    c416:	b13a      	cbz	r2, c428 <usb_init_serialnumber+0x58>
	for (i=0; i<10; i++) {
    c418:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    c41a:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    c41e:	d1f7      	bne.n	c410 <usb_init_serialnumber+0x40>
    c420:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c422:	7023      	strb	r3, [r4, #0]
}
    c424:	b004      	add	sp, #16
    c426:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c428:	005b      	lsls	r3, r3, #1
    c42a:	b2db      	uxtb	r3, r3
    c42c:	7023      	strb	r3, [r4, #0]
}
    c42e:	b004      	add	sp, #16
    c430:	bd10      	pop	{r4, pc}
    c432:	bf00      	nop
    c434:	40020000 	.word	0x40020000
    c438:	00989680 	.word	0x00989680
    c43c:	1fff8aa0 	.word	0x1fff8aa0

0000c440 <expf>:
    c440:	b538      	push	{r3, r4, r5, lr}
    c442:	4604      	mov	r4, r0
    c444:	f000 f82c 	bl	c4a0 <__ieee754_expf>
    c448:	4605      	mov	r5, r0
    c44a:	4620      	mov	r0, r4
    c44c:	f000 f820 	bl	c490 <finitef>
    c450:	b148      	cbz	r0, c466 <expf+0x26>
    c452:	490d      	ldr	r1, [pc, #52]	; (c488 <expf+0x48>)
    c454:	4620      	mov	r0, r4
    c456:	f000 feaf 	bl	d1b8 <__aeabi_fcmpgt>
    c45a:	b930      	cbnz	r0, c46a <expf+0x2a>
    c45c:	490b      	ldr	r1, [pc, #44]	; (c48c <expf+0x4c>)
    c45e:	4620      	mov	r0, r4
    c460:	f000 fe8c 	bl	d17c <__aeabi_fcmplt>
    c464:	b948      	cbnz	r0, c47a <expf+0x3a>
    c466:	4628      	mov	r0, r5
    c468:	bd38      	pop	{r3, r4, r5, pc}
    c46a:	f001 fe5b 	bl	e124 <__errno>
    c46e:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
    c472:	2322      	movs	r3, #34	; 0x22
    c474:	6003      	str	r3, [r0, #0]
    c476:	4628      	mov	r0, r5
    c478:	bd38      	pop	{r3, r4, r5, pc}
    c47a:	f001 fe53 	bl	e124 <__errno>
    c47e:	2322      	movs	r3, #34	; 0x22
    c480:	2500      	movs	r5, #0
    c482:	6003      	str	r3, [r0, #0]
    c484:	e7ef      	b.n	c466 <expf+0x26>
    c486:	bf00      	nop
    c488:	42b17217 	.word	0x42b17217
    c48c:	c2cff1b5 	.word	0xc2cff1b5

0000c490 <finitef>:
    c490:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    c494:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
    c498:	bfac      	ite	ge
    c49a:	2000      	movge	r0, #0
    c49c:	2001      	movlt	r0, #1
    c49e:	4770      	bx	lr

0000c4a0 <__ieee754_expf>:
    c4a0:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
    c4a4:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    c4a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c4ac:	4604      	mov	r4, r0
    c4ae:	d86c      	bhi.n	c58a <__ieee754_expf+0xea>
    c4b0:	ea4f 75d0 	mov.w	r5, r0, lsr #31
    c4b4:	f000 80c6 	beq.w	c644 <__ieee754_expf+0x1a4>
    c4b8:	497a      	ldr	r1, [pc, #488]	; (c6a4 <__ieee754_expf+0x204>)
    c4ba:	4288      	cmp	r0, r1
    c4bc:	f300 80b4 	bgt.w	c628 <__ieee754_expf+0x188>
    c4c0:	2800      	cmp	r0, #0
    c4c2:	f2c0 80b6 	blt.w	c632 <__ieee754_expf+0x192>
    c4c6:	4b78      	ldr	r3, [pc, #480]	; (c6a8 <__ieee754_expf+0x208>)
    c4c8:	429a      	cmp	r2, r3
    c4ca:	d963      	bls.n	c594 <__ieee754_expf+0xf4>
    c4cc:	4b77      	ldr	r3, [pc, #476]	; (c6ac <__ieee754_expf+0x20c>)
    c4ce:	429a      	cmp	r2, r3
    c4d0:	f200 80c5 	bhi.w	c65e <__ieee754_expf+0x1be>
    c4d4:	4b76      	ldr	r3, [pc, #472]	; (c6b0 <__ieee754_expf+0x210>)
    c4d6:	4620      	mov	r0, r4
    c4d8:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    c4dc:	f000 fba6 	bl	cc2c <__aeabi_fsub>
    c4e0:	4b74      	ldr	r3, [pc, #464]	; (c6b4 <__ieee754_expf+0x214>)
    c4e2:	f1c5 0601 	rsb	r6, r5, #1
    c4e6:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
    c4ea:	4680      	mov	r8, r0
    c4ec:	1b76      	subs	r6, r6, r5
    c4ee:	4649      	mov	r1, r9
    c4f0:	4640      	mov	r0, r8
    c4f2:	f000 fb9b 	bl	cc2c <__aeabi_fsub>
    c4f6:	4601      	mov	r1, r0
    c4f8:	4605      	mov	r5, r0
    c4fa:	f000 fca1 	bl	ce40 <__aeabi_fmul>
    c4fe:	496e      	ldr	r1, [pc, #440]	; (c6b8 <__ieee754_expf+0x218>)
    c500:	4604      	mov	r4, r0
    c502:	f000 fc9d 	bl	ce40 <__aeabi_fmul>
    c506:	496d      	ldr	r1, [pc, #436]	; (c6bc <__ieee754_expf+0x21c>)
    c508:	f000 fb90 	bl	cc2c <__aeabi_fsub>
    c50c:	4621      	mov	r1, r4
    c50e:	f000 fc97 	bl	ce40 <__aeabi_fmul>
    c512:	496b      	ldr	r1, [pc, #428]	; (c6c0 <__ieee754_expf+0x220>)
    c514:	f000 fb8c 	bl	cc30 <__addsf3>
    c518:	4621      	mov	r1, r4
    c51a:	f000 fc91 	bl	ce40 <__aeabi_fmul>
    c51e:	4969      	ldr	r1, [pc, #420]	; (c6c4 <__ieee754_expf+0x224>)
    c520:	f000 fb84 	bl	cc2c <__aeabi_fsub>
    c524:	4621      	mov	r1, r4
    c526:	f000 fc8b 	bl	ce40 <__aeabi_fmul>
    c52a:	4967      	ldr	r1, [pc, #412]	; (c6c8 <__ieee754_expf+0x228>)
    c52c:	f000 fb80 	bl	cc30 <__addsf3>
    c530:	4621      	mov	r1, r4
    c532:	f000 fc85 	bl	ce40 <__aeabi_fmul>
    c536:	4601      	mov	r1, r0
    c538:	4628      	mov	r0, r5
    c53a:	f000 fb77 	bl	cc2c <__aeabi_fsub>
    c53e:	462c      	mov	r4, r5
    c540:	4607      	mov	r7, r0
    c542:	4682      	mov	sl, r0
    c544:	2e00      	cmp	r6, #0
    c546:	d057      	beq.n	c5f8 <__ieee754_expf+0x158>
    c548:	4639      	mov	r1, r7
    c54a:	4628      	mov	r0, r5
    c54c:	f000 fc78 	bl	ce40 <__aeabi_fmul>
    c550:	4639      	mov	r1, r7
    c552:	4604      	mov	r4, r0
    c554:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c558:	f000 fb68 	bl	cc2c <__aeabi_fsub>
    c55c:	4601      	mov	r1, r0
    c55e:	4620      	mov	r0, r4
    c560:	f000 fd22 	bl	cfa8 <__aeabi_fdiv>
    c564:	4601      	mov	r1, r0
    c566:	4648      	mov	r0, r9
    c568:	f000 fb60 	bl	cc2c <__aeabi_fsub>
    c56c:	4641      	mov	r1, r8
    c56e:	f000 fb5d 	bl	cc2c <__aeabi_fsub>
    c572:	4601      	mov	r1, r0
    c574:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    c578:	f000 fb58 	bl	cc2c <__aeabi_fsub>
    c57c:	f116 0f7d 	cmn.w	r6, #125	; 0x7d
    c580:	db64      	blt.n	c64c <__ieee754_expf+0x1ac>
    c582:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    c586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c58a:	4601      	mov	r1, r0
    c58c:	f000 fb50 	bl	cc30 <__addsf3>
    c590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c594:	f1b2 5f50 	cmp.w	r2, #872415232	; 0x34000000
    c598:	d209      	bcs.n	c5ae <__ieee754_expf+0x10e>
    c59a:	494c      	ldr	r1, [pc, #304]	; (c6cc <__ieee754_expf+0x22c>)
    c59c:	4620      	mov	r0, r4
    c59e:	f000 fb47 	bl	cc30 <__addsf3>
    c5a2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c5a6:	f000 fe07 	bl	d1b8 <__aeabi_fcmpgt>
    c5aa:	2800      	cmp	r0, #0
    c5ac:	d174      	bne.n	c698 <__ieee754_expf+0x1f8>
    c5ae:	4621      	mov	r1, r4
    c5b0:	4620      	mov	r0, r4
    c5b2:	f000 fc45 	bl	ce40 <__aeabi_fmul>
    c5b6:	4940      	ldr	r1, [pc, #256]	; (c6b8 <__ieee754_expf+0x218>)
    c5b8:	4605      	mov	r5, r0
    c5ba:	f000 fc41 	bl	ce40 <__aeabi_fmul>
    c5be:	493f      	ldr	r1, [pc, #252]	; (c6bc <__ieee754_expf+0x21c>)
    c5c0:	f000 fb34 	bl	cc2c <__aeabi_fsub>
    c5c4:	4629      	mov	r1, r5
    c5c6:	f000 fc3b 	bl	ce40 <__aeabi_fmul>
    c5ca:	493d      	ldr	r1, [pc, #244]	; (c6c0 <__ieee754_expf+0x220>)
    c5cc:	f000 fb30 	bl	cc30 <__addsf3>
    c5d0:	4629      	mov	r1, r5
    c5d2:	f000 fc35 	bl	ce40 <__aeabi_fmul>
    c5d6:	493b      	ldr	r1, [pc, #236]	; (c6c4 <__ieee754_expf+0x224>)
    c5d8:	f000 fb28 	bl	cc2c <__aeabi_fsub>
    c5dc:	4629      	mov	r1, r5
    c5de:	f000 fc2f 	bl	ce40 <__aeabi_fmul>
    c5e2:	4939      	ldr	r1, [pc, #228]	; (c6c8 <__ieee754_expf+0x228>)
    c5e4:	f000 fb24 	bl	cc30 <__addsf3>
    c5e8:	4629      	mov	r1, r5
    c5ea:	f000 fc29 	bl	ce40 <__aeabi_fmul>
    c5ee:	4601      	mov	r1, r0
    c5f0:	4620      	mov	r0, r4
    c5f2:	f000 fb1b 	bl	cc2c <__aeabi_fsub>
    c5f6:	4682      	mov	sl, r0
    c5f8:	4651      	mov	r1, sl
    c5fa:	4620      	mov	r0, r4
    c5fc:	f000 fc20 	bl	ce40 <__aeabi_fmul>
    c600:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c604:	4605      	mov	r5, r0
    c606:	4650      	mov	r0, sl
    c608:	f000 fb10 	bl	cc2c <__aeabi_fsub>
    c60c:	4601      	mov	r1, r0
    c60e:	4628      	mov	r0, r5
    c610:	f000 fcca 	bl	cfa8 <__aeabi_fdiv>
    c614:	4621      	mov	r1, r4
    c616:	f000 fb09 	bl	cc2c <__aeabi_fsub>
    c61a:	4601      	mov	r1, r0
    c61c:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    c620:	f000 fb04 	bl	cc2c <__aeabi_fsub>
    c624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c628:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c62c:	2000      	movs	r0, #0
    c62e:	f000 b87b 	b.w	c728 <__math_oflowf>
    c632:	4b27      	ldr	r3, [pc, #156]	; (c6d0 <__ieee754_expf+0x230>)
    c634:	429a      	cmp	r2, r3
    c636:	f67f af46 	bls.w	c4c6 <__ieee754_expf+0x26>
    c63a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c63e:	2000      	movs	r0, #0
    c640:	f000 b86e 	b.w	c720 <__math_uflowf>
    c644:	2d00      	cmp	r5, #0
    c646:	d0a3      	beq.n	c590 <__ieee754_expf+0xf0>
    c648:	2000      	movs	r0, #0
    c64a:	e7a1      	b.n	c590 <__ieee754_expf+0xf0>
    c64c:	3664      	adds	r6, #100	; 0x64
    c64e:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
    c652:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    c656:	f000 fbf3 	bl	ce40 <__aeabi_fmul>
    c65a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c65e:	491d      	ldr	r1, [pc, #116]	; (c6d4 <__ieee754_expf+0x234>)
    c660:	4620      	mov	r0, r4
    c662:	f000 fbed 	bl	ce40 <__aeabi_fmul>
    c666:	4b1c      	ldr	r3, [pc, #112]	; (c6d8 <__ieee754_expf+0x238>)
    c668:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    c66c:	f000 fae0 	bl	cc30 <__addsf3>
    c670:	f000 fdac 	bl	d1cc <__aeabi_f2iz>
    c674:	4606      	mov	r6, r0
    c676:	f000 fb8f 	bl	cd98 <__aeabi_i2f>
    c67a:	4918      	ldr	r1, [pc, #96]	; (c6dc <__ieee754_expf+0x23c>)
    c67c:	4605      	mov	r5, r0
    c67e:	f000 fbdf 	bl	ce40 <__aeabi_fmul>
    c682:	4601      	mov	r1, r0
    c684:	4620      	mov	r0, r4
    c686:	f000 fad1 	bl	cc2c <__aeabi_fsub>
    c68a:	4915      	ldr	r1, [pc, #84]	; (c6e0 <__ieee754_expf+0x240>)
    c68c:	4680      	mov	r8, r0
    c68e:	4628      	mov	r0, r5
    c690:	f000 fbd6 	bl	ce40 <__aeabi_fmul>
    c694:	4681      	mov	r9, r0
    c696:	e72a      	b.n	c4ee <__ieee754_expf+0x4e>
    c698:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c69c:	4620      	mov	r0, r4
    c69e:	f000 fac7 	bl	cc30 <__addsf3>
    c6a2:	e775      	b.n	c590 <__ieee754_expf+0xf0>
    c6a4:	42b17217 	.word	0x42b17217
    c6a8:	3eb17218 	.word	0x3eb17218
    c6ac:	3f851591 	.word	0x3f851591
    c6b0:	00015570 	.word	0x00015570
    c6b4:	00015578 	.word	0x00015578
    c6b8:	3331bb4c 	.word	0x3331bb4c
    c6bc:	35ddea0e 	.word	0x35ddea0e
    c6c0:	388ab355 	.word	0x388ab355
    c6c4:	3b360b61 	.word	0x3b360b61
    c6c8:	3e2aaaab 	.word	0x3e2aaaab
    c6cc:	7149f2ca 	.word	0x7149f2ca
    c6d0:	42cff1b5 	.word	0x42cff1b5
    c6d4:	3fb8aa3b 	.word	0x3fb8aa3b
    c6d8:	00015568 	.word	0x00015568
    c6dc:	3f317180 	.word	0x3f317180
    c6e0:	3717f7d1 	.word	0x3717f7d1

0000c6e4 <with_errnof>:
    c6e4:	b538      	push	{r3, r4, r5, lr}
    c6e6:	4605      	mov	r5, r0
    c6e8:	460c      	mov	r4, r1
    c6ea:	f001 fd1b 	bl	e124 <__errno>
    c6ee:	4603      	mov	r3, r0
    c6f0:	4628      	mov	r0, r5
    c6f2:	601c      	str	r4, [r3, #0]
    c6f4:	bd38      	pop	{r3, r4, r5, pc}
    c6f6:	bf00      	nop

0000c6f8 <xflowf>:
    c6f8:	b508      	push	{r3, lr}
    c6fa:	b140      	cbz	r0, c70e <xflowf+0x16>
    c6fc:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
    c700:	f000 fb9e 	bl	ce40 <__aeabi_fmul>
    c704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c708:	2122      	movs	r1, #34	; 0x22
    c70a:	f7ff bfeb 	b.w	c6e4 <with_errnof>
    c70e:	4608      	mov	r0, r1
    c710:	f000 fb96 	bl	ce40 <__aeabi_fmul>
    c714:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c718:	2122      	movs	r1, #34	; 0x22
    c71a:	f7ff bfe3 	b.w	c6e4 <with_errnof>
    c71e:	bf00      	nop

0000c720 <__math_uflowf>:
    c720:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    c724:	f7ff bfe8 	b.w	c6f8 <xflowf>

0000c728 <__math_oflowf>:
    c728:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
    c72c:	f7ff bfe4 	b.w	c6f8 <xflowf>

0000c730 <__aeabi_drsub>:
    c730:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c734:	e002      	b.n	c73c <__adddf3>
    c736:	bf00      	nop

0000c738 <__aeabi_dsub>:
    c738:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c73c <__adddf3>:
    c73c:	b530      	push	{r4, r5, lr}
    c73e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c742:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c746:	ea94 0f05 	teq	r4, r5
    c74a:	bf08      	it	eq
    c74c:	ea90 0f02 	teqeq	r0, r2
    c750:	bf1f      	itttt	ne
    c752:	ea54 0c00 	orrsne.w	ip, r4, r0
    c756:	ea55 0c02 	orrsne.w	ip, r5, r2
    c75a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c75e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c762:	f000 80e2 	beq.w	c92a <__adddf3+0x1ee>
    c766:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c76a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c76e:	bfb8      	it	lt
    c770:	426d      	neglt	r5, r5
    c772:	dd0c      	ble.n	c78e <__adddf3+0x52>
    c774:	442c      	add	r4, r5
    c776:	ea80 0202 	eor.w	r2, r0, r2
    c77a:	ea81 0303 	eor.w	r3, r1, r3
    c77e:	ea82 0000 	eor.w	r0, r2, r0
    c782:	ea83 0101 	eor.w	r1, r3, r1
    c786:	ea80 0202 	eor.w	r2, r0, r2
    c78a:	ea81 0303 	eor.w	r3, r1, r3
    c78e:	2d36      	cmp	r5, #54	; 0x36
    c790:	bf88      	it	hi
    c792:	bd30      	pophi	{r4, r5, pc}
    c794:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c798:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c79c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c7a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c7a4:	d002      	beq.n	c7ac <__adddf3+0x70>
    c7a6:	4240      	negs	r0, r0
    c7a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c7ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c7b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c7b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c7b8:	d002      	beq.n	c7c0 <__adddf3+0x84>
    c7ba:	4252      	negs	r2, r2
    c7bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c7c0:	ea94 0f05 	teq	r4, r5
    c7c4:	f000 80a7 	beq.w	c916 <__adddf3+0x1da>
    c7c8:	f1a4 0401 	sub.w	r4, r4, #1
    c7cc:	f1d5 0e20 	rsbs	lr, r5, #32
    c7d0:	db0d      	blt.n	c7ee <__adddf3+0xb2>
    c7d2:	fa02 fc0e 	lsl.w	ip, r2, lr
    c7d6:	fa22 f205 	lsr.w	r2, r2, r5
    c7da:	1880      	adds	r0, r0, r2
    c7dc:	f141 0100 	adc.w	r1, r1, #0
    c7e0:	fa03 f20e 	lsl.w	r2, r3, lr
    c7e4:	1880      	adds	r0, r0, r2
    c7e6:	fa43 f305 	asr.w	r3, r3, r5
    c7ea:	4159      	adcs	r1, r3
    c7ec:	e00e      	b.n	c80c <__adddf3+0xd0>
    c7ee:	f1a5 0520 	sub.w	r5, r5, #32
    c7f2:	f10e 0e20 	add.w	lr, lr, #32
    c7f6:	2a01      	cmp	r2, #1
    c7f8:	fa03 fc0e 	lsl.w	ip, r3, lr
    c7fc:	bf28      	it	cs
    c7fe:	f04c 0c02 	orrcs.w	ip, ip, #2
    c802:	fa43 f305 	asr.w	r3, r3, r5
    c806:	18c0      	adds	r0, r0, r3
    c808:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c80c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c810:	d507      	bpl.n	c822 <__adddf3+0xe6>
    c812:	f04f 0e00 	mov.w	lr, #0
    c816:	f1dc 0c00 	rsbs	ip, ip, #0
    c81a:	eb7e 0000 	sbcs.w	r0, lr, r0
    c81e:	eb6e 0101 	sbc.w	r1, lr, r1
    c822:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c826:	d31b      	bcc.n	c860 <__adddf3+0x124>
    c828:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c82c:	d30c      	bcc.n	c848 <__adddf3+0x10c>
    c82e:	0849      	lsrs	r1, r1, #1
    c830:	ea5f 0030 	movs.w	r0, r0, rrx
    c834:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c838:	f104 0401 	add.w	r4, r4, #1
    c83c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c840:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c844:	f080 809a 	bcs.w	c97c <__adddf3+0x240>
    c848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c84c:	bf08      	it	eq
    c84e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c852:	f150 0000 	adcs.w	r0, r0, #0
    c856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c85a:	ea41 0105 	orr.w	r1, r1, r5
    c85e:	bd30      	pop	{r4, r5, pc}
    c860:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c864:	4140      	adcs	r0, r0
    c866:	eb41 0101 	adc.w	r1, r1, r1
    c86a:	3c01      	subs	r4, #1
    c86c:	bf28      	it	cs
    c86e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c872:	d2e9      	bcs.n	c848 <__adddf3+0x10c>
    c874:	f091 0f00 	teq	r1, #0
    c878:	bf04      	itt	eq
    c87a:	4601      	moveq	r1, r0
    c87c:	2000      	moveq	r0, #0
    c87e:	fab1 f381 	clz	r3, r1
    c882:	bf08      	it	eq
    c884:	3320      	addeq	r3, #32
    c886:	f1a3 030b 	sub.w	r3, r3, #11
    c88a:	f1b3 0220 	subs.w	r2, r3, #32
    c88e:	da0c      	bge.n	c8aa <__adddf3+0x16e>
    c890:	320c      	adds	r2, #12
    c892:	dd08      	ble.n	c8a6 <__adddf3+0x16a>
    c894:	f102 0c14 	add.w	ip, r2, #20
    c898:	f1c2 020c 	rsb	r2, r2, #12
    c89c:	fa01 f00c 	lsl.w	r0, r1, ip
    c8a0:	fa21 f102 	lsr.w	r1, r1, r2
    c8a4:	e00c      	b.n	c8c0 <__adddf3+0x184>
    c8a6:	f102 0214 	add.w	r2, r2, #20
    c8aa:	bfd8      	it	le
    c8ac:	f1c2 0c20 	rsble	ip, r2, #32
    c8b0:	fa01 f102 	lsl.w	r1, r1, r2
    c8b4:	fa20 fc0c 	lsr.w	ip, r0, ip
    c8b8:	bfdc      	itt	le
    c8ba:	ea41 010c 	orrle.w	r1, r1, ip
    c8be:	4090      	lslle	r0, r2
    c8c0:	1ae4      	subs	r4, r4, r3
    c8c2:	bfa2      	ittt	ge
    c8c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c8c8:	4329      	orrge	r1, r5
    c8ca:	bd30      	popge	{r4, r5, pc}
    c8cc:	ea6f 0404 	mvn.w	r4, r4
    c8d0:	3c1f      	subs	r4, #31
    c8d2:	da1c      	bge.n	c90e <__adddf3+0x1d2>
    c8d4:	340c      	adds	r4, #12
    c8d6:	dc0e      	bgt.n	c8f6 <__adddf3+0x1ba>
    c8d8:	f104 0414 	add.w	r4, r4, #20
    c8dc:	f1c4 0220 	rsb	r2, r4, #32
    c8e0:	fa20 f004 	lsr.w	r0, r0, r4
    c8e4:	fa01 f302 	lsl.w	r3, r1, r2
    c8e8:	ea40 0003 	orr.w	r0, r0, r3
    c8ec:	fa21 f304 	lsr.w	r3, r1, r4
    c8f0:	ea45 0103 	orr.w	r1, r5, r3
    c8f4:	bd30      	pop	{r4, r5, pc}
    c8f6:	f1c4 040c 	rsb	r4, r4, #12
    c8fa:	f1c4 0220 	rsb	r2, r4, #32
    c8fe:	fa20 f002 	lsr.w	r0, r0, r2
    c902:	fa01 f304 	lsl.w	r3, r1, r4
    c906:	ea40 0003 	orr.w	r0, r0, r3
    c90a:	4629      	mov	r1, r5
    c90c:	bd30      	pop	{r4, r5, pc}
    c90e:	fa21 f004 	lsr.w	r0, r1, r4
    c912:	4629      	mov	r1, r5
    c914:	bd30      	pop	{r4, r5, pc}
    c916:	f094 0f00 	teq	r4, #0
    c91a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    c91e:	bf06      	itte	eq
    c920:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    c924:	3401      	addeq	r4, #1
    c926:	3d01      	subne	r5, #1
    c928:	e74e      	b.n	c7c8 <__adddf3+0x8c>
    c92a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c92e:	bf18      	it	ne
    c930:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c934:	d029      	beq.n	c98a <__adddf3+0x24e>
    c936:	ea94 0f05 	teq	r4, r5
    c93a:	bf08      	it	eq
    c93c:	ea90 0f02 	teqeq	r0, r2
    c940:	d005      	beq.n	c94e <__adddf3+0x212>
    c942:	ea54 0c00 	orrs.w	ip, r4, r0
    c946:	bf04      	itt	eq
    c948:	4619      	moveq	r1, r3
    c94a:	4610      	moveq	r0, r2
    c94c:	bd30      	pop	{r4, r5, pc}
    c94e:	ea91 0f03 	teq	r1, r3
    c952:	bf1e      	ittt	ne
    c954:	2100      	movne	r1, #0
    c956:	2000      	movne	r0, #0
    c958:	bd30      	popne	{r4, r5, pc}
    c95a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    c95e:	d105      	bne.n	c96c <__adddf3+0x230>
    c960:	0040      	lsls	r0, r0, #1
    c962:	4149      	adcs	r1, r1
    c964:	bf28      	it	cs
    c966:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    c96a:	bd30      	pop	{r4, r5, pc}
    c96c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    c970:	bf3c      	itt	cc
    c972:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    c976:	bd30      	popcc	{r4, r5, pc}
    c978:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c97c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    c980:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c984:	f04f 0000 	mov.w	r0, #0
    c988:	bd30      	pop	{r4, r5, pc}
    c98a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    c98e:	bf1a      	itte	ne
    c990:	4619      	movne	r1, r3
    c992:	4610      	movne	r0, r2
    c994:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    c998:	bf1c      	itt	ne
    c99a:	460b      	movne	r3, r1
    c99c:	4602      	movne	r2, r0
    c99e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c9a2:	bf06      	itte	eq
    c9a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    c9a8:	ea91 0f03 	teqeq	r1, r3
    c9ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    c9b0:	bd30      	pop	{r4, r5, pc}
    c9b2:	bf00      	nop

0000c9b4 <__aeabi_ui2d>:
    c9b4:	f090 0f00 	teq	r0, #0
    c9b8:	bf04      	itt	eq
    c9ba:	2100      	moveq	r1, #0
    c9bc:	4770      	bxeq	lr
    c9be:	b530      	push	{r4, r5, lr}
    c9c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c9c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c9c8:	f04f 0500 	mov.w	r5, #0
    c9cc:	f04f 0100 	mov.w	r1, #0
    c9d0:	e750      	b.n	c874 <__adddf3+0x138>
    c9d2:	bf00      	nop

0000c9d4 <__aeabi_i2d>:
    c9d4:	f090 0f00 	teq	r0, #0
    c9d8:	bf04      	itt	eq
    c9da:	2100      	moveq	r1, #0
    c9dc:	4770      	bxeq	lr
    c9de:	b530      	push	{r4, r5, lr}
    c9e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c9e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c9e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    c9ec:	bf48      	it	mi
    c9ee:	4240      	negmi	r0, r0
    c9f0:	f04f 0100 	mov.w	r1, #0
    c9f4:	e73e      	b.n	c874 <__adddf3+0x138>
    c9f6:	bf00      	nop

0000c9f8 <__aeabi_f2d>:
    c9f8:	0042      	lsls	r2, r0, #1
    c9fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
    c9fe:	ea4f 0131 	mov.w	r1, r1, rrx
    ca02:	ea4f 7002 	mov.w	r0, r2, lsl #28
    ca06:	bf1f      	itttt	ne
    ca08:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    ca0c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    ca10:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    ca14:	4770      	bxne	lr
    ca16:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    ca1a:	bf08      	it	eq
    ca1c:	4770      	bxeq	lr
    ca1e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    ca22:	bf04      	itt	eq
    ca24:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    ca28:	4770      	bxeq	lr
    ca2a:	b530      	push	{r4, r5, lr}
    ca2c:	f44f 7460 	mov.w	r4, #896	; 0x380
    ca30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ca34:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    ca38:	e71c      	b.n	c874 <__adddf3+0x138>
    ca3a:	bf00      	nop

0000ca3c <__aeabi_ul2d>:
    ca3c:	ea50 0201 	orrs.w	r2, r0, r1
    ca40:	bf08      	it	eq
    ca42:	4770      	bxeq	lr
    ca44:	b530      	push	{r4, r5, lr}
    ca46:	f04f 0500 	mov.w	r5, #0
    ca4a:	e00a      	b.n	ca62 <__aeabi_l2d+0x16>

0000ca4c <__aeabi_l2d>:
    ca4c:	ea50 0201 	orrs.w	r2, r0, r1
    ca50:	bf08      	it	eq
    ca52:	4770      	bxeq	lr
    ca54:	b530      	push	{r4, r5, lr}
    ca56:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    ca5a:	d502      	bpl.n	ca62 <__aeabi_l2d+0x16>
    ca5c:	4240      	negs	r0, r0
    ca5e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ca62:	f44f 6480 	mov.w	r4, #1024	; 0x400
    ca66:	f104 0432 	add.w	r4, r4, #50	; 0x32
    ca6a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    ca6e:	f43f aed8 	beq.w	c822 <__adddf3+0xe6>
    ca72:	f04f 0203 	mov.w	r2, #3
    ca76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    ca7a:	bf18      	it	ne
    ca7c:	3203      	addne	r2, #3
    ca7e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    ca82:	bf18      	it	ne
    ca84:	3203      	addne	r2, #3
    ca86:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    ca8a:	f1c2 0320 	rsb	r3, r2, #32
    ca8e:	fa00 fc03 	lsl.w	ip, r0, r3
    ca92:	fa20 f002 	lsr.w	r0, r0, r2
    ca96:	fa01 fe03 	lsl.w	lr, r1, r3
    ca9a:	ea40 000e 	orr.w	r0, r0, lr
    ca9e:	fa21 f102 	lsr.w	r1, r1, r2
    caa2:	4414      	add	r4, r2
    caa4:	e6bd      	b.n	c822 <__adddf3+0xe6>
    caa6:	bf00      	nop

0000caa8 <__gedf2>:
    caa8:	f04f 3cff 	mov.w	ip, #4294967295
    caac:	e006      	b.n	cabc <__cmpdf2+0x4>
    caae:	bf00      	nop

0000cab0 <__ledf2>:
    cab0:	f04f 0c01 	mov.w	ip, #1
    cab4:	e002      	b.n	cabc <__cmpdf2+0x4>
    cab6:	bf00      	nop

0000cab8 <__cmpdf2>:
    cab8:	f04f 0c01 	mov.w	ip, #1
    cabc:	f84d cd04 	str.w	ip, [sp, #-4]!
    cac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cac8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cacc:	bf18      	it	ne
    cace:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    cad2:	d01b      	beq.n	cb0c <__cmpdf2+0x54>
    cad4:	b001      	add	sp, #4
    cad6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    cada:	bf0c      	ite	eq
    cadc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    cae0:	ea91 0f03 	teqne	r1, r3
    cae4:	bf02      	ittt	eq
    cae6:	ea90 0f02 	teqeq	r0, r2
    caea:	2000      	moveq	r0, #0
    caec:	4770      	bxeq	lr
    caee:	f110 0f00 	cmn.w	r0, #0
    caf2:	ea91 0f03 	teq	r1, r3
    caf6:	bf58      	it	pl
    caf8:	4299      	cmppl	r1, r3
    cafa:	bf08      	it	eq
    cafc:	4290      	cmpeq	r0, r2
    cafe:	bf2c      	ite	cs
    cb00:	17d8      	asrcs	r0, r3, #31
    cb02:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    cb06:	f040 0001 	orr.w	r0, r0, #1
    cb0a:	4770      	bx	lr
    cb0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cb10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cb14:	d102      	bne.n	cb1c <__cmpdf2+0x64>
    cb16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cb1a:	d107      	bne.n	cb2c <__cmpdf2+0x74>
    cb1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cb20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cb24:	d1d6      	bne.n	cad4 <__cmpdf2+0x1c>
    cb26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cb2a:	d0d3      	beq.n	cad4 <__cmpdf2+0x1c>
    cb2c:	f85d 0b04 	ldr.w	r0, [sp], #4
    cb30:	4770      	bx	lr
    cb32:	bf00      	nop

0000cb34 <__aeabi_cdrcmple>:
    cb34:	4684      	mov	ip, r0
    cb36:	4610      	mov	r0, r2
    cb38:	4662      	mov	r2, ip
    cb3a:	468c      	mov	ip, r1
    cb3c:	4619      	mov	r1, r3
    cb3e:	4663      	mov	r3, ip
    cb40:	e000      	b.n	cb44 <__aeabi_cdcmpeq>
    cb42:	bf00      	nop

0000cb44 <__aeabi_cdcmpeq>:
    cb44:	b501      	push	{r0, lr}
    cb46:	f7ff ffb7 	bl	cab8 <__cmpdf2>
    cb4a:	2800      	cmp	r0, #0
    cb4c:	bf48      	it	mi
    cb4e:	f110 0f00 	cmnmi.w	r0, #0
    cb52:	bd01      	pop	{r0, pc}

0000cb54 <__aeabi_dcmpeq>:
    cb54:	f84d ed08 	str.w	lr, [sp, #-8]!
    cb58:	f7ff fff4 	bl	cb44 <__aeabi_cdcmpeq>
    cb5c:	bf0c      	ite	eq
    cb5e:	2001      	moveq	r0, #1
    cb60:	2000      	movne	r0, #0
    cb62:	f85d fb08 	ldr.w	pc, [sp], #8
    cb66:	bf00      	nop

0000cb68 <__aeabi_dcmplt>:
    cb68:	f84d ed08 	str.w	lr, [sp, #-8]!
    cb6c:	f7ff ffea 	bl	cb44 <__aeabi_cdcmpeq>
    cb70:	bf34      	ite	cc
    cb72:	2001      	movcc	r0, #1
    cb74:	2000      	movcs	r0, #0
    cb76:	f85d fb08 	ldr.w	pc, [sp], #8
    cb7a:	bf00      	nop

0000cb7c <__aeabi_dcmple>:
    cb7c:	f84d ed08 	str.w	lr, [sp, #-8]!
    cb80:	f7ff ffe0 	bl	cb44 <__aeabi_cdcmpeq>
    cb84:	bf94      	ite	ls
    cb86:	2001      	movls	r0, #1
    cb88:	2000      	movhi	r0, #0
    cb8a:	f85d fb08 	ldr.w	pc, [sp], #8
    cb8e:	bf00      	nop

0000cb90 <__aeabi_dcmpge>:
    cb90:	f84d ed08 	str.w	lr, [sp, #-8]!
    cb94:	f7ff ffce 	bl	cb34 <__aeabi_cdrcmple>
    cb98:	bf94      	ite	ls
    cb9a:	2001      	movls	r0, #1
    cb9c:	2000      	movhi	r0, #0
    cb9e:	f85d fb08 	ldr.w	pc, [sp], #8
    cba2:	bf00      	nop

0000cba4 <__aeabi_dcmpgt>:
    cba4:	f84d ed08 	str.w	lr, [sp, #-8]!
    cba8:	f7ff ffc4 	bl	cb34 <__aeabi_cdrcmple>
    cbac:	bf34      	ite	cc
    cbae:	2001      	movcc	r0, #1
    cbb0:	2000      	movcs	r0, #0
    cbb2:	f85d fb08 	ldr.w	pc, [sp], #8
    cbb6:	bf00      	nop

0000cbb8 <__aeabi_dcmpun>:
    cbb8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cbbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cbc0:	d102      	bne.n	cbc8 <__aeabi_dcmpun+0x10>
    cbc2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cbc6:	d10a      	bne.n	cbde <__aeabi_dcmpun+0x26>
    cbc8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cbcc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cbd0:	d102      	bne.n	cbd8 <__aeabi_dcmpun+0x20>
    cbd2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cbd6:	d102      	bne.n	cbde <__aeabi_dcmpun+0x26>
    cbd8:	f04f 0000 	mov.w	r0, #0
    cbdc:	4770      	bx	lr
    cbde:	f04f 0001 	mov.w	r0, #1
    cbe2:	4770      	bx	lr

0000cbe4 <__aeabi_d2uiz>:
    cbe4:	004a      	lsls	r2, r1, #1
    cbe6:	d211      	bcs.n	cc0c <__aeabi_d2uiz+0x28>
    cbe8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    cbec:	d211      	bcs.n	cc12 <__aeabi_d2uiz+0x2e>
    cbee:	d50d      	bpl.n	cc0c <__aeabi_d2uiz+0x28>
    cbf0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    cbf4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    cbf8:	d40e      	bmi.n	cc18 <__aeabi_d2uiz+0x34>
    cbfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cbfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cc02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    cc06:	fa23 f002 	lsr.w	r0, r3, r2
    cc0a:	4770      	bx	lr
    cc0c:	f04f 0000 	mov.w	r0, #0
    cc10:	4770      	bx	lr
    cc12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    cc16:	d102      	bne.n	cc1e <__aeabi_d2uiz+0x3a>
    cc18:	f04f 30ff 	mov.w	r0, #4294967295
    cc1c:	4770      	bx	lr
    cc1e:	f04f 0000 	mov.w	r0, #0
    cc22:	4770      	bx	lr

0000cc24 <__aeabi_frsub>:
    cc24:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    cc28:	e002      	b.n	cc30 <__addsf3>
    cc2a:	bf00      	nop

0000cc2c <__aeabi_fsub>:
    cc2c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000cc30 <__addsf3>:
    cc30:	0042      	lsls	r2, r0, #1
    cc32:	bf1f      	itttt	ne
    cc34:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    cc38:	ea92 0f03 	teqne	r2, r3
    cc3c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    cc40:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    cc44:	d06a      	beq.n	cd1c <__addsf3+0xec>
    cc46:	ea4f 6212 	mov.w	r2, r2, lsr #24
    cc4a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    cc4e:	bfc1      	itttt	gt
    cc50:	18d2      	addgt	r2, r2, r3
    cc52:	4041      	eorgt	r1, r0
    cc54:	4048      	eorgt	r0, r1
    cc56:	4041      	eorgt	r1, r0
    cc58:	bfb8      	it	lt
    cc5a:	425b      	neglt	r3, r3
    cc5c:	2b19      	cmp	r3, #25
    cc5e:	bf88      	it	hi
    cc60:	4770      	bxhi	lr
    cc62:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    cc66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cc6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cc6e:	bf18      	it	ne
    cc70:	4240      	negne	r0, r0
    cc72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cc76:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    cc7a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    cc7e:	bf18      	it	ne
    cc80:	4249      	negne	r1, r1
    cc82:	ea92 0f03 	teq	r2, r3
    cc86:	d03f      	beq.n	cd08 <__addsf3+0xd8>
    cc88:	f1a2 0201 	sub.w	r2, r2, #1
    cc8c:	fa41 fc03 	asr.w	ip, r1, r3
    cc90:	eb10 000c 	adds.w	r0, r0, ip
    cc94:	f1c3 0320 	rsb	r3, r3, #32
    cc98:	fa01 f103 	lsl.w	r1, r1, r3
    cc9c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    cca0:	d502      	bpl.n	cca8 <__addsf3+0x78>
    cca2:	4249      	negs	r1, r1
    cca4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    cca8:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    ccac:	d313      	bcc.n	ccd6 <__addsf3+0xa6>
    ccae:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    ccb2:	d306      	bcc.n	ccc2 <__addsf3+0x92>
    ccb4:	0840      	lsrs	r0, r0, #1
    ccb6:	ea4f 0131 	mov.w	r1, r1, rrx
    ccba:	f102 0201 	add.w	r2, r2, #1
    ccbe:	2afe      	cmp	r2, #254	; 0xfe
    ccc0:	d251      	bcs.n	cd66 <__addsf3+0x136>
    ccc2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    ccc6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    ccca:	bf08      	it	eq
    cccc:	f020 0001 	biceq.w	r0, r0, #1
    ccd0:	ea40 0003 	orr.w	r0, r0, r3
    ccd4:	4770      	bx	lr
    ccd6:	0049      	lsls	r1, r1, #1
    ccd8:	eb40 0000 	adc.w	r0, r0, r0
    ccdc:	3a01      	subs	r2, #1
    ccde:	bf28      	it	cs
    cce0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    cce4:	d2ed      	bcs.n	ccc2 <__addsf3+0x92>
    cce6:	fab0 fc80 	clz	ip, r0
    ccea:	f1ac 0c08 	sub.w	ip, ip, #8
    ccee:	ebb2 020c 	subs.w	r2, r2, ip
    ccf2:	fa00 f00c 	lsl.w	r0, r0, ip
    ccf6:	bfaa      	itet	ge
    ccf8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    ccfc:	4252      	neglt	r2, r2
    ccfe:	4318      	orrge	r0, r3
    cd00:	bfbc      	itt	lt
    cd02:	40d0      	lsrlt	r0, r2
    cd04:	4318      	orrlt	r0, r3
    cd06:	4770      	bx	lr
    cd08:	f092 0f00 	teq	r2, #0
    cd0c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    cd10:	bf06      	itte	eq
    cd12:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    cd16:	3201      	addeq	r2, #1
    cd18:	3b01      	subne	r3, #1
    cd1a:	e7b5      	b.n	cc88 <__addsf3+0x58>
    cd1c:	ea4f 0341 	mov.w	r3, r1, lsl #1
    cd20:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    cd24:	bf18      	it	ne
    cd26:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    cd2a:	d021      	beq.n	cd70 <__addsf3+0x140>
    cd2c:	ea92 0f03 	teq	r2, r3
    cd30:	d004      	beq.n	cd3c <__addsf3+0x10c>
    cd32:	f092 0f00 	teq	r2, #0
    cd36:	bf08      	it	eq
    cd38:	4608      	moveq	r0, r1
    cd3a:	4770      	bx	lr
    cd3c:	ea90 0f01 	teq	r0, r1
    cd40:	bf1c      	itt	ne
    cd42:	2000      	movne	r0, #0
    cd44:	4770      	bxne	lr
    cd46:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    cd4a:	d104      	bne.n	cd56 <__addsf3+0x126>
    cd4c:	0040      	lsls	r0, r0, #1
    cd4e:	bf28      	it	cs
    cd50:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    cd54:	4770      	bx	lr
    cd56:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    cd5a:	bf3c      	itt	cc
    cd5c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    cd60:	4770      	bxcc	lr
    cd62:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    cd66:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    cd6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cd6e:	4770      	bx	lr
    cd70:	ea7f 6222 	mvns.w	r2, r2, asr #24
    cd74:	bf16      	itet	ne
    cd76:	4608      	movne	r0, r1
    cd78:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    cd7c:	4601      	movne	r1, r0
    cd7e:	0242      	lsls	r2, r0, #9
    cd80:	bf06      	itte	eq
    cd82:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    cd86:	ea90 0f01 	teqeq	r0, r1
    cd8a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    cd8e:	4770      	bx	lr

0000cd90 <__aeabi_ui2f>:
    cd90:	f04f 0300 	mov.w	r3, #0
    cd94:	e004      	b.n	cda0 <__aeabi_i2f+0x8>
    cd96:	bf00      	nop

0000cd98 <__aeabi_i2f>:
    cd98:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    cd9c:	bf48      	it	mi
    cd9e:	4240      	negmi	r0, r0
    cda0:	ea5f 0c00 	movs.w	ip, r0
    cda4:	bf08      	it	eq
    cda6:	4770      	bxeq	lr
    cda8:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    cdac:	4601      	mov	r1, r0
    cdae:	f04f 0000 	mov.w	r0, #0
    cdb2:	e01c      	b.n	cdee <__aeabi_l2f+0x2a>

0000cdb4 <__aeabi_ul2f>:
    cdb4:	ea50 0201 	orrs.w	r2, r0, r1
    cdb8:	bf08      	it	eq
    cdba:	4770      	bxeq	lr
    cdbc:	f04f 0300 	mov.w	r3, #0
    cdc0:	e00a      	b.n	cdd8 <__aeabi_l2f+0x14>
    cdc2:	bf00      	nop

0000cdc4 <__aeabi_l2f>:
    cdc4:	ea50 0201 	orrs.w	r2, r0, r1
    cdc8:	bf08      	it	eq
    cdca:	4770      	bxeq	lr
    cdcc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    cdd0:	d502      	bpl.n	cdd8 <__aeabi_l2f+0x14>
    cdd2:	4240      	negs	r0, r0
    cdd4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cdd8:	ea5f 0c01 	movs.w	ip, r1
    cddc:	bf02      	ittt	eq
    cdde:	4684      	moveq	ip, r0
    cde0:	4601      	moveq	r1, r0
    cde2:	2000      	moveq	r0, #0
    cde4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    cde8:	bf08      	it	eq
    cdea:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    cdee:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    cdf2:	fabc f28c 	clz	r2, ip
    cdf6:	3a08      	subs	r2, #8
    cdf8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    cdfc:	db10      	blt.n	ce20 <__aeabi_l2f+0x5c>
    cdfe:	fa01 fc02 	lsl.w	ip, r1, r2
    ce02:	4463      	add	r3, ip
    ce04:	fa00 fc02 	lsl.w	ip, r0, r2
    ce08:	f1c2 0220 	rsb	r2, r2, #32
    ce0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    ce10:	fa20 f202 	lsr.w	r2, r0, r2
    ce14:	eb43 0002 	adc.w	r0, r3, r2
    ce18:	bf08      	it	eq
    ce1a:	f020 0001 	biceq.w	r0, r0, #1
    ce1e:	4770      	bx	lr
    ce20:	f102 0220 	add.w	r2, r2, #32
    ce24:	fa01 fc02 	lsl.w	ip, r1, r2
    ce28:	f1c2 0220 	rsb	r2, r2, #32
    ce2c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    ce30:	fa21 f202 	lsr.w	r2, r1, r2
    ce34:	eb43 0002 	adc.w	r0, r3, r2
    ce38:	bf08      	it	eq
    ce3a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    ce3e:	4770      	bx	lr

0000ce40 <__aeabi_fmul>:
    ce40:	f04f 0cff 	mov.w	ip, #255	; 0xff
    ce44:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    ce48:	bf1e      	ittt	ne
    ce4a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    ce4e:	ea92 0f0c 	teqne	r2, ip
    ce52:	ea93 0f0c 	teqne	r3, ip
    ce56:	d06f      	beq.n	cf38 <__aeabi_fmul+0xf8>
    ce58:	441a      	add	r2, r3
    ce5a:	ea80 0c01 	eor.w	ip, r0, r1
    ce5e:	0240      	lsls	r0, r0, #9
    ce60:	bf18      	it	ne
    ce62:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    ce66:	d01e      	beq.n	cea6 <__aeabi_fmul+0x66>
    ce68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    ce6c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    ce70:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    ce74:	fba0 3101 	umull	r3, r1, r0, r1
    ce78:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    ce7c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    ce80:	bf3e      	ittt	cc
    ce82:	0049      	lslcc	r1, r1, #1
    ce84:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    ce88:	005b      	lslcc	r3, r3, #1
    ce8a:	ea40 0001 	orr.w	r0, r0, r1
    ce8e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    ce92:	2afd      	cmp	r2, #253	; 0xfd
    ce94:	d81d      	bhi.n	ced2 <__aeabi_fmul+0x92>
    ce96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    ce9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    ce9e:	bf08      	it	eq
    cea0:	f020 0001 	biceq.w	r0, r0, #1
    cea4:	4770      	bx	lr
    cea6:	f090 0f00 	teq	r0, #0
    ceaa:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    ceae:	bf08      	it	eq
    ceb0:	0249      	lsleq	r1, r1, #9
    ceb2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    ceb6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    ceba:	3a7f      	subs	r2, #127	; 0x7f
    cebc:	bfc2      	ittt	gt
    cebe:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    cec2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    cec6:	4770      	bxgt	lr
    cec8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cecc:	f04f 0300 	mov.w	r3, #0
    ced0:	3a01      	subs	r2, #1
    ced2:	dc5d      	bgt.n	cf90 <__aeabi_fmul+0x150>
    ced4:	f112 0f19 	cmn.w	r2, #25
    ced8:	bfdc      	itt	le
    ceda:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    cede:	4770      	bxle	lr
    cee0:	f1c2 0200 	rsb	r2, r2, #0
    cee4:	0041      	lsls	r1, r0, #1
    cee6:	fa21 f102 	lsr.w	r1, r1, r2
    ceea:	f1c2 0220 	rsb	r2, r2, #32
    ceee:	fa00 fc02 	lsl.w	ip, r0, r2
    cef2:	ea5f 0031 	movs.w	r0, r1, rrx
    cef6:	f140 0000 	adc.w	r0, r0, #0
    cefa:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    cefe:	bf08      	it	eq
    cf00:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    cf04:	4770      	bx	lr
    cf06:	f092 0f00 	teq	r2, #0
    cf0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    cf0e:	bf02      	ittt	eq
    cf10:	0040      	lsleq	r0, r0, #1
    cf12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    cf16:	3a01      	subeq	r2, #1
    cf18:	d0f9      	beq.n	cf0e <__aeabi_fmul+0xce>
    cf1a:	ea40 000c 	orr.w	r0, r0, ip
    cf1e:	f093 0f00 	teq	r3, #0
    cf22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    cf26:	bf02      	ittt	eq
    cf28:	0049      	lsleq	r1, r1, #1
    cf2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    cf2e:	3b01      	subeq	r3, #1
    cf30:	d0f9      	beq.n	cf26 <__aeabi_fmul+0xe6>
    cf32:	ea41 010c 	orr.w	r1, r1, ip
    cf36:	e78f      	b.n	ce58 <__aeabi_fmul+0x18>
    cf38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    cf3c:	ea92 0f0c 	teq	r2, ip
    cf40:	bf18      	it	ne
    cf42:	ea93 0f0c 	teqne	r3, ip
    cf46:	d00a      	beq.n	cf5e <__aeabi_fmul+0x11e>
    cf48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    cf4c:	bf18      	it	ne
    cf4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    cf52:	d1d8      	bne.n	cf06 <__aeabi_fmul+0xc6>
    cf54:	ea80 0001 	eor.w	r0, r0, r1
    cf58:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    cf5c:	4770      	bx	lr
    cf5e:	f090 0f00 	teq	r0, #0
    cf62:	bf17      	itett	ne
    cf64:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    cf68:	4608      	moveq	r0, r1
    cf6a:	f091 0f00 	teqne	r1, #0
    cf6e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    cf72:	d014      	beq.n	cf9e <__aeabi_fmul+0x15e>
    cf74:	ea92 0f0c 	teq	r2, ip
    cf78:	d101      	bne.n	cf7e <__aeabi_fmul+0x13e>
    cf7a:	0242      	lsls	r2, r0, #9
    cf7c:	d10f      	bne.n	cf9e <__aeabi_fmul+0x15e>
    cf7e:	ea93 0f0c 	teq	r3, ip
    cf82:	d103      	bne.n	cf8c <__aeabi_fmul+0x14c>
    cf84:	024b      	lsls	r3, r1, #9
    cf86:	bf18      	it	ne
    cf88:	4608      	movne	r0, r1
    cf8a:	d108      	bne.n	cf9e <__aeabi_fmul+0x15e>
    cf8c:	ea80 0001 	eor.w	r0, r0, r1
    cf90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    cf94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    cf98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cf9c:	4770      	bx	lr
    cf9e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    cfa2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    cfa6:	4770      	bx	lr

0000cfa8 <__aeabi_fdiv>:
    cfa8:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cfac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    cfb0:	bf1e      	ittt	ne
    cfb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    cfb6:	ea92 0f0c 	teqne	r2, ip
    cfba:	ea93 0f0c 	teqne	r3, ip
    cfbe:	d069      	beq.n	d094 <__aeabi_fdiv+0xec>
    cfc0:	eba2 0203 	sub.w	r2, r2, r3
    cfc4:	ea80 0c01 	eor.w	ip, r0, r1
    cfc8:	0249      	lsls	r1, r1, #9
    cfca:	ea4f 2040 	mov.w	r0, r0, lsl #9
    cfce:	d037      	beq.n	d040 <__aeabi_fdiv+0x98>
    cfd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cfd4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    cfd8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    cfdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    cfe0:	428b      	cmp	r3, r1
    cfe2:	bf38      	it	cc
    cfe4:	005b      	lslcc	r3, r3, #1
    cfe6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    cfea:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    cfee:	428b      	cmp	r3, r1
    cff0:	bf24      	itt	cs
    cff2:	1a5b      	subcs	r3, r3, r1
    cff4:	ea40 000c 	orrcs.w	r0, r0, ip
    cff8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    cffc:	bf24      	itt	cs
    cffe:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    d002:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d006:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    d00a:	bf24      	itt	cs
    d00c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    d010:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d014:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    d018:	bf24      	itt	cs
    d01a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    d01e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d022:	011b      	lsls	r3, r3, #4
    d024:	bf18      	it	ne
    d026:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    d02a:	d1e0      	bne.n	cfee <__aeabi_fdiv+0x46>
    d02c:	2afd      	cmp	r2, #253	; 0xfd
    d02e:	f63f af50 	bhi.w	ced2 <__aeabi_fmul+0x92>
    d032:	428b      	cmp	r3, r1
    d034:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    d038:	bf08      	it	eq
    d03a:	f020 0001 	biceq.w	r0, r0, #1
    d03e:	4770      	bx	lr
    d040:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    d044:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    d048:	327f      	adds	r2, #127	; 0x7f
    d04a:	bfc2      	ittt	gt
    d04c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    d050:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    d054:	4770      	bxgt	lr
    d056:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d05a:	f04f 0300 	mov.w	r3, #0
    d05e:	3a01      	subs	r2, #1
    d060:	e737      	b.n	ced2 <__aeabi_fmul+0x92>
    d062:	f092 0f00 	teq	r2, #0
    d066:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    d06a:	bf02      	ittt	eq
    d06c:	0040      	lsleq	r0, r0, #1
    d06e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    d072:	3a01      	subeq	r2, #1
    d074:	d0f9      	beq.n	d06a <__aeabi_fdiv+0xc2>
    d076:	ea40 000c 	orr.w	r0, r0, ip
    d07a:	f093 0f00 	teq	r3, #0
    d07e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    d082:	bf02      	ittt	eq
    d084:	0049      	lsleq	r1, r1, #1
    d086:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    d08a:	3b01      	subeq	r3, #1
    d08c:	d0f9      	beq.n	d082 <__aeabi_fdiv+0xda>
    d08e:	ea41 010c 	orr.w	r1, r1, ip
    d092:	e795      	b.n	cfc0 <__aeabi_fdiv+0x18>
    d094:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    d098:	ea92 0f0c 	teq	r2, ip
    d09c:	d108      	bne.n	d0b0 <__aeabi_fdiv+0x108>
    d09e:	0242      	lsls	r2, r0, #9
    d0a0:	f47f af7d 	bne.w	cf9e <__aeabi_fmul+0x15e>
    d0a4:	ea93 0f0c 	teq	r3, ip
    d0a8:	f47f af70 	bne.w	cf8c <__aeabi_fmul+0x14c>
    d0ac:	4608      	mov	r0, r1
    d0ae:	e776      	b.n	cf9e <__aeabi_fmul+0x15e>
    d0b0:	ea93 0f0c 	teq	r3, ip
    d0b4:	d104      	bne.n	d0c0 <__aeabi_fdiv+0x118>
    d0b6:	024b      	lsls	r3, r1, #9
    d0b8:	f43f af4c 	beq.w	cf54 <__aeabi_fmul+0x114>
    d0bc:	4608      	mov	r0, r1
    d0be:	e76e      	b.n	cf9e <__aeabi_fmul+0x15e>
    d0c0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    d0c4:	bf18      	it	ne
    d0c6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    d0ca:	d1ca      	bne.n	d062 <__aeabi_fdiv+0xba>
    d0cc:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    d0d0:	f47f af5c 	bne.w	cf8c <__aeabi_fmul+0x14c>
    d0d4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    d0d8:	f47f af3c 	bne.w	cf54 <__aeabi_fmul+0x114>
    d0dc:	e75f      	b.n	cf9e <__aeabi_fmul+0x15e>
    d0de:	bf00      	nop

0000d0e0 <__gesf2>:
    d0e0:	f04f 3cff 	mov.w	ip, #4294967295
    d0e4:	e006      	b.n	d0f4 <__cmpsf2+0x4>
    d0e6:	bf00      	nop

0000d0e8 <__lesf2>:
    d0e8:	f04f 0c01 	mov.w	ip, #1
    d0ec:	e002      	b.n	d0f4 <__cmpsf2+0x4>
    d0ee:	bf00      	nop

0000d0f0 <__cmpsf2>:
    d0f0:	f04f 0c01 	mov.w	ip, #1
    d0f4:	f84d cd04 	str.w	ip, [sp, #-4]!
    d0f8:	ea4f 0240 	mov.w	r2, r0, lsl #1
    d0fc:	ea4f 0341 	mov.w	r3, r1, lsl #1
    d100:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d104:	bf18      	it	ne
    d106:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    d10a:	d011      	beq.n	d130 <__cmpsf2+0x40>
    d10c:	b001      	add	sp, #4
    d10e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    d112:	bf18      	it	ne
    d114:	ea90 0f01 	teqne	r0, r1
    d118:	bf58      	it	pl
    d11a:	ebb2 0003 	subspl.w	r0, r2, r3
    d11e:	bf88      	it	hi
    d120:	17c8      	asrhi	r0, r1, #31
    d122:	bf38      	it	cc
    d124:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    d128:	bf18      	it	ne
    d12a:	f040 0001 	orrne.w	r0, r0, #1
    d12e:	4770      	bx	lr
    d130:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d134:	d102      	bne.n	d13c <__cmpsf2+0x4c>
    d136:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    d13a:	d105      	bne.n	d148 <__cmpsf2+0x58>
    d13c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    d140:	d1e4      	bne.n	d10c <__cmpsf2+0x1c>
    d142:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    d146:	d0e1      	beq.n	d10c <__cmpsf2+0x1c>
    d148:	f85d 0b04 	ldr.w	r0, [sp], #4
    d14c:	4770      	bx	lr
    d14e:	bf00      	nop

0000d150 <__aeabi_cfrcmple>:
    d150:	4684      	mov	ip, r0
    d152:	4608      	mov	r0, r1
    d154:	4661      	mov	r1, ip
    d156:	e7ff      	b.n	d158 <__aeabi_cfcmpeq>

0000d158 <__aeabi_cfcmpeq>:
    d158:	b50f      	push	{r0, r1, r2, r3, lr}
    d15a:	f7ff ffc9 	bl	d0f0 <__cmpsf2>
    d15e:	2800      	cmp	r0, #0
    d160:	bf48      	it	mi
    d162:	f110 0f00 	cmnmi.w	r0, #0
    d166:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000d168 <__aeabi_fcmpeq>:
    d168:	f84d ed08 	str.w	lr, [sp, #-8]!
    d16c:	f7ff fff4 	bl	d158 <__aeabi_cfcmpeq>
    d170:	bf0c      	ite	eq
    d172:	2001      	moveq	r0, #1
    d174:	2000      	movne	r0, #0
    d176:	f85d fb08 	ldr.w	pc, [sp], #8
    d17a:	bf00      	nop

0000d17c <__aeabi_fcmplt>:
    d17c:	f84d ed08 	str.w	lr, [sp, #-8]!
    d180:	f7ff ffea 	bl	d158 <__aeabi_cfcmpeq>
    d184:	bf34      	ite	cc
    d186:	2001      	movcc	r0, #1
    d188:	2000      	movcs	r0, #0
    d18a:	f85d fb08 	ldr.w	pc, [sp], #8
    d18e:	bf00      	nop

0000d190 <__aeabi_fcmple>:
    d190:	f84d ed08 	str.w	lr, [sp, #-8]!
    d194:	f7ff ffe0 	bl	d158 <__aeabi_cfcmpeq>
    d198:	bf94      	ite	ls
    d19a:	2001      	movls	r0, #1
    d19c:	2000      	movhi	r0, #0
    d19e:	f85d fb08 	ldr.w	pc, [sp], #8
    d1a2:	bf00      	nop

0000d1a4 <__aeabi_fcmpge>:
    d1a4:	f84d ed08 	str.w	lr, [sp, #-8]!
    d1a8:	f7ff ffd2 	bl	d150 <__aeabi_cfrcmple>
    d1ac:	bf94      	ite	ls
    d1ae:	2001      	movls	r0, #1
    d1b0:	2000      	movhi	r0, #0
    d1b2:	f85d fb08 	ldr.w	pc, [sp], #8
    d1b6:	bf00      	nop

0000d1b8 <__aeabi_fcmpgt>:
    d1b8:	f84d ed08 	str.w	lr, [sp, #-8]!
    d1bc:	f7ff ffc8 	bl	d150 <__aeabi_cfrcmple>
    d1c0:	bf34      	ite	cc
    d1c2:	2001      	movcc	r0, #1
    d1c4:	2000      	movcs	r0, #0
    d1c6:	f85d fb08 	ldr.w	pc, [sp], #8
    d1ca:	bf00      	nop

0000d1cc <__aeabi_f2iz>:
    d1cc:	ea4f 0240 	mov.w	r2, r0, lsl #1
    d1d0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    d1d4:	d30f      	bcc.n	d1f6 <__aeabi_f2iz+0x2a>
    d1d6:	f04f 039e 	mov.w	r3, #158	; 0x9e
    d1da:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    d1de:	d90d      	bls.n	d1fc <__aeabi_f2iz+0x30>
    d1e0:	ea4f 2300 	mov.w	r3, r0, lsl #8
    d1e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d1e8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    d1ec:	fa23 f002 	lsr.w	r0, r3, r2
    d1f0:	bf18      	it	ne
    d1f2:	4240      	negne	r0, r0
    d1f4:	4770      	bx	lr
    d1f6:	f04f 0000 	mov.w	r0, #0
    d1fa:	4770      	bx	lr
    d1fc:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d200:	d101      	bne.n	d206 <__aeabi_f2iz+0x3a>
    d202:	0242      	lsls	r2, r0, #9
    d204:	d105      	bne.n	d212 <__aeabi_f2iz+0x46>
    d206:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    d20a:	bf08      	it	eq
    d20c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d210:	4770      	bx	lr
    d212:	f04f 0000 	mov.w	r0, #0
    d216:	4770      	bx	lr

0000d218 <__aeabi_f2uiz>:
    d218:	0042      	lsls	r2, r0, #1
    d21a:	d20e      	bcs.n	d23a <__aeabi_f2uiz+0x22>
    d21c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    d220:	d30b      	bcc.n	d23a <__aeabi_f2uiz+0x22>
    d222:	f04f 039e 	mov.w	r3, #158	; 0x9e
    d226:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    d22a:	d409      	bmi.n	d240 <__aeabi_f2uiz+0x28>
    d22c:	ea4f 2300 	mov.w	r3, r0, lsl #8
    d230:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d234:	fa23 f002 	lsr.w	r0, r3, r2
    d238:	4770      	bx	lr
    d23a:	f04f 0000 	mov.w	r0, #0
    d23e:	4770      	bx	lr
    d240:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d244:	d101      	bne.n	d24a <__aeabi_f2uiz+0x32>
    d246:	0242      	lsls	r2, r0, #9
    d248:	d102      	bne.n	d250 <__aeabi_f2uiz+0x38>
    d24a:	f04f 30ff 	mov.w	r0, #4294967295
    d24e:	4770      	bx	lr
    d250:	f04f 0000 	mov.w	r0, #0
    d254:	4770      	bx	lr
    d256:	bf00      	nop

0000d258 <malloc>:
    d258:	4b02      	ldr	r3, [pc, #8]	; (d264 <malloc+0xc>)
    d25a:	4601      	mov	r1, r0
    d25c:	6818      	ldr	r0, [r3, #0]
    d25e:	f000 b803 	b.w	d268 <_malloc_r>
    d262:	bf00      	nop
    d264:	1fff9160 	.word	0x1fff9160

0000d268 <_malloc_r>:
    d268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d26c:	f101 060b 	add.w	r6, r1, #11
    d270:	2e16      	cmp	r6, #22
    d272:	b083      	sub	sp, #12
    d274:	4604      	mov	r4, r0
    d276:	d824      	bhi.n	d2c2 <_malloc_r+0x5a>
    d278:	2910      	cmp	r1, #16
    d27a:	f200 80ba 	bhi.w	d3f2 <_malloc_r+0x18a>
    d27e:	f000 faa3 	bl	d7c8 <__malloc_lock>
    d282:	2610      	movs	r6, #16
    d284:	2218      	movs	r2, #24
    d286:	2002      	movs	r0, #2
    d288:	4fb5      	ldr	r7, [pc, #724]	; (d560 <_malloc_r+0x2f8>)
    d28a:	443a      	add	r2, r7
    d28c:	f1a2 0108 	sub.w	r1, r2, #8
    d290:	6853      	ldr	r3, [r2, #4]
    d292:	428b      	cmp	r3, r1
    d294:	f000 80ba 	beq.w	d40c <_malloc_r+0x1a4>
    d298:	685a      	ldr	r2, [r3, #4]
    d29a:	68d9      	ldr	r1, [r3, #12]
    d29c:	f022 0203 	bic.w	r2, r2, #3
    d2a0:	441a      	add	r2, r3
    d2a2:	689d      	ldr	r5, [r3, #8]
    d2a4:	60e9      	str	r1, [r5, #12]
    d2a6:	608d      	str	r5, [r1, #8]
    d2a8:	6851      	ldr	r1, [r2, #4]
    d2aa:	f041 0101 	orr.w	r1, r1, #1
    d2ae:	4620      	mov	r0, r4
    d2b0:	6051      	str	r1, [r2, #4]
    d2b2:	f103 0508 	add.w	r5, r3, #8
    d2b6:	f000 fa8d 	bl	d7d4 <__malloc_unlock>
    d2ba:	4628      	mov	r0, r5
    d2bc:	b003      	add	sp, #12
    d2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2c2:	f036 0607 	bics.w	r6, r6, #7
    d2c6:	f100 8094 	bmi.w	d3f2 <_malloc_r+0x18a>
    d2ca:	42b1      	cmp	r1, r6
    d2cc:	f200 8091 	bhi.w	d3f2 <_malloc_r+0x18a>
    d2d0:	f000 fa7a 	bl	d7c8 <__malloc_lock>
    d2d4:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    d2d8:	f0c0 819a 	bcc.w	d610 <_malloc_r+0x3a8>
    d2dc:	0a73      	lsrs	r3, r6, #9
    d2de:	f000 808f 	beq.w	d400 <_malloc_r+0x198>
    d2e2:	2b04      	cmp	r3, #4
    d2e4:	f200 816f 	bhi.w	d5c6 <_malloc_r+0x35e>
    d2e8:	09b3      	lsrs	r3, r6, #6
    d2ea:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d2ee:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    d2f2:	00c3      	lsls	r3, r0, #3
    d2f4:	4f9a      	ldr	r7, [pc, #616]	; (d560 <_malloc_r+0x2f8>)
    d2f6:	443b      	add	r3, r7
    d2f8:	f1a3 0508 	sub.w	r5, r3, #8
    d2fc:	685b      	ldr	r3, [r3, #4]
    d2fe:	429d      	cmp	r5, r3
    d300:	d106      	bne.n	d310 <_malloc_r+0xa8>
    d302:	e00c      	b.n	d31e <_malloc_r+0xb6>
    d304:	2900      	cmp	r1, #0
    d306:	f280 8127 	bge.w	d558 <_malloc_r+0x2f0>
    d30a:	68db      	ldr	r3, [r3, #12]
    d30c:	429d      	cmp	r5, r3
    d30e:	d006      	beq.n	d31e <_malloc_r+0xb6>
    d310:	685a      	ldr	r2, [r3, #4]
    d312:	f022 0203 	bic.w	r2, r2, #3
    d316:	1b91      	subs	r1, r2, r6
    d318:	290f      	cmp	r1, #15
    d31a:	ddf3      	ble.n	d304 <_malloc_r+0x9c>
    d31c:	4660      	mov	r0, ip
    d31e:	693d      	ldr	r5, [r7, #16]
    d320:	f8df c240 	ldr.w	ip, [pc, #576]	; d564 <_malloc_r+0x2fc>
    d324:	4565      	cmp	r5, ip
    d326:	d07c      	beq.n	d422 <_malloc_r+0x1ba>
    d328:	686a      	ldr	r2, [r5, #4]
    d32a:	f022 0203 	bic.w	r2, r2, #3
    d32e:	1b93      	subs	r3, r2, r6
    d330:	2b0f      	cmp	r3, #15
    d332:	f300 817b 	bgt.w	d62c <_malloc_r+0x3c4>
    d336:	2b00      	cmp	r3, #0
    d338:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    d33c:	f280 816c 	bge.w	d618 <_malloc_r+0x3b0>
    d340:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    d344:	f080 811a 	bcs.w	d57c <_malloc_r+0x314>
    d348:	08d3      	lsrs	r3, r2, #3
    d34a:	6879      	ldr	r1, [r7, #4]
    d34c:	3301      	adds	r3, #1
    d34e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    d352:	2201      	movs	r2, #1
    d354:	fa02 f20e 	lsl.w	r2, r2, lr
    d358:	430a      	orrs	r2, r1
    d35a:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    d35e:	f8c5 e008 	str.w	lr, [r5, #8]
    d362:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    d366:	3908      	subs	r1, #8
    d368:	60e9      	str	r1, [r5, #12]
    d36a:	607a      	str	r2, [r7, #4]
    d36c:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d370:	f8ce 500c 	str.w	r5, [lr, #12]
    d374:	1083      	asrs	r3, r0, #2
    d376:	2101      	movs	r1, #1
    d378:	4099      	lsls	r1, r3
    d37a:	4291      	cmp	r1, r2
    d37c:	d857      	bhi.n	d42e <_malloc_r+0x1c6>
    d37e:	4211      	tst	r1, r2
    d380:	d106      	bne.n	d390 <_malloc_r+0x128>
    d382:	f020 0003 	bic.w	r0, r0, #3
    d386:	0049      	lsls	r1, r1, #1
    d388:	4211      	tst	r1, r2
    d38a:	f100 0004 	add.w	r0, r0, #4
    d38e:	d0fa      	beq.n	d386 <_malloc_r+0x11e>
    d390:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    d394:	464d      	mov	r5, r9
    d396:	4686      	mov	lr, r0
    d398:	f8d5 800c 	ldr.w	r8, [r5, #12]
    d39c:	4545      	cmp	r5, r8
    d39e:	d108      	bne.n	d3b2 <_malloc_r+0x14a>
    d3a0:	e11d      	b.n	d5de <_malloc_r+0x376>
    d3a2:	2b00      	cmp	r3, #0
    d3a4:	f280 8124 	bge.w	d5f0 <_malloc_r+0x388>
    d3a8:	f8d8 800c 	ldr.w	r8, [r8, #12]
    d3ac:	4545      	cmp	r5, r8
    d3ae:	f000 8116 	beq.w	d5de <_malloc_r+0x376>
    d3b2:	f8d8 2004 	ldr.w	r2, [r8, #4]
    d3b6:	f022 0203 	bic.w	r2, r2, #3
    d3ba:	1b93      	subs	r3, r2, r6
    d3bc:	2b0f      	cmp	r3, #15
    d3be:	ddf0      	ble.n	d3a2 <_malloc_r+0x13a>
    d3c0:	4620      	mov	r0, r4
    d3c2:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    d3c6:	eb08 0106 	add.w	r1, r8, r6
    d3ca:	f046 0601 	orr.w	r6, r6, #1
    d3ce:	f8c8 6004 	str.w	r6, [r8, #4]
    d3d2:	60ec      	str	r4, [r5, #12]
    d3d4:	60a5      	str	r5, [r4, #8]
    d3d6:	f043 0401 	orr.w	r4, r3, #1
    d3da:	e9c7 1104 	strd	r1, r1, [r7, #16]
    d3de:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    d3e2:	604c      	str	r4, [r1, #4]
    d3e4:	f848 3002 	str.w	r3, [r8, r2]
    d3e8:	f000 f9f4 	bl	d7d4 <__malloc_unlock>
    d3ec:	f108 0508 	add.w	r5, r8, #8
    d3f0:	e002      	b.n	d3f8 <_malloc_r+0x190>
    d3f2:	230c      	movs	r3, #12
    d3f4:	6023      	str	r3, [r4, #0]
    d3f6:	2500      	movs	r5, #0
    d3f8:	4628      	mov	r0, r5
    d3fa:	b003      	add	sp, #12
    d3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d400:	f44f 7300 	mov.w	r3, #512	; 0x200
    d404:	2040      	movs	r0, #64	; 0x40
    d406:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    d40a:	e773      	b.n	d2f4 <_malloc_r+0x8c>
    d40c:	68d3      	ldr	r3, [r2, #12]
    d40e:	429a      	cmp	r2, r3
    d410:	bf08      	it	eq
    d412:	3002      	addeq	r0, #2
    d414:	f47f af40 	bne.w	d298 <_malloc_r+0x30>
    d418:	693d      	ldr	r5, [r7, #16]
    d41a:	f8df c148 	ldr.w	ip, [pc, #328]	; d564 <_malloc_r+0x2fc>
    d41e:	4565      	cmp	r5, ip
    d420:	d182      	bne.n	d328 <_malloc_r+0xc0>
    d422:	687a      	ldr	r2, [r7, #4]
    d424:	1083      	asrs	r3, r0, #2
    d426:	2101      	movs	r1, #1
    d428:	4099      	lsls	r1, r3
    d42a:	4291      	cmp	r1, r2
    d42c:	d9a7      	bls.n	d37e <_malloc_r+0x116>
    d42e:	68bd      	ldr	r5, [r7, #8]
    d430:	686b      	ldr	r3, [r5, #4]
    d432:	f023 0903 	bic.w	r9, r3, #3
    d436:	454e      	cmp	r6, r9
    d438:	d803      	bhi.n	d442 <_malloc_r+0x1da>
    d43a:	eba9 0306 	sub.w	r3, r9, r6
    d43e:	2b0f      	cmp	r3, #15
    d440:	dc7a      	bgt.n	d538 <_malloc_r+0x2d0>
    d442:	f8df b124 	ldr.w	fp, [pc, #292]	; d568 <_malloc_r+0x300>
    d446:	4b49      	ldr	r3, [pc, #292]	; (d56c <_malloc_r+0x304>)
    d448:	f8db 2000 	ldr.w	r2, [fp]
    d44c:	681b      	ldr	r3, [r3, #0]
    d44e:	3201      	adds	r2, #1
    d450:	4433      	add	r3, r6
    d452:	eb05 0a09 	add.w	sl, r5, r9
    d456:	f000 8133 	beq.w	d6c0 <_malloc_r+0x458>
    d45a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d45e:	330f      	adds	r3, #15
    d460:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    d464:	f028 080f 	bic.w	r8, r8, #15
    d468:	4641      	mov	r1, r8
    d46a:	4620      	mov	r0, r4
    d46c:	f000 fe32 	bl	e0d4 <_sbrk_r>
    d470:	1c41      	adds	r1, r0, #1
    d472:	4602      	mov	r2, r0
    d474:	f000 80f3 	beq.w	d65e <_malloc_r+0x3f6>
    d478:	4582      	cmp	sl, r0
    d47a:	f200 80ee 	bhi.w	d65a <_malloc_r+0x3f2>
    d47e:	4b3c      	ldr	r3, [pc, #240]	; (d570 <_malloc_r+0x308>)
    d480:	6819      	ldr	r1, [r3, #0]
    d482:	4441      	add	r1, r8
    d484:	6019      	str	r1, [r3, #0]
    d486:	4608      	mov	r0, r1
    d488:	f000 814e 	beq.w	d728 <_malloc_r+0x4c0>
    d48c:	f8db 1000 	ldr.w	r1, [fp]
    d490:	9301      	str	r3, [sp, #4]
    d492:	3101      	adds	r1, #1
    d494:	bf1b      	ittet	ne
    d496:	eba2 010a 	subne.w	r1, r2, sl
    d49a:	1809      	addne	r1, r1, r0
    d49c:	f8cb 2000 	streq.w	r2, [fp]
    d4a0:	6019      	strne	r1, [r3, #0]
    d4a2:	f012 0b07 	ands.w	fp, r2, #7
    d4a6:	f000 8117 	beq.w	d6d8 <_malloc_r+0x470>
    d4aa:	f1cb 0108 	rsb	r1, fp, #8
    d4ae:	440a      	add	r2, r1
    d4b0:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    d4b4:	4490      	add	r8, r2
    d4b6:	3108      	adds	r1, #8
    d4b8:	eba1 0108 	sub.w	r1, r1, r8
    d4bc:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d4c0:	4651      	mov	r1, sl
    d4c2:	4620      	mov	r0, r4
    d4c4:	9200      	str	r2, [sp, #0]
    d4c6:	f000 fe05 	bl	e0d4 <_sbrk_r>
    d4ca:	1c42      	adds	r2, r0, #1
    d4cc:	e9dd 2300 	ldrd	r2, r3, [sp]
    d4d0:	f000 814f 	beq.w	d772 <_malloc_r+0x50a>
    d4d4:	1a80      	subs	r0, r0, r2
    d4d6:	eb00 080a 	add.w	r8, r0, sl
    d4da:	6819      	ldr	r1, [r3, #0]
    d4dc:	60ba      	str	r2, [r7, #8]
    d4de:	f048 0001 	orr.w	r0, r8, #1
    d4e2:	4451      	add	r1, sl
    d4e4:	42bd      	cmp	r5, r7
    d4e6:	6050      	str	r0, [r2, #4]
    d4e8:	6019      	str	r1, [r3, #0]
    d4ea:	f000 8129 	beq.w	d740 <_malloc_r+0x4d8>
    d4ee:	f1b9 0f0f 	cmp.w	r9, #15
    d4f2:	f240 8127 	bls.w	d744 <_malloc_r+0x4dc>
    d4f6:	6868      	ldr	r0, [r5, #4]
    d4f8:	f1a9 0c0c 	sub.w	ip, r9, #12
    d4fc:	f02c 0c07 	bic.w	ip, ip, #7
    d500:	f000 0001 	and.w	r0, r0, #1
    d504:	ea40 000c 	orr.w	r0, r0, ip
    d508:	6068      	str	r0, [r5, #4]
    d50a:	f04f 0e05 	mov.w	lr, #5
    d50e:	eb05 000c 	add.w	r0, r5, ip
    d512:	f1bc 0f0f 	cmp.w	ip, #15
    d516:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    d51a:	f200 8132 	bhi.w	d782 <_malloc_r+0x51a>
    d51e:	6850      	ldr	r0, [r2, #4]
    d520:	4615      	mov	r5, r2
    d522:	4b14      	ldr	r3, [pc, #80]	; (d574 <_malloc_r+0x30c>)
    d524:	681a      	ldr	r2, [r3, #0]
    d526:	428a      	cmp	r2, r1
    d528:	bf38      	it	cc
    d52a:	6019      	strcc	r1, [r3, #0]
    d52c:	4b12      	ldr	r3, [pc, #72]	; (d578 <_malloc_r+0x310>)
    d52e:	681a      	ldr	r2, [r3, #0]
    d530:	428a      	cmp	r2, r1
    d532:	bf38      	it	cc
    d534:	6019      	strcc	r1, [r3, #0]
    d536:	e094      	b.n	d662 <_malloc_r+0x3fa>
    d538:	19aa      	adds	r2, r5, r6
    d53a:	f043 0301 	orr.w	r3, r3, #1
    d53e:	f046 0601 	orr.w	r6, r6, #1
    d542:	606e      	str	r6, [r5, #4]
    d544:	4620      	mov	r0, r4
    d546:	60ba      	str	r2, [r7, #8]
    d548:	6053      	str	r3, [r2, #4]
    d54a:	f000 f943 	bl	d7d4 <__malloc_unlock>
    d54e:	3508      	adds	r5, #8
    d550:	4628      	mov	r0, r5
    d552:	b003      	add	sp, #12
    d554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d558:	68d9      	ldr	r1, [r3, #12]
    d55a:	441a      	add	r2, r3
    d55c:	e6a1      	b.n	d2a2 <_malloc_r+0x3a>
    d55e:	bf00      	nop
    d560:	1fff8ab8 	.word	0x1fff8ab8
    d564:	1fff8ac0 	.word	0x1fff8ac0
    d568:	1fff8ec0 	.word	0x1fff8ec0
    d56c:	1fffd628 	.word	0x1fffd628
    d570:	1fffd5f8 	.word	0x1fffd5f8
    d574:	1fffd620 	.word	0x1fffd620
    d578:	1fffd624 	.word	0x1fffd624
    d57c:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    d580:	ea4f 2352 	mov.w	r3, r2, lsr #9
    d584:	d363      	bcc.n	d64e <_malloc_r+0x3e6>
    d586:	2b14      	cmp	r3, #20
    d588:	f200 80b7 	bhi.w	d6fa <_malloc_r+0x492>
    d58c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    d590:	00c9      	lsls	r1, r1, #3
    d592:	335b      	adds	r3, #91	; 0x5b
    d594:	eb07 0e01 	add.w	lr, r7, r1
    d598:	5879      	ldr	r1, [r7, r1]
    d59a:	f1ae 0e08 	sub.w	lr, lr, #8
    d59e:	458e      	cmp	lr, r1
    d5a0:	f000 8091 	beq.w	d6c6 <_malloc_r+0x45e>
    d5a4:	684b      	ldr	r3, [r1, #4]
    d5a6:	f023 0303 	bic.w	r3, r3, #3
    d5aa:	4293      	cmp	r3, r2
    d5ac:	d902      	bls.n	d5b4 <_malloc_r+0x34c>
    d5ae:	6889      	ldr	r1, [r1, #8]
    d5b0:	458e      	cmp	lr, r1
    d5b2:	d1f7      	bne.n	d5a4 <_malloc_r+0x33c>
    d5b4:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    d5b8:	687a      	ldr	r2, [r7, #4]
    d5ba:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    d5be:	f8ce 5008 	str.w	r5, [lr, #8]
    d5c2:	60cd      	str	r5, [r1, #12]
    d5c4:	e6d6      	b.n	d374 <_malloc_r+0x10c>
    d5c6:	2b14      	cmp	r3, #20
    d5c8:	d959      	bls.n	d67e <_malloc_r+0x416>
    d5ca:	2b54      	cmp	r3, #84	; 0x54
    d5cc:	f200 809d 	bhi.w	d70a <_malloc_r+0x4a2>
    d5d0:	0b33      	lsrs	r3, r6, #12
    d5d2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d5d6:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    d5da:	00c3      	lsls	r3, r0, #3
    d5dc:	e68a      	b.n	d2f4 <_malloc_r+0x8c>
    d5de:	f10e 0e01 	add.w	lr, lr, #1
    d5e2:	f01e 0f03 	tst.w	lr, #3
    d5e6:	f105 0508 	add.w	r5, r5, #8
    d5ea:	f47f aed5 	bne.w	d398 <_malloc_r+0x130>
    d5ee:	e051      	b.n	d694 <_malloc_r+0x42c>
    d5f0:	4442      	add	r2, r8
    d5f2:	4645      	mov	r5, r8
    d5f4:	6853      	ldr	r3, [r2, #4]
    d5f6:	f8d8 100c 	ldr.w	r1, [r8, #12]
    d5fa:	f043 0301 	orr.w	r3, r3, #1
    d5fe:	6053      	str	r3, [r2, #4]
    d600:	f855 3f08 	ldr.w	r3, [r5, #8]!
    d604:	4620      	mov	r0, r4
    d606:	60d9      	str	r1, [r3, #12]
    d608:	608b      	str	r3, [r1, #8]
    d60a:	f000 f8e3 	bl	d7d4 <__malloc_unlock>
    d60e:	e6f3      	b.n	d3f8 <_malloc_r+0x190>
    d610:	08f0      	lsrs	r0, r6, #3
    d612:	f106 0208 	add.w	r2, r6, #8
    d616:	e637      	b.n	d288 <_malloc_r+0x20>
    d618:	442a      	add	r2, r5
    d61a:	4620      	mov	r0, r4
    d61c:	6853      	ldr	r3, [r2, #4]
    d61e:	f043 0301 	orr.w	r3, r3, #1
    d622:	6053      	str	r3, [r2, #4]
    d624:	3508      	adds	r5, #8
    d626:	f000 f8d5 	bl	d7d4 <__malloc_unlock>
    d62a:	e6e5      	b.n	d3f8 <_malloc_r+0x190>
    d62c:	19a9      	adds	r1, r5, r6
    d62e:	4620      	mov	r0, r4
    d630:	f046 0601 	orr.w	r6, r6, #1
    d634:	f043 0401 	orr.w	r4, r3, #1
    d638:	606e      	str	r6, [r5, #4]
    d63a:	e9c7 1104 	strd	r1, r1, [r7, #16]
    d63e:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    d642:	604c      	str	r4, [r1, #4]
    d644:	50ab      	str	r3, [r5, r2]
    d646:	f000 f8c5 	bl	d7d4 <__malloc_unlock>
    d64a:	3508      	adds	r5, #8
    d64c:	e6d4      	b.n	d3f8 <_malloc_r+0x190>
    d64e:	0993      	lsrs	r3, r2, #6
    d650:	f103 0139 	add.w	r1, r3, #57	; 0x39
    d654:	00c9      	lsls	r1, r1, #3
    d656:	3338      	adds	r3, #56	; 0x38
    d658:	e79c      	b.n	d594 <_malloc_r+0x32c>
    d65a:	42bd      	cmp	r5, r7
    d65c:	d05f      	beq.n	d71e <_malloc_r+0x4b6>
    d65e:	68bd      	ldr	r5, [r7, #8]
    d660:	6868      	ldr	r0, [r5, #4]
    d662:	f020 0803 	bic.w	r8, r0, #3
    d666:	4546      	cmp	r6, r8
    d668:	eba8 0306 	sub.w	r3, r8, r6
    d66c:	d802      	bhi.n	d674 <_malloc_r+0x40c>
    d66e:	2b0f      	cmp	r3, #15
    d670:	f73f af62 	bgt.w	d538 <_malloc_r+0x2d0>
    d674:	4620      	mov	r0, r4
    d676:	f000 f8ad 	bl	d7d4 <__malloc_unlock>
    d67a:	2500      	movs	r5, #0
    d67c:	e6bc      	b.n	d3f8 <_malloc_r+0x190>
    d67e:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d682:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    d686:	00c3      	lsls	r3, r0, #3
    d688:	e634      	b.n	d2f4 <_malloc_r+0x8c>
    d68a:	f859 3908 	ldr.w	r3, [r9], #-8
    d68e:	454b      	cmp	r3, r9
    d690:	f040 8096 	bne.w	d7c0 <_malloc_r+0x558>
    d694:	f010 0f03 	tst.w	r0, #3
    d698:	f100 30ff 	add.w	r0, r0, #4294967295
    d69c:	d1f5      	bne.n	d68a <_malloc_r+0x422>
    d69e:	687b      	ldr	r3, [r7, #4]
    d6a0:	ea23 0301 	bic.w	r3, r3, r1
    d6a4:	607b      	str	r3, [r7, #4]
    d6a6:	0049      	lsls	r1, r1, #1
    d6a8:	4299      	cmp	r1, r3
    d6aa:	f63f aec0 	bhi.w	d42e <_malloc_r+0x1c6>
    d6ae:	b919      	cbnz	r1, d6b8 <_malloc_r+0x450>
    d6b0:	e6bd      	b.n	d42e <_malloc_r+0x1c6>
    d6b2:	0049      	lsls	r1, r1, #1
    d6b4:	f10e 0e04 	add.w	lr, lr, #4
    d6b8:	4219      	tst	r1, r3
    d6ba:	d0fa      	beq.n	d6b2 <_malloc_r+0x44a>
    d6bc:	4670      	mov	r0, lr
    d6be:	e667      	b.n	d390 <_malloc_r+0x128>
    d6c0:	f103 0810 	add.w	r8, r3, #16
    d6c4:	e6d0      	b.n	d468 <_malloc_r+0x200>
    d6c6:	109a      	asrs	r2, r3, #2
    d6c8:	f04f 0801 	mov.w	r8, #1
    d6cc:	687b      	ldr	r3, [r7, #4]
    d6ce:	fa08 f202 	lsl.w	r2, r8, r2
    d6d2:	431a      	orrs	r2, r3
    d6d4:	607a      	str	r2, [r7, #4]
    d6d6:	e770      	b.n	d5ba <_malloc_r+0x352>
    d6d8:	eb02 0108 	add.w	r1, r2, r8
    d6dc:	4249      	negs	r1, r1
    d6de:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d6e2:	4651      	mov	r1, sl
    d6e4:	4620      	mov	r0, r4
    d6e6:	9200      	str	r2, [sp, #0]
    d6e8:	f000 fcf4 	bl	e0d4 <_sbrk_r>
    d6ec:	1c43      	adds	r3, r0, #1
    d6ee:	e9dd 2300 	ldrd	r2, r3, [sp]
    d6f2:	f47f aeef 	bne.w	d4d4 <_malloc_r+0x26c>
    d6f6:	46da      	mov	sl, fp
    d6f8:	e6ef      	b.n	d4da <_malloc_r+0x272>
    d6fa:	2b54      	cmp	r3, #84	; 0x54
    d6fc:	d825      	bhi.n	d74a <_malloc_r+0x4e2>
    d6fe:	0b13      	lsrs	r3, r2, #12
    d700:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    d704:	00c9      	lsls	r1, r1, #3
    d706:	336e      	adds	r3, #110	; 0x6e
    d708:	e744      	b.n	d594 <_malloc_r+0x32c>
    d70a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d70e:	d825      	bhi.n	d75c <_malloc_r+0x4f4>
    d710:	0bf3      	lsrs	r3, r6, #15
    d712:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d716:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    d71a:	00c3      	lsls	r3, r0, #3
    d71c:	e5ea      	b.n	d2f4 <_malloc_r+0x8c>
    d71e:	4b29      	ldr	r3, [pc, #164]	; (d7c4 <_malloc_r+0x55c>)
    d720:	6818      	ldr	r0, [r3, #0]
    d722:	4440      	add	r0, r8
    d724:	6018      	str	r0, [r3, #0]
    d726:	e6b1      	b.n	d48c <_malloc_r+0x224>
    d728:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    d72c:	f1bc 0f00 	cmp.w	ip, #0
    d730:	f47f aeac 	bne.w	d48c <_malloc_r+0x224>
    d734:	68bd      	ldr	r5, [r7, #8]
    d736:	44c8      	add	r8, r9
    d738:	f048 0001 	orr.w	r0, r8, #1
    d73c:	6068      	str	r0, [r5, #4]
    d73e:	e6f0      	b.n	d522 <_malloc_r+0x2ba>
    d740:	4615      	mov	r5, r2
    d742:	e6ee      	b.n	d522 <_malloc_r+0x2ba>
    d744:	2301      	movs	r3, #1
    d746:	6053      	str	r3, [r2, #4]
    d748:	e794      	b.n	d674 <_malloc_r+0x40c>
    d74a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d74e:	d823      	bhi.n	d798 <_malloc_r+0x530>
    d750:	0bd3      	lsrs	r3, r2, #15
    d752:	f103 0178 	add.w	r1, r3, #120	; 0x78
    d756:	00c9      	lsls	r1, r1, #3
    d758:	3377      	adds	r3, #119	; 0x77
    d75a:	e71b      	b.n	d594 <_malloc_r+0x32c>
    d75c:	f240 5254 	movw	r2, #1364	; 0x554
    d760:	4293      	cmp	r3, r2
    d762:	d823      	bhi.n	d7ac <_malloc_r+0x544>
    d764:	0cb3      	lsrs	r3, r6, #18
    d766:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d76a:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    d76e:	00c3      	lsls	r3, r0, #3
    d770:	e5c0      	b.n	d2f4 <_malloc_r+0x8c>
    d772:	f1ab 0b08 	sub.w	fp, fp, #8
    d776:	44d8      	add	r8, fp
    d778:	eba8 0802 	sub.w	r8, r8, r2
    d77c:	f04f 0a00 	mov.w	sl, #0
    d780:	e6ab      	b.n	d4da <_malloc_r+0x272>
    d782:	f105 0108 	add.w	r1, r5, #8
    d786:	4620      	mov	r0, r4
    d788:	9300      	str	r3, [sp, #0]
    d78a:	f000 fde7 	bl	e35c <_free_r>
    d78e:	68bd      	ldr	r5, [r7, #8]
    d790:	9b00      	ldr	r3, [sp, #0]
    d792:	6868      	ldr	r0, [r5, #4]
    d794:	6819      	ldr	r1, [r3, #0]
    d796:	e6c4      	b.n	d522 <_malloc_r+0x2ba>
    d798:	f240 5154 	movw	r1, #1364	; 0x554
    d79c:	428b      	cmp	r3, r1
    d79e:	d80b      	bhi.n	d7b8 <_malloc_r+0x550>
    d7a0:	0c93      	lsrs	r3, r2, #18
    d7a2:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    d7a6:	00c9      	lsls	r1, r1, #3
    d7a8:	337c      	adds	r3, #124	; 0x7c
    d7aa:	e6f3      	b.n	d594 <_malloc_r+0x32c>
    d7ac:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d7b0:	207f      	movs	r0, #127	; 0x7f
    d7b2:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    d7b6:	e59d      	b.n	d2f4 <_malloc_r+0x8c>
    d7b8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    d7bc:	237e      	movs	r3, #126	; 0x7e
    d7be:	e6e9      	b.n	d594 <_malloc_r+0x32c>
    d7c0:	687b      	ldr	r3, [r7, #4]
    d7c2:	e770      	b.n	d6a6 <_malloc_r+0x43e>
    d7c4:	1fffd5f8 	.word	0x1fffd5f8

0000d7c8 <__malloc_lock>:
    d7c8:	4801      	ldr	r0, [pc, #4]	; (d7d0 <__malloc_lock+0x8>)
    d7ca:	f000 bcd9 	b.w	e180 <__retarget_lock_acquire_recursive>
    d7ce:	bf00      	nop
    d7d0:	1fffd770 	.word	0x1fffd770

0000d7d4 <__malloc_unlock>:
    d7d4:	4801      	ldr	r0, [pc, #4]	; (d7dc <__malloc_unlock+0x8>)
    d7d6:	f000 bcd5 	b.w	e184 <__retarget_lock_release_recursive>
    d7da:	bf00      	nop
    d7dc:	1fffd770 	.word	0x1fffd770

0000d7e0 <_realloc_r>:
    d7e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d7e4:	4617      	mov	r7, r2
    d7e6:	2900      	cmp	r1, #0
    d7e8:	f000 8098 	beq.w	d91c <_realloc_r+0x13c>
    d7ec:	460c      	mov	r4, r1
    d7ee:	f107 050b 	add.w	r5, r7, #11
    d7f2:	4680      	mov	r8, r0
    d7f4:	f7ff ffe8 	bl	d7c8 <__malloc_lock>
    d7f8:	2d16      	cmp	r5, #22
    d7fa:	f854 1c04 	ldr.w	r1, [r4, #-4]
    d7fe:	d85b      	bhi.n	d8b8 <_realloc_r+0xd8>
    d800:	2510      	movs	r5, #16
    d802:	462a      	mov	r2, r5
    d804:	42af      	cmp	r7, r5
    d806:	d85c      	bhi.n	d8c2 <_realloc_r+0xe2>
    d808:	f021 0603 	bic.w	r6, r1, #3
    d80c:	4296      	cmp	r6, r2
    d80e:	f1a4 0908 	sub.w	r9, r4, #8
    d812:	da62      	bge.n	d8da <_realloc_r+0xfa>
    d814:	4bbc      	ldr	r3, [pc, #752]	; (db08 <_realloc_r+0x328>)
    d816:	f8d3 c008 	ldr.w	ip, [r3, #8]
    d81a:	eb09 0006 	add.w	r0, r9, r6
    d81e:	4584      	cmp	ip, r0
    d820:	f000 8097 	beq.w	d952 <_realloc_r+0x172>
    d824:	f8d0 c004 	ldr.w	ip, [r0, #4]
    d828:	f02c 0301 	bic.w	r3, ip, #1
    d82c:	4403      	add	r3, r0
    d82e:	685b      	ldr	r3, [r3, #4]
    d830:	07db      	lsls	r3, r3, #31
    d832:	d468      	bmi.n	d906 <_realloc_r+0x126>
    d834:	f02c 0c03 	bic.w	ip, ip, #3
    d838:	eb06 030c 	add.w	r3, r6, ip
    d83c:	4293      	cmp	r3, r2
    d83e:	da47      	bge.n	d8d0 <_realloc_r+0xf0>
    d840:	07cb      	lsls	r3, r1, #31
    d842:	d410      	bmi.n	d866 <_realloc_r+0x86>
    d844:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d848:	eba9 0a03 	sub.w	sl, r9, r3
    d84c:	f8da 3004 	ldr.w	r3, [sl, #4]
    d850:	f023 0103 	bic.w	r1, r3, #3
    d854:	448c      	add	ip, r1
    d856:	44b4      	add	ip, r6
    d858:	4594      	cmp	ip, r2
    d85a:	f280 8111 	bge.w	da80 <_realloc_r+0x2a0>
    d85e:	1873      	adds	r3, r6, r1
    d860:	4293      	cmp	r3, r2
    d862:	f280 80e8 	bge.w	da36 <_realloc_r+0x256>
    d866:	4639      	mov	r1, r7
    d868:	4640      	mov	r0, r8
    d86a:	f7ff fcfd 	bl	d268 <_malloc_r>
    d86e:	4607      	mov	r7, r0
    d870:	b1e0      	cbz	r0, d8ac <_realloc_r+0xcc>
    d872:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d876:	f023 0301 	bic.w	r3, r3, #1
    d87a:	444b      	add	r3, r9
    d87c:	f1a0 0208 	sub.w	r2, r0, #8
    d880:	4293      	cmp	r3, r2
    d882:	f000 80d2 	beq.w	da2a <_realloc_r+0x24a>
    d886:	1f32      	subs	r2, r6, #4
    d888:	2a24      	cmp	r2, #36	; 0x24
    d88a:	f200 80f5 	bhi.w	da78 <_realloc_r+0x298>
    d88e:	2a13      	cmp	r2, #19
    d890:	f200 80ac 	bhi.w	d9ec <_realloc_r+0x20c>
    d894:	4603      	mov	r3, r0
    d896:	4622      	mov	r2, r4
    d898:	6811      	ldr	r1, [r2, #0]
    d89a:	6019      	str	r1, [r3, #0]
    d89c:	6851      	ldr	r1, [r2, #4]
    d89e:	6059      	str	r1, [r3, #4]
    d8a0:	6892      	ldr	r2, [r2, #8]
    d8a2:	609a      	str	r2, [r3, #8]
    d8a4:	4621      	mov	r1, r4
    d8a6:	4640      	mov	r0, r8
    d8a8:	f000 fd58 	bl	e35c <_free_r>
    d8ac:	4640      	mov	r0, r8
    d8ae:	f7ff ff91 	bl	d7d4 <__malloc_unlock>
    d8b2:	4638      	mov	r0, r7
    d8b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8b8:	f025 0507 	bic.w	r5, r5, #7
    d8bc:	2d00      	cmp	r5, #0
    d8be:	462a      	mov	r2, r5
    d8c0:	daa0      	bge.n	d804 <_realloc_r+0x24>
    d8c2:	230c      	movs	r3, #12
    d8c4:	f8c8 3000 	str.w	r3, [r8]
    d8c8:	2700      	movs	r7, #0
    d8ca:	4638      	mov	r0, r7
    d8cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d8d0:	461e      	mov	r6, r3
    d8d2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    d8d6:	60d3      	str	r3, [r2, #12]
    d8d8:	609a      	str	r2, [r3, #8]
    d8da:	1b73      	subs	r3, r6, r5
    d8dc:	2b0f      	cmp	r3, #15
    d8de:	d822      	bhi.n	d926 <_realloc_r+0x146>
    d8e0:	f8d9 3004 	ldr.w	r3, [r9, #4]
    d8e4:	f003 0301 	and.w	r3, r3, #1
    d8e8:	4333      	orrs	r3, r6
    d8ea:	444e      	add	r6, r9
    d8ec:	f8c9 3004 	str.w	r3, [r9, #4]
    d8f0:	6873      	ldr	r3, [r6, #4]
    d8f2:	f043 0301 	orr.w	r3, r3, #1
    d8f6:	6073      	str	r3, [r6, #4]
    d8f8:	4640      	mov	r0, r8
    d8fa:	4627      	mov	r7, r4
    d8fc:	f7ff ff6a 	bl	d7d4 <__malloc_unlock>
    d900:	4638      	mov	r0, r7
    d902:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d906:	07c9      	lsls	r1, r1, #31
    d908:	d4ad      	bmi.n	d866 <_realloc_r+0x86>
    d90a:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d90e:	eba9 0a03 	sub.w	sl, r9, r3
    d912:	f8da 1004 	ldr.w	r1, [sl, #4]
    d916:	f021 0103 	bic.w	r1, r1, #3
    d91a:	e7a0      	b.n	d85e <_realloc_r+0x7e>
    d91c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d920:	4611      	mov	r1, r2
    d922:	f7ff bca1 	b.w	d268 <_malloc_r>
    d926:	f8d9 2004 	ldr.w	r2, [r9, #4]
    d92a:	eb09 0105 	add.w	r1, r9, r5
    d92e:	f002 0201 	and.w	r2, r2, #1
    d932:	444e      	add	r6, r9
    d934:	f043 0301 	orr.w	r3, r3, #1
    d938:	432a      	orrs	r2, r5
    d93a:	f8c9 2004 	str.w	r2, [r9, #4]
    d93e:	604b      	str	r3, [r1, #4]
    d940:	6873      	ldr	r3, [r6, #4]
    d942:	f043 0301 	orr.w	r3, r3, #1
    d946:	3108      	adds	r1, #8
    d948:	6073      	str	r3, [r6, #4]
    d94a:	4640      	mov	r0, r8
    d94c:	f000 fd06 	bl	e35c <_free_r>
    d950:	e7d2      	b.n	d8f8 <_realloc_r+0x118>
    d952:	f8dc 0004 	ldr.w	r0, [ip, #4]
    d956:	f020 0b03 	bic.w	fp, r0, #3
    d95a:	eb06 0c0b 	add.w	ip, r6, fp
    d95e:	f105 0010 	add.w	r0, r5, #16
    d962:	4584      	cmp	ip, r0
    d964:	da4d      	bge.n	da02 <_realloc_r+0x222>
    d966:	07c9      	lsls	r1, r1, #31
    d968:	f53f af7d 	bmi.w	d866 <_realloc_r+0x86>
    d96c:	f854 1c08 	ldr.w	r1, [r4, #-8]
    d970:	eba9 0a01 	sub.w	sl, r9, r1
    d974:	f8da 1004 	ldr.w	r1, [sl, #4]
    d978:	f021 0103 	bic.w	r1, r1, #3
    d97c:	448b      	add	fp, r1
    d97e:	44b3      	add	fp, r6
    d980:	4558      	cmp	r0, fp
    d982:	f73f af6c 	bgt.w	d85e <_realloc_r+0x7e>
    d986:	4657      	mov	r7, sl
    d988:	f8da 100c 	ldr.w	r1, [sl, #12]
    d98c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    d990:	1f32      	subs	r2, r6, #4
    d992:	2a24      	cmp	r2, #36	; 0x24
    d994:	60c1      	str	r1, [r0, #12]
    d996:	6088      	str	r0, [r1, #8]
    d998:	f200 80db 	bhi.w	db52 <_realloc_r+0x372>
    d99c:	2a13      	cmp	r2, #19
    d99e:	f240 80d6 	bls.w	db4e <_realloc_r+0x36e>
    d9a2:	6821      	ldr	r1, [r4, #0]
    d9a4:	f8ca 1008 	str.w	r1, [sl, #8]
    d9a8:	6861      	ldr	r1, [r4, #4]
    d9aa:	f8ca 100c 	str.w	r1, [sl, #12]
    d9ae:	2a1b      	cmp	r2, #27
    d9b0:	f200 80df 	bhi.w	db72 <_realloc_r+0x392>
    d9b4:	3408      	adds	r4, #8
    d9b6:	f10a 0210 	add.w	r2, sl, #16
    d9ba:	6821      	ldr	r1, [r4, #0]
    d9bc:	6011      	str	r1, [r2, #0]
    d9be:	6861      	ldr	r1, [r4, #4]
    d9c0:	6051      	str	r1, [r2, #4]
    d9c2:	68a1      	ldr	r1, [r4, #8]
    d9c4:	6091      	str	r1, [r2, #8]
    d9c6:	eb0a 0105 	add.w	r1, sl, r5
    d9ca:	ebab 0205 	sub.w	r2, fp, r5
    d9ce:	f042 0201 	orr.w	r2, r2, #1
    d9d2:	6099      	str	r1, [r3, #8]
    d9d4:	604a      	str	r2, [r1, #4]
    d9d6:	f8da 3004 	ldr.w	r3, [sl, #4]
    d9da:	f003 0301 	and.w	r3, r3, #1
    d9de:	432b      	orrs	r3, r5
    d9e0:	4640      	mov	r0, r8
    d9e2:	f8ca 3004 	str.w	r3, [sl, #4]
    d9e6:	f7ff fef5 	bl	d7d4 <__malloc_unlock>
    d9ea:	e76e      	b.n	d8ca <_realloc_r+0xea>
    d9ec:	6823      	ldr	r3, [r4, #0]
    d9ee:	6003      	str	r3, [r0, #0]
    d9f0:	6863      	ldr	r3, [r4, #4]
    d9f2:	6043      	str	r3, [r0, #4]
    d9f4:	2a1b      	cmp	r2, #27
    d9f6:	d868      	bhi.n	daca <_realloc_r+0x2ea>
    d9f8:	f104 0208 	add.w	r2, r4, #8
    d9fc:	f100 0308 	add.w	r3, r0, #8
    da00:	e74a      	b.n	d898 <_realloc_r+0xb8>
    da02:	eb09 0205 	add.w	r2, r9, r5
    da06:	609a      	str	r2, [r3, #8]
    da08:	ebac 0305 	sub.w	r3, ip, r5
    da0c:	f043 0301 	orr.w	r3, r3, #1
    da10:	6053      	str	r3, [r2, #4]
    da12:	f854 3c04 	ldr.w	r3, [r4, #-4]
    da16:	f003 0301 	and.w	r3, r3, #1
    da1a:	432b      	orrs	r3, r5
    da1c:	4640      	mov	r0, r8
    da1e:	f844 3c04 	str.w	r3, [r4, #-4]
    da22:	f7ff fed7 	bl	d7d4 <__malloc_unlock>
    da26:	4627      	mov	r7, r4
    da28:	e74f      	b.n	d8ca <_realloc_r+0xea>
    da2a:	f850 3c04 	ldr.w	r3, [r0, #-4]
    da2e:	f023 0303 	bic.w	r3, r3, #3
    da32:	441e      	add	r6, r3
    da34:	e751      	b.n	d8da <_realloc_r+0xfa>
    da36:	4657      	mov	r7, sl
    da38:	f8da 100c 	ldr.w	r1, [sl, #12]
    da3c:	f857 0f08 	ldr.w	r0, [r7, #8]!
    da40:	1f32      	subs	r2, r6, #4
    da42:	2a24      	cmp	r2, #36	; 0x24
    da44:	60c1      	str	r1, [r0, #12]
    da46:	6088      	str	r0, [r1, #8]
    da48:	d84c      	bhi.n	dae4 <_realloc_r+0x304>
    da4a:	2a13      	cmp	r2, #19
    da4c:	d948      	bls.n	dae0 <_realloc_r+0x300>
    da4e:	6821      	ldr	r1, [r4, #0]
    da50:	f8ca 1008 	str.w	r1, [sl, #8]
    da54:	6861      	ldr	r1, [r4, #4]
    da56:	f8ca 100c 	str.w	r1, [sl, #12]
    da5a:	2a1b      	cmp	r2, #27
    da5c:	d856      	bhi.n	db0c <_realloc_r+0x32c>
    da5e:	3408      	adds	r4, #8
    da60:	f10a 0210 	add.w	r2, sl, #16
    da64:	461e      	mov	r6, r3
    da66:	6823      	ldr	r3, [r4, #0]
    da68:	6013      	str	r3, [r2, #0]
    da6a:	6863      	ldr	r3, [r4, #4]
    da6c:	6053      	str	r3, [r2, #4]
    da6e:	68a3      	ldr	r3, [r4, #8]
    da70:	6093      	str	r3, [r2, #8]
    da72:	46d1      	mov	r9, sl
    da74:	463c      	mov	r4, r7
    da76:	e730      	b.n	d8da <_realloc_r+0xfa>
    da78:	4621      	mov	r1, r4
    da7a:	f000 f9e7 	bl	de4c <memmove>
    da7e:	e711      	b.n	d8a4 <_realloc_r+0xc4>
    da80:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    da84:	4657      	mov	r7, sl
    da86:	60cb      	str	r3, [r1, #12]
    da88:	6099      	str	r1, [r3, #8]
    da8a:	f857 1f08 	ldr.w	r1, [r7, #8]!
    da8e:	f8da 300c 	ldr.w	r3, [sl, #12]
    da92:	60cb      	str	r3, [r1, #12]
    da94:	1f32      	subs	r2, r6, #4
    da96:	2a24      	cmp	r2, #36	; 0x24
    da98:	6099      	str	r1, [r3, #8]
    da9a:	d82d      	bhi.n	daf8 <_realloc_r+0x318>
    da9c:	2a13      	cmp	r2, #19
    da9e:	d929      	bls.n	daf4 <_realloc_r+0x314>
    daa0:	6823      	ldr	r3, [r4, #0]
    daa2:	f8ca 3008 	str.w	r3, [sl, #8]
    daa6:	6863      	ldr	r3, [r4, #4]
    daa8:	f8ca 300c 	str.w	r3, [sl, #12]
    daac:	2a1b      	cmp	r2, #27
    daae:	d842      	bhi.n	db36 <_realloc_r+0x356>
    dab0:	3408      	adds	r4, #8
    dab2:	f10a 0310 	add.w	r3, sl, #16
    dab6:	6822      	ldr	r2, [r4, #0]
    dab8:	601a      	str	r2, [r3, #0]
    daba:	6862      	ldr	r2, [r4, #4]
    dabc:	605a      	str	r2, [r3, #4]
    dabe:	68a2      	ldr	r2, [r4, #8]
    dac0:	609a      	str	r2, [r3, #8]
    dac2:	4666      	mov	r6, ip
    dac4:	46d1      	mov	r9, sl
    dac6:	463c      	mov	r4, r7
    dac8:	e707      	b.n	d8da <_realloc_r+0xfa>
    daca:	68a3      	ldr	r3, [r4, #8]
    dacc:	6083      	str	r3, [r0, #8]
    dace:	68e3      	ldr	r3, [r4, #12]
    dad0:	60c3      	str	r3, [r0, #12]
    dad2:	2a24      	cmp	r2, #36	; 0x24
    dad4:	d026      	beq.n	db24 <_realloc_r+0x344>
    dad6:	f104 0210 	add.w	r2, r4, #16
    dada:	f100 0310 	add.w	r3, r0, #16
    dade:	e6db      	b.n	d898 <_realloc_r+0xb8>
    dae0:	463a      	mov	r2, r7
    dae2:	e7bf      	b.n	da64 <_realloc_r+0x284>
    dae4:	4621      	mov	r1, r4
    dae6:	4638      	mov	r0, r7
    dae8:	461e      	mov	r6, r3
    daea:	46d1      	mov	r9, sl
    daec:	f000 f9ae 	bl	de4c <memmove>
    daf0:	463c      	mov	r4, r7
    daf2:	e6f2      	b.n	d8da <_realloc_r+0xfa>
    daf4:	463b      	mov	r3, r7
    daf6:	e7de      	b.n	dab6 <_realloc_r+0x2d6>
    daf8:	4621      	mov	r1, r4
    dafa:	4638      	mov	r0, r7
    dafc:	4666      	mov	r6, ip
    dafe:	46d1      	mov	r9, sl
    db00:	f000 f9a4 	bl	de4c <memmove>
    db04:	463c      	mov	r4, r7
    db06:	e6e8      	b.n	d8da <_realloc_r+0xfa>
    db08:	1fff8ab8 	.word	0x1fff8ab8
    db0c:	68a1      	ldr	r1, [r4, #8]
    db0e:	f8ca 1010 	str.w	r1, [sl, #16]
    db12:	68e1      	ldr	r1, [r4, #12]
    db14:	f8ca 1014 	str.w	r1, [sl, #20]
    db18:	2a24      	cmp	r2, #36	; 0x24
    db1a:	d020      	beq.n	db5e <_realloc_r+0x37e>
    db1c:	3410      	adds	r4, #16
    db1e:	f10a 0218 	add.w	r2, sl, #24
    db22:	e79f      	b.n	da64 <_realloc_r+0x284>
    db24:	6923      	ldr	r3, [r4, #16]
    db26:	6103      	str	r3, [r0, #16]
    db28:	6961      	ldr	r1, [r4, #20]
    db2a:	6141      	str	r1, [r0, #20]
    db2c:	f104 0218 	add.w	r2, r4, #24
    db30:	f100 0318 	add.w	r3, r0, #24
    db34:	e6b0      	b.n	d898 <_realloc_r+0xb8>
    db36:	68a3      	ldr	r3, [r4, #8]
    db38:	f8ca 3010 	str.w	r3, [sl, #16]
    db3c:	68e3      	ldr	r3, [r4, #12]
    db3e:	f8ca 3014 	str.w	r3, [sl, #20]
    db42:	2a24      	cmp	r2, #36	; 0x24
    db44:	d021      	beq.n	db8a <_realloc_r+0x3aa>
    db46:	3410      	adds	r4, #16
    db48:	f10a 0318 	add.w	r3, sl, #24
    db4c:	e7b3      	b.n	dab6 <_realloc_r+0x2d6>
    db4e:	463a      	mov	r2, r7
    db50:	e733      	b.n	d9ba <_realloc_r+0x1da>
    db52:	4621      	mov	r1, r4
    db54:	4638      	mov	r0, r7
    db56:	f000 f979 	bl	de4c <memmove>
    db5a:	4b16      	ldr	r3, [pc, #88]	; (dbb4 <_realloc_r+0x3d4>)
    db5c:	e733      	b.n	d9c6 <_realloc_r+0x1e6>
    db5e:	6922      	ldr	r2, [r4, #16]
    db60:	f8ca 2018 	str.w	r2, [sl, #24]
    db64:	6962      	ldr	r2, [r4, #20]
    db66:	f8ca 201c 	str.w	r2, [sl, #28]
    db6a:	3418      	adds	r4, #24
    db6c:	f10a 0220 	add.w	r2, sl, #32
    db70:	e778      	b.n	da64 <_realloc_r+0x284>
    db72:	68a1      	ldr	r1, [r4, #8]
    db74:	f8ca 1010 	str.w	r1, [sl, #16]
    db78:	68e1      	ldr	r1, [r4, #12]
    db7a:	f8ca 1014 	str.w	r1, [sl, #20]
    db7e:	2a24      	cmp	r2, #36	; 0x24
    db80:	d00d      	beq.n	db9e <_realloc_r+0x3be>
    db82:	3410      	adds	r4, #16
    db84:	f10a 0218 	add.w	r2, sl, #24
    db88:	e717      	b.n	d9ba <_realloc_r+0x1da>
    db8a:	6923      	ldr	r3, [r4, #16]
    db8c:	f8ca 3018 	str.w	r3, [sl, #24]
    db90:	6963      	ldr	r3, [r4, #20]
    db92:	f8ca 301c 	str.w	r3, [sl, #28]
    db96:	3418      	adds	r4, #24
    db98:	f10a 0320 	add.w	r3, sl, #32
    db9c:	e78b      	b.n	dab6 <_realloc_r+0x2d6>
    db9e:	6922      	ldr	r2, [r4, #16]
    dba0:	f8ca 2018 	str.w	r2, [sl, #24]
    dba4:	6962      	ldr	r2, [r4, #20]
    dba6:	f8ca 201c 	str.w	r2, [sl, #28]
    dbaa:	3418      	adds	r4, #24
    dbac:	f10a 0220 	add.w	r2, sl, #32
    dbb0:	e703      	b.n	d9ba <_realloc_r+0x1da>
    dbb2:	bf00      	nop
    dbb4:	1fff8ab8 	.word	0x1fff8ab8

0000dbb8 <stdio_exit_handler>:
    dbb8:	4a02      	ldr	r2, [pc, #8]	; (dbc4 <stdio_exit_handler+0xc>)
    dbba:	4903      	ldr	r1, [pc, #12]	; (dbc8 <stdio_exit_handler+0x10>)
    dbbc:	4803      	ldr	r0, [pc, #12]	; (dbcc <stdio_exit_handler+0x14>)
    dbbe:	f000 b8bb 	b.w	dd38 <_fwalk_sglue>
    dbc2:	bf00      	nop
    dbc4:	1fff8ec8 	.word	0x1fff8ec8
    dbc8:	000108b1 	.word	0x000108b1
    dbcc:	1fff9040 	.word	0x1fff9040

0000dbd0 <cleanup_stdio>:
    dbd0:	4b0c      	ldr	r3, [pc, #48]	; (dc04 <cleanup_stdio+0x34>)
    dbd2:	6841      	ldr	r1, [r0, #4]
    dbd4:	4299      	cmp	r1, r3
    dbd6:	b510      	push	{r4, lr}
    dbd8:	4604      	mov	r4, r0
    dbda:	d001      	beq.n	dbe0 <cleanup_stdio+0x10>
    dbdc:	f002 fe68 	bl	108b0 <_fclose_r>
    dbe0:	68a1      	ldr	r1, [r4, #8]
    dbe2:	4b09      	ldr	r3, [pc, #36]	; (dc08 <cleanup_stdio+0x38>)
    dbe4:	4299      	cmp	r1, r3
    dbe6:	d002      	beq.n	dbee <cleanup_stdio+0x1e>
    dbe8:	4620      	mov	r0, r4
    dbea:	f002 fe61 	bl	108b0 <_fclose_r>
    dbee:	68e1      	ldr	r1, [r4, #12]
    dbf0:	4b06      	ldr	r3, [pc, #24]	; (dc0c <cleanup_stdio+0x3c>)
    dbf2:	4299      	cmp	r1, r3
    dbf4:	d004      	beq.n	dc00 <cleanup_stdio+0x30>
    dbf6:	4620      	mov	r0, r4
    dbf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dbfc:	f002 be58 	b.w	108b0 <_fclose_r>
    dc00:	bd10      	pop	{r4, pc}
    dc02:	bf00      	nop
    dc04:	1fffd62c 	.word	0x1fffd62c
    dc08:	1fffd694 	.word	0x1fffd694
    dc0c:	1fffd6fc 	.word	0x1fffd6fc

0000dc10 <global_stdio_init.part.0>:
    dc10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dc14:	4c2a      	ldr	r4, [pc, #168]	; (dcc0 <global_stdio_init.part.0+0xb0>)
    dc16:	4b2b      	ldr	r3, [pc, #172]	; (dcc4 <global_stdio_init.part.0+0xb4>)
    dc18:	482b      	ldr	r0, [pc, #172]	; (dcc8 <global_stdio_init.part.0+0xb8>)
    dc1a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; dccc <global_stdio_init.part.0+0xbc>
    dc1e:	f8df 80b0 	ldr.w	r8, [pc, #176]	; dcd0 <global_stdio_init.part.0+0xc0>
    dc22:	4f2c      	ldr	r7, [pc, #176]	; (dcd4 <global_stdio_init.part.0+0xc4>)
    dc24:	6018      	str	r0, [r3, #0]
    dc26:	2500      	movs	r5, #0
    dc28:	2304      	movs	r3, #4
    dc2a:	2208      	movs	r2, #8
    dc2c:	4629      	mov	r1, r5
    dc2e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    dc32:	4e29      	ldr	r6, [pc, #164]	; (dcd8 <global_stdio_init.part.0+0xc8>)
    dc34:	6665      	str	r5, [r4, #100]	; 0x64
    dc36:	e9c4 5302 	strd	r5, r3, [r4, #8]
    dc3a:	e9c4 5500 	strd	r5, r5, [r4]
    dc3e:	e9c4 5504 	strd	r5, r5, [r4, #16]
    dc42:	61a5      	str	r5, [r4, #24]
    dc44:	f000 f97e 	bl	df44 <memset>
    dc48:	4b24      	ldr	r3, [pc, #144]	; (dcdc <global_stdio_init.part.0+0xcc>)
    dc4a:	6763      	str	r3, [r4, #116]	; 0x74
    dc4c:	2208      	movs	r2, #8
    dc4e:	4629      	mov	r1, r5
    dc50:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    dc54:	e9c4 4907 	strd	r4, r9, [r4, #28]
    dc58:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    dc5c:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    dc60:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    dc64:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    dc68:	6725      	str	r5, [r4, #112]	; 0x70
    dc6a:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    dc6e:	62e6      	str	r6, [r4, #44]	; 0x2c
    dc70:	f000 f968 	bl	df44 <memset>
    dc74:	4b1a      	ldr	r3, [pc, #104]	; (dce0 <global_stdio_init.part.0+0xd0>)
    dc76:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    dc7a:	4629      	mov	r1, r5
    dc7c:	f104 0368 	add.w	r3, r4, #104	; 0x68
    dc80:	2208      	movs	r2, #8
    dc82:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    dc86:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    dc8a:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    dc8e:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    dc92:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    dc96:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    dc9a:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    dc9e:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    dca2:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    dca6:	f000 f94d 	bl	df44 <memset>
    dcaa:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    dcae:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    dcb2:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    dcb6:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    dcba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dcbe:	bf00      	nop
    dcc0:	1fffd62c 	.word	0x1fffd62c
    dcc4:	1fffd764 	.word	0x1fffd764
    dcc8:	0000dbb9 	.word	0x0000dbb9
    dccc:	0000ddc1 	.word	0x0000ddc1
    dcd0:	0000dde5 	.word	0x0000dde5
    dcd4:	0000de25 	.word	0x0000de25
    dcd8:	0000de45 	.word	0x0000de45
    dcdc:	00010009 	.word	0x00010009
    dce0:	00020012 	.word	0x00020012

0000dce4 <__sinit>:
    dce4:	b510      	push	{r4, lr}
    dce6:	4604      	mov	r4, r0
    dce8:	480a      	ldr	r0, [pc, #40]	; (dd14 <__sinit+0x30>)
    dcea:	f000 fa49 	bl	e180 <__retarget_lock_acquire_recursive>
    dcee:	6b63      	ldr	r3, [r4, #52]	; 0x34
    dcf0:	b923      	cbnz	r3, dcfc <__sinit+0x18>
    dcf2:	4b09      	ldr	r3, [pc, #36]	; (dd18 <__sinit+0x34>)
    dcf4:	4a09      	ldr	r2, [pc, #36]	; (dd1c <__sinit+0x38>)
    dcf6:	681b      	ldr	r3, [r3, #0]
    dcf8:	6362      	str	r2, [r4, #52]	; 0x34
    dcfa:	b123      	cbz	r3, dd06 <__sinit+0x22>
    dcfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd00:	4804      	ldr	r0, [pc, #16]	; (dd14 <__sinit+0x30>)
    dd02:	f000 ba3f 	b.w	e184 <__retarget_lock_release_recursive>
    dd06:	f7ff ff83 	bl	dc10 <global_stdio_init.part.0>
    dd0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd0e:	4801      	ldr	r0, [pc, #4]	; (dd14 <__sinit+0x30>)
    dd10:	f000 ba38 	b.w	e184 <__retarget_lock_release_recursive>
    dd14:	1fffd774 	.word	0x1fffd774
    dd18:	1fffd764 	.word	0x1fffd764
    dd1c:	0000dbd1 	.word	0x0000dbd1

0000dd20 <__sfp_lock_acquire>:
    dd20:	4801      	ldr	r0, [pc, #4]	; (dd28 <__sfp_lock_acquire+0x8>)
    dd22:	f000 ba2d 	b.w	e180 <__retarget_lock_acquire_recursive>
    dd26:	bf00      	nop
    dd28:	1fffd774 	.word	0x1fffd774

0000dd2c <__sfp_lock_release>:
    dd2c:	4801      	ldr	r0, [pc, #4]	; (dd34 <__sfp_lock_release+0x8>)
    dd2e:	f000 ba29 	b.w	e184 <__retarget_lock_release_recursive>
    dd32:	bf00      	nop
    dd34:	1fffd774 	.word	0x1fffd774

0000dd38 <_fwalk_sglue>:
    dd38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd3c:	4680      	mov	r8, r0
    dd3e:	460f      	mov	r7, r1
    dd40:	4616      	mov	r6, r2
    dd42:	f04f 0900 	mov.w	r9, #0
    dd46:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    dd4a:	3d01      	subs	r5, #1
    dd4c:	d411      	bmi.n	dd72 <_fwalk_sglue+0x3a>
    dd4e:	89a3      	ldrh	r3, [r4, #12]
    dd50:	2b01      	cmp	r3, #1
    dd52:	f105 35ff 	add.w	r5, r5, #4294967295
    dd56:	d908      	bls.n	dd6a <_fwalk_sglue+0x32>
    dd58:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    dd5c:	3301      	adds	r3, #1
    dd5e:	4621      	mov	r1, r4
    dd60:	d003      	beq.n	dd6a <_fwalk_sglue+0x32>
    dd62:	4640      	mov	r0, r8
    dd64:	47b8      	blx	r7
    dd66:	ea49 0900 	orr.w	r9, r9, r0
    dd6a:	1c6b      	adds	r3, r5, #1
    dd6c:	f104 0468 	add.w	r4, r4, #104	; 0x68
    dd70:	d1ed      	bne.n	dd4e <_fwalk_sglue+0x16>
    dd72:	6836      	ldr	r6, [r6, #0]
    dd74:	2e00      	cmp	r6, #0
    dd76:	d1e6      	bne.n	dd46 <_fwalk_sglue+0xe>
    dd78:	4648      	mov	r0, r9
    dd7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    dd7e:	bf00      	nop

0000dd80 <sprintf>:
    dd80:	b40e      	push	{r1, r2, r3}
    dd82:	b510      	push	{r4, lr}
    dd84:	b09d      	sub	sp, #116	; 0x74
    dd86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dd8a:	ab1f      	add	r3, sp, #124	; 0x7c
    dd8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
    dd90:	9104      	str	r1, [sp, #16]
    dd92:	4909      	ldr	r1, [pc, #36]	; (ddb8 <sprintf+0x38>)
    dd94:	f853 2b04 	ldr.w	r2, [r3], #4
    dd98:	9002      	str	r0, [sp, #8]
    dd9a:	4c08      	ldr	r4, [pc, #32]	; (ddbc <sprintf+0x3c>)
    dd9c:	6808      	ldr	r0, [r1, #0]
    dd9e:	9301      	str	r3, [sp, #4]
    dda0:	a902      	add	r1, sp, #8
    dda2:	9405      	str	r4, [sp, #20]
    dda4:	f000 ffb2 	bl	ed0c <_svfprintf_r>
    dda8:	9b02      	ldr	r3, [sp, #8]
    ddaa:	2200      	movs	r2, #0
    ddac:	701a      	strb	r2, [r3, #0]
    ddae:	b01d      	add	sp, #116	; 0x74
    ddb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ddb4:	b003      	add	sp, #12
    ddb6:	4770      	bx	lr
    ddb8:	1fff9160 	.word	0x1fff9160
    ddbc:	ffff0208 	.word	0xffff0208

0000ddc0 <__sread>:
    ddc0:	b510      	push	{r4, lr}
    ddc2:	460c      	mov	r4, r1
    ddc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    ddc8:	f000 f96e 	bl	e0a8 <_read_r>
    ddcc:	2800      	cmp	r0, #0
    ddce:	db03      	blt.n	ddd8 <__sread+0x18>
    ddd0:	6d23      	ldr	r3, [r4, #80]	; 0x50
    ddd2:	4403      	add	r3, r0
    ddd4:	6523      	str	r3, [r4, #80]	; 0x50
    ddd6:	bd10      	pop	{r4, pc}
    ddd8:	89a3      	ldrh	r3, [r4, #12]
    ddda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    ddde:	81a3      	strh	r3, [r4, #12]
    dde0:	bd10      	pop	{r4, pc}
    dde2:	bf00      	nop

0000dde4 <__swrite>:
    dde4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dde8:	460c      	mov	r4, r1
    ddea:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    ddee:	461f      	mov	r7, r3
    ddf0:	05cb      	lsls	r3, r1, #23
    ddf2:	4605      	mov	r5, r0
    ddf4:	4616      	mov	r6, r2
    ddf6:	d40b      	bmi.n	de10 <__swrite+0x2c>
    ddf8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    ddfc:	81a1      	strh	r1, [r4, #12]
    ddfe:	463b      	mov	r3, r7
    de00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    de04:	4632      	mov	r2, r6
    de06:	4628      	mov	r0, r5
    de08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    de0c:	f000 b974 	b.w	e0f8 <_write_r>
    de10:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    de14:	2302      	movs	r3, #2
    de16:	2200      	movs	r2, #0
    de18:	f000 f930 	bl	e07c <_lseek_r>
    de1c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    de20:	e7ea      	b.n	ddf8 <__swrite+0x14>
    de22:	bf00      	nop

0000de24 <__sseek>:
    de24:	b510      	push	{r4, lr}
    de26:	460c      	mov	r4, r1
    de28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    de2c:	f000 f926 	bl	e07c <_lseek_r>
    de30:	89a3      	ldrh	r3, [r4, #12]
    de32:	1c42      	adds	r2, r0, #1
    de34:	bf0e      	itee	eq
    de36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    de3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    de3e:	6520      	strne	r0, [r4, #80]	; 0x50
    de40:	81a3      	strh	r3, [r4, #12]
    de42:	bd10      	pop	{r4, pc}

0000de44 <__sclose>:
    de44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    de48:	f000 b906 	b.w	e058 <_close_r>

0000de4c <memmove>:
    de4c:	4288      	cmp	r0, r1
    de4e:	d90d      	bls.n	de6c <memmove+0x20>
    de50:	188b      	adds	r3, r1, r2
    de52:	4283      	cmp	r3, r0
    de54:	d90a      	bls.n	de6c <memmove+0x20>
    de56:	eb00 0c02 	add.w	ip, r0, r2
    de5a:	b1ba      	cbz	r2, de8c <memmove+0x40>
    de5c:	4662      	mov	r2, ip
    de5e:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    de62:	f802 cd01 	strb.w	ip, [r2, #-1]!
    de66:	4299      	cmp	r1, r3
    de68:	d1f9      	bne.n	de5e <memmove+0x12>
    de6a:	4770      	bx	lr
    de6c:	2a0f      	cmp	r2, #15
    de6e:	d80e      	bhi.n	de8e <memmove+0x42>
    de70:	4603      	mov	r3, r0
    de72:	f102 3cff 	add.w	ip, r2, #4294967295
    de76:	b14a      	cbz	r2, de8c <memmove+0x40>
    de78:	f10c 0c01 	add.w	ip, ip, #1
    de7c:	3b01      	subs	r3, #1
    de7e:	448c      	add	ip, r1
    de80:	f811 2b01 	ldrb.w	r2, [r1], #1
    de84:	f803 2f01 	strb.w	r2, [r3, #1]!
    de88:	4561      	cmp	r1, ip
    de8a:	d1f9      	bne.n	de80 <memmove+0x34>
    de8c:	4770      	bx	lr
    de8e:	ea40 0301 	orr.w	r3, r0, r1
    de92:	079b      	lsls	r3, r3, #30
    de94:	d150      	bne.n	df38 <memmove+0xec>
    de96:	f1a2 0310 	sub.w	r3, r2, #16
    de9a:	b570      	push	{r4, r5, r6, lr}
    de9c:	f101 0c20 	add.w	ip, r1, #32
    dea0:	f023 050f 	bic.w	r5, r3, #15
    dea4:	f101 0e10 	add.w	lr, r1, #16
    dea8:	f100 0410 	add.w	r4, r0, #16
    deac:	44ac      	add	ip, r5
    deae:	091b      	lsrs	r3, r3, #4
    deb0:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    deb4:	f844 5c10 	str.w	r5, [r4, #-16]
    deb8:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    debc:	f844 5c0c 	str.w	r5, [r4, #-12]
    dec0:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    dec4:	f844 5c08 	str.w	r5, [r4, #-8]
    dec8:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    decc:	f844 5c04 	str.w	r5, [r4, #-4]
    ded0:	f10e 0e10 	add.w	lr, lr, #16
    ded4:	45e6      	cmp	lr, ip
    ded6:	f104 0410 	add.w	r4, r4, #16
    deda:	d1e9      	bne.n	deb0 <memmove+0x64>
    dedc:	3301      	adds	r3, #1
    dede:	f012 0f0c 	tst.w	r2, #12
    dee2:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    dee6:	f002 040f 	and.w	r4, r2, #15
    deea:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    deee:	d027      	beq.n	df40 <memmove+0xf4>
    def0:	3c04      	subs	r4, #4
    def2:	f024 0603 	bic.w	r6, r4, #3
    def6:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    defa:	441e      	add	r6, r3
    defc:	1f1c      	subs	r4, r3, #4
    defe:	468e      	mov	lr, r1
    df00:	f85e 5b04 	ldr.w	r5, [lr], #4
    df04:	f844 5f04 	str.w	r5, [r4, #4]!
    df08:	42b4      	cmp	r4, r6
    df0a:	d1f9      	bne.n	df00 <memmove+0xb4>
    df0c:	f10c 0401 	add.w	r4, ip, #1
    df10:	f002 0203 	and.w	r2, r2, #3
    df14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    df18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    df1c:	f102 3cff 	add.w	ip, r2, #4294967295
    df20:	b14a      	cbz	r2, df36 <memmove+0xea>
    df22:	f10c 0c01 	add.w	ip, ip, #1
    df26:	3b01      	subs	r3, #1
    df28:	448c      	add	ip, r1
    df2a:	f811 2b01 	ldrb.w	r2, [r1], #1
    df2e:	f803 2f01 	strb.w	r2, [r3, #1]!
    df32:	4561      	cmp	r1, ip
    df34:	d1f9      	bne.n	df2a <memmove+0xde>
    df36:	bd70      	pop	{r4, r5, r6, pc}
    df38:	f102 3cff 	add.w	ip, r2, #4294967295
    df3c:	4603      	mov	r3, r0
    df3e:	e79b      	b.n	de78 <memmove+0x2c>
    df40:	4622      	mov	r2, r4
    df42:	e7eb      	b.n	df1c <memmove+0xd0>

0000df44 <memset>:
    df44:	0783      	lsls	r3, r0, #30
    df46:	b530      	push	{r4, r5, lr}
    df48:	d048      	beq.n	dfdc <memset+0x98>
    df4a:	1e54      	subs	r4, r2, #1
    df4c:	2a00      	cmp	r2, #0
    df4e:	d03f      	beq.n	dfd0 <memset+0x8c>
    df50:	b2ca      	uxtb	r2, r1
    df52:	4603      	mov	r3, r0
    df54:	e001      	b.n	df5a <memset+0x16>
    df56:	3c01      	subs	r4, #1
    df58:	d33a      	bcc.n	dfd0 <memset+0x8c>
    df5a:	f803 2b01 	strb.w	r2, [r3], #1
    df5e:	079d      	lsls	r5, r3, #30
    df60:	d1f9      	bne.n	df56 <memset+0x12>
    df62:	2c03      	cmp	r4, #3
    df64:	d92d      	bls.n	dfc2 <memset+0x7e>
    df66:	b2cd      	uxtb	r5, r1
    df68:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    df6c:	2c0f      	cmp	r4, #15
    df6e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    df72:	d936      	bls.n	dfe2 <memset+0x9e>
    df74:	f1a4 0210 	sub.w	r2, r4, #16
    df78:	f022 0c0f 	bic.w	ip, r2, #15
    df7c:	f103 0e20 	add.w	lr, r3, #32
    df80:	44e6      	add	lr, ip
    df82:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    df86:	f103 0210 	add.w	r2, r3, #16
    df8a:	e942 5504 	strd	r5, r5, [r2, #-16]
    df8e:	e942 5502 	strd	r5, r5, [r2, #-8]
    df92:	3210      	adds	r2, #16
    df94:	4572      	cmp	r2, lr
    df96:	d1f8      	bne.n	df8a <memset+0x46>
    df98:	f10c 0201 	add.w	r2, ip, #1
    df9c:	f014 0f0c 	tst.w	r4, #12
    dfa0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    dfa4:	f004 0c0f 	and.w	ip, r4, #15
    dfa8:	d013      	beq.n	dfd2 <memset+0x8e>
    dfaa:	f1ac 0304 	sub.w	r3, ip, #4
    dfae:	f023 0303 	bic.w	r3, r3, #3
    dfb2:	3304      	adds	r3, #4
    dfb4:	4413      	add	r3, r2
    dfb6:	f842 5b04 	str.w	r5, [r2], #4
    dfba:	4293      	cmp	r3, r2
    dfbc:	d1fb      	bne.n	dfb6 <memset+0x72>
    dfbe:	f00c 0403 	and.w	r4, ip, #3
    dfc2:	b12c      	cbz	r4, dfd0 <memset+0x8c>
    dfc4:	b2c9      	uxtb	r1, r1
    dfc6:	441c      	add	r4, r3
    dfc8:	f803 1b01 	strb.w	r1, [r3], #1
    dfcc:	429c      	cmp	r4, r3
    dfce:	d1fb      	bne.n	dfc8 <memset+0x84>
    dfd0:	bd30      	pop	{r4, r5, pc}
    dfd2:	4664      	mov	r4, ip
    dfd4:	4613      	mov	r3, r2
    dfd6:	2c00      	cmp	r4, #0
    dfd8:	d1f4      	bne.n	dfc4 <memset+0x80>
    dfda:	e7f9      	b.n	dfd0 <memset+0x8c>
    dfdc:	4603      	mov	r3, r0
    dfde:	4614      	mov	r4, r2
    dfe0:	e7bf      	b.n	df62 <memset+0x1e>
    dfe2:	461a      	mov	r2, r3
    dfe4:	46a4      	mov	ip, r4
    dfe6:	e7e0      	b.n	dfaa <memset+0x66>

0000dfe8 <strncpy>:
    dfe8:	ea40 0301 	orr.w	r3, r0, r1
    dfec:	079b      	lsls	r3, r3, #30
    dfee:	b530      	push	{r4, r5, lr}
    dff0:	d101      	bne.n	dff6 <strncpy+0xe>
    dff2:	2a03      	cmp	r2, #3
    dff4:	d80f      	bhi.n	e016 <strncpy+0x2e>
    dff6:	4684      	mov	ip, r0
    dff8:	f101 3eff 	add.w	lr, r1, #4294967295
    dffc:	e007      	b.n	e00e <strncpy+0x26>
    dffe:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    e002:	f803 1b01 	strb.w	r1, [r3], #1
    e006:	1e54      	subs	r4, r2, #1
    e008:	b1c1      	cbz	r1, e03c <strncpy+0x54>
    e00a:	469c      	mov	ip, r3
    e00c:	4622      	mov	r2, r4
    e00e:	4663      	mov	r3, ip
    e010:	2a00      	cmp	r2, #0
    e012:	d1f4      	bne.n	dffe <strncpy+0x16>
    e014:	bd30      	pop	{r4, r5, pc}
    e016:	460b      	mov	r3, r1
    e018:	4684      	mov	ip, r0
    e01a:	4619      	mov	r1, r3
    e01c:	f853 5b04 	ldr.w	r5, [r3], #4
    e020:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    e024:	ea24 0405 	bic.w	r4, r4, r5
    e028:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    e02c:	d1e4      	bne.n	dff8 <strncpy+0x10>
    e02e:	3a04      	subs	r2, #4
    e030:	2a03      	cmp	r2, #3
    e032:	f84c 5b04 	str.w	r5, [ip], #4
    e036:	4619      	mov	r1, r3
    e038:	d8ef      	bhi.n	e01a <strncpy+0x32>
    e03a:	e7dd      	b.n	dff8 <strncpy+0x10>
    e03c:	4494      	add	ip, r2
    e03e:	2c00      	cmp	r4, #0
    e040:	d0e8      	beq.n	e014 <strncpy+0x2c>
    e042:	f803 1b01 	strb.w	r1, [r3], #1
    e046:	4563      	cmp	r3, ip
    e048:	d1fb      	bne.n	e042 <strncpy+0x5a>
    e04a:	bd30      	pop	{r4, r5, pc}

0000e04c <__locale_mb_cur_max>:
    e04c:	4b01      	ldr	r3, [pc, #4]	; (e054 <__locale_mb_cur_max+0x8>)
    e04e:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    e052:	4770      	bx	lr
    e054:	1fff8ed4 	.word	0x1fff8ed4

0000e058 <_close_r>:
    e058:	b538      	push	{r3, r4, r5, lr}
    e05a:	4d07      	ldr	r5, [pc, #28]	; (e078 <_close_r+0x20>)
    e05c:	2200      	movs	r2, #0
    e05e:	4604      	mov	r4, r0
    e060:	4608      	mov	r0, r1
    e062:	602a      	str	r2, [r5, #0]
    e064:	f7fb fec0 	bl	9de8 <_close>
    e068:	1c43      	adds	r3, r0, #1
    e06a:	d000      	beq.n	e06e <_close_r+0x16>
    e06c:	bd38      	pop	{r3, r4, r5, pc}
    e06e:	682b      	ldr	r3, [r5, #0]
    e070:	2b00      	cmp	r3, #0
    e072:	d0fb      	beq.n	e06c <_close_r+0x14>
    e074:	6023      	str	r3, [r4, #0]
    e076:	bd38      	pop	{r3, r4, r5, pc}
    e078:	1fffd768 	.word	0x1fffd768

0000e07c <_lseek_r>:
    e07c:	b538      	push	{r3, r4, r5, lr}
    e07e:	460c      	mov	r4, r1
    e080:	4d08      	ldr	r5, [pc, #32]	; (e0a4 <_lseek_r+0x28>)
    e082:	4684      	mov	ip, r0
    e084:	4611      	mov	r1, r2
    e086:	4620      	mov	r0, r4
    e088:	461a      	mov	r2, r3
    e08a:	2300      	movs	r3, #0
    e08c:	602b      	str	r3, [r5, #0]
    e08e:	4664      	mov	r4, ip
    e090:	f7fb feb6 	bl	9e00 <_lseek>
    e094:	1c43      	adds	r3, r0, #1
    e096:	d000      	beq.n	e09a <_lseek_r+0x1e>
    e098:	bd38      	pop	{r3, r4, r5, pc}
    e09a:	682b      	ldr	r3, [r5, #0]
    e09c:	2b00      	cmp	r3, #0
    e09e:	d0fb      	beq.n	e098 <_lseek_r+0x1c>
    e0a0:	6023      	str	r3, [r4, #0]
    e0a2:	bd38      	pop	{r3, r4, r5, pc}
    e0a4:	1fffd768 	.word	0x1fffd768

0000e0a8 <_read_r>:
    e0a8:	b538      	push	{r3, r4, r5, lr}
    e0aa:	460c      	mov	r4, r1
    e0ac:	4d08      	ldr	r5, [pc, #32]	; (e0d0 <_read_r+0x28>)
    e0ae:	4684      	mov	ip, r0
    e0b0:	4611      	mov	r1, r2
    e0b2:	4620      	mov	r0, r4
    e0b4:	461a      	mov	r2, r3
    e0b6:	2300      	movs	r3, #0
    e0b8:	602b      	str	r3, [r5, #0]
    e0ba:	4664      	mov	r4, ip
    e0bc:	f7fb fe92 	bl	9de4 <_read>
    e0c0:	1c43      	adds	r3, r0, #1
    e0c2:	d000      	beq.n	e0c6 <_read_r+0x1e>
    e0c4:	bd38      	pop	{r3, r4, r5, pc}
    e0c6:	682b      	ldr	r3, [r5, #0]
    e0c8:	2b00      	cmp	r3, #0
    e0ca:	d0fb      	beq.n	e0c4 <_read_r+0x1c>
    e0cc:	6023      	str	r3, [r4, #0]
    e0ce:	bd38      	pop	{r3, r4, r5, pc}
    e0d0:	1fffd768 	.word	0x1fffd768

0000e0d4 <_sbrk_r>:
    e0d4:	b538      	push	{r3, r4, r5, lr}
    e0d6:	4d07      	ldr	r5, [pc, #28]	; (e0f4 <_sbrk_r+0x20>)
    e0d8:	2200      	movs	r2, #0
    e0da:	4604      	mov	r4, r0
    e0dc:	4608      	mov	r0, r1
    e0de:	602a      	str	r2, [r5, #0]
    e0e0:	f7fb fe6a 	bl	9db8 <_sbrk>
    e0e4:	1c43      	adds	r3, r0, #1
    e0e6:	d000      	beq.n	e0ea <_sbrk_r+0x16>
    e0e8:	bd38      	pop	{r3, r4, r5, pc}
    e0ea:	682b      	ldr	r3, [r5, #0]
    e0ec:	2b00      	cmp	r3, #0
    e0ee:	d0fb      	beq.n	e0e8 <_sbrk_r+0x14>
    e0f0:	6023      	str	r3, [r4, #0]
    e0f2:	bd38      	pop	{r3, r4, r5, pc}
    e0f4:	1fffd768 	.word	0x1fffd768

0000e0f8 <_write_r>:
    e0f8:	b538      	push	{r3, r4, r5, lr}
    e0fa:	460c      	mov	r4, r1
    e0fc:	4d08      	ldr	r5, [pc, #32]	; (e120 <_write_r+0x28>)
    e0fe:	4684      	mov	ip, r0
    e100:	4611      	mov	r1, r2
    e102:	4620      	mov	r0, r4
    e104:	461a      	mov	r2, r3
    e106:	2300      	movs	r3, #0
    e108:	602b      	str	r3, [r5, #0]
    e10a:	4664      	mov	r4, ip
    e10c:	f7fb fa80 	bl	9610 <_write>
    e110:	1c43      	adds	r3, r0, #1
    e112:	d000      	beq.n	e116 <_write_r+0x1e>
    e114:	bd38      	pop	{r3, r4, r5, pc}
    e116:	682b      	ldr	r3, [r5, #0]
    e118:	2b00      	cmp	r3, #0
    e11a:	d0fb      	beq.n	e114 <_write_r+0x1c>
    e11c:	6023      	str	r3, [r4, #0]
    e11e:	bd38      	pop	{r3, r4, r5, pc}
    e120:	1fffd768 	.word	0x1fffd768

0000e124 <__errno>:
    e124:	4b01      	ldr	r3, [pc, #4]	; (e12c <__errno+0x8>)
    e126:	6818      	ldr	r0, [r3, #0]
    e128:	4770      	bx	lr
    e12a:	bf00      	nop
    e12c:	1fff9160 	.word	0x1fff9160

0000e130 <__libc_init_array>:
    e130:	b570      	push	{r4, r5, r6, lr}
    e132:	4e0d      	ldr	r6, [pc, #52]	; (e168 <__libc_init_array+0x38>)
    e134:	4d0d      	ldr	r5, [pc, #52]	; (e16c <__libc_init_array+0x3c>)
    e136:	1b76      	subs	r6, r6, r5
    e138:	10b6      	asrs	r6, r6, #2
    e13a:	d006      	beq.n	e14a <__libc_init_array+0x1a>
    e13c:	2400      	movs	r4, #0
    e13e:	f855 3b04 	ldr.w	r3, [r5], #4
    e142:	3401      	adds	r4, #1
    e144:	4798      	blx	r3
    e146:	42a6      	cmp	r6, r4
    e148:	d1f9      	bne.n	e13e <__libc_init_array+0xe>
    e14a:	4e09      	ldr	r6, [pc, #36]	; (e170 <__libc_init_array+0x40>)
    e14c:	4d09      	ldr	r5, [pc, #36]	; (e174 <__libc_init_array+0x44>)
    e14e:	1b76      	subs	r6, r6, r5
    e150:	f007 fc02 	bl	15958 <_init>
    e154:	10b6      	asrs	r6, r6, #2
    e156:	d006      	beq.n	e166 <__libc_init_array+0x36>
    e158:	2400      	movs	r4, #0
    e15a:	f855 3b04 	ldr.w	r3, [r5], #4
    e15e:	3401      	adds	r4, #1
    e160:	4798      	blx	r3
    e162:	42a6      	cmp	r6, r4
    e164:	d1f9      	bne.n	e15a <__libc_init_array+0x2a>
    e166:	bd70      	pop	{r4, r5, r6, pc}
    e168:	00015964 	.word	0x00015964
    e16c:	00015964 	.word	0x00015964
    e170:	00015978 	.word	0x00015978
    e174:	00015964 	.word	0x00015964

0000e178 <__retarget_lock_init_recursive>:
    e178:	4770      	bx	lr
    e17a:	bf00      	nop

0000e17c <__retarget_lock_close_recursive>:
    e17c:	4770      	bx	lr
    e17e:	bf00      	nop

0000e180 <__retarget_lock_acquire_recursive>:
    e180:	4770      	bx	lr
    e182:	bf00      	nop

0000e184 <__retarget_lock_release_recursive>:
    e184:	4770      	bx	lr
    e186:	bf00      	nop
    e188:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e18c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e190:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e194:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e198:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e19c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e1a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e1a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e1a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e1ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e1b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e1b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e1b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    e1bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

0000e1c0 <strlen>:
    e1c0:	f890 f000 	pld	[r0]
    e1c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    e1c8:	f020 0107 	bic.w	r1, r0, #7
    e1cc:	f06f 0c00 	mvn.w	ip, #0
    e1d0:	f010 0407 	ands.w	r4, r0, #7
    e1d4:	f891 f020 	pld	[r1, #32]
    e1d8:	f040 8049 	bne.w	e26e <strlen+0xae>
    e1dc:	f04f 0400 	mov.w	r4, #0
    e1e0:	f06f 0007 	mvn.w	r0, #7
    e1e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    e1e8:	f891 f040 	pld	[r1, #64]	; 0x40
    e1ec:	f100 0008 	add.w	r0, r0, #8
    e1f0:	fa82 f24c 	uadd8	r2, r2, ip
    e1f4:	faa4 f28c 	sel	r2, r4, ip
    e1f8:	fa83 f34c 	uadd8	r3, r3, ip
    e1fc:	faa2 f38c 	sel	r3, r2, ip
    e200:	bb4b      	cbnz	r3, e256 <strlen+0x96>
    e202:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    e206:	fa82 f24c 	uadd8	r2, r2, ip
    e20a:	f100 0008 	add.w	r0, r0, #8
    e20e:	faa4 f28c 	sel	r2, r4, ip
    e212:	fa83 f34c 	uadd8	r3, r3, ip
    e216:	faa2 f38c 	sel	r3, r2, ip
    e21a:	b9e3      	cbnz	r3, e256 <strlen+0x96>
    e21c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    e220:	fa82 f24c 	uadd8	r2, r2, ip
    e224:	f100 0008 	add.w	r0, r0, #8
    e228:	faa4 f28c 	sel	r2, r4, ip
    e22c:	fa83 f34c 	uadd8	r3, r3, ip
    e230:	faa2 f38c 	sel	r3, r2, ip
    e234:	b97b      	cbnz	r3, e256 <strlen+0x96>
    e236:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    e23a:	f101 0120 	add.w	r1, r1, #32
    e23e:	fa82 f24c 	uadd8	r2, r2, ip
    e242:	f100 0008 	add.w	r0, r0, #8
    e246:	faa4 f28c 	sel	r2, r4, ip
    e24a:	fa83 f34c 	uadd8	r3, r3, ip
    e24e:	faa2 f38c 	sel	r3, r2, ip
    e252:	2b00      	cmp	r3, #0
    e254:	d0c6      	beq.n	e1e4 <strlen+0x24>
    e256:	2a00      	cmp	r2, #0
    e258:	bf04      	itt	eq
    e25a:	3004      	addeq	r0, #4
    e25c:	461a      	moveq	r2, r3
    e25e:	ba12      	rev	r2, r2
    e260:	fab2 f282 	clz	r2, r2
    e264:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    e268:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    e26c:	4770      	bx	lr
    e26e:	e9d1 2300 	ldrd	r2, r3, [r1]
    e272:	f004 0503 	and.w	r5, r4, #3
    e276:	f1c4 0000 	rsb	r0, r4, #0
    e27a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    e27e:	f014 0f04 	tst.w	r4, #4
    e282:	f891 f040 	pld	[r1, #64]	; 0x40
    e286:	fa0c f505 	lsl.w	r5, ip, r5
    e28a:	ea62 0205 	orn	r2, r2, r5
    e28e:	bf1c      	itt	ne
    e290:	ea63 0305 	ornne	r3, r3, r5
    e294:	4662      	movne	r2, ip
    e296:	f04f 0400 	mov.w	r4, #0
    e29a:	e7a9      	b.n	e1f0 <strlen+0x30>

0000e29c <register_fini>:
    e29c:	4b02      	ldr	r3, [pc, #8]	; (e2a8 <register_fini+0xc>)
    e29e:	b113      	cbz	r3, e2a6 <register_fini+0xa>
    e2a0:	4802      	ldr	r0, [pc, #8]	; (e2ac <register_fini+0x10>)
    e2a2:	f000 b805 	b.w	e2b0 <atexit>
    e2a6:	4770      	bx	lr
    e2a8:	00000000 	.word	0x00000000
    e2ac:	00010af5 	.word	0x00010af5

0000e2b0 <atexit>:
    e2b0:	2300      	movs	r3, #0
    e2b2:	4601      	mov	r1, r0
    e2b4:	461a      	mov	r2, r3
    e2b6:	4618      	mov	r0, r3
    e2b8:	f002 bcba 	b.w	10c30 <__register_exitproc>

0000e2bc <_malloc_trim_r>:
    e2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2be:	4f24      	ldr	r7, [pc, #144]	; (e350 <_malloc_trim_r+0x94>)
    e2c0:	460c      	mov	r4, r1
    e2c2:	4606      	mov	r6, r0
    e2c4:	f7ff fa80 	bl	d7c8 <__malloc_lock>
    e2c8:	68bb      	ldr	r3, [r7, #8]
    e2ca:	685d      	ldr	r5, [r3, #4]
    e2cc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    e2d0:	310f      	adds	r1, #15
    e2d2:	f025 0503 	bic.w	r5, r5, #3
    e2d6:	194b      	adds	r3, r1, r5
    e2d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    e2dc:	f023 030f 	bic.w	r3, r3, #15
    e2e0:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    e2e4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    e2e8:	db07      	blt.n	e2fa <_malloc_trim_r+0x3e>
    e2ea:	2100      	movs	r1, #0
    e2ec:	4630      	mov	r0, r6
    e2ee:	f7ff fef1 	bl	e0d4 <_sbrk_r>
    e2f2:	68bb      	ldr	r3, [r7, #8]
    e2f4:	442b      	add	r3, r5
    e2f6:	4298      	cmp	r0, r3
    e2f8:	d004      	beq.n	e304 <_malloc_trim_r+0x48>
    e2fa:	4630      	mov	r0, r6
    e2fc:	f7ff fa6a 	bl	d7d4 <__malloc_unlock>
    e300:	2000      	movs	r0, #0
    e302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e304:	4261      	negs	r1, r4
    e306:	4630      	mov	r0, r6
    e308:	f7ff fee4 	bl	e0d4 <_sbrk_r>
    e30c:	3001      	adds	r0, #1
    e30e:	d00d      	beq.n	e32c <_malloc_trim_r+0x70>
    e310:	4a10      	ldr	r2, [pc, #64]	; (e354 <_malloc_trim_r+0x98>)
    e312:	68bb      	ldr	r3, [r7, #8]
    e314:	1b2d      	subs	r5, r5, r4
    e316:	f045 0501 	orr.w	r5, r5, #1
    e31a:	605d      	str	r5, [r3, #4]
    e31c:	6813      	ldr	r3, [r2, #0]
    e31e:	4630      	mov	r0, r6
    e320:	1b1b      	subs	r3, r3, r4
    e322:	6013      	str	r3, [r2, #0]
    e324:	f7ff fa56 	bl	d7d4 <__malloc_unlock>
    e328:	2001      	movs	r0, #1
    e32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e32c:	2100      	movs	r1, #0
    e32e:	4630      	mov	r0, r6
    e330:	f7ff fed0 	bl	e0d4 <_sbrk_r>
    e334:	68ba      	ldr	r2, [r7, #8]
    e336:	1a83      	subs	r3, r0, r2
    e338:	2b0f      	cmp	r3, #15
    e33a:	ddde      	ble.n	e2fa <_malloc_trim_r+0x3e>
    e33c:	f043 0301 	orr.w	r3, r3, #1
    e340:	6053      	str	r3, [r2, #4]
    e342:	4b05      	ldr	r3, [pc, #20]	; (e358 <_malloc_trim_r+0x9c>)
    e344:	4903      	ldr	r1, [pc, #12]	; (e354 <_malloc_trim_r+0x98>)
    e346:	681b      	ldr	r3, [r3, #0]
    e348:	1ac0      	subs	r0, r0, r3
    e34a:	6008      	str	r0, [r1, #0]
    e34c:	e7d5      	b.n	e2fa <_malloc_trim_r+0x3e>
    e34e:	bf00      	nop
    e350:	1fff8ab8 	.word	0x1fff8ab8
    e354:	1fffd5f8 	.word	0x1fffd5f8
    e358:	1fff8ec0 	.word	0x1fff8ec0

0000e35c <_free_r>:
    e35c:	2900      	cmp	r1, #0
    e35e:	d061      	beq.n	e424 <_free_r+0xc8>
    e360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e362:	460c      	mov	r4, r1
    e364:	4606      	mov	r6, r0
    e366:	f7ff fa2f 	bl	d7c8 <__malloc_lock>
    e36a:	f854 2c04 	ldr.w	r2, [r4, #-4]
    e36e:	4f7b      	ldr	r7, [pc, #492]	; (e55c <_free_r+0x200>)
    e370:	f1a4 0508 	sub.w	r5, r4, #8
    e374:	f022 0101 	bic.w	r1, r2, #1
    e378:	eb05 0c01 	add.w	ip, r5, r1
    e37c:	68b8      	ldr	r0, [r7, #8]
    e37e:	f8dc 3004 	ldr.w	r3, [ip, #4]
    e382:	4560      	cmp	r0, ip
    e384:	f023 0303 	bic.w	r3, r3, #3
    e388:	f000 808b 	beq.w	e4a2 <_free_r+0x146>
    e38c:	07d2      	lsls	r2, r2, #31
    e38e:	f8cc 3004 	str.w	r3, [ip, #4]
    e392:	d432      	bmi.n	e3fa <_free_r+0x9e>
    e394:	f854 2c08 	ldr.w	r2, [r4, #-8]
    e398:	1aad      	subs	r5, r5, r2
    e39a:	4411      	add	r1, r2
    e39c:	68aa      	ldr	r2, [r5, #8]
    e39e:	f107 0008 	add.w	r0, r7, #8
    e3a2:	4282      	cmp	r2, r0
    e3a4:	d06a      	beq.n	e47c <_free_r+0x120>
    e3a6:	eb0c 0403 	add.w	r4, ip, r3
    e3aa:	f8d4 e004 	ldr.w	lr, [r4, #4]
    e3ae:	68ec      	ldr	r4, [r5, #12]
    e3b0:	60d4      	str	r4, [r2, #12]
    e3b2:	f01e 0f01 	tst.w	lr, #1
    e3b6:	60a2      	str	r2, [r4, #8]
    e3b8:	f000 8097 	beq.w	e4ea <_free_r+0x18e>
    e3bc:	f041 0301 	orr.w	r3, r1, #1
    e3c0:	606b      	str	r3, [r5, #4]
    e3c2:	f8cc 1000 	str.w	r1, [ip]
    e3c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e3ca:	d235      	bcs.n	e438 <_free_r+0xdc>
    e3cc:	6878      	ldr	r0, [r7, #4]
    e3ce:	08cb      	lsrs	r3, r1, #3
    e3d0:	2201      	movs	r2, #1
    e3d2:	0949      	lsrs	r1, r1, #5
    e3d4:	3301      	adds	r3, #1
    e3d6:	408a      	lsls	r2, r1
    e3d8:	4302      	orrs	r2, r0
    e3da:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    e3de:	607a      	str	r2, [r7, #4]
    e3e0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    e3e4:	3a08      	subs	r2, #8
    e3e6:	e9c5 1202 	strd	r1, r2, [r5, #8]
    e3ea:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    e3ee:	60cd      	str	r5, [r1, #12]
    e3f0:	4630      	mov	r0, r6
    e3f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e3f6:	f7ff b9ed 	b.w	d7d4 <__malloc_unlock>
    e3fa:	eb0c 0203 	add.w	r2, ip, r3
    e3fe:	6852      	ldr	r2, [r2, #4]
    e400:	07d0      	lsls	r0, r2, #31
    e402:	d410      	bmi.n	e426 <_free_r+0xca>
    e404:	4419      	add	r1, r3
    e406:	f107 0008 	add.w	r0, r7, #8
    e40a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    e40e:	4283      	cmp	r3, r0
    e410:	d073      	beq.n	e4fa <_free_r+0x19e>
    e412:	f8dc 200c 	ldr.w	r2, [ip, #12]
    e416:	60da      	str	r2, [r3, #12]
    e418:	6093      	str	r3, [r2, #8]
    e41a:	f041 0301 	orr.w	r3, r1, #1
    e41e:	606b      	str	r3, [r5, #4]
    e420:	5069      	str	r1, [r5, r1]
    e422:	e7d0      	b.n	e3c6 <_free_r+0x6a>
    e424:	4770      	bx	lr
    e426:	f041 0301 	orr.w	r3, r1, #1
    e42a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e42e:	f844 3c04 	str.w	r3, [r4, #-4]
    e432:	f8cc 1000 	str.w	r1, [ip]
    e436:	d3c9      	bcc.n	e3cc <_free_r+0x70>
    e438:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    e43c:	ea4f 2351 	mov.w	r3, r1, lsr #9
    e440:	d248      	bcs.n	e4d4 <_free_r+0x178>
    e442:	098b      	lsrs	r3, r1, #6
    e444:	f103 0039 	add.w	r0, r3, #57	; 0x39
    e448:	f103 0238 	add.w	r2, r3, #56	; 0x38
    e44c:	00c3      	lsls	r3, r0, #3
    e44e:	18f8      	adds	r0, r7, r3
    e450:	58fb      	ldr	r3, [r7, r3]
    e452:	3808      	subs	r0, #8
    e454:	4298      	cmp	r0, r3
    e456:	d059      	beq.n	e50c <_free_r+0x1b0>
    e458:	685a      	ldr	r2, [r3, #4]
    e45a:	f022 0203 	bic.w	r2, r2, #3
    e45e:	428a      	cmp	r2, r1
    e460:	d902      	bls.n	e468 <_free_r+0x10c>
    e462:	689b      	ldr	r3, [r3, #8]
    e464:	4298      	cmp	r0, r3
    e466:	d1f7      	bne.n	e458 <_free_r+0xfc>
    e468:	68d8      	ldr	r0, [r3, #12]
    e46a:	e9c5 3002 	strd	r3, r0, [r5, #8]
    e46e:	6085      	str	r5, [r0, #8]
    e470:	60dd      	str	r5, [r3, #12]
    e472:	4630      	mov	r0, r6
    e474:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e478:	f7ff b9ac 	b.w	d7d4 <__malloc_unlock>
    e47c:	eb0c 0203 	add.w	r2, ip, r3
    e480:	6852      	ldr	r2, [r2, #4]
    e482:	07d2      	lsls	r2, r2, #31
    e484:	d463      	bmi.n	e54e <_free_r+0x1f2>
    e486:	440b      	add	r3, r1
    e488:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    e48c:	60ca      	str	r2, [r1, #12]
    e48e:	6091      	str	r1, [r2, #8]
    e490:	f043 0201 	orr.w	r2, r3, #1
    e494:	606a      	str	r2, [r5, #4]
    e496:	4630      	mov	r0, r6
    e498:	50eb      	str	r3, [r5, r3]
    e49a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e49e:	f7ff b999 	b.w	d7d4 <__malloc_unlock>
    e4a2:	440b      	add	r3, r1
    e4a4:	07d1      	lsls	r1, r2, #31
    e4a6:	d407      	bmi.n	e4b8 <_free_r+0x15c>
    e4a8:	f854 2c08 	ldr.w	r2, [r4, #-8]
    e4ac:	1aad      	subs	r5, r5, r2
    e4ae:	4413      	add	r3, r2
    e4b0:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    e4b4:	60ca      	str	r2, [r1, #12]
    e4b6:	6091      	str	r1, [r2, #8]
    e4b8:	f043 0201 	orr.w	r2, r3, #1
    e4bc:	606a      	str	r2, [r5, #4]
    e4be:	4a28      	ldr	r2, [pc, #160]	; (e560 <_free_r+0x204>)
    e4c0:	60bd      	str	r5, [r7, #8]
    e4c2:	6812      	ldr	r2, [r2, #0]
    e4c4:	429a      	cmp	r2, r3
    e4c6:	d893      	bhi.n	e3f0 <_free_r+0x94>
    e4c8:	4b26      	ldr	r3, [pc, #152]	; (e564 <_free_r+0x208>)
    e4ca:	4630      	mov	r0, r6
    e4cc:	6819      	ldr	r1, [r3, #0]
    e4ce:	f7ff fef5 	bl	e2bc <_malloc_trim_r>
    e4d2:	e78d      	b.n	e3f0 <_free_r+0x94>
    e4d4:	2b14      	cmp	r3, #20
    e4d6:	d90a      	bls.n	e4ee <_free_r+0x192>
    e4d8:	2b54      	cmp	r3, #84	; 0x54
    e4da:	d81f      	bhi.n	e51c <_free_r+0x1c0>
    e4dc:	0b0b      	lsrs	r3, r1, #12
    e4de:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    e4e2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    e4e6:	00c3      	lsls	r3, r0, #3
    e4e8:	e7b1      	b.n	e44e <_free_r+0xf2>
    e4ea:	4419      	add	r1, r3
    e4ec:	e78d      	b.n	e40a <_free_r+0xae>
    e4ee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    e4f2:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    e4f6:	00c3      	lsls	r3, r0, #3
    e4f8:	e7a9      	b.n	e44e <_free_r+0xf2>
    e4fa:	f041 0301 	orr.w	r3, r1, #1
    e4fe:	e9c7 5504 	strd	r5, r5, [r7, #16]
    e502:	e9c5 0002 	strd	r0, r0, [r5, #8]
    e506:	606b      	str	r3, [r5, #4]
    e508:	5069      	str	r1, [r5, r1]
    e50a:	e771      	b.n	e3f0 <_free_r+0x94>
    e50c:	6879      	ldr	r1, [r7, #4]
    e50e:	1092      	asrs	r2, r2, #2
    e510:	2401      	movs	r4, #1
    e512:	fa04 f202 	lsl.w	r2, r4, r2
    e516:	430a      	orrs	r2, r1
    e518:	607a      	str	r2, [r7, #4]
    e51a:	e7a6      	b.n	e46a <_free_r+0x10e>
    e51c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    e520:	d806      	bhi.n	e530 <_free_r+0x1d4>
    e522:	0bcb      	lsrs	r3, r1, #15
    e524:	f103 0078 	add.w	r0, r3, #120	; 0x78
    e528:	f103 0277 	add.w	r2, r3, #119	; 0x77
    e52c:	00c3      	lsls	r3, r0, #3
    e52e:	e78e      	b.n	e44e <_free_r+0xf2>
    e530:	f240 5254 	movw	r2, #1364	; 0x554
    e534:	4293      	cmp	r3, r2
    e536:	d806      	bhi.n	e546 <_free_r+0x1ea>
    e538:	0c8b      	lsrs	r3, r1, #18
    e53a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    e53e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    e542:	00c3      	lsls	r3, r0, #3
    e544:	e783      	b.n	e44e <_free_r+0xf2>
    e546:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    e54a:	227e      	movs	r2, #126	; 0x7e
    e54c:	e77f      	b.n	e44e <_free_r+0xf2>
    e54e:	f041 0301 	orr.w	r3, r1, #1
    e552:	606b      	str	r3, [r5, #4]
    e554:	f8cc 1000 	str.w	r1, [ip]
    e558:	e74a      	b.n	e3f0 <_free_r+0x94>
    e55a:	bf00      	nop
    e55c:	1fff8ab8 	.word	0x1fff8ab8
    e560:	1fff8ec4 	.word	0x1fff8ec4
    e564:	1fffd628 	.word	0x1fffd628

0000e568 <__ascii_mbtowc>:
    e568:	b082      	sub	sp, #8
    e56a:	b149      	cbz	r1, e580 <__ascii_mbtowc+0x18>
    e56c:	b15a      	cbz	r2, e586 <__ascii_mbtowc+0x1e>
    e56e:	b16b      	cbz	r3, e58c <__ascii_mbtowc+0x24>
    e570:	7813      	ldrb	r3, [r2, #0]
    e572:	600b      	str	r3, [r1, #0]
    e574:	7812      	ldrb	r2, [r2, #0]
    e576:	1e10      	subs	r0, r2, #0
    e578:	bf18      	it	ne
    e57a:	2001      	movne	r0, #1
    e57c:	b002      	add	sp, #8
    e57e:	4770      	bx	lr
    e580:	a901      	add	r1, sp, #4
    e582:	2a00      	cmp	r2, #0
    e584:	d1f3      	bne.n	e56e <__ascii_mbtowc+0x6>
    e586:	4610      	mov	r0, r2
    e588:	b002      	add	sp, #8
    e58a:	4770      	bx	lr
    e58c:	f06f 0001 	mvn.w	r0, #1
    e590:	e7f4      	b.n	e57c <__ascii_mbtowc+0x14>
    e592:	bf00      	nop

0000e594 <_Balloc>:
    e594:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e596:	b570      	push	{r4, r5, r6, lr}
    e598:	4605      	mov	r5, r0
    e59a:	460c      	mov	r4, r1
    e59c:	b14b      	cbz	r3, e5b2 <_Balloc+0x1e>
    e59e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    e5a2:	b180      	cbz	r0, e5c6 <_Balloc+0x32>
    e5a4:	6802      	ldr	r2, [r0, #0]
    e5a6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    e5aa:	2300      	movs	r3, #0
    e5ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
    e5b0:	bd70      	pop	{r4, r5, r6, pc}
    e5b2:	2221      	movs	r2, #33	; 0x21
    e5b4:	2104      	movs	r1, #4
    e5b6:	f002 fb9f 	bl	10cf8 <_calloc_r>
    e5ba:	4603      	mov	r3, r0
    e5bc:	6468      	str	r0, [r5, #68]	; 0x44
    e5be:	2800      	cmp	r0, #0
    e5c0:	d1ed      	bne.n	e59e <_Balloc+0xa>
    e5c2:	2000      	movs	r0, #0
    e5c4:	bd70      	pop	{r4, r5, r6, pc}
    e5c6:	2101      	movs	r1, #1
    e5c8:	fa01 f604 	lsl.w	r6, r1, r4
    e5cc:	1d72      	adds	r2, r6, #5
    e5ce:	0092      	lsls	r2, r2, #2
    e5d0:	4628      	mov	r0, r5
    e5d2:	f002 fb91 	bl	10cf8 <_calloc_r>
    e5d6:	2800      	cmp	r0, #0
    e5d8:	d0f3      	beq.n	e5c2 <_Balloc+0x2e>
    e5da:	e9c0 4601 	strd	r4, r6, [r0, #4]
    e5de:	e7e4      	b.n	e5aa <_Balloc+0x16>

0000e5e0 <_Bfree>:
    e5e0:	b131      	cbz	r1, e5f0 <_Bfree+0x10>
    e5e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e5e4:	684a      	ldr	r2, [r1, #4]
    e5e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e5ea:	6008      	str	r0, [r1, #0]
    e5ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    e5f0:	4770      	bx	lr
    e5f2:	bf00      	nop

0000e5f4 <__multadd>:
    e5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e5f8:	690d      	ldr	r5, [r1, #16]
    e5fa:	4607      	mov	r7, r0
    e5fc:	460e      	mov	r6, r1
    e5fe:	461c      	mov	r4, r3
    e600:	f101 0e14 	add.w	lr, r1, #20
    e604:	2000      	movs	r0, #0
    e606:	f8de 1000 	ldr.w	r1, [lr]
    e60a:	b28b      	uxth	r3, r1
    e60c:	fb02 4303 	mla	r3, r2, r3, r4
    e610:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    e614:	0c09      	lsrs	r1, r1, #16
    e616:	fb02 cc01 	mla	ip, r2, r1, ip
    e61a:	3001      	adds	r0, #1
    e61c:	b29b      	uxth	r3, r3
    e61e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
    e622:	4285      	cmp	r5, r0
    e624:	f84e 3b04 	str.w	r3, [lr], #4
    e628:	ea4f 441c 	mov.w	r4, ip, lsr #16
    e62c:	dceb      	bgt.n	e606 <__multadd+0x12>
    e62e:	b13c      	cbz	r4, e640 <__multadd+0x4c>
    e630:	68b3      	ldr	r3, [r6, #8]
    e632:	42ab      	cmp	r3, r5
    e634:	dd07      	ble.n	e646 <__multadd+0x52>
    e636:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    e63a:	3501      	adds	r5, #1
    e63c:	615c      	str	r4, [r3, #20]
    e63e:	6135      	str	r5, [r6, #16]
    e640:	4630      	mov	r0, r6
    e642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e646:	6871      	ldr	r1, [r6, #4]
    e648:	4638      	mov	r0, r7
    e64a:	3101      	adds	r1, #1
    e64c:	f7ff ffa2 	bl	e594 <_Balloc>
    e650:	4680      	mov	r8, r0
    e652:	b1a8      	cbz	r0, e680 <__multadd+0x8c>
    e654:	6932      	ldr	r2, [r6, #16]
    e656:	3202      	adds	r2, #2
    e658:	f106 010c 	add.w	r1, r6, #12
    e65c:	0092      	lsls	r2, r2, #2
    e65e:	300c      	adds	r0, #12
    e660:	f7fb faa8 	bl	9bb4 <memcpy>
    e664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e666:	6872      	ldr	r2, [r6, #4]
    e668:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e66c:	6031      	str	r1, [r6, #0]
    e66e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    e672:	4646      	mov	r6, r8
    e674:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    e678:	3501      	adds	r5, #1
    e67a:	615c      	str	r4, [r3, #20]
    e67c:	6135      	str	r5, [r6, #16]
    e67e:	e7df      	b.n	e640 <__multadd+0x4c>
    e680:	4b02      	ldr	r3, [pc, #8]	; (e68c <__multadd+0x98>)
    e682:	4803      	ldr	r0, [pc, #12]	; (e690 <__multadd+0x9c>)
    e684:	4642      	mov	r2, r8
    e686:	21ba      	movs	r1, #186	; 0xba
    e688:	f002 fb16 	bl	10cb8 <__assert_func>
    e68c:	000156c8 	.word	0x000156c8
    e690:	000156dc 	.word	0x000156dc

0000e694 <__hi0bits>:
    e694:	0c02      	lsrs	r2, r0, #16
    e696:	0412      	lsls	r2, r2, #16
    e698:	4603      	mov	r3, r0
    e69a:	b9ca      	cbnz	r2, e6d0 <__hi0bits+0x3c>
    e69c:	0403      	lsls	r3, r0, #16
    e69e:	2010      	movs	r0, #16
    e6a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    e6a4:	bf04      	itt	eq
    e6a6:	021b      	lsleq	r3, r3, #8
    e6a8:	3008      	addeq	r0, #8
    e6aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    e6ae:	bf04      	itt	eq
    e6b0:	011b      	lsleq	r3, r3, #4
    e6b2:	3004      	addeq	r0, #4
    e6b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    e6b8:	bf04      	itt	eq
    e6ba:	009b      	lsleq	r3, r3, #2
    e6bc:	3002      	addeq	r0, #2
    e6be:	2b00      	cmp	r3, #0
    e6c0:	db05      	blt.n	e6ce <__hi0bits+0x3a>
    e6c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    e6c6:	f100 0001 	add.w	r0, r0, #1
    e6ca:	bf08      	it	eq
    e6cc:	2020      	moveq	r0, #32
    e6ce:	4770      	bx	lr
    e6d0:	2000      	movs	r0, #0
    e6d2:	e7e5      	b.n	e6a0 <__hi0bits+0xc>

0000e6d4 <__lo0bits>:
    e6d4:	6803      	ldr	r3, [r0, #0]
    e6d6:	f013 0207 	ands.w	r2, r3, #7
    e6da:	4601      	mov	r1, r0
    e6dc:	d007      	beq.n	e6ee <__lo0bits+0x1a>
    e6de:	07da      	lsls	r2, r3, #31
    e6e0:	d41f      	bmi.n	e722 <__lo0bits+0x4e>
    e6e2:	0798      	lsls	r0, r3, #30
    e6e4:	d521      	bpl.n	e72a <__lo0bits+0x56>
    e6e6:	085b      	lsrs	r3, r3, #1
    e6e8:	600b      	str	r3, [r1, #0]
    e6ea:	2001      	movs	r0, #1
    e6ec:	4770      	bx	lr
    e6ee:	b298      	uxth	r0, r3
    e6f0:	b1a0      	cbz	r0, e71c <__lo0bits+0x48>
    e6f2:	4610      	mov	r0, r2
    e6f4:	b2da      	uxtb	r2, r3
    e6f6:	b90a      	cbnz	r2, e6fc <__lo0bits+0x28>
    e6f8:	3008      	adds	r0, #8
    e6fa:	0a1b      	lsrs	r3, r3, #8
    e6fc:	071a      	lsls	r2, r3, #28
    e6fe:	bf04      	itt	eq
    e700:	091b      	lsreq	r3, r3, #4
    e702:	3004      	addeq	r0, #4
    e704:	079a      	lsls	r2, r3, #30
    e706:	bf04      	itt	eq
    e708:	089b      	lsreq	r3, r3, #2
    e70a:	3002      	addeq	r0, #2
    e70c:	07da      	lsls	r2, r3, #31
    e70e:	d403      	bmi.n	e718 <__lo0bits+0x44>
    e710:	085b      	lsrs	r3, r3, #1
    e712:	f100 0001 	add.w	r0, r0, #1
    e716:	d006      	beq.n	e726 <__lo0bits+0x52>
    e718:	600b      	str	r3, [r1, #0]
    e71a:	4770      	bx	lr
    e71c:	0c1b      	lsrs	r3, r3, #16
    e71e:	2010      	movs	r0, #16
    e720:	e7e8      	b.n	e6f4 <__lo0bits+0x20>
    e722:	2000      	movs	r0, #0
    e724:	4770      	bx	lr
    e726:	2020      	movs	r0, #32
    e728:	4770      	bx	lr
    e72a:	089b      	lsrs	r3, r3, #2
    e72c:	600b      	str	r3, [r1, #0]
    e72e:	2002      	movs	r0, #2
    e730:	4770      	bx	lr
    e732:	bf00      	nop

0000e734 <__i2b>:
    e734:	b538      	push	{r3, r4, r5, lr}
    e736:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e738:	4604      	mov	r4, r0
    e73a:	460d      	mov	r5, r1
    e73c:	b14b      	cbz	r3, e752 <__i2b+0x1e>
    e73e:	6858      	ldr	r0, [r3, #4]
    e740:	b1b0      	cbz	r0, e770 <__i2b+0x3c>
    e742:	6802      	ldr	r2, [r0, #0]
    e744:	605a      	str	r2, [r3, #4]
    e746:	2200      	movs	r2, #0
    e748:	2301      	movs	r3, #1
    e74a:	e9c0 3504 	strd	r3, r5, [r0, #16]
    e74e:	60c2      	str	r2, [r0, #12]
    e750:	bd38      	pop	{r3, r4, r5, pc}
    e752:	2221      	movs	r2, #33	; 0x21
    e754:	2104      	movs	r1, #4
    e756:	f002 facf 	bl	10cf8 <_calloc_r>
    e75a:	4603      	mov	r3, r0
    e75c:	6460      	str	r0, [r4, #68]	; 0x44
    e75e:	2800      	cmp	r0, #0
    e760:	d1ed      	bne.n	e73e <__i2b+0xa>
    e762:	4b09      	ldr	r3, [pc, #36]	; (e788 <__i2b+0x54>)
    e764:	4809      	ldr	r0, [pc, #36]	; (e78c <__i2b+0x58>)
    e766:	2200      	movs	r2, #0
    e768:	f240 1145 	movw	r1, #325	; 0x145
    e76c:	f002 faa4 	bl	10cb8 <__assert_func>
    e770:	221c      	movs	r2, #28
    e772:	2101      	movs	r1, #1
    e774:	4620      	mov	r0, r4
    e776:	f002 fabf 	bl	10cf8 <_calloc_r>
    e77a:	2800      	cmp	r0, #0
    e77c:	d0f1      	beq.n	e762 <__i2b+0x2e>
    e77e:	2201      	movs	r2, #1
    e780:	2302      	movs	r3, #2
    e782:	e9c0 2301 	strd	r2, r3, [r0, #4]
    e786:	e7de      	b.n	e746 <__i2b+0x12>
    e788:	000156c8 	.word	0x000156c8
    e78c:	000156dc 	.word	0x000156dc

0000e790 <__multiply>:
    e790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e794:	690e      	ldr	r6, [r1, #16]
    e796:	6915      	ldr	r5, [r2, #16]
    e798:	42ae      	cmp	r6, r5
    e79a:	b085      	sub	sp, #20
    e79c:	4688      	mov	r8, r1
    e79e:	4614      	mov	r4, r2
    e7a0:	db05      	blt.n	e7ae <__multiply+0x1e>
    e7a2:	462a      	mov	r2, r5
    e7a4:	4623      	mov	r3, r4
    e7a6:	4635      	mov	r5, r6
    e7a8:	460c      	mov	r4, r1
    e7aa:	4616      	mov	r6, r2
    e7ac:	4698      	mov	r8, r3
    e7ae:	68a3      	ldr	r3, [r4, #8]
    e7b0:	6861      	ldr	r1, [r4, #4]
    e7b2:	19af      	adds	r7, r5, r6
    e7b4:	42bb      	cmp	r3, r7
    e7b6:	bfb8      	it	lt
    e7b8:	3101      	addlt	r1, #1
    e7ba:	f7ff feeb 	bl	e594 <_Balloc>
    e7be:	9001      	str	r0, [sp, #4]
    e7c0:	2800      	cmp	r0, #0
    e7c2:	f000 8087 	beq.w	e8d4 <__multiply+0x144>
    e7c6:	9b01      	ldr	r3, [sp, #4]
    e7c8:	f103 0914 	add.w	r9, r3, #20
    e7cc:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    e7d0:	45d1      	cmp	r9, sl
    e7d2:	d205      	bcs.n	e7e0 <__multiply+0x50>
    e7d4:	464b      	mov	r3, r9
    e7d6:	2200      	movs	r2, #0
    e7d8:	f843 2b04 	str.w	r2, [r3], #4
    e7dc:	459a      	cmp	sl, r3
    e7de:	d8fb      	bhi.n	e7d8 <__multiply+0x48>
    e7e0:	f108 0814 	add.w	r8, r8, #20
    e7e4:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    e7e8:	f104 0314 	add.w	r3, r4, #20
    e7ec:	45d8      	cmp	r8, fp
    e7ee:	461a      	mov	r2, r3
    e7f0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    e7f4:	d25f      	bcs.n	e8b6 <__multiply+0x126>
    e7f6:	1b2b      	subs	r3, r5, r4
    e7f8:	3b15      	subs	r3, #21
    e7fa:	f023 0303 	bic.w	r3, r3, #3
    e7fe:	3304      	adds	r3, #4
    e800:	3415      	adds	r4, #21
    e802:	42a5      	cmp	r5, r4
    e804:	bf38      	it	cc
    e806:	2304      	movcc	r3, #4
    e808:	e9cd a702 	strd	sl, r7, [sp, #8]
    e80c:	46ac      	mov	ip, r5
    e80e:	461f      	mov	r7, r3
    e810:	4692      	mov	sl, r2
    e812:	e005      	b.n	e820 <__multiply+0x90>
    e814:	0c09      	lsrs	r1, r1, #16
    e816:	d129      	bne.n	e86c <__multiply+0xdc>
    e818:	45c3      	cmp	fp, r8
    e81a:	f109 0904 	add.w	r9, r9, #4
    e81e:	d948      	bls.n	e8b2 <__multiply+0x122>
    e820:	f858 1b04 	ldr.w	r1, [r8], #4
    e824:	b28d      	uxth	r5, r1
    e826:	2d00      	cmp	r5, #0
    e828:	d0f4      	beq.n	e814 <__multiply+0x84>
    e82a:	4656      	mov	r6, sl
    e82c:	464c      	mov	r4, r9
    e82e:	2300      	movs	r3, #0
    e830:	f856 1b04 	ldr.w	r1, [r6], #4
    e834:	6822      	ldr	r2, [r4, #0]
    e836:	fa1f fe81 	uxth.w	lr, r1
    e83a:	b290      	uxth	r0, r2
    e83c:	0c09      	lsrs	r1, r1, #16
    e83e:	fb05 000e 	mla	r0, r5, lr, r0
    e842:	0c12      	lsrs	r2, r2, #16
    e844:	4403      	add	r3, r0
    e846:	fb05 2201 	mla	r2, r5, r1, r2
    e84a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e84e:	b29b      	uxth	r3, r3
    e850:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    e854:	45b4      	cmp	ip, r6
    e856:	f844 3b04 	str.w	r3, [r4], #4
    e85a:	ea4f 4312 	mov.w	r3, r2, lsr #16
    e85e:	d8e7      	bhi.n	e830 <__multiply+0xa0>
    e860:	f849 3007 	str.w	r3, [r9, r7]
    e864:	f858 1c04 	ldr.w	r1, [r8, #-4]
    e868:	0c09      	lsrs	r1, r1, #16
    e86a:	d0d5      	beq.n	e818 <__multiply+0x88>
    e86c:	f8d9 3000 	ldr.w	r3, [r9]
    e870:	4650      	mov	r0, sl
    e872:	461a      	mov	r2, r3
    e874:	464c      	mov	r4, r9
    e876:	2600      	movs	r6, #0
    e878:	8805      	ldrh	r5, [r0, #0]
    e87a:	0c12      	lsrs	r2, r2, #16
    e87c:	fb01 2205 	mla	r2, r1, r5, r2
    e880:	4416      	add	r6, r2
    e882:	b29b      	uxth	r3, r3
    e884:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    e888:	f844 3b04 	str.w	r3, [r4], #4
    e88c:	f850 5b04 	ldr.w	r5, [r0], #4
    e890:	6822      	ldr	r2, [r4, #0]
    e892:	0c2d      	lsrs	r5, r5, #16
    e894:	b293      	uxth	r3, r2
    e896:	fb01 3305 	mla	r3, r1, r5, r3
    e89a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    e89e:	4584      	cmp	ip, r0
    e8a0:	ea4f 4613 	mov.w	r6, r3, lsr #16
    e8a4:	d8e8      	bhi.n	e878 <__multiply+0xe8>
    e8a6:	45c3      	cmp	fp, r8
    e8a8:	f849 3007 	str.w	r3, [r9, r7]
    e8ac:	f109 0904 	add.w	r9, r9, #4
    e8b0:	d8b6      	bhi.n	e820 <__multiply+0x90>
    e8b2:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    e8b6:	2f00      	cmp	r7, #0
    e8b8:	dc02      	bgt.n	e8c0 <__multiply+0x130>
    e8ba:	e005      	b.n	e8c8 <__multiply+0x138>
    e8bc:	3f01      	subs	r7, #1
    e8be:	d003      	beq.n	e8c8 <__multiply+0x138>
    e8c0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    e8c4:	2b00      	cmp	r3, #0
    e8c6:	d0f9      	beq.n	e8bc <__multiply+0x12c>
    e8c8:	9b01      	ldr	r3, [sp, #4]
    e8ca:	4618      	mov	r0, r3
    e8cc:	611f      	str	r7, [r3, #16]
    e8ce:	b005      	add	sp, #20
    e8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8d4:	4b03      	ldr	r3, [pc, #12]	; (e8e4 <__multiply+0x154>)
    e8d6:	4804      	ldr	r0, [pc, #16]	; (e8e8 <__multiply+0x158>)
    e8d8:	9a01      	ldr	r2, [sp, #4]
    e8da:	f44f 71b1 	mov.w	r1, #354	; 0x162
    e8de:	f002 f9eb 	bl	10cb8 <__assert_func>
    e8e2:	bf00      	nop
    e8e4:	000156c8 	.word	0x000156c8
    e8e8:	000156dc 	.word	0x000156dc

0000e8ec <__pow5mult>:
    e8ec:	f012 0303 	ands.w	r3, r2, #3
    e8f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e8f4:	4614      	mov	r4, r2
    e8f6:	4606      	mov	r6, r0
    e8f8:	d132      	bne.n	e960 <__pow5mult+0x74>
    e8fa:	460d      	mov	r5, r1
    e8fc:	10a4      	asrs	r4, r4, #2
    e8fe:	d020      	beq.n	e942 <__pow5mult+0x56>
    e900:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    e904:	f1b8 0f00 	cmp.w	r8, #0
    e908:	d033      	beq.n	e972 <__pow5mult+0x86>
    e90a:	07e3      	lsls	r3, r4, #31
    e90c:	f04f 0700 	mov.w	r7, #0
    e910:	d407      	bmi.n	e922 <__pow5mult+0x36>
    e912:	1064      	asrs	r4, r4, #1
    e914:	d015      	beq.n	e942 <__pow5mult+0x56>
    e916:	f8d8 0000 	ldr.w	r0, [r8]
    e91a:	b1a8      	cbz	r0, e948 <__pow5mult+0x5c>
    e91c:	4680      	mov	r8, r0
    e91e:	07e3      	lsls	r3, r4, #31
    e920:	d5f7      	bpl.n	e912 <__pow5mult+0x26>
    e922:	4642      	mov	r2, r8
    e924:	4629      	mov	r1, r5
    e926:	4630      	mov	r0, r6
    e928:	f7ff ff32 	bl	e790 <__multiply>
    e92c:	b1b5      	cbz	r5, e95c <__pow5mult+0x70>
    e92e:	6869      	ldr	r1, [r5, #4]
    e930:	6c73      	ldr	r3, [r6, #68]	; 0x44
    e932:	1064      	asrs	r4, r4, #1
    e934:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    e938:	602a      	str	r2, [r5, #0]
    e93a:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    e93e:	4605      	mov	r5, r0
    e940:	d1e9      	bne.n	e916 <__pow5mult+0x2a>
    e942:	4628      	mov	r0, r5
    e944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e948:	4642      	mov	r2, r8
    e94a:	4641      	mov	r1, r8
    e94c:	4630      	mov	r0, r6
    e94e:	f7ff ff1f 	bl	e790 <__multiply>
    e952:	f8c8 0000 	str.w	r0, [r8]
    e956:	6007      	str	r7, [r0, #0]
    e958:	4680      	mov	r8, r0
    e95a:	e7e0      	b.n	e91e <__pow5mult+0x32>
    e95c:	4605      	mov	r5, r0
    e95e:	e7d8      	b.n	e912 <__pow5mult+0x26>
    e960:	3b01      	subs	r3, #1
    e962:	4a0f      	ldr	r2, [pc, #60]	; (e9a0 <__pow5mult+0xb4>)
    e964:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    e968:	2300      	movs	r3, #0
    e96a:	f7ff fe43 	bl	e5f4 <__multadd>
    e96e:	4605      	mov	r5, r0
    e970:	e7c4      	b.n	e8fc <__pow5mult+0x10>
    e972:	2101      	movs	r1, #1
    e974:	4630      	mov	r0, r6
    e976:	f7ff fe0d 	bl	e594 <_Balloc>
    e97a:	4680      	mov	r8, r0
    e97c:	b140      	cbz	r0, e990 <__pow5mult+0xa4>
    e97e:	2301      	movs	r3, #1
    e980:	f240 2271 	movw	r2, #625	; 0x271
    e984:	e9c0 3204 	strd	r3, r2, [r0, #16]
    e988:	2300      	movs	r3, #0
    e98a:	6430      	str	r0, [r6, #64]	; 0x40
    e98c:	6003      	str	r3, [r0, #0]
    e98e:	e7bc      	b.n	e90a <__pow5mult+0x1e>
    e990:	4b04      	ldr	r3, [pc, #16]	; (e9a4 <__pow5mult+0xb8>)
    e992:	4805      	ldr	r0, [pc, #20]	; (e9a8 <__pow5mult+0xbc>)
    e994:	4642      	mov	r2, r8
    e996:	f240 1145 	movw	r1, #325	; 0x145
    e99a:	f002 f98d 	bl	10cb8 <__assert_func>
    e99e:	bf00      	nop
    e9a0:	00015828 	.word	0x00015828
    e9a4:	000156c8 	.word	0x000156c8
    e9a8:	000156dc 	.word	0x000156dc

0000e9ac <__lshift>:
    e9ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e9b0:	460c      	mov	r4, r1
    e9b2:	4690      	mov	r8, r2
    e9b4:	6926      	ldr	r6, [r4, #16]
    e9b6:	68a3      	ldr	r3, [r4, #8]
    e9b8:	6849      	ldr	r1, [r1, #4]
    e9ba:	eb06 1662 	add.w	r6, r6, r2, asr #5
    e9be:	1c75      	adds	r5, r6, #1
    e9c0:	429d      	cmp	r5, r3
    e9c2:	4607      	mov	r7, r0
    e9c4:	ea4f 1962 	mov.w	r9, r2, asr #5
    e9c8:	dd04      	ble.n	e9d4 <__lshift+0x28>
    e9ca:	005b      	lsls	r3, r3, #1
    e9cc:	429d      	cmp	r5, r3
    e9ce:	f101 0101 	add.w	r1, r1, #1
    e9d2:	dcfa      	bgt.n	e9ca <__lshift+0x1e>
    e9d4:	4638      	mov	r0, r7
    e9d6:	f7ff fddd 	bl	e594 <_Balloc>
    e9da:	4684      	mov	ip, r0
    e9dc:	2800      	cmp	r0, #0
    e9de:	d051      	beq.n	ea84 <__lshift+0xd8>
    e9e0:	f1b9 0f00 	cmp.w	r9, #0
    e9e4:	f100 0014 	add.w	r0, r0, #20
    e9e8:	dd0e      	ble.n	ea08 <__lshift+0x5c>
    e9ea:	f109 0205 	add.w	r2, r9, #5
    e9ee:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    e9f2:	4603      	mov	r3, r0
    e9f4:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    e9f8:	2100      	movs	r1, #0
    e9fa:	f843 1b04 	str.w	r1, [r3], #4
    e9fe:	4293      	cmp	r3, r2
    ea00:	d1fb      	bne.n	e9fa <__lshift+0x4e>
    ea02:	f1ae 0314 	sub.w	r3, lr, #20
    ea06:	4418      	add	r0, r3
    ea08:	6921      	ldr	r1, [r4, #16]
    ea0a:	f104 0314 	add.w	r3, r4, #20
    ea0e:	f018 081f 	ands.w	r8, r8, #31
    ea12:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    ea16:	d02d      	beq.n	ea74 <__lshift+0xc8>
    ea18:	f1c8 0920 	rsb	r9, r8, #32
    ea1c:	4686      	mov	lr, r0
    ea1e:	f04f 0a00 	mov.w	sl, #0
    ea22:	681a      	ldr	r2, [r3, #0]
    ea24:	fa02 f208 	lsl.w	r2, r2, r8
    ea28:	ea42 020a 	orr.w	r2, r2, sl
    ea2c:	f84e 2b04 	str.w	r2, [lr], #4
    ea30:	f853 2b04 	ldr.w	r2, [r3], #4
    ea34:	4299      	cmp	r1, r3
    ea36:	fa22 fa09 	lsr.w	sl, r2, r9
    ea3a:	d8f2      	bhi.n	ea22 <__lshift+0x76>
    ea3c:	1b0b      	subs	r3, r1, r4
    ea3e:	3b15      	subs	r3, #21
    ea40:	f023 0303 	bic.w	r3, r3, #3
    ea44:	3304      	adds	r3, #4
    ea46:	f104 0215 	add.w	r2, r4, #21
    ea4a:	4291      	cmp	r1, r2
    ea4c:	bf38      	it	cc
    ea4e:	2304      	movcc	r3, #4
    ea50:	f1ba 0f00 	cmp.w	sl, #0
    ea54:	bf18      	it	ne
    ea56:	462e      	movne	r6, r5
    ea58:	f840 a003 	str.w	sl, [r0, r3]
    ea5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    ea5e:	6862      	ldr	r2, [r4, #4]
    ea60:	f8cc 6010 	str.w	r6, [ip, #16]
    ea64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    ea68:	6021      	str	r1, [r4, #0]
    ea6a:	4660      	mov	r0, ip
    ea6c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    ea70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ea74:	3804      	subs	r0, #4
    ea76:	f853 2b04 	ldr.w	r2, [r3], #4
    ea7a:	f840 2f04 	str.w	r2, [r0, #4]!
    ea7e:	4299      	cmp	r1, r3
    ea80:	d8f9      	bhi.n	ea76 <__lshift+0xca>
    ea82:	e7eb      	b.n	ea5c <__lshift+0xb0>
    ea84:	4b03      	ldr	r3, [pc, #12]	; (ea94 <__lshift+0xe8>)
    ea86:	4804      	ldr	r0, [pc, #16]	; (ea98 <__lshift+0xec>)
    ea88:	4662      	mov	r2, ip
    ea8a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    ea8e:	f002 f913 	bl	10cb8 <__assert_func>
    ea92:	bf00      	nop
    ea94:	000156c8 	.word	0x000156c8
    ea98:	000156dc 	.word	0x000156dc

0000ea9c <__mcmp>:
    ea9c:	690b      	ldr	r3, [r1, #16]
    ea9e:	4684      	mov	ip, r0
    eaa0:	6900      	ldr	r0, [r0, #16]
    eaa2:	1ac0      	subs	r0, r0, r3
    eaa4:	d115      	bne.n	ead2 <__mcmp+0x36>
    eaa6:	f10c 0c14 	add.w	ip, ip, #20
    eaaa:	3114      	adds	r1, #20
    eaac:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    eab0:	b410      	push	{r4}
    eab2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    eab6:	e001      	b.n	eabc <__mcmp+0x20>
    eab8:	4594      	cmp	ip, r2
    eaba:	d208      	bcs.n	eace <__mcmp+0x32>
    eabc:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    eac0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    eac4:	428c      	cmp	r4, r1
    eac6:	d0f7      	beq.n	eab8 <__mcmp+0x1c>
    eac8:	d204      	bcs.n	ead4 <__mcmp+0x38>
    eaca:	f04f 30ff 	mov.w	r0, #4294967295
    eace:	bc10      	pop	{r4}
    ead0:	4770      	bx	lr
    ead2:	4770      	bx	lr
    ead4:	2001      	movs	r0, #1
    ead6:	bc10      	pop	{r4}
    ead8:	4770      	bx	lr
    eada:	bf00      	nop

0000eadc <__mdiff>:
    eadc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eae0:	690f      	ldr	r7, [r1, #16]
    eae2:	6913      	ldr	r3, [r2, #16]
    eae4:	1aff      	subs	r7, r7, r3
    eae6:	2f00      	cmp	r7, #0
    eae8:	460e      	mov	r6, r1
    eaea:	4690      	mov	r8, r2
    eaec:	d17f      	bne.n	ebee <__mdiff+0x112>
    eaee:	f101 0514 	add.w	r5, r1, #20
    eaf2:	3214      	adds	r2, #20
    eaf4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    eaf8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    eafc:	e001      	b.n	eb02 <__mdiff+0x26>
    eafe:	429d      	cmp	r5, r3
    eb00:	d278      	bcs.n	ebf4 <__mdiff+0x118>
    eb02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    eb06:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    eb0a:	42a1      	cmp	r1, r4
    eb0c:	d0f7      	beq.n	eafe <__mdiff+0x22>
    eb0e:	d369      	bcc.n	ebe4 <__mdiff+0x108>
    eb10:	6871      	ldr	r1, [r6, #4]
    eb12:	f7ff fd3f 	bl	e594 <_Balloc>
    eb16:	4681      	mov	r9, r0
    eb18:	2800      	cmp	r0, #0
    eb1a:	d077      	beq.n	ec0c <__mdiff+0x130>
    eb1c:	6935      	ldr	r5, [r6, #16]
    eb1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    eb22:	60c7      	str	r7, [r0, #12]
    eb24:	f108 0e14 	add.w	lr, r8, #20
    eb28:	f106 0014 	add.w	r0, r6, #20
    eb2c:	f109 0a14 	add.w	sl, r9, #20
    eb30:	f106 0110 	add.w	r1, r6, #16
    eb34:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    eb38:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    eb3c:	4656      	mov	r6, sl
    eb3e:	f04f 0c00 	mov.w	ip, #0
    eb42:	f85e 4b04 	ldr.w	r4, [lr], #4
    eb46:	f851 bf04 	ldr.w	fp, [r1, #4]!
    eb4a:	b2a3      	uxth	r3, r4
    eb4c:	fa1c fc8b 	uxtah	ip, ip, fp
    eb50:	ebac 0303 	sub.w	r3, ip, r3
    eb54:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    eb58:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    eb5c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    eb60:	b29b      	uxth	r3, r3
    eb62:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    eb66:	4572      	cmp	r2, lr
    eb68:	f846 3b04 	str.w	r3, [r6], #4
    eb6c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    eb70:	d8e7      	bhi.n	eb42 <__mdiff+0x66>
    eb72:	eba2 0108 	sub.w	r1, r2, r8
    eb76:	3915      	subs	r1, #21
    eb78:	f108 0815 	add.w	r8, r8, #21
    eb7c:	4542      	cmp	r2, r8
    eb7e:	f021 0403 	bic.w	r4, r1, #3
    eb82:	f104 0404 	add.w	r4, r4, #4
    eb86:	bf38      	it	cc
    eb88:	2404      	movcc	r4, #4
    eb8a:	4420      	add	r0, r4
    eb8c:	f021 0203 	bic.w	r2, r1, #3
    eb90:	bf38      	it	cc
    eb92:	2200      	movcc	r2, #0
    eb94:	4287      	cmp	r7, r0
    eb96:	4452      	add	r2, sl
    eb98:	4454      	add	r4, sl
    eb9a:	d918      	bls.n	ebce <__mdiff+0xf2>
    eb9c:	4626      	mov	r6, r4
    eb9e:	4601      	mov	r1, r0
    eba0:	f851 3b04 	ldr.w	r3, [r1], #4
    eba4:	fa1c fc83 	uxtah	ip, ip, r3
    eba8:	ea4f 422c 	mov.w	r2, ip, asr #16
    ebac:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    ebb0:	fa1f fc8c 	uxth.w	ip, ip
    ebb4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    ebb8:	428f      	cmp	r7, r1
    ebba:	f846 3b04 	str.w	r3, [r6], #4
    ebbe:	ea4f 4c22 	mov.w	ip, r2, asr #16
    ebc2:	d8ed      	bhi.n	eba0 <__mdiff+0xc4>
    ebc4:	3f01      	subs	r7, #1
    ebc6:	1a3f      	subs	r7, r7, r0
    ebc8:	f027 0703 	bic.w	r7, r7, #3
    ebcc:	19e2      	adds	r2, r4, r7
    ebce:	b923      	cbnz	r3, ebda <__mdiff+0xfe>
    ebd0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    ebd4:	3d01      	subs	r5, #1
    ebd6:	2b00      	cmp	r3, #0
    ebd8:	d0fa      	beq.n	ebd0 <__mdiff+0xf4>
    ebda:	f8c9 5010 	str.w	r5, [r9, #16]
    ebde:	4648      	mov	r0, r9
    ebe0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ebe4:	4633      	mov	r3, r6
    ebe6:	2701      	movs	r7, #1
    ebe8:	4646      	mov	r6, r8
    ebea:	4698      	mov	r8, r3
    ebec:	e790      	b.n	eb10 <__mdiff+0x34>
    ebee:	dbf9      	blt.n	ebe4 <__mdiff+0x108>
    ebf0:	2700      	movs	r7, #0
    ebf2:	e78d      	b.n	eb10 <__mdiff+0x34>
    ebf4:	2100      	movs	r1, #0
    ebf6:	f7ff fccd 	bl	e594 <_Balloc>
    ebfa:	4681      	mov	r9, r0
    ebfc:	b168      	cbz	r0, ec1a <__mdiff+0x13e>
    ebfe:	2201      	movs	r2, #1
    ec00:	2300      	movs	r3, #0
    ec02:	e9c9 2304 	strd	r2, r3, [r9, #16]
    ec06:	4648      	mov	r0, r9
    ec08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ec0c:	4b06      	ldr	r3, [pc, #24]	; (ec28 <__mdiff+0x14c>)
    ec0e:	4807      	ldr	r0, [pc, #28]	; (ec2c <__mdiff+0x150>)
    ec10:	464a      	mov	r2, r9
    ec12:	f240 2145 	movw	r1, #581	; 0x245
    ec16:	f002 f84f 	bl	10cb8 <__assert_func>
    ec1a:	4b03      	ldr	r3, [pc, #12]	; (ec28 <__mdiff+0x14c>)
    ec1c:	4803      	ldr	r0, [pc, #12]	; (ec2c <__mdiff+0x150>)
    ec1e:	464a      	mov	r2, r9
    ec20:	f240 2137 	movw	r1, #567	; 0x237
    ec24:	f002 f848 	bl	10cb8 <__assert_func>
    ec28:	000156c8 	.word	0x000156c8
    ec2c:	000156dc 	.word	0x000156dc

0000ec30 <__d2b>:
    ec30:	b570      	push	{r4, r5, r6, lr}
    ec32:	2101      	movs	r1, #1
    ec34:	b082      	sub	sp, #8
    ec36:	4616      	mov	r6, r2
    ec38:	461d      	mov	r5, r3
    ec3a:	f7ff fcab 	bl	e594 <_Balloc>
    ec3e:	4604      	mov	r4, r0
    ec40:	2800      	cmp	r0, #0
    ec42:	d04a      	beq.n	ecda <__d2b+0xaa>
    ec44:	462b      	mov	r3, r5
    ec46:	f3c5 550a 	ubfx	r5, r5, #20, #11
    ec4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ec4e:	b10d      	cbz	r5, ec54 <__d2b+0x24>
    ec50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ec54:	2e00      	cmp	r6, #0
    ec56:	9301      	str	r3, [sp, #4]
    ec58:	d114      	bne.n	ec84 <__d2b+0x54>
    ec5a:	a801      	add	r0, sp, #4
    ec5c:	f7ff fd3a 	bl	e6d4 <__lo0bits>
    ec60:	9b01      	ldr	r3, [sp, #4]
    ec62:	6163      	str	r3, [r4, #20]
    ec64:	2101      	movs	r1, #1
    ec66:	3020      	adds	r0, #32
    ec68:	6121      	str	r1, [r4, #16]
    ec6a:	b315      	cbz	r5, ecb2 <__d2b+0x82>
    ec6c:	9b06      	ldr	r3, [sp, #24]
    ec6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    ec72:	4405      	add	r5, r0
    ec74:	601d      	str	r5, [r3, #0]
    ec76:	9b07      	ldr	r3, [sp, #28]
    ec78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    ec7c:	6018      	str	r0, [r3, #0]
    ec7e:	4620      	mov	r0, r4
    ec80:	b002      	add	sp, #8
    ec82:	bd70      	pop	{r4, r5, r6, pc}
    ec84:	4668      	mov	r0, sp
    ec86:	9600      	str	r6, [sp, #0]
    ec88:	f7ff fd24 	bl	e6d4 <__lo0bits>
    ec8c:	b308      	cbz	r0, ecd2 <__d2b+0xa2>
    ec8e:	9b01      	ldr	r3, [sp, #4]
    ec90:	9900      	ldr	r1, [sp, #0]
    ec92:	f1c0 0220 	rsb	r2, r0, #32
    ec96:	fa03 f202 	lsl.w	r2, r3, r2
    ec9a:	430a      	orrs	r2, r1
    ec9c:	40c3      	lsrs	r3, r0
    ec9e:	9301      	str	r3, [sp, #4]
    eca0:	6162      	str	r2, [r4, #20]
    eca2:	2b00      	cmp	r3, #0
    eca4:	bf14      	ite	ne
    eca6:	2102      	movne	r1, #2
    eca8:	2101      	moveq	r1, #1
    ecaa:	61a3      	str	r3, [r4, #24]
    ecac:	6121      	str	r1, [r4, #16]
    ecae:	2d00      	cmp	r5, #0
    ecb0:	d1dc      	bne.n	ec6c <__d2b+0x3c>
    ecb2:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    ecb6:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
    ecba:	6910      	ldr	r0, [r2, #16]
    ecbc:	9a06      	ldr	r2, [sp, #24]
    ecbe:	6013      	str	r3, [r2, #0]
    ecc0:	f7ff fce8 	bl	e694 <__hi0bits>
    ecc4:	9b07      	ldr	r3, [sp, #28]
    ecc6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    ecca:	6018      	str	r0, [r3, #0]
    eccc:	4620      	mov	r0, r4
    ecce:	b002      	add	sp, #8
    ecd0:	bd70      	pop	{r4, r5, r6, pc}
    ecd2:	e9dd 2300 	ldrd	r2, r3, [sp]
    ecd6:	6162      	str	r2, [r4, #20]
    ecd8:	e7e3      	b.n	eca2 <__d2b+0x72>
    ecda:	4b03      	ldr	r3, [pc, #12]	; (ece8 <__d2b+0xb8>)
    ecdc:	4803      	ldr	r0, [pc, #12]	; (ecec <__d2b+0xbc>)
    ecde:	4622      	mov	r2, r4
    ece0:	f240 310f 	movw	r1, #783	; 0x30f
    ece4:	f001 ffe8 	bl	10cb8 <__assert_func>
    ece8:	000156c8 	.word	0x000156c8
    ecec:	000156dc 	.word	0x000156dc

0000ecf0 <__ascii_wctomb>:
    ecf0:	b149      	cbz	r1, ed06 <__ascii_wctomb+0x16>
    ecf2:	2aff      	cmp	r2, #255	; 0xff
    ecf4:	d802      	bhi.n	ecfc <__ascii_wctomb+0xc>
    ecf6:	700a      	strb	r2, [r1, #0]
    ecf8:	2001      	movs	r0, #1
    ecfa:	4770      	bx	lr
    ecfc:	238a      	movs	r3, #138	; 0x8a
    ecfe:	6003      	str	r3, [r0, #0]
    ed00:	f04f 30ff 	mov.w	r0, #4294967295
    ed04:	4770      	bx	lr
    ed06:	4608      	mov	r0, r1
    ed08:	4770      	bx	lr
    ed0a:	bf00      	nop

0000ed0c <_svfprintf_r>:
    ed0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ed10:	b0d9      	sub	sp, #356	; 0x164
    ed12:	460c      	mov	r4, r1
    ed14:	910c      	str	r1, [sp, #48]	; 0x30
    ed16:	4690      	mov	r8, r2
    ed18:	930e      	str	r3, [sp, #56]	; 0x38
    ed1a:	4682      	mov	sl, r0
    ed1c:	f001 fee6 	bl	10aec <_localeconv_r>
    ed20:	6803      	ldr	r3, [r0, #0]
    ed22:	9319      	str	r3, [sp, #100]	; 0x64
    ed24:	4618      	mov	r0, r3
    ed26:	f7ff fa4b 	bl	e1c0 <strlen>
    ed2a:	2208      	movs	r2, #8
    ed2c:	9017      	str	r0, [sp, #92]	; 0x5c
    ed2e:	2100      	movs	r1, #0
    ed30:	a828      	add	r0, sp, #160	; 0xa0
    ed32:	f7ff f907 	bl	df44 <memset>
    ed36:	89a3      	ldrh	r3, [r4, #12]
    ed38:	061f      	lsls	r7, r3, #24
    ed3a:	d503      	bpl.n	ed44 <_svfprintf_r+0x38>
    ed3c:	6923      	ldr	r3, [r4, #16]
    ed3e:	2b00      	cmp	r3, #0
    ed40:	f000 873f 	beq.w	fbc2 <_svfprintf_r+0xeb6>
    ed44:	2300      	movs	r3, #0
    ed46:	aa2f      	add	r2, sp, #188	; 0xbc
    ed48:	2400      	movs	r4, #0
    ed4a:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
    ed4e:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    ed52:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
    ed56:	9313      	str	r3, [sp, #76]	; 0x4c
    ed58:	9318      	str	r3, [sp, #96]	; 0x60
    ed5a:	9309      	str	r3, [sp, #36]	; 0x24
    ed5c:	2300      	movs	r3, #0
    ed5e:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    ed62:	922c      	str	r2, [sp, #176]	; 0xb0
    ed64:	4691      	mov	r9, r2
    ed66:	4644      	mov	r4, r8
    ed68:	46a0      	mov	r8, r4
    ed6a:	4b78      	ldr	r3, [pc, #480]	; (ef4c <_svfprintf_r+0x240>)
    ed6c:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    ed70:	f7ff f96c 	bl	e04c <__locale_mb_cur_max>
    ed74:	4603      	mov	r3, r0
    ed76:	a828      	add	r0, sp, #160	; 0xa0
    ed78:	9000      	str	r0, [sp, #0]
    ed7a:	4642      	mov	r2, r8
    ed7c:	a924      	add	r1, sp, #144	; 0x90
    ed7e:	4650      	mov	r0, sl
    ed80:	47a8      	blx	r5
    ed82:	2800      	cmp	r0, #0
    ed84:	f000 80b0 	beq.w	eee8 <_svfprintf_r+0x1dc>
    ed88:	f2c0 80a6 	blt.w	eed8 <_svfprintf_r+0x1cc>
    ed8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    ed8e:	2a25      	cmp	r2, #37	; 0x25
    ed90:	4603      	mov	r3, r0
    ed92:	d001      	beq.n	ed98 <_svfprintf_r+0x8c>
    ed94:	4498      	add	r8, r3
    ed96:	e7e8      	b.n	ed6a <_svfprintf_r+0x5e>
    ed98:	ebb8 0704 	subs.w	r7, r8, r4
    ed9c:	4606      	mov	r6, r0
    ed9e:	f040 80a7 	bne.w	eef0 <_svfprintf_r+0x1e4>
    eda2:	2300      	movs	r3, #0
    eda4:	f04f 32ff 	mov.w	r2, #4294967295
    eda8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    edac:	469b      	mov	fp, r3
    edae:	930b      	str	r3, [sp, #44]	; 0x2c
    edb0:	f108 0801 	add.w	r8, r8, #1
    edb4:	f898 3000 	ldrb.w	r3, [r8]
    edb8:	9208      	str	r2, [sp, #32]
    edba:	252b      	movs	r5, #43	; 0x2b
    edbc:	2620      	movs	r6, #32
    edbe:	f108 0801 	add.w	r8, r8, #1
    edc2:	f1a3 0220 	sub.w	r2, r3, #32
    edc6:	2a5a      	cmp	r2, #90	; 0x5a
    edc8:	f200 80c2 	bhi.w	ef50 <_svfprintf_r+0x244>
    edcc:	e8df f012 	tbh	[pc, r2, lsl #1]
    edd0:	00c002e6 	.word	0x00c002e6
    edd4:	02e100c0 	.word	0x02e100c0
    edd8:	00c000c0 	.word	0x00c000c0
    eddc:	006a00c0 	.word	0x006a00c0
    ede0:	00c000c0 	.word	0x00c000c0
    ede4:	02840208 	.word	0x02840208
    ede8:	021300c0 	.word	0x021300c0
    edec:	00c002c7 	.word	0x00c002c7
    edf0:	005b02c2 	.word	0x005b02c2
    edf4:	005b005b 	.word	0x005b005b
    edf8:	005b005b 	.word	0x005b005b
    edfc:	005b005b 	.word	0x005b005b
    ee00:	005b005b 	.word	0x005b005b
    ee04:	00c000c0 	.word	0x00c000c0
    ee08:	00c000c0 	.word	0x00c000c0
    ee0c:	00c000c0 	.word	0x00c000c0
    ee10:	014300c0 	.word	0x014300c0
    ee14:	018900c0 	.word	0x018900c0
    ee18:	0143021d 	.word	0x0143021d
    ee1c:	01430143 	.word	0x01430143
    ee20:	00c000c0 	.word	0x00c000c0
    ee24:	00c000c0 	.word	0x00c000c0
    ee28:	00c00218 	.word	0x00c00218
    ee2c:	029600c0 	.word	0x029600c0
    ee30:	00c000c0 	.word	0x00c000c0
    ee34:	01b100c0 	.word	0x01b100c0
    ee38:	02a900c0 	.word	0x02a900c0
    ee3c:	00c000c0 	.word	0x00c000c0
    ee40:	00c006dd 	.word	0x00c006dd
    ee44:	00c000c0 	.word	0x00c000c0
    ee48:	00c000c0 	.word	0x00c000c0
    ee4c:	00c000c0 	.word	0x00c000c0
    ee50:	014300c0 	.word	0x014300c0
    ee54:	018900c0 	.word	0x018900c0
    ee58:	014301e2 	.word	0x014301e2
    ee5c:	01430143 	.word	0x01430143
    ee60:	01e20277 	.word	0x01e20277
    ee64:	00c0007f 	.word	0x00c0007f
    ee68:	00c00289 	.word	0x00c00289
    ee6c:	06da025f 	.word	0x06da025f
    ee70:	007f0232 	.word	0x007f0232
    ee74:	01b100c0 	.word	0x01b100c0
    ee78:	06b4007c 	.word	0x06b4007c
    ee7c:	00c000c0 	.word	0x00c000c0
    ee80:	00c006b8 	.word	0x00c006b8
    ee84:	007c      	.short	0x007c
    ee86:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ee8a:	2100      	movs	r1, #0
    ee8c:	f818 3b01 	ldrb.w	r3, [r8], #1
    ee90:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ee94:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    ee98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ee9c:	2a09      	cmp	r2, #9
    ee9e:	d9f5      	bls.n	ee8c <_svfprintf_r+0x180>
    eea0:	910b      	str	r1, [sp, #44]	; 0x2c
    eea2:	e78e      	b.n	edc2 <_svfprintf_r+0xb6>
    eea4:	4650      	mov	r0, sl
    eea6:	f001 fe21 	bl	10aec <_localeconv_r>
    eeaa:	6843      	ldr	r3, [r0, #4]
    eeac:	931c      	str	r3, [sp, #112]	; 0x70
    eeae:	4618      	mov	r0, r3
    eeb0:	f7ff f986 	bl	e1c0 <strlen>
    eeb4:	901d      	str	r0, [sp, #116]	; 0x74
    eeb6:	4607      	mov	r7, r0
    eeb8:	4650      	mov	r0, sl
    eeba:	f001 fe17 	bl	10aec <_localeconv_r>
    eebe:	6883      	ldr	r3, [r0, #8]
    eec0:	931a      	str	r3, [sp, #104]	; 0x68
    eec2:	2f00      	cmp	r7, #0
    eec4:	f040 85b1 	bne.w	fa2a <_svfprintf_r+0xd1e>
    eec8:	f898 3000 	ldrb.w	r3, [r8]
    eecc:	e777      	b.n	edbe <_svfprintf_r+0xb2>
    eece:	f898 3000 	ldrb.w	r3, [r8]
    eed2:	f04b 0b20 	orr.w	fp, fp, #32
    eed6:	e772      	b.n	edbe <_svfprintf_r+0xb2>
    eed8:	2208      	movs	r2, #8
    eeda:	2100      	movs	r1, #0
    eedc:	a828      	add	r0, sp, #160	; 0xa0
    eede:	f7ff f831 	bl	df44 <memset>
    eee2:	2301      	movs	r3, #1
    eee4:	4498      	add	r8, r3
    eee6:	e740      	b.n	ed6a <_svfprintf_r+0x5e>
    eee8:	ebb8 0704 	subs.w	r7, r8, r4
    eeec:	4606      	mov	r6, r0
    eeee:	d011      	beq.n	ef14 <_svfprintf_r+0x208>
    eef0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    eef2:	443b      	add	r3, r7
    eef4:	932e      	str	r3, [sp, #184]	; 0xb8
    eef6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    eef8:	3301      	adds	r3, #1
    eefa:	2b07      	cmp	r3, #7
    eefc:	e9c9 4700 	strd	r4, r7, [r9]
    ef00:	932d      	str	r3, [sp, #180]	; 0xb4
    ef02:	dc19      	bgt.n	ef38 <_svfprintf_r+0x22c>
    ef04:	f109 0908 	add.w	r9, r9, #8
    ef08:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef0a:	443b      	add	r3, r7
    ef0c:	9309      	str	r3, [sp, #36]	; 0x24
    ef0e:	2e00      	cmp	r6, #0
    ef10:	f47f af47 	bne.w	eda2 <_svfprintf_r+0x96>
    ef14:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    ef16:	2b00      	cmp	r3, #0
    ef18:	f041 8201 	bne.w	1031e <_svfprintf_r+0x1612>
    ef1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ef1e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    ef22:	f013 0f40 	tst.w	r3, #64	; 0x40
    ef26:	9b09      	ldr	r3, [sp, #36]	; 0x24
    ef28:	bf18      	it	ne
    ef2a:	f04f 33ff 	movne.w	r3, #4294967295
    ef2e:	9309      	str	r3, [sp, #36]	; 0x24
    ef30:	9809      	ldr	r0, [sp, #36]	; 0x24
    ef32:	b059      	add	sp, #356	; 0x164
    ef34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ef38:	990c      	ldr	r1, [sp, #48]	; 0x30
    ef3a:	aa2c      	add	r2, sp, #176	; 0xb0
    ef3c:	4650      	mov	r0, sl
    ef3e:	f002 ff4f 	bl	11de0 <__ssprint_r>
    ef42:	2800      	cmp	r0, #0
    ef44:	d1ea      	bne.n	ef1c <_svfprintf_r+0x210>
    ef46:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ef4a:	e7dd      	b.n	ef08 <_svfprintf_r+0x1fc>
    ef4c:	1fff8ed4 	.word	0x1fff8ed4
    ef50:	9310      	str	r3, [sp, #64]	; 0x40
    ef52:	2b00      	cmp	r3, #0
    ef54:	d0de      	beq.n	ef14 <_svfprintf_r+0x208>
    ef56:	2200      	movs	r2, #0
    ef58:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
    ef5c:	2301      	movs	r3, #1
    ef5e:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    ef62:	9307      	str	r3, [sp, #28]
    ef64:	920d      	str	r2, [sp, #52]	; 0x34
    ef66:	930a      	str	r3, [sp, #40]	; 0x28
    ef68:	9208      	str	r2, [sp, #32]
    ef6a:	9212      	str	r2, [sp, #72]	; 0x48
    ef6c:	9216      	str	r2, [sp, #88]	; 0x58
    ef6e:	9211      	str	r2, [sp, #68]	; 0x44
    ef70:	ac3f      	add	r4, sp, #252	; 0xfc
    ef72:	f01b 0302 	ands.w	r3, fp, #2
    ef76:	d002      	beq.n	ef7e <_svfprintf_r+0x272>
    ef78:	9907      	ldr	r1, [sp, #28]
    ef7a:	3102      	adds	r1, #2
    ef7c:	9107      	str	r1, [sp, #28]
    ef7e:	f01b 0184 	ands.w	r1, fp, #132	; 0x84
    ef82:	910f      	str	r1, [sp, #60]	; 0x3c
    ef84:	d105      	bne.n	ef92 <_svfprintf_r+0x286>
    ef86:	990b      	ldr	r1, [sp, #44]	; 0x2c
    ef88:	9807      	ldr	r0, [sp, #28]
    ef8a:	1a0f      	subs	r7, r1, r0
    ef8c:	2f00      	cmp	r7, #0
    ef8e:	f300 8382 	bgt.w	f696 <_svfprintf_r+0x98a>
    ef92:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ef94:	b182      	cbz	r2, efb8 <_svfprintf_r+0x2ac>
    ef96:	2201      	movs	r2, #1
    ef98:	f8c9 2004 	str.w	r2, [r9, #4]
    ef9c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    ef9e:	3201      	adds	r2, #1
    efa0:	3601      	adds	r6, #1
    efa2:	f10d 0187 	add.w	r1, sp, #135	; 0x87
    efa6:	2a07      	cmp	r2, #7
    efa8:	962e      	str	r6, [sp, #184]	; 0xb8
    efaa:	922d      	str	r2, [sp, #180]	; 0xb4
    efac:	f8c9 1000 	str.w	r1, [r9]
    efb0:	f300 83bd 	bgt.w	f72e <_svfprintf_r+0xa22>
    efb4:	f109 0908 	add.w	r9, r9, #8
    efb8:	b183      	cbz	r3, efdc <_svfprintf_r+0x2d0>
    efba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    efbc:	aa22      	add	r2, sp, #136	; 0x88
    efbe:	3301      	adds	r3, #1
    efc0:	3602      	adds	r6, #2
    efc2:	f8c9 2000 	str.w	r2, [r9]
    efc6:	2b07      	cmp	r3, #7
    efc8:	f04f 0202 	mov.w	r2, #2
    efcc:	962e      	str	r6, [sp, #184]	; 0xb8
    efce:	932d      	str	r3, [sp, #180]	; 0xb4
    efd0:	f8c9 2004 	str.w	r2, [r9, #4]
    efd4:	f300 83c0 	bgt.w	f758 <_svfprintf_r+0xa4c>
    efd8:	f109 0908 	add.w	r9, r9, #8
    efdc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    efde:	2b80      	cmp	r3, #128	; 0x80
    efe0:	f000 8281 	beq.w	f4e6 <_svfprintf_r+0x7da>
    efe4:	9b08      	ldr	r3, [sp, #32]
    efe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    efe8:	1a9f      	subs	r7, r3, r2
    efea:	2f00      	cmp	r7, #0
    efec:	f300 82bc 	bgt.w	f568 <_svfprintf_r+0x85c>
    eff0:	f41b 7f80 	tst.w	fp, #256	; 0x100
    eff4:	f040 821e 	bne.w	f434 <_svfprintf_r+0x728>
    eff8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    effa:	f8c9 3004 	str.w	r3, [r9, #4]
    effe:	441e      	add	r6, r3
    f000:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f002:	f8c9 4000 	str.w	r4, [r9]
    f006:	3301      	adds	r3, #1
    f008:	2b07      	cmp	r3, #7
    f00a:	962e      	str	r6, [sp, #184]	; 0xb8
    f00c:	932d      	str	r3, [sp, #180]	; 0xb4
    f00e:	f300 8337 	bgt.w	f680 <_svfprintf_r+0x974>
    f012:	f109 0908 	add.w	r9, r9, #8
    f016:	f01b 0f04 	tst.w	fp, #4
    f01a:	d005      	beq.n	f028 <_svfprintf_r+0x31c>
    f01c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f01e:	9a07      	ldr	r2, [sp, #28]
    f020:	1a9c      	subs	r4, r3, r2
    f022:	2c00      	cmp	r4, #0
    f024:	f300 83a4 	bgt.w	f770 <_svfprintf_r+0xa64>
    f028:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f02a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f02c:	9907      	ldr	r1, [sp, #28]
    f02e:	428a      	cmp	r2, r1
    f030:	bfac      	ite	ge
    f032:	189b      	addge	r3, r3, r2
    f034:	185b      	addlt	r3, r3, r1
    f036:	9309      	str	r3, [sp, #36]	; 0x24
    f038:	2e00      	cmp	r6, #0
    f03a:	f040 82ca 	bne.w	f5d2 <_svfprintf_r+0x8c6>
    f03e:	2300      	movs	r3, #0
    f040:	932d      	str	r3, [sp, #180]	; 0xb4
    f042:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f044:	b11b      	cbz	r3, f04e <_svfprintf_r+0x342>
    f046:	990d      	ldr	r1, [sp, #52]	; 0x34
    f048:	4650      	mov	r0, sl
    f04a:	f7ff f987 	bl	e35c <_free_r>
    f04e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f052:	4644      	mov	r4, r8
    f054:	e688      	b.n	ed68 <_svfprintf_r+0x5c>
    f056:	9310      	str	r3, [sp, #64]	; 0x40
    f058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f05a:	3307      	adds	r3, #7
    f05c:	f023 0107 	bic.w	r1, r3, #7
    f060:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    f064:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    f068:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    f06c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    f070:	910e      	str	r1, [sp, #56]	; 0x38
    f072:	4616      	mov	r6, r2
    f074:	4610      	mov	r0, r2
    f076:	4bb3      	ldr	r3, [pc, #716]	; (f344 <_svfprintf_r+0x638>)
    f078:	4629      	mov	r1, r5
    f07a:	f04f 32ff 	mov.w	r2, #4294967295
    f07e:	f7fd fd9b 	bl	cbb8 <__aeabi_dcmpun>
    f082:	2800      	cmp	r0, #0
    f084:	f040 84fc 	bne.w	fa80 <_svfprintf_r+0xd74>
    f088:	4bae      	ldr	r3, [pc, #696]	; (f344 <_svfprintf_r+0x638>)
    f08a:	4630      	mov	r0, r6
    f08c:	4629      	mov	r1, r5
    f08e:	f04f 32ff 	mov.w	r2, #4294967295
    f092:	f7fd fd73 	bl	cb7c <__aeabi_dcmple>
    f096:	2800      	cmp	r0, #0
    f098:	f040 84f2 	bne.w	fa80 <_svfprintf_r+0xd74>
    f09c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f0a0:	2200      	movs	r2, #0
    f0a2:	2300      	movs	r3, #0
    f0a4:	f7fd fd60 	bl	cb68 <__aeabi_dcmplt>
    f0a8:	2800      	cmp	r0, #0
    f0aa:	f041 8038 	bne.w	1011e <_svfprintf_r+0x1412>
    f0ae:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f0b2:	4ca5      	ldr	r4, [pc, #660]	; (f348 <_svfprintf_r+0x63c>)
    f0b4:	4ba5      	ldr	r3, [pc, #660]	; (f34c <_svfprintf_r+0x640>)
    f0b6:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    f0ba:	9910      	ldr	r1, [sp, #64]	; 0x40
    f0bc:	2947      	cmp	r1, #71	; 0x47
    f0be:	bfc8      	it	gt
    f0c0:	461c      	movgt	r4, r3
    f0c2:	2300      	movs	r3, #0
    f0c4:	2103      	movs	r1, #3
    f0c6:	930d      	str	r3, [sp, #52]	; 0x34
    f0c8:	9107      	str	r1, [sp, #28]
    f0ca:	910a      	str	r1, [sp, #40]	; 0x28
    f0cc:	9308      	str	r3, [sp, #32]
    f0ce:	9312      	str	r3, [sp, #72]	; 0x48
    f0d0:	9316      	str	r3, [sp, #88]	; 0x58
    f0d2:	9311      	str	r3, [sp, #68]	; 0x44
    f0d4:	2a00      	cmp	r2, #0
    f0d6:	f43f af4c 	beq.w	ef72 <_svfprintf_r+0x266>
    f0da:	9b07      	ldr	r3, [sp, #28]
    f0dc:	3301      	adds	r3, #1
    f0de:	9307      	str	r3, [sp, #28]
    f0e0:	e747      	b.n	ef72 <_svfprintf_r+0x266>
    f0e2:	2b43      	cmp	r3, #67	; 0x43
    f0e4:	9310      	str	r3, [sp, #64]	; 0x40
    f0e6:	d003      	beq.n	f0f0 <_svfprintf_r+0x3e4>
    f0e8:	f01b 0f10 	tst.w	fp, #16
    f0ec:	f000 8551 	beq.w	fb92 <_svfprintf_r+0xe86>
    f0f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    f0f2:	2208      	movs	r2, #8
    f0f4:	2100      	movs	r1, #0
    f0f6:	a82a      	add	r0, sp, #168	; 0xa8
    f0f8:	ac3f      	add	r4, sp, #252	; 0xfc
    f0fa:	f7fe ff23 	bl	df44 <memset>
    f0fe:	ab2a      	add	r3, sp, #168	; 0xa8
    f100:	f856 2b04 	ldr.w	r2, [r6], #4
    f104:	4621      	mov	r1, r4
    f106:	4650      	mov	r0, sl
    f108:	f002 fe22 	bl	11d50 <_wcrtomb_r>
    f10c:	4603      	mov	r3, r0
    f10e:	3301      	adds	r3, #1
    f110:	900a      	str	r0, [sp, #40]	; 0x28
    f112:	f001 82c3 	beq.w	1069c <_svfprintf_r+0x1990>
    f116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f118:	960e      	str	r6, [sp, #56]	; 0x38
    f11a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f11e:	9307      	str	r3, [sp, #28]
    f120:	2200      	movs	r2, #0
    f122:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    f126:	920d      	str	r2, [sp, #52]	; 0x34
    f128:	9208      	str	r2, [sp, #32]
    f12a:	9212      	str	r2, [sp, #72]	; 0x48
    f12c:	9216      	str	r2, [sp, #88]	; 0x58
    f12e:	9211      	str	r2, [sp, #68]	; 0x44
    f130:	e71f      	b.n	ef72 <_svfprintf_r+0x266>
    f132:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    f134:	9310      	str	r3, [sp, #64]	; 0x40
    f136:	f857 4b04 	ldr.w	r4, [r7], #4
    f13a:	2300      	movs	r3, #0
    f13c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    f140:	2c00      	cmp	r4, #0
    f142:	f000 854d 	beq.w	fbe0 <_svfprintf_r+0xed4>
    f146:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f148:	2b53      	cmp	r3, #83	; 0x53
    f14a:	f000 86d4 	beq.w	fef6 <_svfprintf_r+0x11ea>
    f14e:	f01b 0310 	ands.w	r3, fp, #16
    f152:	9311      	str	r3, [sp, #68]	; 0x44
    f154:	f040 86cf 	bne.w	fef6 <_svfprintf_r+0x11ea>
    f158:	9b08      	ldr	r3, [sp, #32]
    f15a:	1c5d      	adds	r5, r3, #1
    f15c:	f001 80cc 	beq.w	102f8 <_svfprintf_r+0x15ec>
    f160:	9911      	ldr	r1, [sp, #68]	; 0x44
    f162:	461a      	mov	r2, r3
    f164:	4620      	mov	r0, r4
    f166:	f001 fcdb 	bl	10b20 <memchr>
    f16a:	900d      	str	r0, [sp, #52]	; 0x34
    f16c:	2800      	cmp	r0, #0
    f16e:	f001 8351 	beq.w	10814 <_svfprintf_r+0x1b08>
    f172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f174:	9911      	ldr	r1, [sp, #68]	; 0x44
    f176:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f17a:	970e      	str	r7, [sp, #56]	; 0x38
    f17c:	1b1b      	subs	r3, r3, r4
    f17e:	930a      	str	r3, [sp, #40]	; 0x28
    f180:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f184:	9307      	str	r3, [sp, #28]
    f186:	2373      	movs	r3, #115	; 0x73
    f188:	9108      	str	r1, [sp, #32]
    f18a:	9112      	str	r1, [sp, #72]	; 0x48
    f18c:	9116      	str	r1, [sp, #88]	; 0x58
    f18e:	910d      	str	r1, [sp, #52]	; 0x34
    f190:	9310      	str	r3, [sp, #64]	; 0x40
    f192:	e79f      	b.n	f0d4 <_svfprintf_r+0x3c8>
    f194:	f01b 0f20 	tst.w	fp, #32
    f198:	9310      	str	r3, [sp, #64]	; 0x40
    f19a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f19c:	d03c      	beq.n	f218 <_svfprintf_r+0x50c>
    f19e:	3307      	adds	r3, #7
    f1a0:	f023 0307 	bic.w	r3, r3, #7
    f1a4:	461a      	mov	r2, r3
    f1a6:	4611      	mov	r1, r2
    f1a8:	685b      	ldr	r3, [r3, #4]
    f1aa:	f851 2b08 	ldr.w	r2, [r1], #8
    f1ae:	910e      	str	r1, [sp, #56]	; 0x38
    f1b0:	4619      	mov	r1, r3
    f1b2:	2b00      	cmp	r3, #0
    f1b4:	f2c0 8401 	blt.w	f9ba <_svfprintf_r+0xcae>
    f1b8:	9b08      	ldr	r3, [sp, #32]
    f1ba:	3301      	adds	r3, #1
    f1bc:	f000 82a8 	beq.w	f710 <_svfprintf_r+0xa04>
    f1c0:	ea52 0301 	orrs.w	r3, r2, r1
    f1c4:	f02b 0580 	bic.w	r5, fp, #128	; 0x80
    f1c8:	f040 82a3 	bne.w	f712 <_svfprintf_r+0xa06>
    f1cc:	9b08      	ldr	r3, [sp, #32]
    f1ce:	2b00      	cmp	r3, #0
    f1d0:	f040 82a4 	bne.w	f71c <_svfprintf_r+0xa10>
    f1d4:	46ab      	mov	fp, r5
    f1d6:	2300      	movs	r3, #0
    f1d8:	9308      	str	r3, [sp, #32]
    f1da:	930a      	str	r3, [sp, #40]	; 0x28
    f1dc:	ac58      	add	r4, sp, #352	; 0x160
    f1de:	e0ff      	b.n	f3e0 <_svfprintf_r+0x6d4>
    f1e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f1e2:	f853 2b04 	ldr.w	r2, [r3], #4
    f1e6:	920b      	str	r2, [sp, #44]	; 0x2c
    f1e8:	2a00      	cmp	r2, #0
    f1ea:	f280 840c 	bge.w	fa06 <_svfprintf_r+0xcfa>
    f1ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f1f0:	930e      	str	r3, [sp, #56]	; 0x38
    f1f2:	4252      	negs	r2, r2
    f1f4:	920b      	str	r2, [sp, #44]	; 0x2c
    f1f6:	f898 3000 	ldrb.w	r3, [r8]
    f1fa:	f04b 0b04 	orr.w	fp, fp, #4
    f1fe:	e5de      	b.n	edbe <_svfprintf_r+0xb2>
    f200:	f898 3000 	ldrb.w	r3, [r8]
    f204:	f04b 0b08 	orr.w	fp, fp, #8
    f208:	e5d9      	b.n	edbe <_svfprintf_r+0xb2>
    f20a:	f04b 0b10 	orr.w	fp, fp, #16
    f20e:	f01b 0f20 	tst.w	fp, #32
    f212:	9310      	str	r3, [sp, #64]	; 0x40
    f214:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f216:	d1c2      	bne.n	f19e <_svfprintf_r+0x492>
    f218:	f01b 0f10 	tst.w	fp, #16
    f21c:	f040 83fe 	bne.w	fa1c <_svfprintf_r+0xd10>
    f220:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f224:	f000 83f6 	beq.w	fa14 <_svfprintf_r+0xd08>
    f228:	f933 2b04 	ldrsh.w	r2, [r3], #4
    f22c:	930e      	str	r3, [sp, #56]	; 0x38
    f22e:	17d1      	asrs	r1, r2, #31
    f230:	460b      	mov	r3, r1
    f232:	e7be      	b.n	f1b2 <_svfprintf_r+0x4a6>
    f234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f236:	f853 2b04 	ldr.w	r2, [r3], #4
    f23a:	930e      	str	r3, [sp, #56]	; 0x38
    f23c:	f647 0330 	movw	r3, #30768	; 0x7830
    f240:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    f244:	2078      	movs	r0, #120	; 0x78
    f246:	4b42      	ldr	r3, [pc, #264]	; (f350 <_svfprintf_r+0x644>)
    f248:	9318      	str	r3, [sp, #96]	; 0x60
    f24a:	f04b 0502 	orr.w	r5, fp, #2
    f24e:	2100      	movs	r1, #0
    f250:	2302      	movs	r3, #2
    f252:	9010      	str	r0, [sp, #64]	; 0x40
    f254:	2000      	movs	r0, #0
    f256:	9c08      	ldr	r4, [sp, #32]
    f258:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    f25c:	1c60      	adds	r0, r4, #1
    f25e:	f000 80a8 	beq.w	f3b2 <_svfprintf_r+0x6a6>
    f262:	ea52 0001 	orrs.w	r0, r2, r1
    f266:	f025 0b80 	bic.w	fp, r5, #128	; 0x80
    f26a:	f040 80a1 	bne.w	f3b0 <_svfprintf_r+0x6a4>
    f26e:	2c00      	cmp	r4, #0
    f270:	f040 8695 	bne.w	ff9e <_svfprintf_r+0x1292>
    f274:	2b00      	cmp	r3, #0
    f276:	d1ae      	bne.n	f1d6 <_svfprintf_r+0x4ca>
    f278:	f015 0301 	ands.w	r3, r5, #1
    f27c:	930a      	str	r3, [sp, #40]	; 0x28
    f27e:	f000 83c7 	beq.w	fa10 <_svfprintf_r+0xd04>
    f282:	2330      	movs	r3, #48	; 0x30
    f284:	f88d 315f 	strb.w	r3, [sp, #351]	; 0x15f
    f288:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    f28c:	e0a8      	b.n	f3e0 <_svfprintf_r+0x6d4>
    f28e:	f01b 0f20 	tst.w	fp, #32
    f292:	f040 83e5 	bne.w	fa60 <_svfprintf_r+0xd54>
    f296:	f01b 0f10 	tst.w	fp, #16
    f29a:	f040 8686 	bne.w	ffaa <_svfprintf_r+0x129e>
    f29e:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f2a2:	f040 877f 	bne.w	101a4 <_svfprintf_r+0x1498>
    f2a6:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f2aa:	f000 867e 	beq.w	ffaa <_svfprintf_r+0x129e>
    f2ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f2b0:	9909      	ldr	r1, [sp, #36]	; 0x24
    f2b2:	f853 2b04 	ldr.w	r2, [r3], #4
    f2b6:	930e      	str	r3, [sp, #56]	; 0x38
    f2b8:	7011      	strb	r1, [r2, #0]
    f2ba:	4644      	mov	r4, r8
    f2bc:	e554      	b.n	ed68 <_svfprintf_r+0x5c>
    f2be:	f898 3000 	ldrb.w	r3, [r8]
    f2c2:	2b68      	cmp	r3, #104	; 0x68
    f2c4:	bf03      	ittte	eq
    f2c6:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    f2ca:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
    f2ce:	f108 0801 	addeq.w	r8, r8, #1
    f2d2:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
    f2d6:	e572      	b.n	edbe <_svfprintf_r+0xb2>
    f2d8:	f898 3000 	ldrb.w	r3, [r8]
    f2dc:	f88d 5087 	strb.w	r5, [sp, #135]	; 0x87
    f2e0:	e56d      	b.n	edbe <_svfprintf_r+0xb2>
    f2e2:	f898 3000 	ldrb.w	r3, [r8]
    f2e6:	2b6c      	cmp	r3, #108	; 0x6c
    f2e8:	bf03      	ittte	eq
    f2ea:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    f2ee:	f04b 0b20 	orreq.w	fp, fp, #32
    f2f2:	f108 0801 	addeq.w	r8, r8, #1
    f2f6:	f04b 0b10 	orrne.w	fp, fp, #16
    f2fa:	e560      	b.n	edbe <_svfprintf_r+0xb2>
    f2fc:	9310      	str	r3, [sp, #64]	; 0x40
    f2fe:	f04b 0b10 	orr.w	fp, fp, #16
    f302:	f01b 0120 	ands.w	r1, fp, #32
    f306:	f000 834a 	beq.w	f99e <_svfprintf_r+0xc92>
    f30a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f30c:	3307      	adds	r3, #7
    f30e:	f023 0307 	bic.w	r3, r3, #7
    f312:	6859      	ldr	r1, [r3, #4]
    f314:	f853 2b08 	ldr.w	r2, [r3], #8
    f318:	930e      	str	r3, [sp, #56]	; 0x38
    f31a:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    f31e:	2300      	movs	r3, #0
    f320:	e798      	b.n	f254 <_svfprintf_r+0x548>
    f322:	9310      	str	r3, [sp, #64]	; 0x40
    f324:	f04b 0510 	orr.w	r5, fp, #16
    f328:	f015 0120 	ands.w	r1, r5, #32
    f32c:	f000 8328 	beq.w	f980 <_svfprintf_r+0xc74>
    f330:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f332:	3307      	adds	r3, #7
    f334:	f023 0307 	bic.w	r3, r3, #7
    f338:	6859      	ldr	r1, [r3, #4]
    f33a:	f853 2b08 	ldr.w	r2, [r3], #8
    f33e:	930e      	str	r3, [sp, #56]	; 0x38
    f340:	2301      	movs	r3, #1
    f342:	e787      	b.n	f254 <_svfprintf_r+0x548>
    f344:	7fefffff 	.word	0x7fefffff
    f348:	00015834 	.word	0x00015834
    f34c:	000153ac 	.word	0x000153ac
    f350:	0001583c 	.word	0x0001583c
    f354:	f898 3000 	ldrb.w	r3, [r8]
    f358:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    f35c:	e52f      	b.n	edbe <_svfprintf_r+0xb2>
    f35e:	4641      	mov	r1, r8
    f360:	f811 3b01 	ldrb.w	r3, [r1], #1
    f364:	2b2a      	cmp	r3, #42	; 0x2a
    f366:	f001 827f 	beq.w	10868 <_svfprintf_r+0x1b5c>
    f36a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f36e:	2a09      	cmp	r2, #9
    f370:	4688      	mov	r8, r1
    f372:	bf98      	it	ls
    f374:	2100      	movls	r1, #0
    f376:	f201 8176 	bhi.w	10666 <_svfprintf_r+0x195a>
    f37a:	f818 3b01 	ldrb.w	r3, [r8], #1
    f37e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f382:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    f386:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f38a:	2a09      	cmp	r2, #9
    f38c:	d9f5      	bls.n	f37a <_svfprintf_r+0x66e>
    f38e:	9108      	str	r1, [sp, #32]
    f390:	e517      	b.n	edc2 <_svfprintf_r+0xb6>
    f392:	f898 3000 	ldrb.w	r3, [r8]
    f396:	f04b 0b01 	orr.w	fp, fp, #1
    f39a:	e510      	b.n	edbe <_svfprintf_r+0xb2>
    f39c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    f3a0:	2b00      	cmp	r3, #0
    f3a2:	f47f ad91 	bne.w	eec8 <_svfprintf_r+0x1bc>
    f3a6:	f898 3000 	ldrb.w	r3, [r8]
    f3aa:	f88d 6087 	strb.w	r6, [sp, #135]	; 0x87
    f3ae:	e506      	b.n	edbe <_svfprintf_r+0xb2>
    f3b0:	465d      	mov	r5, fp
    f3b2:	2b01      	cmp	r3, #1
    f3b4:	f000 81ad 	beq.w	f712 <_svfprintf_r+0xa06>
    f3b8:	2b02      	cmp	r3, #2
    f3ba:	ac58      	add	r4, sp, #352	; 0x160
    f3bc:	d11f      	bne.n	f3fe <_svfprintf_r+0x6f2>
    f3be:	9818      	ldr	r0, [sp, #96]	; 0x60
    f3c0:	f002 030f 	and.w	r3, r2, #15
    f3c4:	0912      	lsrs	r2, r2, #4
    f3c6:	5cc3      	ldrb	r3, [r0, r3]
    f3c8:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f3cc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    f3d0:	0909      	lsrs	r1, r1, #4
    f3d2:	ea52 0301 	orrs.w	r3, r2, r1
    f3d6:	d1f3      	bne.n	f3c0 <_svfprintf_r+0x6b4>
    f3d8:	ab58      	add	r3, sp, #352	; 0x160
    f3da:	1b1b      	subs	r3, r3, r4
    f3dc:	46ab      	mov	fp, r5
    f3de:	930a      	str	r3, [sp, #40]	; 0x28
    f3e0:	990a      	ldr	r1, [sp, #40]	; 0x28
    f3e2:	9808      	ldr	r0, [sp, #32]
    f3e4:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f3e8:	4281      	cmp	r1, r0
    f3ea:	f04f 0300 	mov.w	r3, #0
    f3ee:	bfb8      	it	lt
    f3f0:	4601      	movlt	r1, r0
    f3f2:	930d      	str	r3, [sp, #52]	; 0x34
    f3f4:	9107      	str	r1, [sp, #28]
    f3f6:	9312      	str	r3, [sp, #72]	; 0x48
    f3f8:	9316      	str	r3, [sp, #88]	; 0x58
    f3fa:	9311      	str	r3, [sp, #68]	; 0x44
    f3fc:	e66a      	b.n	f0d4 <_svfprintf_r+0x3c8>
    f3fe:	f002 0307 	and.w	r3, r2, #7
    f402:	08d2      	lsrs	r2, r2, #3
    f404:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    f408:	08c9      	lsrs	r1, r1, #3
    f40a:	3330      	adds	r3, #48	; 0x30
    f40c:	ea52 0601 	orrs.w	r6, r2, r1
    f410:	4620      	mov	r0, r4
    f412:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f416:	d1f2      	bne.n	f3fe <_svfprintf_r+0x6f2>
    f418:	07e9      	lsls	r1, r5, #31
    f41a:	d5dd      	bpl.n	f3d8 <_svfprintf_r+0x6cc>
    f41c:	2b30      	cmp	r3, #48	; 0x30
    f41e:	d0db      	beq.n	f3d8 <_svfprintf_r+0x6cc>
    f420:	2330      	movs	r3, #48	; 0x30
    f422:	3802      	subs	r0, #2
    f424:	f804 3c01 	strb.w	r3, [r4, #-1]
    f428:	ab58      	add	r3, sp, #352	; 0x160
    f42a:	1a1b      	subs	r3, r3, r0
    f42c:	46ab      	mov	fp, r5
    f42e:	930a      	str	r3, [sp, #40]	; 0x28
    f430:	4604      	mov	r4, r0
    f432:	e7d5      	b.n	f3e0 <_svfprintf_r+0x6d4>
    f434:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f436:	2b65      	cmp	r3, #101	; 0x65
    f438:	f340 80dc 	ble.w	f5f4 <_svfprintf_r+0x8e8>
    f43c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f440:	2200      	movs	r2, #0
    f442:	2300      	movs	r3, #0
    f444:	f7fd fb86 	bl	cb54 <__aeabi_dcmpeq>
    f448:	2800      	cmp	r0, #0
    f44a:	f000 81c8 	beq.w	f7de <_svfprintf_r+0xad2>
    f44e:	2301      	movs	r3, #1
    f450:	f8c9 3004 	str.w	r3, [r9, #4]
    f454:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f456:	4abd      	ldr	r2, [pc, #756]	; (f74c <_svfprintf_r+0xa40>)
    f458:	f8c9 2000 	str.w	r2, [r9]
    f45c:	3301      	adds	r3, #1
    f45e:	3601      	adds	r6, #1
    f460:	2b07      	cmp	r3, #7
    f462:	962e      	str	r6, [sp, #184]	; 0xb8
    f464:	932d      	str	r3, [sp, #180]	; 0xb4
    f466:	f300 8539 	bgt.w	fedc <_svfprintf_r+0x11d0>
    f46a:	f109 0908 	add.w	r9, r9, #8
    f46e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f470:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f472:	4293      	cmp	r3, r2
    f474:	f280 82c2 	bge.w	f9fc <_svfprintf_r+0xcf0>
    f478:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f47a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f47c:	441e      	add	r6, r3
    f47e:	e9c9 2300 	strd	r2, r3, [r9]
    f482:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f484:	962e      	str	r6, [sp, #184]	; 0xb8
    f486:	3301      	adds	r3, #1
    f488:	2b07      	cmp	r3, #7
    f48a:	932d      	str	r3, [sp, #180]	; 0xb4
    f48c:	f300 838d 	bgt.w	fbaa <_svfprintf_r+0xe9e>
    f490:	f109 0908 	add.w	r9, r9, #8
    f494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f496:	1e5c      	subs	r4, r3, #1
    f498:	2c00      	cmp	r4, #0
    f49a:	f77f adbc 	ble.w	f016 <_svfprintf_r+0x30a>
    f49e:	2c10      	cmp	r4, #16
    f4a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f4a2:	4dab      	ldr	r5, [pc, #684]	; (f750 <_svfprintf_r+0xa44>)
    f4a4:	f340 8555 	ble.w	ff52 <_svfprintf_r+0x1246>
    f4a8:	4632      	mov	r2, r6
    f4aa:	2710      	movs	r7, #16
    f4ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f4ae:	e005      	b.n	f4bc <_svfprintf_r+0x7b0>
    f4b0:	f109 0908 	add.w	r9, r9, #8
    f4b4:	3c10      	subs	r4, #16
    f4b6:	2c10      	cmp	r4, #16
    f4b8:	f340 854a 	ble.w	ff50 <_svfprintf_r+0x1244>
    f4bc:	3301      	adds	r3, #1
    f4be:	3210      	adds	r2, #16
    f4c0:	2b07      	cmp	r3, #7
    f4c2:	e9c9 5700 	strd	r5, r7, [r9]
    f4c6:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f4ca:	ddf1      	ble.n	f4b0 <_svfprintf_r+0x7a4>
    f4cc:	aa2c      	add	r2, sp, #176	; 0xb0
    f4ce:	4631      	mov	r1, r6
    f4d0:	4650      	mov	r0, sl
    f4d2:	f002 fc85 	bl	11de0 <__ssprint_r>
    f4d6:	2800      	cmp	r0, #0
    f4d8:	f040 8083 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    f4dc:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f4e0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f4e4:	e7e6      	b.n	f4b4 <_svfprintf_r+0x7a8>
    f4e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f4e8:	9a07      	ldr	r2, [sp, #28]
    f4ea:	1a9f      	subs	r7, r3, r2
    f4ec:	2f00      	cmp	r7, #0
    f4ee:	f77f ad79 	ble.w	efe4 <_svfprintf_r+0x2d8>
    f4f2:	2f10      	cmp	r7, #16
    f4f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f4f6:	4d96      	ldr	r5, [pc, #600]	; (f750 <_svfprintf_r+0xa44>)
    f4f8:	dd23      	ble.n	f542 <_svfprintf_r+0x836>
    f4fa:	4632      	mov	r2, r6
    f4fc:	4626      	mov	r6, r4
    f4fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f500:	e004      	b.n	f50c <_svfprintf_r+0x800>
    f502:	3f10      	subs	r7, #16
    f504:	2f10      	cmp	r7, #16
    f506:	f109 0908 	add.w	r9, r9, #8
    f50a:	dd18      	ble.n	f53e <_svfprintf_r+0x832>
    f50c:	3301      	adds	r3, #1
    f50e:	3210      	adds	r2, #16
    f510:	2110      	movs	r1, #16
    f512:	2b07      	cmp	r3, #7
    f514:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f518:	f8c9 5000 	str.w	r5, [r9]
    f51c:	f8c9 1004 	str.w	r1, [r9, #4]
    f520:	ddef      	ble.n	f502 <_svfprintf_r+0x7f6>
    f522:	aa2c      	add	r2, sp, #176	; 0xb0
    f524:	4621      	mov	r1, r4
    f526:	4650      	mov	r0, sl
    f528:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f52c:	f002 fc58 	bl	11de0 <__ssprint_r>
    f530:	2800      	cmp	r0, #0
    f532:	d156      	bne.n	f5e2 <_svfprintf_r+0x8d6>
    f534:	3f10      	subs	r7, #16
    f536:	2f10      	cmp	r7, #16
    f538:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f53c:	dce6      	bgt.n	f50c <_svfprintf_r+0x800>
    f53e:	4634      	mov	r4, r6
    f540:	4616      	mov	r6, r2
    f542:	3301      	adds	r3, #1
    f544:	443e      	add	r6, r7
    f546:	2b07      	cmp	r3, #7
    f548:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f54c:	f8c9 5000 	str.w	r5, [r9]
    f550:	f8c9 7004 	str.w	r7, [r9, #4]
    f554:	f300 8516 	bgt.w	ff84 <_svfprintf_r+0x1278>
    f558:	9b08      	ldr	r3, [sp, #32]
    f55a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f55c:	1a9f      	subs	r7, r3, r2
    f55e:	2f00      	cmp	r7, #0
    f560:	f109 0908 	add.w	r9, r9, #8
    f564:	f77f ad44 	ble.w	eff0 <_svfprintf_r+0x2e4>
    f568:	2f10      	cmp	r7, #16
    f56a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f56c:	4d78      	ldr	r5, [pc, #480]	; (f750 <_svfprintf_r+0xa44>)
    f56e:	dd22      	ble.n	f5b6 <_svfprintf_r+0x8aa>
    f570:	4632      	mov	r2, r6
    f572:	4626      	mov	r6, r4
    f574:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f576:	e004      	b.n	f582 <_svfprintf_r+0x876>
    f578:	3f10      	subs	r7, #16
    f57a:	2f10      	cmp	r7, #16
    f57c:	f109 0908 	add.w	r9, r9, #8
    f580:	dd17      	ble.n	f5b2 <_svfprintf_r+0x8a6>
    f582:	3301      	adds	r3, #1
    f584:	3210      	adds	r2, #16
    f586:	2110      	movs	r1, #16
    f588:	2b07      	cmp	r3, #7
    f58a:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f58e:	f8c9 5000 	str.w	r5, [r9]
    f592:	f8c9 1004 	str.w	r1, [r9, #4]
    f596:	ddef      	ble.n	f578 <_svfprintf_r+0x86c>
    f598:	aa2c      	add	r2, sp, #176	; 0xb0
    f59a:	4621      	mov	r1, r4
    f59c:	4650      	mov	r0, sl
    f59e:	f002 fc1f 	bl	11de0 <__ssprint_r>
    f5a2:	b9f0      	cbnz	r0, f5e2 <_svfprintf_r+0x8d6>
    f5a4:	3f10      	subs	r7, #16
    f5a6:	2f10      	cmp	r7, #16
    f5a8:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f5ac:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f5b0:	dce7      	bgt.n	f582 <_svfprintf_r+0x876>
    f5b2:	4634      	mov	r4, r6
    f5b4:	4616      	mov	r6, r2
    f5b6:	3301      	adds	r3, #1
    f5b8:	443e      	add	r6, r7
    f5ba:	2b07      	cmp	r3, #7
    f5bc:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f5c0:	f8c9 5000 	str.w	r5, [r9]
    f5c4:	f8c9 7004 	str.w	r7, [r9, #4]
    f5c8:	f300 81cd 	bgt.w	f966 <_svfprintf_r+0xc5a>
    f5cc:	f109 0908 	add.w	r9, r9, #8
    f5d0:	e50e      	b.n	eff0 <_svfprintf_r+0x2e4>
    f5d2:	990c      	ldr	r1, [sp, #48]	; 0x30
    f5d4:	aa2c      	add	r2, sp, #176	; 0xb0
    f5d6:	4650      	mov	r0, sl
    f5d8:	f002 fc02 	bl	11de0 <__ssprint_r>
    f5dc:	2800      	cmp	r0, #0
    f5de:	f43f ad2e 	beq.w	f03e <_svfprintf_r+0x332>
    f5e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f5e4:	2b00      	cmp	r3, #0
    f5e6:	f43f ac99 	beq.w	ef1c <_svfprintf_r+0x210>
    f5ea:	990d      	ldr	r1, [sp, #52]	; 0x34
    f5ec:	4650      	mov	r0, sl
    f5ee:	f7fe feb5 	bl	e35c <_free_r>
    f5f2:	e493      	b.n	ef1c <_svfprintf_r+0x210>
    f5f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f5f6:	2b01      	cmp	r3, #1
    f5f8:	f340 816e 	ble.w	f8d8 <_svfprintf_r+0xbcc>
    f5fc:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    f5fe:	f8c9 4000 	str.w	r4, [r9]
    f602:	2301      	movs	r3, #1
    f604:	441f      	add	r7, r3
    f606:	3601      	adds	r6, #1
    f608:	2f07      	cmp	r7, #7
    f60a:	f8c9 3004 	str.w	r3, [r9, #4]
    f60e:	962e      	str	r6, [sp, #184]	; 0xb8
    f610:	972d      	str	r7, [sp, #180]	; 0xb4
    f612:	f300 81d9 	bgt.w	f9c8 <_svfprintf_r+0xcbc>
    f616:	f109 0908 	add.w	r9, r9, #8
    f61a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f61c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f61e:	3701      	adds	r7, #1
    f620:	441e      	add	r6, r3
    f622:	2f07      	cmp	r7, #7
    f624:	e9c9 2300 	strd	r2, r3, [r9]
    f628:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    f62c:	f300 81d9 	bgt.w	f9e2 <_svfprintf_r+0xcd6>
    f630:	f109 0908 	add.w	r9, r9, #8
    f634:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f638:	2200      	movs	r2, #0
    f63a:	2300      	movs	r3, #0
    f63c:	f7fd fa8a 	bl	cb54 <__aeabi_dcmpeq>
    f640:	2800      	cmp	r0, #0
    f642:	f040 8167 	bne.w	f914 <_svfprintf_r+0xc08>
    f646:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f648:	3701      	adds	r7, #1
    f64a:	3b01      	subs	r3, #1
    f64c:	3401      	adds	r4, #1
    f64e:	441e      	add	r6, r3
    f650:	2f07      	cmp	r7, #7
    f652:	f8c9 4000 	str.w	r4, [r9]
    f656:	972d      	str	r7, [sp, #180]	; 0xb4
    f658:	f8c9 3004 	str.w	r3, [r9, #4]
    f65c:	962e      	str	r6, [sp, #184]	; 0xb8
    f65e:	f300 814c 	bgt.w	f8fa <_svfprintf_r+0xbee>
    f662:	f109 0908 	add.w	r9, r9, #8
    f666:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f668:	f8c9 3004 	str.w	r3, [r9, #4]
    f66c:	3701      	adds	r7, #1
    f66e:	441e      	add	r6, r3
    f670:	2f07      	cmp	r7, #7
    f672:	ab26      	add	r3, sp, #152	; 0x98
    f674:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    f678:	f8c9 3000 	str.w	r3, [r9]
    f67c:	f77f acc9 	ble.w	f012 <_svfprintf_r+0x306>
    f680:	990c      	ldr	r1, [sp, #48]	; 0x30
    f682:	aa2c      	add	r2, sp, #176	; 0xb0
    f684:	4650      	mov	r0, sl
    f686:	f002 fbab 	bl	11de0 <__ssprint_r>
    f68a:	2800      	cmp	r0, #0
    f68c:	d1a9      	bne.n	f5e2 <_svfprintf_r+0x8d6>
    f68e:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f690:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f694:	e4bf      	b.n	f016 <_svfprintf_r+0x30a>
    f696:	2f10      	cmp	r7, #16
    f698:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    f69c:	4d2d      	ldr	r5, [pc, #180]	; (f754 <_svfprintf_r+0xa48>)
    f69e:	dd27      	ble.n	f6f0 <_svfprintf_r+0x9e4>
    f6a0:	e9cd 381e 	strd	r3, r8, [sp, #120]	; 0x78
    f6a4:	2610      	movs	r6, #16
    f6a6:	46d0      	mov	r8, sl
    f6a8:	46a2      	mov	sl, r4
    f6aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f6ac:	e004      	b.n	f6b8 <_svfprintf_r+0x9ac>
    f6ae:	3f10      	subs	r7, #16
    f6b0:	2f10      	cmp	r7, #16
    f6b2:	f109 0908 	add.w	r9, r9, #8
    f6b6:	dd16      	ble.n	f6e6 <_svfprintf_r+0x9da>
    f6b8:	3201      	adds	r2, #1
    f6ba:	3110      	adds	r1, #16
    f6bc:	2a07      	cmp	r2, #7
    f6be:	e9c9 5600 	strd	r5, r6, [r9]
    f6c2:	e9cd 212d 	strd	r2, r1, [sp, #180]	; 0xb4
    f6c6:	ddf2      	ble.n	f6ae <_svfprintf_r+0x9a2>
    f6c8:	aa2c      	add	r2, sp, #176	; 0xb0
    f6ca:	4621      	mov	r1, r4
    f6cc:	4640      	mov	r0, r8
    f6ce:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f6d2:	f002 fb85 	bl	11de0 <__ssprint_r>
    f6d6:	2800      	cmp	r0, #0
    f6d8:	f040 83f2 	bne.w	fec0 <_svfprintf_r+0x11b4>
    f6dc:	3f10      	subs	r7, #16
    f6de:	2f10      	cmp	r7, #16
    f6e0:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    f6e4:	dce8      	bgt.n	f6b8 <_svfprintf_r+0x9ac>
    f6e6:	4654      	mov	r4, sl
    f6e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f6ea:	46c2      	mov	sl, r8
    f6ec:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
    f6f0:	f8c9 5000 	str.w	r5, [r9]
    f6f4:	3201      	adds	r2, #1
    f6f6:	187e      	adds	r6, r7, r1
    f6f8:	2a07      	cmp	r2, #7
    f6fa:	e9cd 262d 	strd	r2, r6, [sp, #180]	; 0xb4
    f6fe:	f8c9 7004 	str.w	r7, [r9, #4]
    f702:	f300 83cc 	bgt.w	fe9e <_svfprintf_r+0x1192>
    f706:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f70a:	f109 0908 	add.w	r9, r9, #8
    f70e:	e441      	b.n	ef94 <_svfprintf_r+0x288>
    f710:	465d      	mov	r5, fp
    f712:	2a0a      	cmp	r2, #10
    f714:	f171 0300 	sbcs.w	r3, r1, #0
    f718:	f080 8329 	bcs.w	fd6e <_svfprintf_r+0x1062>
    f71c:	3230      	adds	r2, #48	; 0x30
    f71e:	2301      	movs	r3, #1
    f720:	f88d 215f 	strb.w	r2, [sp, #351]	; 0x15f
    f724:	46ab      	mov	fp, r5
    f726:	930a      	str	r3, [sp, #40]	; 0x28
    f728:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    f72c:	e658      	b.n	f3e0 <_svfprintf_r+0x6d4>
    f72e:	990c      	ldr	r1, [sp, #48]	; 0x30
    f730:	931e      	str	r3, [sp, #120]	; 0x78
    f732:	aa2c      	add	r2, sp, #176	; 0xb0
    f734:	4650      	mov	r0, sl
    f736:	f002 fb53 	bl	11de0 <__ssprint_r>
    f73a:	2800      	cmp	r0, #0
    f73c:	f47f af51 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    f740:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f742:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f744:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f748:	e436      	b.n	efb8 <_svfprintf_r+0x2ac>
    f74a:	bf00      	nop
    f74c:	000141ec 	.word	0x000141ec
    f750:	0001587c 	.word	0x0001587c
    f754:	0001586c 	.word	0x0001586c
    f758:	990c      	ldr	r1, [sp, #48]	; 0x30
    f75a:	aa2c      	add	r2, sp, #176	; 0xb0
    f75c:	4650      	mov	r0, sl
    f75e:	f002 fb3f 	bl	11de0 <__ssprint_r>
    f762:	2800      	cmp	r0, #0
    f764:	f47f af3d 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    f768:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f76a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f76e:	e435      	b.n	efdc <_svfprintf_r+0x2d0>
    f770:	2c10      	cmp	r4, #16
    f772:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f774:	4db8      	ldr	r5, [pc, #736]	; (fa58 <_svfprintf_r+0xd4c>)
    f776:	dd1f      	ble.n	f7b8 <_svfprintf_r+0xaac>
    f778:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    f77c:	2710      	movs	r7, #16
    f77e:	e004      	b.n	f78a <_svfprintf_r+0xa7e>
    f780:	3c10      	subs	r4, #16
    f782:	2c10      	cmp	r4, #16
    f784:	f109 0908 	add.w	r9, r9, #8
    f788:	dd16      	ble.n	f7b8 <_svfprintf_r+0xaac>
    f78a:	3301      	adds	r3, #1
    f78c:	3610      	adds	r6, #16
    f78e:	2b07      	cmp	r3, #7
    f790:	e9c9 5700 	strd	r5, r7, [r9]
    f794:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f798:	ddf2      	ble.n	f780 <_svfprintf_r+0xa74>
    f79a:	aa2c      	add	r2, sp, #176	; 0xb0
    f79c:	4659      	mov	r1, fp
    f79e:	4650      	mov	r0, sl
    f7a0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f7a4:	f002 fb1c 	bl	11de0 <__ssprint_r>
    f7a8:	2800      	cmp	r0, #0
    f7aa:	f47f af1a 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    f7ae:	3c10      	subs	r4, #16
    f7b0:	2c10      	cmp	r4, #16
    f7b2:	e9dd 362d 	ldrd	r3, r6, [sp, #180]	; 0xb4
    f7b6:	dce8      	bgt.n	f78a <_svfprintf_r+0xa7e>
    f7b8:	3301      	adds	r3, #1
    f7ba:	4426      	add	r6, r4
    f7bc:	2b07      	cmp	r3, #7
    f7be:	e9c9 5400 	strd	r5, r4, [r9]
    f7c2:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f7c6:	f77f ac2f 	ble.w	f028 <_svfprintf_r+0x31c>
    f7ca:	990c      	ldr	r1, [sp, #48]	; 0x30
    f7cc:	aa2c      	add	r2, sp, #176	; 0xb0
    f7ce:	4650      	mov	r0, sl
    f7d0:	f002 fb06 	bl	11de0 <__ssprint_r>
    f7d4:	2800      	cmp	r0, #0
    f7d6:	f47f af04 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    f7da:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f7dc:	e424      	b.n	f028 <_svfprintf_r+0x31c>
    f7de:	9923      	ldr	r1, [sp, #140]	; 0x8c
    f7e0:	2900      	cmp	r1, #0
    f7e2:	f340 8327 	ble.w	fe34 <_svfprintf_r+0x1128>
    f7e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
    f7e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f7ea:	429d      	cmp	r5, r3
    f7ec:	bfa8      	it	ge
    f7ee:	461d      	movge	r5, r3
    f7f0:	2d00      	cmp	r5, #0
    f7f2:	dd0b      	ble.n	f80c <_svfprintf_r+0xb00>
    f7f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f7f6:	3301      	adds	r3, #1
    f7f8:	442e      	add	r6, r5
    f7fa:	2b07      	cmp	r3, #7
    f7fc:	e9c9 4500 	strd	r4, r5, [r9]
    f800:	962e      	str	r6, [sp, #184]	; 0xb8
    f802:	932d      	str	r3, [sp, #180]	; 0xb4
    f804:	f300 86dd 	bgt.w	105c2 <_svfprintf_r+0x18b6>
    f808:	f109 0908 	add.w	r9, r9, #8
    f80c:	9f11      	ldr	r7, [sp, #68]	; 0x44
    f80e:	2d00      	cmp	r5, #0
    f810:	bfa8      	it	ge
    f812:	1b7f      	subge	r7, r7, r5
    f814:	2f00      	cmp	r7, #0
    f816:	f300 81f4 	bgt.w	fc02 <_svfprintf_r+0xef6>
    f81a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f81c:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    f820:	4423      	add	r3, r4
    f822:	930a      	str	r3, [sp, #40]	; 0x28
    f824:	f040 8214 	bne.w	fc50 <_svfprintf_r+0xf44>
    f828:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f82a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f82c:	4293      	cmp	r3, r2
    f82e:	db03      	blt.n	f838 <_svfprintf_r+0xb2c>
    f830:	f01b 0f01 	tst.w	fp, #1
    f834:	f000 84a5 	beq.w	10182 <_svfprintf_r+0x1476>
    f838:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f83a:	9919      	ldr	r1, [sp, #100]	; 0x64
    f83c:	4416      	add	r6, r2
    f83e:	e9c9 1200 	strd	r1, r2, [r9]
    f842:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f844:	962e      	str	r6, [sp, #184]	; 0xb8
    f846:	3201      	adds	r2, #1
    f848:	2a07      	cmp	r2, #7
    f84a:	922d      	str	r2, [sp, #180]	; 0xb4
    f84c:	f300 86c6 	bgt.w	105dc <_svfprintf_r+0x18d0>
    f850:	f109 0908 	add.w	r9, r9, #8
    f854:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f856:	18a5      	adds	r5, r4, r2
    f858:	1ad4      	subs	r4, r2, r3
    f85a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f85c:	1aed      	subs	r5, r5, r3
    f85e:	42a5      	cmp	r5, r4
    f860:	bfa8      	it	ge
    f862:	4625      	movge	r5, r4
    f864:	2d00      	cmp	r5, #0
    f866:	dd0d      	ble.n	f884 <_svfprintf_r+0xb78>
    f868:	f8c9 3000 	str.w	r3, [r9]
    f86c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f86e:	f8c9 5004 	str.w	r5, [r9, #4]
    f872:	3301      	adds	r3, #1
    f874:	442e      	add	r6, r5
    f876:	2b07      	cmp	r3, #7
    f878:	962e      	str	r6, [sp, #184]	; 0xb8
    f87a:	932d      	str	r3, [sp, #180]	; 0xb4
    f87c:	f300 86be 	bgt.w	105fc <_svfprintf_r+0x18f0>
    f880:	f109 0908 	add.w	r9, r9, #8
    f884:	2d00      	cmp	r5, #0
    f886:	bfa8      	it	ge
    f888:	1b64      	subge	r4, r4, r5
    f88a:	2c00      	cmp	r4, #0
    f88c:	f77f abc3 	ble.w	f016 <_svfprintf_r+0x30a>
    f890:	2c10      	cmp	r4, #16
    f892:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f894:	4d71      	ldr	r5, [pc, #452]	; (fa5c <_svfprintf_r+0xd50>)
    f896:	f340 835c 	ble.w	ff52 <_svfprintf_r+0x1246>
    f89a:	4632      	mov	r2, r6
    f89c:	2710      	movs	r7, #16
    f89e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f8a0:	e005      	b.n	f8ae <_svfprintf_r+0xba2>
    f8a2:	f109 0908 	add.w	r9, r9, #8
    f8a6:	3c10      	subs	r4, #16
    f8a8:	2c10      	cmp	r4, #16
    f8aa:	f340 8351 	ble.w	ff50 <_svfprintf_r+0x1244>
    f8ae:	3301      	adds	r3, #1
    f8b0:	3210      	adds	r2, #16
    f8b2:	2b07      	cmp	r3, #7
    f8b4:	e9c9 5700 	strd	r5, r7, [r9]
    f8b8:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f8bc:	ddf1      	ble.n	f8a2 <_svfprintf_r+0xb96>
    f8be:	aa2c      	add	r2, sp, #176	; 0xb0
    f8c0:	4631      	mov	r1, r6
    f8c2:	4650      	mov	r0, sl
    f8c4:	f002 fa8c 	bl	11de0 <__ssprint_r>
    f8c8:	2800      	cmp	r0, #0
    f8ca:	f47f ae8a 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    f8ce:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f8d2:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f8d6:	e7e6      	b.n	f8a6 <_svfprintf_r+0xb9a>
    f8d8:	f01b 0f01 	tst.w	fp, #1
    f8dc:	f47f ae8e 	bne.w	f5fc <_svfprintf_r+0x8f0>
    f8e0:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    f8e2:	f8c9 4000 	str.w	r4, [r9]
    f8e6:	2301      	movs	r3, #1
    f8e8:	441f      	add	r7, r3
    f8ea:	3601      	adds	r6, #1
    f8ec:	2f07      	cmp	r7, #7
    f8ee:	f8c9 3004 	str.w	r3, [r9, #4]
    f8f2:	962e      	str	r6, [sp, #184]	; 0xb8
    f8f4:	972d      	str	r7, [sp, #180]	; 0xb4
    f8f6:	f77f aeb4 	ble.w	f662 <_svfprintf_r+0x956>
    f8fa:	990c      	ldr	r1, [sp, #48]	; 0x30
    f8fc:	aa2c      	add	r2, sp, #176	; 0xb0
    f8fe:	4650      	mov	r0, sl
    f900:	f002 fa6e 	bl	11de0 <__ssprint_r>
    f904:	2800      	cmp	r0, #0
    f906:	f47f ae6c 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    f90a:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    f90e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f912:	e6a8      	b.n	f666 <_svfprintf_r+0x95a>
    f914:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f916:	1e5c      	subs	r4, r3, #1
    f918:	2c00      	cmp	r4, #0
    f91a:	f77f aea4 	ble.w	f666 <_svfprintf_r+0x95a>
    f91e:	2c10      	cmp	r4, #16
    f920:	4d4e      	ldr	r5, [pc, #312]	; (fa5c <_svfprintf_r+0xd50>)
    f922:	f340 834c 	ble.w	ffbe <_svfprintf_r+0x12b2>
    f926:	4632      	mov	r2, r6
    f928:	2310      	movs	r3, #16
    f92a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f92c:	e005      	b.n	f93a <_svfprintf_r+0xc2e>
    f92e:	f109 0908 	add.w	r9, r9, #8
    f932:	3c10      	subs	r4, #16
    f934:	2c10      	cmp	r4, #16
    f936:	f340 8341 	ble.w	ffbc <_svfprintf_r+0x12b0>
    f93a:	3701      	adds	r7, #1
    f93c:	3210      	adds	r2, #16
    f93e:	2f07      	cmp	r7, #7
    f940:	e9c9 5300 	strd	r5, r3, [r9]
    f944:	e9cd 722d 	strd	r7, r2, [sp, #180]	; 0xb4
    f948:	ddf1      	ble.n	f92e <_svfprintf_r+0xc22>
    f94a:	aa2c      	add	r2, sp, #176	; 0xb0
    f94c:	4631      	mov	r1, r6
    f94e:	4650      	mov	r0, sl
    f950:	f002 fa46 	bl	11de0 <__ssprint_r>
    f954:	2800      	cmp	r0, #0
    f956:	f47f ae44 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    f95a:	e9dd 722d 	ldrd	r7, r2, [sp, #180]	; 0xb4
    f95e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f962:	2310      	movs	r3, #16
    f964:	e7e5      	b.n	f932 <_svfprintf_r+0xc26>
    f966:	990c      	ldr	r1, [sp, #48]	; 0x30
    f968:	aa2c      	add	r2, sp, #176	; 0xb0
    f96a:	4650      	mov	r0, sl
    f96c:	f002 fa38 	bl	11de0 <__ssprint_r>
    f970:	2800      	cmp	r0, #0
    f972:	f47f ae36 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    f976:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f978:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f97c:	f7ff bb38 	b.w	eff0 <_svfprintf_r+0x2e4>
    f980:	f015 0310 	ands.w	r3, r5, #16
    f984:	d160      	bne.n	fa48 <_svfprintf_r+0xd3c>
    f986:	f015 0240 	ands.w	r2, r5, #64	; 0x40
    f98a:	f000 8373 	beq.w	10074 <_svfprintf_r+0x1368>
    f98e:	980e      	ldr	r0, [sp, #56]	; 0x38
    f990:	f850 2b04 	ldr.w	r2, [r0], #4
    f994:	900e      	str	r0, [sp, #56]	; 0x38
    f996:	4619      	mov	r1, r3
    f998:	b292      	uxth	r2, r2
    f99a:	2301      	movs	r3, #1
    f99c:	e45a      	b.n	f254 <_svfprintf_r+0x548>
    f99e:	f01b 0310 	ands.w	r3, fp, #16
    f9a2:	d168      	bne.n	fa76 <_svfprintf_r+0xd6a>
    f9a4:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    f9a8:	f000 8356 	beq.w	10058 <_svfprintf_r+0x134c>
    f9ac:	980e      	ldr	r0, [sp, #56]	; 0x38
    f9ae:	f850 2b04 	ldr.w	r2, [r0], #4
    f9b2:	900e      	str	r0, [sp, #56]	; 0x38
    f9b4:	4619      	mov	r1, r3
    f9b6:	b292      	uxth	r2, r2
    f9b8:	e4af      	b.n	f31a <_svfprintf_r+0x60e>
    f9ba:	4252      	negs	r2, r2
    f9bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    f9c0:	465d      	mov	r5, fp
    f9c2:	202d      	movs	r0, #45	; 0x2d
    f9c4:	2301      	movs	r3, #1
    f9c6:	e446      	b.n	f256 <_svfprintf_r+0x54a>
    f9c8:	990c      	ldr	r1, [sp, #48]	; 0x30
    f9ca:	aa2c      	add	r2, sp, #176	; 0xb0
    f9cc:	4650      	mov	r0, sl
    f9ce:	f002 fa07 	bl	11de0 <__ssprint_r>
    f9d2:	2800      	cmp	r0, #0
    f9d4:	f47f ae05 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    f9d8:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    f9dc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f9e0:	e61b      	b.n	f61a <_svfprintf_r+0x90e>
    f9e2:	990c      	ldr	r1, [sp, #48]	; 0x30
    f9e4:	aa2c      	add	r2, sp, #176	; 0xb0
    f9e6:	4650      	mov	r0, sl
    f9e8:	f002 f9fa 	bl	11de0 <__ssprint_r>
    f9ec:	2800      	cmp	r0, #0
    f9ee:	f47f adf8 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    f9f2:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    f9f6:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f9fa:	e61b      	b.n	f634 <_svfprintf_r+0x928>
    f9fc:	f01b 0f01 	tst.w	fp, #1
    fa00:	f43f ab09 	beq.w	f016 <_svfprintf_r+0x30a>
    fa04:	e538      	b.n	f478 <_svfprintf_r+0x76c>
    fa06:	930e      	str	r3, [sp, #56]	; 0x38
    fa08:	f898 3000 	ldrb.w	r3, [r8]
    fa0c:	f7ff b9d7 	b.w	edbe <_svfprintf_r+0xb2>
    fa10:	ac58      	add	r4, sp, #352	; 0x160
    fa12:	e4e5      	b.n	f3e0 <_svfprintf_r+0x6d4>
    fa14:	f41b 7f00 	tst.w	fp, #512	; 0x200
    fa18:	f040 83bd 	bne.w	10196 <_svfprintf_r+0x148a>
    fa1c:	f853 2b04 	ldr.w	r2, [r3], #4
    fa20:	930e      	str	r3, [sp, #56]	; 0x38
    fa22:	17d1      	asrs	r1, r2, #31
    fa24:	460b      	mov	r3, r1
    fa26:	f7ff bbc4 	b.w	f1b2 <_svfprintf_r+0x4a6>
    fa2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    fa2c:	2b00      	cmp	r3, #0
    fa2e:	f43f aa4b 	beq.w	eec8 <_svfprintf_r+0x1bc>
    fa32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    fa34:	781b      	ldrb	r3, [r3, #0]
    fa36:	2b00      	cmp	r3, #0
    fa38:	f43f aa46 	beq.w	eec8 <_svfprintf_r+0x1bc>
    fa3c:	f898 3000 	ldrb.w	r3, [r8]
    fa40:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
    fa44:	f7ff b9bb 	b.w	edbe <_svfprintf_r+0xb2>
    fa48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fa4a:	f853 2b04 	ldr.w	r2, [r3], #4
    fa4e:	930e      	str	r3, [sp, #56]	; 0x38
    fa50:	2301      	movs	r3, #1
    fa52:	f7ff bbff 	b.w	f254 <_svfprintf_r+0x548>
    fa56:	bf00      	nop
    fa58:	0001586c 	.word	0x0001586c
    fa5c:	0001587c 	.word	0x0001587c
    fa60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fa62:	9809      	ldr	r0, [sp, #36]	; 0x24
    fa64:	f853 1b04 	ldr.w	r1, [r3], #4
    fa68:	930e      	str	r3, [sp, #56]	; 0x38
    fa6a:	17c2      	asrs	r2, r0, #31
    fa6c:	e9c1 0200 	strd	r0, r2, [r1]
    fa70:	4644      	mov	r4, r8
    fa72:	f7ff b979 	b.w	ed68 <_svfprintf_r+0x5c>
    fa76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fa78:	f853 2b04 	ldr.w	r2, [r3], #4
    fa7c:	930e      	str	r3, [sp, #56]	; 0x38
    fa7e:	e44c      	b.n	f31a <_svfprintf_r+0x60e>
    fa80:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    fa84:	4602      	mov	r2, r0
    fa86:	460b      	mov	r3, r1
    fa88:	f7fd f896 	bl	cbb8 <__aeabi_dcmpun>
    fa8c:	2800      	cmp	r0, #0
    fa8e:	f040 8675 	bne.w	1077c <_svfprintf_r+0x1a70>
    fa92:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fa94:	2b61      	cmp	r3, #97	; 0x61
    fa96:	f000 855b 	beq.w	10550 <_svfprintf_r+0x1844>
    fa9a:	2b41      	cmp	r3, #65	; 0x41
    fa9c:	f000 85ac 	beq.w	105f8 <_svfprintf_r+0x18ec>
    faa0:	9b08      	ldr	r3, [sp, #32]
    faa2:	3301      	adds	r3, #1
    faa4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    faa6:	f023 0320 	bic.w	r3, r3, #32
    faaa:	9307      	str	r3, [sp, #28]
    faac:	f000 8463 	beq.w	10376 <_svfprintf_r+0x166a>
    fab0:	2b47      	cmp	r3, #71	; 0x47
    fab2:	d104      	bne.n	fabe <_svfprintf_r+0xdb2>
    fab4:	9b08      	ldr	r3, [sp, #32]
    fab6:	2b00      	cmp	r3, #0
    fab8:	bf08      	it	eq
    faba:	2301      	moveq	r3, #1
    fabc:	9308      	str	r3, [sp, #32]
    fabe:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    fac2:	460a      	mov	r2, r1
    fac4:	2a00      	cmp	r2, #0
    fac6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    faca:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
    face:	f2c0 85e1 	blt.w	10694 <_svfprintf_r+0x1988>
    fad2:	469b      	mov	fp, r3
    fad4:	2300      	movs	r3, #0
    fad6:	4616      	mov	r6, r2
    fad8:	931e      	str	r3, [sp, #120]	; 0x78
    fada:	4607      	mov	r7, r0
    fadc:	930d      	str	r3, [sp, #52]	; 0x34
    fade:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fae0:	3b41      	subs	r3, #65	; 0x41
    fae2:	2b25      	cmp	r3, #37	; 0x25
    fae4:	f200 8367 	bhi.w	101b6 <_svfprintf_r+0x14aa>
    fae8:	e8df f013 	tbh	[pc, r3, lsl #1]
    faec:	03650452 	.word	0x03650452
    faf0:	03650365 	.word	0x03650365
    faf4:	044e0449 	.word	0x044e0449
    faf8:	03650365 	.word	0x03650365
    fafc:	03650365 	.word	0x03650365
    fb00:	03650365 	.word	0x03650365
    fb04:	03650365 	.word	0x03650365
    fb08:	03650365 	.word	0x03650365
    fb0c:	03650365 	.word	0x03650365
    fb10:	03650365 	.word	0x03650365
    fb14:	03650365 	.word	0x03650365
    fb18:	03650365 	.word	0x03650365
    fb1c:	03650365 	.word	0x03650365
    fb20:	03650365 	.word	0x03650365
    fb24:	03650365 	.word	0x03650365
    fb28:	03650365 	.word	0x03650365
    fb2c:	03650365 	.word	0x03650365
    fb30:	03650365 	.word	0x03650365
    fb34:	044e0449 	.word	0x044e0449
    fb38:	9310      	str	r3, [sp, #64]	; 0x40
    fb3a:	465d      	mov	r5, fp
    fb3c:	f7ff bbf4 	b.w	f328 <_svfprintf_r+0x61c>
    fb40:	9310      	str	r3, [sp, #64]	; 0x40
    fb42:	4bb7      	ldr	r3, [pc, #732]	; (fe20 <_svfprintf_r+0x1114>)
    fb44:	9318      	str	r3, [sp, #96]	; 0x60
    fb46:	f01b 0120 	ands.w	r1, fp, #32
    fb4a:	f000 80fc 	beq.w	fd46 <_svfprintf_r+0x103a>
    fb4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fb50:	3307      	adds	r3, #7
    fb52:	f023 0307 	bic.w	r3, r3, #7
    fb56:	6859      	ldr	r1, [r3, #4]
    fb58:	f853 2b08 	ldr.w	r2, [r3], #8
    fb5c:	930e      	str	r3, [sp, #56]	; 0x38
    fb5e:	f01b 0f01 	tst.w	fp, #1
    fb62:	d00a      	beq.n	fb7a <_svfprintf_r+0xe6e>
    fb64:	ea52 0301 	orrs.w	r3, r2, r1
    fb68:	d007      	beq.n	fb7a <_svfprintf_r+0xe6e>
    fb6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fb6c:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
    fb70:	2330      	movs	r3, #48	; 0x30
    fb72:	f04b 0b02 	orr.w	fp, fp, #2
    fb76:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    fb7a:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    fb7e:	2302      	movs	r3, #2
    fb80:	f7ff bb68 	b.w	f254 <_svfprintf_r+0x548>
    fb84:	9310      	str	r3, [sp, #64]	; 0x40
    fb86:	f7ff bbbc 	b.w	f302 <_svfprintf_r+0x5f6>
    fb8a:	9310      	str	r3, [sp, #64]	; 0x40
    fb8c:	4ba5      	ldr	r3, [pc, #660]	; (fe24 <_svfprintf_r+0x1118>)
    fb8e:	9318      	str	r3, [sp, #96]	; 0x60
    fb90:	e7d9      	b.n	fb46 <_svfprintf_r+0xe3a>
    fb92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fb94:	2101      	movs	r1, #1
    fb96:	f853 2b04 	ldr.w	r2, [r3], #4
    fb9a:	9107      	str	r1, [sp, #28]
    fb9c:	f88d 20fc 	strb.w	r2, [sp, #252]	; 0xfc
    fba0:	930e      	str	r3, [sp, #56]	; 0x38
    fba2:	910a      	str	r1, [sp, #40]	; 0x28
    fba4:	ac3f      	add	r4, sp, #252	; 0xfc
    fba6:	f7ff babb 	b.w	f120 <_svfprintf_r+0x414>
    fbaa:	990c      	ldr	r1, [sp, #48]	; 0x30
    fbac:	aa2c      	add	r2, sp, #176	; 0xb0
    fbae:	4650      	mov	r0, sl
    fbb0:	f002 f916 	bl	11de0 <__ssprint_r>
    fbb4:	2800      	cmp	r0, #0
    fbb6:	f47f ad14 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    fbba:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fbbc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fbc0:	e468      	b.n	f494 <_svfprintf_r+0x788>
    fbc2:	2140      	movs	r1, #64	; 0x40
    fbc4:	4650      	mov	r0, sl
    fbc6:	f7fd fb4f 	bl	d268 <_malloc_r>
    fbca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fbcc:	6018      	str	r0, [r3, #0]
    fbce:	6118      	str	r0, [r3, #16]
    fbd0:	2800      	cmp	r0, #0
    fbd2:	f000 8660 	beq.w	10896 <_svfprintf_r+0x1b8a>
    fbd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fbd8:	2340      	movs	r3, #64	; 0x40
    fbda:	6153      	str	r3, [r2, #20]
    fbdc:	f7ff b8b2 	b.w	ed44 <_svfprintf_r+0x38>
    fbe0:	9b08      	ldr	r3, [sp, #32]
    fbe2:	940d      	str	r4, [sp, #52]	; 0x34
    fbe4:	2b06      	cmp	r3, #6
    fbe6:	4621      	mov	r1, r4
    fbe8:	bf28      	it	cs
    fbea:	2306      	movcs	r3, #6
    fbec:	9408      	str	r4, [sp, #32]
    fbee:	4622      	mov	r2, r4
    fbf0:	9307      	str	r3, [sp, #28]
    fbf2:	4c8d      	ldr	r4, [pc, #564]	; (fe28 <_svfprintf_r+0x111c>)
    fbf4:	970e      	str	r7, [sp, #56]	; 0x38
    fbf6:	930a      	str	r3, [sp, #40]	; 0x28
    fbf8:	9112      	str	r1, [sp, #72]	; 0x48
    fbfa:	9116      	str	r1, [sp, #88]	; 0x58
    fbfc:	9111      	str	r1, [sp, #68]	; 0x44
    fbfe:	f7ff ba69 	b.w	f0d4 <_svfprintf_r+0x3c8>
    fc02:	2f10      	cmp	r7, #16
    fc04:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fc06:	4d89      	ldr	r5, [pc, #548]	; (fe2c <_svfprintf_r+0x1120>)
    fc08:	f340 8245 	ble.w	10096 <_svfprintf_r+0x138a>
    fc0c:	4632      	mov	r2, r6
    fc0e:	4626      	mov	r6, r4
    fc10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    fc12:	e005      	b.n	fc20 <_svfprintf_r+0xf14>
    fc14:	f109 0908 	add.w	r9, r9, #8
    fc18:	3f10      	subs	r7, #16
    fc1a:	2f10      	cmp	r7, #16
    fc1c:	f340 8239 	ble.w	10092 <_svfprintf_r+0x1386>
    fc20:	3301      	adds	r3, #1
    fc22:	3210      	adds	r2, #16
    fc24:	2110      	movs	r1, #16
    fc26:	2b07      	cmp	r3, #7
    fc28:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    fc2c:	f8c9 5000 	str.w	r5, [r9]
    fc30:	f8c9 1004 	str.w	r1, [r9, #4]
    fc34:	ddee      	ble.n	fc14 <_svfprintf_r+0xf08>
    fc36:	aa2c      	add	r2, sp, #176	; 0xb0
    fc38:	4621      	mov	r1, r4
    fc3a:	4650      	mov	r0, sl
    fc3c:	f002 f8d0 	bl	11de0 <__ssprint_r>
    fc40:	2800      	cmp	r0, #0
    fc42:	f47f acce 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    fc46:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    fc4a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fc4e:	e7e3      	b.n	fc18 <_svfprintf_r+0xf0c>
    fc50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fc52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    fc54:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    fc58:	464a      	mov	r2, r9
    fc5a:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    fc5e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    fc62:	18e3      	adds	r3, r4, r3
    fc64:	9308      	str	r3, [sp, #32]
    fc66:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    fc68:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
    fc6c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    fc70:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fc72:	9410      	str	r4, [sp, #64]	; 0x40
    fc74:	4631      	mov	r1, r6
    fc76:	f1b9 0f00 	cmp.w	r9, #0
    fc7a:	d02e      	beq.n	fcda <_svfprintf_r+0xfce>
    fc7c:	bb83      	cbnz	r3, fce0 <_svfprintf_r+0xfd4>
    fc7e:	3f01      	subs	r7, #1
    fc80:	f109 39ff 	add.w	r9, r9, #4294967295
    fc84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    fc86:	e9c2 3b00 	strd	r3, fp, [r2]
    fc8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fc8c:	3301      	adds	r3, #1
    fc8e:	4459      	add	r1, fp
    fc90:	2b07      	cmp	r3, #7
    fc92:	912e      	str	r1, [sp, #184]	; 0xb8
    fc94:	932d      	str	r3, [sp, #180]	; 0xb4
    fc96:	dc5f      	bgt.n	fd58 <_svfprintf_r+0x104c>
    fc98:	3208      	adds	r2, #8
    fc9a:	9b08      	ldr	r3, [sp, #32]
    fc9c:	7838      	ldrb	r0, [r7, #0]
    fc9e:	1b5b      	subs	r3, r3, r5
    fca0:	4283      	cmp	r3, r0
    fca2:	bfa8      	it	ge
    fca4:	4603      	movge	r3, r0
    fca6:	2b00      	cmp	r3, #0
    fca8:	461e      	mov	r6, r3
    fcaa:	dd0b      	ble.n	fcc4 <_svfprintf_r+0xfb8>
    fcac:	982d      	ldr	r0, [sp, #180]	; 0xb4
    fcae:	3001      	adds	r0, #1
    fcb0:	4419      	add	r1, r3
    fcb2:	2807      	cmp	r0, #7
    fcb4:	e9c2 5300 	strd	r5, r3, [r2]
    fcb8:	912e      	str	r1, [sp, #184]	; 0xb8
    fcba:	902d      	str	r0, [sp, #180]	; 0xb4
    fcbc:	f300 8156 	bgt.w	ff6c <_svfprintf_r+0x1260>
    fcc0:	7838      	ldrb	r0, [r7, #0]
    fcc2:	3208      	adds	r2, #8
    fcc4:	2e00      	cmp	r6, #0
    fcc6:	bfac      	ite	ge
    fcc8:	1b84      	subge	r4, r0, r6
    fcca:	4604      	movlt	r4, r0
    fccc:	2c00      	cmp	r4, #0
    fcce:	dc0b      	bgt.n	fce8 <_svfprintf_r+0xfdc>
    fcd0:	4405      	add	r5, r0
    fcd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fcd4:	f1b9 0f00 	cmp.w	r9, #0
    fcd8:	d1d0      	bne.n	fc7c <_svfprintf_r+0xf70>
    fcda:	2b00      	cmp	r3, #0
    fcdc:	f000 83d4 	beq.w	10488 <_svfprintf_r+0x177c>
    fce0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fce2:	3b01      	subs	r3, #1
    fce4:	9312      	str	r3, [sp, #72]	; 0x48
    fce6:	e7cd      	b.n	fc84 <_svfprintf_r+0xf78>
    fce8:	2c10      	cmp	r4, #16
    fcea:	982d      	ldr	r0, [sp, #180]	; 0xb4
    fcec:	dd1d      	ble.n	fd2a <_svfprintf_r+0x101e>
    fcee:	2610      	movs	r6, #16
    fcf0:	e004      	b.n	fcfc <_svfprintf_r+0xff0>
    fcf2:	3c10      	subs	r4, #16
    fcf4:	2c10      	cmp	r4, #16
    fcf6:	f102 0208 	add.w	r2, r2, #8
    fcfa:	dd16      	ble.n	fd2a <_svfprintf_r+0x101e>
    fcfc:	3001      	adds	r0, #1
    fcfe:	4b4b      	ldr	r3, [pc, #300]	; (fe2c <_svfprintf_r+0x1120>)
    fd00:	3110      	adds	r1, #16
    fd02:	2807      	cmp	r0, #7
    fd04:	e9c2 3600 	strd	r3, r6, [r2]
    fd08:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    fd0c:	ddf1      	ble.n	fcf2 <_svfprintf_r+0xfe6>
    fd0e:	aa2c      	add	r2, sp, #176	; 0xb0
    fd10:	4641      	mov	r1, r8
    fd12:	4650      	mov	r0, sl
    fd14:	f002 f864 	bl	11de0 <__ssprint_r>
    fd18:	2800      	cmp	r0, #0
    fd1a:	f47f ac62 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    fd1e:	3c10      	subs	r4, #16
    fd20:	2c10      	cmp	r4, #16
    fd22:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	; 0xb4
    fd26:	aa2f      	add	r2, sp, #188	; 0xbc
    fd28:	dce8      	bgt.n	fcfc <_svfprintf_r+0xff0>
    fd2a:	3001      	adds	r0, #1
    fd2c:	4b3f      	ldr	r3, [pc, #252]	; (fe2c <_svfprintf_r+0x1120>)
    fd2e:	6054      	str	r4, [r2, #4]
    fd30:	4421      	add	r1, r4
    fd32:	2807      	cmp	r0, #7
    fd34:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    fd38:	6013      	str	r3, [r2, #0]
    fd3a:	f300 83fb 	bgt.w	10534 <_svfprintf_r+0x1828>
    fd3e:	7838      	ldrb	r0, [r7, #0]
    fd40:	3208      	adds	r2, #8
    fd42:	4405      	add	r5, r0
    fd44:	e7c5      	b.n	fcd2 <_svfprintf_r+0xfc6>
    fd46:	f01b 0310 	ands.w	r3, fp, #16
    fd4a:	f000 80bc 	beq.w	fec6 <_svfprintf_r+0x11ba>
    fd4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fd50:	f853 2b04 	ldr.w	r2, [r3], #4
    fd54:	930e      	str	r3, [sp, #56]	; 0x38
    fd56:	e702      	b.n	fb5e <_svfprintf_r+0xe52>
    fd58:	aa2c      	add	r2, sp, #176	; 0xb0
    fd5a:	4641      	mov	r1, r8
    fd5c:	4650      	mov	r0, sl
    fd5e:	f002 f83f 	bl	11de0 <__ssprint_r>
    fd62:	2800      	cmp	r0, #0
    fd64:	f47f ac3d 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    fd68:	992e      	ldr	r1, [sp, #184]	; 0xb8
    fd6a:	aa2f      	add	r2, sp, #188	; 0xbc
    fd6c:	e795      	b.n	fc9a <_svfprintf_r+0xf8e>
    fd6e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    fd72:	4b2f      	ldr	r3, [pc, #188]	; (fe30 <_svfprintf_r+0x1124>)
    fd74:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    fd78:	f8cd 801c 	str.w	r8, [sp, #28]
    fd7c:	f405 6780 	and.w	r7, r5, #1024	; 0x400
    fd80:	f04f 0c00 	mov.w	ip, #0
    fd84:	ac58      	add	r4, sp, #352	; 0x160
    fd86:	f04f 3bcc 	mov.w	fp, #3435973836	; 0xcccccccc
    fd8a:	950a      	str	r5, [sp, #40]	; 0x28
    fd8c:	e005      	b.n	fd9a <_svfprintf_r+0x108e>
    fd8e:	2a0a      	cmp	r2, #10
    fd90:	f171 0100 	sbcs.w	r1, r1, #0
    fd94:	d334      	bcc.n	fe00 <_svfprintf_r+0x10f4>
    fd96:	4642      	mov	r2, r8
    fd98:	4631      	mov	r1, r6
    fd9a:	1850      	adds	r0, r2, r1
    fd9c:	f140 0000 	adc.w	r0, r0, #0
    fda0:	fba3 5600 	umull	r5, r6, r3, r0
    fda4:	f026 0503 	bic.w	r5, r6, #3
    fda8:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    fdac:	1b40      	subs	r0, r0, r5
    fdae:	1a15      	subs	r5, r2, r0
    fdb0:	f161 0e00 	sbc.w	lr, r1, #0
    fdb4:	fb0b f605 	mul.w	r6, fp, r5
    fdb8:	fb03 660e 	mla	r6, r3, lr, r6
    fdbc:	fba5 8503 	umull	r8, r5, r5, r3
    fdc0:	442e      	add	r6, r5
    fdc2:	f008 0e01 	and.w	lr, r8, #1
    fdc6:	2505      	movs	r5, #5
    fdc8:	fbae 5e05 	umull	r5, lr, lr, r5
    fdcc:	182d      	adds	r5, r5, r0
    fdce:	ea4f 0858 	mov.w	r8, r8, lsr #1
    fdd2:	3530      	adds	r5, #48	; 0x30
    fdd4:	f804 5c01 	strb.w	r5, [r4, #-1]
    fdd8:	ea48 78c6 	orr.w	r8, r8, r6, lsl #31
    fddc:	f10c 0c01 	add.w	ip, ip, #1
    fde0:	3c01      	subs	r4, #1
    fde2:	0876      	lsrs	r6, r6, #1
    fde4:	2f00      	cmp	r7, #0
    fde6:	d0d2      	beq.n	fd8e <_svfprintf_r+0x1082>
    fde8:	f899 0000 	ldrb.w	r0, [r9]
    fdec:	4584      	cmp	ip, r0
    fdee:	d1ce      	bne.n	fd8e <_svfprintf_r+0x1082>
    fdf0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fdf4:	d0cb      	beq.n	fd8e <_svfprintf_r+0x1082>
    fdf6:	2a0a      	cmp	r2, #10
    fdf8:	f171 0100 	sbcs.w	r1, r1, #0
    fdfc:	f080 8198 	bcs.w	10130 <_svfprintf_r+0x1424>
    fe00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    fe02:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    fe06:	ab58      	add	r3, sp, #352	; 0x160
    fe08:	1b1b      	subs	r3, r3, r4
    fe0a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    fe0e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    fe12:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
    fe16:	46ab      	mov	fp, r5
    fe18:	930a      	str	r3, [sp, #40]	; 0x28
    fe1a:	f7ff bae1 	b.w	f3e0 <_svfprintf_r+0x6d4>
    fe1e:	bf00      	nop
    fe20:	0001583c 	.word	0x0001583c
    fe24:	00015850 	.word	0x00015850
    fe28:	00015864 	.word	0x00015864
    fe2c:	0001587c 	.word	0x0001587c
    fe30:	cccccccd 	.word	0xcccccccd
    fe34:	2301      	movs	r3, #1
    fe36:	f8c9 3004 	str.w	r3, [r9, #4]
    fe3a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fe3c:	4aba      	ldr	r2, [pc, #744]	; (10128 <_svfprintf_r+0x141c>)
    fe3e:	f8c9 2000 	str.w	r2, [r9]
    fe42:	3301      	adds	r3, #1
    fe44:	3601      	adds	r6, #1
    fe46:	2b07      	cmp	r3, #7
    fe48:	962e      	str	r6, [sp, #184]	; 0xb8
    fe4a:	932d      	str	r3, [sp, #180]	; 0xb4
    fe4c:	f300 818c 	bgt.w	10168 <_svfprintf_r+0x145c>
    fe50:	f109 0908 	add.w	r9, r9, #8
    fe54:	2900      	cmp	r1, #0
    fe56:	f040 80be 	bne.w	ffd6 <_svfprintf_r+0x12ca>
    fe5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    fe5c:	f00b 0301 	and.w	r3, fp, #1
    fe60:	4313      	orrs	r3, r2
    fe62:	f43f a8d8 	beq.w	f016 <_svfprintf_r+0x30a>
    fe66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    fe68:	9919      	ldr	r1, [sp, #100]	; 0x64
    fe6a:	199a      	adds	r2, r3, r6
    fe6c:	e9c9 1300 	strd	r1, r3, [r9]
    fe70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fe72:	922e      	str	r2, [sp, #184]	; 0xb8
    fe74:	3301      	adds	r3, #1
    fe76:	2b07      	cmp	r3, #7
    fe78:	932d      	str	r3, [sp, #180]	; 0xb4
    fe7a:	f300 826e 	bgt.w	1035a <_svfprintf_r+0x164e>
    fe7e:	f109 0908 	add.w	r9, r9, #8
    fe82:	9913      	ldr	r1, [sp, #76]	; 0x4c
    fe84:	f8c9 4000 	str.w	r4, [r9]
    fe88:	3301      	adds	r3, #1
    fe8a:	188e      	adds	r6, r1, r2
    fe8c:	2b07      	cmp	r3, #7
    fe8e:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    fe92:	f8c9 1004 	str.w	r1, [r9, #4]
    fe96:	f77f a8bc 	ble.w	f012 <_svfprintf_r+0x306>
    fe9a:	f7ff bbf1 	b.w	f680 <_svfprintf_r+0x974>
    fe9e:	990c      	ldr	r1, [sp, #48]	; 0x30
    fea0:	931e      	str	r3, [sp, #120]	; 0x78
    fea2:	aa2c      	add	r2, sp, #176	; 0xb0
    fea4:	4650      	mov	r0, sl
    fea6:	f001 ff9b 	bl	11de0 <__ssprint_r>
    feaa:	2800      	cmp	r0, #0
    feac:	f47f ab99 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    feb0:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    feb4:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    feb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    feb8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    febc:	f7ff b86a 	b.w	ef94 <_svfprintf_r+0x288>
    fec0:	46c2      	mov	sl, r8
    fec2:	f7ff bb8e 	b.w	f5e2 <_svfprintf_r+0x8d6>
    fec6:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    feca:	f000 80b8 	beq.w	1003e <_svfprintf_r+0x1332>
    fece:	980e      	ldr	r0, [sp, #56]	; 0x38
    fed0:	f850 2b04 	ldr.w	r2, [r0], #4
    fed4:	900e      	str	r0, [sp, #56]	; 0x38
    fed6:	4619      	mov	r1, r3
    fed8:	b292      	uxth	r2, r2
    feda:	e640      	b.n	fb5e <_svfprintf_r+0xe52>
    fedc:	990c      	ldr	r1, [sp, #48]	; 0x30
    fede:	aa2c      	add	r2, sp, #176	; 0xb0
    fee0:	4650      	mov	r0, sl
    fee2:	f001 ff7d 	bl	11de0 <__ssprint_r>
    fee6:	2800      	cmp	r0, #0
    fee8:	f47f ab7b 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    feec:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    feee:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fef2:	f7ff babc 	b.w	f46e <_svfprintf_r+0x762>
    fef6:	ae2a      	add	r6, sp, #168	; 0xa8
    fef8:	2208      	movs	r2, #8
    fefa:	2100      	movs	r1, #0
    fefc:	4630      	mov	r0, r6
    fefe:	9425      	str	r4, [sp, #148]	; 0x94
    ff00:	f7fe f820 	bl	df44 <memset>
    ff04:	9b08      	ldr	r3, [sp, #32]
    ff06:	1c5a      	adds	r2, r3, #1
    ff08:	f000 80d4 	beq.w	100b4 <_svfprintf_r+0x13a8>
    ff0c:	2500      	movs	r5, #0
    ff0e:	f8cd 801c 	str.w	r8, [sp, #28]
    ff12:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
    ff16:	46a8      	mov	r8, r5
    ff18:	469b      	mov	fp, r3
    ff1a:	e00c      	b.n	ff36 <_svfprintf_r+0x122a>
    ff1c:	a93f      	add	r1, sp, #252	; 0xfc
    ff1e:	4650      	mov	r0, sl
    ff20:	f001 ff16 	bl	11d50 <_wcrtomb_r>
    ff24:	1c43      	adds	r3, r0, #1
    ff26:	4440      	add	r0, r8
    ff28:	f000 83b8 	beq.w	1069c <_svfprintf_r+0x1990>
    ff2c:	4558      	cmp	r0, fp
    ff2e:	dc08      	bgt.n	ff42 <_svfprintf_r+0x1236>
    ff30:	f000 8435 	beq.w	1079e <_svfprintf_r+0x1a92>
    ff34:	4680      	mov	r8, r0
    ff36:	9a25      	ldr	r2, [sp, #148]	; 0x94
    ff38:	5952      	ldr	r2, [r2, r5]
    ff3a:	4633      	mov	r3, r6
    ff3c:	3504      	adds	r5, #4
    ff3e:	2a00      	cmp	r2, #0
    ff40:	d1ec      	bne.n	ff1c <_svfprintf_r+0x1210>
    ff42:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
    ff46:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    ff4a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    ff4e:	e0be      	b.n	100ce <_svfprintf_r+0x13c2>
    ff50:	4616      	mov	r6, r2
    ff52:	3301      	adds	r3, #1
    ff54:	4426      	add	r6, r4
    ff56:	2b07      	cmp	r3, #7
    ff58:	f8c9 5000 	str.w	r5, [r9]
    ff5c:	f8c9 4004 	str.w	r4, [r9, #4]
    ff60:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    ff64:	f77f a855 	ble.w	f012 <_svfprintf_r+0x306>
    ff68:	f7ff bb8a 	b.w	f680 <_svfprintf_r+0x974>
    ff6c:	aa2c      	add	r2, sp, #176	; 0xb0
    ff6e:	4641      	mov	r1, r8
    ff70:	4650      	mov	r0, sl
    ff72:	f001 ff35 	bl	11de0 <__ssprint_r>
    ff76:	2800      	cmp	r0, #0
    ff78:	f47f ab33 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    ff7c:	7838      	ldrb	r0, [r7, #0]
    ff7e:	992e      	ldr	r1, [sp, #184]	; 0xb8
    ff80:	aa2f      	add	r2, sp, #188	; 0xbc
    ff82:	e69f      	b.n	fcc4 <_svfprintf_r+0xfb8>
    ff84:	990c      	ldr	r1, [sp, #48]	; 0x30
    ff86:	aa2c      	add	r2, sp, #176	; 0xb0
    ff88:	4650      	mov	r0, sl
    ff8a:	f001 ff29 	bl	11de0 <__ssprint_r>
    ff8e:	2800      	cmp	r0, #0
    ff90:	f47f ab27 	bne.w	f5e2 <_svfprintf_r+0x8d6>
    ff94:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ff96:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ff9a:	f7ff b823 	b.w	efe4 <_svfprintf_r+0x2d8>
    ff9e:	2b01      	cmp	r3, #1
    ffa0:	465d      	mov	r5, fp
    ffa2:	f47f aa09 	bne.w	f3b8 <_svfprintf_r+0x6ac>
    ffa6:	f7ff bbb9 	b.w	f71c <_svfprintf_r+0xa10>
    ffaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ffac:	9909      	ldr	r1, [sp, #36]	; 0x24
    ffae:	f853 2b04 	ldr.w	r2, [r3], #4
    ffb2:	4644      	mov	r4, r8
    ffb4:	6011      	str	r1, [r2, #0]
    ffb6:	930e      	str	r3, [sp, #56]	; 0x38
    ffb8:	f7fe bed6 	b.w	ed68 <_svfprintf_r+0x5c>
    ffbc:	4616      	mov	r6, r2
    ffbe:	3701      	adds	r7, #1
    ffc0:	4426      	add	r6, r4
    ffc2:	2f07      	cmp	r7, #7
    ffc4:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    ffc8:	f8c9 5000 	str.w	r5, [r9]
    ffcc:	f8c9 4004 	str.w	r4, [r9, #4]
    ffd0:	f77f ab47 	ble.w	f662 <_svfprintf_r+0x956>
    ffd4:	e491      	b.n	f8fa <_svfprintf_r+0xbee>
    ffd6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ffd8:	9819      	ldr	r0, [sp, #100]	; 0x64
    ffda:	199a      	adds	r2, r3, r6
    ffdc:	e9c9 0300 	strd	r0, r3, [r9]
    ffe0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ffe2:	922e      	str	r2, [sp, #184]	; 0xb8
    ffe4:	3301      	adds	r3, #1
    ffe6:	2b07      	cmp	r3, #7
    ffe8:	932d      	str	r3, [sp, #180]	; 0xb4
    ffea:	f300 81b6 	bgt.w	1035a <_svfprintf_r+0x164e>
    ffee:	f109 0908 	add.w	r9, r9, #8
    fff2:	2900      	cmp	r1, #0
    fff4:	f6bf af45 	bge.w	fe82 <_svfprintf_r+0x1176>
    fff8:	424f      	negs	r7, r1
    fffa:	3110      	adds	r1, #16
    fffc:	4d4b      	ldr	r5, [pc, #300]	; (1012c <_svfprintf_r+0x1420>)
    fffe:	f280 8388 	bge.w	10712 <_svfprintf_r+0x1a06>
   10002:	4649      	mov	r1, r9
   10004:	2610      	movs	r6, #16
   10006:	46a1      	mov	r9, r4
   10008:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1000a:	e004      	b.n	10016 <_svfprintf_r+0x130a>
   1000c:	3108      	adds	r1, #8
   1000e:	3f10      	subs	r7, #16
   10010:	2f10      	cmp	r7, #16
   10012:	f340 837c 	ble.w	1070e <_svfprintf_r+0x1a02>
   10016:	3301      	adds	r3, #1
   10018:	3210      	adds	r2, #16
   1001a:	2b07      	cmp	r3, #7
   1001c:	e9c1 5600 	strd	r5, r6, [r1]
   10020:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   10024:	ddf2      	ble.n	1000c <_svfprintf_r+0x1300>
   10026:	aa2c      	add	r2, sp, #176	; 0xb0
   10028:	4621      	mov	r1, r4
   1002a:	4650      	mov	r0, sl
   1002c:	f001 fed8 	bl	11de0 <__ssprint_r>
   10030:	2800      	cmp	r0, #0
   10032:	f47f aad6 	bne.w	f5e2 <_svfprintf_r+0x8d6>
   10036:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   1003a:	a92f      	add	r1, sp, #188	; 0xbc
   1003c:	e7e7      	b.n	1000e <_svfprintf_r+0x1302>
   1003e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10040:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
   10044:	bf1a      	itte	ne
   10046:	4611      	movne	r1, r2
   10048:	f853 2b04 	ldrne.w	r2, [r3], #4
   1004c:	f853 2b04 	ldreq.w	r2, [r3], #4
   10050:	930e      	str	r3, [sp, #56]	; 0x38
   10052:	bf18      	it	ne
   10054:	b2d2      	uxtbne	r2, r2
   10056:	e582      	b.n	fb5e <_svfprintf_r+0xe52>
   10058:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1005a:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
   1005e:	bf1a      	itte	ne
   10060:	4611      	movne	r1, r2
   10062:	f853 2b04 	ldrne.w	r2, [r3], #4
   10066:	f853 2b04 	ldreq.w	r2, [r3], #4
   1006a:	930e      	str	r3, [sp, #56]	; 0x38
   1006c:	bf18      	it	ne
   1006e:	b2d2      	uxtbne	r2, r2
   10070:	f7ff b953 	b.w	f31a <_svfprintf_r+0x60e>
   10074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10076:	f415 7100 	ands.w	r1, r5, #512	; 0x200
   1007a:	bf1a      	itte	ne
   1007c:	4611      	movne	r1, r2
   1007e:	f853 2b04 	ldrne.w	r2, [r3], #4
   10082:	f853 2b04 	ldreq.w	r2, [r3], #4
   10086:	930e      	str	r3, [sp, #56]	; 0x38
   10088:	bf18      	it	ne
   1008a:	b2d2      	uxtbne	r2, r2
   1008c:	2301      	movs	r3, #1
   1008e:	f7ff b8e1 	b.w	f254 <_svfprintf_r+0x548>
   10092:	4634      	mov	r4, r6
   10094:	4616      	mov	r6, r2
   10096:	3301      	adds	r3, #1
   10098:	443e      	add	r6, r7
   1009a:	2b07      	cmp	r3, #7
   1009c:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   100a0:	f8c9 5000 	str.w	r5, [r9]
   100a4:	f8c9 7004 	str.w	r7, [r9, #4]
   100a8:	f300 814a 	bgt.w	10340 <_svfprintf_r+0x1634>
   100ac:	f109 0908 	add.w	r9, r9, #8
   100b0:	f7ff bbb3 	b.w	f81a <_svfprintf_r+0xb0e>
   100b4:	2300      	movs	r3, #0
   100b6:	4619      	mov	r1, r3
   100b8:	9600      	str	r6, [sp, #0]
   100ba:	aa25      	add	r2, sp, #148	; 0x94
   100bc:	4650      	mov	r0, sl
   100be:	f001 fe6d 	bl	11d9c <_wcsrtombs_r>
   100c2:	4603      	mov	r3, r0
   100c4:	3301      	adds	r3, #1
   100c6:	900a      	str	r0, [sp, #40]	; 0x28
   100c8:	f000 82e8 	beq.w	1069c <_svfprintf_r+0x1990>
   100cc:	9425      	str	r4, [sp, #148]	; 0x94
   100ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   100d0:	2b00      	cmp	r3, #0
   100d2:	d03d      	beq.n	10150 <_svfprintf_r+0x1444>
   100d4:	2b63      	cmp	r3, #99	; 0x63
   100d6:	f300 8129 	bgt.w	1032c <_svfprintf_r+0x1620>
   100da:	2300      	movs	r3, #0
   100dc:	930d      	str	r3, [sp, #52]	; 0x34
   100de:	ac3f      	add	r4, sp, #252	; 0xfc
   100e0:	2208      	movs	r2, #8
   100e2:	2100      	movs	r1, #0
   100e4:	4630      	mov	r0, r6
   100e6:	f7fd ff2d 	bl	df44 <memset>
   100ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   100ec:	9600      	str	r6, [sp, #0]
   100ee:	462b      	mov	r3, r5
   100f0:	aa25      	add	r2, sp, #148	; 0x94
   100f2:	4621      	mov	r1, r4
   100f4:	4650      	mov	r0, sl
   100f6:	f001 fe51 	bl	11d9c <_wcsrtombs_r>
   100fa:	4285      	cmp	r5, r0
   100fc:	f040 83c4 	bne.w	10888 <_svfprintf_r+0x1b7c>
   10100:	990a      	ldr	r1, [sp, #40]	; 0x28
   10102:	970e      	str	r7, [sp, #56]	; 0x38
   10104:	2300      	movs	r3, #0
   10106:	5463      	strb	r3, [r4, r1]
   10108:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1010c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10110:	9308      	str	r3, [sp, #32]
   10112:	9107      	str	r1, [sp, #28]
   10114:	9312      	str	r3, [sp, #72]	; 0x48
   10116:	9316      	str	r3, [sp, #88]	; 0x58
   10118:	9311      	str	r3, [sp, #68]	; 0x44
   1011a:	f7fe bfdb 	b.w	f0d4 <_svfprintf_r+0x3c8>
   1011e:	222d      	movs	r2, #45	; 0x2d
   10120:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   10124:	f7fe bfc5 	b.w	f0b2 <_svfprintf_r+0x3a6>
   10128:	000141ec 	.word	0x000141ec
   1012c:	0001587c 	.word	0x0001587c
   10130:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10132:	991c      	ldr	r1, [sp, #112]	; 0x70
   10134:	1ae4      	subs	r4, r4, r3
   10136:	461a      	mov	r2, r3
   10138:	4620      	mov	r0, r4
   1013a:	f7fd ff55 	bl	dfe8 <strncpy>
   1013e:	f899 2001 	ldrb.w	r2, [r9, #1]
   10142:	4ba5      	ldr	r3, [pc, #660]	; (103d8 <_svfprintf_r+0x16cc>)
   10144:	b10a      	cbz	r2, 1014a <_svfprintf_r+0x143e>
   10146:	f109 0901 	add.w	r9, r9, #1
   1014a:	f04f 0c00 	mov.w	ip, #0
   1014e:	e622      	b.n	fd96 <_svfprintf_r+0x108a>
   10150:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10152:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10156:	970e      	str	r7, [sp, #56]	; 0x38
   10158:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1015c:	9312      	str	r3, [sp, #72]	; 0x48
   1015e:	9316      	str	r3, [sp, #88]	; 0x58
   10160:	9311      	str	r3, [sp, #68]	; 0x44
   10162:	930d      	str	r3, [sp, #52]	; 0x34
   10164:	f7fe bfb6 	b.w	f0d4 <_svfprintf_r+0x3c8>
   10168:	990c      	ldr	r1, [sp, #48]	; 0x30
   1016a:	aa2c      	add	r2, sp, #176	; 0xb0
   1016c:	4650      	mov	r0, sl
   1016e:	f001 fe37 	bl	11de0 <__ssprint_r>
   10172:	2800      	cmp	r0, #0
   10174:	f47f aa35 	bne.w	f5e2 <_svfprintf_r+0x8d6>
   10178:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1017a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   1017c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10180:	e668      	b.n	fe54 <_svfprintf_r+0x1148>
   10182:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10184:	990a      	ldr	r1, [sp, #40]	; 0x28
   10186:	18a5      	adds	r5, r4, r2
   10188:	1a6d      	subs	r5, r5, r1
   1018a:	1ad4      	subs	r4, r2, r3
   1018c:	42a5      	cmp	r5, r4
   1018e:	bfa8      	it	ge
   10190:	4625      	movge	r5, r4
   10192:	f7ff bb77 	b.w	f884 <_svfprintf_r+0xb78>
   10196:	f913 2b04 	ldrsb.w	r2, [r3], #4
   1019a:	930e      	str	r3, [sp, #56]	; 0x38
   1019c:	17d1      	asrs	r1, r2, #31
   1019e:	460b      	mov	r3, r1
   101a0:	f7ff b807 	b.w	f1b2 <_svfprintf_r+0x4a6>
   101a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   101a6:	9909      	ldr	r1, [sp, #36]	; 0x24
   101a8:	f853 2b04 	ldr.w	r2, [r3], #4
   101ac:	930e      	str	r3, [sp, #56]	; 0x38
   101ae:	8011      	strh	r1, [r2, #0]
   101b0:	4644      	mov	r4, r8
   101b2:	f7fe bdd9 	b.w	ed68 <_svfprintf_r+0x5c>
   101b6:	9b08      	ldr	r3, [sp, #32]
   101b8:	930a      	str	r3, [sp, #40]	; 0x28
   101ba:	2302      	movs	r3, #2
   101bc:	a92a      	add	r1, sp, #168	; 0xa8
   101be:	9104      	str	r1, [sp, #16]
   101c0:	a925      	add	r1, sp, #148	; 0x94
   101c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   101c4:	9103      	str	r1, [sp, #12]
   101c6:	a923      	add	r1, sp, #140	; 0x8c
   101c8:	9300      	str	r3, [sp, #0]
   101ca:	463a      	mov	r2, r7
   101cc:	4633      	mov	r3, r6
   101ce:	9501      	str	r5, [sp, #4]
   101d0:	9102      	str	r1, [sp, #8]
   101d2:	4650      	mov	r0, sl
   101d4:	f000 fe60 	bl	10e98 <_dtoa_r>
   101d8:	9b07      	ldr	r3, [sp, #28]
   101da:	2b47      	cmp	r3, #71	; 0x47
   101dc:	4604      	mov	r4, r0
   101de:	f000 81a3 	beq.w	10528 <_svfprintf_r+0x181c>
   101e2:	2b46      	cmp	r3, #70	; 0x46
   101e4:	4405      	add	r5, r0
   101e6:	d105      	bne.n	101f4 <_svfprintf_r+0x14e8>
   101e8:	7803      	ldrb	r3, [r0, #0]
   101ea:	2b30      	cmp	r3, #48	; 0x30
   101ec:	f000 82b8 	beq.w	10760 <_svfprintf_r+0x1a54>
   101f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   101f2:	441d      	add	r5, r3
   101f4:	4638      	mov	r0, r7
   101f6:	4631      	mov	r1, r6
   101f8:	2200      	movs	r2, #0
   101fa:	2300      	movs	r3, #0
   101fc:	f7fc fcaa 	bl	cb54 <__aeabi_dcmpeq>
   10200:	2800      	cmp	r0, #0
   10202:	f000 8166 	beq.w	104d2 <_svfprintf_r+0x17c6>
   10206:	462b      	mov	r3, r5
   10208:	1b1b      	subs	r3, r3, r4
   1020a:	9313      	str	r3, [sp, #76]	; 0x4c
   1020c:	9b07      	ldr	r3, [sp, #28]
   1020e:	2b47      	cmp	r3, #71	; 0x47
   10210:	f000 814a 	beq.w	104a8 <_svfprintf_r+0x179c>
   10214:	9b07      	ldr	r3, [sp, #28]
   10216:	2b46      	cmp	r3, #70	; 0x46
   10218:	f000 8200 	beq.w	1061c <_svfprintf_r+0x1910>
   1021c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1021e:	9311      	str	r3, [sp, #68]	; 0x44
   10220:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10222:	9a07      	ldr	r2, [sp, #28]
   10224:	3b01      	subs	r3, #1
   10226:	2a41      	cmp	r2, #65	; 0x41
   10228:	9323      	str	r3, [sp, #140]	; 0x8c
   1022a:	f000 8223 	beq.w	10674 <_svfprintf_r+0x1968>
   1022e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   10232:	2100      	movs	r1, #0
   10234:	2b00      	cmp	r3, #0
   10236:	bfb8      	it	lt
   10238:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
   1023a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1023e:	bfba      	itte	lt
   10240:	f1c3 0301 	rsblt	r3, r3, #1
   10244:	222d      	movlt	r2, #45	; 0x2d
   10246:	222b      	movge	r2, #43	; 0x2b
   10248:	2b09      	cmp	r3, #9
   1024a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   1024e:	f340 824f 	ble.w	106f0 <_svfprintf_r+0x19e4>
   10252:	f10d 05af 	add.w	r5, sp, #175	; 0xaf
   10256:	4e61      	ldr	r6, [pc, #388]	; (103dc <_svfprintf_r+0x16d0>)
   10258:	462a      	mov	r2, r5
   1025a:	4610      	mov	r0, r2
   1025c:	fb86 2103 	smull	r2, r1, r6, r3
   10260:	17da      	asrs	r2, r3, #31
   10262:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   10266:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1026a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   1026e:	3130      	adds	r1, #48	; 0x30
   10270:	f800 1c01 	strb.w	r1, [r0, #-1]
   10274:	4619      	mov	r1, r3
   10276:	2963      	cmp	r1, #99	; 0x63
   10278:	4613      	mov	r3, r2
   1027a:	f100 32ff 	add.w	r2, r0, #4294967295
   1027e:	dcec      	bgt.n	1025a <_svfprintf_r+0x154e>
   10280:	3330      	adds	r3, #48	; 0x30
   10282:	b2d9      	uxtb	r1, r3
   10284:	1e83      	subs	r3, r0, #2
   10286:	429d      	cmp	r5, r3
   10288:	f802 1c01 	strb.w	r1, [r2, #-1]
   1028c:	f240 82e9 	bls.w	10862 <_svfprintf_r+0x1b56>
   10290:	4613      	mov	r3, r2
   10292:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   10296:	e001      	b.n	1029c <_svfprintf_r+0x1590>
   10298:	f813 1b01 	ldrb.w	r1, [r3], #1
   1029c:	f802 1b01 	strb.w	r1, [r2], #1
   102a0:	429d      	cmp	r5, r3
   102a2:	d1f9      	bne.n	10298 <_svfprintf_r+0x158c>
   102a4:	f10d 03b1 	add.w	r3, sp, #177	; 0xb1
   102a8:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   102ac:	1a1b      	subs	r3, r3, r0
   102ae:	4413      	add	r3, r2
   102b0:	aa26      	add	r2, sp, #152	; 0x98
   102b2:	1a9b      	subs	r3, r3, r2
   102b4:	931b      	str	r3, [sp, #108]	; 0x6c
   102b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   102b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   102ba:	2b01      	cmp	r3, #1
   102bc:	441a      	add	r2, r3
   102be:	920a      	str	r2, [sp, #40]	; 0x28
   102c0:	f340 8249 	ble.w	10756 <_svfprintf_r+0x1a4a>
   102c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   102c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   102c8:	4413      	add	r3, r2
   102ca:	930a      	str	r3, [sp, #40]	; 0x28
   102cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   102ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   102d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   102d4:	f443 7b80 	orr.w	fp, r3, #256	; 0x100
   102d8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   102dc:	2300      	movs	r3, #0
   102de:	9312      	str	r3, [sp, #72]	; 0x48
   102e0:	9207      	str	r2, [sp, #28]
   102e2:	9316      	str	r3, [sp, #88]	; 0x58
   102e4:	9311      	str	r3, [sp, #68]	; 0x44
   102e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   102e8:	2b00      	cmp	r3, #0
   102ea:	f040 80eb 	bne.w	104c4 <_svfprintf_r+0x17b8>
   102ee:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   102f2:	9308      	str	r3, [sp, #32]
   102f4:	f7fe beee 	b.w	f0d4 <_svfprintf_r+0x3c8>
   102f8:	4620      	mov	r0, r4
   102fa:	970e      	str	r7, [sp, #56]	; 0x38
   102fc:	f7fd ff60 	bl	e1c0 <strlen>
   10300:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10302:	9308      	str	r3, [sp, #32]
   10304:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   10308:	9312      	str	r3, [sp, #72]	; 0x48
   1030a:	9316      	str	r3, [sp, #88]	; 0x58
   1030c:	930d      	str	r3, [sp, #52]	; 0x34
   1030e:	2373      	movs	r3, #115	; 0x73
   10310:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10314:	900a      	str	r0, [sp, #40]	; 0x28
   10316:	9107      	str	r1, [sp, #28]
   10318:	9310      	str	r3, [sp, #64]	; 0x40
   1031a:	f7fe bedb 	b.w	f0d4 <_svfprintf_r+0x3c8>
   1031e:	990c      	ldr	r1, [sp, #48]	; 0x30
   10320:	aa2c      	add	r2, sp, #176	; 0xb0
   10322:	4650      	mov	r0, sl
   10324:	f001 fd5c 	bl	11de0 <__ssprint_r>
   10328:	f7fe bdf8 	b.w	ef1c <_svfprintf_r+0x210>
   1032c:	1c59      	adds	r1, r3, #1
   1032e:	4650      	mov	r0, sl
   10330:	f7fc ff9a 	bl	d268 <_malloc_r>
   10334:	4604      	mov	r4, r0
   10336:	2800      	cmp	r0, #0
   10338:	f000 81b0 	beq.w	1069c <_svfprintf_r+0x1990>
   1033c:	900d      	str	r0, [sp, #52]	; 0x34
   1033e:	e6cf      	b.n	100e0 <_svfprintf_r+0x13d4>
   10340:	990c      	ldr	r1, [sp, #48]	; 0x30
   10342:	aa2c      	add	r2, sp, #176	; 0xb0
   10344:	4650      	mov	r0, sl
   10346:	f001 fd4b 	bl	11de0 <__ssprint_r>
   1034a:	2800      	cmp	r0, #0
   1034c:	f47f a949 	bne.w	f5e2 <_svfprintf_r+0x8d6>
   10350:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10352:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10356:	f7ff ba60 	b.w	f81a <_svfprintf_r+0xb0e>
   1035a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1035c:	aa2c      	add	r2, sp, #176	; 0xb0
   1035e:	4650      	mov	r0, sl
   10360:	f001 fd3e 	bl	11de0 <__ssprint_r>
   10364:	2800      	cmp	r0, #0
   10366:	f47f a93c 	bne.w	f5e2 <_svfprintf_r+0x8d6>
   1036a:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   1036e:	9923      	ldr	r1, [sp, #140]	; 0x8c
   10370:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10374:	e63d      	b.n	fff2 <_svfprintf_r+0x12e6>
   10376:	2306      	movs	r3, #6
   10378:	9308      	str	r3, [sp, #32]
   1037a:	f7ff bba0 	b.w	fabe <_svfprintf_r+0xdb2>
   1037e:	9b08      	ldr	r3, [sp, #32]
   10380:	3301      	adds	r3, #1
   10382:	930a      	str	r3, [sp, #40]	; 0x28
   10384:	2302      	movs	r3, #2
   10386:	e719      	b.n	101bc <_svfprintf_r+0x14b0>
   10388:	9b08      	ldr	r3, [sp, #32]
   1038a:	930a      	str	r3, [sp, #40]	; 0x28
   1038c:	2303      	movs	r3, #3
   1038e:	e715      	b.n	101bc <_svfprintf_r+0x14b0>
   10390:	4638      	mov	r0, r7
   10392:	4631      	mov	r1, r6
   10394:	aa23      	add	r2, sp, #140	; 0x8c
   10396:	f000 fc13 	bl	10bc0 <frexp>
   1039a:	2200      	movs	r2, #0
   1039c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   103a0:	f003 f9ba 	bl	13718 <__aeabi_dmul>
   103a4:	2200      	movs	r2, #0
   103a6:	2300      	movs	r3, #0
   103a8:	4606      	mov	r6, r0
   103aa:	460f      	mov	r7, r1
   103ac:	f7fc fbd2 	bl	cb54 <__aeabi_dcmpeq>
   103b0:	b108      	cbz	r0, 103b6 <_svfprintf_r+0x16aa>
   103b2:	2301      	movs	r3, #1
   103b4:	9323      	str	r3, [sp, #140]	; 0x8c
   103b6:	4b0a      	ldr	r3, [pc, #40]	; (103e0 <_svfprintf_r+0x16d4>)
   103b8:	930a      	str	r3, [sp, #40]	; 0x28
   103ba:	9b08      	ldr	r3, [sp, #32]
   103bc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   103c0:	3b01      	subs	r3, #1
   103c2:	e9cd 8b11 	strd	r8, fp, [sp, #68]	; 0x44
   103c6:	4625      	mov	r5, r4
   103c8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   103cc:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
   103d0:	4698      	mov	r8, r3
   103d2:	941f      	str	r4, [sp, #124]	; 0x7c
   103d4:	e00d      	b.n	103f2 <_svfprintf_r+0x16e6>
   103d6:	bf00      	nop
   103d8:	cccccccd 	.word	0xcccccccd
   103dc:	66666667 	.word	0x66666667
   103e0:	00015850 	.word	0x00015850
   103e4:	2200      	movs	r2, #0
   103e6:	2300      	movs	r3, #0
   103e8:	f108 38ff 	add.w	r8, r8, #4294967295
   103ec:	f7fc fbb2 	bl	cb54 <__aeabi_dcmpeq>
   103f0:	b9e8      	cbnz	r0, 1042e <_svfprintf_r+0x1722>
   103f2:	4bae      	ldr	r3, [pc, #696]	; (106ac <_svfprintf_r+0x19a0>)
   103f4:	2200      	movs	r2, #0
   103f6:	4630      	mov	r0, r6
   103f8:	4639      	mov	r1, r7
   103fa:	f003 f98d 	bl	13718 <__aeabi_dmul>
   103fe:	460f      	mov	r7, r1
   10400:	4606      	mov	r6, r0
   10402:	f003 fb9b 	bl	13b3c <__aeabi_d2iz>
   10406:	4604      	mov	r4, r0
   10408:	f7fc fae4 	bl	c9d4 <__aeabi_i2d>
   1040c:	460b      	mov	r3, r1
   1040e:	4602      	mov	r2, r0
   10410:	4639      	mov	r1, r7
   10412:	4630      	mov	r0, r6
   10414:	f7fc f990 	bl	c738 <__aeabi_dsub>
   10418:	f81b 3004 	ldrb.w	r3, [fp, r4]
   1041c:	f1b8 3fff 	cmp.w	r8, #4294967295
   10420:	46aa      	mov	sl, r5
   10422:	46c1      	mov	r9, r8
   10424:	f805 3b01 	strb.w	r3, [r5], #1
   10428:	4606      	mov	r6, r0
   1042a:	460f      	mov	r7, r1
   1042c:	d1da      	bne.n	103e4 <_svfprintf_r+0x16d8>
   1042e:	4ba0      	ldr	r3, [pc, #640]	; (106b0 <_svfprintf_r+0x19a4>)
   10430:	2200      	movs	r2, #0
   10432:	4630      	mov	r0, r6
   10434:	4639      	mov	r1, r7
   10436:	e9dd 8b11 	ldrd	r8, fp, [sp, #68]	; 0x44
   1043a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
   1043e:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
   10442:	e9cd a412 	strd	sl, r4, [sp, #72]	; 0x48
   10446:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   1044a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   1044c:	f7fc fbaa 	bl	cba4 <__aeabi_dcmpgt>
   10450:	2800      	cmp	r0, #0
   10452:	f040 8131 	bne.w	106b8 <_svfprintf_r+0x19ac>
   10456:	4b96      	ldr	r3, [pc, #600]	; (106b0 <_svfprintf_r+0x19a4>)
   10458:	4630      	mov	r0, r6
   1045a:	4639      	mov	r1, r7
   1045c:	2200      	movs	r2, #0
   1045e:	f7fc fb79 	bl	cb54 <__aeabi_dcmpeq>
   10462:	b118      	cbz	r0, 1046c <_svfprintf_r+0x1760>
   10464:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10466:	07de      	lsls	r6, r3, #31
   10468:	f100 8126 	bmi.w	106b8 <_svfprintf_r+0x19ac>
   1046c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1046e:	2b00      	cmp	r3, #0
   10470:	db07      	blt.n	10482 <_svfprintf_r+0x1776>
   10472:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10474:	3301      	adds	r3, #1
   10476:	442b      	add	r3, r5
   10478:	2230      	movs	r2, #48	; 0x30
   1047a:	f805 2b01 	strb.w	r2, [r5], #1
   1047e:	42ab      	cmp	r3, r5
   10480:	d1fb      	bne.n	1047a <_svfprintf_r+0x176e>
   10482:	1b2b      	subs	r3, r5, r4
   10484:	9313      	str	r3, [sp, #76]	; 0x4c
   10486:	e6c1      	b.n	1020c <_svfprintf_r+0x1500>
   10488:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1048a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1048c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   10490:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   10494:	971a      	str	r7, [sp, #104]	; 0x68
   10496:	18e3      	adds	r3, r4, r3
   10498:	429d      	cmp	r5, r3
   1049a:	bf28      	it	cs
   1049c:	461d      	movcs	r5, r3
   1049e:	4691      	mov	r9, r2
   104a0:	460e      	mov	r6, r1
   104a2:	950a      	str	r5, [sp, #40]	; 0x28
   104a4:	f7ff b9c0 	b.w	f828 <_svfprintf_r+0xb1c>
   104a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   104aa:	9311      	str	r3, [sp, #68]	; 0x44
   104ac:	1cdd      	adds	r5, r3, #3
   104ae:	db02      	blt.n	104b6 <_svfprintf_r+0x17aa>
   104b0:	9a08      	ldr	r2, [sp, #32]
   104b2:	4293      	cmp	r3, r2
   104b4:	dd19      	ble.n	104ea <_svfprintf_r+0x17de>
   104b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   104b8:	3b02      	subs	r3, #2
   104ba:	9310      	str	r3, [sp, #64]	; 0x40
   104bc:	f023 0320 	bic.w	r3, r3, #32
   104c0:	9307      	str	r3, [sp, #28]
   104c2:	e6ad      	b.n	10220 <_svfprintf_r+0x1514>
   104c4:	222d      	movs	r2, #45	; 0x2d
   104c6:	2300      	movs	r3, #0
   104c8:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   104cc:	9308      	str	r3, [sp, #32]
   104ce:	f7fe be04 	b.w	f0da <_svfprintf_r+0x3ce>
   104d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   104d4:	42ab      	cmp	r3, r5
   104d6:	f4bf ae97 	bcs.w	10208 <_svfprintf_r+0x14fc>
   104da:	2130      	movs	r1, #48	; 0x30
   104dc:	1c5a      	adds	r2, r3, #1
   104de:	922a      	str	r2, [sp, #168]	; 0xa8
   104e0:	7019      	strb	r1, [r3, #0]
   104e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   104e4:	429d      	cmp	r5, r3
   104e6:	d8f9      	bhi.n	104dc <_svfprintf_r+0x17d0>
   104e8:	e68e      	b.n	10208 <_svfprintf_r+0x14fc>
   104ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   104ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   104ee:	4293      	cmp	r3, r2
   104f0:	f2c0 80c5 	blt.w	1067e <_svfprintf_r+0x1972>
   104f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   104f6:	f013 0f01 	tst.w	r3, #1
   104fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   104fc:	f000 814d 	beq.w	1079a <_svfprintf_r+0x1a8e>
   10500:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10502:	4413      	add	r3, r2
   10504:	930a      	str	r3, [sp, #40]	; 0x28
   10506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10508:	0559      	lsls	r1, r3, #21
   1050a:	d503      	bpl.n	10514 <_svfprintf_r+0x1808>
   1050c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1050e:	2b00      	cmp	r3, #0
   10510:	f300 8156 	bgt.w	107c0 <_svfprintf_r+0x1ab4>
   10514:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10516:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1051a:	9307      	str	r3, [sp, #28]
   1051c:	2367      	movs	r3, #103	; 0x67
   1051e:	9310      	str	r3, [sp, #64]	; 0x40
   10520:	2300      	movs	r3, #0
   10522:	9312      	str	r3, [sp, #72]	; 0x48
   10524:	9316      	str	r3, [sp, #88]	; 0x58
   10526:	e6de      	b.n	102e6 <_svfprintf_r+0x15da>
   10528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1052a:	07db      	lsls	r3, r3, #31
   1052c:	f100 809f 	bmi.w	1066e <_svfprintf_r+0x1962>
   10530:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   10532:	e669      	b.n	10208 <_svfprintf_r+0x14fc>
   10534:	aa2c      	add	r2, sp, #176	; 0xb0
   10536:	4641      	mov	r1, r8
   10538:	4650      	mov	r0, sl
   1053a:	f001 fc51 	bl	11de0 <__ssprint_r>
   1053e:	2800      	cmp	r0, #0
   10540:	f47f a84f 	bne.w	f5e2 <_svfprintf_r+0x8d6>
   10544:	7838      	ldrb	r0, [r7, #0]
   10546:	992e      	ldr	r1, [sp, #184]	; 0xb8
   10548:	aa2f      	add	r2, sp, #188	; 0xbc
   1054a:	4405      	add	r5, r0
   1054c:	f7ff bbc1 	b.w	fcd2 <_svfprintf_r+0xfc6>
   10550:	2378      	movs	r3, #120	; 0x78
   10552:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
   10556:	2330      	movs	r3, #48	; 0x30
   10558:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
   1055c:	f04b 0302 	orr.w	r3, fp, #2
   10560:	930f      	str	r3, [sp, #60]	; 0x3c
   10562:	9b08      	ldr	r3, [sp, #32]
   10564:	2b63      	cmp	r3, #99	; 0x63
   10566:	f300 80ed 	bgt.w	10744 <_svfprintf_r+0x1a38>
   1056a:	2300      	movs	r3, #0
   1056c:	930d      	str	r3, [sp, #52]	; 0x34
   1056e:	ac3f      	add	r4, sp, #252	; 0xfc
   10570:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   10574:	4613      	mov	r3, r2
   10576:	2b00      	cmp	r3, #0
   10578:	f44b 7b81 	orr.w	fp, fp, #258	; 0x102
   1057c:	db67      	blt.n	1064e <_svfprintf_r+0x1942>
   1057e:	461e      	mov	r6, r3
   10580:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10582:	f023 0320 	bic.w	r3, r3, #32
   10586:	9307      	str	r3, [sp, #28]
   10588:	2300      	movs	r3, #0
   1058a:	460f      	mov	r7, r1
   1058c:	931e      	str	r3, [sp, #120]	; 0x78
   1058e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10590:	2b61      	cmp	r3, #97	; 0x61
   10592:	f47f aaa4 	bne.w	fade <_svfprintf_r+0xdd2>
   10596:	4638      	mov	r0, r7
   10598:	4631      	mov	r1, r6
   1059a:	aa23      	add	r2, sp, #140	; 0x8c
   1059c:	f000 fb10 	bl	10bc0 <frexp>
   105a0:	2200      	movs	r2, #0
   105a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   105a6:	f003 f8b7 	bl	13718 <__aeabi_dmul>
   105aa:	2200      	movs	r2, #0
   105ac:	2300      	movs	r3, #0
   105ae:	4606      	mov	r6, r0
   105b0:	460f      	mov	r7, r1
   105b2:	f7fc facf 	bl	cb54 <__aeabi_dcmpeq>
   105b6:	b108      	cbz	r0, 105bc <_svfprintf_r+0x18b0>
   105b8:	2301      	movs	r3, #1
   105ba:	9323      	str	r3, [sp, #140]	; 0x8c
   105bc:	4b3d      	ldr	r3, [pc, #244]	; (106b4 <_svfprintf_r+0x19a8>)
   105be:	930a      	str	r3, [sp, #40]	; 0x28
   105c0:	e6fb      	b.n	103ba <_svfprintf_r+0x16ae>
   105c2:	990c      	ldr	r1, [sp, #48]	; 0x30
   105c4:	aa2c      	add	r2, sp, #176	; 0xb0
   105c6:	4650      	mov	r0, sl
   105c8:	f001 fc0a 	bl	11de0 <__ssprint_r>
   105cc:	2800      	cmp	r0, #0
   105ce:	f47f a808 	bne.w	f5e2 <_svfprintf_r+0x8d6>
   105d2:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   105d4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   105d8:	f7ff b918 	b.w	f80c <_svfprintf_r+0xb00>
   105dc:	990c      	ldr	r1, [sp, #48]	; 0x30
   105de:	aa2c      	add	r2, sp, #176	; 0xb0
   105e0:	4650      	mov	r0, sl
   105e2:	f001 fbfd 	bl	11de0 <__ssprint_r>
   105e6:	2800      	cmp	r0, #0
   105e8:	f47e affb 	bne.w	f5e2 <_svfprintf_r+0x8d6>
   105ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   105ee:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   105f0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   105f4:	f7ff b92e 	b.w	f854 <_svfprintf_r+0xb48>
   105f8:	2358      	movs	r3, #88	; 0x58
   105fa:	e7aa      	b.n	10552 <_svfprintf_r+0x1846>
   105fc:	990c      	ldr	r1, [sp, #48]	; 0x30
   105fe:	aa2c      	add	r2, sp, #176	; 0xb0
   10600:	4650      	mov	r0, sl
   10602:	f001 fbed 	bl	11de0 <__ssprint_r>
   10606:	2800      	cmp	r0, #0
   10608:	f47e afeb 	bne.w	f5e2 <_svfprintf_r+0x8d6>
   1060c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   1060e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10610:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10612:	1b1c      	subs	r4, r3, r4
   10614:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10618:	f7ff b934 	b.w	f884 <_svfprintf_r+0xb78>
   1061c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1061e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10620:	9211      	str	r2, [sp, #68]	; 0x44
   10622:	2a00      	cmp	r2, #0
   10624:	f003 0301 	and.w	r3, r3, #1
   10628:	f340 8108 	ble.w	1083c <_svfprintf_r+0x1b30>
   1062c:	9908      	ldr	r1, [sp, #32]
   1062e:	430b      	orrs	r3, r1
   10630:	f040 80fd 	bne.w	1082e <_svfprintf_r+0x1b22>
   10634:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10636:	930a      	str	r3, [sp, #40]	; 0x28
   10638:	2366      	movs	r3, #102	; 0x66
   1063a:	9310      	str	r3, [sp, #64]	; 0x40
   1063c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1063e:	055a      	lsls	r2, r3, #21
   10640:	f100 80c0 	bmi.w	107c4 <_svfprintf_r+0x1ab8>
   10644:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10646:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1064a:	9307      	str	r3, [sp, #28]
   1064c:	e768      	b.n	10520 <_svfprintf_r+0x1814>
   1064e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10650:	f023 0320 	bic.w	r3, r3, #32
   10654:	9307      	str	r3, [sp, #28]
   10656:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1065a:	f103 4600 	add.w	r6, r3, #2147483648	; 0x80000000
   1065e:	232d      	movs	r3, #45	; 0x2d
   10660:	4617      	mov	r7, r2
   10662:	931e      	str	r3, [sp, #120]	; 0x78
   10664:	e793      	b.n	1058e <_svfprintf_r+0x1882>
   10666:	2200      	movs	r2, #0
   10668:	9208      	str	r2, [sp, #32]
   1066a:	f7fe bbaa 	b.w	edc2 <_svfprintf_r+0xb6>
   1066e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10670:	4425      	add	r5, r4
   10672:	e5bf      	b.n	101f4 <_svfprintf_r+0x14e8>
   10674:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10676:	320f      	adds	r2, #15
   10678:	b2d2      	uxtb	r2, r2
   1067a:	2101      	movs	r1, #1
   1067c:	e5da      	b.n	10234 <_svfprintf_r+0x1528>
   1067e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10680:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10682:	189a      	adds	r2, r3, r2
   10684:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10686:	920a      	str	r2, [sp, #40]	; 0x28
   10688:	2b00      	cmp	r3, #0
   1068a:	f340 808f 	ble.w	107ac <_svfprintf_r+0x1aa0>
   1068e:	2367      	movs	r3, #103	; 0x67
   10690:	9310      	str	r3, [sp, #64]	; 0x40
   10692:	e7d3      	b.n	1063c <_svfprintf_r+0x1930>
   10694:	469b      	mov	fp, r3
   10696:	2300      	movs	r3, #0
   10698:	930d      	str	r3, [sp, #52]	; 0x34
   1069a:	e7dc      	b.n	10656 <_svfprintf_r+0x194a>
   1069c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1069e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   106a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   106a6:	8193      	strh	r3, [r2, #12]
   106a8:	f7fe bc3b 	b.w	ef22 <_svfprintf_r+0x216>
   106ac:	40300000 	.word	0x40300000
   106b0:	3fe00000 	.word	0x3fe00000
   106b4:	0001583c 	.word	0x0001583c
   106b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   106ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   106bc:	932a      	str	r3, [sp, #168]	; 0xa8
   106be:	7bd1      	ldrb	r1, [r2, #15]
   106c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   106c4:	428b      	cmp	r3, r1
   106c6:	462a      	mov	r2, r5
   106c8:	d109      	bne.n	106de <_svfprintf_r+0x19d2>
   106ca:	2030      	movs	r0, #48	; 0x30
   106cc:	f802 0c01 	strb.w	r0, [r2, #-1]
   106d0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   106d2:	1e53      	subs	r3, r2, #1
   106d4:	932a      	str	r3, [sp, #168]	; 0xa8
   106d6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   106da:	4299      	cmp	r1, r3
   106dc:	d0f6      	beq.n	106cc <_svfprintf_r+0x19c0>
   106de:	2b39      	cmp	r3, #57	; 0x39
   106e0:	bf0b      	itete	eq
   106e2:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   106e4:	3301      	addne	r3, #1
   106e6:	7a9b      	ldrbeq	r3, [r3, #10]
   106e8:	b2db      	uxtbne	r3, r3
   106ea:	f802 3c01 	strb.w	r3, [r2, #-1]
   106ee:	e6c8      	b.n	10482 <_svfprintf_r+0x1776>
   106f0:	2900      	cmp	r1, #0
   106f2:	f040 808c 	bne.w	1080e <_svfprintf_r+0x1b02>
   106f6:	2230      	movs	r2, #48	; 0x30
   106f8:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   106fc:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   10700:	3330      	adds	r3, #48	; 0x30
   10702:	f802 3b01 	strb.w	r3, [r2], #1
   10706:	ab26      	add	r3, sp, #152	; 0x98
   10708:	1ad3      	subs	r3, r2, r3
   1070a:	931b      	str	r3, [sp, #108]	; 0x6c
   1070c:	e5d3      	b.n	102b6 <_svfprintf_r+0x15aa>
   1070e:	464c      	mov	r4, r9
   10710:	4689      	mov	r9, r1
   10712:	3301      	adds	r3, #1
   10714:	443a      	add	r2, r7
   10716:	2b07      	cmp	r3, #7
   10718:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   1071c:	f8c9 5000 	str.w	r5, [r9]
   10720:	f8c9 7004 	str.w	r7, [r9, #4]
   10724:	f77f abab 	ble.w	fe7e <_svfprintf_r+0x1172>
   10728:	990c      	ldr	r1, [sp, #48]	; 0x30
   1072a:	aa2c      	add	r2, sp, #176	; 0xb0
   1072c:	4650      	mov	r0, sl
   1072e:	f001 fb57 	bl	11de0 <__ssprint_r>
   10732:	2800      	cmp	r0, #0
   10734:	f47e af55 	bne.w	f5e2 <_svfprintf_r+0x8d6>
   10738:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   1073c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10740:	f7ff bb9f 	b.w	fe82 <_svfprintf_r+0x1176>
   10744:	1c59      	adds	r1, r3, #1
   10746:	4650      	mov	r0, sl
   10748:	f7fc fd8e 	bl	d268 <_malloc_r>
   1074c:	4604      	mov	r4, r0
   1074e:	2800      	cmp	r0, #0
   10750:	d0a4      	beq.n	1069c <_svfprintf_r+0x1990>
   10752:	900d      	str	r0, [sp, #52]	; 0x34
   10754:	e70c      	b.n	10570 <_svfprintf_r+0x1864>
   10756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10758:	07d8      	lsls	r0, r3, #31
   1075a:	f57f adb7 	bpl.w	102cc <_svfprintf_r+0x15c0>
   1075e:	e5b1      	b.n	102c4 <_svfprintf_r+0x15b8>
   10760:	4638      	mov	r0, r7
   10762:	4631      	mov	r1, r6
   10764:	2200      	movs	r2, #0
   10766:	2300      	movs	r3, #0
   10768:	f7fc f9f4 	bl	cb54 <__aeabi_dcmpeq>
   1076c:	2800      	cmp	r0, #0
   1076e:	f47f ad3f 	bne.w	101f0 <_svfprintf_r+0x14e4>
   10772:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10774:	f1c3 0301 	rsb	r3, r3, #1
   10778:	9323      	str	r3, [sp, #140]	; 0x8c
   1077a:	e53a      	b.n	101f2 <_svfprintf_r+0x14e6>
   1077c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1077e:	4c4a      	ldr	r4, [pc, #296]	; (108a8 <_svfprintf_r+0x1b9c>)
   10780:	2b00      	cmp	r3, #0
   10782:	bfb4      	ite	lt
   10784:	222d      	movlt	r2, #45	; 0x2d
   10786:	f89d 2087 	ldrbge.w	r2, [sp, #135]	; 0x87
   1078a:	4b48      	ldr	r3, [pc, #288]	; (108ac <_svfprintf_r+0x1ba0>)
   1078c:	bfb8      	it	lt
   1078e:	f88d 2087 	strblt.w	r2, [sp, #135]	; 0x87
   10792:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10796:	f7fe bc90 	b.w	f0ba <_svfprintf_r+0x3ae>
   1079a:	930a      	str	r3, [sp, #40]	; 0x28
   1079c:	e6b3      	b.n	10506 <_svfprintf_r+0x17fa>
   1079e:	9b08      	ldr	r3, [sp, #32]
   107a0:	f8dd 801c 	ldr.w	r8, [sp, #28]
   107a4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   107a8:	930a      	str	r3, [sp, #40]	; 0x28
   107aa:	e490      	b.n	100ce <_svfprintf_r+0x13c2>
   107ac:	f1c3 0301 	rsb	r3, r3, #1
   107b0:	441a      	add	r2, r3
   107b2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   107b6:	9307      	str	r3, [sp, #28]
   107b8:	2367      	movs	r3, #103	; 0x67
   107ba:	920a      	str	r2, [sp, #40]	; 0x28
   107bc:	9310      	str	r3, [sp, #64]	; 0x40
   107be:	e6af      	b.n	10520 <_svfprintf_r+0x1814>
   107c0:	2367      	movs	r3, #103	; 0x67
   107c2:	9310      	str	r3, [sp, #64]	; 0x40
   107c4:	991a      	ldr	r1, [sp, #104]	; 0x68
   107c6:	780b      	ldrb	r3, [r1, #0]
   107c8:	2bff      	cmp	r3, #255	; 0xff
   107ca:	d059      	beq.n	10880 <_svfprintf_r+0x1b74>
   107cc:	2500      	movs	r5, #0
   107ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   107d0:	4628      	mov	r0, r5
   107d2:	e003      	b.n	107dc <_svfprintf_r+0x1ad0>
   107d4:	3001      	adds	r0, #1
   107d6:	3101      	adds	r1, #1
   107d8:	2bff      	cmp	r3, #255	; 0xff
   107da:	d008      	beq.n	107ee <_svfprintf_r+0x1ae2>
   107dc:	4293      	cmp	r3, r2
   107de:	da06      	bge.n	107ee <_svfprintf_r+0x1ae2>
   107e0:	1ad2      	subs	r2, r2, r3
   107e2:	784b      	ldrb	r3, [r1, #1]
   107e4:	2b00      	cmp	r3, #0
   107e6:	d1f5      	bne.n	107d4 <_svfprintf_r+0x1ac8>
   107e8:	780b      	ldrb	r3, [r1, #0]
   107ea:	3501      	adds	r5, #1
   107ec:	e7f4      	b.n	107d8 <_svfprintf_r+0x1acc>
   107ee:	9211      	str	r2, [sp, #68]	; 0x44
   107f0:	911a      	str	r1, [sp, #104]	; 0x68
   107f2:	9016      	str	r0, [sp, #88]	; 0x58
   107f4:	9512      	str	r5, [sp, #72]	; 0x48
   107f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   107f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   107fa:	991d      	ldr	r1, [sp, #116]	; 0x74
   107fc:	4413      	add	r3, r2
   107fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10800:	fb01 2303 	mla	r3, r1, r3, r2
   10804:	930a      	str	r3, [sp, #40]	; 0x28
   10806:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1080a:	9307      	str	r3, [sp, #28]
   1080c:	e56b      	b.n	102e6 <_svfprintf_r+0x15da>
   1080e:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   10812:	e775      	b.n	10700 <_svfprintf_r+0x19f4>
   10814:	9b08      	ldr	r3, [sp, #32]
   10816:	9307      	str	r3, [sp, #28]
   10818:	930a      	str	r3, [sp, #40]	; 0x28
   1081a:	2373      	movs	r3, #115	; 0x73
   1081c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10820:	970e      	str	r7, [sp, #56]	; 0x38
   10822:	9008      	str	r0, [sp, #32]
   10824:	9012      	str	r0, [sp, #72]	; 0x48
   10826:	9016      	str	r0, [sp, #88]	; 0x58
   10828:	9310      	str	r3, [sp, #64]	; 0x40
   1082a:	f7fe bc53 	b.w	f0d4 <_svfprintf_r+0x3c8>
   1082e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10830:	18d5      	adds	r5, r2, r3
   10832:	4429      	add	r1, r5
   10834:	2366      	movs	r3, #102	; 0x66
   10836:	910a      	str	r1, [sp, #40]	; 0x28
   10838:	9310      	str	r3, [sp, #64]	; 0x40
   1083a:	e6ff      	b.n	1063c <_svfprintf_r+0x1930>
   1083c:	9a08      	ldr	r2, [sp, #32]
   1083e:	4313      	orrs	r3, r2
   10840:	d105      	bne.n	1084e <_svfprintf_r+0x1b42>
   10842:	2301      	movs	r3, #1
   10844:	2266      	movs	r2, #102	; 0x66
   10846:	9307      	str	r3, [sp, #28]
   10848:	9210      	str	r2, [sp, #64]	; 0x40
   1084a:	930a      	str	r3, [sp, #40]	; 0x28
   1084c:	e668      	b.n	10520 <_svfprintf_r+0x1814>
   1084e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10850:	1c5d      	adds	r5, r3, #1
   10852:	442a      	add	r2, r5
   10854:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10858:	9307      	str	r3, [sp, #28]
   1085a:	2366      	movs	r3, #102	; 0x66
   1085c:	920a      	str	r2, [sp, #40]	; 0x28
   1085e:	9310      	str	r3, [sp, #64]	; 0x40
   10860:	e65e      	b.n	10520 <_svfprintf_r+0x1814>
   10862:	2302      	movs	r3, #2
   10864:	931b      	str	r3, [sp, #108]	; 0x6c
   10866:	e526      	b.n	102b6 <_svfprintf_r+0x15aa>
   10868:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1086a:	f898 3001 	ldrb.w	r3, [r8, #1]
   1086e:	4688      	mov	r8, r1
   10870:	f852 1b04 	ldr.w	r1, [r2], #4
   10874:	920e      	str	r2, [sp, #56]	; 0x38
   10876:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   1087a:	9108      	str	r1, [sp, #32]
   1087c:	f7fe ba9f 	b.w	edbe <_svfprintf_r+0xb2>
   10880:	2300      	movs	r3, #0
   10882:	9312      	str	r3, [sp, #72]	; 0x48
   10884:	9316      	str	r3, [sp, #88]	; 0x58
   10886:	e7b6      	b.n	107f6 <_svfprintf_r+0x1aea>
   10888:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1088a:	8993      	ldrh	r3, [r2, #12]
   1088c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10890:	8193      	strh	r3, [r2, #12]
   10892:	f7fe bea6 	b.w	f5e2 <_svfprintf_r+0x8d6>
   10896:	230c      	movs	r3, #12
   10898:	f8ca 3000 	str.w	r3, [sl]
   1089c:	f04f 33ff 	mov.w	r3, #4294967295
   108a0:	9309      	str	r3, [sp, #36]	; 0x24
   108a2:	f7fe bb45 	b.w	ef30 <_svfprintf_r+0x224>
   108a6:	bf00      	nop
   108a8:	00015838 	.word	0x00015838
   108ac:	000153a8 	.word	0x000153a8

000108b0 <_fclose_r>:
   108b0:	b570      	push	{r4, r5, r6, lr}
   108b2:	2900      	cmp	r1, #0
   108b4:	d04b      	beq.n	1094e <_fclose_r+0x9e>
   108b6:	4606      	mov	r6, r0
   108b8:	460c      	mov	r4, r1
   108ba:	b110      	cbz	r0, 108c2 <_fclose_r+0x12>
   108bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   108be:	2b00      	cmp	r3, #0
   108c0:	d048      	beq.n	10954 <_fclose_r+0xa4>
   108c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   108c4:	07d8      	lsls	r0, r3, #31
   108c6:	d534      	bpl.n	10932 <_fclose_r+0x82>
   108c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   108cc:	2b00      	cmp	r3, #0
   108ce:	d03e      	beq.n	1094e <_fclose_r+0x9e>
   108d0:	4621      	mov	r1, r4
   108d2:	4630      	mov	r0, r6
   108d4:	f000 f850 	bl	10978 <__sflush_r>
   108d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   108da:	4605      	mov	r5, r0
   108dc:	b133      	cbz	r3, 108ec <_fclose_r+0x3c>
   108de:	69e1      	ldr	r1, [r4, #28]
   108e0:	4630      	mov	r0, r6
   108e2:	4798      	blx	r3
   108e4:	2800      	cmp	r0, #0
   108e6:	bfb8      	it	lt
   108e8:	f04f 35ff 	movlt.w	r5, #4294967295
   108ec:	89a3      	ldrh	r3, [r4, #12]
   108ee:	061a      	lsls	r2, r3, #24
   108f0:	d43c      	bmi.n	1096c <_fclose_r+0xbc>
   108f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   108f4:	b141      	cbz	r1, 10908 <_fclose_r+0x58>
   108f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   108fa:	4299      	cmp	r1, r3
   108fc:	d002      	beq.n	10904 <_fclose_r+0x54>
   108fe:	4630      	mov	r0, r6
   10900:	f7fd fd2c 	bl	e35c <_free_r>
   10904:	2300      	movs	r3, #0
   10906:	6323      	str	r3, [r4, #48]	; 0x30
   10908:	6c61      	ldr	r1, [r4, #68]	; 0x44
   1090a:	b121      	cbz	r1, 10916 <_fclose_r+0x66>
   1090c:	4630      	mov	r0, r6
   1090e:	f7fd fd25 	bl	e35c <_free_r>
   10912:	2300      	movs	r3, #0
   10914:	6463      	str	r3, [r4, #68]	; 0x44
   10916:	f7fd fa03 	bl	dd20 <__sfp_lock_acquire>
   1091a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   1091c:	2200      	movs	r2, #0
   1091e:	07db      	lsls	r3, r3, #31
   10920:	81a2      	strh	r2, [r4, #12]
   10922:	d51f      	bpl.n	10964 <_fclose_r+0xb4>
   10924:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10926:	f7fd fc29 	bl	e17c <__retarget_lock_close_recursive>
   1092a:	f7fd f9ff 	bl	dd2c <__sfp_lock_release>
   1092e:	4628      	mov	r0, r5
   10930:	bd70      	pop	{r4, r5, r6, pc}
   10932:	89a3      	ldrh	r3, [r4, #12]
   10934:	0599      	lsls	r1, r3, #22
   10936:	d4cb      	bmi.n	108d0 <_fclose_r+0x20>
   10938:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1093a:	f7fd fc21 	bl	e180 <__retarget_lock_acquire_recursive>
   1093e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10942:	2b00      	cmp	r3, #0
   10944:	d1c4      	bne.n	108d0 <_fclose_r+0x20>
   10946:	6e65      	ldr	r5, [r4, #100]	; 0x64
   10948:	f015 0501 	ands.w	r5, r5, #1
   1094c:	d005      	beq.n	1095a <_fclose_r+0xaa>
   1094e:	2500      	movs	r5, #0
   10950:	4628      	mov	r0, r5
   10952:	bd70      	pop	{r4, r5, r6, pc}
   10954:	f7fd f9c6 	bl	dce4 <__sinit>
   10958:	e7b3      	b.n	108c2 <_fclose_r+0x12>
   1095a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1095c:	f7fd fc12 	bl	e184 <__retarget_lock_release_recursive>
   10960:	4628      	mov	r0, r5
   10962:	bd70      	pop	{r4, r5, r6, pc}
   10964:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10966:	f7fd fc0d 	bl	e184 <__retarget_lock_release_recursive>
   1096a:	e7db      	b.n	10924 <_fclose_r+0x74>
   1096c:	6921      	ldr	r1, [r4, #16]
   1096e:	4630      	mov	r0, r6
   10970:	f7fd fcf4 	bl	e35c <_free_r>
   10974:	e7bd      	b.n	108f2 <_fclose_r+0x42>
   10976:	bf00      	nop

00010978 <__sflush_r>:
   10978:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   1097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1097e:	460c      	mov	r4, r1
   10980:	0711      	lsls	r1, r2, #28
   10982:	4607      	mov	r7, r0
   10984:	d442      	bmi.n	10a0c <__sflush_r+0x94>
   10986:	6863      	ldr	r3, [r4, #4]
   10988:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1098c:	2b00      	cmp	r3, #0
   1098e:	81a2      	strh	r2, [r4, #12]
   10990:	dd59      	ble.n	10a46 <__sflush_r+0xce>
   10992:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10994:	2d00      	cmp	r5, #0
   10996:	d054      	beq.n	10a42 <__sflush_r+0xca>
   10998:	2300      	movs	r3, #0
   1099a:	683e      	ldr	r6, [r7, #0]
   1099c:	603b      	str	r3, [r7, #0]
   1099e:	b293      	uxth	r3, r2
   109a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   109a4:	d153      	bne.n	10a4e <__sflush_r+0xd6>
   109a6:	69e1      	ldr	r1, [r4, #28]
   109a8:	2301      	movs	r3, #1
   109aa:	4638      	mov	r0, r7
   109ac:	47a8      	blx	r5
   109ae:	1c42      	adds	r2, r0, #1
   109b0:	d063      	beq.n	10a7a <__sflush_r+0x102>
   109b2:	89a3      	ldrh	r3, [r4, #12]
   109b4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   109b6:	075b      	lsls	r3, r3, #29
   109b8:	d505      	bpl.n	109c6 <__sflush_r+0x4e>
   109ba:	6863      	ldr	r3, [r4, #4]
   109bc:	1ac0      	subs	r0, r0, r3
   109be:	6b23      	ldr	r3, [r4, #48]	; 0x30
   109c0:	b10b      	cbz	r3, 109c6 <__sflush_r+0x4e>
   109c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   109c4:	1ac0      	subs	r0, r0, r3
   109c6:	69e1      	ldr	r1, [r4, #28]
   109c8:	4602      	mov	r2, r0
   109ca:	2300      	movs	r3, #0
   109cc:	4638      	mov	r0, r7
   109ce:	47a8      	blx	r5
   109d0:	1c41      	adds	r1, r0, #1
   109d2:	d13e      	bne.n	10a52 <__sflush_r+0xda>
   109d4:	683b      	ldr	r3, [r7, #0]
   109d6:	2b00      	cmp	r3, #0
   109d8:	d03b      	beq.n	10a52 <__sflush_r+0xda>
   109da:	2b1d      	cmp	r3, #29
   109dc:	d001      	beq.n	109e2 <__sflush_r+0x6a>
   109de:	2b16      	cmp	r3, #22
   109e0:	d152      	bne.n	10a88 <__sflush_r+0x110>
   109e2:	89a3      	ldrh	r3, [r4, #12]
   109e4:	6922      	ldr	r2, [r4, #16]
   109e6:	6022      	str	r2, [r4, #0]
   109e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   109ec:	2100      	movs	r1, #0
   109ee:	6061      	str	r1, [r4, #4]
   109f0:	81a3      	strh	r3, [r4, #12]
   109f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   109f4:	603e      	str	r6, [r7, #0]
   109f6:	b321      	cbz	r1, 10a42 <__sflush_r+0xca>
   109f8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   109fc:	4299      	cmp	r1, r3
   109fe:	d002      	beq.n	10a06 <__sflush_r+0x8e>
   10a00:	4638      	mov	r0, r7
   10a02:	f7fd fcab 	bl	e35c <_free_r>
   10a06:	2000      	movs	r0, #0
   10a08:	6320      	str	r0, [r4, #48]	; 0x30
   10a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a0c:	6926      	ldr	r6, [r4, #16]
   10a0e:	b1c6      	cbz	r6, 10a42 <__sflush_r+0xca>
   10a10:	b293      	uxth	r3, r2
   10a12:	6825      	ldr	r5, [r4, #0]
   10a14:	6026      	str	r6, [r4, #0]
   10a16:	079a      	lsls	r2, r3, #30
   10a18:	bf0c      	ite	eq
   10a1a:	6963      	ldreq	r3, [r4, #20]
   10a1c:	2300      	movne	r3, #0
   10a1e:	1bad      	subs	r5, r5, r6
   10a20:	60a3      	str	r3, [r4, #8]
   10a22:	e00c      	b.n	10a3e <__sflush_r+0xc6>
   10a24:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   10a28:	69e1      	ldr	r1, [r4, #28]
   10a2a:	462b      	mov	r3, r5
   10a2c:	4632      	mov	r2, r6
   10a2e:	4638      	mov	r0, r7
   10a30:	47e0      	blx	ip
   10a32:	f1b0 0c00 	subs.w	ip, r0, #0
   10a36:	eba5 050c 	sub.w	r5, r5, ip
   10a3a:	4466      	add	r6, ip
   10a3c:	dd16      	ble.n	10a6c <__sflush_r+0xf4>
   10a3e:	2d00      	cmp	r5, #0
   10a40:	dcf0      	bgt.n	10a24 <__sflush_r+0xac>
   10a42:	2000      	movs	r0, #0
   10a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10a48:	2b00      	cmp	r3, #0
   10a4a:	dca2      	bgt.n	10992 <__sflush_r+0x1a>
   10a4c:	e7f9      	b.n	10a42 <__sflush_r+0xca>
   10a4e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   10a50:	e7b1      	b.n	109b6 <__sflush_r+0x3e>
   10a52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10a56:	6922      	ldr	r2, [r4, #16]
   10a58:	6022      	str	r2, [r4, #0]
   10a5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10a5e:	81a3      	strh	r3, [r4, #12]
   10a60:	2200      	movs	r2, #0
   10a62:	04db      	lsls	r3, r3, #19
   10a64:	6062      	str	r2, [r4, #4]
   10a66:	d5c4      	bpl.n	109f2 <__sflush_r+0x7a>
   10a68:	6520      	str	r0, [r4, #80]	; 0x50
   10a6a:	e7c2      	b.n	109f2 <__sflush_r+0x7a>
   10a6c:	89a3      	ldrh	r3, [r4, #12]
   10a6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10a72:	f04f 30ff 	mov.w	r0, #4294967295
   10a76:	81a3      	strh	r3, [r4, #12]
   10a78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a7a:	683b      	ldr	r3, [r7, #0]
   10a7c:	2b00      	cmp	r3, #0
   10a7e:	d098      	beq.n	109b2 <__sflush_r+0x3a>
   10a80:	2b1d      	cmp	r3, #29
   10a82:	d006      	beq.n	10a92 <__sflush_r+0x11a>
   10a84:	2b16      	cmp	r3, #22
   10a86:	d004      	beq.n	10a92 <__sflush_r+0x11a>
   10a88:	89a3      	ldrh	r3, [r4, #12]
   10a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10a8e:	81a3      	strh	r3, [r4, #12]
   10a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10a92:	603e      	str	r6, [r7, #0]
   10a94:	e7d5      	b.n	10a42 <__sflush_r+0xca>
   10a96:	bf00      	nop

00010a98 <_fflush_r>:
   10a98:	b538      	push	{r3, r4, r5, lr}
   10a9a:	460c      	mov	r4, r1
   10a9c:	4605      	mov	r5, r0
   10a9e:	b108      	cbz	r0, 10aa4 <_fflush_r+0xc>
   10aa0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10aa2:	b303      	cbz	r3, 10ae6 <_fflush_r+0x4e>
   10aa4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10aa8:	b188      	cbz	r0, 10ace <_fflush_r+0x36>
   10aaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10aac:	07db      	lsls	r3, r3, #31
   10aae:	d401      	bmi.n	10ab4 <_fflush_r+0x1c>
   10ab0:	0581      	lsls	r1, r0, #22
   10ab2:	d50f      	bpl.n	10ad4 <_fflush_r+0x3c>
   10ab4:	4628      	mov	r0, r5
   10ab6:	4621      	mov	r1, r4
   10ab8:	f7ff ff5e 	bl	10978 <__sflush_r>
   10abc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10abe:	07da      	lsls	r2, r3, #31
   10ac0:	4605      	mov	r5, r0
   10ac2:	d402      	bmi.n	10aca <_fflush_r+0x32>
   10ac4:	89a3      	ldrh	r3, [r4, #12]
   10ac6:	059b      	lsls	r3, r3, #22
   10ac8:	d508      	bpl.n	10adc <_fflush_r+0x44>
   10aca:	4628      	mov	r0, r5
   10acc:	bd38      	pop	{r3, r4, r5, pc}
   10ace:	4605      	mov	r5, r0
   10ad0:	4628      	mov	r0, r5
   10ad2:	bd38      	pop	{r3, r4, r5, pc}
   10ad4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10ad6:	f7fd fb53 	bl	e180 <__retarget_lock_acquire_recursive>
   10ada:	e7eb      	b.n	10ab4 <_fflush_r+0x1c>
   10adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10ade:	f7fd fb51 	bl	e184 <__retarget_lock_release_recursive>
   10ae2:	4628      	mov	r0, r5
   10ae4:	bd38      	pop	{r3, r4, r5, pc}
   10ae6:	f7fd f8fd 	bl	dce4 <__sinit>
   10aea:	e7db      	b.n	10aa4 <_fflush_r+0xc>

00010aec <_localeconv_r>:
   10aec:	4800      	ldr	r0, [pc, #0]	; (10af0 <_localeconv_r+0x4>)
   10aee:	4770      	bx	lr
   10af0:	1fff8fc4 	.word	0x1fff8fc4

00010af4 <__libc_fini_array>:
   10af4:	b538      	push	{r3, r4, r5, lr}
   10af6:	4d07      	ldr	r5, [pc, #28]	; (10b14 <__libc_fini_array+0x20>)
   10af8:	4c07      	ldr	r4, [pc, #28]	; (10b18 <__libc_fini_array+0x24>)
   10afa:	1b2c      	subs	r4, r5, r4
   10afc:	10a4      	asrs	r4, r4, #2
   10afe:	d005      	beq.n	10b0c <__libc_fini_array+0x18>
   10b00:	3c01      	subs	r4, #1
   10b02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   10b06:	4798      	blx	r3
   10b08:	2c00      	cmp	r4, #0
   10b0a:	d1f9      	bne.n	10b00 <__libc_fini_array+0xc>
   10b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10b10:	f004 bf32 	b.w	15978 <__init_array_end>
	...
   10b1c:	ffffffff 	.word	0xffffffff

00010b20 <memchr>:
   10b20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   10b24:	2a10      	cmp	r2, #16
   10b26:	db2b      	blt.n	10b80 <memchr+0x60>
   10b28:	f010 0f07 	tst.w	r0, #7
   10b2c:	d008      	beq.n	10b40 <memchr+0x20>
   10b2e:	f810 3b01 	ldrb.w	r3, [r0], #1
   10b32:	3a01      	subs	r2, #1
   10b34:	428b      	cmp	r3, r1
   10b36:	d02d      	beq.n	10b94 <memchr+0x74>
   10b38:	f010 0f07 	tst.w	r0, #7
   10b3c:	b342      	cbz	r2, 10b90 <memchr+0x70>
   10b3e:	d1f6      	bne.n	10b2e <memchr+0xe>
   10b40:	b4f0      	push	{r4, r5, r6, r7}
   10b42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10b46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   10b4a:	f022 0407 	bic.w	r4, r2, #7
   10b4e:	f07f 0700 	mvns.w	r7, #0
   10b52:	2300      	movs	r3, #0
   10b54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   10b58:	3c08      	subs	r4, #8
   10b5a:	ea85 0501 	eor.w	r5, r5, r1
   10b5e:	ea86 0601 	eor.w	r6, r6, r1
   10b62:	fa85 f547 	uadd8	r5, r5, r7
   10b66:	faa3 f587 	sel	r5, r3, r7
   10b6a:	fa86 f647 	uadd8	r6, r6, r7
   10b6e:	faa5 f687 	sel	r6, r5, r7
   10b72:	b98e      	cbnz	r6, 10b98 <memchr+0x78>
   10b74:	d1ee      	bne.n	10b54 <memchr+0x34>
   10b76:	bcf0      	pop	{r4, r5, r6, r7}
   10b78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   10b7c:	f002 0207 	and.w	r2, r2, #7
   10b80:	b132      	cbz	r2, 10b90 <memchr+0x70>
   10b82:	f810 3b01 	ldrb.w	r3, [r0], #1
   10b86:	3a01      	subs	r2, #1
   10b88:	ea83 0301 	eor.w	r3, r3, r1
   10b8c:	b113      	cbz	r3, 10b94 <memchr+0x74>
   10b8e:	d1f8      	bne.n	10b82 <memchr+0x62>
   10b90:	2000      	movs	r0, #0
   10b92:	4770      	bx	lr
   10b94:	3801      	subs	r0, #1
   10b96:	4770      	bx	lr
   10b98:	2d00      	cmp	r5, #0
   10b9a:	bf06      	itte	eq
   10b9c:	4635      	moveq	r5, r6
   10b9e:	3803      	subeq	r0, #3
   10ba0:	3807      	subne	r0, #7
   10ba2:	f015 0f01 	tst.w	r5, #1
   10ba6:	d107      	bne.n	10bb8 <memchr+0x98>
   10ba8:	3001      	adds	r0, #1
   10baa:	f415 7f80 	tst.w	r5, #256	; 0x100
   10bae:	bf02      	ittt	eq
   10bb0:	3001      	addeq	r0, #1
   10bb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   10bb6:	3001      	addeq	r0, #1
   10bb8:	bcf0      	pop	{r4, r5, r6, r7}
   10bba:	3801      	subs	r0, #1
   10bbc:	4770      	bx	lr
   10bbe:	bf00      	nop

00010bc0 <frexp>:
   10bc0:	f8df c060 	ldr.w	ip, [pc, #96]	; 10c24 <frexp+0x64>
   10bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10bc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10bca:	2700      	movs	r7, #0
   10bcc:	4563      	cmp	r3, ip
   10bce:	4604      	mov	r4, r0
   10bd0:	460d      	mov	r5, r1
   10bd2:	4616      	mov	r6, r2
   10bd4:	6017      	str	r7, [r2, #0]
   10bd6:	dc22      	bgt.n	10c1e <frexp+0x5e>
   10bd8:	4684      	mov	ip, r0
   10bda:	ea53 0c0c 	orrs.w	ip, r3, ip
   10bde:	d01e      	beq.n	10c1e <frexp+0x5e>
   10be0:	f8df c044 	ldr.w	ip, [pc, #68]	; 10c28 <frexp+0x68>
   10be4:	ea01 0c0c 	and.w	ip, r1, ip
   10be8:	460a      	mov	r2, r1
   10bea:	f1bc 0f00 	cmp.w	ip, #0
   10bee:	d109      	bne.n	10c04 <frexp+0x44>
   10bf0:	4b0e      	ldr	r3, [pc, #56]	; (10c2c <frexp+0x6c>)
   10bf2:	2200      	movs	r2, #0
   10bf4:	f002 fd90 	bl	13718 <__aeabi_dmul>
   10bf8:	f06f 0735 	mvn.w	r7, #53	; 0x35
   10bfc:	4604      	mov	r4, r0
   10bfe:	460a      	mov	r2, r1
   10c00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10c04:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   10c08:	151b      	asrs	r3, r3, #20
   10c0a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   10c0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   10c12:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10c16:	443b      	add	r3, r7
   10c18:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   10c1c:	6033      	str	r3, [r6, #0]
   10c1e:	4620      	mov	r0, r4
   10c20:	4629      	mov	r1, r5
   10c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10c24:	7fefffff 	.word	0x7fefffff
   10c28:	7ff00000 	.word	0x7ff00000
   10c2c:	43500000 	.word	0x43500000

00010c30 <__register_exitproc>:
   10c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10c34:	f8df a074 	ldr.w	sl, [pc, #116]	; 10cac <__register_exitproc+0x7c>
   10c38:	4606      	mov	r6, r0
   10c3a:	f8da 0000 	ldr.w	r0, [sl]
   10c3e:	4698      	mov	r8, r3
   10c40:	460f      	mov	r7, r1
   10c42:	4691      	mov	r9, r2
   10c44:	f7fd fa9c 	bl	e180 <__retarget_lock_acquire_recursive>
   10c48:	4b19      	ldr	r3, [pc, #100]	; (10cb0 <__register_exitproc+0x80>)
   10c4a:	681c      	ldr	r4, [r3, #0]
   10c4c:	b324      	cbz	r4, 10c98 <__register_exitproc+0x68>
   10c4e:	6865      	ldr	r5, [r4, #4]
   10c50:	2d1f      	cmp	r5, #31
   10c52:	dc24      	bgt.n	10c9e <__register_exitproc+0x6e>
   10c54:	b95e      	cbnz	r6, 10c6e <__register_exitproc+0x3e>
   10c56:	1c6b      	adds	r3, r5, #1
   10c58:	3502      	adds	r5, #2
   10c5a:	f8da 0000 	ldr.w	r0, [sl]
   10c5e:	6063      	str	r3, [r4, #4]
   10c60:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   10c64:	f7fd fa8e 	bl	e184 <__retarget_lock_release_recursive>
   10c68:	2000      	movs	r0, #0
   10c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10c6e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   10c72:	2301      	movs	r3, #1
   10c74:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10c78:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   10c7c:	40ab      	lsls	r3, r5
   10c7e:	431a      	orrs	r2, r3
   10c80:	2e02      	cmp	r6, #2
   10c82:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   10c86:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10c8a:	d1e4      	bne.n	10c56 <__register_exitproc+0x26>
   10c8c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   10c90:	431a      	orrs	r2, r3
   10c92:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   10c96:	e7de      	b.n	10c56 <__register_exitproc+0x26>
   10c98:	4c06      	ldr	r4, [pc, #24]	; (10cb4 <__register_exitproc+0x84>)
   10c9a:	601c      	str	r4, [r3, #0]
   10c9c:	e7d7      	b.n	10c4e <__register_exitproc+0x1e>
   10c9e:	f8da 0000 	ldr.w	r0, [sl]
   10ca2:	f7fd fa6f 	bl	e184 <__retarget_lock_release_recursive>
   10ca6:	f04f 30ff 	mov.w	r0, #4294967295
   10caa:	e7de      	b.n	10c6a <__register_exitproc+0x3a>
   10cac:	1fff9164 	.word	0x1fff9164
   10cb0:	1fffd778 	.word	0x1fffd778
   10cb4:	1fffd77c 	.word	0x1fffd77c

00010cb8 <__assert_func>:
   10cb8:	b500      	push	{lr}
   10cba:	4c0b      	ldr	r4, [pc, #44]	; (10ce8 <__assert_func+0x30>)
   10cbc:	6825      	ldr	r5, [r4, #0]
   10cbe:	4614      	mov	r4, r2
   10cc0:	68ee      	ldr	r6, [r5, #12]
   10cc2:	461a      	mov	r2, r3
   10cc4:	b085      	sub	sp, #20
   10cc6:	4603      	mov	r3, r0
   10cc8:	460d      	mov	r5, r1
   10cca:	b14c      	cbz	r4, 10ce0 <__assert_func+0x28>
   10ccc:	4907      	ldr	r1, [pc, #28]	; (10cec <__assert_func+0x34>)
   10cce:	9500      	str	r5, [sp, #0]
   10cd0:	e9cd 1401 	strd	r1, r4, [sp, #4]
   10cd4:	4630      	mov	r0, r6
   10cd6:	4906      	ldr	r1, [pc, #24]	; (10cf0 <__assert_func+0x38>)
   10cd8:	f001 f86e 	bl	11db8 <fiprintf>
   10cdc:	f7f9 f894 	bl	9e08 <abort>
   10ce0:	4904      	ldr	r1, [pc, #16]	; (10cf4 <__assert_func+0x3c>)
   10ce2:	460c      	mov	r4, r1
   10ce4:	e7f3      	b.n	10cce <__assert_func+0x16>
   10ce6:	bf00      	nop
   10ce8:	1fff9160 	.word	0x1fff9160
   10cec:	0001588c 	.word	0x0001588c
   10cf0:	0001589c 	.word	0x0001589c
   10cf4:	0001423c 	.word	0x0001423c

00010cf8 <_calloc_r>:
   10cf8:	b538      	push	{r3, r4, r5, lr}
   10cfa:	fba1 1402 	umull	r1, r4, r1, r2
   10cfe:	bb8c      	cbnz	r4, 10d64 <_calloc_r+0x6c>
   10d00:	f7fc fab2 	bl	d268 <_malloc_r>
   10d04:	4605      	mov	r5, r0
   10d06:	b1e0      	cbz	r0, 10d42 <_calloc_r+0x4a>
   10d08:	f850 2c04 	ldr.w	r2, [r0, #-4]
   10d0c:	f022 0203 	bic.w	r2, r2, #3
   10d10:	3a04      	subs	r2, #4
   10d12:	2a24      	cmp	r2, #36	; 0x24
   10d14:	d817      	bhi.n	10d46 <_calloc_r+0x4e>
   10d16:	2a13      	cmp	r2, #19
   10d18:	d91a      	bls.n	10d50 <_calloc_r+0x58>
   10d1a:	2a1b      	cmp	r2, #27
   10d1c:	e9c0 4400 	strd	r4, r4, [r0]
   10d20:	d91d      	bls.n	10d5e <_calloc_r+0x66>
   10d22:	2a24      	cmp	r2, #36	; 0x24
   10d24:	bf14      	ite	ne
   10d26:	f100 0210 	addne.w	r2, r0, #16
   10d2a:	f100 0218 	addeq.w	r2, r0, #24
   10d2e:	f04f 0300 	mov.w	r3, #0
   10d32:	e9c0 4402 	strd	r4, r4, [r0, #8]
   10d36:	bf04      	itt	eq
   10d38:	6104      	streq	r4, [r0, #16]
   10d3a:	6144      	streq	r4, [r0, #20]
   10d3c:	e9c2 3300 	strd	r3, r3, [r2]
   10d40:	6093      	str	r3, [r2, #8]
   10d42:	4628      	mov	r0, r5
   10d44:	bd38      	pop	{r3, r4, r5, pc}
   10d46:	4621      	mov	r1, r4
   10d48:	f7fd f8fc 	bl	df44 <memset>
   10d4c:	4628      	mov	r0, r5
   10d4e:	bd38      	pop	{r3, r4, r5, pc}
   10d50:	4602      	mov	r2, r0
   10d52:	2300      	movs	r3, #0
   10d54:	e9c2 3300 	strd	r3, r3, [r2]
   10d58:	6093      	str	r3, [r2, #8]
   10d5a:	4628      	mov	r0, r5
   10d5c:	bd38      	pop	{r3, r4, r5, pc}
   10d5e:	f100 0208 	add.w	r2, r0, #8
   10d62:	e7f6      	b.n	10d52 <_calloc_r+0x5a>
   10d64:	f7fd f9de 	bl	e124 <__errno>
   10d68:	230c      	movs	r3, #12
   10d6a:	2500      	movs	r5, #0
   10d6c:	6003      	str	r3, [r0, #0]
   10d6e:	e7e8      	b.n	10d42 <_calloc_r+0x4a>

00010d70 <quorem>:
   10d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d74:	6903      	ldr	r3, [r0, #16]
   10d76:	690c      	ldr	r4, [r1, #16]
   10d78:	42a3      	cmp	r3, r4
   10d7a:	b083      	sub	sp, #12
   10d7c:	f2c0 8088 	blt.w	10e90 <quorem+0x120>
   10d80:	3c01      	subs	r4, #1
   10d82:	f101 0514 	add.w	r5, r1, #20
   10d86:	00a3      	lsls	r3, r4, #2
   10d88:	f100 0814 	add.w	r8, r0, #20
   10d8c:	9300      	str	r3, [sp, #0]
   10d8e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   10d92:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10d96:	3301      	adds	r3, #1
   10d98:	468a      	mov	sl, r1
   10d9a:	429a      	cmp	r2, r3
   10d9c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   10da0:	4681      	mov	r9, r0
   10da2:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   10da6:	9101      	str	r1, [sp, #4]
   10da8:	fbb2 f6f3 	udiv	r6, r2, r3
   10dac:	d33a      	bcc.n	10e24 <quorem+0xb4>
   10dae:	f04f 0c00 	mov.w	ip, #0
   10db2:	46ae      	mov	lr, r5
   10db4:	4640      	mov	r0, r8
   10db6:	4662      	mov	r2, ip
   10db8:	4663      	mov	r3, ip
   10dba:	f85e bb04 	ldr.w	fp, [lr], #4
   10dbe:	6801      	ldr	r1, [r0, #0]
   10dc0:	fa1f fc8b 	uxth.w	ip, fp
   10dc4:	fb06 330c 	mla	r3, r6, ip, r3
   10dc8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   10dcc:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   10dd0:	fb06 cc0b 	mla	ip, r6, fp, ip
   10dd4:	b29b      	uxth	r3, r3
   10dd6:	1ad3      	subs	r3, r2, r3
   10dd8:	fa1f f28c 	uxth.w	r2, ip
   10ddc:	fa13 f381 	uxtah	r3, r3, r1
   10de0:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
   10de4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10de8:	b29b      	uxth	r3, r3
   10dea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10dee:	4577      	cmp	r7, lr
   10df0:	f840 3b04 	str.w	r3, [r0], #4
   10df4:	ea4f 4222 	mov.w	r2, r2, asr #16
   10df8:	ea4f 431c 	mov.w	r3, ip, lsr #16
   10dfc:	d2dd      	bcs.n	10dba <quorem+0x4a>
   10dfe:	9b00      	ldr	r3, [sp, #0]
   10e00:	f858 3003 	ldr.w	r3, [r8, r3]
   10e04:	b973      	cbnz	r3, 10e24 <quorem+0xb4>
   10e06:	9b01      	ldr	r3, [sp, #4]
   10e08:	3b04      	subs	r3, #4
   10e0a:	4598      	cmp	r8, r3
   10e0c:	d304      	bcc.n	10e18 <quorem+0xa8>
   10e0e:	e007      	b.n	10e20 <quorem+0xb0>
   10e10:	4598      	cmp	r8, r3
   10e12:	f104 34ff 	add.w	r4, r4, #4294967295
   10e16:	d203      	bcs.n	10e20 <quorem+0xb0>
   10e18:	f853 2904 	ldr.w	r2, [r3], #-4
   10e1c:	2a00      	cmp	r2, #0
   10e1e:	d0f7      	beq.n	10e10 <quorem+0xa0>
   10e20:	f8c9 4010 	str.w	r4, [r9, #16]
   10e24:	4651      	mov	r1, sl
   10e26:	4648      	mov	r0, r9
   10e28:	f7fd fe38 	bl	ea9c <__mcmp>
   10e2c:	2800      	cmp	r0, #0
   10e2e:	db2b      	blt.n	10e88 <quorem+0x118>
   10e30:	3601      	adds	r6, #1
   10e32:	4641      	mov	r1, r8
   10e34:	2300      	movs	r3, #0
   10e36:	f855 0b04 	ldr.w	r0, [r5], #4
   10e3a:	f8d1 c000 	ldr.w	ip, [r1]
   10e3e:	b282      	uxth	r2, r0
   10e40:	1a9a      	subs	r2, r3, r2
   10e42:	0c03      	lsrs	r3, r0, #16
   10e44:	fa12 f28c 	uxtah	r2, r2, ip
   10e48:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   10e4c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   10e50:	b292      	uxth	r2, r2
   10e52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   10e56:	42af      	cmp	r7, r5
   10e58:	f841 2b04 	str.w	r2, [r1], #4
   10e5c:	ea4f 4323 	mov.w	r3, r3, asr #16
   10e60:	d2e9      	bcs.n	10e36 <quorem+0xc6>
   10e62:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10e66:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   10e6a:	b96a      	cbnz	r2, 10e88 <quorem+0x118>
   10e6c:	3b04      	subs	r3, #4
   10e6e:	4598      	cmp	r8, r3
   10e70:	d304      	bcc.n	10e7c <quorem+0x10c>
   10e72:	e007      	b.n	10e84 <quorem+0x114>
   10e74:	4598      	cmp	r8, r3
   10e76:	f104 34ff 	add.w	r4, r4, #4294967295
   10e7a:	d203      	bcs.n	10e84 <quorem+0x114>
   10e7c:	f853 2904 	ldr.w	r2, [r3], #-4
   10e80:	2a00      	cmp	r2, #0
   10e82:	d0f7      	beq.n	10e74 <quorem+0x104>
   10e84:	f8c9 4010 	str.w	r4, [r9, #16]
   10e88:	4630      	mov	r0, r6
   10e8a:	b003      	add	sp, #12
   10e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e90:	2000      	movs	r0, #0
   10e92:	b003      	add	sp, #12
   10e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010e98 <_dtoa_r>:
   10e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e9c:	6b81      	ldr	r1, [r0, #56]	; 0x38
   10e9e:	b099      	sub	sp, #100	; 0x64
   10ea0:	4690      	mov	r8, r2
   10ea2:	4699      	mov	r9, r3
   10ea4:	e9cd 8904 	strd	r8, r9, [sp, #16]
   10ea8:	9d25      	ldr	r5, [sp, #148]	; 0x94
   10eaa:	4604      	mov	r4, r0
   10eac:	b141      	cbz	r1, 10ec0 <_dtoa_r+0x28>
   10eae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   10eb0:	604a      	str	r2, [r1, #4]
   10eb2:	2301      	movs	r3, #1
   10eb4:	4093      	lsls	r3, r2
   10eb6:	608b      	str	r3, [r1, #8]
   10eb8:	f7fd fb92 	bl	e5e0 <_Bfree>
   10ebc:	2300      	movs	r3, #0
   10ebe:	63a3      	str	r3, [r4, #56]	; 0x38
   10ec0:	f1b9 0a00 	subs.w	sl, r9, #0
   10ec4:	bfb4      	ite	lt
   10ec6:	2301      	movlt	r3, #1
   10ec8:	2300      	movge	r3, #0
   10eca:	602b      	str	r3, [r5, #0]
   10ecc:	4b76      	ldr	r3, [pc, #472]	; (110a8 <_dtoa_r+0x210>)
   10ece:	bfbc      	itt	lt
   10ed0:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   10ed4:	f8cd a014 	strlt.w	sl, [sp, #20]
   10ed8:	ea33 030a 	bics.w	r3, r3, sl
   10edc:	f000 80ab 	beq.w	11036 <_dtoa_r+0x19e>
   10ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10ee4:	4610      	mov	r0, r2
   10ee6:	4619      	mov	r1, r3
   10ee8:	2200      	movs	r2, #0
   10eea:	2300      	movs	r3, #0
   10eec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   10ef0:	f7fb fe30 	bl	cb54 <__aeabi_dcmpeq>
   10ef4:	4607      	mov	r7, r0
   10ef6:	b178      	cbz	r0, 10f18 <_dtoa_r+0x80>
   10ef8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   10efa:	2301      	movs	r3, #1
   10efc:	6013      	str	r3, [r2, #0]
   10efe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   10f00:	2b00      	cmp	r3, #0
   10f02:	f000 83ae 	beq.w	11662 <_dtoa_r+0x7ca>
   10f06:	4b69      	ldr	r3, [pc, #420]	; (110ac <_dtoa_r+0x214>)
   10f08:	9a26      	ldr	r2, [sp, #152]	; 0x98
   10f0a:	6013      	str	r3, [r2, #0]
   10f0c:	3b01      	subs	r3, #1
   10f0e:	9303      	str	r3, [sp, #12]
   10f10:	9803      	ldr	r0, [sp, #12]
   10f12:	b019      	add	sp, #100	; 0x64
   10f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f18:	ab16      	add	r3, sp, #88	; 0x58
   10f1a:	9301      	str	r3, [sp, #4]
   10f1c:	ab17      	add	r3, sp, #92	; 0x5c
   10f1e:	9300      	str	r3, [sp, #0]
   10f20:	4620      	mov	r0, r4
   10f22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   10f26:	f7fd fe83 	bl	ec30 <__d2b>
   10f2a:	ea5f 561a 	movs.w	r6, sl, lsr #20
   10f2e:	4605      	mov	r5, r0
   10f30:	f040 8097 	bne.w	11062 <_dtoa_r+0x1ca>
   10f34:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   10f38:	443e      	add	r6, r7
   10f3a:	f206 4332 	addw	r3, r6, #1074	; 0x432
   10f3e:	2b20      	cmp	r3, #32
   10f40:	f340 83a6 	ble.w	11690 <_dtoa_r+0x7f8>
   10f44:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   10f48:	fa0a fa03 	lsl.w	sl, sl, r3
   10f4c:	f206 4312 	addw	r3, r6, #1042	; 0x412
   10f50:	fa28 f003 	lsr.w	r0, r8, r3
   10f54:	ea4a 0000 	orr.w	r0, sl, r0
   10f58:	f7fb fd2c 	bl	c9b4 <__aeabi_ui2d>
   10f5c:	2301      	movs	r3, #1
   10f5e:	3e01      	subs	r6, #1
   10f60:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   10f64:	930f      	str	r3, [sp, #60]	; 0x3c
   10f66:	4b52      	ldr	r3, [pc, #328]	; (110b0 <_dtoa_r+0x218>)
   10f68:	2200      	movs	r2, #0
   10f6a:	f7fb fbe5 	bl	c738 <__aeabi_dsub>
   10f6e:	a348      	add	r3, pc, #288	; (adr r3, 11090 <_dtoa_r+0x1f8>)
   10f70:	e9d3 2300 	ldrd	r2, r3, [r3]
   10f74:	f002 fbd0 	bl	13718 <__aeabi_dmul>
   10f78:	a347      	add	r3, pc, #284	; (adr r3, 11098 <_dtoa_r+0x200>)
   10f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10f7e:	f7fb fbdd 	bl	c73c <__adddf3>
   10f82:	4680      	mov	r8, r0
   10f84:	4630      	mov	r0, r6
   10f86:	4689      	mov	r9, r1
   10f88:	f7fb fd24 	bl	c9d4 <__aeabi_i2d>
   10f8c:	a344      	add	r3, pc, #272	; (adr r3, 110a0 <_dtoa_r+0x208>)
   10f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   10f92:	f002 fbc1 	bl	13718 <__aeabi_dmul>
   10f96:	4602      	mov	r2, r0
   10f98:	460b      	mov	r3, r1
   10f9a:	4640      	mov	r0, r8
   10f9c:	4649      	mov	r1, r9
   10f9e:	f7fb fbcd 	bl	c73c <__adddf3>
   10fa2:	4680      	mov	r8, r0
   10fa4:	4689      	mov	r9, r1
   10fa6:	f002 fdc9 	bl	13b3c <__aeabi_d2iz>
   10faa:	2200      	movs	r2, #0
   10fac:	4683      	mov	fp, r0
   10fae:	2300      	movs	r3, #0
   10fb0:	4640      	mov	r0, r8
   10fb2:	4649      	mov	r1, r9
   10fb4:	f7fb fdd8 	bl	cb68 <__aeabi_dcmplt>
   10fb8:	2800      	cmp	r0, #0
   10fba:	f040 8345 	bne.w	11648 <_dtoa_r+0x7b0>
   10fbe:	f1bb 0f16 	cmp.w	fp, #22
   10fc2:	f200 8334 	bhi.w	1162e <_dtoa_r+0x796>
   10fc6:	4b3b      	ldr	r3, [pc, #236]	; (110b4 <_dtoa_r+0x21c>)
   10fc8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   10fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   10fd0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   10fd4:	f7fb fdc8 	bl	cb68 <__aeabi_dcmplt>
   10fd8:	2800      	cmp	r0, #0
   10fda:	d071      	beq.n	110c0 <_dtoa_r+0x228>
   10fdc:	2300      	movs	r3, #0
   10fde:	1bbf      	subs	r7, r7, r6
   10fe0:	930e      	str	r3, [sp, #56]	; 0x38
   10fe2:	1e7b      	subs	r3, r7, #1
   10fe4:	f10b 3bff 	add.w	fp, fp, #4294967295
   10fe8:	9306      	str	r3, [sp, #24]
   10fea:	f100 8327 	bmi.w	1163c <_dtoa_r+0x7a4>
   10fee:	2300      	movs	r3, #0
   10ff0:	9309      	str	r3, [sp, #36]	; 0x24
   10ff2:	f1bb 0f00 	cmp.w	fp, #0
   10ff6:	da6a      	bge.n	110ce <_dtoa_r+0x236>
   10ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10ffa:	f8cd b01c 	str.w	fp, [sp, #28]
   10ffe:	eba3 030b 	sub.w	r3, r3, fp
   11002:	9309      	str	r3, [sp, #36]	; 0x24
   11004:	f1cb 0300 	rsb	r3, fp, #0
   11008:	930d      	str	r3, [sp, #52]	; 0x34
   1100a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1100c:	2b09      	cmp	r3, #9
   1100e:	f04f 0b00 	mov.w	fp, #0
   11012:	d865      	bhi.n	110e0 <_dtoa_r+0x248>
   11014:	2b05      	cmp	r3, #5
   11016:	f340 8339 	ble.w	1168c <_dtoa_r+0x7f4>
   1101a:	3b04      	subs	r3, #4
   1101c:	9322      	str	r3, [sp, #136]	; 0x88
   1101e:	2600      	movs	r6, #0
   11020:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11022:	3b02      	subs	r3, #2
   11024:	2b03      	cmp	r3, #3
   11026:	f200 8667 	bhi.w	11cf8 <_dtoa_r+0xe60>
   1102a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1102e:	044e      	.short	0x044e
   11030:	0442044b 	.word	0x0442044b
   11034:	0425      	.short	0x0425
   11036:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11038:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   1103c:	f242 730f 	movw	r3, #9999	; 0x270f
   11040:	ea5a 0a08 	orrs.w	sl, sl, r8
   11044:	6013      	str	r3, [r2, #0]
   11046:	d11a      	bne.n	1107e <_dtoa_r+0x1e6>
   11048:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1104a:	2b00      	cmp	r3, #0
   1104c:	f000 8663 	beq.w	11d16 <_dtoa_r+0xe7e>
   11050:	4b19      	ldr	r3, [pc, #100]	; (110b8 <_dtoa_r+0x220>)
   11052:	9303      	str	r3, [sp, #12]
   11054:	3308      	adds	r3, #8
   11056:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11058:	9803      	ldr	r0, [sp, #12]
   1105a:	6013      	str	r3, [r2, #0]
   1105c:	b019      	add	sp, #100	; 0x64
   1105e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11062:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   11066:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1106a:	4608      	mov	r0, r1
   1106c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   11070:	970f      	str	r7, [sp, #60]	; 0x3c
   11072:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   11076:	9f16      	ldr	r7, [sp, #88]	; 0x58
   11078:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   1107c:	e773      	b.n	10f66 <_dtoa_r+0xce>
   1107e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11080:	2b00      	cmp	r3, #0
   11082:	f040 83db 	bne.w	1183c <_dtoa_r+0x9a4>
   11086:	4b0d      	ldr	r3, [pc, #52]	; (110bc <_dtoa_r+0x224>)
   11088:	9303      	str	r3, [sp, #12]
   1108a:	e741      	b.n	10f10 <_dtoa_r+0x78>
   1108c:	f3af 8000 	nop.w
   11090:	636f4361 	.word	0x636f4361
   11094:	3fd287a7 	.word	0x3fd287a7
   11098:	8b60c8b3 	.word	0x8b60c8b3
   1109c:	3fc68a28 	.word	0x3fc68a28
   110a0:	509f79fb 	.word	0x509f79fb
   110a4:	3fd34413 	.word	0x3fd34413
   110a8:	7ff00000 	.word	0x7ff00000
   110ac:	000141ed 	.word	0x000141ed
   110b0:	3ff80000 	.word	0x3ff80000
   110b4:	00015760 	.word	0x00015760
   110b8:	000158cc 	.word	0x000158cc
   110bc:	000158d8 	.word	0x000158d8
   110c0:	1bbf      	subs	r7, r7, r6
   110c2:	1e7b      	subs	r3, r7, #1
   110c4:	9306      	str	r3, [sp, #24]
   110c6:	f100 847e 	bmi.w	119c6 <_dtoa_r+0xb2e>
   110ca:	900e      	str	r0, [sp, #56]	; 0x38
   110cc:	9009      	str	r0, [sp, #36]	; 0x24
   110ce:	9b06      	ldr	r3, [sp, #24]
   110d0:	445b      	add	r3, fp
   110d2:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   110d6:	2300      	movs	r3, #0
   110d8:	930d      	str	r3, [sp, #52]	; 0x34
   110da:	9b22      	ldr	r3, [sp, #136]	; 0x88
   110dc:	2b09      	cmp	r3, #9
   110de:	d999      	bls.n	11014 <_dtoa_r+0x17c>
   110e0:	2300      	movs	r3, #0
   110e2:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
   110e6:	2601      	movs	r6, #1
   110e8:	f04f 33ff 	mov.w	r3, #4294967295
   110ec:	960c      	str	r6, [sp, #48]	; 0x30
   110ee:	9308      	str	r3, [sp, #32]
   110f0:	9b08      	ldr	r3, [sp, #32]
   110f2:	9312      	str	r3, [sp, #72]	; 0x48
   110f4:	2100      	movs	r1, #0
   110f6:	63e1      	str	r1, [r4, #60]	; 0x3c
   110f8:	4620      	mov	r0, r4
   110fa:	f7fd fa4b 	bl	e594 <_Balloc>
   110fe:	9003      	str	r0, [sp, #12]
   11100:	2800      	cmp	r0, #0
   11102:	f000 8601 	beq.w	11d08 <_dtoa_r+0xe70>
   11106:	9b03      	ldr	r3, [sp, #12]
   11108:	63a3      	str	r3, [r4, #56]	; 0x38
   1110a:	9b08      	ldr	r3, [sp, #32]
   1110c:	2b0e      	cmp	r3, #14
   1110e:	f200 8113 	bhi.w	11338 <_dtoa_r+0x4a0>
   11112:	2e00      	cmp	r6, #0
   11114:	f000 8110 	beq.w	11338 <_dtoa_r+0x4a0>
   11118:	9907      	ldr	r1, [sp, #28]
   1111a:	2900      	cmp	r1, #0
   1111c:	f340 8455 	ble.w	119ca <_dtoa_r+0xb32>
   11120:	4bae      	ldr	r3, [pc, #696]	; (113dc <_dtoa_r+0x544>)
   11122:	f001 020f 	and.w	r2, r1, #15
   11126:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1112a:	ea4f 1821 	mov.w	r8, r1, asr #4
   1112e:	05c9      	lsls	r1, r1, #23
   11130:	e9d3 6700 	ldrd	r6, r7, [r3]
   11134:	f140 8411 	bpl.w	1195a <_dtoa_r+0xac2>
   11138:	4ba9      	ldr	r3, [pc, #676]	; (113e0 <_dtoa_r+0x548>)
   1113a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1113e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   11142:	f002 fc13 	bl	1396c <__aeabi_ddiv>
   11146:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1114a:	f008 080f 	and.w	r8, r8, #15
   1114e:	f04f 0a03 	mov.w	sl, #3
   11152:	f1b8 0f00 	cmp.w	r8, #0
   11156:	d013      	beq.n	11180 <_dtoa_r+0x2e8>
   11158:	f8df 9284 	ldr.w	r9, [pc, #644]	; 113e0 <_dtoa_r+0x548>
   1115c:	f018 0f01 	tst.w	r8, #1
   11160:	d009      	beq.n	11176 <_dtoa_r+0x2de>
   11162:	4630      	mov	r0, r6
   11164:	4639      	mov	r1, r7
   11166:	e9d9 2300 	ldrd	r2, r3, [r9]
   1116a:	f002 fad5 	bl	13718 <__aeabi_dmul>
   1116e:	f10a 0a01 	add.w	sl, sl, #1
   11172:	4606      	mov	r6, r0
   11174:	460f      	mov	r7, r1
   11176:	ea5f 0868 	movs.w	r8, r8, asr #1
   1117a:	f109 0908 	add.w	r9, r9, #8
   1117e:	d1ed      	bne.n	1115c <_dtoa_r+0x2c4>
   11180:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11184:	4632      	mov	r2, r6
   11186:	463b      	mov	r3, r7
   11188:	f002 fbf0 	bl	1396c <__aeabi_ddiv>
   1118c:	4680      	mov	r8, r0
   1118e:	4689      	mov	r9, r1
   11190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11192:	b143      	cbz	r3, 111a6 <_dtoa_r+0x30e>
   11194:	4b93      	ldr	r3, [pc, #588]	; (113e4 <_dtoa_r+0x54c>)
   11196:	2200      	movs	r2, #0
   11198:	4640      	mov	r0, r8
   1119a:	4649      	mov	r1, r9
   1119c:	f7fb fce4 	bl	cb68 <__aeabi_dcmplt>
   111a0:	2800      	cmp	r0, #0
   111a2:	f040 852a 	bne.w	11bfa <_dtoa_r+0xd62>
   111a6:	4650      	mov	r0, sl
   111a8:	f7fb fc14 	bl	c9d4 <__aeabi_i2d>
   111ac:	4642      	mov	r2, r8
   111ae:	464b      	mov	r3, r9
   111b0:	f002 fab2 	bl	13718 <__aeabi_dmul>
   111b4:	4b8c      	ldr	r3, [pc, #560]	; (113e8 <_dtoa_r+0x550>)
   111b6:	2200      	movs	r2, #0
   111b8:	f7fb fac0 	bl	c73c <__adddf3>
   111bc:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   111c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   111c4:	9311      	str	r3, [sp, #68]	; 0x44
   111c6:	9b08      	ldr	r3, [sp, #32]
   111c8:	2b00      	cmp	r3, #0
   111ca:	f000 8099 	beq.w	11300 <_dtoa_r+0x468>
   111ce:	9b07      	ldr	r3, [sp, #28]
   111d0:	9314      	str	r3, [sp, #80]	; 0x50
   111d2:	9b08      	ldr	r3, [sp, #32]
   111d4:	9313      	str	r3, [sp, #76]	; 0x4c
   111d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   111d8:	2b00      	cmp	r3, #0
   111da:	f000 84a5 	beq.w	11b28 <_dtoa_r+0xc90>
   111de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   111e0:	4b7e      	ldr	r3, [pc, #504]	; (113dc <_dtoa_r+0x544>)
   111e2:	4982      	ldr	r1, [pc, #520]	; (113ec <_dtoa_r+0x554>)
   111e4:	9e03      	ldr	r6, [sp, #12]
   111e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   111ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   111ee:	2000      	movs	r0, #0
   111f0:	f002 fbbc 	bl	1396c <__aeabi_ddiv>
   111f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   111f8:	f7fb fa9e 	bl	c738 <__aeabi_dsub>
   111fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11200:	4649      	mov	r1, r9
   11202:	4640      	mov	r0, r8
   11204:	f002 fc9a 	bl	13b3c <__aeabi_d2iz>
   11208:	4607      	mov	r7, r0
   1120a:	f7fb fbe3 	bl	c9d4 <__aeabi_i2d>
   1120e:	4602      	mov	r2, r0
   11210:	460b      	mov	r3, r1
   11212:	4640      	mov	r0, r8
   11214:	4649      	mov	r1, r9
   11216:	f7fb fa8f 	bl	c738 <__aeabi_dsub>
   1121a:	3730      	adds	r7, #48	; 0x30
   1121c:	4680      	mov	r8, r0
   1121e:	4689      	mov	r9, r1
   11220:	4602      	mov	r2, r0
   11222:	460b      	mov	r3, r1
   11224:	f806 7b01 	strb.w	r7, [r6], #1
   11228:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1122c:	f7fb fcba 	bl	cba4 <__aeabi_dcmpgt>
   11230:	2800      	cmp	r0, #0
   11232:	f040 8527 	bne.w	11c84 <_dtoa_r+0xdec>
   11236:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   1123a:	2700      	movs	r7, #0
   1123c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   11240:	9510      	str	r5, [sp, #64]	; 0x40
   11242:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   11244:	9413      	str	r4, [sp, #76]	; 0x4c
   11246:	e02a      	b.n	1129e <_dtoa_r+0x406>
   11248:	3701      	adds	r7, #1
   1124a:	42af      	cmp	r7, r5
   1124c:	f280 852a 	bge.w	11ca4 <_dtoa_r+0xe0c>
   11250:	4b67      	ldr	r3, [pc, #412]	; (113f0 <_dtoa_r+0x558>)
   11252:	4650      	mov	r0, sl
   11254:	4659      	mov	r1, fp
   11256:	2200      	movs	r2, #0
   11258:	f002 fa5e 	bl	13718 <__aeabi_dmul>
   1125c:	4b64      	ldr	r3, [pc, #400]	; (113f0 <_dtoa_r+0x558>)
   1125e:	2200      	movs	r2, #0
   11260:	4682      	mov	sl, r0
   11262:	468b      	mov	fp, r1
   11264:	4640      	mov	r0, r8
   11266:	4649      	mov	r1, r9
   11268:	f002 fa56 	bl	13718 <__aeabi_dmul>
   1126c:	4689      	mov	r9, r1
   1126e:	4680      	mov	r8, r0
   11270:	f002 fc64 	bl	13b3c <__aeabi_d2iz>
   11274:	4604      	mov	r4, r0
   11276:	f7fb fbad 	bl	c9d4 <__aeabi_i2d>
   1127a:	4602      	mov	r2, r0
   1127c:	460b      	mov	r3, r1
   1127e:	4640      	mov	r0, r8
   11280:	4649      	mov	r1, r9
   11282:	f7fb fa59 	bl	c738 <__aeabi_dsub>
   11286:	3430      	adds	r4, #48	; 0x30
   11288:	f806 4b01 	strb.w	r4, [r6], #1
   1128c:	4652      	mov	r2, sl
   1128e:	465b      	mov	r3, fp
   11290:	4680      	mov	r8, r0
   11292:	4689      	mov	r9, r1
   11294:	f7fb fc68 	bl	cb68 <__aeabi_dcmplt>
   11298:	2800      	cmp	r0, #0
   1129a:	f040 84f1 	bne.w	11c80 <_dtoa_r+0xde8>
   1129e:	4642      	mov	r2, r8
   112a0:	464b      	mov	r3, r9
   112a2:	4950      	ldr	r1, [pc, #320]	; (113e4 <_dtoa_r+0x54c>)
   112a4:	2000      	movs	r0, #0
   112a6:	f7fb fa47 	bl	c738 <__aeabi_dsub>
   112aa:	4652      	mov	r2, sl
   112ac:	465b      	mov	r3, fp
   112ae:	f7fb fc5b 	bl	cb68 <__aeabi_dcmplt>
   112b2:	2800      	cmp	r0, #0
   112b4:	d0c8      	beq.n	11248 <_dtoa_r+0x3b0>
   112b6:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   112ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
   112bc:	9a03      	ldr	r2, [sp, #12]
   112be:	9307      	str	r3, [sp, #28]
   112c0:	e002      	b.n	112c8 <_dtoa_r+0x430>
   112c2:	42b2      	cmp	r2, r6
   112c4:	f000 84c6 	beq.w	11c54 <_dtoa_r+0xdbc>
   112c8:	46b1      	mov	r9, r6
   112ca:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   112ce:	2b39      	cmp	r3, #57	; 0x39
   112d0:	d0f7      	beq.n	112c2 <_dtoa_r+0x42a>
   112d2:	3301      	adds	r3, #1
   112d4:	b2db      	uxtb	r3, r3
   112d6:	7033      	strb	r3, [r6, #0]
   112d8:	9b07      	ldr	r3, [sp, #28]
   112da:	3301      	adds	r3, #1
   112dc:	9307      	str	r3, [sp, #28]
   112de:	e192      	b.n	11606 <_dtoa_r+0x76e>
   112e0:	4650      	mov	r0, sl
   112e2:	f7fb fb77 	bl	c9d4 <__aeabi_i2d>
   112e6:	4642      	mov	r2, r8
   112e8:	464b      	mov	r3, r9
   112ea:	f002 fa15 	bl	13718 <__aeabi_dmul>
   112ee:	4b3e      	ldr	r3, [pc, #248]	; (113e8 <_dtoa_r+0x550>)
   112f0:	2200      	movs	r2, #0
   112f2:	f7fb fa23 	bl	c73c <__adddf3>
   112f6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   112fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   112fe:	9311      	str	r3, [sp, #68]	; 0x44
   11300:	4b3c      	ldr	r3, [pc, #240]	; (113f4 <_dtoa_r+0x55c>)
   11302:	4640      	mov	r0, r8
   11304:	4649      	mov	r1, r9
   11306:	2200      	movs	r2, #0
   11308:	f7fb fa16 	bl	c738 <__aeabi_dsub>
   1130c:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   11310:	4642      	mov	r2, r8
   11312:	464b      	mov	r3, r9
   11314:	4606      	mov	r6, r0
   11316:	460f      	mov	r7, r1
   11318:	f7fb fc44 	bl	cba4 <__aeabi_dcmpgt>
   1131c:	4682      	mov	sl, r0
   1131e:	2800      	cmp	r0, #0
   11320:	f040 84a8 	bne.w	11c74 <_dtoa_r+0xddc>
   11324:	4642      	mov	r2, r8
   11326:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1132a:	4630      	mov	r0, r6
   1132c:	4639      	mov	r1, r7
   1132e:	f7fb fc1b 	bl	cb68 <__aeabi_dcmplt>
   11332:	2800      	cmp	r0, #0
   11334:	f040 8345 	bne.w	119c2 <_dtoa_r+0xb2a>
   11338:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1133a:	2b00      	cmp	r3, #0
   1133c:	f2c0 808c 	blt.w	11458 <_dtoa_r+0x5c0>
   11340:	9a07      	ldr	r2, [sp, #28]
   11342:	2a0e      	cmp	r2, #14
   11344:	f300 8088 	bgt.w	11458 <_dtoa_r+0x5c0>
   11348:	4b24      	ldr	r3, [pc, #144]	; (113dc <_dtoa_r+0x544>)
   1134a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1134e:	e9d3 ab00 	ldrd	sl, fp, [r3]
   11352:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11354:	2b00      	cmp	r3, #0
   11356:	da1b      	bge.n	11390 <_dtoa_r+0x4f8>
   11358:	9b08      	ldr	r3, [sp, #32]
   1135a:	2b00      	cmp	r3, #0
   1135c:	dc18      	bgt.n	11390 <_dtoa_r+0x4f8>
   1135e:	f040 832e 	bne.w	119be <_dtoa_r+0xb26>
   11362:	4b24      	ldr	r3, [pc, #144]	; (113f4 <_dtoa_r+0x55c>)
   11364:	4650      	mov	r0, sl
   11366:	2200      	movs	r2, #0
   11368:	4659      	mov	r1, fp
   1136a:	f002 f9d5 	bl	13718 <__aeabi_dmul>
   1136e:	4602      	mov	r2, r0
   11370:	460b      	mov	r3, r1
   11372:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11376:	f7fb fc01 	bl	cb7c <__aeabi_dcmple>
   1137a:	f8dd a020 	ldr.w	sl, [sp, #32]
   1137e:	4656      	mov	r6, sl
   11380:	2800      	cmp	r0, #0
   11382:	f000 82b9 	beq.w	118f8 <_dtoa_r+0xa60>
   11386:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11388:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1138c:	43df      	mvns	r7, r3
   1138e:	e2bb      	b.n	11908 <_dtoa_r+0xa70>
   11390:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   11394:	4652      	mov	r2, sl
   11396:	465b      	mov	r3, fp
   11398:	4638      	mov	r0, r7
   1139a:	4641      	mov	r1, r8
   1139c:	f002 fae6 	bl	1396c <__aeabi_ddiv>
   113a0:	f002 fbcc 	bl	13b3c <__aeabi_d2iz>
   113a4:	4681      	mov	r9, r0
   113a6:	9009      	str	r0, [sp, #36]	; 0x24
   113a8:	f7fb fb14 	bl	c9d4 <__aeabi_i2d>
   113ac:	4652      	mov	r2, sl
   113ae:	465b      	mov	r3, fp
   113b0:	f002 f9b2 	bl	13718 <__aeabi_dmul>
   113b4:	9e03      	ldr	r6, [sp, #12]
   113b6:	460b      	mov	r3, r1
   113b8:	4602      	mov	r2, r0
   113ba:	4641      	mov	r1, r8
   113bc:	4638      	mov	r0, r7
   113be:	f7fb f9bb 	bl	c738 <__aeabi_dsub>
   113c2:	f109 0330 	add.w	r3, r9, #48	; 0x30
   113c6:	f806 3b01 	strb.w	r3, [r6], #1
   113ca:	9b08      	ldr	r3, [sp, #32]
   113cc:	2b01      	cmp	r3, #1
   113ce:	f000 835c 	beq.w	11a8a <_dtoa_r+0xbf2>
   113d2:	9406      	str	r4, [sp, #24]
   113d4:	2701      	movs	r7, #1
   113d6:	9504      	str	r5, [sp, #16]
   113d8:	461c      	mov	r4, r3
   113da:	e02a      	b.n	11432 <_dtoa_r+0x59a>
   113dc:	00015760 	.word	0x00015760
   113e0:	00015738 	.word	0x00015738
   113e4:	3ff00000 	.word	0x3ff00000
   113e8:	401c0000 	.word	0x401c0000
   113ec:	3fe00000 	.word	0x3fe00000
   113f0:	40240000 	.word	0x40240000
   113f4:	40140000 	.word	0x40140000
   113f8:	4652      	mov	r2, sl
   113fa:	465b      	mov	r3, fp
   113fc:	4640      	mov	r0, r8
   113fe:	4649      	mov	r1, r9
   11400:	f002 fab4 	bl	1396c <__aeabi_ddiv>
   11404:	f002 fb9a 	bl	13b3c <__aeabi_d2iz>
   11408:	4605      	mov	r5, r0
   1140a:	f7fb fae3 	bl	c9d4 <__aeabi_i2d>
   1140e:	4652      	mov	r2, sl
   11410:	465b      	mov	r3, fp
   11412:	f002 f981 	bl	13718 <__aeabi_dmul>
   11416:	3701      	adds	r7, #1
   11418:	460b      	mov	r3, r1
   1141a:	4602      	mov	r2, r0
   1141c:	4649      	mov	r1, r9
   1141e:	4640      	mov	r0, r8
   11420:	f7fb f98a 	bl	c738 <__aeabi_dsub>
   11424:	f105 0330 	add.w	r3, r5, #48	; 0x30
   11428:	42a7      	cmp	r7, r4
   1142a:	f806 3b01 	strb.w	r3, [r6], #1
   1142e:	f000 8329 	beq.w	11a84 <_dtoa_r+0xbec>
   11432:	4ba5      	ldr	r3, [pc, #660]	; (116c8 <_dtoa_r+0x830>)
   11434:	2200      	movs	r2, #0
   11436:	f002 f96f 	bl	13718 <__aeabi_dmul>
   1143a:	2200      	movs	r2, #0
   1143c:	2300      	movs	r3, #0
   1143e:	4680      	mov	r8, r0
   11440:	4689      	mov	r9, r1
   11442:	f7fb fb87 	bl	cb54 <__aeabi_dcmpeq>
   11446:	2800      	cmp	r0, #0
   11448:	d0d6      	beq.n	113f8 <_dtoa_r+0x560>
   1144a:	9d04      	ldr	r5, [sp, #16]
   1144c:	9c06      	ldr	r4, [sp, #24]
   1144e:	9b07      	ldr	r3, [sp, #28]
   11450:	3301      	adds	r3, #1
   11452:	9307      	str	r3, [sp, #28]
   11454:	46b1      	mov	r9, r6
   11456:	e0d6      	b.n	11606 <_dtoa_r+0x76e>
   11458:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1145a:	2a00      	cmp	r2, #0
   1145c:	f000 8107 	beq.w	1166e <_dtoa_r+0x7d6>
   11460:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11462:	2a01      	cmp	r2, #1
   11464:	f340 8294 	ble.w	11990 <_dtoa_r+0xaf8>
   11468:	9b08      	ldr	r3, [sp, #32]
   1146a:	f103 38ff 	add.w	r8, r3, #4294967295
   1146e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11470:	4543      	cmp	r3, r8
   11472:	f280 825e 	bge.w	11932 <_dtoa_r+0xa9a>
   11476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11478:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   1147c:	eba8 0303 	sub.w	r3, r8, r3
   11480:	449b      	add	fp, r3
   11482:	f04f 0800 	mov.w	r8, #0
   11486:	9b08      	ldr	r3, [sp, #32]
   11488:	2b00      	cmp	r3, #0
   1148a:	f2c0 832f 	blt.w	11aec <_dtoa_r+0xc54>
   1148e:	9a06      	ldr	r2, [sp, #24]
   11490:	441a      	add	r2, r3
   11492:	9206      	str	r2, [sp, #24]
   11494:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11496:	4617      	mov	r7, r2
   11498:	441a      	add	r2, r3
   1149a:	9209      	str	r2, [sp, #36]	; 0x24
   1149c:	2101      	movs	r1, #1
   1149e:	4620      	mov	r0, r4
   114a0:	f7fd f948 	bl	e734 <__i2b>
   114a4:	4606      	mov	r6, r0
   114a6:	b167      	cbz	r7, 114c2 <_dtoa_r+0x62a>
   114a8:	9906      	ldr	r1, [sp, #24]
   114aa:	2900      	cmp	r1, #0
   114ac:	460b      	mov	r3, r1
   114ae:	dd08      	ble.n	114c2 <_dtoa_r+0x62a>
   114b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   114b2:	42b9      	cmp	r1, r7
   114b4:	bfa8      	it	ge
   114b6:	463b      	movge	r3, r7
   114b8:	1ad2      	subs	r2, r2, r3
   114ba:	1aff      	subs	r7, r7, r3
   114bc:	1acb      	subs	r3, r1, r3
   114be:	9209      	str	r2, [sp, #36]	; 0x24
   114c0:	9306      	str	r3, [sp, #24]
   114c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   114c4:	b163      	cbz	r3, 114e0 <_dtoa_r+0x648>
   114c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   114c8:	2b00      	cmp	r3, #0
   114ca:	f000 82b6 	beq.w	11a3a <_dtoa_r+0xba2>
   114ce:	f1b8 0f00 	cmp.w	r8, #0
   114d2:	f300 8231 	bgt.w	11938 <_dtoa_r+0xaa0>
   114d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   114d8:	ebb3 0208 	subs.w	r2, r3, r8
   114dc:	f040 8316 	bne.w	11b0c <_dtoa_r+0xc74>
   114e0:	2101      	movs	r1, #1
   114e2:	4620      	mov	r0, r4
   114e4:	f7fd f926 	bl	e734 <__i2b>
   114e8:	f1bb 0f00 	cmp.w	fp, #0
   114ec:	4682      	mov	sl, r0
   114ee:	f300 80d4 	bgt.w	1169a <_dtoa_r+0x802>
   114f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   114f4:	2b01      	cmp	r3, #1
   114f6:	f340 81a7 	ble.w	11848 <_dtoa_r+0x9b0>
   114fa:	f04f 0900 	mov.w	r9, #0
   114fe:	2001      	movs	r0, #1
   11500:	f1bb 0f00 	cmp.w	fp, #0
   11504:	f040 80d5 	bne.w	116b2 <_dtoa_r+0x81a>
   11508:	9b06      	ldr	r3, [sp, #24]
   1150a:	4418      	add	r0, r3
   1150c:	f010 001f 	ands.w	r0, r0, #31
   11510:	f000 8198 	beq.w	11844 <_dtoa_r+0x9ac>
   11514:	f1c0 0320 	rsb	r3, r0, #32
   11518:	2b04      	cmp	r3, #4
   1151a:	f300 80ad 	bgt.w	11678 <_dtoa_r+0x7e0>
   1151e:	f040 8224 	bne.w	1196a <_dtoa_r+0xad2>
   11522:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11524:	2b00      	cmp	r3, #0
   11526:	dd05      	ble.n	11534 <_dtoa_r+0x69c>
   11528:	4629      	mov	r1, r5
   1152a:	461a      	mov	r2, r3
   1152c:	4620      	mov	r0, r4
   1152e:	f7fd fa3d 	bl	e9ac <__lshift>
   11532:	4605      	mov	r5, r0
   11534:	9b06      	ldr	r3, [sp, #24]
   11536:	2b00      	cmp	r3, #0
   11538:	dd05      	ble.n	11546 <_dtoa_r+0x6ae>
   1153a:	4651      	mov	r1, sl
   1153c:	461a      	mov	r2, r3
   1153e:	4620      	mov	r0, r4
   11540:	f7fd fa34 	bl	e9ac <__lshift>
   11544:	4682      	mov	sl, r0
   11546:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11548:	2b00      	cmp	r3, #0
   1154a:	f040 815c 	bne.w	11806 <_dtoa_r+0x96e>
   1154e:	9b08      	ldr	r3, [sp, #32]
   11550:	2b00      	cmp	r3, #0
   11552:	f340 8143 	ble.w	117dc <_dtoa_r+0x944>
   11556:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11558:	2b00      	cmp	r3, #0
   1155a:	f040 80c6 	bne.w	116ea <_dtoa_r+0x852>
   1155e:	9b07      	ldr	r3, [sp, #28]
   11560:	3301      	adds	r3, #1
   11562:	9307      	str	r3, [sp, #28]
   11564:	f8dd 800c 	ldr.w	r8, [sp, #12]
   11568:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1156c:	2701      	movs	r7, #1
   1156e:	e007      	b.n	11580 <_dtoa_r+0x6e8>
   11570:	4629      	mov	r1, r5
   11572:	2300      	movs	r3, #0
   11574:	220a      	movs	r2, #10
   11576:	4620      	mov	r0, r4
   11578:	f7fd f83c 	bl	e5f4 <__multadd>
   1157c:	3701      	adds	r7, #1
   1157e:	4605      	mov	r5, r0
   11580:	4651      	mov	r1, sl
   11582:	4628      	mov	r0, r5
   11584:	f7ff fbf4 	bl	10d70 <quorem>
   11588:	45b9      	cmp	r9, r7
   1158a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1158e:	f808 3b01 	strb.w	r3, [r8], #1
   11592:	dced      	bgt.n	11570 <_dtoa_r+0x6d8>
   11594:	9a08      	ldr	r2, [sp, #32]
   11596:	2a00      	cmp	r2, #0
   11598:	bfc8      	it	gt
   1159a:	4693      	movgt	fp, r2
   1159c:	9a03      	ldr	r2, [sp, #12]
   1159e:	bfd8      	it	le
   115a0:	f04f 0b01 	movle.w	fp, #1
   115a4:	4493      	add	fp, r2
   115a6:	2700      	movs	r7, #0
   115a8:	4629      	mov	r1, r5
   115aa:	2201      	movs	r2, #1
   115ac:	4620      	mov	r0, r4
   115ae:	9304      	str	r3, [sp, #16]
   115b0:	f7fd f9fc 	bl	e9ac <__lshift>
   115b4:	4651      	mov	r1, sl
   115b6:	4605      	mov	r5, r0
   115b8:	f7fd fa70 	bl	ea9c <__mcmp>
   115bc:	2800      	cmp	r0, #0
   115be:	f340 81dc 	ble.w	1197a <_dtoa_r+0xae2>
   115c2:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   115c6:	9a03      	ldr	r2, [sp, #12]
   115c8:	f10b 3bff 	add.w	fp, fp, #4294967295
   115cc:	e004      	b.n	115d8 <_dtoa_r+0x740>
   115ce:	455a      	cmp	r2, fp
   115d0:	f000 81ee 	beq.w	119b0 <_dtoa_r+0xb18>
   115d4:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   115d8:	2b39      	cmp	r3, #57	; 0x39
   115da:	f10b 0901 	add.w	r9, fp, #1
   115de:	d0f6      	beq.n	115ce <_dtoa_r+0x736>
   115e0:	3301      	adds	r3, #1
   115e2:	f88b 3000 	strb.w	r3, [fp]
   115e6:	4651      	mov	r1, sl
   115e8:	4620      	mov	r0, r4
   115ea:	f7fc fff9 	bl	e5e0 <_Bfree>
   115ee:	b156      	cbz	r6, 11606 <_dtoa_r+0x76e>
   115f0:	b12f      	cbz	r7, 115fe <_dtoa_r+0x766>
   115f2:	42b7      	cmp	r7, r6
   115f4:	d003      	beq.n	115fe <_dtoa_r+0x766>
   115f6:	4639      	mov	r1, r7
   115f8:	4620      	mov	r0, r4
   115fa:	f7fc fff1 	bl	e5e0 <_Bfree>
   115fe:	4631      	mov	r1, r6
   11600:	4620      	mov	r0, r4
   11602:	f7fc ffed 	bl	e5e0 <_Bfree>
   11606:	4629      	mov	r1, r5
   11608:	4620      	mov	r0, r4
   1160a:	f7fc ffe9 	bl	e5e0 <_Bfree>
   1160e:	2300      	movs	r3, #0
   11610:	f889 3000 	strb.w	r3, [r9]
   11614:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11616:	9a07      	ldr	r2, [sp, #28]
   11618:	601a      	str	r2, [r3, #0]
   1161a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1161c:	2b00      	cmp	r3, #0
   1161e:	f43f ac77 	beq.w	10f10 <_dtoa_r+0x78>
   11622:	9803      	ldr	r0, [sp, #12]
   11624:	f8c3 9000 	str.w	r9, [r3]
   11628:	b019      	add	sp, #100	; 0x64
   1162a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1162e:	2301      	movs	r3, #1
   11630:	1bbf      	subs	r7, r7, r6
   11632:	930e      	str	r3, [sp, #56]	; 0x38
   11634:	1e7b      	subs	r3, r7, #1
   11636:	9306      	str	r3, [sp, #24]
   11638:	f57f acd9 	bpl.w	10fee <_dtoa_r+0x156>
   1163c:	f1c7 0301 	rsb	r3, r7, #1
   11640:	9309      	str	r3, [sp, #36]	; 0x24
   11642:	2300      	movs	r3, #0
   11644:	9306      	str	r3, [sp, #24]
   11646:	e4d4      	b.n	10ff2 <_dtoa_r+0x15a>
   11648:	4658      	mov	r0, fp
   1164a:	f7fb f9c3 	bl	c9d4 <__aeabi_i2d>
   1164e:	4642      	mov	r2, r8
   11650:	464b      	mov	r3, r9
   11652:	f7fb fa7f 	bl	cb54 <__aeabi_dcmpeq>
   11656:	2800      	cmp	r0, #0
   11658:	f47f acb1 	bne.w	10fbe <_dtoa_r+0x126>
   1165c:	f10b 3bff 	add.w	fp, fp, #4294967295
   11660:	e4ad      	b.n	10fbe <_dtoa_r+0x126>
   11662:	4b1a      	ldr	r3, [pc, #104]	; (116cc <_dtoa_r+0x834>)
   11664:	9303      	str	r3, [sp, #12]
   11666:	9803      	ldr	r0, [sp, #12]
   11668:	b019      	add	sp, #100	; 0x64
   1166a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1166e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   11672:	9f09      	ldr	r7, [sp, #36]	; 0x24
   11674:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11676:	e716      	b.n	114a6 <_dtoa_r+0x60e>
   11678:	f1c0 001c 	rsb	r0, r0, #28
   1167c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1167e:	4403      	add	r3, r0
   11680:	9309      	str	r3, [sp, #36]	; 0x24
   11682:	9b06      	ldr	r3, [sp, #24]
   11684:	4403      	add	r3, r0
   11686:	4407      	add	r7, r0
   11688:	9306      	str	r3, [sp, #24]
   1168a:	e74a      	b.n	11522 <_dtoa_r+0x68a>
   1168c:	2601      	movs	r6, #1
   1168e:	e4c7      	b.n	11020 <_dtoa_r+0x188>
   11690:	f1c3 0320 	rsb	r3, r3, #32
   11694:	fa08 f003 	lsl.w	r0, r8, r3
   11698:	e45e      	b.n	10f58 <_dtoa_r+0xc0>
   1169a:	4601      	mov	r1, r0
   1169c:	465a      	mov	r2, fp
   1169e:	4620      	mov	r0, r4
   116a0:	f7fd f924 	bl	e8ec <__pow5mult>
   116a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   116a6:	2b01      	cmp	r3, #1
   116a8:	4682      	mov	sl, r0
   116aa:	f340 81ba 	ble.w	11a22 <_dtoa_r+0xb8a>
   116ae:	f04f 0900 	mov.w	r9, #0
   116b2:	f8da 3010 	ldr.w	r3, [sl, #16]
   116b6:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   116ba:	6918      	ldr	r0, [r3, #16]
   116bc:	f7fc ffea 	bl	e694 <__hi0bits>
   116c0:	f1c0 0020 	rsb	r0, r0, #32
   116c4:	e720      	b.n	11508 <_dtoa_r+0x670>
   116c6:	bf00      	nop
   116c8:	40240000 	.word	0x40240000
   116cc:	000141ec 	.word	0x000141ec
   116d0:	4631      	mov	r1, r6
   116d2:	2300      	movs	r3, #0
   116d4:	220a      	movs	r2, #10
   116d6:	4620      	mov	r0, r4
   116d8:	f7fc ff8c 	bl	e5f4 <__multadd>
   116dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   116de:	2b00      	cmp	r3, #0
   116e0:	4606      	mov	r6, r0
   116e2:	f340 82f3 	ble.w	11ccc <_dtoa_r+0xe34>
   116e6:	e9cd 8307 	strd	r8, r3, [sp, #28]
   116ea:	2f00      	cmp	r7, #0
   116ec:	f300 811a 	bgt.w	11924 <_dtoa_r+0xa8c>
   116f0:	f1b9 0f00 	cmp.w	r9, #0
   116f4:	f040 81e3 	bne.w	11abe <_dtoa_r+0xc26>
   116f8:	46b0      	mov	r8, r6
   116fa:	9b04      	ldr	r3, [sp, #16]
   116fc:	9f03      	ldr	r7, [sp, #12]
   116fe:	9908      	ldr	r1, [sp, #32]
   11700:	f003 0201 	and.w	r2, r3, #1
   11704:	1e7b      	subs	r3, r7, #1
   11706:	4419      	add	r1, r3
   11708:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1170a:	920c      	str	r2, [sp, #48]	; 0x30
   1170c:	4313      	orrs	r3, r2
   1170e:	9109      	str	r1, [sp, #36]	; 0x24
   11710:	930a      	str	r3, [sp, #40]	; 0x28
   11712:	4651      	mov	r1, sl
   11714:	4628      	mov	r0, r5
   11716:	f7ff fb2b 	bl	10d70 <quorem>
   1171a:	4631      	mov	r1, r6
   1171c:	4683      	mov	fp, r0
   1171e:	4628      	mov	r0, r5
   11720:	f7fd f9bc 	bl	ea9c <__mcmp>
   11724:	4642      	mov	r2, r8
   11726:	4651      	mov	r1, sl
   11728:	4681      	mov	r9, r0
   1172a:	4620      	mov	r0, r4
   1172c:	f7fd f9d6 	bl	eadc <__mdiff>
   11730:	68c2      	ldr	r2, [r0, #12]
   11732:	4601      	mov	r1, r0
   11734:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   11738:	2a00      	cmp	r2, #0
   1173a:	d142      	bne.n	117c2 <_dtoa_r+0x92a>
   1173c:	9006      	str	r0, [sp, #24]
   1173e:	4628      	mov	r0, r5
   11740:	9308      	str	r3, [sp, #32]
   11742:	f7fd f9ab 	bl	ea9c <__mcmp>
   11746:	9906      	ldr	r1, [sp, #24]
   11748:	9004      	str	r0, [sp, #16]
   1174a:	4620      	mov	r0, r4
   1174c:	f7fc ff48 	bl	e5e0 <_Bfree>
   11750:	9a04      	ldr	r2, [sp, #16]
   11752:	9b08      	ldr	r3, [sp, #32]
   11754:	b91a      	cbnz	r2, 1175e <_dtoa_r+0x8c6>
   11756:	990a      	ldr	r1, [sp, #40]	; 0x28
   11758:	2900      	cmp	r1, #0
   1175a:	f000 82a9 	beq.w	11cb0 <_dtoa_r+0xe18>
   1175e:	f1b9 0f00 	cmp.w	r9, #0
   11762:	f2c0 8171 	blt.w	11a48 <_dtoa_r+0xbb0>
   11766:	9922      	ldr	r1, [sp, #136]	; 0x88
   11768:	ea49 0901 	orr.w	r9, r9, r1
   1176c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1176e:	ea51 0909 	orrs.w	r9, r1, r9
   11772:	f000 8169 	beq.w	11a48 <_dtoa_r+0xbb0>
   11776:	2a00      	cmp	r2, #0
   11778:	f300 81bc 	bgt.w	11af4 <_dtoa_r+0xc5c>
   1177c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1177e:	703b      	strb	r3, [r7, #0]
   11780:	f107 0901 	add.w	r9, r7, #1
   11784:	4297      	cmp	r7, r2
   11786:	46cb      	mov	fp, r9
   11788:	f000 81ba 	beq.w	11b00 <_dtoa_r+0xc68>
   1178c:	4629      	mov	r1, r5
   1178e:	2300      	movs	r3, #0
   11790:	220a      	movs	r2, #10
   11792:	4620      	mov	r0, r4
   11794:	f7fc ff2e 	bl	e5f4 <__multadd>
   11798:	4546      	cmp	r6, r8
   1179a:	4605      	mov	r5, r0
   1179c:	4631      	mov	r1, r6
   1179e:	f04f 0300 	mov.w	r3, #0
   117a2:	f04f 020a 	mov.w	r2, #10
   117a6:	4620      	mov	r0, r4
   117a8:	d012      	beq.n	117d0 <_dtoa_r+0x938>
   117aa:	f7fc ff23 	bl	e5f4 <__multadd>
   117ae:	4641      	mov	r1, r8
   117b0:	4606      	mov	r6, r0
   117b2:	2300      	movs	r3, #0
   117b4:	220a      	movs	r2, #10
   117b6:	4620      	mov	r0, r4
   117b8:	f7fc ff1c 	bl	e5f4 <__multadd>
   117bc:	464f      	mov	r7, r9
   117be:	4680      	mov	r8, r0
   117c0:	e7a7      	b.n	11712 <_dtoa_r+0x87a>
   117c2:	4620      	mov	r0, r4
   117c4:	9304      	str	r3, [sp, #16]
   117c6:	f7fc ff0b 	bl	e5e0 <_Bfree>
   117ca:	9b04      	ldr	r3, [sp, #16]
   117cc:	2201      	movs	r2, #1
   117ce:	e7c6      	b.n	1175e <_dtoa_r+0x8c6>
   117d0:	f7fc ff10 	bl	e5f4 <__multadd>
   117d4:	464f      	mov	r7, r9
   117d6:	4606      	mov	r6, r0
   117d8:	4680      	mov	r8, r0
   117da:	e79a      	b.n	11712 <_dtoa_r+0x87a>
   117dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   117de:	2b02      	cmp	r3, #2
   117e0:	dc79      	bgt.n	118d6 <_dtoa_r+0xa3e>
   117e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   117e4:	2b00      	cmp	r3, #0
   117e6:	d180      	bne.n	116ea <_dtoa_r+0x852>
   117e8:	9b07      	ldr	r3, [sp, #28]
   117ea:	4651      	mov	r1, sl
   117ec:	3301      	adds	r3, #1
   117ee:	4628      	mov	r0, r5
   117f0:	9307      	str	r3, [sp, #28]
   117f2:	f7ff fabd 	bl	10d70 <quorem>
   117f6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   117fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
   117fe:	f80b 3b01 	strb.w	r3, [fp], #1
   11802:	2700      	movs	r7, #0
   11804:	e6d0      	b.n	115a8 <_dtoa_r+0x710>
   11806:	4651      	mov	r1, sl
   11808:	4628      	mov	r0, r5
   1180a:	f7fd f947 	bl	ea9c <__mcmp>
   1180e:	2800      	cmp	r0, #0
   11810:	f6bf ae9d 	bge.w	1154e <_dtoa_r+0x6b6>
   11814:	4629      	mov	r1, r5
   11816:	2300      	movs	r3, #0
   11818:	220a      	movs	r2, #10
   1181a:	4620      	mov	r0, r4
   1181c:	f7fc feea 	bl	e5f4 <__multadd>
   11820:	9b07      	ldr	r3, [sp, #28]
   11822:	f103 38ff 	add.w	r8, r3, #4294967295
   11826:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11828:	4605      	mov	r5, r0
   1182a:	2b00      	cmp	r3, #0
   1182c:	f47f af50 	bne.w	116d0 <_dtoa_r+0x838>
   11830:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11832:	2b00      	cmp	r3, #0
   11834:	f340 8243 	ble.w	11cbe <_dtoa_r+0xe26>
   11838:	9308      	str	r3, [sp, #32]
   1183a:	e693      	b.n	11564 <_dtoa_r+0x6cc>
   1183c:	4bb6      	ldr	r3, [pc, #728]	; (11b18 <_dtoa_r+0xc80>)
   1183e:	9303      	str	r3, [sp, #12]
   11840:	3303      	adds	r3, #3
   11842:	e408      	b.n	11056 <_dtoa_r+0x1be>
   11844:	201c      	movs	r0, #28
   11846:	e719      	b.n	1167c <_dtoa_r+0x7e4>
   11848:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1184c:	2900      	cmp	r1, #0
   1184e:	f47f ae54 	bne.w	114fa <_dtoa_r+0x662>
   11852:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11856:	2b00      	cmp	r3, #0
   11858:	f47f ae4f 	bne.w	114fa <_dtoa_r+0x662>
   1185c:	4baf      	ldr	r3, [pc, #700]	; (11b1c <_dtoa_r+0xc84>)
   1185e:	4013      	ands	r3, r2
   11860:	2b00      	cmp	r3, #0
   11862:	f000 820b 	beq.w	11c7c <_dtoa_r+0xde4>
   11866:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11868:	3301      	adds	r3, #1
   1186a:	9309      	str	r3, [sp, #36]	; 0x24
   1186c:	9b06      	ldr	r3, [sp, #24]
   1186e:	3301      	adds	r3, #1
   11870:	9306      	str	r3, [sp, #24]
   11872:	f04f 0901 	mov.w	r9, #1
   11876:	e642      	b.n	114fe <_dtoa_r+0x666>
   11878:	2301      	movs	r3, #1
   1187a:	930c      	str	r3, [sp, #48]	; 0x30
   1187c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1187e:	9a07      	ldr	r2, [sp, #28]
   11880:	4413      	add	r3, r2
   11882:	9312      	str	r3, [sp, #72]	; 0x48
   11884:	3301      	adds	r3, #1
   11886:	2b01      	cmp	r3, #1
   11888:	461f      	mov	r7, r3
   1188a:	9308      	str	r3, [sp, #32]
   1188c:	bfb8      	it	lt
   1188e:	2701      	movlt	r7, #1
   11890:	2100      	movs	r1, #0
   11892:	2f17      	cmp	r7, #23
   11894:	63e1      	str	r1, [r4, #60]	; 0x3c
   11896:	f77f ac2f 	ble.w	110f8 <_dtoa_r+0x260>
   1189a:	2201      	movs	r2, #1
   1189c:	2304      	movs	r3, #4
   1189e:	005b      	lsls	r3, r3, #1
   118a0:	f103 0014 	add.w	r0, r3, #20
   118a4:	42b8      	cmp	r0, r7
   118a6:	4611      	mov	r1, r2
   118a8:	f102 0201 	add.w	r2, r2, #1
   118ac:	d9f7      	bls.n	1189e <_dtoa_r+0xa06>
   118ae:	63e1      	str	r1, [r4, #60]	; 0x3c
   118b0:	e422      	b.n	110f8 <_dtoa_r+0x260>
   118b2:	2301      	movs	r3, #1
   118b4:	930c      	str	r3, [sp, #48]	; 0x30
   118b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   118b8:	2b00      	cmp	r3, #0
   118ba:	dd59      	ble.n	11970 <_dtoa_r+0xad8>
   118bc:	9312      	str	r3, [sp, #72]	; 0x48
   118be:	9308      	str	r3, [sp, #32]
   118c0:	461f      	mov	r7, r3
   118c2:	e7e5      	b.n	11890 <_dtoa_r+0x9f8>
   118c4:	2300      	movs	r3, #0
   118c6:	930c      	str	r3, [sp, #48]	; 0x30
   118c8:	e7d8      	b.n	1187c <_dtoa_r+0x9e4>
   118ca:	2300      	movs	r3, #0
   118cc:	930c      	str	r3, [sp, #48]	; 0x30
   118ce:	e7f2      	b.n	118b6 <_dtoa_r+0xa1e>
   118d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   118d2:	e9cd 8307 	strd	r8, r3, [sp, #28]
   118d6:	9b08      	ldr	r3, [sp, #32]
   118d8:	2b00      	cmp	r3, #0
   118da:	f47f ad54 	bne.w	11386 <_dtoa_r+0x4ee>
   118de:	4651      	mov	r1, sl
   118e0:	2205      	movs	r2, #5
   118e2:	4620      	mov	r0, r4
   118e4:	f7fc fe86 	bl	e5f4 <__multadd>
   118e8:	4601      	mov	r1, r0
   118ea:	4682      	mov	sl, r0
   118ec:	4628      	mov	r0, r5
   118ee:	f7fd f8d5 	bl	ea9c <__mcmp>
   118f2:	2800      	cmp	r0, #0
   118f4:	f77f ad47 	ble.w	11386 <_dtoa_r+0x4ee>
   118f8:	9b03      	ldr	r3, [sp, #12]
   118fa:	9f07      	ldr	r7, [sp, #28]
   118fc:	2231      	movs	r2, #49	; 0x31
   118fe:	4698      	mov	r8, r3
   11900:	f803 2b01 	strb.w	r2, [r3], #1
   11904:	3701      	adds	r7, #1
   11906:	9303      	str	r3, [sp, #12]
   11908:	4651      	mov	r1, sl
   1190a:	4620      	mov	r0, r4
   1190c:	f7fc fe68 	bl	e5e0 <_Bfree>
   11910:	1c7b      	adds	r3, r7, #1
   11912:	f8dd 900c 	ldr.w	r9, [sp, #12]
   11916:	9307      	str	r3, [sp, #28]
   11918:	f8cd 800c 	str.w	r8, [sp, #12]
   1191c:	2e00      	cmp	r6, #0
   1191e:	f47f ae6e 	bne.w	115fe <_dtoa_r+0x766>
   11922:	e670      	b.n	11606 <_dtoa_r+0x76e>
   11924:	4631      	mov	r1, r6
   11926:	463a      	mov	r2, r7
   11928:	4620      	mov	r0, r4
   1192a:	f7fd f83f 	bl	e9ac <__lshift>
   1192e:	4606      	mov	r6, r0
   11930:	e6de      	b.n	116f0 <_dtoa_r+0x858>
   11932:	eba3 0808 	sub.w	r8, r3, r8
   11936:	e5a6      	b.n	11486 <_dtoa_r+0x5ee>
   11938:	4631      	mov	r1, r6
   1193a:	4642      	mov	r2, r8
   1193c:	4620      	mov	r0, r4
   1193e:	f7fc ffd5 	bl	e8ec <__pow5mult>
   11942:	462a      	mov	r2, r5
   11944:	4601      	mov	r1, r0
   11946:	4606      	mov	r6, r0
   11948:	4620      	mov	r0, r4
   1194a:	f7fc ff21 	bl	e790 <__multiply>
   1194e:	4629      	mov	r1, r5
   11950:	4605      	mov	r5, r0
   11952:	4620      	mov	r0, r4
   11954:	f7fc fe44 	bl	e5e0 <_Bfree>
   11958:	e5bd      	b.n	114d6 <_dtoa_r+0x63e>
   1195a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   1195e:	f04f 0a02 	mov.w	sl, #2
   11962:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   11966:	f7ff bbf4 	b.w	11152 <_dtoa_r+0x2ba>
   1196a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   1196e:	e685      	b.n	1167c <_dtoa_r+0x7e4>
   11970:	2301      	movs	r3, #1
   11972:	9323      	str	r3, [sp, #140]	; 0x8c
   11974:	9308      	str	r3, [sp, #32]
   11976:	f7ff bbbb 	b.w	110f0 <_dtoa_r+0x258>
   1197a:	d103      	bne.n	11984 <_dtoa_r+0xaec>
   1197c:	9b04      	ldr	r3, [sp, #16]
   1197e:	07db      	lsls	r3, r3, #31
   11980:	f53f ae1f 	bmi.w	115c2 <_dtoa_r+0x72a>
   11984:	46d9      	mov	r9, fp
   11986:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   1198a:	2b30      	cmp	r3, #48	; 0x30
   1198c:	d0fa      	beq.n	11984 <_dtoa_r+0xaec>
   1198e:	e62a      	b.n	115e6 <_dtoa_r+0x74e>
   11990:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11992:	2a00      	cmp	r2, #0
   11994:	f000 812d 	beq.w	11bf2 <_dtoa_r+0xd5a>
   11998:	f203 4333 	addw	r3, r3, #1075	; 0x433
   1199c:	9a06      	ldr	r2, [sp, #24]
   1199e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   119a2:	441a      	add	r2, r3
   119a4:	9206      	str	r2, [sp, #24]
   119a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   119a8:	4617      	mov	r7, r2
   119aa:	441a      	add	r2, r3
   119ac:	9209      	str	r2, [sp, #36]	; 0x24
   119ae:	e575      	b.n	1149c <_dtoa_r+0x604>
   119b0:	9b07      	ldr	r3, [sp, #28]
   119b2:	9a03      	ldr	r2, [sp, #12]
   119b4:	3301      	adds	r3, #1
   119b6:	9307      	str	r3, [sp, #28]
   119b8:	2331      	movs	r3, #49	; 0x31
   119ba:	7013      	strb	r3, [r2, #0]
   119bc:	e613      	b.n	115e6 <_dtoa_r+0x74e>
   119be:	f04f 0a00 	mov.w	sl, #0
   119c2:	4656      	mov	r6, sl
   119c4:	e4df      	b.n	11386 <_dtoa_r+0x4ee>
   119c6:	900e      	str	r0, [sp, #56]	; 0x38
   119c8:	e638      	b.n	1163c <_dtoa_r+0x7a4>
   119ca:	f000 813d 	beq.w	11c48 <_dtoa_r+0xdb0>
   119ce:	9a07      	ldr	r2, [sp, #28]
   119d0:	4b53      	ldr	r3, [pc, #332]	; (11b20 <_dtoa_r+0xc88>)
   119d2:	4256      	negs	r6, r2
   119d4:	f006 020f 	and.w	r2, r6, #15
   119d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   119dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   119e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   119e4:	f001 fe98 	bl	13718 <__aeabi_dmul>
   119e8:	1136      	asrs	r6, r6, #4
   119ea:	4680      	mov	r8, r0
   119ec:	4689      	mov	r9, r1
   119ee:	f000 8178 	beq.w	11ce2 <_dtoa_r+0xe4a>
   119f2:	4f4c      	ldr	r7, [pc, #304]	; (11b24 <_dtoa_r+0xc8c>)
   119f4:	2300      	movs	r3, #0
   119f6:	f04f 0a02 	mov.w	sl, #2
   119fa:	07f2      	lsls	r2, r6, #31
   119fc:	d506      	bpl.n	11a0c <_dtoa_r+0xb74>
   119fe:	e9d7 2300 	ldrd	r2, r3, [r7]
   11a02:	f001 fe89 	bl	13718 <__aeabi_dmul>
   11a06:	f10a 0a01 	add.w	sl, sl, #1
   11a0a:	2301      	movs	r3, #1
   11a0c:	1076      	asrs	r6, r6, #1
   11a0e:	f107 0708 	add.w	r7, r7, #8
   11a12:	d1f2      	bne.n	119fa <_dtoa_r+0xb62>
   11a14:	2b00      	cmp	r3, #0
   11a16:	f43f abbb 	beq.w	11190 <_dtoa_r+0x2f8>
   11a1a:	4680      	mov	r8, r0
   11a1c:	4689      	mov	r9, r1
   11a1e:	f7ff bbb7 	b.w	11190 <_dtoa_r+0x2f8>
   11a22:	9b04      	ldr	r3, [sp, #16]
   11a24:	2b00      	cmp	r3, #0
   11a26:	f47f ae42 	bne.w	116ae <_dtoa_r+0x816>
   11a2a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11a2e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11a32:	2b00      	cmp	r3, #0
   11a34:	f43f af12 	beq.w	1185c <_dtoa_r+0x9c4>
   11a38:	e639      	b.n	116ae <_dtoa_r+0x816>
   11a3a:	4629      	mov	r1, r5
   11a3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11a3e:	4620      	mov	r0, r4
   11a40:	f7fc ff54 	bl	e8ec <__pow5mult>
   11a44:	4605      	mov	r5, r0
   11a46:	e54b      	b.n	114e0 <_dtoa_r+0x648>
   11a48:	2a00      	cmp	r2, #0
   11a4a:	dd12      	ble.n	11a72 <_dtoa_r+0xbda>
   11a4c:	4629      	mov	r1, r5
   11a4e:	2201      	movs	r2, #1
   11a50:	4620      	mov	r0, r4
   11a52:	9304      	str	r3, [sp, #16]
   11a54:	f7fc ffaa 	bl	e9ac <__lshift>
   11a58:	4651      	mov	r1, sl
   11a5a:	4605      	mov	r5, r0
   11a5c:	f7fd f81e 	bl	ea9c <__mcmp>
   11a60:	2800      	cmp	r0, #0
   11a62:	9b04      	ldr	r3, [sp, #16]
   11a64:	f340 8118 	ble.w	11c98 <_dtoa_r+0xe00>
   11a68:	2b39      	cmp	r3, #57	; 0x39
   11a6a:	f000 80f9 	beq.w	11c60 <_dtoa_r+0xdc8>
   11a6e:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11a72:	46b9      	mov	r9, r7
   11a74:	f809 3b01 	strb.w	r3, [r9], #1
   11a78:	9b07      	ldr	r3, [sp, #28]
   11a7a:	3301      	adds	r3, #1
   11a7c:	4637      	mov	r7, r6
   11a7e:	9307      	str	r3, [sp, #28]
   11a80:	4646      	mov	r6, r8
   11a82:	e5b0      	b.n	115e6 <_dtoa_r+0x74e>
   11a84:	9509      	str	r5, [sp, #36]	; 0x24
   11a86:	9c06      	ldr	r4, [sp, #24]
   11a88:	9d04      	ldr	r5, [sp, #16]
   11a8a:	4602      	mov	r2, r0
   11a8c:	460b      	mov	r3, r1
   11a8e:	f7fa fe55 	bl	c73c <__adddf3>
   11a92:	4652      	mov	r2, sl
   11a94:	465b      	mov	r3, fp
   11a96:	4680      	mov	r8, r0
   11a98:	4689      	mov	r9, r1
   11a9a:	f7fb f883 	bl	cba4 <__aeabi_dcmpgt>
   11a9e:	b960      	cbnz	r0, 11aba <_dtoa_r+0xc22>
   11aa0:	4652      	mov	r2, sl
   11aa2:	465b      	mov	r3, fp
   11aa4:	4640      	mov	r0, r8
   11aa6:	4649      	mov	r1, r9
   11aa8:	f7fb f854 	bl	cb54 <__aeabi_dcmpeq>
   11aac:	2800      	cmp	r0, #0
   11aae:	f43f acce 	beq.w	1144e <_dtoa_r+0x5b6>
   11ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11ab4:	07d9      	lsls	r1, r3, #31
   11ab6:	f57f acca 	bpl.w	1144e <_dtoa_r+0x5b6>
   11aba:	9a03      	ldr	r2, [sp, #12]
   11abc:	e404      	b.n	112c8 <_dtoa_r+0x430>
   11abe:	6871      	ldr	r1, [r6, #4]
   11ac0:	4620      	mov	r0, r4
   11ac2:	f7fc fd67 	bl	e594 <_Balloc>
   11ac6:	4607      	mov	r7, r0
   11ac8:	2800      	cmp	r0, #0
   11aca:	f000 810e 	beq.w	11cea <_dtoa_r+0xe52>
   11ace:	6933      	ldr	r3, [r6, #16]
   11ad0:	3302      	adds	r3, #2
   11ad2:	009a      	lsls	r2, r3, #2
   11ad4:	f106 010c 	add.w	r1, r6, #12
   11ad8:	300c      	adds	r0, #12
   11ada:	f7f8 f86b 	bl	9bb4 <memcpy>
   11ade:	4639      	mov	r1, r7
   11ae0:	2201      	movs	r2, #1
   11ae2:	4620      	mov	r0, r4
   11ae4:	f7fc ff62 	bl	e9ac <__lshift>
   11ae8:	4680      	mov	r8, r0
   11aea:	e606      	b.n	116fa <_dtoa_r+0x862>
   11aec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   11af0:	1a9f      	subs	r7, r3, r2
   11af2:	e4d3      	b.n	1149c <_dtoa_r+0x604>
   11af4:	2b39      	cmp	r3, #57	; 0x39
   11af6:	f000 80b3 	beq.w	11c60 <_dtoa_r+0xdc8>
   11afa:	46b9      	mov	r9, r7
   11afc:	3301      	adds	r3, #1
   11afe:	e7b9      	b.n	11a74 <_dtoa_r+0xbdc>
   11b00:	9a07      	ldr	r2, [sp, #28]
   11b02:	3201      	adds	r2, #1
   11b04:	4637      	mov	r7, r6
   11b06:	9207      	str	r2, [sp, #28]
   11b08:	4646      	mov	r6, r8
   11b0a:	e54d      	b.n	115a8 <_dtoa_r+0x710>
   11b0c:	4629      	mov	r1, r5
   11b0e:	4620      	mov	r0, r4
   11b10:	f7fc feec 	bl	e8ec <__pow5mult>
   11b14:	4605      	mov	r5, r0
   11b16:	e4e3      	b.n	114e0 <_dtoa_r+0x648>
   11b18:	000158d8 	.word	0x000158d8
   11b1c:	7ff00000 	.word	0x7ff00000
   11b20:	00015760 	.word	0x00015760
   11b24:	00015738 	.word	0x00015738
   11b28:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   11b2c:	4981      	ldr	r1, [pc, #516]	; (11d34 <_dtoa_r+0xe9c>)
   11b2e:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   11b32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11b36:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   11b3a:	f001 fded 	bl	13718 <__aeabi_dmul>
   11b3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11b42:	4649      	mov	r1, r9
   11b44:	4640      	mov	r0, r8
   11b46:	f001 fff9 	bl	13b3c <__aeabi_d2iz>
   11b4a:	4606      	mov	r6, r0
   11b4c:	f7fa ff42 	bl	c9d4 <__aeabi_i2d>
   11b50:	460b      	mov	r3, r1
   11b52:	4602      	mov	r2, r0
   11b54:	4649      	mov	r1, r9
   11b56:	4640      	mov	r0, r8
   11b58:	f7fa fdee 	bl	c738 <__aeabi_dsub>
   11b5c:	9f03      	ldr	r7, [sp, #12]
   11b5e:	4653      	mov	r3, sl
   11b60:	3630      	adds	r6, #48	; 0x30
   11b62:	2b01      	cmp	r3, #1
   11b64:	f807 6b01 	strb.w	r6, [r7], #1
   11b68:	4680      	mov	r8, r0
   11b6a:	4689      	mov	r9, r1
   11b6c:	f000 80b7 	beq.w	11cde <_dtoa_r+0xe46>
   11b70:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   11b72:	9b03      	ldr	r3, [sp, #12]
   11b74:	441e      	add	r6, r3
   11b76:	4b70      	ldr	r3, [pc, #448]	; (11d38 <_dtoa_r+0xea0>)
   11b78:	2200      	movs	r2, #0
   11b7a:	4640      	mov	r0, r8
   11b7c:	4649      	mov	r1, r9
   11b7e:	f001 fdcb 	bl	13718 <__aeabi_dmul>
   11b82:	4689      	mov	r9, r1
   11b84:	4680      	mov	r8, r0
   11b86:	f001 ffd9 	bl	13b3c <__aeabi_d2iz>
   11b8a:	4682      	mov	sl, r0
   11b8c:	f7fa ff22 	bl	c9d4 <__aeabi_i2d>
   11b90:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   11b94:	4602      	mov	r2, r0
   11b96:	460b      	mov	r3, r1
   11b98:	4640      	mov	r0, r8
   11b9a:	4649      	mov	r1, r9
   11b9c:	f7fa fdcc 	bl	c738 <__aeabi_dsub>
   11ba0:	f807 ab01 	strb.w	sl, [r7], #1
   11ba4:	42be      	cmp	r6, r7
   11ba6:	4680      	mov	r8, r0
   11ba8:	4689      	mov	r9, r1
   11baa:	d1e4      	bne.n	11b76 <_dtoa_r+0xcde>
   11bac:	4b63      	ldr	r3, [pc, #396]	; (11d3c <_dtoa_r+0xea4>)
   11bae:	2200      	movs	r2, #0
   11bb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11bb4:	f7fa fdc2 	bl	c73c <__adddf3>
   11bb8:	4642      	mov	r2, r8
   11bba:	464b      	mov	r3, r9
   11bbc:	f7fa ffd4 	bl	cb68 <__aeabi_dcmplt>
   11bc0:	2800      	cmp	r0, #0
   11bc2:	d164      	bne.n	11c8e <_dtoa_r+0xdf6>
   11bc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11bc8:	495c      	ldr	r1, [pc, #368]	; (11d3c <_dtoa_r+0xea4>)
   11bca:	2000      	movs	r0, #0
   11bcc:	f7fa fdb4 	bl	c738 <__aeabi_dsub>
   11bd0:	4642      	mov	r2, r8
   11bd2:	464b      	mov	r3, r9
   11bd4:	f7fa ffe6 	bl	cba4 <__aeabi_dcmpgt>
   11bd8:	2800      	cmp	r0, #0
   11bda:	f43f abad 	beq.w	11338 <_dtoa_r+0x4a0>
   11bde:	46b1      	mov	r9, r6
   11be0:	3e01      	subs	r6, #1
   11be2:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   11be6:	2b30      	cmp	r3, #48	; 0x30
   11be8:	d0f9      	beq.n	11bde <_dtoa_r+0xd46>
   11bea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11bec:	3301      	adds	r3, #1
   11bee:	9307      	str	r3, [sp, #28]
   11bf0:	e509      	b.n	11606 <_dtoa_r+0x76e>
   11bf2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11bf4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   11bf8:	e6d0      	b.n	1199c <_dtoa_r+0xb04>
   11bfa:	9b08      	ldr	r3, [sp, #32]
   11bfc:	2b00      	cmp	r3, #0
   11bfe:	f43f ab6f 	beq.w	112e0 <_dtoa_r+0x448>
   11c02:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11c04:	2b00      	cmp	r3, #0
   11c06:	f77f ab97 	ble.w	11338 <_dtoa_r+0x4a0>
   11c0a:	9a07      	ldr	r2, [sp, #28]
   11c0c:	3a01      	subs	r2, #1
   11c0e:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   11c12:	4640      	mov	r0, r8
   11c14:	4b48      	ldr	r3, [pc, #288]	; (11d38 <_dtoa_r+0xea0>)
   11c16:	2200      	movs	r2, #0
   11c18:	4649      	mov	r1, r9
   11c1a:	f001 fd7d 	bl	13718 <__aeabi_dmul>
   11c1e:	4680      	mov	r8, r0
   11c20:	4689      	mov	r9, r1
   11c22:	f10a 0001 	add.w	r0, sl, #1
   11c26:	f7fa fed5 	bl	c9d4 <__aeabi_i2d>
   11c2a:	4642      	mov	r2, r8
   11c2c:	464b      	mov	r3, r9
   11c2e:	f001 fd73 	bl	13718 <__aeabi_dmul>
   11c32:	4b43      	ldr	r3, [pc, #268]	; (11d40 <_dtoa_r+0xea8>)
   11c34:	2200      	movs	r2, #0
   11c36:	f7fa fd81 	bl	c73c <__adddf3>
   11c3a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   11c3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11c42:	9311      	str	r3, [sp, #68]	; 0x44
   11c44:	f7ff bac7 	b.w	111d6 <_dtoa_r+0x33e>
   11c48:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   11c4c:	f04f 0a02 	mov.w	sl, #2
   11c50:	f7ff ba9e 	b.w	11190 <_dtoa_r+0x2f8>
   11c54:	9b07      	ldr	r3, [sp, #28]
   11c56:	3301      	adds	r3, #1
   11c58:	9307      	str	r3, [sp, #28]
   11c5a:	2331      	movs	r3, #49	; 0x31
   11c5c:	f7ff bb3b 	b.w	112d6 <_dtoa_r+0x43e>
   11c60:	9b07      	ldr	r3, [sp, #28]
   11c62:	46bb      	mov	fp, r7
   11c64:	3301      	adds	r3, #1
   11c66:	9307      	str	r3, [sp, #28]
   11c68:	2339      	movs	r3, #57	; 0x39
   11c6a:	4637      	mov	r7, r6
   11c6c:	f80b 3b01 	strb.w	r3, [fp], #1
   11c70:	4646      	mov	r6, r8
   11c72:	e4a8      	b.n	115c6 <_dtoa_r+0x72e>
   11c74:	f04f 0a00 	mov.w	sl, #0
   11c78:	4656      	mov	r6, sl
   11c7a:	e63d      	b.n	118f8 <_dtoa_r+0xa60>
   11c7c:	4699      	mov	r9, r3
   11c7e:	e43e      	b.n	114fe <_dtoa_r+0x666>
   11c80:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11c82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11c84:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11c86:	3301      	adds	r3, #1
   11c88:	9307      	str	r3, [sp, #28]
   11c8a:	46b1      	mov	r9, r6
   11c8c:	e4bb      	b.n	11606 <_dtoa_r+0x76e>
   11c8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11c90:	9a03      	ldr	r2, [sp, #12]
   11c92:	9307      	str	r3, [sp, #28]
   11c94:	f7ff bb18 	b.w	112c8 <_dtoa_r+0x430>
   11c98:	f47f aeeb 	bne.w	11a72 <_dtoa_r+0xbda>
   11c9c:	07da      	lsls	r2, r3, #31
   11c9e:	f57f aee8 	bpl.w	11a72 <_dtoa_r+0xbda>
   11ca2:	e6e1      	b.n	11a68 <_dtoa_r+0xbd0>
   11ca4:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   11ca8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11caa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11cac:	f7ff bb44 	b.w	11338 <_dtoa_r+0x4a0>
   11cb0:	2b39      	cmp	r3, #57	; 0x39
   11cb2:	d0d5      	beq.n	11c60 <_dtoa_r+0xdc8>
   11cb4:	f1b9 0f00 	cmp.w	r9, #0
   11cb8:	f73f aed9 	bgt.w	11a6e <_dtoa_r+0xbd6>
   11cbc:	e6d9      	b.n	11a72 <_dtoa_r+0xbda>
   11cbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11cc0:	2b02      	cmp	r3, #2
   11cc2:	f73f ae05 	bgt.w	118d0 <_dtoa_r+0xa38>
   11cc6:	f8cd 801c 	str.w	r8, [sp, #28]
   11cca:	e58d      	b.n	117e8 <_dtoa_r+0x950>
   11ccc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11cce:	2b02      	cmp	r3, #2
   11cd0:	f73f adfe 	bgt.w	118d0 <_dtoa_r+0xa38>
   11cd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11cd6:	f8cd 801c 	str.w	r8, [sp, #28]
   11cda:	9308      	str	r3, [sp, #32]
   11cdc:	e505      	b.n	116ea <_dtoa_r+0x852>
   11cde:	463e      	mov	r6, r7
   11ce0:	e764      	b.n	11bac <_dtoa_r+0xd14>
   11ce2:	f04f 0a02 	mov.w	sl, #2
   11ce6:	f7ff ba53 	b.w	11190 <_dtoa_r+0x2f8>
   11cea:	4b16      	ldr	r3, [pc, #88]	; (11d44 <_dtoa_r+0xeac>)
   11cec:	4816      	ldr	r0, [pc, #88]	; (11d48 <_dtoa_r+0xeb0>)
   11cee:	463a      	mov	r2, r7
   11cf0:	f240 21ef 	movw	r1, #751	; 0x2ef
   11cf4:	f7fe ffe0 	bl	10cb8 <__assert_func>
   11cf8:	2600      	movs	r6, #0
   11cfa:	63e6      	str	r6, [r4, #60]	; 0x3c
   11cfc:	4631      	mov	r1, r6
   11cfe:	4620      	mov	r0, r4
   11d00:	f7fc fc48 	bl	e594 <_Balloc>
   11d04:	9003      	str	r0, [sp, #12]
   11d06:	b950      	cbnz	r0, 11d1e <_dtoa_r+0xe86>
   11d08:	4b0e      	ldr	r3, [pc, #56]	; (11d44 <_dtoa_r+0xeac>)
   11d0a:	480f      	ldr	r0, [pc, #60]	; (11d48 <_dtoa_r+0xeb0>)
   11d0c:	2200      	movs	r2, #0
   11d0e:	f240 11af 	movw	r1, #431	; 0x1af
   11d12:	f7fe ffd1 	bl	10cb8 <__assert_func>
   11d16:	4b0d      	ldr	r3, [pc, #52]	; (11d4c <_dtoa_r+0xeb4>)
   11d18:	9303      	str	r3, [sp, #12]
   11d1a:	f7ff b8f9 	b.w	10f10 <_dtoa_r+0x78>
   11d1e:	9b03      	ldr	r3, [sp, #12]
   11d20:	63a3      	str	r3, [r4, #56]	; 0x38
   11d22:	f04f 33ff 	mov.w	r3, #4294967295
   11d26:	9312      	str	r3, [sp, #72]	; 0x48
   11d28:	9308      	str	r3, [sp, #32]
   11d2a:	2301      	movs	r3, #1
   11d2c:	9623      	str	r6, [sp, #140]	; 0x8c
   11d2e:	930c      	str	r3, [sp, #48]	; 0x30
   11d30:	f7ff bb02 	b.w	11338 <_dtoa_r+0x4a0>
   11d34:	00015760 	.word	0x00015760
   11d38:	40240000 	.word	0x40240000
   11d3c:	3fe00000 	.word	0x3fe00000
   11d40:	401c0000 	.word	0x401c0000
   11d44:	000156c8 	.word	0x000156c8
   11d48:	000158dc 	.word	0x000158dc
   11d4c:	000158cc 	.word	0x000158cc

00011d50 <_wcrtomb_r>:
   11d50:	b570      	push	{r4, r5, r6, lr}
   11d52:	4605      	mov	r5, r0
   11d54:	b084      	sub	sp, #16
   11d56:	b15b      	cbz	r3, 11d70 <_wcrtomb_r+0x20>
   11d58:	461c      	mov	r4, r3
   11d5a:	b169      	cbz	r1, 11d78 <_wcrtomb_r+0x28>
   11d5c:	4b0e      	ldr	r3, [pc, #56]	; (11d98 <_wcrtomb_r+0x48>)
   11d5e:	4628      	mov	r0, r5
   11d60:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   11d64:	4623      	mov	r3, r4
   11d66:	47b0      	blx	r6
   11d68:	1c43      	adds	r3, r0, #1
   11d6a:	d00f      	beq.n	11d8c <_wcrtomb_r+0x3c>
   11d6c:	b004      	add	sp, #16
   11d6e:	bd70      	pop	{r4, r5, r6, pc}
   11d70:	f500 7482 	add.w	r4, r0, #260	; 0x104
   11d74:	2900      	cmp	r1, #0
   11d76:	d1f1      	bne.n	11d5c <_wcrtomb_r+0xc>
   11d78:	4a07      	ldr	r2, [pc, #28]	; (11d98 <_wcrtomb_r+0x48>)
   11d7a:	4623      	mov	r3, r4
   11d7c:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   11d80:	4628      	mov	r0, r5
   11d82:	460a      	mov	r2, r1
   11d84:	a901      	add	r1, sp, #4
   11d86:	47b0      	blx	r6
   11d88:	1c43      	adds	r3, r0, #1
   11d8a:	d1ef      	bne.n	11d6c <_wcrtomb_r+0x1c>
   11d8c:	2200      	movs	r2, #0
   11d8e:	238a      	movs	r3, #138	; 0x8a
   11d90:	6022      	str	r2, [r4, #0]
   11d92:	602b      	str	r3, [r5, #0]
   11d94:	b004      	add	sp, #16
   11d96:	bd70      	pop	{r4, r5, r6, pc}
   11d98:	1fff8ed4 	.word	0x1fff8ed4

00011d9c <_wcsrtombs_r>:
   11d9c:	b500      	push	{lr}
   11d9e:	b083      	sub	sp, #12
   11da0:	f8dd c010 	ldr.w	ip, [sp, #16]
   11da4:	e9cd 3c00 	strd	r3, ip, [sp]
   11da8:	f04f 33ff 	mov.w	r3, #4294967295
   11dac:	f001 fbb6 	bl	1351c <_wcsnrtombs_r>
   11db0:	b003      	add	sp, #12
   11db2:	f85d fb04 	ldr.w	pc, [sp], #4
   11db6:	bf00      	nop

00011db8 <fiprintf>:
   11db8:	b40e      	push	{r1, r2, r3}
   11dba:	b510      	push	{r4, lr}
   11dbc:	b083      	sub	sp, #12
   11dbe:	ab05      	add	r3, sp, #20
   11dc0:	4c06      	ldr	r4, [pc, #24]	; (11ddc <fiprintf+0x24>)
   11dc2:	f853 2b04 	ldr.w	r2, [r3], #4
   11dc6:	9301      	str	r3, [sp, #4]
   11dc8:	4601      	mov	r1, r0
   11dca:	6820      	ldr	r0, [r4, #0]
   11dcc:	f000 f8c4 	bl	11f58 <_vfiprintf_r>
   11dd0:	b003      	add	sp, #12
   11dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11dd6:	b003      	add	sp, #12
   11dd8:	4770      	bx	lr
   11dda:	bf00      	nop
   11ddc:	1fff9160 	.word	0x1fff9160

00011de0 <__ssprint_r>:
   11de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11de4:	6893      	ldr	r3, [r2, #8]
   11de6:	6817      	ldr	r7, [r2, #0]
   11de8:	b083      	sub	sp, #12
   11dea:	4692      	mov	sl, r2
   11dec:	2b00      	cmp	r3, #0
   11dee:	d070      	beq.n	11ed2 <__ssprint_r+0xf2>
   11df0:	4681      	mov	r9, r0
   11df2:	688a      	ldr	r2, [r1, #8]
   11df4:	6808      	ldr	r0, [r1, #0]
   11df6:	460c      	mov	r4, r1
   11df8:	3708      	adds	r7, #8
   11dfa:	e043      	b.n	11e84 <__ssprint_r+0xa4>
   11dfc:	89a3      	ldrh	r3, [r4, #12]
   11dfe:	f413 6f90 	tst.w	r3, #1152	; 0x480
   11e02:	d02e      	beq.n	11e62 <__ssprint_r+0x82>
   11e04:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   11e08:	eba0 0801 	sub.w	r8, r0, r1
   11e0c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   11e10:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   11e14:	f108 0001 	add.w	r0, r8, #1
   11e18:	1076      	asrs	r6, r6, #1
   11e1a:	4428      	add	r0, r5
   11e1c:	42b0      	cmp	r0, r6
   11e1e:	4632      	mov	r2, r6
   11e20:	bf84      	itt	hi
   11e22:	4606      	movhi	r6, r0
   11e24:	4632      	movhi	r2, r6
   11e26:	055b      	lsls	r3, r3, #21
   11e28:	d537      	bpl.n	11e9a <__ssprint_r+0xba>
   11e2a:	4611      	mov	r1, r2
   11e2c:	4648      	mov	r0, r9
   11e2e:	f7fb fa1b 	bl	d268 <_malloc_r>
   11e32:	9001      	str	r0, [sp, #4]
   11e34:	2800      	cmp	r0, #0
   11e36:	d03a      	beq.n	11eae <__ssprint_r+0xce>
   11e38:	4642      	mov	r2, r8
   11e3a:	6921      	ldr	r1, [r4, #16]
   11e3c:	f7f7 feba 	bl	9bb4 <memcpy>
   11e40:	89a2      	ldrh	r2, [r4, #12]
   11e42:	9b01      	ldr	r3, [sp, #4]
   11e44:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   11e48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11e4c:	81a2      	strh	r2, [r4, #12]
   11e4e:	eba6 0208 	sub.w	r2, r6, r8
   11e52:	eb03 0008 	add.w	r0, r3, r8
   11e56:	6166      	str	r6, [r4, #20]
   11e58:	60a2      	str	r2, [r4, #8]
   11e5a:	6123      	str	r3, [r4, #16]
   11e5c:	6020      	str	r0, [r4, #0]
   11e5e:	462e      	mov	r6, r5
   11e60:	46a8      	mov	r8, r5
   11e62:	4642      	mov	r2, r8
   11e64:	4659      	mov	r1, fp
   11e66:	f7fb fff1 	bl	de4c <memmove>
   11e6a:	f8da 3008 	ldr.w	r3, [sl, #8]
   11e6e:	68a2      	ldr	r2, [r4, #8]
   11e70:	6820      	ldr	r0, [r4, #0]
   11e72:	1b92      	subs	r2, r2, r6
   11e74:	4440      	add	r0, r8
   11e76:	1b5b      	subs	r3, r3, r5
   11e78:	60a2      	str	r2, [r4, #8]
   11e7a:	6020      	str	r0, [r4, #0]
   11e7c:	f8ca 3008 	str.w	r3, [sl, #8]
   11e80:	b33b      	cbz	r3, 11ed2 <__ssprint_r+0xf2>
   11e82:	3708      	adds	r7, #8
   11e84:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   11e88:	2d00      	cmp	r5, #0
   11e8a:	d0fa      	beq.n	11e82 <__ssprint_r+0xa2>
   11e8c:	42aa      	cmp	r2, r5
   11e8e:	4616      	mov	r6, r2
   11e90:	4690      	mov	r8, r2
   11e92:	d9b3      	bls.n	11dfc <__ssprint_r+0x1c>
   11e94:	462e      	mov	r6, r5
   11e96:	46a8      	mov	r8, r5
   11e98:	e7e3      	b.n	11e62 <__ssprint_r+0x82>
   11e9a:	4648      	mov	r0, r9
   11e9c:	f7fb fca0 	bl	d7e0 <_realloc_r>
   11ea0:	4603      	mov	r3, r0
   11ea2:	2800      	cmp	r0, #0
   11ea4:	d1d3      	bne.n	11e4e <__ssprint_r+0x6e>
   11ea6:	6921      	ldr	r1, [r4, #16]
   11ea8:	4648      	mov	r0, r9
   11eaa:	f7fc fa57 	bl	e35c <_free_r>
   11eae:	89a3      	ldrh	r3, [r4, #12]
   11eb0:	220c      	movs	r2, #12
   11eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11eb6:	f8c9 2000 	str.w	r2, [r9]
   11eba:	f04f 30ff 	mov.w	r0, #4294967295
   11ebe:	81a3      	strh	r3, [r4, #12]
   11ec0:	2200      	movs	r2, #0
   11ec2:	2300      	movs	r3, #0
   11ec4:	f8ca 2008 	str.w	r2, [sl, #8]
   11ec8:	f8ca 3004 	str.w	r3, [sl, #4]
   11ecc:	b003      	add	sp, #12
   11ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ed2:	2000      	movs	r0, #0
   11ed4:	2300      	movs	r3, #0
   11ed6:	f8ca 3004 	str.w	r3, [sl, #4]
   11eda:	b003      	add	sp, #12
   11edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011ee0 <__sprint_r.part.0>:
   11ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ee4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   11ee6:	049c      	lsls	r4, r3, #18
   11ee8:	4690      	mov	r8, r2
   11eea:	d52d      	bpl.n	11f48 <__sprint_r.part.0+0x68>
   11eec:	6893      	ldr	r3, [r2, #8]
   11eee:	6812      	ldr	r2, [r2, #0]
   11ef0:	b343      	cbz	r3, 11f44 <__sprint_r.part.0+0x64>
   11ef2:	468b      	mov	fp, r1
   11ef4:	4606      	mov	r6, r0
   11ef6:	f102 0908 	add.w	r9, r2, #8
   11efa:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   11efe:	ea5f 079a 	movs.w	r7, sl, lsr #2
   11f02:	d015      	beq.n	11f30 <__sprint_r.part.0+0x50>
   11f04:	3d04      	subs	r5, #4
   11f06:	2400      	movs	r4, #0
   11f08:	e001      	b.n	11f0e <__sprint_r.part.0+0x2e>
   11f0a:	42a7      	cmp	r7, r4
   11f0c:	d00e      	beq.n	11f2c <__sprint_r.part.0+0x4c>
   11f0e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   11f12:	465a      	mov	r2, fp
   11f14:	4630      	mov	r0, r6
   11f16:	f001 fa51 	bl	133bc <_fputwc_r>
   11f1a:	1c43      	adds	r3, r0, #1
   11f1c:	f104 0401 	add.w	r4, r4, #1
   11f20:	d1f3      	bne.n	11f0a <__sprint_r.part.0+0x2a>
   11f22:	2300      	movs	r3, #0
   11f24:	e9c8 3301 	strd	r3, r3, [r8, #4]
   11f28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f2c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   11f30:	f02a 0a03 	bic.w	sl, sl, #3
   11f34:	eba3 030a 	sub.w	r3, r3, sl
   11f38:	f8c8 3008 	str.w	r3, [r8, #8]
   11f3c:	f109 0908 	add.w	r9, r9, #8
   11f40:	2b00      	cmp	r3, #0
   11f42:	d1da      	bne.n	11efa <__sprint_r.part.0+0x1a>
   11f44:	2000      	movs	r0, #0
   11f46:	e7ec      	b.n	11f22 <__sprint_r.part.0+0x42>
   11f48:	f001 f808 	bl	12f5c <__sfvwrite_r>
   11f4c:	2300      	movs	r3, #0
   11f4e:	e9c8 3301 	strd	r3, r3, [r8, #4]
   11f52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f56:	bf00      	nop

00011f58 <_vfiprintf_r>:
   11f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f5c:	b0c5      	sub	sp, #276	; 0x114
   11f5e:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   11f62:	4683      	mov	fp, r0
   11f64:	9103      	str	r1, [sp, #12]
   11f66:	4616      	mov	r6, r2
   11f68:	2100      	movs	r1, #0
   11f6a:	2208      	movs	r2, #8
   11f6c:	4650      	mov	r0, sl
   11f6e:	461c      	mov	r4, r3
   11f70:	9307      	str	r3, [sp, #28]
   11f72:	f7fb ffe7 	bl	df44 <memset>
   11f76:	f1bb 0f00 	cmp.w	fp, #0
   11f7a:	d004      	beq.n	11f86 <_vfiprintf_r+0x2e>
   11f7c:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   11f80:	2b00      	cmp	r3, #0
   11f82:	f000 86a1 	beq.w	12cc8 <_vfiprintf_r+0xd70>
   11f86:	9a03      	ldr	r2, [sp, #12]
   11f88:	6e53      	ldr	r3, [r2, #100]	; 0x64
   11f8a:	07db      	lsls	r3, r3, #31
   11f8c:	f140 851c 	bpl.w	129c8 <_vfiprintf_r+0xa70>
   11f90:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   11f94:	b28a      	uxth	r2, r1
   11f96:	0495      	lsls	r5, r2, #18
   11f98:	d409      	bmi.n	11fae <_vfiprintf_r+0x56>
   11f9a:	9b03      	ldr	r3, [sp, #12]
   11f9c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   11fa0:	8199      	strh	r1, [r3, #12]
   11fa2:	b28a      	uxth	r2, r1
   11fa4:	4619      	mov	r1, r3
   11fa6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   11fa8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   11fac:	664b      	str	r3, [r1, #100]	; 0x64
   11fae:	0710      	lsls	r0, r2, #28
   11fb0:	f140 8104 	bpl.w	121bc <_vfiprintf_r+0x264>
   11fb4:	9b03      	ldr	r3, [sp, #12]
   11fb6:	691b      	ldr	r3, [r3, #16]
   11fb8:	2b00      	cmp	r3, #0
   11fba:	f000 80ff 	beq.w	121bc <_vfiprintf_r+0x264>
   11fbe:	f002 031a 	and.w	r3, r2, #26
   11fc2:	2b0a      	cmp	r3, #10
   11fc4:	f000 8108 	beq.w	121d8 <_vfiprintf_r+0x280>
   11fc8:	2300      	movs	r3, #0
   11fca:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   11fce:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   11fd2:	aa1b      	add	r2, sp, #108	; 0x6c
   11fd4:	930b      	str	r3, [sp, #44]	; 0x2c
   11fd6:	9218      	str	r2, [sp, #96]	; 0x60
   11fd8:	4691      	mov	r9, r2
   11fda:	930c      	str	r3, [sp, #48]	; 0x30
   11fdc:	9305      	str	r3, [sp, #20]
   11fde:	46b0      	mov	r8, r6
   11fe0:	4644      	mov	r4, r8
   11fe2:	4ba6      	ldr	r3, [pc, #664]	; (1227c <_vfiprintf_r+0x324>)
   11fe4:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   11fe8:	f7fc f830 	bl	e04c <__locale_mb_cur_max>
   11fec:	4622      	mov	r2, r4
   11fee:	4603      	mov	r3, r0
   11ff0:	a912      	add	r1, sp, #72	; 0x48
   11ff2:	f8cd a000 	str.w	sl, [sp]
   11ff6:	4658      	mov	r0, fp
   11ff8:	47a8      	blx	r5
   11ffa:	2800      	cmp	r0, #0
   11ffc:	f000 8140 	beq.w	12280 <_vfiprintf_r+0x328>
   12000:	f2c0 8133 	blt.w	1226a <_vfiprintf_r+0x312>
   12004:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12006:	2a25      	cmp	r2, #37	; 0x25
   12008:	4603      	mov	r3, r0
   1200a:	d001      	beq.n	12010 <_vfiprintf_r+0xb8>
   1200c:	441c      	add	r4, r3
   1200e:	e7e8      	b.n	11fe2 <_vfiprintf_r+0x8a>
   12010:	ebb4 0608 	subs.w	r6, r4, r8
   12014:	4605      	mov	r5, r0
   12016:	f040 8137 	bne.w	12288 <_vfiprintf_r+0x330>
   1201a:	2300      	movs	r3, #0
   1201c:	7861      	ldrb	r1, [r4, #1]
   1201e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12022:	f104 0801 	add.w	r8, r4, #1
   12026:	9306      	str	r3, [sp, #24]
   12028:	f04f 37ff 	mov.w	r7, #4294967295
   1202c:	461e      	mov	r6, r3
   1202e:	242b      	movs	r4, #43	; 0x2b
   12030:	f108 0801 	add.w	r8, r8, #1
   12034:	f1a1 0320 	sub.w	r3, r1, #32
   12038:	2b5a      	cmp	r3, #90	; 0x5a
   1203a:	f200 8165 	bhi.w	12308 <_vfiprintf_r+0x3b0>
   1203e:	e8df f013 	tbh	[pc, r3, lsl #1]
   12042:	029f      	.short	0x029f
   12044:	01630163 	.word	0x01630163
   12048:	0163029a 	.word	0x0163029a
   1204c:	01630163 	.word	0x01630163
   12050:	0163006a 	.word	0x0163006a
   12054:	02670163 	.word	0x02670163
   12058:	01630277 	.word	0x01630277
   1205c:	02810272 	.word	0x02810272
   12060:	027c0163 	.word	0x027c0163
   12064:	005b005b 	.word	0x005b005b
   12068:	005b005b 	.word	0x005b005b
   1206c:	005b005b 	.word	0x005b005b
   12070:	005b005b 	.word	0x005b005b
   12074:	0163005b 	.word	0x0163005b
   12078:	01630163 	.word	0x01630163
   1207c:	01630163 	.word	0x01630163
   12080:	01630163 	.word	0x01630163
   12084:	01630163 	.word	0x01630163
   12088:	00840246 	.word	0x00840246
   1208c:	01630163 	.word	0x01630163
   12090:	01630163 	.word	0x01630163
   12094:	01630163 	.word	0x01630163
   12098:	01630163 	.word	0x01630163
   1209c:	01630163 	.word	0x01630163
   120a0:	016300e2 	.word	0x016300e2
   120a4:	01630163 	.word	0x01630163
   120a8:	0163021d 	.word	0x0163021d
   120ac:	016302c4 	.word	0x016302c4
   120b0:	05940163 	.word	0x05940163
   120b4:	01630163 	.word	0x01630163
   120b8:	01630163 	.word	0x01630163
   120bc:	01630163 	.word	0x01630163
   120c0:	01630163 	.word	0x01630163
   120c4:	01630163 	.word	0x01630163
   120c8:	00860246 	.word	0x00860246
   120cc:	01630163 	.word	0x01630163
   120d0:	02b70163 	.word	0x02b70163
   120d4:	007f0086 	.word	0x007f0086
   120d8:	02aa0163 	.word	0x02aa0163
   120dc:	02e70163 	.word	0x02e70163
   120e0:	02d700e4 	.word	0x02d700e4
   120e4:	0163007f 	.word	0x0163007f
   120e8:	007c021d 	.word	0x007c021d
   120ec:	01630572 	.word	0x01630572
   120f0:	05740163 	.word	0x05740163
   120f4:	007c0163 	.word	0x007c0163
   120f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   120fc:	2200      	movs	r2, #0
   120fe:	f818 1b01 	ldrb.w	r1, [r8], #1
   12102:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   12106:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1210a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1210e:	2b09      	cmp	r3, #9
   12110:	d9f5      	bls.n	120fe <_vfiprintf_r+0x1a6>
   12112:	9206      	str	r2, [sp, #24]
   12114:	e78e      	b.n	12034 <_vfiprintf_r+0xdc>
   12116:	4658      	mov	r0, fp
   12118:	f7fe fce8 	bl	10aec <_localeconv_r>
   1211c:	6843      	ldr	r3, [r0, #4]
   1211e:	930d      	str	r3, [sp, #52]	; 0x34
   12120:	4618      	mov	r0, r3
   12122:	f7fc f84d 	bl	e1c0 <strlen>
   12126:	900e      	str	r0, [sp, #56]	; 0x38
   12128:	4605      	mov	r5, r0
   1212a:	4658      	mov	r0, fp
   1212c:	f7fe fcde 	bl	10aec <_localeconv_r>
   12130:	6883      	ldr	r3, [r0, #8]
   12132:	930c      	str	r3, [sp, #48]	; 0x30
   12134:	2d00      	cmp	r5, #0
   12136:	f040 84df 	bne.w	12af8 <_vfiprintf_r+0xba0>
   1213a:	f898 1000 	ldrb.w	r1, [r8]
   1213e:	e777      	b.n	12030 <_vfiprintf_r+0xd8>
   12140:	f898 1000 	ldrb.w	r1, [r8]
   12144:	f046 0620 	orr.w	r6, r6, #32
   12148:	e772      	b.n	12030 <_vfiprintf_r+0xd8>
   1214a:	f046 0610 	orr.w	r6, r6, #16
   1214e:	06b4      	lsls	r4, r6, #26
   12150:	f140 8178 	bpl.w	12444 <_vfiprintf_r+0x4ec>
   12154:	9b07      	ldr	r3, [sp, #28]
   12156:	3307      	adds	r3, #7
   12158:	f023 0307 	bic.w	r3, r3, #7
   1215c:	461a      	mov	r2, r3
   1215e:	6859      	ldr	r1, [r3, #4]
   12160:	f852 3b08 	ldr.w	r3, [r2], #8
   12164:	9207      	str	r2, [sp, #28]
   12166:	460a      	mov	r2, r1
   12168:	2900      	cmp	r1, #0
   1216a:	f2c0 847a 	blt.w	12a62 <_vfiprintf_r+0xb0a>
   1216e:	1c79      	adds	r1, r7, #1
   12170:	f000 85a7 	beq.w	12cc2 <_vfiprintf_r+0xd6a>
   12174:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   12178:	9102      	str	r1, [sp, #8]
   1217a:	ea53 0102 	orrs.w	r1, r3, r2
   1217e:	f000 8448 	beq.w	12a12 <_vfiprintf_r+0xaba>
   12182:	2b0a      	cmp	r3, #10
   12184:	f172 0100 	sbcs.w	r1, r2, #0
   12188:	f080 8549 	bcs.w	12c1e <_vfiprintf_r+0xcc6>
   1218c:	3330      	adds	r3, #48	; 0x30
   1218e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12192:	9e02      	ldr	r6, [sp, #8]
   12194:	2301      	movs	r3, #1
   12196:	9304      	str	r3, [sp, #16]
   12198:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   1219c:	9b04      	ldr	r3, [sp, #16]
   1219e:	42bb      	cmp	r3, r7
   121a0:	bfb8      	it	lt
   121a2:	463b      	movlt	r3, r7
   121a4:	9302      	str	r3, [sp, #8]
   121a6:	2300      	movs	r3, #0
   121a8:	9308      	str	r3, [sp, #32]
   121aa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   121ae:	2b00      	cmp	r3, #0
   121b0:	f000 80b8 	beq.w	12324 <_vfiprintf_r+0x3cc>
   121b4:	9b02      	ldr	r3, [sp, #8]
   121b6:	3301      	adds	r3, #1
   121b8:	9302      	str	r3, [sp, #8]
   121ba:	e0b3      	b.n	12324 <_vfiprintf_r+0x3cc>
   121bc:	9d03      	ldr	r5, [sp, #12]
   121be:	4658      	mov	r0, fp
   121c0:	4629      	mov	r1, r5
   121c2:	f001 f83f 	bl	13244 <__swsetup_r>
   121c6:	2800      	cmp	r0, #0
   121c8:	f040 8656 	bne.w	12e78 <_vfiprintf_r+0xf20>
   121cc:	89aa      	ldrh	r2, [r5, #12]
   121ce:	f002 031a 	and.w	r3, r2, #26
   121d2:	2b0a      	cmp	r3, #10
   121d4:	f47f aef8 	bne.w	11fc8 <_vfiprintf_r+0x70>
   121d8:	9903      	ldr	r1, [sp, #12]
   121da:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   121de:	2b00      	cmp	r3, #0
   121e0:	f6ff aef2 	blt.w	11fc8 <_vfiprintf_r+0x70>
   121e4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   121e6:	07db      	lsls	r3, r3, #31
   121e8:	d402      	bmi.n	121f0 <_vfiprintf_r+0x298>
   121ea:	0597      	lsls	r7, r2, #22
   121ec:	f140 8618 	bpl.w	12e20 <_vfiprintf_r+0xec8>
   121f0:	9903      	ldr	r1, [sp, #12]
   121f2:	4623      	mov	r3, r4
   121f4:	4632      	mov	r2, r6
   121f6:	4658      	mov	r0, fp
   121f8:	f000 fe70 	bl	12edc <__sbprintf>
   121fc:	9005      	str	r0, [sp, #20]
   121fe:	9805      	ldr	r0, [sp, #20]
   12200:	b045      	add	sp, #276	; 0x114
   12202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12206:	f046 0610 	orr.w	r6, r6, #16
   1220a:	f016 0220 	ands.w	r2, r6, #32
   1220e:	f000 8126 	beq.w	1245e <_vfiprintf_r+0x506>
   12212:	9b07      	ldr	r3, [sp, #28]
   12214:	3307      	adds	r3, #7
   12216:	f023 0307 	bic.w	r3, r3, #7
   1221a:	4619      	mov	r1, r3
   1221c:	685a      	ldr	r2, [r3, #4]
   1221e:	f851 3b08 	ldr.w	r3, [r1], #8
   12222:	9107      	str	r1, [sp, #28]
   12224:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12228:	9102      	str	r1, [sp, #8]
   1222a:	2100      	movs	r1, #0
   1222c:	2000      	movs	r0, #0
   1222e:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12232:	1c78      	adds	r0, r7, #1
   12234:	f000 8200 	beq.w	12638 <_vfiprintf_r+0x6e0>
   12238:	9802      	ldr	r0, [sp, #8]
   1223a:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   1223e:	ea53 0002 	orrs.w	r0, r3, r2
   12242:	f040 81f8 	bne.w	12636 <_vfiprintf_r+0x6de>
   12246:	2f00      	cmp	r7, #0
   12248:	f040 8543 	bne.w	12cd2 <_vfiprintf_r+0xd7a>
   1224c:	2900      	cmp	r1, #0
   1224e:	f040 83e4 	bne.w	12a1a <_vfiprintf_r+0xac2>
   12252:	9b02      	ldr	r3, [sp, #8]
   12254:	f013 0301 	ands.w	r3, r3, #1
   12258:	9304      	str	r3, [sp, #16]
   1225a:	f000 8420 	beq.w	12a9e <_vfiprintf_r+0xb46>
   1225e:	2330      	movs	r3, #48	; 0x30
   12260:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12264:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12268:	e798      	b.n	1219c <_vfiprintf_r+0x244>
   1226a:	2208      	movs	r2, #8
   1226c:	2100      	movs	r1, #0
   1226e:	4650      	mov	r0, sl
   12270:	f7fb fe68 	bl	df44 <memset>
   12274:	2301      	movs	r3, #1
   12276:	441c      	add	r4, r3
   12278:	e6b3      	b.n	11fe2 <_vfiprintf_r+0x8a>
   1227a:	bf00      	nop
   1227c:	1fff8ed4 	.word	0x1fff8ed4
   12280:	ebb4 0608 	subs.w	r6, r4, r8
   12284:	4605      	mov	r5, r0
   12286:	d01a      	beq.n	122be <_vfiprintf_r+0x366>
   12288:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1228a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1228c:	3301      	adds	r3, #1
   1228e:	4432      	add	r2, r6
   12290:	2b07      	cmp	r3, #7
   12292:	e9c9 8600 	strd	r8, r6, [r9]
   12296:	921a      	str	r2, [sp, #104]	; 0x68
   12298:	9319      	str	r3, [sp, #100]	; 0x64
   1229a:	dd1a      	ble.n	122d2 <_vfiprintf_r+0x37a>
   1229c:	2a00      	cmp	r2, #0
   1229e:	f000 83b4 	beq.w	12a0a <_vfiprintf_r+0xab2>
   122a2:	9903      	ldr	r1, [sp, #12]
   122a4:	aa18      	add	r2, sp, #96	; 0x60
   122a6:	4658      	mov	r0, fp
   122a8:	f7ff fe1a 	bl	11ee0 <__sprint_r.part.0>
   122ac:	b9d8      	cbnz	r0, 122e6 <_vfiprintf_r+0x38e>
   122ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   122b2:	9b05      	ldr	r3, [sp, #20]
   122b4:	4433      	add	r3, r6
   122b6:	9305      	str	r3, [sp, #20]
   122b8:	2d00      	cmp	r5, #0
   122ba:	f47f aeae 	bne.w	1201a <_vfiprintf_r+0xc2>
   122be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   122c0:	2b00      	cmp	r3, #0
   122c2:	f040 85ca 	bne.w	12e5a <_vfiprintf_r+0xf02>
   122c6:	9b03      	ldr	r3, [sp, #12]
   122c8:	2200      	movs	r2, #0
   122ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   122ce:	9219      	str	r2, [sp, #100]	; 0x64
   122d0:	e00c      	b.n	122ec <_vfiprintf_r+0x394>
   122d2:	f109 0908 	add.w	r9, r9, #8
   122d6:	e7ec      	b.n	122b2 <_vfiprintf_r+0x35a>
   122d8:	46b3      	mov	fp, r6
   122da:	9b08      	ldr	r3, [sp, #32]
   122dc:	b11b      	cbz	r3, 122e6 <_vfiprintf_r+0x38e>
   122de:	9908      	ldr	r1, [sp, #32]
   122e0:	4658      	mov	r0, fp
   122e2:	f7fc f83b 	bl	e35c <_free_r>
   122e6:	9b03      	ldr	r3, [sp, #12]
   122e8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   122ec:	9a03      	ldr	r2, [sp, #12]
   122ee:	6e52      	ldr	r2, [r2, #100]	; 0x64
   122f0:	f012 0f01 	tst.w	r2, #1
   122f4:	b29a      	uxth	r2, r3
   122f6:	f000 809c 	beq.w	12432 <_vfiprintf_r+0x4da>
   122fa:	0650      	lsls	r0, r2, #25
   122fc:	f100 85c8 	bmi.w	12e90 <_vfiprintf_r+0xf38>
   12300:	9805      	ldr	r0, [sp, #20]
   12302:	b045      	add	sp, #276	; 0x114
   12304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12308:	2900      	cmp	r1, #0
   1230a:	d0d8      	beq.n	122be <_vfiprintf_r+0x366>
   1230c:	2300      	movs	r3, #0
   1230e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12312:	2301      	movs	r3, #1
   12314:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12318:	9302      	str	r3, [sp, #8]
   1231a:	9304      	str	r3, [sp, #16]
   1231c:	ac2b      	add	r4, sp, #172	; 0xac
   1231e:	2300      	movs	r3, #0
   12320:	9308      	str	r3, [sp, #32]
   12322:	461f      	mov	r7, r3
   12324:	f016 0302 	ands.w	r3, r6, #2
   12328:	9309      	str	r3, [sp, #36]	; 0x24
   1232a:	d002      	beq.n	12332 <_vfiprintf_r+0x3da>
   1232c:	9b02      	ldr	r3, [sp, #8]
   1232e:	3302      	adds	r3, #2
   12330:	9302      	str	r3, [sp, #8]
   12332:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12336:	930a      	str	r3, [sp, #40]	; 0x28
   12338:	d105      	bne.n	12346 <_vfiprintf_r+0x3ee>
   1233a:	9b06      	ldr	r3, [sp, #24]
   1233c:	9a02      	ldr	r2, [sp, #8]
   1233e:	1a9d      	subs	r5, r3, r2
   12340:	2d00      	cmp	r5, #0
   12342:	f300 8294 	bgt.w	1286e <_vfiprintf_r+0x916>
   12346:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1234a:	1c41      	adds	r1, r0, #1
   1234c:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12350:	b182      	cbz	r2, 12374 <_vfiprintf_r+0x41c>
   12352:	2201      	movs	r2, #1
   12354:	3301      	adds	r3, #1
   12356:	f8c9 2004 	str.w	r2, [r9, #4]
   1235a:	2907      	cmp	r1, #7
   1235c:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12360:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12364:	f8c9 2000 	str.w	r2, [r9]
   12368:	f300 8264 	bgt.w	12834 <_vfiprintf_r+0x8dc>
   1236c:	4608      	mov	r0, r1
   1236e:	f109 0908 	add.w	r9, r9, #8
   12372:	3101      	adds	r1, #1
   12374:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12376:	b1da      	cbz	r2, 123b0 <_vfiprintf_r+0x458>
   12378:	aa11      	add	r2, sp, #68	; 0x44
   1237a:	3302      	adds	r3, #2
   1237c:	f8c9 2000 	str.w	r2, [r9]
   12380:	2907      	cmp	r1, #7
   12382:	f04f 0202 	mov.w	r2, #2
   12386:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1238a:	f8c9 2004 	str.w	r2, [r9, #4]
   1238e:	f340 8269 	ble.w	12864 <_vfiprintf_r+0x90c>
   12392:	2b00      	cmp	r3, #0
   12394:	f000 8358 	beq.w	12a48 <_vfiprintf_r+0xaf0>
   12398:	9903      	ldr	r1, [sp, #12]
   1239a:	aa18      	add	r2, sp, #96	; 0x60
   1239c:	4658      	mov	r0, fp
   1239e:	f7ff fd9f 	bl	11ee0 <__sprint_r.part.0>
   123a2:	2800      	cmp	r0, #0
   123a4:	d199      	bne.n	122da <_vfiprintf_r+0x382>
   123a6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   123aa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   123ae:	1c41      	adds	r1, r0, #1
   123b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   123b2:	2a80      	cmp	r2, #128	; 0x80
   123b4:	f000 8182 	beq.w	126bc <_vfiprintf_r+0x764>
   123b8:	9a04      	ldr	r2, [sp, #16]
   123ba:	1abd      	subs	r5, r7, r2
   123bc:	2d00      	cmp	r5, #0
   123be:	f300 81e0 	bgt.w	12782 <_vfiprintf_r+0x82a>
   123c2:	9a04      	ldr	r2, [sp, #16]
   123c4:	f8c9 4000 	str.w	r4, [r9]
   123c8:	4413      	add	r3, r2
   123ca:	2907      	cmp	r1, #7
   123cc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   123d0:	f8c9 2004 	str.w	r2, [r9, #4]
   123d4:	f340 816c 	ble.w	126b0 <_vfiprintf_r+0x758>
   123d8:	2b00      	cmp	r3, #0
   123da:	f000 829e 	beq.w	1291a <_vfiprintf_r+0x9c2>
   123de:	9903      	ldr	r1, [sp, #12]
   123e0:	aa18      	add	r2, sp, #96	; 0x60
   123e2:	4658      	mov	r0, fp
   123e4:	f7ff fd7c 	bl	11ee0 <__sprint_r.part.0>
   123e8:	2800      	cmp	r0, #0
   123ea:	f47f af76 	bne.w	122da <_vfiprintf_r+0x382>
   123ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   123f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   123f4:	0775      	lsls	r5, r6, #29
   123f6:	d505      	bpl.n	12404 <_vfiprintf_r+0x4ac>
   123f8:	9a06      	ldr	r2, [sp, #24]
   123fa:	9902      	ldr	r1, [sp, #8]
   123fc:	1a54      	subs	r4, r2, r1
   123fe:	2c00      	cmp	r4, #0
   12400:	f300 8295 	bgt.w	1292e <_vfiprintf_r+0x9d6>
   12404:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12408:	9802      	ldr	r0, [sp, #8]
   1240a:	4281      	cmp	r1, r0
   1240c:	bfac      	ite	ge
   1240e:	1852      	addge	r2, r2, r1
   12410:	1812      	addlt	r2, r2, r0
   12412:	9205      	str	r2, [sp, #20]
   12414:	2b00      	cmp	r3, #0
   12416:	f040 81fe 	bne.w	12816 <_vfiprintf_r+0x8be>
   1241a:	9908      	ldr	r1, [sp, #32]
   1241c:	2300      	movs	r3, #0
   1241e:	9319      	str	r3, [sp, #100]	; 0x64
   12420:	2900      	cmp	r1, #0
   12422:	f000 8148 	beq.w	126b6 <_vfiprintf_r+0x75e>
   12426:	4658      	mov	r0, fp
   12428:	f7fb ff98 	bl	e35c <_free_r>
   1242c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12430:	e5d6      	b.n	11fe0 <_vfiprintf_r+0x88>
   12432:	059c      	lsls	r4, r3, #22
   12434:	f53f af61 	bmi.w	122fa <_vfiprintf_r+0x3a2>
   12438:	9c03      	ldr	r4, [sp, #12]
   1243a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1243c:	f7fb fea2 	bl	e184 <__retarget_lock_release_recursive>
   12440:	89a2      	ldrh	r2, [r4, #12]
   12442:	e75a      	b.n	122fa <_vfiprintf_r+0x3a2>
   12444:	06f0      	lsls	r0, r6, #27
   12446:	9a07      	ldr	r2, [sp, #28]
   12448:	f100 833e 	bmi.w	12ac8 <_vfiprintf_r+0xb70>
   1244c:	0671      	lsls	r1, r6, #25
   1244e:	f140 8338 	bpl.w	12ac2 <_vfiprintf_r+0xb6a>
   12452:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12456:	9207      	str	r2, [sp, #28]
   12458:	17da      	asrs	r2, r3, #31
   1245a:	4611      	mov	r1, r2
   1245c:	e684      	b.n	12168 <_vfiprintf_r+0x210>
   1245e:	f016 0310 	ands.w	r3, r6, #16
   12462:	9907      	ldr	r1, [sp, #28]
   12464:	f040 8328 	bne.w	12ab8 <_vfiprintf_r+0xb60>
   12468:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   1246c:	f000 8320 	beq.w	12ab0 <_vfiprintf_r+0xb58>
   12470:	461a      	mov	r2, r3
   12472:	f851 3b04 	ldr.w	r3, [r1], #4
   12476:	9107      	str	r1, [sp, #28]
   12478:	b29b      	uxth	r3, r3
   1247a:	e6d3      	b.n	12224 <_vfiprintf_r+0x2cc>
   1247c:	9b07      	ldr	r3, [sp, #28]
   1247e:	461a      	mov	r2, r3
   12480:	2300      	movs	r3, #0
   12482:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12486:	4613      	mov	r3, r2
   12488:	f853 4b04 	ldr.w	r4, [r3], #4
   1248c:	9302      	str	r3, [sp, #8]
   1248e:	2c00      	cmp	r4, #0
   12490:	f000 842d 	beq.w	12cee <_vfiprintf_r+0xd96>
   12494:	2953      	cmp	r1, #83	; 0x53
   12496:	f000 838a 	beq.w	12bae <_vfiprintf_r+0xc56>
   1249a:	f016 0510 	ands.w	r5, r6, #16
   1249e:	f040 8386 	bne.w	12bae <_vfiprintf_r+0xc56>
   124a2:	1c7b      	adds	r3, r7, #1
   124a4:	f000 84cc 	beq.w	12e40 <_vfiprintf_r+0xee8>
   124a8:	463a      	mov	r2, r7
   124aa:	4629      	mov	r1, r5
   124ac:	4620      	mov	r0, r4
   124ae:	f7fe fb37 	bl	10b20 <memchr>
   124b2:	9008      	str	r0, [sp, #32]
   124b4:	2800      	cmp	r0, #0
   124b6:	f000 84b8 	beq.w	12e2a <_vfiprintf_r+0xed2>
   124ba:	1b03      	subs	r3, r0, r4
   124bc:	9a02      	ldr	r2, [sp, #8]
   124be:	9304      	str	r3, [sp, #16]
   124c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   124c4:	462f      	mov	r7, r5
   124c6:	9207      	str	r2, [sp, #28]
   124c8:	9302      	str	r3, [sp, #8]
   124ca:	9508      	str	r5, [sp, #32]
   124cc:	e66d      	b.n	121aa <_vfiprintf_r+0x252>
   124ce:	2943      	cmp	r1, #67	; 0x43
   124d0:	d002      	beq.n	124d8 <_vfiprintf_r+0x580>
   124d2:	06f5      	lsls	r5, r6, #27
   124d4:	f140 8352 	bpl.w	12b7c <_vfiprintf_r+0xc24>
   124d8:	9d07      	ldr	r5, [sp, #28]
   124da:	2208      	movs	r2, #8
   124dc:	2100      	movs	r1, #0
   124de:	a816      	add	r0, sp, #88	; 0x58
   124e0:	ac2b      	add	r4, sp, #172	; 0xac
   124e2:	f7fb fd2f 	bl	df44 <memset>
   124e6:	ab16      	add	r3, sp, #88	; 0x58
   124e8:	f855 2b04 	ldr.w	r2, [r5], #4
   124ec:	4621      	mov	r1, r4
   124ee:	4658      	mov	r0, fp
   124f0:	f7ff fc2e 	bl	11d50 <_wcrtomb_r>
   124f4:	4603      	mov	r3, r0
   124f6:	3301      	adds	r3, #1
   124f8:	9004      	str	r0, [sp, #16]
   124fa:	f000 84ce 	beq.w	12e9a <_vfiprintf_r+0xf42>
   124fe:	9b04      	ldr	r3, [sp, #16]
   12500:	9507      	str	r5, [sp, #28]
   12502:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12506:	9302      	str	r3, [sp, #8]
   12508:	2300      	movs	r3, #0
   1250a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1250e:	e706      	b.n	1231e <_vfiprintf_r+0x3c6>
   12510:	9b07      	ldr	r3, [sp, #28]
   12512:	f853 2b04 	ldr.w	r2, [r3], #4
   12516:	9206      	str	r2, [sp, #24]
   12518:	2a00      	cmp	r2, #0
   1251a:	f280 82bb 	bge.w	12a94 <_vfiprintf_r+0xb3c>
   1251e:	9a06      	ldr	r2, [sp, #24]
   12520:	4252      	negs	r2, r2
   12522:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12526:	f898 1000 	ldrb.w	r1, [r8]
   1252a:	f046 0604 	orr.w	r6, r6, #4
   1252e:	e57f      	b.n	12030 <_vfiprintf_r+0xd8>
   12530:	f898 1000 	ldrb.w	r1, [r8]
   12534:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12538:	e57a      	b.n	12030 <_vfiprintf_r+0xd8>
   1253a:	f898 1000 	ldrb.w	r1, [r8]
   1253e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12542:	e575      	b.n	12030 <_vfiprintf_r+0xd8>
   12544:	4642      	mov	r2, r8
   12546:	f812 1b01 	ldrb.w	r1, [r2], #1
   1254a:	292a      	cmp	r1, #42	; 0x2a
   1254c:	f000 84b0 	beq.w	12eb0 <_vfiprintf_r+0xf58>
   12550:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12554:	2b09      	cmp	r3, #9
   12556:	4690      	mov	r8, r2
   12558:	f04f 0700 	mov.w	r7, #0
   1255c:	f63f ad6a 	bhi.w	12034 <_vfiprintf_r+0xdc>
   12560:	f818 1b01 	ldrb.w	r1, [r8], #1
   12564:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12568:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   1256c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12570:	2b09      	cmp	r3, #9
   12572:	d9f5      	bls.n	12560 <_vfiprintf_r+0x608>
   12574:	e55e      	b.n	12034 <_vfiprintf_r+0xdc>
   12576:	f898 1000 	ldrb.w	r1, [r8]
   1257a:	f046 0601 	orr.w	r6, r6, #1
   1257e:	e557      	b.n	12030 <_vfiprintf_r+0xd8>
   12580:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12584:	2b00      	cmp	r3, #0
   12586:	f47f add8 	bne.w	1213a <_vfiprintf_r+0x1e2>
   1258a:	2320      	movs	r3, #32
   1258c:	f898 1000 	ldrb.w	r1, [r8]
   12590:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12594:	e54c      	b.n	12030 <_vfiprintf_r+0xd8>
   12596:	f898 1000 	ldrb.w	r1, [r8]
   1259a:	296c      	cmp	r1, #108	; 0x6c
   1259c:	bf03      	ittte	eq
   1259e:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   125a2:	f046 0620 	orreq.w	r6, r6, #32
   125a6:	f108 0801 	addeq.w	r8, r8, #1
   125aa:	f046 0610 	orrne.w	r6, r6, #16
   125ae:	e53f      	b.n	12030 <_vfiprintf_r+0xd8>
   125b0:	f898 1000 	ldrb.w	r1, [r8]
   125b4:	2968      	cmp	r1, #104	; 0x68
   125b6:	bf03      	ittte	eq
   125b8:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   125bc:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   125c0:	f108 0801 	addeq.w	r8, r8, #1
   125c4:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   125c8:	e532      	b.n	12030 <_vfiprintf_r+0xd8>
   125ca:	f046 0310 	orr.w	r3, r6, #16
   125ce:	9302      	str	r3, [sp, #8]
   125d0:	9b02      	ldr	r3, [sp, #8]
   125d2:	f013 0220 	ands.w	r2, r3, #32
   125d6:	f000 8225 	beq.w	12a24 <_vfiprintf_r+0xacc>
   125da:	9b07      	ldr	r3, [sp, #28]
   125dc:	3307      	adds	r3, #7
   125de:	f023 0307 	bic.w	r3, r3, #7
   125e2:	4619      	mov	r1, r3
   125e4:	685a      	ldr	r2, [r3, #4]
   125e6:	f851 3b08 	ldr.w	r3, [r1], #8
   125ea:	9107      	str	r1, [sp, #28]
   125ec:	2101      	movs	r1, #1
   125ee:	e61d      	b.n	1222c <_vfiprintf_r+0x2d4>
   125f0:	9a07      	ldr	r2, [sp, #28]
   125f2:	f046 0302 	orr.w	r3, r6, #2
   125f6:	9302      	str	r3, [sp, #8]
   125f8:	f852 3b04 	ldr.w	r3, [r2], #4
   125fc:	9207      	str	r2, [sp, #28]
   125fe:	f647 0230 	movw	r2, #30768	; 0x7830
   12602:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12606:	4aa1      	ldr	r2, [pc, #644]	; (1288c <_vfiprintf_r+0x934>)
   12608:	920b      	str	r2, [sp, #44]	; 0x2c
   1260a:	2102      	movs	r1, #2
   1260c:	2200      	movs	r2, #0
   1260e:	e60d      	b.n	1222c <_vfiprintf_r+0x2d4>
   12610:	06b7      	lsls	r7, r6, #26
   12612:	f100 8267 	bmi.w	12ae4 <_vfiprintf_r+0xb8c>
   12616:	06f5      	lsls	r5, r6, #27
   12618:	f100 8361 	bmi.w	12cde <_vfiprintf_r+0xd86>
   1261c:	0674      	lsls	r4, r6, #25
   1261e:	f100 83ee 	bmi.w	12dfe <_vfiprintf_r+0xea6>
   12622:	05b0      	lsls	r0, r6, #22
   12624:	f140 835b 	bpl.w	12cde <_vfiprintf_r+0xd86>
   12628:	9b07      	ldr	r3, [sp, #28]
   1262a:	9905      	ldr	r1, [sp, #20]
   1262c:	f853 2b04 	ldr.w	r2, [r3], #4
   12630:	9307      	str	r3, [sp, #28]
   12632:	7011      	strb	r1, [r2, #0]
   12634:	e4d4      	b.n	11fe0 <_vfiprintf_r+0x88>
   12636:	9602      	str	r6, [sp, #8]
   12638:	2901      	cmp	r1, #1
   1263a:	f43f ada2 	beq.w	12182 <_vfiprintf_r+0x22a>
   1263e:	2902      	cmp	r1, #2
   12640:	ac44      	add	r4, sp, #272	; 0x110
   12642:	d111      	bne.n	12668 <_vfiprintf_r+0x710>
   12644:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12646:	f003 010f 	and.w	r1, r3, #15
   1264a:	091b      	lsrs	r3, r3, #4
   1264c:	5c41      	ldrb	r1, [r0, r1]
   1264e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12652:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12656:	0912      	lsrs	r2, r2, #4
   12658:	ea53 0102 	orrs.w	r1, r3, r2
   1265c:	d1f3      	bne.n	12646 <_vfiprintf_r+0x6ee>
   1265e:	9e02      	ldr	r6, [sp, #8]
   12660:	ab44      	add	r3, sp, #272	; 0x110
   12662:	1b1b      	subs	r3, r3, r4
   12664:	9304      	str	r3, [sp, #16]
   12666:	e599      	b.n	1219c <_vfiprintf_r+0x244>
   12668:	f003 0107 	and.w	r1, r3, #7
   1266c:	08db      	lsrs	r3, r3, #3
   1266e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12672:	08d2      	lsrs	r2, r2, #3
   12674:	3130      	adds	r1, #48	; 0x30
   12676:	ea53 0502 	orrs.w	r5, r3, r2
   1267a:	4620      	mov	r0, r4
   1267c:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12680:	d1f2      	bne.n	12668 <_vfiprintf_r+0x710>
   12682:	9e02      	ldr	r6, [sp, #8]
   12684:	07f3      	lsls	r3, r6, #31
   12686:	d5eb      	bpl.n	12660 <_vfiprintf_r+0x708>
   12688:	2930      	cmp	r1, #48	; 0x30
   1268a:	d0e8      	beq.n	1265e <_vfiprintf_r+0x706>
   1268c:	2330      	movs	r3, #48	; 0x30
   1268e:	3802      	subs	r0, #2
   12690:	f804 3c01 	strb.w	r3, [r4, #-1]
   12694:	ab44      	add	r3, sp, #272	; 0x110
   12696:	1a1b      	subs	r3, r3, r0
   12698:	9e02      	ldr	r6, [sp, #8]
   1269a:	9304      	str	r3, [sp, #16]
   1269c:	4604      	mov	r4, r0
   1269e:	e57d      	b.n	1219c <_vfiprintf_r+0x244>
   126a0:	9b04      	ldr	r3, [sp, #16]
   126a2:	941b      	str	r4, [sp, #108]	; 0x6c
   126a4:	2201      	movs	r2, #1
   126a6:	931c      	str	r3, [sp, #112]	; 0x70
   126a8:	931a      	str	r3, [sp, #104]	; 0x68
   126aa:	9219      	str	r2, [sp, #100]	; 0x64
   126ac:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   126b0:	f109 0908 	add.w	r9, r9, #8
   126b4:	e69e      	b.n	123f4 <_vfiprintf_r+0x49c>
   126b6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   126ba:	e491      	b.n	11fe0 <_vfiprintf_r+0x88>
   126bc:	9a06      	ldr	r2, [sp, #24]
   126be:	9d02      	ldr	r5, [sp, #8]
   126c0:	1b55      	subs	r5, r2, r5
   126c2:	2d00      	cmp	r5, #0
   126c4:	f77f ae78 	ble.w	123b8 <_vfiprintf_r+0x460>
   126c8:	2d10      	cmp	r5, #16
   126ca:	f340 83d3 	ble.w	12e74 <_vfiprintf_r+0xf1c>
   126ce:	4619      	mov	r1, r3
   126d0:	4643      	mov	r3, r8
   126d2:	9409      	str	r4, [sp, #36]	; 0x24
   126d4:	46b8      	mov	r8, r7
   126d6:	9c03      	ldr	r4, [sp, #12]
   126d8:	4637      	mov	r7, r6
   126da:	465e      	mov	r6, fp
   126dc:	469b      	mov	fp, r3
   126de:	e007      	b.n	126f0 <_vfiprintf_r+0x798>
   126e0:	f100 0c02 	add.w	ip, r0, #2
   126e4:	f109 0908 	add.w	r9, r9, #8
   126e8:	4610      	mov	r0, r2
   126ea:	3d10      	subs	r5, #16
   126ec:	2d10      	cmp	r5, #16
   126ee:	dd1f      	ble.n	12730 <_vfiprintf_r+0x7d8>
   126f0:	4b67      	ldr	r3, [pc, #412]	; (12890 <_vfiprintf_r+0x938>)
   126f2:	f8c9 3000 	str.w	r3, [r9]
   126f6:	1c42      	adds	r2, r0, #1
   126f8:	3110      	adds	r1, #16
   126fa:	2310      	movs	r3, #16
   126fc:	2a07      	cmp	r2, #7
   126fe:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   12702:	f8c9 3004 	str.w	r3, [r9, #4]
   12706:	ddeb      	ble.n	126e0 <_vfiprintf_r+0x788>
   12708:	aa18      	add	r2, sp, #96	; 0x60
   1270a:	2900      	cmp	r1, #0
   1270c:	f000 808c 	beq.w	12828 <_vfiprintf_r+0x8d0>
   12710:	4621      	mov	r1, r4
   12712:	4630      	mov	r0, r6
   12714:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12718:	f7ff fbe2 	bl	11ee0 <__sprint_r.part.0>
   1271c:	2800      	cmp	r0, #0
   1271e:	f47f addb 	bne.w	122d8 <_vfiprintf_r+0x380>
   12722:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   12726:	3d10      	subs	r5, #16
   12728:	2d10      	cmp	r5, #16
   1272a:	f100 0c01 	add.w	ip, r0, #1
   1272e:	dcdf      	bgt.n	126f0 <_vfiprintf_r+0x798>
   12730:	465a      	mov	r2, fp
   12732:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12734:	46b3      	mov	fp, r6
   12736:	460b      	mov	r3, r1
   12738:	463e      	mov	r6, r7
   1273a:	4647      	mov	r7, r8
   1273c:	4690      	mov	r8, r2
   1273e:	4a54      	ldr	r2, [pc, #336]	; (12890 <_vfiprintf_r+0x938>)
   12740:	f8c9 5004 	str.w	r5, [r9, #4]
   12744:	442b      	add	r3, r5
   12746:	f1bc 0f07 	cmp.w	ip, #7
   1274a:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   1274e:	f8c9 2000 	str.w	r2, [r9]
   12752:	f340 81a7 	ble.w	12aa4 <_vfiprintf_r+0xb4c>
   12756:	2b00      	cmp	r3, #0
   12758:	f000 832c 	beq.w	12db4 <_vfiprintf_r+0xe5c>
   1275c:	9903      	ldr	r1, [sp, #12]
   1275e:	aa18      	add	r2, sp, #96	; 0x60
   12760:	4658      	mov	r0, fp
   12762:	f7ff fbbd 	bl	11ee0 <__sprint_r.part.0>
   12766:	2800      	cmp	r0, #0
   12768:	f47f adb7 	bne.w	122da <_vfiprintf_r+0x382>
   1276c:	9a04      	ldr	r2, [sp, #16]
   1276e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12772:	1abd      	subs	r5, r7, r2
   12774:	2d00      	cmp	r5, #0
   12776:	f100 0101 	add.w	r1, r0, #1
   1277a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1277e:	f77f ae20 	ble.w	123c2 <_vfiprintf_r+0x46a>
   12782:	2d10      	cmp	r5, #16
   12784:	dd32      	ble.n	127ec <_vfiprintf_r+0x894>
   12786:	4619      	mov	r1, r3
   12788:	4643      	mov	r3, r8
   1278a:	9409      	str	r4, [sp, #36]	; 0x24
   1278c:	46b0      	mov	r8, r6
   1278e:	9c03      	ldr	r4, [sp, #12]
   12790:	465e      	mov	r6, fp
   12792:	2710      	movs	r7, #16
   12794:	469b      	mov	fp, r3
   12796:	e007      	b.n	127a8 <_vfiprintf_r+0x850>
   12798:	f100 0c02 	add.w	ip, r0, #2
   1279c:	f109 0908 	add.w	r9, r9, #8
   127a0:	4610      	mov	r0, r2
   127a2:	3d10      	subs	r5, #16
   127a4:	2d10      	cmp	r5, #16
   127a6:	dd1a      	ble.n	127de <_vfiprintf_r+0x886>
   127a8:	1c42      	adds	r2, r0, #1
   127aa:	4b39      	ldr	r3, [pc, #228]	; (12890 <_vfiprintf_r+0x938>)
   127ac:	3110      	adds	r1, #16
   127ae:	2a07      	cmp	r2, #7
   127b0:	e9c9 3700 	strd	r3, r7, [r9]
   127b4:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   127b8:	ddee      	ble.n	12798 <_vfiprintf_r+0x840>
   127ba:	aa18      	add	r2, sp, #96	; 0x60
   127bc:	b329      	cbz	r1, 1280a <_vfiprintf_r+0x8b2>
   127be:	4621      	mov	r1, r4
   127c0:	4630      	mov	r0, r6
   127c2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   127c6:	f7ff fb8b 	bl	11ee0 <__sprint_r.part.0>
   127ca:	2800      	cmp	r0, #0
   127cc:	f47f ad84 	bne.w	122d8 <_vfiprintf_r+0x380>
   127d0:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   127d4:	3d10      	subs	r5, #16
   127d6:	2d10      	cmp	r5, #16
   127d8:	f100 0c01 	add.w	ip, r0, #1
   127dc:	dce4      	bgt.n	127a8 <_vfiprintf_r+0x850>
   127de:	465a      	mov	r2, fp
   127e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   127e2:	460b      	mov	r3, r1
   127e4:	46b3      	mov	fp, r6
   127e6:	4661      	mov	r1, ip
   127e8:	4646      	mov	r6, r8
   127ea:	4690      	mov	r8, r2
   127ec:	4a28      	ldr	r2, [pc, #160]	; (12890 <_vfiprintf_r+0x938>)
   127ee:	f8c9 5004 	str.w	r5, [r9, #4]
   127f2:	442b      	add	r3, r5
   127f4:	2907      	cmp	r1, #7
   127f6:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   127fa:	f8c9 2000 	str.w	r2, [r9]
   127fe:	f300 80f3 	bgt.w	129e8 <_vfiprintf_r+0xa90>
   12802:	f109 0908 	add.w	r9, r9, #8
   12806:	3101      	adds	r1, #1
   12808:	e5db      	b.n	123c2 <_vfiprintf_r+0x46a>
   1280a:	f04f 0c01 	mov.w	ip, #1
   1280e:	4608      	mov	r0, r1
   12810:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12814:	e7c5      	b.n	127a2 <_vfiprintf_r+0x84a>
   12816:	9903      	ldr	r1, [sp, #12]
   12818:	aa18      	add	r2, sp, #96	; 0x60
   1281a:	4658      	mov	r0, fp
   1281c:	f7ff fb60 	bl	11ee0 <__sprint_r.part.0>
   12820:	2800      	cmp	r0, #0
   12822:	f43f adfa 	beq.w	1241a <_vfiprintf_r+0x4c2>
   12826:	e558      	b.n	122da <_vfiprintf_r+0x382>
   12828:	f04f 0c01 	mov.w	ip, #1
   1282c:	4608      	mov	r0, r1
   1282e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12832:	e75a      	b.n	126ea <_vfiprintf_r+0x792>
   12834:	2b00      	cmp	r3, #0
   12836:	f000 810c 	beq.w	12a52 <_vfiprintf_r+0xafa>
   1283a:	9903      	ldr	r1, [sp, #12]
   1283c:	aa18      	add	r2, sp, #96	; 0x60
   1283e:	4658      	mov	r0, fp
   12840:	f7ff fb4e 	bl	11ee0 <__sprint_r.part.0>
   12844:	2800      	cmp	r0, #0
   12846:	f47f ad48 	bne.w	122da <_vfiprintf_r+0x382>
   1284a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1284e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12852:	1c41      	adds	r1, r0, #1
   12854:	e58e      	b.n	12374 <_vfiprintf_r+0x41c>
   12856:	2302      	movs	r3, #2
   12858:	aa11      	add	r2, sp, #68	; 0x44
   1285a:	931c      	str	r3, [sp, #112]	; 0x70
   1285c:	921b      	str	r2, [sp, #108]	; 0x6c
   1285e:	2101      	movs	r1, #1
   12860:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12864:	4608      	mov	r0, r1
   12866:	f109 0908 	add.w	r9, r9, #8
   1286a:	1c41      	adds	r1, r0, #1
   1286c:	e5a0      	b.n	123b0 <_vfiprintf_r+0x458>
   1286e:	2d10      	cmp	r5, #16
   12870:	f340 82e2 	ble.w	12e38 <_vfiprintf_r+0xee0>
   12874:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12878:	4618      	mov	r0, r3
   1287a:	4643      	mov	r3, r8
   1287c:	940f      	str	r4, [sp, #60]	; 0x3c
   1287e:	46b8      	mov	r8, r7
   12880:	9c03      	ldr	r4, [sp, #12]
   12882:	4637      	mov	r7, r6
   12884:	465e      	mov	r6, fp
   12886:	469b      	mov	fp, r3
   12888:	e00c      	b.n	128a4 <_vfiprintf_r+0x94c>
   1288a:	bf00      	nop
   1288c:	0001583c 	.word	0x0001583c
   12890:	00015948 	.word	0x00015948
   12894:	f101 0c02 	add.w	ip, r1, #2
   12898:	f109 0908 	add.w	r9, r9, #8
   1289c:	4611      	mov	r1, r2
   1289e:	3d10      	subs	r5, #16
   128a0:	2d10      	cmp	r5, #16
   128a2:	dd1d      	ble.n	128e0 <_vfiprintf_r+0x988>
   128a4:	4bb2      	ldr	r3, [pc, #712]	; (12b70 <_vfiprintf_r+0xc18>)
   128a6:	f8c9 3000 	str.w	r3, [r9]
   128aa:	1c4a      	adds	r2, r1, #1
   128ac:	3010      	adds	r0, #16
   128ae:	2310      	movs	r3, #16
   128b0:	2a07      	cmp	r2, #7
   128b2:	e9cd 2019 	strd	r2, r0, [sp, #100]	; 0x64
   128b6:	f8c9 3004 	str.w	r3, [r9, #4]
   128ba:	ddeb      	ble.n	12894 <_vfiprintf_r+0x93c>
   128bc:	aa18      	add	r2, sp, #96	; 0x60
   128be:	b330      	cbz	r0, 1290e <_vfiprintf_r+0x9b6>
   128c0:	4621      	mov	r1, r4
   128c2:	4630      	mov	r0, r6
   128c4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   128c8:	f7ff fb0a 	bl	11ee0 <__sprint_r.part.0>
   128cc:	2800      	cmp	r0, #0
   128ce:	f47f ad03 	bne.w	122d8 <_vfiprintf_r+0x380>
   128d2:	e9dd 1019 	ldrd	r1, r0, [sp, #100]	; 0x64
   128d6:	3d10      	subs	r5, #16
   128d8:	2d10      	cmp	r5, #16
   128da:	f101 0c01 	add.w	ip, r1, #1
   128de:	dce1      	bgt.n	128a4 <_vfiprintf_r+0x94c>
   128e0:	465a      	mov	r2, fp
   128e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   128e4:	4603      	mov	r3, r0
   128e6:	46b3      	mov	fp, r6
   128e8:	4660      	mov	r0, ip
   128ea:	463e      	mov	r6, r7
   128ec:	4647      	mov	r7, r8
   128ee:	4690      	mov	r8, r2
   128f0:	4a9f      	ldr	r2, [pc, #636]	; (12b70 <_vfiprintf_r+0xc18>)
   128f2:	f8c9 5004 	str.w	r5, [r9, #4]
   128f6:	442b      	add	r3, r5
   128f8:	2807      	cmp	r0, #7
   128fa:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   128fe:	f8c9 2000 	str.w	r2, [r9]
   12902:	f300 80b6 	bgt.w	12a72 <_vfiprintf_r+0xb1a>
   12906:	f109 0908 	add.w	r9, r9, #8
   1290a:	1c41      	adds	r1, r0, #1
   1290c:	e51e      	b.n	1234c <_vfiprintf_r+0x3f4>
   1290e:	4601      	mov	r1, r0
   12910:	f04f 0c01 	mov.w	ip, #1
   12914:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12918:	e7c1      	b.n	1289e <_vfiprintf_r+0x946>
   1291a:	0776      	lsls	r6, r6, #29
   1291c:	9319      	str	r3, [sp, #100]	; 0x64
   1291e:	d54a      	bpl.n	129b6 <_vfiprintf_r+0xa5e>
   12920:	9a06      	ldr	r2, [sp, #24]
   12922:	9902      	ldr	r1, [sp, #8]
   12924:	1a54      	subs	r4, r2, r1
   12926:	2c00      	cmp	r4, #0
   12928:	dd45      	ble.n	129b6 <_vfiprintf_r+0xa5e>
   1292a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1292e:	2c10      	cmp	r4, #16
   12930:	f340 829d 	ble.w	12e6e <_vfiprintf_r+0xf16>
   12934:	9919      	ldr	r1, [sp, #100]	; 0x64
   12936:	9e03      	ldr	r6, [sp, #12]
   12938:	2510      	movs	r5, #16
   1293a:	e006      	b.n	1294a <_vfiprintf_r+0x9f2>
   1293c:	1c88      	adds	r0, r1, #2
   1293e:	f109 0908 	add.w	r9, r9, #8
   12942:	4611      	mov	r1, r2
   12944:	3c10      	subs	r4, #16
   12946:	2c10      	cmp	r4, #16
   12948:	dd1a      	ble.n	12980 <_vfiprintf_r+0xa28>
   1294a:	1c4a      	adds	r2, r1, #1
   1294c:	4888      	ldr	r0, [pc, #544]	; (12b70 <_vfiprintf_r+0xc18>)
   1294e:	3310      	adds	r3, #16
   12950:	2a07      	cmp	r2, #7
   12952:	e9c9 0500 	strd	r0, r5, [r9]
   12956:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   1295a:	ddef      	ble.n	1293c <_vfiprintf_r+0x9e4>
   1295c:	aa18      	add	r2, sp, #96	; 0x60
   1295e:	b32b      	cbz	r3, 129ac <_vfiprintf_r+0xa54>
   12960:	4631      	mov	r1, r6
   12962:	4658      	mov	r0, fp
   12964:	f7ff fabc 	bl	11ee0 <__sprint_r.part.0>
   12968:	2800      	cmp	r0, #0
   1296a:	f47f acb6 	bne.w	122da <_vfiprintf_r+0x382>
   1296e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12972:	3c10      	subs	r4, #16
   12974:	2c10      	cmp	r4, #16
   12976:	f101 0001 	add.w	r0, r1, #1
   1297a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1297e:	dce4      	bgt.n	1294a <_vfiprintf_r+0x9f2>
   12980:	4a7b      	ldr	r2, [pc, #492]	; (12b70 <_vfiprintf_r+0xc18>)
   12982:	f8c9 4004 	str.w	r4, [r9, #4]
   12986:	4423      	add	r3, r4
   12988:	2807      	cmp	r0, #7
   1298a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   1298e:	f8c9 2000 	str.w	r2, [r9]
   12992:	f77f ad37 	ble.w	12404 <_vfiprintf_r+0x4ac>
   12996:	b173      	cbz	r3, 129b6 <_vfiprintf_r+0xa5e>
   12998:	9903      	ldr	r1, [sp, #12]
   1299a:	aa18      	add	r2, sp, #96	; 0x60
   1299c:	4658      	mov	r0, fp
   1299e:	f7ff fa9f 	bl	11ee0 <__sprint_r.part.0>
   129a2:	2800      	cmp	r0, #0
   129a4:	f47f ac99 	bne.w	122da <_vfiprintf_r+0x382>
   129a8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   129aa:	e52b      	b.n	12404 <_vfiprintf_r+0x4ac>
   129ac:	2001      	movs	r0, #1
   129ae:	4619      	mov	r1, r3
   129b0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   129b4:	e7c6      	b.n	12944 <_vfiprintf_r+0x9ec>
   129b6:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   129ba:	9902      	ldr	r1, [sp, #8]
   129bc:	428a      	cmp	r2, r1
   129be:	bfac      	ite	ge
   129c0:	189b      	addge	r3, r3, r2
   129c2:	185b      	addlt	r3, r3, r1
   129c4:	9305      	str	r3, [sp, #20]
   129c6:	e528      	b.n	1241a <_vfiprintf_r+0x4c2>
   129c8:	9b03      	ldr	r3, [sp, #12]
   129ca:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   129ce:	058f      	lsls	r7, r1, #22
   129d0:	b28a      	uxth	r2, r1
   129d2:	f53f aae0 	bmi.w	11f96 <_vfiprintf_r+0x3e>
   129d6:	461d      	mov	r5, r3
   129d8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   129da:	f7fb fbd1 	bl	e180 <__retarget_lock_acquire_recursive>
   129de:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   129e2:	b28a      	uxth	r2, r1
   129e4:	f7ff bad7 	b.w	11f96 <_vfiprintf_r+0x3e>
   129e8:	2b00      	cmp	r3, #0
   129ea:	f43f ae59 	beq.w	126a0 <_vfiprintf_r+0x748>
   129ee:	9903      	ldr	r1, [sp, #12]
   129f0:	aa18      	add	r2, sp, #96	; 0x60
   129f2:	4658      	mov	r0, fp
   129f4:	f7ff fa74 	bl	11ee0 <__sprint_r.part.0>
   129f8:	2800      	cmp	r0, #0
   129fa:	f47f ac6e 	bne.w	122da <_vfiprintf_r+0x382>
   129fe:	9919      	ldr	r1, [sp, #100]	; 0x64
   12a00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12a02:	3101      	adds	r1, #1
   12a04:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a08:	e4db      	b.n	123c2 <_vfiprintf_r+0x46a>
   12a0a:	9219      	str	r2, [sp, #100]	; 0x64
   12a0c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a10:	e44f      	b.n	122b2 <_vfiprintf_r+0x35a>
   12a12:	2f00      	cmp	r7, #0
   12a14:	f47f abba 	bne.w	1218c <_vfiprintf_r+0x234>
   12a18:	9e02      	ldr	r6, [sp, #8]
   12a1a:	2700      	movs	r7, #0
   12a1c:	9704      	str	r7, [sp, #16]
   12a1e:	ac44      	add	r4, sp, #272	; 0x110
   12a20:	f7ff bbbc 	b.w	1219c <_vfiprintf_r+0x244>
   12a24:	9b02      	ldr	r3, [sp, #8]
   12a26:	f013 0310 	ands.w	r3, r3, #16
   12a2a:	d154      	bne.n	12ad6 <_vfiprintf_r+0xb7e>
   12a2c:	9a02      	ldr	r2, [sp, #8]
   12a2e:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   12a32:	f000 8167 	beq.w	12d04 <_vfiprintf_r+0xdac>
   12a36:	9907      	ldr	r1, [sp, #28]
   12a38:	461a      	mov	r2, r3
   12a3a:	f851 3b04 	ldr.w	r3, [r1], #4
   12a3e:	9107      	str	r1, [sp, #28]
   12a40:	b29b      	uxth	r3, r3
   12a42:	2101      	movs	r1, #1
   12a44:	f7ff bbf2 	b.w	1222c <_vfiprintf_r+0x2d4>
   12a48:	2101      	movs	r1, #1
   12a4a:	4618      	mov	r0, r3
   12a4c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a50:	e4ae      	b.n	123b0 <_vfiprintf_r+0x458>
   12a52:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12a54:	2a00      	cmp	r2, #0
   12a56:	d15e      	bne.n	12b16 <_vfiprintf_r+0xbbe>
   12a58:	4618      	mov	r0, r3
   12a5a:	2101      	movs	r1, #1
   12a5c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a60:	e4a6      	b.n	123b0 <_vfiprintf_r+0x458>
   12a62:	425b      	negs	r3, r3
   12a64:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   12a68:	9602      	str	r6, [sp, #8]
   12a6a:	202d      	movs	r0, #45	; 0x2d
   12a6c:	2101      	movs	r1, #1
   12a6e:	f7ff bbde 	b.w	1222e <_vfiprintf_r+0x2d6>
   12a72:	2b00      	cmp	r3, #0
   12a74:	f000 808d 	beq.w	12b92 <_vfiprintf_r+0xc3a>
   12a78:	9903      	ldr	r1, [sp, #12]
   12a7a:	aa18      	add	r2, sp, #96	; 0x60
   12a7c:	4658      	mov	r0, fp
   12a7e:	f7ff fa2f 	bl	11ee0 <__sprint_r.part.0>
   12a82:	2800      	cmp	r0, #0
   12a84:	f47f ac29 	bne.w	122da <_vfiprintf_r+0x382>
   12a88:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12a8c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a90:	1c41      	adds	r1, r0, #1
   12a92:	e45b      	b.n	1234c <_vfiprintf_r+0x3f4>
   12a94:	f898 1000 	ldrb.w	r1, [r8]
   12a98:	9307      	str	r3, [sp, #28]
   12a9a:	f7ff bac9 	b.w	12030 <_vfiprintf_r+0xd8>
   12a9e:	ac44      	add	r4, sp, #272	; 0x110
   12aa0:	f7ff bb7c 	b.w	1219c <_vfiprintf_r+0x244>
   12aa4:	f109 0908 	add.w	r9, r9, #8
   12aa8:	f10c 0101 	add.w	r1, ip, #1
   12aac:	4660      	mov	r0, ip
   12aae:	e483      	b.n	123b8 <_vfiprintf_r+0x460>
   12ab0:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   12ab4:	f040 8191 	bne.w	12dda <_vfiprintf_r+0xe82>
   12ab8:	f851 3b04 	ldr.w	r3, [r1], #4
   12abc:	9107      	str	r1, [sp, #28]
   12abe:	f7ff bbb1 	b.w	12224 <_vfiprintf_r+0x2cc>
   12ac2:	05b3      	lsls	r3, r6, #22
   12ac4:	f100 8182 	bmi.w	12dcc <_vfiprintf_r+0xe74>
   12ac8:	f852 3b04 	ldr.w	r3, [r2], #4
   12acc:	9207      	str	r2, [sp, #28]
   12ace:	17da      	asrs	r2, r3, #31
   12ad0:	4611      	mov	r1, r2
   12ad2:	f7ff bb49 	b.w	12168 <_vfiprintf_r+0x210>
   12ad6:	9907      	ldr	r1, [sp, #28]
   12ad8:	f851 3b04 	ldr.w	r3, [r1], #4
   12adc:	9107      	str	r1, [sp, #28]
   12ade:	2101      	movs	r1, #1
   12ae0:	f7ff bba4 	b.w	1222c <_vfiprintf_r+0x2d4>
   12ae4:	9b07      	ldr	r3, [sp, #28]
   12ae6:	9805      	ldr	r0, [sp, #20]
   12ae8:	f853 1b04 	ldr.w	r1, [r3], #4
   12aec:	9307      	str	r3, [sp, #28]
   12aee:	17c2      	asrs	r2, r0, #31
   12af0:	e9c1 0200 	strd	r0, r2, [r1]
   12af4:	f7ff ba74 	b.w	11fe0 <_vfiprintf_r+0x88>
   12af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12afa:	2b00      	cmp	r3, #0
   12afc:	f43f ab1d 	beq.w	1213a <_vfiprintf_r+0x1e2>
   12b00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12b02:	781b      	ldrb	r3, [r3, #0]
   12b04:	2b00      	cmp	r3, #0
   12b06:	f43f ab18 	beq.w	1213a <_vfiprintf_r+0x1e2>
   12b0a:	f898 1000 	ldrb.w	r1, [r8]
   12b0e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   12b12:	f7ff ba8d 	b.w	12030 <_vfiprintf_r+0xd8>
   12b16:	2302      	movs	r3, #2
   12b18:	aa11      	add	r2, sp, #68	; 0x44
   12b1a:	931c      	str	r3, [sp, #112]	; 0x70
   12b1c:	921b      	str	r2, [sp, #108]	; 0x6c
   12b1e:	2001      	movs	r0, #1
   12b20:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b24:	e69f      	b.n	12866 <_vfiprintf_r+0x90e>
   12b26:	9602      	str	r6, [sp, #8]
   12b28:	e552      	b.n	125d0 <_vfiprintf_r+0x678>
   12b2a:	4b12      	ldr	r3, [pc, #72]	; (12b74 <_vfiprintf_r+0xc1c>)
   12b2c:	930b      	str	r3, [sp, #44]	; 0x2c
   12b2e:	f016 0220 	ands.w	r2, r6, #32
   12b32:	d05f      	beq.n	12bf4 <_vfiprintf_r+0xc9c>
   12b34:	9b07      	ldr	r3, [sp, #28]
   12b36:	3307      	adds	r3, #7
   12b38:	f023 0307 	bic.w	r3, r3, #7
   12b3c:	4618      	mov	r0, r3
   12b3e:	685a      	ldr	r2, [r3, #4]
   12b40:	f850 3b08 	ldr.w	r3, [r0], #8
   12b44:	9007      	str	r0, [sp, #28]
   12b46:	07f4      	lsls	r4, r6, #31
   12b48:	d509      	bpl.n	12b5e <_vfiprintf_r+0xc06>
   12b4a:	ea53 0002 	orrs.w	r0, r3, r2
   12b4e:	d006      	beq.n	12b5e <_vfiprintf_r+0xc06>
   12b50:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   12b54:	2130      	movs	r1, #48	; 0x30
   12b56:	f046 0602 	orr.w	r6, r6, #2
   12b5a:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   12b5e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12b62:	9102      	str	r1, [sp, #8]
   12b64:	2102      	movs	r1, #2
   12b66:	f7ff bb61 	b.w	1222c <_vfiprintf_r+0x2d4>
   12b6a:	4b03      	ldr	r3, [pc, #12]	; (12b78 <_vfiprintf_r+0xc20>)
   12b6c:	930b      	str	r3, [sp, #44]	; 0x2c
   12b6e:	e7de      	b.n	12b2e <_vfiprintf_r+0xbd6>
   12b70:	00015938 	.word	0x00015938
   12b74:	0001583c 	.word	0x0001583c
   12b78:	00015850 	.word	0x00015850
   12b7c:	9b07      	ldr	r3, [sp, #28]
   12b7e:	2101      	movs	r1, #1
   12b80:	f853 2b04 	ldr.w	r2, [r3], #4
   12b84:	9102      	str	r1, [sp, #8]
   12b86:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   12b8a:	9307      	str	r3, [sp, #28]
   12b8c:	9104      	str	r1, [sp, #16]
   12b8e:	ac2b      	add	r4, sp, #172	; 0xac
   12b90:	e4ba      	b.n	12508 <_vfiprintf_r+0x5b0>
   12b92:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12b96:	2a00      	cmp	r2, #0
   12b98:	f040 8126 	bne.w	12de8 <_vfiprintf_r+0xe90>
   12b9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12b9e:	2a00      	cmp	r2, #0
   12ba0:	f47f ae59 	bne.w	12856 <_vfiprintf_r+0x8fe>
   12ba4:	4618      	mov	r0, r3
   12ba6:	2101      	movs	r1, #1
   12ba8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12bac:	e404      	b.n	123b8 <_vfiprintf_r+0x460>
   12bae:	2100      	movs	r1, #0
   12bb0:	2208      	movs	r2, #8
   12bb2:	a816      	add	r0, sp, #88	; 0x58
   12bb4:	9413      	str	r4, [sp, #76]	; 0x4c
   12bb6:	f7fb f9c5 	bl	df44 <memset>
   12bba:	1c79      	adds	r1, r7, #1
   12bbc:	f000 80b2 	beq.w	12d24 <_vfiprintf_r+0xdcc>
   12bc0:	2500      	movs	r5, #0
   12bc2:	9407      	str	r4, [sp, #28]
   12bc4:	462c      	mov	r4, r5
   12bc6:	e00c      	b.n	12be2 <_vfiprintf_r+0xc8a>
   12bc8:	a92b      	add	r1, sp, #172	; 0xac
   12bca:	4658      	mov	r0, fp
   12bcc:	f7ff f8c0 	bl	11d50 <_wcrtomb_r>
   12bd0:	1c42      	adds	r2, r0, #1
   12bd2:	4420      	add	r0, r4
   12bd4:	f000 8161 	beq.w	12e9a <_vfiprintf_r+0xf42>
   12bd8:	42b8      	cmp	r0, r7
   12bda:	dc08      	bgt.n	12bee <_vfiprintf_r+0xc96>
   12bdc:	f000 8165 	beq.w	12eaa <_vfiprintf_r+0xf52>
   12be0:	4604      	mov	r4, r0
   12be2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12be4:	5952      	ldr	r2, [r2, r5]
   12be6:	ab16      	add	r3, sp, #88	; 0x58
   12be8:	3504      	adds	r5, #4
   12bea:	2a00      	cmp	r2, #0
   12bec:	d1ec      	bne.n	12bc8 <_vfiprintf_r+0xc70>
   12bee:	9404      	str	r4, [sp, #16]
   12bf0:	9c07      	ldr	r4, [sp, #28]
   12bf2:	e0a5      	b.n	12d40 <_vfiprintf_r+0xde8>
   12bf4:	f016 0310 	ands.w	r3, r6, #16
   12bf8:	9807      	ldr	r0, [sp, #28]
   12bfa:	d10c      	bne.n	12c16 <_vfiprintf_r+0xcbe>
   12bfc:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   12c00:	d005      	beq.n	12c0e <_vfiprintf_r+0xcb6>
   12c02:	461a      	mov	r2, r3
   12c04:	f850 3b04 	ldr.w	r3, [r0], #4
   12c08:	9007      	str	r0, [sp, #28]
   12c0a:	b29b      	uxth	r3, r3
   12c0c:	e79b      	b.n	12b46 <_vfiprintf_r+0xbee>
   12c0e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   12c12:	f040 80d5 	bne.w	12dc0 <_vfiprintf_r+0xe68>
   12c16:	f850 3b04 	ldr.w	r3, [r0], #4
   12c1a:	9007      	str	r0, [sp, #28]
   12c1c:	e793      	b.n	12b46 <_vfiprintf_r+0xbee>
   12c1e:	9902      	ldr	r1, [sp, #8]
   12c20:	f8cd 8020 	str.w	r8, [sp, #32]
   12c24:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   12c28:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   12c2c:	9704      	str	r7, [sp, #16]
   12c2e:	f04f 0c00 	mov.w	ip, #0
   12c32:	ac44      	add	r4, sp, #272	; 0x110
   12c34:	e005      	b.n	12c42 <_vfiprintf_r+0xcea>
   12c36:	2b0a      	cmp	r3, #10
   12c38:	f172 0200 	sbcs.w	r2, r2, #0
   12c3c:	d336      	bcc.n	12cac <_vfiprintf_r+0xd54>
   12c3e:	463b      	mov	r3, r7
   12c40:	462a      	mov	r2, r5
   12c42:	f8df e290 	ldr.w	lr, [pc, #656]	; 12ed4 <_vfiprintf_r+0xf7c>
   12c46:	1899      	adds	r1, r3, r2
   12c48:	f141 0100 	adc.w	r1, r1, #0
   12c4c:	fbae 0501 	umull	r0, r5, lr, r1
   12c50:	f025 0003 	bic.w	r0, r5, #3
   12c54:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   12c58:	1a09      	subs	r1, r1, r0
   12c5a:	1a58      	subs	r0, r3, r1
   12c5c:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   12c60:	f162 0700 	sbc.w	r7, r2, #0
   12c64:	fb05 f500 	mul.w	r5, r5, r0
   12c68:	fb0e 5507 	mla	r5, lr, r7, r5
   12c6c:	fba0 700e 	umull	r7, r0, r0, lr
   12c70:	4405      	add	r5, r0
   12c72:	f007 0e01 	and.w	lr, r7, #1
   12c76:	2005      	movs	r0, #5
   12c78:	fbae 0e00 	umull	r0, lr, lr, r0
   12c7c:	1840      	adds	r0, r0, r1
   12c7e:	087f      	lsrs	r7, r7, #1
   12c80:	3030      	adds	r0, #48	; 0x30
   12c82:	f804 0c01 	strb.w	r0, [r4, #-1]
   12c86:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
   12c8a:	f10c 0c01 	add.w	ip, ip, #1
   12c8e:	3c01      	subs	r4, #1
   12c90:	086d      	lsrs	r5, r5, #1
   12c92:	2e00      	cmp	r6, #0
   12c94:	d0cf      	beq.n	12c36 <_vfiprintf_r+0xcde>
   12c96:	f898 1000 	ldrb.w	r1, [r8]
   12c9a:	4561      	cmp	r1, ip
   12c9c:	d1cb      	bne.n	12c36 <_vfiprintf_r+0xcde>
   12c9e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   12ca2:	d0c8      	beq.n	12c36 <_vfiprintf_r+0xcde>
   12ca4:	2b0a      	cmp	r3, #10
   12ca6:	f172 0200 	sbcs.w	r2, r2, #0
   12caa:	d26c      	bcs.n	12d86 <_vfiprintf_r+0xe2e>
   12cac:	ab44      	add	r3, sp, #272	; 0x110
   12cae:	1b1b      	subs	r3, r3, r4
   12cb0:	9f04      	ldr	r7, [sp, #16]
   12cb2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   12cb6:	9e02      	ldr	r6, [sp, #8]
   12cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   12cbc:	9304      	str	r3, [sp, #16]
   12cbe:	f7ff ba6d 	b.w	1219c <_vfiprintf_r+0x244>
   12cc2:	9602      	str	r6, [sp, #8]
   12cc4:	f7ff ba5d 	b.w	12182 <_vfiprintf_r+0x22a>
   12cc8:	4658      	mov	r0, fp
   12cca:	f7fb f80b 	bl	dce4 <__sinit>
   12cce:	f7ff b95a 	b.w	11f86 <_vfiprintf_r+0x2e>
   12cd2:	2901      	cmp	r1, #1
   12cd4:	9602      	str	r6, [sp, #8]
   12cd6:	f47f acb2 	bne.w	1263e <_vfiprintf_r+0x6e6>
   12cda:	f7ff ba57 	b.w	1218c <_vfiprintf_r+0x234>
   12cde:	9b07      	ldr	r3, [sp, #28]
   12ce0:	9905      	ldr	r1, [sp, #20]
   12ce2:	f853 2b04 	ldr.w	r2, [r3], #4
   12ce6:	6011      	str	r1, [r2, #0]
   12ce8:	9307      	str	r3, [sp, #28]
   12cea:	f7ff b979 	b.w	11fe0 <_vfiprintf_r+0x88>
   12cee:	2f06      	cmp	r7, #6
   12cf0:	463b      	mov	r3, r7
   12cf2:	9a02      	ldr	r2, [sp, #8]
   12cf4:	4c78      	ldr	r4, [pc, #480]	; (12ed8 <_vfiprintf_r+0xf80>)
   12cf6:	9207      	str	r2, [sp, #28]
   12cf8:	bf28      	it	cs
   12cfa:	2306      	movcs	r3, #6
   12cfc:	9304      	str	r3, [sp, #16]
   12cfe:	9302      	str	r3, [sp, #8]
   12d00:	f7ff bb0d 	b.w	1231e <_vfiprintf_r+0x3c6>
   12d04:	9b02      	ldr	r3, [sp, #8]
   12d06:	9907      	ldr	r1, [sp, #28]
   12d08:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   12d0c:	bf14      	ite	ne
   12d0e:	f851 3b04 	ldrne.w	r3, [r1], #4
   12d12:	f851 3b04 	ldreq.w	r3, [r1], #4
   12d16:	9107      	str	r1, [sp, #28]
   12d18:	bf1c      	itt	ne
   12d1a:	4602      	movne	r2, r0
   12d1c:	b2db      	uxtbne	r3, r3
   12d1e:	2101      	movs	r1, #1
   12d20:	f7ff ba84 	b.w	1222c <_vfiprintf_r+0x2d4>
   12d24:	ab16      	add	r3, sp, #88	; 0x58
   12d26:	9300      	str	r3, [sp, #0]
   12d28:	2300      	movs	r3, #0
   12d2a:	4619      	mov	r1, r3
   12d2c:	aa13      	add	r2, sp, #76	; 0x4c
   12d2e:	4658      	mov	r0, fp
   12d30:	f7ff f834 	bl	11d9c <_wcsrtombs_r>
   12d34:	4603      	mov	r3, r0
   12d36:	3301      	adds	r3, #1
   12d38:	9004      	str	r0, [sp, #16]
   12d3a:	f000 80ae 	beq.w	12e9a <_vfiprintf_r+0xf42>
   12d3e:	9413      	str	r4, [sp, #76]	; 0x4c
   12d40:	9b04      	ldr	r3, [sp, #16]
   12d42:	b37b      	cbz	r3, 12da4 <_vfiprintf_r+0xe4c>
   12d44:	2b63      	cmp	r3, #99	; 0x63
   12d46:	dc62      	bgt.n	12e0e <_vfiprintf_r+0xeb6>
   12d48:	2300      	movs	r3, #0
   12d4a:	9308      	str	r3, [sp, #32]
   12d4c:	ac2b      	add	r4, sp, #172	; 0xac
   12d4e:	2208      	movs	r2, #8
   12d50:	2100      	movs	r1, #0
   12d52:	a816      	add	r0, sp, #88	; 0x58
   12d54:	f7fb f8f6 	bl	df44 <memset>
   12d58:	9d04      	ldr	r5, [sp, #16]
   12d5a:	ab16      	add	r3, sp, #88	; 0x58
   12d5c:	9300      	str	r3, [sp, #0]
   12d5e:	aa13      	add	r2, sp, #76	; 0x4c
   12d60:	462b      	mov	r3, r5
   12d62:	4621      	mov	r1, r4
   12d64:	4658      	mov	r0, fp
   12d66:	f7ff f819 	bl	11d9c <_wcsrtombs_r>
   12d6a:	4285      	cmp	r5, r0
   12d6c:	f040 80ab 	bne.w	12ec6 <_vfiprintf_r+0xf6e>
   12d70:	9b02      	ldr	r3, [sp, #8]
   12d72:	9a04      	ldr	r2, [sp, #16]
   12d74:	9307      	str	r3, [sp, #28]
   12d76:	2300      	movs	r3, #0
   12d78:	54a3      	strb	r3, [r4, r2]
   12d7a:	461f      	mov	r7, r3
   12d7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   12d80:	9302      	str	r3, [sp, #8]
   12d82:	f7ff ba12 	b.w	121aa <_vfiprintf_r+0x252>
   12d86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12d88:	990d      	ldr	r1, [sp, #52]	; 0x34
   12d8a:	1ae4      	subs	r4, r4, r3
   12d8c:	461a      	mov	r2, r3
   12d8e:	4620      	mov	r0, r4
   12d90:	f7fb f92a 	bl	dfe8 <strncpy>
   12d94:	f898 3001 	ldrb.w	r3, [r8, #1]
   12d98:	b10b      	cbz	r3, 12d9e <_vfiprintf_r+0xe46>
   12d9a:	f108 0801 	add.w	r8, r8, #1
   12d9e:	f04f 0c00 	mov.w	ip, #0
   12da2:	e74c      	b.n	12c3e <_vfiprintf_r+0xce6>
   12da4:	9b02      	ldr	r3, [sp, #8]
   12da6:	9307      	str	r3, [sp, #28]
   12da8:	9b04      	ldr	r3, [sp, #16]
   12daa:	9302      	str	r3, [sp, #8]
   12dac:	461f      	mov	r7, r3
   12dae:	9308      	str	r3, [sp, #32]
   12db0:	f7ff b9fb 	b.w	121aa <_vfiprintf_r+0x252>
   12db4:	2101      	movs	r1, #1
   12db6:	4618      	mov	r0, r3
   12db8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12dbc:	f7ff bafc 	b.w	123b8 <_vfiprintf_r+0x460>
   12dc0:	f850 3b04 	ldr.w	r3, [r0], #4
   12dc4:	9007      	str	r0, [sp, #28]
   12dc6:	4622      	mov	r2, r4
   12dc8:	b2db      	uxtb	r3, r3
   12dca:	e6bc      	b.n	12b46 <_vfiprintf_r+0xbee>
   12dcc:	f912 3b04 	ldrsb.w	r3, [r2], #4
   12dd0:	9207      	str	r2, [sp, #28]
   12dd2:	17da      	asrs	r2, r3, #31
   12dd4:	4611      	mov	r1, r2
   12dd6:	f7ff b9c7 	b.w	12168 <_vfiprintf_r+0x210>
   12dda:	f851 3b04 	ldr.w	r3, [r1], #4
   12dde:	9107      	str	r1, [sp, #28]
   12de0:	4602      	mov	r2, r0
   12de2:	b2db      	uxtb	r3, r3
   12de4:	f7ff ba1e 	b.w	12224 <_vfiprintf_r+0x2cc>
   12de8:	2301      	movs	r3, #1
   12dea:	931c      	str	r3, [sp, #112]	; 0x70
   12dec:	2101      	movs	r1, #1
   12dee:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   12df2:	931b      	str	r3, [sp, #108]	; 0x6c
   12df4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12df8:	460b      	mov	r3, r1
   12dfa:	f7ff bab7 	b.w	1236c <_vfiprintf_r+0x414>
   12dfe:	9b07      	ldr	r3, [sp, #28]
   12e00:	9905      	ldr	r1, [sp, #20]
   12e02:	f853 2b04 	ldr.w	r2, [r3], #4
   12e06:	9307      	str	r3, [sp, #28]
   12e08:	8011      	strh	r1, [r2, #0]
   12e0a:	f7ff b8e9 	b.w	11fe0 <_vfiprintf_r+0x88>
   12e0e:	1c59      	adds	r1, r3, #1
   12e10:	4658      	mov	r0, fp
   12e12:	f7fa fa29 	bl	d268 <_malloc_r>
   12e16:	4604      	mov	r4, r0
   12e18:	2800      	cmp	r0, #0
   12e1a:	d03e      	beq.n	12e9a <_vfiprintf_r+0xf42>
   12e1c:	9008      	str	r0, [sp, #32]
   12e1e:	e796      	b.n	12d4e <_vfiprintf_r+0xdf6>
   12e20:	6d88      	ldr	r0, [r1, #88]	; 0x58
   12e22:	f7fb f9af 	bl	e184 <__retarget_lock_release_recursive>
   12e26:	f7ff b9e3 	b.w	121f0 <_vfiprintf_r+0x298>
   12e2a:	9b02      	ldr	r3, [sp, #8]
   12e2c:	9704      	str	r7, [sp, #16]
   12e2e:	9702      	str	r7, [sp, #8]
   12e30:	9307      	str	r3, [sp, #28]
   12e32:	9f08      	ldr	r7, [sp, #32]
   12e34:	f7ff b9b9 	b.w	121aa <_vfiprintf_r+0x252>
   12e38:	9819      	ldr	r0, [sp, #100]	; 0x64
   12e3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12e3c:	3001      	adds	r0, #1
   12e3e:	e557      	b.n	128f0 <_vfiprintf_r+0x998>
   12e40:	9b02      	ldr	r3, [sp, #8]
   12e42:	9307      	str	r3, [sp, #28]
   12e44:	4620      	mov	r0, r4
   12e46:	f7fb f9bb 	bl	e1c0 <strlen>
   12e4a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   12e4e:	462f      	mov	r7, r5
   12e50:	9004      	str	r0, [sp, #16]
   12e52:	9302      	str	r3, [sp, #8]
   12e54:	9508      	str	r5, [sp, #32]
   12e56:	f7ff b9a8 	b.w	121aa <_vfiprintf_r+0x252>
   12e5a:	9903      	ldr	r1, [sp, #12]
   12e5c:	aa18      	add	r2, sp, #96	; 0x60
   12e5e:	4658      	mov	r0, fp
   12e60:	f7ff f83e 	bl	11ee0 <__sprint_r.part.0>
   12e64:	2800      	cmp	r0, #0
   12e66:	f43f aa2e 	beq.w	122c6 <_vfiprintf_r+0x36e>
   12e6a:	f7ff ba3c 	b.w	122e6 <_vfiprintf_r+0x38e>
   12e6e:	9819      	ldr	r0, [sp, #100]	; 0x64
   12e70:	3001      	adds	r0, #1
   12e72:	e585      	b.n	12980 <_vfiprintf_r+0xa28>
   12e74:	468c      	mov	ip, r1
   12e76:	e462      	b.n	1273e <_vfiprintf_r+0x7e6>
   12e78:	9b03      	ldr	r3, [sp, #12]
   12e7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12e7c:	07d9      	lsls	r1, r3, #31
   12e7e:	d407      	bmi.n	12e90 <_vfiprintf_r+0xf38>
   12e80:	9b03      	ldr	r3, [sp, #12]
   12e82:	899b      	ldrh	r3, [r3, #12]
   12e84:	059a      	lsls	r2, r3, #22
   12e86:	d403      	bmi.n	12e90 <_vfiprintf_r+0xf38>
   12e88:	9b03      	ldr	r3, [sp, #12]
   12e8a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   12e8c:	f7fb f97a 	bl	e184 <__retarget_lock_release_recursive>
   12e90:	f04f 33ff 	mov.w	r3, #4294967295
   12e94:	9305      	str	r3, [sp, #20]
   12e96:	f7ff ba33 	b.w	12300 <_vfiprintf_r+0x3a8>
   12e9a:	9a03      	ldr	r2, [sp, #12]
   12e9c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   12ea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12ea4:	8193      	strh	r3, [r2, #12]
   12ea6:	f7ff ba21 	b.w	122ec <_vfiprintf_r+0x394>
   12eaa:	9c07      	ldr	r4, [sp, #28]
   12eac:	9704      	str	r7, [sp, #16]
   12eae:	e747      	b.n	12d40 <_vfiprintf_r+0xde8>
   12eb0:	9b07      	ldr	r3, [sp, #28]
   12eb2:	f898 1001 	ldrb.w	r1, [r8, #1]
   12eb6:	f853 7b04 	ldr.w	r7, [r3], #4
   12eba:	9307      	str	r3, [sp, #28]
   12ebc:	4690      	mov	r8, r2
   12ebe:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   12ec2:	f7ff b8b5 	b.w	12030 <_vfiprintf_r+0xd8>
   12ec6:	9a03      	ldr	r2, [sp, #12]
   12ec8:	8993      	ldrh	r3, [r2, #12]
   12eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12ece:	8193      	strh	r3, [r2, #12]
   12ed0:	f7ff ba03 	b.w	122da <_vfiprintf_r+0x382>
   12ed4:	cccccccd 	.word	0xcccccccd
   12ed8:	00015864 	.word	0x00015864

00012edc <__sbprintf>:
   12edc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ede:	461f      	mov	r7, r3
   12ee0:	898b      	ldrh	r3, [r1, #12]
   12ee2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   12ee6:	f023 0302 	bic.w	r3, r3, #2
   12eea:	f8ad 300c 	strh.w	r3, [sp, #12]
   12eee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12ef0:	9319      	str	r3, [sp, #100]	; 0x64
   12ef2:	89cb      	ldrh	r3, [r1, #14]
   12ef4:	f8ad 300e 	strh.w	r3, [sp, #14]
   12ef8:	69cb      	ldr	r3, [r1, #28]
   12efa:	9307      	str	r3, [sp, #28]
   12efc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   12efe:	9309      	str	r3, [sp, #36]	; 0x24
   12f00:	ab1a      	add	r3, sp, #104	; 0x68
   12f02:	9300      	str	r3, [sp, #0]
   12f04:	9304      	str	r3, [sp, #16]
   12f06:	f44f 6380 	mov.w	r3, #1024	; 0x400
   12f0a:	4615      	mov	r5, r2
   12f0c:	4606      	mov	r6, r0
   12f0e:	9302      	str	r3, [sp, #8]
   12f10:	9305      	str	r3, [sp, #20]
   12f12:	a816      	add	r0, sp, #88	; 0x58
   12f14:	2300      	movs	r3, #0
   12f16:	460c      	mov	r4, r1
   12f18:	9306      	str	r3, [sp, #24]
   12f1a:	f7fb f92d 	bl	e178 <__retarget_lock_init_recursive>
   12f1e:	462a      	mov	r2, r5
   12f20:	463b      	mov	r3, r7
   12f22:	4669      	mov	r1, sp
   12f24:	4630      	mov	r0, r6
   12f26:	f7ff f817 	bl	11f58 <_vfiprintf_r>
   12f2a:	1e05      	subs	r5, r0, #0
   12f2c:	db07      	blt.n	12f3e <__sbprintf+0x62>
   12f2e:	4669      	mov	r1, sp
   12f30:	4630      	mov	r0, r6
   12f32:	f7fd fdb1 	bl	10a98 <_fflush_r>
   12f36:	2800      	cmp	r0, #0
   12f38:	bf18      	it	ne
   12f3a:	f04f 35ff 	movne.w	r5, #4294967295
   12f3e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   12f42:	065b      	lsls	r3, r3, #25
   12f44:	d503      	bpl.n	12f4e <__sbprintf+0x72>
   12f46:	89a3      	ldrh	r3, [r4, #12]
   12f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12f4c:	81a3      	strh	r3, [r4, #12]
   12f4e:	9816      	ldr	r0, [sp, #88]	; 0x58
   12f50:	f7fb f914 	bl	e17c <__retarget_lock_close_recursive>
   12f54:	4628      	mov	r0, r5
   12f56:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   12f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00012f5c <__sfvwrite_r>:
   12f5c:	6893      	ldr	r3, [r2, #8]
   12f5e:	2b00      	cmp	r3, #0
   12f60:	f000 8081 	beq.w	13066 <__sfvwrite_r+0x10a>
   12f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f68:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   12f6c:	460c      	mov	r4, r1
   12f6e:	0719      	lsls	r1, r3, #28
   12f70:	4680      	mov	r8, r0
   12f72:	b083      	sub	sp, #12
   12f74:	4617      	mov	r7, r2
   12f76:	b298      	uxth	r0, r3
   12f78:	d523      	bpl.n	12fc2 <__sfvwrite_r+0x66>
   12f7a:	6923      	ldr	r3, [r4, #16]
   12f7c:	b30b      	cbz	r3, 12fc2 <__sfvwrite_r+0x66>
   12f7e:	f010 0302 	ands.w	r3, r0, #2
   12f82:	683d      	ldr	r5, [r7, #0]
   12f84:	d02b      	beq.n	12fde <__sfvwrite_r+0x82>
   12f86:	f04f 0a00 	mov.w	sl, #0
   12f8a:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 13240 <__sfvwrite_r+0x2e4>
   12f8e:	4656      	mov	r6, sl
   12f90:	455e      	cmp	r6, fp
   12f92:	4633      	mov	r3, r6
   12f94:	4652      	mov	r2, sl
   12f96:	bf28      	it	cs
   12f98:	465b      	movcs	r3, fp
   12f9a:	4640      	mov	r0, r8
   12f9c:	2e00      	cmp	r6, #0
   12f9e:	d04f      	beq.n	13040 <__sfvwrite_r+0xe4>
   12fa0:	69e1      	ldr	r1, [r4, #28]
   12fa2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   12fa6:	47e0      	blx	ip
   12fa8:	2800      	cmp	r0, #0
   12faa:	dd52      	ble.n	13052 <__sfvwrite_r+0xf6>
   12fac:	68bb      	ldr	r3, [r7, #8]
   12fae:	1a1b      	subs	r3, r3, r0
   12fb0:	4482      	add	sl, r0
   12fb2:	1a36      	subs	r6, r6, r0
   12fb4:	60bb      	str	r3, [r7, #8]
   12fb6:	2b00      	cmp	r3, #0
   12fb8:	d1ea      	bne.n	12f90 <__sfvwrite_r+0x34>
   12fba:	2000      	movs	r0, #0
   12fbc:	b003      	add	sp, #12
   12fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fc2:	4621      	mov	r1, r4
   12fc4:	4640      	mov	r0, r8
   12fc6:	f000 f93d 	bl	13244 <__swsetup_r>
   12fca:	2800      	cmp	r0, #0
   12fcc:	f040 8134 	bne.w	13238 <__sfvwrite_r+0x2dc>
   12fd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   12fd4:	683d      	ldr	r5, [r7, #0]
   12fd6:	b298      	uxth	r0, r3
   12fd8:	f010 0302 	ands.w	r3, r0, #2
   12fdc:	d1d3      	bne.n	12f86 <__sfvwrite_r+0x2a>
   12fde:	f010 0901 	ands.w	r9, r0, #1
   12fe2:	d142      	bne.n	1306a <__sfvwrite_r+0x10e>
   12fe4:	464e      	mov	r6, r9
   12fe6:	b33e      	cbz	r6, 13038 <__sfvwrite_r+0xdc>
   12fe8:	0582      	lsls	r2, r0, #22
   12fea:	f8d4 b008 	ldr.w	fp, [r4, #8]
   12fee:	f140 8081 	bpl.w	130f4 <__sfvwrite_r+0x198>
   12ff2:	45b3      	cmp	fp, r6
   12ff4:	465a      	mov	r2, fp
   12ff6:	f200 80b1 	bhi.w	1315c <__sfvwrite_r+0x200>
   12ffa:	f410 6f90 	tst.w	r0, #1152	; 0x480
   12ffe:	f040 80be 	bne.w	1317e <__sfvwrite_r+0x222>
   13002:	6820      	ldr	r0, [r4, #0]
   13004:	9201      	str	r2, [sp, #4]
   13006:	4649      	mov	r1, r9
   13008:	f7fa ff20 	bl	de4c <memmove>
   1300c:	68a3      	ldr	r3, [r4, #8]
   1300e:	9a01      	ldr	r2, [sp, #4]
   13010:	eba3 010b 	sub.w	r1, r3, fp
   13014:	6823      	ldr	r3, [r4, #0]
   13016:	60a1      	str	r1, [r4, #8]
   13018:	4413      	add	r3, r2
   1301a:	46b2      	mov	sl, r6
   1301c:	6023      	str	r3, [r4, #0]
   1301e:	2600      	movs	r6, #0
   13020:	68bb      	ldr	r3, [r7, #8]
   13022:	eba3 030a 	sub.w	r3, r3, sl
   13026:	44d1      	add	r9, sl
   13028:	60bb      	str	r3, [r7, #8]
   1302a:	2b00      	cmp	r3, #0
   1302c:	d0c5      	beq.n	12fba <__sfvwrite_r+0x5e>
   1302e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   13032:	b280      	uxth	r0, r0
   13034:	2e00      	cmp	r6, #0
   13036:	d1d7      	bne.n	12fe8 <__sfvwrite_r+0x8c>
   13038:	e9d5 9600 	ldrd	r9, r6, [r5]
   1303c:	3508      	adds	r5, #8
   1303e:	e7d2      	b.n	12fe6 <__sfvwrite_r+0x8a>
   13040:	e9d5 a600 	ldrd	sl, r6, [r5]
   13044:	3508      	adds	r5, #8
   13046:	e7a3      	b.n	12f90 <__sfvwrite_r+0x34>
   13048:	4621      	mov	r1, r4
   1304a:	4640      	mov	r0, r8
   1304c:	f7fd fd24 	bl	10a98 <_fflush_r>
   13050:	b380      	cbz	r0, 130b4 <__sfvwrite_r+0x158>
   13052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1305a:	f04f 30ff 	mov.w	r0, #4294967295
   1305e:	81a3      	strh	r3, [r4, #12]
   13060:	b003      	add	sp, #12
   13062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13066:	2000      	movs	r0, #0
   13068:	4770      	bx	lr
   1306a:	461e      	mov	r6, r3
   1306c:	46ba      	mov	sl, r7
   1306e:	4699      	mov	r9, r3
   13070:	4618      	mov	r0, r3
   13072:	461f      	mov	r7, r3
   13074:	b366      	cbz	r6, 130d0 <__sfvwrite_r+0x174>
   13076:	b388      	cbz	r0, 130dc <__sfvwrite_r+0x180>
   13078:	464a      	mov	r2, r9
   1307a:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
   1307e:	6820      	ldr	r0, [r4, #0]
   13080:	68a1      	ldr	r1, [r4, #8]
   13082:	42b2      	cmp	r2, r6
   13084:	bf28      	it	cs
   13086:	4632      	movcs	r2, r6
   13088:	4560      	cmp	r0, ip
   1308a:	d904      	bls.n	13096 <__sfvwrite_r+0x13a>
   1308c:	eb01 0b03 	add.w	fp, r1, r3
   13090:	455a      	cmp	r2, fp
   13092:	f300 80a7 	bgt.w	131e4 <__sfvwrite_r+0x288>
   13096:	4293      	cmp	r3, r2
   13098:	dc64      	bgt.n	13164 <__sfvwrite_r+0x208>
   1309a:	69e1      	ldr	r1, [r4, #28]
   1309c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   130a0:	463a      	mov	r2, r7
   130a2:	4640      	mov	r0, r8
   130a4:	47e0      	blx	ip
   130a6:	f1b0 0b00 	subs.w	fp, r0, #0
   130aa:	ddd2      	ble.n	13052 <__sfvwrite_r+0xf6>
   130ac:	ebb9 090b 	subs.w	r9, r9, fp
   130b0:	d0ca      	beq.n	13048 <__sfvwrite_r+0xec>
   130b2:	2001      	movs	r0, #1
   130b4:	f8da 3008 	ldr.w	r3, [sl, #8]
   130b8:	eba3 030b 	sub.w	r3, r3, fp
   130bc:	445f      	add	r7, fp
   130be:	eba6 060b 	sub.w	r6, r6, fp
   130c2:	f8ca 3008 	str.w	r3, [sl, #8]
   130c6:	2b00      	cmp	r3, #0
   130c8:	f43f af77 	beq.w	12fba <__sfvwrite_r+0x5e>
   130cc:	2e00      	cmp	r6, #0
   130ce:	d1d2      	bne.n	13076 <__sfvwrite_r+0x11a>
   130d0:	686e      	ldr	r6, [r5, #4]
   130d2:	462b      	mov	r3, r5
   130d4:	3508      	adds	r5, #8
   130d6:	2e00      	cmp	r6, #0
   130d8:	d0fa      	beq.n	130d0 <__sfvwrite_r+0x174>
   130da:	681f      	ldr	r7, [r3, #0]
   130dc:	4632      	mov	r2, r6
   130de:	210a      	movs	r1, #10
   130e0:	4638      	mov	r0, r7
   130e2:	f7fd fd1d 	bl	10b20 <memchr>
   130e6:	2800      	cmp	r0, #0
   130e8:	f000 809d 	beq.w	13226 <__sfvwrite_r+0x2ca>
   130ec:	3001      	adds	r0, #1
   130ee:	eba0 0907 	sub.w	r9, r0, r7
   130f2:	e7c1      	b.n	13078 <__sfvwrite_r+0x11c>
   130f4:	6820      	ldr	r0, [r4, #0]
   130f6:	6923      	ldr	r3, [r4, #16]
   130f8:	4298      	cmp	r0, r3
   130fa:	d817      	bhi.n	1312c <__sfvwrite_r+0x1d0>
   130fc:	6962      	ldr	r2, [r4, #20]
   130fe:	42b2      	cmp	r2, r6
   13100:	d814      	bhi.n	1312c <__sfvwrite_r+0x1d0>
   13102:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13106:	42b3      	cmp	r3, r6
   13108:	bf28      	it	cs
   1310a:	4633      	movcs	r3, r6
   1310c:	69e1      	ldr	r1, [r4, #28]
   1310e:	fb93 f3f2 	sdiv	r3, r3, r2
   13112:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   13116:	fb02 f303 	mul.w	r3, r2, r3
   1311a:	4640      	mov	r0, r8
   1311c:	464a      	mov	r2, r9
   1311e:	47e0      	blx	ip
   13120:	f1b0 0a00 	subs.w	sl, r0, #0
   13124:	dd95      	ble.n	13052 <__sfvwrite_r+0xf6>
   13126:	eba6 060a 	sub.w	r6, r6, sl
   1312a:	e779      	b.n	13020 <__sfvwrite_r+0xc4>
   1312c:	45b3      	cmp	fp, r6
   1312e:	46da      	mov	sl, fp
   13130:	bf28      	it	cs
   13132:	46b2      	movcs	sl, r6
   13134:	4652      	mov	r2, sl
   13136:	4649      	mov	r1, r9
   13138:	f7fa fe88 	bl	de4c <memmove>
   1313c:	68a3      	ldr	r3, [r4, #8]
   1313e:	6822      	ldr	r2, [r4, #0]
   13140:	eba3 030a 	sub.w	r3, r3, sl
   13144:	4452      	add	r2, sl
   13146:	60a3      	str	r3, [r4, #8]
   13148:	6022      	str	r2, [r4, #0]
   1314a:	2b00      	cmp	r3, #0
   1314c:	d1eb      	bne.n	13126 <__sfvwrite_r+0x1ca>
   1314e:	4621      	mov	r1, r4
   13150:	4640      	mov	r0, r8
   13152:	f7fd fca1 	bl	10a98 <_fflush_r>
   13156:	2800      	cmp	r0, #0
   13158:	d0e5      	beq.n	13126 <__sfvwrite_r+0x1ca>
   1315a:	e77a      	b.n	13052 <__sfvwrite_r+0xf6>
   1315c:	6820      	ldr	r0, [r4, #0]
   1315e:	46b3      	mov	fp, r6
   13160:	4632      	mov	r2, r6
   13162:	e74f      	b.n	13004 <__sfvwrite_r+0xa8>
   13164:	4639      	mov	r1, r7
   13166:	9201      	str	r2, [sp, #4]
   13168:	f7fa fe70 	bl	de4c <memmove>
   1316c:	9a01      	ldr	r2, [sp, #4]
   1316e:	68a3      	ldr	r3, [r4, #8]
   13170:	1a9b      	subs	r3, r3, r2
   13172:	60a3      	str	r3, [r4, #8]
   13174:	6823      	ldr	r3, [r4, #0]
   13176:	4413      	add	r3, r2
   13178:	6023      	str	r3, [r4, #0]
   1317a:	4693      	mov	fp, r2
   1317c:	e796      	b.n	130ac <__sfvwrite_r+0x150>
   1317e:	6823      	ldr	r3, [r4, #0]
   13180:	6921      	ldr	r1, [r4, #16]
   13182:	eba3 0b01 	sub.w	fp, r3, r1
   13186:	6963      	ldr	r3, [r4, #20]
   13188:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   1318c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   13190:	f10b 0301 	add.w	r3, fp, #1
   13194:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   13198:	4433      	add	r3, r6
   1319a:	4553      	cmp	r3, sl
   1319c:	4652      	mov	r2, sl
   1319e:	bf84      	itt	hi
   131a0:	469a      	movhi	sl, r3
   131a2:	4652      	movhi	r2, sl
   131a4:	0543      	lsls	r3, r0, #21
   131a6:	d52c      	bpl.n	13202 <__sfvwrite_r+0x2a6>
   131a8:	4611      	mov	r1, r2
   131aa:	4640      	mov	r0, r8
   131ac:	f7fa f85c 	bl	d268 <_malloc_r>
   131b0:	2800      	cmp	r0, #0
   131b2:	d03b      	beq.n	1322c <__sfvwrite_r+0x2d0>
   131b4:	465a      	mov	r2, fp
   131b6:	6921      	ldr	r1, [r4, #16]
   131b8:	9001      	str	r0, [sp, #4]
   131ba:	f7f6 fcfb 	bl	9bb4 <memcpy>
   131be:	89a2      	ldrh	r2, [r4, #12]
   131c0:	9b01      	ldr	r3, [sp, #4]
   131c2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   131c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   131ca:	81a2      	strh	r2, [r4, #12]
   131cc:	eb03 000b 	add.w	r0, r3, fp
   131d0:	6123      	str	r3, [r4, #16]
   131d2:	ebaa 030b 	sub.w	r3, sl, fp
   131d6:	f8c4 a014 	str.w	sl, [r4, #20]
   131da:	60a3      	str	r3, [r4, #8]
   131dc:	6020      	str	r0, [r4, #0]
   131de:	46b3      	mov	fp, r6
   131e0:	4632      	mov	r2, r6
   131e2:	e70f      	b.n	13004 <__sfvwrite_r+0xa8>
   131e4:	4639      	mov	r1, r7
   131e6:	465a      	mov	r2, fp
   131e8:	f7fa fe30 	bl	de4c <memmove>
   131ec:	6823      	ldr	r3, [r4, #0]
   131ee:	445b      	add	r3, fp
   131f0:	6023      	str	r3, [r4, #0]
   131f2:	4621      	mov	r1, r4
   131f4:	4640      	mov	r0, r8
   131f6:	f7fd fc4f 	bl	10a98 <_fflush_r>
   131fa:	2800      	cmp	r0, #0
   131fc:	f43f af56 	beq.w	130ac <__sfvwrite_r+0x150>
   13200:	e727      	b.n	13052 <__sfvwrite_r+0xf6>
   13202:	4640      	mov	r0, r8
   13204:	f7fa faec 	bl	d7e0 <_realloc_r>
   13208:	4603      	mov	r3, r0
   1320a:	2800      	cmp	r0, #0
   1320c:	d1de      	bne.n	131cc <__sfvwrite_r+0x270>
   1320e:	6921      	ldr	r1, [r4, #16]
   13210:	4640      	mov	r0, r8
   13212:	f7fb f8a3 	bl	e35c <_free_r>
   13216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1321a:	220c      	movs	r2, #12
   1321c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13220:	f8c8 2000 	str.w	r2, [r8]
   13224:	e717      	b.n	13056 <__sfvwrite_r+0xfa>
   13226:	1c72      	adds	r2, r6, #1
   13228:	4691      	mov	r9, r2
   1322a:	e726      	b.n	1307a <__sfvwrite_r+0x11e>
   1322c:	220c      	movs	r2, #12
   1322e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13232:	f8c8 2000 	str.w	r2, [r8]
   13236:	e70e      	b.n	13056 <__sfvwrite_r+0xfa>
   13238:	f04f 30ff 	mov.w	r0, #4294967295
   1323c:	e6be      	b.n	12fbc <__sfvwrite_r+0x60>
   1323e:	bf00      	nop
   13240:	7ffffc00 	.word	0x7ffffc00

00013244 <__swsetup_r>:
   13244:	b538      	push	{r3, r4, r5, lr}
   13246:	4b31      	ldr	r3, [pc, #196]	; (1330c <__swsetup_r+0xc8>)
   13248:	681b      	ldr	r3, [r3, #0]
   1324a:	4605      	mov	r5, r0
   1324c:	460c      	mov	r4, r1
   1324e:	b113      	cbz	r3, 13256 <__swsetup_r+0x12>
   13250:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13252:	2a00      	cmp	r2, #0
   13254:	d04e      	beq.n	132f4 <__swsetup_r+0xb0>
   13256:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1325a:	0718      	lsls	r0, r3, #28
   1325c:	b29a      	uxth	r2, r3
   1325e:	d51c      	bpl.n	1329a <__swsetup_r+0x56>
   13260:	6921      	ldr	r1, [r4, #16]
   13262:	b329      	cbz	r1, 132b0 <__swsetup_r+0x6c>
   13264:	f012 0001 	ands.w	r0, r2, #1
   13268:	d007      	beq.n	1327a <__swsetup_r+0x36>
   1326a:	2000      	movs	r0, #0
   1326c:	60a0      	str	r0, [r4, #8]
   1326e:	6960      	ldr	r0, [r4, #20]
   13270:	4240      	negs	r0, r0
   13272:	61a0      	str	r0, [r4, #24]
   13274:	b139      	cbz	r1, 13286 <__swsetup_r+0x42>
   13276:	2000      	movs	r0, #0
   13278:	bd38      	pop	{r3, r4, r5, pc}
   1327a:	0795      	lsls	r5, r2, #30
   1327c:	bf58      	it	pl
   1327e:	6960      	ldrpl	r0, [r4, #20]
   13280:	60a0      	str	r0, [r4, #8]
   13282:	2900      	cmp	r1, #0
   13284:	d1f7      	bne.n	13276 <__swsetup_r+0x32>
   13286:	0612      	lsls	r2, r2, #24
   13288:	bf58      	it	pl
   1328a:	4608      	movpl	r0, r1
   1328c:	d5f4      	bpl.n	13278 <__swsetup_r+0x34>
   1328e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13292:	81a3      	strh	r3, [r4, #12]
   13294:	f04f 30ff 	mov.w	r0, #4294967295
   13298:	bd38      	pop	{r3, r4, r5, pc}
   1329a:	06d1      	lsls	r1, r2, #27
   1329c:	d52e      	bpl.n	132fc <__swsetup_r+0xb8>
   1329e:	0752      	lsls	r2, r2, #29
   132a0:	d414      	bmi.n	132cc <__swsetup_r+0x88>
   132a2:	6921      	ldr	r1, [r4, #16]
   132a4:	f043 0308 	orr.w	r3, r3, #8
   132a8:	81a3      	strh	r3, [r4, #12]
   132aa:	b29a      	uxth	r2, r3
   132ac:	2900      	cmp	r1, #0
   132ae:	d1d9      	bne.n	13264 <__swsetup_r+0x20>
   132b0:	f402 7020 	and.w	r0, r2, #640	; 0x280
   132b4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   132b8:	d0d4      	beq.n	13264 <__swsetup_r+0x20>
   132ba:	4621      	mov	r1, r4
   132bc:	4628      	mov	r0, r5
   132be:	f000 f93f 	bl	13540 <__smakebuf_r>
   132c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   132c6:	6921      	ldr	r1, [r4, #16]
   132c8:	b29a      	uxth	r2, r3
   132ca:	e7cb      	b.n	13264 <__swsetup_r+0x20>
   132cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   132ce:	b151      	cbz	r1, 132e6 <__swsetup_r+0xa2>
   132d0:	f104 0240 	add.w	r2, r4, #64	; 0x40
   132d4:	4291      	cmp	r1, r2
   132d6:	d004      	beq.n	132e2 <__swsetup_r+0x9e>
   132d8:	4628      	mov	r0, r5
   132da:	f7fb f83f 	bl	e35c <_free_r>
   132de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   132e2:	2200      	movs	r2, #0
   132e4:	6322      	str	r2, [r4, #48]	; 0x30
   132e6:	6921      	ldr	r1, [r4, #16]
   132e8:	2200      	movs	r2, #0
   132ea:	e9c4 1200 	strd	r1, r2, [r4]
   132ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   132f2:	e7d7      	b.n	132a4 <__swsetup_r+0x60>
   132f4:	4618      	mov	r0, r3
   132f6:	f7fa fcf5 	bl	dce4 <__sinit>
   132fa:	e7ac      	b.n	13256 <__swsetup_r+0x12>
   132fc:	2209      	movs	r2, #9
   132fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13302:	602a      	str	r2, [r5, #0]
   13304:	f04f 30ff 	mov.w	r0, #4294967295
   13308:	81a3      	strh	r3, [r4, #12]
   1330a:	bd38      	pop	{r3, r4, r5, pc}
   1330c:	1fff9160 	.word	0x1fff9160

00013310 <__fputwc>:
   13310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13314:	b083      	sub	sp, #12
   13316:	4607      	mov	r7, r0
   13318:	4688      	mov	r8, r1
   1331a:	4614      	mov	r4, r2
   1331c:	f7fa fe96 	bl	e04c <__locale_mb_cur_max>
   13320:	2801      	cmp	r0, #1
   13322:	d103      	bne.n	1332c <__fputwc+0x1c>
   13324:	f108 33ff 	add.w	r3, r8, #4294967295
   13328:	2bfe      	cmp	r3, #254	; 0xfe
   1332a:	d937      	bls.n	1339c <__fputwc+0x8c>
   1332c:	f10d 0904 	add.w	r9, sp, #4
   13330:	4642      	mov	r2, r8
   13332:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   13336:	4649      	mov	r1, r9
   13338:	4638      	mov	r0, r7
   1333a:	f7fe fd09 	bl	11d50 <_wcrtomb_r>
   1333e:	1c42      	adds	r2, r0, #1
   13340:	4606      	mov	r6, r0
   13342:	d033      	beq.n	133ac <__fputwc+0x9c>
   13344:	b328      	cbz	r0, 13392 <__fputwc+0x82>
   13346:	f89d c004 	ldrb.w	ip, [sp, #4]
   1334a:	2500      	movs	r5, #0
   1334c:	e009      	b.n	13362 <__fputwc+0x52>
   1334e:	6823      	ldr	r3, [r4, #0]
   13350:	1c5a      	adds	r2, r3, #1
   13352:	6022      	str	r2, [r4, #0]
   13354:	f883 c000 	strb.w	ip, [r3]
   13358:	3501      	adds	r5, #1
   1335a:	42b5      	cmp	r5, r6
   1335c:	d219      	bcs.n	13392 <__fputwc+0x82>
   1335e:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   13362:	68a3      	ldr	r3, [r4, #8]
   13364:	3b01      	subs	r3, #1
   13366:	2b00      	cmp	r3, #0
   13368:	60a3      	str	r3, [r4, #8]
   1336a:	daf0      	bge.n	1334e <__fputwc+0x3e>
   1336c:	f8d4 e018 	ldr.w	lr, [r4, #24]
   13370:	4573      	cmp	r3, lr
   13372:	4661      	mov	r1, ip
   13374:	4622      	mov	r2, r4
   13376:	4638      	mov	r0, r7
   13378:	db02      	blt.n	13380 <__fputwc+0x70>
   1337a:	f1bc 0f0a 	cmp.w	ip, #10
   1337e:	d1e6      	bne.n	1334e <__fputwc+0x3e>
   13380:	f000 f94a 	bl	13618 <__swbuf_r>
   13384:	1c43      	adds	r3, r0, #1
   13386:	d1e7      	bne.n	13358 <__fputwc+0x48>
   13388:	4606      	mov	r6, r0
   1338a:	4630      	mov	r0, r6
   1338c:	b003      	add	sp, #12
   1338e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13392:	4646      	mov	r6, r8
   13394:	4630      	mov	r0, r6
   13396:	b003      	add	sp, #12
   13398:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1339c:	fa5f fc88 	uxtb.w	ip, r8
   133a0:	f88d c004 	strb.w	ip, [sp, #4]
   133a4:	4606      	mov	r6, r0
   133a6:	f10d 0904 	add.w	r9, sp, #4
   133aa:	e7ce      	b.n	1334a <__fputwc+0x3a>
   133ac:	89a3      	ldrh	r3, [r4, #12]
   133ae:	4630      	mov	r0, r6
   133b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   133b4:	81a3      	strh	r3, [r4, #12]
   133b6:	b003      	add	sp, #12
   133b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000133bc <_fputwc_r>:
   133bc:	b530      	push	{r4, r5, lr}
   133be:	6e53      	ldr	r3, [r2, #100]	; 0x64
   133c0:	f013 0f01 	tst.w	r3, #1
   133c4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   133c8:	4614      	mov	r4, r2
   133ca:	b083      	sub	sp, #12
   133cc:	4605      	mov	r5, r0
   133ce:	b29a      	uxth	r2, r3
   133d0:	d101      	bne.n	133d6 <_fputwc_r+0x1a>
   133d2:	0598      	lsls	r0, r3, #22
   133d4:	d51c      	bpl.n	13410 <_fputwc_r+0x54>
   133d6:	0490      	lsls	r0, r2, #18
   133d8:	d406      	bmi.n	133e8 <_fputwc_r+0x2c>
   133da:	6e62      	ldr	r2, [r4, #100]	; 0x64
   133dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   133e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   133e4:	81a3      	strh	r3, [r4, #12]
   133e6:	6662      	str	r2, [r4, #100]	; 0x64
   133e8:	4622      	mov	r2, r4
   133ea:	4628      	mov	r0, r5
   133ec:	f7ff ff90 	bl	13310 <__fputwc>
   133f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   133f2:	07da      	lsls	r2, r3, #31
   133f4:	4605      	mov	r5, r0
   133f6:	d402      	bmi.n	133fe <_fputwc_r+0x42>
   133f8:	89a3      	ldrh	r3, [r4, #12]
   133fa:	059b      	lsls	r3, r3, #22
   133fc:	d502      	bpl.n	13404 <_fputwc_r+0x48>
   133fe:	4628      	mov	r0, r5
   13400:	b003      	add	sp, #12
   13402:	bd30      	pop	{r4, r5, pc}
   13404:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13406:	f7fa febd 	bl	e184 <__retarget_lock_release_recursive>
   1340a:	4628      	mov	r0, r5
   1340c:	b003      	add	sp, #12
   1340e:	bd30      	pop	{r4, r5, pc}
   13410:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13412:	9101      	str	r1, [sp, #4]
   13414:	f7fa feb4 	bl	e180 <__retarget_lock_acquire_recursive>
   13418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1341c:	9901      	ldr	r1, [sp, #4]
   1341e:	b29a      	uxth	r2, r3
   13420:	e7d9      	b.n	133d6 <_fputwc_r+0x1a>
   13422:	bf00      	nop

00013424 <_wcsnrtombs_l>:
   13424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13428:	b089      	sub	sp, #36	; 0x24
   1342a:	e9dd 8a13 	ldrd	r8, sl, [sp, #76]	; 0x4c
   1342e:	9f12      	ldr	r7, [sp, #72]	; 0x48
   13430:	9101      	str	r1, [sp, #4]
   13432:	4681      	mov	r9, r0
   13434:	9203      	str	r2, [sp, #12]
   13436:	461e      	mov	r6, r3
   13438:	f1b8 0f00 	cmp.w	r8, #0
   1343c:	d055      	beq.n	134ea <_wcsnrtombs_l+0xc6>
   1343e:	9b01      	ldr	r3, [sp, #4]
   13440:	2b00      	cmp	r3, #0
   13442:	d057      	beq.n	134f4 <_wcsnrtombs_l+0xd0>
   13444:	9b03      	ldr	r3, [sp, #12]
   13446:	681d      	ldr	r5, [r3, #0]
   13448:	2f00      	cmp	r7, #0
   1344a:	d063      	beq.n	13514 <_wcsnrtombs_l+0xf0>
   1344c:	1e74      	subs	r4, r6, #1
   1344e:	b32e      	cbz	r6, 1349c <_wcsnrtombs_l+0x78>
   13450:	9b01      	ldr	r3, [sp, #4]
   13452:	9302      	str	r3, [sp, #8]
   13454:	3d04      	subs	r5, #4
   13456:	2600      	movs	r6, #0
   13458:	e00a      	b.n	13470 <_wcsnrtombs_l+0x4c>
   1345a:	9b01      	ldr	r3, [sp, #4]
   1345c:	bb13      	cbnz	r3, 134a4 <_wcsnrtombs_l+0x80>
   1345e:	682a      	ldr	r2, [r5, #0]
   13460:	2a00      	cmp	r2, #0
   13462:	d035      	beq.n	134d0 <_wcsnrtombs_l+0xac>
   13464:	45bc      	cmp	ip, r7
   13466:	d257      	bcs.n	13518 <_wcsnrtombs_l+0xf4>
   13468:	3c01      	subs	r4, #1
   1346a:	1c63      	adds	r3, r4, #1
   1346c:	4666      	mov	r6, ip
   1346e:	d015      	beq.n	1349c <_wcsnrtombs_l+0x78>
   13470:	f8d8 3000 	ldr.w	r3, [r8]
   13474:	f855 2f04 	ldr.w	r2, [r5, #4]!
   13478:	9300      	str	r3, [sp, #0]
   1347a:	f8da c0e0 	ldr.w	ip, [sl, #224]	; 0xe0
   1347e:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13482:	4643      	mov	r3, r8
   13484:	a905      	add	r1, sp, #20
   13486:	4648      	mov	r0, r9
   13488:	47e0      	blx	ip
   1348a:	1c42      	adds	r2, r0, #1
   1348c:	d037      	beq.n	134fe <_wcsnrtombs_l+0xda>
   1348e:	eb00 0c06 	add.w	ip, r0, r6
   13492:	45bc      	cmp	ip, r7
   13494:	d9e1      	bls.n	1345a <_wcsnrtombs_l+0x36>
   13496:	9b00      	ldr	r3, [sp, #0]
   13498:	e9c8 3b00 	strd	r3, fp, [r8]
   1349c:	4630      	mov	r0, r6
   1349e:	b009      	add	sp, #36	; 0x24
   134a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134a4:	2800      	cmp	r0, #0
   134a6:	dd0c      	ble.n	134c2 <_wcsnrtombs_l+0x9e>
   134a8:	9b02      	ldr	r3, [sp, #8]
   134aa:	4418      	add	r0, r3
   134ac:	1e5a      	subs	r2, r3, #1
   134ae:	a905      	add	r1, sp, #20
   134b0:	f100 3eff 	add.w	lr, r0, #4294967295
   134b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   134b8:	f802 3f01 	strb.w	r3, [r2, #1]!
   134bc:	4572      	cmp	r2, lr
   134be:	d1f9      	bne.n	134b4 <_wcsnrtombs_l+0x90>
   134c0:	9002      	str	r0, [sp, #8]
   134c2:	9b03      	ldr	r3, [sp, #12]
   134c4:	681a      	ldr	r2, [r3, #0]
   134c6:	3204      	adds	r2, #4
   134c8:	601a      	str	r2, [r3, #0]
   134ca:	682a      	ldr	r2, [r5, #0]
   134cc:	2a00      	cmp	r2, #0
   134ce:	d1c9      	bne.n	13464 <_wcsnrtombs_l+0x40>
   134d0:	9b01      	ldr	r3, [sp, #4]
   134d2:	b10b      	cbz	r3, 134d8 <_wcsnrtombs_l+0xb4>
   134d4:	9b03      	ldr	r3, [sp, #12]
   134d6:	601a      	str	r2, [r3, #0]
   134d8:	f10c 36ff 	add.w	r6, ip, #4294967295
   134dc:	2200      	movs	r2, #0
   134de:	4630      	mov	r0, r6
   134e0:	f8c8 2000 	str.w	r2, [r8]
   134e4:	b009      	add	sp, #36	; 0x24
   134e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134ea:	9b01      	ldr	r3, [sp, #4]
   134ec:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   134f0:	2b00      	cmp	r3, #0
   134f2:	d1a7      	bne.n	13444 <_wcsnrtombs_l+0x20>
   134f4:	9b03      	ldr	r3, [sp, #12]
   134f6:	f04f 37ff 	mov.w	r7, #4294967295
   134fa:	681d      	ldr	r5, [r3, #0]
   134fc:	e7a6      	b.n	1344c <_wcsnrtombs_l+0x28>
   134fe:	4606      	mov	r6, r0
   13500:	218a      	movs	r1, #138	; 0x8a
   13502:	2200      	movs	r2, #0
   13504:	4630      	mov	r0, r6
   13506:	f8c9 1000 	str.w	r1, [r9]
   1350a:	f8c8 2000 	str.w	r2, [r8]
   1350e:	b009      	add	sp, #36	; 0x24
   13510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13514:	463e      	mov	r6, r7
   13516:	e7c1      	b.n	1349c <_wcsnrtombs_l+0x78>
   13518:	4666      	mov	r6, ip
   1351a:	e7bf      	b.n	1349c <_wcsnrtombs_l+0x78>

0001351c <_wcsnrtombs_r>:
   1351c:	b510      	push	{r4, lr}
   1351e:	b084      	sub	sp, #16
   13520:	4c05      	ldr	r4, [pc, #20]	; (13538 <_wcsnrtombs_r+0x1c>)
   13522:	9806      	ldr	r0, [sp, #24]
   13524:	9000      	str	r0, [sp, #0]
   13526:	9807      	ldr	r0, [sp, #28]
   13528:	9001      	str	r0, [sp, #4]
   1352a:	4804      	ldr	r0, [pc, #16]	; (1353c <_wcsnrtombs_r+0x20>)
   1352c:	6800      	ldr	r0, [r0, #0]
   1352e:	9402      	str	r4, [sp, #8]
   13530:	f7ff ff78 	bl	13424 <_wcsnrtombs_l>
   13534:	b004      	add	sp, #16
   13536:	bd10      	pop	{r4, pc}
   13538:	1fff8ed4 	.word	0x1fff8ed4
   1353c:	1fff9160 	.word	0x1fff9160

00013540 <__smakebuf_r>:
   13540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13544:	898b      	ldrh	r3, [r1, #12]
   13546:	460c      	mov	r4, r1
   13548:	0799      	lsls	r1, r3, #30
   1354a:	b096      	sub	sp, #88	; 0x58
   1354c:	d508      	bpl.n	13560 <__smakebuf_r+0x20>
   1354e:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13552:	2201      	movs	r2, #1
   13554:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13558:	6023      	str	r3, [r4, #0]
   1355a:	b016      	add	sp, #88	; 0x58
   1355c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13564:	2900      	cmp	r1, #0
   13566:	4606      	mov	r6, r0
   13568:	db25      	blt.n	135b6 <__smakebuf_r+0x76>
   1356a:	466a      	mov	r2, sp
   1356c:	f000 f8ac 	bl	136c8 <_fstat_r>
   13570:	2800      	cmp	r0, #0
   13572:	db1f      	blt.n	135b4 <__smakebuf_r+0x74>
   13574:	9d01      	ldr	r5, [sp, #4]
   13576:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1357a:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   1357e:	fab5 f585 	clz	r5, r5
   13582:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13586:	096d      	lsrs	r5, r5, #5
   13588:	f44f 6700 	mov.w	r7, #2048	; 0x800
   1358c:	4641      	mov	r1, r8
   1358e:	4630      	mov	r0, r6
   13590:	f7f9 fe6a 	bl	d268 <_malloc_r>
   13594:	b1e0      	cbz	r0, 135d0 <__smakebuf_r+0x90>
   13596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1359a:	f8c4 8014 	str.w	r8, [r4, #20]
   1359e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   135a2:	6020      	str	r0, [r4, #0]
   135a4:	6120      	str	r0, [r4, #16]
   135a6:	81a3      	strh	r3, [r4, #12]
   135a8:	bb35      	cbnz	r5, 135f8 <__smakebuf_r+0xb8>
   135aa:	433b      	orrs	r3, r7
   135ac:	81a3      	strh	r3, [r4, #12]
   135ae:	b016      	add	sp, #88	; 0x58
   135b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   135b4:	89a3      	ldrh	r3, [r4, #12]
   135b6:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   135ba:	d019      	beq.n	135f0 <__smakebuf_r+0xb0>
   135bc:	f04f 0840 	mov.w	r8, #64	; 0x40
   135c0:	2500      	movs	r5, #0
   135c2:	4641      	mov	r1, r8
   135c4:	4630      	mov	r0, r6
   135c6:	462f      	mov	r7, r5
   135c8:	f7f9 fe4e 	bl	d268 <_malloc_r>
   135cc:	2800      	cmp	r0, #0
   135ce:	d1e2      	bne.n	13596 <__smakebuf_r+0x56>
   135d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   135d4:	059a      	lsls	r2, r3, #22
   135d6:	d4c0      	bmi.n	1355a <__smakebuf_r+0x1a>
   135d8:	f023 0303 	bic.w	r3, r3, #3
   135dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   135e0:	f043 0302 	orr.w	r3, r3, #2
   135e4:	2101      	movs	r1, #1
   135e6:	e9c4 2104 	strd	r2, r1, [r4, #16]
   135ea:	81a3      	strh	r3, [r4, #12]
   135ec:	6022      	str	r2, [r4, #0]
   135ee:	e7b4      	b.n	1355a <__smakebuf_r+0x1a>
   135f0:	f44f 6880 	mov.w	r8, #1024	; 0x400
   135f4:	462f      	mov	r7, r5
   135f6:	e7c9      	b.n	1358c <__smakebuf_r+0x4c>
   135f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   135fc:	4630      	mov	r0, r6
   135fe:	f000 f879 	bl	136f4 <_isatty_r>
   13602:	b910      	cbnz	r0, 1360a <__smakebuf_r+0xca>
   13604:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13608:	e7cf      	b.n	135aa <__smakebuf_r+0x6a>
   1360a:	89a3      	ldrh	r3, [r4, #12]
   1360c:	f023 0303 	bic.w	r3, r3, #3
   13610:	f043 0301 	orr.w	r3, r3, #1
   13614:	b21b      	sxth	r3, r3
   13616:	e7c8      	b.n	135aa <__smakebuf_r+0x6a>

00013618 <__swbuf_r>:
   13618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1361a:	460d      	mov	r5, r1
   1361c:	4614      	mov	r4, r2
   1361e:	4606      	mov	r6, r0
   13620:	b110      	cbz	r0, 13628 <__swbuf_r+0x10>
   13622:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13624:	2b00      	cmp	r3, #0
   13626:	d04c      	beq.n	136c2 <__swbuf_r+0xaa>
   13628:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1362c:	69a3      	ldr	r3, [r4, #24]
   1362e:	60a3      	str	r3, [r4, #8]
   13630:	0717      	lsls	r7, r2, #28
   13632:	b290      	uxth	r0, r2
   13634:	d51b      	bpl.n	1366e <__swbuf_r+0x56>
   13636:	6923      	ldr	r3, [r4, #16]
   13638:	b1cb      	cbz	r3, 1366e <__swbuf_r+0x56>
   1363a:	b2ed      	uxtb	r5, r5
   1363c:	0481      	lsls	r1, r0, #18
   1363e:	462f      	mov	r7, r5
   13640:	d522      	bpl.n	13688 <__swbuf_r+0x70>
   13642:	6822      	ldr	r2, [r4, #0]
   13644:	6961      	ldr	r1, [r4, #20]
   13646:	1ad3      	subs	r3, r2, r3
   13648:	4299      	cmp	r1, r3
   1364a:	dd29      	ble.n	136a0 <__swbuf_r+0x88>
   1364c:	3301      	adds	r3, #1
   1364e:	68a1      	ldr	r1, [r4, #8]
   13650:	3901      	subs	r1, #1
   13652:	60a1      	str	r1, [r4, #8]
   13654:	1c51      	adds	r1, r2, #1
   13656:	6021      	str	r1, [r4, #0]
   13658:	7015      	strb	r5, [r2, #0]
   1365a:	6962      	ldr	r2, [r4, #20]
   1365c:	429a      	cmp	r2, r3
   1365e:	d027      	beq.n	136b0 <__swbuf_r+0x98>
   13660:	89a3      	ldrh	r3, [r4, #12]
   13662:	07db      	lsls	r3, r3, #31
   13664:	d501      	bpl.n	1366a <__swbuf_r+0x52>
   13666:	2d0a      	cmp	r5, #10
   13668:	d022      	beq.n	136b0 <__swbuf_r+0x98>
   1366a:	4638      	mov	r0, r7
   1366c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1366e:	4621      	mov	r1, r4
   13670:	4630      	mov	r0, r6
   13672:	f7ff fde7 	bl	13244 <__swsetup_r>
   13676:	bb08      	cbnz	r0, 136bc <__swbuf_r+0xa4>
   13678:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1367c:	6923      	ldr	r3, [r4, #16]
   1367e:	b290      	uxth	r0, r2
   13680:	b2ed      	uxtb	r5, r5
   13682:	0481      	lsls	r1, r0, #18
   13684:	462f      	mov	r7, r5
   13686:	d4dc      	bmi.n	13642 <__swbuf_r+0x2a>
   13688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1368c:	81a2      	strh	r2, [r4, #12]
   1368e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13690:	6961      	ldr	r1, [r4, #20]
   13692:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   13696:	6662      	str	r2, [r4, #100]	; 0x64
   13698:	6822      	ldr	r2, [r4, #0]
   1369a:	1ad3      	subs	r3, r2, r3
   1369c:	4299      	cmp	r1, r3
   1369e:	dcd5      	bgt.n	1364c <__swbuf_r+0x34>
   136a0:	4621      	mov	r1, r4
   136a2:	4630      	mov	r0, r6
   136a4:	f7fd f9f8 	bl	10a98 <_fflush_r>
   136a8:	b940      	cbnz	r0, 136bc <__swbuf_r+0xa4>
   136aa:	6822      	ldr	r2, [r4, #0]
   136ac:	2301      	movs	r3, #1
   136ae:	e7ce      	b.n	1364e <__swbuf_r+0x36>
   136b0:	4621      	mov	r1, r4
   136b2:	4630      	mov	r0, r6
   136b4:	f7fd f9f0 	bl	10a98 <_fflush_r>
   136b8:	2800      	cmp	r0, #0
   136ba:	d0d6      	beq.n	1366a <__swbuf_r+0x52>
   136bc:	f04f 37ff 	mov.w	r7, #4294967295
   136c0:	e7d3      	b.n	1366a <__swbuf_r+0x52>
   136c2:	f7fa fb0f 	bl	dce4 <__sinit>
   136c6:	e7af      	b.n	13628 <__swbuf_r+0x10>

000136c8 <_fstat_r>:
   136c8:	b570      	push	{r4, r5, r6, lr}
   136ca:	460c      	mov	r4, r1
   136cc:	4d08      	ldr	r5, [pc, #32]	; (136f0 <_fstat_r+0x28>)
   136ce:	4603      	mov	r3, r0
   136d0:	2600      	movs	r6, #0
   136d2:	4620      	mov	r0, r4
   136d4:	4611      	mov	r1, r2
   136d6:	461c      	mov	r4, r3
   136d8:	602e      	str	r6, [r5, #0]
   136da:	f7f6 fb89 	bl	9df0 <_fstat>
   136de:	1c43      	adds	r3, r0, #1
   136e0:	d000      	beq.n	136e4 <_fstat_r+0x1c>
   136e2:	bd70      	pop	{r4, r5, r6, pc}
   136e4:	682b      	ldr	r3, [r5, #0]
   136e6:	2b00      	cmp	r3, #0
   136e8:	d0fb      	beq.n	136e2 <_fstat_r+0x1a>
   136ea:	6023      	str	r3, [r4, #0]
   136ec:	bd70      	pop	{r4, r5, r6, pc}
   136ee:	bf00      	nop
   136f0:	1fffd768 	.word	0x1fffd768

000136f4 <_isatty_r>:
   136f4:	b538      	push	{r3, r4, r5, lr}
   136f6:	4d07      	ldr	r5, [pc, #28]	; (13714 <_isatty_r+0x20>)
   136f8:	2200      	movs	r2, #0
   136fa:	4604      	mov	r4, r0
   136fc:	4608      	mov	r0, r1
   136fe:	602a      	str	r2, [r5, #0]
   13700:	f7f6 fb7c 	bl	9dfc <_isatty>
   13704:	1c43      	adds	r3, r0, #1
   13706:	d000      	beq.n	1370a <_isatty_r+0x16>
   13708:	bd38      	pop	{r3, r4, r5, pc}
   1370a:	682b      	ldr	r3, [r5, #0]
   1370c:	2b00      	cmp	r3, #0
   1370e:	d0fb      	beq.n	13708 <_isatty_r+0x14>
   13710:	6023      	str	r3, [r4, #0]
   13712:	bd38      	pop	{r3, r4, r5, pc}
   13714:	1fffd768 	.word	0x1fffd768

00013718 <__aeabi_dmul>:
   13718:	b570      	push	{r4, r5, r6, lr}
   1371a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1371e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   13722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   13726:	bf1d      	ittte	ne
   13728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1372c:	ea94 0f0c 	teqne	r4, ip
   13730:	ea95 0f0c 	teqne	r5, ip
   13734:	f000 f8de 	bleq	138f4 <__aeabi_dmul+0x1dc>
   13738:	442c      	add	r4, r5
   1373a:	ea81 0603 	eor.w	r6, r1, r3
   1373e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   13742:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   13746:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1374a:	bf18      	it	ne
   1374c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   13750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13754:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13758:	d038      	beq.n	137cc <__aeabi_dmul+0xb4>
   1375a:	fba0 ce02 	umull	ip, lr, r0, r2
   1375e:	f04f 0500 	mov.w	r5, #0
   13762:	fbe1 e502 	umlal	lr, r5, r1, r2
   13766:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1376a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1376e:	f04f 0600 	mov.w	r6, #0
   13772:	fbe1 5603 	umlal	r5, r6, r1, r3
   13776:	f09c 0f00 	teq	ip, #0
   1377a:	bf18      	it	ne
   1377c:	f04e 0e01 	orrne.w	lr, lr, #1
   13780:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   13784:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   13788:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1378c:	d204      	bcs.n	13798 <__aeabi_dmul+0x80>
   1378e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   13792:	416d      	adcs	r5, r5
   13794:	eb46 0606 	adc.w	r6, r6, r6
   13798:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1379c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   137a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   137a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   137a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   137ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   137b0:	bf88      	it	hi
   137b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   137b6:	d81e      	bhi.n	137f6 <__aeabi_dmul+0xde>
   137b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   137bc:	bf08      	it	eq
   137be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   137c2:	f150 0000 	adcs.w	r0, r0, #0
   137c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   137ca:	bd70      	pop	{r4, r5, r6, pc}
   137cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   137d0:	ea46 0101 	orr.w	r1, r6, r1
   137d4:	ea40 0002 	orr.w	r0, r0, r2
   137d8:	ea81 0103 	eor.w	r1, r1, r3
   137dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   137e0:	bfc2      	ittt	gt
   137e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   137e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   137ea:	bd70      	popgt	{r4, r5, r6, pc}
   137ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   137f0:	f04f 0e00 	mov.w	lr, #0
   137f4:	3c01      	subs	r4, #1
   137f6:	f300 80ab 	bgt.w	13950 <__aeabi_dmul+0x238>
   137fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   137fe:	bfde      	ittt	le
   13800:	2000      	movle	r0, #0
   13802:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   13806:	bd70      	pople	{r4, r5, r6, pc}
   13808:	f1c4 0400 	rsb	r4, r4, #0
   1380c:	3c20      	subs	r4, #32
   1380e:	da35      	bge.n	1387c <__aeabi_dmul+0x164>
   13810:	340c      	adds	r4, #12
   13812:	dc1b      	bgt.n	1384c <__aeabi_dmul+0x134>
   13814:	f104 0414 	add.w	r4, r4, #20
   13818:	f1c4 0520 	rsb	r5, r4, #32
   1381c:	fa00 f305 	lsl.w	r3, r0, r5
   13820:	fa20 f004 	lsr.w	r0, r0, r4
   13824:	fa01 f205 	lsl.w	r2, r1, r5
   13828:	ea40 0002 	orr.w	r0, r0, r2
   1382c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   13830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   13834:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   13838:	fa21 f604 	lsr.w	r6, r1, r4
   1383c:	eb42 0106 	adc.w	r1, r2, r6
   13840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13844:	bf08      	it	eq
   13846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1384a:	bd70      	pop	{r4, r5, r6, pc}
   1384c:	f1c4 040c 	rsb	r4, r4, #12
   13850:	f1c4 0520 	rsb	r5, r4, #32
   13854:	fa00 f304 	lsl.w	r3, r0, r4
   13858:	fa20 f005 	lsr.w	r0, r0, r5
   1385c:	fa01 f204 	lsl.w	r2, r1, r4
   13860:	ea40 0002 	orr.w	r0, r0, r2
   13864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13868:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1386c:	f141 0100 	adc.w	r1, r1, #0
   13870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13874:	bf08      	it	eq
   13876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1387a:	bd70      	pop	{r4, r5, r6, pc}
   1387c:	f1c4 0520 	rsb	r5, r4, #32
   13880:	fa00 f205 	lsl.w	r2, r0, r5
   13884:	ea4e 0e02 	orr.w	lr, lr, r2
   13888:	fa20 f304 	lsr.w	r3, r0, r4
   1388c:	fa01 f205 	lsl.w	r2, r1, r5
   13890:	ea43 0302 	orr.w	r3, r3, r2
   13894:	fa21 f004 	lsr.w	r0, r1, r4
   13898:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1389c:	fa21 f204 	lsr.w	r2, r1, r4
   138a0:	ea20 0002 	bic.w	r0, r0, r2
   138a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   138a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   138ac:	bf08      	it	eq
   138ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   138b2:	bd70      	pop	{r4, r5, r6, pc}
   138b4:	f094 0f00 	teq	r4, #0
   138b8:	d10f      	bne.n	138da <__aeabi_dmul+0x1c2>
   138ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   138be:	0040      	lsls	r0, r0, #1
   138c0:	eb41 0101 	adc.w	r1, r1, r1
   138c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   138c8:	bf08      	it	eq
   138ca:	3c01      	subeq	r4, #1
   138cc:	d0f7      	beq.n	138be <__aeabi_dmul+0x1a6>
   138ce:	ea41 0106 	orr.w	r1, r1, r6
   138d2:	f095 0f00 	teq	r5, #0
   138d6:	bf18      	it	ne
   138d8:	4770      	bxne	lr
   138da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   138de:	0052      	lsls	r2, r2, #1
   138e0:	eb43 0303 	adc.w	r3, r3, r3
   138e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   138e8:	bf08      	it	eq
   138ea:	3d01      	subeq	r5, #1
   138ec:	d0f7      	beq.n	138de <__aeabi_dmul+0x1c6>
   138ee:	ea43 0306 	orr.w	r3, r3, r6
   138f2:	4770      	bx	lr
   138f4:	ea94 0f0c 	teq	r4, ip
   138f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   138fc:	bf18      	it	ne
   138fe:	ea95 0f0c 	teqne	r5, ip
   13902:	d00c      	beq.n	1391e <__aeabi_dmul+0x206>
   13904:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13908:	bf18      	it	ne
   1390a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1390e:	d1d1      	bne.n	138b4 <__aeabi_dmul+0x19c>
   13910:	ea81 0103 	eor.w	r1, r1, r3
   13914:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13918:	f04f 0000 	mov.w	r0, #0
   1391c:	bd70      	pop	{r4, r5, r6, pc}
   1391e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13922:	bf06      	itte	eq
   13924:	4610      	moveq	r0, r2
   13926:	4619      	moveq	r1, r3
   13928:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   1392c:	d019      	beq.n	13962 <__aeabi_dmul+0x24a>
   1392e:	ea94 0f0c 	teq	r4, ip
   13932:	d102      	bne.n	1393a <__aeabi_dmul+0x222>
   13934:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   13938:	d113      	bne.n	13962 <__aeabi_dmul+0x24a>
   1393a:	ea95 0f0c 	teq	r5, ip
   1393e:	d105      	bne.n	1394c <__aeabi_dmul+0x234>
   13940:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   13944:	bf1c      	itt	ne
   13946:	4610      	movne	r0, r2
   13948:	4619      	movne	r1, r3
   1394a:	d10a      	bne.n	13962 <__aeabi_dmul+0x24a>
   1394c:	ea81 0103 	eor.w	r1, r1, r3
   13950:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13954:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13958:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   1395c:	f04f 0000 	mov.w	r0, #0
   13960:	bd70      	pop	{r4, r5, r6, pc}
   13962:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13966:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   1396a:	bd70      	pop	{r4, r5, r6, pc}

0001396c <__aeabi_ddiv>:
   1396c:	b570      	push	{r4, r5, r6, lr}
   1396e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13972:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   13976:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   1397a:	bf1d      	ittte	ne
   1397c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   13980:	ea94 0f0c 	teqne	r4, ip
   13984:	ea95 0f0c 	teqne	r5, ip
   13988:	f000 f8a7 	bleq	13ada <__aeabi_ddiv+0x16e>
   1398c:	eba4 0405 	sub.w	r4, r4, r5
   13990:	ea81 0e03 	eor.w	lr, r1, r3
   13994:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13998:	ea4f 3101 	mov.w	r1, r1, lsl #12
   1399c:	f000 8088 	beq.w	13ab0 <__aeabi_ddiv+0x144>
   139a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   139a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   139a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   139ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   139b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   139b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   139b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   139bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   139c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   139c4:	429d      	cmp	r5, r3
   139c6:	bf08      	it	eq
   139c8:	4296      	cmpeq	r6, r2
   139ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   139ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
   139d2:	d202      	bcs.n	139da <__aeabi_ddiv+0x6e>
   139d4:	085b      	lsrs	r3, r3, #1
   139d6:	ea4f 0232 	mov.w	r2, r2, rrx
   139da:	1ab6      	subs	r6, r6, r2
   139dc:	eb65 0503 	sbc.w	r5, r5, r3
   139e0:	085b      	lsrs	r3, r3, #1
   139e2:	ea4f 0232 	mov.w	r2, r2, rrx
   139e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   139ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   139ee:	ebb6 0e02 	subs.w	lr, r6, r2
   139f2:	eb75 0e03 	sbcs.w	lr, r5, r3
   139f6:	bf22      	ittt	cs
   139f8:	1ab6      	subcs	r6, r6, r2
   139fa:	4675      	movcs	r5, lr
   139fc:	ea40 000c 	orrcs.w	r0, r0, ip
   13a00:	085b      	lsrs	r3, r3, #1
   13a02:	ea4f 0232 	mov.w	r2, r2, rrx
   13a06:	ebb6 0e02 	subs.w	lr, r6, r2
   13a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   13a0e:	bf22      	ittt	cs
   13a10:	1ab6      	subcs	r6, r6, r2
   13a12:	4675      	movcs	r5, lr
   13a14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   13a18:	085b      	lsrs	r3, r3, #1
   13a1a:	ea4f 0232 	mov.w	r2, r2, rrx
   13a1e:	ebb6 0e02 	subs.w	lr, r6, r2
   13a22:	eb75 0e03 	sbcs.w	lr, r5, r3
   13a26:	bf22      	ittt	cs
   13a28:	1ab6      	subcs	r6, r6, r2
   13a2a:	4675      	movcs	r5, lr
   13a2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   13a30:	085b      	lsrs	r3, r3, #1
   13a32:	ea4f 0232 	mov.w	r2, r2, rrx
   13a36:	ebb6 0e02 	subs.w	lr, r6, r2
   13a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   13a3e:	bf22      	ittt	cs
   13a40:	1ab6      	subcs	r6, r6, r2
   13a42:	4675      	movcs	r5, lr
   13a44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   13a48:	ea55 0e06 	orrs.w	lr, r5, r6
   13a4c:	d018      	beq.n	13a80 <__aeabi_ddiv+0x114>
   13a4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   13a52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   13a56:	ea4f 1606 	mov.w	r6, r6, lsl #4
   13a5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   13a5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   13a62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   13a66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   13a6a:	d1c0      	bne.n	139ee <__aeabi_ddiv+0x82>
   13a6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13a70:	d10b      	bne.n	13a8a <__aeabi_ddiv+0x11e>
   13a72:	ea41 0100 	orr.w	r1, r1, r0
   13a76:	f04f 0000 	mov.w	r0, #0
   13a7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   13a7e:	e7b6      	b.n	139ee <__aeabi_ddiv+0x82>
   13a80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13a84:	bf04      	itt	eq
   13a86:	4301      	orreq	r1, r0
   13a88:	2000      	moveq	r0, #0
   13a8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   13a8e:	bf88      	it	hi
   13a90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   13a94:	f63f aeaf 	bhi.w	137f6 <__aeabi_dmul+0xde>
   13a98:	ebb5 0c03 	subs.w	ip, r5, r3
   13a9c:	bf04      	itt	eq
   13a9e:	ebb6 0c02 	subseq.w	ip, r6, r2
   13aa2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   13aa6:	f150 0000 	adcs.w	r0, r0, #0
   13aaa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   13aae:	bd70      	pop	{r4, r5, r6, pc}
   13ab0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   13ab4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   13ab8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   13abc:	bfc2      	ittt	gt
   13abe:	ebd4 050c 	rsbsgt	r5, r4, ip
   13ac2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   13ac6:	bd70      	popgt	{r4, r5, r6, pc}
   13ac8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13acc:	f04f 0e00 	mov.w	lr, #0
   13ad0:	3c01      	subs	r4, #1
   13ad2:	e690      	b.n	137f6 <__aeabi_dmul+0xde>
   13ad4:	ea45 0e06 	orr.w	lr, r5, r6
   13ad8:	e68d      	b.n	137f6 <__aeabi_dmul+0xde>
   13ada:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   13ade:	ea94 0f0c 	teq	r4, ip
   13ae2:	bf08      	it	eq
   13ae4:	ea95 0f0c 	teqeq	r5, ip
   13ae8:	f43f af3b 	beq.w	13962 <__aeabi_dmul+0x24a>
   13aec:	ea94 0f0c 	teq	r4, ip
   13af0:	d10a      	bne.n	13b08 <__aeabi_ddiv+0x19c>
   13af2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   13af6:	f47f af34 	bne.w	13962 <__aeabi_dmul+0x24a>
   13afa:	ea95 0f0c 	teq	r5, ip
   13afe:	f47f af25 	bne.w	1394c <__aeabi_dmul+0x234>
   13b02:	4610      	mov	r0, r2
   13b04:	4619      	mov	r1, r3
   13b06:	e72c      	b.n	13962 <__aeabi_dmul+0x24a>
   13b08:	ea95 0f0c 	teq	r5, ip
   13b0c:	d106      	bne.n	13b1c <__aeabi_ddiv+0x1b0>
   13b0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13b12:	f43f aefd 	beq.w	13910 <__aeabi_dmul+0x1f8>
   13b16:	4610      	mov	r0, r2
   13b18:	4619      	mov	r1, r3
   13b1a:	e722      	b.n	13962 <__aeabi_dmul+0x24a>
   13b1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13b20:	bf18      	it	ne
   13b22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13b26:	f47f aec5 	bne.w	138b4 <__aeabi_dmul+0x19c>
   13b2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   13b2e:	f47f af0d 	bne.w	1394c <__aeabi_dmul+0x234>
   13b32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   13b36:	f47f aeeb 	bne.w	13910 <__aeabi_dmul+0x1f8>
   13b3a:	e712      	b.n	13962 <__aeabi_dmul+0x24a>

00013b3c <__aeabi_d2iz>:
   13b3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13b40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   13b44:	d215      	bcs.n	13b72 <__aeabi_d2iz+0x36>
   13b46:	d511      	bpl.n	13b6c <__aeabi_d2iz+0x30>
   13b48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   13b4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   13b50:	d912      	bls.n	13b78 <__aeabi_d2iz+0x3c>
   13b52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13b5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   13b5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13b62:	fa23 f002 	lsr.w	r0, r3, r2
   13b66:	bf18      	it	ne
   13b68:	4240      	negne	r0, r0
   13b6a:	4770      	bx	lr
   13b6c:	f04f 0000 	mov.w	r0, #0
   13b70:	4770      	bx	lr
   13b72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   13b76:	d105      	bne.n	13b84 <__aeabi_d2iz+0x48>
   13b78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   13b7c:	bf08      	it	eq
   13b7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   13b82:	4770      	bx	lr
   13b84:	f04f 0000 	mov.w	r0, #0
   13b88:	4770      	bx	lr
   13b8a:	bf00      	nop
   13b8c:	6f4d      	ldr	r5, [r1, #116]	; 0x74
   13b8e:	7564      	strb	r4, [r4, #21]
   13b90:	656c      	str	r4, [r5, #84]	; 0x54
   13b92:	0000      	movs	r0, r0
   13b94:	6f43      	ldr	r3, [r0, #116]	; 0x74
   13b96:	6e75      	ldr	r5, [r6, #100]	; 0x64
   13b98:	6574      	str	r4, [r6, #84]	; 0x54
   13b9a:	2072      	movs	r0, #114	; 0x72
   13b9c:	6954      	ldr	r4, [r2, #20]
   13b9e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   13ba0:	4320      	orrs	r0, r4
   13ba2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   13ba4:	4520      	cmp	r0, r4
   13ba6:	7272      	strb	r2, [r6, #9]
   13ba8:	726f      	strb	r7, [r5, #9]
   13baa:	3a20      	subs	r2, #32
   13bac:	0020      	movs	r0, r4
   13bae:	ffff 6f4d 	vqrdmlsh.s<illegal width 64>	q11, <illegal reg q7.5>, d13[0]
   13bb2:	7564      	.short	0x7564
   13bb4:	0020656c 	.word	0x0020656c
   13bb8:	00207c20 	.word	0x00207c20
   13bbc:	54207c20 	.word	0x54207c20
   13bc0:	20706d65 	.word	0x20706d65
   13bc4:	6e756f46 	.word	0x6e756f46
   13bc8:	00000064 	.word	0x00000064
   13bcc:	5420207c 	.word	0x5420207c
   13bd0:	20706d65 	.word	0x20706d65
   13bd4:	6e756f46 	.word	0x6e756f46
   13bd8:	ffff0064 	.word	0xffff0064
   13bdc:	ffff002c 	.word	0xffff002c
   13be0:	75646f4d 	.word	0x75646f4d
   13be4:	2520656c 	.word	0x2520656c
   13be8:	78652069 	.word	0x78652069
   13bec:	73747369 	.word	0x73747369
   13bf0:	6552202e 	.word	0x6552202e
   13bf4:	6e696461 	.word	0x6e696461
   13bf8:	6f762067 	.word	0x6f762067
   13bfc:	6761746c 	.word	0x6761746c
   13c00:	6e612065 	.word	0x6e612065
   13c04:	65742064 	.word	0x65742064
   13c08:	7265706d 	.word	0x7265706d
   13c0c:	72757461 	.word	0x72757461
   13c10:	61762065 	.word	0x61762065
   13c14:	7365756c 	.word	0x7365756c
   13c18:	00000000 	.word	0x00000000
   13c1c:	75646f4d 	.word	0x75646f4d
   13c20:	7620656c 	.word	0x7620656c
   13c24:	61746c6f 	.word	0x61746c6f
   13c28:	203a6567 	.word	0x203a6567
   13c2c:	00006625 	.word	0x00006625
   13c30:	65776f4c 	.word	0x65776f4c
   13c34:	43207473 	.word	0x43207473
   13c38:	206c6c65 	.word	0x206c6c65
   13c3c:	25203a56 	.word	0x25203a56
   13c40:	20202066 	.word	0x20202066
   13c44:	69482020 	.word	0x69482020
   13c48:	73656867 	.word	0x73656867
   13c4c:	65432074 	.word	0x65432074
   13c50:	56206c6c 	.word	0x56206c6c
   13c54:	6625203a 	.word	0x6625203a
   13c58:	00000000 	.word	0x00000000
   13c5c:	706d6554 	.word	0x706d6554
   13c60:	25203a31 	.word	0x25203a31
   13c64:	20202066 	.word	0x20202066
   13c68:	20202020 	.word	0x20202020
   13c6c:	706d6554 	.word	0x706d6554
   13c70:	25203a32 	.word	0x25203a32
   13c74:	00000066 	.word	0x00000066
   13c78:	20656e4f 	.word	0x20656e4f
   13c7c:	6d20726f 	.word	0x6d20726f
   13c80:	2065726f 	.word	0x2065726f
   13c84:	20534d42 	.word	0x20534d42
   13c88:	75646f6d 	.word	0x75646f6d
   13c8c:	2073656c 	.word	0x2073656c
   13c90:	65766168 	.word	0x65766168
   13c94:	746e6520 	.word	0x746e6520
   13c98:	64657265 	.word	0x64657265
   13c9c:	65687420 	.word	0x65687420
   13ca0:	75616620 	.word	0x75616620
   13ca4:	7320746c 	.word	0x7320746c
   13ca8:	65746174 	.word	0x65746174
   13cac:	00000021 	.word	0x00000021
   13cb0:	206c6c41 	.word	0x206c6c41
   13cb4:	75646f6d 	.word	0x75646f6d
   13cb8:	2073656c 	.word	0x2073656c
   13cbc:	65766168 	.word	0x65766168
   13cc0:	69786520 	.word	0x69786520
   13cc4:	20646574 	.word	0x20646574
   13cc8:	61662061 	.word	0x61662061
   13ccc:	65746c75 	.word	0x65746c75
   13cd0:	74732064 	.word	0x74732064
   13cd4:	00657461 	.word	0x00657461
   13cd8:	75646f4d 	.word	0x75646f4d
   13cdc:	3a73656c 	.word	0x3a73656c
   13ce0:	20692520 	.word	0x20692520
   13ce4:	6c654320 	.word	0x6c654320
   13ce8:	203a736c 	.word	0x203a736c
   13cec:	20206925 	.word	0x20206925
   13cf0:	746c6f56 	.word	0x746c6f56
   13cf4:	3a656761 	.word	0x3a656761
   13cf8:	56662520 	.word	0x56662520
   13cfc:	41202020 	.word	0x41202020
   13d00:	43206776 	.word	0x43206776
   13d04:	206c6c65 	.word	0x206c6c65
   13d08:	746c6f56 	.word	0x746c6f56
   13d0c:	3a656761 	.word	0x3a656761
   13d10:	56662520 	.word	0x56662520
   13d14:	20202020 	.word	0x20202020
   13d18:	67764120 	.word	0x67764120
   13d1c:	6d655420 	.word	0x6d655420
   13d20:	25203a70 	.word	0x25203a70
   13d24:	00204366 	.word	0x00204366
   13d28:	20202020 	.word	0x20202020
   13d2c:	20202020 	.word	0x20202020
   13d30:	20202020 	.word	0x20202020
   13d34:	20202020 	.word	0x20202020
   13d38:	20202020 	.word	0x20202020
   13d3c:	20202020 	.word	0x20202020
   13d40:	20202020 	.word	0x20202020
   13d44:	4d202020 	.word	0x4d202020
   13d48:	6c75646f 	.word	0x6c75646f
   13d4c:	25232065 	.word	0x25232065
   13d50:	00000069 	.word	0x00000069
   13d54:	6f562020 	.word	0x6f562020
   13d58:	6761746c 	.word	0x6761746c
   13d5c:	25203a65 	.word	0x25203a65
   13d60:	20205666 	.word	0x20205666
   13d64:	66252820 	.word	0x66252820
   13d68:	66252d56 	.word	0x66252d56
   13d6c:	20202956 	.word	0x20202956
   13d70:	54202020 	.word	0x54202020
   13d74:	65706d65 	.word	0x65706d65
   13d78:	75746172 	.word	0x75746172
   13d7c:	3a736572 	.word	0x3a736572
   13d80:	66252820 	.word	0x66252820
   13d84:	66252d43 	.word	0x66252d43
   13d88:	00002943 	.word	0x00002943
   13d8c:	4f4d2020 	.word	0x4f4d2020
   13d90:	454c5544 	.word	0x454c5544
   13d94:	20534920 	.word	0x20534920
   13d98:	4c554146 	.word	0x4c554146
   13d9c:	3a444554 	.word	0x3a444554
   13da0:	00000000 	.word	0x00000000
   13da4:	20202020 	.word	0x20202020
   13da8:	7265764f 	.word	0x7265764f
   13dac:	746c6f76 	.word	0x746c6f76
   13db0:	20656761 	.word	0x20656761
   13db4:	6c6c6543 	.word	0x6c6c6543
   13db8:	6d754e20 	.word	0x6d754e20
   13dbc:	73726562 	.word	0x73726562
   13dc0:	2d312820 	.word	0x2d312820
   13dc4:	203a2936 	.word	0x203a2936
   13dc8:	00000000 	.word	0x00000000
   13dcc:	20202020 	.word	0x20202020
   13dd0:	65646e55 	.word	0x65646e55
   13dd4:	6c6f7672 	.word	0x6c6f7672
   13dd8:	65676174 	.word	0x65676174
   13ddc:	6c654320 	.word	0x6c654320
   13de0:	754e206c 	.word	0x754e206c
   13de4:	7265626d 	.word	0x7265626d
   13de8:	31282073 	.word	0x31282073
   13dec:	3a29362d 	.word	0x3a29362d
   13df0:	00000020 	.word	0x00000020
   13df4:	20202020 	.word	0x20202020
   13df8:	20435243 	.word	0x20435243
   13dfc:	6f727265 	.word	0x6f727265
   13e00:	6e692072 	.word	0x6e692072
   13e04:	63657220 	.word	0x63657220
   13e08:	65766965 	.word	0x65766965
   13e0c:	61702064 	.word	0x61702064
   13e10:	74656b63 	.word	0x74656b63
   13e14:	00000000 	.word	0x00000000
   13e18:	20202020 	.word	0x20202020
   13e1c:	65776f50 	.word	0x65776f50
   13e20:	6e6f2072 	.word	0x6e6f2072
   13e24:	73657220 	.word	0x73657220
   13e28:	68207465 	.word	0x68207465
   13e2c:	6f207361 	.word	0x6f207361
   13e30:	72756363 	.word	0x72756363
   13e34:	00646572 	.word	0x00646572
   13e38:	20202020 	.word	0x20202020
   13e3c:	74736554 	.word	0x74736554
   13e40:	75616620 	.word	0x75616620
   13e44:	6120746c 	.word	0x6120746c
   13e48:	76697463 	.word	0x76697463
   13e4c:	00000065 	.word	0x00000065
   13e50:	20202020 	.word	0x20202020
   13e54:	65746e49 	.word	0x65746e49
   13e58:	6c616e72 	.word	0x6c616e72
   13e5c:	67657220 	.word	0x67657220
   13e60:	65747369 	.word	0x65747369
   13e64:	69207372 	.word	0x69207372
   13e68:	6e6f636e 	.word	0x6e6f636e
   13e6c:	74736973 	.word	0x74736973
   13e70:	00746e65 	.word	0x00746e65
   13e74:	4f4d2020 	.word	0x4f4d2020
   13e78:	454c5544 	.word	0x454c5544
   13e7c:	53414820 	.word	0x53414820
   13e80:	454c4120 	.word	0x454c4120
   13e84:	3a535452 	.word	0x3a535452
   13e88:	00000000 	.word	0x00000000
   13e8c:	20202020 	.word	0x20202020
   13e90:	7265764f 	.word	0x7265764f
   13e94:	6d657420 	.word	0x6d657420
   13e98:	61726570 	.word	0x61726570
   13e9c:	65727574 	.word	0x65727574
   13ea0:	206e6f20 	.word	0x206e6f20
   13ea4:	00315354 	.word	0x00315354
   13ea8:	20202020 	.word	0x20202020
   13eac:	7265764f 	.word	0x7265764f
   13eb0:	6d657420 	.word	0x6d657420
   13eb4:	61726570 	.word	0x61726570
   13eb8:	65727574 	.word	0x65727574
   13ebc:	206e6f20 	.word	0x206e6f20
   13ec0:	00325354 	.word	0x00325354
   13ec4:	20202020 	.word	0x20202020
   13ec8:	65656c53 	.word	0x65656c53
   13ecc:	6f6d2070 	.word	0x6f6d2070
   13ed0:	61206564 	.word	0x61206564
   13ed4:	76697463 	.word	0x76697463
   13ed8:	00000065 	.word	0x00000065
   13edc:	20202020 	.word	0x20202020
   13ee0:	72656854 	.word	0x72656854
   13ee4:	206c616d 	.word	0x206c616d
   13ee8:	74756873 	.word	0x74756873
   13eec:	6e776f64 	.word	0x6e776f64
   13ef0:	74636120 	.word	0x74636120
   13ef4:	00657669 	.word	0x00657669
   13ef8:	20202020 	.word	0x20202020
   13efc:	74736554 	.word	0x74736554
   13f00:	656c4120 	.word	0x656c4120
   13f04:	00007472 	.word	0x00007472
   13f08:	20202020 	.word	0x20202020
   13f0c:	2050544f 	.word	0x2050544f
   13f10:	4f525045 	.word	0x4f525045
   13f14:	6e55204d 	.word	0x6e55204d
   13f18:	72726f63 	.word	0x72726f63
   13f1c:	61746365 	.word	0x61746365
   13f20:	20656c62 	.word	0x20656c62
   13f24:	6f727245 	.word	0x6f727245
   13f28:	00000072 	.word	0x00000072
   13f2c:	20202020 	.word	0x20202020
   13f30:	554f5247 	.word	0x554f5247
   13f34:	52203350 	.word	0x52203350
   13f38:	20736765 	.word	0x20736765
   13f3c:	61766e49 	.word	0x61766e49
   13f40:	0064696c 	.word	0x0064696c
   13f44:	20202020 	.word	0x20202020
   13f48:	72646441 	.word	0x72646441
   13f4c:	20737365 	.word	0x20737365
   13f50:	20746f6e 	.word	0x20746f6e
   13f54:	69676572 	.word	0x69676572
   13f58:	72657473 	.word	0x72657473
   13f5c:	ff006465 	.word	0xff006465
   13f60:	75646f4d 	.word	0x75646f4d
   13f64:	3a73656c 	.word	0x3a73656c
   13f68:	20692520 	.word	0x20692520
   13f6c:	6c6c6543 	.word	0x6c6c6543
   13f70:	25203a73 	.word	0x25203a73
   13f74:	74532069 	.word	0x74532069
   13f78:	676e6972 	.word	0x676e6972
   13f7c:	25203a73 	.word	0x25203a73
   13f80:	56202069 	.word	0x56202069
   13f84:	61746c6f 	.word	0x61746c6f
   13f88:	203a6567 	.word	0x203a6567
   13f8c:	20566625 	.word	0x20566625
   13f90:	76412020 	.word	0x76412020
   13f94:	65432067 	.word	0x65432067
   13f98:	56206c6c 	.word	0x56206c6c
   13f9c:	61746c6f 	.word	0x61746c6f
   13fa0:	203a6567 	.word	0x203a6567
   13fa4:	20566625 	.word	0x20566625
   13fa8:	776f4c20 	.word	0x776f4c20
   13fac:	6c654320 	.word	0x6c654320
   13fb0:	6f56206c 	.word	0x6f56206c
   13fb4:	6761746c 	.word	0x6761746c
   13fb8:	25203a65 	.word	0x25203a65
   13fbc:	20205666 	.word	0x20205666
   13fc0:	67694820 	.word	0x67694820
   13fc4:	65432068 	.word	0x65432068
   13fc8:	56206c6c 	.word	0x56206c6c
   13fcc:	61746c6f 	.word	0x61746c6f
   13fd0:	203a6567 	.word	0x203a6567
   13fd4:	20566625 	.word	0x20566625
   13fd8:	746c6544 	.word	0x746c6544
   13fdc:	6f562061 	.word	0x6f562061
   13fe0:	6761746c 	.word	0x6761746c
   13fe4:	25203a65 	.word	0x25203a65
   13fe8:	20566d7a 	.word	0x20566d7a
   13fec:	76412020 	.word	0x76412020
   13ff0:	65542067 	.word	0x65542067
   13ff4:	203a706d 	.word	0x203a706d
   13ff8:	20436625 	.word	0x20436625
   13ffc:	00000000 	.word	0x00000000
   14000:	75646f4d 	.word	0x75646f4d
   14004:	2320656c 	.word	0x2320656c
   14008:	00000000 	.word	0x00000000
   1400c:	00000056 	.word	0x00000056
   14010:	65432020 	.word	0x65432020
   14014:	00006c6c 	.word	0x00006c6c
   14018:	6d655420 	.word	0x6d655420
   1401c:	3a312070 	.word	0x3a312070
   14020:	00000020 	.word	0x00000020
   14024:	65542043 	.word	0x65542043
   14028:	3220706d 	.word	0x3220706d
   1402c:	0000203a 	.word	0x0000203a
   14030:	65542043 	.word	0x65542043
   14034:	3320706d 	.word	0x3320706d
   14038:	0000203a 	.word	0x0000203a
   1403c:	207c2043 	.word	0x207c2043
   14040:	206c6142 	.word	0x206c6142
   14044:	74617453 	.word	0x74617453
   14048:	ff00203a 	.word	0xff00203a
   1404c:	00007830 	.word	0x00007830
   14050:	00006230 	.word	0x00006230
   14054:	00000054 	.word	0x00000054
   14058:	00000046 	.word	0x00000046
   1405c:	45555254 	.word	0x45555254
   14060:	00000000 	.word	0x00000000
   14064:	534c4146 	.word	0x534c4146
   14068:	ffff0045 	.word	0xffff0045
   1406c:	00202d20 	.word	0x00202d20
   14070:	55424544 	.word	0x55424544
   14074:	00000047 	.word	0x00000047
   14078:	4f464e49 	.word	0x4f464e49
   1407c:	00000000 	.word	0x00000000
   14080:	4e524157 	.word	0x4e524157
   14084:	00474e49 	.word	0x00474e49
   14088:	4f525245 	.word	0x4f525245
   1408c:	ffff0052 	.word	0xffff0052
   14090:	65736552 	.word	0x65736552
   14094:	6e697474 	.word	0x6e697474
   14098:	6f742067 	.word	0x6f742067
   1409c:	63616620 	.word	0x63616620
   140a0:	79726f74 	.word	0x79726f74
   140a4:	66656420 	.word	0x66656420
   140a8:	746c7561 	.word	0x746c7561
   140ac:	ffff0073 	.word	0xffff0073
   140b0:	20434f53 	.word	0x20434f53
   140b4:	0000203a 	.word	0x0000203a
   140b8:	75662020 	.word	0x75662020
   140bc:	70206c65 	.word	0x70206c65
   140c0:	3a206d77 	.word	0x3a206d77
   140c4:	ffff0020 	.word	0xffff0020
   140c8:	20534d42 	.word	0x20534d42
   140cc:	74617453 	.word	0x74617453
   140d0:	3a207375 	.word	0x3a207375
   140d4:	00000020 	.word	0x00000020
   140d8:	20535345 	.word	0x20535345
   140dc:	65646f4d 	.word	0x65646f4d
   140e0:	00000020 	.word	0x00000020
   140e4:	6e55203a 	.word	0x6e55203a
   140e8:	56726564 	.word	0x56726564
   140ec:	61746c6f 	.word	0x61746c6f
   140f0:	00206567 	.word	0x00206567
   140f4:	764f203a 	.word	0x764f203a
   140f8:	6f567265 	.word	0x6f567265
   140fc:	6761746c 	.word	0x6761746c
   14100:	00002065 	.word	0x00002065
   14104:	6543203a 	.word	0x6543203a
   14108:	49206c6c 	.word	0x49206c6c
   1410c:	6c61626d 	.word	0x6c61626d
   14110:	65636e61 	.word	0x65636e61
   14114:	00000020 	.word	0x00000020
   14118:	764f203a 	.word	0x764f203a
   1411c:	54207265 	.word	0x54207265
   14120:	20706d65 	.word	0x20706d65
   14124:	00000000 	.word	0x00000000
   14128:	6e55203a 	.word	0x6e55203a
   1412c:	20726564 	.word	0x20726564
   14130:	706d6554 	.word	0x706d6554
   14134:	00000020 	.word	0x00000020
   14138:	764f203a 	.word	0x764f203a
   1413c:	6f567265 	.word	0x6f567265
   14140:	6761746c 	.word	0x6761746c
   14144:	74532065 	.word	0x74532065
   14148:	6761726f 	.word	0x6761726f
   1414c:	00002065 	.word	0x00002065
   14150:	4e55203a 	.word	0x4e55203a
   14154:	70706168 	.word	0x70706168
   14158:	00003a79 	.word	0x00003a79
   1415c:	6148203a 	.word	0x6148203a
   14160:	20797070 	.word	0x20797070
   14164:	00000000 	.word	0x00000000
   14168:	53727245 	.word	0x53727245
   1416c:	00203a74 	.word	0x00203a74
   14170:	6f6f4220 	.word	0x6f6f4220
   14174:	00002074 	.word	0x00002074
   14178:	61655220 	.word	0x61655220
   1417c:	00207964 	.word	0x00207964
   14180:	65725020 	.word	0x65725020
   14184:	72616863 	.word	0x72616863
   14188:	00206567 	.word	0x00206567
   1418c:	69724420 	.word	0x69724420
   14190:	00206576 	.word	0x00206576
   14194:	61684320 	.word	0x61684320
   14198:	20656772 	.word	0x20656772
   1419c:	00000000 	.word	0x00000000
   141a0:	72724520 	.word	0x72724520
   141a4:	0020726f 	.word	0x0020726f
   141a8:	4341207c 	.word	0x4341207c
   141ac:	65725020 	.word	0x65725020
   141b0:	746e6573 	.word	0x746e6573
   141b4:	00007c20 	.word	0x00007c20
   141b8:	654b207c 	.word	0x654b207c
   141bc:	4e4f2079 	.word	0x4e4f2079
   141c0:	00007c20 	.word	0x00007c20
   141c4:	6c61427c 	.word	0x6c61427c
   141c8:	69636e61 	.word	0x69636e61
   141cc:	4120676e 	.word	0x4120676e
   141d0:	76697463 	.word	0x76697463
   141d4:	00000065 	.word	0x00000065
   141d8:	3a74754f 	.word	0x3a74754f
   141dc:	00000000 	.word	0x00000000
   141e0:	6e6f4320 	.word	0x6e6f4320
   141e4:	00003a74 	.word	0x00003a74
   141e8:	00000031 	.word	0x00000031
   141ec:	00000030 	.word	0x00000030
   141f0:	3a6e4920 	.word	0x3a6e4920
   141f4:	ffffff00 	.word	0xffffff00
   141f8:	20776f4c 	.word	0x20776f4c
   141fc:	676e6152 	.word	0x676e6152
   14200:	00203a65 	.word	0x00203a65
   14204:	676e6953 	.word	0x676e6953
   14208:	4920656c 	.word	0x4920656c
   1420c:	00203a6e 	.word	0x00203a6e
   14210:	756c6156 	.word	0x756c6156
   14214:	44412065 	.word	0x44412065
   14218:	203a3043 	.word	0x203a3043
   1421c:	00000000 	.word	0x00000000
   14220:	00416d20 	.word	0x00416d20
   14224:	68676948 	.word	0x68676948
   14228:	6e615220 	.word	0x6e615220
   1422c:	203a6567 	.word	0x203a6567
   14230:	00000000 	.word	0x00000000
   14234:	0000416d 	.word	0x0000416d
   14238:	2020416d 	.word	0x2020416d
   1423c:	ffffff00 	.word	0xffffff00
   14240:	2f2f2f2f 	.word	0x2f2f2f2f
   14244:	2f2f2f2f 	.word	0x2f2f2f2f
   14248:	2f2f2f2f 	.word	0x2f2f2f2f
   1424c:	2f2f2f2f 	.word	0x2f2f2f2f
   14250:	2f2f2f2f 	.word	0x2f2f2f2f
   14254:	2f2f2f2f 	.word	0x2f2f2f2f
   14258:	2f2f2f2f 	.word	0x2f2f2f2f
   1425c:	2f2f2f2f 	.word	0x2f2f2f2f
   14260:	2f2f2f2f 	.word	0x2f2f2f2f
   14264:	2f2f2f2f 	.word	0x2f2f2f2f
   14268:	434f5320 	.word	0x434f5320
   1426c:	54455320 	.word	0x54455320
   14270:	2f2f2f20 	.word	0x2f2f2f20
   14274:	2f2f2f2f 	.word	0x2f2f2f2f
   14278:	2f2f2f2f 	.word	0x2f2f2f2f
   1427c:	2f2f2f2f 	.word	0x2f2f2f2f
   14280:	2f2f2f2f 	.word	0x2f2f2f2f
   14284:	2f2f2f2f 	.word	0x2f2f2f2f
   14288:	2f2f2f2f 	.word	0x2f2f2f2f
   1428c:	2f2f2f2f 	.word	0x2f2f2f2f
   14290:	2f2f2f2f 	.word	0x2f2f2f2f
   14294:	2f2f2f2f 	.word	0x2f2f2f2f
   14298:	0000002f 	.word	0x0000002f
   1429c:	20776f4c 	.word	0x20776f4c
   142a0:	676e6152 	.word	0x676e6152
   142a4:	00002065 	.word	0x00002065
   142a8:	68676948 	.word	0x68676948
   142ac:	6e615220 	.word	0x6e615220
   142b0:	00006567 	.word	0x00006567
   142b4:	6c616e41 	.word	0x6c616e41
   142b8:	6575676f 	.word	0x6575676f
   142bc:	6e695320 	.word	0x6e695320
   142c0:	20656c67 	.word	0x20656c67
   142c4:	00000000 	.word	0x00000000
   142c8:	624e4143 	.word	0x624e4143
   142cc:	00207375 	.word	0x00207375
   142d0:	4f532025 	.word	0x4f532025
   142d4:	00002043 	.word	0x00002043
   142d8:	0068416d 	.word	0x0068416d
   142dc:	6c6c7570 	.word	0x6c6c7570
   142e0:	206e6920 	.word	0x206e6920
   142e4:	3654554f 	.word	0x3654554f
   142e8:	00000000 	.word	0x00000000
   142ec:	6c6c7570 	.word	0x6c6c7570
   142f0:	206e6920 	.word	0x206e6920
   142f4:	3754554f 	.word	0x3754554f
   142f8:	ffffff00 	.word	0xffffff00
   142fc:	6c614320 	.word	0x6c614320
   14300:	61726269 	.word	0x61726269
   14304:	676e6974 	.word	0x676e6974
   14308:	72754320 	.word	0x72754320
   1430c:	746e6572 	.word	0x746e6572
   14310:	66664f20 	.word	0x66664f20
   14314:	20746573 	.word	0x20746573
   14318:	3a3a3a3a 	.word	0x3a3a3a3a
   1431c:	0000203a 	.word	0x0000203a
   14320:	0000002e 	.word	0x0000002e
   14324:	72756320 	.word	0x72756320
   14328:	746e6572 	.word	0x746e6572
   1432c:	66666f20 	.word	0x66666f20
   14330:	20746573 	.word	0x20746573
   14334:	61632031 	.word	0x61632031
   14338:	7262696c 	.word	0x7262696c
   1433c:	64657461 	.word	0x64657461
   14340:	00000020 	.word	0x00000020
   14344:	72756320 	.word	0x72756320
   14348:	746e6572 	.word	0x746e6572
   1434c:	66666f20 	.word	0x66666f20
   14350:	20746573 	.word	0x20746573
   14354:	61632032 	.word	0x61632032
   14358:	7262696c 	.word	0x7262696c
   1435c:	64657461 	.word	0x64657461
   14360:	ffff0020 	.word	0xffff0020
   14364:	ffff0050 	.word	0xffff0050
   14368:	646f4320 	.word	0x646f4320
   1436c:	53206465 	.word	0x53206465
   14370:	69747465 	.word	0x69747465
   14374:	2073676e 	.word	0x2073676e
   14378:	64616f4c 	.word	0x64616f4c
   1437c:	00206465 	.word	0x00206465
   14380:	68416d20 	.word	0x68416d20
   14384:	73655220 	.word	0x73655220
   14388:	00207465 	.word	0x00207465
   1438c:	202d2031 	.word	0x202d2031
   14390:	706d6554 	.word	0x706d6554
   14394:	6e655320 	.word	0x6e655320
   14398:	20726f73 	.word	0x20726f73
   1439c:	74746553 	.word	0x74746553
   143a0:	3a676e69 	.word	0x3a676e69
   143a4:	00000000 	.word	0x00000000
   143a8:	202d2032 	.word	0x202d2032
   143ac:	746c6f56 	.word	0x746c6f56
   143b0:	20656761 	.word	0x20656761
   143b4:	65646e55 	.word	0x65646e55
   143b8:	68572072 	.word	0x68572072
   143bc:	20686369 	.word	0x20686369
   143c0:	49206f54 	.word	0x49206f54
   143c4:	726f6e67 	.word	0x726f6e67
   143c8:	65432065 	.word	0x65432065
   143cc:	3a736c6c 	.word	0x3a736c6c
   143d0:	00000000 	.word	0x00000000
   143d4:	0000566d 	.word	0x0000566d
   143d8:	202d2071 	.word	0x202d2071
   143dc:	62206f47 	.word	0x62206f47
   143e0:	206b6361 	.word	0x206b6361
   143e4:	6d206f74 	.word	0x6d206f74
   143e8:	00756e65 	.word	0x00756e65
   143ec:	202d2031 	.word	0x202d2031
   143f0:	6c6c6543 	.word	0x6c6c6543
   143f4:	61684320 	.word	0x61684320
   143f8:	20656772 	.word	0x20656772
   143fc:	746c6f56 	.word	0x746c6f56
   14400:	20656761 	.word	0x20656761
   14404:	696d694c 	.word	0x696d694c
   14408:	65532074 	.word	0x65532074
   1440c:	696f7074 	.word	0x696f7074
   14410:	203a746e 	.word	0x203a746e
   14414:	00000000 	.word	0x00000000
   14418:	202d2032 	.word	0x202d2032
   1441c:	72616843 	.word	0x72616843
   14420:	48206567 	.word	0x48206567
   14424:	65747379 	.word	0x65747379
   14428:	73697372 	.word	0x73697372
   1442c:	0000203a 	.word	0x0000203a
   14430:	202d2033 	.word	0x202d2033
   14434:	6b636150 	.word	0x6b636150
   14438:	78614d20 	.word	0x78614d20
   1443c:	61684320 	.word	0x61684320
   14440:	20656772 	.word	0x20656772
   14444:	72727543 	.word	0x72727543
   14448:	3a746e65 	.word	0x3a746e65
   1444c:	00000020 	.word	0x00000020
   14450:	50202d34 	.word	0x50202d34
   14454:	206b6361 	.word	0x206b6361
   14458:	20646e45 	.word	0x20646e45
   1445c:	4320666f 	.word	0x4320666f
   14460:	67726168 	.word	0x67726168
   14464:	75432065 	.word	0x75432065
   14468:	6e657272 	.word	0x6e657272
   1446c:	00203a74 	.word	0x00203a74
   14470:	43202d35 	.word	0x43202d35
   14474:	67726168 	.word	0x67726168
   14478:	54207265 	.word	0x54207265
   1447c:	3a657079 	.word	0x3a657079
   14480:	00000020 	.word	0x00000020
   14484:	616c6552 	.word	0x616c6552
   14488:	6f432079 	.word	0x6f432079
   1448c:	6f72746e 	.word	0x6f72746e
   14490:	0000006c 	.word	0x0000006c
   14494:	73757242 	.word	0x73757242
   14498:	4c4e2061 	.word	0x4c4e2061
   1449c:	78783547 	.word	0x78783547
   144a0:	00000000 	.word	0x00000000
   144a4:	746c6f56 	.word	0x746c6f56
   144a8:	61684320 	.word	0x61684320
   144ac:	72656772 	.word	0x72656772
   144b0:	00000000 	.word	0x00000000
   144b4:	65746c45 	.word	0x65746c45
   144b8:	6843206b 	.word	0x6843206b
   144bc:	65677261 	.word	0x65677261
   144c0:	00000072 	.word	0x00000072
   144c4:	6f636c45 	.word	0x6f636c45
   144c8:	6843206e 	.word	0x6843206e
   144cc:	65677261 	.word	0x65677261
   144d0:	00000072 	.word	0x00000072
   144d4:	74636956 	.word	0x74636956
   144d8:	2f6e6f72 	.word	0x2f6e6f72
   144dc:	00414d53 	.word	0x00414d53
   144e0:	61646f43 	.word	0x61646f43
   144e4:	00000000 	.word	0x00000000
   144e8:	6f6c7950 	.word	0x6f6c7950
   144ec:	202d206e 	.word	0x202d206e
   144f0:	54534554 	.word	0x54534554
   144f4:	20474e49 	.word	0x20474e49
   144f8:	594c4e4f 	.word	0x594c4e4f
   144fc:	00000000 	.word	0x00000000
   14500:	6c74754f 	.word	0x6c74754f
   14504:	65646e61 	.word	0x65646e61
   14508:	68432072 	.word	0x68432072
   1450c:	65677261 	.word	0x65677261
   14510:	00000072 	.word	0x00000072
   14514:	43202d36 	.word	0x43202d36
   14518:	67726168 	.word	0x67726168
   1451c:	43207265 	.word	0x43207265
   14520:	4d206e61 	.word	0x4d206e61
   14524:	53206773 	.word	0x53206773
   14528:	203a6470 	.word	0x203a6470
   1452c:	00000000 	.word	0x00000000
   14530:	0000536d 	.word	0x0000536d
   14534:	202d2037 	.word	0x202d2037
   14538:	72616843 	.word	0x72616843
   1453c:	20726567 	.word	0x20726567
   14540:	43205648 	.word	0x43205648
   14544:	656e6e6f 	.word	0x656e6e6f
   14548:	6f697463 	.word	0x6f697463
   1454c:	00203a6e 	.word	0x00203a6e
   14550:	68654220 	.word	0x68654220
   14554:	20646e69 	.word	0x20646e69
   14558:	746e6f43 	.word	0x746e6f43
   1455c:	6f746361 	.word	0x6f746361
   14560:	00007372 	.word	0x00007372
   14564:	65726944 	.word	0x65726944
   14568:	54207463 	.word	0x54207463
   1456c:	6142206f 	.word	0x6142206f
   14570:	72657474 	.word	0x72657474
   14574:	56482079 	.word	0x56482079
   14578:	00000000 	.word	0x00000000
   1457c:	202d2039 	.word	0x202d2039
   14580:	72616843 	.word	0x72616843
   14584:	43206567 	.word	0x43206567
   14588:	65727275 	.word	0x65727275
   1458c:	6420746e 	.word	0x6420746e
   14590:	74617265 	.word	0x74617265
   14594:	6f4c2065 	.word	0x6f4c2065
   14598:	00203a77 	.word	0x00203a77
   1459c:	00004320 	.word	0x00004320
   145a0:	202d2030 	.word	0x202d2030
   145a4:	6b636150 	.word	0x6b636150
   145a8:	6c6f4320 	.word	0x6c6f4320
   145ac:	68432064 	.word	0x68432064
   145b0:	65677261 	.word	0x65677261
   145b4:	72754320 	.word	0x72754320
   145b8:	746e6572 	.word	0x746e6572
   145bc:	0000203a 	.word	0x0000203a
   145c0:	72616c41 	.word	0x72616c41
   145c4:	6e61206d 	.word	0x6e61206d
   145c8:	61572064 	.word	0x61572064
   145cc:	6e696e72 	.word	0x6e696e72
   145d0:	65532067 	.word	0x65532067
   145d4:	6e697474 	.word	0x6e697474
   145d8:	4d207367 	.word	0x4d207367
   145dc:	00756e65 	.word	0x00756e65
   145e0:	202d2031 	.word	0x202d2031
   145e4:	746c6f56 	.word	0x746c6f56
   145e8:	20656761 	.word	0x20656761
   145ec:	6e726157 	.word	0x6e726157
   145f0:	20676e69 	.word	0x20676e69
   145f4:	7366664f 	.word	0x7366664f
   145f8:	203a7465 	.word	0x203a7465
   145fc:	00000000 	.word	0x00000000
   14600:	202d2032 	.word	0x202d2032
   14604:	6c6c6543 	.word	0x6c6c6543
   14608:	6c6f5620 	.word	0x6c6f5620
   1460c:	65676174 	.word	0x65676174
   14610:	66694420 	.word	0x66694420
   14614:	65726566 	.word	0x65726566
   14618:	2065636e 	.word	0x2065636e
   1461c:	72616c41 	.word	0x72616c41
   14620:	00203a6d 	.word	0x00203a6d
   14624:	202d2033 	.word	0x202d2033
   14628:	706d6554 	.word	0x706d6554
   1462c:	72615720 	.word	0x72615720
   14630:	676e696e 	.word	0x676e696e
   14634:	66664f20 	.word	0x66664f20
   14638:	3a746573 	.word	0x3a746573
   1463c:	00000020 	.word	0x00000020
   14640:	202d2034 	.word	0x202d2034
   14644:	7265764f 	.word	0x7265764f
   14648:	646e6120 	.word	0x646e6120
   1464c:	646e5520 	.word	0x646e5520
   14650:	56207265 	.word	0x56207265
   14654:	61746c6f 	.word	0x61746c6f
   14658:	44206567 	.word	0x44206567
   1465c:	79616c65 	.word	0x79616c65
   14660:	0000203a 	.word	0x0000203a
   14664:	00536d20 	.word	0x00536d20
   14668:	746e6f43 	.word	0x746e6f43
   1466c:	6f746361 	.word	0x6f746361
   14670:	6e612072 	.word	0x6e612072
   14674:	61472064 	.word	0x61472064
   14678:	20656775 	.word	0x20656775
   1467c:	74746553 	.word	0x74746553
   14680:	73676e69 	.word	0x73676e69
   14684:	6e654d20 	.word	0x6e654d20
   14688:	00000075 	.word	0x00000075
   1468c:	202d2031 	.word	0x202d2031
   14690:	43657250 	.word	0x43657250
   14694:	67726168 	.word	0x67726168
   14698:	69542065 	.word	0x69542065
   1469c:	3a72656d 	.word	0x3a72656d
   146a0:	00000020 	.word	0x00000020
   146a4:	202d2032 	.word	0x202d2032
   146a8:	43657250 	.word	0x43657250
   146ac:	67726168 	.word	0x67726168
   146b0:	69462065 	.word	0x69462065
   146b4:	6873696e 	.word	0x6873696e
   146b8:	72754320 	.word	0x72754320
   146bc:	746e6572 	.word	0x746e6572
   146c0:	0000203a 	.word	0x0000203a
   146c4:	202d2033 	.word	0x202d2033
   146c8:	204d5750 	.word	0x204d5750
   146cc:	746e6f63 	.word	0x746e6f63
   146d0:	6f746361 	.word	0x6f746361
   146d4:	6f482072 	.word	0x6f482072
   146d8:	3020646c 	.word	0x3020646c
   146dc:	3535322d 	.word	0x3535322d
   146e0:	00003a20 	.word	0x00003a20
   146e4:	202d2034 	.word	0x202d2034
   146e8:	204d5750 	.word	0x204d5750
   146ec:	20726f66 	.word	0x20726f66
   146f0:	67756147 	.word	0x67756147
   146f4:	6f4c2065 	.word	0x6f4c2065
   146f8:	2d302077 	.word	0x2d302077
   146fc:	20353532 	.word	0x20353532
   14700:	0000003a 	.word	0x0000003a
   14704:	202d2035 	.word	0x202d2035
   14708:	204d5750 	.word	0x204d5750
   1470c:	20726f66 	.word	0x20726f66
   14710:	67756147 	.word	0x67756147
   14714:	69482065 	.word	0x69482065
   14718:	30206867 	.word	0x30206867
   1471c:	3535322d 	.word	0x3535322d
   14720:	00003a20 	.word	0x00003a20
   14724:	202d2036 	.word	0x202d2036
   14728:	20535345 	.word	0x20535345
   1472c:	6e69614d 	.word	0x6e69614d
   14730:	6e6f4320 	.word	0x6e6f4320
   14734:	74636174 	.word	0x74636174
   14738:	6f20726f 	.word	0x6f20726f
   1473c:	72542072 	.word	0x72542072
   14740:	3a207069 	.word	0x3a207069
   14744:	00000000 	.word	0x00000000
   14748:	70697254 	.word	0x70697254
   1474c:	75685320 	.word	0x75685320
   14750:	0000746e 	.word	0x0000746e
   14754:	6e69614d 	.word	0x6e69614d
   14758:	6e6f4320 	.word	0x6e6f4320
   1475c:	74636174 	.word	0x74636174
   14760:	6120726f 	.word	0x6120726f
   14764:	5020646e 	.word	0x5020646e
   14768:	68636572 	.word	0x68636572
   1476c:	65677261 	.word	0x65677261
   14770:	00000000 	.word	0x00000000
   14774:	75626544 	.word	0x75626544
   14778:	65532067 	.word	0x65532067
   1477c:	6e697474 	.word	0x6e697474
   14780:	4d207367 	.word	0x4d207367
   14784:	00756e65 	.word	0x00756e65
   14788:	67676f54 	.word	0x67676f54
   1478c:	6f20656c 	.word	0x6f20656c
   14790:	666f2f6e 	.word	0x666f2f6e
   14794:	00000066 	.word	0x00000066
   14798:	202d2031 	.word	0x202d2031
   1479c:	206e6143 	.word	0x206e6143
   147a0:	75626544 	.word	0x75626544
   147a4:	003a2067 	.word	0x003a2067
   147a8:	202d2032 	.word	0x202d2032
   147ac:	72727543 	.word	0x72727543
   147b0:	20746e65 	.word	0x20746e65
   147b4:	75626544 	.word	0x75626544
   147b8:	003a2067 	.word	0x003a2067
   147bc:	202d2033 	.word	0x202d2033
   147c0:	7074754f 	.word	0x7074754f
   147c4:	43207475 	.word	0x43207475
   147c8:	6b636568 	.word	0x6b636568
   147cc:	00003a20 	.word	0x00003a20
   147d0:	202d2034 	.word	0x202d2034
   147d4:	75706e49 	.word	0x75706e49
   147d8:	68432074 	.word	0x68432074
   147dc:	206b6365 	.word	0x206b6365
   147e0:	0000003a 	.word	0x0000003a
   147e4:	202d2035 	.word	0x202d2035
   147e8:	20535345 	.word	0x20535345
   147ec:	65646f6d 	.word	0x65646f6d
   147f0:	00003a20 	.word	0x00003a20
   147f4:	202d2036 	.word	0x202d2036
   147f8:	6c6c6543 	.word	0x6c6c6543
   147fc:	72502073 	.word	0x72502073
   14800:	6e657365 	.word	0x6e657365
   14804:	65522074 	.word	0x65522074
   14808:	20746573 	.word	0x20746573
   1480c:	0000003a 	.word	0x0000003a
   14810:	202d2037 	.word	0x202d2037
   14814:	67756147 	.word	0x67756147
   14818:	65442065 	.word	0x65442065
   1481c:	20677562 	.word	0x20677562
   14820:	0000003a 	.word	0x0000003a
   14824:	202d2038 	.word	0x202d2038
   14828:	20565343 	.word	0x20565343
   1482c:	7074754f 	.word	0x7074754f
   14830:	3a207475 	.word	0x3a207475
   14834:	00000000 	.word	0x00000000
   14838:	202d2039 	.word	0x202d2039
   1483c:	69636544 	.word	0x69636544
   14840:	206c616d 	.word	0x206c616d
   14844:	63616c50 	.word	0x63616c50
   14848:	74207365 	.word	0x74207365
   1484c:	6853206f 	.word	0x6853206f
   14850:	3a20776f 	.word	0x3a20776f
   14854:	00000000 	.word	0x00000000
   14858:	72727543 	.word	0x72727543
   1485c:	20746e65 	.word	0x20746e65
   14860:	736e6553 	.word	0x736e6553
   14864:	4320726f 	.word	0x4320726f
   14868:	62696c61 	.word	0x62696c61
   1486c:	69746172 	.word	0x69746172
   14870:	4d206e6f 	.word	0x4d206e6f
   14874:	00756e65 	.word	0x00756e65
   14878:	202d2063 	.word	0x202d2063
   1487c:	63206f54 	.word	0x63206f54
   14880:	62696c61 	.word	0x62696c61
   14884:	65746172 	.word	0x65746172
   14888:	6e657320 	.word	0x6e657320
   1488c:	20726f73 	.word	0x20726f73
   14890:	7366666f 	.word	0x7366666f
   14894:	00007465 	.word	0x00007465
   14898:	202d2073 	.word	0x202d2073
   1489c:	72727543 	.word	0x72727543
   148a0:	20746e65 	.word	0x20746e65
   148a4:	736e6553 	.word	0x736e6553
   148a8:	5420726f 	.word	0x5420726f
   148ac:	20657079 	.word	0x20657079
   148b0:	0000203a 	.word	0x0000203a
   148b4:	616e4120 	.word	0x616e4120
   148b8:	75676f6c 	.word	0x75676f6c
   148bc:	75442065 	.word	0x75442065
   148c0:	43206c61 	.word	0x43206c61
   148c4:	65727275 	.word	0x65727275
   148c8:	5320746e 	.word	0x5320746e
   148cc:	6f736e65 	.word	0x6f736e65
   148d0:	00002072 	.word	0x00002072
   148d4:	616e4120 	.word	0x616e4120
   148d8:	75676f6c 	.word	0x75676f6c
   148dc:	69532065 	.word	0x69532065
   148e0:	656c676e 	.word	0x656c676e
   148e4:	72754320 	.word	0x72754320
   148e8:	746e6572 	.word	0x746e6572
   148ec:	6e655320 	.word	0x6e655320
   148f0:	20726f73 	.word	0x20726f73
   148f4:	00000000 	.word	0x00000000
   148f8:	6e614320 	.word	0x6e614320
   148fc:	20737562 	.word	0x20737562
   14900:	72727543 	.word	0x72727543
   14904:	20746e65 	.word	0x20746e65
   14908:	736e6553 	.word	0x736e6553
   1490c:	0020726f 	.word	0x0020726f
   14910:	65646e55 	.word	0x65646e55
   14914:	656e6966 	.word	0x656e6966
   14918:	00000064 	.word	0x00000064
   1491c:	202d2031 	.word	0x202d2031
   14920:	65766e69 	.word	0x65766e69
   14924:	63207472 	.word	0x63207472
   14928:	65727275 	.word	0x65727275
   1492c:	3a20746e 	.word	0x3a20746e
   14930:	00000000 	.word	0x00000000
   14934:	202d2032 	.word	0x202d2032
   14938:	65727550 	.word	0x65727550
   1493c:	6c6f5620 	.word	0x6c6f5620
   14940:	65676174 	.word	0x65676174
   14944:	73616220 	.word	0x73616220
   14948:	53206465 	.word	0x53206465
   1494c:	3a20434f 	.word	0x3a20434f
   14950:	00000000 	.word	0x00000000
   14954:	202d2033 	.word	0x202d2033
   14958:	72727543 	.word	0x72727543
   1495c:	20746e65 	.word	0x20746e65
   14960:	746c754d 	.word	0x746c754d
   14964:	696c7069 	.word	0x696c7069
   14968:	69746163 	.word	0x69746163
   1496c:	3a206e6f 	.word	0x3a206e6f
   14970:	00000000 	.word	0x00000000
   14974:	202d2034 	.word	0x202d2034
   14978:	6c616e41 	.word	0x6c616e41
   1497c:	6575676f 	.word	0x6575676f
   14980:	776f4c20 	.word	0x776f4c20
   14984:	6e615220 	.word	0x6e615220
   14988:	43206567 	.word	0x43206567
   1498c:	3a766e6f 	.word	0x3a766e6f
   14990:	00000000 	.word	0x00000000
   14994:	2f566d20 	.word	0x2f566d20
   14998:	00000041 	.word	0x00000041
   1499c:	202d2035 	.word	0x202d2035
   149a0:	6c616e41 	.word	0x6c616e41
   149a4:	6575676f 	.word	0x6575676f
   149a8:	67694820 	.word	0x67694820
   149ac:	61522068 	.word	0x61522068
   149b0:	2065676e 	.word	0x2065676e
   149b4:	766e6f43 	.word	0x766e6f43
   149b8:	0000003a 	.word	0x0000003a
   149bc:	202d2036 	.word	0x202d2036
   149c0:	72727543 	.word	0x72727543
   149c4:	20746e65 	.word	0x20746e65
   149c8:	736e6553 	.word	0x736e6553
   149cc:	4420726f 	.word	0x4420726f
   149d0:	62646165 	.word	0x62646165
   149d4:	3a646e61 	.word	0x3a646e61
   149d8:	00000000 	.word	0x00000000
   149dc:	00566d20 	.word	0x00566d20
   149e0:	202d2038 	.word	0x202d2038
   149e4:	72727543 	.word	0x72727543
   149e8:	20746e65 	.word	0x20746e65
   149ec:	6e616843 	.word	0x6e616843
   149f0:	206c656e 	.word	0x206c656e
   149f4:	6e616843 	.word	0x6e616843
   149f8:	764f6567 	.word	0x764f6567
   149fc:	003a7265 	.word	0x003a7265
   14a00:	00004120 	.word	0x00004120
   14a04:	432d2037 	.word	0x432d2037
   14a08:	43206e61 	.word	0x43206e61
   14a0c:	65727275 	.word	0x65727275
   14a10:	5320746e 	.word	0x5320746e
   14a14:	6f736e65 	.word	0x6f736e65
   14a18:	003a2072 	.word	0x003a2072
   14a1c:	4d454c20 	.word	0x4d454c20
   14a20:	42414320 	.word	0x42414320
   14a24:	2f303033 	.word	0x2f303033
   14a28:	20303035 	.word	0x20303035
   14a2c:	69726573 	.word	0x69726573
   14a30:	00207365 	.word	0x00207365
   14a34:	4d454c20 	.word	0x4d454c20
   14a38:	42414320 	.word	0x42414320
   14a3c:	20303035 	.word	0x20303035
   14a40:	63657053 	.word	0x63657053
   14a44:	206c6169 	.word	0x206c6169
   14a48:	00000000 	.word	0x00000000
   14a4c:	61734920 	.word	0x61734920
   14a50:	6c616353 	.word	0x6c616353
   14a54:	56492065 	.word	0x56492065
   14a58:	20532d54 	.word	0x20532d54
   14a5c:	00000000 	.word	0x00000000
   14a60:	63695620 	.word	0x63695620
   14a64:	6e6f7274 	.word	0x6e6f7274
   14a68:	6e794c20 	.word	0x6e794c20
   14a6c:	45562078 	.word	0x45562078
   14a70:	4e41432e 	.word	0x4e41432e
   14a74:	75685320 	.word	0x75685320
   14a78:	0000746e 	.word	0x0000746e
   14a7c:	74746142 	.word	0x74746142
   14a80:	20797265 	.word	0x20797265
   14a84:	74746553 	.word	0x74746553
   14a88:	73676e69 	.word	0x73676e69
   14a8c:	6e654d20 	.word	0x6e654d20
   14a90:	00000075 	.word	0x00000075
   14a94:	202d2072 	.word	0x202d2072
   14a98:	65736552 	.word	0x65736552
   14a9c:	48412074 	.word	0x48412074
   14aa0:	756f6320 	.word	0x756f6320
   14aa4:	7265746e 	.word	0x7265746e
   14aa8:	00000000 	.word	0x00000000
   14aac:	202d2066 	.word	0x202d2066
   14ab0:	65736552 	.word	0x65736552
   14ab4:	6f742074 	.word	0x6f742074
   14ab8:	646f4320 	.word	0x646f4320
   14abc:	53206465 	.word	0x53206465
   14ac0:	69747465 	.word	0x69747465
   14ac4:	0073676e 	.word	0x0073676e
   14ac8:	202d2031 	.word	0x202d2031
   14acc:	6c6c6543 	.word	0x6c6c6543
   14ad0:	65764f20 	.word	0x65764f20
   14ad4:	6f562072 	.word	0x6f562072
   14ad8:	6761746c 	.word	0x6761746c
   14adc:	65532065 	.word	0x65532065
   14ae0:	696f7074 	.word	0x696f7074
   14ae4:	203a746e 	.word	0x203a746e
   14ae8:	00000000 	.word	0x00000000
   14aec:	202d2032 	.word	0x202d2032
   14af0:	6c6c6543 	.word	0x6c6c6543
   14af4:	646e5520 	.word	0x646e5520
   14af8:	56207265 	.word	0x56207265
   14afc:	61746c6f 	.word	0x61746c6f
   14b00:	53206567 	.word	0x53206567
   14b04:	6f707465 	.word	0x6f707465
   14b08:	3a746e69 	.word	0x3a746e69
   14b0c:	00000020 	.word	0x00000020
   14b10:	202d2033 	.word	0x202d2033
   14b14:	7265764f 	.word	0x7265764f
   14b18:	6d655420 	.word	0x6d655420
   14b1c:	61726570 	.word	0x61726570
   14b20:	65727574 	.word	0x65727574
   14b24:	74655320 	.word	0x74655320
   14b28:	6e696f70 	.word	0x6e696f70
   14b2c:	00203a74 	.word	0x00203a74
   14b30:	00000043 	.word	0x00000043
   14b34:	202d2034 	.word	0x202d2034
   14b38:	65646e55 	.word	0x65646e55
   14b3c:	65542072 	.word	0x65542072
   14b40:	7265706d 	.word	0x7265706d
   14b44:	72757461 	.word	0x72757461
   14b48:	65532065 	.word	0x65532065
   14b4c:	696f7074 	.word	0x696f7074
   14b50:	203a746e 	.word	0x203a746e
   14b54:	00000000 	.word	0x00000000
   14b58:	202d2035 	.word	0x202d2035
   14b5c:	6c6c6543 	.word	0x6c6c6543
   14b60:	6c614220 	.word	0x6c614220
   14b64:	65636e61 	.word	0x65636e61
   14b68:	6c6f5620 	.word	0x6c6f5620
   14b6c:	65676174 	.word	0x65676174
   14b70:	74655320 	.word	0x74655320
   14b74:	6e696f70 	.word	0x6e696f70
   14b78:	00203a74 	.word	0x00203a74
   14b7c:	202d2036 	.word	0x202d2036
   14b80:	616c6142 	.word	0x616c6142
   14b84:	2065636e 	.word	0x2065636e
   14b88:	746c6f56 	.word	0x746c6f56
   14b8c:	20656761 	.word	0x20656761
   14b90:	74737948 	.word	0x74737948
   14b94:	69737265 	.word	0x69737265
   14b98:	00203a73 	.word	0x00203a73
   14b9c:	202d2037 	.word	0x202d2037
   14ba0:	42206841 	.word	0x42206841
   14ba4:	65747461 	.word	0x65747461
   14ba8:	43207972 	.word	0x43207972
   14bac:	63617061 	.word	0x63617061
   14bb0:	3a797469 	.word	0x3a797469
   14bb4:	00000020 	.word	0x00000020
   14bb8:	00006841 	.word	0x00006841
   14bbc:	202d2038 	.word	0x202d2038
   14bc0:	6b636150 	.word	0x6b636150
   14bc4:	78614d20 	.word	0x78614d20
   14bc8:	73694420 	.word	0x73694420
   14bcc:	72616863 	.word	0x72616863
   14bd0:	203a6567 	.word	0x203a6567
   14bd4:	00000000 	.word	0x00000000
   14bd8:	202d2039 	.word	0x202d2039
   14bdc:	6c6c6543 	.word	0x6c6c6543
   14be0:	73694420 	.word	0x73694420
   14be4:	72616863 	.word	0x72616863
   14be8:	56206567 	.word	0x56206567
   14bec:	61746c6f 	.word	0x61746c6f
   14bf0:	4c206567 	.word	0x4c206567
   14bf4:	74696d69 	.word	0x74696d69
   14bf8:	74655320 	.word	0x74655320
   14bfc:	6e696f70 	.word	0x6e696f70
   14c00:	00203a74 	.word	0x00203a74
   14c04:	202d2030 	.word	0x202d2030
   14c08:	76616c53 	.word	0x76616c53
   14c0c:	74732065 	.word	0x74732065
   14c10:	676e6972 	.word	0x676e6972
   14c14:	6e692073 	.word	0x6e692073
   14c18:	72617020 	.word	0x72617020
   14c1c:	656c6c61 	.word	0x656c6c61
   14c20:	00203a6c 	.word	0x00203a6c
   14c24:	202d2061 	.word	0x202d2061
   14c28:	6c6c6543 	.word	0x6c6c6543
   14c2c:	6e692073 	.word	0x6e692073
   14c30:	72655320 	.word	0x72655320
   14c34:	20736569 	.word	0x20736569
   14c38:	20726570 	.word	0x20726570
   14c3c:	69727453 	.word	0x69727453
   14c40:	203a676e 	.word	0x203a676e
   14c44:	00000000 	.word	0x00000000
   14c48:	202d2062 	.word	0x202d2062
   14c4c:	70746573 	.word	0x70746573
   14c50:	746e696f 	.word	0x746e696f
   14c54:	203a3120 	.word	0x203a3120
   14c58:	00000000 	.word	0x00000000
   14c5c:	202d2063 	.word	0x202d2063
   14c60:	20434f53 	.word	0x20434f53
   14c64:	70746573 	.word	0x70746573
   14c68:	746e696f 	.word	0x746e696f
   14c6c:	003a3120 	.word	0x003a3120
   14c70:	00000025 	.word	0x00000025
   14c74:	202d2064 	.word	0x202d2064
   14c78:	70746573 	.word	0x70746573
   14c7c:	746e696f 	.word	0x746e696f
   14c80:	203a3220 	.word	0x203a3220
   14c84:	00000000 	.word	0x00000000
   14c88:	202d2065 	.word	0x202d2065
   14c8c:	20434f53 	.word	0x20434f53
   14c90:	70746573 	.word	0x70746573
   14c94:	746e696f 	.word	0x746e696f
   14c98:	203a3220 	.word	0x203a3220
   14c9c:	00000000 	.word	0x00000000
   14ca0:	202d2067 	.word	0x202d2067
   14ca4:	726f7453 	.word	0x726f7453
   14ca8:	20656761 	.word	0x20656761
   14cac:	70746553 	.word	0x70746553
   14cb0:	746e696f 	.word	0x746e696f
   14cb4:	0000203a 	.word	0x0000203a
   14cb8:	202d2068 	.word	0x202d2068
   14cbc:	63736944 	.word	0x63736944
   14cc0:	67726168 	.word	0x67726168
   14cc4:	75432065 	.word	0x75432065
   14cc8:	6e657272 	.word	0x6e657272
   14ccc:	61542074 	.word	0x61542074
   14cd0:	20726570 	.word	0x20726570
   14cd4:	7366664f 	.word	0x7366664f
   14cd8:	203a7465 	.word	0x203a7465
   14cdc:	00000000 	.word	0x00000000
   14ce0:	202d206a 	.word	0x202d206a
   14ce4:	63736944 	.word	0x63736944
   14ce8:	67726168 	.word	0x67726168
   14cec:	75432065 	.word	0x75432065
   14cf0:	6e657272 	.word	0x6e657272
   14cf4:	65542074 	.word	0x65542074
   14cf8:	7265706d 	.word	0x7265706d
   14cfc:	72757461 	.word	0x72757461
   14d00:	65442065 	.word	0x65442065
   14d04:	65746172 	.word	0x65746172
   14d08:	00203a20 	.word	0x00203a20
   14d0c:	202d206b 	.word	0x202d206b
   14d10:	6c6c6543 	.word	0x6c6c6543
   14d14:	73694420 	.word	0x73694420
   14d18:	72616863 	.word	0x72616863
   14d1c:	56206567 	.word	0x56206567
   14d20:	61746c6f 	.word	0x61746c6f
   14d24:	48206567 	.word	0x48206567
   14d28:	65747379 	.word	0x65747379
   14d2c:	69736572 	.word	0x69736572
   14d30:	00203a73 	.word	0x00203a73
   14d34:	554e454d 	.word	0x554e454d
   14d38:	00000000 	.word	0x00000000
   14d3c:	75626544 	.word	0x75626544
   14d40:	6e696767 	.word	0x6e696767
   14d44:	61502067 	.word	0x61502067
   14d48:	64657375 	.word	0x64657375
   14d4c:	00000000 	.word	0x00000000
   14d50:	6d726946 	.word	0x6d726946
   14d54:	65726177 	.word	0x65726177
   14d58:	72655620 	.word	0x72655620
   14d5c:	6e6f6973 	.word	0x6e6f6973
   14d60:	00203a20 	.word	0x00203a20
   14d64:	202d2062 	.word	0x202d2062
   14d68:	74746142 	.word	0x74746142
   14d6c:	20797265 	.word	0x20797265
   14d70:	74746553 	.word	0x74746553
   14d74:	73676e69 	.word	0x73676e69
   14d78:	00000000 	.word	0x00000000
   14d7c:	202d2061 	.word	0x202d2061
   14d80:	72616c41 	.word	0x72616c41
   14d84:	6e61206d 	.word	0x6e61206d
   14d88:	61572064 	.word	0x61572064
   14d8c:	6e696e72 	.word	0x6e696e72
   14d90:	65532067 	.word	0x65532067
   14d94:	6e697474 	.word	0x6e697474
   14d98:	00007367 	.word	0x00007367
   14d9c:	202d2065 	.word	0x202d2065
   14da0:	72616843 	.word	0x72616843
   14da4:	676e6967 	.word	0x676e6967
   14da8:	74655320 	.word	0x74655320
   14dac:	676e6974 	.word	0x676e6974
   14db0:	00000073 	.word	0x00000073
   14db4:	202d2063 	.word	0x202d2063
   14db8:	72727543 	.word	0x72727543
   14dbc:	20746e65 	.word	0x20746e65
   14dc0:	736e6553 	.word	0x736e6553
   14dc4:	4320726f 	.word	0x4320726f
   14dc8:	62696c61 	.word	0x62696c61
   14dcc:	69746172 	.word	0x69746172
   14dd0:	00006e6f 	.word	0x00006e6f
   14dd4:	202d206b 	.word	0x202d206b
   14dd8:	746e6f43 	.word	0x746e6f43
   14ddc:	6f746361 	.word	0x6f746361
   14de0:	6e612072 	.word	0x6e612072
   14de4:	61472064 	.word	0x61472064
   14de8:	20656775 	.word	0x20656775
   14dec:	74746553 	.word	0x74746553
   14df0:	73676e69 	.word	0x73676e69
   14df4:	00000000 	.word	0x00000000
   14df8:	202d2069 	.word	0x202d2069
   14dfc:	6f6e6749 	.word	0x6f6e6749
   14e00:	56206572 	.word	0x56206572
   14e04:	65756c61 	.word	0x65756c61
   14e08:	74655320 	.word	0x74655320
   14e0c:	676e6974 	.word	0x676e6974
   14e10:	00000073 	.word	0x00000073
   14e14:	202d2064 	.word	0x202d2064
   14e18:	75626544 	.word	0x75626544
   14e1c:	65532067 	.word	0x65532067
   14e20:	6e697474 	.word	0x6e697474
   14e24:	00007367 	.word	0x00007367
   14e28:	202d2071 	.word	0x202d2071
   14e2c:	74697865 	.word	0x74697865
   14e30:	6e656d20 	.word	0x6e656d20
   14e34:	ffff0075 	.word	0xffff0075
   14e38:	0020416d 	.word	0x0020416d
   14e3c:	65747845 	.word	0x65747845
   14e40:	6465646e 	.word	0x6465646e
   14e44:	3a444920 	.word	0x3a444920
   14e48:	25783020 	.word	0x25783020
   14e4c:	586c382e 	.word	0x586c382e
   14e50:	4c442020 	.word	0x4c442020
   14e54:	25203a43 	.word	0x25203a43
   14e58:	20206431 	.word	0x20206431
   14e5c:	61746144 	.word	0x61746144
   14e60:	0000003a 	.word	0x0000003a
   14e64:	2578302c 	.word	0x2578302c
   14e68:	586c332e 	.word	0x586c332e
   14e6c:	6c61662c 	.word	0x6c61662c
   14e70:	252c6573 	.word	0x252c6573
   14e74:	00006431 	.word	0x00006431
   14e78:	4d455220 	.word	0x4d455220
   14e7c:	2045544f 	.word	0x2045544f
   14e80:	55514552 	.word	0x55514552
   14e84:	20545345 	.word	0x20545345
   14e88:	4d415246 	.word	0x4d415246
   14e8c:	00000045 	.word	0x00000045
   14e90:	7830202c 	.word	0x7830202c
   14e94:	58322e25 	.word	0x58322e25
   14e98:	ffffff00 	.word	0xffffff00
   14e9c:	75706e49 	.word	0x75706e49
   14ea0:	00203a74 	.word	0x00203a74
   14ea4:	4e4f2031 	.word	0x4e4f2031
   14ea8:	00002020 	.word	0x00002020
   14eac:	464f2031 	.word	0x464f2031
   14eb0:	00002046 	.word	0x00002046
   14eb4:	4e4f2032 	.word	0x4e4f2032
   14eb8:	00002020 	.word	0x00002020
   14ebc:	464f2032 	.word	0x464f2032
   14ec0:	00002046 	.word	0x00002046
   14ec4:	4e4f2033 	.word	0x4e4f2033
   14ec8:	00002020 	.word	0x00002020
   14ecc:	464f2033 	.word	0x464f2033
   14ed0:	00002046 	.word	0x00002046
   14ed4:	4e4f2034 	.word	0x4e4f2034
   14ed8:	00002020 	.word	0x00002020
   14edc:	464f2034 	.word	0x464f2034
   14ee0:	ff002046 	.word	0xff002046
   14ee4:	74617473 	.word	0x74617473
   14ee8:	7478742e 	.word	0x7478742e
   14eec:	0000003d 	.word	0x0000003d
   14ef0:	74634120 	.word	0x74634120
   14ef4:	20657669 	.word	0x20657669
   14ef8:	00000000 	.word	0x00000000
   14efc:	2e636f73 	.word	0x2e636f73
   14f00:	3d6c6176 	.word	0x3d6c6176
   14f04:	00000000 	.word	0x00000000
   14f08:	31636f73 	.word	0x31636f73
   14f0c:	6c61762e 	.word	0x6c61762e
   14f10:	0000003d 	.word	0x0000003d
   14f14:	72727563 	.word	0x72727563
   14f18:	2e746e65 	.word	0x2e746e65
   14f1c:	3d6c6176 	.word	0x3d6c6176
   14f20:	00000000 	.word	0x00000000
   14f24:	706d6574 	.word	0x706d6574
   14f28:	6c61762e 	.word	0x6c61762e
   14f2c:	0000003d 	.word	0x0000003d
   14f30:	706d6574 	.word	0x706d6574
   14f34:	2e776f6c 	.word	0x2e776f6c
   14f38:	3d6c6176 	.word	0x3d6c6176
   14f3c:	00000000 	.word	0x00000000
   14f40:	706d6574 	.word	0x706d6574
   14f44:	68676968 	.word	0x68676968
   14f48:	6c61762e 	.word	0x6c61762e
   14f4c:	0000003d 	.word	0x0000003d
   14f50:	746c6f76 	.word	0x746c6f76
   14f54:	6c61762e 	.word	0x6c61762e
   14f58:	0000003d 	.word	0x0000003d
   14f5c:	63776f6c 	.word	0x63776f6c
   14f60:	2e6c6c65 	.word	0x2e6c6c65
   14f64:	3d6c6176 	.word	0x3d6c6176
   14f68:	00000000 	.word	0x00000000
   14f6c:	68676968 	.word	0x68676968
   14f70:	6c6c6563 	.word	0x6c6c6563
   14f74:	6c61762e 	.word	0x6c61762e
   14f78:	0000003d 	.word	0x0000003d
   14f7c:	6d726966 	.word	0x6d726966
   14f80:	6c61762e 	.word	0x6c61762e
   14f84:	0000003d 	.word	0x0000003d
   14f88:	6c6c6563 	.word	0x6c6c6563
   14f8c:	746c6564 	.word	0x746c6564
   14f90:	61762e61 	.word	0x61762e61
   14f94:	ff003d6c 	.word	0xff003d6c
   14f98:	63657250 	.word	0x63657250
   14f9c:	67726168 	.word	0x67726168
   14fa0:	21212165 	.word	0x21212165
   14fa4:	00000000 	.word	0x00000000
   14fa8:	6e69614d 	.word	0x6e69614d
   14fac:	216e4f20 	.word	0x216e4f20
   14fb0:	00002121 	.word	0x00002121
   14fb4:	7265764f 	.word	0x7265764f
   14fb8:	6c6f5620 	.word	0x6c6f5620
   14fbc:	65676174 	.word	0x65676174
   14fc0:	69725420 	.word	0x69725420
   14fc4:	00000070 	.word	0x00000070
   14fc8:	65736552 	.word	0x65736552
   14fcc:	764f2074 	.word	0x764f2074
   14fd0:	56207265 	.word	0x56207265
   14fd4:	61746c6f 	.word	0x61746c6f
   14fd8:	54206567 	.word	0x54206567
   14fdc:	20706972 	.word	0x20706972
   14fe0:	20746f4e 	.word	0x20746f4e
   14fe4:	72616843 	.word	0x72616843
   14fe8:	00646567 	.word	0x00646567
   14fec:	65646e55 	.word	0x65646e55
   14ff0:	6f562072 	.word	0x6f562072
   14ff4:	6761746c 	.word	0x6761746c
   14ff8:	72542065 	.word	0x72542065
   14ffc:	00007069 	.word	0x00007069
   15000:	65736552 	.word	0x65736552
   15004:	6e552074 	.word	0x6e552074
   15008:	20726564 	.word	0x20726564
   1500c:	746c6f56 	.word	0x746c6f56
   15010:	20656761 	.word	0x20656761
   15014:	70697254 	.word	0x70697254
   15018:	00000000 	.word	0x00000000
   1501c:	21202020 	.word	0x21202020
   15020:	55202121 	.word	0x55202121
   15024:	7265646e 	.word	0x7265646e
   15028:	746c6f76 	.word	0x746c6f76
   1502c:	20656761 	.word	0x20656761
   15030:	6c756146 	.word	0x6c756146
   15034:	21212074 	.word	0x21212074
   15038:	00000021 	.word	0x00000021
   1503c:	21202020 	.word	0x21202020
   15040:	53202121 	.word	0x53202121
   15044:	65697265 	.word	0x65697265
   15048:	65432073 	.word	0x65432073
   1504c:	20736c6c 	.word	0x20736c6c
   15050:	6c756146 	.word	0x6c756146
   15054:	21212074 	.word	0x21212074
   15058:	00000021 	.word	0x00000021
   1505c:	21202020 	.word	0x21202020
   15060:	4d202121 	.word	0x4d202121
   15064:	4c55444f 	.word	0x4c55444f
   15068:	494d2045 	.word	0x494d2045
   1506c:	4e495353 	.word	0x4e495353
   15070:	21212047 	.word	0x21212047
   15074:	ffff0021 	.word	0xffff0021
   15078:	72617453 	.word	0x72617453
   1507c:	676e6974 	.word	0x676e6974
   15080:	21707520 	.word	0x21707520
   15084:	00000000 	.word	0x00000000
   15088:	706d6953 	.word	0x706d6953
   1508c:	20534d42 	.word	0x20534d42
   15090:	56203256 	.word	0x56203256
   15094:	00000057 	.word	0x00000057
   15098:	73616552 	.word	0x73616552
   1509c:	66206e6f 	.word	0x66206e6f
   150a0:	6c20726f 	.word	0x6c20726f
   150a4:	20747361 	.word	0x20747361
   150a8:	65736552 	.word	0x65736552
   150ac:	00203a74 	.word	0x00203a74
   150b0:	706f7453 	.word	0x706f7453
   150b4:	646f4d20 	.word	0x646f4d20
   150b8:	63412065 	.word	0x63412065
   150bc:	776f6e6b 	.word	0x776f6e6b
   150c0:	6764656c 	.word	0x6764656c
   150c4:	72452065 	.word	0x72452065
   150c8:	20726f72 	.word	0x20726f72
   150cc:	65736552 	.word	0x65736552
   150d0:	00000074 	.word	0x00000074
   150d4:	2d4d444d 	.word	0x2d4d444d
   150d8:	52205041 	.word	0x52205041
   150dc:	74657365 	.word	0x74657365
   150e0:	00000000 	.word	0x00000000
   150e4:	74666f53 	.word	0x74666f53
   150e8:	65726177 	.word	0x65726177
   150ec:	73655220 	.word	0x73655220
   150f0:	00007465 	.word	0x00007465
   150f4:	65726f43 	.word	0x65726f43
   150f8:	636f4c20 	.word	0x636f4c20
   150fc:	2070756b 	.word	0x2070756b
   15100:	6e657645 	.word	0x6e657645
   15104:	65522074 	.word	0x65522074
   15108:	00746573 	.word	0x00746573
   1510c:	65776f50 	.word	0x65776f50
   15110:	6e6f2d72 	.word	0x6e6f2d72
   15114:	73655220 	.word	0x73655220
   15118:	00007465 	.word	0x00007465
   1511c:	65747845 	.word	0x65747845
   15120:	6c616e72 	.word	0x6c616e72
   15124:	6e695020 	.word	0x6e695020
   15128:	73655220 	.word	0x73655220
   1512c:	00007465 	.word	0x00007465
   15130:	63746157 	.word	0x63746157
   15134:	676f6468 	.word	0x676f6468
   15138:	504f4328 	.word	0x504f4328
   1513c:	65522029 	.word	0x65522029
   15140:	00746573 	.word	0x00746573
   15144:	73736f4c 	.word	0x73736f4c
   15148:	20666f20 	.word	0x20666f20
   1514c:	65747845 	.word	0x65747845
   15150:	6c616e72 	.word	0x6c616e72
   15154:	6f6c4320 	.word	0x6f6c4320
   15158:	52206b63 	.word	0x52206b63
   1515c:	74657365 	.word	0x74657365
   15160:	00000000 	.word	0x00000000
   15164:	73736f4c 	.word	0x73736f4c
   15168:	20666f20 	.word	0x20666f20
   1516c:	6b636f4c 	.word	0x6b636f4c
   15170:	206e6920 	.word	0x206e6920
   15174:	204c4c50 	.word	0x204c4c50
   15178:	65736552 	.word	0x65736552
   1517c:	00000074 	.word	0x00000074
   15180:	2d776f4c 	.word	0x2d776f4c
   15184:	746c6f76 	.word	0x746c6f76
   15188:	20656761 	.word	0x20656761
   1518c:	65746544 	.word	0x65746544
   15190:	52207463 	.word	0x52207463
   15194:	74657365 	.word	0x74657365
   15198:	00000000 	.word	0x00000000
   1519c:	72617453 	.word	0x72617453
   151a0:	20646574 	.word	0x20646574
   151a4:	69726573 	.word	0x69726573
   151a8:	69206c61 	.word	0x69206c61
   151ac:	7265746e 	.word	0x7265746e
   151b0:	65636166 	.word	0x65636166
   151b4:	206f7420 	.word	0x206f7420
   151b8:	2e534d42 	.word	0x2e534d42
   151bc:	ffffff00 	.word	0xffffff00
   151c0:	726f6241 	.word	0x726f6241
   151c4:	6e692074 	.word	0x6e692074
   151c8:	4e414320 	.word	0x4e414320
   151cc:	67656220 	.word	0x67656220
   151d0:	202e6e69 	.word	0x202e6e69
   151d4:	6c756f43 	.word	0x6c756f43
   151d8:	74276e64 	.word	0x74276e64
   151dc:	6e696620 	.word	0x6e696620
   151e0:	20612064 	.word	0x20612064
   151e4:	74697573 	.word	0x74697573
   151e8:	656c6261 	.word	0x656c6261
   151ec:	75616220 	.word	0x75616220
   151f0:	6f632064 	.word	0x6f632064
   151f4:	6769666e 	.word	0x6769666e
   151f8:	ffff0021 	.word	0xffff0021

000151fc <ADC::diff_table_ADC0>:
   151fc:	03248022                                ".$.

00015200 <ADC::diff_table_ADC1>:
   15200:	80240322                                ".$.

00015204 <ADC::channel2sc1aADC0>:
   15204:	09080e05 07060c0d 1300040f 0e051f03     ................
   15214:	0c0d0908 040f0706 1f1f1f1f 1f1f1f1f     ................
   15224:	53401f1f 161a5f43 1e1d1b17              ..@SC_......

00015230 <ADC::channel2sc1aADC1>:
   15230:	09081f1f 1f1f1f1f 1f031f1f 1f1f1300     ................
   15240:	1f1f0908 1f1f1f1f 05851f1f 84070604     ................
   15250:	5f431f1f 121a5340 1e1d1b1f              ..C_@S......

0001525c <SPIClass::spi0_hardware>:
   1525c:	4004803c 00001000 00001a04 00007fff     <..@............
   1526c:	00001011 00009061 0000080c 00000200     ....a...........
   1527c:	00000200 0000070b 00000240 00000200     ........@.......
   1528c:	00000e0d 00000240 00000200 0609020a     ....@...........
   1529c:	16151714 0000000f 00000200 00000200     ................
   152ac:	00000200 00000200 00000200 00000200     ................
   152bc:	00000200 00000200 00000200 02020101     ................
   152cc:	08080404 00000010                       ........

000152d4 <_serialEvent_default>:
   152d4:	ffffff00                                ....

000152d8 <vtable for HardwareSerial2>:
	...
   152e0:	000092b9 000092dd 0000936d 00009369     ........m...i...
   152f0:	00009365 00009361 0000935d 00009281     e...a...].......
   15300:	0000933d 00009339 00009331 00009329     =...9...1...)...
   15310:	00009321 00009311 00009301 000092fd     !...............
   15320:	000092f5 000092ed 00009391 000093b1     ................
   15330:	000093d1 00009371 000092c5 000092ad     ....q...........

00015340 <vtable for HardwareSerial3>:
	...
   15348:	00009429 0000944d 000094dd 000094d9     )...M...........
   15358:	000094d5 000094d1 000094cd 000093f1     ................
   15368:	000094ad 000094a9 000094a1 00009499     ................
   15378:	00009491 00009481 00009471 0000946d     ........q...m...
   15388:	00009465 0000945d 00009501 00009521     e...].......!...
   15398:	00009541 000094e1 00009435 0000941d     A.......5.......
   153a8:	006e616e 00666e69 0066766f 037ff06f     nan.inf.ovf.o...
   153b8:	78037003 0f80f013 4770d0fb              .p.x......pG

000153c4 <CSWTCH.39>:
   153c4:	00000008 0000000c 0000000a 00000009     ................
   153d4:	0000000b                                ....

000153d8 <digital_pin_to_info_PGM>:
   153d8:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
   153e8:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
   153f8:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
   15408:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
   15418:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
   15428:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
   15438:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
   15448:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
   15458:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
   15468:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
   15478:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
   15488:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
   15498:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
   154a8:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
   154b8:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
   154c8:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
   154d8:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@

000154e8 <vtable for usb_serial_class>:
	...
   154f0:	0000bf0d 0000bf05 0000bf01 0000befd     ................
   15500:	0000bef9 0000bef5 0000bef1 0000beed     ................

00015510 <usb_descriptor_list>:
   15510:	00000100 1fff8a58 00000012 00000200     ....X...........
   15520:	1fff8a14 00000043 00000300 1fff8a6c     ....C.......l...
   15530:	00000000 04090301 1fff8a70 00000000     ........p.......
   15540:	04090302 1fff8a88 00000000 04090303     ................
   15550:	1fff8aa0 00000000 00000000 00000000     ................
   15560:	00000000                                ....

00015564 <usb_endpoint_config_table>:
   15564:	15191500 3f000000 bf000000 3f317180     .......?.....q1?
   15574:	bf317180 3717f7d1 b717f7d1              .q1....7....

00015580 <_ctype_>:
   15580:	20202000 20202020 28282020 20282828     .         ((((( 
   15590:	20202020 20202020 20202020 20202020                     
   155a0:	10108820 10101010 10101010 10101010      ...............
   155b0:	04040410 04040404 10040404 10101010     ................
   155c0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   155d0:	01010101 01010101 01010101 10101010     ................
   155e0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   155f0:	02020202 02020202 02020202 10101010     ................
   15600:	00000020 00000000 00000000 00000000      ...............
	...
   15680:	ffffff00 435f434c 414c4c4f 00004554     ....LC_COLLATE..
   15690:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
   156a0:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
   156b0:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
   156c0:	41535345 00534547 6c6c6142 7320636f     ESSAGES.Balloc s
   156d0:	65636375 64656465 00000000 7461642f     ucceeded..../dat
   156e0:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   156f0:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   15700:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   15710:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   15720:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
   15730:	2e636572 ffff0063                       rec.c...

00015738 <__mprec_bigtens>:
   15738:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   15748:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   15758:	7f73bf3c 75154fdd                       <.s..O.u

00015760 <__mprec_tens>:
   15760:	00000000 3ff00000 00000000 40240000     .......?......$@
   15770:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   15780:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   15790:	00000000 412e8480 00000000 416312d0     .......A......cA
   157a0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   157b0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   157c0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   157d0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   157e0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   157f0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   15800:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   15810:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   15820:	79d99db4 44ea7843 00000005 00000019     ...yCx.D........
   15830:	0000007d 00464e49 004e414e 33323130     }...INF.NAN.0123
   15840:	37363534 62613938 66656463 00000000     456789abcdef....
   15850:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   15860:	00000000 6c756e28 ff00296c 20202020     ....(null)..    
   15870:	20202020 20202020 20202020 30303030                 0000
   15880:	30303030 30303030 30303030 7566202c     000000000000, fu
   15890:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   158a0:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   158b0:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   158c0:	2520656e 25732564 ff000a73 69666e49     ne %d%s%s...Infi
   158d0:	7974696e 00000000 004e614e 7461642f     nity....NaN./dat
   158e0:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   158f0:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   15900:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   15910:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   15920:	696c2f62 732f6362 696c6474 74642f62     b/libc/stdlib/dt
   15930:	632e616f ffffff00 20202020 20202020     oa.c....        
   15940:	20202020 20202020 30303030 30303030             00000000
   15950:	30303030 30303030                       00000000

00015958 <_init>:
   15958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1595a:	bf00      	nop
   1595c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   1595e:	bc08      	pop	{r3}
   15960:	469e      	mov	lr, r3
   15962:	4770      	bx	lr

00015964 <__init_array_start>:
   15964:	0000e29d 	.word	0x0000e29d

00015968 <__frame_dummy_init_array_entry>:
   15968:	00000435 000078d9 00008835 00009071     5....x..5...q...

Disassembly of section .fini:

00015978 <_fini>:
   15978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1597a:	bf00      	nop

Disassembly of section .data:

1fff8720 <port_E_isr>:
PORT_ISR_FUNCTION_CLZ(E)
1fff8720:	b538      	push	{r3, r4, r5, lr}
1fff8722:	4b0a      	ldr	r3, [pc, #40]	; (1fff874c <port_E_isr+0x2c>)
1fff8724:	4d0a      	ldr	r5, [pc, #40]	; (1fff8750 <port_E_isr+0x30>)
1fff8726:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff872a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff872e:	e005      	b.n	1fff873c <port_E_isr+0x1c>
1fff8730:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8734:	4798      	blx	r3
1fff8736:	1e63      	subs	r3, r4, #1
1fff8738:	401c      	ands	r4, r3
1fff873a:	d005      	beq.n	1fff8748 <port_E_isr+0x28>
1fff873c:	fa94 f3a4 	rbit	r3, r4
1fff8740:	fab3 f383 	clz	r3, r3
1fff8744:	2c00      	cmp	r4, #0
1fff8746:	d1f3      	bne.n	1fff8730 <port_E_isr+0x10>
1fff8748:	bd38      	pop	{r3, r4, r5, pc}
1fff874a:	bf00      	nop
1fff874c:	4004d000 	.word	0x4004d000
1fff8750:	1fff89c8 	.word	0x1fff89c8

1fff8754 <port_D_isr>:
PORT_ISR_FUNCTION_CLZ(D)
1fff8754:	b538      	push	{r3, r4, r5, lr}
1fff8756:	4b0a      	ldr	r3, [pc, #40]	; (1fff8780 <port_D_isr+0x2c>)
1fff8758:	4d0a      	ldr	r5, [pc, #40]	; (1fff8784 <port_D_isr+0x30>)
1fff875a:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff875e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8762:	e005      	b.n	1fff8770 <port_D_isr+0x1c>
1fff8764:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8768:	4798      	blx	r3
1fff876a:	1e63      	subs	r3, r4, #1
1fff876c:	401c      	ands	r4, r3
1fff876e:	d005      	beq.n	1fff877c <port_D_isr+0x28>
1fff8770:	fa94 f3a4 	rbit	r3, r4
1fff8774:	fab3 f383 	clz	r3, r3
1fff8778:	2c00      	cmp	r4, #0
1fff877a:	d1f3      	bne.n	1fff8764 <port_D_isr+0x10>
1fff877c:	bd38      	pop	{r3, r4, r5, pc}
1fff877e:	bf00      	nop
1fff8780:	4004c000 	.word	0x4004c000
1fff8784:	1fff89a8 	.word	0x1fff89a8

1fff8788 <port_C_isr>:
PORT_ISR_FUNCTION_CLZ(C)
1fff8788:	b538      	push	{r3, r4, r5, lr}
1fff878a:	4b0a      	ldr	r3, [pc, #40]	; (1fff87b4 <port_C_isr+0x2c>)
1fff878c:	4d0a      	ldr	r5, [pc, #40]	; (1fff87b8 <port_C_isr+0x30>)
1fff878e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff8792:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8796:	e005      	b.n	1fff87a4 <port_C_isr+0x1c>
1fff8798:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff879c:	4798      	blx	r3
1fff879e:	1e63      	subs	r3, r4, #1
1fff87a0:	401c      	ands	r4, r3
1fff87a2:	d005      	beq.n	1fff87b0 <port_C_isr+0x28>
1fff87a4:	fa94 f3a4 	rbit	r3, r4
1fff87a8:	fab3 f383 	clz	r3, r3
1fff87ac:	2c00      	cmp	r4, #0
1fff87ae:	d1f3      	bne.n	1fff8798 <port_C_isr+0x10>
1fff87b0:	bd38      	pop	{r3, r4, r5, pc}
1fff87b2:	bf00      	nop
1fff87b4:	4004b000 	.word	0x4004b000
1fff87b8:	1fff8978 	.word	0x1fff8978

1fff87bc <port_B_isr>:
PORT_ISR_FUNCTION_CLZ(B)
1fff87bc:	b538      	push	{r3, r4, r5, lr}
1fff87be:	4b0a      	ldr	r3, [pc, #40]	; (1fff87e8 <port_B_isr+0x2c>)
1fff87c0:	4d0a      	ldr	r5, [pc, #40]	; (1fff87ec <port_B_isr+0x30>)
1fff87c2:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff87c6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff87ca:	e005      	b.n	1fff87d8 <port_B_isr+0x1c>
1fff87cc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff87d0:	4798      	blx	r3
1fff87d2:	1e63      	subs	r3, r4, #1
1fff87d4:	401c      	ands	r4, r3
1fff87d6:	d005      	beq.n	1fff87e4 <port_B_isr+0x28>
1fff87d8:	fa94 f3a4 	rbit	r3, r4
1fff87dc:	fab3 f383 	clz	r3, r3
1fff87e0:	2c00      	cmp	r4, #0
1fff87e2:	d1f3      	bne.n	1fff87cc <port_B_isr+0x10>
1fff87e4:	bd38      	pop	{r3, r4, r5, pc}
1fff87e6:	bf00      	nop
1fff87e8:	4004a000 	.word	0x4004a000
1fff87ec:	1fff8928 	.word	0x1fff8928

1fff87f0 <port_A_isr>:
PORT_ISR_FUNCTION_CLZ(A)
1fff87f0:	b538      	push	{r3, r4, r5, lr}
1fff87f2:	4b0a      	ldr	r3, [pc, #40]	; (1fff881c <port_A_isr+0x2c>)
1fff87f4:	4d0a      	ldr	r5, [pc, #40]	; (1fff8820 <port_A_isr+0x30>)
1fff87f6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff87fa:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff87fe:	e005      	b.n	1fff880c <port_A_isr+0x1c>
1fff8800:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8804:	4798      	blx	r3
1fff8806:	1e63      	subs	r3, r4, #1
1fff8808:	401c      	ands	r4, r3
1fff880a:	d005      	beq.n	1fff8818 <port_A_isr+0x28>
1fff880c:	fa94 f3a4 	rbit	r3, r4
1fff8810:	fab3 f383 	clz	r3, r3
1fff8814:	2c00      	cmp	r4, #0
1fff8816:	d1f3      	bne.n	1fff8800 <port_A_isr+0x10>
1fff8818:	bd38      	pop	{r3, r4, r5, pc}
1fff881a:	bf00      	nop
1fff881c:	40049000 	.word	0x40049000
1fff8820:	1fff88f0 	.word	0x1fff88f0

1fff8824 <Logger::logLevel>:
1fff8824:	00000001                                ....

1fff8828 <SOC>:
1fff8828:	00000064                                d...

1fff882c <SOH>:
1fff882c:	00000064                                d...

1fff8830 <bmsmanu>:
1fff8830:	504d4953 4f434520                       SIMP ECO

1fff8838 <bmsname>:
1fff8838:	504d4953 534d4220                       SIMP BMS

1fff8840 <chargerid1>:
1fff8840:	00000618                                ....

1fff8844 <chargerid2>:
1fff8844:	00000638                                8...

1fff8848 <controlid>:
1fff8848:	000000ba                                ....

1fff884c <debug>:
1fff884c:	00000001                                ....

1fff8850 <debugdigits>:
1fff8850:	00000002                                ....

1fff8854 <filterFrequency>:
1fff8854:	40a00000                                ...@

1fff8858 <firmver>:
1fff8858:	0003846e                                n...

1fff885c <maxac1>:
1fff885c:	00000010                                ....

1fff8860 <maxac2>:
1fff8860:	0000000a                                ....

1fff8864 <ncharger>:
1fff8864:	00000001                                ....

1fff8868 <pulltime>:
1fff8868:	000003e8                                ....

1fff886c <pwmcurmax>:
1fff886c:	000000c8                                ....

1fff8870 <pwmcurmid>:
1fff8870:	00000032                                2...

1fff8874 <pwmfreq>:
1fff8874:	00003a98                                .:..

1fff8878 <sensor>:
1fff8878:	00000001                                ....

1fff887c <bitTimingTable>:
1fff887c:	01010000 01010100 01010201 02010202     ................
1fff888c:	03020103 02040202 02020502 06020305     ................
1fff889c:	03070203 03040702 07030407 05070405     ................
1fff88ac:	05060704 07060607 07070606 00070707     ................

1fff88bc <Serial2>:
1fff88bc:	000152e0 00000000 000003e8 00000000     .R..............
1fff88cc:	0000b56d                                m...

1fff88d0 <Serial3>:
1fff88d0:	00015348 00000000 000003e8 00000000     HS..............
1fff88e0:	0000b571                                q...

1fff88e4 <analog_config_bits>:
1fff88e4:	                                         .

1fff88e5 <analog_num_average>:
1fff88e5:	                                         ...

1fff88e8 <__brkval>:
1fff88e8:	1fffd90c                                ....

1fff88ec <analog_write_res>:
1fff88ec:	00000008                                ....

1fff88f0 <isr_table_portA>:
1fff88f0:	00009eb5 00009eb5 00009eb5 00009eb5     ................
1fff8900:	00009eb5 00009eb5 00009eb5 00009eb5     ................
1fff8910:	00009eb5 00009eb5 00009eb5 00009eb5     ................
1fff8920:	00009eb5 00009eb5                       ........

1fff8928 <isr_table_portB>:
1fff8928:	00009eb5 00009eb5 00009eb5 00009eb5     ................
1fff8938:	00009eb5 00009eb5 00009eb5 00009eb5     ................
1fff8948:	00009eb5 00009eb5 00009eb5 00009eb5     ................
1fff8958:	00009eb5 00009eb5 00009eb5 00009eb5     ................
1fff8968:	00009eb5 00009eb5 00009eb5 00009eb5     ................

1fff8978 <isr_table_portC>:
1fff8978:	00009eb5 00009eb5 00009eb5 00009eb5     ................
1fff8988:	00009eb5 00009eb5 00009eb5 00009eb5     ................
1fff8998:	00009eb5 00009eb5 00009eb5 00009eb5     ................

1fff89a8 <isr_table_portD>:
1fff89a8:	00009eb5 00009eb5 00009eb5 00009eb5     ................
1fff89b8:	00009eb5 00009eb5 00009eb5 00009eb5     ................

1fff89c8 <isr_table_portE>:
1fff89c8:	00009eb5 00009eb5                       ........

1fff89d0 <rts_high_watermark_>:
1fff89d0:	00000028                                (...

1fff89d4 <rts_low_watermark_>:
1fff89d4:	0000001a                                ....

1fff89d8 <rx_buffer_total_size_>:
1fff89d8:	00000040                                @...

1fff89dc <rx_pin_num>:
1fff89dc:	00000009                                ....

1fff89e0 <tx_buffer_total_size_>:
1fff89e0:	00000028                                (...

1fff89e4 <tx_pin_num>:
1fff89e4:	0000000a                                ....

1fff89e8 <rts_high_watermark_>:
1fff89e8:	00000028                                (...

1fff89ec <rts_low_watermark_>:
1fff89ec:	0000001a                                ....

1fff89f0 <rx_buffer_total_size_>:
1fff89f0:	00000040                                @...

1fff89f4 <tx_buffer_total_size_>:
1fff89f4:	00000028                                (...

1fff89f8 <tx_pin_num>:
1fff89f8:	                                         .

1fff89f9 <_serialEvent2_default>:
1fff89f9:	                                         .

1fff89fa <_serialEvent3_default>:
1fff89fa:	                                         ..

1fff89fc <Serial>:
1fff89fc:	000154f0 00000000 000003e8 00000000     .T..............

1fff8a0c <usb_buffer_available>:
1fff8a0c:	ffffffff                                ....

1fff8a10 <yield_active_check_flags>:
1fff8a10:	00000001                                ....

1fff8a14 <config_descriptor>:
1fff8a14:	00430209 c0000102 00040932 02020100     ..C.....2.......
1fff8a24:	24050001 05011000 01010124 06022404     ...$....$....$..
1fff8a34:	00062405 82050701 40001003 00010409     .$.........@....
1fff8a44:	00000a02 03050700 00004002 02840507     .........@......
1fff8a54:	00000040                                @...

1fff8a58 <device_descriptor>:
1fff8a58:	01100112 40000002 048316c0 02010275     .......@....u...
1fff8a68:	00000103                                ....

1fff8a6c <string0>:
1fff8a6c:	04090304                                ....

1fff8a70 <usb_string_manufacturer_name_default>:
1fff8a70:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
1fff8a80:	00690075 006f006e                       u.i.n.o.

1fff8a88 <usb_string_product_name_default>:
1fff8a88:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
1fff8a98:	00610069 0000006c                       i.a.l...

1fff8aa0 <usb_string_serial_number_default>:
1fff8aa0:	0000030c 00000000 00000000 00000000     ................
	...

1fff8ab8 <__malloc_av_>:
	...
1fff8ac0:	1fff8ab8 1fff8ab8 1fff8ac0 1fff8ac0     ................
1fff8ad0:	1fff8ac8 1fff8ac8 1fff8ad0 1fff8ad0     ................
1fff8ae0:	1fff8ad8 1fff8ad8 1fff8ae0 1fff8ae0     ................
1fff8af0:	1fff8ae8 1fff8ae8 1fff8af0 1fff8af0     ................
1fff8b00:	1fff8af8 1fff8af8 1fff8b00 1fff8b00     ................
1fff8b10:	1fff8b08 1fff8b08 1fff8b10 1fff8b10     ................
1fff8b20:	1fff8b18 1fff8b18 1fff8b20 1fff8b20     ........ ... ...
1fff8b30:	1fff8b28 1fff8b28 1fff8b30 1fff8b30     (...(...0...0...
1fff8b40:	1fff8b38 1fff8b38 1fff8b40 1fff8b40     8...8...@...@...
1fff8b50:	1fff8b48 1fff8b48 1fff8b50 1fff8b50     H...H...P...P...
1fff8b60:	1fff8b58 1fff8b58 1fff8b60 1fff8b60     X...X...`...`...
1fff8b70:	1fff8b68 1fff8b68 1fff8b70 1fff8b70     h...h...p...p...
1fff8b80:	1fff8b78 1fff8b78 1fff8b80 1fff8b80     x...x...........
1fff8b90:	1fff8b88 1fff8b88 1fff8b90 1fff8b90     ................
1fff8ba0:	1fff8b98 1fff8b98 1fff8ba0 1fff8ba0     ................
1fff8bb0:	1fff8ba8 1fff8ba8 1fff8bb0 1fff8bb0     ................
1fff8bc0:	1fff8bb8 1fff8bb8 1fff8bc0 1fff8bc0     ................
1fff8bd0:	1fff8bc8 1fff8bc8 1fff8bd0 1fff8bd0     ................
1fff8be0:	1fff8bd8 1fff8bd8 1fff8be0 1fff8be0     ................
1fff8bf0:	1fff8be8 1fff8be8 1fff8bf0 1fff8bf0     ................
1fff8c00:	1fff8bf8 1fff8bf8 1fff8c00 1fff8c00     ................
1fff8c10:	1fff8c08 1fff8c08 1fff8c10 1fff8c10     ................
1fff8c20:	1fff8c18 1fff8c18 1fff8c20 1fff8c20     ........ ... ...
1fff8c30:	1fff8c28 1fff8c28 1fff8c30 1fff8c30     (...(...0...0...
1fff8c40:	1fff8c38 1fff8c38 1fff8c40 1fff8c40     8...8...@...@...
1fff8c50:	1fff8c48 1fff8c48 1fff8c50 1fff8c50     H...H...P...P...
1fff8c60:	1fff8c58 1fff8c58 1fff8c60 1fff8c60     X...X...`...`...
1fff8c70:	1fff8c68 1fff8c68 1fff8c70 1fff8c70     h...h...p...p...
1fff8c80:	1fff8c78 1fff8c78 1fff8c80 1fff8c80     x...x...........
1fff8c90:	1fff8c88 1fff8c88 1fff8c90 1fff8c90     ................
1fff8ca0:	1fff8c98 1fff8c98 1fff8ca0 1fff8ca0     ................
1fff8cb0:	1fff8ca8 1fff8ca8 1fff8cb0 1fff8cb0     ................
1fff8cc0:	1fff8cb8 1fff8cb8 1fff8cc0 1fff8cc0     ................
1fff8cd0:	1fff8cc8 1fff8cc8 1fff8cd0 1fff8cd0     ................
1fff8ce0:	1fff8cd8 1fff8cd8 1fff8ce0 1fff8ce0     ................
1fff8cf0:	1fff8ce8 1fff8ce8 1fff8cf0 1fff8cf0     ................
1fff8d00:	1fff8cf8 1fff8cf8 1fff8d00 1fff8d00     ................
1fff8d10:	1fff8d08 1fff8d08 1fff8d10 1fff8d10     ................
1fff8d20:	1fff8d18 1fff8d18 1fff8d20 1fff8d20     ........ ... ...
1fff8d30:	1fff8d28 1fff8d28 1fff8d30 1fff8d30     (...(...0...0...
1fff8d40:	1fff8d38 1fff8d38 1fff8d40 1fff8d40     8...8...@...@...
1fff8d50:	1fff8d48 1fff8d48 1fff8d50 1fff8d50     H...H...P...P...
1fff8d60:	1fff8d58 1fff8d58 1fff8d60 1fff8d60     X...X...`...`...
1fff8d70:	1fff8d68 1fff8d68 1fff8d70 1fff8d70     h...h...p...p...
1fff8d80:	1fff8d78 1fff8d78 1fff8d80 1fff8d80     x...x...........
1fff8d90:	1fff8d88 1fff8d88 1fff8d90 1fff8d90     ................
1fff8da0:	1fff8d98 1fff8d98 1fff8da0 1fff8da0     ................
1fff8db0:	1fff8da8 1fff8da8 1fff8db0 1fff8db0     ................
1fff8dc0:	1fff8db8 1fff8db8 1fff8dc0 1fff8dc0     ................
1fff8dd0:	1fff8dc8 1fff8dc8 1fff8dd0 1fff8dd0     ................
1fff8de0:	1fff8dd8 1fff8dd8 1fff8de0 1fff8de0     ................
1fff8df0:	1fff8de8 1fff8de8 1fff8df0 1fff8df0     ................
1fff8e00:	1fff8df8 1fff8df8 1fff8e00 1fff8e00     ................
1fff8e10:	1fff8e08 1fff8e08 1fff8e10 1fff8e10     ................
1fff8e20:	1fff8e18 1fff8e18 1fff8e20 1fff8e20     ........ ... ...
1fff8e30:	1fff8e28 1fff8e28 1fff8e30 1fff8e30     (...(...0...0...
1fff8e40:	1fff8e38 1fff8e38 1fff8e40 1fff8e40     8...8...@...@...
1fff8e50:	1fff8e48 1fff8e48 1fff8e50 1fff8e50     H...H...P...P...
1fff8e60:	1fff8e58 1fff8e58 1fff8e60 1fff8e60     X...X...`...`...
1fff8e70:	1fff8e68 1fff8e68 1fff8e70 1fff8e70     h...h...p...p...
1fff8e80:	1fff8e78 1fff8e78 1fff8e80 1fff8e80     x...x...........
1fff8e90:	1fff8e88 1fff8e88 1fff8e90 1fff8e90     ................
1fff8ea0:	1fff8e98 1fff8e98 1fff8ea0 1fff8ea0     ................
1fff8eb0:	1fff8ea8 1fff8ea8 1fff8eb0 1fff8eb0     ................

1fff8ec0 <__malloc_sbrk_base>:
1fff8ec0:	ffffffff                                ....

1fff8ec4 <__malloc_trim_threshold>:
1fff8ec4:	00020000                                ....

1fff8ec8 <__sglue>:
1fff8ec8:	00000000 00000003 1fffd62c              ........,...

1fff8ed4 <__global_locale>:
1fff8ed4:	00000043 00000000 00000000 00000000     C...............
	...
1fff8ef4:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f14:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f34:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f54:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f74:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f94:	00000043 00000000 00000000 00000000     C...............
	...
1fff8fb4:	0000ecf1 0000e569 00000000 00015580     ....i........U..
1fff8fc4:	00014320 0001423c 0001423c 0001423c      C..<B..<B..<B..
1fff8fd4:	0001423c 0001423c 0001423c 0001423c     <B..<B..<B..<B..
1fff8fe4:	0001423c 0001423c ffffffff ffffffff     <B..<B..........
1fff8ff4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
1fff901c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

1fff9040 <_impure_data>:
1fff9040:	00000000 1fffd62c 1fffd694 1fffd6fc     ....,...........
	...
1fff90d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
1fff90e8:	0005deec 0000000b 00000000 00000000     ................
	...

1fff9160 <_impure_ptr>:
1fff9160:	1fff9040                                @...

1fff9164 <__atexit_recursive_mutex>:
1fff9164:	1fffd76c                                l...
