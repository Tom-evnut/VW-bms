
C:\Users\tomde\AppData\Local\Temp\arduino\sketches\2F4993CF310F7332225332ABA4F32727/VWBMSV2.ino.elf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <_VectorsFlash>:
  timeout = 30000; //milliseconds before comms timeout;
  type = 1;
}

void BMSModule::clearmodule()
{
       0:	00 80 00 20 bd 01 00 00 d9 9e 00 00 95 9e 00 00     ... ............
  temperatures[1] = 0.0f;
  temperatures[2] = 0.0f;
  balstat = 0;
  exists = false;
  reset = false;
  moduleAddress = 0;
      10:	95 9e 00 00 95 9e 00 00 95 9e 00 00 95 9e 00 00     ................
  temperatures[2] = 0.0f;
      20:	95 9e 00 00 95 9e 00 00 95 9e 00 00 d9 9e 00 00     ................


int BMSModuleManager::seriescells()
{
  spack = 0;
  for (int y = 1; y < 63; y++)
      30:	d9 9e 00 00 95 9e 00 00 a1 93 00 00 a5 93 00 00     ................
  {
    if (modules[y].isExisting())
      40:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
  for (int y = 1; y < 63; y++)
      50:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
    {
      spack = spack + modules[y].getscells();
    }
  }
  return spack;
      60:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................

  Logger::console("");
  Logger::console("");
  Logger::console("");
  Logger::console("Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
                  getPackVoltage(), getAvgCellVolt(), getAvgTemperature());
      70:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
  Logger::console("Modules: %i  Cells: %i  Voltage: %fV   Avg Cell Voltage: %fV     Avg Temp: %fC ", numFoundModules, seriescells(),
      80:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
      90:	d5 79 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     .y..............
  Logger::console("");
  for (int y = 1; y < 63; y++)
      a0:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
      b0:	d9 9e 00 00 41 89 00 00 4d 89 00 00 51 89 00 00     ....A...M...Q...
  {
    if (modules[y].isExisting())
    {
      faults = modules[y].getFaults();
      c0:	5d 89 00 00 61 89 00 00 65 89 00 00 d9 9e 00 00     ]...a...e.......
      alerts = modules[y].getAlerts();
      COV = modules[y].getCOVCells();
      d0:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
      CUV = modules[y].getCUVCells();

      Logger::console("                               Module #%i", y);
      e0:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................

      Logger::console("  Voltage: %fV   (%fV-%fV)     Temperatures: (%fC-%fC)", modules[y].getModuleVoltage(),
      f0:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 fd ad 00 00     ................
                      modules[y].getLowCellV(), modules[y].getHighCellV(), modules[y].getLowTemp(), modules[y].getHighTemp());
     100:	d9 9e 00 00 25 b5 00 00 d9 9e 00 00 d9 9e 00 00     ....%...........
     110:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
      Logger::console("  Voltage: %fV   (%fV-%fV)     Temperatures: (%fC-%fC)", modules[y].getModuleVoltage(),
     120:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
     130:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
     140:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
     150:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
          Logger::console("    Internal registers inconsistent");
        }
      }
      if (alerts > 0)
      {
        Logger::console("  MODULE HAS ALERTS:");
     160:	d9 9e 00 00 29 b8 00 00 d9 9e 00 00 d9 9e 00 00     ....)...........
        }
        if (alerts & 2)
        {
          Logger::console("    Over temperature on TS2");
        }
        if (alerts & 4)
     170:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
        }
        if (alerts & 0x20)
        {
          Logger::console("    OTP EPROM Uncorrectable Error");
        }
        if (alerts & 0x40)
     180:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
  for (int y = 1; y < 63; y++)
     190:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
        Logger::console("  MODULE IS FAULTED:");
     1a0:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00 d9 9e 00 00     ................
        if (faults & 4)
     1b0:	d9 9e 00 00 d9 9e 00 00 d9 9e 00 00                 ............

000001bc <ResetHandler>:
        if (faults & 0x20)
     1bc:	4b57      	ldr	r3, [pc, #348]	; (31c <ResetHandler+0x160>)
      if (alerts > 0)
     1be:	f24c 5220 	movw	r2, #50464	; 0xc520
     1c2:	b510      	push	{r4, lr}
          Logger::console("    Internal registers inconsistent");
     1c4:	81da      	strh	r2, [r3, #14]
     1c6:	f64d 1228 	movw	r2, #55592	; 0xd928
      if (alerts > 0)
     1ca:	81da      	strh	r2, [r3, #14]
     1cc:	bf00      	nop
     1ce:	bf00      	nop
          Logger::console("    Test fault active");
     1d0:	f009 fe86 	bl	9ee0 <startup_early_hook>
     1d4:	4b52      	ldr	r3, [pc, #328]	; (320 <ResetHandler+0x164>)
     1d6:	f04f 6210 	mov.w	r2, #150994944	; 0x9000000
          Logger::console("    Power on reset has occurred");
     1da:	631a      	str	r2, [r3, #48]	; 0x30
     1dc:	4a51      	ldr	r2, [pc, #324]	; (324 <ResetHandler+0x168>)
     1de:	639a      	str	r2, [r3, #56]	; 0x38
          Logger::console("    CRC error in received packet");
     1e0:	4a51      	ldr	r2, [pc, #324]	; (328 <ResetHandler+0x16c>)
     1e2:	63da      	str	r2, [r3, #60]	; 0x3c
     1e4:	4a51      	ldr	r2, [pc, #324]	; (32c <ResetHandler+0x170>)
     1e6:	6913      	ldr	r3, [r2, #16]
        {
          Logger::console("    GROUP3 Regs Invalid");
     1e8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
     1ec:	d103      	bne.n	1f6 <ResetHandler+0x3a>
        }
        if (alerts & 0x80)
     1ee:	6153      	str	r3, [r2, #20]
     1f0:	f44f 53a8 	mov.w	r3, #5376	; 0x1500
        {
          Logger::console("    Address not registered");
     1f4:	6113      	str	r3, [r2, #16]
     1f6:	4b4e      	ldr	r3, [pc, #312]	; (330 <ResetHandler+0x174>)
     1f8:	789a      	ldrb	r2, [r3, #2]
          Logger::console("    OTP EPROM Uncorrectable Error");
     1fa:	0711      	lsls	r1, r2, #28
     1fc:	d503      	bpl.n	206 <ResetHandler+0x4a>
     1fe:	789a      	ldrb	r2, [r3, #2]
     200:	f042 0208 	orr.w	r2, r2, #8
          Logger::console("    Test Alert");
     204:	709a      	strb	r2, [r3, #2]
     206:	4b4b      	ldr	r3, [pc, #300]	; (334 <ResetHandler+0x178>)
     208:	484b      	ldr	r0, [pc, #300]	; (338 <ResetHandler+0x17c>)
          Logger::console("    Thermal shutdown active");
     20a:	222a      	movs	r2, #42	; 0x2a
     20c:	701a      	strb	r2, [r3, #0]
     20e:	4b4b      	ldr	r3, [pc, #300]	; (33c <ResetHandler+0x180>)
     210:	1cda      	adds	r2, r3, #3
          Logger::console("    Sleep mode active");
     212:	1a12      	subs	r2, r2, r0
     214:	1ec1      	subs	r1, r0, #3
     216:	f022 0203 	bic.w	r2, r2, #3
          Logger::console("    Over temperature on TS2");
     21a:	4299      	cmp	r1, r3
     21c:	bf88      	it	hi
     21e:	2200      	movhi	r2, #0
     220:	4947      	ldr	r1, [pc, #284]	; (340 <ResetHandler+0x184>)
          Logger::console("    Over temperature on TS1");
     222:	f009 fd63 	bl	9cec <memcpy>
     226:	4b47      	ldr	r3, [pc, #284]	; (344 <ResetHandler+0x188>)
     228:	4847      	ldr	r0, [pc, #284]	; (348 <ResetHandler+0x18c>)
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     22a:	1cda      	adds	r2, r3, #3
     22c:	1a12      	subs	r2, r2, r0
     22e:	1ec1      	subs	r1, r0, #3
     230:	f022 0203 	bic.w	r2, r2, #3
     234:	4299      	cmp	r1, r3
            if (CUV & (1 << i))
     236:	bf88      	it	hi
     238:	2200      	movhi	r2, #0
     23a:	2100      	movs	r1, #0
     23c:	f00d ff1e 	bl	e07c <memset>
          for (int i = 0; i < 12; i++)
     240:	4942      	ldr	r1, [pc, #264]	; (34c <ResetHandler+0x190>)
     242:	4843      	ldr	r0, [pc, #268]	; (350 <ResetHandler+0x194>)
            if (CUV & (1 << i))
     244:	f44f 72de 	mov.w	r2, #444	; 0x1bc
     248:	f009 fd50 	bl	9cec <memcpy>
     24c:	4b41      	ldr	r3, [pc, #260]	; (354 <ResetHandler+0x198>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
     24e:	4a42      	ldr	r2, [pc, #264]	; (358 <ResetHandler+0x19c>)
     250:	2180      	movs	r1, #128	; 0x80
     252:	f803 1b01 	strb.w	r1, [r3], #1
          for (int i = 0; i < 12; i++)
     256:	4293      	cmp	r3, r2
     258:	d1fb      	bne.n	252 <ResetHandler+0x96>
     25a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     25e:	4a3c      	ldr	r2, [pc, #240]	; (350 <ResetHandler+0x194>)
     260:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
          SERIALCONSOLE.println();
     264:	4b3d      	ldr	r3, [pc, #244]	; (35c <ResetHandler+0x1a0>)
     266:	228a      	movs	r2, #138	; 0x8a
     268:	701a      	strb	r2, [r3, #0]
     26a:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
     26e:	2224      	movs	r2, #36	; 0x24
     270:	705a      	strb	r2, [r3, #1]
     272:	22a0      	movs	r2, #160	; 0xa0
     274:	701a      	strb	r2, [r3, #0]
     276:	799a      	ldrb	r2, [r3, #6]
            if (COV & (1 << i))
     278:	0792      	lsls	r2, r2, #30
     27a:	d5fc      	bpl.n	276 <ResetHandler+0xba>
     27c:	799a      	ldrb	r2, [r3, #6]
     27e:	06d4      	lsls	r4, r2, #27
          for (int i = 0; i < 12; i++)
     280:	d4fc      	bmi.n	27c <ResetHandler+0xc0>
     282:	4b37      	ldr	r3, [pc, #220]	; (360 <ResetHandler+0x1a4>)
     284:	799a      	ldrb	r2, [r3, #6]
            if (COV & (1 << i))
     286:	f002 020c 	and.w	r2, r2, #12
     28a:	2a08      	cmp	r2, #8
     28c:	d1fa      	bne.n	284 <ResetHandler+0xc8>
     28e:	2203      	movs	r2, #3
     290:	711a      	strb	r2, [r3, #4]
     292:	2240      	movs	r2, #64	; 0x40
     294:	715a      	strb	r2, [r3, #5]
     296:	799a      	ldrb	r2, [r3, #6]
          for (int i = 0; i < 12; i++)
     298:	0690      	lsls	r0, r2, #26
     29a:	d5fc      	bpl.n	296 <ResetHandler+0xda>
     29c:	4a30      	ldr	r2, [pc, #192]	; (360 <ResetHandler+0x1a4>)
     29e:	7993      	ldrb	r3, [r2, #6]
     2a0:	0659      	lsls	r1, r3, #25
     2a2:	d5fc      	bpl.n	29e <ResetHandler+0xe2>
     2a4:	4b1e      	ldr	r3, [pc, #120]	; (320 <ResetHandler+0x164>)
          SERIALCONSOLE.println();
     2a6:	492f      	ldr	r1, [pc, #188]	; (364 <ResetHandler+0x1a8>)
     2a8:	6459      	str	r1, [r3, #68]	; 0x44
     2aa:	2102      	movs	r1, #2
     2ac:	6499      	str	r1, [r3, #72]	; 0x48
     2ae:	2120      	movs	r1, #32
     2b0:	7011      	strb	r1, [r2, #0]
     2b2:	7991      	ldrb	r1, [r2, #6]
     2b4:	f001 010c 	and.w	r1, r1, #12
     2b8:	290c      	cmp	r1, #12
     2ba:	d1fa      	bne.n	2b2 <ResetHandler+0xf6>
     2bc:	4a2a      	ldr	r2, [pc, #168]	; (368 <ResetHandler+0x1ac>)
     2be:	605a      	str	r2, [r3, #4]
     2c0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
     2c4:	4a29      	ldr	r2, [pc, #164]	; (36c <ResetHandler+0x1b0>)
     2c6:	615a      	str	r2, [r3, #20]
     2c8:	2200      	movs	r2, #0
     2ca:	619a      	str	r2, [r3, #24]
     2cc:	2207      	movs	r2, #7
     2ce:	611a      	str	r2, [r3, #16]
     2d0:	4a27      	ldr	r2, [pc, #156]	; (370 <ResetHandler+0x1b4>)
     2d2:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
     2d6:	b662      	cpsie	i
     2d8:	f009 ff2c 	bl	a134 <_init_Teensyduino_internal_>
     2dc:	4b13      	ldr	r3, [pc, #76]	; (32c <ResetHandler+0x170>)
     2de:	695b      	ldr	r3, [r3, #20]
     2e0:	07da      	lsls	r2, r3, #31
     2e2:	d505      	bpl.n	2f0 <ResetHandler+0x134>
     2e4:	4823      	ldr	r0, [pc, #140]	; (374 <ResetHandler+0x1b8>)
     2e6:	f009 ff19 	bl	a11c <rtc_set>
     2ea:	4b23      	ldr	r3, [pc, #140]	; (378 <ResetHandler+0x1bc>)
     2ec:	4a23      	ldr	r2, [pc, #140]	; (37c <ResetHandler+0x1c0>)
     2ee:	61da      	str	r2, [r3, #28]
     2f0:	4b23      	ldr	r3, [pc, #140]	; (380 <ResetHandler+0x1c4>)
     2f2:	781b      	ldrb	r3, [r3, #0]
     2f4:	065b      	lsls	r3, r3, #25
     2f6:	d509      	bpl.n	30c <ResetHandler+0x150>
     2f8:	4c1f      	ldr	r4, [pc, #124]	; (378 <ResetHandler+0x1bc>)
     2fa:	4b20      	ldr	r3, [pc, #128]	; (37c <ResetHandler+0x1c0>)
     2fc:	69e2      	ldr	r2, [r4, #28]
     2fe:	429a      	cmp	r2, r3
     300:	d104      	bne.n	30c <ResetHandler+0x150>
     302:	481c      	ldr	r0, [pc, #112]	; (374 <ResetHandler+0x1b8>)
     304:	f009 ff0a 	bl	a11c <rtc_set>
		#if ARDUINO >= 10600
		rtc_set((uint32_t)&__rtc_localtime);
		#else
		rtc_set(TIME_T);
		#endif
		*(uint32_t *)0x4003E01C = 0;
     308:	2300      	movs	r3, #0
     30a:	61e3      	str	r3, [r4, #28]
	}
#endif

	startup_late_hook();
     30c:	f009 fdee 	bl	9eec <startup_late_hook>
	__libc_init_array();
     310:	f00d ffaa 	bl	e268 <__libc_init_array>

	main();
     314:	f009 fce2 	bl	9cdc <main>
	
	while (1) ;
     318:	e7fe      	b.n	318 <ResetHandler+0x15c>
     31a:	bf00      	nop
     31c:	40052000 	.word	0x40052000
     320:	40048000 	.word	0x40048000
     324:	00043f82 	.word	0x00043f82
     328:	2b000001 	.word	0x2b000001
     32c:	4003d000 	.word	0x4003d000
     330:	4007d000 	.word	0x4007d000
     334:	4007e000 	.word	0x4007e000
     338:	1fff8720 	.word	0x1fff8720
     33c:	1fff9168 	.word	0x1fff9168
     340:	00015a7c 	.word	0x00015a7c
     344:	1fffd90c 	.word	0x1fffd90c
     348:	1fff9168 	.word	0x1fff9168
     34c:	00000000 	.word	0x00000000
     350:	1fff8200 	.word	0x1fff8200
     354:	e000e400 	.word	0xe000e400
     358:	e000e45f 	.word	0xe000e45f
     35c:	40065000 	.word	0x40065000
     360:	40064000 	.word	0x40064000
     364:	01030000 	.word	0x01030000
     368:	000510c0 	.word	0x000510c0
     36c:	000176ff 	.word	0x000176ff
     370:	20200000 	.word	0x20200000
     374:	645d663a 	.word	0x645d663a
     378:	4003e000 	.word	0x4003e000
     37c:	5a94c3a5 	.word	0x5a94c3a5
     380:	4007f000 	.word	0x4007f000
     384:	ffffffff 	.word	0xffffffff
     388:	ffffffff 	.word	0xffffffff
     38c:	ffffffff 	.word	0xffffffff
     390:	ffffffff 	.word	0xffffffff
     394:	ffffffff 	.word	0xffffffff
     398:	ffffffff 	.word	0xffffffff
     39c:	ffffffff 	.word	0xffffffff
     3a0:	ffffffff 	.word	0xffffffff
     3a4:	ffffffff 	.word	0xffffffff
     3a8:	ffffffff 	.word	0xffffffff
     3ac:	ffffffff 	.word	0xffffffff
     3b0:	ffffffff 	.word	0xffffffff
     3b4:	ffffffff 	.word	0xffffffff
     3b8:	ffffffff 	.word	0xffffffff
     3bc:	ffffffff 	.word	0xffffffff
     3c0:	ffffffff 	.word	0xffffffff
     3c4:	ffffffff 	.word	0xffffffff
     3c8:	ffffffff 	.word	0xffffffff
     3cc:	ffffffff 	.word	0xffffffff
     3d0:	ffffffff 	.word	0xffffffff
     3d4:	ffffffff 	.word	0xffffffff
     3d8:	ffffffff 	.word	0xffffffff
     3dc:	ffffffff 	.word	0xffffffff
     3e0:	ffffffff 	.word	0xffffffff
     3e4:	ffffffff 	.word	0xffffffff
     3e8:	ffffffff 	.word	0xffffffff
     3ec:	ffffffff 	.word	0xffffffff
     3f0:	ffffffff 	.word	0xffffffff
     3f4:	ffffffff 	.word	0xffffffff
     3f8:	ffffffff 	.word	0xffffffff
     3fc:	ffffffff 	.word	0xffffffff

00000400 <flashconfigbytes>:
     400:	ffffffff ffffffff ffffffff fffff9de     ................

00000410 <register_tm_clones>:
     410:	4805      	ldr	r0, [pc, #20]	; (428 <register_tm_clones+0x18>)
     412:	4b06      	ldr	r3, [pc, #24]	; (42c <register_tm_clones+0x1c>)
     414:	1a1b      	subs	r3, r3, r0
     416:	0fd9      	lsrs	r1, r3, #31
     418:	eb01 01a3 	add.w	r1, r1, r3, asr #2
     41c:	1049      	asrs	r1, r1, #1
     41e:	d002      	beq.n	426 <register_tm_clones+0x16>
     420:	4b03      	ldr	r3, [pc, #12]	; (430 <register_tm_clones+0x20>)
     422:	b103      	cbz	r3, 426 <register_tm_clones+0x16>
     424:	4718      	bx	r3
     426:	4770      	bx	lr
     428:	1fff9168 	.word	0x1fff9168
     42c:	1fff9168 	.word	0x1fff9168
     430:	00000000 	.word	0x00000000

00000434 <frame_dummy>:
     434:	b508      	push	{r3, lr}
     436:	4b05      	ldr	r3, [pc, #20]	; (44c <frame_dummy+0x18>)
     438:	b11b      	cbz	r3, 442 <frame_dummy+0xe>
     43a:	4905      	ldr	r1, [pc, #20]	; (450 <frame_dummy+0x1c>)
     43c:	4805      	ldr	r0, [pc, #20]	; (454 <frame_dummy+0x20>)
     43e:	f3af 8000 	nop.w
     442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     446:	f7ff bfe3 	b.w	410 <register_tm_clones>
     44a:	bf00      	nop
     44c:	00000000 	.word	0x00000000
     450:	1fff9168 	.word	0x1fff9168
     454:	00015a7c 	.word	0x00015a7c

00000458 <BMSModule::BMSModule()>:
BMSModule::BMSModule()
     458:	b510      	push	{r4, lr}
    cellVolt[i] = 0.0f;
     45a:	2234      	movs	r2, #52	; 0x34
     45c:	2100      	movs	r1, #0
BMSModule::BMSModule()
     45e:	4604      	mov	r4, r0
    cellVolt[i] = 0.0f;
     460:	f00d fe0c 	bl	e07c <memset>
    lowestCellVolt[i] = 5.0f;
     464:	4918      	ldr	r1, [pc, #96]	; (4c8 <BMSModule::BMSModule()+0x70>)
     466:	f104 0330 	add.w	r3, r4, #48	; 0x30
     46a:	f104 0264 	add.w	r2, r4, #100	; 0x64
     46e:	f843 1f04 	str.w	r1, [r3, #4]!
  for (int i = 0; i < 13; i++)
     472:	429a      	cmp	r2, r3
     474:	d1fb      	bne.n	46e <BMSModule::BMSModule()+0x16>
    highestCellVolt[i] = 0.0f;
     476:	2234      	movs	r2, #52	; 0x34
     478:	2100      	movs	r1, #0
     47a:	f104 0068 	add.w	r0, r4, #104	; 0x68
     47e:	f00d fdfd 	bl	e07c <memset>
  moduleVolt = 0.0f;
     482:	2300      	movs	r3, #0
  balstat = 0;
     484:	2200      	movs	r2, #0
  highestTemperature = -100.0f;
     486:	4811      	ldr	r0, [pc, #68]	; (4cc <BMSModule::BMSModule()+0x74>)
  lowestTemperature = 200.0f;
     488:	4911      	ldr	r1, [pc, #68]	; (4d0 <BMSModule::BMSModule()+0x78>)
  moduleVolt = 0.0f;
     48a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  temperatures[0] = 0.0f;
     48e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
  temperatures[1] = 0.0f;
     492:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
  temperatures[2] = 0.0f;
     496:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
  highestTemperature = -100.0f;
     49a:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
  highestModuleVolt = 0.0f;
     49e:	f8c4 30b8 	str.w	r3, [r4, #184]	; 0xb8
  timeout = 30000; //milliseconds before comms timeout;
     4a2:	f247 5030 	movw	r0, #30000	; 0x7530
  type = 1;
     4a6:	2301      	movs	r3, #1
  moduleAddress = 0;
     4a8:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
  timeout = 30000; //milliseconds before comms timeout;
     4ac:	f8c4 00f0 	str.w	r0, [r4, #240]	; 0xf0
  lowestTemperature = 200.0f;
     4b0:	f8c4 10ac 	str.w	r1, [r4, #172]	; 0xac
  lowestModuleVolt = 200.0f;
     4b4:	f8c4 10b4 	str.w	r1, [r4, #180]	; 0xb4
  balstat = 0;
     4b8:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
  exists = false;
     4bc:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
  type = 1;
     4c0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
}
     4c4:	4620      	mov	r0, r4
     4c6:	bd10      	pop	{r4, pc}
     4c8:	40a00000 	.word	0x40a00000
     4cc:	c2c80000 	.word	0xc2c80000
     4d0:	43480000 	.word	0x43480000

000004d4 <BMSModule::decodetemp(CAN_message_t&, int)>:
}

void BMSModule::decodetemp(CAN_message_t &msg, int y)
{
  if (y==1) //0x00 in byte 2 means its an MEB message
     4d4:	2a01      	cmp	r2, #1
{
     4d6:	b538      	push	{r3, r4, r5, lr}
     4d8:	4605      	mov	r5, r0
     4da:	460c      	mov	r4, r1
  if (y==1) //0x00 in byte 2 means its an MEB message
     4dc:	d014      	beq.n	508 <BMSModule::decodetemp(CAN_message_t&, int)+0x34>
      }
    }
  }
  else
  {
    type = 2;
     4de:	2302      	movs	r3, #2
     4e0:	f8c0 30f4 	str.w	r3, [r0, #244]	; 0xf4
    temperatures[0] = ((uint16_t(((msg.buf[5] & 0x0F) << 4) | ((msg.buf[4] & 0xF0) >> 4))) * 0.5) - 40; //MEB Bits 36-44
     4e4:	7b4b      	ldrb	r3, [r1, #13]
     4e6:	7b08      	ldrb	r0, [r1, #12]
     4e8:	011b      	lsls	r3, r3, #4
     4ea:	b2db      	uxtb	r3, r3
     4ec:	ea43 1010 	orr.w	r0, r3, r0, lsr #4
     4f0:	f00c fcee 	bl	ced0 <__aeabi_i2f>
     4f4:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     4f8:	f00c fd3e 	bl	cf78 <__aeabi_fmul>
     4fc:	492c      	ldr	r1, [pc, #176]	; (5b0 <BMSModule::decodetemp(CAN_message_t&, int)+0xdc>)
     4fe:	f00c fc31 	bl	cd64 <__aeabi_fsub>
     502:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
  }
}
     506:	bd38      	pop	{r3, r4, r5, pc}
    type = 1;
     508:	f8c0 20f4 	str.w	r2, [r0, #244]	; 0xf4
    if (msg.buf[7] == 0xFD)
     50c:	7bcb      	ldrb	r3, [r1, #15]
     50e:	2bfd      	cmp	r3, #253	; 0xfd
     510:	d049      	beq.n	5a6 <BMSModule::decodetemp(CAN_message_t&, int)+0xd2>
      if (msg.buf[0] < 0xDF)
     512:	7a08      	ldrb	r0, [r1, #8]
     514:	28de      	cmp	r0, #222	; 0xde
     516:	d928      	bls.n	56a <BMSModule::decodetemp(CAN_message_t&, int)+0x96>
        temperatures[0] = (msg.buf[3] * 0.5) - 43;
     518:	7ac8      	ldrb	r0, [r1, #11]
     51a:	f00c fcd9 	bl	ced0 <__aeabi_i2f>
     51e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     522:	f00c fd29 	bl	cf78 <__aeabi_fmul>
     526:	4923      	ldr	r1, [pc, #140]	; (5b4 <BMSModule::decodetemp(CAN_message_t&, int)+0xe0>)
     528:	f00c fc1c 	bl	cd64 <__aeabi_fsub>
     52c:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
      if (msg.buf[4] < 0xF0)
     530:	7b20      	ldrb	r0, [r4, #12]
     532:	28ef      	cmp	r0, #239	; 0xef
     534:	d82d      	bhi.n	592 <BMSModule::decodetemp(CAN_message_t&, int)+0xbe>
        temperatures[1] = (msg.buf[4] * 0.5) - 43;
     536:	f00c fccb 	bl	ced0 <__aeabi_i2f>
     53a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     53e:	f00c fd1b 	bl	cf78 <__aeabi_fmul>
     542:	491c      	ldr	r1, [pc, #112]	; (5b4 <BMSModule::decodetemp(CAN_message_t&, int)+0xe0>)
     544:	f00c fc0e 	bl	cd64 <__aeabi_fsub>
     548:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
      if (msg.buf[5] < 0xF0)
     54c:	7b60      	ldrb	r0, [r4, #13]
     54e:	28ef      	cmp	r0, #239	; 0xef
     550:	d825      	bhi.n	59e <BMSModule::decodetemp(CAN_message_t&, int)+0xca>
        temperatures[2] = (msg.buf[5] * 0.5) - 43;
     552:	f00c fcbd 	bl	ced0 <__aeabi_i2f>
     556:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     55a:	f00c fd0d 	bl	cf78 <__aeabi_fmul>
     55e:	4915      	ldr	r1, [pc, #84]	; (5b4 <BMSModule::decodetemp(CAN_message_t&, int)+0xe0>)
     560:	f00c fc00 	bl	cd64 <__aeabi_fsub>
     564:	f8c5 00a8 	str.w	r0, [r5, #168]	; 0xa8
}
     568:	bd38      	pop	{r3, r4, r5, pc}
        temperatures[0] = (msg.buf[0] * 0.5) - 43;
     56a:	f00c fcb1 	bl	ced0 <__aeabi_i2f>
     56e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     572:	f00c fd01 	bl	cf78 <__aeabi_fmul>
     576:	490f      	ldr	r1, [pc, #60]	; (5b4 <BMSModule::decodetemp(CAN_message_t&, int)+0xe0>)
     578:	f00c fbf4 	bl	cd64 <__aeabi_fsub>
     57c:	f8c5 00a0 	str.w	r0, [r5, #160]	; 0xa0
        balstat = msg.buf[2] + (msg.buf[3] << 8);
     580:	7ae2      	ldrb	r2, [r4, #11]
     582:	7aa3      	ldrb	r3, [r4, #10]
     584:	eb03 2302 	add.w	r3, r3, r2, lsl #8
     588:	f8c5 30e4 	str.w	r3, [r5, #228]	; 0xe4
      if (msg.buf[4] < 0xF0)
     58c:	7b20      	ldrb	r0, [r4, #12]
     58e:	28ef      	cmp	r0, #239	; 0xef
     590:	d9d1      	bls.n	536 <BMSModule::decodetemp(CAN_message_t&, int)+0x62>
        temperatures[1] = 0;
     592:	2000      	movs	r0, #0
     594:	f8c5 00a4 	str.w	r0, [r5, #164]	; 0xa4
      if (msg.buf[5] < 0xF0)
     598:	7b60      	ldrb	r0, [r4, #13]
     59a:	28ef      	cmp	r0, #239	; 0xef
     59c:	d9d9      	bls.n	552 <BMSModule::decodetemp(CAN_message_t&, int)+0x7e>
        temperatures[2] = 0;
     59e:	2300      	movs	r3, #0
     5a0:	f8c5 30a8 	str.w	r3, [r5, #168]	; 0xa8
}
     5a4:	bd38      	pop	{r3, r4, r5, pc}
      if (msg.buf[2] != 0xFD)
     5a6:	7a88      	ldrb	r0, [r1, #10]
     5a8:	28fd      	cmp	r0, #253	; 0xfd
     5aa:	d1a1      	bne.n	4f0 <BMSModule::decodetemp(CAN_message_t&, int)+0x1c>
}
     5ac:	bd38      	pop	{r3, r4, r5, pc}
     5ae:	bf00      	nop
     5b0:	42200000 	.word	0x42200000
     5b4:	422c0000 	.word	0x422c0000

000005b8 <BMSModule::getFaults()>:
*/

uint8_t BMSModule::getFaults()
{
  return faults;
}
     5b8:	f890 00cc 	ldrb.w	r0, [r0, #204]	; 0xcc
     5bc:	4770      	bx	lr
     5be:	bf00      	nop

000005c0 <BMSModule::getAlerts()>:

uint8_t BMSModule::getAlerts()
{
  return alerts;
}
     5c0:	f890 00c8 	ldrb.w	r0, [r0, #200]	; 0xc8
     5c4:	4770      	bx	lr
     5c6:	bf00      	nop

000005c8 <BMSModule::getCOVCells()>:

uint8_t BMSModule::getCOVCells()
{
  return COVFaults;
}
     5c8:	f890 00d0 	ldrb.w	r0, [r0, #208]	; 0xd0
     5cc:	4770      	bx	lr
     5ce:	bf00      	nop

000005d0 <BMSModule::getCUVCells()>:

uint8_t BMSModule::getCUVCells()
{
  return CUVFaults;
}
     5d0:	f890 00d4 	ldrb.w	r0, [r0, #212]	; 0xd4
     5d4:	4770      	bx	lr
     5d6:	bf00      	nop

000005d8 <BMSModule::getCellVoltage(int)>:

float BMSModule::getCellVoltage(int cell)
{
  if (cell < 0 || cell > 13) return 0.0f;
     5d8:	290d      	cmp	r1, #13
  return cellVolt[cell];
     5da:	bf94      	ite	ls
     5dc:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
  if (cell < 0 || cell > 13) return 0.0f;
     5e0:	2000      	movhi	r0, #0
}
     5e2:	4770      	bx	lr

000005e4 <BMSModule::getLowCellV()>:

float BMSModule::getLowCellV()
{
     5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float lowVal = 10.0f;
     5e8:	4e0c      	ldr	r6, [pc, #48]	; (61c <BMSModule::getLowCellV()+0x38>)
{
     5ea:	4680      	mov	r8, r0
     5ec:	1f05      	subs	r5, r0, #4
     5ee:	f100 0730 	add.w	r7, r0, #48	; 0x30
  for (int i = 0; i < 13; i++) if (cellVolt[i] < lowVal && cellVolt[i] > IgnoreCell) lowVal = cellVolt[i];
     5f2:	f855 4f04 	ldr.w	r4, [r5, #4]!
     5f6:	4631      	mov	r1, r6
     5f8:	4620      	mov	r0, r4
     5fa:	f00c fe5b 	bl	d2b4 <__aeabi_fcmplt>
     5fe:	4603      	mov	r3, r0
     600:	4620      	mov	r0, r4
     602:	b12b      	cbz	r3, 610 <BMSModule::getLowCellV()+0x2c>
     604:	f8d8 10bc 	ldr.w	r1, [r8, #188]	; 0xbc
     608:	f00c fe72 	bl	d2f0 <__aeabi_fcmpgt>
     60c:	b100      	cbz	r0, 610 <BMSModule::getLowCellV()+0x2c>
     60e:	4626      	mov	r6, r4
     610:	42bd      	cmp	r5, r7
     612:	d1ee      	bne.n	5f2 <BMSModule::getLowCellV()+0xe>
  return lowVal;
}
     614:	4630      	mov	r0, r6
     616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     61a:	bf00      	nop
     61c:	41200000 	.word	0x41200000

00000620 <BMSModule::getHighCellV()>:

float BMSModule::getHighCellV()
{
     620:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  float hiVal = 0.0f;
  for (int i = 0; i < 13; i++)
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     624:	f8d0 80bc 	ldr.w	r8, [r0, #188]	; 0xbc
     628:	4f0f      	ldr	r7, [pc, #60]	; (668 <BMSModule::getHighCellV()+0x48>)
  float hiVal = 0.0f;
     62a:	f04f 0900 	mov.w	r9, #0
     62e:	1f05      	subs	r5, r0, #4
     630:	f100 0630 	add.w	r6, r0, #48	; 0x30
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     634:	f855 4f04 	ldr.w	r4, [r5, #4]!
     638:	4641      	mov	r1, r8
     63a:	4620      	mov	r0, r4
     63c:	f00c fe58 	bl	d2f0 <__aeabi_fcmpgt>
     640:	4603      	mov	r3, r0
     642:	4639      	mov	r1, r7
     644:	4620      	mov	r0, r4
     646:	b14b      	cbz	r3, 65c <BMSModule::getHighCellV()+0x3c>
     648:	f00c fe34 	bl	d2b4 <__aeabi_fcmplt>
     64c:	4603      	mov	r3, r0
    {
      if (cellVolt[i] > hiVal) hiVal = cellVolt[i];
     64e:	4649      	mov	r1, r9
     650:	4620      	mov	r0, r4
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     652:	b11b      	cbz	r3, 65c <BMSModule::getHighCellV()+0x3c>
      if (cellVolt[i] > hiVal) hiVal = cellVolt[i];
     654:	f00c fe4c 	bl	d2f0 <__aeabi_fcmpgt>
     658:	b100      	cbz	r0, 65c <BMSModule::getHighCellV()+0x3c>
     65a:	46a1      	mov	r9, r4
  for (int i = 0; i < 13; i++)
     65c:	42b5      	cmp	r5, r6
     65e:	d1e9      	bne.n	634 <BMSModule::getHighCellV()+0x14>
    }
  return hiVal;
}
     660:	4648      	mov	r0, r9
     662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     666:	bf00      	nop
     668:	40a00000 	.word	0x40a00000

0000066c <BMSModule::getAverageV()>:

float BMSModule::getAverageV()
{
     66c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int x = 0;
  float avgVal = 0.0f;
  for (int i = 0; i < 13; i++)
  {
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     670:	f8d0 90bc 	ldr.w	r9, [r0, #188]	; 0xbc
     674:	4f17      	ldr	r7, [pc, #92]	; (6d4 <BMSModule::getAverageV()+0x68>)
{
     676:	4683      	mov	fp, r0
  float avgVal = 0.0f;
     678:	2600      	movs	r6, #0
     67a:	1f05      	subs	r5, r0, #4
     67c:	f100 0830 	add.w	r8, r0, #48	; 0x30
  int x = 0;
     680:	f04f 0a00 	mov.w	sl, #0
    if (cellVolt[i] > IgnoreCell && cellVolt[i] < 5.0)
     684:	f855 4f04 	ldr.w	r4, [r5, #4]!
     688:	4649      	mov	r1, r9
     68a:	4620      	mov	r0, r4
     68c:	f00c fe30 	bl	d2f0 <__aeabi_fcmpgt>
     690:	4603      	mov	r3, r0
     692:	4639      	mov	r1, r7
     694:	4620      	mov	r0, r4
     696:	b14b      	cbz	r3, 6ac <BMSModule::getAverageV()+0x40>
     698:	f00c fe0c 	bl	d2b4 <__aeabi_fcmplt>
     69c:	b130      	cbz	r0, 6ac <BMSModule::getAverageV()+0x40>
    {
      x++;
      avgVal += cellVolt[i];
     69e:	4630      	mov	r0, r6
     6a0:	4621      	mov	r1, r4
     6a2:	f00c fb61 	bl	cd68 <__addsf3>
      x++;
     6a6:	f10a 0a01 	add.w	sl, sl, #1
      avgVal += cellVolt[i];
     6aa:	4606      	mov	r6, r0
  for (int i = 0; i < 13; i++)
     6ac:	4545      	cmp	r5, r8
     6ae:	d1e9      	bne.n	684 <BMSModule::getAverageV()+0x18>
    }
  }

  scells = x;
     6b0:	f8cb a0e0 	str.w	sl, [fp, #224]	; 0xe0
  avgVal /= x;

  if (scells == 0)
     6b4:	f1ba 0f00 	cmp.w	sl, #0
     6b8:	d008      	beq.n	6cc <BMSModule::getAverageV()+0x60>
  avgVal /= x;
     6ba:	4650      	mov	r0, sl
     6bc:	f00c fc08 	bl	ced0 <__aeabi_i2f>
     6c0:	4601      	mov	r1, r0
     6c2:	4630      	mov	r0, r6
     6c4:	f00c fd0c 	bl	d0e0 <__aeabi_fdiv>
  {
    avgVal = 0;
  }

  return avgVal;
}
     6c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    avgVal = 0;
     6cc:	2000      	movs	r0, #0
}
     6ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     6d2:	bf00      	nop
     6d4:	40a00000 	.word	0x40a00000

000006d8 <BMSModule::getscells()>:

int BMSModule::getscells()
{
  return scells;
}
     6d8:	f8d0 00e0 	ldr.w	r0, [r0, #224]	; 0xe0
     6dc:	4770      	bx	lr
     6de:	bf00      	nop

000006e0 <BMSModule::getHighTemp()>:
    return temperatures[0];
  }
}

float BMSModule::getHighTemp()
{
     6e0:	b538      	push	{r3, r4, r5, lr}
  if (type == 1)
     6e2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
     6e6:	2b01      	cmp	r3, #1
     6e8:	d10e      	bne.n	708 <BMSModule::getHighTemp()+0x28>
  {
    if (sensor == 0)
     6ea:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
     6ee:	b97b      	cbnz	r3, 710 <BMSModule::getHighTemp()+0x30>
     6f0:	f8d0 40a4 	ldr.w	r4, [r0, #164]	; 0xa4
    {
      return (temperatures[0] < temperatures[1]) ? temperatures[1] : temperatures[0];
     6f4:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
     6f8:	4621      	mov	r1, r4
     6fa:	4628      	mov	r0, r5
     6fc:	f00c fdda 	bl	d2b4 <__aeabi_fcmplt>
     700:	b920      	cbnz	r0, 70c <BMSModule::getHighTemp()+0x2c>
     702:	462c      	mov	r4, r5
  }
  else
  {
    return temperatures[0];
  }
}
     704:	4620      	mov	r0, r4
     706:	bd38      	pop	{r3, r4, r5, pc}
    return temperatures[0];
     708:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
}
     70c:	4620      	mov	r0, r4
     70e:	bd38      	pop	{r3, r4, r5, pc}
      return temperatures[sensor - 1];
     710:	3327      	adds	r3, #39	; 0x27
     712:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
}
     716:	4620      	mov	r0, r4
     718:	bd38      	pop	{r3, r4, r5, pc}
     71a:	bf00      	nop

0000071c <BMSModule::getAvgTemp()>:

float BMSModule::getAvgTemp()
{
  if (type == 1)
     71c:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
     720:	2b01      	cmp	r3, #1
{
     722:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     726:	4604      	mov	r4, r0
  if (type == 1)
     728:	d147      	bne.n	7ba <BMSModule::getAvgTemp()+0x9e>
  {
    if (sensor == 0)
     72a:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
     72e:	2b00      	cmp	r3, #0
     730:	d148      	bne.n	7c4 <BMSModule::getAvgTemp()+0xa8>
    {
      if ((temperatures[0] + temperatures[1] + temperatures[2]) / 3.0f > 0.5)
     732:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
     736:	f8d0 60a4 	ldr.w	r6, [r0, #164]	; 0xa4
     73a:	4628      	mov	r0, r5
     73c:	4631      	mov	r1, r6
     73e:	f00c fb13 	bl	cd68 <__addsf3>
     742:	f8d4 70a8 	ldr.w	r7, [r4, #168]	; 0xa8
     746:	4639      	mov	r1, r7
     748:	4680      	mov	r8, r0
     74a:	f00c fb0d 	bl	cd68 <__addsf3>
     74e:	495f      	ldr	r1, [pc, #380]	; (8cc <BMSModule::getAvgTemp()+0x1b0>)
     750:	f00c fcc6 	bl	d0e0 <__aeabi_fdiv>
      {
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     754:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
      if ((temperatures[0] + temperatures[1] + temperatures[2]) / 3.0f > 0.5)
     758:	4604      	mov	r4, r0
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     75a:	4628      	mov	r0, r5
     75c:	f00c fdc8 	bl	d2f0 <__aeabi_fcmpgt>
     760:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     764:	2800      	cmp	r0, #0
     766:	d133      	bne.n	7d0 <BMSModule::getAvgTemp()+0xb4>
        {
          return (temperatures[0] + temperatures[1] + temperatures[2]) / 3.0f;
        }
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     768:	4628      	mov	r0, r5
     76a:	f00c fda3 	bl	d2b4 <__aeabi_fcmplt>
     76e:	b130      	cbz	r0, 77e <BMSModule::getAvgTemp()+0x62>
     770:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     774:	4630      	mov	r0, r6
     776:	f00c fdbb 	bl	d2f0 <__aeabi_fcmpgt>
     77a:	2800      	cmp	r0, #0
     77c:	d172      	bne.n	864 <BMSModule::getAvgTemp()+0x148>
        {
          return (temperatures[1] + temperatures[2]) / 2.0f;
        }
        if (temperatures[0] > 0.5 && temperatures[1] < 0.5 && temperatures[2] > 0.5)
     77e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     782:	4628      	mov	r0, r5
     784:	f00c fdb4 	bl	d2f0 <__aeabi_fcmpgt>
     788:	2800      	cmp	r0, #0
     78a:	d134      	bne.n	7f6 <BMSModule::getAvgTemp()+0xda>
        }
        if (temperatures[0] > 0.5 && temperatures[1] < 0.5 && temperatures[2] < 0.5)
        {
          return (temperatures[0]);
        }
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] < 0.5)
     78c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     790:	4630      	mov	r0, r6
     792:	f00c fdad 	bl	d2f0 <__aeabi_fcmpgt>
     796:	b138      	cbz	r0, 7a8 <BMSModule::getAvgTemp()+0x8c>
     798:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     79c:	4638      	mov	r0, r7
     79e:	f00c fd89 	bl	d2b4 <__aeabi_fcmplt>
     7a2:	2800      	cmp	r0, #0
     7a4:	f040 8090 	bne.w	8c8 <BMSModule::getAvgTemp()+0x1ac>
        {
          return (temperatures[1]);
        }
        if (temperatures[0] < 0.5 && temperatures[1] < 0.5 && temperatures[2] > 0.5)
     7a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7ac:	4638      	mov	r0, r7
     7ae:	f00c fd9f 	bl	d2f0 <__aeabi_fcmpgt>
     7b2:	2800      	cmp	r0, #0
     7b4:	d06d      	beq.n	892 <BMSModule::getAvgTemp()+0x176>
        {
          return (temperatures[2]);
     7b6:	463c      	mov	r4, r7
     7b8:	e001      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
      return temperatures[sensor - 1];
    }
  }
  else
  {
    return temperatures[0];
     7ba:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
  }
}
     7be:	4620      	mov	r0, r4
     7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return temperatures[sensor - 1];
     7c4:	3327      	adds	r3, #39	; 0x27
     7c6:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
}
     7ca:	4620      	mov	r0, r4
     7cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     7d0:	4630      	mov	r0, r6
     7d2:	f00c fd8d 	bl	d2f0 <__aeabi_fcmpgt>
     7d6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7da:	2800      	cmp	r0, #0
     7dc:	d036      	beq.n	84c <BMSModule::getAvgTemp()+0x130>
     7de:	4638      	mov	r0, r7
     7e0:	f00c fd86 	bl	d2f0 <__aeabi_fcmpgt>
     7e4:	2800      	cmp	r0, #0
     7e6:	d1ea      	bne.n	7be <BMSModule::getAvgTemp()+0xa2>
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     7e8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7ec:	4628      	mov	r0, r5
     7ee:	f00c fd61 	bl	d2b4 <__aeabi_fcmplt>
     7f2:	2800      	cmp	r0, #0
     7f4:	d14f      	bne.n	896 <BMSModule::getAvgTemp()+0x17a>
        if (temperatures[0] > 0.5 && temperatures[1] < 0.5 && temperatures[2] > 0.5)
     7f6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     7fa:	4630      	mov	r0, r6
     7fc:	f00c fd5a 	bl	d2b4 <__aeabi_fcmplt>
     800:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     804:	2800      	cmp	r0, #0
     806:	d03e      	beq.n	886 <BMSModule::getAvgTemp()+0x16a>
     808:	4638      	mov	r0, r7
     80a:	f00c fd71 	bl	d2f0 <__aeabi_fcmpgt>
     80e:	2800      	cmp	r0, #0
     810:	d149      	bne.n	8a6 <BMSModule::getAvgTemp()+0x18a>
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] < 0.5)
     812:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     816:	4630      	mov	r0, r6
     818:	f00c fd6a 	bl	d2f0 <__aeabi_fcmpgt>
     81c:	b168      	cbz	r0, 83a <BMSModule::getAvgTemp()+0x11e>
     81e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     822:	4638      	mov	r0, r7
     824:	f00c fd46 	bl	d2b4 <__aeabi_fcmplt>
     828:	2800      	cmp	r0, #0
     82a:	d146      	bne.n	8ba <BMSModule::getAvgTemp()+0x19e>
        if (temperatures[0] > 0.5 && temperatures[1] < 0.5 && temperatures[2] < 0.5)
     82c:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     830:	4630      	mov	r0, r6
     832:	f00c fd3f 	bl	d2b4 <__aeabi_fcmplt>
     836:	2800      	cmp	r0, #0
     838:	d0a8      	beq.n	78c <BMSModule::getAvgTemp()+0x70>
     83a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     83e:	4638      	mov	r0, r7
     840:	f00c fd38 	bl	d2b4 <__aeabi_fcmplt>
     844:	2800      	cmp	r0, #0
     846:	d0a1      	beq.n	78c <BMSModule::getAvgTemp()+0x70>
          return (temperatures[0]);
     848:	462c      	mov	r4, r5
     84a:	e7b8      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     84c:	4628      	mov	r0, r5
     84e:	f00c fd31 	bl	d2b4 <__aeabi_fcmplt>
     852:	2800      	cmp	r0, #0
     854:	d0cf      	beq.n	7f6 <BMSModule::getAvgTemp()+0xda>
     856:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     85a:	4630      	mov	r0, r6
     85c:	f00c fd48 	bl	d2f0 <__aeabi_fcmpgt>
     860:	2800      	cmp	r0, #0
     862:	d0c8      	beq.n	7f6 <BMSModule::getAvgTemp()+0xda>
     864:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     868:	4638      	mov	r0, r7
     86a:	f00c fd41 	bl	d2f0 <__aeabi_fcmpgt>
     86e:	2800      	cmp	r0, #0
     870:	d085      	beq.n	77e <BMSModule::getAvgTemp()+0x62>
          return (temperatures[1] + temperatures[2]) / 2.0f;
     872:	4639      	mov	r1, r7
     874:	4630      	mov	r0, r6
     876:	f00c fa77 	bl	cd68 <__addsf3>
     87a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     87e:	f00c fb7b 	bl	cf78 <__aeabi_fmul>
     882:	4604      	mov	r4, r0
     884:	e79b      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
        if (temperatures[0] > 0.5 && temperatures[1] > 0.5 && temperatures[2] < 0.5)
     886:	4630      	mov	r0, r6
     888:	f00c fd32 	bl	d2f0 <__aeabi_fcmpgt>
     88c:	2800      	cmp	r0, #0
     88e:	d0cd      	beq.n	82c <BMSModule::getAvgTemp()+0x110>
     890:	e7c5      	b.n	81e <BMSModule::getAvgTemp()+0x102>
          return (-80);
     892:	4c0f      	ldr	r4, [pc, #60]	; (8d0 <BMSModule::getAvgTemp()+0x1b4>)
     894:	e793      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
        if (temperatures[0] < 0.5 && temperatures[1] > 0.5 && temperatures[2] > 0.5)
     896:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     89a:	4638      	mov	r0, r7
     89c:	f00c fd28 	bl	d2f0 <__aeabi_fcmpgt>
     8a0:	2800      	cmp	r0, #0
     8a2:	d0a8      	beq.n	7f6 <BMSModule::getAvgTemp()+0xda>
     8a4:	e7e5      	b.n	872 <BMSModule::getAvgTemp()+0x156>
          return (temperatures[0] + temperatures[2]) / 2.0f;
     8a6:	4639      	mov	r1, r7
     8a8:	4628      	mov	r0, r5
     8aa:	f00c fa5d 	bl	cd68 <__addsf3>
     8ae:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     8b2:	f00c fb61 	bl	cf78 <__aeabi_fmul>
     8b6:	4604      	mov	r4, r0
     8b8:	e781      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
          return (temperatures[0] + temperatures[1]) / 2.0f;
     8ba:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     8be:	4640      	mov	r0, r8
     8c0:	f00c fb5a 	bl	cf78 <__aeabi_fmul>
     8c4:	4604      	mov	r4, r0
     8c6:	e77a      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
          return (temperatures[1]);
     8c8:	4634      	mov	r4, r6
     8ca:	e778      	b.n	7be <BMSModule::getAvgTemp()+0xa2>
     8cc:	40400000 	.word	0x40400000
     8d0:	c2a00000 	.word	0xc2a00000

000008d4 <BMSModule::getLowTemp()>:
  if (type == 1)
     8d4:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
     8d8:	2b01      	cmp	r3, #1
{
     8da:	b570      	push	{r4, r5, r6, lr}
     8dc:	4604      	mov	r4, r0
  if (type == 1)
     8de:	d120      	bne.n	922 <BMSModule::getLowTemp()+0x4e>
    if (sensor == 0)
     8e0:	f8d0 30d8 	ldr.w	r3, [r0, #216]	; 0xd8
     8e4:	bb0b      	cbnz	r3, 92a <BMSModule::getLowTemp()+0x56>
        if (temperatures[0] > 0.5)
     8e6:	f8d0 60a0 	ldr.w	r6, [r0, #160]	; 0xa0
     8ea:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     8ee:	4630      	mov	r0, r6
     8f0:	f00c fcfe 	bl	d2f0 <__aeabi_fcmpgt>
          if (temperatures[0] < temperatures[1] && temperatures[0] < temperatures[2])
     8f4:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
        if (temperatures[0] > 0.5)
     8f8:	b9e0      	cbnz	r0, 934 <BMSModule::getLowTemp()+0x60>
          if (temperatures[0] < temperatures[1] && temperatures[0] < temperatures[2])
     8fa:	f8d4 40a8 	ldr.w	r4, [r4, #168]	; 0xa8
        if (temperatures[1] > 0.5)
     8fe:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
     902:	4628      	mov	r0, r5
     904:	f00c fcf4 	bl	d2f0 <__aeabi_fcmpgt>
     908:	b168      	cbz	r0, 926 <BMSModule::getLowTemp()+0x52>
          if (temperatures[1] < temperatures[0] && temperatures[1] < temperatures[2])
     90a:	4631      	mov	r1, r6
     90c:	4628      	mov	r0, r5
     90e:	f00c fcd1 	bl	d2b4 <__aeabi_fcmplt>
     912:	b140      	cbz	r0, 926 <BMSModule::getLowTemp()+0x52>
     914:	4621      	mov	r1, r4
     916:	4628      	mov	r0, r5
     918:	f00c fccc 	bl	d2b4 <__aeabi_fcmplt>
     91c:	b118      	cbz	r0, 926 <BMSModule::getLowTemp()+0x52>
            return (temperatures[1]);
     91e:	462c      	mov	r4, r5
     920:	e001      	b.n	926 <BMSModule::getLowTemp()+0x52>
    return temperatures[0];
     922:	f8d0 40a0 	ldr.w	r4, [r0, #160]	; 0xa0
}
     926:	4620      	mov	r0, r4
     928:	bd70      	pop	{r4, r5, r6, pc}
      return temperatures[sensor - 1];
     92a:	3327      	adds	r3, #39	; 0x27
     92c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
}
     930:	4620      	mov	r0, r4
     932:	bd70      	pop	{r4, r5, r6, pc}
          if (temperatures[0] < temperatures[1] && temperatures[0] < temperatures[2])
     934:	4630      	mov	r0, r6
     936:	4629      	mov	r1, r5
     938:	f00c fcbc 	bl	d2b4 <__aeabi_fcmplt>
     93c:	f8d4 40a8 	ldr.w	r4, [r4, #168]	; 0xa8
     940:	2800      	cmp	r0, #0
     942:	d0dc      	beq.n	8fe <BMSModule::getLowTemp()+0x2a>
     944:	4630      	mov	r0, r6
     946:	4621      	mov	r1, r4
     948:	f00c fcb4 	bl	d2b4 <__aeabi_fcmplt>
     94c:	2800      	cmp	r0, #0
     94e:	d0d6      	beq.n	8fe <BMSModule::getLowTemp()+0x2a>
            return (temperatures[0]);
     950:	4634      	mov	r4, r6
     952:	e7e8      	b.n	926 <BMSModule::getLowTemp()+0x52>

00000954 <BMSModule::decodecan(int, CAN_message_t&)>:
{
     954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     958:	4606      	mov	r6, r0
     95a:	b084      	sub	sp, #16
     95c:	4614      	mov	r4, r2
  switch (Id)
     95e:	2903      	cmp	r1, #3
     960:	d83e      	bhi.n	9e0 <BMSModule::decodecan(int, CAN_message_t&)+0x8c>
     962:	e8df f011 	tbh	[pc, r1, lsl #1]
     966:	0004      	.short	0x0004
     968:	00f80132 	.word	0x00f80132
     96c:	00e7      	.short	0x00e7
      cmuerror = 0;
     96e:	2300      	movs	r3, #0
     970:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
      cellVolt[0] = (uint16_t(msg.buf[1] >> 4) + uint16_t(msg.buf[2] << 4) + 1000) * 0.001;
     974:	7a90      	ldrb	r0, [r2, #10]
     976:	7a53      	ldrb	r3, [r2, #9]
     978:	0100      	lsls	r0, r0, #4
     97a:	eb00 1013 	add.w	r0, r0, r3, lsr #4
     97e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     982:	f00c faa5 	bl	ced0 <__aeabi_i2f>
     986:	49ae      	ldr	r1, [pc, #696]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     988:	f00c faf6 	bl	cf78 <__aeabi_fmul>
     98c:	6030      	str	r0, [r6, #0]
      cellVolt[2] = (uint16_t(msg.buf[5] << 4) + uint16_t(msg.buf[4] >> 4) + 1000) * 0.001;
     98e:	7b20      	ldrb	r0, [r4, #12]
     990:	7b63      	ldrb	r3, [r4, #13]
     992:	0900      	lsrs	r0, r0, #4
     994:	eb00 1003 	add.w	r0, r0, r3, lsl #4
     998:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     99c:	f00c fa98 	bl	ced0 <__aeabi_i2f>
     9a0:	49a7      	ldr	r1, [pc, #668]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     9a2:	f00c fae9 	bl	cf78 <__aeabi_fmul>
     9a6:	60b0      	str	r0, [r6, #8]
      cellVolt[1] = (msg.buf[3] + uint16_t((msg.buf[4] & 0x0F) << 8) + 1000) * 0.001;
     9a8:	7b20      	ldrb	r0, [r4, #12]
     9aa:	7ae3      	ldrb	r3, [r4, #11]
     9ac:	0200      	lsls	r0, r0, #8
     9ae:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     9b2:	4418      	add	r0, r3
     9b4:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     9b8:	f00c fa8a 	bl	ced0 <__aeabi_i2f>
     9bc:	49a0      	ldr	r1, [pc, #640]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     9be:	f00c fadb 	bl	cf78 <__aeabi_fmul>
     9c2:	6070      	str	r0, [r6, #4]
      cellVolt[3] = (msg.buf[6] + uint16_t((msg.buf[7] & 0x0F) << 8) + 1000) * 0.001;
     9c4:	7be0      	ldrb	r0, [r4, #15]
     9c6:	7ba3      	ldrb	r3, [r4, #14]
     9c8:	0200      	lsls	r0, r0, #8
     9ca:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     9ce:	4418      	add	r0, r3
     9d0:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     9d4:	f00c fa7c 	bl	ced0 <__aeabi_i2f>
     9d8:	4999      	ldr	r1, [pc, #612]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     9da:	f00c facd 	bl	cf78 <__aeabi_fmul>
     9de:	60f0      	str	r0, [r6, #12]
  if (getLowTemp() < lowestTemperature) lowestTemperature = getLowTemp();
     9e0:	4630      	mov	r0, r6
     9e2:	f7ff ff77 	bl	8d4 <BMSModule::getLowTemp()>
     9e6:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
     9ea:	4604      	mov	r4, r0
     9ec:	f00c fc62 	bl	d2b4 <__aeabi_fcmplt>
     9f0:	b108      	cbz	r0, 9f6 <BMSModule::decodecan(int, CAN_message_t&)+0xa2>
     9f2:	f8c6 40ac 	str.w	r4, [r6, #172]	; 0xac
  if (type == 1)
     9f6:	f8d6 30f4 	ldr.w	r3, [r6, #244]	; 0xf4
     9fa:	2b01      	cmp	r3, #1
     9fc:	d10f      	bne.n	a1e <BMSModule::decodecan(int, CAN_message_t&)+0xca>
    if (sensor == 0)
     9fe:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
     a02:	2b00      	cmp	r3, #0
     a04:	f040 8092 	bne.w	b2c <BMSModule::decodecan(int, CAN_message_t&)+0x1d8>
     a08:	f8d6 50a0 	ldr.w	r5, [r6, #160]	; 0xa0
     a0c:	f8d6 40a4 	ldr.w	r4, [r6, #164]	; 0xa4
      return (temperatures[0] < temperatures[1]) ? temperatures[1] : temperatures[0];
     a10:	4628      	mov	r0, r5
     a12:	4621      	mov	r1, r4
     a14:	f00c fc4e 	bl	d2b4 <__aeabi_fcmplt>
     a18:	b918      	cbnz	r0, a22 <BMSModule::decodecan(int, CAN_message_t&)+0xce>
     a1a:	462c      	mov	r4, r5
     a1c:	e001      	b.n	a22 <BMSModule::decodecan(int, CAN_message_t&)+0xce>
    return temperatures[0];
     a1e:	f8d6 40a0 	ldr.w	r4, [r6, #160]	; 0xa0
  if (getHighTemp() > highestTemperature) highestTemperature = getHighTemp();
     a22:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
     a26:	4621      	mov	r1, r4
     a28:	f00c fc44 	bl	d2b4 <__aeabi_fcmplt>
     a2c:	b108      	cbz	r0, a32 <BMSModule::decodecan(int, CAN_message_t&)+0xde>
     a2e:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
    if (highestCellVolt[i] < cellVolt[i] && cellVolt[i] > 5.0) highestCellVolt[i] = cellVolt[i];
     a32:	f8df 8210 	ldr.w	r8, [pc, #528]	; c44 <BMSModule::decodecan(int, CAN_message_t&)+0x2f0>
     a36:	1f34      	subs	r4, r6, #4
     a38:	f106 0730 	add.w	r7, r6, #48	; 0x30
    if (lowestCellVolt[i] > cellVolt[i] && cellVolt[i] >= IgnoreCell) lowestCellVolt[i] = cellVolt[i];
     a3c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
     a3e:	f854 5f04 	ldr.w	r5, [r4, #4]!
     a42:	4629      	mov	r1, r5
     a44:	f00c fc54 	bl	d2f0 <__aeabi_fcmpgt>
     a48:	4603      	mov	r3, r0
     a4a:	4628      	mov	r0, r5
     a4c:	b12b      	cbz	r3, a5a <BMSModule::decodecan(int, CAN_message_t&)+0x106>
     a4e:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
     a52:	f00c fc43 	bl	d2dc <__aeabi_fcmpge>
     a56:	b100      	cbz	r0, a5a <BMSModule::decodecan(int, CAN_message_t&)+0x106>
     a58:	6365      	str	r5, [r4, #52]	; 0x34
    if (highestCellVolt[i] < cellVolt[i] && cellVolt[i] > 5.0) highestCellVolt[i] = cellVolt[i];
     a5a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
     a5c:	4628      	mov	r0, r5
     a5e:	f00c fc47 	bl	d2f0 <__aeabi_fcmpgt>
     a62:	4603      	mov	r3, r0
     a64:	4641      	mov	r1, r8
     a66:	4628      	mov	r0, r5
     a68:	b11b      	cbz	r3, a72 <BMSModule::decodecan(int, CAN_message_t&)+0x11e>
     a6a:	f00c fc41 	bl	d2f0 <__aeabi_fcmpgt>
     a6e:	b100      	cbz	r0, a72 <BMSModule::decodecan(int, CAN_message_t&)+0x11e>
     a70:	66a5      	str	r5, [r4, #104]	; 0x68
  for (int i = 0; i < 13; i++)
     a72:	42a7      	cmp	r7, r4
     a74:	d1e2      	bne.n	a3c <BMSModule::decodecan(int, CAN_message_t&)+0xe8>
  if (cmuerror == 0)
     a76:	f896 30ec 	ldrb.w	r3, [r6, #236]	; 0xec
     a7a:	b943      	cbnz	r3, a8e <BMSModule::decodecan(int, CAN_message_t&)+0x13a>
	// do not remove this "redundant" code without
	// carefully verifying the case mentioned here:
	//
	// https://forum.pjrc.com/threads/17469-millis%28%29-on-teensy-3?p=104924&viewfull=1#post104924
	//
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a7c:	4b72      	ldr	r3, [pc, #456]	; (c48 <BMSModule::decodecan(int, CAN_message_t&)+0x2f4>)
     a7e:	681b      	ldr	r3, [r3, #0]
     a80:	9300      	str	r3, [sp, #0]
	return ret;
     a82:	9b00      	ldr	r3, [sp, #0]
    lasterror = millis();
     a84:	f8c6 30e8 	str.w	r3, [r6, #232]	; 0xe8
}
     a88:	b004      	add	sp, #16
     a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     a8e:	4c6e      	ldr	r4, [pc, #440]	; (c48 <BMSModule::decodecan(int, CAN_message_t&)+0x2f4>)
    if (millis() - lasterror < timeout)
     a90:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
     a94:	6822      	ldr	r2, [r4, #0]
     a96:	9201      	str	r2, [sp, #4]
	return ret;
     a98:	9a01      	ldr	r2, [sp, #4]
     a9a:	f8d6 10f0 	ldr.w	r1, [r6, #240]	; 0xf0
     a9e:	1ad2      	subs	r2, r2, r3
     aa0:	428a      	cmp	r2, r1
     aa2:	d232      	bcs.n	b0a <BMSModule::decodecan(int, CAN_message_t&)+0x1b6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     aa4:	6822      	ldr	r2, [r4, #0]
     aa6:	9202      	str	r2, [sp, #8]
	return ret;
     aa8:	9a02      	ldr	r2, [sp, #8]
      if (lasterror + timeout - millis() < 5000)
     aaa:	440b      	add	r3, r1
     aac:	1a9b      	subs	r3, r3, r2
     aae:	f241 3287 	movw	r2, #4999	; 0x1387
     ab2:	4293      	cmp	r3, r2
     ab4:	d8e8      	bhi.n	a88 <BMSModule::decodecan(int, CAN_message_t&)+0x134>
     ab6:	2102      	movs	r1, #2
     ab8:	4864      	ldr	r0, [pc, #400]	; (c4c <BMSModule::decodecan(int, CAN_message_t&)+0x2f8>)
     aba:	f00b fb7d 	bl	c1b8 <usb_serial_write>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
     abe:	4864      	ldr	r0, [pc, #400]	; (c50 <BMSModule::decodecan(int, CAN_message_t&)+0x2fc>)
     ac0:	f008 fe32 	bl	9728 <Print::println()>
     ac4:	2106      	movs	r1, #6
     ac6:	4863      	ldr	r0, [pc, #396]	; (c54 <BMSModule::decodecan(int, CAN_message_t&)+0x300>)
     ac8:	f00b fb76 	bl	c1b8 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     acc:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
     ad0:	485f      	ldr	r0, [pc, #380]	; (c50 <BMSModule::decodecan(int, CAN_message_t&)+0x2fc>)
     ad2:	2300      	movs	r3, #0
     ad4:	220a      	movs	r2, #10
     ad6:	f008 fe3f 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     ada:	2119      	movs	r1, #25
     adc:	485e      	ldr	r0, [pc, #376]	; (c58 <BMSModule::decodecan(int, CAN_message_t&)+0x304>)
     ade:	f00b fb6b 	bl	c1b8 <usb_serial_write>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
     ae2:	6821      	ldr	r1, [r4, #0]
        SERIALCONSOLE.println(lasterror + timeout - millis() );
     ae4:	f8d6 30e8 	ldr.w	r3, [r6, #232]	; 0xe8
     ae8:	f8d6 20f0 	ldr.w	r2, [r6, #240]	; 0xf0
     aec:	9103      	str	r1, [sp, #12]
	return ret;
     aee:	9c03      	ldr	r4, [sp, #12]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     af0:	4857      	ldr	r0, [pc, #348]	; (c50 <BMSModule::decodecan(int, CAN_message_t&)+0x2fc>)
     af2:	1899      	adds	r1, r3, r2
     af4:	1b09      	subs	r1, r1, r4
     af6:	2300      	movs	r3, #0
     af8:	220a      	movs	r2, #10
     afa:	f008 fe2d 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     afe:	4854      	ldr	r0, [pc, #336]	; (c50 <BMSModule::decodecan(int, CAN_message_t&)+0x2fc>)
}
     b00:	b004      	add	sp, #16
     b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
     b06:	f008 be0f 	b.w	9728 <Print::println()>
        cellVolt[i] = 0.0f;
     b0a:	2220      	movs	r2, #32
     b0c:	2100      	movs	r1, #0
     b0e:	4630      	mov	r0, r6
     b10:	f00d fab4 	bl	e07c <memset>
      moduleVolt = 0.0f;
     b14:	2300      	movs	r3, #0
     b16:	f8c6 309c 	str.w	r3, [r6, #156]	; 0x9c
      temperatures[0] = 0.0f;
     b1a:	f8c6 30a0 	str.w	r3, [r6, #160]	; 0xa0
      temperatures[1] = 0.0f;
     b1e:	f8c6 30a4 	str.w	r3, [r6, #164]	; 0xa4
      temperatures[2] = 0.0f;
     b22:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
}
     b26:	b004      	add	sp, #16
     b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return temperatures[sensor - 1];
     b2c:	3327      	adds	r3, #39	; 0x27
     b2e:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
     b32:	e776      	b.n	a22 <BMSModule::decodecan(int, CAN_message_t&)+0xce>
      cmuerror = 0;
     b34:	2300      	movs	r3, #0
     b36:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
      cellVolt[12] = (uint16_t(msg.buf[1] >> 4) + uint16_t(msg.buf[2] << 4) + 1000) * 0.001;
     b3a:	7a90      	ldrb	r0, [r2, #10]
     b3c:	7a53      	ldrb	r3, [r2, #9]
     b3e:	0100      	lsls	r0, r0, #4
     b40:	eb00 1013 	add.w	r0, r0, r3, lsr #4
     b44:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     b48:	f00c f9c2 	bl	ced0 <__aeabi_i2f>
     b4c:	493c      	ldr	r1, [pc, #240]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     b4e:	f00c fa13 	bl	cf78 <__aeabi_fmul>
     b52:	6330      	str	r0, [r6, #48]	; 0x30
      break;
     b54:	e744      	b.n	9e0 <BMSModule::decodecan(int, CAN_message_t&)+0x8c>
      cmuerror = 0;
     b56:	2300      	movs	r3, #0
     b58:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
      cellVolt[8] = (uint16_t(msg.buf[1] >> 4) + uint16_t(msg.buf[2] << 4) + 1000) * 0.001;
     b5c:	7a90      	ldrb	r0, [r2, #10]
     b5e:	7a53      	ldrb	r3, [r2, #9]
     b60:	0100      	lsls	r0, r0, #4
     b62:	eb00 1013 	add.w	r0, r0, r3, lsr #4
     b66:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     b6a:	f00c f9b1 	bl	ced0 <__aeabi_i2f>
     b6e:	4934      	ldr	r1, [pc, #208]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     b70:	f00c fa02 	bl	cf78 <__aeabi_fmul>
     b74:	6230      	str	r0, [r6, #32]
      cellVolt[10] = (uint16_t(msg.buf[5] << 4) + uint16_t(msg.buf[4] >> 4) + 1000) * 0.001;
     b76:	7b20      	ldrb	r0, [r4, #12]
     b78:	7b63      	ldrb	r3, [r4, #13]
     b7a:	0900      	lsrs	r0, r0, #4
     b7c:	eb00 1003 	add.w	r0, r0, r3, lsl #4
     b80:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     b84:	f00c f9a4 	bl	ced0 <__aeabi_i2f>
     b88:	492d      	ldr	r1, [pc, #180]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     b8a:	f00c f9f5 	bl	cf78 <__aeabi_fmul>
     b8e:	62b0      	str	r0, [r6, #40]	; 0x28
      cellVolt[9] = (msg.buf[3] + uint16_t((msg.buf[4] & 0x0F) << 8) + 1000) * 0.001;
     b90:	7b20      	ldrb	r0, [r4, #12]
     b92:	7ae3      	ldrb	r3, [r4, #11]
     b94:	0200      	lsls	r0, r0, #8
     b96:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     b9a:	4418      	add	r0, r3
     b9c:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     ba0:	f00c f996 	bl	ced0 <__aeabi_i2f>
     ba4:	4926      	ldr	r1, [pc, #152]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     ba6:	f00c f9e7 	bl	cf78 <__aeabi_fmul>
     baa:	6270      	str	r0, [r6, #36]	; 0x24
      cellVolt[11] = (msg.buf[6] + uint16_t((msg.buf[7] & 0x0F) << 8) + 1000) * 0.001;
     bac:	7be0      	ldrb	r0, [r4, #15]
     bae:	7ba3      	ldrb	r3, [r4, #14]
     bb0:	0200      	lsls	r0, r0, #8
     bb2:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     bb6:	4418      	add	r0, r3
     bb8:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     bbc:	f00c f988 	bl	ced0 <__aeabi_i2f>
     bc0:	491f      	ldr	r1, [pc, #124]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     bc2:	f00c f9d9 	bl	cf78 <__aeabi_fmul>
     bc6:	62f0      	str	r0, [r6, #44]	; 0x2c
      break;
     bc8:	e70a      	b.n	9e0 <BMSModule::decodecan(int, CAN_message_t&)+0x8c>
      cmuerror = 0;
     bca:	2300      	movs	r3, #0
     bcc:	f880 30ec 	strb.w	r3, [r0, #236]	; 0xec
      cellVolt[4] = (uint16_t(msg.buf[1] >> 4) + uint16_t(msg.buf[2] << 4) + 1000) * 0.001;
     bd0:	7a90      	ldrb	r0, [r2, #10]
     bd2:	7a53      	ldrb	r3, [r2, #9]
     bd4:	0100      	lsls	r0, r0, #4
     bd6:	eb00 1013 	add.w	r0, r0, r3, lsr #4
     bda:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     bde:	f00c f977 	bl	ced0 <__aeabi_i2f>
     be2:	4917      	ldr	r1, [pc, #92]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     be4:	f00c f9c8 	bl	cf78 <__aeabi_fmul>
     be8:	6130      	str	r0, [r6, #16]
      cellVolt[6] = (uint16_t(msg.buf[5] << 4) + uint16_t(msg.buf[4] >> 4) + 1000) * 0.001;
     bea:	7b20      	ldrb	r0, [r4, #12]
     bec:	7b63      	ldrb	r3, [r4, #13]
     bee:	0900      	lsrs	r0, r0, #4
     bf0:	eb00 1003 	add.w	r0, r0, r3, lsl #4
     bf4:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     bf8:	f00c f96a 	bl	ced0 <__aeabi_i2f>
     bfc:	4910      	ldr	r1, [pc, #64]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     bfe:	f00c f9bb 	bl	cf78 <__aeabi_fmul>
     c02:	61b0      	str	r0, [r6, #24]
      cellVolt[5] = (msg.buf[3] + uint16_t((msg.buf[4] & 0x0F) << 8) + 1000) * 0.001;
     c04:	7b20      	ldrb	r0, [r4, #12]
     c06:	7ae3      	ldrb	r3, [r4, #11]
     c08:	0200      	lsls	r0, r0, #8
     c0a:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     c0e:	4418      	add	r0, r3
     c10:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     c14:	f00c f95c 	bl	ced0 <__aeabi_i2f>
     c18:	4909      	ldr	r1, [pc, #36]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     c1a:	f00c f9ad 	bl	cf78 <__aeabi_fmul>
     c1e:	6170      	str	r0, [r6, #20]
      cellVolt[7] = (msg.buf[6] + uint16_t((msg.buf[7] & 0x0F) << 8) + 1000) * 0.001;
     c20:	7be0      	ldrb	r0, [r4, #15]
     c22:	7ba3      	ldrb	r3, [r4, #14]
     c24:	0200      	lsls	r0, r0, #8
     c26:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
     c2a:	4418      	add	r0, r3
     c2c:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
     c30:	f00c f94e 	bl	ced0 <__aeabi_i2f>
     c34:	4902      	ldr	r1, [pc, #8]	; (c40 <BMSModule::decodecan(int, CAN_message_t&)+0x2ec>)
     c36:	f00c f99f 	bl	cf78 <__aeabi_fmul>
     c3a:	61f0      	str	r0, [r6, #28]
      break;
     c3c:	e6d0      	b.n	9e0 <BMSModule::decodecan(int, CAN_message_t&)+0x8c>
     c3e:	bf00      	nop
     c40:	3a83126f 	.word	0x3a83126f
     c44:	40a00000 	.word	0x40a00000
     c48:	1fffd3c0 	.word	0x1fffd3c0
     c4c:	00014fa8 	.word	0x00014fa8
     c50:	1fff89fc 	.word	0x1fff89fc
     c54:	00013c8c 	.word	0x00013c8c
     c58:	00013c94 	.word	0x00013c94

00000c5c <BMSModule::getModuleVoltage()>:

float BMSModule::getModuleVoltage()
{
     c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  moduleVolt = 0;
     c60:	2600      	movs	r6, #0
  for (int I; I < 13; I++)
  {
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     c62:	f8d0 90bc 	ldr.w	r9, [r0, #188]	; 0xbc
     c66:	4f10      	ldr	r7, [pc, #64]	; (ca8 <BMSModule::getModuleVoltage()+0x4c>)
  moduleVolt = 0;
     c68:	f8c0 609c 	str.w	r6, [r0, #156]	; 0x9c
{
     c6c:	4682      	mov	sl, r0
     c6e:	1f05      	subs	r5, r0, #4
     c70:	f100 0830 	add.w	r8, r0, #48	; 0x30
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     c74:	f855 4f04 	ldr.w	r4, [r5, #4]!
     c78:	4649      	mov	r1, r9
     c7a:	4620      	mov	r0, r4
     c7c:	f00c fb38 	bl	d2f0 <__aeabi_fcmpgt>
     c80:	4603      	mov	r3, r0
     c82:	4639      	mov	r1, r7
     c84:	4620      	mov	r0, r4
     c86:	b153      	cbz	r3, c9e <BMSModule::getModuleVoltage()+0x42>
     c88:	f00c fb14 	bl	d2b4 <__aeabi_fcmplt>
     c8c:	4603      	mov	r3, r0
    {
      moduleVolt = moduleVolt + cellVolt[I];
     c8e:	4621      	mov	r1, r4
     c90:	4630      	mov	r0, r6
    if (cellVolt[I] > IgnoreCell && cellVolt[I] < 5.0)
     c92:	b123      	cbz	r3, c9e <BMSModule::getModuleVoltage()+0x42>
      moduleVolt = moduleVolt + cellVolt[I];
     c94:	f00c f868 	bl	cd68 <__addsf3>
     c98:	4606      	mov	r6, r0
     c9a:	f8ca 009c 	str.w	r0, [sl, #156]	; 0x9c
  for (int I; I < 13; I++)
     c9e:	4545      	cmp	r5, r8
     ca0:	d1e8      	bne.n	c74 <BMSModule::getModuleVoltage()+0x18>
    }
  }
  return moduleVolt;
}
     ca2:	4630      	mov	r0, r6
     ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ca8:	40a00000 	.word	0x40a00000

00000cac <BMSModule::getTemperature(int)>:

float BMSModule::getTemperature(int temp)
{
  if (temp < 0 || temp > 2) return 0.0f;
     cac:	2902      	cmp	r1, #2
  return temperatures[temp];
     cae:	bf9a      	itte	ls
     cb0:	3128      	addls	r1, #40	; 0x28
     cb2:	f850 0021 	ldrls.w	r0, [r0, r1, lsl #2]
  if (temp < 0 || temp > 2) return 0.0f;
     cb6:	2000      	movhi	r0, #0
}
     cb8:	4770      	bx	lr
     cba:	bf00      	nop

00000cbc <BMSModule::setAddress(int)>:

void BMSModule::setAddress(int newAddr)
{
  if (newAddr < 0 || newAddr > MAX_MODULE_ADDR) return;
     cbc:	293e      	cmp	r1, #62	; 0x3e
  moduleAddress = newAddr;
     cbe:	bf98      	it	ls
     cc0:	f880 10dc 	strbls.w	r1, [r0, #220]	; 0xdc
}
     cc4:	4770      	bx	lr
     cc6:	bf00      	nop

00000cc8 <BMSModule::getType()>:
}

int BMSModule::getType()
{
  return type;
}
     cc8:	f8d0 00f4 	ldr.w	r0, [r0, #244]	; 0xf4
     ccc:	4770      	bx	lr
     cce:	bf00      	nop

00000cd0 <BMSModule::getBalStat()>:

int BMSModule::getBalStat()
{
  return balstat;
}
     cd0:	f8d0 00e4 	ldr.w	r0, [r0, #228]	; 0xe4
     cd4:	4770      	bx	lr
     cd6:	bf00      	nop

00000cd8 <BMSModule::isExisting()>:

bool BMSModule::isExisting()
{
  return exists;
}
     cd8:	f890 00c4 	ldrb.w	r0, [r0, #196]	; 0xc4
     cdc:	4770      	bx	lr
     cde:	bf00      	nop

00000ce0 <BMSModule::isReset()>:

bool BMSModule::isReset()
{
  return reset;
}
     ce0:	f890 00c5 	ldrb.w	r0, [r0, #197]	; 0xc5
     ce4:	4770      	bx	lr
     ce6:	bf00      	nop

00000ce8 <BMSModule::settempsensor(int)>:

void BMSModule::settempsensor(int tempsensor)
{
  sensor = tempsensor;
     ce8:	f8c0 10d8 	str.w	r1, [r0, #216]	; 0xd8
}
     cec:	4770      	bx	lr
     cee:	bf00      	nop

00000cf0 <BMSModule::setExists(bool)>:

void BMSModule::setExists(bool ex)
{
  exists = ex;
     cf0:	f880 10c4 	strb.w	r1, [r0, #196]	; 0xc4
}
     cf4:	4770      	bx	lr
     cf6:	bf00      	nop

00000cf8 <BMSModule::setDelta(float)>:

void BMSModule::setDelta(float ex)
{
  VoltDelta = ex;
     cf8:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
}
     cfc:	4770      	bx	lr
     cfe:	bf00      	nop

00000d00 <BMSModule::setReset(bool)>:

void BMSModule::setReset(bool ex)
{
  reset = ex;
     d00:	f880 10c5 	strb.w	r1, [r0, #197]	; 0xc5
}
     d04:	4770      	bx	lr
     d06:	bf00      	nop

00000d08 <BMSModule::setIgnoreCell(float)>:

void BMSModule::setIgnoreCell(float Ignore)
{
     d08:	b530      	push	{r4, r5, lr}
  IgnoreCell = Ignore;
  Serial.println();
     d0a:	4c0f      	ldr	r4, [pc, #60]	; (d48 <BMSModule::setIgnoreCell(float)+0x40>)
  IgnoreCell = Ignore;
     d0c:	f8c0 10bc 	str.w	r1, [r0, #188]	; 0xbc
{
     d10:	b083      	sub	sp, #12
  Serial.println();
     d12:	4620      	mov	r0, r4
{
     d14:	460d      	mov	r5, r1
  Serial.println();
     d16:	f008 fd07 	bl	9728 <Print::println()>
  Serial.println();
     d1a:	4620      	mov	r0, r4
     d1c:	f008 fd04 	bl	9728 <Print::println()>
  Serial.println(Ignore);
     d20:	4628      	mov	r0, r5
     d22:	f00b ff05 	bl	cb30 <__aeabi_f2d>
     d26:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     d28:	2102      	movs	r1, #2
     d2a:	4602      	mov	r2, r0
     d2c:	9100      	str	r1, [sp, #0]
     d2e:	4620      	mov	r0, r4
     d30:	f008 fd1e 	bl	9770 <Print::printFloat(double, unsigned char)>
	size_t println(long n, int base)		{ return print(n, base) + println(); }
	size_t println(unsigned long n, int base)	{ return print(n, base) + println(); }
	size_t println(int64_t n, int base)		{ return print(n, base) + println(); }
	size_t println(uint64_t n, int base)		{ return print(n, base) + println(); }

	size_t println(double n, int digits = 2)	{ return print(n, digits) + println(); }
     d34:	4620      	mov	r0, r4
     d36:	f008 fcf7 	bl	9728 <Print::println()>
  Serial.println();
     d3a:	4620      	mov	r0, r4

}
     d3c:	b003      	add	sp, #12
     d3e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  Serial.println();
     d42:	f008 bcf1 	b.w	9728 <Print::println()>
     d46:	bf00      	nop
     d48:	1fff89fc 	.word	0x1fff89fc

00000d4c <BMSModuleManager::BMSModuleManager()>:
BMSModuleManager::BMSModuleManager()
     d4c:	b570      	push	{r4, r5, r6, lr}
     d4e:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
     d52:	4606      	mov	r6, r0
     d54:	f100 042c 	add.w	r4, r0, #44	; 0x2c
     d58:	3534      	adds	r5, #52	; 0x34
     d5a:	4620      	mov	r0, r4
     d5c:	34f8      	adds	r4, #248	; 0xf8
     d5e:	f7ff fb7b 	bl	458 <BMSModule::BMSModule()>
     d62:	42ac      	cmp	r4, r5
     d64:	d1f9      	bne.n	d5a <BMSModuleManager::BMSModuleManager()+0xe>
     d66:	f506 7592 	add.w	r5, r6, #292	; 0x124
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     d6a:	2401      	movs	r4, #1
    modules[i].setExists(false);
     d6c:	4628      	mov	r0, r5
     d6e:	2100      	movs	r1, #0
     d70:	f7ff ffbe 	bl	cf0 <BMSModule::setExists(bool)>
    modules[i].setAddress(i);
     d74:	4621      	mov	r1, r4
     d76:	4628      	mov	r0, r5
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     d78:	3401      	adds	r4, #1
    modules[i].setAddress(i);
     d7a:	f7ff ff9f 	bl	cbc <BMSModule::setAddress(int)>
  for (int i = 1; i <= MAX_MODULE_ADDR; i++) {
     d7e:	2c3f      	cmp	r4, #63	; 0x3f
     d80:	f105 05f8 	add.w	r5, r5, #248	; 0xf8
     d84:	d1f2      	bne.n	d6c <BMSModuleManager::BMSModuleManager()+0x20>
  isFaulted = false;
     d86:	f506 5340 	add.w	r3, r6, #12288	; 0x3000
  lowestPackVolt = 1000.0f;
     d8a:	4807      	ldr	r0, [pc, #28]	; (da8 <BMSModuleManager::BMSModuleManager()+0x5c>)
     d8c:	6130      	str	r0, [r6, #16]
  highestPackVolt = 0.0f;
     d8e:	2100      	movs	r1, #0
     d90:	6171      	str	r1, [r6, #20]
  isFaulted = false;
     d92:	2200      	movs	r2, #0
  lowestPackTemp = 200.0f;
     d94:	4805      	ldr	r0, [pc, #20]	; (dac <BMSModuleManager::BMSModuleManager()+0x60>)
  highestPackTemp = -100.0f;
     d96:	4906      	ldr	r1, [pc, #24]	; (db0 <BMSModuleManager::BMSModuleManager()+0x64>)
  lowestPackTemp = 200.0f;
     d98:	61b0      	str	r0, [r6, #24]
  highestPackTemp = -100.0f;
     d9a:	61f1      	str	r1, [r6, #28]
  balcnt = 0;//counter to stop balancing for cell measurement
     d9c:	f883 2d3e 	strb.w	r2, [r3, #3390]	; 0xd3e
}
     da0:	4630      	mov	r0, r6
  isFaulted = false;
     da2:	f8a3 2d3c 	strh.w	r2, [r3, #3388]	; 0xd3c
}
     da6:	bd70      	pop	{r4, r5, r6, pc}
     da8:	447a0000 	.word	0x447a0000
     dac:	43480000 	.word	0x43480000
     db0:	c2c80000 	.word	0xc2c80000

00000db4 <BMSModuleManager::checkcomms()>:
{
     db4:	b570      	push	{r4, r5, r6, lr}
     db6:	f500 7492 	add.w	r4, r0, #292	; 0x124
  for (int y = 1; y < 63; y++)
     dba:	2501      	movs	r5, #1
  int g = 0;
     dbc:	2600      	movs	r6, #0
     dbe:	e00d      	b.n	ddc <BMSModuleManager::checkcomms()+0x28>
      g = 1;
     dc0:	2601      	movs	r6, #1
    modules[y].setReset(false);
     dc2:	4620      	mov	r0, r4
     dc4:	2100      	movs	r1, #0
     dc6:	f7ff ff9b 	bl	d00 <BMSModule::setReset(bool)>
    modules[y].setAddress(y);
     dca:	4629      	mov	r1, r5
     dcc:	4620      	mov	r0, r4
  for (int y = 1; y < 63; y++)
     dce:	3501      	adds	r5, #1
    modules[y].setAddress(y);
     dd0:	f7ff ff74 	bl	cbc <BMSModule::setAddress(int)>
  for (int y = 1; y < 63; y++)
     dd4:	2d3f      	cmp	r5, #63	; 0x3f
     dd6:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
     dda:	d00f      	beq.n	dfc <BMSModuleManager::checkcomms()+0x48>
    if (modules[y].isExisting())
     ddc:	4620      	mov	r0, r4
     dde:	f7ff ff7b 	bl	cd8 <BMSModule::isExisting()>
     de2:	4603      	mov	r3, r0
      if (modules[y].isReset())
     de4:	4620      	mov	r0, r4
    if (modules[y].isExisting())
     de6:	2b00      	cmp	r3, #0
     de8:	d0eb      	beq.n	dc2 <BMSModuleManager::checkcomms()+0xe>
      if (modules[y].isReset())
     dea:	f7ff ff79 	bl	ce0 <BMSModule::isReset()>
     dee:	4606      	mov	r6, r0
     df0:	2800      	cmp	r0, #0
     df2:	d1e5      	bne.n	dc0 <BMSModuleManager::checkcomms()+0xc>
        modules[y].setExists(false);
     df4:	4601      	mov	r1, r0
     df6:	4620      	mov	r0, r4
     df8:	f7ff ff7a 	bl	cf0 <BMSModule::setExists(bool)>
}
     dfc:	4630      	mov	r0, r6
     dfe:	bd70      	pop	{r4, r5, r6, pc}

00000e00 <BMSModuleManager::setBalanceHyst(float)>:
  BalHys = newVal;
     e00:	6281      	str	r1, [r0, #40]	; 0x28
}
     e02:	4770      	bx	lr

00000e04 <BMSModuleManager::balanceCells(int)>:
{
     e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (balcnt > 60)
     e08:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
{
     e0c:	b083      	sub	sp, #12
  if (balcnt > 60)
     e0e:	f893 4d3e 	ldrb.w	r4, [r3, #3390]	; 0xd3e
     e12:	9301      	str	r3, [sp, #4]
     e14:	2c3c      	cmp	r4, #60	; 0x3c
{
     e16:	9100      	str	r1, [sp, #0]
  if (balcnt > 60)
     e18:	d90e      	bls.n	e38 <BMSModuleManager::balanceCells(int)+0x34>
     e1a:	f8df 8294 	ldr.w	r8, [pc, #660]	; 10b0 <BMSModuleManager::balanceCells(int)+0x2ac>
          for (int i = 0; i < 8; i++)
     e1e:	2301      	movs	r3, #1
  OUTmsg.flags.extended = 0;
     e20:	f898 2006 	ldrb.w	r2, [r8, #6]
  balcnt++;
     e24:	9901      	ldr	r1, [sp, #4]
  OUTmsg.flags.extended = 0;
     e26:	f36f 0200 	bfc	r2, #0, #1
  balcnt++;
     e2a:	f881 3d3e 	strb.w	r3, [r1, #3390]	; 0xd3e
  OUTmsg.flags.extended = 0;
     e2e:	f888 2006 	strb.w	r2, [r8, #6]
}
     e32:	b003      	add	sp, #12
     e34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (balcnt > 10)
     e38:	2c0a      	cmp	r4, #10
     e3a:	f240 8179 	bls.w	1130 <BMSModuleManager::balanceCells(int)+0x32c>
     e3e:	2c14      	cmp	r4, #20
     e40:	4605      	mov	r5, r0
    if (balcnt == 11 || balcnt == 15 || balcnt == 20 || balcnt == 25 || balcnt == 30 || balcnt == 35 || balcnt == 40 || balcnt == 45 || balcnt == 50 || balcnt == 55)
     e42:	d90e      	bls.n	e62 <BMSModuleManager::balanceCells(int)+0x5e>
     e44:	f1a4 0319 	sub.w	r3, r4, #25
     e48:	b2db      	uxtb	r3, r3
     e4a:	2b1e      	cmp	r3, #30
     e4c:	d804      	bhi.n	e58 <BMSModuleManager::balanceCells(int)+0x54>
     e4e:	4a99      	ldr	r2, [pc, #612]	; (10b4 <BMSModuleManager::balanceCells(int)+0x2b0>)
     e50:	fa22 f303 	lsr.w	r3, r2, r3
     e54:	07da      	lsls	r2, r3, #31
     e56:	d40c      	bmi.n	e72 <BMSModuleManager::balanceCells(int)+0x6e>
  balcnt++;
     e58:	1c63      	adds	r3, r4, #1
     e5a:	f8df 8254 	ldr.w	r8, [pc, #596]	; 10b0 <BMSModuleManager::balanceCells(int)+0x2ac>
     e5e:	b2db      	uxtb	r3, r3
     e60:	e7de      	b.n	e20 <BMSModuleManager::balanceCells(int)+0x1c>
     e62:	f1a4 020b 	sub.w	r2, r4, #11
     e66:	b2d2      	uxtb	r2, r2
     e68:	f240 2311 	movw	r3, #529	; 0x211
     e6c:	40d3      	lsrs	r3, r2
     e6e:	07db      	lsls	r3, r3, #31
     e70:	d5f2      	bpl.n	e58 <BMSModuleManager::balanceCells(int)+0x54>
      balancing = false;
     e72:	9a01      	ldr	r2, [sp, #4]
     e74:	f8df 8238 	ldr.w	r8, [pc, #568]	; 10b0 <BMSModuleManager::balanceCells(int)+0x2ac>
     e78:	2300      	movs	r3, #0
     e7a:	f882 3d3d 	strb.w	r3, [r2, #3389]	; 0xd3d
      for (int y = 1; y < 63; y++)
     e7e:	f505 7692 	add.w	r6, r5, #292	; 0x124
     e82:	2701      	movs	r7, #1
              OUTmsg.id  = 0x1A555417;
     e84:	46a9      	mov	r9, r5
     e86:	e005      	b.n	e94 <BMSModuleManager::balanceCells(int)+0x90>
      for (int y = 1; y < 63; y++)
     e88:	3701      	adds	r7, #1
     e8a:	2f3f      	cmp	r7, #63	; 0x3f
     e8c:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
     e90:	f000 8091 	beq.w	fb6 <BMSModuleManager::balanceCells(int)+0x1b2>
        if (modules[y].isExisting() == 1)
     e94:	4630      	mov	r0, r6
     e96:	f7ff ff1f 	bl	cd8 <BMSModule::isExisting()>
     e9a:	2800      	cmp	r0, #0
     e9c:	d0f4      	beq.n	e88 <BMSModuleManager::balanceCells(int)+0x84>
          for (int i = 0; i < 12; i++)
     e9e:	f04f 0b00 	mov.w	fp, #0
          balance = 0;
     ea2:	465d      	mov	r5, fp
              balance = balance | (1 << i);
     ea4:	2401      	movs	r4, #1
            if ((LowCellVolt + BalHys) < modules[y].getCellVoltage(i))
     ea6:	f8d9 1028 	ldr.w	r1, [r9, #40]	; 0x28
     eaa:	f8d9 0008 	ldr.w	r0, [r9, #8]
     eae:	f00b ff5b 	bl	cd68 <__addsf3>
     eb2:	4659      	mov	r1, fp
     eb4:	4682      	mov	sl, r0
     eb6:	4630      	mov	r0, r6
     eb8:	f7ff fb8e 	bl	5d8 <BMSModule::getCellVoltage(int)>
     ebc:	4601      	mov	r1, r0
     ebe:	4650      	mov	r0, sl
     ec0:	f00c f9f8 	bl	d2b4 <__aeabi_fcmplt>
     ec4:	b118      	cbz	r0, ece <BMSModuleManager::balanceCells(int)+0xca>
              balance = balance | (1 << i);
     ec6:	fa04 f30b 	lsl.w	r3, r4, fp
     eca:	432b      	orrs	r3, r5
     ecc:	b29d      	uxth	r5, r3
          for (int i = 0; i < 12; i++)
     ece:	f10b 0b01 	add.w	fp, fp, #1
     ed2:	f1bb 0f0c 	cmp.w	fp, #12
     ed6:	d1e6      	bne.n	ea6 <BMSModuleManager::balanceCells(int)+0xa2>
          if (balance > 0)
     ed8:	b11d      	cbz	r5, ee2 <BMSModuleManager::balanceCells(int)+0xde>
            balancing = true;
     eda:	9a01      	ldr	r2, [sp, #4]
     edc:	2301      	movs	r3, #1
     ede:	f882 3d3d 	strb.w	r3, [r2, #3389]	; 0xd3d
          if (debug == 1)
     ee2:	9b00      	ldr	r3, [sp, #0]
     ee4:	2b01      	cmp	r3, #1
     ee6:	f000 80c9 	beq.w	107c <BMSModuleManager::balanceCells(int)+0x278>
          OUTmsg.buf[0] = 0X00;
     eea:	2400      	movs	r4, #0
     eec:	4a72      	ldr	r2, [pc, #456]	; (10b8 <BMSModuleManager::balanceCells(int)+0x2b4>)
     eee:	f8c8 4008 	str.w	r4, [r8, #8]
          OUTmsg.buf[4] = 0X00;
     ef2:	f8c8 400c 	str.w	r4, [r8, #12]
            if (bitRead(balance, i) == 1)
     ef6:	fa45 f304 	asr.w	r3, r5, r4
     efa:	f003 0301 	and.w	r3, r3, #1
          for (int i = 0; i < 8; i++)
     efe:	3401      	adds	r4, #1
            if (bitRead(balance, i) == 1)
     f00:	00db      	lsls	r3, r3, #3
          for (int i = 0; i < 8; i++)
     f02:	2c08      	cmp	r4, #8
     f04:	f802 3f01 	strb.w	r3, [r2, #1]!
     f08:	d1f5      	bne.n	ef6 <BMSModuleManager::balanceCells(int)+0xf2>
          switch (y)
     f0a:	f107 3bff 	add.w	fp, r7, #4294967295
     f0e:	f1bb 0f0b 	cmp.w	fp, #11
     f12:	d80a      	bhi.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
     f14:	e8df f00b 	tbb	[pc, fp]
     f18:	a2aaaea6 	.word	0xa2aaaea6
     f1c:	72767a9e 	.word	0x72767a9e
     f20:	06666a6e 	.word	0x06666a6e
              OUTmsg.id  = 0x1A5554AF;
     f24:	4b65      	ldr	r3, [pc, #404]	; (10bc <BMSModuleManager::balanceCells(int)+0x2b8>)
     f26:	f8c8 3000 	str.w	r3, [r8]
          OUTmsg.flags.extended = 1;
     f2a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
          Can0.write(OUTmsg);
     f2e:	4960      	ldr	r1, [pc, #384]	; (10b0 <BMSModuleManager::balanceCells(int)+0x2ac>)
     f30:	4863      	ldr	r0, [pc, #396]	; (10c0 <BMSModuleManager::balanceCells(int)+0x2bc>)
          OUTmsg.flags.extended = 1;
     f32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     f36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     f3a:	f043 0301 	orr.w	r3, r3, #1
     f3e:	f8a8 3006 	strh.w	r3, [r8, #6]
          Can0.write(OUTmsg);
     f42:	f007 fb21 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
          delay(1);
     f46:	2001      	movs	r0, #1
     f48:	f009 fb52 	bl	a5f0 <delay>
          for (int i = 8; i < 13; i++)
     f4c:	495d      	ldr	r1, [pc, #372]	; (10c4 <BMSModuleManager::balanceCells(int)+0x2c0>)
              OUTmsg.buf[i - 8] = 0x08;
     f4e:	2008      	movs	r0, #8
            if (bitRead(balance, i) == 1)
     f50:	fa45 f304 	asr.w	r3, r5, r4
     f54:	f013 0301 	ands.w	r3, r3, #1
          for (int i = 8; i < 13; i++)
     f58:	f104 0401 	add.w	r4, r4, #1
              OUTmsg.buf[i - 8] = 0x08;
     f5c:	bf14      	ite	ne
     f5e:	7008      	strbne	r0, [r1, #0]
              OUTmsg.buf[i - 8] = 0x00;
     f60:	700b      	strbeq	r3, [r1, #0]
          for (int i = 8; i < 13; i++)
     f62:	2c0d      	cmp	r4, #13
     f64:	f101 0101 	add.w	r1, r1, #1
     f68:	d1f2      	bne.n	f50 <BMSModuleManager::balanceCells(int)+0x14c>
          OUTmsg.buf[4] = 0xFE;
     f6a:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
     f6e:	f8c8 300c 	str.w	r3, [r8, #12]
          switch (y)
     f72:	f1bb 0f0b 	cmp.w	fp, #11
     f76:	d80a      	bhi.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
     f78:	e8df f00b 	tbb	[pc, fp]
     f7c:	60646830 	.word	0x60646830
     f80:	5054585c 	.word	0x5054585c
     f84:	06282c4c 	.word	0x06282c4c
              OUTmsg.id  = 0x1A5554B0;
     f88:	4b4f      	ldr	r3, [pc, #316]	; (10c8 <BMSModuleManager::balanceCells(int)+0x2c4>)
     f8a:	f8c8 3000 	str.w	r3, [r8]
          OUTmsg.flags.extended = 1;
     f8e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
          Can0.write(OUTmsg);
     f92:	4947      	ldr	r1, [pc, #284]	; (10b0 <BMSModuleManager::balanceCells(int)+0x2ac>)
     f94:	484a      	ldr	r0, [pc, #296]	; (10c0 <BMSModuleManager::balanceCells(int)+0x2bc>)
          OUTmsg.flags.extended = 1;
     f96:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
     f9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     f9e:	f043 0301 	orr.w	r3, r3, #1
      for (int y = 1; y < 63; y++)
     fa2:	3701      	adds	r7, #1
          OUTmsg.flags.extended = 1;
     fa4:	f8a8 3006 	strh.w	r3, [r8, #6]
          Can0.write(OUTmsg);
     fa8:	f007 faee 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      for (int y = 1; y < 63; y++)
     fac:	2f3f      	cmp	r7, #63	; 0x3f
     fae:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
     fb2:	f47f af6f 	bne.w	e94 <BMSModuleManager::balanceCells(int)+0x90>
      if (balancing == false)
     fb6:	9a01      	ldr	r2, [sp, #4]
     fb8:	f892 3d3d 	ldrb.w	r3, [r2, #3389]	; 0xd3d
     fbc:	2b00      	cmp	r3, #0
     fbe:	f43f af2e 	beq.w	e1e <BMSModuleManager::balanceCells(int)+0x1a>
  balcnt++;
     fc2:	f892 3d3e 	ldrb.w	r3, [r2, #3390]	; 0xd3e
     fc6:	3301      	adds	r3, #1
     fc8:	b2db      	uxtb	r3, r3
     fca:	e729      	b.n	e20 <BMSModuleManager::balanceCells(int)+0x1c>
              OUTmsg.id  = 0x1A5554AE;
     fcc:	4b3f      	ldr	r3, [pc, #252]	; (10cc <BMSModuleManager::balanceCells(int)+0x2c8>)
     fce:	f8c8 3000 	str.w	r3, [r8]
              break;
     fd2:	e7dc      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A5554AC;
     fd4:	4b3e      	ldr	r3, [pc, #248]	; (10d0 <BMSModuleManager::balanceCells(int)+0x2cc>)
     fd6:	f8c8 3000 	str.w	r3, [r8]
              break;
     fda:	e7d8      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A55540B;
     fdc:	4b3d      	ldr	r3, [pc, #244]	; (10d4 <BMSModuleManager::balanceCells(int)+0x2d0>)
     fde:	f8c8 3000 	str.w	r3, [r8]
              break;
     fe2:	e7d4      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A5554AD;
     fe4:	4b3c      	ldr	r3, [pc, #240]	; (10d8 <BMSModuleManager::balanceCells(int)+0x2d4>)
     fe6:	f8c8 3000 	str.w	r3, [r8]
              break;
     fea:	e79e      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A5554AB;
     fec:	4b3b      	ldr	r3, [pc, #236]	; (10dc <BMSModuleManager::balanceCells(int)+0x2d8>)
     fee:	f8c8 3000 	str.w	r3, [r8]
              break;
     ff2:	e79a      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55541A;
     ff4:	4b3a      	ldr	r3, [pc, #232]	; (10e0 <BMSModuleManager::balanceCells(int)+0x2dc>)
     ff6:	f8c8 3000 	str.w	r3, [r8]
              break;
     ffa:	e796      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A555418;
     ffc:	4b39      	ldr	r3, [pc, #228]	; (10e4 <BMSModuleManager::balanceCells(int)+0x2e0>)
     ffe:	f8c8 3000 	str.w	r3, [r8]
              break;
    1002:	e792      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A555416;
    1004:	4b38      	ldr	r3, [pc, #224]	; (10e8 <BMSModuleManager::balanceCells(int)+0x2e4>)
    1006:	f8c8 3000 	str.w	r3, [r8]
              break;
    100a:	e78e      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A555414;
    100c:	4b37      	ldr	r3, [pc, #220]	; (10ec <BMSModuleManager::balanceCells(int)+0x2e8>)
    100e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1012:	e78a      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55541B;
    1014:	4b36      	ldr	r3, [pc, #216]	; (10f0 <BMSModuleManager::balanceCells(int)+0x2ec>)
    1016:	f8c8 3000 	str.w	r3, [r8]
              break;
    101a:	e7b8      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555419;
    101c:	4b35      	ldr	r3, [pc, #212]	; (10f4 <BMSModuleManager::balanceCells(int)+0x2f0>)
    101e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1022:	e7b4      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555417;
    1024:	4b34      	ldr	r3, [pc, #208]	; (10f8 <BMSModuleManager::balanceCells(int)+0x2f4>)
    1026:	f8c8 3000 	str.w	r3, [r8]
              break;
    102a:	e7b0      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555415;
    102c:	4b33      	ldr	r3, [pc, #204]	; (10fc <BMSModuleManager::balanceCells(int)+0x2f8>)
    102e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1032:	e7ac      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555413;
    1034:	4b32      	ldr	r3, [pc, #200]	; (1100 <BMSModuleManager::balanceCells(int)+0x2fc>)
    1036:	f8c8 3000 	str.w	r3, [r8]
              break;
    103a:	e7a8      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555411;
    103c:	4b31      	ldr	r3, [pc, #196]	; (1104 <BMSModuleManager::balanceCells(int)+0x300>)
    103e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1042:	e7a4      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A55540F;
    1044:	4b30      	ldr	r3, [pc, #192]	; (1108 <BMSModuleManager::balanceCells(int)+0x304>)
    1046:	f8c8 3000 	str.w	r3, [r8]
              break;
    104a:	e7a0      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A55540D;
    104c:	4b2f      	ldr	r3, [pc, #188]	; (110c <BMSModuleManager::balanceCells(int)+0x308>)
    104e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1052:	e79c      	b.n	f8e <BMSModuleManager::balanceCells(int)+0x18a>
              OUTmsg.id  = 0x1A555412;
    1054:	4b2e      	ldr	r3, [pc, #184]	; (1110 <BMSModuleManager::balanceCells(int)+0x30c>)
    1056:	f8c8 3000 	str.w	r3, [r8]
              break;
    105a:	e766      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A555410;
    105c:	4b2d      	ldr	r3, [pc, #180]	; (1114 <BMSModuleManager::balanceCells(int)+0x310>)
    105e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1062:	e762      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55540A;
    1064:	4b2c      	ldr	r3, [pc, #176]	; (1118 <BMSModuleManager::balanceCells(int)+0x314>)
    1066:	f8c8 3000 	str.w	r3, [r8]
              break;
    106a:	e75e      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55540E;
    106c:	4b2b      	ldr	r3, [pc, #172]	; (111c <BMSModuleManager::balanceCells(int)+0x318>)
    106e:	f8c8 3000 	str.w	r3, [r8]
              break;
    1072:	e75a      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
              OUTmsg.id  = 0x1A55540C;
    1074:	4b2a      	ldr	r3, [pc, #168]	; (1120 <BMSModuleManager::balanceCells(int)+0x31c>)
    1076:	f8c8 3000 	str.w	r3, [r8]
              break;
    107a:	e756      	b.n	f2a <BMSModuleManager::balanceCells(int)+0x126>
            Serial.println();
    107c:	4829      	ldr	r0, [pc, #164]	; (1124 <BMSModuleManager::balanceCells(int)+0x320>)
    107e:	f008 fb53 	bl	9728 <Print::println()>
    1082:	2107      	movs	r1, #7
    1084:	4828      	ldr	r0, [pc, #160]	; (1128 <BMSModuleManager::balanceCells(int)+0x324>)
    1086:	f00b f897 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    108a:	4639      	mov	r1, r7
    108c:	4825      	ldr	r0, [pc, #148]	; (1124 <BMSModuleManager::balanceCells(int)+0x320>)
    108e:	f008 fb43 	bl	9718 <Print::print(long)>
    1092:	2103      	movs	r1, #3
    1094:	4825      	ldr	r0, [pc, #148]	; (112c <BMSModuleManager::balanceCells(int)+0x328>)
    1096:	f00b f88f 	bl	c1b8 <usb_serial_write>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    109a:	2300      	movs	r3, #0
    109c:	2210      	movs	r2, #16
    109e:	4629      	mov	r1, r5
    10a0:	4820      	ldr	r0, [pc, #128]	; (1124 <BMSModuleManager::balanceCells(int)+0x320>)
    10a2:	f008 fb59 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(int n, int base)			{ return print(n, base) + println(); }
    10a6:	481f      	ldr	r0, [pc, #124]	; (1124 <BMSModuleManager::balanceCells(int)+0x320>)
    10a8:	f008 fb3e 	bl	9728 <Print::println()>
    10ac:	e71d      	b.n	eea <BMSModuleManager::balanceCells(int)+0xe6>
    10ae:	bf00      	nop
    10b0:	1fff9180 	.word	0x1fff9180
    10b4:	42108421 	.word	0x42108421
    10b8:	1fff9187 	.word	0x1fff9187
    10bc:	1a5554af 	.word	0x1a5554af
    10c0:	1fffd1cc 	.word	0x1fffd1cc
    10c4:	1fff9188 	.word	0x1fff9188
    10c8:	1a5554b0 	.word	0x1a5554b0
    10cc:	1a5554ae 	.word	0x1a5554ae
    10d0:	1a5554ac 	.word	0x1a5554ac
    10d4:	1a55540b 	.word	0x1a55540b
    10d8:	1a5554ad 	.word	0x1a5554ad
    10dc:	1a5554ab 	.word	0x1a5554ab
    10e0:	1a55541a 	.word	0x1a55541a
    10e4:	1a555418 	.word	0x1a555418
    10e8:	1a555416 	.word	0x1a555416
    10ec:	1a555414 	.word	0x1a555414
    10f0:	1a55541b 	.word	0x1a55541b
    10f4:	1a555419 	.word	0x1a555419
    10f8:	1a555417 	.word	0x1a555417
    10fc:	1a555415 	.word	0x1a555415
    1100:	1a555413 	.word	0x1a555413
    1104:	1a555411 	.word	0x1a555411
    1108:	1a55540f 	.word	0x1a55540f
    110c:	1a55540d 	.word	0x1a55540d
    1110:	1a555412 	.word	0x1a555412
    1114:	1a555410 	.word	0x1a555410
    1118:	1a55540a 	.word	0x1a55540a
    111c:	1a55540e 	.word	0x1a55540e
    1120:	1a55540c 	.word	0x1a55540c
    1124:	1fff89fc 	.word	0x1fff89fc
    1128:	00013cb0 	.word	0x00013cb0
    112c:	00013cb8 	.word	0x00013cb8
    if (balcnt == 1)
    1130:	2c01      	cmp	r4, #1
    1132:	f47f ae91 	bne.w	e58 <BMSModuleManager::balanceCells(int)+0x54>
      OUTmsg.flags.extended = 1;
    1136:	f8df 821c 	ldr.w	r8, [pc, #540]	; 1354 <BMSModuleManager::balanceCells(int)+0x550>
      Can0.write(OUTmsg);
    113a:	4887      	ldr	r0, [pc, #540]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.flags.extended = 1;
    113c:	f8b8 3006 	ldrh.w	r3, [r8, #6]
    1140:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    1144:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    1148:	f043 0301 	orr.w	r3, r3, #1
      OUTmsg.buf[0] = 0X00;
    114c:	2500      	movs	r5, #0
      Can0.write(OUTmsg);
    114e:	4641      	mov	r1, r8
      OUTmsg.flags.extended = 1;
    1150:	f8a8 3006 	strh.w	r3, [r8, #6]
      OUTmsg.id  = 0x1A55540A;
    1154:	4b81      	ldr	r3, [pc, #516]	; (135c <BMSModuleManager::balanceCells(int)+0x558>)
    1156:	f8c8 3000 	str.w	r3, [r8]
      OUTmsg.buf[0] = 0X00;
    115a:	f8c8 5008 	str.w	r5, [r8, #8]
      OUTmsg.buf[4] = 0X00;
    115e:	f8c8 500c 	str.w	r5, [r8, #12]
      Can0.write(OUTmsg);
    1162:	f007 fa11 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1166:	4620      	mov	r0, r4
    1168:	f009 fa42 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A55540C;
    116c:	4b7c      	ldr	r3, [pc, #496]	; (1360 <BMSModuleManager::balanceCells(int)+0x55c>)
      Can0.write(OUTmsg);
    116e:	487a      	ldr	r0, [pc, #488]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540C;
    1170:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1174:	4641      	mov	r1, r8
    1176:	f007 fa07 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    117a:	4620      	mov	r0, r4
    117c:	f009 fa38 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A55540E;
    1180:	4b78      	ldr	r3, [pc, #480]	; (1364 <BMSModuleManager::balanceCells(int)+0x560>)
      Can0.write(OUTmsg);
    1182:	4875      	ldr	r0, [pc, #468]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540E;
    1184:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1188:	4641      	mov	r1, r8
    118a:	f007 f9fd 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    118e:	4620      	mov	r0, r4
    1190:	f009 fa2e 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A555410;
    1194:	4b74      	ldr	r3, [pc, #464]	; (1368 <BMSModuleManager::balanceCells(int)+0x564>)
      Can0.write(OUTmsg);
    1196:	4870      	ldr	r0, [pc, #448]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555410;
    1198:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    119c:	4641      	mov	r1, r8
    119e:	f007 f9f3 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11a2:	4620      	mov	r0, r4
    11a4:	f009 fa24 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A555412;
    11a8:	4b70      	ldr	r3, [pc, #448]	; (136c <BMSModuleManager::balanceCells(int)+0x568>)
      Can0.write(OUTmsg);
    11aa:	486b      	ldr	r0, [pc, #428]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555412;
    11ac:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    11b0:	4641      	mov	r1, r8
    11b2:	f007 f9e9 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11b6:	4620      	mov	r0, r4
    11b8:	f009 fa1a 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A555414;
    11bc:	4b6c      	ldr	r3, [pc, #432]	; (1370 <BMSModuleManager::balanceCells(int)+0x56c>)
      Can0.write(OUTmsg);
    11be:	4866      	ldr	r0, [pc, #408]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555414;
    11c0:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    11c4:	4641      	mov	r1, r8
    11c6:	f007 f9df 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11ca:	4620      	mov	r0, r4
    11cc:	f009 fa10 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A555416;
    11d0:	4b68      	ldr	r3, [pc, #416]	; (1374 <BMSModuleManager::balanceCells(int)+0x570>)
      Can0.write(OUTmsg);
    11d2:	4861      	ldr	r0, [pc, #388]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555416;
    11d4:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    11d8:	4641      	mov	r1, r8
    11da:	f007 f9d5 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11de:	4620      	mov	r0, r4
    11e0:	f009 fa06 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A555418;
    11e4:	4b64      	ldr	r3, [pc, #400]	; (1378 <BMSModuleManager::balanceCells(int)+0x574>)
      Can0.write(OUTmsg);
    11e6:	485c      	ldr	r0, [pc, #368]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555418;
    11e8:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    11ec:	4641      	mov	r1, r8
    11ee:	f007 f9cb 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    11f2:	4620      	mov	r0, r4
    11f4:	f009 f9fc 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A55541A;
    11f8:	4b60      	ldr	r3, [pc, #384]	; (137c <BMSModuleManager::balanceCells(int)+0x578>)
      Can0.write(OUTmsg);
    11fa:	4857      	ldr	r0, [pc, #348]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55541A;
    11fc:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1200:	4641      	mov	r1, r8
    1202:	f007 f9c1 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1206:	4620      	mov	r0, r4
    1208:	f009 f9f2 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A5554AB;
    120c:	4b5c      	ldr	r3, [pc, #368]	; (1380 <BMSModuleManager::balanceCells(int)+0x57c>)
      Can0.write(OUTmsg);
    120e:	4852      	ldr	r0, [pc, #328]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AB;
    1210:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1214:	4641      	mov	r1, r8
    1216:	f007 f9b7 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    121a:	4620      	mov	r0, r4
    121c:	f009 f9e8 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A5554AD;
    1220:	4b58      	ldr	r3, [pc, #352]	; (1384 <BMSModuleManager::balanceCells(int)+0x580>)
      Can0.write(OUTmsg);
    1222:	484d      	ldr	r0, [pc, #308]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AD;
    1224:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1228:	4641      	mov	r1, r8
    122a:	f007 f9ad 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    122e:	4620      	mov	r0, r4
    1230:	f009 f9de 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A5554AF;
    1234:	4b54      	ldr	r3, [pc, #336]	; (1388 <BMSModuleManager::balanceCells(int)+0x584>)
      Can0.write(OUTmsg);
    1236:	4848      	ldr	r0, [pc, #288]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AF;
    1238:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    123c:	4641      	mov	r1, r8
    123e:	f007 f9a3 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1242:	4620      	mov	r0, r4
    1244:	f009 f9d4 	bl	a5f0 <delay>
      OUTmsg.buf[4] = 0xFE;
    1248:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
      Can0.write(OUTmsg);
    124c:	4641      	mov	r1, r8
      OUTmsg.buf[4] = 0xFE;
    124e:	f8c8 300c 	str.w	r3, [r8, #12]
      Can0.write(OUTmsg);
    1252:	4841      	ldr	r0, [pc, #260]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540B;
    1254:	4b4d      	ldr	r3, [pc, #308]	; (138c <BMSModuleManager::balanceCells(int)+0x588>)
    1256:	f8c8 3000 	str.w	r3, [r8]
      OUTmsg.buf[0] = 0X00;
    125a:	f8c8 5008 	str.w	r5, [r8, #8]
      Can0.write(OUTmsg);
    125e:	f007 f993 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1262:	4620      	mov	r0, r4
    1264:	f009 f9c4 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A55540D;
    1268:	4b49      	ldr	r3, [pc, #292]	; (1390 <BMSModuleManager::balanceCells(int)+0x58c>)
      Can0.write(OUTmsg);
    126a:	483b      	ldr	r0, [pc, #236]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540D;
    126c:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1270:	4641      	mov	r1, r8
    1272:	f007 f989 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1276:	4620      	mov	r0, r4
    1278:	f009 f9ba 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A55540F;
    127c:	4b45      	ldr	r3, [pc, #276]	; (1394 <BMSModuleManager::balanceCells(int)+0x590>)
      Can0.write(OUTmsg);
    127e:	4836      	ldr	r0, [pc, #216]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55540F;
    1280:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1284:	4641      	mov	r1, r8
    1286:	f007 f97f 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    128a:	4620      	mov	r0, r4
    128c:	f009 f9b0 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A555411;
    1290:	4b41      	ldr	r3, [pc, #260]	; (1398 <BMSModuleManager::balanceCells(int)+0x594>)
      Can0.write(OUTmsg);
    1292:	4831      	ldr	r0, [pc, #196]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555411;
    1294:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1298:	4641      	mov	r1, r8
    129a:	f007 f975 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    129e:	4620      	mov	r0, r4
    12a0:	f009 f9a6 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A555413;
    12a4:	4b3d      	ldr	r3, [pc, #244]	; (139c <BMSModuleManager::balanceCells(int)+0x598>)
      Can0.write(OUTmsg);
    12a6:	482c      	ldr	r0, [pc, #176]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555413;
    12a8:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12ac:	4641      	mov	r1, r8
    12ae:	f007 f96b 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    12b2:	4620      	mov	r0, r4
    12b4:	f009 f99c 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A555415;
    12b8:	4b39      	ldr	r3, [pc, #228]	; (13a0 <BMSModuleManager::balanceCells(int)+0x59c>)
      Can0.write(OUTmsg);
    12ba:	4827      	ldr	r0, [pc, #156]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555415;
    12bc:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12c0:	4641      	mov	r1, r8
    12c2:	f007 f961 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    12c6:	4620      	mov	r0, r4
    12c8:	f009 f992 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A555417;
    12cc:	4b35      	ldr	r3, [pc, #212]	; (13a4 <BMSModuleManager::balanceCells(int)+0x5a0>)
      Can0.write(OUTmsg);
    12ce:	4822      	ldr	r0, [pc, #136]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555417;
    12d0:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12d4:	4641      	mov	r1, r8
    12d6:	f007 f957 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    12da:	4620      	mov	r0, r4
    12dc:	f009 f988 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A555419;
    12e0:	4b31      	ldr	r3, [pc, #196]	; (13a8 <BMSModuleManager::balanceCells(int)+0x5a4>)
      Can0.write(OUTmsg);
    12e2:	481d      	ldr	r0, [pc, #116]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A555419;
    12e4:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12e8:	4641      	mov	r1, r8
    12ea:	f007 f94d 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    12ee:	4620      	mov	r0, r4
    12f0:	f009 f97e 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A55541B;
    12f4:	4b2d      	ldr	r3, [pc, #180]	; (13ac <BMSModuleManager::balanceCells(int)+0x5a8>)
      Can0.write(OUTmsg);
    12f6:	4818      	ldr	r0, [pc, #96]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A55541B;
    12f8:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    12fc:	4641      	mov	r1, r8
    12fe:	f007 f943 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1302:	4620      	mov	r0, r4
    1304:	f009 f974 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A5554AC;
    1308:	4b29      	ldr	r3, [pc, #164]	; (13b0 <BMSModuleManager::balanceCells(int)+0x5ac>)
      Can0.write(OUTmsg);
    130a:	4813      	ldr	r0, [pc, #76]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AC;
    130c:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1310:	4641      	mov	r1, r8
    1312:	f007 f939 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    1316:	4620      	mov	r0, r4
    1318:	f009 f96a 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A5554AE;
    131c:	4b25      	ldr	r3, [pc, #148]	; (13b4 <BMSModuleManager::balanceCells(int)+0x5b0>)
      Can0.write(OUTmsg);
    131e:	480e      	ldr	r0, [pc, #56]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554AE;
    1320:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1324:	4641      	mov	r1, r8
    1326:	f007 f92f 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    132a:	4620      	mov	r0, r4
    132c:	f009 f960 	bl	a5f0 <delay>
      OUTmsg.id  = 0x1A5554B0;
    1330:	4b21      	ldr	r3, [pc, #132]	; (13b8 <BMSModuleManager::balanceCells(int)+0x5b4>)
      Can0.write(OUTmsg);
    1332:	4809      	ldr	r0, [pc, #36]	; (1358 <BMSModuleManager::balanceCells(int)+0x554>)
      OUTmsg.id  = 0x1A5554B0;
    1334:	f8c8 3000 	str.w	r3, [r8]
      Can0.write(OUTmsg);
    1338:	4641      	mov	r1, r8
    133a:	f007 f925 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
      delay(1);
    133e:	4620      	mov	r0, r4
    1340:	f009 f956 	bl	a5f0 <delay>
  balcnt++;
    1344:	9a01      	ldr	r2, [sp, #4]
    1346:	f892 3d3e 	ldrb.w	r3, [r2, #3390]	; 0xd3e
      balancing = false;
    134a:	f882 5d3d 	strb.w	r5, [r2, #3389]	; 0xd3d
  balcnt++;
    134e:	3301      	adds	r3, #1
    1350:	b2db      	uxtb	r3, r3
    1352:	e565      	b.n	e20 <BMSModuleManager::balanceCells(int)+0x1c>
    1354:	1fff9180 	.word	0x1fff9180
    1358:	1fffd1cc 	.word	0x1fffd1cc
    135c:	1a55540a 	.word	0x1a55540a
    1360:	1a55540c 	.word	0x1a55540c
    1364:	1a55540e 	.word	0x1a55540e
    1368:	1a555410 	.word	0x1a555410
    136c:	1a555412 	.word	0x1a555412
    1370:	1a555414 	.word	0x1a555414
    1374:	1a555416 	.word	0x1a555416
    1378:	1a555418 	.word	0x1a555418
    137c:	1a55541a 	.word	0x1a55541a
    1380:	1a5554ab 	.word	0x1a5554ab
    1384:	1a5554ad 	.word	0x1a5554ad
    1388:	1a5554af 	.word	0x1a5554af
    138c:	1a55540b 	.word	0x1a55540b
    1390:	1a55540d 	.word	0x1a55540d
    1394:	1a55540f 	.word	0x1a55540f
    1398:	1a555411 	.word	0x1a555411
    139c:	1a555413 	.word	0x1a555413
    13a0:	1a555415 	.word	0x1a555415
    13a4:	1a555417 	.word	0x1a555417
    13a8:	1a555419 	.word	0x1a555419
    13ac:	1a55541b 	.word	0x1a55541b
    13b0:	1a5554ac 	.word	0x1a5554ac
    13b4:	1a5554ae 	.word	0x1a5554ae
    13b8:	1a5554b0 	.word	0x1a5554b0

000013bc <BMSModuleManager::seriescells()>:
{
    13bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  spack = 0;
    13be:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
    13c2:	2300      	movs	r3, #0
    13c4:	f500 5674 	add.w	r6, r0, #15616	; 0x3d00
    13c8:	f8c7 3d40 	str.w	r3, [r7, #3392]	; 0xd40
  for (int y = 1; y < 63; y++)
    13cc:	f500 7492 	add.w	r4, r0, #292	; 0x124
    13d0:	3634      	adds	r6, #52	; 0x34
    13d2:	e002      	b.n	13da <BMSModuleManager::seriescells()+0x1e>
    13d4:	34f8      	adds	r4, #248	; 0xf8
    13d6:	42b4      	cmp	r4, r6
    13d8:	d00f      	beq.n	13fa <BMSModuleManager::seriescells()+0x3e>
    if (modules[y].isExisting())
    13da:	4620      	mov	r0, r4
    13dc:	f7ff fc7c 	bl	cd8 <BMSModule::isExisting()>
    13e0:	2800      	cmp	r0, #0
    13e2:	d0f7      	beq.n	13d4 <BMSModuleManager::seriescells()+0x18>
      spack = spack + modules[y].getscells();
    13e4:	4620      	mov	r0, r4
    13e6:	f8d7 5d40 	ldr.w	r5, [r7, #3392]	; 0xd40
    13ea:	f7ff f975 	bl	6d8 <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
    13ee:	34f8      	adds	r4, #248	; 0xf8
      spack = spack + modules[y].getscells();
    13f0:	4405      	add	r5, r0
  for (int y = 1; y < 63; y++)
    13f2:	42b4      	cmp	r4, r6
      spack = spack + modules[y].getscells();
    13f4:	f8c7 5d40 	str.w	r5, [r7, #3392]	; 0xd40
  for (int y = 1; y < 63; y++)
    13f8:	d1ef      	bne.n	13da <BMSModuleManager::seriescells()+0x1e>
}
    13fa:	f8d7 0d40 	ldr.w	r0, [r7, #3392]	; 0xd40
    13fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001400 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>:
  if (type == 1)
    1400:	2b01      	cmp	r3, #1
{
    1402:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1406:	4605      	mov	r5, r0
    1408:	460e      	mov	r6, r1
    140a:	4617      	mov	r7, r2
  if (type == 1)
    140c:	d008      	beq.n	1420 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x20>
  if (type == 2)
    140e:	2b02      	cmp	r3, #2
    1410:	461c      	mov	r4, r3
    1412:	d103      	bne.n	141c <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x1c>
      if (msg.buf[5] != 0xDF) //Check module is not initializing OR a "spoof module"
    1414:	7b4a      	ldrb	r2, [r1, #13]
    CMU = (msg.id & 0x0F);
    1416:	680b      	ldr	r3, [r1, #0]
      if (msg.buf[5] != 0xDF) //Check module is not initializing OR a "spoof module"
    1418:	2adf      	cmp	r2, #223	; 0xdf
    141a:	d138      	bne.n	148e <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x8e>
}
    141c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CMU = (msg.id & 0xFF);
    1420:	6808      	ldr	r0, [r1, #0]
    1422:	fa5f f880 	uxtb.w	r8, r0
    if (CMU > 10 && CMU < 60)
    1426:	f1a8 030b 	sub.w	r3, r8, #11
    142a:	2b30      	cmp	r3, #48	; 0x30
    142c:	d80e      	bhi.n	144c <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x4c>
      CMU = (CMU * 0.5) + 1;
    142e:	f000 000f 	and.w	r0, r0, #15
    1432:	f00b fd4d 	bl	ced0 <__aeabi_i2f>
    1436:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    143a:	f00b fd9d 	bl	cf78 <__aeabi_fmul>
    143e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    1442:	f00b fc91 	bl	cd68 <__addsf3>
    1446:	f00b ff5d 	bl	d304 <__aeabi_f2iz>
    144a:	4680      	mov	r8, r0
      modules[CMU].setExists(true);
    144c:	ebc8 1448 	rsb	r4, r8, r8, lsl #5
    1450:	eb05 04c4 	add.w	r4, r5, r4, lsl #3
    1454:	342c      	adds	r4, #44	; 0x2c
    1456:	2101      	movs	r1, #1
    1458:	4620      	mov	r0, r4
    145a:	f7ff fc49 	bl	cf0 <BMSModule::setExists(bool)>
      modules[CMU].setReset(true);
    145e:	2101      	movs	r1, #1
    1460:	4620      	mov	r0, r4
    1462:	f7ff fc4d 	bl	d00 <BMSModule::setReset(bool)>
      modules[CMU].decodetemp(msg, 1);
    1466:	2201      	movs	r2, #1
    1468:	4631      	mov	r1, r6
    146a:	4620      	mov	r0, r4
    146c:	f7ff f832 	bl	4d4 <BMSModule::decodetemp(CAN_message_t&, int)>
      if (debug == 1)
    1470:	2f01      	cmp	r7, #1
    1472:	d1d3      	bne.n	141c <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x1c>
        Serial.println();
    1474:	4818      	ldr	r0, [pc, #96]	; (14d8 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xd8>)
    1476:	f008 f957 	bl	9728 <Print::println()>
	size_t print(int n)				{ return print((long)n); }
    147a:	4641      	mov	r1, r8
    147c:	4816      	ldr	r0, [pc, #88]	; (14d8 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xd8>)
    147e:	f008 f94b 	bl	9718 <Print::print(long)>
}
    1482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    1486:	4815      	ldr	r0, [pc, #84]	; (14dc <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xdc>)
    1488:	210d      	movs	r1, #13
    148a:	f00a be95 	b.w	c1b8 <usb_serial_write>
    CMU = (msg.id & 0x0F);
    148e:	f003 080f 	and.w	r8, r3, #15
      CMU++;
    1492:	f108 0801 	add.w	r8, r8, #1
        modules[CMU].setExists(true);
    1496:	ebc8 1348 	rsb	r3, r8, r8, lsl #5
    149a:	eb00 05c3 	add.w	r5, r0, r3, lsl #3
    149e:	352c      	adds	r5, #44	; 0x2c
    14a0:	2101      	movs	r1, #1
    14a2:	4628      	mov	r0, r5
    14a4:	f7ff fc24 	bl	cf0 <BMSModule::setExists(bool)>
        modules[CMU].setReset(true);
    14a8:	2101      	movs	r1, #1
    14aa:	4628      	mov	r0, r5
    14ac:	f7ff fc28 	bl	d00 <BMSModule::setReset(bool)>
        modules[CMU].decodetemp(msg, 2);
    14b0:	4622      	mov	r2, r4
    14b2:	4631      	mov	r1, r6
    14b4:	4628      	mov	r0, r5
    14b6:	f7ff f80d 	bl	4d4 <BMSModule::decodetemp(CAN_message_t&, int)>
        if (debug == 1)
    14ba:	2f01      	cmp	r7, #1
    14bc:	d1ae      	bne.n	141c <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0x1c>
          Serial.println();
    14be:	4806      	ldr	r0, [pc, #24]	; (14d8 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xd8>)
    14c0:	f008 f932 	bl	9728 <Print::println()>
    14c4:	4641      	mov	r1, r8
    14c6:	4804      	ldr	r0, [pc, #16]	; (14d8 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xd8>)
    14c8:	f008 f926 	bl	9718 <Print::print(long)>
}
    14cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    14d0:	4803      	ldr	r0, [pc, #12]	; (14e0 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)+0xe0>)
    14d2:	210d      	movs	r1, #13
    14d4:	f00a be70 	b.w	c1b8 <usb_serial_write>
    14d8:	1fff89fc 	.word	0x1fff89fc
    14dc:	00013cbc 	.word	0x00013cbc
    14e0:	00013ccc 	.word	0x00013ccc

000014e4 <BMSModuleManager::decodecan(CAN_message_t&, int)>:
  if (balancing == false)
    14e4:	f500 5340 	add.w	r3, r0, #12288	; 0x3000
    14e8:	f893 3d3d 	ldrb.w	r3, [r3, #3389]	; 0xd3d
    14ec:	b103      	cbz	r3, 14f0 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xc>
    14ee:	4770      	bx	lr
{
    14f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (msg.id)
    14f2:	680b      	ldr	r3, [r1, #0]
    14f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
{
    14f8:	b083      	sub	sp, #12
    14fa:	4605      	mov	r5, r0
    14fc:	460c      	mov	r4, r1
    switch (msg.id)
    14fe:	2b3e      	cmp	r3, #62	; 0x3e
    1500:	d840      	bhi.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
    1502:	e8df f013 	tbh	[pc, r3, lsl #1]
    1506:	0064      	.short	0x0064
    1508:	0067006d 	.word	0x0067006d
    150c:	006a0118 	.word	0x006a0118
    1510:	00730070 	.word	0x00730070
    1514:	00760113 	.word	0x00760113
    1518:	007c0079 	.word	0x007c0079
    151c:	009b007f 	.word	0x009b007f
    1520:	00a1009e 	.word	0x00a1009e
    1524:	00a600a4 	.word	0x00a600a4
    1528:	00ac00a9 	.word	0x00ac00a9
    152c:	00b100af 	.word	0x00b100af
    1530:	00b700b4 	.word	0x00b700b4
    1534:	00bc00ba 	.word	0x00bc00ba
    1538:	00c200bf 	.word	0x00c200bf
    153c:	00c700c5 	.word	0x00c700c5
    1540:	00cd00ca 	.word	0x00cd00ca
    1544:	011500d0 	.word	0x011500d0
    1548:	00d2011a 	.word	0x00d2011a
    154c:	00d700d5 	.word	0x00d700d5
    1550:	00dd00da 	.word	0x00dd00da
    1554:	00e0003f 	.word	0x00e0003f
    1558:	00e600e3 	.word	0x00e600e3
    155c:	00e9003f 	.word	0x00e9003f
    1560:	00ef00ec 	.word	0x00ef00ec
    1564:	00f2003f 	.word	0x00f2003f
    1568:	00f800f5 	.word	0x00f800f5
    156c:	00fb003f 	.word	0x00fb003f
    1570:	010100fe 	.word	0x010100fe
    1574:	0104003f 	.word	0x0104003f
    1578:	010a0107 	.word	0x010a0107
    157c:	010d003f 	.word	0x010d003f
    1580:	00410110 	.word	0x00410110
}
    1584:	b003      	add	sp, #12
    1586:	bdf0      	pop	{r4, r5, r6, r7, pc}
        Id = 2;
    1588:	2702      	movs	r7, #2
        CMU = 16;
    158a:	2610      	movs	r6, #16
        if (msg.buf[2] != 0xFF && msg.buf[5] != 0xFF && msg.buf[7] != 0xFF) //Check module is not initializing OR a "spoof module"
    158c:	7aa3      	ldrb	r3, [r4, #10]
    158e:	2bff      	cmp	r3, #255	; 0xff
    1590:	d0f8      	beq.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
    1592:	7b63      	ldrb	r3, [r4, #13]
    1594:	2bff      	cmp	r3, #255	; 0xff
    1596:	d0f5      	beq.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
    1598:	7be3      	ldrb	r3, [r4, #15]
    159a:	2bff      	cmp	r3, #255	; 0xff
    159c:	d0f2      	beq.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
          if (debug == 1)
    159e:	2a01      	cmp	r2, #1
    15a0:	f000 80e4 	beq.w	176c <BMSModuleManager::decodecan(CAN_message_t&, int)+0x288>
          modules[CMU].setExists(true);
    15a4:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
    15a8:	eb05 06c6 	add.w	r6, r5, r6, lsl #3
    15ac:	362c      	adds	r6, #44	; 0x2c
    15ae:	4630      	mov	r0, r6
    15b0:	2101      	movs	r1, #1
    15b2:	f7ff fb9d 	bl	cf0 <BMSModule::setExists(bool)>
          modules[CMU].setReset(true);
    15b6:	4630      	mov	r0, r6
    15b8:	2101      	movs	r1, #1
    15ba:	f7ff fba1 	bl	d00 <BMSModule::setReset(bool)>
          modules[CMU].decodecan(Id, msg);
    15be:	4622      	mov	r2, r4
    15c0:	4639      	mov	r1, r7
    15c2:	4630      	mov	r0, r6
}
    15c4:	b003      	add	sp, #12
    15c6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          modules[CMU].decodecan(Id, msg);
    15ca:	f7ff b9c3 	b.w	954 <BMSModule::decodecan(int, CAN_message_t&)>
        Id = 0;
    15ce:	2700      	movs	r7, #0
        CMU = 1;
    15d0:	2601      	movs	r6, #1
    15d2:	e7db      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    15d4:	2702      	movs	r7, #2
        CMU = 1;
    15d6:	2601      	movs	r6, #1
    15d8:	e7d8      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    15da:	2700      	movs	r7, #0
        CMU = 2;
    15dc:	2602      	movs	r6, #2
    15de:	e7d5      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    15e0:	2701      	movs	r7, #1
        CMU = 1;
    15e2:	463e      	mov	r6, r7
    15e4:	e7d2      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    15e6:	2701      	movs	r7, #1
        CMU = 2;
    15e8:	2602      	movs	r6, #2
    15ea:	e7cf      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    15ec:	2702      	movs	r7, #2
        CMU = 2;
    15ee:	463e      	mov	r6, r7
    15f0:	e7cc      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    15f2:	2700      	movs	r7, #0
        CMU = 3;
    15f4:	2603      	movs	r6, #3
    15f6:	e7c9      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    15f8:	2701      	movs	r7, #1
        CMU = 3;
    15fa:	2603      	movs	r6, #3
    15fc:	e7c6      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    15fe:	2702      	movs	r7, #2
        CMU = 3;
    1600:	2603      	movs	r6, #3
    1602:	e7c3      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 3;
    1604:	2603      	movs	r6, #3
        if (msg.buf[2] != 0xFF) //Check module is not initializing OR a "spoof module"
    1606:	7aa3      	ldrb	r3, [r4, #10]
    1608:	2bff      	cmp	r3, #255	; 0xff
    160a:	d0bb      	beq.n	1584 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa0>
          if (debug == 1)
    160c:	2a01      	cmp	r2, #1
    160e:	f000 8097 	beq.w	1740 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x25c>
          modules[CMU].setExists(true);
    1612:	ebc6 1646 	rsb	r6, r6, r6, lsl #5
    1616:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
    161a:	352c      	adds	r5, #44	; 0x2c
    161c:	4628      	mov	r0, r5
    161e:	2101      	movs	r1, #1
    1620:	f7ff fb66 	bl	cf0 <BMSModule::setExists(bool)>
          modules[CMU].setReset(true);
    1624:	4628      	mov	r0, r5
    1626:	2101      	movs	r1, #1
    1628:	f7ff fb6a 	bl	d00 <BMSModule::setReset(bool)>
          modules[CMU].decodecan(Id, msg);
    162c:	4622      	mov	r2, r4
    162e:	2103      	movs	r1, #3
    1630:	4628      	mov	r0, r5
}
    1632:	b003      	add	sp, #12
    1634:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          modules[CMU].decodecan(Id, msg);
    1638:	f7ff b98c 	b.w	954 <BMSModule::decodecan(int, CAN_message_t&)>
        Id = 0;
    163c:	2700      	movs	r7, #0
        CMU = 4;
    163e:	2604      	movs	r6, #4
    1640:	e7a4      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1642:	2701      	movs	r7, #1
        CMU = 4;
    1644:	2604      	movs	r6, #4
    1646:	e7a1      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    1648:	2702      	movs	r7, #2
        CMU = 4;
    164a:	2604      	movs	r6, #4
    164c:	e79e      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 4;
    164e:	2604      	movs	r6, #4
    1650:	e7d9      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    1652:	2700      	movs	r7, #0
        CMU = 5;
    1654:	2605      	movs	r6, #5
    1656:	e799      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1658:	2701      	movs	r7, #1
        CMU = 5;
    165a:	2605      	movs	r6, #5
    165c:	e796      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    165e:	2702      	movs	r7, #2
        CMU = 5;
    1660:	2605      	movs	r6, #5
    1662:	e793      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 5;
    1664:	2605      	movs	r6, #5
    1666:	e7ce      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    1668:	2700      	movs	r7, #0
        CMU = 6;
    166a:	2606      	movs	r6, #6
    166c:	e78e      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    166e:	2701      	movs	r7, #1
        CMU = 6;
    1670:	2606      	movs	r6, #6
    1672:	e78b      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    1674:	2702      	movs	r7, #2
        CMU = 6;
    1676:	2606      	movs	r6, #6
    1678:	e788      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 6;
    167a:	2606      	movs	r6, #6
    167c:	e7c3      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    167e:	2700      	movs	r7, #0
        CMU = 7;
    1680:	2607      	movs	r6, #7
    1682:	e783      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1684:	2701      	movs	r7, #1
        CMU = 7;
    1686:	2607      	movs	r6, #7
    1688:	e780      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    168a:	2702      	movs	r7, #2
        CMU = 7;
    168c:	2607      	movs	r6, #7
    168e:	e77d      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 7;
    1690:	2607      	movs	r6, #7
    1692:	e7b8      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    1694:	2700      	movs	r7, #0
        CMU = 8;
    1696:	2608      	movs	r6, #8
        break;
    1698:	e778      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    169a:	2701      	movs	r7, #1
        CMU = 8;
    169c:	2608      	movs	r6, #8
        break;
    169e:	e775      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16a0:	2702      	movs	r7, #2
        CMU = 8;
    16a2:	2608      	movs	r6, #8
        break;
    16a4:	e772      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 8;
    16a6:	2608      	movs	r6, #8
        break;
    16a8:	e7ad      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 2;
    16aa:	2702      	movs	r7, #2
        CMU = 9;
    16ac:	2609      	movs	r6, #9
    16ae:	e76d      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 9;
    16b0:	2609      	movs	r6, #9
    16b2:	e7a8      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    16b4:	2700      	movs	r7, #0
        CMU = 10;
    16b6:	260a      	movs	r6, #10
    16b8:	e768      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    16ba:	2701      	movs	r7, #1
        CMU = 10;
    16bc:	260a      	movs	r6, #10
    16be:	e765      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16c0:	2702      	movs	r7, #2
        CMU = 10;
    16c2:	260a      	movs	r6, #10
    16c4:	e762      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    16c6:	2700      	movs	r7, #0
        CMU = 11;
    16c8:	260b      	movs	r6, #11
    16ca:	e75f      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    16cc:	2701      	movs	r7, #1
        CMU = 11;
    16ce:	260b      	movs	r6, #11
    16d0:	e75c      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16d2:	2702      	movs	r7, #2
        CMU = 11;
    16d4:	260b      	movs	r6, #11
    16d6:	e759      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    16d8:	2700      	movs	r7, #0
        CMU = 12;
    16da:	260c      	movs	r6, #12
    16dc:	e756      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    16de:	2701      	movs	r7, #1
        CMU = 12;
    16e0:	260c      	movs	r6, #12
    16e2:	e753      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16e4:	2702      	movs	r7, #2
        CMU = 12;
    16e6:	260c      	movs	r6, #12
    16e8:	e750      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    16ea:	2700      	movs	r7, #0
        CMU = 13;
    16ec:	260d      	movs	r6, #13
    16ee:	e74d      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    16f0:	2701      	movs	r7, #1
        CMU = 13;
    16f2:	260d      	movs	r6, #13
    16f4:	e74a      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    16f6:	2702      	movs	r7, #2
        CMU = 13;
    16f8:	260d      	movs	r6, #13
    16fa:	e747      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    16fc:	2700      	movs	r7, #0
        CMU = 14;
    16fe:	260e      	movs	r6, #14
    1700:	e744      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1702:	2701      	movs	r7, #1
        CMU = 14;
    1704:	260e      	movs	r6, #14
    1706:	e741      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    1708:	2702      	movs	r7, #2
        CMU = 14;
    170a:	260e      	movs	r6, #14
    170c:	e73e      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    170e:	2700      	movs	r7, #0
        CMU = 15;
    1710:	260f      	movs	r6, #15
    1712:	e73b      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1714:	2701      	movs	r7, #1
        CMU = 15;
    1716:	260f      	movs	r6, #15
    1718:	e738      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 2;
    171a:	2702      	movs	r7, #2
        CMU = 15;
    171c:	260f      	movs	r6, #15
    171e:	e735      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 0;
    1720:	2700      	movs	r7, #0
        CMU = 16;
    1722:	2610      	movs	r6, #16
    1724:	e732      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        Id = 1;
    1726:	2701      	movs	r7, #1
        CMU = 16;
    1728:	2610      	movs	r6, #16
    172a:	e72f      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
        CMU = 2;
    172c:	2602      	movs	r6, #2
    172e:	e76a      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
        Id = 0;
    1730:	2700      	movs	r7, #0
        CMU = 9;
    1732:	2609      	movs	r6, #9
    1734:	e72a      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
    switch (msg.id)
    1736:	2601      	movs	r6, #1
    1738:	e765      	b.n	1606 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x122>
    173a:	2701      	movs	r7, #1
    173c:	2609      	movs	r6, #9
    173e:	e725      	b.n	158c <BMSModuleManager::decodecan(CAN_message_t&, int)+0xa8>
            Serial.println();
    1740:	4815      	ldr	r0, [pc, #84]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    1742:	9201      	str	r2, [sp, #4]
    1744:	f007 fff0 	bl	9728 <Print::println()>
    1748:	4631      	mov	r1, r6
    174a:	4813      	ldr	r0, [pc, #76]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    174c:	f007 ffe4 	bl	9718 <Print::print(long)>
    1750:	9a01      	ldr	r2, [sp, #4]
    1752:	4812      	ldr	r0, [pc, #72]	; (179c <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b8>)
    1754:	4611      	mov	r1, r2
    1756:	f00a fd2f 	bl	c1b8 <usb_serial_write>
    175a:	2103      	movs	r1, #3
    175c:	480e      	ldr	r0, [pc, #56]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    175e:	f007 ffdb 	bl	9718 <Print::print(long)>
    1762:	2103      	movs	r1, #3
    1764:	480e      	ldr	r0, [pc, #56]	; (17a0 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2bc>)
    1766:	f00a fd27 	bl	c1b8 <usb_serial_write>
    176a:	e752      	b.n	1612 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x12e>
            Serial.println();
    176c:	480a      	ldr	r0, [pc, #40]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    176e:	9201      	str	r2, [sp, #4]
    1770:	f007 ffda 	bl	9728 <Print::println()>
    1774:	4631      	mov	r1, r6
    1776:	4808      	ldr	r0, [pc, #32]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    1778:	f007 ffce 	bl	9718 <Print::print(long)>
    177c:	9a01      	ldr	r2, [sp, #4]
    177e:	4807      	ldr	r0, [pc, #28]	; (179c <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b8>)
    1780:	4611      	mov	r1, r2
    1782:	f00a fd19 	bl	c1b8 <usb_serial_write>
    1786:	4639      	mov	r1, r7
    1788:	4803      	ldr	r0, [pc, #12]	; (1798 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2b4>)
    178a:	f007 ffc5 	bl	9718 <Print::print(long)>
    178e:	2103      	movs	r1, #3
    1790:	4803      	ldr	r0, [pc, #12]	; (17a0 <BMSModuleManager::decodecan(CAN_message_t&, int)+0x2bc>)
    1792:	f00a fd11 	bl	c1b8 <usb_serial_write>
    1796:	e705      	b.n	15a4 <BMSModuleManager::decodecan(CAN_message_t&, int)+0xc0>
    1798:	1fff89fc 	.word	0x1fff89fc
    179c:	00013cdc 	.word	0x00013cdc
    17a0:	00013cb8 	.word	0x00013cb8

000017a4 <BMSModuleManager::getAllVoltTemp()>:
{
    17a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  packVolt = 0.0f;
    17a8:	2300      	movs	r3, #0
      Logger::debug("");
    17aa:	f8df 9164 	ldr.w	r9, [pc, #356]	; 1910 <BMSModuleManager::getAllVoltTemp()+0x16c>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
    17ae:	f8df 8164 	ldr.w	r8, [pc, #356]	; 1914 <BMSModuleManager::getAllVoltTemp()+0x170>
      Logger::debug("Module voltage: %f", modules[x].getModuleVoltage());
    17b2:	4f59      	ldr	r7, [pc, #356]	; (1918 <BMSModuleManager::getAllVoltTemp()+0x174>)
  packVolt = 0.0f;
    17b4:	6003      	str	r3, [r0, #0]
{
    17b6:	b083      	sub	sp, #12
    17b8:	4606      	mov	r6, r0
    17ba:	f500 7492 	add.w	r4, r0, #292	; 0x124
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    17be:	2501      	movs	r5, #1
    17c0:	e004      	b.n	17cc <BMSModuleManager::getAllVoltTemp()+0x28>
    17c2:	3501      	adds	r5, #1
    17c4:	2d3f      	cmp	r5, #63	; 0x3f
    17c6:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
    17ca:	d068      	beq.n	189e <BMSModuleManager::getAllVoltTemp()+0xfa>
    if (modules[x].isExisting())
    17cc:	4620      	mov	r0, r4
    17ce:	f7ff fa83 	bl	cd8 <BMSModule::isExisting()>
    17d2:	2800      	cmp	r0, #0
    17d4:	d0f5      	beq.n	17c2 <BMSModuleManager::getAllVoltTemp()+0x1e>
      Logger::debug("");
    17d6:	4648      	mov	r0, r9
    17d8:	f000 fd84 	bl	22e4 <Logger::debug(char*, ...)>
      Logger::debug("Module %i exists. Reading voltage and temperature values", x);
    17dc:	4629      	mov	r1, r5
    17de:	4640      	mov	r0, r8
    17e0:	f000 fd80 	bl	22e4 <Logger::debug(char*, ...)>
      Logger::debug("Module voltage: %f", modules[x].getModuleVoltage());
    17e4:	4620      	mov	r0, r4
    17e6:	f7ff fa39 	bl	c5c <BMSModule::getModuleVoltage()>
    17ea:	f00b f9a1 	bl	cb30 <__aeabi_f2d>
    17ee:	4602      	mov	r2, r0
    17f0:	460b      	mov	r3, r1
    17f2:	4638      	mov	r0, r7
    17f4:	f000 fd76 	bl	22e4 <Logger::debug(char*, ...)>
      Logger::debug("Lowest Cell V: %f     Highest Cell V: %f", modules[x].getLowCellV(), modules[x].getHighCellV());
    17f8:	4620      	mov	r0, r4
    17fa:	f7fe fef3 	bl	5e4 <BMSModule::getLowCellV()>
    17fe:	4682      	mov	sl, r0
    1800:	4620      	mov	r0, r4
    1802:	f7fe ff0d 	bl	620 <BMSModule::getHighCellV()>
    1806:	4683      	mov	fp, r0
    1808:	4650      	mov	r0, sl
    180a:	f00b f991 	bl	cb30 <__aeabi_f2d>
    180e:	4602      	mov	r2, r0
    1810:	4658      	mov	r0, fp
    1812:	4692      	mov	sl, r2
    1814:	468b      	mov	fp, r1
    1816:	f00b f98b 	bl	cb30 <__aeabi_f2d>
    181a:	465b      	mov	r3, fp
    181c:	4652      	mov	r2, sl
    181e:	e9cd 0100 	strd	r0, r1, [sp]
    1822:	483e      	ldr	r0, [pc, #248]	; (191c <BMSModuleManager::getAllVoltTemp()+0x178>)
    1824:	f000 fd5e 	bl	22e4 <Logger::debug(char*, ...)>
      Logger::debug("Temp1: %f       Temp2: %f", modules[x].getTemperature(0), modules[x].getTemperature(1));
    1828:	2100      	movs	r1, #0
    182a:	4620      	mov	r0, r4
    182c:	f7ff fa3e 	bl	cac <BMSModule::getTemperature(int)>
    1830:	2101      	movs	r1, #1
    1832:	4682      	mov	sl, r0
    1834:	4620      	mov	r0, r4
    1836:	f7ff fa39 	bl	cac <BMSModule::getTemperature(int)>
    183a:	4683      	mov	fp, r0
    183c:	4650      	mov	r0, sl
    183e:	f00b f977 	bl	cb30 <__aeabi_f2d>
    1842:	4602      	mov	r2, r0
    1844:	4658      	mov	r0, fp
    1846:	4692      	mov	sl, r2
    1848:	468b      	mov	fp, r1
    184a:	f00b f971 	bl	cb30 <__aeabi_f2d>
    184e:	4652      	mov	r2, sl
    1850:	e9cd 0100 	strd	r0, r1, [sp]
    1854:	465b      	mov	r3, fp
    1856:	4832      	ldr	r0, [pc, #200]	; (1920 <BMSModuleManager::getAllVoltTemp()+0x17c>)
    1858:	f000 fd44 	bl	22e4 <Logger::debug(char*, ...)>
      packVolt += modules[x].getModuleVoltage();
    185c:	4620      	mov	r0, r4
    185e:	f7ff f9fd 	bl	c5c <BMSModule::getModuleVoltage()>
    1862:	4601      	mov	r1, r0
    1864:	6830      	ldr	r0, [r6, #0]
    1866:	f00b fa7f 	bl	cd68 <__addsf3>
    186a:	6030      	str	r0, [r6, #0]
      if (modules[x].getLowTemp() < lowestPackTemp) lowestPackTemp = modules[x].getLowTemp();
    186c:	4620      	mov	r0, r4
    186e:	f7ff f831 	bl	8d4 <BMSModule::getLowTemp()>
    1872:	69b1      	ldr	r1, [r6, #24]
    1874:	f00b fd1e 	bl	d2b4 <__aeabi_fcmplt>
    1878:	2800      	cmp	r0, #0
    187a:	d133      	bne.n	18e4 <BMSModuleManager::getAllVoltTemp()+0x140>
      if (modules[x].getHighTemp() > highestPackTemp) highestPackTemp = modules[x].getHighTemp();
    187c:	4620      	mov	r0, r4
    187e:	f7fe ff2f 	bl	6e0 <BMSModule::getHighTemp()>
    1882:	69f1      	ldr	r1, [r6, #28]
    1884:	f00b fd34 	bl	d2f0 <__aeabi_fcmpgt>
    1888:	2800      	cmp	r0, #0
    188a:	d09a      	beq.n	17c2 <BMSModuleManager::getAllVoltTemp()+0x1e>
    188c:	4620      	mov	r0, r4
    188e:	f7fe ff27 	bl	6e0 <BMSModule::getHighTemp()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1892:	3501      	adds	r5, #1
    1894:	2d3f      	cmp	r5, #63	; 0x3f
      if (modules[x].getHighTemp() > highestPackTemp) highestPackTemp = modules[x].getHighTemp();
    1896:	61f0      	str	r0, [r6, #28]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1898:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
    189c:	d196      	bne.n	17cc <BMSModuleManager::getAllVoltTemp()+0x28>
  packVolt = packVolt / Pstring;
    189e:	6870      	ldr	r0, [r6, #4]
    18a0:	f00b fb16 	bl	ced0 <__aeabi_i2f>
    18a4:	4601      	mov	r1, r0
    18a6:	6830      	ldr	r0, [r6, #0]
    18a8:	f00b fc1a 	bl	d0e0 <__aeabi_fdiv>
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
    18ac:	6971      	ldr	r1, [r6, #20]
  packVolt = packVolt / Pstring;
    18ae:	6030      	str	r0, [r6, #0]
    18b0:	4604      	mov	r4, r0
  if (packVolt > highestPackVolt) highestPackVolt = packVolt;
    18b2:	f00b fd1d 	bl	d2f0 <__aeabi_fcmpgt>
    18b6:	b100      	cbz	r0, 18ba <BMSModuleManager::getAllVoltTemp()+0x116>
    18b8:	6174      	str	r4, [r6, #20]
  if (packVolt < lowestPackVolt) lowestPackVolt = packVolt;
    18ba:	6931      	ldr	r1, [r6, #16]
    18bc:	4620      	mov	r0, r4
    18be:	f00b fcf9 	bl	d2b4 <__aeabi_fcmplt>
    18c2:	b100      	cbz	r0, 18c6 <BMSModuleManager::getAllVoltTemp()+0x122>
    18c4:	6134      	str	r4, [r6, #16]
  if (digitalRead(11) == LOW) {
    18c6:	200b      	movs	r0, #11
    18c8:	f008 fe28 	bl	a51c <digitalRead>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    18cc:	f506 5640 	add.w	r6, r6, #12288	; 0x3000
    18d0:	f896 3d3c 	ldrb.w	r3, [r6, #3388]	; 0xd3c
  if (digitalRead(11) == LOW) {
    18d4:	b958      	cbnz	r0, 18ee <BMSModuleManager::getAllVoltTemp()+0x14a>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    18d6:	b1b3      	cbz	r3, 1906 <BMSModuleManager::getAllVoltTemp()+0x162>
    isFaulted = true;
    18d8:	2301      	movs	r3, #1
    18da:	f886 3d3c 	strb.w	r3, [r6, #3388]	; 0xd3c
}
    18de:	b003      	add	sp, #12
    18e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (modules[x].getLowTemp() < lowestPackTemp) lowestPackTemp = modules[x].getLowTemp();
    18e4:	4620      	mov	r0, r4
    18e6:	f7fe fff5 	bl	8d4 <BMSModule::getLowTemp()>
    18ea:	61b0      	str	r0, [r6, #24]
    18ec:	e7c6      	b.n	187c <BMSModuleManager::getAllVoltTemp()+0xd8>
    if (isFaulted) Logger::info("All modules have exited a faulted state");
    18ee:	b92b      	cbnz	r3, 18fc <BMSModuleManager::getAllVoltTemp()+0x158>
    isFaulted = false;
    18f0:	2300      	movs	r3, #0
    isFaulted = true;
    18f2:	f886 3d3c 	strb.w	r3, [r6, #3388]	; 0xd3c
}
    18f6:	b003      	add	sp, #12
    18f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (isFaulted) Logger::info("All modules have exited a faulted state");
    18fc:	4809      	ldr	r0, [pc, #36]	; (1924 <BMSModuleManager::getAllVoltTemp()+0x180>)
    18fe:	f000 fd03 	bl	2308 <Logger::info(char*, ...)>
    isFaulted = false;
    1902:	2300      	movs	r3, #0
    1904:	e7f5      	b.n	18f2 <BMSModuleManager::getAllVoltTemp()+0x14e>
    if (!isFaulted) Logger::error("One or more BMS modules have entered the fault state!");
    1906:	4808      	ldr	r0, [pc, #32]	; (1928 <BMSModuleManager::getAllVoltTemp()+0x184>)
    1908:	f000 fd12 	bl	2330 <Logger::error(char*, ...)>
    190c:	e7e4      	b.n	18d8 <BMSModuleManager::getAllVoltTemp()+0x134>
    190e:	bf00      	nop
    1910:	0001433c 	.word	0x0001433c
    1914:	00013ce0 	.word	0x00013ce0
    1918:	00013d1c 	.word	0x00013d1c
    191c:	00013d30 	.word	0x00013d30
    1920:	00013d5c 	.word	0x00013d5c
    1924:	00013db0 	.word	0x00013db0
    1928:	00013d78 	.word	0x00013d78

0000192c <BMSModuleManager::getLowCellVolt()>:
{
    192c:	b570      	push	{r4, r5, r6, lr}
  LowCellVolt = 5.0;
    192e:	4b11      	ldr	r3, [pc, #68]	; (1974 <BMSModuleManager::getLowCellVolt()+0x48>)
    1930:	6083      	str	r3, [r0, #8]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1932:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
{
    1936:	4606      	mov	r6, r0
    1938:	f500 7492 	add.w	r4, r0, #292	; 0x124
    193c:	3534      	adds	r5, #52	; 0x34
    193e:	e002      	b.n	1946 <BMSModuleManager::getLowCellVolt()+0x1a>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1940:	34f8      	adds	r4, #248	; 0xf8
    1942:	42ac      	cmp	r4, r5
    1944:	d013      	beq.n	196e <BMSModuleManager::getLowCellVolt()+0x42>
    if (modules[x].isExisting())
    1946:	4620      	mov	r0, r4
    1948:	f7ff f9c6 	bl	cd8 <BMSModule::isExisting()>
    194c:	2800      	cmp	r0, #0
    194e:	d0f7      	beq.n	1940 <BMSModuleManager::getLowCellVolt()+0x14>
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
    1950:	4620      	mov	r0, r4
    1952:	f7fe fe47 	bl	5e4 <BMSModule::getLowCellV()>
    1956:	68b1      	ldr	r1, [r6, #8]
    1958:	f00b fcac 	bl	d2b4 <__aeabi_fcmplt>
    195c:	2800      	cmp	r0, #0
    195e:	d0ef      	beq.n	1940 <BMSModuleManager::getLowCellVolt()+0x14>
    1960:	4620      	mov	r0, r4
    1962:	f7fe fe3f 	bl	5e4 <BMSModule::getLowCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1966:	34f8      	adds	r4, #248	; 0xf8
    1968:	42ac      	cmp	r4, r5
      if (modules[x].getLowCellV() <  LowCellVolt)  LowCellVolt = modules[x].getLowCellV();
    196a:	60b0      	str	r0, [r6, #8]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    196c:	d1eb      	bne.n	1946 <BMSModuleManager::getLowCellVolt()+0x1a>
}
    196e:	68b0      	ldr	r0, [r6, #8]
    1970:	bd70      	pop	{r4, r5, r6, pc}
    1972:	bf00      	nop
    1974:	40a00000 	.word	0x40a00000

00001978 <BMSModuleManager::getHighCellVolt()>:
{
    1978:	b570      	push	{r4, r5, r6, lr}
  HighCellVolt = 0.0;
    197a:	2300      	movs	r3, #0
    197c:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
{
    1980:	4606      	mov	r6, r0
  HighCellVolt = 0.0;
    1982:	60c3      	str	r3, [r0, #12]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1984:	f500 7492 	add.w	r4, r0, #292	; 0x124
    1988:	3534      	adds	r5, #52	; 0x34
    198a:	e002      	b.n	1992 <BMSModuleManager::getHighCellVolt()+0x1a>
    198c:	34f8      	adds	r4, #248	; 0xf8
    198e:	42ac      	cmp	r4, r5
    1990:	d013      	beq.n	19ba <BMSModuleManager::getHighCellVolt()+0x42>
    if (modules[x].isExisting())
    1992:	4620      	mov	r0, r4
    1994:	f7ff f9a0 	bl	cd8 <BMSModule::isExisting()>
    1998:	2800      	cmp	r0, #0
    199a:	d0f7      	beq.n	198c <BMSModuleManager::getHighCellVolt()+0x14>
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
    199c:	4620      	mov	r0, r4
    199e:	f7fe fe3f 	bl	620 <BMSModule::getHighCellV()>
    19a2:	68f1      	ldr	r1, [r6, #12]
    19a4:	f00b fca4 	bl	d2f0 <__aeabi_fcmpgt>
    19a8:	2800      	cmp	r0, #0
    19aa:	d0ef      	beq.n	198c <BMSModuleManager::getHighCellVolt()+0x14>
    19ac:	4620      	mov	r0, r4
    19ae:	f7fe fe37 	bl	620 <BMSModule::getHighCellV()>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    19b2:	34f8      	adds	r4, #248	; 0xf8
    19b4:	42ac      	cmp	r4, r5
      if (modules[x].getHighCellV() >  HighCellVolt)  HighCellVolt = modules[x].getHighCellV();
    19b6:	60f0      	str	r0, [r6, #12]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    19b8:	d1eb      	bne.n	1992 <BMSModuleManager::getHighCellVolt()+0x1a>
}
    19ba:	68f0      	ldr	r0, [r6, #12]
    19bc:	bd70      	pop	{r4, r5, r6, pc}
    19be:	bf00      	nop

000019c0 <BMSModuleManager::getPackVoltage()>:
}
    19c0:	6800      	ldr	r0, [r0, #0]
    19c2:	4770      	bx	lr

000019c4 <BMSModuleManager::getNumModules()>:
  return numFoundModules;
    19c4:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
}
    19c8:	f8d0 0d38 	ldr.w	r0, [r0, #3384]	; 0xd38
    19cc:	4770      	bx	lr
    19ce:	bf00      	nop

000019d0 <BMSModuleManager::setPstrings(int)>:
  Pstring = Pstrings;
    19d0:	6041      	str	r1, [r0, #4]
}
    19d2:	4770      	bx	lr

000019d4 <BMSModuleManager::setSensors(int, float, float)>:
{
    19d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    19d8:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
    19dc:	4688      	mov	r8, r1
    19de:	4617      	mov	r7, r2
    19e0:	461e      	mov	r6, r3
    19e2:	f500 7492 	add.w	r4, r0, #292	; 0x124
    19e6:	3534      	adds	r5, #52	; 0x34
    19e8:	e002      	b.n	19f0 <BMSModuleManager::setSensors(int, float, float)+0x1c>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    19ea:	34f8      	adds	r4, #248	; 0xf8
    19ec:	42ac      	cmp	r4, r5
    19ee:	d013      	beq.n	1a18 <BMSModuleManager::setSensors(int, float, float)+0x44>
    if (modules[x].isExisting())
    19f0:	4620      	mov	r0, r4
    19f2:	f7ff f971 	bl	cd8 <BMSModule::isExisting()>
    19f6:	2800      	cmp	r0, #0
    19f8:	d0f7      	beq.n	19ea <BMSModuleManager::setSensors(int, float, float)+0x16>
      modules[x].settempsensor(sensor);
    19fa:	4620      	mov	r0, r4
    19fc:	4641      	mov	r1, r8
    19fe:	f7ff f973 	bl	ce8 <BMSModule::settempsensor(int)>
      modules[x].setIgnoreCell(Ignore);
    1a02:	4620      	mov	r0, r4
    1a04:	4639      	mov	r1, r7
    1a06:	f7ff f97f 	bl	d08 <BMSModule::setIgnoreCell(float)>
      modules[x].setDelta(VoltDelta);
    1a0a:	4620      	mov	r0, r4
    1a0c:	4631      	mov	r1, r6
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a0e:	34f8      	adds	r4, #248	; 0xf8
      modules[x].setDelta(VoltDelta);
    1a10:	f7ff f972 	bl	cf8 <BMSModule::setDelta(float)>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a14:	42ac      	cmp	r4, r5
    1a16:	d1eb      	bne.n	19f0 <BMSModuleManager::setSensors(int, float, float)+0x1c>
}
    1a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001a1c <BMSModuleManager::getAvgTemperature()>:
{
    1a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  lowTemp = 999.0f;
    1a20:	4a2a      	ldr	r2, [pc, #168]	; (1acc <BMSModuleManager::getAvgTemperature()+0xb0>)
  highTemp = -999.0f;
    1a22:	4b2b      	ldr	r3, [pc, #172]	; (1ad0 <BMSModuleManager::getAvgTemperature()+0xb4>)
      if (modules[x].getAvgTemp() > -70)
    1a24:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 1ad4 <BMSModuleManager::getAvgTemperature()+0xb8>
  lowTemp = 999.0f;
    1a28:	6242      	str	r2, [r0, #36]	; 0x24
  highTemp = -999.0f;
    1a2a:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
{
    1a2e:	4680      	mov	r8, r0
  highTemp = -999.0f;
    1a30:	6203      	str	r3, [r0, #32]
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a32:	f500 7492 	add.w	r4, r0, #292	; 0x124
    1a36:	3534      	adds	r5, #52	; 0x34
  int y = 0; //counter for modules below -70 (no sensors connected)
    1a38:	2600      	movs	r6, #0
  float avg = 0.0f;
    1a3a:	2700      	movs	r7, #0
    1a3c:	e002      	b.n	1a44 <BMSModuleManager::getAvgTemperature()+0x28>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a3e:	34f8      	adds	r4, #248	; 0xf8
    1a40:	42a5      	cmp	r5, r4
    1a42:	d010      	beq.n	1a66 <BMSModuleManager::getAvgTemperature()+0x4a>
    if (modules[x].isExisting())
    1a44:	4620      	mov	r0, r4
    1a46:	f7ff f947 	bl	cd8 <BMSModule::isExisting()>
    1a4a:	2800      	cmp	r0, #0
    1a4c:	d0f7      	beq.n	1a3e <BMSModuleManager::getAvgTemperature()+0x22>
      if (modules[x].getAvgTemp() > -70)
    1a4e:	4620      	mov	r0, r4
    1a50:	f7fe fe64 	bl	71c <BMSModule::getAvgTemp()>
    1a54:	4649      	mov	r1, r9
    1a56:	f00b fc4b 	bl	d2f0 <__aeabi_fcmpgt>
    1a5a:	b988      	cbnz	r0, 1a80 <BMSModuleManager::getAvgTemperature()+0x64>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a5c:	34f8      	adds	r4, #248	; 0xf8
    1a5e:	42a5      	cmp	r5, r4
        y++;
    1a60:	f106 0601 	add.w	r6, r6, #1
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1a64:	d1ee      	bne.n	1a44 <BMSModuleManager::getAvgTemperature()+0x28>
  avg = avg / (float)(numFoundModules - y);
    1a66:	f508 5840 	add.w	r8, r8, #12288	; 0x3000
    1a6a:	f8d8 0d38 	ldr.w	r0, [r8, #3384]	; 0xd38
    1a6e:	1b80      	subs	r0, r0, r6
    1a70:	f00b fa2e 	bl	ced0 <__aeabi_i2f>
    1a74:	4601      	mov	r1, r0
    1a76:	4638      	mov	r0, r7
    1a78:	f00b fb32 	bl	d0e0 <__aeabi_fdiv>
}
    1a7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        avg += modules[x].getAvgTemp();
    1a80:	4620      	mov	r0, r4
    1a82:	f7fe fe4b 	bl	71c <BMSModule::getAvgTemp()>
    1a86:	4601      	mov	r1, r0
    1a88:	4638      	mov	r0, r7
    1a8a:	f00b f96d 	bl	cd68 <__addsf3>
    1a8e:	4607      	mov	r7, r0
        if (modules[x].getHighTemp() > highTemp)
    1a90:	4620      	mov	r0, r4
    1a92:	f7fe fe25 	bl	6e0 <BMSModule::getHighTemp()>
    1a96:	f8d8 1020 	ldr.w	r1, [r8, #32]
    1a9a:	f00b fc29 	bl	d2f0 <__aeabi_fcmpgt>
    1a9e:	b970      	cbnz	r0, 1abe <BMSModuleManager::getAvgTemperature()+0xa2>
        if (modules[x].getLowTemp() < lowTemp)
    1aa0:	4620      	mov	r0, r4
    1aa2:	f7fe ff17 	bl	8d4 <BMSModule::getLowTemp()>
    1aa6:	f8d8 1024 	ldr.w	r1, [r8, #36]	; 0x24
    1aaa:	f00b fc03 	bl	d2b4 <__aeabi_fcmplt>
    1aae:	2800      	cmp	r0, #0
    1ab0:	d0c5      	beq.n	1a3e <BMSModuleManager::getAvgTemperature()+0x22>
          lowTemp = modules[x].getLowTemp();
    1ab2:	4620      	mov	r0, r4
    1ab4:	f7fe ff0e 	bl	8d4 <BMSModule::getLowTemp()>
    1ab8:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    1abc:	e7bf      	b.n	1a3e <BMSModuleManager::getAvgTemperature()+0x22>
          highTemp = modules[x].getHighTemp();
    1abe:	4620      	mov	r0, r4
    1ac0:	f7fe fe0e 	bl	6e0 <BMSModule::getHighTemp()>
    1ac4:	f8c8 0020 	str.w	r0, [r8, #32]
    1ac8:	e7ea      	b.n	1aa0 <BMSModuleManager::getAvgTemperature()+0x84>
    1aca:	bf00      	nop
    1acc:	4479c000 	.word	0x4479c000
    1ad0:	c479c000 	.word	0xc479c000
    1ad4:	c28c0000 	.word	0xc28c0000

00001ad8 <BMSModuleManager::getHighTemperature()>:
}
    1ad8:	6a00      	ldr	r0, [r0, #32]
    1ada:	4770      	bx	lr

00001adc <BMSModuleManager::getLowTemperature()>:
}
    1adc:	6a40      	ldr	r0, [r0, #36]	; 0x24
    1ade:	4770      	bx	lr

00001ae0 <BMSModuleManager::getAvgCellVolt()>:
{
    1ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  numFoundModules = 0;
    1ae4:	f500 5840 	add.w	r8, r0, #12288	; 0x3000
  float avg = 0.0f;
    1ae8:	2600      	movs	r6, #0
  numFoundModules = 0;
    1aea:	2300      	movs	r3, #0
    1aec:	f500 5574 	add.w	r5, r0, #15616	; 0x3d00
    1af0:	f8c8 3d38 	str.w	r3, [r8, #3384]	; 0xd38
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1af4:	f500 7492 	add.w	r4, r0, #292	; 0x124
    1af8:	3534      	adds	r5, #52	; 0x34
      if (modules[x].getAverageV() > 0)
    1afa:	4637      	mov	r7, r6
    1afc:	e002      	b.n	1b04 <BMSModuleManager::getAvgCellVolt()+0x24>
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1afe:	34f8      	adds	r4, #248	; 0xf8
    1b00:	42ac      	cmp	r4, r5
    1b02:	d01d      	beq.n	1b40 <BMSModuleManager::getAvgCellVolt()+0x60>
    if (modules[x].isExisting())
    1b04:	4620      	mov	r0, r4
    1b06:	f7ff f8e7 	bl	cd8 <BMSModule::isExisting()>
    1b0a:	2800      	cmp	r0, #0
    1b0c:	d0f7      	beq.n	1afe <BMSModuleManager::getAvgCellVolt()+0x1e>
      if (modules[x].getAverageV() > 0)
    1b0e:	4620      	mov	r0, r4
    1b10:	f7fe fdac 	bl	66c <BMSModule::getAverageV()>
    1b14:	4639      	mov	r1, r7
    1b16:	f00b fbeb 	bl	d2f0 <__aeabi_fcmpgt>
    1b1a:	4603      	mov	r3, r0
        avg += modules[x].getAverageV();
    1b1c:	4620      	mov	r0, r4
      if (modules[x].getAverageV() > 0)
    1b1e:	2b00      	cmp	r3, #0
    1b20:	d0ed      	beq.n	1afe <BMSModuleManager::getAvgCellVolt()+0x1e>
        avg += modules[x].getAverageV();
    1b22:	f7fe fda3 	bl	66c <BMSModule::getAverageV()>
    1b26:	4601      	mov	r1, r0
    1b28:	4630      	mov	r0, r6
    1b2a:	f00b f91d 	bl	cd68 <__addsf3>
        numFoundModules++;
    1b2e:	f8d8 3d38 	ldr.w	r3, [r8, #3384]	; 0xd38
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1b32:	34f8      	adds	r4, #248	; 0xf8
        numFoundModules++;
    1b34:	3301      	adds	r3, #1
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1b36:	42ac      	cmp	r4, r5
        avg += modules[x].getAverageV();
    1b38:	4606      	mov	r6, r0
        numFoundModules++;
    1b3a:	f8c8 3d38 	str.w	r3, [r8, #3384]	; 0xd38
  for (int x = 1; x <= MAX_MODULE_ADDR; x++)
    1b3e:	d1e1      	bne.n	1b04 <BMSModuleManager::getAvgCellVolt()+0x24>
  avg = avg / (float)numFoundModules;
    1b40:	f8d8 0d38 	ldr.w	r0, [r8, #3384]	; 0xd38
    1b44:	f00b f9c4 	bl	ced0 <__aeabi_i2f>
    1b48:	4601      	mov	r1, r0
    1b4a:	4630      	mov	r0, r6
    1b4c:	f00b fac8 	bl	d0e0 <__aeabi_fdiv>
}
    1b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00001b54 <BMSModuleManager::printPackDetails(int)>:
    }
  }
}

void BMSModuleManager::printPackDetails(int digits)
{
    1b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b58:	b091      	sub	sp, #68	; 0x44
    1b5a:	4604      	mov	r4, r0
  uint8_t alerts;
  uint8_t COV;
  uint8_t CUV;
  int cellNum = 0;

  Logger::console("");
    1b5c:	48a4      	ldr	r0, [pc, #656]	; (1df0 <BMSModuleManager::printPackDetails(int)+0x29c>)
{
    1b5e:	910e      	str	r1, [sp, #56]	; 0x38
  Logger::console("");
    1b60:	f000 fb66 	bl	2230 <Logger::console(char*, ...)>
  Logger::console("");
    1b64:	48a2      	ldr	r0, [pc, #648]	; (1df0 <BMSModuleManager::printPackDetails(int)+0x29c>)
    1b66:	f000 fb63 	bl	2230 <Logger::console(char*, ...)>
  Logger::console("");
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1b6a:	f504 5840 	add.w	r8, r4, #12288	; 0x3000
  Logger::console("");
    1b6e:	48a0      	ldr	r0, [pc, #640]	; (1df0 <BMSModuleManager::printPackDetails(int)+0x29c>)
    1b70:	f504 5774 	add.w	r7, r4, #15616	; 0x3d00
    1b74:	f000 fb5c 	bl	2230 <Logger::console(char*, ...)>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1b78:	f504 7592 	add.w	r5, r4, #292	; 0x124
  spack = 0;
    1b7c:	2300      	movs	r3, #0
    1b7e:	3734      	adds	r7, #52	; 0x34
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1b80:	f8d8 bd38 	ldr.w	fp, [r8, #3384]	; 0xd38
  spack = 0;
    1b84:	f8c8 3d40 	str.w	r3, [r8, #3392]	; 0xd40
    1b88:	462e      	mov	r6, r5
    1b8a:	46b9      	mov	r9, r7
    1b8c:	e002      	b.n	1b94 <BMSModuleManager::printPackDetails(int)+0x40>
  for (int y = 1; y < 63; y++)
    1b8e:	36f8      	adds	r6, #248	; 0xf8
    1b90:	45b1      	cmp	r9, r6
    1b92:	d00f      	beq.n	1bb4 <BMSModuleManager::printPackDetails(int)+0x60>
    if (modules[y].isExisting())
    1b94:	4630      	mov	r0, r6
    1b96:	f7ff f89f 	bl	cd8 <BMSModule::isExisting()>
    1b9a:	2800      	cmp	r0, #0
    1b9c:	d0f7      	beq.n	1b8e <BMSModuleManager::printPackDetails(int)+0x3a>
      spack = spack + modules[y].getscells();
    1b9e:	4630      	mov	r0, r6
    1ba0:	f8d8 7d40 	ldr.w	r7, [r8, #3392]	; 0xd40
    1ba4:	f7fe fd98 	bl	6d8 <BMSModule::getscells()>
  for (int y = 1; y < 63; y++)
    1ba8:	36f8      	adds	r6, #248	; 0xf8
      spack = spack + modules[y].getscells();
    1baa:	4407      	add	r7, r0
  for (int y = 1; y < 63; y++)
    1bac:	45b1      	cmp	r9, r6
      spack = spack + modules[y].getscells();
    1bae:	f8c8 7d40 	str.w	r7, [r8, #3392]	; 0xd40
  for (int y = 1; y < 63; y++)
    1bb2:	d1ef      	bne.n	1b94 <BMSModuleManager::printPackDetails(int)+0x40>
  return spack;
    1bb4:	f8d8 2d40 	ldr.w	r2, [r8, #3392]	; 0xd40
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bb8:	6820      	ldr	r0, [r4, #0]
  return spack;
    1bba:	920f      	str	r2, [sp, #60]	; 0x3c
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bbc:	f00a ffb8 	bl	cb30 <__aeabi_f2d>
    1bc0:	6863      	ldr	r3, [r4, #4]
    1bc2:	930d      	str	r3, [sp, #52]	; 0x34
    1bc4:	4606      	mov	r6, r0
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1bc6:	4620      	mov	r0, r4
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bc8:	460f      	mov	r7, r1
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1bca:	f7ff ff89 	bl	1ae0 <BMSModuleManager::getAvgCellVolt()>
    1bce:	4680      	mov	r8, r0
    1bd0:	4620      	mov	r0, r4
    1bd2:	f8d4 9008 	ldr.w	r9, [r4, #8]
    1bd6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
    1bda:	f7ff ff1f 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bde:	f00a ffa7 	bl	cb30 <__aeabi_f2d>
    1be2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
                  Pstring, getPackVoltage(), getAvgCellVolt(), LowCellVolt, HighCellVolt, (HighCellVolt - LowCellVolt) * 1000, getAvgTemperature());
    1be6:	4649      	mov	r1, r9
    1be8:	4650      	mov	r0, sl
    1bea:	f00b f8bb 	bl	cd64 <__aeabi_fsub>
    1bee:	4981      	ldr	r1, [pc, #516]	; (1df4 <BMSModuleManager::printPackDetails(int)+0x2a0>)
    1bf0:	f00b f9c2 	bl	cf78 <__aeabi_fmul>
  Logger::console("Modules: %i Cells: %i Strings: %i  Voltage: %fV   Avg Cell Voltage: %fV  Low Cell Voltage: %fV   High Cell Voltage: %fV Delta Voltage: %zmV   Avg Temp: %fC ", numFoundModules, seriescells(),
    1bf4:	f00a ff9c 	bl	cb30 <__aeabi_f2d>
    1bf8:	e9cd 0108 	strd	r0, r1, [sp, #32]
    1bfc:	4650      	mov	r0, sl
    1bfe:	f00a ff97 	bl	cb30 <__aeabi_f2d>
    1c02:	e9cd 0106 	strd	r0, r1, [sp, #24]
    1c06:	4648      	mov	r0, r9
    1c08:	f00a ff92 	bl	cb30 <__aeabi_f2d>
    1c0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
    1c10:	4640      	mov	r0, r8
    1c12:	f00a ff8d 	bl	cb30 <__aeabi_f2d>
    1c16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1c18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    1c1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    1c1e:	e9cd 6700 	strd	r6, r7, [sp]
    1c22:	4875      	ldr	r0, [pc, #468]	; (1df8 <BMSModuleManager::printPackDetails(int)+0x2a4>)
    1c24:	4e75      	ldr	r6, [pc, #468]	; (1dfc <BMSModuleManager::printPackDetails(int)+0x2a8>)
    1c26:	4659      	mov	r1, fp
    1c28:	f000 fb02 	bl	2230 <Logger::console(char*, ...)>
  Logger::console("");
    1c2c:	4870      	ldr	r0, [pc, #448]	; (1df0 <BMSModuleManager::printPackDetails(int)+0x29c>)
    1c2e:	f000 faff 	bl	2230 <Logger::console(char*, ...)>
  int cellNum = 0;
    1c32:	2300      	movs	r3, #0
  for (int y = 1; y < 63; y++)
    1c34:	f04f 0801 	mov.w	r8, #1
  int cellNum = 0;
    1c38:	930d      	str	r3, [sp, #52]	; 0x34
    1c3a:	e007      	b.n	1c4c <BMSModuleManager::printPackDetails(int)+0xf8>
  for (int y = 1; y < 63; y++)
    1c3c:	f108 0801 	add.w	r8, r8, #1
    1c40:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    1c44:	f105 05f8 	add.w	r5, r5, #248	; 0xf8
    1c48:	f000 809d 	beq.w	1d86 <BMSModuleManager::printPackDetails(int)+0x232>
  {
    if (modules[y].isExisting())
    1c4c:	4628      	mov	r0, r5
    1c4e:	f7ff f843 	bl	cd8 <BMSModule::isExisting()>
    1c52:	2800      	cmp	r0, #0
    1c54:	d0f2      	beq.n	1c3c <BMSModuleManager::printPackDetails(int)+0xe8>
    {
      faults = modules[y].getFaults();
    1c56:	4628      	mov	r0, r5
    1c58:	f7fe fcae 	bl	5b8 <BMSModule::getFaults()>
      alerts = modules[y].getAlerts();
    1c5c:	4628      	mov	r0, r5
    1c5e:	f7fe fcaf 	bl	5c0 <BMSModule::getAlerts()>
      COV = modules[y].getCOVCells();
    1c62:	4628      	mov	r0, r5
    1c64:	f7fe fcb0 	bl	5c8 <BMSModule::getCOVCells()>
      CUV = modules[y].getCUVCells();
    1c68:	4628      	mov	r0, r5
    1c6a:	f7fe fcb1 	bl	5d0 <BMSModule::getCUVCells()>
    1c6e:	2108      	movs	r1, #8
    1c70:	4863      	ldr	r0, [pc, #396]	; (1e00 <BMSModuleManager::printPackDetails(int)+0x2ac>)
    1c72:	f00a faa1 	bl	c1b8 <usb_serial_write>
    1c76:	4641      	mov	r1, r8
    1c78:	4630      	mov	r0, r6
    1c7a:	f007 fd4d 	bl	9718 <Print::print(long)>

      SERIALCONSOLE.print("Module #");
      SERIALCONSOLE.print(y);
      if (y < 10) SERIALCONSOLE.print(" ");
    1c7e:	f1b8 0f09 	cmp.w	r8, #9
    1c82:	f340 80b0 	ble.w	1de6 <BMSModuleManager::printPackDetails(int)+0x292>
    1c86:	2102      	movs	r1, #2
    1c88:	485e      	ldr	r0, [pc, #376]	; (1e04 <BMSModuleManager::printPackDetails(int)+0x2b0>)
    1c8a:	f8df a17c 	ldr.w	sl, [pc, #380]	; 1e08 <BMSModuleManager::printPackDetails(int)+0x2b4>
    1c8e:	f00a fa93 	bl	c1b8 <usb_serial_write>
      SERIALCONSOLE.print("  ");
      SERIALCONSOLE.print(modules[y].getModuleVoltage(), digits);
    1c92:	4628      	mov	r0, r5
    1c94:	f7fe ffe2 	bl	c5c <BMSModule::getModuleVoltage()>
    1c98:	f00a ff4a 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1c9c:	f89d 9038 	ldrb.w	r9, [sp, #56]	; 0x38
    1ca0:	f8cd 9000 	str.w	r9, [sp]
    1ca4:	460b      	mov	r3, r1
    1ca6:	4602      	mov	r2, r0
    1ca8:	4630      	mov	r0, r6
    1caa:	f007 fd61 	bl	9770 <Print::printFloat(double, unsigned char)>
    1cae:	4857      	ldr	r0, [pc, #348]	; (1e0c <BMSModuleManager::printPackDetails(int)+0x2b8>)
    1cb0:	2101      	movs	r1, #1
    1cb2:	f00a fa81 	bl	c1b8 <usb_serial_write>
      SERIALCONSOLE.print("V");
      for (int i = 0; i < 13; i++)
    1cb6:	462b      	mov	r3, r5
    1cb8:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
    1cbc:	464d      	mov	r5, r9
    1cbe:	2400      	movs	r4, #0
    1cc0:	4699      	mov	r9, r3
    1cc2:	e01f      	b.n	1d04 <BMSModuleManager::printPackDetails(int)+0x1b0>
    1cc4:	2106      	movs	r1, #6
    1cc6:	4852      	ldr	r0, [pc, #328]	; (1e10 <BMSModuleManager::printPackDetails(int)+0x2bc>)
    1cc8:	f00a fa76 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1ccc:	4659      	mov	r1, fp
    1cce:	4630      	mov	r0, r6
    1cd0:	f007 fd22 	bl	9718 <Print::print(long)>
    1cd4:	2102      	movs	r1, #2
    1cd6:	484f      	ldr	r0, [pc, #316]	; (1e14 <BMSModuleManager::printPackDetails(int)+0x2c0>)
    1cd8:	f00a fa6e 	bl	c1b8 <usb_serial_write>
      {
        if (cellNum < 10) SERIALCONSOLE.print(" ");
        SERIALCONSOLE.print("  Cell");
        SERIALCONSOLE.print(cellNum++);
        SERIALCONSOLE.print(": ");
        SERIALCONSOLE.print(modules[y].getCellVoltage(i), digits);
    1cdc:	4621      	mov	r1, r4
    1cde:	4648      	mov	r0, r9
    1ce0:	f7fe fc7a 	bl	5d8 <BMSModule::getCellVoltage(int)>
    1ce4:	f00a ff24 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1ce8:	9500      	str	r5, [sp, #0]
    1cea:	4602      	mov	r2, r0
    1cec:	460b      	mov	r3, r1
    1cee:	4630      	mov	r0, r6
    1cf0:	f007 fd3e 	bl	9770 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 13; i++)
    1cf4:	3401      	adds	r4, #1
    1cf6:	4845      	ldr	r0, [pc, #276]	; (1e0c <BMSModuleManager::printPackDetails(int)+0x2b8>)
    1cf8:	2101      	movs	r1, #1
    1cfa:	f00a fa5d 	bl	c1b8 <usb_serial_write>
    1cfe:	2c0d      	cmp	r4, #13
    1d00:	d00a      	beq.n	1d18 <BMSModuleManager::printPackDetails(int)+0x1c4>
        SERIALCONSOLE.print(cellNum++);
    1d02:	46bb      	mov	fp, r7
        if (cellNum < 10) SERIALCONSOLE.print(" ");
    1d04:	f1bb 0f09 	cmp.w	fp, #9
        SERIALCONSOLE.print(cellNum++);
    1d08:	f10b 0701 	add.w	r7, fp, #1
        if (cellNum < 10) SERIALCONSOLE.print(" ");
    1d0c:	dcda      	bgt.n	1cc4 <BMSModuleManager::printPackDetails(int)+0x170>
    1d0e:	2101      	movs	r1, #1
    1d10:	4650      	mov	r0, sl
    1d12:	f00a fa51 	bl	c1b8 <usb_serial_write>
    1d16:	e7d5      	b.n	1cc4 <BMSModuleManager::printPackDetails(int)+0x170>
        SERIALCONSOLE.print("V");
      }
      SERIALCONSOLE.println();
    1d18:	4630      	mov	r0, r6
    1d1a:	f007 fd05 	bl	9728 <Print::println()>
      if (modules[y].getType() == 1)
    1d1e:	4648      	mov	r0, r9
    1d20:	f7fe ffd2 	bl	cc8 <BMSModule::getType()>
        SERIALCONSOLE.print(cellNum++);
    1d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
      if (modules[y].getType() == 1)
    1d26:	4604      	mov	r4, r0
        SERIALCONSOLE.print(cellNum++);
    1d28:	330d      	adds	r3, #13
      if (modules[y].getType() == 1)
    1d2a:	2c01      	cmp	r4, #1
    1d2c:	483a      	ldr	r0, [pc, #232]	; (1e18 <BMSModuleManager::printPackDetails(int)+0x2c4>)
        SERIALCONSOLE.print(cellNum++);
    1d2e:	930d      	str	r3, [sp, #52]	; 0x34
      SERIALCONSOLE.println();
    1d30:	464d      	mov	r5, r9
    1d32:	f04f 0109 	mov.w	r1, #9
      if (modules[y].getType() == 1)
    1d36:	d029      	beq.n	1d8c <BMSModuleManager::printPackDetails(int)+0x238>
    1d38:	f00a fa3e 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.println(modules[y].getBalStat(), HEX);
      }
      else
      {
        SERIALCONSOLE.print(" Temp 1: ");
        SERIALCONSOLE.print(modules[y].getTemperature(0));
    1d3c:	2100      	movs	r1, #0
    1d3e:	4648      	mov	r0, r9
    1d40:	f7fe ffb4 	bl	cac <BMSModule::getTemperature(int)>
    1d44:	f00a fef4 	bl	cb30 <__aeabi_f2d>
    1d48:	460b      	mov	r3, r1
    1d4a:	2102      	movs	r1, #2
    1d4c:	4602      	mov	r2, r0
    1d4e:	9100      	str	r1, [sp, #0]
    1d50:	4630      	mov	r0, r6
    1d52:	f007 fd0d 	bl	9770 <Print::printFloat(double, unsigned char)>
    1d56:	210e      	movs	r1, #14
    1d58:	4830      	ldr	r0, [pc, #192]	; (1e1c <BMSModuleManager::printPackDetails(int)+0x2c8>)
    1d5a:	f00a fa2d 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print("C | Bal Stat: ");
        SERIALCONSOLE.println(modules[y].getBalStat(), HEX);
    1d5e:	4628      	mov	r0, r5
    1d60:	f7fe ffb6 	bl	cd0 <BMSModule::getBalStat()>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    1d64:	2300      	movs	r3, #0
    1d66:	4601      	mov	r1, r0
    1d68:	2210      	movs	r2, #16
    1d6a:	4630      	mov	r0, r6
    1d6c:	f007 fcf4 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  for (int y = 1; y < 63; y++)
    1d70:	f108 0801 	add.w	r8, r8, #1
	size_t println(int n, int base)			{ return print(n, base) + println(); }
    1d74:	4630      	mov	r0, r6
    1d76:	f007 fcd7 	bl	9728 <Print::println()>
    1d7a:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
    1d7e:	f105 05f8 	add.w	r5, r5, #248	; 0xf8
    1d82:	f47f af63 	bne.w	1c4c <BMSModuleManager::printPackDetails(int)+0xf8>
      }
    }
  }
}
    1d86:	b011      	add	sp, #68	; 0x44
    1d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d8c:	f00a fa14 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(modules[y].getTemperature(0));
    1d90:	2100      	movs	r1, #0
    1d92:	4648      	mov	r0, r9
    1d94:	f7fe ff8a 	bl	cac <BMSModule::getTemperature(int)>
    1d98:	f00a feca 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1d9c:	2702      	movs	r7, #2
    1d9e:	4602      	mov	r2, r0
    1da0:	460b      	mov	r3, r1
    1da2:	9700      	str	r7, [sp, #0]
    1da4:	4630      	mov	r0, r6
    1da6:	f007 fce3 	bl	9770 <Print::printFloat(double, unsigned char)>
    1daa:	210a      	movs	r1, #10
    1dac:	481c      	ldr	r0, [pc, #112]	; (1e20 <BMSModuleManager::printPackDetails(int)+0x2cc>)
    1dae:	f00a fa03 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(modules[y].getTemperature(1));
    1db2:	4621      	mov	r1, r4
    1db4:	4648      	mov	r0, r9
    1db6:	f7fe ff79 	bl	cac <BMSModule::getTemperature(int)>
    1dba:	f00a feb9 	bl	cb30 <__aeabi_f2d>
    1dbe:	9700      	str	r7, [sp, #0]
    1dc0:	4602      	mov	r2, r0
    1dc2:	460b      	mov	r3, r1
    1dc4:	4630      	mov	r0, r6
    1dc6:	f007 fcd3 	bl	9770 <Print::printFloat(double, unsigned char)>
    1dca:	210a      	movs	r1, #10
    1dcc:	4815      	ldr	r0, [pc, #84]	; (1e24 <BMSModuleManager::printPackDetails(int)+0x2d0>)
    1dce:	f00a f9f3 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(modules[y].getTemperature(2));
    1dd2:	4639      	mov	r1, r7
    1dd4:	4648      	mov	r0, r9
    1dd6:	f7fe ff69 	bl	cac <BMSModule::getTemperature(int)>
    1dda:	f00a fea9 	bl	cb30 <__aeabi_f2d>
    1dde:	9700      	str	r7, [sp, #0]
    1de0:	4602      	mov	r2, r0
    1de2:	460b      	mov	r3, r1
    1de4:	e7b4      	b.n	1d50 <BMSModuleManager::printPackDetails(int)+0x1fc>
    1de6:	2101      	movs	r1, #1
    1de8:	4807      	ldr	r0, [pc, #28]	; (1e08 <BMSModuleManager::printPackDetails(int)+0x2b4>)
    1dea:	f00a f9e5 	bl	c1b8 <usb_serial_write>
    1dee:	e74a      	b.n	1c86 <BMSModuleManager::printPackDetails(int)+0x132>
    1df0:	0001433c 	.word	0x0001433c
    1df4:	447a0000 	.word	0x447a0000
    1df8:	00014060 	.word	0x00014060
    1dfc:	1fff89fc 	.word	0x1fff89fc
    1e00:	00014100 	.word	0x00014100
    1e04:	00014fa8 	.word	0x00014fa8
    1e08:	000141c4 	.word	0x000141c4
    1e0c:	0001410c 	.word	0x0001410c
    1e10:	00014110 	.word	0x00014110
    1e14:	000141b4 	.word	0x000141b4
    1e18:	00014118 	.word	0x00014118
    1e1c:	0001413c 	.word	0x0001413c
    1e20:	00014124 	.word	0x00014124
    1e24:	00014130 	.word	0x00014130

00001e28 <BMSModuleManager::printAllCSV(unsigned long, float, int)>:
void BMSModuleManager::printAllCSV(unsigned long timestamp, float current, int SOC)
{
    1e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e2c:	b087      	sub	sp, #28
    1e2e:	f500 7492 	add.w	r4, r0, #292	; 0x124
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1e32:	f8df 8248 	ldr.w	r8, [pc, #584]	; 207c <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x254>
    1e36:	f8df 9248 	ldr.w	r9, [pc, #584]	; 2080 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x258>
    1e3a:	9103      	str	r1, [sp, #12]
    1e3c:	9204      	str	r2, [sp, #16]
    1e3e:	469b      	mov	fp, r3
    1e40:	4626      	mov	r6, r4
  for (int y = 1; y < 63; y++)
    1e42:	2701      	movs	r7, #1
    1e44:	9405      	str	r4, [sp, #20]
    1e46:	4692      	mov	sl, r2
    1e48:	e004      	b.n	1e54 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    1e4a:	3701      	adds	r7, #1
    1e4c:	2f3f      	cmp	r7, #63	; 0x3f
    1e4e:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
    1e52:	d075      	beq.n	1f40 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x118>
  {
    if (modules[y].isExisting())
    1e54:	4630      	mov	r0, r6
    1e56:	f7fe ff3f 	bl	cd8 <BMSModule::isExisting()>
    1e5a:	2800      	cmp	r0, #0
    1e5c:	d0f5      	beq.n	1e4a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x22>
    1e5e:	2300      	movs	r3, #0
    1e60:	220a      	movs	r2, #10
    1e62:	9903      	ldr	r1, [sp, #12]
    1e64:	4640      	mov	r0, r8
    1e66:	f007 fc77 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1e6a:	2101      	movs	r1, #1
    1e6c:	4648      	mov	r0, r9
    1e6e:	f00a f9a3 	bl	c1b8 <usb_serial_write>
    {
      SERIALCONSOLE.print(timestamp);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(current, 0);
    1e72:	4650      	mov	r0, sl
    1e74:	f00a fe5c 	bl	cb30 <__aeabi_f2d>
    1e78:	460b      	mov	r3, r1
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1e7a:	2100      	movs	r1, #0
    1e7c:	4602      	mov	r2, r0
    1e7e:	9100      	str	r1, [sp, #0]
    1e80:	4640      	mov	r0, r8
    1e82:	f007 fc75 	bl	9770 <Print::printFloat(double, unsigned char)>
    1e86:	2101      	movs	r1, #1
    1e88:	4648      	mov	r0, r9
    1e8a:	f00a f995 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    1e8e:	4659      	mov	r1, fp
    1e90:	4640      	mov	r0, r8
    1e92:	f007 fc41 	bl	9718 <Print::print(long)>
    1e96:	2101      	movs	r1, #1
    1e98:	4648      	mov	r0, r9
    1e9a:	f00a f98d 	bl	c1b8 <usb_serial_write>
    1e9e:	4639      	mov	r1, r7
    1ea0:	4640      	mov	r0, r8
    1ea2:	f007 fc39 	bl	9718 <Print::print(long)>
    1ea6:	2101      	movs	r1, #1
    1ea8:	4648      	mov	r0, r9
    1eaa:	f00a f985 	bl	c1b8 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(SOC);
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(y);
      SERIALCONSOLE.print(",");
      for (int i = 0; i < 8; i++)
    1eae:	2400      	movs	r4, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1eb0:	2502      	movs	r5, #2
      {
        SERIALCONSOLE.print(modules[y].getCellVoltage(i));
    1eb2:	4621      	mov	r1, r4
    1eb4:	4630      	mov	r0, r6
    1eb6:	f7fe fb8f 	bl	5d8 <BMSModule::getCellVoltage(int)>
    1eba:	f00a fe39 	bl	cb30 <__aeabi_f2d>
    1ebe:	9500      	str	r5, [sp, #0]
    1ec0:	4602      	mov	r2, r0
    1ec2:	460b      	mov	r3, r1
    1ec4:	4640      	mov	r0, r8
    1ec6:	f007 fc53 	bl	9770 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 8; i++)
    1eca:	3401      	adds	r4, #1
    1ecc:	2101      	movs	r1, #1
    1ece:	4648      	mov	r0, r9
    1ed0:	f00a f972 	bl	c1b8 <usb_serial_write>
    1ed4:	2c08      	cmp	r4, #8
    1ed6:	d1ec      	bne.n	1eb2 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x8a>
        SERIALCONSOLE.print(",");
      }
      SERIALCONSOLE.print(modules[y].getTemperature(0));
    1ed8:	2100      	movs	r1, #0
    1eda:	4630      	mov	r0, r6
    1edc:	f7fe fee6 	bl	cac <BMSModule::getTemperature(int)>
    1ee0:	f00a fe26 	bl	cb30 <__aeabi_f2d>
    1ee4:	9500      	str	r5, [sp, #0]
    1ee6:	4602      	mov	r2, r0
    1ee8:	460b      	mov	r3, r1
    1eea:	4640      	mov	r0, r8
    1eec:	f007 fc40 	bl	9770 <Print::printFloat(double, unsigned char)>
    1ef0:	2101      	movs	r1, #1
    1ef2:	4648      	mov	r0, r9
    1ef4:	f00a f960 	bl	c1b8 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(1));
    1ef8:	2101      	movs	r1, #1
    1efa:	4630      	mov	r0, r6
    1efc:	f7fe fed6 	bl	cac <BMSModule::getTemperature(int)>
    1f00:	f00a fe16 	bl	cb30 <__aeabi_f2d>
    1f04:	9500      	str	r5, [sp, #0]
    1f06:	4602      	mov	r2, r0
    1f08:	460b      	mov	r3, r1
    1f0a:	4640      	mov	r0, r8
    1f0c:	f007 fc30 	bl	9770 <Print::printFloat(double, unsigned char)>
    1f10:	2101      	movs	r1, #1
    1f12:	4648      	mov	r0, r9
    1f14:	f00a f950 	bl	c1b8 <usb_serial_write>
      SERIALCONSOLE.print(",");
      SERIALCONSOLE.print(modules[y].getTemperature(2));
    1f18:	2102      	movs	r1, #2
    1f1a:	4630      	mov	r0, r6
    1f1c:	f7fe fec6 	bl	cac <BMSModule::getTemperature(int)>
    1f20:	f00a fe06 	bl	cb30 <__aeabi_f2d>
    1f24:	9500      	str	r5, [sp, #0]
    1f26:	4602      	mov	r2, r0
    1f28:	460b      	mov	r3, r1
    1f2a:	4640      	mov	r0, r8
    1f2c:	f007 fc20 	bl	9770 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    1f30:	3701      	adds	r7, #1
      SERIALCONSOLE.println();
    1f32:	4640      	mov	r0, r8
    1f34:	f007 fbf8 	bl	9728 <Print::println()>
  for (int y = 1; y < 63; y++)
    1f38:	2f3f      	cmp	r7, #63	; 0x3f
    1f3a:	f106 06f8 	add.w	r6, r6, #248	; 0xf8
    1f3e:	d189      	bne.n	1e54 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x2c>
    }
  }
  for (int y = 1; y < 63; y++)
    1f40:	9c05      	ldr	r4, [sp, #20]
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1f42:	4f50      	ldr	r7, [pc, #320]	; (2084 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x25c>)
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
	virtual size_t write(long n)            { return write((uint8_t)n); }
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
	virtual size_t write(int n)             { return write((uint8_t)n); }
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial2_write(buffer, size); return size; }
    1f44:	f8df 8138 	ldr.w	r8, [pc, #312]	; 2080 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x258>
    1f48:	2601      	movs	r6, #1
    1f4a:	f04f 0a00 	mov.w	sl, #0
    1f4e:	e004      	b.n	1f5a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
    1f50:	3601      	adds	r6, #1
    1f52:	2e3f      	cmp	r6, #63	; 0x3f
    1f54:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
    1f58:	d05c      	beq.n	2014 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x1ec>
  {
    if (modules[y].isExisting())
    1f5a:	4620      	mov	r0, r4
    1f5c:	f7fe febc 	bl	cd8 <BMSModule::isExisting()>
    1f60:	2800      	cmp	r0, #0
    1f62:	d0f5      	beq.n	1f50 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x128>
    1f64:	2300      	movs	r3, #0
    1f66:	220a      	movs	r2, #10
    1f68:	9903      	ldr	r1, [sp, #12]
    1f6a:	4638      	mov	r0, r7
    1f6c:	f007 fbf4 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1f70:	2101      	movs	r1, #1
    1f72:	4640      	mov	r0, r8
    1f74:	f008 fdf2 	bl	ab5c <serial2_write>
    {
      Serial2.print(timestamp);
      Serial2.print(",");
      Serial2.print(current, 0);
    1f78:	9804      	ldr	r0, [sp, #16]
    1f7a:	f00a fdd9 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1f7e:	f8cd a000 	str.w	sl, [sp]
    1f82:	4602      	mov	r2, r0
    1f84:	460b      	mov	r3, r1
    1f86:	4638      	mov	r0, r7
    1f88:	f007 fbf2 	bl	9770 <Print::printFloat(double, unsigned char)>
    1f8c:	2101      	movs	r1, #1
    1f8e:	4640      	mov	r0, r8
    1f90:	f008 fde4 	bl	ab5c <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    1f94:	4659      	mov	r1, fp
    1f96:	4638      	mov	r0, r7
    1f98:	f007 fbbe 	bl	9718 <Print::print(long)>
    1f9c:	2101      	movs	r1, #1
    1f9e:	4640      	mov	r0, r8
    1fa0:	f008 fddc 	bl	ab5c <serial2_write>
    1fa4:	4631      	mov	r1, r6
    1fa6:	4638      	mov	r0, r7
    1fa8:	f007 fbb6 	bl	9718 <Print::print(long)>
    1fac:	2101      	movs	r1, #1
    1fae:	4640      	mov	r0, r8
    1fb0:	f008 fdd4 	bl	ab5c <serial2_write>
      Serial2.print(",");
      Serial2.print(SOC);
      Serial2.print(",");
      Serial2.print(y);
      Serial2.print(",");
      for (int i = 0; i < 13; i++)
    1fb4:	2500      	movs	r5, #0
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    1fb6:	f04f 0902 	mov.w	r9, #2
      {
        Serial2.print(modules[y].getCellVoltage(i));
    1fba:	4629      	mov	r1, r5
    1fbc:	4620      	mov	r0, r4
    1fbe:	f7fe fb0b 	bl	5d8 <BMSModule::getCellVoltage(int)>
    1fc2:	f00a fdb5 	bl	cb30 <__aeabi_f2d>
    1fc6:	f8cd 9000 	str.w	r9, [sp]
    1fca:	4602      	mov	r2, r0
    1fcc:	460b      	mov	r3, r1
    1fce:	4638      	mov	r0, r7
    1fd0:	f007 fbce 	bl	9770 <Print::printFloat(double, unsigned char)>
      for (int i = 0; i < 13; i++)
    1fd4:	3501      	adds	r5, #1
    1fd6:	2101      	movs	r1, #1
    1fd8:	4640      	mov	r0, r8
    1fda:	f008 fdbf 	bl	ab5c <serial2_write>
    1fde:	2d0d      	cmp	r5, #13
    1fe0:	d1eb      	bne.n	1fba <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x192>
        Serial2.print(",");
      }
      if (modules[y].getType() == 1)
    1fe2:	4620      	mov	r0, r4
    1fe4:	f7fe fe70 	bl	cc8 <BMSModule::getType()>
    1fe8:	4605      	mov	r5, r0
    1fea:	2d01      	cmp	r5, #1
      {
        Serial2.print(modules[y].getTemperature(0));
    1fec:	f04f 0100 	mov.w	r1, #0
    1ff0:	4620      	mov	r0, r4
      if (modules[y].getType() == 1)
    1ff2:	d012      	beq.n	201a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x1f2>
        Serial2.print(modules[y].getTemperature(2));
        Serial2.println();
      }
      else
      {
        Serial2.print(modules[y].getTemperature(0));
    1ff4:	f7fe fe5a 	bl	cac <BMSModule::getTemperature(int)>
    1ff8:	f00a fd9a 	bl	cb30 <__aeabi_f2d>
  for (int y = 1; y < 63; y++)
    1ffc:	3601      	adds	r6, #1
        Serial2.print(modules[y].getTemperature(0));
    1ffe:	4602      	mov	r2, r0
    2000:	460b      	mov	r3, r1
    2002:	f8cd 9000 	str.w	r9, [sp]
    2006:	4638      	mov	r0, r7
    2008:	f007 fbb2 	bl	9770 <Print::printFloat(double, unsigned char)>
  for (int y = 1; y < 63; y++)
    200c:	2e3f      	cmp	r6, #63	; 0x3f
    200e:	f104 04f8 	add.w	r4, r4, #248	; 0xf8
    2012:	d1a2      	bne.n	1f5a <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x132>
      }
    }
  }
}
    2014:	b007      	add	sp, #28
    2016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Serial2.print(modules[y].getTemperature(0));
    201a:	f7fe fe47 	bl	cac <BMSModule::getTemperature(int)>
    201e:	f00a fd87 	bl	cb30 <__aeabi_f2d>
    2022:	f8cd 9000 	str.w	r9, [sp]
    2026:	4602      	mov	r2, r0
    2028:	460b      	mov	r3, r1
    202a:	4638      	mov	r0, r7
    202c:	f007 fba0 	bl	9770 <Print::printFloat(double, unsigned char)>
    2030:	4629      	mov	r1, r5
    2032:	4640      	mov	r0, r8
    2034:	f008 fd92 	bl	ab5c <serial2_write>
        Serial2.print(modules[y].getTemperature(1));
    2038:	4629      	mov	r1, r5
    203a:	4620      	mov	r0, r4
    203c:	f7fe fe36 	bl	cac <BMSModule::getTemperature(int)>
    2040:	f00a fd76 	bl	cb30 <__aeabi_f2d>
    2044:	f8cd 9000 	str.w	r9, [sp]
    2048:	4602      	mov	r2, r0
    204a:	460b      	mov	r3, r1
    204c:	4638      	mov	r0, r7
    204e:	f007 fb8f 	bl	9770 <Print::printFloat(double, unsigned char)>
    2052:	4629      	mov	r1, r5
    2054:	4640      	mov	r0, r8
    2056:	f008 fd81 	bl	ab5c <serial2_write>
        Serial2.print(modules[y].getTemperature(2));
    205a:	2102      	movs	r1, #2
    205c:	4620      	mov	r0, r4
    205e:	f7fe fe25 	bl	cac <BMSModule::getTemperature(int)>
    2062:	f00a fd65 	bl	cb30 <__aeabi_f2d>
    2066:	f8cd 9000 	str.w	r9, [sp]
    206a:	4602      	mov	r2, r0
    206c:	460b      	mov	r3, r1
    206e:	4638      	mov	r0, r7
    2070:	f007 fb7e 	bl	9770 <Print::printFloat(double, unsigned char)>
        Serial2.println();
    2074:	4638      	mov	r0, r7
    2076:	f007 fb57 	bl	9728 <Print::println()>
    207a:	e769      	b.n	1f50 <BMSModuleManager::printAllCSV(unsigned long, float, int)+0x128>
    207c:	1fff89fc 	.word	0x1fff89fc
    2080:	00013cdc 	.word	0x00013cdc
    2084:	1fff88bc 	.word	0x1fff88bc

00002088 <Logger::setLoglevel(Logger::LogLevel)>:

/*
   Set the log level. Any output below the specified log level will be omitted.
*/
void Logger::setLoglevel(LogLevel level) {
  logLevel = level;
    2088:	4b01      	ldr	r3, [pc, #4]	; (2090 <Logger::setLoglevel(Logger::LogLevel)+0x8>)
    208a:	7018      	strb	r0, [r3, #0]
}
    208c:	4770      	bx	lr
    208e:	bf00      	nop
    2090:	1fff8824 	.word	0x1fff8824

00002094 <Logger::logMessage(char*, std::__va_list)>:
   %c - prints the next parameter as a character
   %t - prints the next parameter as boolean ('T' or 'F')
   %T - prints the next parameter as boolean ('true' or 'false')
*/
void Logger::logMessage(char *format, va_list args) {
  for (; *format != 0; ++format) {
    2094:	7802      	ldrb	r2, [r0, #0]
    2096:	2a00      	cmp	r2, #0
    2098:	f000 80b8 	beq.w	220c <Logger::logMessage(char*, std::__va_list)+0x178>
void Logger::logMessage(char *format, va_list args) {
    209c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    20a0:	4f5c      	ldr	r7, [pc, #368]	; (2214 <Logger::logMessage(char*, std::__va_list)+0x180>)
    20a2:	f8df 8174 	ldr.w	r8, [pc, #372]	; 2218 <Logger::logMessage(char*, std::__va_list)+0x184>
    20a6:	4e5d      	ldr	r6, [pc, #372]	; (221c <Logger::logMessage(char*, std::__va_list)+0x188>)
    20a8:	b083      	sub	sp, #12
    20aa:	4603      	mov	r3, r0
    20ac:	460d      	mov	r5, r1
    if (*format == '%') {
    20ae:	2a25      	cmp	r2, #37	; 0x25
    20b0:	d134      	bne.n	211c <Logger::logMessage(char*, std::__va_list)+0x88>
      ++format;
      if (*format == '\0')
    20b2:	7858      	ldrb	r0, [r3, #1]
      ++format;
    20b4:	1c5c      	adds	r4, r3, #1
      if (*format == '\0')
    20b6:	2800      	cmp	r0, #0
    20b8:	d038      	beq.n	212c <Logger::logMessage(char*, std::__va_list)+0x98>
        break;
      if (*format == '%') {
    20ba:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    20be:	2b55      	cmp	r3, #85	; 0x55
    20c0:	d82e      	bhi.n	2120 <Logger::logMessage(char*, std::__va_list)+0x8c>
    20c2:	e8df f003 	tbb	[pc, r3]
    20c6:	2d9f      	.short	0x2d9f
    20c8:	2d2d2d2d 	.word	0x2d2d2d2d
    20cc:	2d2d2d2d 	.word	0x2d2d2d2d
    20d0:	2d2d2d2d 	.word	0x2d2d2d2d
    20d4:	2d2d2d2d 	.word	0x2d2d2d2d
    20d8:	2d2d2d2d 	.word	0x2d2d2d2d
    20dc:	2d2d2d2d 	.word	0x2d2d2d2d
    20e0:	932d2d2d 	.word	0x932d2d2d
    20e4:	2d2d2d2d 	.word	0x2d2d2d2d
    20e8:	2d2d2d2d 	.word	0x2d2d2d2d
    20ec:	2d2d2d2d 	.word	0x2d2d2d2d
    20f0:	2d2d2d2d 	.word	0x2d2d2d2d
    20f4:	2d2d882d 	.word	0x2d2d882d
    20f8:	2d2d7c2d 	.word	0x2d2d7c2d
    20fc:	2d2d2d2d 	.word	0x2d2d2d2d
    2100:	742d2d2d 	.word	0x742d2d2d
    2104:	5e2d3939 	.word	0x5e2d3939
    2108:	2d392d2d 	.word	0x2d392d2d
    210c:	2d2d392d 	.word	0x2d2d392d
    2110:	2d2d2d2d 	.word	0x2d2d2d2d
    2114:	2d2d3f49 	.word	0x2d2d3f49
    2118:	692d562d 	.word	0x692d562d
        }
        continue;
      }

    }
    SERIALCONSOLE.print(*format);
    211c:	7818      	ldrb	r0, [r3, #0]
    211e:	461c      	mov	r4, r3
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2120:	f00a f8ce 	bl	c2c0 <usb_serial_putchar>
  for (; *format != 0; ++format) {
    2124:	7862      	ldrb	r2, [r4, #1]
    2126:	1c63      	adds	r3, r4, #1
    2128:	2a00      	cmp	r2, #0
    212a:	d1c0      	bne.n	20ae <Logger::logMessage(char*, std::__va_list)+0x1a>
  }
  SERIALCONSOLE.println();
    212c:	483c      	ldr	r0, [pc, #240]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
}
    212e:	b003      	add	sp, #12
    2130:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
  SERIALCONSOLE.println();
    2134:	f007 baf8 	b.w	9728 <Print::println()>
	size_t print(int n)				{ return print((long)n); }
    2138:	f855 1b04 	ldr.w	r1, [r5], #4
    213c:	4838      	ldr	r0, [pc, #224]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    213e:	f007 faeb 	bl	9718 <Print::print(long)>
        continue;
    2142:	e7ef      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    2144:	f855 1b04 	ldr.w	r1, [r5], #4
    2148:	2901      	cmp	r1, #1
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    214a:	bf0e      	itee	eq
    214c:	4835      	ldreq	r0, [pc, #212]	; (2224 <Logger::logMessage(char*, std::__va_list)+0x190>)
    214e:	2101      	movne	r1, #1
    2150:	4630      	movne	r0, r6
    2152:	f00a f831 	bl	c1b8 <usb_serial_write>
    2156:	e7e5      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        register char *s = (char *) va_arg( args, int );
    2158:	f855 9b04 	ldr.w	r9, [r5], #4
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    215c:	f1b9 0f00 	cmp.w	r9, #0
    2160:	d0e0      	beq.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
							  return write((const uint8_t *)str, strlen(str)); }
    2162:	4648      	mov	r0, r9
    2164:	f00c f8ac 	bl	e2c0 <strlen>
    2168:	4601      	mov	r1, r0
    216a:	4648      	mov	r0, r9
    216c:	f00a f824 	bl	c1b8 <usb_serial_write>
    2170:	e7d8      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    2172:	f855 1b04 	ldr.w	r1, [r5], #4
    2176:	482a      	ldr	r0, [pc, #168]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2178:	2300      	movs	r3, #0
    217a:	2210      	movs	r2, #16
    217c:	f007 faec 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    2180:	e7d0      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 3);
    2182:	3507      	adds	r5, #7
    2184:	f025 0507 	bic.w	r5, r5, #7
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2188:	2103      	movs	r1, #3
    218a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    218e:	4824      	ldr	r0, [pc, #144]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    2190:	9100      	str	r1, [sp, #0]
    2192:	f007 faed 	bl	9770 <Print::printFloat(double, unsigned char)>
        continue;
    2196:	e7c5      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        SERIALCONSOLE.print(va_arg( args, double ), 0);
    2198:	3507      	adds	r5, #7
    219a:	f025 0507 	bic.w	r5, r5, #7
    219e:	2100      	movs	r1, #0
    21a0:	e8f5 2302 	ldrd	r2, r3, [r5], #8
    21a4:	481e      	ldr	r0, [pc, #120]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    21a6:	9100      	str	r1, [sp, #0]
    21a8:	f007 fae2 	bl	9770 <Print::printFloat(double, unsigned char)>
        continue;
    21ac:	e7ba      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    21ae:	f855 1b04 	ldr.w	r1, [r5], #4
    21b2:	481b      	ldr	r0, [pc, #108]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    21b4:	2300      	movs	r3, #0
    21b6:	2202      	movs	r2, #2
    21b8:	f007 face 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    21bc:	e7b2      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
    21be:	2102      	movs	r1, #2
    21c0:	4819      	ldr	r0, [pc, #100]	; (2228 <Logger::logMessage(char*, std::__va_list)+0x194>)
    21c2:	f009 fff9 	bl	c1b8 <usb_serial_write>
    21c6:	f855 1b04 	ldr.w	r1, [r5], #4
    21ca:	4815      	ldr	r0, [pc, #84]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    21cc:	2300      	movs	r3, #0
    21ce:	2210      	movs	r2, #16
    21d0:	f007 fac2 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    21d4:	e7a6      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        if (va_arg( args, int ) == 1) {
    21d6:	f855 3b04 	ldr.w	r3, [r5], #4
    21da:	2b01      	cmp	r3, #1
    21dc:	bf07      	ittee	eq
    21de:	2104      	moveq	r1, #4
    21e0:	4640      	moveq	r0, r8
    21e2:	2105      	movne	r1, #5
    21e4:	4638      	movne	r0, r7
    21e6:	f009 ffe7 	bl	c1b8 <usb_serial_write>
    21ea:	e79b      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
    21ec:	2102      	movs	r1, #2
    21ee:	480f      	ldr	r0, [pc, #60]	; (222c <Logger::logMessage(char*, std::__va_list)+0x198>)
    21f0:	f009 ffe2 	bl	c1b8 <usb_serial_write>
    21f4:	f855 1b04 	ldr.w	r1, [r5], #4
    21f8:	4809      	ldr	r0, [pc, #36]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    21fa:	2300      	movs	r3, #0
    21fc:	2202      	movs	r2, #2
    21fe:	f007 faab 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        continue;
    2202:	e78f      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    2204:	2025      	movs	r0, #37	; 0x25
    2206:	f00a f85b 	bl	c2c0 <usb_serial_putchar>
        continue;
    220a:	e78b      	b.n	2124 <Logger::logMessage(char*, std::__va_list)+0x90>
  SERIALCONSOLE.println();
    220c:	4804      	ldr	r0, [pc, #16]	; (2220 <Logger::logMessage(char*, std::__va_list)+0x18c>)
    220e:	f007 ba8b 	b.w	9728 <Print::println()>
    2212:	bf00      	nop
    2214:	00014164 	.word	0x00014164
    2218:	0001415c 	.word	0x0001415c
    221c:	00014158 	.word	0x00014158
    2220:	1fff89fc 	.word	0x1fff89fc
    2224:	00014154 	.word	0x00014154
    2228:	0001414c 	.word	0x0001414c
    222c:	00014150 	.word	0x00014150

00002230 <Logger::console(char*, ...)>:
void Logger::console(char *message, ...) {
    2230:	b40f      	push	{r0, r1, r2, r3}
    2232:	b500      	push	{lr}
    2234:	b083      	sub	sp, #12
    2236:	a904      	add	r1, sp, #16
    2238:	f851 0b04 	ldr.w	r0, [r1], #4
  va_start(args, message);
    223c:	9101      	str	r1, [sp, #4]
  Logger::logMessage(message, args);
    223e:	f7ff ff29 	bl	2094 <Logger::logMessage(char*, std::__va_list)>
}
    2242:	b003      	add	sp, #12
    2244:	f85d eb04 	ldr.w	lr, [sp], #4
    2248:	b004      	add	sp, #16
    224a:	4770      	bx	lr

0000224c <Logger::log(Logger::LogLevel, char*, std::__va_list)>:
void Logger::log(LogLevel level, char *format, va_list args) {
    224c:	b5f0      	push	{r4, r5, r6, r7, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    224e:	4b1c      	ldr	r3, [pc, #112]	; (22c0 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x74>)
  lastLogTime = millis();
    2250:	4f1c      	ldr	r7, [pc, #112]	; (22c4 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x78>)
    2252:	681b      	ldr	r3, [r3, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    2254:	b083      	sub	sp, #12
    2256:	4604      	mov	r4, r0
    2258:	9301      	str	r3, [sp, #4]
	return ret;
    225a:	9b01      	ldr	r3, [sp, #4]
  lastLogTime = millis();
    225c:	603b      	str	r3, [r7, #0]
void Logger::log(LogLevel level, char *format, va_list args) {
    225e:	460d      	mov	r5, r1
    2260:	4616      	mov	r6, r2
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    2262:	4619      	mov	r1, r3
    2264:	220a      	movs	r2, #10
    2266:	2300      	movs	r3, #0
    2268:	4817      	ldr	r0, [pc, #92]	; (22c8 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x7c>)
    226a:	f007 fa75 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    226e:	2103      	movs	r1, #3
    2270:	4816      	ldr	r0, [pc, #88]	; (22cc <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x80>)
    2272:	f009 ffa1 	bl	c1b8 <usb_serial_write>
  switch (level) {
    2276:	2c03      	cmp	r4, #3
    2278:	d807      	bhi.n	228a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    227a:	e8df f004 	tbb	[pc, r4]
    227e:	161b      	.short	0x161b
    2280:	1102      	.short	0x1102
    2282:	4813      	ldr	r0, [pc, #76]	; (22d0 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x84>)
    2284:	2107      	movs	r1, #7
    2286:	f009 ff97 	bl	c1b8 <usb_serial_write>
    228a:	2102      	movs	r1, #2
    228c:	4811      	ldr	r0, [pc, #68]	; (22d4 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x88>)
    228e:	f009 ff93 	bl	c1b8 <usb_serial_write>
  logMessage(format, args);
    2292:	4631      	mov	r1, r6
    2294:	4628      	mov	r0, r5
}
    2296:	b003      	add	sp, #12
    2298:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  logMessage(format, args);
    229c:	f7ff befa 	b.w	2094 <Logger::logMessage(char*, std::__va_list)>
    22a0:	2105      	movs	r1, #5
    22a2:	480d      	ldr	r0, [pc, #52]	; (22d8 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x8c>)
    22a4:	f009 ff88 	bl	c1b8 <usb_serial_write>
    22a8:	e7ef      	b.n	228a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    22aa:	2104      	movs	r1, #4
    22ac:	480b      	ldr	r0, [pc, #44]	; (22dc <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x90>)
    22ae:	f009 ff83 	bl	c1b8 <usb_serial_write>
    22b2:	e7ea      	b.n	228a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    22b4:	2105      	movs	r1, #5
    22b6:	480a      	ldr	r0, [pc, #40]	; (22e0 <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x94>)
    22b8:	f009 ff7e 	bl	c1b8 <usb_serial_write>
    22bc:	e7e5      	b.n	228a <Logger::log(Logger::LogLevel, char*, std::__va_list)+0x3e>
    22be:	bf00      	nop
    22c0:	1fffd3c0 	.word	0x1fffd3c0
    22c4:	1fff9190 	.word	0x1fff9190
    22c8:	1fff89fc 	.word	0x1fff89fc
    22cc:	0001416c 	.word	0x0001416c
    22d0:	00014180 	.word	0x00014180
    22d4:	000141b4 	.word	0x000141b4
    22d8:	00014188 	.word	0x00014188
    22dc:	00014178 	.word	0x00014178
    22e0:	00014170 	.word	0x00014170

000022e4 <Logger::debug(char*, ...)>:
void Logger::debug(char *message, ...) {
    22e4:	b40f      	push	{r0, r1, r2, r3}
    22e6:	b500      	push	{lr}
  if (logLevel > Debug)
    22e8:	4b06      	ldr	r3, [pc, #24]	; (2304 <Logger::debug(char*, ...)+0x20>)
    22ea:	7818      	ldrb	r0, [r3, #0]
void Logger::debug(char *message, ...) {
    22ec:	b083      	sub	sp, #12
  if (logLevel > Debug)
    22ee:	b920      	cbnz	r0, 22fa <Logger::debug(char*, ...)+0x16>
  va_start(args, message);
    22f0:	aa05      	add	r2, sp, #20
  Logger::log(Debug, message, args);
    22f2:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    22f4:	9201      	str	r2, [sp, #4]
  Logger::log(Debug, message, args);
    22f6:	f7ff ffa9 	bl	224c <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    22fa:	b003      	add	sp, #12
    22fc:	f85d eb04 	ldr.w	lr, [sp], #4
    2300:	b004      	add	sp, #16
    2302:	4770      	bx	lr
    2304:	1fff8824 	.word	0x1fff8824

00002308 <Logger::info(char*, ...)>:
void Logger::info(char *message, ...) {
    2308:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Info)
    230a:	4b08      	ldr	r3, [pc, #32]	; (232c <Logger::info(char*, ...)+0x24>)
void Logger::info(char *message, ...) {
    230c:	b500      	push	{lr}
  if (logLevel > Info)
    230e:	781b      	ldrb	r3, [r3, #0]
    2310:	2b01      	cmp	r3, #1
void Logger::info(char *message, ...) {
    2312:	b083      	sub	sp, #12
  if (logLevel > Info)
    2314:	d805      	bhi.n	2322 <Logger::info(char*, ...)+0x1a>
  va_start(args, message);
    2316:	aa05      	add	r2, sp, #20
  Logger::log(Info, message, args);
    2318:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    231a:	9201      	str	r2, [sp, #4]
  Logger::log(Info, message, args);
    231c:	2001      	movs	r0, #1
    231e:	f7ff ff95 	bl	224c <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    2322:	b003      	add	sp, #12
    2324:	f85d eb04 	ldr.w	lr, [sp], #4
    2328:	b004      	add	sp, #16
    232a:	4770      	bx	lr
    232c:	1fff8824 	.word	0x1fff8824

00002330 <Logger::error(char*, ...)>:
void Logger::error(char *message, ...) {
    2330:	b40f      	push	{r0, r1, r2, r3}
  if (logLevel > Error)
    2332:	4b08      	ldr	r3, [pc, #32]	; (2354 <Logger::error(char*, ...)+0x24>)
void Logger::error(char *message, ...) {
    2334:	b500      	push	{lr}
  if (logLevel > Error)
    2336:	781b      	ldrb	r3, [r3, #0]
    2338:	2b03      	cmp	r3, #3
void Logger::error(char *message, ...) {
    233a:	b083      	sub	sp, #12
  if (logLevel > Error)
    233c:	d805      	bhi.n	234a <Logger::error(char*, ...)+0x1a>
  va_start(args, message);
    233e:	aa05      	add	r2, sp, #20
  Logger::log(Error, message, args);
    2340:	9904      	ldr	r1, [sp, #16]
  va_start(args, message);
    2342:	9201      	str	r2, [sp, #4]
  Logger::log(Error, message, args);
    2344:	2003      	movs	r0, #3
    2346:	f7ff ff81 	bl	224c <Logger::log(Logger::LogLevel, char*, std::__va_list)>
}
    234a:	b003      	add	sp, #12
    234c:	f85d eb04 	ldr.w	lr, [sp], #4
    2350:	b004      	add	sp, #16
    2352:	4770      	bx	lr
    2354:	1fff8824 	.word	0x1fff8824

00002358 <SerialConsole::SerialConsole()>:

bool printPrettyDisplay;
uint32_t prettyCounter;
int whichDisplay;

SerialConsole::SerialConsole() {
    2358:	b430      	push	{r4, r5}
    //State variables for serial console
    ptrBuffer = 0;
    state = STATE_ROOT_MENU;
    loopcount=0;
    cancel=false;
    printPrettyDisplay = false;
    235a:	4d07      	ldr	r5, [pc, #28]	; (2378 <SerialConsole::SerialConsole()+0x20>)
    prettyCounter = 0;
    235c:	4c07      	ldr	r4, [pc, #28]	; (237c <SerialConsole::SerialConsole()+0x24>)
    whichDisplay = 0;
    235e:	4908      	ldr	r1, [pc, #32]	; (2380 <SerialConsole::SerialConsole()+0x28>)
    ptrBuffer = 0;
    2360:	2300      	movs	r3, #0
    printPrettyDisplay = false;
    2362:	702b      	strb	r3, [r5, #0]
    prettyCounter = 0;
    2364:	6023      	str	r3, [r4, #0]
    ptrBuffer = 0;
    2366:	6503      	str	r3, [r0, #80]	; 0x50
}
    2368:	bc30      	pop	{r4, r5}
    state = STATE_ROOT_MENU;
    236a:	6543      	str	r3, [r0, #84]	; 0x54
    loopcount=0;
    236c:	6583      	str	r3, [r0, #88]	; 0x58
    cancel=false;
    236e:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
    whichDisplay = 0;
    2372:	600b      	str	r3, [r1, #0]
}
    2374:	4770      	bx	lr
    2376:	bf00      	nop
    2378:	1fff9198 	.word	0x1fff9198
    237c:	1fff9194 	.word	0x1fff9194
    2380:	1fff919c 	.word	0x1fff919c

00002384 <isrCP()>:
  } else {
    return canId;  // not sure if this is really right?
  }
}

void isrCP() {
    2384:	b570      	push	{r4, r5, r6, lr}
  if (digitalRead(IN4) == LOW) {
    2386:	2013      	movs	r0, #19
    2388:	f008 f8c8 	bl	a51c <digitalRead>
    238c:	b958      	cbnz	r0, 23a6 <isrCP()+0x22>
    duration = micros() - pilottimer;
    238e:	4c11      	ldr	r4, [pc, #68]	; (23d4 <isrCP()+0x50>)
    2390:	f008 f90e 	bl	a5b0 <micros>
    2394:	6822      	ldr	r2, [r4, #0]
    2396:	4b10      	ldr	r3, [pc, #64]	; (23d8 <isrCP()+0x54>)
    2398:	1a80      	subs	r0, r0, r2
    239a:	b280      	uxth	r0, r0
    239c:	8018      	strh	r0, [r3, #0]
    pilottimer = micros();
    239e:	f008 f907 	bl	a5b0 <micros>
    23a2:	6020      	str	r0, [r4, #0]
  } else {
    accurlim = ((duration - (micros() - pilottimer + 35)) * 60) / duration;  //pilottimer + "xx" optocoupler decade ms
  }
}  // ******** end of isr CP ********
    23a4:	bd70      	pop	{r4, r5, r6, pc}
    accurlim = ((duration - (micros() - pilottimer + 35)) * 60) / duration;  //pilottimer + "xx" optocoupler decade ms
    23a6:	4d0c      	ldr	r5, [pc, #48]	; (23d8 <isrCP()+0x54>)
    23a8:	4b0a      	ldr	r3, [pc, #40]	; (23d4 <isrCP()+0x50>)
    23aa:	882c      	ldrh	r4, [r5, #0]
    23ac:	681e      	ldr	r6, [r3, #0]
    23ae:	f008 f8ff 	bl	a5b0 <micros>
    23b2:	b2a4      	uxth	r4, r4
    23b4:	4434      	add	r4, r6
    23b6:	1a20      	subs	r0, r4, r0
    23b8:	882a      	ldrh	r2, [r5, #0]
    23ba:	4908      	ldr	r1, [pc, #32]	; (23dc <isrCP()+0x58>)
    23bc:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
    23c0:	009b      	lsls	r3, r3, #2
    23c2:	b292      	uxth	r2, r2
    23c4:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
    23c8:	fbb3 f3f2 	udiv	r3, r3, r2
    23cc:	b29b      	uxth	r3, r3
    23ce:	800b      	strh	r3, [r1, #0]
}  // ******** end of isr CP ********
    23d0:	bd70      	pop	{r4, r5, r6, pc}
    23d2:	bf00      	nop
    23d4:	1fffd0d0 	.word	0x1fffd0d0
    23d8:	1fffcfd0 	.word	0x1fffcfd0
    23dc:	1fff91d8 	.word	0x1fff91d8

000023e0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>:
	} else {
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
#endif
	long in_range = in_max - in_min;
	long out_range = out_max - out_min;
    23e0:	f8dd c000 	ldr.w	ip, [sp]
	if (in_range == 0) return out_min + out_range / 2;
    23e4:	1a52      	subs	r2, r2, r1
	long out_range = out_max - out_min;
    23e6:	ebac 0c03 	sub.w	ip, ip, r3
	if (in_range == 0) return out_min + out_range / 2;
    23ea:	d01c      	beq.n	2426 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x46>
	long num = (x - in_min) * out_range;
    23ec:	1a40      	subs	r0, r0, r1
	if (out_range >= 0) {
    23ee:	f1bc 0f00 	cmp.w	ip, #0
	long num = (x - in_min) * out_range;
    23f2:	fb0c f000 	mul.w	r0, ip, r0
		num += in_range / 2;
    23f6:	eb02 71d2 	add.w	r1, r2, r2, lsr #31
	if (out_range >= 0) {
    23fa:	db09      	blt.n	2410 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x30>
		num += in_range / 2;
    23fc:	eb00 0061 	add.w	r0, r0, r1, asr #1
	} else {
		num -= in_range / 2;
	}
	long result = num / in_range + out_min;
	if (out_range >= 0) {
		if (in_range * num < 0) return result - 1;
    2400:	fb00 f102 	mul.w	r1, r0, r2
    2404:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    2406:	fb90 f0f2 	sdiv	r0, r0, r2
    240a:	4418      	add	r0, r3
		if (in_range * num < 0) return result - 1;
    240c:	db10      	blt.n	2430 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x50>
		if (in_range * num >= 0) return result + 1;
	}
	return result;
	// more conversation:
	// https://forum.pjrc.com/threads/44503-map()-function-improvements
}
    240e:	4770      	bx	lr
		num -= in_range / 2;
    2410:	eba0 0061 	sub.w	r0, r0, r1, asr #1
		if (in_range * num >= 0) return result + 1;
    2414:	fb00 f102 	mul.w	r1, r0, r2
    2418:	2900      	cmp	r1, #0
	long result = num / in_range + out_min;
    241a:	fb90 f0f2 	sdiv	r0, r0, r2
    241e:	4418      	add	r0, r3
		if (in_range * num >= 0) return result + 1;
    2420:	dbf5      	blt.n	240e <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]+0x2e>
    2422:	3001      	adds	r0, #1
}
    2424:	4770      	bx	lr
	if (in_range == 0) return out_min + out_range / 2;
    2426:	eb0c 7cdc 	add.w	ip, ip, ip, lsr #31
    242a:	eb03 006c 	add.w	r0, r3, ip, asr #1
    242e:	4770      	bx	lr
		if (in_range * num < 0) return result - 1;
    2430:	3801      	subs	r0, #1
    2432:	4770      	bx	lr

00002434 <Print::println(char const*) [clone .isra.0]>:
	size_t println(const char s[])			{ return print(s) + println(); }
    2434:	b538      	push	{r3, r4, r5, lr}
    2436:	4604      	mov	r4, r0
	size_t write(const char *str)			{ if (str == nullptr) return 0;
    2438:	b149      	cbz	r1, 244e <Print::println(char const*) [clone .isra.0]+0x1a>
							  return write((const uint8_t *)str, strlen(str)); }
    243a:	4608      	mov	r0, r1
    243c:	460d      	mov	r5, r1
    243e:	f00b ff3f 	bl	e2c0 <strlen>
    2442:	6823      	ldr	r3, [r4, #0]
    2444:	4602      	mov	r2, r0
    2446:	685b      	ldr	r3, [r3, #4]
    2448:	4629      	mov	r1, r5
    244a:	4620      	mov	r0, r4
    244c:	4798      	blx	r3
	size_t println(const char s[])			{ return print(s) + println(); }
    244e:	4620      	mov	r0, r4
    2450:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    2454:	f007 b968 	b.w	9728 <Print::println()>

00002458 <loadSettings()>:
void loadSettings() {
    2458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  Logger::console("Resetting to factory defaults");
    245c:	4840      	ldr	r0, [pc, #256]	; (2560 <loadSettings()+0x108>)
  settings.UnderTSetpoint = -10.0f;
    245e:	4e41      	ldr	r6, [pc, #260]	; (2564 <loadSettings()+0x10c>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    2460:	4c41      	ldr	r4, [pc, #260]	; (2568 <loadSettings()+0x110>)
  settings.offset1 = 1750;     //mV mid point of channel 1
    2462:	f8df 9108 	ldr.w	r9, [pc, #264]	; 256c <loadSettings()+0x114>
  settings.convhigh = 58;      // mV/A current sensor high range channel
    2466:	f8df 8108 	ldr.w	r8, [pc, #264]	; 2570 <loadSettings()+0x118>
  settings.UnderDur = 5000;    //ms of allowed undervoltage before throwing open stopping discharge.
    246a:	4f42      	ldr	r7, [pc, #264]	; (2574 <loadSettings()+0x11c>)
  Logger::console("Resetting to factory defaults");
    246c:	f7ff fee0 	bl	2230 <Logger::console(char*, ...)>
  settings.version = EEPROM_VERSION;
    2470:	4b41      	ldr	r3, [pc, #260]	; (2578 <loadSettings()+0x120>)
  settings.OverVSetpoint = 4.2f;
    2472:	4942      	ldr	r1, [pc, #264]	; (257c <loadSettings()+0x124>)
    2474:	60d9      	str	r1, [r3, #12]
  settings.UnderVSetpoint = 3.0f;
    2476:	4942      	ldr	r1, [pc, #264]	; (2580 <loadSettings()+0x128>)
    2478:	6119      	str	r1, [r3, #16]
  settings.ChargeVsetpoint = 4.1f;
    247a:	4942      	ldr	r1, [pc, #264]	; (2584 <loadSettings()+0x12c>)
    247c:	6159      	str	r1, [r3, #20]
  settings.WarnOff = 0.1f;    //voltage offset to raise a warning
    247e:	4942      	ldr	r1, [pc, #264]	; (2588 <loadSettings()+0x130>)
    2480:	6259      	str	r1, [r3, #36]	; 0x24
  settings.DischVsetpoint = 3.2f;
    2482:	4942      	ldr	r1, [pc, #264]	; (258c <loadSettings()+0x134>)
    2484:	6199      	str	r1, [r3, #24]
  settings.UnderTSetpoint = -10.0f;
    2486:	62de      	str	r6, [r3, #44]	; 0x2c
  settings.IgnoreVolt = 0.5;  //
    2488:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
  settings.ChargeTSetpoint = 0.0f;
    248c:	2600      	movs	r6, #0
  settings.IgnoreVolt = 0.5;  //
    248e:	6459      	str	r1, [r3, #68]	; 0x44
  settings.DeltaVolt = 0.5;    //V of allowable difference between measurements
    2490:	6519      	str	r1, [r3, #80]	; 0x50
  settings.ChargeTSetpoint = 0.0f;
    2492:	631e      	str	r6, [r3, #48]	; 0x30
  settings.chargecurrentmax = 300;  //max charge current in 0.1A
    2494:	f44f 7196 	mov.w	r1, #300	; 0x12c
  settings.DisTSetpoint = 40.0f;
    2498:	4e3d      	ldr	r6, [pc, #244]	; (2590 <loadSettings()+0x138>)
  settings.chargecurrentmax = 300;  //max charge current in 0.1A
    249a:	6619      	str	r1, [r3, #96]	; 0x60
  settings.discurrentmax = 300;     // max discharge current in 0.1A
    249c:	6699      	str	r1, [r3, #104]	; 0x68
  settings.DisTSetpoint = 40.0f;
    249e:	635e      	str	r6, [r3, #52]	; 0x34
  settings.socvolt[0] = 3100;       //Voltage and SOC curve for voltage based SOC calc
    24a0:	f640 411c 	movw	r1, #3100	; 0xc1c
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    24a4:	4e3b      	ldr	r6, [pc, #236]	; (2594 <loadSettings()+0x13c>)
  settings.socvolt[0] = 3100;       //Voltage and SOC curve for voltage based SOC calc
    24a6:	66d9      	str	r1, [r3, #108]	; 0x6c
  settings.WarnToff = 5.0f;   //temp offset before raising warning
    24a8:	639e      	str	r6, [r3, #56]	; 0x38
  settings.socvolt[1] = 10;         //Voltage and SOC curve for voltage based SOC calc
    24aa:	210a      	movs	r1, #10
  settings.canSpeed = 500000;
    24ac:	4e3a      	ldr	r6, [pc, #232]	; (2598 <loadSettings()+0x140>)
  settings.socvolt[1] = 10;         //Voltage and SOC curve for voltage based SOC calc
    24ae:	6719      	str	r1, [r3, #112]	; 0x70
  settings.version = EEPROM_VERSION;
    24b0:	f240 2512 	movw	r5, #530	; 0x212
  settings.socvolt[2] = 4100;       //Voltage and SOC curve for voltage based SOC calc
    24b4:	f241 0104 	movw	r1, #4100	; 0x1004
  settings.canSpeed = 500000;
    24b8:	605e      	str	r6, [r3, #4]
  settings.StoreVsetpoint = 3.8;    // V storage mode charge max
    24ba:	4e38      	ldr	r6, [pc, #224]	; (259c <loadSettings()+0x144>)
  settings.version = EEPROM_VERSION;
    24bc:	801d      	strh	r5, [r3, #0]
  settings.socvolt[2] = 4100;       //Voltage and SOC curve for voltage based SOC calc
    24be:	6759      	str	r1, [r3, #116]	; 0x74
  settings.OverTSetpoint = 65.0f;
    24c0:	4d37      	ldr	r5, [pc, #220]	; (25a0 <loadSettings()+0x148>)
  settings.StoreVsetpoint = 3.8;    // V storage mode charge max
    24c2:	621e      	str	r6, [r3, #32]
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    24c4:	215a      	movs	r1, #90	; 0x5a
  settings.balanceVoltage = 3.9f;
    24c6:	4e37      	ldr	r6, [pc, #220]	; (25a4 <loadSettings()+0x14c>)
  settings.ChargeHys = 0.2f;  // voltage drop required for charger to kick back on
    24c8:	61dc      	str	r4, [r3, #28]
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    24ca:	2200      	movs	r2, #0
  settings.curcan = LemCAB300;
    24cc:	2001      	movs	r0, #1
  settings.OverTSetpoint = 65.0f;
    24ce:	629d      	str	r5, [r3, #40]	; 0x28
  settings.CellGap = 0.2f;  //max delta between high and low cell
    24d0:	63dc      	str	r4, [r3, #60]	; 0x3c
  settings.CAP = 100;               //battery size in Ah
    24d2:	2564      	movs	r5, #100	; 0x64
  settings.Scells = 12;             //Cells in series
    24d4:	240c      	movs	r4, #12
  settings.socvolt[3] = 90;         //Voltage and SOC curve for voltage based SOC calc
    24d6:	6799      	str	r1, [r3, #120]	; 0x78
  settings.balanceVoltage = 3.9f;
    24d8:	649e      	str	r6, [r3, #72]	; 0x48
  settings.chargecurrentend = 50;   //end charge current in 0.1A
    24da:	2132      	movs	r1, #50	; 0x32
  settings.balanceHyst = 0.04f;
    24dc:	4e32      	ldr	r6, [pc, #200]	; (25a8 <loadSettings()+0x150>)
  settings.IgnoreTemp = 0;    // 0 - use both sensors, 1 or 2 only use that sensor
    24de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    24e2:	f240 2a01 	movw	sl, #513	; 0x201
  settings.curcan = LemCAB300;
    24e6:	f8c3 00d4 	str.w	r0, [r3, #212]	; 0xd4
  settings.Scells = 12;             //Cells in series
    24ea:	655c      	str	r4, [r3, #84]	; 0x54
  settings.Pstrings = 1;            // strings in parallel used to divide voltage of pack
    24ec:	6598      	str	r0, [r3, #88]	; 0x58
  settings.chargecurrentend = 50;   //end charge current in 0.1A
    24ee:	6659      	str	r1, [r3, #100]	; 0x64
  settings.balanceHyst = 0.04f;
    24f0:	64de      	str	r6, [r3, #76]	; 0x4c
  settings.CAP = 100;               //battery size in Ah
    24f2:	65dd      	str	r5, [r3, #92]	; 0x5c
  settings.ChargerDirect = 1;  //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    24f4:	4e2d      	ldr	r6, [pc, #180]	; (25ac <loadSettings()+0x154>)
  settings.batteryID = 0x01;  //in the future should be 0xFF to force it to ask for an address
    24f6:	f8a3 a008 	strh.w	sl, [r3, #8]
  settings.invertcur = 0;           //Invert current sensor direction
    24fa:	67da      	str	r2, [r3, #124]	; 0x7c
  settings.voltsoc = 0;        //SOC purely voltage based
    24fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  settings.ESSmode = 0;        //activate ESS mode
    2500:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  settings.gaugehigh = 255;    //full fuel gauge pwm
    2504:	22ff      	movs	r2, #255	; 0xff
  settings.cursens = 2;
    2506:	2402      	movs	r4, #2
  settings.convlow = 643;      // mV/A current sensor low range channel
    2508:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 25b0 <loadSettings()+0x158>
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    250c:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 25b4 <loadSettings()+0x15c>
  settings.ncur = 1;           //number of multiples to use for current measurement
    2510:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
  settings.conthold = 50;      //holding duty cycle for contactor 0-255
    2514:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
  settings.gaugelow = 50;      //empty fuel gauge pwm
    2518:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
  settings.gaugehigh = 255;    //full fuel gauge pwm
    251c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  settings.changecur = 20000;  //mA change overpoint
    2520:	f644 6020 	movw	r0, #20000	; 0x4e20
  settings.Pretime = 5000;     //ms of precharge time
    2524:	f241 3188 	movw	r1, #5000	; 0x1388
  settings.Precurrent = 1000;  //ma before closing main contator
    2528:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  settings.ChargerDirect = 1;  //1 - charger is always connected to HV battery // 0 - Charger is behind the contactors
    252c:	f8c3 60c8 	str.w	r6, [r3, #200]	; 0xc8
  settings.offset1 = 1750;     //mV mid point of channel 1
    2530:	f8c3 9088 	str.w	r9, [r3, #136]	; 0x88
  settings.convhigh = 58;      // mV/A current sensor high range channel
    2534:	f8c3 8090 	str.w	r8, [r3, #144]	; 0x90
  settings.convlow = 643;      // mV/A current sensor low range channel
    2538:	f8c3 e094 	str.w	lr, [r3, #148]	; 0x94
  settings.chargerspd = 100;   //ms per message
    253c:	f8c3 50bc 	str.w	r5, [r3, #188]	; 0xbc
  settings.UnderDur = 5000;    //ms of allowed undervoltage before throwing open stopping discharge.
    2540:	f8c3 70c0 	str.w	r7, [r3, #192]	; 0xc0
  settings.DisTaper = 0.3f;         //V offset to bring in discharge taper to Zero Amps at settings.DischVsetpoint
    2544:	f8c3 c0c4 	str.w	ip, [r3, #196]	; 0xc4
  settings.cursens = 2;
    2548:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
  settings.chargertype = 2;    // 1 - Brusa NLG5xx 2 - Volt charger 0 -No Charger
    254c:	f8c3 40b8 	str.w	r4, [r3, #184]	; 0xb8
  settings.changecur = 20000;  //mA change overpoint
    2550:	f8c3 008c 	str.w	r0, [r3, #140]	; 0x8c
  settings.Pretime = 5000;     //ms of precharge time
    2554:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
  settings.Precurrent = 1000;  //ma before closing main contator
    2558:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
    255c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2560:	00014190 	.word	0x00014190
    2564:	c1200000 	.word	0xc1200000
    2568:	3e4ccccd 	.word	0x3e4ccccd
    256c:	06d606d6 	.word	0x06d606d6
    2570:	42680000 	.word	0x42680000
    2574:	00051388 	.word	0x00051388
    2578:	1fffd0d8 	.word	0x1fffd0d8
    257c:	40866666 	.word	0x40866666
    2580:	40400000 	.word	0x40400000
    2584:	40833333 	.word	0x40833333
    2588:	3dcccccd 	.word	0x3dcccccd
    258c:	404ccccd 	.word	0x404ccccd
    2590:	42200000 	.word	0x42200000
    2594:	40a00000 	.word	0x40a00000
    2598:	0007a120 	.word	0x0007a120
    259c:	40733333 	.word	0x40733333
    25a0:	42820000 	.word	0x42820000
    25a4:	4079999a 	.word	0x4079999a
    25a8:	3d23d70a 	.word	0x3d23d70a
    25ac:	01f40101 	.word	0x01f40101
    25b0:	4420c000 	.word	0x4420c000
    25b4:	3e99999a 	.word	0x3e99999a

000025b8 <alarmupdate()>:
void alarmupdate() {
    25b8:	b570      	push	{r4, r5, r6, lr}
  alarm[0] = 0x00;
    25ba:	4d45      	ldr	r5, [pc, #276]	; (26d0 <alarmupdate()+0x118>)
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    25bc:	4c45      	ldr	r4, [pc, #276]	; (26d4 <alarmupdate()+0x11c>)
    25be:	4846      	ldr	r0, [pc, #280]	; (26d8 <alarmupdate()+0x120>)
    25c0:	68e6      	ldr	r6, [r4, #12]
  alarm[0] = 0x00;
    25c2:	2300      	movs	r3, #0
    25c4:	702b      	strb	r3, [r5, #0]
  if (settings.OverVSetpoint < bms.getHighCellVolt()) {
    25c6:	f7ff f9d7 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    25ca:	4601      	mov	r1, r0
    25cc:	4630      	mov	r0, r6
    25ce:	f00a fe71 	bl	d2b4 <__aeabi_fcmplt>
    25d2:	b108      	cbz	r0, 25d8 <alarmupdate()+0x20>
    alarm[0] = 0x04;
    25d4:	2304      	movs	r3, #4
    25d6:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    25d8:	483f      	ldr	r0, [pc, #252]	; (26d8 <alarmupdate()+0x120>)
    25da:	f7ff f9a7 	bl	192c <BMSModuleManager::getLowCellVolt()>
    25de:	6921      	ldr	r1, [r4, #16]
    25e0:	f00a fe68 	bl	d2b4 <__aeabi_fcmplt>
    25e4:	b118      	cbz	r0, 25ee <alarmupdate()+0x36>
    alarm[0] |= 0x10;
    25e6:	782b      	ldrb	r3, [r5, #0]
    25e8:	f043 0310 	orr.w	r3, r3, #16
    25ec:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > settings.OverTSetpoint) {
    25ee:	483a      	ldr	r0, [pc, #232]	; (26d8 <alarmupdate()+0x120>)
    25f0:	f7ff fa72 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    25f4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    25f6:	f00a fe7b 	bl	d2f0 <__aeabi_fcmpgt>
    25fa:	b118      	cbz	r0, 2604 <alarmupdate()+0x4c>
    alarm[0] |= 0x40;
    25fc:	782b      	ldrb	r3, [r5, #0]
    25fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2602:	702b      	strb	r3, [r5, #0]
  alarm[1] = 0;
    2604:	2300      	movs	r3, #0
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    2606:	4834      	ldr	r0, [pc, #208]	; (26d8 <alarmupdate()+0x120>)
  alarm[1] = 0;
    2608:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    260a:	f7ff fa67 	bl	1adc <BMSModuleManager::getLowTemperature()>
    260e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    2610:	f00a fe50 	bl	d2b4 <__aeabi_fcmplt>
    2614:	b108      	cbz	r0, 261a <alarmupdate()+0x62>
    alarm[1] = 0x01;
    2616:	2301      	movs	r3, #1
    2618:	706b      	strb	r3, [r5, #1]
  alarm[3] = 0;
    261a:	2300      	movs	r3, #0
    261c:	70eb      	strb	r3, [r5, #3]
  if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    261e:	482e      	ldr	r0, [pc, #184]	; (26d8 <alarmupdate()+0x120>)
    2620:	f7ff f9aa 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    2624:	4606      	mov	r6, r0
    2626:	482c      	ldr	r0, [pc, #176]	; (26d8 <alarmupdate()+0x120>)
    2628:	f7ff f980 	bl	192c <BMSModuleManager::getLowCellVolt()>
    262c:	4601      	mov	r1, r0
    262e:	4630      	mov	r0, r6
    2630:	f00a fb98 	bl	cd64 <__aeabi_fsub>
    2634:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    2636:	f00a fe5b 	bl	d2f0 <__aeabi_fcmpgt>
    263a:	b108      	cbz	r0, 2640 <alarmupdate()+0x88>
    alarm[3] = 0x01;
    263c:	2301      	movs	r3, #1
    263e:	70eb      	strb	r3, [r5, #3]
  warning[0] = 0;
    2640:	4d26      	ldr	r5, [pc, #152]	; (26dc <alarmupdate()+0x124>)
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    2642:	4825      	ldr	r0, [pc, #148]	; (26d8 <alarmupdate()+0x120>)
  warning[0] = 0;
    2644:	2300      	movs	r3, #0
    2646:	702b      	strb	r3, [r5, #0]
  if (bms.getHighCellVolt() > (settings.OverVSetpoint - settings.WarnOff)) {
    2648:	f7ff f996 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    264c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    264e:	4606      	mov	r6, r0
    2650:	68e0      	ldr	r0, [r4, #12]
    2652:	f00a fb87 	bl	cd64 <__aeabi_fsub>
    2656:	4601      	mov	r1, r0
    2658:	4630      	mov	r0, r6
    265a:	f00a fe49 	bl	d2f0 <__aeabi_fcmpgt>
    265e:	b108      	cbz	r0, 2664 <alarmupdate()+0xac>
    warning[0] = 0x04;
    2660:	2304      	movs	r3, #4
    2662:	702b      	strb	r3, [r5, #0]
  if (bms.getLowCellVolt() < (settings.UnderVSetpoint + settings.WarnOff)) {
    2664:	481c      	ldr	r0, [pc, #112]	; (26d8 <alarmupdate()+0x120>)
    2666:	f7ff f961 	bl	192c <BMSModuleManager::getLowCellVolt()>
    266a:	6a61      	ldr	r1, [r4, #36]	; 0x24
    266c:	4606      	mov	r6, r0
    266e:	6920      	ldr	r0, [r4, #16]
    2670:	f00a fb7a 	bl	cd68 <__addsf3>
    2674:	4601      	mov	r1, r0
    2676:	4630      	mov	r0, r6
    2678:	f00a fe1c 	bl	d2b4 <__aeabi_fcmplt>
    267c:	b118      	cbz	r0, 2686 <alarmupdate()+0xce>
    warning[0] |= 0x10;
    267e:	782b      	ldrb	r3, [r5, #0]
    2680:	f043 0310 	orr.w	r3, r3, #16
    2684:	702b      	strb	r3, [r5, #0]
  if (bms.getHighTemperature() > (settings.OverTSetpoint - settings.WarnToff)) {
    2686:	4814      	ldr	r0, [pc, #80]	; (26d8 <alarmupdate()+0x120>)
    2688:	f7ff fa26 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    268c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    268e:	4606      	mov	r6, r0
    2690:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    2692:	f00a fb67 	bl	cd64 <__aeabi_fsub>
    2696:	4601      	mov	r1, r0
    2698:	4630      	mov	r0, r6
    269a:	f00a fe29 	bl	d2f0 <__aeabi_fcmpgt>
    269e:	b118      	cbz	r0, 26a8 <alarmupdate()+0xf0>
    warning[0] |= 0x40;
    26a0:	782b      	ldrb	r3, [r5, #0]
    26a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    26a6:	702b      	strb	r3, [r5, #0]
  warning[1] = 0;
    26a8:	2300      	movs	r3, #0
    26aa:	706b      	strb	r3, [r5, #1]
  if (bms.getLowTemperature() < (settings.UnderTSetpoint + settings.WarnToff)) {
    26ac:	480a      	ldr	r0, [pc, #40]	; (26d8 <alarmupdate()+0x120>)
    26ae:	f7ff fa15 	bl	1adc <BMSModuleManager::getLowTemperature()>
    26b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    26b4:	4603      	mov	r3, r0
    26b6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    26b8:	461c      	mov	r4, r3
    26ba:	f00a fb55 	bl	cd68 <__addsf3>
    26be:	4601      	mov	r1, r0
    26c0:	4620      	mov	r0, r4
    26c2:	f00a fdf7 	bl	d2b4 <__aeabi_fcmplt>
    26c6:	b108      	cbz	r0, 26cc <alarmupdate()+0x114>
    warning[1] = 0x01;
    26c8:	2301      	movs	r3, #1
    26ca:	706b      	strb	r3, [r5, #1]
}
    26cc:	bd70      	pop	{r4, r5, r6, pc}
    26ce:	bf00      	nop
    26d0:	1fff91e0 	.word	0x1fff91e0
    26d4:	1fffd0d8 	.word	0x1fffd0d8
    26d8:	1fff91f0 	.word	0x1fff91f0
    26dc:	1fffd1c4 	.word	0x1fffd1c4

000026e0 <gaugeupdate()>:
void gaugeupdate() {
    26e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (gaugedebug == 1) {
    26e4:	4c7f      	ldr	r4, [pc, #508]	; (28e4 <gaugeupdate()+0x204>)
    26e6:	6823      	ldr	r3, [r4, #0]
    26e8:	2b01      	cmp	r3, #1
void gaugeupdate() {
    26ea:	b082      	sub	sp, #8
  if (gaugedebug == 1) {
    26ec:	d049      	beq.n	2782 <gaugeupdate()+0xa2>
  if (gaugedebug == 2) {
    26ee:	2b02      	cmp	r3, #2
    26f0:	f000 80c3 	beq.w	287a <gaugeupdate()+0x19a>
  if (gaugedebug == 3) {
    26f4:	2b03      	cmp	r3, #3
    26f6:	d003      	beq.n	2700 <gaugeupdate()+0x20>
  if (gaugedebug == 0) {
    26f8:	b32b      	cbz	r3, 2746 <gaugeupdate()+0x66>
}
    26fa:	b002      	add	sp, #8
    26fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SOCtest = 1000;
    2700:	4b79      	ldr	r3, [pc, #484]	; (28e8 <gaugeupdate()+0x208>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2702:	4e7a      	ldr	r6, [pc, #488]	; (28ec <gaugeupdate()+0x20c>)
    SOCtest = 1000;
    2704:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2708:	601a      	str	r2, [r3, #0]
// when the input is a float or double, do all math using the input's type
template <class T, class A, class B, class C, class D>
T map(T x, A in_min, B in_max, C out_min, D out_max, typename std::enable_if<std::is_floating_point<T>::value >::type* = 0)
{
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    270a:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    270e:	f00a fbdf 	bl	ced0 <__aeabi_i2f>
    2712:	4605      	mov	r5, r0
    2714:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    2718:	f00a fbda 	bl	ced0 <__aeabi_i2f>
    271c:	4629      	mov	r1, r5
    271e:	f00a fb21 	bl	cd64 <__aeabi_fsub>
    2722:	4973      	ldr	r1, [pc, #460]	; (28f0 <gaugeupdate()+0x210>)
    2724:	f00a fc28 	bl	cf78 <__aeabi_fmul>
    2728:	4971      	ldr	r1, [pc, #452]	; (28f0 <gaugeupdate()+0x210>)
    272a:	f00a fcd9 	bl	d0e0 <__aeabi_fdiv>
    272e:	4629      	mov	r1, r5
    2730:	f00a fb1a 	bl	cd68 <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2734:	f00a fde6 	bl	d304 <__aeabi_f2iz>
    2738:	4601      	mov	r1, r0
    273a:	2006      	movs	r0, #6
    273c:	f007 fd4c 	bl	a1d8 <analogWrite>
  if (gaugedebug == 0) {
    2740:	6823      	ldr	r3, [r4, #0]
    2742:	2b00      	cmp	r3, #0
    2744:	d1d9      	bne.n	26fa <gaugeupdate()+0x1a>
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    2746:	4b69      	ldr	r3, [pc, #420]	; (28ec <gaugeupdate()+0x20c>)
    2748:	486a      	ldr	r0, [pc, #424]	; (28f4 <gaugeupdate()+0x214>)
    274a:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
	long out_range = out_max - out_min;
    274e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
	long num = (x - in_min) * out_range;
    2752:	6803      	ldr	r3, [r0, #0]
	long result = num / in_range + out_min;
    2754:	4868      	ldr	r0, [pc, #416]	; (28f8 <gaugeupdate()+0x218>)
	long out_range = out_max - out_min;
    2756:	1a52      	subs	r2, r2, r1
	if (out_range >= 0) {
    2758:	2a00      	cmp	r2, #0
	long num = (x - in_min) * out_range;
    275a:	fb02 f303 	mul.w	r3, r2, r3
	if (out_range >= 0) {
    275e:	f2c0 80b2 	blt.w	28c6 <gaugeupdate()+0x1e6>
		num += in_range / 2;
    2762:	3332      	adds	r3, #50	; 0x32
	long result = num / in_range + out_min;
    2764:	fb80 2003 	smull	r2, r0, r0, r3
    2768:	17da      	asrs	r2, r3, #31
    276a:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num < 0) return result - 1;
    276e:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    2770:	4411      	add	r1, r2
		if (in_range * num < 0) return result - 1;
    2772:	f2c0 80b4 	blt.w	28de <gaugeupdate()+0x1fe>
    2776:	2006      	movs	r0, #6
}
    2778:	b002      	add	sp, #8
    277a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    analogWrite(OUT8, map(SOC, 0, 100, settings.gaugelow, settings.gaugehigh));
    277e:	f007 bd2b 	b.w	a1d8 <analogWrite>
    SOCtest = SOCtest + 10;
    2782:	4f59      	ldr	r7, [pc, #356]	; (28e8 <gaugeupdate()+0x208>)
    2784:	6838      	ldr	r0, [r7, #0]
    2786:	300a      	adds	r0, #10
    if (SOCtest > 1000) {
    2788:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
    278c:	f300 8096 	bgt.w	28bc <gaugeupdate()+0x1dc>
    SOCtest = SOCtest + 10;
    2790:	6038      	str	r0, [r7, #0]
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2792:	f00a fb9d 	bl	ced0 <__aeabi_i2f>
    2796:	4959      	ldr	r1, [pc, #356]	; (28fc <gaugeupdate()+0x21c>)
    2798:	f00a fbee 	bl	cf78 <__aeabi_fmul>
    279c:	4680      	mov	r8, r0
    279e:	4e53      	ldr	r6, [pc, #332]	; (28ec <gaugeupdate()+0x20c>)
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    27a0:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    27a4:	f00a fb94 	bl	ced0 <__aeabi_i2f>
    27a8:	4605      	mov	r5, r0
    27aa:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    27ae:	f00a fb8f 	bl	ced0 <__aeabi_i2f>
    27b2:	4629      	mov	r1, r5
    27b4:	f00a fad6 	bl	cd64 <__aeabi_fsub>
    27b8:	4641      	mov	r1, r8
    27ba:	f00a fbdd 	bl	cf78 <__aeabi_fmul>
    27be:	494c      	ldr	r1, [pc, #304]	; (28f0 <gaugeupdate()+0x210>)
    27c0:	f00a fc8e 	bl	d0e0 <__aeabi_fdiv>
    27c4:	4629      	mov	r1, r5
    27c6:	f00a facf 	bl	cd68 <__addsf3>
    27ca:	f00a fd9b 	bl	d304 <__aeabi_f2iz>
    27ce:	4601      	mov	r1, r0
    27d0:	2006      	movs	r0, #6
    27d2:	f007 fd01 	bl	a1d8 <analogWrite>
    27d6:	2102      	movs	r1, #2
    27d8:	4849      	ldr	r0, [pc, #292]	; (2900 <gaugeupdate()+0x220>)
    27da:	f009 fced 	bl	c1b8 <usb_serial_write>
    27de:	4849      	ldr	r0, [pc, #292]	; (2904 <gaugeupdate()+0x224>)
    27e0:	f006 ffa2 	bl	9728 <Print::println()>
    27e4:	2106      	movs	r1, #6
    27e6:	4848      	ldr	r0, [pc, #288]	; (2908 <gaugeupdate()+0x228>)
    27e8:	f009 fce6 	bl	c1b8 <usb_serial_write>
    SERIALCONSOLE.print(SOCtest * 0.1);
    27ec:	6838      	ldr	r0, [r7, #0]
    27ee:	f00a fb6f 	bl	ced0 <__aeabi_i2f>
    27f2:	4942      	ldr	r1, [pc, #264]	; (28fc <gaugeupdate()+0x21c>)
    27f4:	f00a fbc0 	bl	cf78 <__aeabi_fmul>
    27f8:	f00a f99a 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    27fc:	f04f 0802 	mov.w	r8, #2
    2800:	4602      	mov	r2, r0
    2802:	460b      	mov	r3, r1
    2804:	483f      	ldr	r0, [pc, #252]	; (2904 <gaugeupdate()+0x224>)
    2806:	f8cd 8000 	str.w	r8, [sp]
    280a:	f006 ffb1 	bl	9770 <Print::printFloat(double, unsigned char)>
    280e:	210d      	movs	r1, #13
    2810:	483e      	ldr	r0, [pc, #248]	; (290c <gaugeupdate()+0x22c>)
    2812:	f009 fcd1 	bl	c1b8 <usb_serial_write>
    2816:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    281a:	f00a fb59 	bl	ced0 <__aeabi_i2f>
    281e:	4605      	mov	r5, r0
    SERIALCONSOLE.print(map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    2820:	6838      	ldr	r0, [r7, #0]
    2822:	f00a fb55 	bl	ced0 <__aeabi_i2f>
    2826:	4935      	ldr	r1, [pc, #212]	; (28fc <gaugeupdate()+0x21c>)
    2828:	f00a fba6 	bl	cf78 <__aeabi_fmul>
    282c:	4603      	mov	r3, r0
    282e:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    2832:	461e      	mov	r6, r3
    2834:	f00a fb4c 	bl	ced0 <__aeabi_i2f>
    2838:	4629      	mov	r1, r5
    283a:	f00a fa93 	bl	cd64 <__aeabi_fsub>
    283e:	4601      	mov	r1, r0
    2840:	4630      	mov	r0, r6
    2842:	f00a fb99 	bl	cf78 <__aeabi_fmul>
    2846:	492a      	ldr	r1, [pc, #168]	; (28f0 <gaugeupdate()+0x210>)
    2848:	f00a fc4a 	bl	d0e0 <__aeabi_fdiv>
    284c:	4629      	mov	r1, r5
    284e:	f00a fa8b 	bl	cd68 <__addsf3>
    2852:	f00a f96d 	bl	cb30 <__aeabi_f2d>
    2856:	f8cd 8000 	str.w	r8, [sp]
    285a:	460b      	mov	r3, r1
    285c:	4602      	mov	r2, r0
    285e:	4829      	ldr	r0, [pc, #164]	; (2904 <gaugeupdate()+0x224>)
    2860:	f006 ff86 	bl	9770 <Print::printFloat(double, unsigned char)>
    2864:	4641      	mov	r1, r8
    2866:	4826      	ldr	r0, [pc, #152]	; (2900 <gaugeupdate()+0x220>)
    2868:	f009 fca6 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    286c:	4825      	ldr	r0, [pc, #148]	; (2904 <gaugeupdate()+0x224>)
    286e:	f006 ff5b 	bl	9728 <Print::println()>
  if (gaugedebug == 2) {
    2872:	6823      	ldr	r3, [r4, #0]
    2874:	2b02      	cmp	r3, #2
    2876:	f47f af3d 	bne.w	26f4 <gaugeupdate()+0x14>
    SOCtest = 0;
    287a:	4b1b      	ldr	r3, [pc, #108]	; (28e8 <gaugeupdate()+0x208>)
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    287c:	4e1b      	ldr	r6, [pc, #108]	; (28ec <gaugeupdate()+0x20c>)
    SOCtest = 0;
    287e:	2200      	movs	r2, #0
    2880:	601a      	str	r2, [r3, #0]
    2882:	f8d6 00ac 	ldr.w	r0, [r6, #172]	; 0xac
    2886:	f00a fb23 	bl	ced0 <__aeabi_i2f>
    288a:	4605      	mov	r5, r0
    288c:	f8d6 00b0 	ldr.w	r0, [r6, #176]	; 0xb0
    2890:	f00a fb1e 	bl	ced0 <__aeabi_i2f>
    2894:	4629      	mov	r1, r5
    2896:	f00a fa65 	bl	cd64 <__aeabi_fsub>
    289a:	2100      	movs	r1, #0
    289c:	f00a fb6c 	bl	cf78 <__aeabi_fmul>
    28a0:	4913      	ldr	r1, [pc, #76]	; (28f0 <gaugeupdate()+0x210>)
    28a2:	f00a fc1d 	bl	d0e0 <__aeabi_fdiv>
    28a6:	4629      	mov	r1, r5
    28a8:	f00a fa5e 	bl	cd68 <__addsf3>
    analogWrite(OUT8, map(SOCtest * 0.1, 0, 100, settings.gaugelow, settings.gaugehigh));
    28ac:	f00a fd2a 	bl	d304 <__aeabi_f2iz>
    28b0:	4601      	mov	r1, r0
    28b2:	2006      	movs	r0, #6
    28b4:	f007 fc90 	bl	a1d8 <analogWrite>
  if (gaugedebug == 3) {
    28b8:	6823      	ldr	r3, [r4, #0]
    28ba:	e71b      	b.n	26f4 <gaugeupdate()+0x14>
      SOCtest = 0;
    28bc:	2300      	movs	r3, #0
    28be:	f04f 0800 	mov.w	r8, #0
    28c2:	603b      	str	r3, [r7, #0]
    28c4:	e76b      	b.n	279e <gaugeupdate()+0xbe>
		num -= in_range / 2;
    28c6:	3b32      	subs	r3, #50	; 0x32
	long result = num / in_range + out_min;
    28c8:	fb80 2003 	smull	r2, r0, r0, r3
    28cc:	17da      	asrs	r2, r3, #31
    28ce:	ebc2 1260 	rsb	r2, r2, r0, asr #5
		if (in_range * num >= 0) return result + 1;
    28d2:	2b00      	cmp	r3, #0
	long result = num / in_range + out_min;
    28d4:	4411      	add	r1, r2
		if (in_range * num >= 0) return result + 1;
    28d6:	f6ff af4e 	blt.w	2776 <gaugeupdate()+0x96>
    28da:	3101      	adds	r1, #1
    28dc:	e74b      	b.n	2776 <gaugeupdate()+0x96>
		if (in_range * num < 0) return result - 1;
    28de:	3901      	subs	r1, #1
    28e0:	e749      	b.n	2776 <gaugeupdate()+0x96>
    28e2:	bf00      	nop
    28e4:	1fffcfdc 	.word	0x1fffcfdc
    28e8:	1fff91d0 	.word	0x1fff91d0
    28ec:	1fffd0d8 	.word	0x1fffd0d8
    28f0:	42c80000 	.word	0x42c80000
    28f4:	1fff8828 	.word	0x1fff8828
    28f8:	51eb851f 	.word	0x51eb851f
    28fc:	3dcccccd 	.word	0x3dcccccd
    2900:	00014fa8 	.word	0x00014fa8
    2904:	1fff89fc 	.word	0x1fff89fc
    2908:	000141b0 	.word	0x000141b0
    290c:	000141b8 	.word	0x000141b8

00002910 <printbmsstat()>:
void printbmsstat() {
    2910:	b570      	push	{r4, r5, r6, lr}
  SERIALCONSOLE.println();
    2912:	48b2      	ldr	r0, [pc, #712]	; (2bdc <printbmsstat()+0x2cc>)
  if (settings.ESSmode == 1) {
    2914:	4cb2      	ldr	r4, [pc, #712]	; (2be0 <printbmsstat()+0x2d0>)
  SERIALCONSOLE.println();
    2916:	f006 ff07 	bl	9728 <Print::println()>
  SERIALCONSOLE.println();
    291a:	48b0      	ldr	r0, [pc, #704]	; (2bdc <printbmsstat()+0x2cc>)
    291c:	f006 ff04 	bl	9728 <Print::println()>
  SERIALCONSOLE.println();
    2920:	48ae      	ldr	r0, [pc, #696]	; (2bdc <printbmsstat()+0x2cc>)
    2922:	f006 ff01 	bl	9728 <Print::println()>
    2926:	48af      	ldr	r0, [pc, #700]	; (2be4 <printbmsstat()+0x2d4>)
    2928:	210d      	movs	r1, #13
    292a:	f009 fc45 	bl	c1b8 <usb_serial_write>
  if (settings.ESSmode == 1) {
    292e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    2932:	2b01      	cmp	r3, #1
    2934:	d011      	beq.n	295a <printbmsstat()+0x4a>
    SERIALCONSOLE.print(bmsstatus);
    2936:	4cac      	ldr	r4, [pc, #688]	; (2be8 <printbmsstat()+0x2d8>)
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2938:	48a8      	ldr	r0, [pc, #672]	; (2bdc <printbmsstat()+0x2cc>)
    293a:	7821      	ldrb	r1, [r4, #0]
    293c:	2300      	movs	r3, #0
    293e:	220a      	movs	r2, #10
    2940:	f006 ff0a 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    switch (bmsstatus) {
    2944:	7823      	ldrb	r3, [r4, #0]
    2946:	2b05      	cmp	r3, #5
    2948:	d857      	bhi.n	29fa <printbmsstat()+0xea>
    294a:	e8df f013 	tbh	[pc, r3, lsl #1]
    294e:	0106      	.short	0x0106
    2950:	0110010b 	.word	0x0110010b
    2954:	011a0115 	.word	0x011a0115
    2958:	0101      	.short	0x0101
    295a:	2109      	movs	r1, #9
    295c:	48a3      	ldr	r0, [pc, #652]	; (2bec <printbmsstat()+0x2dc>)
    295e:	f009 fc2b 	bl	c1b8 <usb_serial_write>
    if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    2962:	48a3      	ldr	r0, [pc, #652]	; (2bf0 <printbmsstat()+0x2e0>)
    2964:	f7fe ffe2 	bl	192c <BMSModuleManager::getLowCellVolt()>
    2968:	6921      	ldr	r1, [r4, #16]
    296a:	f00a fca3 	bl	d2b4 <__aeabi_fcmplt>
    296e:	2800      	cmp	r0, #0
    2970:	f040 812e 	bne.w	2bd0 <printbmsstat()+0x2c0>
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    2974:	489e      	ldr	r0, [pc, #632]	; (2bf0 <printbmsstat()+0x2e0>)
    2976:	f7fe ffff 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    297a:	68e1      	ldr	r1, [r4, #12]
    297c:	f00a fcb8 	bl	d2f0 <__aeabi_fcmpgt>
    2980:	2800      	cmp	r0, #0
    2982:	f040 816c 	bne.w	2c5e <printbmsstat()+0x34e>
    if ((bms.getHighCellVolt() - bms.getLowCellVolt()) > settings.CellGap) {
    2986:	489a      	ldr	r0, [pc, #616]	; (2bf0 <printbmsstat()+0x2e0>)
    2988:	f7fe fff6 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    298c:	4605      	mov	r5, r0
    298e:	4898      	ldr	r0, [pc, #608]	; (2bf0 <printbmsstat()+0x2e0>)
    2990:	f7fe ffcc 	bl	192c <BMSModuleManager::getLowCellVolt()>
    2994:	4601      	mov	r1, r0
    2996:	4628      	mov	r0, r5
    2998:	f00a f9e4 	bl	cd64 <__aeabi_fsub>
    299c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    299e:	f00a fca7 	bl	d2f0 <__aeabi_fcmpgt>
    29a2:	2800      	cmp	r0, #0
    29a4:	f040 8156 	bne.w	2c54 <printbmsstat()+0x344>
    if (bms.getAvgTemperature() > settings.OverTSetpoint) {
    29a8:	4891      	ldr	r0, [pc, #580]	; (2bf0 <printbmsstat()+0x2e0>)
    29aa:	f7ff f837 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    29ae:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    29b0:	f00a fc9e 	bl	d2f0 <__aeabi_fcmpgt>
    29b4:	2800      	cmp	r0, #0
    29b6:	f040 815c 	bne.w	2c72 <printbmsstat()+0x362>
    if (bms.getAvgTemperature() < settings.UnderTSetpoint) {
    29ba:	488d      	ldr	r0, [pc, #564]	; (2bf0 <printbmsstat()+0x2e0>)
    29bc:	f7ff f82e 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    29c0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    29c2:	f00a fc77 	bl	d2b4 <__aeabi_fcmplt>
    29c6:	2800      	cmp	r0, #0
    29c8:	f040 814e 	bne.w	2c68 <printbmsstat()+0x358>
    if (storagemode == 1) {
    29cc:	4b89      	ldr	r3, [pc, #548]	; (2bf4 <printbmsstat()+0x2e4>)
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    29ce:	4888      	ldr	r0, [pc, #544]	; (2bf0 <printbmsstat()+0x2e0>)
    if (storagemode == 1) {
    29d0:	681b      	ldr	r3, [r3, #0]
    29d2:	2b01      	cmp	r3, #1
    29d4:	f000 80ec 	beq.w	2bb0 <printbmsstat()+0x2a0>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    29d8:	f7fe ffa8 	bl	192c <BMSModuleManager::getLowCellVolt()>
    29dc:	6921      	ldr	r1, [r4, #16]
    29de:	f00a fc87 	bl	d2f0 <__aeabi_fcmpgt>
    29e2:	2800      	cmp	r0, #0
    29e4:	f040 80d2 	bne.w	2b8c <printbmsstat()+0x27c>
    29e8:	2107      	movs	r1, #7
    29ea:	4883      	ldr	r0, [pc, #524]	; (2bf8 <printbmsstat()+0x2e8>)
    29ec:	f009 fbe4 	bl	c1b8 <usb_serial_write>
    SERIALCONSOLE.print(ErrorReason);
    29f0:	4b82      	ldr	r3, [pc, #520]	; (2bfc <printbmsstat()+0x2ec>)
	size_t print(int n)				{ return print((long)n); }
    29f2:	487a      	ldr	r0, [pc, #488]	; (2bdc <printbmsstat()+0x2cc>)
    29f4:	6819      	ldr	r1, [r3, #0]
    29f6:	f006 fe8f 	bl	9718 <Print::print(long)>
    29fa:	2102      	movs	r1, #2
    29fc:	4880      	ldr	r0, [pc, #512]	; (2c00 <printbmsstat()+0x2f0>)
    29fe:	f009 fbdb 	bl	c1b8 <usb_serial_write>
  if (digitalRead(IN3) == HIGH) {
    2a02:	2012      	movs	r0, #18
    2a04:	f007 fd8a 	bl	a51c <digitalRead>
    2a08:	2801      	cmp	r0, #1
    2a0a:	f000 809c 	beq.w	2b46 <printbmsstat()+0x236>
  if (digitalRead(IN1) == HIGH) {
    2a0e:	2011      	movs	r0, #17
    2a10:	f007 fd84 	bl	a51c <digitalRead>
    2a14:	2801      	cmp	r0, #1
    2a16:	f000 8091 	beq.w	2b3c <printbmsstat()+0x22c>
  if (balancecells == 1) {
    2a1a:	4b7a      	ldr	r3, [pc, #488]	; (2c04 <printbmsstat()+0x2f4>)
    2a1c:	681b      	ldr	r3, [r3, #0]
    2a1e:	2b01      	cmp	r3, #1
    2a20:	f000 8087 	beq.w	2b32 <printbmsstat()+0x222>
    2a24:	2102      	movs	r1, #2
    2a26:	4876      	ldr	r0, [pc, #472]	; (2c00 <printbmsstat()+0x2f0>)
  if ((contstat & 1) == 1) {
    2a28:	4c77      	ldr	r4, [pc, #476]	; (2c08 <printbmsstat()+0x2f8>)
    2a2a:	f009 fbc5 	bl	c1b8 <usb_serial_write>
  SERIALCONSOLE.print(cellspresent);
    2a2e:	4b77      	ldr	r3, [pc, #476]	; (2c0c <printbmsstat()+0x2fc>)
    2a30:	486a      	ldr	r0, [pc, #424]	; (2bdc <printbmsstat()+0x2cc>)
    2a32:	6819      	ldr	r1, [r3, #0]
    2a34:	f006 fe70 	bl	9718 <Print::print(long)>
  SERIALCONSOLE.println();
    2a38:	4868      	ldr	r0, [pc, #416]	; (2bdc <printbmsstat()+0x2cc>)
    2a3a:	f006 fe75 	bl	9728 <Print::println()>
    2a3e:	2104      	movs	r1, #4
    2a40:	4873      	ldr	r0, [pc, #460]	; (2c10 <printbmsstat()+0x300>)
    2a42:	f009 fbb9 	bl	c1b8 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(OUT1));
    2a46:	200b      	movs	r0, #11
    2a48:	f007 fd68 	bl	a51c <digitalRead>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    2a4c:	2300      	movs	r3, #0
    2a4e:	4601      	mov	r1, r0
    2a50:	220a      	movs	r2, #10
    2a52:	4862      	ldr	r0, [pc, #392]	; (2bdc <printbmsstat()+0x2cc>)
    2a54:	f006 fe80 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT2));
    2a58:	200c      	movs	r0, #12
    2a5a:	f007 fd5f 	bl	a51c <digitalRead>
    2a5e:	2300      	movs	r3, #0
    2a60:	4601      	mov	r1, r0
    2a62:	220a      	movs	r2, #10
    2a64:	485d      	ldr	r0, [pc, #372]	; (2bdc <printbmsstat()+0x2cc>)
    2a66:	f006 fe77 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT3));
    2a6a:	2014      	movs	r0, #20
    2a6c:	f007 fd56 	bl	a51c <digitalRead>
    2a70:	2300      	movs	r3, #0
    2a72:	4601      	mov	r1, r0
    2a74:	220a      	movs	r2, #10
    2a76:	4859      	ldr	r0, [pc, #356]	; (2bdc <printbmsstat()+0x2cc>)
    2a78:	f006 fe6e 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(OUT4));
    2a7c:	2015      	movs	r0, #21
    2a7e:	f007 fd4d 	bl	a51c <digitalRead>
    2a82:	220a      	movs	r2, #10
    2a84:	4601      	mov	r1, r0
    2a86:	2300      	movs	r3, #0
    2a88:	4854      	ldr	r0, [pc, #336]	; (2bdc <printbmsstat()+0x2cc>)
    2a8a:	f006 fe65 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2a8e:	2106      	movs	r1, #6
    2a90:	4860      	ldr	r0, [pc, #384]	; (2c14 <printbmsstat()+0x304>)
    2a92:	f009 fb91 	bl	c1b8 <usb_serial_write>
  if ((contstat & 1) == 1) {
    2a96:	6823      	ldr	r3, [r4, #0]
    2a98:	07d8      	lsls	r0, r3, #31
    2a9a:	bf4b      	itete	mi
    2a9c:	2101      	movmi	r1, #1
    2a9e:	2101      	movpl	r1, #1
    2aa0:	485d      	ldrmi	r0, [pc, #372]	; (2c18 <printbmsstat()+0x308>)
    2aa2:	485e      	ldrpl	r0, [pc, #376]	; (2c1c <printbmsstat()+0x30c>)
    2aa4:	f009 fb88 	bl	c1b8 <usb_serial_write>
  if ((contstat & 2) == 2) {
    2aa8:	6823      	ldr	r3, [r4, #0]
    2aaa:	0799      	lsls	r1, r3, #30
    2aac:	bf4b      	itete	mi
    2aae:	2101      	movmi	r1, #1
    2ab0:	2101      	movpl	r1, #1
    2ab2:	4859      	ldrmi	r0, [pc, #356]	; (2c18 <printbmsstat()+0x308>)
    2ab4:	4859      	ldrpl	r0, [pc, #356]	; (2c1c <printbmsstat()+0x30c>)
    2ab6:	f009 fb7f 	bl	c1b8 <usb_serial_write>
  if ((contstat & 4) == 4) {
    2aba:	6823      	ldr	r3, [r4, #0]
    2abc:	075a      	lsls	r2, r3, #29
    2abe:	bf4b      	itete	mi
    2ac0:	2101      	movmi	r1, #1
    2ac2:	2101      	movpl	r1, #1
    2ac4:	4854      	ldrmi	r0, [pc, #336]	; (2c18 <printbmsstat()+0x308>)
    2ac6:	4855      	ldrpl	r0, [pc, #340]	; (2c1c <printbmsstat()+0x30c>)
    2ac8:	f009 fb76 	bl	c1b8 <usb_serial_write>
  if ((contstat & 8) == 8) {
    2acc:	6823      	ldr	r3, [r4, #0]
    2ace:	071b      	lsls	r3, r3, #28
    2ad0:	bf4b      	itete	mi
    2ad2:	2101      	movmi	r1, #1
    2ad4:	2101      	movpl	r1, #1
    2ad6:	4850      	ldrmi	r0, [pc, #320]	; (2c18 <printbmsstat()+0x308>)
    2ad8:	4850      	ldrpl	r0, [pc, #320]	; (2c1c <printbmsstat()+0x30c>)
    2ada:	f009 fb6d 	bl	c1b8 <usb_serial_write>
    2ade:	2104      	movs	r1, #4
    2ae0:	484f      	ldr	r0, [pc, #316]	; (2c20 <printbmsstat()+0x310>)
    2ae2:	f009 fb69 	bl	c1b8 <usb_serial_write>
  SERIALCONSOLE.print(digitalRead(IN1));
    2ae6:	2011      	movs	r0, #17
    2ae8:	f007 fd18 	bl	a51c <digitalRead>
    2aec:	2300      	movs	r3, #0
    2aee:	4601      	mov	r1, r0
    2af0:	220a      	movs	r2, #10
    2af2:	483a      	ldr	r0, [pc, #232]	; (2bdc <printbmsstat()+0x2cc>)
    2af4:	f006 fe30 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN2));
    2af8:	2010      	movs	r0, #16
    2afa:	f007 fd0f 	bl	a51c <digitalRead>
    2afe:	2300      	movs	r3, #0
    2b00:	4601      	mov	r1, r0
    2b02:	220a      	movs	r2, #10
    2b04:	4835      	ldr	r0, [pc, #212]	; (2bdc <printbmsstat()+0x2cc>)
    2b06:	f006 fe27 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN3));
    2b0a:	2012      	movs	r0, #18
    2b0c:	f007 fd06 	bl	a51c <digitalRead>
    2b10:	2300      	movs	r3, #0
    2b12:	4601      	mov	r1, r0
    2b14:	220a      	movs	r2, #10
    2b16:	4831      	ldr	r0, [pc, #196]	; (2bdc <printbmsstat()+0x2cc>)
    2b18:	f006 fe1e 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  SERIALCONSOLE.print(digitalRead(IN4));
    2b1c:	2013      	movs	r0, #19
    2b1e:	f007 fcfd 	bl	a51c <digitalRead>
}
    2b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  SERIALCONSOLE.print(digitalRead(IN4));
    2b26:	4601      	mov	r1, r0
    2b28:	2300      	movs	r3, #0
    2b2a:	482c      	ldr	r0, [pc, #176]	; (2bdc <printbmsstat()+0x2cc>)
    2b2c:	220a      	movs	r2, #10
    2b2e:	f006 be13 	b.w	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    2b32:	2111      	movs	r1, #17
    2b34:	483b      	ldr	r0, [pc, #236]	; (2c24 <printbmsstat()+0x314>)
    2b36:	f009 fb3f 	bl	c1b8 <usb_serial_write>
    2b3a:	e773      	b.n	2a24 <printbmsstat()+0x114>
    2b3c:	210a      	movs	r1, #10
    2b3e:	483a      	ldr	r0, [pc, #232]	; (2c28 <printbmsstat()+0x318>)
    2b40:	f009 fb3a 	bl	c1b8 <usb_serial_write>
    2b44:	e769      	b.n	2a1a <printbmsstat()+0x10a>
    2b46:	210e      	movs	r1, #14
    2b48:	4838      	ldr	r0, [pc, #224]	; (2c2c <printbmsstat()+0x31c>)
    2b4a:	f009 fb35 	bl	c1b8 <usb_serial_write>
    2b4e:	e75e      	b.n	2a0e <printbmsstat()+0xfe>
    2b50:	2107      	movs	r1, #7
    2b52:	4837      	ldr	r0, [pc, #220]	; (2c30 <printbmsstat()+0x320>)
    2b54:	f009 fb30 	bl	c1b8 <usb_serial_write>
    2b58:	e74f      	b.n	29fa <printbmsstat()+0xea>
    2b5a:	2106      	movs	r1, #6
    2b5c:	4835      	ldr	r0, [pc, #212]	; (2c34 <printbmsstat()+0x324>)
    2b5e:	f009 fb2b 	bl	c1b8 <usb_serial_write>
    2b62:	e74a      	b.n	29fa <printbmsstat()+0xea>
    2b64:	2107      	movs	r1, #7
    2b66:	4834      	ldr	r0, [pc, #208]	; (2c38 <printbmsstat()+0x328>)
    2b68:	f009 fb26 	bl	c1b8 <usb_serial_write>
    2b6c:	e745      	b.n	29fa <printbmsstat()+0xea>
    2b6e:	2107      	movs	r1, #7
    2b70:	4832      	ldr	r0, [pc, #200]	; (2c3c <printbmsstat()+0x32c>)
    2b72:	f009 fb21 	bl	c1b8 <usb_serial_write>
    2b76:	e740      	b.n	29fa <printbmsstat()+0xea>
    2b78:	2108      	movs	r1, #8
    2b7a:	4831      	ldr	r0, [pc, #196]	; (2c40 <printbmsstat()+0x330>)
    2b7c:	f009 fb1c 	bl	c1b8 <usb_serial_write>
    2b80:	e73b      	b.n	29fa <printbmsstat()+0xea>
    2b82:	210b      	movs	r1, #11
    2b84:	482f      	ldr	r0, [pc, #188]	; (2c44 <printbmsstat()+0x334>)
    2b86:	f009 fb17 	bl	c1b8 <usb_serial_write>
    2b8a:	e736      	b.n	29fa <printbmsstat()+0xea>
      if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    2b8c:	4818      	ldr	r0, [pc, #96]	; (2bf0 <printbmsstat()+0x2e0>)
    2b8e:	f7fe fef3 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    2b92:	68e1      	ldr	r1, [r4, #12]
    2b94:	f00a fb8e 	bl	d2b4 <__aeabi_fcmplt>
    2b98:	2800      	cmp	r0, #0
    2b9a:	f43f af25 	beq.w	29e8 <printbmsstat()+0xd8>
        if (bmsstatus == Error) {
    2b9e:	4b12      	ldr	r3, [pc, #72]	; (2be8 <printbmsstat()+0x2d8>)
    2ba0:	781b      	ldrb	r3, [r3, #0]
    2ba2:	2b05      	cmp	r3, #5
    2ba4:	d16a      	bne.n	2c7c <printbmsstat()+0x36c>
    2ba6:	210a      	movs	r1, #10
    2ba8:	4827      	ldr	r0, [pc, #156]	; (2c48 <printbmsstat()+0x338>)
    2baa:	f009 fb05 	bl	c1b8 <usb_serial_write>
    2bae:	e71b      	b.n	29e8 <printbmsstat()+0xd8>
      if (bms.getLowCellVolt() > settings.StoreVsetpoint) {
    2bb0:	f7fe febc 	bl	192c <BMSModuleManager::getLowCellVolt()>
    2bb4:	6a21      	ldr	r1, [r4, #32]
    2bb6:	f00a fb9b 	bl	d2f0 <__aeabi_fcmpgt>
    2bba:	2800      	cmp	r0, #0
    2bbc:	d05e      	beq.n	2c7c <printbmsstat()+0x36c>
    2bbe:	2116      	movs	r1, #22
    2bc0:	4822      	ldr	r0, [pc, #136]	; (2c4c <printbmsstat()+0x33c>)
    2bc2:	f009 faf9 	bl	c1b8 <usb_serial_write>
    2bc6:	210a      	movs	r1, #10
    2bc8:	481f      	ldr	r0, [pc, #124]	; (2c48 <printbmsstat()+0x338>)
    2bca:	f009 faf5 	bl	c1b8 <usb_serial_write>
    2bce:	e70b      	b.n	29e8 <printbmsstat()+0xd8>
    2bd0:	210f      	movs	r1, #15
    2bd2:	481f      	ldr	r0, [pc, #124]	; (2c50 <printbmsstat()+0x340>)
    2bd4:	f009 faf0 	bl	c1b8 <usb_serial_write>
    2bd8:	e6cc      	b.n	2974 <printbmsstat()+0x64>
    2bda:	bf00      	nop
    2bdc:	1fff89fc 	.word	0x1fff89fc
    2be0:	1fffd0d8 	.word	0x1fffd0d8
    2be4:	000141c8 	.word	0x000141c8
    2be8:	1fffcf34 	.word	0x1fffcf34
    2bec:	000141d8 	.word	0x000141d8
    2bf0:	1fff91f0 	.word	0x1fff91f0
    2bf4:	1fffd1b0 	.word	0x1fffd1b0
    2bf8:	00014268 	.word	0x00014268
    2bfc:	1fff91b0 	.word	0x1fff91b0
    2c00:	00014fa8 	.word	0x00014fa8
    2c04:	1fff91e8 	.word	0x1fff91e8
    2c08:	1fffcfb4 	.word	0x1fffcfb4
    2c0c:	1fffcf3c 	.word	0x1fffcf3c
    2c10:	000142d8 	.word	0x000142d8
    2c14:	000142e0 	.word	0x000142e0
    2c18:	000142e8 	.word	0x000142e8
    2c1c:	000142ec 	.word	0x000142ec
    2c20:	000142f0 	.word	0x000142f0
    2c24:	000142c4 	.word	0x000142c4
    2c28:	000142b8 	.word	0x000142b8
    2c2c:	000142a8 	.word	0x000142a8
    2c30:	000142a0 	.word	0x000142a0
    2c34:	00014270 	.word	0x00014270
    2c38:	00014278 	.word	0x00014278
    2c3c:	0001428c 	.word	0x0001428c
    2c40:	00014294 	.word	0x00014294
    2c44:	00014280 	.word	0x00014280
    2c48:	00014250 	.word	0x00014250
    2c4c:	00014238 	.word	0x00014238
    2c50:	000141e4 	.word	0x000141e4
    2c54:	2111      	movs	r1, #17
    2c56:	480c      	ldr	r0, [pc, #48]	; (2c88 <printbmsstat()+0x378>)
    2c58:	f009 faae 	bl	c1b8 <usb_serial_write>
    2c5c:	e6a4      	b.n	29a8 <printbmsstat()+0x98>
    2c5e:	210e      	movs	r1, #14
    2c60:	480a      	ldr	r0, [pc, #40]	; (2c8c <printbmsstat()+0x37c>)
    2c62:	f009 faa9 	bl	c1b8 <usb_serial_write>
    2c66:	e68e      	b.n	2986 <printbmsstat()+0x76>
    2c68:	210d      	movs	r1, #13
    2c6a:	4809      	ldr	r0, [pc, #36]	; (2c90 <printbmsstat()+0x380>)
    2c6c:	f009 faa4 	bl	c1b8 <usb_serial_write>
    2c70:	e6ac      	b.n	29cc <printbmsstat()+0xbc>
    2c72:	210c      	movs	r1, #12
    2c74:	4807      	ldr	r0, [pc, #28]	; (2c94 <printbmsstat()+0x384>)
    2c76:	f009 fa9f 	bl	c1b8 <usb_serial_write>
    2c7a:	e69e      	b.n	29ba <printbmsstat()+0xaa>
    2c7c:	2108      	movs	r1, #8
    2c7e:	4806      	ldr	r0, [pc, #24]	; (2c98 <printbmsstat()+0x388>)
    2c80:	f009 fa9a 	bl	c1b8 <usb_serial_write>
    2c84:	e6b0      	b.n	29e8 <printbmsstat()+0xd8>
    2c86:	bf00      	nop
    2c88:	00014204 	.word	0x00014204
    2c8c:	000141f4 	.word	0x000141f4
    2c90:	00014228 	.word	0x00014228
    2c94:	00014218 	.word	0x00014218
    2c98:	0001425c 	.word	0x0001425c

00002c9c <getcurrent()>:
void getcurrent() {
    2c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    2ca0:	4cb5      	ldr	r4, [pc, #724]	; (2f78 <getcurrent()+0x2dc>)
    2ca2:	f8d4 6080 	ldr.w	r6, [r4, #128]	; 0x80
    2ca6:	2e01      	cmp	r6, #1
void getcurrent() {
    2ca8:	b08c      	sub	sp, #48	; 0x30
  if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    2caa:	f000 8144 	beq.w	2f36 <getcurrent()+0x29a>
    2cae:	2e03      	cmp	r6, #3
    2cb0:	d05c      	beq.n	2d6c <getcurrent()+0xd0>
    2cb2:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 2f7c <getcurrent()+0x2e0>
    2cb6:	4fb2      	ldr	r7, [pc, #712]	; (2f80 <getcurrent()+0x2e4>)
    2cb8:	4eb2      	ldr	r6, [pc, #712]	; (2f84 <getcurrent()+0x2e8>)
  if (settings.invertcur == 1) {
    2cba:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  lowpassFilter.input(RawCur);
    2cbc:	48b2      	ldr	r0, [pc, #712]	; (2f88 <getcurrent()+0x2ec>)
  if (settings.invertcur == 1) {
    2cbe:	2b01      	cmp	r3, #1
    RawCur = RawCur * -1;
    2cc0:	bf09      	itett	eq
    2cc2:	6831      	ldreq	r1, [r6, #0]
    2cc4:	6831      	ldrne	r1, [r6, #0]
    2cc6:	f101 4100 	addeq.w	r1, r1, #2147483648	; 0x80000000
    2cca:	6031      	streq	r1, [r6, #0]
  lowpassFilter.input(RawCur);
    2ccc:	f006 fad0 	bl	9270 <FilterOnePole::input(float)>
  if (debugCur != 0) {
    2cd0:	683b      	ldr	r3, [r7, #0]
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	f040 8115 	bne.w	2f02 <getcurrent()+0x266>
  currentact = lowpassFilter.output();
    2cd8:	48ab      	ldr	r0, [pc, #684]	; (2f88 <getcurrent()+0x2ec>)
    2cda:	f006 fa9d 	bl	9218 <FilterOnePole::output()>
  if (debugCur != 0) {
    2cde:	683b      	ldr	r3, [r7, #0]
  currentact = lowpassFilter.output();
    2ce0:	f8c8 0000 	str.w	r0, [r8]
    2ce4:	4605      	mov	r5, r0
  if (debugCur != 0) {
    2ce6:	2b00      	cmp	r3, #0
    2ce8:	f040 80fb 	bne.w	2ee2 <getcurrent()+0x246>
  if (settings.cursens == Analoguedual) {
    2cec:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    2cf0:	2b01      	cmp	r3, #1
    2cf2:	f000 80ba 	beq.w	2e6a <getcurrent()+0x1ce>
    if (currentact > 500 || currentact < -500) {
    2cf6:	49a5      	ldr	r1, [pc, #660]	; (2f8c <getcurrent()+0x2f0>)
    2cf8:	4628      	mov	r0, r5
    2cfa:	f00a faf9 	bl	d2f0 <__aeabi_fcmpgt>
    2cfe:	b930      	cbnz	r0, 2d0e <getcurrent()+0x72>
    2d00:	49a3      	ldr	r1, [pc, #652]	; (2f90 <getcurrent()+0x2f4>)
    2d02:	4628      	mov	r0, r5
    2d04:	f00a fad6 	bl	d2b4 <__aeabi_fcmplt>
    2d08:	2800      	cmp	r0, #0
    2d0a:	f000 81e0 	beq.w	30ce <getcurrent()+0x432>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d0e:	f8df a284 	ldr.w	sl, [pc, #644]	; 2f94 <getcurrent()+0x2f8>
      ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2d12:	f8df 9284 	ldr.w	r9, [pc, #644]	; 2f98 <getcurrent()+0x2fc>
    2d16:	f8da 3000 	ldr.w	r3, [sl]
    2d1a:	930a      	str	r3, [sp, #40]	; 0x28
	return ret;
    2d1c:	980a      	ldr	r0, [sp, #40]	; 0x28
    2d1e:	f8d9 3000 	ldr.w	r3, [r9]
    2d22:	4f9e      	ldr	r7, [pc, #632]	; (2f9c <getcurrent()+0x300>)
    2d24:	1ac0      	subs	r0, r0, r3
    2d26:	f00a f8cf 	bl	cec8 <__aeabi_ui2f>
    2d2a:	4629      	mov	r1, r5
    2d2c:	f00a f924 	bl	cf78 <__aeabi_fmul>
    2d30:	499b      	ldr	r1, [pc, #620]	; (2fa0 <getcurrent()+0x304>)
    2d32:	f00a f9d5 	bl	d0e0 <__aeabi_fdiv>
    2d36:	499a      	ldr	r1, [pc, #616]	; (2fa0 <getcurrent()+0x304>)
    2d38:	f00a f9d2 	bl	d0e0 <__aeabi_fdiv>
    2d3c:	6839      	ldr	r1, [r7, #0]
    2d3e:	f00a f813 	bl	cd68 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2d42:	f8da 3000 	ldr.w	r3, [sl]
    2d46:	9309      	str	r3, [sp, #36]	; 0x24
	return ret;
    2d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2d4a:	6038      	str	r0, [r7, #0]
      lasttime = millis();
    2d4c:	f8c9 3000 	str.w	r3, [r9]
  currentact = settings.ncur * currentact;
    2d50:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    2d54:	f00a f8bc 	bl	ced0 <__aeabi_i2f>
    2d58:	4629      	mov	r1, r5
    2d5a:	f00a f90d 	bl	cf78 <__aeabi_fmul>
  RawCur = 0;
    2d5e:	2300      	movs	r3, #0
  currentact = settings.ncur * currentact;
    2d60:	f8c8 0000 	str.w	r0, [r8]
  RawCur = 0;
    2d64:	6033      	str	r3, [r6, #0]
}
    2d66:	b00c      	add	sp, #48	; 0x30
    2d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      adc->adc0->startContinuous(ACUR1);
    2d6c:	4d8d      	ldr	r5, [pc, #564]	; (2fa4 <getcurrent()+0x308>)
      sensor = 1;
    2d6e:	4f8e      	ldr	r7, [pc, #568]	; (2fa8 <getcurrent()+0x30c>)
      adc->adc0->startContinuous(ACUR1);
    2d70:	682a      	ldr	r2, [r5, #0]
    2d72:	f8df 8208 	ldr.w	r8, [pc, #520]	; 2f7c <getcurrent()+0x2e0>
    2d76:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
      sensor = 1;
    2d7a:	2301      	movs	r3, #1
      adc->adc0->startContinuous(ACUR1);
    2d7c:	210f      	movs	r1, #15
      sensor = 1;
    2d7e:	603b      	str	r3, [r7, #0]
      adc->adc0->startContinuous(ACUR1);
    2d80:	f006 f934 	bl	8fec <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    2d84:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    2d86:	4f7e      	ldr	r7, [pc, #504]	; (2f80 <getcurrent()+0x2e4>)
    if (sensor == 1) {
    2d88:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    2d8a:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    2d8c:	f000 812c 	beq.w	2fe8 <getcurrent()+0x34c>
      if (debugCur != 0) {
    2d90:	2b00      	cmp	r3, #0
    2d92:	f040 81af 	bne.w	30f4 <getcurrent()+0x458>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2d96:	682b      	ldr	r3, [r5, #0]
    2d98:	f8df 9210 	ldr.w	r9, [pc, #528]	; 2fac <getcurrent()+0x310>
    2d9c:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    int analogReadContinuous() __attribute__((always_inline))
    {
#ifdef ADC_TEENSY_4
        return (int16_t)(int32_t)adc_regs.R0;
#else
        return (int16_t)(int32_t)adc_regs.RA;
    2da0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2da2:	691e      	ldr	r6, [r3, #16]
    2da4:	b2b6      	uxth	r6, r6
    2da6:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    2daa:	f005 fe67 	bl	8a7c <ADC_Module::getMaxValue()>
    2dae:	f8b4 208a 	ldrh.w	r2, [r4, #138]	; 0x8a
    2db2:	f640 43e4 	movw	r3, #3300	; 0xce4
    2db6:	fb06 f303 	mul.w	r3, r6, r3
    2dba:	fbb3 f0f0 	udiv	r0, r3, r0
    2dbe:	1a80      	subs	r0, r0, r2
    2dc0:	b200      	sxth	r0, r0
    2dc2:	f00a f885 	bl	ced0 <__aeabi_i2f>
    2dc6:	497a      	ldr	r1, [pc, #488]	; (2fb0 <getcurrent()+0x314>)
    2dc8:	4606      	mov	r6, r0
    2dca:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    2dce:	f00a f8d3 	bl	cf78 <__aeabi_fmul>
    2dd2:	4601      	mov	r1, r0
    2dd4:	4630      	mov	r0, r6
    2dd6:	f00a f983 	bl	d0e0 <__aeabi_fdiv>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2dda:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    2dde:	4e69      	ldr	r6, [pc, #420]	; (2f84 <getcurrent()+0x2e8>)
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2de0:	2b63      	cmp	r3, #99	; 0x63
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    2de2:	6030      	str	r0, [r6, #0]
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    2de4:	f300 817a 	bgt.w	30dc <getcurrent()+0x440>
        RawCur = 0;
    2de8:	2300      	movs	r3, #0
    2dea:	6033      	str	r3, [r6, #0]
      if (debugCur != 0) {
    2dec:	683b      	ldr	r3, [r7, #0]
    2dee:	2b00      	cmp	r3, #0
    2df0:	f43f af63 	beq.w	2cba <getcurrent()+0x1e>
    2df4:	2102      	movs	r1, #2
    2df6:	486f      	ldr	r0, [pc, #444]	; (2fb4 <getcurrent()+0x318>)
    2df8:	f009 f9de 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print((float(value * 3300 / adc->adc0->getMaxValue()) - settings.offset2));
    2dfc:	682b      	ldr	r3, [r5, #0]
    2dfe:	f8d9 5000 	ldr.w	r5, [r9]
    2e02:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2e06:	f640 43e4 	movw	r3, #3300	; 0xce4
    2e0a:	fb03 f505 	mul.w	r5, r3, r5
    2e0e:	f005 fe35 	bl	8a7c <ADC_Module::getMaxValue()>
    2e12:	fbb5 f0f0 	udiv	r0, r5, r0
    2e16:	f00a f857 	bl	cec8 <__aeabi_ui2f>
    2e1a:	4605      	mov	r5, r0
    2e1c:	f8b4 008a 	ldrh.w	r0, [r4, #138]	; 0x8a
    2e20:	f00a f856 	bl	ced0 <__aeabi_i2f>
    2e24:	4601      	mov	r1, r0
    2e26:	4628      	mov	r0, r5
    2e28:	f009 ff9c 	bl	cd64 <__aeabi_fsub>
    2e2c:	f009 fe80 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    2e30:	2502      	movs	r5, #2
    2e32:	4602      	mov	r2, r0
    2e34:	460b      	mov	r3, r1
    2e36:	9500      	str	r5, [sp, #0]
    2e38:	485f      	ldr	r0, [pc, #380]	; (2fb8 <getcurrent()+0x31c>)
    2e3a:	f006 fc99 	bl	9770 <Print::printFloat(double, unsigned char)>
    2e3e:	4629      	mov	r1, r5
    2e40:	485c      	ldr	r0, [pc, #368]	; (2fb4 <getcurrent()+0x318>)
    2e42:	f009 f9b9 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    2e46:	6830      	ldr	r0, [r6, #0]
    2e48:	f009 fe72 	bl	cb30 <__aeabi_f2d>
    2e4c:	9500      	str	r5, [sp, #0]
    2e4e:	4602      	mov	r2, r0
    2e50:	460b      	mov	r3, r1
    2e52:	4859      	ldr	r0, [pc, #356]	; (2fb8 <getcurrent()+0x31c>)
    2e54:	f006 fc8c 	bl	9770 <Print::printFloat(double, unsigned char)>
    2e58:	4629      	mov	r1, r5
    2e5a:	4858      	ldr	r0, [pc, #352]	; (2fbc <getcurrent()+0x320>)
    2e5c:	f009 f9ac 	bl	c1b8 <usb_serial_write>
    2e60:	4629      	mov	r1, r5
    2e62:	4854      	ldr	r0, [pc, #336]	; (2fb4 <getcurrent()+0x318>)
    2e64:	f009 f9a8 	bl	c1b8 <usb_serial_write>
    2e68:	e727      	b.n	2cba <getcurrent()+0x1e>
    if (sensor == 1) {
    2e6a:	4b4f      	ldr	r3, [pc, #316]	; (2fa8 <getcurrent()+0x30c>)
    2e6c:	681b      	ldr	r3, [r3, #0]
    2e6e:	2b01      	cmp	r3, #1
    2e70:	f000 8175 	beq.w	315e <getcurrent()+0x4c2>
    if (sensor == 2) {
    2e74:	2b02      	cmp	r3, #2
    2e76:	f47f af6b 	bne.w	2d50 <getcurrent()+0xb4>
      if (currentact > settings.changecur || currentact < (settings.changecur * -1)) {
    2e7a:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    2e7e:	4638      	mov	r0, r7
    2e80:	f00a f826 	bl	ced0 <__aeabi_i2f>
    2e84:	4629      	mov	r1, r5
    2e86:	f00a fa15 	bl	d2b4 <__aeabi_fcmplt>
    2e8a:	b940      	cbnz	r0, 2e9e <getcurrent()+0x202>
    2e8c:	4278      	negs	r0, r7
    2e8e:	f00a f81f 	bl	ced0 <__aeabi_i2f>
    2e92:	4629      	mov	r1, r5
    2e94:	f00a fa2c 	bl	d2f0 <__aeabi_fcmpgt>
    2e98:	2800      	cmp	r0, #0
    2e9a:	f000 81ce 	beq.w	323a <getcurrent()+0x59e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2e9e:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 2f94 <getcurrent()+0x2f8>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    2ea2:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 2f98 <getcurrent()+0x2fc>
    2ea6:	f8da 3000 	ldr.w	r3, [sl]
    2eaa:	9307      	str	r3, [sp, #28]
	return ret;
    2eac:	9807      	ldr	r0, [sp, #28]
    2eae:	f8d9 3000 	ldr.w	r3, [r9]
    2eb2:	4f3a      	ldr	r7, [pc, #232]	; (2f9c <getcurrent()+0x300>)
    2eb4:	1ac0      	subs	r0, r0, r3
    2eb6:	f00a f807 	bl	cec8 <__aeabi_ui2f>
    2eba:	4629      	mov	r1, r5
    2ebc:	f00a f85c 	bl	cf78 <__aeabi_fmul>
    2ec0:	4937      	ldr	r1, [pc, #220]	; (2fa0 <getcurrent()+0x304>)
    2ec2:	f00a f90d 	bl	d0e0 <__aeabi_fdiv>
    2ec6:	4936      	ldr	r1, [pc, #216]	; (2fa0 <getcurrent()+0x304>)
    2ec8:	f00a f90a 	bl	d0e0 <__aeabi_fdiv>
    2ecc:	6839      	ldr	r1, [r7, #0]
    2ece:	f009 ff4b 	bl	cd68 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    2ed2:	f8da 3000 	ldr.w	r3, [sl]
    2ed6:	9306      	str	r3, [sp, #24]
	return ret;
    2ed8:	9b06      	ldr	r3, [sp, #24]
    2eda:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    2edc:	f8c9 3000 	str.w	r3, [r9]
    2ee0:	e736      	b.n	2d50 <getcurrent()+0xb4>
    SERIALCONSOLE.print(currentact);
    2ee2:	f009 fe25 	bl	cb30 <__aeabi_f2d>
    2ee6:	460b      	mov	r3, r1
    2ee8:	2102      	movs	r1, #2
    2eea:	4602      	mov	r2, r0
    2eec:	9100      	str	r1, [sp, #0]
    2eee:	4832      	ldr	r0, [pc, #200]	; (2fb8 <getcurrent()+0x31c>)
    2ef0:	f006 fc3e 	bl	9770 <Print::printFloat(double, unsigned char)>
    2ef4:	4832      	ldr	r0, [pc, #200]	; (2fc0 <getcurrent()+0x324>)
    2ef6:	2104      	movs	r1, #4
    2ef8:	f009 f95e 	bl	c1b8 <usb_serial_write>
      if (currentact > 500 || currentact < -500) {
    2efc:	f8d8 5000 	ldr.w	r5, [r8]
    2f00:	e6f4      	b.n	2cec <getcurrent()+0x50>
    SERIALCONSOLE.print(lowpassFilter.output());
    2f02:	4821      	ldr	r0, [pc, #132]	; (2f88 <getcurrent()+0x2ec>)
    2f04:	f006 f988 	bl	9218 <FilterOnePole::output()>
    2f08:	f009 fe12 	bl	cb30 <__aeabi_f2d>
    2f0c:	460b      	mov	r3, r1
    2f0e:	2102      	movs	r1, #2
    2f10:	4602      	mov	r2, r0
    2f12:	9100      	str	r1, [sp, #0]
    2f14:	4828      	ldr	r0, [pc, #160]	; (2fb8 <getcurrent()+0x31c>)
    2f16:	f006 fc2b 	bl	9770 <Print::printFloat(double, unsigned char)>
    2f1a:	2103      	movs	r1, #3
    2f1c:	4829      	ldr	r0, [pc, #164]	; (2fc4 <getcurrent()+0x328>)
    2f1e:	f009 f94b 	bl	c1b8 <usb_serial_write>
    SERIALCONSOLE.print(settings.changecur);
    2f22:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
    2f26:	4824      	ldr	r0, [pc, #144]	; (2fb8 <getcurrent()+0x31c>)
    2f28:	f006 fbf6 	bl	9718 <Print::print(long)>
    2f2c:	2103      	movs	r1, #3
    2f2e:	4825      	ldr	r0, [pc, #148]	; (2fc4 <getcurrent()+0x328>)
    2f30:	f009 f942 	bl	c1b8 <usb_serial_write>
    2f34:	e6d0      	b.n	2cd8 <getcurrent()+0x3c>
      if (currentact < settings.changecur && currentact > (settings.changecur * -1)) {
    2f36:	f8df 8044 	ldr.w	r8, [pc, #68]	; 2f7c <getcurrent()+0x2e0>
    2f3a:	f8d4 708c 	ldr.w	r7, [r4, #140]	; 0x8c
    2f3e:	f8d8 5000 	ldr.w	r5, [r8]
    2f42:	4638      	mov	r0, r7
    2f44:	f009 ffc4 	bl	ced0 <__aeabi_i2f>
    2f48:	4629      	mov	r1, r5
    2f4a:	f00a f9d1 	bl	d2f0 <__aeabi_fcmpgt>
    2f4e:	2800      	cmp	r0, #0
    2f50:	d03a      	beq.n	2fc8 <getcurrent()+0x32c>
    2f52:	4278      	negs	r0, r7
    2f54:	f009 ffbc 	bl	ced0 <__aeabi_i2f>
    2f58:	4601      	mov	r1, r0
    2f5a:	4628      	mov	r0, r5
    2f5c:	f00a f9c8 	bl	d2f0 <__aeabi_fcmpgt>
    2f60:	b390      	cbz	r0, 2fc8 <getcurrent()+0x32c>
        adc->startContinuous(ACUR1);
    2f62:	4d10      	ldr	r5, [pc, #64]	; (2fa4 <getcurrent()+0x308>)
        sensor = 1;
    2f64:	4f10      	ldr	r7, [pc, #64]	; (2fa8 <getcurrent()+0x30c>)
        adc->startContinuous(ACUR1);
    2f66:	6828      	ldr	r0, [r5, #0]
        sensor = 1;
    2f68:	603e      	str	r6, [r7, #0]
        adc->startContinuous(ACUR1);
    2f6a:	f04f 32ff 	mov.w	r2, #4294967295
    2f6e:	210f      	movs	r1, #15
    2f70:	f005 fd2e 	bl	89d0 <ADC::startContinuous(unsigned char, signed char)>
    2f74:	e706      	b.n	2d84 <getcurrent()+0xe8>
    2f76:	bf00      	nop
    2f78:	1fffd0d8 	.word	0x1fffd0d8
    2f7c:	1fffcfc4 	.word	0x1fffcfc4
    2f80:	1fffcfc8 	.word	0x1fffcfc8
    2f84:	1fff91c0 	.word	0x1fff91c0
    2f88:	1fffd00c 	.word	0x1fffd00c
    2f8c:	43fa0000 	.word	0x43fa0000
    2f90:	c3fa0000 	.word	0xc3fa0000
    2f94:	1fffd3c0 	.word	0x1fffd3c0
    2f98:	1fffd000 	.word	0x1fffd000
    2f9c:	1fff91e4 	.word	0x1fff91e4
    2fa0:	447a0000 	.word	0x447a0000
    2fa4:	1fff91dc 	.word	0x1fff91dc
    2fa8:	1fff8878 	.word	0x1fff8878
    2fac:	1fffd1b8 	.word	0x1fffd1b8
    2fb0:	3727c5ac 	.word	0x3727c5ac
    2fb4:	00014fa8 	.word	0x00014fa8
    2fb8:	1fff89fc 	.word	0x1fff89fc
    2fbc:	00014334 	.word	0x00014334
    2fc0:	00014338 	.word	0x00014338
    2fc4:	00013cb8 	.word	0x00013cb8
        sensor = 2;
    2fc8:	4f9f      	ldr	r7, [pc, #636]	; (3248 <getcurrent()+0x5ac>)
        adc->adc0->startContinuous(ACUR2);
    2fca:	4da0      	ldr	r5, [pc, #640]	; (324c <getcurrent()+0x5b0>)
        sensor = 2;
    2fcc:	2302      	movs	r3, #2
    2fce:	603b      	str	r3, [r7, #0]
        adc->adc0->startContinuous(ACUR2);
    2fd0:	682b      	ldr	r3, [r5, #0]
    2fd2:	210e      	movs	r1, #14
    2fd4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2fd8:	f006 f808 	bl	8fec <ADC_Module::startContinuous(unsigned char)>
    if (sensor == 1) {
    2fdc:	683b      	ldr	r3, [r7, #0]
      if (debugCur != 0) {
    2fde:	4f9c      	ldr	r7, [pc, #624]	; (3250 <getcurrent()+0x5b4>)
    if (sensor == 1) {
    2fe0:	2b01      	cmp	r3, #1
      if (debugCur != 0) {
    2fe2:	683b      	ldr	r3, [r7, #0]
    if (sensor == 1) {
    2fe4:	f47f aed4 	bne.w	2d90 <getcurrent()+0xf4>
      if (debugCur != 0) {
    2fe8:	2b00      	cmp	r3, #0
    2fea:	f040 80e5 	bne.w	31b8 <getcurrent()+0x51c>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    2fee:	682b      	ldr	r3, [r5, #0]
    2ff0:	f8df 9260 	ldr.w	r9, [pc, #608]	; 3254 <getcurrent()+0x5b8>
    2ff4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    2ff8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    2ffa:	691e      	ldr	r6, [r3, #16]
    2ffc:	b2b6      	uxth	r6, r6
    2ffe:	f8c9 6000 	str.w	r6, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    3002:	f005 fd3b 	bl	8a7c <ADC_Module::getMaxValue()>
    3006:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
    300a:	f640 4ae4 	movw	sl, #3300	; 0xce4
    300e:	fb0a f606 	mul.w	r6, sl, r6
    3012:	fbb6 f6f0 	udiv	r6, r6, r0
    3016:	1af0      	subs	r0, r6, r3
    3018:	b200      	sxth	r0, r0
    301a:	f009 ff59 	bl	ced0 <__aeabi_i2f>
    301e:	498e      	ldr	r1, [pc, #568]	; (3258 <getcurrent()+0x5bc>)
    3020:	4606      	mov	r6, r0
    3022:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    3026:	f009 ffa7 	bl	cf78 <__aeabi_fmul>
    302a:	4601      	mov	r1, r0
    302c:	4630      	mov	r0, r6
    302e:	f00a f857 	bl	d0e0 <__aeabi_fdiv>
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    3032:	682b      	ldr	r3, [r5, #0]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    3034:	4e89      	ldr	r6, [pc, #548]	; (325c <getcurrent()+0x5c0>)
    3036:	4602      	mov	r2, r0
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    3038:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    303c:	f8d9 3000 	ldr.w	r3, [r9]
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    3040:	6032      	str	r2, [r6, #0]
      if (abs((int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1)) < settings.CurDead) {
    3042:	fb0a fa03 	mul.w	sl, sl, r3
    3046:	f005 fd19 	bl	8a7c <ADC_Module::getMaxValue()>
    304a:	f8b4 2088 	ldrh.w	r2, [r4, #136]	; 0x88
    304e:	fbba f3f0 	udiv	r3, sl, r0
    3052:	b21b      	sxth	r3, r3
    3054:	1a9b      	subs	r3, r3, r2
    3056:	2b00      	cmp	r3, #0
    3058:	f8b4 20c2 	ldrh.w	r2, [r4, #194]	; 0xc2
    305c:	bfb8      	it	lt
    305e:	425b      	neglt	r3, r3
    3060:	429a      	cmp	r2, r3
        RawCur = 0;
    3062:	bfc4      	itt	gt
    3064:	2300      	movgt	r3, #0
    3066:	6033      	strgt	r3, [r6, #0]
      if (debugCur != 0) {
    3068:	683b      	ldr	r3, [r7, #0]
    306a:	2b00      	cmp	r3, #0
    306c:	f43f ae25 	beq.w	2cba <getcurrent()+0x1e>
    3070:	2102      	movs	r1, #2
    3072:	487b      	ldr	r0, [pc, #492]	; (3260 <getcurrent()+0x5c4>)
    3074:	f009 f8a0 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(int16_t(value * 3300 / adc->adc0->getMaxValue()) - settings.offset1);
    3078:	682b      	ldr	r3, [r5, #0]
    307a:	f8d9 5000 	ldr.w	r5, [r9]
    307e:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3082:	f640 43e4 	movw	r3, #3300	; 0xce4
    3086:	fb03 f505 	mul.w	r5, r3, r5
    308a:	f005 fcf7 	bl	8a7c <ADC_Module::getMaxValue()>
    308e:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
    3092:	fbb5 f5f0 	udiv	r5, r5, r0
    3096:	b22d      	sxth	r5, r5
	size_t print(int n)				{ return print((long)n); }
    3098:	1a69      	subs	r1, r5, r1
    309a:	4872      	ldr	r0, [pc, #456]	; (3264 <getcurrent()+0x5c8>)
    309c:	f006 fb3c 	bl	9718 <Print::print(long)>
    30a0:	2102      	movs	r1, #2
    30a2:	486f      	ldr	r0, [pc, #444]	; (3260 <getcurrent()+0x5c4>)
    30a4:	f009 f888 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(RawCur);
    30a8:	6830      	ldr	r0, [r6, #0]
    30aa:	f009 fd41 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    30ae:	2502      	movs	r5, #2
    30b0:	4602      	mov	r2, r0
    30b2:	460b      	mov	r3, r1
    30b4:	9500      	str	r5, [sp, #0]
    30b6:	486b      	ldr	r0, [pc, #428]	; (3264 <getcurrent()+0x5c8>)
    30b8:	f006 fb5a 	bl	9770 <Print::printFloat(double, unsigned char)>
    30bc:	2103      	movs	r1, #3
    30be:	486a      	ldr	r0, [pc, #424]	; (3268 <getcurrent()+0x5cc>)
    30c0:	f009 f87a 	bl	c1b8 <usb_serial_write>
    30c4:	4629      	mov	r1, r5
    30c6:	4866      	ldr	r0, [pc, #408]	; (3260 <getcurrent()+0x5c4>)
    30c8:	f009 f876 	bl	c1b8 <usb_serial_write>
    30cc:	e5f5      	b.n	2cba <getcurrent()+0x1e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    30ce:	4b67      	ldr	r3, [pc, #412]	; (326c <getcurrent()+0x5d0>)
    30d0:	681b      	ldr	r3, [r3, #0]
    30d2:	930b      	str	r3, [sp, #44]	; 0x2c
      lasttime = millis();
    30d4:	4b66      	ldr	r3, [pc, #408]	; (3270 <getcurrent()+0x5d4>)
	return ret;
    30d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    30d8:	601a      	str	r2, [r3, #0]
    30da:	e639      	b.n	2d50 <getcurrent()+0xb4>
      if (value < 100 || value > (adc->adc0->getMaxValue() - 100)) {
    30dc:	682b      	ldr	r3, [r5, #0]
    30de:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    30e2:	f005 fccb 	bl	8a7c <ADC_Module::getMaxValue()>
    30e6:	f8d9 3000 	ldr.w	r3, [r9]
    30ea:	3864      	subs	r0, #100	; 0x64
    30ec:	4298      	cmp	r0, r3
    30ee:	f4ff ae7b 	bcc.w	2de8 <getcurrent()+0x14c>
    30f2:	e67b      	b.n	2dec <getcurrent()+0x150>
        SERIALCONSOLE.println();
    30f4:	485b      	ldr	r0, [pc, #364]	; (3264 <getcurrent()+0x5c8>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    30f6:	f8df 915c 	ldr.w	r9, [pc, #348]	; 3254 <getcurrent()+0x5b8>
        SERIALCONSOLE.println();
    30fa:	f006 fb15 	bl	9728 <Print::println()>
    30fe:	210c      	movs	r1, #12
    3100:	485c      	ldr	r0, [pc, #368]	; (3274 <getcurrent()+0x5d8>)
    3102:	f009 f859 	bl	c1b8 <usb_serial_write>
    3106:	485c      	ldr	r0, [pc, #368]	; (3278 <getcurrent()+0x5dc>)
    3108:	210c      	movs	r1, #12
    310a:	f009 f855 	bl	c1b8 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    310e:	682b      	ldr	r3, [r5, #0]
      if (debugCur != 0) {
    3110:	683a      	ldr	r2, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    3112:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3116:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3118:	691e      	ldr	r6, [r3, #16]
    311a:	b2b6      	uxth	r6, r6
    311c:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    3120:	2a00      	cmp	r2, #0
    3122:	f43f ae42 	beq.w	2daa <getcurrent()+0x10e>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset2)
    3126:	f005 fca9 	bl	8a7c <ADC_Module::getMaxValue()>
    312a:	f640 42e4 	movw	r2, #3300	; 0xce4
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    312e:	2300      	movs	r3, #0
    3130:	fb06 f202 	mul.w	r2, r6, r2
    3134:	fbb2 f1f0 	udiv	r1, r2, r0
    3138:	220a      	movs	r2, #10
    313a:	484a      	ldr	r0, [pc, #296]	; (3264 <getcurrent()+0x5c8>)
    313c:	f006 fb0c 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    3140:	2102      	movs	r1, #2
    3142:	4847      	ldr	r0, [pc, #284]	; (3260 <getcurrent()+0x5c4>)
    3144:	f009 f838 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3148:	f8b4 108a 	ldrh.w	r1, [r4, #138]	; 0x8a
    314c:	4845      	ldr	r0, [pc, #276]	; (3264 <getcurrent()+0x5c8>)
    314e:	f006 fae3 	bl	9718 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset2) / (settings.convhigh * 0.00001);
    3152:	682b      	ldr	r3, [r5, #0]
    3154:	f8d9 6000 	ldr.w	r6, [r9]
    3158:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    315c:	e625      	b.n	2daa <getcurrent()+0x10e>
      if (currentact > 500 || currentact < -500) {
    315e:	4947      	ldr	r1, [pc, #284]	; (327c <getcurrent()+0x5e0>)
    3160:	4628      	mov	r0, r5
    3162:	f00a f8c5 	bl	d2f0 <__aeabi_fcmpgt>
    3166:	b928      	cbnz	r0, 3174 <getcurrent()+0x4d8>
    3168:	4945      	ldr	r1, [pc, #276]	; (3280 <getcurrent()+0x5e4>)
    316a:	4628      	mov	r0, r5
    316c:	f00a f8a2 	bl	d2b4 <__aeabi_fcmplt>
    3170:	2800      	cmp	r0, #0
    3172:	d05b      	beq.n	322c <getcurrent()+0x590>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3174:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 326c <getcurrent()+0x5d0>
        ampsecond = ampsecond + ((currentact * (millis() - lasttime) / 1000) / 1000);
    3178:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 3270 <getcurrent()+0x5d4>
    317c:	f8da 3000 	ldr.w	r3, [sl]
    3180:	9304      	str	r3, [sp, #16]
	return ret;
    3182:	9804      	ldr	r0, [sp, #16]
    3184:	f8d9 3000 	ldr.w	r3, [r9]
    3188:	4f3e      	ldr	r7, [pc, #248]	; (3284 <getcurrent()+0x5e8>)
    318a:	1ac0      	subs	r0, r0, r3
    318c:	f009 fe9c 	bl	cec8 <__aeabi_ui2f>
    3190:	4629      	mov	r1, r5
    3192:	f009 fef1 	bl	cf78 <__aeabi_fmul>
    3196:	493c      	ldr	r1, [pc, #240]	; (3288 <getcurrent()+0x5ec>)
    3198:	f009 ffa2 	bl	d0e0 <__aeabi_fdiv>
    319c:	493a      	ldr	r1, [pc, #232]	; (3288 <getcurrent()+0x5ec>)
    319e:	f009 ff9f 	bl	d0e0 <__aeabi_fdiv>
    31a2:	6839      	ldr	r1, [r7, #0]
    31a4:	f009 fde0 	bl	cd68 <__addsf3>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    31a8:	f8da 3000 	ldr.w	r3, [sl]
    31ac:	9303      	str	r3, [sp, #12]
	return ret;
    31ae:	9b03      	ldr	r3, [sp, #12]
    31b0:	6038      	str	r0, [r7, #0]
        lasttime = millis();
    31b2:	f8c9 3000 	str.w	r3, [r9]
    31b6:	e5cb      	b.n	2d50 <getcurrent()+0xb4>
        SERIALCONSOLE.println();
    31b8:	482a      	ldr	r0, [pc, #168]	; (3264 <getcurrent()+0x5c8>)
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    31ba:	f8df 9098 	ldr.w	r9, [pc, #152]	; 3254 <getcurrent()+0x5b8>
        SERIALCONSOLE.println();
    31be:	f006 fab3 	bl	9728 <Print::println()>
        if (settings.cursens == Analoguedual) {
    31c2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    31c6:	2b01      	cmp	r3, #1
    31c8:	bf0c      	ite	eq
    31ca:	4830      	ldreq	r0, [pc, #192]	; (328c <getcurrent()+0x5f0>)
    31cc:	4830      	ldrne	r0, [pc, #192]	; (3290 <getcurrent()+0x5f4>)
    31ce:	210b      	movs	r1, #11
    31d0:	f008 fff2 	bl	c1b8 <usb_serial_write>
    31d4:	4828      	ldr	r0, [pc, #160]	; (3278 <getcurrent()+0x5dc>)
    31d6:	210c      	movs	r1, #12
    31d8:	f008 ffee 	bl	c1b8 <usb_serial_write>
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    31dc:	682a      	ldr	r2, [r5, #0]
      if (debugCur != 0) {
    31de:	683b      	ldr	r3, [r7, #0]
      value = (uint16_t)adc->adc0->analogReadContinuous();  // the unsigned is necessary for 16 bits, otherwise values larger than 3.3/2 V are negative!
    31e0:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
    31e4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    31e6:	6916      	ldr	r6, [r2, #16]
    31e8:	b2b6      	uxth	r6, r6
    31ea:	f8c9 6000 	str.w	r6, [r9]
      if (debugCur != 0) {
    31ee:	2b00      	cmp	r3, #0
    31f0:	f43f af07 	beq.w	3002 <getcurrent()+0x366>
        SERIALCONSOLE.print(value * 3300 / adc->adc0->getMaxValue());  //- settings.offset1)
    31f4:	f005 fc42 	bl	8a7c <ADC_Module::getMaxValue()>
    31f8:	f640 43e4 	movw	r3, #3300	; 0xce4
    31fc:	fb06 f303 	mul.w	r3, r6, r3
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    3200:	220a      	movs	r2, #10
    3202:	fbb3 f1f0 	udiv	r1, r3, r0
    3206:	2300      	movs	r3, #0
    3208:	4816      	ldr	r0, [pc, #88]	; (3264 <getcurrent()+0x5c8>)
    320a:	f006 faa5 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    320e:	2101      	movs	r1, #1
    3210:	4820      	ldr	r0, [pc, #128]	; (3294 <getcurrent()+0x5f8>)
    3212:	f008 ffd1 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3216:	f8b4 1088 	ldrh.w	r1, [r4, #136]	; 0x88
    321a:	4812      	ldr	r0, [pc, #72]	; (3264 <getcurrent()+0x5c8>)
    321c:	f006 fa7c 	bl	9718 <Print::print(long)>
      RawCur = int16_t((value * 3300 / adc->adc0->getMaxValue()) - settings.offset1) / (settings.convlow * 0.00001);
    3220:	682b      	ldr	r3, [r5, #0]
    3222:	f8d9 6000 	ldr.w	r6, [r9]
    3226:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    322a:	e6ea      	b.n	3002 <getcurrent()+0x366>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    322c:	4b0f      	ldr	r3, [pc, #60]	; (326c <getcurrent()+0x5d0>)
    322e:	681b      	ldr	r3, [r3, #0]
    3230:	9305      	str	r3, [sp, #20]
        lasttime = millis();
    3232:	4b0f      	ldr	r3, [pc, #60]	; (3270 <getcurrent()+0x5d4>)
	return ret;
    3234:	9a05      	ldr	r2, [sp, #20]
    3236:	601a      	str	r2, [r3, #0]
    3238:	e58a      	b.n	2d50 <getcurrent()+0xb4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    323a:	4b0c      	ldr	r3, [pc, #48]	; (326c <getcurrent()+0x5d0>)
    323c:	681b      	ldr	r3, [r3, #0]
    323e:	9308      	str	r3, [sp, #32]
        lasttime = millis();
    3240:	4b0b      	ldr	r3, [pc, #44]	; (3270 <getcurrent()+0x5d4>)
	return ret;
    3242:	9a08      	ldr	r2, [sp, #32]
    3244:	601a      	str	r2, [r3, #0]
    3246:	e583      	b.n	2d50 <getcurrent()+0xb4>
    3248:	1fff8878 	.word	0x1fff8878
    324c:	1fff91dc 	.word	0x1fff91dc
    3250:	1fffcfc8 	.word	0x1fffcfc8
    3254:	1fffd1b8 	.word	0x1fffd1b8
    3258:	3727c5ac 	.word	0x3727c5ac
    325c:	1fff91c0 	.word	0x1fff91c0
    3260:	00014fa8 	.word	0x00014fa8
    3264:	1fff89fc 	.word	0x1fff89fc
    3268:	00014320 	.word	0x00014320
    326c:	1fffd3c0 	.word	0x1fffd3c0
    3270:	1fffd000 	.word	0x1fffd000
    3274:	00014324 	.word	0x00014324
    3278:	00014310 	.word	0x00014310
    327c:	43fa0000 	.word	0x43fa0000
    3280:	c3fa0000 	.word	0xc3fa0000
    3284:	1fff91e4 	.word	0x1fff91e4
    3288:	447a0000 	.word	0x447a0000
    328c:	000142f8 	.word	0x000142f8
    3290:	00014304 	.word	0x00014304
    3294:	000141c4 	.word	0x000141c4

00003298 <updateSOC()>:
void updateSOC() {
    3298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (SOCreset == 1) {
    329c:	4da9      	ldr	r5, [pc, #676]	; (3544 <updateSOC()+0x2ac>)
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    329e:	4caa      	ldr	r4, [pc, #680]	; (3548 <updateSOC()+0x2b0>)
  if (SOCreset == 1) {
    32a0:	682b      	ldr	r3, [r5, #0]
    32a2:	2b01      	cmp	r3, #1
void updateSOC() {
    32a4:	b087      	sub	sp, #28
  if (SOCreset == 1) {
    32a6:	f000 810a 	beq.w	34be <updateSOC()+0x226>
    32aa:	4ea8      	ldr	r6, [pc, #672]	; (354c <updateSOC()+0x2b4>)
    32ac:	4fa8      	ldr	r7, [pc, #672]	; (3550 <updateSOC()+0x2b8>)
  if (SOCset == 0 && SOCmem == 0) {
    32ae:	f8df 92a4 	ldr.w	r9, [pc, #676]	; 3554 <updateSOC()+0x2bc>
    32b2:	f8d9 3000 	ldr.w	r3, [r9]
    32b6:	2b00      	cmp	r3, #0
    32b8:	f000 80a6 	beq.w	3408 <updateSOC()+0x170>
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    32bc:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    32c0:	6da5      	ldr	r5, [r4, #88]	; 0x58
    32c2:	f8df 8294 	ldr.w	r8, [pc, #660]	; 3558 <updateSOC()+0x2c0>
    32c6:	49a5      	ldr	r1, [pc, #660]	; (355c <updateSOC()+0x2c4>)
    32c8:	6838      	ldr	r0, [r7, #0]
    32ca:	f009 fe55 	bl	cf78 <__aeabi_fmul>
    32ce:	fb05 f50b 	mul.w	r5, r5, fp
    32d2:	4681      	mov	r9, r0
    32d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    32d8:	fb05 f000 	mul.w	r0, r5, r0
    32dc:	f009 fdf8 	bl	ced0 <__aeabi_i2f>
    32e0:	4601      	mov	r1, r0
    32e2:	4648      	mov	r0, r9
    32e4:	f009 fefc 	bl	d0e0 <__aeabi_fdiv>
    32e8:	499d      	ldr	r1, [pc, #628]	; (3560 <updateSOC()+0x2c8>)
    32ea:	f009 fe45 	bl	cf78 <__aeabi_fmul>
    32ee:	f00a f809 	bl	d304 <__aeabi_f2iz>
  if (settings.voltsoc == 1 || settings.cursens == 0) {
    32f2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    32f6:	6030      	str	r0, [r6, #0]
  if (settings.voltsoc == 1 || settings.cursens == 0) {
    32f8:	2b01      	cmp	r3, #1
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    32fa:	4605      	mov	r5, r0
  if (settings.voltsoc == 1 || settings.cursens == 0) {
    32fc:	d056      	beq.n	33ac <updateSOC()+0x114>
    32fe:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    3302:	2b00      	cmp	r3, #0
    3304:	d052      	beq.n	33ac <updateSOC()+0x114>
  if (SOC >= 100) {
    3306:	2d63      	cmp	r5, #99	; 0x63
    3308:	dd73      	ble.n	33f2 <updateSOC()+0x15a>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    330a:	6da3      	ldr	r3, [r4, #88]	; 0x58
    330c:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    330e:	fb03 f000 	mul.w	r0, r3, r0
    3312:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3316:	fb03 f000 	mul.w	r0, r3, r0
    331a:	f009 fdd9 	bl	ced0 <__aeabi_i2f>
    331e:	498f      	ldr	r1, [pc, #572]	; (355c <updateSOC()+0x2c4>)
    3320:	f009 fede 	bl	d0e0 <__aeabi_fdiv>
    SOC = 100;
    3324:	2364      	movs	r3, #100	; 0x64
    3326:	6033      	str	r3, [r6, #0]
  if (debug != 0) {
    3328:	f8d8 3000 	ldr.w	r3, [r8]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    332c:	6038      	str	r0, [r7, #0]
  if (debug != 0) {
    332e:	2b00      	cmp	r3, #0
    3330:	d067      	beq.n	3402 <updateSOC()+0x16a>
    if (settings.cursens == Analoguedual) {
    3332:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    3336:	2b01      	cmp	r3, #1
    3338:	f000 80e8 	beq.w	350c <updateSOC()+0x274>
    if (settings.cursens == Analoguesing) {
    333c:	2b03      	cmp	r3, #3
    333e:	f000 80f3 	beq.w	3528 <updateSOC()+0x290>
    if (settings.cursens == Canbus) {
    3342:	2b02      	cmp	r3, #2
    3344:	f000 80f9 	beq.w	353a <updateSOC()+0x2a2>
    3348:	2102      	movs	r1, #2
    334a:	4886      	ldr	r0, [pc, #536]	; (3564 <updateSOC()+0x2cc>)
    334c:	f008 ff34 	bl	c1b8 <usb_serial_write>
    SERIALCONSOLE.print(currentact);
    3350:	4b85      	ldr	r3, [pc, #532]	; (3568 <updateSOC()+0x2d0>)
    3352:	6818      	ldr	r0, [r3, #0]
    3354:	f009 fbec 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3358:	2402      	movs	r4, #2
    335a:	4602      	mov	r2, r0
    335c:	460b      	mov	r3, r1
    335e:	9400      	str	r4, [sp, #0]
    3360:	4882      	ldr	r0, [pc, #520]	; (356c <updateSOC()+0x2d4>)
    3362:	f006 fa05 	bl	9770 <Print::printFloat(double, unsigned char)>
    3366:	4621      	mov	r1, r4
    3368:	4881      	ldr	r0, [pc, #516]	; (3570 <updateSOC()+0x2d8>)
    336a:	f008 ff25 	bl	c1b8 <usb_serial_write>
    336e:	4621      	mov	r1, r4
    3370:	487c      	ldr	r0, [pc, #496]	; (3564 <updateSOC()+0x2cc>)
    3372:	f008 ff21 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    3376:	6831      	ldr	r1, [r6, #0]
    3378:	487c      	ldr	r0, [pc, #496]	; (356c <updateSOC()+0x2d4>)
    337a:	f006 f9cd 	bl	9718 <Print::print(long)>
    337e:	2106      	movs	r1, #6
    3380:	487c      	ldr	r0, [pc, #496]	; (3574 <updateSOC()+0x2dc>)
    3382:	f008 ff19 	bl	c1b8 <usb_serial_write>
    SERIALCONSOLE.print(ampsecond * 0.27777777777778, 2);
    3386:	6838      	ldr	r0, [r7, #0]
    3388:	4974      	ldr	r1, [pc, #464]	; (355c <updateSOC()+0x2c4>)
    338a:	f009 fdf5 	bl	cf78 <__aeabi_fmul>
    338e:	f009 fbcf 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    3392:	9400      	str	r4, [sp, #0]
    3394:	4602      	mov	r2, r0
    3396:	460b      	mov	r3, r1
    3398:	4874      	ldr	r0, [pc, #464]	; (356c <updateSOC()+0x2d4>)
    339a:	f006 f9e9 	bl	9770 <Print::printFloat(double, unsigned char)>
    339e:	4876      	ldr	r0, [pc, #472]	; (3578 <updateSOC()+0x2e0>)
    33a0:	2103      	movs	r1, #3
}
    33a2:	b007      	add	sp, #28
    33a4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33a8:	f008 bf06 	b.w	c1b8 <usb_serial_write>
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    33ac:	4873      	ldr	r0, [pc, #460]	; (357c <updateSOC()+0x2e4>)
    33ae:	f7fe fabd 	bl	192c <BMSModuleManager::getLowCellVolt()>
    33b2:	4973      	ldr	r1, [pc, #460]	; (3580 <updateSOC()+0x2e8>)
    33b4:	f009 fde0 	bl	cf78 <__aeabi_fmul>
    33b8:	f009 ffca 	bl	d350 <__aeabi_f2uiz>
    33bc:	6fa5      	ldr	r5, [r4, #120]	; 0x78
    33be:	6f62      	ldr	r2, [r4, #116]	; 0x74
    33c0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    33c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    33c4:	9500      	str	r5, [sp, #0]
    33c6:	b280      	uxth	r0, r0
    33c8:	f7ff f80a 	bl	23e0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    33cc:	4605      	mov	r5, r0
    33ce:	6030      	str	r0, [r6, #0]
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    33d0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    33d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
    33d4:	fb05 f000 	mul.w	r0, r5, r0
    33d8:	fb03 f000 	mul.w	r0, r3, r0
    33dc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    33e0:	0040      	lsls	r0, r0, #1
    33e2:	f009 fd75 	bl	ced0 <__aeabi_i2f>
    33e6:	495d      	ldr	r1, [pc, #372]	; (355c <updateSOC()+0x2c4>)
    33e8:	f009 fe7a 	bl	d0e0 <__aeabi_fdiv>
  if (SOC >= 100) {
    33ec:	2d63      	cmp	r5, #99	; 0x63
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    33ee:	6038      	str	r0, [r7, #0]
  if (SOC >= 100) {
    33f0:	dc8b      	bgt.n	330a <updateSOC()+0x72>
  if (SOC < 0) {
    33f2:	2d00      	cmp	r5, #0
    SOC = 0;  //reset SOC this way the can messages remain in range for other devices. Ampseconds will keep counting.
    33f4:	bfbc      	itt	lt
    33f6:	2300      	movlt	r3, #0
    33f8:	6033      	strlt	r3, [r6, #0]
  if (debug != 0) {
    33fa:	f8d8 3000 	ldr.w	r3, [r8]
    33fe:	2b00      	cmp	r3, #0
    3400:	d197      	bne.n	3332 <updateSOC()+0x9a>
}
    3402:	b007      	add	sp, #28
    3404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (SOCset == 0 && SOCmem == 0) {
    3408:	f8df a178 	ldr.w	sl, [pc, #376]	; 3584 <updateSOC()+0x2ec>
    340c:	f8da 3000 	ldr.w	r3, [sl]
    3410:	2b00      	cmp	r3, #0
    3412:	d037      	beq.n	3484 <updateSOC()+0x1ec>
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    3414:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    3418:	6da5      	ldr	r5, [r4, #88]	; 0x58
    341a:	f8df 813c 	ldr.w	r8, [pc, #316]	; 3558 <updateSOC()+0x2c0>
  if (SOCset == 0 && SOCmem == 1) {
    341e:	2b01      	cmp	r3, #1
    3420:	f47f af51 	bne.w	32c6 <updateSOC()+0x2e>
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    3424:	6830      	ldr	r0, [r6, #0]
    3426:	fb00 f00b 	mul.w	r0, r0, fp
    342a:	fb05 f000 	mul.w	r0, r5, r0
    342e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3432:	4d55      	ldr	r5, [pc, #340]	; (3588 <updateSOC()+0x2f0>)
    3434:	0040      	lsls	r0, r0, #1
    3436:	f009 fd4b 	bl	ced0 <__aeabi_i2f>
    343a:	4948      	ldr	r1, [pc, #288]	; (355c <updateSOC()+0x2c4>)
    343c:	f009 fe50 	bl	d0e0 <__aeabi_fdiv>
    3440:	682b      	ldr	r3, [r5, #0]
    3442:	9304      	str	r3, [sp, #16]
	return ret;
    3444:	9a04      	ldr	r2, [sp, #16]
    3446:	6038      	str	r0, [r7, #0]
    if (millis() > 9000) {
    3448:	f242 3328 	movw	r3, #9000	; 0x2328
    344c:	429a      	cmp	r2, r3
    344e:	f200 80e2 	bhi.w	3616 <updateSOC()+0x37e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3452:	682b      	ldr	r3, [r5, #0]
    3454:	9305      	str	r3, [sp, #20]
	return ret;
    3456:	9a05      	ldr	r2, [sp, #20]
    if (millis() > 10000) {
    3458:	f242 7310 	movw	r3, #10000	; 0x2710
    345c:	429a      	cmp	r2, r3
    345e:	d90d      	bls.n	347c <updateSOC()+0x1e4>
      if (debug != 0) {
    3460:	f8d8 3000 	ldr.w	r3, [r8]
      SOCset = 1;
    3464:	2201      	movs	r2, #1
    3466:	f8c9 2000 	str.w	r2, [r9]
      if (debug != 0) {
    346a:	2b00      	cmp	r3, #0
    346c:	f040 80db 	bne.w	3626 <updateSOC()+0x38e>
      if (settings.ESSmode == 1) {
    3470:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    3474:	2b01      	cmp	r3, #1
        bmsstatus = Ready;
    3476:	bf04      	itt	eq
    3478:	4a44      	ldreq	r2, [pc, #272]	; (358c <updateSOC()+0x2f4>)
    347a:	7013      	strbeq	r3, [r2, #0]
  SOC = ((ampsecond * 0.27777777777778) / (settings.CAP * settings.Pstrings * 1000)) * 100;
    347c:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    3480:	6da5      	ldr	r5, [r4, #88]	; 0x58
    3482:	e720      	b.n	32c6 <updateSOC()+0x2e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3484:	4d40      	ldr	r5, [pc, #256]	; (3588 <updateSOC()+0x2f0>)
    3486:	682a      	ldr	r2, [r5, #0]
    3488:	9202      	str	r2, [sp, #8]
	return ret;
    348a:	9a02      	ldr	r2, [sp, #8]
    if (millis() > 9000) {
    348c:	f242 3328 	movw	r3, #9000	; 0x2328
    3490:	429a      	cmp	r2, r3
    3492:	f200 80b8 	bhi.w	3606 <updateSOC()+0x36e>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3496:	682b      	ldr	r3, [r5, #0]
    3498:	9303      	str	r3, [sp, #12]
	return ret;
    349a:	9a03      	ldr	r2, [sp, #12]
    if (millis() > 10000) {
    349c:	f242 7310 	movw	r3, #10000	; 0x2710
    34a0:	429a      	cmp	r2, r3
    34a2:	d87f      	bhi.n	35a4 <updateSOC()+0x30c>
  if (SOCset == 0 && SOCmem == 1) {
    34a4:	f8d9 3000 	ldr.w	r3, [r9]
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    34a8:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    34ac:	6da5      	ldr	r5, [r4, #88]	; 0x58
    34ae:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 3558 <updateSOC()+0x2c0>
  if (SOCset == 0 && SOCmem == 1) {
    34b2:	2b00      	cmp	r3, #0
    34b4:	f47f af07 	bne.w	32c6 <updateSOC()+0x2e>
    34b8:	f8da 3000 	ldr.w	r3, [sl]
    34bc:	e7af      	b.n	341e <updateSOC()+0x186>
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    34be:	482f      	ldr	r0, [pc, #188]	; (357c <updateSOC()+0x2e4>)
    34c0:	f7fe fa34 	bl	192c <BMSModuleManager::getLowCellVolt()>
    34c4:	492e      	ldr	r1, [pc, #184]	; (3580 <updateSOC()+0x2e8>)
    34c6:	6f66      	ldr	r6, [r4, #116]	; 0x74
    34c8:	6f27      	ldr	r7, [r4, #112]	; 0x70
    34ca:	f009 fd55 	bl	cf78 <__aeabi_fmul>
    34ce:	f009 ff3f 	bl	d350 <__aeabi_f2uiz>
    34d2:	4632      	mov	r2, r6
    34d4:	6fa6      	ldr	r6, [r4, #120]	; 0x78
    34d6:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    34d8:	9600      	str	r6, [sp, #0]
    34da:	463b      	mov	r3, r7
    34dc:	b280      	uxth	r0, r0
    34de:	f7fe ff7f 	bl	23e0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
    34e2:	4e1a      	ldr	r6, [pc, #104]	; (354c <updateSOC()+0x2b4>)
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    34e4:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    34e6:	6030      	str	r0, [r6, #0]
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    34e8:	fb03 f000 	mul.w	r0, r3, r0
    34ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
    34ee:	4f18      	ldr	r7, [pc, #96]	; (3550 <updateSOC()+0x2b8>)
    34f0:	fb03 f000 	mul.w	r0, r3, r0
    34f4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    34f8:	0040      	lsls	r0, r0, #1
    34fa:	f009 fce9 	bl	ced0 <__aeabi_i2f>
    34fe:	4917      	ldr	r1, [pc, #92]	; (355c <updateSOC()+0x2c4>)
    3500:	f009 fdee 	bl	d0e0 <__aeabi_fdiv>
    SOCreset = 0;
    3504:	2300      	movs	r3, #0
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    3506:	6038      	str	r0, [r7, #0]
    SOCreset = 0;
    3508:	602b      	str	r3, [r5, #0]
    350a:	e6d0      	b.n	32ae <updateSOC()+0x16>
      if (sensor == 1) {
    350c:	4b20      	ldr	r3, [pc, #128]	; (3590 <updateSOC()+0x2f8>)
    350e:	681b      	ldr	r3, [r3, #0]
    3510:	2b01      	cmp	r3, #1
    3512:	bf0c      	ite	eq
    3514:	481f      	ldreq	r0, [pc, #124]	; (3594 <updateSOC()+0x2fc>)
    3516:	4820      	ldrne	r0, [pc, #128]	; (3598 <updateSOC()+0x300>)
    3518:	210a      	movs	r1, #10
    351a:	f008 fe4d 	bl	c1b8 <usb_serial_write>
    if (settings.cursens == Analoguesing) {
    351e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    3522:	2b03      	cmp	r3, #3
    3524:	f47f af0d 	bne.w	3342 <updateSOC()+0xaa>
    3528:	481c      	ldr	r0, [pc, #112]	; (359c <updateSOC()+0x304>)
    352a:	2110      	movs	r1, #16
    352c:	f008 fe44 	bl	c1b8 <usb_serial_write>
    if (settings.cursens == Canbus) {
    3530:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    3534:	2b02      	cmp	r3, #2
    3536:	f47f af07 	bne.w	3348 <updateSOC()+0xb0>
    353a:	2107      	movs	r1, #7
    353c:	4818      	ldr	r0, [pc, #96]	; (35a0 <updateSOC()+0x308>)
    353e:	f008 fe3b 	bl	c1b8 <usb_serial_write>
    3542:	e701      	b.n	3348 <updateSOC()+0xb0>
    3544:	1fff91c8 	.word	0x1fff91c8
    3548:	1fffd0d8 	.word	0x1fffd0d8
    354c:	1fff8828 	.word	0x1fff8828
    3550:	1fff91e4 	.word	0x1fff91e4
    3554:	1fff91cc 	.word	0x1fff91cc
    3558:	1fff884c 	.word	0x1fff884c
    355c:	3e8e38e4 	.word	0x3e8e38e4
    3560:	42c80000 	.word	0x42c80000
    3564:	00014fa8 	.word	0x00014fa8
    3568:	1fffcfc4 	.word	0x1fffcfc4
    356c:	1fff89fc 	.word	0x1fff89fc
    3570:	00014334 	.word	0x00014334
    3574:	000143d0 	.word	0x000143d0
    3578:	000143d8 	.word	0x000143d8
    357c:	1fff91f0 	.word	0x1fff91f0
    3580:	447a0000 	.word	0x447a0000
    3584:	1fff91c4 	.word	0x1fff91c4
    3588:	1fffd3c0 	.word	0x1fffd3c0
    358c:	1fffcf34 	.word	0x1fffcf34
    3590:	1fff8878 	.word	0x1fff8878
    3594:	0001439c 	.word	0x0001439c
    3598:	000143a8 	.word	0x000143a8
    359c:	000143b4 	.word	0x000143b4
    35a0:	000143c8 	.word	0x000143c8
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    35a4:	4834      	ldr	r0, [pc, #208]	; (3678 <updateSOC()+0x3e0>)
      if (debug != 0) {
    35a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 367c <updateSOC()+0x3e4>
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    35aa:	f7fe f9bf 	bl	192c <BMSModuleManager::getLowCellVolt()>
    35ae:	4934      	ldr	r1, [pc, #208]	; (3680 <updateSOC()+0x3e8>)
    35b0:	f009 fce2 	bl	cf78 <__aeabi_fmul>
    35b4:	f009 fecc 	bl	d350 <__aeabi_f2uiz>
    35b8:	6fa5      	ldr	r5, [r4, #120]	; 0x78
    35ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
    35bc:	6f62      	ldr	r2, [r4, #116]	; 0x74
    35be:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    35c0:	9500      	str	r5, [sp, #0]
    35c2:	b280      	uxth	r0, r0
    35c4:	f7fe ff0c 	bl	23e0 <long map<unsigned short, int, int, int, int>(unsigned short, int, int, int, int, std::enable_if<std::is_integral<unsigned short>::value, void>::type*) [clone .isra.0]>
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    35c8:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    35cc:	6da5      	ldr	r5, [r4, #88]	; 0x58
      SOC = map(uint16_t(bms.getLowCellVolt() * 1000), settings.socvolt[0], settings.socvolt[2], settings.socvolt[1], settings.socvolt[3]);
    35ce:	6030      	str	r0, [r6, #0]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    35d0:	fb0b f000 	mul.w	r0, fp, r0
    35d4:	fb05 f000 	mul.w	r0, r5, r0
    35d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    35dc:	0040      	lsls	r0, r0, #1
    35de:	f009 fc77 	bl	ced0 <__aeabi_i2f>
    35e2:	4928      	ldr	r1, [pc, #160]	; (3684 <updateSOC()+0x3ec>)
    35e4:	f009 fd7c 	bl	d0e0 <__aeabi_fdiv>
      if (debug != 0) {
    35e8:	f8d8 3000 	ldr.w	r3, [r8]
      ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    35ec:	6038      	str	r0, [r7, #0]
      SOCset = 1;
    35ee:	2201      	movs	r2, #1
    35f0:	f8c9 2000 	str.w	r2, [r9]
      if (debug != 0) {
    35f4:	bb33      	cbnz	r3, 3644 <updateSOC()+0x3ac>
      if (settings.ESSmode == 1) {
    35f6:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    35fa:	2b01      	cmp	r3, #1
    35fc:	f47f ae63 	bne.w	32c6 <updateSOC()+0x2e>
        bmsstatus = Ready;
    3600:	4a21      	ldr	r2, [pc, #132]	; (3688 <updateSOC()+0x3f0>)
    3602:	7013      	strb	r3, [r2, #0]
  if (SOCset == 0 && SOCmem == 1) {
    3604:	e65f      	b.n	32c6 <updateSOC()+0x2e>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    3606:	6d23      	ldr	r3, [r4, #80]	; 0x50
    3608:	6c62      	ldr	r2, [r4, #68]	; 0x44
    360a:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    360e:	481a      	ldr	r0, [pc, #104]	; (3678 <updateSOC()+0x3e0>)
    3610:	f7fe f9e0 	bl	19d4 <BMSModuleManager::setSensors(int, float, float)>
    3614:	e73f      	b.n	3496 <updateSOC()+0x1fe>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    3616:	6d23      	ldr	r3, [r4, #80]	; 0x50
    3618:	6c62      	ldr	r2, [r4, #68]	; 0x44
    361a:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    361e:	4816      	ldr	r0, [pc, #88]	; (3678 <updateSOC()+0x3e0>)
    3620:	f7fe f9d8 	bl	19d4 <BMSModuleManager::setSensors(int, float, float)>
    3624:	e715      	b.n	3452 <updateSOC()+0x1ba>
    3626:	2102      	movs	r1, #2
    3628:	4818      	ldr	r0, [pc, #96]	; (368c <updateSOC()+0x3f4>)
    362a:	f008 fdc5 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    362e:	4818      	ldr	r0, [pc, #96]	; (3690 <updateSOC()+0x3f8>)
    3630:	f006 f87a 	bl	9728 <Print::println()>
    3634:	2159      	movs	r1, #89	; 0x59
    3636:	4817      	ldr	r0, [pc, #92]	; (3694 <updateSOC()+0x3fc>)
    3638:	f008 fdbe 	bl	c1b8 <usb_serial_write>
    363c:	4814      	ldr	r0, [pc, #80]	; (3690 <updateSOC()+0x3f8>)
    363e:	f006 f873 	bl	9728 <Print::println()>
    3642:	e715      	b.n	3470 <updateSOC()+0x1d8>
    3644:	2102      	movs	r1, #2
    3646:	4811      	ldr	r0, [pc, #68]	; (368c <updateSOC()+0x3f4>)
    3648:	f008 fdb6 	bl	c1b8 <usb_serial_write>
    364c:	4810      	ldr	r0, [pc, #64]	; (3690 <updateSOC()+0x3f8>)
    364e:	f006 f86b 	bl	9728 <Print::println()>
    3652:	2159      	movs	r1, #89	; 0x59
    3654:	480f      	ldr	r0, [pc, #60]	; (3694 <updateSOC()+0x3fc>)
    3656:	f008 fdaf 	bl	c1b8 <usb_serial_write>
    365a:	480d      	ldr	r0, [pc, #52]	; (3690 <updateSOC()+0x3f8>)
    365c:	f006 f864 	bl	9728 <Print::println()>
      if (settings.ESSmode == 1) {
    3660:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
    ampsecond = (SOC * settings.CAP * settings.Pstrings * 10) / 0.27777777777778;
    3664:	f8d4 b05c 	ldr.w	fp, [r4, #92]	; 0x5c
    3668:	6da5      	ldr	r5, [r4, #88]	; 0x58
      if (settings.ESSmode == 1) {
    366a:	2b01      	cmp	r3, #1
        bmsstatus = Ready;
    366c:	bf04      	itt	eq
    366e:	4a06      	ldreq	r2, [pc, #24]	; (3688 <updateSOC()+0x3f0>)
    3670:	7013      	strbeq	r3, [r2, #0]
  if (SOCset == 0 && SOCmem == 1) {
    3672:	f8d9 3000 	ldr.w	r3, [r9]
    3676:	e71c      	b.n	34b2 <updateSOC()+0x21a>
    3678:	1fff91f0 	.word	0x1fff91f0
    367c:	1fff884c 	.word	0x1fff884c
    3680:	447a0000 	.word	0x447a0000
    3684:	3e8e38e4 	.word	0x3e8e38e4
    3688:	1fffcf34 	.word	0x1fffcf34
    368c:	00014fa8 	.word	0x00014fa8
    3690:	1fff89fc 	.word	0x1fff89fc
    3694:	00014340 	.word	0x00014340

00003698 <Prechargecon()>:
void Prechargecon() {
    3698:	b530      	push	{r4, r5, lr}
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    369a:	2011      	movs	r0, #17
void Prechargecon() {
    369c:	b083      	sub	sp, #12
  if (digitalRead(IN1) == HIGH || digitalRead(IN3) == HIGH)  //detect Key ON or AC present
    369e:	f006 ff3d 	bl	a51c <digitalRead>
    36a2:	2801      	cmp	r0, #1
    36a4:	d004      	beq.n	36b0 <Prechargecon()+0x18>
    36a6:	2012      	movs	r0, #18
    36a8:	f006 ff38 	bl	a51c <digitalRead>
    36ac:	2801      	cmp	r0, #1
    36ae:	d122      	bne.n	36f6 <Prechargecon()+0x5e>
    digitalWrite(OUT4, HIGH);  //Negative Contactor Close
    36b0:	2101      	movs	r1, #1
    36b2:	2015      	movs	r0, #21
    36b4:	f006 ff0c 	bl	a4d0 <digitalWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    36b8:	4b2a      	ldr	r3, [pc, #168]	; (3764 <Prechargecon()+0xcc>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    36ba:	4a2b      	ldr	r2, [pc, #172]	; (3768 <Prechargecon()+0xd0>)
    36bc:	4c2b      	ldr	r4, [pc, #172]	; (376c <Prechargecon()+0xd4>)
    36be:	681b      	ldr	r3, [r3, #0]
    contctrl = 2;
    36c0:	4d2b      	ldr	r5, [pc, #172]	; (3770 <Prechargecon()+0xd8>)
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    36c2:	6811      	ldr	r1, [r2, #0]
    36c4:	9301      	str	r3, [sp, #4]
    contctrl = 2;
    36c6:	2202      	movs	r2, #2
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    36c8:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    contctrl = 2;
    36cc:	602a      	str	r2, [r5, #0]
	return ret;
    36ce:	9a01      	ldr	r2, [sp, #4]
    if (Pretimer + settings.Pretime > millis() || currentact > settings.Precurrent) {
    36d0:	440b      	add	r3, r1
    36d2:	4293      	cmp	r3, r2
    36d4:	d808      	bhi.n	36e8 <Prechargecon()+0x50>
    36d6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    36da:	f009 fbf9 	bl	ced0 <__aeabi_i2f>
    36de:	4b25      	ldr	r3, [pc, #148]	; (3774 <Prechargecon()+0xdc>)
    36e0:	6819      	ldr	r1, [r3, #0]
    36e2:	f009 fde7 	bl	d2b4 <__aeabi_fcmplt>
    36e6:	b1d0      	cbz	r0, 371e <Prechargecon()+0x86>
      digitalWrite(OUT2, HIGH);  //precharge
    36e8:	2101      	movs	r1, #1
      digitalWrite(OUT2, LOW);
    36ea:	200c      	movs	r0, #12
}
    36ec:	b003      	add	sp, #12
    36ee:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    36f2:	f006 beed 	b.w	a4d0 <digitalWrite>
    digitalWrite(OUT1, LOW);
    36f6:	2100      	movs	r1, #0
    36f8:	200b      	movs	r0, #11
    36fa:	f006 fee9 	bl	a4d0 <digitalWrite>
    digitalWrite(OUT2, LOW);
    36fe:	2100      	movs	r1, #0
    3700:	200c      	movs	r0, #12
    3702:	f006 fee5 	bl	a4d0 <digitalWrite>
    digitalWrite(OUT4, LOW);
    3706:	2100      	movs	r1, #0
    3708:	2015      	movs	r0, #21
    370a:	f006 fee1 	bl	a4d0 <digitalWrite>
    bmsstatus = Ready;
    370e:	491a      	ldr	r1, [pc, #104]	; (3778 <Prechargecon()+0xe0>)
    contctrl = 0;
    3710:	4b17      	ldr	r3, [pc, #92]	; (3770 <Prechargecon()+0xd8>)
    bmsstatus = Ready;
    3712:	2001      	movs	r0, #1
    contctrl = 0;
    3714:	2200      	movs	r2, #0
    bmsstatus = Ready;
    3716:	7008      	strb	r0, [r1, #0]
    contctrl = 0;
    3718:	601a      	str	r2, [r3, #0]
}
    371a:	b003      	add	sp, #12
    371c:	bd30      	pop	{r4, r5, pc}
      digitalWrite(OUT1, HIGH);  //Positive Contactor Close
    371e:	2101      	movs	r1, #1
    3720:	200b      	movs	r0, #11
    3722:	f006 fed5 	bl	a4d0 <digitalWrite>
      if (settings.ChargerDirect == 1) {
    3726:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
      contctrl = 3;
    372a:	2403      	movs	r4, #3
    372c:	602c      	str	r4, [r5, #0]
      if (settings.ChargerDirect == 1) {
    372e:	b14b      	cbz	r3, 3744 <Prechargecon()+0xac>
        bmsstatus = Drive;
    3730:	4b11      	ldr	r3, [pc, #68]	; (3778 <Prechargecon()+0xe0>)
    3732:	2202      	movs	r2, #2
    3734:	701a      	strb	r2, [r3, #0]
      digitalWrite(OUT2, LOW);
    3736:	2100      	movs	r1, #0
    3738:	200c      	movs	r0, #12
}
    373a:	b003      	add	sp, #12
    373c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      digitalWrite(OUT2, LOW);
    3740:	f006 bec6 	b.w	a4d0 <digitalWrite>
        if (digitalRead(IN3) == HIGH) {
    3744:	2012      	movs	r0, #18
    3746:	f006 fee9 	bl	a51c <digitalRead>
    374a:	2801      	cmp	r0, #1
          bmsstatus = Charge;
    374c:	bf08      	it	eq
    374e:	4b0a      	ldreq	r3, [pc, #40]	; (3778 <Prechargecon()+0xe0>)
        if (digitalRead(IN1) == HIGH) {
    3750:	f04f 0011 	mov.w	r0, #17
          bmsstatus = Charge;
    3754:	bf08      	it	eq
    3756:	701c      	strbeq	r4, [r3, #0]
        if (digitalRead(IN1) == HIGH) {
    3758:	f006 fee0 	bl	a51c <digitalRead>
    375c:	2801      	cmp	r0, #1
    375e:	d1ea      	bne.n	3736 <Prechargecon()+0x9e>
    3760:	e7e6      	b.n	3730 <Prechargecon()+0x98>
    3762:	bf00      	nop
    3764:	1fffd3c0 	.word	0x1fffd3c0
    3768:	1fff91b8 	.word	0x1fff91b8
    376c:	1fffd0d8 	.word	0x1fffd0d8
    3770:	1fffcfb0 	.word	0x1fffcfb0
    3774:	1fffcfc4 	.word	0x1fffcfc4
    3778:	1fffcf34 	.word	0x1fffcf34

0000377c <contcon()>:
void contcon() {
    377c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (contctrl != contstat)  //check for contactor request change
    377e:	4e71      	ldr	r6, [pc, #452]	; (3944 <contcon()+0x1c8>)
    3780:	4c71      	ldr	r4, [pc, #452]	; (3948 <contcon()+0x1cc>)
    3782:	6833      	ldr	r3, [r6, #0]
    3784:	6825      	ldr	r5, [r4, #0]
    3786:	42ab      	cmp	r3, r5
void contcon() {
    3788:	b087      	sub	sp, #28
  if (contctrl != contstat)  //check for contactor request change
    378a:	d02d      	beq.n	37e8 <contcon()+0x6c>
    if ((contctrl & 1) == 0) {
    378c:	f013 0101 	ands.w	r1, r3, #1
    3790:	d04b      	beq.n	382a <contcon()+0xae>
    if ((contctrl & 2) == 0) {
    3792:	f013 0102 	ands.w	r1, r3, #2
    3796:	d05f      	beq.n	3858 <contcon()+0xdc>
    if ((contctrl & 4) == 0) {
    3798:	f013 0104 	ands.w	r1, r3, #4
    379c:	d051      	beq.n	3842 <contcon()+0xc6>
    if ((contctrl & 1) == 1) {
    379e:	07da      	lsls	r2, r3, #31
    37a0:	d50e      	bpl.n	37c0 <contcon()+0x44>
      if ((contstat & 1) != 1) {
    37a2:	6822      	ldr	r2, [r4, #0]
    37a4:	07d7      	lsls	r7, r2, #31
    37a6:	d40b      	bmi.n	37c0 <contcon()+0x44>
        if (conttimer1 == 0) {
    37a8:	4d68      	ldr	r5, [pc, #416]	; (394c <contcon()+0x1d0>)
    37aa:	682a      	ldr	r2, [r5, #0]
    37ac:	2a00      	cmp	r2, #0
    37ae:	f000 8093 	beq.w	38d8 <contcon()+0x15c>
    37b2:	4b67      	ldr	r3, [pc, #412]	; (3950 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    37b4:	681b      	ldr	r3, [r3, #0]
    37b6:	9301      	str	r3, [sp, #4]
	return ret;
    37b8:	9b01      	ldr	r3, [sp, #4]
        if (conttimer1 < millis()) {
    37ba:	4293      	cmp	r3, r2
    37bc:	d87f      	bhi.n	38be <contcon()+0x142>
    if ((contctrl & 2) == 2) {
    37be:	6833      	ldr	r3, [r6, #0]
    37c0:	079d      	lsls	r5, r3, #30
    37c2:	d414      	bmi.n	37ee <contcon()+0x72>
    if ((contctrl & 4) == 4) {
    37c4:	0759      	lsls	r1, r3, #29
    37c6:	d522      	bpl.n	380e <contcon()+0x92>
      if ((contstat & 4) != 4) {
    37c8:	6822      	ldr	r2, [r4, #0]
    37ca:	0752      	lsls	r2, r2, #29
    37cc:	d40d      	bmi.n	37ea <contcon()+0x6e>
        if (conttimer3 == 0) {
    37ce:	4f61      	ldr	r7, [pc, #388]	; (3954 <contcon()+0x1d8>)
    37d0:	683a      	ldr	r2, [r7, #0]
    37d2:	2a00      	cmp	r2, #0
    37d4:	f000 809e 	beq.w	3914 <contcon()+0x198>
    37d8:	4b5d      	ldr	r3, [pc, #372]	; (3950 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    37da:	681b      	ldr	r3, [r3, #0]
    37dc:	9305      	str	r3, [sp, #20]
	return ret;
    37de:	9b05      	ldr	r3, [sp, #20]
        if (conttimer3 < millis()) {
    37e0:	4293      	cmp	r3, r2
    37e2:	f200 8086 	bhi.w	38f2 <contcon()+0x176>
  if (contctrl == 0) {
    37e6:	6835      	ldr	r5, [r6, #0]
    37e8:	b1a5      	cbz	r5, 3814 <contcon()+0x98>
}
    37ea:	b007      	add	sp, #28
    37ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((contstat & 2) != 2) {
    37ee:	6822      	ldr	r2, [r4, #0]
    37f0:	0790      	lsls	r0, r2, #30
    37f2:	d43d      	bmi.n	3870 <contcon()+0xf4>
        if (conttimer2 == 0) {
    37f4:	4d58      	ldr	r5, [pc, #352]	; (3958 <contcon()+0x1dc>)
    37f6:	682a      	ldr	r2, [r5, #0]
    37f8:	2a00      	cmp	r2, #0
    37fa:	d049      	beq.n	3890 <contcon()+0x114>
    37fc:	4b54      	ldr	r3, [pc, #336]	; (3950 <contcon()+0x1d4>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    37fe:	681b      	ldr	r3, [r3, #0]
    3800:	9303      	str	r3, [sp, #12]
	return ret;
    3802:	9b03      	ldr	r3, [sp, #12]
        if (conttimer2 < millis()) {
    3804:	429a      	cmp	r2, r3
    3806:	d336      	bcc.n	3876 <contcon()+0xfa>
    if ((contctrl & 4) == 4) {
    3808:	6833      	ldr	r3, [r6, #0]
    380a:	0759      	lsls	r1, r3, #29
    380c:	d4dc      	bmi.n	37c8 <contcon()+0x4c>
    380e:	461d      	mov	r5, r3
  if (contctrl == 0) {
    3810:	2d00      	cmp	r5, #0
    3812:	d1ea      	bne.n	37ea <contcon()+0x6e>
    analogWrite(OUT5, 0);
    3814:	4629      	mov	r1, r5
    3816:	2016      	movs	r0, #22
    3818:	f006 fcde 	bl	a1d8 <analogWrite>
    analogWrite(OUT6, 0);
    381c:	4629      	mov	r1, r5
    381e:	2017      	movs	r0, #23
}
    3820:	b007      	add	sp, #28
    3822:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    analogWrite(OUT6, 0);
    3826:	f006 bcd7 	b.w	a1d8 <analogWrite>
      analogWrite(OUT5, 0);
    382a:	2016      	movs	r0, #22
    382c:	f006 fcd4 	bl	a1d8 <analogWrite>
      contstat = contstat & 254;
    3830:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    3832:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 254;
    3834:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if ((contctrl & 2) == 0) {
    3838:	f013 0102 	ands.w	r1, r3, #2
      contstat = contstat & 254;
    383c:	6022      	str	r2, [r4, #0]
    if ((contctrl & 2) == 0) {
    383e:	d1ab      	bne.n	3798 <contcon()+0x1c>
    3840:	e00a      	b.n	3858 <contcon()+0xdc>
      analogWrite(OUT7, 0);
    3842:	2005      	movs	r0, #5
    3844:	f006 fcc8 	bl	a1d8 <analogWrite>
      contstat = contstat & 251;
    3848:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    384a:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 251;
    384c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    3850:	6022      	str	r2, [r4, #0]
    if ((contctrl & 1) == 1) {
    3852:	07da      	lsls	r2, r3, #31
    3854:	d5b4      	bpl.n	37c0 <contcon()+0x44>
    3856:	e7a4      	b.n	37a2 <contcon()+0x26>
      analogWrite(OUT6, 0);
    3858:	2017      	movs	r0, #23
    385a:	f006 fcbd 	bl	a1d8 <analogWrite>
      contstat = contstat & 253;
    385e:	6822      	ldr	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    3860:	6833      	ldr	r3, [r6, #0]
      contstat = contstat & 253;
    3862:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
    if ((contctrl & 4) == 0) {
    3866:	f013 0104 	ands.w	r1, r3, #4
      contstat = contstat & 253;
    386a:	6022      	str	r2, [r4, #0]
    if ((contctrl & 4) == 0) {
    386c:	d197      	bne.n	379e <contcon()+0x22>
    386e:	e7e8      	b.n	3842 <contcon()+0xc6>
    if ((contctrl & 4) == 4) {
    3870:	075b      	lsls	r3, r3, #29
    3872:	d4aa      	bmi.n	37ca <contcon()+0x4e>
    3874:	e7b9      	b.n	37ea <contcon()+0x6e>
          analogWrite(OUT6, settings.conthold);
    3876:	4b39      	ldr	r3, [pc, #228]	; (395c <contcon()+0x1e0>)
    3878:	2017      	movs	r0, #23
    387a:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    387e:	f006 fcab 	bl	a1d8 <analogWrite>
          contstat = contstat | 2;
    3882:	6823      	ldr	r3, [r4, #0]
          conttimer2 = 0;
    3884:	2200      	movs	r2, #0
          contstat = contstat | 2;
    3886:	f043 0302 	orr.w	r3, r3, #2
    388a:	6023      	str	r3, [r4, #0]
          conttimer2 = 0;
    388c:	602a      	str	r2, [r5, #0]
    388e:	e7bb      	b.n	3808 <contcon()+0x8c>
          Serial.println();
    3890:	4833      	ldr	r0, [pc, #204]	; (3960 <contcon()+0x1e4>)
    3892:	f005 ff49 	bl	9728 <Print::println()>
    3896:	210c      	movs	r1, #12
    3898:	4832      	ldr	r0, [pc, #200]	; (3964 <contcon()+0x1e8>)
    389a:	f008 fc8d 	bl	c1b8 <usb_serial_write>
    389e:	4830      	ldr	r0, [pc, #192]	; (3960 <contcon()+0x1e4>)
    38a0:	f005 ff42 	bl	9728 <Print::println()>
          analogWrite(OUT6, 255);
    38a4:	21ff      	movs	r1, #255	; 0xff
    38a6:	2017      	movs	r0, #23
    38a8:	f006 fc96 	bl	a1d8 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    38ac:	4b28      	ldr	r3, [pc, #160]	; (3950 <contcon()+0x1d4>)
          conttimer2 = millis() + pulltime;
    38ae:	492e      	ldr	r1, [pc, #184]	; (3968 <contcon()+0x1ec>)
    38b0:	681a      	ldr	r2, [r3, #0]
    38b2:	9202      	str	r2, [sp, #8]
	return ret;
    38b4:	9a02      	ldr	r2, [sp, #8]
    38b6:	6809      	ldr	r1, [r1, #0]
    38b8:	440a      	add	r2, r1
    38ba:	602a      	str	r2, [r5, #0]
    38bc:	e79f      	b.n	37fe <contcon()+0x82>
          analogWrite(OUT5, settings.conthold);
    38be:	4b27      	ldr	r3, [pc, #156]	; (395c <contcon()+0x1e0>)
    38c0:	2016      	movs	r0, #22
    38c2:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    38c6:	f006 fc87 	bl	a1d8 <analogWrite>
          contstat = contstat | 1;
    38ca:	6823      	ldr	r3, [r4, #0]
          conttimer1 = 0;
    38cc:	2200      	movs	r2, #0
          contstat = contstat | 1;
    38ce:	f043 0301 	orr.w	r3, r3, #1
    38d2:	6023      	str	r3, [r4, #0]
          conttimer1 = 0;
    38d4:	602a      	str	r2, [r5, #0]
    38d6:	e772      	b.n	37be <contcon()+0x42>
          analogWrite(OUT5, 255);
    38d8:	21ff      	movs	r1, #255	; 0xff
    38da:	2016      	movs	r0, #22
    38dc:	f006 fc7c 	bl	a1d8 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    38e0:	4b1b      	ldr	r3, [pc, #108]	; (3950 <contcon()+0x1d4>)
          conttimer1 = millis() + pulltime;
    38e2:	4921      	ldr	r1, [pc, #132]	; (3968 <contcon()+0x1ec>)
    38e4:	681a      	ldr	r2, [r3, #0]
    38e6:	9200      	str	r2, [sp, #0]
	return ret;
    38e8:	9a00      	ldr	r2, [sp, #0]
    38ea:	6809      	ldr	r1, [r1, #0]
    38ec:	440a      	add	r2, r1
    38ee:	602a      	str	r2, [r5, #0]
    38f0:	e760      	b.n	37b4 <contcon()+0x38>
          analogWrite(OUT7, settings.conthold);
    38f2:	4b1a      	ldr	r3, [pc, #104]	; (395c <contcon()+0x1e0>)
    38f4:	2005      	movs	r0, #5
    38f6:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
    38fa:	f006 fc6d 	bl	a1d8 <analogWrite>
          contstat = contstat | 4;
    38fe:	6823      	ldr	r3, [r4, #0]
  if (contctrl == 0) {
    3900:	6835      	ldr	r5, [r6, #0]
          conttimer3 = 0;
    3902:	2200      	movs	r2, #0
          contstat = contstat | 4;
    3904:	f043 0304 	orr.w	r3, r3, #4
    3908:	6023      	str	r3, [r4, #0]
          conttimer3 = 0;
    390a:	603a      	str	r2, [r7, #0]
  if (contctrl == 0) {
    390c:	2d00      	cmp	r5, #0
    390e:	f47f af6c 	bne.w	37ea <contcon()+0x6e>
    3912:	e77f      	b.n	3814 <contcon()+0x98>
          Serial.println();
    3914:	4812      	ldr	r0, [pc, #72]	; (3960 <contcon()+0x1e4>)
    3916:	f005 ff07 	bl	9728 <Print::println()>
    391a:	210c      	movs	r1, #12
    391c:	4813      	ldr	r0, [pc, #76]	; (396c <contcon()+0x1f0>)
    391e:	f008 fc4b 	bl	c1b8 <usb_serial_write>
    3922:	480f      	ldr	r0, [pc, #60]	; (3960 <contcon()+0x1e4>)
    3924:	f005 ff00 	bl	9728 <Print::println()>
          analogWrite(OUT7, 255);
    3928:	21ff      	movs	r1, #255	; 0xff
    392a:	2005      	movs	r0, #5
    392c:	f006 fc54 	bl	a1d8 <analogWrite>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    3930:	4b07      	ldr	r3, [pc, #28]	; (3950 <contcon()+0x1d4>)
          conttimer3 = millis() + pulltime;
    3932:	490d      	ldr	r1, [pc, #52]	; (3968 <contcon()+0x1ec>)
    3934:	681a      	ldr	r2, [r3, #0]
    3936:	9204      	str	r2, [sp, #16]
	return ret;
    3938:	9a04      	ldr	r2, [sp, #16]
    393a:	6809      	ldr	r1, [r1, #0]
    393c:	440a      	add	r2, r1
    393e:	603a      	str	r2, [r7, #0]
    3940:	e74b      	b.n	37da <contcon()+0x5e>
    3942:	bf00      	nop
    3944:	1fffcfb0 	.word	0x1fffcfb0
    3948:	1fffcfb4 	.word	0x1fffcfb4
    394c:	1fffcfb8 	.word	0x1fffcfb8
    3950:	1fffd3c0 	.word	0x1fffd3c0
    3954:	1fffcfc0 	.word	0x1fffcfc0
    3958:	1fffcfbc 	.word	0x1fffcfbc
    395c:	1fffd0d8 	.word	0x1fffd0d8
    3960:	1fff89fc 	.word	0x1fff89fc
    3964:	000143dc 	.word	0x000143dc
    3968:	1fff8868 	.word	0x1fff8868
    396c:	000143ec 	.word	0x000143ec

00003970 <calcur()>:
void calcur() {
    3970:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  adc->adc0->startContinuous(ACUR1);
    3974:	4e54      	ldr	r6, [pc, #336]	; (3ac8 <calcur()+0x158>)
  sensor = 1;
    3976:	f8df a154 	ldr.w	sl, [pc, #340]	; 3acc <calcur()+0x15c>
  adc->adc0->startContinuous(ACUR1);
    397a:	6833      	ldr	r3, [r6, #0]
  x = 0;
    397c:	f8df 9150 	ldr.w	r9, [pc, #336]	; 3ad0 <calcur()+0x160>
  adc->adc0->startContinuous(ACUR1);
    3980:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3984:	4d53      	ldr	r5, [pc, #332]	; (3ad4 <calcur()+0x164>)
    3986:	210f      	movs	r1, #15
    3988:	f005 fb30 	bl	8fec <ADC_Module::startContinuous(unsigned char)>
  sensor = 1;
    398c:	2301      	movs	r3, #1
    398e:	f8ca 3000 	str.w	r3, [sl]
    3992:	4851      	ldr	r0, [pc, #324]	; (3ad8 <calcur()+0x168>)
  x = 0;
    3994:	2300      	movs	r3, #0
    3996:	2122      	movs	r1, #34	; 0x22
    3998:	f8c9 3000 	str.w	r3, [r9]
    399c:	f008 fc0c 	bl	c1b8 <usb_serial_write>
  while (x < 20) {
    39a0:	f8d9 3000 	ldr.w	r3, [r9]
    39a4:	2b13      	cmp	r3, #19
    39a6:	dc21      	bgt.n	39ec <calcur()+0x7c>
    39a8:	4f4c      	ldr	r7, [pc, #304]	; (3adc <calcur()+0x16c>)
    settings.offset1 = settings.offset1 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    39aa:	f640 48e4 	movw	r8, #3300	; 0xce4
    39ae:	6833      	ldr	r3, [r6, #0]
    39b0:	f8b5 b088 	ldrh.w	fp, [r5, #136]	; 0x88
    39b4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    39b8:	6b43      	ldr	r3, [r0, #52]	; 0x34
    39ba:	691c      	ldr	r4, [r3, #16]
    39bc:	f005 f85e 	bl	8a7c <ADC_Module::getMaxValue()>
    39c0:	b2a4      	uxth	r4, r4
    39c2:	2101      	movs	r1, #1
    39c4:	fb08 f404 	mul.w	r4, r8, r4
    39c8:	fbb4 f4f0 	udiv	r4, r4, r0
    39cc:	4638      	mov	r0, r7
    39ce:	44a3      	add	fp, r4
    39d0:	f8a5 b088 	strh.w	fp, [r5, #136]	; 0x88
    39d4:	f008 fbf0 	bl	c1b8 <usb_serial_write>
    delay(100);
    39d8:	2064      	movs	r0, #100	; 0x64
    39da:	f006 fe09 	bl	a5f0 <delay>
    x++;
    39de:	f8d9 3000 	ldr.w	r3, [r9]
    39e2:	3301      	adds	r3, #1
  while (x < 20) {
    39e4:	2b13      	cmp	r3, #19
    x++;
    39e6:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    39ea:	dde0      	ble.n	39ae <calcur()+0x3e>
  settings.offset1 = settings.offset1 / 21;
    39ec:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
    39f0:	493b      	ldr	r1, [pc, #236]	; (3ae0 <calcur()+0x170>)
	size_t print(int n)				{ return print((long)n); }
    39f2:	483c      	ldr	r0, [pc, #240]	; (3ae4 <calcur()+0x174>)
    39f4:	fba1 2103 	umull	r2, r1, r1, r3
    39f8:	1a5b      	subs	r3, r3, r1
    39fa:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    39fe:	f3c1 110f 	ubfx	r1, r1, #4, #16
    3a02:	f8a5 1088 	strh.w	r1, [r5, #136]	; 0x88
    3a06:	f005 fe87 	bl	9718 <Print::print(long)>
    3a0a:	211d      	movs	r1, #29
    3a0c:	4836      	ldr	r0, [pc, #216]	; (3ae8 <calcur()+0x178>)
    3a0e:	f008 fbd3 	bl	c1b8 <usb_serial_write>
    3a12:	2102      	movs	r1, #2
    3a14:	4835      	ldr	r0, [pc, #212]	; (3aec <calcur()+0x17c>)
    3a16:	f008 fbcf 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    3a1a:	4832      	ldr	r0, [pc, #200]	; (3ae4 <calcur()+0x174>)
    3a1c:	f005 fe84 	bl	9728 <Print::println()>
  x = 0;
    3a20:	2300      	movs	r3, #0
    3a22:	f8c9 3000 	str.w	r3, [r9]
  adc->adc0->startContinuous(ACUR2);
    3a26:	6833      	ldr	r3, [r6, #0]
    3a28:	210e      	movs	r1, #14
    3a2a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3a2e:	f005 fadd 	bl	8fec <ADC_Module::startContinuous(unsigned char)>
  sensor = 2;
    3a32:	2302      	movs	r3, #2
    3a34:	4828      	ldr	r0, [pc, #160]	; (3ad8 <calcur()+0x168>)
    3a36:	f8ca 3000 	str.w	r3, [sl]
    3a3a:	2122      	movs	r1, #34	; 0x22
    3a3c:	f008 fbbc 	bl	c1b8 <usb_serial_write>
  while (x < 20) {
    3a40:	f8d9 3000 	ldr.w	r3, [r9]
    3a44:	2b13      	cmp	r3, #19
    3a46:	dc22      	bgt.n	3a8e <calcur()+0x11e>
    3a48:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3adc <calcur()+0x16c>
    settings.offset2 = settings.offset2 + ((uint16_t)adc->adc0->analogReadContinuous() * 3300 / adc->adc0->getMaxValue());
    3a4c:	f640 47e4 	movw	r7, #3300	; 0xce4
    3a50:	6833      	ldr	r3, [r6, #0]
    3a52:	f8b5 a08a 	ldrh.w	sl, [r5, #138]	; 0x8a
    3a56:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    3a5a:	6b43      	ldr	r3, [r0, #52]	; 0x34
    3a5c:	691c      	ldr	r4, [r3, #16]
    3a5e:	f005 f80d 	bl	8a7c <ADC_Module::getMaxValue()>
    3a62:	b2a4      	uxth	r4, r4
    3a64:	2101      	movs	r1, #1
    3a66:	fb07 f404 	mul.w	r4, r7, r4
    3a6a:	fbb4 f4f0 	udiv	r4, r4, r0
    3a6e:	4640      	mov	r0, r8
    3a70:	44a2      	add	sl, r4
    3a72:	f8a5 a08a 	strh.w	sl, [r5, #138]	; 0x8a
    3a76:	f008 fb9f 	bl	c1b8 <usb_serial_write>
    delay(100);
    3a7a:	2064      	movs	r0, #100	; 0x64
    3a7c:	f006 fdb8 	bl	a5f0 <delay>
    x++;
    3a80:	f8d9 3000 	ldr.w	r3, [r9]
    3a84:	3301      	adds	r3, #1
  while (x < 20) {
    3a86:	2b13      	cmp	r3, #19
    x++;
    3a88:	f8c9 3000 	str.w	r3, [r9]
  while (x < 20) {
    3a8c:	dde0      	ble.n	3a50 <calcur()+0xe0>
  settings.offset2 = settings.offset2 / 21;
    3a8e:	f8b5 308a 	ldrh.w	r3, [r5, #138]	; 0x8a
    3a92:	4913      	ldr	r1, [pc, #76]	; (3ae0 <calcur()+0x170>)
	size_t print(int n)				{ return print((long)n); }
    3a94:	4813      	ldr	r0, [pc, #76]	; (3ae4 <calcur()+0x174>)
    3a96:	fba1 2103 	umull	r2, r1, r1, r3
    3a9a:	1a5b      	subs	r3, r3, r1
    3a9c:	eb01 0153 	add.w	r1, r1, r3, lsr #1
    3aa0:	f3c1 110f 	ubfx	r1, r1, #4, #16
    3aa4:	f8a5 108a 	strh.w	r1, [r5, #138]	; 0x8a
    3aa8:	f005 fe36 	bl	9718 <Print::print(long)>
    3aac:	211d      	movs	r1, #29
    3aae:	4810      	ldr	r0, [pc, #64]	; (3af0 <calcur()+0x180>)
    3ab0:	f008 fb82 	bl	c1b8 <usb_serial_write>
    3ab4:	480d      	ldr	r0, [pc, #52]	; (3aec <calcur()+0x17c>)
    3ab6:	2102      	movs	r1, #2
    3ab8:	f008 fb7e 	bl	c1b8 <usb_serial_write>
}
    3abc:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t println(const char s[])			{ return print(s) + println(); }
    3ac0:	4808      	ldr	r0, [pc, #32]	; (3ae4 <calcur()+0x174>)
    3ac2:	f005 be31 	b.w	9728 <Print::println()>
    3ac6:	bf00      	nop
    3ac8:	1fff91dc 	.word	0x1fff91dc
    3acc:	1fff8878 	.word	0x1fff8878
    3ad0:	1fffd1c8 	.word	0x1fffd1c8
    3ad4:	1fffd0d8 	.word	0x1fffd0d8
    3ad8:	000143fc 	.word	0x000143fc
    3adc:	00014420 	.word	0x00014420
    3ae0:	86186187 	.word	0x86186187
    3ae4:	1fff89fc 	.word	0x1fff89fc
    3ae8:	00014424 	.word	0x00014424
    3aec:	00014fa8 	.word	0x00014fa8
    3af0:	00014444 	.word	0x00014444

00003af4 <VEcan()>:
{
    3af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (settings.chargertype == Pylon) {
    3af6:	4d9f      	ldr	r5, [pc, #636]	; (3d74 <VEcan()+0x280>)
    3af8:	f8d5 30b8 	ldr.w	r3, [r5, #184]	; 0xb8
    3afc:	2b07      	cmp	r3, #7
    3afe:	f000 815d 	beq.w	3dbc <VEcan()+0x2c8>
    if (storagemode == 0) {
    3b02:	4b9d      	ldr	r3, [pc, #628]	; (3d78 <VEcan()+0x284>)
    msg.id = 0x351;
    3b04:	4c9d      	ldr	r4, [pc, #628]	; (3d7c <VEcan()+0x288>)
    if (storagemode == 0) {
    3b06:	681b      	ldr	r3, [r3, #0]
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3b08:	6d68      	ldr	r0, [r5, #84]	; 0x54
    msg.id = 0x351;
    3b0a:	f240 3151 	movw	r1, #849	; 0x351
    msg.len = 8;
    3b0e:	2208      	movs	r2, #8
    msg.id = 0x351;
    3b10:	6021      	str	r1, [r4, #0]
    msg.len = 8;
    3b12:	71e2      	strb	r2, [r4, #7]
    if (storagemode == 0) {
    3b14:	2b00      	cmp	r3, #0
    3b16:	f000 8128 	beq.w	3d6a <VEcan()+0x276>
      msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3b1a:	f009 f9d9 	bl	ced0 <__aeabi_i2f>
    3b1e:	6a29      	ldr	r1, [r5, #32]
    3b20:	4606      	mov	r6, r0
    3b22:	f009 fa29 	bl	cf78 <__aeabi_fmul>
    3b26:	4996      	ldr	r1, [pc, #600]	; (3d80 <VEcan()+0x28c>)
    3b28:	f009 fa26 	bl	cf78 <__aeabi_fmul>
    3b2c:	f009 fc10 	bl	d350 <__aeabi_f2uiz>
    3b30:	b2c2      	uxtb	r2, r0
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3b32:	7222      	strb	r2, [r4, #8]
    msg.buf[2] = lowByte(chargecurrent);
    3b34:	4a93      	ldr	r2, [pc, #588]	; (3d84 <VEcan()+0x290>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3b36:	69a9      	ldr	r1, [r5, #24]
      msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3b38:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3b3c:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = lowByte(chargecurrent);
    3b3e:	8813      	ldrh	r3, [r2, #0]
    3b40:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = lowByte(discurrent);
    3b42:	4b91      	ldr	r3, [pc, #580]	; (3d88 <VEcan()+0x294>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3b44:	4630      	mov	r0, r6
    msg.buf[4] = lowByte(discurrent);
    3b46:	881b      	ldrh	r3, [r3, #0]
    3b48:	81a3      	strh	r3, [r4, #12]
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3b4a:	f009 fa15 	bl	cf78 <__aeabi_fmul>
    3b4e:	498c      	ldr	r1, [pc, #560]	; (3d80 <VEcan()+0x28c>)
    3b50:	f009 fa12 	bl	cf78 <__aeabi_fmul>
    3b54:	f009 fbfc 	bl	d350 <__aeabi_f2uiz>
    Can0.write(msg);
    3b58:	4988      	ldr	r1, [pc, #544]	; (3d7c <VEcan()+0x288>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3b5a:	4603      	mov	r3, r0
    Can0.write(msg);
    3b5c:	488b      	ldr	r0, [pc, #556]	; (3d8c <VEcan()+0x298>)
    msg.buf[6] = lowByte(uint16_t((settings.DischVsetpoint * settings.Scells) * 10));
    3b5e:	81e3      	strh	r3, [r4, #14]
    Can0.write(msg);
    3b60:	f004 fd12 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    msg.buf[0] = lowByte(SOC);
    3b64:	4a8a      	ldr	r2, [pc, #552]	; (3d90 <VEcan()+0x29c>)
    Can0.write(msg);
    3b66:	4889      	ldr	r0, [pc, #548]	; (3d8c <VEcan()+0x298>)
    msg.buf[0] = lowByte(SOC);
    3b68:	6813      	ldr	r3, [r2, #0]
    3b6a:	8812      	ldrh	r2, [r2, #0]
    3b6c:	8122      	strh	r2, [r4, #8]
    msg.buf[4] = lowByte(SOC * 10);
    3b6e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    msg.buf[2] = lowByte(SOH);
    3b72:	4a88      	ldr	r2, [pc, #544]	; (3d94 <VEcan()+0x2a0>)
    msg.len = 8;
    3b74:	2608      	movs	r6, #8
    msg.buf[4] = lowByte(SOC * 10);
    3b76:	005b      	lsls	r3, r3, #1
    msg.id = 0x355;
    3b78:	f240 3155 	movw	r1, #853	; 0x355
    msg.buf[2] = lowByte(SOH);
    3b7c:	8812      	ldrh	r2, [r2, #0]
    msg.id = 0x355;
    3b7e:	6021      	str	r1, [r4, #0]
    msg.buf[6] = 0;
    3b80:	2700      	movs	r7, #0
    Can0.write(msg);
    3b82:	497e      	ldr	r1, [pc, #504]	; (3d7c <VEcan()+0x288>)
    msg.buf[4] = lowByte(SOC * 10);
    3b84:	7323      	strb	r3, [r4, #12]
    msg.buf[5] = highByte(SOC * 10);
    3b86:	4133      	asrs	r3, r6
    msg.buf[2] = lowByte(SOH);
    3b88:	8162      	strh	r2, [r4, #10]
    msg.buf[5] = highByte(SOC * 10);
    3b8a:	7363      	strb	r3, [r4, #13]
    msg.len = 8;
    3b8c:	71e6      	strb	r6, [r4, #7]
    msg.buf[6] = 0;
    3b8e:	81e7      	strh	r7, [r4, #14]
    Can0.write(msg);
    3b90:	f004 fcfa 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    msg.id = 0x356;
    3b94:	f240 3356 	movw	r3, #854	; 0x356
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3b98:	487f      	ldr	r0, [pc, #508]	; (3d98 <VEcan()+0x2a4>)
    msg.id = 0x356;
    3b9a:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    3b9c:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3b9e:	f7fd ff0f 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    3ba2:	497e      	ldr	r1, [pc, #504]	; (3d9c <VEcan()+0x2a8>)
    3ba4:	f009 f9e8 	bl	cf78 <__aeabi_fmul>
    3ba8:	f009 fbd2 	bl	d350 <__aeabi_f2uiz>
    3bac:	7220      	strb	r0, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3bae:	487a      	ldr	r0, [pc, #488]	; (3d98 <VEcan()+0x2a4>)
    3bb0:	f7fd ff06 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    3bb4:	4979      	ldr	r1, [pc, #484]	; (3d9c <VEcan()+0x2a8>)
    3bb6:	f009 f9df 	bl	cf78 <__aeabi_fmul>
    3bba:	f009 fbc9 	bl	d350 <__aeabi_f2uiz>
    msg.buf[2] = lowByte(long(currentact / 100));
    3bbe:	4b78      	ldr	r3, [pc, #480]	; (3da0 <VEcan()+0x2ac>)
    3bc0:	4976      	ldr	r1, [pc, #472]	; (3d9c <VEcan()+0x2a8>)
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3bc2:	f3c0 2007 	ubfx	r0, r0, #8, #8
    3bc6:	7260      	strb	r0, [r4, #9]
    msg.buf[2] = lowByte(long(currentact / 100));
    3bc8:	6818      	ldr	r0, [r3, #0]
    3bca:	f009 fa89 	bl	d0e0 <__aeabi_fdiv>
    3bce:	f009 fb99 	bl	d304 <__aeabi_f2iz>
    3bd2:	8160      	strh	r0, [r4, #10]
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3bd4:	4870      	ldr	r0, [pc, #448]	; (3d98 <VEcan()+0x2a4>)
    3bd6:	f7fd ff21 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    3bda:	4969      	ldr	r1, [pc, #420]	; (3d80 <VEcan()+0x28c>)
    3bdc:	f009 f9cc 	bl	cf78 <__aeabi_fmul>
    3be0:	f009 fb90 	bl	d304 <__aeabi_f2iz>
    3be4:	7320      	strb	r0, [r4, #12]
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3be6:	486c      	ldr	r0, [pc, #432]	; (3d98 <VEcan()+0x2a4>)
    3be8:	f7fd ff18 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    3bec:	4964      	ldr	r1, [pc, #400]	; (3d80 <VEcan()+0x28c>)
    3bee:	f009 f9c3 	bl	cf78 <__aeabi_fmul>
    3bf2:	f009 fb87 	bl	d304 <__aeabi_f2iz>
    3bf6:	f340 2007 	sbfx	r0, r0, #8, #8
    Can0.write(msg);
    3bfa:	4960      	ldr	r1, [pc, #384]	; (3d7c <VEcan()+0x288>)
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3bfc:	7360      	strb	r0, [r4, #13]
    Can0.write(msg);
    3bfe:	4863      	ldr	r0, [pc, #396]	; (3d8c <VEcan()+0x298>)
    msg.buf[6] = 0;
    3c00:	81e7      	strh	r7, [r4, #14]
    Can0.write(msg);
    3c02:	f004 fcc1 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3c06:	2002      	movs	r0, #2
    3c08:	f006 fcf2 	bl	a5f0 <delay>
    msg.id = 0x35A;
    3c0c:	f240 335a 	movw	r3, #858	; 0x35a
    3c10:	6023      	str	r3, [r4, #0]
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3c12:	4b64      	ldr	r3, [pc, #400]	; (3da4 <VEcan()+0x2b0>)
    Can0.write(msg);
    3c14:	4959      	ldr	r1, [pc, #356]	; (3d7c <VEcan()+0x288>)
    msg.buf[0] = alarm[0];    //High temp  Low Voltage | High Voltage
    3c16:	681b      	ldr	r3, [r3, #0]
    3c18:	60a3      	str	r3, [r4, #8]
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3c1a:	4b63      	ldr	r3, [pc, #396]	; (3da8 <VEcan()+0x2b4>)
    Can0.write(msg);
    3c1c:	485b      	ldr	r0, [pc, #364]	; (3d8c <VEcan()+0x298>)
    msg.buf[4] = warning[0];  //High temp  Low Voltage | High Voltage
    3c1e:	681b      	ldr	r3, [r3, #0]
    3c20:	60e3      	str	r3, [r4, #12]
    msg.len = 8;
    3c22:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3c24:	f004 fcb0 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    msg.id = 0x35E;
    3c28:	f240 335e 	movw	r3, #862	; 0x35e
    3c2c:	6023      	str	r3, [r4, #0]
    msg.buf[0] = bmsname[0];
    3c2e:	4b5f      	ldr	r3, [pc, #380]	; (3dac <VEcan()+0x2b8>)
    Can0.write(msg);
    3c30:	4952      	ldr	r1, [pc, #328]	; (3d7c <VEcan()+0x288>)
    msg.buf[0] = bmsname[0];
    3c32:	681a      	ldr	r2, [r3, #0]
    Can0.write(msg);
    3c34:	4855      	ldr	r0, [pc, #340]	; (3d8c <VEcan()+0x298>)
    msg.buf[4] = bmsname[4];
    3c36:	685b      	ldr	r3, [r3, #4]
    msg.buf[0] = bmsname[0];
    3c38:	60a2      	str	r2, [r4, #8]
    msg.buf[4] = bmsname[4];
    3c3a:	60e3      	str	r3, [r4, #12]
    msg.len = 8;
    3c3c:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3c3e:	f004 fca3 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3c42:	2002      	movs	r0, #2
    3c44:	f006 fcd4 	bl	a5f0 <delay>
    msg.id = 0x370;
    3c48:	f44f 735c 	mov.w	r3, #880	; 0x370
    3c4c:	6023      	str	r3, [r4, #0]
    msg.buf[0] = bmsmanu[0];
    3c4e:	4b58      	ldr	r3, [pc, #352]	; (3db0 <VEcan()+0x2bc>)
    Can0.write(msg);
    3c50:	494a      	ldr	r1, [pc, #296]	; (3d7c <VEcan()+0x288>)
    msg.buf[0] = bmsmanu[0];
    3c52:	681a      	ldr	r2, [r3, #0]
    Can0.write(msg);
    3c54:	484d      	ldr	r0, [pc, #308]	; (3d8c <VEcan()+0x298>)
    msg.buf[4] = bmsmanu[4];
    3c56:	685b      	ldr	r3, [r3, #4]
    msg.buf[0] = bmsmanu[0];
    3c58:	60a2      	str	r2, [r4, #8]
    msg.buf[4] = bmsmanu[4];
    3c5a:	60e3      	str	r3, [r4, #12]
    msg.len = 8;
    3c5c:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3c5e:	f004 fc93 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3c62:	2002      	movs	r0, #2
    3c64:	f006 fcc4 	bl	a5f0 <delay>
    msg.id = 0x373;
    3c68:	f240 3373 	movw	r3, #883	; 0x373
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    3c6c:	484a      	ldr	r0, [pc, #296]	; (3d98 <VEcan()+0x2a4>)
    msg.id = 0x373;
    3c6e:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    3c70:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getLowCellVolt() * 1000));
    3c72:	f7fd fe5b 	bl	192c <BMSModuleManager::getLowCellVolt()>
    3c76:	494f      	ldr	r1, [pc, #316]	; (3db4 <VEcan()+0x2c0>)
    3c78:	f009 f97e 	bl	cf78 <__aeabi_fmul>
    3c7c:	f009 fb68 	bl	d350 <__aeabi_f2uiz>
    3c80:	7220      	strb	r0, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getLowCellVolt() * 1000));
    3c82:	4845      	ldr	r0, [pc, #276]	; (3d98 <VEcan()+0x2a4>)
    3c84:	f7fd fe52 	bl	192c <BMSModuleManager::getLowCellVolt()>
    3c88:	494a      	ldr	r1, [pc, #296]	; (3db4 <VEcan()+0x2c0>)
    3c8a:	f009 f975 	bl	cf78 <__aeabi_fmul>
    3c8e:	f009 fb5f 	bl	d350 <__aeabi_f2uiz>
    3c92:	f3c0 2007 	ubfx	r0, r0, #8, #8
    3c96:	7260      	strb	r0, [r4, #9]
    msg.buf[2] = lowByte(uint16_t(bms.getHighCellVolt() * 1000));
    3c98:	483f      	ldr	r0, [pc, #252]	; (3d98 <VEcan()+0x2a4>)
    3c9a:	f7fd fe6d 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    3c9e:	4945      	ldr	r1, [pc, #276]	; (3db4 <VEcan()+0x2c0>)
    3ca0:	f009 f96a 	bl	cf78 <__aeabi_fmul>
    3ca4:	f009 fb54 	bl	d350 <__aeabi_f2uiz>
    3ca8:	72a0      	strb	r0, [r4, #10]
    msg.buf[3] = highByte(uint16_t(bms.getHighCellVolt() * 1000));
    3caa:	483b      	ldr	r0, [pc, #236]	; (3d98 <VEcan()+0x2a4>)
    3cac:	f7fd fe64 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    3cb0:	4940      	ldr	r1, [pc, #256]	; (3db4 <VEcan()+0x2c0>)
    3cb2:	f009 f961 	bl	cf78 <__aeabi_fmul>
    3cb6:	f009 fb4b 	bl	d350 <__aeabi_f2uiz>
    3cba:	f3c0 2007 	ubfx	r0, r0, #8, #8
    3cbe:	72e0      	strb	r0, [r4, #11]
    msg.buf[4] = lowByte(uint16_t(bms.getLowTemperature() + 273.15));
    3cc0:	4835      	ldr	r0, [pc, #212]	; (3d98 <VEcan()+0x2a4>)
    3cc2:	f7fd ff0b 	bl	1adc <BMSModuleManager::getLowTemperature()>
    3cc6:	493c      	ldr	r1, [pc, #240]	; (3db8 <VEcan()+0x2c4>)
    3cc8:	f009 f84e 	bl	cd68 <__addsf3>
    3ccc:	f009 fb40 	bl	d350 <__aeabi_f2uiz>
    3cd0:	7320      	strb	r0, [r4, #12]
    msg.buf[5] = highByte(uint16_t(bms.getLowTemperature() + 273.15));
    3cd2:	4831      	ldr	r0, [pc, #196]	; (3d98 <VEcan()+0x2a4>)
    3cd4:	f7fd ff02 	bl	1adc <BMSModuleManager::getLowTemperature()>
    3cd8:	4937      	ldr	r1, [pc, #220]	; (3db8 <VEcan()+0x2c4>)
    3cda:	f009 f845 	bl	cd68 <__addsf3>
    3cde:	f009 fb37 	bl	d350 <__aeabi_f2uiz>
    3ce2:	f3c0 2007 	ubfx	r0, r0, #8, #8
    3ce6:	7360      	strb	r0, [r4, #13]
    msg.buf[6] = lowByte(uint16_t(bms.getHighTemperature() + 273.15));
    3ce8:	482b      	ldr	r0, [pc, #172]	; (3d98 <VEcan()+0x2a4>)
    3cea:	f7fd fef5 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    3cee:	4932      	ldr	r1, [pc, #200]	; (3db8 <VEcan()+0x2c4>)
    3cf0:	f009 f83a 	bl	cd68 <__addsf3>
    3cf4:	f009 fb2c 	bl	d350 <__aeabi_f2uiz>
    3cf8:	73a0      	strb	r0, [r4, #14]
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    3cfa:	4827      	ldr	r0, [pc, #156]	; (3d98 <VEcan()+0x2a4>)
    3cfc:	f7fd feec 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    3d00:	492d      	ldr	r1, [pc, #180]	; (3db8 <VEcan()+0x2c4>)
    3d02:	f009 f831 	bl	cd68 <__addsf3>
    3d06:	f009 fb23 	bl	d350 <__aeabi_f2uiz>
    3d0a:	f3c0 2007 	ubfx	r0, r0, #8, #8
    Can0.write(msg);
    3d0e:	491b      	ldr	r1, [pc, #108]	; (3d7c <VEcan()+0x288>)
    msg.buf[7] = highByte(uint16_t(bms.getHighTemperature() + 273.15));
    3d10:	73e0      	strb	r0, [r4, #15]
    Can0.write(msg);
    3d12:	481e      	ldr	r0, [pc, #120]	; (3d8c <VEcan()+0x298>)
    3d14:	f004 fc38 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3d18:	2002      	movs	r0, #2
    3d1a:	f006 fc69 	bl	a5f0 <delay>
    msg.id = 0x379;  //Installed capacity
    3d1e:	f240 3379 	movw	r3, #889	; 0x379
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    3d22:	6dea      	ldr	r2, [r5, #92]	; 0x5c
    msg.id = 0x379;  //Installed capacity
    3d24:	6023      	str	r3, [r4, #0]
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    3d26:	6dab      	ldr	r3, [r5, #88]	; 0x58
    3d28:	fb13 f302 	smulbb	r3, r3, r2
    msg.len = 2;
    3d2c:	2002      	movs	r0, #2
    msg.buf[0] = lowByte(uint16_t(settings.Pstrings * settings.CAP));
    3d2e:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    3d30:	f3c3 2307 	ubfx	r3, r3, #8, #8
    msg.len = 2;
    3d34:	71e0      	strb	r0, [r4, #7]
    msg.buf[1] = highByte(uint16_t(settings.Pstrings * settings.CAP));
    3d36:	7263      	strb	r3, [r4, #9]
    delay(2);
    3d38:	f006 fc5a 	bl	a5f0 <delay>
    msg.id = 0x372;
    3d3c:	f240 3372 	movw	r3, #882	; 0x372
    msg.buf[0] = lowByte(bms.getNumModules());
    3d40:	4815      	ldr	r0, [pc, #84]	; (3d98 <VEcan()+0x2a4>)
    msg.id = 0x372;
    3d42:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    3d44:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(bms.getNumModules());
    3d46:	f7fd fe3d 	bl	19c4 <BMSModuleManager::getNumModules()>
    3d4a:	4603      	mov	r3, r0
    msg.buf[1] = highByte(bms.getNumModules());
    3d4c:	4812      	ldr	r0, [pc, #72]	; (3d98 <VEcan()+0x2a4>)
    msg.buf[0] = lowByte(bms.getNumModules());
    3d4e:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(bms.getNumModules());
    3d50:	f7fd fe38 	bl	19c4 <BMSModuleManager::getNumModules()>
    3d54:	fa40 f306 	asr.w	r3, r0, r6
    3d58:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = 0x00;
    3d5a:	8167      	strh	r7, [r4, #10]
    msg.buf[4] = 0x00;
    3d5c:	60e7      	str	r7, [r4, #12]
    Can0.write(msg);
    3d5e:	4907      	ldr	r1, [pc, #28]	; (3d7c <VEcan()+0x288>)
    3d60:	480a      	ldr	r0, [pc, #40]	; (3d8c <VEcan()+0x298>)
}
    3d62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Can0.write(msg);
    3d66:	f004 bc0f 	b.w	8588 <FlexCAN::write(CAN_message_t const&)>
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3d6a:	f009 f8b1 	bl	ced0 <__aeabi_i2f>
    3d6e:	6969      	ldr	r1, [r5, #20]
    3d70:	e6d6      	b.n	3b20 <VEcan()+0x2c>
    3d72:	bf00      	nop
    3d74:	1fffd0d8 	.word	0x1fffd0d8
    3d78:	1fffd1b0 	.word	0x1fffd1b0
    3d7c:	1fffd034 	.word	0x1fffd034
    3d80:	41200000 	.word	0x41200000
    3d84:	1fffcf40 	.word	0x1fffcf40
    3d88:	1fffcfcc 	.word	0x1fffcfcc
    3d8c:	1fffd1cc 	.word	0x1fffd1cc
    3d90:	1fff8828 	.word	0x1fff8828
    3d94:	1fff882c 	.word	0x1fff882c
    3d98:	1fff91f0 	.word	0x1fff91f0
    3d9c:	42c80000 	.word	0x42c80000
    3da0:	1fffcfc4 	.word	0x1fffcfc4
    3da4:	1fff91e0 	.word	0x1fff91e0
    3da8:	1fffd1c4 	.word	0x1fffd1c4
    3dac:	1fff8838 	.word	0x1fff8838
    3db0:	1fff8830 	.word	0x1fff8830
    3db4:	447a0000 	.word	0x447a0000
    3db8:	43889333 	.word	0x43889333
    msg.id = 0x359;
    3dbc:	4c55      	ldr	r4, [pc, #340]	; (3f14 <VEcan()+0x420>)
    msg.buf[4] = 0x01;  //number of modules fixed for now
    3dbe:	4b56      	ldr	r3, [pc, #344]	; (3f18 <VEcan()+0x424>)
    3dc0:	60e3      	str	r3, [r4, #12]
    msg.id = 0x359;
    3dc2:	f240 3259 	movw	r2, #857	; 0x359
    msg.buf[0] = 0x00;  //protection to be translated later date
    3dc6:	2300      	movs	r3, #0
    msg.len = 8;
    3dc8:	2608      	movs	r6, #8
    Can0.write(msg);
    3dca:	4621      	mov	r1, r4
    3dcc:	4853      	ldr	r0, [pc, #332]	; (3f1c <VEcan()+0x428>)
    msg.id = 0x359;
    3dce:	6022      	str	r2, [r4, #0]
    msg.buf[0] = 0x00;  //protection to be translated later date
    3dd0:	60a3      	str	r3, [r4, #8]
    msg.len = 8;
    3dd2:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3dd4:	f004 fbd8 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3dd8:	2002      	movs	r0, #2
    3dda:	f006 fc09 	bl	a5f0 <delay>
    if (storagemode == 0) {
    3dde:	4b50      	ldr	r3, [pc, #320]	; (3f20 <VEcan()+0x42c>)
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3de0:	6d68      	ldr	r0, [r5, #84]	; 0x54
    if (storagemode == 0) {
    3de2:	681b      	ldr	r3, [r3, #0]
    msg.len = 8;
    3de4:	71e6      	strb	r6, [r4, #7]
    msg.id = 0x351;
    3de6:	f240 3251 	movw	r2, #849	; 0x351
    3dea:	6022      	str	r2, [r4, #0]
    if (storagemode == 0) {
    3dec:	2b00      	cmp	r3, #0
    3dee:	f000 808d 	beq.w	3f0c <VEcan()+0x418>
      msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3df2:	f009 f86d 	bl	ced0 <__aeabi_i2f>
    3df6:	6a29      	ldr	r1, [r5, #32]
    3df8:	f009 f8be 	bl	cf78 <__aeabi_fmul>
    3dfc:	4949      	ldr	r1, [pc, #292]	; (3f24 <VEcan()+0x430>)
    3dfe:	f009 f8bb 	bl	cf78 <__aeabi_fmul>
    3e02:	f009 faa5 	bl	d350 <__aeabi_f2uiz>
    msg.buf[2] = lowByte(chargecurrent);
    3e06:	4a48      	ldr	r2, [pc, #288]	; (3f28 <VEcan()+0x434>)
    msg.buf[4] = lowByte(discurrent);
    3e08:	4b48      	ldr	r3, [pc, #288]	; (3f2c <VEcan()+0x438>)
    msg.buf[2] = lowByte(chargecurrent);
    3e0a:	8812      	ldrh	r2, [r2, #0]
    msg.buf[4] = lowByte(discurrent);
    3e0c:	881b      	ldrh	r3, [r3, #0]
    msg.buf[2] = lowByte(chargecurrent);
    3e0e:	8162      	strh	r2, [r4, #10]
      msg.buf[0] = lowByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3e10:	b2c1      	uxtb	r1, r0
      msg.buf[1] = highByte(uint16_t((settings.StoreVsetpoint * settings.Scells) * 10));
    3e12:	f3c0 2007 	ubfx	r0, r0, #8, #8
    msg.buf[6] = 0x00;
    3e16:	2500      	movs	r5, #0
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3e18:	7221      	strb	r1, [r4, #8]
      msg.buf[1] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3e1a:	7260      	strb	r0, [r4, #9]
    Can0.write(msg);
    3e1c:	493d      	ldr	r1, [pc, #244]	; (3f14 <VEcan()+0x420>)
    3e1e:	483f      	ldr	r0, [pc, #252]	; (3f1c <VEcan()+0x428>)
    msg.buf[4] = lowByte(discurrent);
    3e20:	81a3      	strh	r3, [r4, #12]
    msg.buf[6] = 0x00;
    3e22:	81e5      	strh	r5, [r4, #14]
    Can0.write(msg);
    3e24:	f004 fbb0 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3e28:	2002      	movs	r0, #2
    3e2a:	f006 fbe1 	bl	a5f0 <delay>
    msg.buf[2] = lowByte(SOH);   //static for now
    3e2e:	4b40      	ldr	r3, [pc, #256]	; (3f30 <VEcan()+0x43c>)
    msg.buf[0] = lowByte(SOC);
    3e30:	4a40      	ldr	r2, [pc, #256]	; (3f34 <VEcan()+0x440>)
    msg.buf[2] = lowByte(SOH);   //static for now
    3e32:	881b      	ldrh	r3, [r3, #0]
    msg.buf[0] = lowByte(SOC);
    3e34:	8812      	ldrh	r2, [r2, #0]
    Can0.write(msg);
    3e36:	4937      	ldr	r1, [pc, #220]	; (3f14 <VEcan()+0x420>)
    msg.buf[2] = lowByte(SOH);   //static for now
    3e38:	8163      	strh	r3, [r4, #10]
    msg.len = 8;
    3e3a:	2608      	movs	r6, #8
    msg.id = 0x355;
    3e3c:	f240 3355 	movw	r3, #853	; 0x355
    Can0.write(msg);
    3e40:	4836      	ldr	r0, [pc, #216]	; (3f1c <VEcan()+0x428>)
    msg.buf[0] = lowByte(SOC);
    3e42:	8122      	strh	r2, [r4, #8]
    msg.id = 0x355;
    3e44:	6023      	str	r3, [r4, #0]
    msg.buf[4] = 0x00;
    3e46:	60e5      	str	r5, [r4, #12]
    msg.len = 8;
    3e48:	71e6      	strb	r6, [r4, #7]
    Can0.write(msg);
    3e4a:	f004 fb9d 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3e4e:	2002      	movs	r0, #2
    3e50:	f006 fbce 	bl	a5f0 <delay>
    msg.id = 0x356;
    3e54:	f240 3356 	movw	r3, #854	; 0x356
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3e58:	4837      	ldr	r0, [pc, #220]	; (3f38 <VEcan()+0x444>)
    msg.id = 0x356;
    3e5a:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    3e5c:	71e6      	strb	r6, [r4, #7]
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3e5e:	f7fd fdaf 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    3e62:	4936      	ldr	r1, [pc, #216]	; (3f3c <VEcan()+0x448>)
    3e64:	f009 f888 	bl	cf78 <__aeabi_fmul>
    3e68:	f009 fa72 	bl	d350 <__aeabi_f2uiz>
    3e6c:	4603      	mov	r3, r0
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3e6e:	4832      	ldr	r0, [pc, #200]	; (3f38 <VEcan()+0x444>)
    msg.buf[0] = lowByte(uint16_t(bms.getPackVoltage() * 100));
    3e70:	7223      	strb	r3, [r4, #8]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3e72:	f7fd fda5 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    3e76:	4931      	ldr	r1, [pc, #196]	; (3f3c <VEcan()+0x448>)
    3e78:	f009 f87e 	bl	cf78 <__aeabi_fmul>
    3e7c:	f009 fa68 	bl	d350 <__aeabi_f2uiz>
    msg.buf[2] = lowByte(long(currentact / 100));
    3e80:	4a2f      	ldr	r2, [pc, #188]	; (3f40 <VEcan()+0x44c>)
    3e82:	492e      	ldr	r1, [pc, #184]	; (3f3c <VEcan()+0x448>)
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3e84:	4603      	mov	r3, r0
    3e86:	f3c3 2307 	ubfx	r3, r3, #8, #8
    msg.buf[2] = lowByte(long(currentact / 100));
    3e8a:	6810      	ldr	r0, [r2, #0]
    msg.buf[1] = highByte(uint16_t(bms.getPackVoltage() * 100));
    3e8c:	7263      	strb	r3, [r4, #9]
    msg.buf[2] = lowByte(long(currentact / 100));
    3e8e:	f009 f927 	bl	d0e0 <__aeabi_fdiv>
    3e92:	f009 fa37 	bl	d304 <__aeabi_f2iz>
    3e96:	4603      	mov	r3, r0
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3e98:	4827      	ldr	r0, [pc, #156]	; (3f38 <VEcan()+0x444>)
    msg.buf[2] = lowByte(long(currentact / 100));
    3e9a:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3e9c:	f7fd fdbe 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    3ea0:	4920      	ldr	r1, [pc, #128]	; (3f24 <VEcan()+0x430>)
    3ea2:	f009 f869 	bl	cf78 <__aeabi_fmul>
    3ea6:	f009 fa2d 	bl	d304 <__aeabi_f2iz>
    3eaa:	4603      	mov	r3, r0
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3eac:	4822      	ldr	r0, [pc, #136]	; (3f38 <VEcan()+0x444>)
    msg.buf[4] = lowByte(int16_t(bms.getAvgTemperature() * 10));
    3eae:	7323      	strb	r3, [r4, #12]
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3eb0:	f7fd fdb4 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    3eb4:	491b      	ldr	r1, [pc, #108]	; (3f24 <VEcan()+0x430>)
    3eb6:	f009 f85f 	bl	cf78 <__aeabi_fmul>
    3eba:	f009 fa23 	bl	d304 <__aeabi_f2iz>
    Can0.write(msg);
    3ebe:	4915      	ldr	r1, [pc, #84]	; (3f14 <VEcan()+0x420>)
    msg.buf[6] = 0;
    3ec0:	81e5      	strh	r5, [r4, #14]
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3ec2:	f340 2307 	sbfx	r3, r0, #8, #8
    Can0.write(msg);
    3ec6:	4815      	ldr	r0, [pc, #84]	; (3f1c <VEcan()+0x428>)
    msg.buf[5] = highByte(int16_t(bms.getAvgTemperature() * 10));
    3ec8:	7363      	strb	r3, [r4, #13]
    Can0.write(msg);
    3eca:	f004 fb5d 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3ece:	2002      	movs	r0, #2
    3ed0:	f006 fb8e 	bl	a5f0 <delay>
    msg.id = 0x35C;
    3ed4:	f44f 7357 	mov.w	r3, #860	; 0x35c
    msg.len = 2;
    3ed8:	2502      	movs	r5, #2
    Can0.write(msg);
    3eda:	490e      	ldr	r1, [pc, #56]	; (3f14 <VEcan()+0x420>)
    msg.id = 0x35C;
    3edc:	6023      	str	r3, [r4, #0]
    Can0.write(msg);
    3ede:	480f      	ldr	r0, [pc, #60]	; (3f1c <VEcan()+0x428>)
    msg.len = 2;
    3ee0:	71e5      	strb	r5, [r4, #7]
    msg.buf[0] = 0xC0;  //fixed charge and discharge enable for verifcation
    3ee2:	23c0      	movs	r3, #192	; 0xc0
    3ee4:	8123      	strh	r3, [r4, #8]
    Can0.write(msg);
    3ee6:	f004 fb4f 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    3eea:	4628      	mov	r0, r5
    3eec:	f006 fb80 	bl	a5f0 <delay>
    msg.buf[1] = "P";  //No idea how the naming works
    3ef0:	4b14      	ldr	r3, [pc, #80]	; (3f44 <VEcan()+0x450>)
    msg.buf[0] = "T";  //No idea how the naming works
    3ef2:	4a15      	ldr	r2, [pc, #84]	; (3f48 <VEcan()+0x454>)
    msg.len = 2;
    3ef4:	71e5      	strb	r5, [r4, #7]
    msg.id = 0x35E;
    3ef6:	f240 315e 	movw	r1, #862	; 0x35e
    3efa:	6021      	str	r1, [r4, #0]
    msg.buf[0] = "T";  //No idea how the naming works
    3efc:	7222      	strb	r2, [r4, #8]
    msg.buf[1] = "P";  //No idea how the naming works
    3efe:	7263      	strb	r3, [r4, #9]
    Can0.write(msg);
    3f00:	4904      	ldr	r1, [pc, #16]	; (3f14 <VEcan()+0x420>)
    3f02:	4806      	ldr	r0, [pc, #24]	; (3f1c <VEcan()+0x428>)
}
    3f04:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Can0.write(msg);
    3f08:	f004 bb3e 	b.w	8588 <FlexCAN::write(CAN_message_t const&)>
      msg.buf[0] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    3f0c:	f008 ffe0 	bl	ced0 <__aeabi_i2f>
    3f10:	6969      	ldr	r1, [r5, #20]
    3f12:	e771      	b.n	3df8 <VEcan()+0x304>
    3f14:	1fffd034 	.word	0x1fffd034
    3f18:	004e5001 	.word	0x004e5001
    3f1c:	1fffd1cc 	.word	0x1fffd1cc
    3f20:	1fffd1b0 	.word	0x1fffd1b0
    3f24:	41200000 	.word	0x41200000
    3f28:	1fffcf40 	.word	0x1fffcf40
    3f2c:	1fffcfcc 	.word	0x1fffcfcc
    3f30:	1fff882c 	.word	0x1fff882c
    3f34:	1fff8828 	.word	0x1fff8828
    3f38:	1fff91f0 	.word	0x1fff91f0
    3f3c:	42c80000 	.word	0x42c80000
    3f40:	1fffcfc4 	.word	0x1fffcfc4
    3f44:	00014464 	.word	0x00014464
    3f48:	00014154 	.word	0x00014154

00003f4c <menu()>:
void menu() {
    3f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (menuload == 4) {
    3f50:	4ca6      	ldr	r4, [pc, #664]	; (41ec <menu()+0x2a0>)
  incomingByte = Serial.read();  // read the incoming byte:
    3f52:	4da7      	ldr	r5, [pc, #668]	; (41f0 <menu()+0x2a4>)
void menu() {
    3f54:	b082      	sub	sp, #8
        virtual int read() { return usb_serial_getchar(); }
    3f56:	f008 f8c1 	bl	c0dc <usb_serial_getchar>
  if (menuload == 4) {
    3f5a:	6823      	ldr	r3, [r4, #0]
  incomingByte = Serial.read();  // read the incoming byte:
    3f5c:	6028      	str	r0, [r5, #0]
  if (menuload == 4) {
    3f5e:	2b04      	cmp	r3, #4
    3f60:	d05d      	beq.n	401e <menu()+0xd2>
  if (menuload == 2) {
    3f62:	2b02      	cmp	r3, #2
    3f64:	f040 8166 	bne.w	4234 <menu()+0x2e8>
    switch (incomingByte) {
    3f68:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
    3f6c:	2a42      	cmp	r2, #66	; 0x42
    3f6e:	d84a      	bhi.n	4006 <menu()+0xba>
    3f70:	e8df f012 	tbh	[pc, r2, lsl #1]
    3f74:	051a049e 	.word	0x051a049e
    3f78:	05270550 	.word	0x05270550
    3f7c:	056a0541 	.word	0x056a0541
    3f80:	055d0577 	.word	0x055d0577
    3f84:	00490049 	.word	0x00490049
    3f88:	00490049 	.word	0x00490049
    3f8c:	00490049 	.word	0x00490049
    3f90:	00490049 	.word	0x00490049
    3f94:	00490049 	.word	0x00490049
    3f98:	00490049 	.word	0x00490049
    3f9c:	00490049 	.word	0x00490049
    3fa0:	00490049 	.word	0x00490049
    3fa4:	00490049 	.word	0x00490049
    3fa8:	00490049 	.word	0x00490049
    3fac:	00490049 	.word	0x00490049
    3fb0:	00490049 	.word	0x00490049
    3fb4:	00490049 	.word	0x00490049
    3fb8:	00490049 	.word	0x00490049
    3fbc:	00490049 	.word	0x00490049
    3fc0:	00490049 	.word	0x00490049
    3fc4:	00490049 	.word	0x00490049
    3fc8:	00490049 	.word	0x00490049
    3fcc:	00490049 	.word	0x00490049
    3fd0:	00490049 	.word	0x00490049
    3fd4:	00490049 	.word	0x00490049
    3fd8:	0049015c 	.word	0x0049015c
    3fdc:	00490049 	.word	0x00490049
    3fe0:	00490049 	.word	0x00490049
    3fe4:	00490049 	.word	0x00490049
    3fe8:	00490049 	.word	0x00490049
    3fec:	00490049 	.word	0x00490049
    3ff0:	00490049 	.word	0x00490049
    3ff4:	00490045 	.word	0x00490045
    3ff8:	0585      	.short	0x0585
    switch (incomingByte) {
    3ffa:	2871      	cmp	r0, #113	; 0x71
    3ffc:	d103      	bne.n	4006 <menu()+0xba>
          menuload = 1;
    3ffe:	2300      	movs	r3, #0
          incomingByte = 'i';
    4000:	2073      	movs	r0, #115	; 0x73
          menuload = 1;
    4002:	6023      	str	r3, [r4, #0]
          incomingByte = 'i';
    4004:	6028      	str	r0, [r5, #0]
  if (incomingByte == 115 & menuload == 0) {
    4006:	2b00      	cmp	r3, #0
    4008:	bf08      	it	eq
    400a:	2873      	cmpeq	r0, #115	; 0x73
    400c:	bf0c      	ite	eq
    400e:	2301      	moveq	r3, #1
    4010:	2300      	movne	r3, #0
    4012:	2b00      	cmp	r3, #0
    4014:	f040 808c 	bne.w	4130 <menu()+0x1e4>
}
    4018:	b002      	add	sp, #8
    401a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    switch (incomingByte) {
    401e:	f1a0 0231 	sub.w	r2, r0, #49	; 0x31
    4022:	2a40      	cmp	r2, #64	; 0x40
    4024:	d8ef      	bhi.n	4006 <menu()+0xba>
    4026:	a101      	add	r1, pc, #4	; (adr r1, 402c <menu()+0xe0>)
    4028:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    402c:	000048ad 	.word	0x000048ad
    4030:	0000479f 	.word	0x0000479f
    4034:	00004829 	.word	0x00004829
    4038:	00004845 	.word	0x00004845
    403c:	00004849 	.word	0x00004849
    4040:	00004863 	.word	0x00004863
    4044:	00004883 	.word	0x00004883
    4048:	00004887 	.word	0x00004887
    404c:	0000488b 	.word	0x0000488b
    4050:	00004007 	.word	0x00004007
    4054:	00004007 	.word	0x00004007
    4058:	00004007 	.word	0x00004007
    405c:	00004007 	.word	0x00004007
    4060:	00004007 	.word	0x00004007
    4064:	00004007 	.word	0x00004007
    4068:	00004007 	.word	0x00004007
    406c:	00004007 	.word	0x00004007
    4070:	00004007 	.word	0x00004007
    4074:	00004007 	.word	0x00004007
    4078:	00004007 	.word	0x00004007
    407c:	00004007 	.word	0x00004007
    4080:	00004007 	.word	0x00004007
    4084:	00004007 	.word	0x00004007
    4088:	00004007 	.word	0x00004007
    408c:	00004007 	.word	0x00004007
    4090:	00004007 	.word	0x00004007
    4094:	00004007 	.word	0x00004007
    4098:	00004007 	.word	0x00004007
    409c:	00004007 	.word	0x00004007
    40a0:	00004007 	.word	0x00004007
    40a4:	00004007 	.word	0x00004007
    40a8:	00004007 	.word	0x00004007
    40ac:	00004007 	.word	0x00004007
    40b0:	00004007 	.word	0x00004007
    40b4:	00004007 	.word	0x00004007
    40b8:	00004007 	.word	0x00004007
    40bc:	00004007 	.word	0x00004007
    40c0:	00004007 	.word	0x00004007
    40c4:	00004007 	.word	0x00004007
    40c8:	00004007 	.word	0x00004007
    40cc:	00004007 	.word	0x00004007
    40d0:	00004007 	.word	0x00004007
    40d4:	00004007 	.word	0x00004007
    40d8:	00004007 	.word	0x00004007
    40dc:	00004007 	.word	0x00004007
    40e0:	00004007 	.word	0x00004007
    40e4:	00004007 	.word	0x00004007
    40e8:	00004007 	.word	0x00004007
    40ec:	00004007 	.word	0x00004007
    40f0:	00004605 	.word	0x00004605
    40f4:	00004007 	.word	0x00004007
    40f8:	00004007 	.word	0x00004007
    40fc:	00004007 	.word	0x00004007
    4100:	00004007 	.word	0x00004007
    4104:	00004007 	.word	0x00004007
    4108:	00004007 	.word	0x00004007
    410c:	00004007 	.word	0x00004007
    4110:	00004007 	.word	0x00004007
    4114:	00004007 	.word	0x00004007
    4118:	00004007 	.word	0x00004007
    411c:	00004007 	.word	0x00004007
    4120:	00004007 	.word	0x00004007
    4124:	00004007 	.word	0x00004007
    4128:	00004007 	.word	0x00004007
    412c:	00003fff 	.word	0x00003fff
    4130:	4e30      	ldr	r6, [pc, #192]	; (41f4 <menu()+0x2a8>)
    SERIALCONSOLE.println();
    4132:	4831      	ldr	r0, [pc, #196]	; (41f8 <menu()+0x2ac>)
    4134:	f005 faf8 	bl	9728 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4138:	2104      	movs	r1, #4
    413a:	4830      	ldr	r0, [pc, #192]	; (41fc <menu()+0x2b0>)
    413c:	f008 f83c 	bl	c1b8 <usb_serial_write>
    4140:	482d      	ldr	r0, [pc, #180]	; (41f8 <menu()+0x2ac>)
    4142:	f005 faf1 	bl	9728 <Print::println()>
    4146:	2110      	movs	r1, #16
    4148:	482d      	ldr	r0, [pc, #180]	; (4200 <menu()+0x2b4>)
    414a:	f008 f835 	bl	c1b8 <usb_serial_write>
    414e:	482a      	ldr	r0, [pc, #168]	; (41f8 <menu()+0x2ac>)
    4150:	f005 faea 	bl	9728 <Print::println()>
    4154:	2113      	movs	r1, #19
    4156:	482b      	ldr	r0, [pc, #172]	; (4204 <menu()+0x2b8>)
    4158:	f008 f82e 	bl	c1b8 <usb_serial_write>
    SERIALCONSOLE.println(firmver);
    415c:	4b2a      	ldr	r3, [pc, #168]	; (4208 <menu()+0x2bc>)
	size_t print(int n)				{ return print((long)n); }
    415e:	4826      	ldr	r0, [pc, #152]	; (41f8 <menu()+0x2ac>)
    4160:	6819      	ldr	r1, [r3, #0]
    4162:	f005 fad9 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4166:	4824      	ldr	r0, [pc, #144]	; (41f8 <menu()+0x2ac>)
    4168:	f005 fade 	bl	9728 <Print::println()>
    416c:	2114      	movs	r1, #20
    416e:	4827      	ldr	r0, [pc, #156]	; (420c <menu()+0x2c0>)
    4170:	f008 f822 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4174:	4820      	ldr	r0, [pc, #128]	; (41f8 <menu()+0x2ac>)
    4176:	f005 fad7 	bl	9728 <Print::println()>
    417a:	211e      	movs	r1, #30
    417c:	4824      	ldr	r0, [pc, #144]	; (4210 <menu()+0x2c4>)
    417e:	f008 f81b 	bl	c1b8 <usb_serial_write>
    4182:	481d      	ldr	r0, [pc, #116]	; (41f8 <menu()+0x2ac>)
    4184:	f005 fad0 	bl	9728 <Print::println()>
    4188:	2115      	movs	r1, #21
    418a:	4822      	ldr	r0, [pc, #136]	; (4214 <menu()+0x2c8>)
    418c:	f008 f814 	bl	c1b8 <usb_serial_write>
    4190:	4819      	ldr	r0, [pc, #100]	; (41f8 <menu()+0x2ac>)
    4192:	f005 fac9 	bl	9728 <Print::println()>
    4196:	211e      	movs	r1, #30
    4198:	481f      	ldr	r0, [pc, #124]	; (4218 <menu()+0x2cc>)
    419a:	f008 f80d 	bl	c1b8 <usb_serial_write>
    419e:	4816      	ldr	r0, [pc, #88]	; (41f8 <menu()+0x2ac>)
    41a0:	f005 fac2 	bl	9728 <Print::println()>
    41a4:	2120      	movs	r1, #32
    41a6:	481d      	ldr	r0, [pc, #116]	; (421c <menu()+0x2d0>)
    41a8:	f008 f806 	bl	c1b8 <usb_serial_write>
    41ac:	4812      	ldr	r0, [pc, #72]	; (41f8 <menu()+0x2ac>)
    41ae:	f005 fabb 	bl	9728 <Print::println()>
    41b2:	2119      	movs	r1, #25
    41b4:	481a      	ldr	r0, [pc, #104]	; (4220 <menu()+0x2d4>)
    41b6:	f007 ffff 	bl	c1b8 <usb_serial_write>
    41ba:	480f      	ldr	r0, [pc, #60]	; (41f8 <menu()+0x2ac>)
    41bc:	f005 fab4 	bl	9728 <Print::println()>
    41c0:	2112      	movs	r1, #18
    41c2:	4818      	ldr	r0, [pc, #96]	; (4224 <menu()+0x2d8>)
    41c4:	f007 fff8 	bl	c1b8 <usb_serial_write>
    41c8:	480b      	ldr	r0, [pc, #44]	; (41f8 <menu()+0x2ac>)
    41ca:	f005 faad 	bl	9728 <Print::println()>
    41ce:	210d      	movs	r1, #13
    41d0:	4815      	ldr	r0, [pc, #84]	; (4228 <menu()+0x2dc>)
    41d2:	f007 fff1 	bl	c1b8 <usb_serial_write>
    41d6:	4808      	ldr	r0, [pc, #32]	; (41f8 <menu()+0x2ac>)
    41d8:	f005 faa6 	bl	9728 <Print::println()>
    debug = 0;
    41dc:	2200      	movs	r2, #0
    menuload = 1;
    41de:	2301      	movs	r3, #1
    debug = 0;
    41e0:	6032      	str	r2, [r6, #0]
    menuload = 1;
    41e2:	6023      	str	r3, [r4, #0]
}
    41e4:	b002      	add	sp, #8
    41e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41ea:	bf00      	nop
    41ec:	1fffd030 	.word	0x1fffd030
    41f0:	1fffcff4 	.word	0x1fffcff4
    41f4:	1fff884c 	.word	0x1fff884c
    41f8:	1fff89fc 	.word	0x1fff89fc
    41fc:	00014e34 	.word	0x00014e34
    4200:	00014e3c 	.word	0x00014e3c
    4204:	00014e50 	.word	0x00014e50
    4208:	1fff8858 	.word	0x1fff8858
    420c:	00014e64 	.word	0x00014e64
    4210:	00014e7c 	.word	0x00014e7c
    4214:	00014e9c 	.word	0x00014e9c
    4218:	00014eb4 	.word	0x00014eb4
    421c:	00014ed4 	.word	0x00014ed4
    4220:	00014ef8 	.word	0x00014ef8
    4224:	00014f14 	.word	0x00014f14
    4228:	00014f28 	.word	0x00014f28
        calcur();
    422c:	f7ff fba0 	bl	3970 <calcur()>
  if (menuload == 8) {
    4230:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4232:	6828      	ldr	r0, [r5, #0]
  if (menuload == 8) {
    4234:	2b08      	cmp	r3, #8
    4236:	d171      	bne.n	431c <menu()+0x3d0>
    switch (incomingByte) {
    4238:	2832      	cmp	r0, #50	; 0x32
    423a:	d068      	beq.n	430e <menu()+0x3c2>
    423c:	2871      	cmp	r0, #113	; 0x71
    423e:	f43f aede 	beq.w	3ffe <menu()+0xb2>
    4242:	2831      	cmp	r0, #49	; 0x31
    4244:	f47f aedf 	bne.w	4006 <menu()+0xba>
        virtual int available() { return usb_serial_available(); }
    4248:	f007 ff84 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    424c:	2800      	cmp	r0, #0
    424e:	f300 81c5 	bgt.w	45dc <menu()+0x690>
        if (settings.IgnoreTemp > 3) {
    4252:	4e97      	ldr	r6, [pc, #604]	; (44b0 <menu()+0x564>)
    4254:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
        bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    4258:	6d33      	ldr	r3, [r6, #80]	; 0x50
    425a:	6c72      	ldr	r2, [r6, #68]	; 0x44
        if (settings.IgnoreTemp > 3) {
    425c:	2903      	cmp	r1, #3
          settings.IgnoreTemp = 0;
    425e:	bf84      	itt	hi
    4260:	2100      	movhi	r1, #0
    4262:	f886 1040 	strbhi.w	r1, [r6, #64]	; 0x40
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    4266:	4893      	ldr	r0, [pc, #588]	; (44b4 <menu()+0x568>)
    4268:	f7fd fbb4 	bl	19d4 <BMSModuleManager::setSensors(int, float, float)>
          menuload = 1;
    426c:	2201      	movs	r2, #1
          incomingByte = 'i';
    426e:	2369      	movs	r3, #105	; 0x69
          menuload = 1;
    4270:	6022      	str	r2, [r4, #0]
          incomingByte = 'i';
    4272:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4274:	e001      	b.n	427a <menu()+0x32e>
        virtual int read() { return usb_serial_getchar(); }
    4276:	f007 ff31 	bl	c0dc <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    427a:	f007 ff6b 	bl	c154 <usb_serial_available>
        while (Serial.available()) {
    427e:	4605      	mov	r5, r0
    4280:	2800      	cmp	r0, #0
    4282:	d1f8      	bne.n	4276 <menu()+0x32a>
        SERIALCONSOLE.println();
    4284:	488c      	ldr	r0, [pc, #560]	; (44b8 <menu()+0x56c>)
    4286:	f005 fa4f 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    428a:	488b      	ldr	r0, [pc, #556]	; (44b8 <menu()+0x56c>)
    428c:	f005 fa4c 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    4290:	4889      	ldr	r0, [pc, #548]	; (44b8 <menu()+0x56c>)
    4292:	f005 fa49 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    4296:	4888      	ldr	r0, [pc, #544]	; (44b8 <menu()+0x56c>)
    4298:	f005 fa46 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    429c:	4886      	ldr	r0, [pc, #536]	; (44b8 <menu()+0x56c>)
    429e:	f005 fa43 	bl	9728 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    42a2:	2115      	movs	r1, #21
    42a4:	4885      	ldr	r0, [pc, #532]	; (44bc <menu()+0x570>)
    42a6:	f007 ff87 	bl	c1b8 <usb_serial_write>
    42aa:	4883      	ldr	r0, [pc, #524]	; (44b8 <menu()+0x56c>)
    42ac:	f005 fa3c 	bl	9728 <Print::println()>
    42b0:	2118      	movs	r1, #24
    42b2:	4883      	ldr	r0, [pc, #524]	; (44c0 <menu()+0x574>)
    42b4:	f007 ff80 	bl	c1b8 <usb_serial_write>
	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    42b8:	462b      	mov	r3, r5
    42ba:	220a      	movs	r2, #10
    42bc:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
    42c0:	487d      	ldr	r0, [pc, #500]	; (44b8 <menu()+0x56c>)
    42c2:	f005 fa49 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(uint8_t b)			{ return print(b) + println(); }
    42c6:	487c      	ldr	r0, [pc, #496]	; (44b8 <menu()+0x56c>)
    42c8:	f005 fa2e 	bl	9728 <Print::println()>
    42cc:	2128      	movs	r1, #40	; 0x28
    42ce:	487d      	ldr	r0, [pc, #500]	; (44c4 <menu()+0x578>)
    42d0:	f007 ff72 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.IgnoreVolt * 1000, 0);
    42d4:	6c70      	ldr	r0, [r6, #68]	; 0x44
    42d6:	497c      	ldr	r1, [pc, #496]	; (44c8 <menu()+0x57c>)
    42d8:	f008 fe4e 	bl	cf78 <__aeabi_fmul>
    42dc:	f008 fc28 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    42e0:	9500      	str	r5, [sp, #0]
    42e2:	460b      	mov	r3, r1
    42e4:	4602      	mov	r2, r0
    42e6:	4874      	ldr	r0, [pc, #464]	; (44b8 <menu()+0x56c>)
    42e8:	f005 fa42 	bl	9770 <Print::printFloat(double, unsigned char)>
    42ec:	2102      	movs	r1, #2
    42ee:	4877      	ldr	r0, [pc, #476]	; (44cc <menu()+0x580>)
    42f0:	f007 ff62 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    42f4:	4870      	ldr	r0, [pc, #448]	; (44b8 <menu()+0x56c>)
    42f6:	f005 fa17 	bl	9728 <Print::println()>
    42fa:	2113      	movs	r1, #19
    42fc:	4874      	ldr	r0, [pc, #464]	; (44d0 <menu()+0x584>)
    42fe:	f007 ff5b 	bl	c1b8 <usb_serial_write>
    4302:	486d      	ldr	r0, [pc, #436]	; (44b8 <menu()+0x56c>)
    4304:	f005 fa10 	bl	9728 <Print::println()>
        menuload = 8;
    4308:	2308      	movs	r3, #8
    430a:	6023      	str	r3, [r4, #0]
        break;
    430c:	e684      	b.n	4018 <menu()+0xcc>
        virtual int available() { return usb_serial_available(); }
    430e:	f007 ff21 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4312:	2800      	cmp	r0, #0
    4314:	f300 8153 	bgt.w	45be <menu()+0x672>
  if (menuload == 7) {
    4318:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    431a:	6828      	ldr	r0, [r5, #0]
  if (menuload == 7) {
    431c:	2b07      	cmp	r3, #7
    431e:	d114      	bne.n	434a <menu()+0x3fe>
    switch (incomingByte) {
    4320:	2834      	cmp	r0, #52	; 0x34
    4322:	f73f ae6a 	bgt.w	3ffa <menu()+0xae>
    4326:	2830      	cmp	r0, #48	; 0x30
    4328:	f77f ae6d 	ble.w	4006 <menu()+0xba>
    432c:	3832      	subs	r0, #50	; 0x32
    432e:	2802      	cmp	r0, #2
    4330:	f201 8493 	bhi.w	5c5a <menu()+0x1d0e>
    4334:	e8df f000 	tbb	[pc, r0]
    4338:	0298      	.short	0x0298
    433a:	ac          	.byte	0xac
    433b:	00          	.byte	0x00
    433c:	f007 ff0a 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4340:	2800      	cmp	r0, #0
    4342:	f300 8153 	bgt.w	45ec <menu()+0x6a0>
  if (menuload == 6)  //Charging settings
    4346:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4348:	6828      	ldr	r0, [r5, #0]
  if (menuload == 6)  //Charging settings
    434a:	2b06      	cmp	r3, #6
    434c:	f040 83ac 	bne.w	4aa8 <menu()+0xb5c>
    switch (incomingByte) {
    4350:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4354:	2b41      	cmp	r3, #65	; 0x41
    4356:	f200 8674 	bhi.w	5042 <menu()+0x10f6>
    435a:	a201      	add	r2, pc, #4	; (adr r2, 4360 <menu()+0x414>)
    435c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4360:	00004ef3 	.word	0x00004ef3
    4364:	00004d9f 	.word	0x00004d9f
    4368:	00004a9b 	.word	0x00004a9b
    436c:	0000501f 	.word	0x0000501f
    4370:	00004ffb 	.word	0x00004ffb
    4374:	00004fdf 	.word	0x00004fdf
    4378:	00004fbf 	.word	0x00004fbf
    437c:	00004fa9 	.word	0x00004fa9
    4380:	00005043 	.word	0x00005043
    4384:	00004f79 	.word	0x00004f79
    4388:	00005043 	.word	0x00005043
    438c:	00005043 	.word	0x00005043
    4390:	00005043 	.word	0x00005043
    4394:	00005043 	.word	0x00005043
    4398:	00005043 	.word	0x00005043
    439c:	00005043 	.word	0x00005043
    43a0:	00005043 	.word	0x00005043
    43a4:	00005043 	.word	0x00005043
    43a8:	00005043 	.word	0x00005043
    43ac:	00005043 	.word	0x00005043
    43b0:	00005043 	.word	0x00005043
    43b4:	00005043 	.word	0x00005043
    43b8:	00005043 	.word	0x00005043
    43bc:	00005043 	.word	0x00005043
    43c0:	00005043 	.word	0x00005043
    43c4:	00005043 	.word	0x00005043
    43c8:	00005043 	.word	0x00005043
    43cc:	00005043 	.word	0x00005043
    43d0:	00005043 	.word	0x00005043
    43d4:	00005043 	.word	0x00005043
    43d8:	00005043 	.word	0x00005043
    43dc:	00005043 	.word	0x00005043
    43e0:	00005043 	.word	0x00005043
    43e4:	00005043 	.word	0x00005043
    43e8:	00005043 	.word	0x00005043
    43ec:	00005043 	.word	0x00005043
    43f0:	00005043 	.word	0x00005043
    43f4:	00005043 	.word	0x00005043
    43f8:	00005043 	.word	0x00005043
    43fc:	00005043 	.word	0x00005043
    4400:	00005043 	.word	0x00005043
    4404:	00005043 	.word	0x00005043
    4408:	00005043 	.word	0x00005043
    440c:	00005043 	.word	0x00005043
    4410:	00005043 	.word	0x00005043
    4414:	00005043 	.word	0x00005043
    4418:	00005043 	.word	0x00005043
    441c:	00005043 	.word	0x00005043
    4420:	00005043 	.word	0x00005043
    4424:	00005043 	.word	0x00005043
    4428:	00005043 	.word	0x00005043
    442c:	00005043 	.word	0x00005043
    4430:	00005043 	.word	0x00005043
    4434:	00005043 	.word	0x00005043
    4438:	00005043 	.word	0x00005043
    443c:	00005043 	.word	0x00005043
    4440:	00005043 	.word	0x00005043
    4444:	00005043 	.word	0x00005043
    4448:	00005043 	.word	0x00005043
    444c:	00005043 	.word	0x00005043
    4450:	00005043 	.word	0x00005043
    4454:	00005043 	.word	0x00005043
    4458:	00005043 	.word	0x00005043
    445c:	00005043 	.word	0x00005043
    4460:	00005043 	.word	0x00005043
    4464:	00003fff 	.word	0x00003fff
    4468:	f007 fe74 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    446c:	2800      	cmp	r0, #0
    446e:	f77f af6a 	ble.w	4346 <menu()+0x3fa>
          settings.CellGap = Serial.parseInt();
    4472:	4811      	ldr	r0, [pc, #68]	; (44b8 <menu()+0x56c>)
          settings.CellGap = settings.CellGap * 0.001;
    4474:	4e0e      	ldr	r6, [pc, #56]	; (44b0 <menu()+0x564>)
          settings.CellGap = Serial.parseInt();
    4476:	f005 fab7 	bl	99e8 <Stream::parseInt()>
    447a:	f008 fd29 	bl	ced0 <__aeabi_i2f>
          settings.CellGap = settings.CellGap * 0.001;
    447e:	4915      	ldr	r1, [pc, #84]	; (44d4 <menu()+0x588>)
    4480:	f008 fd7a 	bl	cf78 <__aeabi_fmul>
          menuload = 1;
    4484:	2301      	movs	r3, #1
    4486:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    4488:	2361      	movs	r3, #97	; 0x61
          settings.CellGap = settings.CellGap * 0.001;
    448a:	63f0      	str	r0, [r6, #60]	; 0x3c
          incomingByte = 'a';
    448c:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    448e:	e025      	b.n	44dc <menu()+0x590>
    4490:	f007 fe60 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4494:	2800      	cmp	r0, #0
    4496:	f77f af56 	ble.w	4346 <menu()+0x3fa>
          settings.triptime = Serial.parseInt();
    449a:	4807      	ldr	r0, [pc, #28]	; (44b8 <menu()+0x56c>)
    449c:	4e04      	ldr	r6, [pc, #16]	; (44b0 <menu()+0x564>)
    449e:	f005 faa3 	bl	99e8 <Stream::parseInt()>
          menuload = 1;
    44a2:	2301      	movs	r3, #1
    44a4:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    44a6:	2361      	movs	r3, #97	; 0x61
          settings.triptime = Serial.parseInt();
    44a8:	f8a6 00ca 	strh.w	r0, [r6, #202]	; 0xca
          incomingByte = 'a';
    44ac:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    44ae:	e015      	b.n	44dc <menu()+0x590>
    44b0:	1fffd0d8 	.word	0x1fffd0d8
    44b4:	1fff91f0 	.word	0x1fff91f0
    44b8:	1fff89fc 	.word	0x1fff89fc
    44bc:	00014efc 	.word	0x00014efc
    44c0:	0001448c 	.word	0x0001448c
    44c4:	000144a8 	.word	0x000144a8
    44c8:	447a0000 	.word	0x447a0000
    44cc:	000144d4 	.word	0x000144d4
    44d0:	000144d8 	.word	0x000144d8
    44d4:	3a83126f 	.word	0x3a83126f
        virtual int read() { return usb_serial_getchar(); }
    44d8:	f007 fe00 	bl	c0dc <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    44dc:	f007 fe3a 	bl	c154 <usb_serial_available>
        while (Serial.available()) {
    44e0:	4605      	mov	r5, r0
    44e2:	2800      	cmp	r0, #0
    44e4:	d1f8      	bne.n	44d8 <menu()+0x58c>
        SERIALCONSOLE.println();
    44e6:	48af      	ldr	r0, [pc, #700]	; (47a4 <menu()+0x858>)
    44e8:	f005 f91e 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    44ec:	48ad      	ldr	r0, [pc, #692]	; (47a4 <menu()+0x858>)
    44ee:	f005 f91b 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    44f2:	48ac      	ldr	r0, [pc, #688]	; (47a4 <menu()+0x858>)
    44f4:	f005 f918 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    44f8:	48aa      	ldr	r0, [pc, #680]	; (47a4 <menu()+0x858>)
    44fa:	f005 f915 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    44fe:	48a9      	ldr	r0, [pc, #676]	; (47a4 <menu()+0x858>)
    4500:	f005 f912 	bl	9728 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4504:	211f      	movs	r1, #31
    4506:	48a8      	ldr	r0, [pc, #672]	; (47a8 <menu()+0x85c>)
    4508:	f007 fe56 	bl	c1b8 <usb_serial_write>
    450c:	48a5      	ldr	r0, [pc, #660]	; (47a4 <menu()+0x858>)
    450e:	f005 f90b 	bl	9728 <Print::println()>
    4512:	211c      	movs	r1, #28
    4514:	48a5      	ldr	r0, [pc, #660]	; (47ac <menu()+0x860>)
    4516:	f007 fe4f 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnOff * 1000, 0);
    451a:	6a70      	ldr	r0, [r6, #36]	; 0x24
    451c:	49a4      	ldr	r1, [pc, #656]	; (47b0 <menu()+0x864>)
    451e:	f008 fd2b 	bl	cf78 <__aeabi_fmul>
    4522:	f008 fb05 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4526:	9500      	str	r5, [sp, #0]
    4528:	4602      	mov	r2, r0
    452a:	460b      	mov	r3, r1
    452c:	489d      	ldr	r0, [pc, #628]	; (47a4 <menu()+0x858>)
    452e:	f005 f91f 	bl	9770 <Print::printFloat(double, unsigned char)>
    4532:	2102      	movs	r1, #2
    4534:	489f      	ldr	r0, [pc, #636]	; (47b4 <menu()+0x868>)
    4536:	f007 fe3f 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    453a:	489a      	ldr	r0, [pc, #616]	; (47a4 <menu()+0x858>)
    453c:	f005 f8f4 	bl	9728 <Print::println()>
    4540:	2123      	movs	r1, #35	; 0x23
    4542:	489d      	ldr	r0, [pc, #628]	; (47b8 <menu()+0x86c>)
    4544:	f007 fe38 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.CellGap * 1000, 0);
    4548:	6bf0      	ldr	r0, [r6, #60]	; 0x3c
    454a:	4999      	ldr	r1, [pc, #612]	; (47b0 <menu()+0x864>)
    454c:	f008 fd14 	bl	cf78 <__aeabi_fmul>
    4550:	f008 faee 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4554:	9500      	str	r5, [sp, #0]
    4556:	4602      	mov	r2, r0
    4558:	460b      	mov	r3, r1
    455a:	4892      	ldr	r0, [pc, #584]	; (47a4 <menu()+0x858>)
    455c:	f005 f908 	bl	9770 <Print::printFloat(double, unsigned char)>
    4560:	2102      	movs	r1, #2
    4562:	4894      	ldr	r0, [pc, #592]	; (47b4 <menu()+0x868>)
    4564:	f007 fe28 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4568:	488e      	ldr	r0, [pc, #568]	; (47a4 <menu()+0x858>)
    456a:	f005 f8dd 	bl	9728 <Print::println()>
    456e:	2119      	movs	r1, #25
    4570:	4892      	ldr	r0, [pc, #584]	; (47bc <menu()+0x870>)
    4572:	f007 fe21 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.WarnToff);
    4576:	6bb0      	ldr	r0, [r6, #56]	; 0x38
    4578:	f008 fada 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    457c:	2502      	movs	r5, #2
    457e:	460b      	mov	r3, r1
    4580:	4602      	mov	r2, r0
    4582:	9500      	str	r5, [sp, #0]
    4584:	4887      	ldr	r0, [pc, #540]	; (47a4 <menu()+0x858>)
    4586:	f005 f8f3 	bl	9770 <Print::printFloat(double, unsigned char)>
    458a:	4629      	mov	r1, r5
    458c:	488c      	ldr	r0, [pc, #560]	; (47c0 <menu()+0x874>)
    458e:	f007 fe13 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4592:	4884      	ldr	r0, [pc, #528]	; (47a4 <menu()+0x858>)
    4594:	f005 f8c8 	bl	9728 <Print::println()>
    4598:	2122      	movs	r1, #34	; 0x22
    459a:	488a      	ldr	r0, [pc, #552]	; (47c4 <menu()+0x878>)
    459c:	f007 fe0c 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    45a0:	f8b6 10ca 	ldrh.w	r1, [r6, #202]	; 0xca
    45a4:	487f      	ldr	r0, [pc, #508]	; (47a4 <menu()+0x858>)
    45a6:	f005 f8b7 	bl	9718 <Print::print(long)>
    45aa:	2103      	movs	r1, #3
    45ac:	4886      	ldr	r0, [pc, #536]	; (47c8 <menu()+0x87c>)
    45ae:	f007 fe03 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    45b2:	487c      	ldr	r0, [pc, #496]	; (47a4 <menu()+0x858>)
    45b4:	f005 f8b8 	bl	9728 <Print::println()>
        menuload = 7;
    45b8:	2307      	movs	r3, #7
    45ba:	6023      	str	r3, [r4, #0]
        break;
    45bc:	e52c      	b.n	4018 <menu()+0xcc>
          settings.IgnoreVolt = Serial.parseInt();
    45be:	4879      	ldr	r0, [pc, #484]	; (47a4 <menu()+0x858>)
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    45c0:	4e82      	ldr	r6, [pc, #520]	; (47cc <menu()+0x880>)
          settings.IgnoreVolt = Serial.parseInt();
    45c2:	f005 fa11 	bl	99e8 <Stream::parseInt()>
    45c6:	f008 fc83 	bl	ced0 <__aeabi_i2f>
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    45ca:	4981      	ldr	r1, [pc, #516]	; (47d0 <menu()+0x884>)
    45cc:	f008 fcd4 	bl	cf78 <__aeabi_fmul>
          bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    45d0:	6d33      	ldr	r3, [r6, #80]	; 0x50
    45d2:	f896 1040 	ldrb.w	r1, [r6, #64]	; 0x40
          settings.IgnoreVolt = settings.IgnoreVolt * 0.001;
    45d6:	6470      	str	r0, [r6, #68]	; 0x44
    45d8:	4602      	mov	r2, r0
    45da:	e644      	b.n	4266 <menu()+0x31a>
          settings.IgnoreTemp = Serial.parseInt();
    45dc:	4871      	ldr	r0, [pc, #452]	; (47a4 <menu()+0x858>)
    45de:	4e7b      	ldr	r6, [pc, #492]	; (47cc <menu()+0x880>)
    45e0:	f005 fa02 	bl	99e8 <Stream::parseInt()>
    45e4:	b2c1      	uxtb	r1, r0
    45e6:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    45ea:	e635      	b.n	4258 <menu()+0x30c>
          settings.WarnToff = Serial.parseInt();
    45ec:	486d      	ldr	r0, [pc, #436]	; (47a4 <menu()+0x858>)
    45ee:	4e77      	ldr	r6, [pc, #476]	; (47cc <menu()+0x880>)
    45f0:	f005 f9fa 	bl	99e8 <Stream::parseInt()>
    45f4:	f008 fc6c 	bl	ced0 <__aeabi_i2f>
          menuload = 1;
    45f8:	2301      	movs	r3, #1
    45fa:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    45fc:	2361      	movs	r3, #97	; 0x61
          settings.WarnToff = Serial.parseInt();
    45fe:	63b0      	str	r0, [r6, #56]	; 0x38
          incomingByte = 'a';
    4600:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4602:	e76b      	b.n	44dc <menu()+0x590>
        balon = !balon;
    4604:	4a73      	ldr	r2, [pc, #460]	; (47d4 <menu()+0x888>)
        gaugedebug = !gaugedebug;
    4606:	6813      	ldr	r3, [r2, #0]
    4608:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    460c:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    460e:	2101      	movs	r1, #1
        gaugedebug = !gaugedebug;
    4610:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4612:	6021      	str	r1, [r4, #0]
        gaugedebug = !gaugedebug;
    4614:	6013      	str	r3, [r2, #0]
        incomingByte = 'd';
    4616:	6028      	str	r0, [r5, #0]
    switch (incomingByte) {
    4618:	f1a0 0352 	sub.w	r3, r0, #82	; 0x52
    461c:	2b1f      	cmp	r3, #31
    461e:	f200 80bc 	bhi.w	479a <menu()+0x84e>
    4622:	e8df f013 	tbh	[pc, r3, lsl #1]
    4626:	05b4      	.short	0x05b4
    4628:	00ba00ba 	.word	0x00ba00ba
    462c:	00ba00ba 	.word	0x00ba00ba
    4630:	00ba00ba 	.word	0x00ba00ba
    4634:	00ba00ba 	.word	0x00ba00ba
    4638:	00ba00ba 	.word	0x00ba00ba
    463c:	00ba00ba 	.word	0x00ba00ba
    4640:	00ba00ba 	.word	0x00ba00ba
    4644:	05b605b1 	.word	0x05b605b1
    4648:	00220b03 	.word	0x00220b03
    464c:	00ba0afa 	.word	0x00ba0afa
    4650:	00ba00ba 	.word	0x00ba00ba
    4654:	00ba0af7 	.word	0x00ba0af7
    4658:	00ba0b06 	.word	0x00ba0b06
    465c:	00ba00ba 	.word	0x00ba00ba
    4660:	00ba00ba 	.word	0x00ba00ba
    4664:	05a1      	.short	0x05a1
        virtual int read() { return usb_serial_getchar(); }
    4666:	f007 fd39 	bl	c0dc <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    466a:	f007 fd73 	bl	c154 <usb_serial_available>
        while (Serial.available()) {
    466e:	2800      	cmp	r0, #0
    4670:	d1f9      	bne.n	4666 <menu()+0x71a>
        SERIALCONSOLE.println();
    4672:	484c      	ldr	r0, [pc, #304]	; (47a4 <menu()+0x858>)
    4674:	f005 f858 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    4678:	484a      	ldr	r0, [pc, #296]	; (47a4 <menu()+0x858>)
    467a:	f005 f855 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    467e:	4849      	ldr	r0, [pc, #292]	; (47a4 <menu()+0x858>)
    4680:	f005 f852 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    4684:	4847      	ldr	r0, [pc, #284]	; (47a4 <menu()+0x858>)
    4686:	f005 f84f 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    468a:	4846      	ldr	r0, [pc, #280]	; (47a4 <menu()+0x858>)
    468c:	f005 f84c 	bl	9728 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4690:	2113      	movs	r1, #19
    4692:	4851      	ldr	r0, [pc, #324]	; (47d8 <menu()+0x88c>)
    4694:	f007 fd90 	bl	c1b8 <usb_serial_write>
    4698:	4842      	ldr	r0, [pc, #264]	; (47a4 <menu()+0x858>)
    469a:	f005 f845 	bl	9728 <Print::println()>
    469e:	210d      	movs	r1, #13
    46a0:	484e      	ldr	r0, [pc, #312]	; (47dc <menu()+0x890>)
    46a2:	f007 fd89 	bl	c1b8 <usb_serial_write>
    46a6:	483f      	ldr	r0, [pc, #252]	; (47a4 <menu()+0x858>)
    46a8:	f005 f83e 	bl	9728 <Print::println()>
    46ac:	210f      	movs	r1, #15
    46ae:	484c      	ldr	r0, [pc, #304]	; (47e0 <menu()+0x894>)
    46b0:	f007 fd82 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.println(candebug);
    46b4:	4b4b      	ldr	r3, [pc, #300]	; (47e4 <menu()+0x898>)
	size_t print(int n)				{ return print((long)n); }
    46b6:	483b      	ldr	r0, [pc, #236]	; (47a4 <menu()+0x858>)
    46b8:	6819      	ldr	r1, [r3, #0]
    46ba:	f005 f82d 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    46be:	4839      	ldr	r0, [pc, #228]	; (47a4 <menu()+0x858>)
    46c0:	f005 f832 	bl	9728 <Print::println()>
    46c4:	2113      	movs	r1, #19
    46c6:	4848      	ldr	r0, [pc, #288]	; (47e8 <menu()+0x89c>)
    46c8:	f007 fd76 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.println(debugCur);
    46cc:	4b47      	ldr	r3, [pc, #284]	; (47ec <menu()+0x8a0>)
	size_t print(int n)				{ return print((long)n); }
    46ce:	4835      	ldr	r0, [pc, #212]	; (47a4 <menu()+0x858>)
    46d0:	6819      	ldr	r1, [r3, #0]
    46d2:	f005 f821 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    46d6:	4833      	ldr	r0, [pc, #204]	; (47a4 <menu()+0x858>)
    46d8:	f005 f826 	bl	9728 <Print::println()>
    46dc:	2112      	movs	r1, #18
    46de:	4844      	ldr	r0, [pc, #272]	; (47f0 <menu()+0x8a4>)
    46e0:	f007 fd6a 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.println(outputcheck);
    46e4:	4b43      	ldr	r3, [pc, #268]	; (47f4 <menu()+0x8a8>)
	size_t print(int n)				{ return print((long)n); }
    46e6:	482f      	ldr	r0, [pc, #188]	; (47a4 <menu()+0x858>)
    46e8:	6819      	ldr	r1, [r3, #0]
    46ea:	f005 f815 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    46ee:	482d      	ldr	r0, [pc, #180]	; (47a4 <menu()+0x858>)
    46f0:	f005 f81a 	bl	9728 <Print::println()>
    46f4:	2111      	movs	r1, #17
    46f6:	4840      	ldr	r0, [pc, #256]	; (47f8 <menu()+0x8ac>)
    46f8:	f007 fd5e 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.println(inputcheck);
    46fc:	4b3f      	ldr	r3, [pc, #252]	; (47fc <menu()+0x8b0>)
	size_t print(int n)				{ return print((long)n); }
    46fe:	4829      	ldr	r0, [pc, #164]	; (47a4 <menu()+0x858>)
    4700:	6819      	ldr	r1, [r3, #0]
    4702:	f005 f809 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4706:	4827      	ldr	r0, [pc, #156]	; (47a4 <menu()+0x858>)
    4708:	f005 f80e 	bl	9728 <Print::println()>
    470c:	210e      	movs	r1, #14
    470e:	483c      	ldr	r0, [pc, #240]	; (4800 <menu()+0x8b4>)
    4710:	f007 fd52 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.println(settings.ESSmode);
    4714:	4b2d      	ldr	r3, [pc, #180]	; (47cc <menu()+0x880>)
	size_t print(int n)				{ return print((long)n); }
    4716:	4823      	ldr	r0, [pc, #140]	; (47a4 <menu()+0x858>)
    4718:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
    471c:	f004 fffc 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4720:	4820      	ldr	r0, [pc, #128]	; (47a4 <menu()+0x858>)
    4722:	f005 f801 	bl	9728 <Print::println()>
    4726:	2119      	movs	r1, #25
    4728:	4836      	ldr	r0, [pc, #216]	; (4804 <menu()+0x8b8>)
    472a:	f007 fd45 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.println(cellspresent);
    472e:	4b36      	ldr	r3, [pc, #216]	; (4808 <menu()+0x8bc>)
	size_t print(int n)				{ return print((long)n); }
    4730:	481c      	ldr	r0, [pc, #112]	; (47a4 <menu()+0x858>)
    4732:	6819      	ldr	r1, [r3, #0]
    4734:	f004 fff0 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4738:	481a      	ldr	r0, [pc, #104]	; (47a4 <menu()+0x858>)
    473a:	f004 fff5 	bl	9728 <Print::println()>
    473e:	2111      	movs	r1, #17
    4740:	4832      	ldr	r0, [pc, #200]	; (480c <menu()+0x8c0>)
    4742:	f007 fd39 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.println(gaugedebug);
    4746:	4b32      	ldr	r3, [pc, #200]	; (4810 <menu()+0x8c4>)
	size_t print(int n)				{ return print((long)n); }
    4748:	4816      	ldr	r0, [pc, #88]	; (47a4 <menu()+0x858>)
    474a:	6819      	ldr	r1, [r3, #0]
    474c:	f004 ffe4 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4750:	4814      	ldr	r0, [pc, #80]	; (47a4 <menu()+0x858>)
    4752:	f004 ffe9 	bl	9728 <Print::println()>
    4756:	2110      	movs	r1, #16
    4758:	482e      	ldr	r0, [pc, #184]	; (4814 <menu()+0x8c8>)
    475a:	f007 fd2d 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.println(CSVdebug);
    475e:	4b2e      	ldr	r3, [pc, #184]	; (4818 <menu()+0x8cc>)
	size_t print(int n)				{ return print((long)n); }
    4760:	4810      	ldr	r0, [pc, #64]	; (47a4 <menu()+0x858>)
    4762:	6819      	ldr	r1, [r3, #0]
    4764:	f004 ffd8 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4768:	480e      	ldr	r0, [pc, #56]	; (47a4 <menu()+0x858>)
    476a:	f004 ffdd 	bl	9728 <Print::println()>
    476e:	211c      	movs	r1, #28
    4770:	482a      	ldr	r0, [pc, #168]	; (481c <menu()+0x8d0>)
    4772:	f007 fd21 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.println(debugdigits);
    4776:	4b2a      	ldr	r3, [pc, #168]	; (4820 <menu()+0x8d4>)
	size_t print(int n)				{ return print((long)n); }
    4778:	480a      	ldr	r0, [pc, #40]	; (47a4 <menu()+0x858>)
    477a:	6819      	ldr	r1, [r3, #0]
    477c:	f004 ffcc 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4780:	4808      	ldr	r0, [pc, #32]	; (47a4 <menu()+0x858>)
    4782:	f004 ffd1 	bl	9728 <Print::println()>
    4786:	2113      	movs	r1, #19
    4788:	4826      	ldr	r0, [pc, #152]	; (4824 <menu()+0x8d8>)
    478a:	f007 fd15 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    478e:	4805      	ldr	r0, [pc, #20]	; (47a4 <menu()+0x858>)
    4790:	f004 ffca 	bl	9728 <Print::println()>
        menuload = 4;
    4794:	2304      	movs	r3, #4
    4796:	6023      	str	r3, [r4, #0]
        break;
    4798:	e43e      	b.n	4018 <menu()+0xcc>
  if (incomingByte == 115 & menuload == 0) {
    479a:	6823      	ldr	r3, [r4, #0]
    479c:	e433      	b.n	4006 <menu()+0xba>
        debugCur = !debugCur;
    479e:	4a13      	ldr	r2, [pc, #76]	; (47ec <menu()+0x8a0>)
    47a0:	e731      	b.n	4606 <menu()+0x6ba>
    47a2:	bf00      	nop
    47a4:	1fff89fc 	.word	0x1fff89fc
    47a8:	000146c0 	.word	0x000146c0
    47ac:	000146e0 	.word	0x000146e0
    47b0:	447a0000 	.word	0x447a0000
    47b4:	000144d4 	.word	0x000144d4
    47b8:	00014700 	.word	0x00014700
    47bc:	00014724 	.word	0x00014724
    47c0:	0001469c 	.word	0x0001469c
    47c4:	00014740 	.word	0x00014740
    47c8:	00014764 	.word	0x00014764
    47cc:	1fffd0d8 	.word	0x1fffd0d8
    47d0:	3a83126f 	.word	0x3a83126f
    47d4:	1fff91ec 	.word	0x1fff91ec
    47d8:	00014874 	.word	0x00014874
    47dc:	00014888 	.word	0x00014888
    47e0:	00014898 	.word	0x00014898
    47e4:	1fffcf38 	.word	0x1fffcf38
    47e8:	000148a8 	.word	0x000148a8
    47ec:	1fffcfc8 	.word	0x1fffcfc8
    47f0:	000148bc 	.word	0x000148bc
    47f4:	1fffd0c4 	.word	0x1fffd0c4
    47f8:	000148d0 	.word	0x000148d0
    47fc:	1fffcff8 	.word	0x1fffcff8
    4800:	000148e4 	.word	0x000148e4
    4804:	000148f4 	.word	0x000148f4
    4808:	1fffcf3c 	.word	0x1fffcf3c
    480c:	00014910 	.word	0x00014910
    4810:	1fffcfdc 	.word	0x1fffcfdc
    4814:	00014924 	.word	0x00014924
    4818:	1fff91a4 	.word	0x1fff91a4
    481c:	00014938 	.word	0x00014938
    4820:	1fff8850 	.word	0x1fff8850
    4824:	000144d8 	.word	0x000144d8
        outputcheck = !outputcheck;
    4828:	4ba9      	ldr	r3, [pc, #676]	; (4ad0 <menu()+0xb84>)
    482a:	681a      	ldr	r2, [r3, #0]
        menuload = 1;
    482c:	2101      	movs	r1, #1
        outputcheck = !outputcheck;
    482e:	2a00      	cmp	r2, #0
    4830:	bf0c      	ite	eq
    4832:	460a      	moveq	r2, r1
    4834:	2200      	movne	r2, #0
        menuload = 1;
    4836:	6021      	str	r1, [r4, #0]
        outputcheck = !outputcheck;
    4838:	601a      	str	r2, [r3, #0]
        if (outputcheck == 0) {
    483a:	f041 8150 	bne.w	5ade <menu()+0x1b92>
        incomingByte = 'd';
    483e:	2064      	movs	r0, #100	; 0x64
    4840:	6028      	str	r0, [r5, #0]
  if (menuload == 5) {
    4842:	e6e9      	b.n	4618 <menu()+0x6cc>
        inputcheck = !inputcheck;
    4844:	4aa3      	ldr	r2, [pc, #652]	; (4ad4 <menu()+0xb88>)
    4846:	e6de      	b.n	4606 <menu()+0x6ba>
        settings.ESSmode = !settings.ESSmode;
    4848:	4ea3      	ldr	r6, [pc, #652]	; (4ad8 <menu()+0xb8c>)
    484a:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
    484e:	fab3 f383 	clz	r3, r3
        incomingByte = 'd';
    4852:	2064      	movs	r0, #100	; 0x64
        menuload = 1;
    4854:	2201      	movs	r2, #1
        settings.ESSmode = !settings.ESSmode;
    4856:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    4858:	6022      	str	r2, [r4, #0]
        settings.ESSmode = !settings.ESSmode;
    485a:	f8c6 30a8 	str.w	r3, [r6, #168]	; 0xa8
        incomingByte = 'd';
    485e:	6028      	str	r0, [r5, #0]
  if (menuload == 5) {
    4860:	e6da      	b.n	4618 <menu()+0x6cc>
        menuload = 1;
    4862:	2301      	movs	r3, #1
        cellspresent = bms.seriescells();
    4864:	489d      	ldr	r0, [pc, #628]	; (4adc <menu()+0xb90>)
        menuload = 1;
    4866:	6023      	str	r3, [r4, #0]
        cellspresent = bms.seriescells();
    4868:	f7fc fda8 	bl	13bc <BMSModuleManager::seriescells()>
    486c:	4b9c      	ldr	r3, [pc, #624]	; (4ae0 <menu()+0xb94>)
        incomingByte = 'd';
    486e:	2264      	movs	r2, #100	; 0x64
        cellspresent = bms.seriescells();
    4870:	6018      	str	r0, [r3, #0]
  if (menuload == 2) {
    4872:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    4874:	602a      	str	r2, [r5, #0]
  if (menuload == 8) {
    4876:	2b08      	cmp	r3, #8
    4878:	f040 8723 	bne.w	56c2 <menu()+0x1776>
    487c:	2064      	movs	r0, #100	; 0x64
  if (menuload == 3) {
    487e:	f7ff bbc2 	b.w	4006 <menu()+0xba>
        gaugedebug = !gaugedebug;
    4882:	4a98      	ldr	r2, [pc, #608]	; (4ae4 <menu()+0xb98>)
    4884:	e6bf      	b.n	4606 <menu()+0x6ba>
        CSVdebug = !CSVdebug;
    4886:	4a98      	ldr	r2, [pc, #608]	; (4ae8 <menu()+0xb9c>)
    4888:	e6bd      	b.n	4606 <menu()+0x6ba>
        menuload = 1;
    488a:	2301      	movs	r3, #1
    488c:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    488e:	f007 fc61 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4892:	2800      	cmp	r0, #0
    4894:	f301 8114 	bgt.w	5ac0 <menu()+0x1b74>
        if (debugdigits > 4) {
    4898:	4b94      	ldr	r3, [pc, #592]	; (4aec <menu()+0xba0>)
    489a:	6818      	ldr	r0, [r3, #0]
    489c:	2804      	cmp	r0, #4
          debugdigits = 2;
    489e:	bfc4      	itt	gt
    48a0:	2202      	movgt	r2, #2
    48a2:	601a      	strgt	r2, [r3, #0]
        incomingByte = 'd';
    48a4:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    48a6:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    48a8:	602a      	str	r2, [r5, #0]
        break;
    48aa:	e7e4      	b.n	4876 <menu()+0x92a>
        candebug = !candebug;
    48ac:	4a90      	ldr	r2, [pc, #576]	; (4af0 <menu()+0xba4>)
    48ae:	e6aa      	b.n	4606 <menu()+0x6ba>
        settings.invertcur = !settings.invertcur;
    48b0:	4e89      	ldr	r6, [pc, #548]	; (4ad8 <menu()+0xb8c>)
    48b2:	6ff3      	ldr	r3, [r6, #124]	; 0x7c
    48b4:	fab3 f383 	clz	r3, r3
    48b8:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    48ba:	2201      	movs	r2, #1
        settings.invertcur = !settings.invertcur;
    48bc:	67f3      	str	r3, [r6, #124]	; 0x7c
        incomingByte = 'c';
    48be:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    48c0:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    48c2:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    48c4:	e001      	b.n	48ca <menu()+0x97e>
        virtual int read() { return usb_serial_getchar(); }
    48c6:	f007 fc09 	bl	c0dc <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    48ca:	f007 fc43 	bl	c154 <usb_serial_available>
        while (Serial.available()) {
    48ce:	2800      	cmp	r0, #0
    48d0:	d1f9      	bne.n	48c6 <menu()+0x97a>
        SERIALCONSOLE.println();
    48d2:	4888      	ldr	r0, [pc, #544]	; (4af4 <menu()+0xba8>)
    48d4:	f004 ff28 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    48d8:	4886      	ldr	r0, [pc, #536]	; (4af4 <menu()+0xba8>)
    48da:	f004 ff25 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    48de:	4885      	ldr	r0, [pc, #532]	; (4af4 <menu()+0xba8>)
    48e0:	f004 ff22 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    48e4:	4883      	ldr	r0, [pc, #524]	; (4af4 <menu()+0xba8>)
    48e6:	f004 ff1f 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    48ea:	4882      	ldr	r0, [pc, #520]	; (4af4 <menu()+0xba8>)
    48ec:	f004 ff1c 	bl	9728 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    48f0:	211f      	movs	r1, #31
    48f2:	4881      	ldr	r0, [pc, #516]	; (4af8 <menu()+0xbac>)
    48f4:	f007 fc60 	bl	c1b8 <usb_serial_write>
    48f8:	487e      	ldr	r0, [pc, #504]	; (4af4 <menu()+0xba8>)
    48fa:	f004 ff15 	bl	9728 <Print::println()>
    48fe:	211e      	movs	r1, #30
    4900:	487e      	ldr	r0, [pc, #504]	; (4afc <menu()+0xbb0>)
    4902:	f007 fc59 	bl	c1b8 <usb_serial_write>
    4906:	487b      	ldr	r0, [pc, #492]	; (4af4 <menu()+0xba8>)
    4908:	f004 ff0e 	bl	9728 <Print::println()>
    490c:	487c      	ldr	r0, [pc, #496]	; (4b00 <menu()+0xbb4>)
    490e:	211a      	movs	r1, #26
    4910:	f007 fc52 	bl	c1b8 <usb_serial_write>
        switch (settings.cursens) {
    4914:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
    4918:	2b02      	cmp	r3, #2
    491a:	f001 810a 	beq.w	5b32 <menu()+0x1be6>
    491e:	2b03      	cmp	r3, #3
    4920:	f001 80fe 	beq.w	5b20 <menu()+0x1bd4>
    4924:	2b01      	cmp	r3, #1
    4926:	f001 80f2 	beq.w	5b0e <menu()+0x1bc2>
    492a:	4876      	ldr	r0, [pc, #472]	; (4b04 <menu()+0xbb8>)
    492c:	2109      	movs	r1, #9
    492e:	f007 fc43 	bl	c1b8 <usb_serial_write>
    4932:	4870      	ldr	r0, [pc, #448]	; (4af4 <menu()+0xba8>)
    4934:	f004 fef8 	bl	9728 <Print::println()>
    4938:	2114      	movs	r1, #20
    493a:	4873      	ldr	r0, [pc, #460]	; (4b08 <menu()+0xbbc>)
    493c:	f007 fc3c 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4940:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    4942:	486c      	ldr	r0, [pc, #432]	; (4af4 <menu()+0xba8>)
    4944:	f004 fee8 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4948:	486a      	ldr	r0, [pc, #424]	; (4af4 <menu()+0xba8>)
    494a:	f004 feed 	bl	9728 <Print::println()>
    494e:	211c      	movs	r1, #28
    4950:	486e      	ldr	r0, [pc, #440]	; (4b0c <menu()+0xbc0>)
    4952:	f007 fc31 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4956:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
    495a:	4866      	ldr	r0, [pc, #408]	; (4af4 <menu()+0xba8>)
    495c:	f004 fedc 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4960:	4864      	ldr	r0, [pc, #400]	; (4af4 <menu()+0xba8>)
    4962:	f004 fee1 	bl	9728 <Print::println()>
    4966:	211c      	movs	r1, #28
    4968:	4869      	ldr	r0, [pc, #420]	; (4b10 <menu()+0xbc4>)
    496a:	f007 fc25 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    496e:	f8d6 10b4 	ldr.w	r1, [r6, #180]	; 0xb4
    4972:	4860      	ldr	r0, [pc, #384]	; (4af4 <menu()+0xba8>)
    4974:	f004 fed0 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4978:	485e      	ldr	r0, [pc, #376]	; (4af4 <menu()+0xba8>)
    497a:	f004 fed5 	bl	9728 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    497e:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    4982:	f025 0702 	bic.w	r7, r5, #2
    4986:	2f01      	cmp	r7, #1
    4988:	f000 86b7 	beq.w	56fa <menu()+0x17ae>
        if (settings.cursens == Canbus) {
    498c:	2d02      	cmp	r5, #2
    498e:	f001 80d9 	beq.w	5b44 <menu()+0x1bf8>
    4992:	2113      	movs	r1, #19
    4994:	485f      	ldr	r0, [pc, #380]	; (4b14 <menu()+0xbc8>)
    4996:	f007 fc0f 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    499a:	4856      	ldr	r0, [pc, #344]	; (4af4 <menu()+0xba8>)
    499c:	f004 fec4 	bl	9728 <Print::println()>
        menuload = 2;
    49a0:	2302      	movs	r3, #2
    49a2:	6023      	str	r3, [r4, #0]
        break;
    49a4:	f7ff bb38 	b.w	4018 <menu()+0xcc>
        settings.voltsoc = !settings.voltsoc;
    49a8:	4e4b      	ldr	r6, [pc, #300]	; (4ad8 <menu()+0xb8c>)
    49aa:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
    49ae:	fab3 f383 	clz	r3, r3
    49b2:	095b      	lsrs	r3, r3, #5
        menuload = 1;
    49b4:	2201      	movs	r2, #1
        settings.voltsoc = !settings.voltsoc;
    49b6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
        incomingByte = 'c';
    49ba:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    49bc:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    49be:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    49c0:	e783      	b.n	48ca <menu()+0x97e>
        menuload = 1;
    49c2:	2301      	movs	r3, #1
    49c4:	6023      	str	r3, [r4, #0]
        virtual int available() { return usb_serial_available(); }
    49c6:	f007 fbc5 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    49ca:	2800      	cmp	r0, #0
    49cc:	dd07      	ble.n	49de <menu()+0xa92>
          settings.convlow = Serial.parseInt();
    49ce:	4849      	ldr	r0, [pc, #292]	; (4af4 <menu()+0xba8>)
    49d0:	4e41      	ldr	r6, [pc, #260]	; (4ad8 <menu()+0xb8c>)
    49d2:	f005 f809 	bl	99e8 <Stream::parseInt()>
    49d6:	f008 fa7b 	bl	ced0 <__aeabi_i2f>
    49da:	f8c6 0094 	str.w	r0, [r6, #148]	; 0x94
  if (menuload == 8) {
    49de:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'c';
    49e0:	2063      	movs	r0, #99	; 0x63
  if (menuload == 7) {
    49e2:	2b07      	cmp	r3, #7
        incomingByte = 'c';
    49e4:	6028      	str	r0, [r5, #0]
  if (menuload == 7) {
    49e6:	f43f ab0e 	beq.w	4006 <menu()+0xba>
  if (menuload == 5) {
    49ea:	2b05      	cmp	r3, #5
    49ec:	f041 8118 	bne.w	5c20 <menu()+0x1cd4>
          incomingByte = 'i';
    49f0:	2305      	movs	r3, #5
    49f2:	f7ff bb08 	b.w	4006 <menu()+0xba>
        menuload = 1;
    49f6:	2301      	movs	r3, #1
    49f8:	6023      	str	r3, [r4, #0]
    49fa:	f007 fbab 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    49fe:	2800      	cmp	r0, #0
    4a00:	dded      	ble.n	49de <menu()+0xa92>
          settings.convhigh = Serial.parseInt();
    4a02:	483c      	ldr	r0, [pc, #240]	; (4af4 <menu()+0xba8>)
    4a04:	4e34      	ldr	r6, [pc, #208]	; (4ad8 <menu()+0xb8c>)
    4a06:	f004 ffef 	bl	99e8 <Stream::parseInt()>
    4a0a:	f008 fa61 	bl	ced0 <__aeabi_i2f>
    4a0e:	f8c6 0090 	str.w	r0, [r6, #144]	; 0x90
    4a12:	e7e4      	b.n	49de <menu()+0xa92>
        menuload = 1;
    4a14:	2301      	movs	r3, #1
    4a16:	6023      	str	r3, [r4, #0]
    4a18:	f007 fb9c 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4a1c:	2800      	cmp	r0, #0
    4a1e:	f301 8056 	bgt.w	5ace <menu()+0x1b82>
    4a22:	4e2d      	ldr	r6, [pc, #180]	; (4ad8 <menu()+0xb8c>)
        menuload = 1;
    4a24:	2201      	movs	r2, #1
        incomingByte = 'c';
    4a26:	2363      	movs	r3, #99	; 0x63
        menuload = 1;
    4a28:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    4a2a:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4a2c:	e74d      	b.n	48ca <menu()+0x97e>
        menuload = 1;
    4a2e:	2301      	movs	r3, #1
    4a30:	6023      	str	r3, [r4, #0]
    4a32:	f007 fb8f 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4a36:	2800      	cmp	r0, #0
    4a38:	ddf3      	ble.n	4a22 <menu()+0xad6>
          settings.changecur = Serial.parseInt();
    4a3a:	482e      	ldr	r0, [pc, #184]	; (4af4 <menu()+0xba8>)
    4a3c:	4e26      	ldr	r6, [pc, #152]	; (4ad8 <menu()+0xb8c>)
    4a3e:	f004 ffd3 	bl	99e8 <Stream::parseInt()>
    4a42:	f8c6 008c 	str.w	r0, [r6, #140]	; 0x8c
    4a46:	e7ed      	b.n	4a24 <menu()+0xad8>
        menuload = 1;
    4a48:	2301      	movs	r3, #1
    4a4a:	6023      	str	r3, [r4, #0]
    4a4c:	f007 fb82 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4a50:	2800      	cmp	r0, #0
    4a52:	ddc4      	ble.n	49de <menu()+0xa92>
          settings.CurDead = Serial.parseInt();
    4a54:	4827      	ldr	r0, [pc, #156]	; (4af4 <menu()+0xba8>)
    4a56:	4e20      	ldr	r6, [pc, #128]	; (4ad8 <menu()+0xb8c>)
    4a58:	f004 ffc6 	bl	99e8 <Stream::parseInt()>
    4a5c:	f8a6 00c2 	strh.w	r0, [r6, #194]	; 0xc2
    4a60:	e7bd      	b.n	49de <menu()+0xa92>
        settings.curcan++;
    4a62:	4e1d      	ldr	r6, [pc, #116]	; (4ad8 <menu()+0xb8c>)
    4a64:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
        menuload = 1;
    4a68:	2201      	movs	r2, #1
        settings.curcan++;
    4a6a:	4413      	add	r3, r2
          settings.curcan = 1;
    4a6c:	2b05      	cmp	r3, #5
    4a6e:	bfa8      	it	ge
    4a70:	4613      	movge	r3, r2
        menuload = 1;
    4a72:	6022      	str	r2, [r4, #0]
        incomingByte = 'c';
    4a74:	2263      	movs	r2, #99	; 0x63
    4a76:	f8c6 30d4 	str.w	r3, [r6, #212]	; 0xd4
    4a7a:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    4a7c:	e725      	b.n	48ca <menu()+0x97e>
        settings.cursens++;
    4a7e:	4e16      	ldr	r6, [pc, #88]	; (4ad8 <menu()+0xb8c>)
    4a80:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
        menuload = 1;
    4a84:	2201      	movs	r2, #1
        settings.cursens++;
    4a86:	4413      	add	r3, r2
          settings.cursens = 0;
    4a88:	2b04      	cmp	r3, #4
        menuload = 1;
    4a8a:	6022      	str	r2, [r4, #0]
          settings.cursens = 0;
    4a8c:	bfa8      	it	ge
    4a8e:	2300      	movge	r3, #0
        incomingByte = 'c';
    4a90:	2263      	movs	r2, #99	; 0x63
    4a92:	f8c6 3080 	str.w	r3, [r6, #128]	; 0x80
    4a96:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    4a98:	e717      	b.n	48ca <menu()+0x97e>
    4a9a:	f007 fb5b 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4a9e:	2800      	cmp	r0, #0
    4aa0:	f300 87fe 	bgt.w	5aa0 <menu()+0x1b54>
  if (menuload == 5) {
    4aa4:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4aa6:	6828      	ldr	r0, [r5, #0]
  if (menuload == 5) {
    4aa8:	2b05      	cmp	r3, #5
    4aaa:	d13c      	bne.n	4b26 <menu()+0xbda>
    switch (incomingByte) {
    4aac:	2836      	cmp	r0, #54	; 0x36
    4aae:	f300 85cd 	bgt.w	564c <menu()+0x1700>
    4ab2:	2830      	cmp	r0, #48	; 0x30
    4ab4:	f77f aaa7 	ble.w	4006 <menu()+0xba>
    4ab8:	3832      	subs	r0, #50	; 0x32
    4aba:	2804      	cmp	r0, #4
    4abc:	f201 80bc 	bhi.w	5c38 <menu()+0x1cec>
    4ac0:	e8df f010 	tbh	[pc, r0, lsl #1]
    4ac4:	0140015d 	.word	0x0140015d
    4ac8:	002a00c2 	.word	0x002a00c2
    4acc:	0150      	.short	0x0150
    4ace:	bf00      	nop
    4ad0:	1fffd0c4 	.word	0x1fffd0c4
    4ad4:	1fffcff8 	.word	0x1fffcff8
    4ad8:	1fffd0d8 	.word	0x1fffd0d8
    4adc:	1fff91f0 	.word	0x1fff91f0
    4ae0:	1fffcf3c 	.word	0x1fffcf3c
    4ae4:	1fffcfdc 	.word	0x1fffcfdc
    4ae8:	1fff91a4 	.word	0x1fff91a4
    4aec:	1fff8850 	.word	0x1fff8850
    4af0:	1fffcf38 	.word	0x1fffcf38
    4af4:	1fff89fc 	.word	0x1fff89fc
    4af8:	00014958 	.word	0x00014958
    4afc:	00014978 	.word	0x00014978
    4b00:	00014998 	.word	0x00014998
    4b04:	00014a10 	.word	0x00014a10
    4b08:	00014a1c 	.word	0x00014a1c
    4b0c:	00014a34 	.word	0x00014a34
    4b10:	00014a54 	.word	0x00014a54
    4b14:	000144d8 	.word	0x000144d8
    4b18:	f007 fb1c 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4b1c:	2800      	cmp	r0, #0
    4b1e:	f300 865b 	bgt.w	57d8 <menu()+0x188c>
  if (menuload == 3) {
    4b22:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    4b24:	6828      	ldr	r0, [r5, #0]
  if (menuload == 3) {
    4b26:	2b03      	cmp	r3, #3
    4b28:	f040 85c6 	bne.w	56b8 <menu()+0x176c>
    switch (incomingByte) {
    4b2c:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    4b30:	2a42      	cmp	r2, #66	; 0x42
    4b32:	f63f aa68 	bhi.w	4006 <menu()+0xba>
    4b36:	a101      	add	r1, pc, #4	; (adr r1, 4b3c <menu()+0xbf0>)
    4b38:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
    4b3c:	00005947 	.word	0x00005947
    4b40:	00005971 	.word	0x00005971
    4b44:	00005927 	.word	0x00005927
    4b48:	00005a6d 	.word	0x00005a6d
    4b4c:	00005a53 	.word	0x00005a53
    4b50:	00005a33 	.word	0x00005a33
    4b54:	000059f9 	.word	0x000059f9
    4b58:	000059e3 	.word	0x000059e3
    4b5c:	000059c7 	.word	0x000059c7
    4b60:	000059a7 	.word	0x000059a7
    4b64:	00004007 	.word	0x00004007
    4b68:	00004007 	.word	0x00004007
    4b6c:	00004007 	.word	0x00004007
    4b70:	00004007 	.word	0x00004007
    4b74:	00004007 	.word	0x00004007
    4b78:	00004007 	.word	0x00004007
    4b7c:	00004007 	.word	0x00004007
    4b80:	00004007 	.word	0x00004007
    4b84:	00004007 	.word	0x00004007
    4b88:	00004007 	.word	0x00004007
    4b8c:	00004007 	.word	0x00004007
    4b90:	00004007 	.word	0x00004007
    4b94:	00004007 	.word	0x00004007
    4b98:	00004007 	.word	0x00004007
    4b9c:	00004007 	.word	0x00004007
    4ba0:	00004007 	.word	0x00004007
    4ba4:	00004007 	.word	0x00004007
    4ba8:	00004007 	.word	0x00004007
    4bac:	00004007 	.word	0x00004007
    4bb0:	00004007 	.word	0x00004007
    4bb4:	00004007 	.word	0x00004007
    4bb8:	00004007 	.word	0x00004007
    4bbc:	00004007 	.word	0x00004007
    4bc0:	00004007 	.word	0x00004007
    4bc4:	00004007 	.word	0x00004007
    4bc8:	00004007 	.word	0x00004007
    4bcc:	00004007 	.word	0x00004007
    4bd0:	00004007 	.word	0x00004007
    4bd4:	00004007 	.word	0x00004007
    4bd8:	00004007 	.word	0x00004007
    4bdc:	00004007 	.word	0x00004007
    4be0:	00004007 	.word	0x00004007
    4be4:	00004007 	.word	0x00004007
    4be8:	00004007 	.word	0x00004007
    4bec:	00004007 	.word	0x00004007
    4bf0:	00004007 	.word	0x00004007
    4bf4:	00004007 	.word	0x00004007
    4bf8:	00004007 	.word	0x00004007
    4bfc:	00004007 	.word	0x00004007
    4c00:	00005991 	.word	0x00005991
    4c04:	000056ad 	.word	0x000056ad
    4c08:	0000581b 	.word	0x0000581b
    4c0c:	00005847 	.word	0x00005847
    4c10:	00005831 	.word	0x00005831
    4c14:	000058b9 	.word	0x000058b9
    4c18:	00005663 	.word	0x00005663
    4c1c:	00005687 	.word	0x00005687
    4c20:	00004007 	.word	0x00004007
    4c24:	00005a87 	.word	0x00005a87
    4c28:	00005905 	.word	0x00005905
    4c2c:	00004007 	.word	0x00004007
    4c30:	00004007 	.word	0x00004007
    4c34:	00004007 	.word	0x00004007
    4c38:	00004007 	.word	0x00004007
    4c3c:	00004007 	.word	0x00004007
    4c40:	000058f7 	.word	0x000058f7
    4c44:	000057ed 	.word	0x000057ed
    4c48:	f007 fa84 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4c4c:	2800      	cmp	r0, #0
    4c4e:	f77f af68 	ble.w	4b22 <menu()+0xbd6>
          settings.gaugelow = Serial.parseInt();
    4c52:	48b4      	ldr	r0, [pc, #720]	; (4f24 <menu()+0xfd8>)
    4c54:	4eb4      	ldr	r6, [pc, #720]	; (4f28 <menu()+0xfdc>)
    4c56:	f004 fec7 	bl	99e8 <Stream::parseInt()>
          gaugedebug = 2;
    4c5a:	4bb4      	ldr	r3, [pc, #720]	; (4f2c <menu()+0xfe0>)
          settings.gaugelow = Serial.parseInt();
    4c5c:	f8c6 00ac 	str.w	r0, [r6, #172]	; 0xac
          gaugedebug = 2;
    4c60:	2202      	movs	r2, #2
          gaugedebug = 3;
    4c62:	601a      	str	r2, [r3, #0]
          gaugeupdate();
    4c64:	f7fd fd3c 	bl	26e0 <gaugeupdate()>
          menuload = 1;
    4c68:	2201      	movs	r2, #1
          incomingByte = 'k';
    4c6a:	236b      	movs	r3, #107	; 0x6b
          menuload = 1;
    4c6c:	6022      	str	r2, [r4, #0]
          incomingByte = 'k';
    4c6e:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4c70:	e001      	b.n	4c76 <menu()+0xd2a>
        virtual int read() { return usb_serial_getchar(); }
    4c72:	f007 fa33 	bl	c0dc <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4c76:	f007 fa6d 	bl	c154 <usb_serial_available>
        while (Serial.available()) {
    4c7a:	2800      	cmp	r0, #0
    4c7c:	d1f9      	bne.n	4c72 <menu()+0xd26>
        SERIALCONSOLE.println();
    4c7e:	48a9      	ldr	r0, [pc, #676]	; (4f24 <menu()+0xfd8>)
    4c80:	f004 fd52 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    4c84:	48a7      	ldr	r0, [pc, #668]	; (4f24 <menu()+0xfd8>)
    4c86:	f004 fd4f 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    4c8a:	48a6      	ldr	r0, [pc, #664]	; (4f24 <menu()+0xfd8>)
    4c8c:	f004 fd4c 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    4c90:	48a4      	ldr	r0, [pc, #656]	; (4f24 <menu()+0xfd8>)
    4c92:	f004 fd49 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    4c96:	48a3      	ldr	r0, [pc, #652]	; (4f24 <menu()+0xfd8>)
    4c98:	f004 fd46 	bl	9728 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4c9c:	2121      	movs	r1, #33	; 0x21
    4c9e:	48a4      	ldr	r0, [pc, #656]	; (4f30 <menu()+0xfe4>)
    4ca0:	f007 fa8a 	bl	c1b8 <usb_serial_write>
    4ca4:	489f      	ldr	r0, [pc, #636]	; (4f24 <menu()+0xfd8>)
    4ca6:	f004 fd3f 	bl	9728 <Print::println()>
    4caa:	2115      	movs	r1, #21
    4cac:	48a1      	ldr	r0, [pc, #644]	; (4f34 <menu()+0xfe8>)
    4cae:	f007 fa83 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4cb2:	f8d6 1098 	ldr.w	r1, [r6, #152]	; 0x98
    4cb6:	489b      	ldr	r0, [pc, #620]	; (4f24 <menu()+0xfd8>)
    4cb8:	f004 fd2e 	bl	9718 <Print::print(long)>
    4cbc:	2102      	movs	r1, #2
    4cbe:	489e      	ldr	r0, [pc, #632]	; (4f38 <menu()+0xfec>)
    4cc0:	f007 fa7a 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4cc4:	4897      	ldr	r0, [pc, #604]	; (4f24 <menu()+0xfd8>)
    4cc6:	f004 fd2f 	bl	9728 <Print::println()>
    4cca:	211e      	movs	r1, #30
    4ccc:	489b      	ldr	r0, [pc, #620]	; (4f3c <menu()+0xff0>)
    4cce:	f007 fa73 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4cd2:	f8d6 10a0 	ldr.w	r1, [r6, #160]	; 0xa0
    4cd6:	4893      	ldr	r0, [pc, #588]	; (4f24 <menu()+0xfd8>)
    4cd8:	f004 fd1e 	bl	9718 <Print::print(long)>
    4cdc:	2103      	movs	r1, #3
    4cde:	4898      	ldr	r0, [pc, #608]	; (4f40 <menu()+0xff4>)
    4ce0:	f007 fa6a 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4ce4:	488f      	ldr	r0, [pc, #572]	; (4f24 <menu()+0xfd8>)
    4ce6:	f004 fd1f 	bl	9728 <Print::println()>
    4cea:	211e      	movs	r1, #30
    4cec:	4895      	ldr	r0, [pc, #596]	; (4f44 <menu()+0xff8>)
    4cee:	f007 fa63 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4cf2:	f8d6 109c 	ldr.w	r1, [r6, #156]	; 0x9c
    4cf6:	488b      	ldr	r0, [pc, #556]	; (4f24 <menu()+0xfd8>)
    4cf8:	f004 fd0e 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4cfc:	4889      	ldr	r0, [pc, #548]	; (4f24 <menu()+0xfd8>)
    4cfe:	f004 fd13 	bl	9728 <Print::println()>
    4d02:	211d      	movs	r1, #29
    4d04:	4890      	ldr	r0, [pc, #576]	; (4f48 <menu()+0xffc>)
    4d06:	f007 fa57 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4d0a:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
    4d0e:	4885      	ldr	r0, [pc, #532]	; (4f24 <menu()+0xfd8>)
    4d10:	f004 fd02 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4d14:	4883      	ldr	r0, [pc, #524]	; (4f24 <menu()+0xfd8>)
    4d16:	f004 fd07 	bl	9728 <Print::println()>
    4d1a:	211e      	movs	r1, #30
    4d1c:	488b      	ldr	r0, [pc, #556]	; (4f4c <menu()+0x1000>)
    4d1e:	f007 fa4b 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    4d22:	f8d6 10b0 	ldr.w	r1, [r6, #176]	; 0xb0
    4d26:	487f      	ldr	r0, [pc, #508]	; (4f24 <menu()+0xfd8>)
    4d28:	f004 fcf6 	bl	9718 <Print::print(long)>
	size_t println(int n)				{ return print(n) + println(); }
    4d2c:	487d      	ldr	r0, [pc, #500]	; (4f24 <menu()+0xfd8>)
    4d2e:	f004 fcfb 	bl	9728 <Print::println()>
        if (settings.ESSmode == 1) {
    4d32:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
    4d36:	2b01      	cmp	r3, #1
    4d38:	f000 8719 	beq.w	5b6e <menu()+0x1c22>
        menuload = 5;
    4d3c:	2305      	movs	r3, #5
    4d3e:	6023      	str	r3, [r4, #0]
        break;
    4d40:	f7ff b96a 	b.w	4018 <menu()+0xcc>
        virtual int available() { return usb_serial_available(); }
    4d44:	f007 fa06 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4d48:	2800      	cmp	r0, #0
    4d4a:	f77f aeea 	ble.w	4b22 <menu()+0xbd6>
          settings.conthold = Serial.parseInt();
    4d4e:	4875      	ldr	r0, [pc, #468]	; (4f24 <menu()+0xfd8>)
    4d50:	4e75      	ldr	r6, [pc, #468]	; (4f28 <menu()+0xfdc>)
    4d52:	f004 fe49 	bl	99e8 <Stream::parseInt()>
          menuload = 1;
    4d56:	2301      	movs	r3, #1
    4d58:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    4d5a:	236b      	movs	r3, #107	; 0x6b
          settings.conthold = Serial.parseInt();
    4d5c:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
          incomingByte = 'k';
    4d60:	602b      	str	r3, [r5, #0]
  if (menuload == 1) {
    4d62:	e788      	b.n	4c76 <menu()+0xd2a>
        settings.tripcont = !settings.tripcont;
    4d64:	4e70      	ldr	r6, [pc, #448]	; (4f28 <menu()+0xfdc>)
    4d66:	f896 30c9 	ldrb.w	r3, [r6, #201]	; 0xc9
          menuload = 1;
    4d6a:	2201      	movs	r2, #1
        settings.tripcont = !settings.tripcont;
    4d6c:	fab3 f383 	clz	r3, r3
          menuload = 1;
    4d70:	6022      	str	r2, [r4, #0]
        settings.tripcont = !settings.tripcont;
    4d72:	095b      	lsrs	r3, r3, #5
          incomingByte = 'k';
    4d74:	226b      	movs	r2, #107	; 0x6b
        settings.tripcont = !settings.tripcont;
    4d76:	f886 30c9 	strb.w	r3, [r6, #201]	; 0xc9
          incomingByte = 'k';
    4d7a:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    4d7c:	e77b      	b.n	4c76 <menu()+0xd2a>
    4d7e:	f007 f9e9 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4d82:	2800      	cmp	r0, #0
    4d84:	f77f aecd 	ble.w	4b22 <menu()+0xbd6>
          settings.Precurrent = Serial.parseInt();
    4d88:	4866      	ldr	r0, [pc, #408]	; (4f24 <menu()+0xfd8>)
    4d8a:	4e67      	ldr	r6, [pc, #412]	; (4f28 <menu()+0xfdc>)
    4d8c:	f004 fe2c 	bl	99e8 <Stream::parseInt()>
          menuload = 1;
    4d90:	2301      	movs	r3, #1
    4d92:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    4d94:	236b      	movs	r3, #107	; 0x6b
          settings.Precurrent = Serial.parseInt();
    4d96:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
          incomingByte = 'k';
    4d9a:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4d9c:	e76b      	b.n	4c76 <menu()+0xd2a>
    4d9e:	f007 f9d9 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4da2:	2800      	cmp	r0, #0
    4da4:	f77f ae7e 	ble.w	4aa4 <menu()+0xb58>
          settings.ChargeVsetpoint = Serial.parseInt();
    4da8:	485e      	ldr	r0, [pc, #376]	; (4f24 <menu()+0xfd8>)
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    4daa:	4e5f      	ldr	r6, [pc, #380]	; (4f28 <menu()+0xfdc>)
          settings.ChargeVsetpoint = Serial.parseInt();
    4dac:	f004 fe1c 	bl	99e8 <Stream::parseInt()>
    4db0:	f008 f88e 	bl	ced0 <__aeabi_i2f>
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    4db4:	4966      	ldr	r1, [pc, #408]	; (4f50 <menu()+0x1004>)
    4db6:	f008 f993 	bl	d0e0 <__aeabi_fdiv>
          menuload = 1;
    4dba:	2301      	movs	r3, #1
    4dbc:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    4dbe:	2365      	movs	r3, #101	; 0x65
          settings.ChargeVsetpoint = settings.ChargeVsetpoint / 1000;
    4dc0:	6170      	str	r0, [r6, #20]
          incomingByte = 'e';
    4dc2:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4dc4:	e001      	b.n	4dca <menu()+0xe7e>
        virtual int read() { return usb_serial_getchar(); }
    4dc6:	f007 f989 	bl	c0dc <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    4dca:	f007 f9c3 	bl	c154 <usb_serial_available>
        while (Serial.available()) {
    4dce:	4605      	mov	r5, r0
    4dd0:	2800      	cmp	r0, #0
    4dd2:	d1f8      	bne.n	4dc6 <menu()+0xe7a>
        SERIALCONSOLE.println();
    4dd4:	4853      	ldr	r0, [pc, #332]	; (4f24 <menu()+0xfd8>)
    4dd6:	f004 fca7 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    4dda:	4852      	ldr	r0, [pc, #328]	; (4f24 <menu()+0xfd8>)
    4ddc:	f004 fca4 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    4de0:	4850      	ldr	r0, [pc, #320]	; (4f24 <menu()+0xfd8>)
    4de2:	f004 fca1 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    4de6:	484f      	ldr	r0, [pc, #316]	; (4f24 <menu()+0xfd8>)
    4de8:	f004 fc9e 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    4dec:	484d      	ldr	r0, [pc, #308]	; (4f24 <menu()+0xfd8>)
    4dee:	f004 fc9b 	bl	9728 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    4df2:	2111      	movs	r1, #17
    4df4:	4857      	ldr	r0, [pc, #348]	; (4f54 <menu()+0x1008>)
    4df6:	f007 f9df 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4dfa:	484a      	ldr	r0, [pc, #296]	; (4f24 <menu()+0xfd8>)
    4dfc:	f004 fc94 	bl	9728 <Print::println()>
    4e00:	2128      	movs	r1, #40	; 0x28
    4e02:	4855      	ldr	r0, [pc, #340]	; (4f58 <menu()+0x100c>)
    4e04:	f007 f9d8 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeVsetpoint * 1000, 0);
    4e08:	6970      	ldr	r0, [r6, #20]
    4e0a:	4951      	ldr	r1, [pc, #324]	; (4f50 <menu()+0x1004>)
    4e0c:	f008 f8b4 	bl	cf78 <__aeabi_fmul>
    4e10:	f007 fe8e 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4e14:	9500      	str	r5, [sp, #0]
    4e16:	4602      	mov	r2, r0
    4e18:	460b      	mov	r3, r1
    4e1a:	4842      	ldr	r0, [pc, #264]	; (4f24 <menu()+0xfd8>)
    4e1c:	f004 fca8 	bl	9770 <Print::printFloat(double, unsigned char)>
    4e20:	2102      	movs	r1, #2
    4e22:	484e      	ldr	r0, [pc, #312]	; (4f5c <menu()+0x1010>)
    4e24:	f007 f9c8 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4e28:	483e      	ldr	r0, [pc, #248]	; (4f24 <menu()+0xfd8>)
    4e2a:	f004 fc7d 	bl	9728 <Print::println()>
    4e2e:	2116      	movs	r1, #22
    4e30:	484b      	ldr	r0, [pc, #300]	; (4f60 <menu()+0x1014>)
    4e32:	f007 f9c1 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeHys * 1000, 0);
    4e36:	69f0      	ldr	r0, [r6, #28]
    4e38:	4945      	ldr	r1, [pc, #276]	; (4f50 <menu()+0x1004>)
    4e3a:	f008 f89d 	bl	cf78 <__aeabi_fmul>
    4e3e:	f007 fe77 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4e42:	9500      	str	r5, [sp, #0]
    4e44:	460b      	mov	r3, r1
    4e46:	4602      	mov	r2, r0
    4e48:	4836      	ldr	r0, [pc, #216]	; (4f24 <menu()+0xfd8>)
    4e4a:	f004 fc91 	bl	9770 <Print::printFloat(double, unsigned char)>
    4e4e:	2102      	movs	r1, #2
    4e50:	4842      	ldr	r0, [pc, #264]	; (4f5c <menu()+0x1010>)
    4e52:	f007 f9b1 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4e56:	4833      	ldr	r0, [pc, #204]	; (4f24 <menu()+0xfd8>)
    4e58:	f004 fc66 	bl	9728 <Print::println()>
        if (settings.chargertype > 0) {
    4e5c:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
    4e60:	2b00      	cmp	r3, #0
    4e62:	dd32      	ble.n	4eca <menu()+0xf7e>
    4e64:	211d      	movs	r1, #29
    4e66:	483f      	ldr	r0, [pc, #252]	; (4f64 <menu()+0x1018>)
    4e68:	f007 f9a6 	bl	c1b8 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentmax * 0.1);
    4e6c:	6e30      	ldr	r0, [r6, #96]	; 0x60
    4e6e:	f008 f82f 	bl	ced0 <__aeabi_i2f>
    4e72:	493d      	ldr	r1, [pc, #244]	; (4f68 <menu()+0x101c>)
    4e74:	f008 f880 	bl	cf78 <__aeabi_fmul>
    4e78:	f007 fe5a 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4e7c:	2502      	movs	r5, #2
    4e7e:	4602      	mov	r2, r0
    4e80:	460b      	mov	r3, r1
    4e82:	4828      	ldr	r0, [pc, #160]	; (4f24 <menu()+0xfd8>)
    4e84:	9500      	str	r5, [sp, #0]
    4e86:	f004 fc73 	bl	9770 <Print::printFloat(double, unsigned char)>
    4e8a:	2101      	movs	r1, #1
    4e8c:	4837      	ldr	r0, [pc, #220]	; (4f6c <menu()+0x1020>)
    4e8e:	f007 f993 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4e92:	4824      	ldr	r0, [pc, #144]	; (4f24 <menu()+0xfd8>)
    4e94:	f004 fc48 	bl	9728 <Print::println()>
    4e98:	211f      	movs	r1, #31
    4e9a:	4835      	ldr	r0, [pc, #212]	; (4f70 <menu()+0x1024>)
    4e9c:	f007 f98c 	bl	c1b8 <usb_serial_write>
          SERIALCONSOLE.print(settings.chargecurrentend * 0.1);
    4ea0:	6e70      	ldr	r0, [r6, #100]	; 0x64
    4ea2:	f008 f815 	bl	ced0 <__aeabi_i2f>
    4ea6:	4930      	ldr	r1, [pc, #192]	; (4f68 <menu()+0x101c>)
    4ea8:	f008 f866 	bl	cf78 <__aeabi_fmul>
    4eac:	f007 fe40 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    4eb0:	9500      	str	r5, [sp, #0]
    4eb2:	4602      	mov	r2, r0
    4eb4:	460b      	mov	r3, r1
    4eb6:	481b      	ldr	r0, [pc, #108]	; (4f24 <menu()+0xfd8>)
    4eb8:	f004 fc5a 	bl	9770 <Print::printFloat(double, unsigned char)>
    4ebc:	482b      	ldr	r0, [pc, #172]	; (4f6c <menu()+0x1020>)
    4ebe:	2101      	movs	r1, #1
    4ec0:	f007 f97a 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    4ec4:	4817      	ldr	r0, [pc, #92]	; (4f24 <menu()+0xfd8>)
    4ec6:	f004 fc2f 	bl	9728 <Print::println()>
    4eca:	482a      	ldr	r0, [pc, #168]	; (4f74 <menu()+0x1028>)
    4ecc:	2111      	movs	r1, #17
    4ece:	f007 f973 	bl	c1b8 <usb_serial_write>
        switch (settings.chargertype) {
    4ed2:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
    4ed6:	2b08      	cmp	r3, #8
    4ed8:	f200 80ba 	bhi.w	5050 <menu()+0x1104>
    4edc:	e8df f013 	tbh	[pc, r3, lsl #1]
    4ee0:	013f013a 	.word	0x013f013a
    4ee4:	01300135 	.word	0x01300135
    4ee8:	0126012b 	.word	0x0126012b
    4eec:	011c0121 	.word	0x011c0121
    4ef0:	00b4      	.short	0x00b4
        virtual int available() { return usb_serial_available(); }
    4ef2:	f007 f92f 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4ef6:	2800      	cmp	r0, #0
    4ef8:	f77f add4 	ble.w	4aa4 <menu()+0xb58>
          settings.chargecurrentcold = Serial.parseInt() * 10;
    4efc:	4809      	ldr	r0, [pc, #36]	; (4f24 <menu()+0xfd8>)
    4efe:	4e0a      	ldr	r6, [pc, #40]	; (4f28 <menu()+0xfdc>)
    4f00:	f004 fd72 	bl	99e8 <Stream::parseInt()>
    4f04:	eb00 0080 	add.w	r0, r0, r0, lsl #2
          if (settings.chargecurrentcold > settings.chargecurrentmax) {
    4f08:	6e32      	ldr	r2, [r6, #96]	; 0x60
          settings.chargecurrentcold = Serial.parseInt() * 10;
    4f0a:	0043      	lsls	r3, r0, #1
    4f0c:	b21b      	sxth	r3, r3
          if (settings.chargecurrentcold > settings.chargecurrentmax) {
    4f0e:	4293      	cmp	r3, r2
          settings.chargecurrentcold = Serial.parseInt() * 10;
    4f10:	f8a6 30d0 	strh.w	r3, [r6, #208]	; 0xd0
            settings.chargecurrentcold = settings.chargecurrentmax;
    4f14:	bfc8      	it	gt
    4f16:	f8a6 20d0 	strhgt.w	r2, [r6, #208]	; 0xd0
          incomingByte = 'e';
    4f1a:	2365      	movs	r3, #101	; 0x65
          menuload = 1;
    4f1c:	2201      	movs	r2, #1
    4f1e:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    4f20:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4f22:	e752      	b.n	4dca <menu()+0xe7e>
    4f24:	1fff89fc 	.word	0x1fff89fc
    4f28:	1fffd0d8 	.word	0x1fffd0d8
    4f2c:	1fffcfdc 	.word	0x1fffcfdc
    4f30:	00014768 	.word	0x00014768
    4f34:	0001478c 	.word	0x0001478c
    4f38:	00014630 	.word	0x00014630
    4f3c:	000147a4 	.word	0x000147a4
    4f40:	00014320 	.word	0x00014320
    4f44:	000147c4 	.word	0x000147c4
    4f48:	000147e4 	.word	0x000147e4
    4f4c:	00014804 	.word	0x00014804
    4f50:	447a0000 	.word	0x447a0000
    4f54:	00014ea0 	.word	0x00014ea0
    4f58:	000144ec 	.word	0x000144ec
    4f5c:	000144d4 	.word	0x000144d4
    4f60:	00014518 	.word	0x00014518
    4f64:	00014530 	.word	0x00014530
    4f68:	3dcccccd 	.word	0x3dcccccd
    4f6c:	00014a98 	.word	0x00014a98
    4f70:	00014550 	.word	0x00014550
    4f74:	00014570 	.word	0x00014570
    4f78:	f007 f8ec 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4f7c:	2800      	cmp	r0, #0
    4f7e:	f77f ad91 	ble.w	4aa4 <menu()+0xb58>
          settings.ChargeTSetpoint = Serial.parseInt();
    4f82:	4885      	ldr	r0, [pc, #532]	; (5198 <menu()+0x124c>)
          if (settings.ChargeTSetpoint < settings.UnderTSetpoint) {
    4f84:	4e85      	ldr	r6, [pc, #532]	; (519c <menu()+0x1250>)
          settings.ChargeTSetpoint = Serial.parseInt();
    4f86:	f004 fd2f 	bl	99e8 <Stream::parseInt()>
    4f8a:	f007 ffa1 	bl	ced0 <__aeabi_i2f>
          if (settings.ChargeTSetpoint < settings.UnderTSetpoint) {
    4f8e:	6af7      	ldr	r7, [r6, #44]	; 0x2c
    4f90:	4639      	mov	r1, r7
          settings.ChargeTSetpoint = Serial.parseInt();
    4f92:	4680      	mov	r8, r0
          if (settings.ChargeTSetpoint < settings.UnderTSetpoint) {
    4f94:	f008 f98e 	bl	d2b4 <__aeabi_fcmplt>
    4f98:	b900      	cbnz	r0, 4f9c <menu()+0x1050>
            settings.ChargeTSetpoint = settings.UnderTSetpoint;
    4f9a:	4647      	mov	r7, r8
          menuload = 1;
    4f9c:	2301      	movs	r3, #1
    4f9e:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    4fa0:	2365      	movs	r3, #101	; 0x65
    4fa2:	6337      	str	r7, [r6, #48]	; 0x30
    4fa4:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4fa6:	e710      	b.n	4dca <menu()+0xe7e>
        if (settings.ChargerDirect == 1) {
    4fa8:	4e7c      	ldr	r6, [pc, #496]	; (519c <menu()+0x1250>)
    4faa:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
          menuload = 1;
    4fae:	2201      	movs	r2, #1
        if (settings.ChargerDirect == 1) {
    4fb0:	4053      	eors	r3, r2
          menuload = 1;
    4fb2:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    4fb4:	2265      	movs	r2, #101	; 0x65
    4fb6:	f886 30c8 	strb.w	r3, [r6, #200]	; 0xc8
    4fba:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    4fbc:	e705      	b.n	4dca <menu()+0xe7e>
    4fbe:	f007 f8c9 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4fc2:	2800      	cmp	r0, #0
    4fc4:	f77f ad6e 	ble.w	4aa4 <menu()+0xb58>
          settings.chargerspd = Serial.parseInt();
    4fc8:	4873      	ldr	r0, [pc, #460]	; (5198 <menu()+0x124c>)
    4fca:	4e74      	ldr	r6, [pc, #464]	; (519c <menu()+0x1250>)
    4fcc:	f004 fd0c 	bl	99e8 <Stream::parseInt()>
          menuload = 1;
    4fd0:	2301      	movs	r3, #1
    4fd2:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    4fd4:	2365      	movs	r3, #101	; 0x65
          settings.chargerspd = Serial.parseInt();
    4fd6:	f8c6 00bc 	str.w	r0, [r6, #188]	; 0xbc
          incomingByte = 'e';
    4fda:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    4fdc:	e6f5      	b.n	4dca <menu()+0xe7e>
        settings.chargertype = settings.chargertype + 1;
    4fde:	4e6f      	ldr	r6, [pc, #444]	; (519c <menu()+0x1250>)
    4fe0:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
          menuload = 1;
    4fe4:	2201      	movs	r2, #1
        settings.chargertype = settings.chargertype + 1;
    4fe6:	4413      	add	r3, r2
          settings.chargertype = 0;
    4fe8:	2b09      	cmp	r3, #9
          menuload = 1;
    4fea:	6022      	str	r2, [r4, #0]
          settings.chargertype = 0;
    4fec:	bfa8      	it	ge
    4fee:	2300      	movge	r3, #0
          incomingByte = 'e';
    4ff0:	2265      	movs	r2, #101	; 0x65
    4ff2:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
    4ff6:	602a      	str	r2, [r5, #0]
    switch (incomingByte) {
    4ff8:	e6e7      	b.n	4dca <menu()+0xe7e>
    4ffa:	f007 f8ab 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    4ffe:	2800      	cmp	r0, #0
    5000:	f77f ad50 	ble.w	4aa4 <menu()+0xb58>
          settings.chargecurrentend = Serial.parseInt() * 10;
    5004:	4864      	ldr	r0, [pc, #400]	; (5198 <menu()+0x124c>)
    5006:	4e65      	ldr	r6, [pc, #404]	; (519c <menu()+0x1250>)
    5008:	f004 fcee 	bl	99e8 <Stream::parseInt()>
    500c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5010:	0040      	lsls	r0, r0, #1
          menuload = 1;
    5012:	2201      	movs	r2, #1
          incomingByte = 'e';
    5014:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentend = Serial.parseInt() * 10;
    5016:	6670      	str	r0, [r6, #100]	; 0x64
          menuload = 1;
    5018:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    501a:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    501c:	e6d5      	b.n	4dca <menu()+0xe7e>
    501e:	f007 f899 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    5022:	2800      	cmp	r0, #0
    5024:	f77f ad3e 	ble.w	4aa4 <menu()+0xb58>
          settings.chargecurrentmax = Serial.parseInt() * 10;
    5028:	485b      	ldr	r0, [pc, #364]	; (5198 <menu()+0x124c>)
    502a:	4e5c      	ldr	r6, [pc, #368]	; (519c <menu()+0x1250>)
    502c:	f004 fcdc 	bl	99e8 <Stream::parseInt()>
    5030:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5034:	0040      	lsls	r0, r0, #1
          menuload = 1;
    5036:	2201      	movs	r2, #1
          incomingByte = 'e';
    5038:	2365      	movs	r3, #101	; 0x65
          settings.chargecurrentmax = Serial.parseInt() * 10;
    503a:	6630      	str	r0, [r6, #96]	; 0x60
          menuload = 1;
    503c:	6022      	str	r2, [r4, #0]
          incomingByte = 'e';
    503e:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5040:	e6c3      	b.n	4dca <menu()+0xe7e>
  if (menuload == 5) {
    5042:	2306      	movs	r3, #6
    5044:	f7fe bfdf 	b.w	4006 <menu()+0xba>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5048:	4855      	ldr	r0, [pc, #340]	; (51a0 <menu()+0x1254>)
    504a:	2111      	movs	r1, #17
    504c:	f007 f8b4 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.println();
    5050:	4851      	ldr	r0, [pc, #324]	; (5198 <menu()+0x124c>)
    5052:	f004 fb69 	bl	9728 <Print::println()>
        if (settings.chargertype > 0) {
    5056:	f8d6 30b8 	ldr.w	r3, [r6, #184]	; 0xb8
    505a:	2b00      	cmp	r3, #0
    505c:	dd12      	ble.n	5084 <menu()+0x1138>
    505e:	2118      	movs	r1, #24
    5060:	4850      	ldr	r0, [pc, #320]	; (51a4 <menu()+0x1258>)
    5062:	f007 f8a9 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5066:	f8d6 10bc 	ldr.w	r1, [r6, #188]	; 0xbc
    506a:	484b      	ldr	r0, [pc, #300]	; (5198 <menu()+0x124c>)
    506c:	f004 fb54 	bl	9718 <Print::print(long)>
    5070:	2102      	movs	r1, #2
    5072:	484d      	ldr	r0, [pc, #308]	; (51a8 <menu()+0x125c>)
    5074:	f007 f8a0 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5078:	4847      	ldr	r0, [pc, #284]	; (5198 <menu()+0x124c>)
    507a:	f004 fb55 	bl	9728 <Print::println()>
          SERIALCONSOLE.println();
    507e:	4846      	ldr	r0, [pc, #280]	; (5198 <menu()+0x124c>)
    5080:	f004 fb52 	bl	9728 <Print::println()>
    5084:	4849      	ldr	r0, [pc, #292]	; (51ac <menu()+0x1260>)
    5086:	211b      	movs	r1, #27
    5088:	f007 f896 	bl	c1b8 <usb_serial_write>
        switch (settings.ChargerDirect) {
    508c:	f896 30c8 	ldrb.w	r3, [r6, #200]	; 0xc8
    5090:	2b00      	cmp	r3, #0
    5092:	f040 8323 	bne.w	56dc <menu()+0x1790>
    5096:	4846      	ldr	r0, [pc, #280]	; (51b0 <menu()+0x1264>)
    5098:	2112      	movs	r1, #18
    509a:	f007 f88d 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.println();
    509e:	483e      	ldr	r0, [pc, #248]	; (5198 <menu()+0x124c>)
    50a0:	f004 fb42 	bl	9728 <Print::println()>
    50a4:	211f      	movs	r1, #31
    50a6:	4843      	ldr	r0, [pc, #268]	; (51b4 <menu()+0x1268>)
    50a8:	f007 f886 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.ChargeTSetpoint);
    50ac:	6b30      	ldr	r0, [r6, #48]	; 0x30
    50ae:	f007 fd3f 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    50b2:	2502      	movs	r5, #2
    50b4:	4602      	mov	r2, r0
    50b6:	460b      	mov	r3, r1
    50b8:	4837      	ldr	r0, [pc, #220]	; (5198 <menu()+0x124c>)
    50ba:	9500      	str	r5, [sp, #0]
    50bc:	f004 fb58 	bl	9770 <Print::printFloat(double, unsigned char)>
    50c0:	4629      	mov	r1, r5
    50c2:	483d      	ldr	r0, [pc, #244]	; (51b8 <menu()+0x126c>)
    50c4:	f007 f878 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    50c8:	4833      	ldr	r0, [pc, #204]	; (5198 <menu()+0x124c>)
    50ca:	f004 fb2d 	bl	9728 <Print::println()>
    50ce:	211e      	movs	r1, #30
    50d0:	483a      	ldr	r0, [pc, #232]	; (51bc <menu()+0x1270>)
    50d2:	f007 f871 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.chargecurrentcold * 0.1);
    50d6:	f9b6 00d0 	ldrsh.w	r0, [r6, #208]	; 0xd0
    50da:	f007 fef9 	bl	ced0 <__aeabi_i2f>
    50de:	4938      	ldr	r1, [pc, #224]	; (51c0 <menu()+0x1274>)
    50e0:	f007 ff4a 	bl	cf78 <__aeabi_fmul>
    50e4:	f007 fd24 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    50e8:	9500      	str	r5, [sp, #0]
    50ea:	460b      	mov	r3, r1
    50ec:	4602      	mov	r2, r0
    50ee:	482a      	ldr	r0, [pc, #168]	; (5198 <menu()+0x124c>)
    50f0:	f004 fb3e 	bl	9770 <Print::printFloat(double, unsigned char)>
    50f4:	2101      	movs	r1, #1
    50f6:	4833      	ldr	r0, [pc, #204]	; (51c4 <menu()+0x1278>)
    50f8:	f007 f85e 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    50fc:	4826      	ldr	r0, [pc, #152]	; (5198 <menu()+0x124c>)
    50fe:	f004 fb13 	bl	9728 <Print::println()>
    5102:	2113      	movs	r1, #19
    5104:	4830      	ldr	r0, [pc, #192]	; (51c8 <menu()+0x127c>)
    5106:	f007 f857 	bl	c1b8 <usb_serial_write>
    510a:	4823      	ldr	r0, [pc, #140]	; (5198 <menu()+0x124c>)
    510c:	f004 fb0c 	bl	9728 <Print::println()>
        menuload = 6;
    5110:	2306      	movs	r3, #6
    5112:	6023      	str	r3, [r4, #0]
        break;
    5114:	f7fe bf80 	b.w	4018 <menu()+0xcc>
    5118:	2114      	movs	r1, #20
    511a:	482c      	ldr	r0, [pc, #176]	; (51cc <menu()+0x1280>)
    511c:	f007 f84c 	bl	c1b8 <usb_serial_write>
    5120:	e796      	b.n	5050 <menu()+0x1104>
    5122:	2104      	movs	r1, #4
    5124:	482a      	ldr	r0, [pc, #168]	; (51d0 <menu()+0x1284>)
    5126:	f007 f847 	bl	c1b8 <usb_serial_write>
    512a:	e791      	b.n	5050 <menu()+0x1104>
    512c:	210b      	movs	r1, #11
    512e:	4829      	ldr	r0, [pc, #164]	; (51d4 <menu()+0x1288>)
    5130:	f007 f842 	bl	c1b8 <usb_serial_write>
    5134:	e78c      	b.n	5050 <menu()+0x1104>
    5136:	210d      	movs	r1, #13
    5138:	4827      	ldr	r0, [pc, #156]	; (51d8 <menu()+0x128c>)
    513a:	f007 f83d 	bl	c1b8 <usb_serial_write>
    513e:	e787      	b.n	5050 <menu()+0x1104>
    5140:	210d      	movs	r1, #13
    5142:	4826      	ldr	r0, [pc, #152]	; (51dc <menu()+0x1290>)
    5144:	f007 f838 	bl	c1b8 <usb_serial_write>
    5148:	e782      	b.n	5050 <menu()+0x1104>
    514a:	210c      	movs	r1, #12
    514c:	4824      	ldr	r0, [pc, #144]	; (51e0 <menu()+0x1294>)
    514e:	f007 f833 	bl	c1b8 <usb_serial_write>
    5152:	e77d      	b.n	5050 <menu()+0x1104>
    5154:	210d      	movs	r1, #13
    5156:	4823      	ldr	r0, [pc, #140]	; (51e4 <menu()+0x1298>)
    5158:	f007 f82e 	bl	c1b8 <usb_serial_write>
    515c:	e778      	b.n	5050 <menu()+0x1104>
    515e:	210c      	movs	r1, #12
    5160:	4821      	ldr	r0, [pc, #132]	; (51e8 <menu()+0x129c>)
    5162:	f007 f829 	bl	c1b8 <usb_serial_write>
    5166:	e773      	b.n	5050 <menu()+0x1104>
        #if defined(__has_include) && __has_include(<type_traits>)
        static_assert(std::is_trivially_copyable<T>::value, "You can not use this type with EEPROM.put"); // the code below only makes sense if you can "memcpy" T
        #endif
        const uint8_t *ptr = (const uint8_t*) &t;
#ifdef __arm__
        eeprom_write_block(ptr, (void *)idx, sizeof(T));
    5168:	22d8      	movs	r2, #216	; 0xd8
    516a:	2100      	movs	r1, #0
    516c:	480b      	ldr	r0, [pc, #44]	; (519c <menu()+0x1250>)
        debug = 1;
    516e:	4e1f      	ldr	r6, [pc, #124]	; (51ec <menu()+0x12a0>)
    5170:	f004 fd36 	bl	9be0 <eeprom_write_block>
  if (incomingByte == 115 & menuload == 0) {
    5174:	682b      	ldr	r3, [r5, #0]
        menuload = 0;
    5176:	2100      	movs	r1, #0
        debug = 1;
    5178:	2201      	movs	r2, #1
  if (incomingByte == 115 & menuload == 0) {
    517a:	2b73      	cmp	r3, #115	; 0x73
        menuload = 0;
    517c:	6021      	str	r1, [r4, #0]
        debug = 1;
    517e:	6032      	str	r2, [r6, #0]
  if (incomingByte == 115 & menuload == 0) {
    5180:	f47e af4a 	bne.w	4018 <menu()+0xcc>
    5184:	f7fe bfd5 	b.w	4132 <menu()+0x1e6>
    5188:	4e04      	ldr	r6, [pc, #16]	; (519c <menu()+0x1250>)
    518a:	f7ff b9a7 	b.w	44dc <menu()+0x590>
        CPU_REBOOT;
    518e:	f006 fb49 	bl	b824 <_reboot_Teensyduino_>
    5192:	4e02      	ldr	r6, [pc, #8]	; (519c <menu()+0x1250>)
    5194:	e02e      	b.n	51f4 <menu()+0x12a8>
    5196:	bf00      	nop
    5198:	1fff89fc 	.word	0x1fff89fc
    519c:	1fffd0d8 	.word	0x1fffd0d8
    51a0:	00014600 	.word	0x00014600
    51a4:	00014614 	.word	0x00014614
    51a8:	00014630 	.word	0x00014630
    51ac:	00014634 	.word	0x00014634
    51b0:	00014650 	.word	0x00014650
    51b4:	0001467c 	.word	0x0001467c
    51b8:	0001469c 	.word	0x0001469c
    51bc:	000146a0 	.word	0x000146a0
    51c0:	3dcccccd 	.word	0x3dcccccd
    51c4:	00014a98 	.word	0x00014a98
    51c8:	000144d8 	.word	0x000144d8
    51cc:	000145e8 	.word	0x000145e8
    51d0:	000145e0 	.word	0x000145e0
    51d4:	000145d4 	.word	0x000145d4
    51d8:	000145c4 	.word	0x000145c4
    51dc:	000145b4 	.word	0x000145b4
    51e0:	000145a4 	.word	0x000145a4
    51e4:	00014584 	.word	0x00014584
    51e8:	00014594 	.word	0x00014594
    51ec:	1fff884c 	.word	0x1fff884c
        virtual int read() { return usb_serial_getchar(); }
    51f0:	f006 ff74 	bl	c0dc <usb_serial_getchar>
        virtual int available() { return usb_serial_available(); }
    51f4:	f006 ffae 	bl	c154 <usb_serial_available>
        while (Serial.available()) {
    51f8:	4605      	mov	r5, r0
    51fa:	2800      	cmp	r0, #0
    51fc:	d1f8      	bne.n	51f0 <menu()+0x12a4>
        SERIALCONSOLE.println();
    51fe:	48c2      	ldr	r0, [pc, #776]	; (5508 <menu()+0x15bc>)
    5200:	f004 fa92 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    5204:	48c0      	ldr	r0, [pc, #768]	; (5508 <menu()+0x15bc>)
    5206:	f004 fa8f 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    520a:	48bf      	ldr	r0, [pc, #764]	; (5508 <menu()+0x15bc>)
    520c:	f004 fa8c 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    5210:	48bd      	ldr	r0, [pc, #756]	; (5508 <menu()+0x15bc>)
    5212:	f004 fa89 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    5216:	48bc      	ldr	r0, [pc, #752]	; (5508 <menu()+0x15bc>)
    5218:	f004 fa86 	bl	9728 <Print::println()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    521c:	2115      	movs	r1, #21
    521e:	48bb      	ldr	r0, [pc, #748]	; (550c <menu()+0x15c0>)
    5220:	f006 ffca 	bl	c1b8 <usb_serial_write>
    5224:	48b8      	ldr	r0, [pc, #736]	; (5508 <menu()+0x15bc>)
    5226:	f004 fa7f 	bl	9728 <Print::println()>
    522a:	2114      	movs	r1, #20
    522c:	48b8      	ldr	r0, [pc, #736]	; (5510 <menu()+0x15c4>)
    522e:	f006 ffc3 	bl	c1b8 <usb_serial_write>
    5232:	48b5      	ldr	r0, [pc, #724]	; (5508 <menu()+0x15bc>)
    5234:	f004 fa78 	bl	9728 <Print::println()>
    5238:	211b      	movs	r1, #27
    523a:	48b6      	ldr	r0, [pc, #728]	; (5514 <menu()+0x15c8>)
    523c:	f006 ffbc 	bl	c1b8 <usb_serial_write>
    5240:	48b1      	ldr	r0, [pc, #708]	; (5508 <menu()+0x15bc>)
    5242:	f004 fa71 	bl	9728 <Print::println()>
    5246:	2113      	movs	r1, #19
    5248:	48b3      	ldr	r0, [pc, #716]	; (5518 <menu()+0x15cc>)
    524a:	f006 ffb5 	bl	c1b8 <usb_serial_write>
    524e:	48ae      	ldr	r0, [pc, #696]	; (5508 <menu()+0x15bc>)
    5250:	f004 fa6a 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    5254:	48ac      	ldr	r0, [pc, #688]	; (5508 <menu()+0x15bc>)
    5256:	f004 fa67 	bl	9728 <Print::println()>
        SERIALCONSOLE.println();
    525a:	48ab      	ldr	r0, [pc, #684]	; (5508 <menu()+0x15bc>)
    525c:	f004 fa64 	bl	9728 <Print::println()>
    5260:	2120      	movs	r1, #32
    5262:	48ae      	ldr	r0, [pc, #696]	; (551c <menu()+0x15d0>)
    5264:	f006 ffa8 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverVSetpoint * 1000, 0);
    5268:	68f0      	ldr	r0, [r6, #12]
    526a:	49ad      	ldr	r1, [pc, #692]	; (5520 <menu()+0x15d4>)
    526c:	f007 fe84 	bl	cf78 <__aeabi_fmul>
    5270:	f007 fc5e 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5274:	9500      	str	r5, [sp, #0]
    5276:	4602      	mov	r2, r0
    5278:	460b      	mov	r3, r1
    527a:	48a3      	ldr	r0, [pc, #652]	; (5508 <menu()+0x15bc>)
    527c:	f004 fa78 	bl	9770 <Print::printFloat(double, unsigned char)>
    5280:	2102      	movs	r1, #2
    5282:	48a8      	ldr	r0, [pc, #672]	; (5524 <menu()+0x15d8>)
    5284:	f006 ff98 	bl	c1b8 <usb_serial_write>
    5288:	2102      	movs	r1, #2
    528a:	48a7      	ldr	r0, [pc, #668]	; (5528 <menu()+0x15dc>)
    528c:	f006 ff94 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5290:	489d      	ldr	r0, [pc, #628]	; (5508 <menu()+0x15bc>)
    5292:	f004 fa49 	bl	9728 <Print::println()>
    5296:	2121      	movs	r1, #33	; 0x21
    5298:	48a4      	ldr	r0, [pc, #656]	; (552c <menu()+0x15e0>)
    529a:	f006 ff8d 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderVSetpoint * 1000, 0);
    529e:	6930      	ldr	r0, [r6, #16]
    52a0:	499f      	ldr	r1, [pc, #636]	; (5520 <menu()+0x15d4>)
    52a2:	f007 fe69 	bl	cf78 <__aeabi_fmul>
    52a6:	f007 fc43 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    52aa:	9500      	str	r5, [sp, #0]
    52ac:	4602      	mov	r2, r0
    52ae:	460b      	mov	r3, r1
    52b0:	4895      	ldr	r0, [pc, #596]	; (5508 <menu()+0x15bc>)
    52b2:	f004 fa5d 	bl	9770 <Print::printFloat(double, unsigned char)>
    52b6:	2102      	movs	r1, #2
    52b8:	489a      	ldr	r0, [pc, #616]	; (5524 <menu()+0x15d8>)
    52ba:	f006 ff7d 	bl	c1b8 <usb_serial_write>
    52be:	2102      	movs	r1, #2
    52c0:	4899      	ldr	r0, [pc, #612]	; (5528 <menu()+0x15dc>)
    52c2:	f006 ff79 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    52c6:	4890      	ldr	r0, [pc, #576]	; (5508 <menu()+0x15bc>)
    52c8:	f004 fa2e 	bl	9728 <Print::println()>
    52cc:	211f      	movs	r1, #31
    52ce:	4898      	ldr	r0, [pc, #608]	; (5530 <menu()+0x15e4>)
    52d0:	f006 ff72 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.OverTSetpoint);
    52d4:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    52d6:	f007 fc2b 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    52da:	2702      	movs	r7, #2
    52dc:	4602      	mov	r2, r0
    52de:	460b      	mov	r3, r1
    52e0:	4889      	ldr	r0, [pc, #548]	; (5508 <menu()+0x15bc>)
    52e2:	9700      	str	r7, [sp, #0]
    52e4:	f004 fa44 	bl	9770 <Print::printFloat(double, unsigned char)>
    52e8:	2101      	movs	r1, #1
    52ea:	4892      	ldr	r0, [pc, #584]	; (5534 <menu()+0x15e8>)
    52ec:	f006 ff64 	bl	c1b8 <usb_serial_write>
    52f0:	4639      	mov	r1, r7
    52f2:	488d      	ldr	r0, [pc, #564]	; (5528 <menu()+0x15dc>)
    52f4:	f006 ff60 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    52f8:	4883      	ldr	r0, [pc, #524]	; (5508 <menu()+0x15bc>)
    52fa:	f004 fa15 	bl	9728 <Print::println()>
    52fe:	2120      	movs	r1, #32
    5300:	488d      	ldr	r0, [pc, #564]	; (5538 <menu()+0x15ec>)
    5302:	f006 ff59 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.UnderTSetpoint);
    5306:	6af0      	ldr	r0, [r6, #44]	; 0x2c
    5308:	f007 fc12 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    530c:	9700      	str	r7, [sp, #0]
    530e:	4602      	mov	r2, r0
    5310:	460b      	mov	r3, r1
    5312:	487d      	ldr	r0, [pc, #500]	; (5508 <menu()+0x15bc>)
    5314:	f004 fa2c 	bl	9770 <Print::printFloat(double, unsigned char)>
    5318:	2101      	movs	r1, #1
    531a:	4886      	ldr	r0, [pc, #536]	; (5534 <menu()+0x15e8>)
    531c:	f006 ff4c 	bl	c1b8 <usb_serial_write>
    5320:	4639      	mov	r1, r7
    5322:	4881      	ldr	r0, [pc, #516]	; (5528 <menu()+0x15dc>)
    5324:	f006 ff48 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5328:	4877      	ldr	r0, [pc, #476]	; (5508 <menu()+0x15bc>)
    532a:	f004 f9fd 	bl	9728 <Print::println()>
    532e:	2123      	movs	r1, #35	; 0x23
    5330:	4882      	ldr	r0, [pc, #520]	; (553c <menu()+0x15f0>)
    5332:	f006 ff41 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceVoltage * 1000, 0);
    5336:	6cb0      	ldr	r0, [r6, #72]	; 0x48
    5338:	4979      	ldr	r1, [pc, #484]	; (5520 <menu()+0x15d4>)
    533a:	f007 fe1d 	bl	cf78 <__aeabi_fmul>
    533e:	f007 fbf7 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5342:	9500      	str	r5, [sp, #0]
    5344:	4602      	mov	r2, r0
    5346:	460b      	mov	r3, r1
    5348:	486f      	ldr	r0, [pc, #444]	; (5508 <menu()+0x15bc>)
    534a:	f004 fa11 	bl	9770 <Print::printFloat(double, unsigned char)>
    534e:	4639      	mov	r1, r7
    5350:	4874      	ldr	r0, [pc, #464]	; (5524 <menu()+0x15d8>)
    5352:	f006 ff31 	bl	c1b8 <usb_serial_write>
    5356:	4639      	mov	r1, r7
    5358:	4873      	ldr	r0, [pc, #460]	; (5528 <menu()+0x15dc>)
    535a:	f006 ff2d 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    535e:	486a      	ldr	r0, [pc, #424]	; (5508 <menu()+0x15bc>)
    5360:	f004 f9e2 	bl	9728 <Print::println()>
    5364:	211f      	movs	r1, #31
    5366:	4876      	ldr	r0, [pc, #472]	; (5540 <menu()+0x15f4>)
    5368:	f006 ff26 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.balanceHyst * 1000, 0);
    536c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    536e:	496c      	ldr	r1, [pc, #432]	; (5520 <menu()+0x15d4>)
    5370:	f007 fe02 	bl	cf78 <__aeabi_fmul>
    5374:	f007 fbdc 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5378:	9500      	str	r5, [sp, #0]
    537a:	4602      	mov	r2, r0
    537c:	460b      	mov	r3, r1
    537e:	4862      	ldr	r0, [pc, #392]	; (5508 <menu()+0x15bc>)
    5380:	f004 f9f6 	bl	9770 <Print::printFloat(double, unsigned char)>
    5384:	4639      	mov	r1, r7
    5386:	4867      	ldr	r0, [pc, #412]	; (5524 <menu()+0x15d8>)
    5388:	f006 ff16 	bl	c1b8 <usb_serial_write>
    538c:	4639      	mov	r1, r7
    538e:	4866      	ldr	r0, [pc, #408]	; (5528 <menu()+0x15dc>)
    5390:	f006 ff12 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5394:	485c      	ldr	r0, [pc, #368]	; (5508 <menu()+0x15bc>)
    5396:	f004 f9c7 	bl	9728 <Print::println()>
    539a:	2119      	movs	r1, #25
    539c:	4869      	ldr	r0, [pc, #420]	; (5544 <menu()+0x15f8>)
    539e:	f006 ff0b 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    53a2:	6df1      	ldr	r1, [r6, #92]	; 0x5c
    53a4:	4858      	ldr	r0, [pc, #352]	; (5508 <menu()+0x15bc>)
    53a6:	f004 f9b7 	bl	9718 <Print::print(long)>
    53aa:	4639      	mov	r1, r7
    53ac:	4866      	ldr	r0, [pc, #408]	; (5548 <menu()+0x15fc>)
    53ae:	f006 ff03 	bl	c1b8 <usb_serial_write>
    53b2:	4639      	mov	r1, r7
    53b4:	485c      	ldr	r0, [pc, #368]	; (5528 <menu()+0x15dc>)
    53b6:	f006 feff 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    53ba:	4853      	ldr	r0, [pc, #332]	; (5508 <menu()+0x15bc>)
    53bc:	f004 f9b4 	bl	9728 <Print::println()>
    53c0:	2118      	movs	r1, #24
    53c2:	4862      	ldr	r0, [pc, #392]	; (554c <menu()+0x1600>)
    53c4:	f006 fef8 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.discurrentmax * 0.1);
    53c8:	6eb0      	ldr	r0, [r6, #104]	; 0x68
    53ca:	f007 fd81 	bl	ced0 <__aeabi_i2f>
    53ce:	4960      	ldr	r1, [pc, #384]	; (5550 <menu()+0x1604>)
    53d0:	f007 fdd2 	bl	cf78 <__aeabi_fmul>
    53d4:	f007 fbac 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    53d8:	9700      	str	r7, [sp, #0]
    53da:	4602      	mov	r2, r0
    53dc:	460b      	mov	r3, r1
    53de:	484a      	ldr	r0, [pc, #296]	; (5508 <menu()+0x15bc>)
    53e0:	f004 f9c6 	bl	9770 <Print::printFloat(double, unsigned char)>
    53e4:	2101      	movs	r1, #1
    53e6:	485b      	ldr	r0, [pc, #364]	; (5554 <menu()+0x1608>)
    53e8:	f006 fee6 	bl	c1b8 <usb_serial_write>
    53ec:	4639      	mov	r1, r7
    53ee:	484e      	ldr	r0, [pc, #312]	; (5528 <menu()+0x15dc>)
    53f0:	f006 fee2 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    53f4:	4844      	ldr	r0, [pc, #272]	; (5508 <menu()+0x15bc>)
    53f6:	f004 f997 	bl	9728 <Print::println()>
    53fa:	212b      	movs	r1, #43	; 0x2b
    53fc:	4856      	ldr	r0, [pc, #344]	; (5558 <menu()+0x160c>)
    53fe:	f006 fedb 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischVsetpoint * 1000, 0);
    5402:	69b0      	ldr	r0, [r6, #24]
    5404:	4946      	ldr	r1, [pc, #280]	; (5520 <menu()+0x15d4>)
    5406:	f007 fdb7 	bl	cf78 <__aeabi_fmul>
    540a:	f007 fb91 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    540e:	9500      	str	r5, [sp, #0]
    5410:	4602      	mov	r2, r0
    5412:	460b      	mov	r3, r1
    5414:	483c      	ldr	r0, [pc, #240]	; (5508 <menu()+0x15bc>)
    5416:	f004 f9ab 	bl	9770 <Print::printFloat(double, unsigned char)>
    541a:	4639      	mov	r1, r7
    541c:	4841      	ldr	r0, [pc, #260]	; (5524 <menu()+0x15d8>)
    541e:	f006 fecb 	bl	c1b8 <usb_serial_write>
    5422:	4639      	mov	r1, r7
    5424:	4840      	ldr	r0, [pc, #256]	; (5528 <menu()+0x15dc>)
    5426:	f006 fec7 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    542a:	4837      	ldr	r0, [pc, #220]	; (5508 <menu()+0x15bc>)
    542c:	f004 f97c 	bl	9728 <Print::println()>
    5430:	211f      	movs	r1, #31
    5432:	484a      	ldr	r0, [pc, #296]	; (555c <menu()+0x1610>)
    5434:	f006 fec0 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5438:	6db1      	ldr	r1, [r6, #88]	; 0x58
    543a:	4833      	ldr	r0, [pc, #204]	; (5508 <menu()+0x15bc>)
    543c:	f004 f96c 	bl	9718 <Print::print(long)>
    5440:	4639      	mov	r1, r7
    5442:	4839      	ldr	r0, [pc, #228]	; (5528 <menu()+0x15dc>)
    5444:	f006 feb8 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5448:	482f      	ldr	r0, [pc, #188]	; (5508 <menu()+0x15bc>)
    544a:	f004 f96d 	bl	9728 <Print::println()>
    544e:	2120      	movs	r1, #32
    5450:	4843      	ldr	r0, [pc, #268]	; (5560 <menu()+0x1614>)
    5452:	f006 feb1 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5456:	6d71      	ldr	r1, [r6, #84]	; 0x54
    5458:	482b      	ldr	r0, [pc, #172]	; (5508 <menu()+0x15bc>)
    545a:	f004 f95d 	bl	9718 <Print::print(long)>
    545e:	4639      	mov	r1, r7
    5460:	4831      	ldr	r0, [pc, #196]	; (5528 <menu()+0x15dc>)
    5462:	f006 fea9 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5466:	4828      	ldr	r0, [pc, #160]	; (5508 <menu()+0x15bc>)
    5468:	f004 f95e 	bl	9728 <Print::println()>
    546c:	2110      	movs	r1, #16
    546e:	483d      	ldr	r0, [pc, #244]	; (5564 <menu()+0x1618>)
    5470:	f006 fea2 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5474:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
    5476:	4824      	ldr	r0, [pc, #144]	; (5508 <menu()+0x15bc>)
    5478:	f004 f94e 	bl	9718 <Print::print(long)>
    547c:	4639      	mov	r1, r7
    547e:	4829      	ldr	r0, [pc, #164]	; (5524 <menu()+0x15d8>)
    5480:	f006 fe9a 	bl	c1b8 <usb_serial_write>
    5484:	4639      	mov	r1, r7
    5486:	4828      	ldr	r0, [pc, #160]	; (5528 <menu()+0x15dc>)
    5488:	f006 fe96 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    548c:	481e      	ldr	r0, [pc, #120]	; (5508 <menu()+0x15bc>)
    548e:	f004 f94b 	bl	9728 <Print::println()>
    5492:	2113      	movs	r1, #19
    5494:	4834      	ldr	r0, [pc, #208]	; (5568 <menu()+0x161c>)
    5496:	f006 fe8f 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    549a:	6f31      	ldr	r1, [r6, #112]	; 0x70
    549c:	481a      	ldr	r0, [pc, #104]	; (5508 <menu()+0x15bc>)
    549e:	f004 f93b 	bl	9718 <Print::print(long)>
    54a2:	2101      	movs	r1, #1
    54a4:	4831      	ldr	r0, [pc, #196]	; (556c <menu()+0x1620>)
    54a6:	f006 fe87 	bl	c1b8 <usb_serial_write>
    54aa:	4639      	mov	r1, r7
    54ac:	481e      	ldr	r0, [pc, #120]	; (5528 <menu()+0x15dc>)
    54ae:	f006 fe83 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    54b2:	4815      	ldr	r0, [pc, #84]	; (5508 <menu()+0x15bc>)
    54b4:	f004 f938 	bl	9728 <Print::println()>
    54b8:	2110      	movs	r1, #16
    54ba:	482d      	ldr	r0, [pc, #180]	; (5570 <menu()+0x1624>)
    54bc:	f006 fe7c 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    54c0:	6f71      	ldr	r1, [r6, #116]	; 0x74
    54c2:	4811      	ldr	r0, [pc, #68]	; (5508 <menu()+0x15bc>)
    54c4:	f004 f928 	bl	9718 <Print::print(long)>
    54c8:	4639      	mov	r1, r7
    54ca:	4816      	ldr	r0, [pc, #88]	; (5524 <menu()+0x15d8>)
    54cc:	f006 fe74 	bl	c1b8 <usb_serial_write>
    54d0:	4639      	mov	r1, r7
    54d2:	4815      	ldr	r0, [pc, #84]	; (5528 <menu()+0x15dc>)
    54d4:	f006 fe70 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    54d8:	480b      	ldr	r0, [pc, #44]	; (5508 <menu()+0x15bc>)
    54da:	f004 f925 	bl	9728 <Print::println()>
    54de:	2114      	movs	r1, #20
    54e0:	4824      	ldr	r0, [pc, #144]	; (5574 <menu()+0x1628>)
    54e2:	f006 fe69 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    54e6:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    54e8:	4807      	ldr	r0, [pc, #28]	; (5508 <menu()+0x15bc>)
    54ea:	f004 f915 	bl	9718 <Print::print(long)>
    54ee:	2101      	movs	r1, #1
    54f0:	481e      	ldr	r0, [pc, #120]	; (556c <menu()+0x1620>)
    54f2:	f006 fe61 	bl	c1b8 <usb_serial_write>
    54f6:	4639      	mov	r1, r7
    54f8:	480b      	ldr	r0, [pc, #44]	; (5528 <menu()+0x15dc>)
    54fa:	f006 fe5d 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    54fe:	4802      	ldr	r0, [pc, #8]	; (5508 <menu()+0x15bc>)
    5500:	f004 f912 	bl	9728 <Print::println()>
    5504:	2116      	movs	r1, #22
    5506:	e037      	b.n	5578 <menu()+0x162c>
    5508:	1fff89fc 	.word	0x1fff89fc
    550c:	00014b7c 	.word	0x00014b7c
    5510:	00014b94 	.word	0x00014b94
    5514:	00014bac 	.word	0x00014bac
    5518:	000144d8 	.word	0x000144d8
    551c:	00014bc8 	.word	0x00014bc8
    5520:	447a0000 	.word	0x447a0000
    5524:	000144d4 	.word	0x000144d4
    5528:	00014fa8 	.word	0x00014fa8
    552c:	00014bec 	.word	0x00014bec
    5530:	00014c10 	.word	0x00014c10
    5534:	00014c30 	.word	0x00014c30
    5538:	00014c34 	.word	0x00014c34
    553c:	00014c58 	.word	0x00014c58
    5540:	00014c7c 	.word	0x00014c7c
    5544:	00014c9c 	.word	0x00014c9c
    5548:	00014cb8 	.word	0x00014cb8
    554c:	00014cbc 	.word	0x00014cbc
    5550:	3dcccccd 	.word	0x3dcccccd
    5554:	00014a98 	.word	0x00014a98
    5558:	00014cd8 	.word	0x00014cd8
    555c:	00014d04 	.word	0x00014d04
    5560:	00014d24 	.word	0x00014d24
    5564:	00014d48 	.word	0x00014d48
    5568:	00014d5c 	.word	0x00014d5c
    556c:	00014d70 	.word	0x00014d70
    5570:	00014d74 	.word	0x00014d74
    5574:	00014d88 	.word	0x00014d88
    5578:	48b8      	ldr	r0, [pc, #736]	; (585c <menu()+0x1910>)
    557a:	f006 fe1d 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.StoreVsetpoint * 1000, 0);
    557e:	6a30      	ldr	r0, [r6, #32]
    5580:	49b7      	ldr	r1, [pc, #732]	; (5860 <menu()+0x1914>)
    5582:	f007 fcf9 	bl	cf78 <__aeabi_fmul>
    5586:	f007 fad3 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    558a:	9500      	str	r5, [sp, #0]
    558c:	4602      	mov	r2, r0
    558e:	460b      	mov	r3, r1
    5590:	48b4      	ldr	r0, [pc, #720]	; (5864 <menu()+0x1918>)
    5592:	f004 f8ed 	bl	9770 <Print::printFloat(double, unsigned char)>
    5596:	4639      	mov	r1, r7
    5598:	48b3      	ldr	r0, [pc, #716]	; (5868 <menu()+0x191c>)
    559a:	f006 fe0d 	bl	c1b8 <usb_serial_write>
    559e:	4639      	mov	r1, r7
    55a0:	48b2      	ldr	r0, [pc, #712]	; (586c <menu()+0x1920>)
    55a2:	f006 fe09 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    55a6:	48af      	ldr	r0, [pc, #700]	; (5864 <menu()+0x1918>)
    55a8:	f004 f8be 	bl	9728 <Print::println()>
    55ac:	2124      	movs	r1, #36	; 0x24
    55ae:	48b0      	ldr	r0, [pc, #704]	; (5870 <menu()+0x1924>)
    55b0:	f006 fe02 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTaper * 1000, 0);
    55b4:	f8d6 00c4 	ldr.w	r0, [r6, #196]	; 0xc4
    55b8:	49a9      	ldr	r1, [pc, #676]	; (5860 <menu()+0x1914>)
    55ba:	f007 fcdd 	bl	cf78 <__aeabi_fmul>
    55be:	f007 fab7 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    55c2:	9500      	str	r5, [sp, #0]
    55c4:	4602      	mov	r2, r0
    55c6:	460b      	mov	r3, r1
    55c8:	48a6      	ldr	r0, [pc, #664]	; (5864 <menu()+0x1918>)
    55ca:	f004 f8d1 	bl	9770 <Print::printFloat(double, unsigned char)>
    55ce:	4639      	mov	r1, r7
    55d0:	48a5      	ldr	r0, [pc, #660]	; (5868 <menu()+0x191c>)
    55d2:	f006 fdf1 	bl	c1b8 <usb_serial_write>
    55d6:	4639      	mov	r1, r7
    55d8:	48a4      	ldr	r0, [pc, #656]	; (586c <menu()+0x1920>)
    55da:	f006 fded 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    55de:	48a1      	ldr	r0, [pc, #644]	; (5864 <menu()+0x1918>)
    55e0:	f004 f8a2 	bl	9728 <Print::println()>
    55e4:	212b      	movs	r1, #43	; 0x2b
    55e6:	48a3      	ldr	r0, [pc, #652]	; (5874 <menu()+0x1928>)
    55e8:	f006 fde6 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.DisTSetpoint);
    55ec:	6b70      	ldr	r0, [r6, #52]	; 0x34
    55ee:	f007 fa9f 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    55f2:	9700      	str	r7, [sp, #0]
    55f4:	4602      	mov	r2, r0
    55f6:	460b      	mov	r3, r1
    55f8:	489a      	ldr	r0, [pc, #616]	; (5864 <menu()+0x1918>)
    55fa:	f004 f8b9 	bl	9770 <Print::printFloat(double, unsigned char)>
    55fe:	2101      	movs	r1, #1
    5600:	489d      	ldr	r0, [pc, #628]	; (5878 <menu()+0x192c>)
    5602:	f006 fdd9 	bl	c1b8 <usb_serial_write>
    5606:	4639      	mov	r1, r7
    5608:	4898      	ldr	r0, [pc, #608]	; (586c <menu()+0x1920>)
    560a:	f006 fdd5 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    560e:	4895      	ldr	r0, [pc, #596]	; (5864 <menu()+0x1918>)
    5610:	f004 f88a 	bl	9728 <Print::println()>
    5614:	2127      	movs	r1, #39	; 0x27
    5616:	4899      	ldr	r0, [pc, #612]	; (587c <menu()+0x1930>)
    5618:	f006 fdce 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.print(settings.DischHys * 1000, 0);
    561c:	f8d6 00cc 	ldr.w	r0, [r6, #204]	; 0xcc
    5620:	498f      	ldr	r1, [pc, #572]	; (5860 <menu()+0x1914>)
    5622:	f007 fca9 	bl	cf78 <__aeabi_fmul>
    5626:	f007 fa83 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    562a:	9500      	str	r5, [sp, #0]
    562c:	460b      	mov	r3, r1
    562e:	4602      	mov	r2, r0
    5630:	488c      	ldr	r0, [pc, #560]	; (5864 <menu()+0x1918>)
    5632:	f004 f89d 	bl	9770 <Print::printFloat(double, unsigned char)>
    5636:	4639      	mov	r1, r7
    5638:	488b      	ldr	r0, [pc, #556]	; (5868 <menu()+0x191c>)
    563a:	f006 fdbd 	bl	c1b8 <usb_serial_write>
        SERIALCONSOLE.println();
    563e:	4889      	ldr	r0, [pc, #548]	; (5864 <menu()+0x1918>)
    5640:	f004 f872 	bl	9728 <Print::println()>
        menuload = 3;
    5644:	2303      	movs	r3, #3
    5646:	6023      	str	r3, [r4, #0]
        break;
    5648:	f7fe bce6 	b.w	4018 <menu()+0xcc>
    switch (incomingByte) {
    564c:	2871      	cmp	r0, #113	; 0x71
    564e:	f47f a9cf 	bne.w	49f0 <menu()+0xaa4>
        gaugedebug = 0;
    5652:	4a8b      	ldr	r2, [pc, #556]	; (5880 <menu()+0x1934>)
    5654:	2300      	movs	r3, #0
          incomingByte = 'k';
    5656:	2073      	movs	r0, #115	; 0x73
        gaugedebug = 0;
    5658:	6013      	str	r3, [r2, #0]
          menuload = 1;
    565a:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    565c:	6028      	str	r0, [r5, #0]
  if (menuload == 1) {
    565e:	f7fe bcd2 	b.w	4006 <menu()+0xba>
        virtual int available() { return usb_serial_available(); }
    5662:	f006 fd77 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    5666:	2800      	cmp	r0, #0
    5668:	dd0d      	ble.n	5686 <menu()+0x173a>
          settings.StoreVsetpoint = Serial.parseInt();
    566a:	487e      	ldr	r0, [pc, #504]	; (5864 <menu()+0x1918>)
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    566c:	4e85      	ldr	r6, [pc, #532]	; (5884 <menu()+0x1938>)
          settings.StoreVsetpoint = Serial.parseInt();
    566e:	f004 f9bb 	bl	99e8 <Stream::parseInt()>
    5672:	f007 fc2d 	bl	ced0 <__aeabi_i2f>
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    5676:	497a      	ldr	r1, [pc, #488]	; (5860 <menu()+0x1914>)
    5678:	f007 fd32 	bl	d0e0 <__aeabi_fdiv>
          menuload = 1;
    567c:	2201      	movs	r2, #1
          incomingByte = 'b';
    567e:	2362      	movs	r3, #98	; 0x62
          settings.StoreVsetpoint = settings.StoreVsetpoint / 1000;
    5680:	6230      	str	r0, [r6, #32]
          menuload = 1;
    5682:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    5684:	602b      	str	r3, [r5, #0]
    5686:	f006 fd65 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    568a:	2800      	cmp	r0, #0
    568c:	dd0e      	ble.n	56ac <menu()+0x1760>
          settings.DisTaper = Serial.parseInt();
    568e:	4875      	ldr	r0, [pc, #468]	; (5864 <menu()+0x1918>)
          settings.DisTaper = settings.DisTaper / 1000;
    5690:	4e7c      	ldr	r6, [pc, #496]	; (5884 <menu()+0x1938>)
          settings.DisTaper = Serial.parseInt();
    5692:	f004 f9a9 	bl	99e8 <Stream::parseInt()>
    5696:	f007 fc1b 	bl	ced0 <__aeabi_i2f>
          settings.DisTaper = settings.DisTaper / 1000;
    569a:	4971      	ldr	r1, [pc, #452]	; (5860 <menu()+0x1914>)
    569c:	f007 fd20 	bl	d0e0 <__aeabi_fdiv>
          menuload = 1;
    56a0:	2201      	movs	r2, #1
          incomingByte = 'b';
    56a2:	2362      	movs	r3, #98	; 0x62
          settings.DisTaper = settings.DisTaper / 1000;
    56a4:	f8c6 00c4 	str.w	r0, [r6, #196]	; 0xc4
          menuload = 1;
    56a8:	6022      	str	r2, [r4, #0]
          incomingByte = 'b';
    56aa:	602b      	str	r3, [r5, #0]
    56ac:	f006 fd52 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    56b0:	2800      	cmp	r0, #0
    56b2:	dc18      	bgt.n	56e6 <menu()+0x179a>
  if (menuload == 1) {
    56b4:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    56b6:	6828      	ldr	r0, [r5, #0]
  if (menuload == 1) {
    56b8:	2b01      	cmp	r3, #1
    56ba:	f47e aca4 	bne.w	4006 <menu()+0xba>
    56be:	f7fe bfab 	b.w	4618 <menu()+0x6cc>
  if (menuload == 7) {
    56c2:	2b07      	cmp	r3, #7
    56c4:	f43f a8da 	beq.w	487c <menu()+0x930>
  if (menuload == 6)  //Charging settings
    56c8:	2b06      	cmp	r3, #6
    56ca:	f04f 0064 	mov.w	r0, #100	; 0x64
    56ce:	f43f acb8 	beq.w	5042 <menu()+0x10f6>
  if (menuload == 5) {
    56d2:	2b05      	cmp	r3, #5
    56d4:	f43f a98c 	beq.w	49f0 <menu()+0xaa4>
    56d8:	f7ff ba25 	b.w	4b26 <menu()+0xbda>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    56dc:	2114      	movs	r1, #20
    56de:	486a      	ldr	r0, [pc, #424]	; (5888 <menu()+0x193c>)
    56e0:	f006 fd6a 	bl	c1b8 <usb_serial_write>
    56e4:	e4db      	b.n	509e <menu()+0x1152>
          settings.socvolt[0] = Serial.parseInt();
    56e6:	485f      	ldr	r0, [pc, #380]	; (5864 <menu()+0x1918>)
    56e8:	4e66      	ldr	r6, [pc, #408]	; (5884 <menu()+0x1938>)
    56ea:	f004 f97d 	bl	99e8 <Stream::parseInt()>
    56ee:	66f0      	str	r0, [r6, #108]	; 0x6c
        menuload = 1;
    56f0:	2201      	movs	r2, #1
        incomingByte = 'b';
    56f2:	2362      	movs	r3, #98	; 0x62
        menuload = 1;
    56f4:	6022      	str	r2, [r4, #0]
        incomingByte = 'b';
    56f6:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    56f8:	e57c      	b.n	51f4 <menu()+0x12a8>
    56fa:	211c      	movs	r1, #28
    56fc:	4863      	ldr	r0, [pc, #396]	; (588c <menu()+0x1940>)
    56fe:	f006 fd5b 	bl	c1b8 <usb_serial_write>
          SERIALCONSOLE.print(settings.convlow * 0.1, 1);
    5702:	f8d6 0094 	ldr.w	r0, [r6, #148]	; 0x94
    5706:	4962      	ldr	r1, [pc, #392]	; (5890 <menu()+0x1944>)
    5708:	f007 fc36 	bl	cf78 <__aeabi_fmul>
    570c:	f007 fa10 	bl	cb30 <__aeabi_f2d>
    5710:	9700      	str	r7, [sp, #0]
    5712:	4602      	mov	r2, r0
    5714:	460b      	mov	r3, r1
    5716:	4853      	ldr	r0, [pc, #332]	; (5864 <menu()+0x1918>)
    5718:	f004 f82a 	bl	9770 <Print::printFloat(double, unsigned char)>
    571c:	2105      	movs	r1, #5
    571e:	485d      	ldr	r0, [pc, #372]	; (5894 <menu()+0x1948>)
    5720:	f006 fd4a 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    5724:	484f      	ldr	r0, [pc, #316]	; (5864 <menu()+0x1918>)
    5726:	f003 ffff 	bl	9728 <Print::println()>
        if (settings.cursens == Analoguedual) {
    572a:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    572e:	2d01      	cmp	r5, #1
    5730:	d119      	bne.n	5766 <menu()+0x181a>
    5732:	211d      	movs	r1, #29
    5734:	4858      	ldr	r0, [pc, #352]	; (5898 <menu()+0x194c>)
    5736:	f006 fd3f 	bl	c1b8 <usb_serial_write>
          SERIALCONSOLE.print(settings.convhigh * 0.1, 1);
    573a:	f8d6 0090 	ldr.w	r0, [r6, #144]	; 0x90
    573e:	4954      	ldr	r1, [pc, #336]	; (5890 <menu()+0x1944>)
    5740:	f007 fc1a 	bl	cf78 <__aeabi_fmul>
    5744:	f007 f9f4 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    5748:	9500      	str	r5, [sp, #0]
    574a:	4602      	mov	r2, r0
    574c:	460b      	mov	r3, r1
    574e:	4845      	ldr	r0, [pc, #276]	; (5864 <menu()+0x1918>)
    5750:	f004 f80e 	bl	9770 <Print::printFloat(double, unsigned char)>
    5754:	2105      	movs	r1, #5
    5756:	484f      	ldr	r0, [pc, #316]	; (5894 <menu()+0x1948>)
    5758:	f006 fd2e 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    575c:	4841      	ldr	r0, [pc, #260]	; (5864 <menu()+0x1918>)
    575e:	f003 ffe3 	bl	9728 <Print::println()>
        if (settings.cursens == Analoguesing || settings.cursens == Analoguedual) {
    5762:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    5766:	f025 0302 	bic.w	r3, r5, #2
    576a:	2b01      	cmp	r3, #1
    576c:	f47f a90e 	bne.w	498c <menu()+0xa40>
    5770:	211c      	movs	r1, #28
    5772:	484a      	ldr	r0, [pc, #296]	; (589c <menu()+0x1950>)
    5774:	f006 fd20 	bl	c1b8 <usb_serial_write>
	size_t print(int n)				{ return print((long)n); }
    5778:	f8b6 10c2 	ldrh.w	r1, [r6, #194]	; 0xc2
    577c:	4839      	ldr	r0, [pc, #228]	; (5864 <menu()+0x1918>)
    577e:	f003 ffcb 	bl	9718 <Print::print(long)>
    5782:	2103      	movs	r1, #3
    5784:	4846      	ldr	r0, [pc, #280]	; (58a0 <menu()+0x1954>)
    5786:	f006 fd17 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    578a:	4836      	ldr	r0, [pc, #216]	; (5864 <menu()+0x1918>)
    578c:	f003 ffcc 	bl	9728 <Print::println()>
        if (settings.cursens == Analoguedual) {
    5790:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    5794:	2d01      	cmp	r5, #1
    5796:	f47f a8f9 	bne.w	498c <menu()+0xa40>
    579a:	211f      	movs	r1, #31
    579c:	4841      	ldr	r0, [pc, #260]	; (58a4 <menu()+0x1958>)
    579e:	f006 fd0b 	bl	c1b8 <usb_serial_write>
          SERIALCONSOLE.print(settings.changecur * 0.001);
    57a2:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
    57a6:	f007 fb93 	bl	ced0 <__aeabi_i2f>
    57aa:	493f      	ldr	r1, [pc, #252]	; (58a8 <menu()+0x195c>)
    57ac:	f007 fbe4 	bl	cf78 <__aeabi_fmul>
    57b0:	f007 f9be 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    57b4:	2502      	movs	r5, #2
    57b6:	4602      	mov	r2, r0
    57b8:	460b      	mov	r3, r1
    57ba:	9500      	str	r5, [sp, #0]
    57bc:	4829      	ldr	r0, [pc, #164]	; (5864 <menu()+0x1918>)
    57be:	f003 ffd7 	bl	9770 <Print::printFloat(double, unsigned char)>
    57c2:	4629      	mov	r1, r5
    57c4:	4839      	ldr	r0, [pc, #228]	; (58ac <menu()+0x1960>)
    57c6:	f006 fcf7 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    57ca:	4826      	ldr	r0, [pc, #152]	; (5864 <menu()+0x1918>)
    57cc:	f003 ffac 	bl	9728 <Print::println()>
        if (settings.cursens == Canbus) {
    57d0:	f8d6 5080 	ldr.w	r5, [r6, #128]	; 0x80
    57d4:	f7ff b8da 	b.w	498c <menu()+0xa40>
          settings.gaugehigh = Serial.parseInt();
    57d8:	4822      	ldr	r0, [pc, #136]	; (5864 <menu()+0x1918>)
    57da:	4e2a      	ldr	r6, [pc, #168]	; (5884 <menu()+0x1938>)
    57dc:	f004 f904 	bl	99e8 <Stream::parseInt()>
          gaugedebug = 3;
    57e0:	4b27      	ldr	r3, [pc, #156]	; (5880 <menu()+0x1934>)
          settings.gaugehigh = Serial.parseInt();
    57e2:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
          gaugedebug = 3;
    57e6:	2203      	movs	r2, #3
    57e8:	f7ff ba3b 	b.w	4c62 <menu()+0xd16>
        SOCreset = 1;
    57ec:	4b30      	ldr	r3, [pc, #192]	; (58b0 <menu()+0x1964>)
    57ee:	481f      	ldr	r0, [pc, #124]	; (586c <menu()+0x1920>)
    57f0:	2102      	movs	r1, #2
    57f2:	2201      	movs	r2, #1
    57f4:	601a      	str	r2, [r3, #0]
    57f6:	f006 fcdf 	bl	c1b8 <usb_serial_write>
    57fa:	481a      	ldr	r0, [pc, #104]	; (5864 <menu()+0x1918>)
    57fc:	f003 ff94 	bl	9728 <Print::println()>
    5800:	482c      	ldr	r0, [pc, #176]	; (58b4 <menu()+0x1968>)
    5802:	210b      	movs	r1, #11
    5804:	f006 fcd8 	bl	c1b8 <usb_serial_write>
    5808:	2102      	movs	r1, #2
    580a:	4818      	ldr	r0, [pc, #96]	; (586c <menu()+0x1920>)
    580c:	4e1d      	ldr	r6, [pc, #116]	; (5884 <menu()+0x1938>)
    580e:	f006 fcd3 	bl	c1b8 <usb_serial_write>
    5812:	4814      	ldr	r0, [pc, #80]	; (5864 <menu()+0x1918>)
    5814:	f003 ff88 	bl	9728 <Print::println()>
        break;
    5818:	e76a      	b.n	56f0 <menu()+0x17a4>
        virtual int available() { return usb_serial_available(); }
    581a:	f006 fc9b 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    581e:	2800      	cmp	r0, #0
    5820:	f77f af48 	ble.w	56b4 <menu()+0x1768>
          settings.socvolt[1] = Serial.parseInt();
    5824:	480f      	ldr	r0, [pc, #60]	; (5864 <menu()+0x1918>)
    5826:	4e17      	ldr	r6, [pc, #92]	; (5884 <menu()+0x1938>)
    5828:	f004 f8de 	bl	99e8 <Stream::parseInt()>
    582c:	6730      	str	r0, [r6, #112]	; 0x70
          incomingByte = 'b';
    582e:	e75f      	b.n	56f0 <menu()+0x17a4>
    5830:	f006 fc90 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    5834:	2800      	cmp	r0, #0
    5836:	f77f af3d 	ble.w	56b4 <menu()+0x1768>
          settings.socvolt[3] = Serial.parseInt();
    583a:	480a      	ldr	r0, [pc, #40]	; (5864 <menu()+0x1918>)
    583c:	4e11      	ldr	r6, [pc, #68]	; (5884 <menu()+0x1938>)
    583e:	f004 f8d3 	bl	99e8 <Stream::parseInt()>
    5842:	67b0      	str	r0, [r6, #120]	; 0x78
          incomingByte = 'b';
    5844:	e754      	b.n	56f0 <menu()+0x17a4>
    5846:	f006 fc85 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    584a:	2800      	cmp	r0, #0
    584c:	f77f af32 	ble.w	56b4 <menu()+0x1768>
          settings.socvolt[2] = Serial.parseInt();
    5850:	4804      	ldr	r0, [pc, #16]	; (5864 <menu()+0x1918>)
    5852:	4e0c      	ldr	r6, [pc, #48]	; (5884 <menu()+0x1938>)
    5854:	f004 f8c8 	bl	99e8 <Stream::parseInt()>
    5858:	6770      	str	r0, [r6, #116]	; 0x74
          incomingByte = 'b';
    585a:	e749      	b.n	56f0 <menu()+0x17a4>
    585c:	00014da0 	.word	0x00014da0
    5860:	447a0000 	.word	0x447a0000
    5864:	1fff89fc 	.word	0x1fff89fc
    5868:	000144d4 	.word	0x000144d4
    586c:	00014fa8 	.word	0x00014fa8
    5870:	00014db8 	.word	0x00014db8
    5874:	00014de0 	.word	0x00014de0
    5878:	00014c30 	.word	0x00014c30
    587c:	00014e0c 	.word	0x00014e0c
    5880:	1fffcfdc 	.word	0x1fffcfdc
    5884:	1fffd0d8 	.word	0x1fffd0d8
    5888:	00014664 	.word	0x00014664
    588c:	00014a74 	.word	0x00014a74
    5890:	3dcccccd 	.word	0x3dcccccd
    5894:	00014a94 	.word	0x00014a94
    5898:	00014a9c 	.word	0x00014a9c
    589c:	00014abc 	.word	0x00014abc
    58a0:	00014adc 	.word	0x00014adc
    58a4:	00014ae0 	.word	0x00014ae0
    58a8:	3a83126f 	.word	0x3a83126f
    58ac:	00014b00 	.word	0x00014b00
    58b0:	1fff91c8 	.word	0x1fff91c8
    58b4:	00014480 	.word	0x00014480
        loadSettings();
    58b8:	f7fc fdce 	bl	2458 <loadSettings()>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    58bc:	2102      	movs	r1, #2
    58be:	48b8      	ldr	r0, [pc, #736]	; (5ba0 <menu()+0x1c54>)
    58c0:	f006 fc7a 	bl	c1b8 <usb_serial_write>
    58c4:	48b7      	ldr	r0, [pc, #732]	; (5ba4 <menu()+0x1c58>)
    58c6:	f003 ff2f 	bl	9728 <Print::println()>
    58ca:	2102      	movs	r1, #2
    58cc:	48b4      	ldr	r0, [pc, #720]	; (5ba0 <menu()+0x1c54>)
    58ce:	f006 fc73 	bl	c1b8 <usb_serial_write>
    58d2:	48b4      	ldr	r0, [pc, #720]	; (5ba4 <menu()+0x1c58>)
    58d4:	f003 ff28 	bl	9728 <Print::println()>
    58d8:	2102      	movs	r1, #2
    58da:	48b1      	ldr	r0, [pc, #708]	; (5ba0 <menu()+0x1c54>)
    58dc:	f006 fc6c 	bl	c1b8 <usb_serial_write>
    58e0:	48b0      	ldr	r0, [pc, #704]	; (5ba4 <menu()+0x1c58>)
    58e2:	f003 ff21 	bl	9728 <Print::println()>
    58e6:	2117      	movs	r1, #23
    58e8:	48af      	ldr	r0, [pc, #700]	; (5ba8 <menu()+0x1c5c>)
    58ea:	f006 fc65 	bl	c1b8 <usb_serial_write>
    58ee:	48ad      	ldr	r0, [pc, #692]	; (5ba4 <menu()+0x1c58>)
    58f0:	f003 ff1a 	bl	9728 <Print::println()>
    58f4:	e788      	b.n	5808 <menu()+0x18bc>
        menuload = 0;
    58f6:	2200      	movs	r2, #0
        incomingByte = 115;
    58f8:	2373      	movs	r3, #115	; 0x73
    58fa:	4eac      	ldr	r6, [pc, #688]	; (5bac <menu()+0x1c60>)
        menuload = 0;
    58fc:	6022      	str	r2, [r4, #0]
        incomingByte = 115;
    58fe:	602b      	str	r3, [r5, #0]
  if (incomingByte == 115 & menuload == 0) {
    5900:	f7fe bc17 	b.w	4132 <menu()+0x1e6>
        virtual int available() { return usb_serial_available(); }
    5904:	f006 fc26 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    5908:	2800      	cmp	r0, #0
    590a:	f77f aed3 	ble.w	56b4 <menu()+0x1768>
          settings.DischHys = Serial.parseInt();
    590e:	48a5      	ldr	r0, [pc, #660]	; (5ba4 <menu()+0x1c58>)
          settings.DischHys = settings.DischHys / 1000;
    5910:	4ea7      	ldr	r6, [pc, #668]	; (5bb0 <menu()+0x1c64>)
          settings.DischHys = Serial.parseInt();
    5912:	f004 f869 	bl	99e8 <Stream::parseInt()>
    5916:	f007 fadb 	bl	ced0 <__aeabi_i2f>
          settings.DischHys = settings.DischHys / 1000;
    591a:	49a6      	ldr	r1, [pc, #664]	; (5bb4 <menu()+0x1c68>)
    591c:	f007 fbe0 	bl	d0e0 <__aeabi_fdiv>
    5920:	f8c6 00cc 	str.w	r0, [r6, #204]	; 0xcc
          incomingByte = 'b';
    5924:	e6e4      	b.n	56f0 <menu()+0x17a4>
    5926:	f006 fc15 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    592a:	2800      	cmp	r0, #0
    592c:	f77f aec2 	ble.w	56b4 <menu()+0x1768>
          settings.UnderVSetpoint = Serial.parseInt();
    5930:	489c      	ldr	r0, [pc, #624]	; (5ba4 <menu()+0x1c58>)
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    5932:	4e9f      	ldr	r6, [pc, #636]	; (5bb0 <menu()+0x1c64>)
          settings.UnderVSetpoint = Serial.parseInt();
    5934:	f004 f858 	bl	99e8 <Stream::parseInt()>
    5938:	f007 faca 	bl	ced0 <__aeabi_i2f>
          settings.UnderVSetpoint = settings.UnderVSetpoint / 1000;
    593c:	499d      	ldr	r1, [pc, #628]	; (5bb4 <menu()+0x1c68>)
    593e:	f007 fbcf 	bl	d0e0 <__aeabi_fdiv>
    5942:	6130      	str	r0, [r6, #16]
          incomingByte = 'b';
    5944:	e6d4      	b.n	56f0 <menu()+0x17a4>
    5946:	f006 fc05 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    594a:	2800      	cmp	r0, #0
    594c:	f77f aeb2 	ble.w	56b4 <menu()+0x1768>
          settings.Pstrings = Serial.parseInt();
    5950:	4894      	ldr	r0, [pc, #592]	; (5ba4 <menu()+0x1c58>)
    5952:	4e97      	ldr	r6, [pc, #604]	; (5bb0 <menu()+0x1c64>)
    5954:	f004 f848 	bl	99e8 <Stream::parseInt()>
          menuload = 1;
    5958:	2301      	movs	r3, #1
          settings.Pstrings = Serial.parseInt();
    595a:	4601      	mov	r1, r0
          menuload = 1;
    595c:	6023      	str	r3, [r4, #0]
          bms.setPstrings(settings.Pstrings);
    595e:	4896      	ldr	r0, [pc, #600]	; (5bb8 <menu()+0x1c6c>)
          settings.Pstrings = Serial.parseInt();
    5960:	65b1      	str	r1, [r6, #88]	; 0x58
          incomingByte = 'b';
    5962:	2362      	movs	r3, #98	; 0x62
    5964:	602b      	str	r3, [r5, #0]
          bms.setPstrings(settings.Pstrings);
    5966:	f7fc f833 	bl	19d0 <BMSModuleManager::setPstrings(int)>
  if (menuload == 1) {
    596a:	6823      	ldr	r3, [r4, #0]
    switch (incomingByte) {
    596c:	6828      	ldr	r0, [r5, #0]
    596e:	e6a3      	b.n	56b8 <menu()+0x176c>
    5970:	f006 fbf0 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    5974:	2800      	cmp	r0, #0
    5976:	f77f ae9d 	ble.w	56b4 <menu()+0x1768>
          settings.OverVSetpoint = Serial.parseInt();
    597a:	488a      	ldr	r0, [pc, #552]	; (5ba4 <menu()+0x1c58>)
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    597c:	4e8c      	ldr	r6, [pc, #560]	; (5bb0 <menu()+0x1c64>)
          settings.OverVSetpoint = Serial.parseInt();
    597e:	f004 f833 	bl	99e8 <Stream::parseInt()>
    5982:	f007 faa5 	bl	ced0 <__aeabi_i2f>
          settings.OverVSetpoint = settings.OverVSetpoint / 1000;
    5986:	498b      	ldr	r1, [pc, #556]	; (5bb4 <menu()+0x1c68>)
    5988:	f007 fbaa 	bl	d0e0 <__aeabi_fdiv>
    598c:	60f0      	str	r0, [r6, #12]
          incomingByte = 'b';
    598e:	e6af      	b.n	56f0 <menu()+0x17a4>
    5990:	f006 fbe0 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    5994:	2800      	cmp	r0, #0
    5996:	f77f ae8d 	ble.w	56b4 <menu()+0x1768>
          settings.Scells = Serial.parseInt();
    599a:	4882      	ldr	r0, [pc, #520]	; (5ba4 <menu()+0x1c58>)
    599c:	4e84      	ldr	r6, [pc, #528]	; (5bb0 <menu()+0x1c64>)
    599e:	f004 f823 	bl	99e8 <Stream::parseInt()>
    59a2:	6570      	str	r0, [r6, #84]	; 0x54
          incomingByte = 'b';
    59a4:	e6a4      	b.n	56f0 <menu()+0x17a4>
    59a6:	f006 fbd5 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    59aa:	2800      	cmp	r0, #0
    59ac:	f77f ae82 	ble.w	56b4 <menu()+0x1768>
          settings.DischVsetpoint = Serial.parseInt();
    59b0:	487c      	ldr	r0, [pc, #496]	; (5ba4 <menu()+0x1c58>)
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    59b2:	4e7f      	ldr	r6, [pc, #508]	; (5bb0 <menu()+0x1c64>)
          settings.DischVsetpoint = Serial.parseInt();
    59b4:	f004 f818 	bl	99e8 <Stream::parseInt()>
    59b8:	f007 fa8a 	bl	ced0 <__aeabi_i2f>
          settings.DischVsetpoint = settings.DischVsetpoint / 1000;
    59bc:	497d      	ldr	r1, [pc, #500]	; (5bb4 <menu()+0x1c68>)
    59be:	f007 fb8f 	bl	d0e0 <__aeabi_fdiv>
    59c2:	61b0      	str	r0, [r6, #24]
          incomingByte = 'b';
    59c4:	e694      	b.n	56f0 <menu()+0x17a4>
    59c6:	f006 fbc5 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    59ca:	2800      	cmp	r0, #0
    59cc:	f77f ae72 	ble.w	56b4 <menu()+0x1768>
          settings.discurrentmax = Serial.parseInt() * 10;
    59d0:	4874      	ldr	r0, [pc, #464]	; (5ba4 <menu()+0x1c58>)
    59d2:	4e77      	ldr	r6, [pc, #476]	; (5bb0 <menu()+0x1c64>)
    59d4:	f004 f808 	bl	99e8 <Stream::parseInt()>
    59d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    59dc:	0040      	lsls	r0, r0, #1
    59de:	66b0      	str	r0, [r6, #104]	; 0x68
          incomingByte = 'b';
    59e0:	e686      	b.n	56f0 <menu()+0x17a4>
    59e2:	f006 fbb7 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    59e6:	2800      	cmp	r0, #0
    59e8:	f77f ae64 	ble.w	56b4 <menu()+0x1768>
          settings.CAP = Serial.parseInt();
    59ec:	486d      	ldr	r0, [pc, #436]	; (5ba4 <menu()+0x1c58>)
    59ee:	4e70      	ldr	r6, [pc, #448]	; (5bb0 <menu()+0x1c64>)
    59f0:	f003 fffa 	bl	99e8 <Stream::parseInt()>
    59f4:	65f0      	str	r0, [r6, #92]	; 0x5c
          incomingByte = 'b';
    59f6:	e67b      	b.n	56f0 <menu()+0x17a4>
    59f8:	f006 fbac 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    59fc:	2800      	cmp	r0, #0
    59fe:	f77f ae59 	ble.w	56b4 <menu()+0x1768>
          settings.balanceHyst = Serial.parseInt();
    5a02:	4868      	ldr	r0, [pc, #416]	; (5ba4 <menu()+0x1c58>)
          settings.balanceHyst = settings.balanceHyst / 1000;
    5a04:	4e6a      	ldr	r6, [pc, #424]	; (5bb0 <menu()+0x1c64>)
          settings.balanceHyst = Serial.parseInt();
    5a06:	f003 ffef 	bl	99e8 <Stream::parseInt()>
    5a0a:	f007 fa61 	bl	ced0 <__aeabi_i2f>
          settings.balanceHyst = settings.balanceHyst / 1000;
    5a0e:	4969      	ldr	r1, [pc, #420]	; (5bb4 <menu()+0x1c68>)
    5a10:	f007 fb66 	bl	d0e0 <__aeabi_fdiv>
          menuload = 1;
    5a14:	2301      	movs	r3, #1
          settings.balanceHyst = settings.balanceHyst / 1000;
    5a16:	4601      	mov	r1, r0
    5a18:	64f0      	str	r0, [r6, #76]	; 0x4c
          bms.setBalanceHyst(settings.balanceHyst);
    5a1a:	4867      	ldr	r0, [pc, #412]	; (5bb8 <menu()+0x1c6c>)
          menuload = 1;
    5a1c:	6023      	str	r3, [r4, #0]
          bms.setBalanceHyst(settings.balanceHyst);
    5a1e:	f7fb f9ef 	bl	e00 <BMSModuleManager::setBalanceHyst(float)>
  if (menuload == 1) {
    5a22:	6823      	ldr	r3, [r4, #0]
          incomingByte = 'b';
    5a24:	2262      	movs	r2, #98	; 0x62
  if (menuload == 1) {
    5a26:	2b01      	cmp	r3, #1
          incomingByte = 'b';
    5a28:	602a      	str	r2, [r5, #0]
  if (menuload == 1) {
    5a2a:	f47e aaf5 	bne.w	4018 <menu()+0xcc>
    5a2e:	f7ff bbe1 	b.w	51f4 <menu()+0x12a8>
    5a32:	f006 fb8f 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    5a36:	2800      	cmp	r0, #0
    5a38:	f77f ae3c 	ble.w	56b4 <menu()+0x1768>
          settings.balanceVoltage = Serial.parseInt();
    5a3c:	4859      	ldr	r0, [pc, #356]	; (5ba4 <menu()+0x1c58>)
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    5a3e:	4e5c      	ldr	r6, [pc, #368]	; (5bb0 <menu()+0x1c64>)
          settings.balanceVoltage = Serial.parseInt();
    5a40:	f003 ffd2 	bl	99e8 <Stream::parseInt()>
    5a44:	f007 fa44 	bl	ced0 <__aeabi_i2f>
          settings.balanceVoltage = settings.balanceVoltage / 1000;
    5a48:	495a      	ldr	r1, [pc, #360]	; (5bb4 <menu()+0x1c68>)
    5a4a:	f007 fb49 	bl	d0e0 <__aeabi_fdiv>
    5a4e:	64b0      	str	r0, [r6, #72]	; 0x48
          incomingByte = 'b';
    5a50:	e64e      	b.n	56f0 <menu()+0x17a4>
    5a52:	f006 fb7f 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    5a56:	2800      	cmp	r0, #0
    5a58:	f77f ae2c 	ble.w	56b4 <menu()+0x1768>
          settings.UnderTSetpoint = Serial.parseInt();
    5a5c:	4851      	ldr	r0, [pc, #324]	; (5ba4 <menu()+0x1c58>)
    5a5e:	4e54      	ldr	r6, [pc, #336]	; (5bb0 <menu()+0x1c64>)
    5a60:	f003 ffc2 	bl	99e8 <Stream::parseInt()>
    5a64:	f007 fa34 	bl	ced0 <__aeabi_i2f>
    5a68:	62f0      	str	r0, [r6, #44]	; 0x2c
          incomingByte = 'b';
    5a6a:	e641      	b.n	56f0 <menu()+0x17a4>
    5a6c:	f006 fb72 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    5a70:	2800      	cmp	r0, #0
    5a72:	f77f ae1f 	ble.w	56b4 <menu()+0x1768>
          settings.OverTSetpoint = Serial.parseInt();
    5a76:	484b      	ldr	r0, [pc, #300]	; (5ba4 <menu()+0x1c58>)
    5a78:	4e4d      	ldr	r6, [pc, #308]	; (5bb0 <menu()+0x1c64>)
    5a7a:	f003 ffb5 	bl	99e8 <Stream::parseInt()>
    5a7e:	f007 fa27 	bl	ced0 <__aeabi_i2f>
    5a82:	62b0      	str	r0, [r6, #40]	; 0x28
          incomingByte = 'b';
    5a84:	e634      	b.n	56f0 <menu()+0x17a4>
    5a86:	f006 fb65 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    5a8a:	2800      	cmp	r0, #0
    5a8c:	f77f ae12 	ble.w	56b4 <menu()+0x1768>
          settings.DisTSetpoint = Serial.parseInt();
    5a90:	4844      	ldr	r0, [pc, #272]	; (5ba4 <menu()+0x1c58>)
    5a92:	4e47      	ldr	r6, [pc, #284]	; (5bb0 <menu()+0x1c64>)
    5a94:	f003 ffa8 	bl	99e8 <Stream::parseInt()>
    5a98:	f007 fa1a 	bl	ced0 <__aeabi_i2f>
    5a9c:	6370      	str	r0, [r6, #52]	; 0x34
          incomingByte = 'b';
    5a9e:	e627      	b.n	56f0 <menu()+0x17a4>
          settings.ChargeHys = Serial.parseInt();
    5aa0:	4840      	ldr	r0, [pc, #256]	; (5ba4 <menu()+0x1c58>)
          settings.ChargeHys = settings.ChargeHys / 1000;
    5aa2:	4e43      	ldr	r6, [pc, #268]	; (5bb0 <menu()+0x1c64>)
          settings.ChargeHys = Serial.parseInt();
    5aa4:	f003 ffa0 	bl	99e8 <Stream::parseInt()>
    5aa8:	f007 fa12 	bl	ced0 <__aeabi_i2f>
          settings.ChargeHys = settings.ChargeHys / 1000;
    5aac:	4941      	ldr	r1, [pc, #260]	; (5bb4 <menu()+0x1c68>)
    5aae:	f007 fb17 	bl	d0e0 <__aeabi_fdiv>
          menuload = 1;
    5ab2:	2301      	movs	r3, #1
    5ab4:	6023      	str	r3, [r4, #0]
          incomingByte = 'e';
    5ab6:	2365      	movs	r3, #101	; 0x65
          settings.ChargeHys = settings.ChargeHys / 1000;
    5ab8:	61f0      	str	r0, [r6, #28]
          incomingByte = 'e';
    5aba:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5abc:	f7ff b985 	b.w	4dca <menu()+0xe7e>
          debugdigits = Serial.parseInt();
    5ac0:	4838      	ldr	r0, [pc, #224]	; (5ba4 <menu()+0x1c58>)
    5ac2:	f003 ff91 	bl	99e8 <Stream::parseInt()>
    5ac6:	4b3d      	ldr	r3, [pc, #244]	; (5bbc <menu()+0x1c70>)
    5ac8:	6018      	str	r0, [r3, #0]
    5aca:	f7fe bee7 	b.w	489c <menu()+0x950>
          settings.ncur = Serial.parseInt();
    5ace:	4835      	ldr	r0, [pc, #212]	; (5ba4 <menu()+0x1c58>)
    5ad0:	4e37      	ldr	r6, [pc, #220]	; (5bb0 <menu()+0x1c64>)
    5ad2:	f003 ff89 	bl	99e8 <Stream::parseInt()>
    5ad6:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
    5ada:	f7fe bfa3 	b.w	4a24 <menu()+0xad8>
          contctrl = 0;
    5ade:	4b38      	ldr	r3, [pc, #224]	; (5bc0 <menu()+0x1c74>)
    5ae0:	2600      	movs	r6, #0
          digitalWrite(OUT1, LOW);
    5ae2:	200b      	movs	r0, #11
    5ae4:	4631      	mov	r1, r6
          contctrl = 0;
    5ae6:	601e      	str	r6, [r3, #0]
          digitalWrite(OUT1, LOW);
    5ae8:	f004 fcf2 	bl	a4d0 <digitalWrite>
          digitalWrite(OUT2, LOW);
    5aec:	4631      	mov	r1, r6
    5aee:	200c      	movs	r0, #12
    5af0:	f004 fcee 	bl	a4d0 <digitalWrite>
          digitalWrite(OUT3, LOW);
    5af4:	4631      	mov	r1, r6
    5af6:	2014      	movs	r0, #20
    5af8:	f004 fcea 	bl	a4d0 <digitalWrite>
          digitalWrite(OUT4, LOW);
    5afc:	4631      	mov	r1, r6
    5afe:	2015      	movs	r0, #21
    5b00:	f004 fce6 	bl	a4d0 <digitalWrite>
        incomingByte = 'd';
    5b04:	2264      	movs	r2, #100	; 0x64
  if (menuload == 2) {
    5b06:	6823      	ldr	r3, [r4, #0]
        incomingByte = 'd';
    5b08:	602a      	str	r2, [r5, #0]
        break;
    5b0a:	f7fe beb4 	b.w	4876 <menu()+0x92a>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5b0e:	211e      	movs	r1, #30
    5b10:	482c      	ldr	r0, [pc, #176]	; (5bc4 <menu()+0x1c78>)
    5b12:	f006 fb51 	bl	c1b8 <usb_serial_write>
    5b16:	4823      	ldr	r0, [pc, #140]	; (5ba4 <menu()+0x1c58>)
    5b18:	f003 fe06 	bl	9728 <Print::println()>
    5b1c:	f7fe bf0c 	b.w	4938 <menu()+0x9ec>
    5b20:	2120      	movs	r1, #32
    5b22:	4829      	ldr	r0, [pc, #164]	; (5bc8 <menu()+0x1c7c>)
    5b24:	f006 fb48 	bl	c1b8 <usb_serial_write>
    5b28:	481e      	ldr	r0, [pc, #120]	; (5ba4 <menu()+0x1c58>)
    5b2a:	f003 fdfd 	bl	9728 <Print::println()>
    5b2e:	f7fe bf03 	b.w	4938 <menu()+0x9ec>
    5b32:	2117      	movs	r1, #23
    5b34:	4825      	ldr	r0, [pc, #148]	; (5bcc <menu()+0x1c80>)
    5b36:	f006 fb3f 	bl	c1b8 <usb_serial_write>
    5b3a:	481a      	ldr	r0, [pc, #104]	; (5ba4 <menu()+0x1c58>)
    5b3c:	f003 fdf4 	bl	9728 <Print::println()>
    5b40:	f7fe befa 	b.w	4938 <menu()+0x9ec>
    5b44:	4822      	ldr	r0, [pc, #136]	; (5bd0 <menu()+0x1c84>)
    5b46:	2117      	movs	r1, #23
    5b48:	f006 fb36 	bl	c1b8 <usb_serial_write>
          if (settings.curcan == LemCAB300) {
    5b4c:	f8d6 30d4 	ldr.w	r3, [r6, #212]	; 0xd4
    5b50:	2b01      	cmp	r3, #1
    5b52:	d047      	beq.n	5be4 <menu()+0x1c98>
          } else if (settings.curcan == LemCAB500) {
    5b54:	2b02      	cmp	r3, #2
    5b56:	d04e      	beq.n	5bf6 <menu()+0x1caa>
          } else if (settings.curcan == IsaScale) {
    5b58:	2b03      	cmp	r3, #3
    5b5a:	d055      	beq.n	5c08 <menu()+0x1cbc>
          } else if (settings.curcan == VictronLynx) {
    5b5c:	2b04      	cmp	r3, #4
    5b5e:	f47e af18 	bne.w	4992 <menu()+0xa46>
            SERIALCONSOLE.println(" Victron Lynx VE.CAN Shunt");
    5b62:	491c      	ldr	r1, [pc, #112]	; (5bd4 <menu()+0x1c88>)
    5b64:	480f      	ldr	r0, [pc, #60]	; (5ba4 <menu()+0x1c58>)
    5b66:	f7fc fc65 	bl	2434 <Print::println(char const*) [clone .isra.0]>
    5b6a:	f7fe bf12 	b.w	4992 <menu()+0xa46>
    5b6e:	481a      	ldr	r0, [pc, #104]	; (5bd8 <menu()+0x1c8c>)
    5b70:	2120      	movs	r1, #32
    5b72:	f006 fb21 	bl	c1b8 <usb_serial_write>
          if (settings.tripcont == 0) {
    5b76:	f896 30c9 	ldrb.w	r3, [r6, #201]	; 0xc9
    5b7a:	b943      	cbnz	r3, 5b8e <menu()+0x1c42>
    5b7c:	210a      	movs	r1, #10
    5b7e:	4817      	ldr	r0, [pc, #92]	; (5bdc <menu()+0x1c90>)
    5b80:	f006 fb1a 	bl	c1b8 <usb_serial_write>
    5b84:	4807      	ldr	r0, [pc, #28]	; (5ba4 <menu()+0x1c58>)
    5b86:	f003 fdcf 	bl	9728 <Print::println()>
    5b8a:	f7ff b8d7 	b.w	4d3c <menu()+0xdf0>
    5b8e:	211c      	movs	r1, #28
    5b90:	4813      	ldr	r0, [pc, #76]	; (5be0 <menu()+0x1c94>)
    5b92:	f006 fb11 	bl	c1b8 <usb_serial_write>
    5b96:	4803      	ldr	r0, [pc, #12]	; (5ba4 <menu()+0x1c58>)
    5b98:	f003 fdc6 	bl	9728 <Print::println()>
    5b9c:	f7ff b8ce 	b.w	4d3c <menu()+0xdf0>
    5ba0:	00014fa8 	.word	0x00014fa8
    5ba4:	1fff89fc 	.word	0x1fff89fc
    5ba8:	00014468 	.word	0x00014468
    5bac:	1fff884c 	.word	0x1fff884c
    5bb0:	1fffd0d8 	.word	0x1fffd0d8
    5bb4:	447a0000 	.word	0x447a0000
    5bb8:	1fff91f0 	.word	0x1fff91f0
    5bbc:	1fff8850 	.word	0x1fff8850
    5bc0:	1fffcfb0 	.word	0x1fffcfb0
    5bc4:	000149b4 	.word	0x000149b4
    5bc8:	000149d4 	.word	0x000149d4
    5bcc:	000149f8 	.word	0x000149f8
    5bd0:	00014b04 	.word	0x00014b04
    5bd4:	00014b60 	.word	0x00014b60
    5bd8:	00014824 	.word	0x00014824
    5bdc:	00014848 	.word	0x00014848
    5be0:	00014854 	.word	0x00014854
    5be4:	2117      	movs	r1, #23
    5be6:	4827      	ldr	r0, [pc, #156]	; (5c84 <menu()+0x1d38>)
    5be8:	f006 fae6 	bl	c1b8 <usb_serial_write>
    5bec:	4826      	ldr	r0, [pc, #152]	; (5c88 <menu()+0x1d3c>)
    5bee:	f003 fd9b 	bl	9728 <Print::println()>
    5bf2:	f7fe bece 	b.w	4992 <menu()+0xa46>
    5bf6:	2114      	movs	r1, #20
    5bf8:	4824      	ldr	r0, [pc, #144]	; (5c8c <menu()+0x1d40>)
    5bfa:	f006 fadd 	bl	c1b8 <usb_serial_write>
    5bfe:	4822      	ldr	r0, [pc, #136]	; (5c88 <menu()+0x1d3c>)
    5c00:	f003 fd92 	bl	9728 <Print::println()>
    5c04:	f7fe bec5 	b.w	4992 <menu()+0xa46>
            SERIALCONSOLE.println(" IsaScale IVT-S ");
    5c08:	4921      	ldr	r1, [pc, #132]	; (5c90 <menu()+0x1d44>)
    5c0a:	481f      	ldr	r0, [pc, #124]	; (5c88 <menu()+0x1d3c>)
    5c0c:	f7fc fc12 	bl	2434 <Print::println(char const*) [clone .isra.0]>
    5c10:	f7fe bebf 	b.w	4992 <menu()+0xa46>
    5c14:	4e1f      	ldr	r6, [pc, #124]	; (5c94 <menu()+0x1d48>)
    5c16:	f7fe bb30 	b.w	427a <menu()+0x32e>
    5c1a:	4e1e      	ldr	r6, [pc, #120]	; (5c94 <menu()+0x1d48>)
    5c1c:	f7ff b8d5 	b.w	4dca <menu()+0xe7e>
  if (menuload == 3) {
    5c20:	2b03      	cmp	r3, #3
    5c22:	f43f adfa 	beq.w	581a <menu()+0x18ce>
  if (menuload == 1) {
    5c26:	2b01      	cmp	r3, #1
    5c28:	f47e a9ed 	bne.w	4006 <menu()+0xba>
    5c2c:	4e19      	ldr	r6, [pc, #100]	; (5c94 <menu()+0x1d48>)
    5c2e:	f7fe be4c 	b.w	48ca <menu()+0x97e>
    5c32:	4e18      	ldr	r6, [pc, #96]	; (5c94 <menu()+0x1d48>)
    5c34:	f7ff b81f 	b.w	4c76 <menu()+0xd2a>
        virtual int available() { return usb_serial_available(); }
    5c38:	f006 fa8c 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    5c3c:	2800      	cmp	r0, #0
    5c3e:	f77e af70 	ble.w	4b22 <menu()+0xbd6>
          settings.Pretime = Serial.parseInt();
    5c42:	4811      	ldr	r0, [pc, #68]	; (5c88 <menu()+0x1d3c>)
    5c44:	4e13      	ldr	r6, [pc, #76]	; (5c94 <menu()+0x1d48>)
    5c46:	f003 fecf 	bl	99e8 <Stream::parseInt()>
          menuload = 1;
    5c4a:	2301      	movs	r3, #1
    5c4c:	6023      	str	r3, [r4, #0]
          incomingByte = 'k';
    5c4e:	236b      	movs	r3, #107	; 0x6b
          settings.Pretime = Serial.parseInt();
    5c50:	f8c6 0098 	str.w	r0, [r6, #152]	; 0x98
          incomingByte = 'k';
    5c54:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5c56:	f7ff b80e 	b.w	4c76 <menu()+0xd2a>
    5c5a:	f006 fa7b 	bl	c154 <usb_serial_available>
        if (Serial.available() > 0) {
    5c5e:	2800      	cmp	r0, #0
    5c60:	f77e ab71 	ble.w	4346 <menu()+0x3fa>
          settings.WarnOff = Serial.parseInt();
    5c64:	4808      	ldr	r0, [pc, #32]	; (5c88 <menu()+0x1d3c>)
          settings.WarnOff = settings.WarnOff * 0.001;
    5c66:	4e0b      	ldr	r6, [pc, #44]	; (5c94 <menu()+0x1d48>)
          settings.WarnOff = Serial.parseInt();
    5c68:	f003 febe 	bl	99e8 <Stream::parseInt()>
    5c6c:	f007 f930 	bl	ced0 <__aeabi_i2f>
          settings.WarnOff = settings.WarnOff * 0.001;
    5c70:	4909      	ldr	r1, [pc, #36]	; (5c98 <menu()+0x1d4c>)
    5c72:	f007 f981 	bl	cf78 <__aeabi_fmul>
          menuload = 1;
    5c76:	2301      	movs	r3, #1
    5c78:	6023      	str	r3, [r4, #0]
          incomingByte = 'a';
    5c7a:	2361      	movs	r3, #97	; 0x61
          settings.WarnOff = settings.WarnOff * 0.001;
    5c7c:	6270      	str	r0, [r6, #36]	; 0x24
          incomingByte = 'a';
    5c7e:	602b      	str	r3, [r5, #0]
    switch (incomingByte) {
    5c80:	f7fe bc2c 	b.w	44dc <menu()+0x590>
    5c84:	00014b1c 	.word	0x00014b1c
    5c88:	1fff89fc 	.word	0x1fff89fc
    5c8c:	00014b34 	.word	0x00014b34
    5c90:	00014b4c 	.word	0x00014b4c
    5c94:	1fffd0d8 	.word	0x1fffd0d8
    5c98:	3a83126f 	.word	0x3a83126f

00005c9c <CAB300()>:
void CAB300() {
    5c9c:	b538      	push	{r3, r4, r5, lr}
    5c9e:	4c18      	ldr	r4, [pc, #96]	; (5d00 <CAB300()+0x64>)
    5ca0:	4b18      	ldr	r3, [pc, #96]	; (5d04 <CAB300()+0x68>)
    5ca2:	6822      	ldr	r2, [r4, #0]
    5ca4:	1d18      	adds	r0, r3, #4
    inbox = (inbox << 8) | inMsg.buf[i];
    5ca6:	f813 1f01 	ldrb.w	r1, [r3, #1]!
  for (int i = 0; i < 4; i++) {
    5caa:	4298      	cmp	r0, r3
    inbox = (inbox << 8) | inMsg.buf[i];
    5cac:	ea41 2202 	orr.w	r2, r1, r2, lsl #8
  for (int i = 0; i < 4; i++) {
    5cb0:	d1f9      	bne.n	5ca6 <CAB300()+0xa>
  if (settings.cursens == Canbus) {
    5cb2:	4b15      	ldr	r3, [pc, #84]	; (5d08 <CAB300()+0x6c>)
    5cb4:	4d15      	ldr	r5, [pc, #84]	; (5d0c <CAB300()+0x70>)
    5cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    5cba:	6022      	str	r2, [r4, #0]
    CANmilliamps = (0x80000000 - CANmilliamps) * -1;
    5cbc:	f102 4000 	add.w	r0, r2, #2147483648	; 0x80000000
  if (settings.cursens == Canbus) {
    5cc0:	2b02      	cmp	r3, #2
    5cc2:	6028      	str	r0, [r5, #0]
    5cc4:	d004      	beq.n	5cd0 <CAB300()+0x34>
  if (candebug == 1) {
    5cc6:	4b12      	ldr	r3, [pc, #72]	; (5d10 <CAB300()+0x74>)
    5cc8:	681b      	ldr	r3, [r3, #0]
    5cca:	2b01      	cmp	r3, #1
    5ccc:	d00a      	beq.n	5ce4 <CAB300()+0x48>
}
    5cce:	bd38      	pop	{r3, r4, r5, pc}
    RawCur = CANmilliamps;
    5cd0:	f007 f8fe 	bl	ced0 <__aeabi_i2f>
    5cd4:	4c0f      	ldr	r4, [pc, #60]	; (5d14 <CAB300()+0x78>)
    5cd6:	6020      	str	r0, [r4, #0]
    getcurrent();
    5cd8:	f7fc ffe0 	bl	2c9c <getcurrent()>
  if (candebug == 1) {
    5cdc:	4b0c      	ldr	r3, [pc, #48]	; (5d10 <CAB300()+0x74>)
    5cde:	681b      	ldr	r3, [r3, #0]
    5ce0:	2b01      	cmp	r3, #1
    5ce2:	d1f4      	bne.n	5cce <CAB300()+0x32>
    Serial.println();
    5ce4:	480c      	ldr	r0, [pc, #48]	; (5d18 <CAB300()+0x7c>)
    5ce6:	f003 fd1f 	bl	9728 <Print::println()>
    Serial.print(CANmilliamps);
    5cea:	6829      	ldr	r1, [r5, #0]
    5cec:	480a      	ldr	r0, [pc, #40]	; (5d18 <CAB300()+0x7c>)
    5cee:	f003 fd13 	bl	9718 <Print::print(long)>
}
    5cf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    5cf6:	4809      	ldr	r0, [pc, #36]	; (5d1c <CAB300()+0x80>)
    5cf8:	2103      	movs	r1, #3
    5cfa:	f006 ba5d 	b.w	c1b8 <usb_serial_write>
    5cfe:	bf00      	nop
    5d00:	1fffcff0 	.word	0x1fffcff0
    5d04:	1fffcfe7 	.word	0x1fffcfe7
    5d08:	1fffd0d8 	.word	0x1fffd0d8
    5d0c:	1fff91a0 	.word	0x1fff91a0
    5d10:	1fffcf38 	.word	0x1fffcf38
    5d14:	1fff91c0 	.word	0x1fff91c0
    5d18:	1fff89fc 	.word	0x1fff89fc
    5d1c:	00014f38 	.word	0x00014f38

00005d20 <CAB500()>:
void CAB500() {
    5d20:	b570      	push	{r4, r5, r6, lr}
    inbox = (inbox << 8) | inMsg.buf[i];
    5d22:	4b1e      	ldr	r3, [pc, #120]	; (5d9c <CAB500()+0x7c>)
  if (candebug == 1) {
    5d24:	4c1e      	ldr	r4, [pc, #120]	; (5da0 <CAB500()+0x80>)
    inbox = (inbox << 8) | inMsg.buf[i];
    5d26:	7a59      	ldrb	r1, [r3, #9]
    5d28:	7a9a      	ldrb	r2, [r3, #10]
    5d2a:	7adb      	ldrb	r3, [r3, #11]
  CANmilliamps = inbox;
    5d2c:	4d1d      	ldr	r5, [pc, #116]	; (5da4 <CAB500()+0x84>)
    inbox = (inbox << 8) | inMsg.buf[i];
    5d2e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5d32:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if (candebug == 1) {
    5d36:	6822      	ldr	r2, [r4, #0]
    5d38:	491b      	ldr	r1, [pc, #108]	; (5da8 <CAB500()+0x88>)
  CANmilliamps = inbox;
    5d3a:	602b      	str	r3, [r5, #0]
  if (candebug == 1) {
    5d3c:	2a01      	cmp	r2, #1
    5d3e:	600b      	str	r3, [r1, #0]
    5d40:	d00c      	beq.n	5d5c <CAB500()+0x3c>
    5d42:	4618      	mov	r0, r3
  if (settings.cursens == Canbus) {
    5d44:	4b19      	ldr	r3, [pc, #100]	; (5dac <CAB500()+0x8c>)
    5d46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    CANmilliamps = (0x800000 - CANmilliamps) * -1;
    5d4a:	f5a0 0000 	sub.w	r0, r0, #8388608	; 0x800000
  if (settings.cursens == Canbus) {
    5d4e:	2b02      	cmp	r3, #2
    5d50:	6028      	str	r0, [r5, #0]
    5d52:	d01b      	beq.n	5d8c <CAB500()+0x6c>
  if (candebug == 1) {
    5d54:	6823      	ldr	r3, [r4, #0]
    5d56:	2b01      	cmp	r3, #1
    5d58:	d00b      	beq.n	5d72 <CAB500()+0x52>
}
    5d5a:	bd70      	pop	{r4, r5, r6, pc}
    Serial.println();
    5d5c:	4814      	ldr	r0, [pc, #80]	; (5db0 <CAB500()+0x90>)
    5d5e:	f003 fce3 	bl	9728 <Print::println()>
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
    5d62:	6829      	ldr	r1, [r5, #0]
    5d64:	4812      	ldr	r0, [pc, #72]	; (5db0 <CAB500()+0x90>)
    5d66:	2300      	movs	r3, #0
    5d68:	2210      	movs	r2, #16
    5d6a:	f003 fcf5 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
  if (CANmilliamps > 0x800000) {
    5d6e:	6828      	ldr	r0, [r5, #0]
    5d70:	e7e8      	b.n	5d44 <CAB500()+0x24>
    Serial.println();
    5d72:	480f      	ldr	r0, [pc, #60]	; (5db0 <CAB500()+0x90>)
    5d74:	f003 fcd8 	bl	9728 <Print::println()>
    Serial.print(CANmilliamps);
    5d78:	6829      	ldr	r1, [r5, #0]
    5d7a:	480d      	ldr	r0, [pc, #52]	; (5db0 <CAB500()+0x90>)
    5d7c:	f003 fccc 	bl	9718 <Print::print(long)>
}
    5d80:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5d84:	480b      	ldr	r0, [pc, #44]	; (5db4 <CAB500()+0x94>)
    5d86:	2103      	movs	r1, #3
    5d88:	f006 ba16 	b.w	c1b8 <usb_serial_write>
    RawCur = CANmilliamps;
    5d8c:	f007 f8a0 	bl	ced0 <__aeabi_i2f>
    5d90:	4e09      	ldr	r6, [pc, #36]	; (5db8 <CAB500()+0x98>)
    5d92:	6030      	str	r0, [r6, #0]
    getcurrent();
    5d94:	f7fc ff82 	bl	2c9c <getcurrent()>
    5d98:	e7dc      	b.n	5d54 <CAB500()+0x34>
    5d9a:	bf00      	nop
    5d9c:	1fffcfe0 	.word	0x1fffcfe0
    5da0:	1fffcf38 	.word	0x1fffcf38
    5da4:	1fff91a0 	.word	0x1fff91a0
    5da8:	1fffcff0 	.word	0x1fffcff0
    5dac:	1fffd0d8 	.word	0x1fffd0d8
    5db0:	1fff89fc 	.word	0x1fff89fc
    5db4:	00014f38 	.word	0x00014f38
    5db8:	1fff91c0 	.word	0x1fff91c0

00005dbc <handleVictronLynx()>:
void handleVictronLynx() {
    5dbc:	b538      	push	{r3, r4, r5, lr}
  if (inMsg.buf[4] == 0xff && inMsg.buf[3] == 0xff) return;
    5dbe:	4b17      	ldr	r3, [pc, #92]	; (5e1c <handleVictronLynx()+0x60>)
    5dc0:	7b1a      	ldrb	r2, [r3, #12]
    5dc2:	7adb      	ldrb	r3, [r3, #11]
    5dc4:	ea02 0103 	and.w	r1, r2, r3
    5dc8:	29ff      	cmp	r1, #255	; 0xff
    5dca:	d012      	beq.n	5df2 <handleVictronLynx()+0x36>
  current |= inMsg.buf[3];
    5dcc:	ea43 2002 	orr.w	r0, r3, r2, lsl #8
  if (settings.cursens == Canbus) {
    5dd0:	4b13      	ldr	r3, [pc, #76]	; (5e20 <handleVictronLynx()+0x64>)
  CANmilliamps = current * 100;
    5dd2:	4c14      	ldr	r4, [pc, #80]	; (5e24 <handleVictronLynx()+0x68>)
  if (settings.cursens == Canbus) {
    5dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
  CANmilliamps = current * 100;
    5dd8:	b200      	sxth	r0, r0
    5dda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5dde:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    5de2:	0080      	lsls	r0, r0, #2
  if (settings.cursens == Canbus) {
    5de4:	2b02      	cmp	r3, #2
  CANmilliamps = current * 100;
    5de6:	6020      	str	r0, [r4, #0]
  if (settings.cursens == Canbus) {
    5de8:	d011      	beq.n	5e0e <handleVictronLynx()+0x52>
  if (candebug == 1) {
    5dea:	4b0f      	ldr	r3, [pc, #60]	; (5e28 <handleVictronLynx()+0x6c>)
    5dec:	681b      	ldr	r3, [r3, #0]
    5dee:	2b01      	cmp	r3, #1
    5df0:	d000      	beq.n	5df4 <handleVictronLynx()+0x38>
}
    5df2:	bd38      	pop	{r3, r4, r5, pc}
    Serial.println();
    5df4:	480d      	ldr	r0, [pc, #52]	; (5e2c <handleVictronLynx()+0x70>)
    5df6:	f003 fc97 	bl	9728 <Print::println()>
    Serial.print(CANmilliamps);
    5dfa:	6821      	ldr	r1, [r4, #0]
    5dfc:	480b      	ldr	r0, [pc, #44]	; (5e2c <handleVictronLynx()+0x70>)
    5dfe:	f003 fc8b 	bl	9718 <Print::print(long)>
}
    5e02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5e06:	480a      	ldr	r0, [pc, #40]	; (5e30 <handleVictronLynx()+0x74>)
    5e08:	2103      	movs	r1, #3
    5e0a:	f006 b9d5 	b.w	c1b8 <usb_serial_write>
    RawCur = CANmilliamps;
    5e0e:	f007 f85f 	bl	ced0 <__aeabi_i2f>
    5e12:	4d08      	ldr	r5, [pc, #32]	; (5e34 <handleVictronLynx()+0x78>)
    5e14:	6028      	str	r0, [r5, #0]
    getcurrent();
    5e16:	f7fc ff41 	bl	2c9c <getcurrent()>
    5e1a:	e7e6      	b.n	5dea <handleVictronLynx()+0x2e>
    5e1c:	1fffcfe0 	.word	0x1fffcfe0
    5e20:	1fffd0d8 	.word	0x1fffd0d8
    5e24:	1fff91a0 	.word	0x1fff91a0
    5e28:	1fffcf38 	.word	0x1fffcf38
    5e2c:	1fff89fc 	.word	0x1fff89fc
    5e30:	00014f38 	.word	0x00014f38
    5e34:	1fff91c0 	.word	0x1fff91c0

00005e38 <canread()>:
void canread() {
    5e38:	b5f0      	push	{r4, r5, r6, r7, lr}
  Can0.read(inMsg);
    5e3a:	4c85      	ldr	r4, [pc, #532]	; (6050 <canread()+0x218>)
  if (settings.cursens == Canbus) {
    5e3c:	4d85      	ldr	r5, [pc, #532]	; (6054 <canread()+0x21c>)
  Can0.read(inMsg);
    5e3e:	4886      	ldr	r0, [pc, #536]	; (6058 <canread()+0x220>)
void canread() {
    5e40:	b083      	sub	sp, #12
  Can0.read(inMsg);
    5e42:	4621      	mov	r1, r4
    5e44:	f002 fae4 	bl	8410 <FlexCAN::read(CAN_message_t&)>
  if (settings.cursens == Canbus) {
    5e48:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    5e4c:	2b02      	cmp	r3, #2
    5e4e:	d033      	beq.n	5eb8 <canread()+0x80>
  if (inMsg.id < 0x300)  //do VW BMS magic if ids are ones identified to be modules
    5e50:	6823      	ldr	r3, [r4, #0]
    if (candebug == 1) {
    5e52:	4d82      	ldr	r5, [pc, #520]	; (605c <canread()+0x224>)
  if (inMsg.id < 0x300)  //do VW BMS magic if ids are ones identified to be modules
    5e54:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    5e58:	d208      	bcs.n	5e6c <canread()+0x34>
    if (candebug == 1) {
    5e5a:	682a      	ldr	r2, [r5, #0]
      bms.decodecan(inMsg, 1);  //do VW BMS if ids are ones identified to be modules
    5e5c:	497c      	ldr	r1, [pc, #496]	; (6050 <canread()+0x218>)
    5e5e:	4880      	ldr	r0, [pc, #512]	; (6060 <canread()+0x228>)
    if (candebug == 1) {
    5e60:	2a01      	cmp	r2, #1
      bms.decodecan(inMsg, 0);  //do VW BMS if ids are ones identified to be modules
    5e62:	bf18      	it	ne
    5e64:	2200      	movne	r2, #0
    5e66:	f7fb fb3d 	bl	14e4 <BMSModuleManager::decodecan(CAN_message_t&, int)>
  if ((inMsg.id & 0x1FFFFFFF) < 0x1A555440 && (inMsg.id & 0x1FFFFFFF) > 0x1A555400)  // Determine if ID is Temperature CAN-ID
    5e6a:	6823      	ldr	r3, [r4, #0]
    5e6c:	4a7d      	ldr	r2, [pc, #500]	; (6064 <canread()+0x22c>)
    5e6e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    5e72:	441a      	add	r2, r3
    5e74:	2a3e      	cmp	r2, #62	; 0x3e
    5e76:	d80c      	bhi.n	5e92 <canread()+0x5a>
    if (candebug == 1) {
    5e78:	682b      	ldr	r3, [r5, #0]
    5e7a:	2b01      	cmp	r3, #1
    5e7c:	f000 808f 	beq.w	5f9e <canread()+0x166>
      bms.decodetemp(inMsg, 0, 1);
    5e80:	2301      	movs	r3, #1
    5e82:	4973      	ldr	r1, [pc, #460]	; (6050 <canread()+0x218>)
    5e84:	4876      	ldr	r0, [pc, #472]	; (6060 <canread()+0x228>)
    5e86:	2200      	movs	r2, #0
    5e88:	f7fb faba 	bl	1400 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>
  if ((inMsg.id & 0x1FFFFFFF) < 0x1A5555FF && (inMsg.id & 0x1FFFFFFF) > 0x1A5555EF)  // Determine if ID is Temperature CAN-ID FOR MEB
    5e8c:	6823      	ldr	r3, [r4, #0]
    5e8e:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    5e92:	4a75      	ldr	r2, [pc, #468]	; (6068 <canread()+0x230>)
    5e94:	441a      	add	r2, r3
    5e96:	2a0e      	cmp	r2, #14
    5e98:	d809      	bhi.n	5eae <canread()+0x76>
    if (candebug == 1) {
    5e9a:	682a      	ldr	r2, [r5, #0]
      bms.decodetemp(inMsg, 1, 2);
    5e9c:	496c      	ldr	r1, [pc, #432]	; (6050 <canread()+0x218>)
    5e9e:	4870      	ldr	r0, [pc, #448]	; (6060 <canread()+0x228>)
    if (candebug == 1) {
    5ea0:	2a01      	cmp	r2, #1
      bms.decodetemp(inMsg, 1, 2);
    5ea2:	f04f 0302 	mov.w	r3, #2
      bms.decodetemp(inMsg, 0, 2);
    5ea6:	bf18      	it	ne
    5ea8:	2200      	movne	r2, #0
    5eaa:	f7fb faa9 	bl	1400 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>
  if (candebug == 1) {
    5eae:	682b      	ldr	r3, [r5, #0]
    5eb0:	2b01      	cmp	r3, #1
    5eb2:	d038      	beq.n	5f26 <canread()+0xee>
}
    5eb4:	b003      	add	sp, #12
    5eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (settings.curcan == 1) {
    5eb8:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    5ebc:	6823      	ldr	r3, [r4, #0]
    if (settings.curcan == 1) {
    5ebe:	2a01      	cmp	r2, #1
    5ec0:	f000 8095 	beq.w	5fee <canread()+0x1b6>
    if (settings.curcan == 2) {
    5ec4:	2a02      	cmp	r2, #2
    5ec6:	d073      	beq.n	5fb0 <canread()+0x178>
    if (settings.curcan == 3) {
    5ec8:	2a03      	cmp	r2, #3
    5eca:	d121      	bne.n	5f10 <canread()+0xd8>
      switch (inMsg.id) {
    5ecc:	f240 5222 	movw	r2, #1314	; 0x522
    5ed0:	4293      	cmp	r3, r2
    5ed2:	f000 80b3 	beq.w	603c <canread()+0x204>
    5ed6:	f240 5223 	movw	r2, #1315	; 0x523
    5eda:	4293      	cmp	r3, r2
    5edc:	f000 80a5 	beq.w	602a <canread()+0x1f2>
    5ee0:	f240 5221 	movw	r2, #1313	; 0x521
    5ee4:	4293      	cmp	r3, r2
    5ee6:	d1b4      	bne.n	5e52 <canread()+0x1a>
          CANmilliamps = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    5ee8:	89a2      	ldrh	r2, [r4, #12]
    5eea:	8960      	ldrh	r0, [r4, #10]
    5eec:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
    5ef0:	4a5e      	ldr	r2, [pc, #376]	; (606c <canread()+0x234>)
    5ef2:	ba00      	rev	r0, r0
    5ef4:	6010      	str	r0, [r2, #0]
          if (settings.cursens == Canbus) {
    5ef6:	f8d5 2080 	ldr.w	r2, [r5, #128]	; 0x80
    5efa:	2a02      	cmp	r2, #2
    5efc:	d111      	bne.n	5f22 <canread()+0xea>
            RawCur = CANmilliamps;
    5efe:	f006 ffe7 	bl	ced0 <__aeabi_i2f>
    5f02:	4e5b      	ldr	r6, [pc, #364]	; (6070 <canread()+0x238>)
    5f04:	6030      	str	r0, [r6, #0]
            getcurrent();
    5f06:	f7fc fec9 	bl	2c9c <getcurrent()>
    if (settings.curcan == 4) {
    5f0a:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    5f0e:	6823      	ldr	r3, [r4, #0]
    if (settings.curcan == 4) {
    5f10:	2a04      	cmp	r2, #4
    5f12:	d19e      	bne.n	5e52 <canread()+0x1a>
  if ((canId & 0x10000000) == 0x10000000) {
    5f14:	00d9      	lsls	r1, r3, #3
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    5f16:	4a57      	ldr	r2, [pc, #348]	; (6074 <canread()+0x23c>)
  if ((canId & 0x10000000) == 0x10000000) {
    5f18:	d578      	bpl.n	600c <canread()+0x1d4>
    return (canId & 0x03FFFF00) >> 8;
    5f1a:	f3c3 2111 	ubfx	r1, r3, #8, #18
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    5f1e:	4291      	cmp	r1, r2
    5f20:	d077      	beq.n	6012 <canread()+0x1da>
    5f22:	4d4e      	ldr	r5, [pc, #312]	; (605c <canread()+0x224>)
    5f24:	e7a2      	b.n	5e6c <canread()+0x34>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    5f26:	4b54      	ldr	r3, [pc, #336]	; (6078 <canread()+0x240>)
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    5f28:	4854      	ldr	r0, [pc, #336]	; (607c <canread()+0x244>)
    5f2a:	681b      	ldr	r3, [r3, #0]
    5f2c:	9301      	str	r3, [sp, #4]
	return ret;
    5f2e:	9901      	ldr	r1, [sp, #4]
    5f30:	2300      	movs	r3, #0
    5f32:	220a      	movs	r2, #10
    5f34:	f003 fc10 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    5f38:	6822      	ldr	r2, [r4, #0]
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    5f3a:	79e3      	ldrb	r3, [r4, #7]
      sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    5f3c:	4850      	ldr	r0, [pc, #320]	; (6080 <canread()+0x248>)
    if ((inMsg.id & 0x80000000) == 0x80000000)  // Determine if ID is standard (11 bits) or extended (29 bits)
    5f3e:	2a00      	cmp	r2, #0
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    5f40:	bfb6      	itet	lt
    5f42:	4950      	ldrlt	r1, [pc, #320]	; (6084 <canread()+0x24c>)
      sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    5f44:	4950      	ldrge	r1, [pc, #320]	; (6088 <canread()+0x250>)
      sprintf(msgString, "Extended ID: 0x%.8lX  DLC: %1d  Data:", (inMsg.id & 0x1FFFFFFF), inMsg.len);
    5f46:	f022 4260 	biclt.w	r2, r2, #3758096384	; 0xe0000000
      sprintf(msgString, ",0x%.3lX,false,%1d", inMsg.id, inMsg.len);
    5f4a:	f007 ffb5 	bl	deb8 <sprintf>
							  return write((const uint8_t *)str, strlen(str)); }
    5f4e:	484c      	ldr	r0, [pc, #304]	; (6080 <canread()+0x248>)
    5f50:	f008 f9b6 	bl	e2c0 <strlen>
    5f54:	4601      	mov	r1, r0
    5f56:	484a      	ldr	r0, [pc, #296]	; (6080 <canread()+0x248>)
    5f58:	f006 f92e 	bl	c1b8 <usb_serial_write>
    if ((inMsg.id & 0x40000000) == 0x40000000) {  // Determine if message is a remote request frame.
    5f5c:	6825      	ldr	r5, [r4, #0]
    5f5e:	f015 4580 	ands.w	r5, r5, #1073741824	; 0x40000000
    5f62:	d131      	bne.n	5fc8 <canread()+0x190>
      for (byte i = 0; i < inMsg.len; i++) {
    5f64:	79e3      	ldrb	r3, [r4, #7]
    5f66:	b1a3      	cbz	r3, 5f92 <canread()+0x15a>
        sprintf(msgString, ", 0x%.2X", inMsg.buf[i]);
    5f68:	4f48      	ldr	r7, [pc, #288]	; (608c <canread()+0x254>)
    5f6a:	4e45      	ldr	r6, [pc, #276]	; (6080 <canread()+0x248>)
    5f6c:	462b      	mov	r3, r5
    5f6e:	4423      	add	r3, r4
    5f70:	4639      	mov	r1, r7
    5f72:	7a1a      	ldrb	r2, [r3, #8]
    5f74:	4630      	mov	r0, r6
    5f76:	f007 ff9f 	bl	deb8 <sprintf>
    5f7a:	4630      	mov	r0, r6
    5f7c:	f008 f9a0 	bl	e2c0 <strlen>
    5f80:	4601      	mov	r1, r0
    5f82:	4630      	mov	r0, r6
    5f84:	f006 f918 	bl	c1b8 <usb_serial_write>
      for (byte i = 0; i < inMsg.len; i++) {
    5f88:	3501      	adds	r5, #1
    5f8a:	79e2      	ldrb	r2, [r4, #7]
    5f8c:	b2eb      	uxtb	r3, r5
    5f8e:	429a      	cmp	r2, r3
    5f90:	d8ed      	bhi.n	5f6e <canread()+0x136>
    Serial.println();
    5f92:	483a      	ldr	r0, [pc, #232]	; (607c <canread()+0x244>)
}
    5f94:	b003      	add	sp, #12
    5f96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    Serial.println();
    5f9a:	f003 bbc5 	b.w	9728 <Print::println()>
      bms.decodetemp(inMsg, 1, 1);
    5f9e:	461a      	mov	r2, r3
    5fa0:	492b      	ldr	r1, [pc, #172]	; (6050 <canread()+0x218>)
    5fa2:	482f      	ldr	r0, [pc, #188]	; (6060 <canread()+0x228>)
    5fa4:	f7fb fa2c 	bl	1400 <BMSModuleManager::decodetemp(CAN_message_t&, int, int)>
  if ((inMsg.id & 0x1FFFFFFF) < 0x1A5555FF && (inMsg.id & 0x1FFFFFFF) > 0x1A5555EF)  // Determine if ID is Temperature CAN-ID FOR MEB
    5fa8:	6823      	ldr	r3, [r4, #0]
    5faa:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
    5fae:	e770      	b.n	5e92 <canread()+0x5a>
      switch (inMsg.id) {
    5fb0:	f46f 7070 	mvn.w	r0, #960	; 0x3c0
    5fb4:	181a      	adds	r2, r3, r0
    5fb6:	2a01      	cmp	r2, #1
    5fb8:	f63f af4b 	bhi.w	5e52 <canread()+0x1a>
          CAB500();
    5fbc:	f7ff feb0 	bl	5d20 <CAB500()>
    if (settings.curcan == 3) {
    5fc0:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    5fc4:	6823      	ldr	r3, [r4, #0]
          break;
    5fc6:	e77f      	b.n	5ec8 <canread()+0x90>
      sprintf(msgString, " REMOTE REQUEST FRAME");
    5fc8:	4d31      	ldr	r5, [pc, #196]	; (6090 <canread()+0x258>)
    5fca:	4c2d      	ldr	r4, [pc, #180]	; (6080 <canread()+0x248>)
    5fcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5fce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5fd0:	e895 0003 	ldmia.w	r5, {r0, r1}
    5fd4:	f844 0b04 	str.w	r0, [r4], #4
    5fd8:	4620      	mov	r0, r4
    5fda:	f820 1914 	strh.w	r1, [r0], #-20
    5fde:	f008 f96f 	bl	e2c0 <strlen>
    5fe2:	4601      	mov	r1, r0
    5fe4:	f1a4 0014 	sub.w	r0, r4, #20
    5fe8:	f006 f8e6 	bl	c1b8 <usb_serial_write>
    5fec:	e7d1      	b.n	5f92 <canread()+0x15a>
      switch (inMsg.id) {
    5fee:	f240 32c1 	movw	r2, #961	; 0x3c1
    5ff2:	4293      	cmp	r3, r2
    5ff4:	d013      	beq.n	601e <canread()+0x1e6>
    5ff6:	f240 32c2 	movw	r2, #962	; 0x3c2
    5ffa:	4293      	cmp	r3, r2
    5ffc:	f47f af29 	bne.w	5e52 <canread()+0x1a>
          CAB300();
    6000:	f7ff fe4c 	bl	5c9c <CAB300()>
    if (settings.curcan == 2) {
    6004:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    6008:	6823      	ldr	r3, [r4, #0]
          break;
    600a:	e75b      	b.n	5ec4 <canread()+0x8c>
      if (pgnFromCANId(inMsg.id) == 0x1F214 && inMsg.buf[0] == 0)  // Check PGN and only use the first packet of each sequence
    600c:	4293      	cmp	r3, r2
    600e:	f47f af20 	bne.w	5e52 <canread()+0x1a>
    6012:	7a22      	ldrb	r2, [r4, #8]
    6014:	2a00      	cmp	r2, #0
    6016:	d184      	bne.n	5f22 <canread()+0xea>
        handleVictronLynx();
    6018:	f7ff fed0 	bl	5dbc <handleVictronLynx()>
    601c:	e718      	b.n	5e50 <canread()+0x18>
          CAB500();
    601e:	f7ff fe7f 	bl	5d20 <CAB500()>
    if (settings.curcan == 2) {
    6022:	f8d5 20d4 	ldr.w	r2, [r5, #212]	; 0xd4
      switch (inMsg.id) {
    6026:	6823      	ldr	r3, [r4, #0]
          break;
    6028:	e74c      	b.n	5ec4 <canread()+0x8c>
          voltage2 = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    602a:	8962      	ldrh	r2, [r4, #10]
    602c:	89a0      	ldrh	r0, [r4, #12]
    602e:	4919      	ldr	r1, [pc, #100]	; (6094 <canread()+0x25c>)
    6030:	4d0a      	ldr	r5, [pc, #40]	; (605c <canread()+0x224>)
    6032:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    6036:	ba12      	rev	r2, r2
    6038:	600a      	str	r2, [r1, #0]
          break;
    603a:	e717      	b.n	5e6c <canread()+0x34>
          voltage1 = (long)((inMsg.buf[2] << 24) | (inMsg.buf[3] << 16) | (inMsg.buf[4] << 8) | (inMsg.buf[5]));
    603c:	8962      	ldrh	r2, [r4, #10]
    603e:	89a0      	ldrh	r0, [r4, #12]
    6040:	4915      	ldr	r1, [pc, #84]	; (6098 <canread()+0x260>)
    6042:	4d06      	ldr	r5, [pc, #24]	; (605c <canread()+0x224>)
    6044:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
    6048:	ba12      	rev	r2, r2
    604a:	600a      	str	r2, [r1, #0]
          break;
    604c:	e70e      	b.n	5e6c <canread()+0x34>
    604e:	bf00      	nop
    6050:	1fffcfe0 	.word	0x1fffcfe0
    6054:	1fffd0d8 	.word	0x1fffd0d8
    6058:	1fffd1cc 	.word	0x1fffd1cc
    605c:	1fffcf38 	.word	0x1fffcf38
    6060:	1fff91f0 	.word	0x1fff91f0
    6064:	e5aaabff 	.word	0xe5aaabff
    6068:	e5aaaa10 	.word	0xe5aaaa10
    606c:	1fff91a0 	.word	0x1fff91a0
    6070:	1fff91c0 	.word	0x1fff91c0
    6074:	0001f214 	.word	0x0001f214
    6078:	1fffd3c0 	.word	0x1fffd3c0
    607c:	1fff89fc 	.word	0x1fff89fc
    6080:	1fffd044 	.word	0x1fffd044
    6084:	00014f3c 	.word	0x00014f3c
    6088:	00014f64 	.word	0x00014f64
    608c:	00014f90 	.word	0x00014f90
    6090:	00014f78 	.word	0x00014f78
    6094:	1fffd1c0 	.word	0x1fffd1c0
    6098:	1fffd1bc 	.word	0x1fffd1bc

0000609c <currentlimit()>:
void currentlimit() {
    609c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (bmsstatus == Error) {
    60a0:	4b8f      	ldr	r3, [pc, #572]	; (62e0 <currentlimit()+0x244>)
    60a2:	781b      	ldrb	r3, [r3, #0]
    60a4:	2b05      	cmp	r3, #5
    60a6:	d106      	bne.n	60b6 <currentlimit()+0x1a>
    discurrent = 0;
    60a8:	498e      	ldr	r1, [pc, #568]	; (62e4 <currentlimit()+0x248>)
    chargecurrent = 0;
    60aa:	4a8f      	ldr	r2, [pc, #572]	; (62e8 <currentlimit()+0x24c>)
    discurrent = 0;
    60ac:	2300      	movs	r3, #0
    60ae:	600b      	str	r3, [r1, #0]
    chargecurrent = 0;
    60b0:	6013      	str	r3, [r2, #0]
}
    60b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    discurrent = settings.discurrentmax;
    60b6:	4c8d      	ldr	r4, [pc, #564]	; (62ec <currentlimit()+0x250>)
    60b8:	4e8a      	ldr	r6, [pc, #552]	; (62e4 <currentlimit()+0x248>)
    chargecurrent = settings.chargecurrentmax;
    60ba:	4d8b      	ldr	r5, [pc, #556]	; (62e8 <currentlimit()+0x24c>)
    discurrent = settings.discurrentmax;
    60bc:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    chargecurrent = settings.chargecurrentmax;
    60be:	6e23      	ldr	r3, [r4, #96]	; 0x60
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    60c0:	488b      	ldr	r0, [pc, #556]	; (62f0 <currentlimit()+0x254>)
    discurrent = settings.discurrentmax;
    60c2:	6032      	str	r2, [r6, #0]
    chargecurrent = settings.chargecurrentmax;
    60c4:	602b      	str	r3, [r5, #0]
    if (bms.getLowTemperature() < settings.UnderTSetpoint) {
    60c6:	f7fb fd09 	bl	1adc <BMSModuleManager::getLowTemperature()>
    60ca:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    60cc:	f007 f8f2 	bl	d2b4 <__aeabi_fcmplt>
    60d0:	b110      	cbz	r0, 60d8 <currentlimit()+0x3c>
      chargecurrent = settings.chargecurrentcold;
    60d2:	f9b4 30d0 	ldrsh.w	r3, [r4, #208]	; 0xd0
    60d6:	602b      	str	r3, [r5, #0]
    if (bms.getHighTemperature() > settings.OverTSetpoint) {
    60d8:	4885      	ldr	r0, [pc, #532]	; (62f0 <currentlimit()+0x254>)
    60da:	f7fb fcfd 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    60de:	6aa1      	ldr	r1, [r4, #40]	; 0x28
    60e0:	f007 f906 	bl	d2f0 <__aeabi_fcmpgt>
    60e4:	b110      	cbz	r0, 60ec <currentlimit()+0x50>
      discurrent = 0;
    60e6:	2300      	movs	r3, #0
    60e8:	6033      	str	r3, [r6, #0]
      chargecurrent = 0;
    60ea:	602b      	str	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    60ec:	4880      	ldr	r0, [pc, #512]	; (62f0 <currentlimit()+0x254>)
    60ee:	f7fb fc43 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    60f2:	68e1      	ldr	r1, [r4, #12]
    60f4:	f007 f8fc 	bl	d2f0 <__aeabi_fcmpgt>
    60f8:	b108      	cbz	r0, 60fe <currentlimit()+0x62>
      chargecurrent = 0;
    60fa:	2300      	movs	r3, #0
    60fc:	602b      	str	r3, [r5, #0]
    if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    60fe:	487c      	ldr	r0, [pc, #496]	; (62f0 <currentlimit()+0x254>)
    6100:	f7fb fc3a 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6104:	68e1      	ldr	r1, [r4, #12]
    6106:	f007 f8f3 	bl	d2f0 <__aeabi_fcmpgt>
    610a:	b108      	cbz	r0, 6110 <currentlimit()+0x74>
      chargecurrent = 0;
    610c:	2300      	movs	r3, #0
    610e:	602b      	str	r3, [r5, #0]
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    6110:	4877      	ldr	r0, [pc, #476]	; (62f0 <currentlimit()+0x254>)
    6112:	f7fb fc0b 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6116:	6921      	ldr	r1, [r4, #16]
    6118:	f007 f8cc 	bl	d2b4 <__aeabi_fcmplt>
    611c:	b198      	cbz	r0, 6146 <currentlimit()+0xaa>
      discurrent = 0;
    611e:	2300      	movs	r3, #0
    6120:	6033      	str	r3, [r6, #0]
    if (chargecurrent > settings.chargecurrentcold) {
    6122:	f9b4 20d0 	ldrsh.w	r2, [r4, #208]	; 0xd0
    6126:	682b      	ldr	r3, [r5, #0]
    6128:	429a      	cmp	r2, r3
    612a:	db62      	blt.n	61f2 <currentlimit()+0x156>
  if (discurrent < 0) {
    612c:	6833      	ldr	r3, [r6, #0]
    612e:	2b00      	cmp	r3, #0
  if (chargecurrent < 0) {
    6130:	bfb7      	itett	lt
    6132:	682b      	ldrlt	r3, [r5, #0]
    6134:	682b      	ldrge	r3, [r5, #0]
    discurrent = 0;
    6136:	2200      	movlt	r2, #0
    6138:	6032      	strlt	r2, [r6, #0]
  if (chargecurrent < 0) {
    613a:	2b00      	cmp	r3, #0
    chargecurrent = 0;
    613c:	bfbc      	itt	lt
    613e:	2300      	movlt	r3, #0
    6140:	602b      	strlt	r3, [r5, #0]
}
    6142:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    6146:	486a      	ldr	r0, [pc, #424]	; (62f0 <currentlimit()+0x254>)
    6148:	f7fb fbf0 	bl	192c <BMSModuleManager::getLowCellVolt()>
    614c:	69a1      	ldr	r1, [r4, #24]
    614e:	f007 f8b1 	bl	d2b4 <__aeabi_fcmplt>
    6152:	2800      	cmp	r0, #0
    6154:	d1e3      	bne.n	611e <currentlimit()+0x82>
    if (discurrent > 0) {
    6156:	6833      	ldr	r3, [r6, #0]
    6158:	2b00      	cmp	r3, #0
    615a:	dde2      	ble.n	6122 <currentlimit()+0x86>
      if (bms.getHighTemperature() > settings.DisTSetpoint) {
    615c:	4864      	ldr	r0, [pc, #400]	; (62f0 <currentlimit()+0x254>)
    615e:	f7fb fcbb 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    6162:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6164:	f007 f8c4 	bl	d2f0 <__aeabi_fcmpgt>
    6168:	2800      	cmp	r0, #0
    616a:	f040 808e 	bne.w	628a <currentlimit()+0x1ee>
      if (bms.getLowCellVolt() < (settings.DischVsetpoint + settings.DisTaper)) {
    616e:	4860      	ldr	r0, [pc, #384]	; (62f0 <currentlimit()+0x254>)
    6170:	f7fb fbdc 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6174:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    6178:	4607      	mov	r7, r0
    617a:	69a0      	ldr	r0, [r4, #24]
    617c:	f006 fdf4 	bl	cd68 <__addsf3>
    6180:	4601      	mov	r1, r0
    6182:	4638      	mov	r0, r7
    6184:	f007 f896 	bl	d2b4 <__aeabi_fcmplt>
    6188:	2800      	cmp	r0, #0
    618a:	d0ca      	beq.n	6122 <currentlimit()+0x86>
        discurrent = discurrent - map(bms.getLowCellVolt(), settings.DischVsetpoint, (settings.DischVsetpoint + settings.DisTaper), settings.discurrentmax, 0);
    618c:	6830      	ldr	r0, [r6, #0]
    618e:	f006 fe9f 	bl	ced0 <__aeabi_i2f>
    6192:	4680      	mov	r8, r0
    6194:	4856      	ldr	r0, [pc, #344]	; (62f0 <currentlimit()+0x254>)
    6196:	f7fb fbc9 	bl	192c <BMSModuleManager::getLowCellVolt()>
    619a:	4681      	mov	r9, r0
	return (x - (T)in_min) * ((T)out_max - (T)out_min) / ((T)in_max - (T)in_min) + (T)out_min;
    619c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    619e:	f8d4 a018 	ldr.w	sl, [r4, #24]
    61a2:	f006 fe95 	bl	ced0 <__aeabi_i2f>
    61a6:	4651      	mov	r1, sl
    61a8:	4607      	mov	r7, r0
    61aa:	4648      	mov	r0, r9
    61ac:	f006 fdda 	bl	cd64 <__aeabi_fsub>
    61b0:	4639      	mov	r1, r7
    61b2:	4681      	mov	r9, r0
    61b4:	2000      	movs	r0, #0
    61b6:	f006 fdd5 	bl	cd64 <__aeabi_fsub>
    61ba:	4601      	mov	r1, r0
    61bc:	4648      	mov	r0, r9
    61be:	f006 fedb 	bl	cf78 <__aeabi_fmul>
    61c2:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
    61c6:	4681      	mov	r9, r0
    61c8:	4650      	mov	r0, sl
    61ca:	f006 fdcd 	bl	cd68 <__addsf3>
    61ce:	4651      	mov	r1, sl
    61d0:	f006 fdc8 	bl	cd64 <__aeabi_fsub>
    61d4:	4601      	mov	r1, r0
    61d6:	4648      	mov	r0, r9
    61d8:	f006 ff82 	bl	d0e0 <__aeabi_fdiv>
    61dc:	4639      	mov	r1, r7
    61de:	f006 fdc3 	bl	cd68 <__addsf3>
    61e2:	4601      	mov	r1, r0
    61e4:	4640      	mov	r0, r8
    61e6:	f006 fdbd 	bl	cd64 <__aeabi_fsub>
    61ea:	f007 f88b 	bl	d304 <__aeabi_f2iz>
    61ee:	6030      	str	r0, [r6, #0]
    61f0:	e797      	b.n	6122 <currentlimit()+0x86>
      if (bms.getLowTemperature() < settings.ChargeTSetpoint) {
    61f2:	483f      	ldr	r0, [pc, #252]	; (62f0 <currentlimit()+0x254>)
    61f4:	f7fb fc72 	bl	1adc <BMSModuleManager::getLowTemperature()>
    61f8:	6b21      	ldr	r1, [r4, #48]	; 0x30
    61fa:	f007 f85b 	bl	d2b4 <__aeabi_fcmplt>
    61fe:	2800      	cmp	r0, #0
    6200:	f040 80be 	bne.w	6380 <currentlimit()+0x2e4>
      if (storagemode == 1) {
    6204:	4b3b      	ldr	r3, [pc, #236]	; (62f4 <currentlimit()+0x258>)
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    6206:	483a      	ldr	r0, [pc, #232]	; (62f0 <currentlimit()+0x254>)
      if (storagemode == 1) {
    6208:	681b      	ldr	r3, [r3, #0]
    620a:	2b01      	cmp	r3, #1
    620c:	d074      	beq.n	62f8 <currentlimit()+0x25c>
        if (bms.getHighCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    620e:	f7fb fbb3 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6212:	69e1      	ldr	r1, [r4, #28]
    6214:	4607      	mov	r7, r0
    6216:	6960      	ldr	r0, [r4, #20]
    6218:	f006 fda4 	bl	cd64 <__aeabi_fsub>
    621c:	4601      	mov	r1, r0
    621e:	4638      	mov	r0, r7
    6220:	f007 f866 	bl	d2f0 <__aeabi_fcmpgt>
    6224:	2800      	cmp	r0, #0
    6226:	d081      	beq.n	612c <currentlimit()+0x90>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.ChargeVsetpoint - settings.ChargeHys), settings.ChargeVsetpoint, 0, (settings.chargecurrentmax - settings.chargecurrentend));
    6228:	6828      	ldr	r0, [r5, #0]
    622a:	f006 fe51 	bl	ced0 <__aeabi_i2f>
    622e:	4680      	mov	r8, r0
    6230:	482f      	ldr	r0, [pc, #188]	; (62f0 <currentlimit()+0x254>)
    6232:	f7fb fba1 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6236:	f8d4 9014 	ldr.w	r9, [r4, #20]
    623a:	69e1      	ldr	r1, [r4, #28]
    623c:	4682      	mov	sl, r0
    623e:	4648      	mov	r0, r9
    6240:	f006 fd90 	bl	cd64 <__aeabi_fsub>
    6244:	6e63      	ldr	r3, [r4, #100]	; 0x64
    6246:	4607      	mov	r7, r0
    6248:	6e20      	ldr	r0, [r4, #96]	; 0x60
    624a:	1ac0      	subs	r0, r0, r3
    624c:	f006 fe40 	bl	ced0 <__aeabi_i2f>
    6250:	4639      	mov	r1, r7
    6252:	4604      	mov	r4, r0
    6254:	4650      	mov	r0, sl
    6256:	f006 fd85 	bl	cd64 <__aeabi_fsub>
    625a:	4601      	mov	r1, r0
    625c:	4620      	mov	r0, r4
    625e:	f006 fe8b 	bl	cf78 <__aeabi_fmul>
    6262:	4639      	mov	r1, r7
    6264:	4604      	mov	r4, r0
    6266:	4648      	mov	r0, r9
    6268:	f006 fd7c 	bl	cd64 <__aeabi_fsub>
    626c:	4601      	mov	r1, r0
    626e:	4620      	mov	r0, r4
    6270:	f006 ff36 	bl	d0e0 <__aeabi_fdiv>
    6274:	2100      	movs	r1, #0
    6276:	f006 fd77 	bl	cd68 <__addsf3>
    627a:	4601      	mov	r1, r0
    627c:	4640      	mov	r0, r8
    627e:	f006 fd71 	bl	cd64 <__aeabi_fsub>
    6282:	f007 f83f 	bl	d304 <__aeabi_f2iz>
    6286:	6028      	str	r0, [r5, #0]
    6288:	e750      	b.n	612c <currentlimit()+0x90>
        discurrent = discurrent - map(bms.getHighTemperature(), settings.DisTSetpoint, settings.OverTSetpoint, 0, settings.discurrentmax);
    628a:	6830      	ldr	r0, [r6, #0]
    628c:	f006 fe20 	bl	ced0 <__aeabi_i2f>
    6290:	4607      	mov	r7, r0
    6292:	4817      	ldr	r0, [pc, #92]	; (62f0 <currentlimit()+0x254>)
    6294:	f7fb fc20 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    6298:	4681      	mov	r9, r0
    629a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    629c:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
    62a0:	f006 fe16 	bl	ced0 <__aeabi_i2f>
    62a4:	4651      	mov	r1, sl
    62a6:	4680      	mov	r8, r0
    62a8:	4648      	mov	r0, r9
    62aa:	f006 fd5b 	bl	cd64 <__aeabi_fsub>
    62ae:	4601      	mov	r1, r0
    62b0:	4640      	mov	r0, r8
    62b2:	f006 fe61 	bl	cf78 <__aeabi_fmul>
    62b6:	4651      	mov	r1, sl
    62b8:	4680      	mov	r8, r0
    62ba:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    62bc:	f006 fd52 	bl	cd64 <__aeabi_fsub>
    62c0:	4601      	mov	r1, r0
    62c2:	4640      	mov	r0, r8
    62c4:	f006 ff0c 	bl	d0e0 <__aeabi_fdiv>
    62c8:	2100      	movs	r1, #0
    62ca:	f006 fd4d 	bl	cd68 <__addsf3>
    62ce:	4601      	mov	r1, r0
    62d0:	4638      	mov	r0, r7
    62d2:	f006 fd47 	bl	cd64 <__aeabi_fsub>
    62d6:	f007 f815 	bl	d304 <__aeabi_f2iz>
    62da:	6030      	str	r0, [r6, #0]
    62dc:	e747      	b.n	616e <currentlimit()+0xd2>
    62de:	bf00      	nop
    62e0:	1fffcf34 	.word	0x1fffcf34
    62e4:	1fffcfcc 	.word	0x1fffcfcc
    62e8:	1fffcf40 	.word	0x1fffcf40
    62ec:	1fffd0d8 	.word	0x1fffd0d8
    62f0:	1fff91f0 	.word	0x1fff91f0
    62f4:	1fffd1b0 	.word	0x1fffd1b0
        if (bms.getHighCellVolt() > (settings.StoreVsetpoint - settings.ChargeHys)) {
    62f8:	f7fb fb3e 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    62fc:	69e1      	ldr	r1, [r4, #28]
    62fe:	4607      	mov	r7, r0
    6300:	6a20      	ldr	r0, [r4, #32]
    6302:	f006 fd2f 	bl	cd64 <__aeabi_fsub>
    6306:	4601      	mov	r1, r0
    6308:	4638      	mov	r0, r7
    630a:	f006 fff1 	bl	d2f0 <__aeabi_fcmpgt>
    630e:	2800      	cmp	r0, #0
    6310:	f43f af0c 	beq.w	612c <currentlimit()+0x90>
          chargecurrent = chargecurrent - map(bms.getHighCellVolt(), (settings.StoreVsetpoint - settings.ChargeHys), settings.StoreVsetpoint, settings.chargecurrentend, settings.chargecurrentmax);
    6314:	6828      	ldr	r0, [r5, #0]
    6316:	f006 fddb 	bl	ced0 <__aeabi_i2f>
    631a:	4681      	mov	r9, r0
    631c:	4831      	ldr	r0, [pc, #196]	; (63e4 <currentlimit()+0x348>)
    631e:	f7fb fb2b 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6322:	f8d4 a020 	ldr.w	sl, [r4, #32]
    6326:	69e1      	ldr	r1, [r4, #28]
    6328:	4683      	mov	fp, r0
    632a:	4650      	mov	r0, sl
    632c:	f006 fd1a 	bl	cd64 <__aeabi_fsub>
    6330:	4680      	mov	r8, r0
    6332:	6e60      	ldr	r0, [r4, #100]	; 0x64
    6334:	f006 fdcc 	bl	ced0 <__aeabi_i2f>
    6338:	4607      	mov	r7, r0
    633a:	6e20      	ldr	r0, [r4, #96]	; 0x60
    633c:	f006 fdc8 	bl	ced0 <__aeabi_i2f>
    6340:	4639      	mov	r1, r7
    6342:	f006 fd0f 	bl	cd64 <__aeabi_fsub>
    6346:	4641      	mov	r1, r8
    6348:	4604      	mov	r4, r0
    634a:	4658      	mov	r0, fp
    634c:	f006 fd0a 	bl	cd64 <__aeabi_fsub>
    6350:	4601      	mov	r1, r0
    6352:	4620      	mov	r0, r4
    6354:	f006 fe10 	bl	cf78 <__aeabi_fmul>
    6358:	4641      	mov	r1, r8
    635a:	4604      	mov	r4, r0
    635c:	4650      	mov	r0, sl
    635e:	f006 fd01 	bl	cd64 <__aeabi_fsub>
    6362:	4601      	mov	r1, r0
    6364:	4620      	mov	r0, r4
    6366:	f006 febb 	bl	d0e0 <__aeabi_fdiv>
    636a:	4639      	mov	r1, r7
    636c:	f006 fcfc 	bl	cd68 <__addsf3>
    6370:	4601      	mov	r1, r0
    6372:	4648      	mov	r0, r9
    6374:	f006 fcf6 	bl	cd64 <__aeabi_fsub>
    6378:	f006 ffc4 	bl	d304 <__aeabi_f2iz>
    637c:	6028      	str	r0, [r5, #0]
    637e:	e6d5      	b.n	612c <currentlimit()+0x90>
        chargecurrent = chargecurrent - map(bms.getLowTemperature(), settings.UnderTSetpoint, settings.ChargeTSetpoint, (settings.chargecurrentmax - settings.chargecurrentcold), 0);
    6380:	6828      	ldr	r0, [r5, #0]
    6382:	f006 fda5 	bl	ced0 <__aeabi_i2f>
    6386:	4680      	mov	r8, r0
    6388:	4816      	ldr	r0, [pc, #88]	; (63e4 <currentlimit()+0x348>)
    638a:	f7fb fba7 	bl	1adc <BMSModuleManager::getLowTemperature()>
    638e:	f9b4 30d0 	ldrsh.w	r3, [r4, #208]	; 0xd0
    6392:	4681      	mov	r9, r0
    6394:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6396:	1ac0      	subs	r0, r0, r3
    6398:	f006 fd9a 	bl	ced0 <__aeabi_i2f>
    639c:	f8d4 a02c 	ldr.w	sl, [r4, #44]	; 0x2c
    63a0:	4607      	mov	r7, r0
    63a2:	4651      	mov	r1, sl
    63a4:	4648      	mov	r0, r9
    63a6:	f006 fcdd 	bl	cd64 <__aeabi_fsub>
    63aa:	4639      	mov	r1, r7
    63ac:	4681      	mov	r9, r0
    63ae:	2000      	movs	r0, #0
    63b0:	f006 fcd8 	bl	cd64 <__aeabi_fsub>
    63b4:	4601      	mov	r1, r0
    63b6:	4648      	mov	r0, r9
    63b8:	f006 fdde 	bl	cf78 <__aeabi_fmul>
    63bc:	4651      	mov	r1, sl
    63be:	4681      	mov	r9, r0
    63c0:	6b20      	ldr	r0, [r4, #48]	; 0x30
    63c2:	f006 fccf 	bl	cd64 <__aeabi_fsub>
    63c6:	4601      	mov	r1, r0
    63c8:	4648      	mov	r0, r9
    63ca:	f006 fe89 	bl	d0e0 <__aeabi_fdiv>
    63ce:	4639      	mov	r1, r7
    63d0:	f006 fcca 	bl	cd68 <__addsf3>
    63d4:	4601      	mov	r1, r0
    63d6:	4640      	mov	r0, r8
    63d8:	f006 fcc4 	bl	cd64 <__aeabi_fsub>
    63dc:	f006 ff92 	bl	d304 <__aeabi_f2iz>
    63e0:	6028      	str	r0, [r5, #0]
    63e2:	e70f      	b.n	6204 <currentlimit()+0x168>
    63e4:	1fff91f0 	.word	0x1fff91f0

000063e8 <inputdebug()>:
void inputdebug() {
    63e8:	b508      	push	{r3, lr}
  Serial.println();
    63ea:	4828      	ldr	r0, [pc, #160]	; (648c <inputdebug()+0xa4>)
    63ec:	f003 f99c 	bl	9728 <Print::println()>
    63f0:	4827      	ldr	r0, [pc, #156]	; (6490 <inputdebug()+0xa8>)
    63f2:	2107      	movs	r1, #7
    63f4:	f005 fee0 	bl	c1b8 <usb_serial_write>
  if (digitalRead(IN1)) {
    63f8:	2011      	movs	r0, #17
    63fa:	f004 f88f 	bl	a51c <digitalRead>
    63fe:	b300      	cbz	r0, 6442 <inputdebug()+0x5a>
    6400:	4824      	ldr	r0, [pc, #144]	; (6494 <inputdebug()+0xac>)
    6402:	2106      	movs	r1, #6
    6404:	f005 fed8 	bl	c1b8 <usb_serial_write>
  if (digitalRead(IN3)) {
    6408:	2012      	movs	r0, #18
    640a:	f004 f887 	bl	a51c <digitalRead>
    640e:	b308      	cbz	r0, 6454 <inputdebug()+0x6c>
    6410:	4821      	ldr	r0, [pc, #132]	; (6498 <inputdebug()+0xb0>)
    6412:	2106      	movs	r1, #6
    6414:	f005 fed0 	bl	c1b8 <usb_serial_write>
  if (digitalRead(IN3)) {
    6418:	2012      	movs	r0, #18
    641a:	f004 f87f 	bl	a51c <digitalRead>
    641e:	b310      	cbz	r0, 6466 <inputdebug()+0x7e>
    6420:	481e      	ldr	r0, [pc, #120]	; (649c <inputdebug()+0xb4>)
    6422:	2106      	movs	r1, #6
    6424:	f005 fec8 	bl	c1b8 <usb_serial_write>
  if (digitalRead(IN4)) {
    6428:	2013      	movs	r0, #19
    642a:	f004 f877 	bl	a51c <digitalRead>
    642e:	b318      	cbz	r0, 6478 <inputdebug()+0x90>
    6430:	481b      	ldr	r0, [pc, #108]	; (64a0 <inputdebug()+0xb8>)
    6432:	2106      	movs	r1, #6
    6434:	f005 fec0 	bl	c1b8 <usb_serial_write>
}
    6438:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    643c:	4813      	ldr	r0, [pc, #76]	; (648c <inputdebug()+0xa4>)
    643e:	f003 b973 	b.w	9728 <Print::println()>
    6442:	4818      	ldr	r0, [pc, #96]	; (64a4 <inputdebug()+0xbc>)
    6444:	2106      	movs	r1, #6
    6446:	f005 feb7 	bl	c1b8 <usb_serial_write>
  if (digitalRead(IN3)) {
    644a:	2012      	movs	r0, #18
    644c:	f004 f866 	bl	a51c <digitalRead>
    6450:	2800      	cmp	r0, #0
    6452:	d1dd      	bne.n	6410 <inputdebug()+0x28>
    6454:	4814      	ldr	r0, [pc, #80]	; (64a8 <inputdebug()+0xc0>)
    6456:	2106      	movs	r1, #6
    6458:	f005 feae 	bl	c1b8 <usb_serial_write>
  if (digitalRead(IN3)) {
    645c:	2012      	movs	r0, #18
    645e:	f004 f85d 	bl	a51c <digitalRead>
    6462:	2800      	cmp	r0, #0
    6464:	d1dc      	bne.n	6420 <inputdebug()+0x38>
    6466:	4811      	ldr	r0, [pc, #68]	; (64ac <inputdebug()+0xc4>)
    6468:	2106      	movs	r1, #6
    646a:	f005 fea5 	bl	c1b8 <usb_serial_write>
  if (digitalRead(IN4)) {
    646e:	2013      	movs	r0, #19
    6470:	f004 f854 	bl	a51c <digitalRead>
    6474:	2800      	cmp	r0, #0
    6476:	d1db      	bne.n	6430 <inputdebug()+0x48>
    6478:	480d      	ldr	r0, [pc, #52]	; (64b0 <inputdebug()+0xc8>)
    647a:	2106      	movs	r1, #6
    647c:	f005 fe9c 	bl	c1b8 <usb_serial_write>
}
    6480:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Serial.println();
    6484:	4801      	ldr	r0, [pc, #4]	; (648c <inputdebug()+0xa4>)
    6486:	f003 b94f 	b.w	9728 <Print::println()>
    648a:	bf00      	nop
    648c:	1fff89fc 	.word	0x1fff89fc
    6490:	00014f9c 	.word	0x00014f9c
    6494:	00014fa4 	.word	0x00014fa4
    6498:	00014fb4 	.word	0x00014fb4
    649c:	00014fc4 	.word	0x00014fc4
    64a0:	00014fd4 	.word	0x00014fd4
    64a4:	00014fac 	.word	0x00014fac
    64a8:	00014fbc 	.word	0x00014fbc
    64ac:	00014fcc 	.word	0x00014fcc
    64b0:	00014fdc 	.word	0x00014fdc

000064b4 <outputdebug()>:
void outputdebug() {
    64b4:	b510      	push	{r4, lr}
  if (outputstate < 5) {
    64b6:	4c29      	ldr	r4, [pc, #164]	; (655c <outputdebug()+0xa8>)
    64b8:	6823      	ldr	r3, [r4, #0]
    64ba:	2b04      	cmp	r3, #4
    64bc:	dc26      	bgt.n	650c <outputdebug()+0x58>
    digitalWrite(OUT1, HIGH);
    64be:	2101      	movs	r1, #1
    64c0:	200b      	movs	r0, #11
    64c2:	f004 f805 	bl	a4d0 <digitalWrite>
    digitalWrite(OUT2, HIGH);
    64c6:	2101      	movs	r1, #1
    64c8:	200c      	movs	r0, #12
    64ca:	f004 f801 	bl	a4d0 <digitalWrite>
    digitalWrite(OUT3, HIGH);
    64ce:	2101      	movs	r1, #1
    64d0:	2014      	movs	r0, #20
    64d2:	f003 fffd 	bl	a4d0 <digitalWrite>
    digitalWrite(OUT4, HIGH);
    64d6:	2101      	movs	r1, #1
    64d8:	2015      	movs	r0, #21
    64da:	f003 fff9 	bl	a4d0 <digitalWrite>
    analogWrite(OUT5, 255);
    64de:	21ff      	movs	r1, #255	; 0xff
    64e0:	2016      	movs	r0, #22
    64e2:	f003 fe79 	bl	a1d8 <analogWrite>
    analogWrite(OUT6, 255);
    64e6:	21ff      	movs	r1, #255	; 0xff
    64e8:	2017      	movs	r0, #23
    64ea:	f003 fe75 	bl	a1d8 <analogWrite>
    analogWrite(OUT7, 255);
    64ee:	21ff      	movs	r1, #255	; 0xff
    64f0:	2005      	movs	r0, #5
    64f2:	f003 fe71 	bl	a1d8 <analogWrite>
    analogWrite(OUT8, 255);
    64f6:	21ff      	movs	r1, #255	; 0xff
    64f8:	2006      	movs	r0, #6
    64fa:	f003 fe6d 	bl	a1d8 <analogWrite>
    outputstate++;
    64fe:	6823      	ldr	r3, [r4, #0]
    6500:	3301      	adds	r3, #1
  if (outputstate > 10) {
    6502:	2b0a      	cmp	r3, #10
    outputstate = 0;
    6504:	bfc8      	it	gt
    6506:	2300      	movgt	r3, #0
    6508:	6023      	str	r3, [r4, #0]
}
    650a:	bd10      	pop	{r4, pc}
    digitalWrite(OUT1, LOW);
    650c:	2100      	movs	r1, #0
    650e:	200b      	movs	r0, #11
    6510:	f003 ffde 	bl	a4d0 <digitalWrite>
    digitalWrite(OUT2, LOW);
    6514:	2100      	movs	r1, #0
    6516:	200c      	movs	r0, #12
    6518:	f003 ffda 	bl	a4d0 <digitalWrite>
    digitalWrite(OUT3, LOW);
    651c:	2100      	movs	r1, #0
    651e:	2014      	movs	r0, #20
    6520:	f003 ffd6 	bl	a4d0 <digitalWrite>
    digitalWrite(OUT4, LOW);
    6524:	2100      	movs	r1, #0
    6526:	2015      	movs	r0, #21
    6528:	f003 ffd2 	bl	a4d0 <digitalWrite>
    analogWrite(OUT5, 0);
    652c:	2100      	movs	r1, #0
    652e:	2016      	movs	r0, #22
    6530:	f003 fe52 	bl	a1d8 <analogWrite>
    analogWrite(OUT6, 0);
    6534:	2100      	movs	r1, #0
    6536:	2017      	movs	r0, #23
    6538:	f003 fe4e 	bl	a1d8 <analogWrite>
    analogWrite(OUT7, 0);
    653c:	2100      	movs	r1, #0
    653e:	2005      	movs	r0, #5
    6540:	f003 fe4a 	bl	a1d8 <analogWrite>
    analogWrite(OUT8, 0);
    6544:	2100      	movs	r1, #0
    6546:	2006      	movs	r0, #6
    6548:	f003 fe46 	bl	a1d8 <analogWrite>
    outputstate++;
    654c:	6823      	ldr	r3, [r4, #0]
    654e:	3301      	adds	r3, #1
  if (outputstate > 10) {
    6550:	2b0a      	cmp	r3, #10
    outputstate = 0;
    6552:	bfc8      	it	gt
    6554:	2300      	movgt	r3, #0
    6556:	6023      	str	r3, [r4, #0]
}
    6558:	bd10      	pop	{r4, pc}
    655a:	bf00      	nop
    655c:	1fffd0c8 	.word	0x1fffd0c8

00006560 <sendcommand()>:
void sendcommand() {
    6560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  msg.id = controlid;
    6562:	4f0f      	ldr	r7, [pc, #60]	; (65a0 <sendcommand()+0x40>)
    6564:	4c0f      	ldr	r4, [pc, #60]	; (65a4 <sendcommand()+0x44>)
  Can0.write(msg);
    6566:	4e10      	ldr	r6, [pc, #64]	; (65a8 <sendcommand()+0x48>)
  msg.id = controlid;
    6568:	683b      	ldr	r3, [r7, #0]
    656a:	6023      	str	r3, [r4, #0]
  Can0.write(msg);
    656c:	4621      	mov	r1, r4
  msg.buf[0] = 0x00;
    656e:	2300      	movs	r3, #0
  msg.len = 8;
    6570:	2508      	movs	r5, #8
  Can0.write(msg);
    6572:	4630      	mov	r0, r6
  msg.buf[0] = 0x00;
    6574:	60a3      	str	r3, [r4, #8]
  msg.buf[4] = 0x00;
    6576:	60e3      	str	r3, [r4, #12]
  msg.len = 8;
    6578:	71e5      	strb	r5, [r4, #7]
  Can0.write(msg);
    657a:	f002 f805 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
  delay(1);
    657e:	2001      	movs	r0, #1
    6580:	f004 f836 	bl	a5f0 <delay>
  msg.id = controlid;
    6584:	683b      	ldr	r3, [r7, #0]
    6586:	6023      	str	r3, [r4, #0]
  msg.buf[0] = 0x45;
    6588:	4a08      	ldr	r2, [pc, #32]	; (65ac <sendcommand()+0x4c>)
  msg.len = 8;
    658a:	71e5      	strb	r5, [r4, #7]
  msg.buf[4] = 0x00;
    658c:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
  Can0.write(msg);
    6590:	4630      	mov	r0, r6
    6592:	4621      	mov	r1, r4
  msg.buf[0] = 0x45;
    6594:	60a2      	str	r2, [r4, #8]
  msg.buf[4] = 0x00;
    6596:	60e3      	str	r3, [r4, #12]
}
    6598:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  Can0.write(msg);
    659c:	f001 bff4 	b.w	8588 <FlexCAN::write(CAN_message_t const&)>
    65a0:	1fff8848 	.word	0x1fff8848
    65a4:	1fffd034 	.word	0x1fffd034
    65a8:	1fffd1cc 	.word	0x1fffd1cc
    65ac:	00280145 	.word	0x00280145

000065b0 <dashupdate()>:
void dashupdate() {
    65b0:	b530      	push	{r4, r5, lr}
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial2_write((const uint8_t *)str, len);
    65b2:	48af      	ldr	r0, [pc, #700]	; (6870 <dashupdate()+0x2c0>)
    65b4:	b083      	sub	sp, #12
    65b6:	2109      	movs	r1, #9
    65b8:	f004 fad0 	bl	ab5c <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    65bc:	2022      	movs	r0, #34	; 0x22
    65be:	f004 fa51 	bl	aa64 <serial2_putchar>
  if (settings.ESSmode == 1) {
    65c2:	4bac      	ldr	r3, [pc, #688]	; (6874 <dashupdate()+0x2c4>)
    65c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    65c8:	2b01      	cmp	r3, #1
    switch (bmsstatus) {
    65ca:	4bab      	ldr	r3, [pc, #684]	; (6878 <dashupdate()+0x2c8>)
    65cc:	781b      	ldrb	r3, [r3, #0]
  if (settings.ESSmode == 1) {
    65ce:	d009      	beq.n	65e4 <dashupdate()+0x34>
    switch (bmsstatus) {
    65d0:	2b05      	cmp	r3, #5
    65d2:	d810      	bhi.n	65f6 <dashupdate()+0x46>
    65d4:	e8df f013 	tbh	[pc, r3, lsl #1]
    65d8:	01370132 	.word	0x01370132
    65dc:	0141013c 	.word	0x0141013c
    65e0:	000b012d 	.word	0x000b012d
    switch (bmsstatus) {
    65e4:	2b00      	cmp	r3, #0
    65e6:	f000 813d 	beq.w	6864 <dashupdate()+0x2b4>
    65ea:	2b05      	cmp	r3, #5
    65ec:	d103      	bne.n	65f6 <dashupdate()+0x46>
					{ serial2_write(buffer, size); return size; }
    65ee:	48a3      	ldr	r0, [pc, #652]	; (687c <dashupdate()+0x2cc>)
    65f0:	2107      	movs	r1, #7
    65f2:	f004 fab3 	bl	ab5c <serial2_write>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    65f6:	2022      	movs	r0, #34	; 0x22
    65f8:	f004 fa34 	bl	aa64 <serial2_putchar>
    65fc:	20ff      	movs	r0, #255	; 0xff
    65fe:	f004 fa31 	bl	aa64 <serial2_putchar>
    6602:	20ff      	movs	r0, #255	; 0xff
    6604:	f004 fa2e 	bl	aa64 <serial2_putchar>
  Serial2.print(SOC);
    6608:	4c9d      	ldr	r4, [pc, #628]	; (6880 <dashupdate()+0x2d0>)
    660a:	20ff      	movs	r0, #255	; 0xff
    660c:	f004 fa2a 	bl	aa64 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6610:	489c      	ldr	r0, [pc, #624]	; (6884 <dashupdate()+0x2d4>)
    6612:	2108      	movs	r1, #8
    6614:	f004 faa2 	bl	ab5c <serial2_write>
	size_t print(int n)				{ return print((long)n); }
    6618:	6821      	ldr	r1, [r4, #0]
    661a:	489b      	ldr	r0, [pc, #620]	; (6888 <dashupdate()+0x2d8>)
    661c:	f003 f87c 	bl	9718 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6620:	20ff      	movs	r0, #255	; 0xff
    6622:	f004 fa1f 	bl	aa64 <serial2_putchar>
    6626:	20ff      	movs	r0, #255	; 0xff
    6628:	f004 fa1c 	bl	aa64 <serial2_putchar>
    662c:	20ff      	movs	r0, #255	; 0xff
    662e:	f004 fa19 	bl	aa64 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6632:	4896      	ldr	r0, [pc, #600]	; (688c <dashupdate()+0x2dc>)
    6634:	2109      	movs	r1, #9
    6636:	f004 fa91 	bl	ab5c <serial2_write>
    663a:	6821      	ldr	r1, [r4, #0]
    663c:	4892      	ldr	r0, [pc, #584]	; (6888 <dashupdate()+0x2d8>)
    663e:	f003 f86b 	bl	9718 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6642:	20ff      	movs	r0, #255	; 0xff
    6644:	f004 fa0e 	bl	aa64 <serial2_putchar>
    6648:	20ff      	movs	r0, #255	; 0xff
    664a:	f004 fa0b 	bl	aa64 <serial2_putchar>
    664e:	20ff      	movs	r0, #255	; 0xff
    6650:	f004 fa08 	bl	aa64 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6654:	488e      	ldr	r0, [pc, #568]	; (6890 <dashupdate()+0x2e0>)
    6656:	210c      	movs	r1, #12
    6658:	f004 fa80 	bl	ab5c <serial2_write>
  Serial2.print(currentact / 100, 0);
    665c:	4b8d      	ldr	r3, [pc, #564]	; (6894 <dashupdate()+0x2e4>)
    665e:	498e      	ldr	r1, [pc, #568]	; (6898 <dashupdate()+0x2e8>)
    6660:	6818      	ldr	r0, [r3, #0]
    6662:	f006 fd3d 	bl	d0e0 <__aeabi_fdiv>
    6666:	f006 fa63 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    666a:	2400      	movs	r4, #0
    666c:	4602      	mov	r2, r0
    666e:	460b      	mov	r3, r1
    6670:	9400      	str	r4, [sp, #0]
    6672:	4885      	ldr	r0, [pc, #532]	; (6888 <dashupdate()+0x2d8>)
    6674:	f003 f87c 	bl	9770 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6678:	20ff      	movs	r0, #255	; 0xff
    667a:	f004 f9f3 	bl	aa64 <serial2_putchar>
    667e:	20ff      	movs	r0, #255	; 0xff
    6680:	f004 f9f0 	bl	aa64 <serial2_putchar>
    6684:	20ff      	movs	r0, #255	; 0xff
    6686:	f004 f9ed 	bl	aa64 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    668a:	2109      	movs	r1, #9
    668c:	4883      	ldr	r0, [pc, #524]	; (689c <dashupdate()+0x2ec>)
    668e:	f004 fa65 	bl	ab5c <serial2_write>
  Serial2.print(bms.getAvgTemperature(), 0);
    6692:	4883      	ldr	r0, [pc, #524]	; (68a0 <dashupdate()+0x2f0>)
    6694:	f7fb f9c2 	bl	1a1c <BMSModuleManager::getAvgTemperature()>
    6698:	f006 fa4a 	bl	cb30 <__aeabi_f2d>
    669c:	9400      	str	r4, [sp, #0]
    669e:	4602      	mov	r2, r0
    66a0:	460b      	mov	r3, r1
    66a2:	4879      	ldr	r0, [pc, #484]	; (6888 <dashupdate()+0x2d8>)
    66a4:	f003 f864 	bl	9770 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    66a8:	20ff      	movs	r0, #255	; 0xff
    66aa:	f004 f9db 	bl	aa64 <serial2_putchar>
    66ae:	20ff      	movs	r0, #255	; 0xff
    66b0:	f004 f9d8 	bl	aa64 <serial2_putchar>
    66b4:	20ff      	movs	r0, #255	; 0xff
    66b6:	f004 f9d5 	bl	aa64 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    66ba:	210c      	movs	r1, #12
    66bc:	4879      	ldr	r0, [pc, #484]	; (68a4 <dashupdate()+0x2f4>)
    66be:	f004 fa4d 	bl	ab5c <serial2_write>
  Serial2.print(bms.getLowTemperature(), 0);
    66c2:	4877      	ldr	r0, [pc, #476]	; (68a0 <dashupdate()+0x2f0>)
    66c4:	f7fb fa0a 	bl	1adc <BMSModuleManager::getLowTemperature()>
    66c8:	f006 fa32 	bl	cb30 <__aeabi_f2d>
    66cc:	9400      	str	r4, [sp, #0]
    66ce:	4602      	mov	r2, r0
    66d0:	460b      	mov	r3, r1
    66d2:	486d      	ldr	r0, [pc, #436]	; (6888 <dashupdate()+0x2d8>)
    66d4:	f003 f84c 	bl	9770 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    66d8:	20ff      	movs	r0, #255	; 0xff
    66da:	f004 f9c3 	bl	aa64 <serial2_putchar>
    66de:	20ff      	movs	r0, #255	; 0xff
    66e0:	f004 f9c0 	bl	aa64 <serial2_putchar>
    66e4:	20ff      	movs	r0, #255	; 0xff
    66e6:	f004 f9bd 	bl	aa64 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    66ea:	210d      	movs	r1, #13
    66ec:	486e      	ldr	r0, [pc, #440]	; (68a8 <dashupdate()+0x2f8>)
    66ee:	f004 fa35 	bl	ab5c <serial2_write>
  Serial2.print(bms.getHighTemperature(), 0);
    66f2:	486b      	ldr	r0, [pc, #428]	; (68a0 <dashupdate()+0x2f0>)
    66f4:	f7fb f9f0 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    66f8:	f006 fa1a 	bl	cb30 <__aeabi_f2d>
    66fc:	9400      	str	r4, [sp, #0]
    66fe:	4602      	mov	r2, r0
    6700:	460b      	mov	r3, r1
    6702:	4861      	ldr	r0, [pc, #388]	; (6888 <dashupdate()+0x2d8>)
    6704:	f003 f834 	bl	9770 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6708:	20ff      	movs	r0, #255	; 0xff
    670a:	f004 f9ab 	bl	aa64 <serial2_putchar>
    670e:	20ff      	movs	r0, #255	; 0xff
    6710:	f004 f9a8 	bl	aa64 <serial2_putchar>
    6714:	20ff      	movs	r0, #255	; 0xff
    6716:	f004 f9a5 	bl	aa64 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    671a:	2109      	movs	r1, #9
    671c:	4863      	ldr	r0, [pc, #396]	; (68ac <dashupdate()+0x2fc>)
    671e:	f004 fa1d 	bl	ab5c <serial2_write>
  Serial2.print(bms.getPackVoltage() * 10, 0);
    6722:	485f      	ldr	r0, [pc, #380]	; (68a0 <dashupdate()+0x2f0>)
    6724:	f7fb f94c 	bl	19c0 <BMSModuleManager::getPackVoltage()>
    6728:	4961      	ldr	r1, [pc, #388]	; (68b0 <dashupdate()+0x300>)
    672a:	f006 fc25 	bl	cf78 <__aeabi_fmul>
    672e:	f006 f9ff 	bl	cb30 <__aeabi_f2d>
    6732:	9400      	str	r4, [sp, #0]
    6734:	4602      	mov	r2, r0
    6736:	460b      	mov	r3, r1
    6738:	4853      	ldr	r0, [pc, #332]	; (6888 <dashupdate()+0x2d8>)
    673a:	f003 f819 	bl	9770 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    673e:	20ff      	movs	r0, #255	; 0xff
    6740:	f004 f990 	bl	aa64 <serial2_putchar>
    6744:	20ff      	movs	r0, #255	; 0xff
    6746:	f004 f98d 	bl	aa64 <serial2_putchar>
    674a:	20ff      	movs	r0, #255	; 0xff
    674c:	f004 f98a 	bl	aa64 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6750:	210c      	movs	r1, #12
    6752:	4858      	ldr	r0, [pc, #352]	; (68b4 <dashupdate()+0x304>)
    6754:	f004 fa02 	bl	ab5c <serial2_write>
  Serial2.print(bms.getLowCellVolt() * 1000, 0);
    6758:	4851      	ldr	r0, [pc, #324]	; (68a0 <dashupdate()+0x2f0>)
    675a:	f7fb f8e7 	bl	192c <BMSModuleManager::getLowCellVolt()>
    675e:	4956      	ldr	r1, [pc, #344]	; (68b8 <dashupdate()+0x308>)
    6760:	f006 fc0a 	bl	cf78 <__aeabi_fmul>
    6764:	f006 f9e4 	bl	cb30 <__aeabi_f2d>
    6768:	9400      	str	r4, [sp, #0]
    676a:	4602      	mov	r2, r0
    676c:	460b      	mov	r3, r1
    676e:	4846      	ldr	r0, [pc, #280]	; (6888 <dashupdate()+0x2d8>)
    6770:	f002 fffe 	bl	9770 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6774:	20ff      	movs	r0, #255	; 0xff
    6776:	f004 f975 	bl	aa64 <serial2_putchar>
    677a:	20ff      	movs	r0, #255	; 0xff
    677c:	f004 f972 	bl	aa64 <serial2_putchar>
    6780:	20ff      	movs	r0, #255	; 0xff
    6782:	f004 f96f 	bl	aa64 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6786:	210d      	movs	r1, #13
    6788:	484c      	ldr	r0, [pc, #304]	; (68bc <dashupdate()+0x30c>)
    678a:	f004 f9e7 	bl	ab5c <serial2_write>
  Serial2.print(bms.getHighCellVolt() * 1000, 0);
    678e:	4844      	ldr	r0, [pc, #272]	; (68a0 <dashupdate()+0x2f0>)
    6790:	f7fb f8f2 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6794:	4948      	ldr	r1, [pc, #288]	; (68b8 <dashupdate()+0x308>)
    6796:	f006 fbef 	bl	cf78 <__aeabi_fmul>
    679a:	f006 f9c9 	bl	cb30 <__aeabi_f2d>
    679e:	9400      	str	r4, [sp, #0]
    67a0:	4602      	mov	r2, r0
    67a2:	460b      	mov	r3, r1
    67a4:	4838      	ldr	r0, [pc, #224]	; (6888 <dashupdate()+0x2d8>)
    67a6:	f002 ffe3 	bl	9770 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    67aa:	20ff      	movs	r0, #255	; 0xff
    67ac:	f004 f95a 	bl	aa64 <serial2_putchar>
    67b0:	20ff      	movs	r0, #255	; 0xff
    67b2:	f004 f957 	bl	aa64 <serial2_putchar>
    67b6:	20ff      	movs	r0, #255	; 0xff
    67b8:	f004 f954 	bl	aa64 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    67bc:	4840      	ldr	r0, [pc, #256]	; (68c0 <dashupdate()+0x310>)
    67be:	2109      	movs	r1, #9
    67c0:	f004 f9cc 	bl	ab5c <serial2_write>
  Serial2.print(firmver);
    67c4:	4b3f      	ldr	r3, [pc, #252]	; (68c4 <dashupdate()+0x314>)
	size_t print(int n)				{ return print((long)n); }
    67c6:	4830      	ldr	r0, [pc, #192]	; (6888 <dashupdate()+0x2d8>)
    67c8:	6819      	ldr	r1, [r3, #0]
    67ca:	f002 ffa5 	bl	9718 <Print::print(long)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    67ce:	20ff      	movs	r0, #255	; 0xff
    67d0:	f004 f948 	bl	aa64 <serial2_putchar>
    67d4:	20ff      	movs	r0, #255	; 0xff
    67d6:	f004 f945 	bl	aa64 <serial2_putchar>
    67da:	20ff      	movs	r0, #255	; 0xff
    67dc:	f004 f942 	bl	aa64 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    67e0:	210e      	movs	r1, #14
    67e2:	4839      	ldr	r0, [pc, #228]	; (68c8 <dashupdate()+0x318>)
    67e4:	f004 f9ba 	bl	ab5c <serial2_write>
  Serial2.print((bms.getHighCellVolt() - bms.getLowCellVolt()) * 1000, 0);
    67e8:	482d      	ldr	r0, [pc, #180]	; (68a0 <dashupdate()+0x2f0>)
    67ea:	f7fb f8c5 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    67ee:	4605      	mov	r5, r0
    67f0:	482b      	ldr	r0, [pc, #172]	; (68a0 <dashupdate()+0x2f0>)
    67f2:	f7fb f89b 	bl	192c <BMSModuleManager::getLowCellVolt()>
    67f6:	4601      	mov	r1, r0
    67f8:	4628      	mov	r0, r5
    67fa:	f006 fab3 	bl	cd64 <__aeabi_fsub>
    67fe:	492e      	ldr	r1, [pc, #184]	; (68b8 <dashupdate()+0x308>)
    6800:	f006 fbba 	bl	cf78 <__aeabi_fmul>
    6804:	f006 f994 	bl	cb30 <__aeabi_f2d>
	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
    6808:	9400      	str	r4, [sp, #0]
    680a:	4602      	mov	r2, r0
    680c:	460b      	mov	r3, r1
    680e:	481e      	ldr	r0, [pc, #120]	; (6888 <dashupdate()+0x2d8>)
    6810:	f002 ffae 	bl	9770 <Print::printFloat(double, unsigned char)>
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    6814:	20ff      	movs	r0, #255	; 0xff
    6816:	f004 f925 	bl	aa64 <serial2_putchar>
    681a:	20ff      	movs	r0, #255	; 0xff
    681c:	f004 f922 	bl	aa64 <serial2_putchar>
    6820:	20ff      	movs	r0, #255	; 0xff
    6822:	f004 f91f 	bl	aa64 <serial2_putchar>
    6826:	20ff      	movs	r0, #255	; 0xff
}
    6828:	b003      	add	sp, #12
    682a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    682e:	f004 b919 	b.w	aa64 <serial2_putchar>
					{ serial2_write(buffer, size); return size; }
    6832:	4826      	ldr	r0, [pc, #152]	; (68cc <dashupdate()+0x31c>)
    6834:	210b      	movs	r1, #11
    6836:	f004 f991 	bl	ab5c <serial2_write>
    683a:	e6dc      	b.n	65f6 <dashupdate()+0x46>
    683c:	4824      	ldr	r0, [pc, #144]	; (68d0 <dashupdate()+0x320>)
    683e:	2106      	movs	r1, #6
    6840:	f004 f98c 	bl	ab5c <serial2_write>
    6844:	e6d7      	b.n	65f6 <dashupdate()+0x46>
    6846:	4823      	ldr	r0, [pc, #140]	; (68d4 <dashupdate()+0x324>)
    6848:	2107      	movs	r1, #7
    684a:	f004 f987 	bl	ab5c <serial2_write>
    684e:	e6d2      	b.n	65f6 <dashupdate()+0x46>
    6850:	4821      	ldr	r0, [pc, #132]	; (68d8 <dashupdate()+0x328>)
    6852:	2107      	movs	r1, #7
    6854:	f004 f982 	bl	ab5c <serial2_write>
    6858:	e6cd      	b.n	65f6 <dashupdate()+0x46>
    685a:	4820      	ldr	r0, [pc, #128]	; (68dc <dashupdate()+0x32c>)
    685c:	2108      	movs	r1, #8
    685e:	f004 f97d 	bl	ab5c <serial2_write>
    6862:	e6c8      	b.n	65f6 <dashupdate()+0x46>
    6864:	481e      	ldr	r0, [pc, #120]	; (68e0 <dashupdate()+0x330>)
    6866:	2108      	movs	r1, #8
    6868:	f004 f978 	bl	ab5c <serial2_write>
    686c:	e6c3      	b.n	65f6 <dashupdate()+0x46>
    686e:	bf00      	nop
    6870:	00014fe4 	.word	0x00014fe4
    6874:	1fffd0d8 	.word	0x1fffd0d8
    6878:	1fffcf34 	.word	0x1fffcf34
    687c:	000142a0 	.word	0x000142a0
    6880:	1fff8828 	.word	0x1fff8828
    6884:	00014ffc 	.word	0x00014ffc
    6888:	1fff88bc 	.word	0x1fff88bc
    688c:	00015008 	.word	0x00015008
    6890:	00015014 	.word	0x00015014
    6894:	1fffcfc4 	.word	0x1fffcfc4
    6898:	42c80000 	.word	0x42c80000
    689c:	00015024 	.word	0x00015024
    68a0:	1fff91f0 	.word	0x1fff91f0
    68a4:	00015030 	.word	0x00015030
    68a8:	00015040 	.word	0x00015040
    68ac:	00015050 	.word	0x00015050
    68b0:	41200000 	.word	0x41200000
    68b4:	0001505c 	.word	0x0001505c
    68b8:	447a0000 	.word	0x447a0000
    68bc:	0001506c 	.word	0x0001506c
    68c0:	0001507c 	.word	0x0001507c
    68c4:	1fff8858 	.word	0x1fff8858
    68c8:	00015088 	.word	0x00015088
    68cc:	00014280 	.word	0x00014280
    68d0:	00014270 	.word	0x00014270
    68d4:	00014278 	.word	0x00014278
    68d8:	0001428c 	.word	0x0001428c
    68dc:	00014294 	.word	0x00014294
    68e0:	00014ff0 	.word	0x00014ff0

000068e4 <chargercomms()>:
void chargercomms() {
    68e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (settings.chargertype == Elcon) {
    68e6:	4eab      	ldr	r6, [pc, #684]	; (6b94 <chargercomms()+0x2b0>)
    68e8:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    68ec:	2d04      	cmp	r5, #4
    68ee:	f000 816f 	beq.w	6bd0 <chargercomms()+0x2ec>
  if (settings.chargertype == Eltek) {
    68f2:	2d03      	cmp	r5, #3
    68f4:	f000 8124 	beq.w	6b40 <chargercomms()+0x25c>
  if (settings.chargertype == BrusaNLG5) {
    68f8:	2d01      	cmp	r5, #1
    68fa:	f000 80ae 	beq.w	6a5a <chargercomms()+0x176>
  if (settings.chargertype == ChevyVolt) {
    68fe:	2d02      	cmp	r5, #2
    6900:	d078      	beq.n	69f4 <chargercomms()+0x110>
  if (settings.chargertype == Coda) {
    6902:	2d06      	cmp	r5, #6
    6904:	d002      	beq.n	690c <chargercomms()+0x28>
  if (settings.chargertype == Outlander) {
    6906:	2d08      	cmp	r5, #8
    6908:	d03e      	beq.n	6988 <chargercomms()+0xa4>
}
    690a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    msg.id = 0x050;
    690c:	4ca2      	ldr	r4, [pc, #648]	; (6b98 <chargercomms()+0x2b4>)
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    690e:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.len = 8;
    6910:	2308      	movs	r3, #8
    msg.id = 0x050;
    6912:	2250      	movs	r2, #80	; 0x50
    msg.len = 8;
    6914:	71e3      	strb	r3, [r4, #7]
    msg.buf[0] = 0x00;
    6916:	f44f 435c 	mov.w	r3, #56320	; 0xdc00
    msg.id = 0x050;
    691a:	6022      	str	r2, [r4, #0]
    msg.buf[0] = 0x00;
    691c:	8123      	strh	r3, [r4, #8]
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    691e:	f006 fad7 	bl	ced0 <__aeabi_i2f>
    6922:	6971      	ldr	r1, [r6, #20]
    6924:	f006 fb28 	bl	cf78 <__aeabi_fmul>
    6928:	499c      	ldr	r1, [pc, #624]	; (6b9c <chargercomms()+0x2b8>)
    692a:	4605      	mov	r5, r0
    692c:	f006 fce0 	bl	d2f0 <__aeabi_fcmpgt>
    6930:	2800      	cmp	r0, #0
    6932:	f040 817a 	bne.w	6c2a <chargercomms()+0x346>
    6936:	2201      	movs	r2, #1
    6938:	2390      	movs	r3, #144	; 0x90
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    693a:	72a2      	strb	r2, [r4, #10]
    if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    693c:	4a98      	ldr	r2, [pc, #608]	; (6ba0 <chargercomms()+0x2bc>)
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    693e:	72e3      	strb	r3, [r4, #11]
    msg.buf[4] = 0x00;
    6940:	2100      	movs	r1, #0
    if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    6942:	6810      	ldr	r0, [r2, #0]
    msg.buf[4] = 0x00;
    6944:	7321      	strb	r1, [r4, #12]
    if ((settings.ChargeVsetpoint * settings.Scells) * chargecurrent < 3300) {
    6946:	f006 fac3 	bl	ced0 <__aeabi_i2f>
    694a:	4629      	mov	r1, r5
    694c:	f006 fb14 	bl	cf78 <__aeabi_fmul>
    6950:	4994      	ldr	r1, [pc, #592]	; (6ba4 <chargercomms()+0x2c0>)
    6952:	4605      	mov	r5, r0
    6954:	f006 fcae 	bl	d2b4 <__aeabi_fcmplt>
    6958:	2800      	cmp	r0, #0
    695a:	f000 817c 	beq.w	6c56 <chargercomms()+0x372>
      msg.buf[5] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    695e:	4992      	ldr	r1, [pc, #584]	; (6ba8 <chargercomms()+0x2c4>)
    6960:	4628      	mov	r0, r5
    6962:	f006 fbbd 	bl	d0e0 <__aeabi_fdiv>
    6966:	f006 fcf3 	bl	d350 <__aeabi_f2uiz>
    696a:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[6] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    696e:	4618      	mov	r0, r3
    msg.buf[7] = 0x01;  //HV charging
    6970:	2201      	movs	r2, #1
      msg.buf[5] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    6972:	7360      	strb	r0, [r4, #13]
    Can0.write(msg);
    6974:	4988      	ldr	r1, [pc, #544]	; (6b98 <chargercomms()+0x2b4>)
    6976:	488d      	ldr	r0, [pc, #564]	; (6bac <chargercomms()+0x2c8>)
    msg.buf[7] = 0x01;  //HV charging
    6978:	73e2      	strb	r2, [r4, #15]
      msg.buf[6] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) * chargecurrent) / 240));
    697a:	73a3      	strb	r3, [r4, #14]
    Can0.write(msg);
    697c:	f001 fe04 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == Outlander) {
    6980:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    6984:	2d08      	cmp	r5, #8
    6986:	d1c0      	bne.n	690a <chargercomms()+0x26>
    msg.id = 0x285;
    6988:	4c83      	ldr	r4, [pc, #524]	; (6b98 <chargercomms()+0x2b4>)
    Can0.write(msg);
    698a:	4888      	ldr	r0, [pc, #544]	; (6bac <chargercomms()+0x2c8>)
    msg.len = 8;
    698c:	71e5      	strb	r5, [r4, #7]
    msg.id = 0x285;
    698e:	f240 2385 	movw	r3, #645	; 0x285
    msg.buf[4] = 0x0;
    6992:	2700      	movs	r7, #0
    Can0.write(msg);
    6994:	4621      	mov	r1, r4
    msg.id = 0x285;
    6996:	6023      	str	r3, [r4, #0]
    msg.buf[0] = 0x0;
    6998:	f44f 0336 	mov.w	r3, #11927552	; 0xb60000
    699c:	60a3      	str	r3, [r4, #8]
    msg.buf[4] = 0x0;
    699e:	81a7      	strh	r7, [r4, #12]
    msg.buf[6] = 0x0;
    69a0:	73a7      	strb	r7, [r4, #14]
    Can0.write(msg);
    69a2:	f001 fdf1 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    69a6:	2002      	movs	r0, #2
    69a8:	f003 fe22 	bl	a5f0 <delay>
    msg.id = 0x286;
    69ac:	f240 2386 	movw	r3, #646	; 0x286
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));  //volage
    69b0:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.id = 0x286;
    69b2:	6023      	str	r3, [r4, #0]
    msg.len = 8;
    69b4:	71e5      	strb	r5, [r4, #7]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));  //volage
    69b6:	f006 fa8b 	bl	ced0 <__aeabi_i2f>
    69ba:	6971      	ldr	r1, [r6, #20]
    69bc:	f006 fadc 	bl	cf78 <__aeabi_fmul>
    69c0:	497b      	ldr	r1, [pc, #492]	; (6bb0 <chargercomms()+0x2cc>)
    69c2:	f006 fad9 	bl	cf78 <__aeabi_fmul>
    69c6:	f006 fcc3 	bl	d350 <__aeabi_f2uiz>
    if (chargecurrent / ncharger > 120) {
    69ca:	4a7a      	ldr	r2, [pc, #488]	; (6bb4 <chargercomms()+0x2d0>)
    69cc:	4b74      	ldr	r3, [pc, #464]	; (6ba0 <chargercomms()+0x2bc>)
    69ce:	6811      	ldr	r1, [r2, #0]
    69d0:	681b      	ldr	r3, [r3, #0]
    69d2:	fb93 f3f1 	sdiv	r3, r3, r1
    69d6:	2b78      	cmp	r3, #120	; 0x78
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));  //volage
    69d8:	ba42      	rev16	r2, r0
    69da:	bfa8      	it	ge
    69dc:	2378      	movge	r3, #120	; 0x78
    Can0.write(msg);
    69de:	4621      	mov	r1, r4
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));  //volage
    69e0:	8122      	strh	r2, [r4, #8]
    if (chargecurrent / ncharger > 120) {
    69e2:	72a3      	strb	r3, [r4, #10]
    msg.buf[3] = 0x0;
    69e4:	72e7      	strb	r7, [r4, #11]
    msg.buf[4] = 0x0;
    69e6:	81a7      	strh	r7, [r4, #12]
    msg.buf[6] = 0x0;
    69e8:	73a7      	strb	r7, [r4, #14]
    Can0.write(msg);
    69ea:	4870      	ldr	r0, [pc, #448]	; (6bac <chargercomms()+0x2c8>)
}
    69ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Can0.write(msg);
    69f0:	f001 bdca 	b.w	8588 <FlexCAN::write(CAN_message_t const&)>
    msg.id = 0x30E;
    69f4:	4c68      	ldr	r4, [pc, #416]	; (6b98 <chargercomms()+0x2b4>)
    Can0.write(msg);
    69f6:	486d      	ldr	r0, [pc, #436]	; (6bac <chargercomms()+0x2c8>)
    msg.buf[0] = 0x02;  //only HV charging , 0x03 hv and 12V charging
    69f8:	7225      	strb	r5, [r4, #8]
    msg.id = 0x30E;
    69fa:	f240 330e 	movw	r3, #782	; 0x30e
    69fe:	6023      	str	r3, [r4, #0]
    Can0.write(msg);
    6a00:	4621      	mov	r1, r4
    msg.len = 1;
    6a02:	2301      	movs	r3, #1
    6a04:	71e3      	strb	r3, [r4, #7]
    Can0.write(msg);
    6a06:	f001 fdbf 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    if ((chargecurrent * 2) > 255) {
    6a0a:	4b65      	ldr	r3, [pc, #404]	; (6ba0 <chargercomms()+0x2bc>)
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    6a0c:	6d70      	ldr	r0, [r6, #84]	; 0x54
    if ((chargecurrent * 2) > 255) {
    6a0e:	681b      	ldr	r3, [r3, #0]
    6a10:	005b      	lsls	r3, r3, #1
    6a12:	2bff      	cmp	r3, #255	; 0xff
    msg.len = 4;
    6a14:	f04f 0204 	mov.w	r2, #4
      msg.buf[1] = (chargecurrent * 2);
    6a18:	bfd4      	ite	le
    6a1a:	b2db      	uxtble	r3, r3
      msg.buf[1] = 255;
    6a1c:	23ff      	movgt	r3, #255	; 0xff
    msg.id = 0x304;
    6a1e:	f44f 7141 	mov.w	r1, #772	; 0x304
    msg.len = 4;
    6a22:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x40;  //fixed
    6a24:	2240      	movs	r2, #64	; 0x40
    msg.id = 0x304;
    6a26:	6021      	str	r1, [r4, #0]
    msg.buf[0] = 0x40;  //fixed
    6a28:	7222      	strb	r2, [r4, #8]
      msg.buf[1] = (chargecurrent * 2);
    6a2a:	7263      	strb	r3, [r4, #9]
    if ((settings.ChargeVsetpoint * settings.Scells) > 200) {
    6a2c:	f006 fa50 	bl	ced0 <__aeabi_i2f>
    6a30:	6971      	ldr	r1, [r6, #20]
    6a32:	f006 faa1 	bl	cf78 <__aeabi_fmul>
    6a36:	4959      	ldr	r1, [pc, #356]	; (6b9c <chargercomms()+0x2b8>)
    6a38:	4605      	mov	r5, r0
    6a3a:	f006 fc59 	bl	d2f0 <__aeabi_fcmpgt>
    6a3e:	2800      	cmp	r0, #0
    6a40:	f040 80ff 	bne.w	6c42 <chargercomms()+0x35e>
    6a44:	2301      	movs	r3, #1
    6a46:	2090      	movs	r0, #144	; 0x90
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6a48:	72e0      	strb	r0, [r4, #11]
    Can0.write(msg);
    6a4a:	4953      	ldr	r1, [pc, #332]	; (6b98 <chargercomms()+0x2b4>)
    6a4c:	4857      	ldr	r0, [pc, #348]	; (6bac <chargercomms()+0x2c8>)
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6a4e:	72a3      	strb	r3, [r4, #10]
    Can0.write(msg);
    6a50:	f001 fd9a 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == Coda) {
    6a54:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    6a58:	e753      	b.n	6902 <chargercomms()+0x1e>
    msg.id = chargerid1;
    6a5a:	4b57      	ldr	r3, [pc, #348]	; (6bb8 <chargercomms()+0x2d4>)
    6a5c:	4c4e      	ldr	r4, [pc, #312]	; (6b98 <chargercomms()+0x2b4>)
    6a5e:	6819      	ldr	r1, [r3, #0]
    6a60:	6021      	str	r1, [r4, #0]
    msg.len = 7;
    6a62:	2207      	movs	r2, #7
    msg.buf[0] = 0x80;
    6a64:	2380      	movs	r3, #128	; 0x80
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6a66:	2010      	movs	r0, #16
    msg.len = 7;
    6a68:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x80;
    6a6a:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6a6c:	f003 fd56 	bl	a51c <digitalRead>
    6a70:	2800      	cmp	r0, #0
    6a72:	f000 80e4 	beq.w	6c3e <chargercomms()+0x35a>
      msg.buf[1] = highByte(maxac2 * 10);
    6a76:	4b51      	ldr	r3, [pc, #324]	; (6bbc <chargercomms()+0x2d8>)
    6a78:	681b      	ldr	r3, [r3, #0]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6a7a:	4d49      	ldr	r5, [pc, #292]	; (6ba0 <chargercomms()+0x2bc>)
    6a7c:	4f4d      	ldr	r7, [pc, #308]	; (6bb4 <chargercomms()+0x2d0>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6a7e:	6d70      	ldr	r0, [r6, #84]	; 0x54
      msg.buf[1] = highByte(maxac2 * 10);
    6a80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6a84:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    6a86:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    6a88:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[1] = highByte(maxac1 * 10);
    6a8c:	7263      	strb	r3, [r4, #9]
      msg.buf[2] = lowByte(maxac1 * 10);
    6a8e:	72a2      	strb	r2, [r4, #10]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6a90:	682b      	ldr	r3, [r5, #0]
    6a92:	683a      	ldr	r2, [r7, #0]
    6a94:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    6a98:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6a9a:	121b      	asrs	r3, r3, #8
    6a9c:	7363      	strb	r3, [r4, #13]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6a9e:	f006 fa17 	bl	ced0 <__aeabi_i2f>
    6aa2:	6971      	ldr	r1, [r6, #20]
    6aa4:	f006 fa68 	bl	cf78 <__aeabi_fmul>
    6aa8:	4b45      	ldr	r3, [pc, #276]	; (6bc0 <chargercomms()+0x2dc>)
    6aaa:	6819      	ldr	r1, [r3, #0]
    6aac:	f006 f95a 	bl	cd64 <__aeabi_fsub>
    6ab0:	493f      	ldr	r1, [pc, #252]	; (6bb0 <chargercomms()+0x2cc>)
    6ab2:	f006 fa61 	bl	cf78 <__aeabi_fmul>
    6ab6:	f006 fc4b 	bl	d350 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6aba:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6abc:	f3c0 2007 	ubfx	r0, r0, #8, #8
    Can0.write(msg);
    6ac0:	4935      	ldr	r1, [pc, #212]	; (6b98 <chargercomms()+0x2b4>)
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerendbulk) * 10));
    6ac2:	72e0      	strb	r0, [r4, #11]
    Can0.write(msg);
    6ac4:	4839      	ldr	r0, [pc, #228]	; (6bac <chargercomms()+0x2c8>)
    6ac6:	f001 fd5f 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    delay(2);
    6aca:	2002      	movs	r0, #2
    6acc:	f003 fd90 	bl	a5f0 <delay>
    msg.id = chargerid2;
    6ad0:	4b3c      	ldr	r3, [pc, #240]	; (6bc4 <chargercomms()+0x2e0>)
    6ad2:	681b      	ldr	r3, [r3, #0]
    6ad4:	6023      	str	r3, [r4, #0]
    msg.len = 7;
    6ad6:	2307      	movs	r3, #7
    6ad8:	71e3      	strb	r3, [r4, #7]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6ada:	2010      	movs	r0, #16
    msg.buf[0] = 0x80;
    6adc:	2380      	movs	r3, #128	; 0x80
    6ade:	7223      	strb	r3, [r4, #8]
    if (digitalRead(IN2) == LOW)  //Gen OFF
    6ae0:	f003 fd1c 	bl	a51c <digitalRead>
    6ae4:	2800      	cmp	r0, #0
    6ae6:	f040 80b8 	bne.w	6c5a <chargercomms()+0x376>
      msg.buf[1] = highByte(maxac1 * 10);
    6aea:	4b37      	ldr	r3, [pc, #220]	; (6bc8 <chargercomms()+0x2e4>)
      msg.buf[1] = highByte(maxac2 * 10);
    6aec:	681b      	ldr	r3, [r3, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6aee:	6d70      	ldr	r0, [r6, #84]	; 0x54
      msg.buf[1] = highByte(maxac2 * 10);
    6af0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6af4:	005a      	lsls	r2, r3, #1
      msg.buf[2] = lowByte(maxac2 * 10);
    6af6:	b2d2      	uxtb	r2, r2
      msg.buf[1] = highByte(maxac2 * 10);
    6af8:	f3c3 13c7 	ubfx	r3, r3, #7, #8
      msg.buf[2] = lowByte(maxac1 * 10);
    6afc:	72a2      	strb	r2, [r4, #10]
      msg.buf[1] = highByte(maxac1 * 10);
    6afe:	7263      	strb	r3, [r4, #9]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6b00:	f006 f9e6 	bl	ced0 <__aeabi_i2f>
    6b04:	6971      	ldr	r1, [r6, #20]
    6b06:	f006 fa37 	bl	cf78 <__aeabi_fmul>
    6b0a:	4b30      	ldr	r3, [pc, #192]	; (6bcc <chargercomms()+0x2e8>)
    6b0c:	6819      	ldr	r1, [r3, #0]
    6b0e:	f006 f929 	bl	cd64 <__aeabi_fsub>
    6b12:	4927      	ldr	r1, [pc, #156]	; (6bb0 <chargercomms()+0x2cc>)
    6b14:	f006 fa30 	bl	cf78 <__aeabi_fmul>
    6b18:	f006 fc1a 	bl	d350 <__aeabi_f2uiz>
    msg.buf[4] = lowByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6b1c:	7320      	strb	r0, [r4, #12]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6b1e:	f3c0 2007 	ubfx	r0, r0, #8, #8
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6b22:	682b      	ldr	r3, [r5, #0]
    6b24:	683a      	ldr	r2, [r7, #0]
    msg.buf[3] = highByte(uint16_t(((settings.ChargeVsetpoint * settings.Scells) - chargerend) * 10));
    6b26:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6b28:	fb93 f3f2 	sdiv	r3, r3, r2
    Can0.write(msg);
    6b2c:	491a      	ldr	r1, [pc, #104]	; (6b98 <chargercomms()+0x2b4>)
    6b2e:	481f      	ldr	r0, [pc, #124]	; (6bac <chargercomms()+0x2c8>)
    msg.buf[6] = lowByte(chargecurrent / ncharger);
    6b30:	73a3      	strb	r3, [r4, #14]
    msg.buf[5] = highByte(chargecurrent / ncharger);
    6b32:	121a      	asrs	r2, r3, #8
    6b34:	7362      	strb	r2, [r4, #13]
    Can0.write(msg);
    6b36:	f001 fd27 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == ChevyVolt) {
    6b3a:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    6b3e:	e6de      	b.n	68fe <chargercomms()+0x1a>
    msg.id = 0x2FF;  //broadcast to all Elteks
    6b40:	4c15      	ldr	r4, [pc, #84]	; (6b98 <chargercomms()+0x2b4>)
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6b42:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.buf[2] = highByte(1000);
    6b44:	72a5      	strb	r5, [r4, #10]
    msg.id = 0x2FF;  //broadcast to all Elteks
    6b46:	f240 23ff 	movw	r3, #767	; 0x2ff
    msg.len = 7;
    6b4a:	2207      	movs	r2, #7
    msg.id = 0x2FF;  //broadcast to all Elteks
    6b4c:	6023      	str	r3, [r4, #0]
    msg.buf[0] = 0x01;
    6b4e:	f64e 0301 	movw	r3, #59393	; 0xe801
    msg.len = 7;
    6b52:	71e2      	strb	r2, [r4, #7]
    msg.buf[0] = 0x01;
    6b54:	8123      	strh	r3, [r4, #8]
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6b56:	f006 f9bb 	bl	ced0 <__aeabi_i2f>
    6b5a:	6971      	ldr	r1, [r6, #20]
    6b5c:	f006 fa0c 	bl	cf78 <__aeabi_fmul>
    6b60:	4913      	ldr	r1, [pc, #76]	; (6bb0 <chargercomms()+0x2cc>)
    6b62:	f006 fa09 	bl	cf78 <__aeabi_fmul>
    6b66:	f006 fbf3 	bl	d350 <__aeabi_f2uiz>
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    6b6a:	4a12      	ldr	r2, [pc, #72]	; (6bb4 <chargercomms()+0x2d0>)
    6b6c:	4b0c      	ldr	r3, [pc, #48]	; (6ba0 <chargercomms()+0x2bc>)
    6b6e:	6811      	ldr	r1, [r2, #0]
    6b70:	681b      	ldr	r3, [r3, #0]
    6b72:	fb93 f3f1 	sdiv	r3, r3, r1
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6b76:	b280      	uxth	r0, r0
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6b78:	0a02      	lsrs	r2, r0, #8
    msg.buf[3] = lowByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6b7a:	72e0      	strb	r0, [r4, #11]
    msg.buf[5] = lowByte(chargecurrent / ncharger);
    6b7c:	7363      	strb	r3, [r4, #13]
    Can0.write(msg);
    6b7e:	480b      	ldr	r0, [pc, #44]	; (6bac <chargercomms()+0x2c8>)
    msg.buf[4] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6b80:	7322      	strb	r2, [r4, #12]
    msg.buf[6] = highByte(chargecurrent / ncharger);
    6b82:	121b      	asrs	r3, r3, #8
    Can0.write(msg);
    6b84:	4621      	mov	r1, r4
    msg.buf[6] = highByte(chargecurrent / ncharger);
    6b86:	73a3      	strb	r3, [r4, #14]
    Can0.write(msg);
    6b88:	f001 fcfe 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
  if (settings.chargertype == BrusaNLG5) {
    6b8c:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    6b90:	e6b2      	b.n	68f8 <chargercomms()+0x14>
    6b92:	bf00      	nop
    6b94:	1fffd0d8 	.word	0x1fffd0d8
    6b98:	1fffd034 	.word	0x1fffd034
    6b9c:	43480000 	.word	0x43480000
    6ba0:	1fffcf40 	.word	0x1fffcf40
    6ba4:	454e4000 	.word	0x454e4000
    6ba8:	43700000 	.word	0x43700000
    6bac:	1fffd1cc 	.word	0x1fffd1cc
    6bb0:	41200000 	.word	0x41200000
    6bb4:	1fff8864 	.word	0x1fff8864
    6bb8:	1fff8840 	.word	0x1fff8840
    6bbc:	1fff8860 	.word	0x1fff8860
    6bc0:	1fffcf48 	.word	0x1fffcf48
    6bc4:	1fff8844 	.word	0x1fff8844
    6bc8:	1fff885c 	.word	0x1fff885c
    6bcc:	1fffcf44 	.word	0x1fffcf44
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    6bd0:	4c23      	ldr	r4, [pc, #140]	; (6c60 <chargercomms()+0x37c>)
    6bd2:	4a24      	ldr	r2, [pc, #144]	; (6c64 <chargercomms()+0x380>)
    msg.flags.extended = 1;
    6bd4:	88e3      	ldrh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6bd6:	6d70      	ldr	r0, [r6, #84]	; 0x54
    msg.id = 0x1806E5F4;  //broadcast to all Elteks
    6bd8:	6022      	str	r2, [r4, #0]
    msg.flags.extended = 1;
    6bda:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    6bde:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    6be2:	f043 0301 	orr.w	r3, r3, #1
    6be6:	80e3      	strh	r3, [r4, #6]
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6be8:	f006 f972 	bl	ced0 <__aeabi_i2f>
    6bec:	6971      	ldr	r1, [r6, #20]
    6bee:	f006 f9c3 	bl	cf78 <__aeabi_fmul>
    6bf2:	491d      	ldr	r1, [pc, #116]	; (6c68 <chargercomms()+0x384>)
    6bf4:	f006 f9c0 	bl	cf78 <__aeabi_fmul>
    6bf8:	f006 fbaa 	bl	d350 <__aeabi_f2uiz>
    msg.buf[2] = highByte(chargecurrent / ncharger);
    6bfc:	4b1b      	ldr	r3, [pc, #108]	; (6c6c <chargercomms()+0x388>)
    6bfe:	4a1c      	ldr	r2, [pc, #112]	; (6c70 <chargercomms()+0x38c>)
    6c00:	681b      	ldr	r3, [r3, #0]
    6c02:	6812      	ldr	r2, [r2, #0]
    6c04:	fb93 f3f2 	sdiv	r3, r3, r2
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6c08:	ba40      	rev16	r0, r0
    msg.buf[2] = highByte(chargecurrent / ncharger);
    6c0a:	ba5b      	rev16	r3, r3
    msg.buf[4] = 0x00;
    6c0c:	2700      	movs	r7, #0
    msg.buf[0] = highByte(uint16_t(settings.ChargeVsetpoint * settings.Scells * 10));
    6c0e:	8120      	strh	r0, [r4, #8]
    Can0.write(msg);
    6c10:	4621      	mov	r1, r4
    6c12:	4818      	ldr	r0, [pc, #96]	; (6c74 <chargercomms()+0x390>)
    msg.buf[2] = highByte(chargecurrent / ncharger);
    6c14:	8163      	strh	r3, [r4, #10]
    msg.buf[4] = 0x00;
    6c16:	60e7      	str	r7, [r4, #12]
    Can0.write(msg);
    6c18:	f001 fcb6 	bl	8588 <FlexCAN::write(CAN_message_t const&)>
    msg.flags.extended = 0;
    6c1c:	79a3      	ldrb	r3, [r4, #6]
  if (settings.chargertype == Eltek) {
    6c1e:	f8d6 50b8 	ldr.w	r5, [r6, #184]	; 0xb8
    msg.flags.extended = 0;
    6c22:	f367 0300 	bfi	r3, r7, #0, #1
    6c26:	71a3      	strb	r3, [r4, #6]
    6c28:	e663      	b.n	68f2 <chargercomms()+0xe>
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    6c2a:	490f      	ldr	r1, [pc, #60]	; (6c68 <chargercomms()+0x384>)
    6c2c:	4628      	mov	r0, r5
    6c2e:	f006 f9a3 	bl	cf78 <__aeabi_fmul>
    6c32:	f006 fb8d 	bl	d350 <__aeabi_f2uiz>
    6c36:	f3c0 2207 	ubfx	r2, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 10));
    6c3a:	b2c3      	uxtb	r3, r0
    6c3c:	e67d      	b.n	693a <chargercomms()+0x56>
      msg.buf[1] = highByte(maxac1 * 10);
    6c3e:	4b0e      	ldr	r3, [pc, #56]	; (6c78 <chargercomms()+0x394>)
    6c40:	e71a      	b.n	6a78 <chargercomms()+0x194>
      msg.buf[2] = highByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6c42:	4629      	mov	r1, r5
    6c44:	4628      	mov	r0, r5
    6c46:	f006 f88f 	bl	cd68 <__addsf3>
    6c4a:	f006 fb81 	bl	d350 <__aeabi_f2uiz>
    6c4e:	f3c0 2307 	ubfx	r3, r0, #8, #8
      msg.buf[3] = lowByte(uint16_t((settings.ChargeVsetpoint * settings.Scells) * 2));
    6c52:	b2c0      	uxtb	r0, r0
    6c54:	e6f8      	b.n	6a48 <chargercomms()+0x164>
    6c56:	2396      	movs	r3, #150	; 0x96
    6c58:	e68a      	b.n	6970 <chargercomms()+0x8c>
      msg.buf[1] = highByte(maxac2 * 10);
    6c5a:	4b08      	ldr	r3, [pc, #32]	; (6c7c <chargercomms()+0x398>)
    6c5c:	e746      	b.n	6aec <chargercomms()+0x208>
    6c5e:	bf00      	nop
    6c60:	1fffd034 	.word	0x1fffd034
    6c64:	1806e5f4 	.word	0x1806e5f4
    6c68:	41200000 	.word	0x41200000
    6c6c:	1fffcf40 	.word	0x1fffcf40
    6c70:	1fff8864 	.word	0x1fff8864
    6c74:	1fffd1cc 	.word	0x1fffd1cc
    6c78:	1fff885c 	.word	0x1fff885c
    6c7c:	1fff8860 	.word	0x1fff8860

00006c80 <loop>:
void loop() {
    6c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  while (Can0.available()) {
    6c84:	4c99      	ldr	r4, [pc, #612]	; (6eec <loop+0x26c>)
void loop() {
    6c86:	b097      	sub	sp, #92	; 0x5c
  while (Can0.available()) {
    6c88:	e001      	b.n	6c8e <loop+0xe>
    canread();
    6c8a:	f7ff f8d5 	bl	5e38 <canread()>
  while (Can0.available()) {
    6c8e:	4620      	mov	r0, r4
    6c90:	f001 fb8c 	bl	83ac <FlexCAN::available()>
    6c94:	2800      	cmp	r0, #0
    6c96:	d1f8      	bne.n	6c8a <loop+0xa>
        virtual int available() { return usb_serial_available(); }
    6c98:	f005 fa5c 	bl	c154 <usb_serial_available>
  if (SERIALCONSOLE.available() > 0) {
    6c9c:	2800      	cmp	r0, #0
    6c9e:	dd01      	ble.n	6ca4 <loop+0x24>
    menu();
    6ca0:	f7fd f954 	bl	3f4c <menu()>
  if (outputcheck != 1) {
    6ca4:	4e92      	ldr	r6, [pc, #584]	; (6ef0 <loop+0x270>)
    if (settings.ESSmode == 1) {
    6ca6:	4d93      	ldr	r5, [pc, #588]	; (6ef4 <loop+0x274>)
  if (outputcheck != 1) {
    6ca8:	6833      	ldr	r3, [r6, #0]
    6caa:	2b01      	cmp	r3, #1
    6cac:	d12e      	bne.n	6d0c <loop+0x8c>
    6cae:	4c92      	ldr	r4, [pc, #584]	; (6ef8 <loop+0x278>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6cb0:	6823      	ldr	r3, [r4, #0]
  if (millis() - looptime > 500) {
    6cb2:	4a92      	ldr	r2, [pc, #584]	; (6efc <loop+0x27c>)
    6cb4:	930b      	str	r3, [sp, #44]	; 0x2c
	return ret;
    6cb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    6cb8:	6811      	ldr	r1, [r2, #0]
    6cba:	1a5b      	subs	r3, r3, r1
    6cbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    6cc0:	d850      	bhi.n	6d64 <loop+0xe4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6cc2:	6823      	ldr	r3, [r4, #0]
  if (millis() - cleartime > 20000) {
    6cc4:	4e8e      	ldr	r6, [pc, #568]	; (6f00 <loop+0x280>)
    6cc6:	9312      	str	r3, [sp, #72]	; 0x48
    6cc8:	6832      	ldr	r2, [r6, #0]
	return ret;
    6cca:	9b12      	ldr	r3, [sp, #72]	; 0x48
    6ccc:	1a9b      	subs	r3, r3, r2
    6cce:	f644 6220 	movw	r2, #20000	; 0x4e20
    6cd2:	4293      	cmp	r3, r2
    6cd4:	d82e      	bhi.n	6d34 <loop+0xb4>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6cd6:	6823      	ldr	r3, [r4, #0]
  if (millis() - looptime1 > settings.chargerspd) {
    6cd8:	4a8a      	ldr	r2, [pc, #552]	; (6f04 <loop+0x284>)
    6cda:	9314      	str	r3, [sp, #80]	; 0x50
    6cdc:	6811      	ldr	r1, [r2, #0]
	return ret;
    6cde:	9b14      	ldr	r3, [sp, #80]	; 0x50
    6ce0:	1a5b      	subs	r3, r3, r1
    6ce2:	f8d5 10bc 	ldr.w	r1, [r5, #188]	; 0xbc
    6ce6:	428b      	cmp	r3, r1
    6ce8:	d90d      	bls.n	6d06 <loop+0x86>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6cea:	6823      	ldr	r3, [r4, #0]
    6cec:	9315      	str	r3, [sp, #84]	; 0x54
    if (settings.ESSmode == 1) {
    6cee:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
	return ret;
    6cf2:	9915      	ldr	r1, [sp, #84]	; 0x54
    looptime1 = millis();
    6cf4:	6011      	str	r1, [r2, #0]
    if (settings.ESSmode == 1) {
    6cf6:	2b01      	cmp	r3, #1
    6cf8:	f000 80d6 	beq.w	6ea8 <loop+0x228>
      if (bmsstatus == Charge) {
    6cfc:	4b82      	ldr	r3, [pc, #520]	; (6f08 <loop+0x288>)
    6cfe:	781b      	ldrb	r3, [r3, #0]
    6d00:	2b03      	cmp	r3, #3
    6d02:	f000 80d1 	beq.w	6ea8 <loop+0x228>
}
    6d06:	b017      	add	sp, #92	; 0x5c
    6d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    contcon();
    6d0c:	f7fc fd36 	bl	377c <contcon()>
    if (settings.ESSmode == 1) {
    6d10:	f8d5 40a8 	ldr.w	r4, [r5, #168]	; 0xa8
      if (bmsstatus != Error && bmsstatus != Boot) {
    6d14:	4f7c      	ldr	r7, [pc, #496]	; (6f08 <loop+0x288>)
    if (settings.ESSmode == 1) {
    6d16:	2c01      	cmp	r4, #1
      if (bmsstatus != Error && bmsstatus != Boot) {
    6d18:	783b      	ldrb	r3, [r7, #0]
    if (settings.ESSmode == 1) {
    6d1a:	f000 810d 	beq.w	6f38 <loop+0x2b8>
      switch (bmsstatus) {
    6d1e:	2b05      	cmp	r3, #5
    6d20:	f200 80a8 	bhi.w	6e74 <loop+0x1f4>
    6d24:	e8df f013 	tbh	[pc, r3, lsl #1]
    6d28:	022f0216 	.word	0x022f0216
    6d2c:	02e50296 	.word	0x02e50296
    6d30:	02b7020f 	.word	0x02b7020f
    if (bms.checkcomms()) {
    6d34:	4875      	ldr	r0, [pc, #468]	; (6f0c <loop+0x28c>)
    6d36:	f7fa f83d 	bl	db4 <BMSModuleManager::checkcomms()>
    6d3a:	2800      	cmp	r0, #0
    6d3c:	f040 80a5 	bne.w	6e8a <loop+0x20a>
      if (debug != 0) {
    6d40:	4b73      	ldr	r3, [pc, #460]	; (6f10 <loop+0x290>)
    6d42:	681b      	ldr	r3, [r3, #0]
    6d44:	2b00      	cmp	r3, #0
    6d46:	f040 81eb 	bne.w	7120 <loop+0x4a0>
      bmsstatus = Error;
    6d4a:	4b6f      	ldr	r3, [pc, #444]	; (6f08 <loop+0x288>)
    6d4c:	2205      	movs	r2, #5
    6d4e:	701a      	strb	r2, [r3, #0]
      ErrorReason = ErrorReason | 0x08;
    6d50:	4a70      	ldr	r2, [pc, #448]	; (6f14 <loop+0x294>)
    6d52:	6813      	ldr	r3, [r2, #0]
    6d54:	f043 0308 	orr.w	r3, r3, #8
    6d58:	6013      	str	r3, [r2, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d5a:	6823      	ldr	r3, [r4, #0]
    6d5c:	9313      	str	r3, [sp, #76]	; 0x4c
	return ret;
    6d5e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cleartime = millis();
    6d60:	6033      	str	r3, [r6, #0]
    6d62:	e7b8      	b.n	6cd6 <loop+0x56>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6d64:	6823      	ldr	r3, [r4, #0]
    6d66:	930c      	str	r3, [sp, #48]	; 0x30
    if (SOCset == 1 && balancecells == 1) {
    6d68:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 6f18 <loop+0x298>
	return ret;
    6d6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bms.getAllVoltTemp();
    6d6e:	4867      	ldr	r0, [pc, #412]	; (6f0c <loop+0x28c>)
    looptime = millis();
    6d70:	6013      	str	r3, [r2, #0]
    bms.getAllVoltTemp();
    6d72:	f7fa fd17 	bl	17a4 <BMSModuleManager::getAllVoltTemp()>
    if (SOCset == 1 && balancecells == 1) {
    6d76:	f8da 3000 	ldr.w	r3, [sl]
    6d7a:	2b01      	cmp	r3, #1
    6d7c:	f000 815c 	beq.w	7038 <loop+0x3b8>
    if (settings.ESSmode == 1) {
    6d80:	f8d5 20a8 	ldr.w	r2, [r5, #168]	; 0xa8
    6d84:	2a01      	cmp	r2, #1
    6d86:	f000 8094 	beq.w	6eb2 <loop+0x232>
      if (SOCset != 0) {
    6d8a:	2b00      	cmp	r3, #0
    6d8c:	f040 815e 	bne.w	704c <loop+0x3cc>
    if (debug != 0) {
    6d90:	f8df 917c 	ldr.w	r9, [pc, #380]	; 6f10 <loop+0x290>
    6d94:	4f5c      	ldr	r7, [pc, #368]	; (6f08 <loop+0x288>)
    6d96:	f8d9 3000 	ldr.w	r3, [r9]
    6d9a:	b133      	cbz	r3, 6daa <loop+0x12a>
      printbmsstat();
    6d9c:	f7fb fdb8 	bl	2910 <printbmsstat()>
      bms.printPackDetails(debugdigits);
    6da0:	4b5e      	ldr	r3, [pc, #376]	; (6f1c <loop+0x29c>)
    6da2:	485a      	ldr	r0, [pc, #360]	; (6f0c <loop+0x28c>)
    6da4:	6819      	ldr	r1, [r3, #0]
    6da6:	f7fa fed5 	bl	1b54 <BMSModuleManager::printPackDetails(int)>
    if (CSVdebug != 0) {
    6daa:	f8df 8174 	ldr.w	r8, [pc, #372]	; 6f20 <loop+0x2a0>
    6dae:	f8d8 3000 	ldr.w	r3, [r8]
    6db2:	2b00      	cmp	r3, #0
    6db4:	f040 8189 	bne.w	70ca <loop+0x44a>
    if (inputcheck != 0) {
    6db8:	4b5a      	ldr	r3, [pc, #360]	; (6f24 <loop+0x2a4>)
    6dba:	681b      	ldr	r3, [r3, #0]
    6dbc:	2b00      	cmp	r3, #0
    6dbe:	f040 8181 	bne.w	70c4 <loop+0x444>
    if (outputcheck != 0) {
    6dc2:	6833      	ldr	r3, [r6, #0]
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	f000 8134 	beq.w	7032 <loop+0x3b2>
      outputdebug();
    6dca:	f7ff fb73 	bl	64b4 <outputdebug()>
    if (cellspresent == 0 && SOCset == 1) {
    6dce:	4e56      	ldr	r6, [pc, #344]	; (6f28 <loop+0x2a8>)
    updateSOC();
    6dd0:	f7fc fa62 	bl	3298 <updateSOC()>
    currentlimit();
    6dd4:	f7ff f962 	bl	609c <currentlimit()>
    VEcan();
    6dd8:	f7fc fe8c 	bl	3af4 <VEcan()>
    sendcommand();
    6ddc:	f7ff fbc0 	bl	6560 <sendcommand()>
    if (cellspresent == 0 && SOCset == 1) {
    6de0:	6833      	ldr	r3, [r6, #0]
      cellspresent = bms.seriescells();
    6de2:	484a      	ldr	r0, [pc, #296]	; (6f0c <loop+0x28c>)
    if (cellspresent == 0 && SOCset == 1) {
    6de4:	b923      	cbnz	r3, 6df0 <loop+0x170>
    6de6:	f8da 3000 	ldr.w	r3, [sl]
    6dea:	2b01      	cmp	r3, #1
    6dec:	f000 830f 	beq.w	740e <loop+0x78e>
      if (cellspresent != bms.seriescells() || cellspresent != (settings.Scells * settings.Pstrings))  //detect a fault in cells detected
    6df0:	f7fa fae4 	bl	13bc <BMSModuleManager::seriescells()>
    6df4:	6833      	ldr	r3, [r6, #0]
    6df6:	4298      	cmp	r0, r3
    6df8:	f000 8172 	beq.w	70e0 <loop+0x460>
        if (debug != 0) {
    6dfc:	f8d9 3000 	ldr.w	r3, [r9]
    6e00:	2b00      	cmp	r3, #0
    6e02:	f040 817a 	bne.w	70fa <loop+0x47a>
        ErrorReason = ErrorReason | 0x04;
    6e06:	4a43      	ldr	r2, [pc, #268]	; (6f14 <loop+0x294>)
        bmsstatus = Error;
    6e08:	2305      	movs	r3, #5
    6e0a:	703b      	strb	r3, [r7, #0]
        ErrorReason = ErrorReason | 0x04;
    6e0c:	6813      	ldr	r3, [r2, #0]
    6e0e:	f043 0304 	orr.w	r3, r3, #4
    6e12:	6013      	str	r3, [r2, #0]
    alarmupdate();
    6e14:	f7fb fbd0 	bl	25b8 <alarmupdate()>
    if (CSVdebug != 1) {
    6e18:	f8d8 3000 	ldr.w	r3, [r8]
    6e1c:	2b01      	cmp	r3, #1
    6e1e:	d001      	beq.n	6e24 <loop+0x1a4>
      dashupdate();
    6e20:	f7ff fbc6 	bl	65b0 <dashupdate()>
    if (bmsstatus == Error && ErrorReason == 0) {
    6e24:	783b      	ldrb	r3, [r7, #0]
    6e26:	2b05      	cmp	r3, #5
    6e28:	f000 8145 	beq.w	70b6 <loop+0x436>
  noInterrupts();  //   No - reset WDT
    6e2c:	b672      	cpsid	i
  WDOG_REFRESH = 0xA602;
    6e2e:	4b3f      	ldr	r3, [pc, #252]	; (6f2c <loop+0x2ac>)
    6e30:	f24a 6102 	movw	r1, #42498	; 0xa602
  WDOG_REFRESH = 0xB480;
    6e34:	f24b 4280 	movw	r2, #46208	; 0xb480
  WDOG_REFRESH = 0xA602;
    6e38:	8199      	strh	r1, [r3, #12]
  WDOG_REFRESH = 0xB480;
    6e3a:	819a      	strh	r2, [r3, #12]
  interrupts();
    6e3c:	b662      	cpsie	i
}
    6e3e:	e740      	b.n	6cc2 <loop+0x42>
        Discharge = 0;
    6e40:	4b3b      	ldr	r3, [pc, #236]	; (6f30 <loop+0x2b0>)
    6e42:	2400      	movs	r4, #0
        digitalWrite(OUT4, LOW);
    6e44:	4621      	mov	r1, r4
    6e46:	2015      	movs	r0, #21
        Discharge = 0;
    6e48:	601c      	str	r4, [r3, #0]
        digitalWrite(OUT4, LOW);
    6e4a:	f003 fb41 	bl	a4d0 <digitalWrite>
        digitalWrite(OUT3, LOW);  //turn off charger
    6e4e:	4621      	mov	r1, r4
    6e50:	2014      	movs	r0, #20
    6e52:	f003 fb3d 	bl	a4d0 <digitalWrite>
        digitalWrite(OUT2, LOW);
    6e56:	4621      	mov	r1, r4
    6e58:	200c      	movs	r0, #12
    6e5a:	f003 fb39 	bl	a4d0 <digitalWrite>
        digitalWrite(OUT1, LOW);  //turn off discharge
    6e5e:	4621      	mov	r1, r4
    6e60:	200b      	movs	r0, #11
    6e62:	f003 fb35 	bl	a4d0 <digitalWrite>
        contctrl = 0;             //turn off out 5 and 6
    6e66:	4b33      	ldr	r3, [pc, #204]	; (6f34 <loop+0x2b4>)
    6e68:	601c      	str	r4, [r3, #0]
        if (SOCset == 1) {
    6e6a:	4b2b      	ldr	r3, [pc, #172]	; (6f18 <loop+0x298>)
    6e6c:	6819      	ldr	r1, [r3, #0]
    6e6e:	2901      	cmp	r1, #1
    6e70:	f000 826b 	beq.w	734a <loop+0x6ca>
    6e74:	4c20      	ldr	r4, [pc, #128]	; (6ef8 <loop+0x278>)
    if (settings.cursens == Analoguedual || settings.cursens == Analoguesing) {
    6e76:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    6e7a:	f023 0302 	bic.w	r3, r3, #2
    6e7e:	2b01      	cmp	r3, #1
    6e80:	f47f af16 	bne.w	6cb0 <loop+0x30>
      getcurrent();
    6e84:	f7fb ff0a 	bl	2c9c <getcurrent()>
    6e88:	e712      	b.n	6cb0 <loop+0x30>
      ErrorReason = ErrorReason & ~0x08;
    6e8a:	4a22      	ldr	r2, [pc, #136]	; (6f14 <loop+0x294>)
    6e8c:	6813      	ldr	r3, [r2, #0]
    6e8e:	f023 0308 	bic.w	r3, r3, #8
    6e92:	6013      	str	r3, [r2, #0]
      if (bmsstatus == Error && ErrorReason == 0) {
    6e94:	4a1c      	ldr	r2, [pc, #112]	; (6f08 <loop+0x288>)
    6e96:	7811      	ldrb	r1, [r2, #0]
    6e98:	2905      	cmp	r1, #5
    6e9a:	f47f af5e 	bne.w	6d5a <loop+0xda>
    6e9e:	2b00      	cmp	r3, #0
    6ea0:	f47f af5b 	bne.w	6d5a <loop+0xda>
        bmsstatus = Boot;
    6ea4:	7013      	strb	r3, [r2, #0]
    6ea6:	e758      	b.n	6d5a <loop+0xda>
}
    6ea8:	b017      	add	sp, #92	; 0x5c
    6eaa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      chargercomms();
    6eae:	f7ff bd19 	b.w	68e4 <chargercomms()>
      if (SOCset != 0) {
    6eb2:	2b00      	cmp	r3, #0
    6eb4:	f43f af6c 	beq.w	6d90 <loop+0x110>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    6eb8:	4814      	ldr	r0, [pc, #80]	; (6f0c <loop+0x28c>)
    6eba:	f7fa fd37 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6ebe:	6929      	ldr	r1, [r5, #16]
    6ec0:	f006 f9f8 	bl	d2b4 <__aeabi_fcmplt>
    6ec4:	2800      	cmp	r0, #0
    6ec6:	f000 83d0 	beq.w	766a <loop+0x9ea>
          if (debug != 0) {
    6eca:	f8df 9044 	ldr.w	r9, [pc, #68]	; 6f10 <loop+0x290>
    6ece:	f8d9 3000 	ldr.w	r3, [r9]
    6ed2:	2b00      	cmp	r3, #0
    6ed4:	f040 8429 	bne.w	772a <loop+0xaaa>
          ErrorReason = ErrorReason | 0x01;
    6ed8:	4a0e      	ldr	r2, [pc, #56]	; (6f14 <loop+0x294>)
          bmsstatus = Error;
    6eda:	4f0b      	ldr	r7, [pc, #44]	; (6f08 <loop+0x288>)
          ErrorReason = ErrorReason | 0x01;
    6edc:	6813      	ldr	r3, [r2, #0]
    6ede:	f043 0301 	orr.w	r3, r3, #1
    6ee2:	6013      	str	r3, [r2, #0]
          bmsstatus = Error;
    6ee4:	2305      	movs	r3, #5
    6ee6:	703b      	strb	r3, [r7, #0]
    if (debug != 0) {
    6ee8:	e75f      	b.n	6daa <loop+0x12a>
    6eea:	bf00      	nop
    6eec:	1fffd1cc 	.word	0x1fffd1cc
    6ef0:	1fffd0c4 	.word	0x1fffd0c4
    6ef4:	1fffd0d8 	.word	0x1fffd0d8
    6ef8:	1fffd3c0 	.word	0x1fffd3c0
    6efc:	1fffd004 	.word	0x1fffd004
    6f00:	1fffcf4c 	.word	0x1fffcf4c
    6f04:	1fffd008 	.word	0x1fffd008
    6f08:	1fffcf34 	.word	0x1fffcf34
    6f0c:	1fff91f0 	.word	0x1fff91f0
    6f10:	1fff884c 	.word	0x1fff884c
    6f14:	1fff91b0 	.word	0x1fff91b0
    6f18:	1fff91cc 	.word	0x1fff91cc
    6f1c:	1fff8850 	.word	0x1fff8850
    6f20:	1fff91a4 	.word	0x1fff91a4
    6f24:	1fffcff8 	.word	0x1fffcff8
    6f28:	1fffcf3c 	.word	0x1fffcf3c
    6f2c:	40052000 	.word	0x40052000
    6f30:	1fff91ac 	.word	0x1fff91ac
    6f34:	1fffcfb0 	.word	0x1fffcfb0
      if (bmsstatus != Error && bmsstatus != Boot) {
    6f38:	2b05      	cmp	r3, #5
    6f3a:	d081      	beq.n	6e40 <loop+0x1c0>
    6f3c:	2b00      	cmp	r3, #0
    6f3e:	f43f af7f 	beq.w	6e40 <loop+0x1c0>
        contctrl = contctrl | 4;  //turn on negative contactor
    6f42:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 7204 <loop+0x584>
        if (settings.tripcont != 0) {
    6f46:	f895 20c9 	ldrb.w	r2, [r5, #201]	; 0xc9
        contctrl = contctrl | 4;  //turn on negative contactor
    6f4a:	f8d8 3000 	ldr.w	r3, [r8]
    6f4e:	f043 0304 	orr.w	r3, r3, #4
    6f52:	f8c8 3000 	str.w	r3, [r8]
        if (settings.tripcont != 0) {
    6f56:	2a00      	cmp	r2, #0
    6f58:	f040 8235 	bne.w	73c6 <loop+0x746>
    6f5c:	4caa      	ldr	r4, [pc, #680]	; (7208 <loop+0x588>)
          if (storagemode == 1) {
    6f5e:	f8df 92ac 	ldr.w	r9, [pc, #684]	; 720c <loop+0x58c>
        if (digitalRead(IN1) == LOW)  //Key OFF
    6f62:	2011      	movs	r0, #17
    6f64:	f003 fada 	bl	a51c <digitalRead>
          if (storagemode == 1) {
    6f68:	f8d9 3000 	ldr.w	r3, [r9]
        if (digitalRead(IN1) == LOW)  //Key OFF
    6f6c:	2800      	cmp	r0, #0
    6f6e:	f000 8224 	beq.w	73ba <loop+0x73a>
          if (storagemode == 0) {
    6f72:	b913      	cbnz	r3, 6f7a <loop+0x2fa>
            storagemode = 1;
    6f74:	2301      	movs	r3, #1
    6f76:	f8c9 3000 	str.w	r3, [r9]
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    6f7a:	48a5      	ldr	r0, [pc, #660]	; (7210 <loop+0x590>)
    6f7c:	f7fa fcfc 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6f80:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    6f82:	f006 f9b5 	bl	d2f0 <__aeabi_fcmpgt>
    6f86:	2800      	cmp	r0, #0
    6f88:	f040 8277 	bne.w	747a <loop+0x7fa>
        if (storagemode == 1) {
    6f8c:	f8d9 9000 	ldr.w	r9, [r9]
    6f90:	4ba0      	ldr	r3, [pc, #640]	; (7214 <loop+0x594>)
    6f92:	f1b9 0f01 	cmp.w	r9, #1
    6f96:	6018      	str	r0, [r3, #0]
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0) {
    6f98:	489d      	ldr	r0, [pc, #628]	; (7210 <loop+0x590>)
        if (storagemode == 1) {
    6f9a:	f000 8254 	beq.w	7446 <loop+0x7c6>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0) {
    6f9e:	f7fa fceb 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    6fa2:	68e9      	ldr	r1, [r5, #12]
    6fa4:	f006 f9a4 	bl	d2f0 <__aeabi_fcmpgt>
    6fa8:	2800      	cmp	r0, #0
    6faa:	f000 82f7 	beq.w	759c <loop+0x91c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    6fae:	6823      	ldr	r3, [r4, #0]
    6fb0:	9305      	str	r3, [sp, #20]
            if ((millis() - overtriptimer) > settings.triptime) {
    6fb2:	4b99      	ldr	r3, [pc, #612]	; (7218 <loop+0x598>)
    6fb4:	681a      	ldr	r2, [r3, #0]
	return ret;
    6fb6:	9b05      	ldr	r3, [sp, #20]
    6fb8:	1a9b      	subs	r3, r3, r2
    6fba:	f8b5 20ca 	ldrh.w	r2, [r5, #202]	; 0xca
    6fbe:	4293      	cmp	r3, r2
    6fc0:	f200 8331 	bhi.w	7626 <loop+0x9a6>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getLowCellVolt() < settings.DischVsetpoint) {
    6fc4:	4892      	ldr	r0, [pc, #584]	; (7210 <loop+0x590>)
    6fc6:	f7fa fcb1 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6fca:	6929      	ldr	r1, [r5, #16]
    6fcc:	f006 f972 	bl	d2b4 <__aeabi_fcmplt>
    6fd0:	b940      	cbnz	r0, 6fe4 <loop+0x364>
    6fd2:	488f      	ldr	r0, [pc, #572]	; (7210 <loop+0x590>)
    6fd4:	f7fa fcaa 	bl	192c <BMSModuleManager::getLowCellVolt()>
    6fd8:	69a9      	ldr	r1, [r5, #24]
    6fda:	f006 f96b 	bl	d2b4 <__aeabi_fcmplt>
    6fde:	2800      	cmp	r0, #0
    6fe0:	f000 8358 	beq.w	7694 <loop+0xa14>
          if (digitalRead(OUT1) == 1) {
    6fe4:	200b      	movs	r0, #11
    6fe6:	f003 fa99 	bl	a51c <digitalRead>
    6fea:	2801      	cmp	r0, #1
    6fec:	f000 8257 	beq.w	749e <loop+0x81e>
        if (SOCset == 1) {
    6ff0:	4b8a      	ldr	r3, [pc, #552]	; (721c <loop+0x59c>)
    6ff2:	681b      	ldr	r3, [r3, #0]
    6ff4:	2b01      	cmp	r3, #1
    6ff6:	f47f af3e 	bne.w	6e76 <loop+0x1f6>
          if (settings.tripcont == 0) {
    6ffa:	f895 30c9 	ldrb.w	r3, [r5, #201]	; 0xc9
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    6ffe:	4884      	ldr	r0, [pc, #528]	; (7210 <loop+0x590>)
          if (settings.tripcont == 0) {
    7000:	2b00      	cmp	r3, #0
    7002:	f040 8371 	bne.w	76e8 <loop+0xa68>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    7006:	f7fa fc91 	bl	192c <BMSModuleManager::getLowCellVolt()>
    700a:	6929      	ldr	r1, [r5, #16]
    700c:	f006 f952 	bl	d2b4 <__aeabi_fcmplt>
    7010:	b940      	cbnz	r0, 7024 <loop+0x3a4>
    7012:	487f      	ldr	r0, [pc, #508]	; (7210 <loop+0x590>)
    7014:	f7fa fcb0 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7018:	68e9      	ldr	r1, [r5, #12]
    701a:	f006 f969 	bl	d2f0 <__aeabi_fcmpgt>
    701e:	2800      	cmp	r0, #0
    7020:	f000 8424 	beq.w	786c <loop+0xbec>
              digitalWrite(OUT2, HIGH);  //trip breaker
    7024:	2101      	movs	r1, #1
    7026:	200c      	movs	r0, #12
    7028:	f003 fa52 	bl	a4d0 <digitalWrite>
              bmsstatus = Error;
    702c:	2305      	movs	r3, #5
    702e:	703b      	strb	r3, [r7, #0]
    7030:	e721      	b.n	6e76 <loop+0x1f6>
      gaugeupdate();
    7032:	f7fb fb55 	bl	26e0 <gaugeupdate()>
    7036:	e6ca      	b.n	6dce <loop+0x14e>
    if (SOCset == 1 && balancecells == 1) {
    7038:	4b76      	ldr	r3, [pc, #472]	; (7214 <loop+0x594>)
    703a:	681b      	ldr	r3, [r3, #0]
    703c:	2b01      	cmp	r3, #1
    703e:	f000 81fb 	beq.w	7438 <loop+0x7b8>
    if (settings.ESSmode == 1) {
    7042:	f8d5 30a8 	ldr.w	r3, [r5, #168]	; 0xa8
    7046:	2b01      	cmp	r3, #1
    7048:	f43f af36 	beq.w	6eb8 <loop+0x238>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint) {
    704c:	4870      	ldr	r0, [pc, #448]	; (7210 <loop+0x590>)
    704e:	f7fa fc6d 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7052:	6929      	ldr	r1, [r5, #16]
    7054:	f006 f92e 	bl	d2b4 <__aeabi_fcmplt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7058:	6823      	ldr	r3, [r4, #0]
    705a:	2800      	cmp	r0, #0
    705c:	f040 816b 	bne.w	7336 <loop+0x6b6>
    7060:	930e      	str	r3, [sp, #56]	; 0x38
	return ret;
    7062:	9a0e      	ldr	r2, [sp, #56]	; 0x38
          UnderTime = millis() + settings.triptime;
    7064:	f8b5 30ca 	ldrh.w	r3, [r5, #202]	; 0xca
    7068:	4f6d      	ldr	r7, [pc, #436]	; (7220 <loop+0x5a0>)
    706a:	4413      	add	r3, r2
    706c:	4a6d      	ldr	r2, [pc, #436]	; (7224 <loop+0x5a4>)
    706e:	6013      	str	r3, [r2, #0]
        if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    7070:	4867      	ldr	r0, [pc, #412]	; (7210 <loop+0x590>)
    7072:	f7fa fc81 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7076:	6929      	ldr	r1, [r5, #16]
    7078:	f006 f91c 	bl	d2b4 <__aeabi_fcmplt>
    707c:	2800      	cmp	r0, #0
    707e:	f000 81d1 	beq.w	7424 <loop+0x7a4>
          bmsstatus = Error;
    7082:	2305      	movs	r3, #5
    7084:	703b      	strb	r3, [r7, #0]
        if (bms.getHighCellVolt() > settings.OverVSetpoint) {
    7086:	4862      	ldr	r0, [pc, #392]	; (7210 <loop+0x590>)
    7088:	f7fa fc76 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    708c:	68e9      	ldr	r1, [r5, #12]
    708e:	f006 f92f 	bl	d2f0 <__aeabi_fcmpgt>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7092:	6823      	ldr	r3, [r4, #0]
    7094:	2800      	cmp	r0, #0
    7096:	f000 81ae 	beq.w	73f6 <loop+0x776>
    709a:	930f      	str	r3, [sp, #60]	; 0x3c
          if (OverTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    709c:	4b62      	ldr	r3, [pc, #392]	; (7228 <loop+0x5a8>)
    if (debug != 0) {
    709e:	f8df 918c 	ldr.w	r9, [pc, #396]	; 722c <loop+0x5ac>
          if (OverTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    70a2:	681a      	ldr	r2, [r3, #0]
	return ret;
    70a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    70a6:	429a      	cmp	r2, r3
    70a8:	f080 81ae 	bcs.w	7408 <loop+0x788>
            bmsstatus = Error;
    70ac:	2305      	movs	r3, #5
    70ae:	703b      	strb	r3, [r7, #0]
    if (debug != 0) {
    70b0:	f8d9 3000 	ldr.w	r3, [r9]
    70b4:	e671      	b.n	6d9a <loop+0x11a>
    if (bmsstatus == Error && ErrorReason == 0) {
    70b6:	4b5e      	ldr	r3, [pc, #376]	; (7230 <loop+0x5b0>)
    70b8:	681b      	ldr	r3, [r3, #0]
    70ba:	2b00      	cmp	r3, #0
    70bc:	f47f aeb6 	bne.w	6e2c <loop+0x1ac>
      bmsstatus = Boot;
    70c0:	703b      	strb	r3, [r7, #0]
    70c2:	e6b3      	b.n	6e2c <loop+0x1ac>
      inputdebug();
    70c4:	f7ff f990 	bl	63e8 <inputdebug()>
    70c8:	e67b      	b.n	6dc2 <loop+0x142>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    70ca:	6823      	ldr	r3, [r4, #0]
    70cc:	9311      	str	r3, [sp, #68]	; 0x44
      bms.printAllCSV(millis(), currentact, SOC);
    70ce:	4a59      	ldr	r2, [pc, #356]	; (7234 <loop+0x5b4>)
    70d0:	4b59      	ldr	r3, [pc, #356]	; (7238 <loop+0x5b8>)
	return ret;
    70d2:	9911      	ldr	r1, [sp, #68]	; 0x44
    70d4:	681b      	ldr	r3, [r3, #0]
    70d6:	6812      	ldr	r2, [r2, #0]
    70d8:	484d      	ldr	r0, [pc, #308]	; (7210 <loop+0x590>)
    70da:	f7fa fea5 	bl	1e28 <BMSModuleManager::printAllCSV(unsigned long, float, int)>
    70de:	e66b      	b.n	6db8 <loop+0x138>
      if (cellspresent != bms.seriescells() || cellspresent != (settings.Scells * settings.Pstrings))  //detect a fault in cells detected
    70e0:	6d6b      	ldr	r3, [r5, #84]	; 0x54
    70e2:	6daa      	ldr	r2, [r5, #88]	; 0x58
    70e4:	fb02 f303 	mul.w	r3, r2, r3
    70e8:	4298      	cmp	r0, r3
    70ea:	f47f ae87 	bne.w	6dfc <loop+0x17c>
        ErrorReason = ErrorReason & ~0x04;
    70ee:	4a50      	ldr	r2, [pc, #320]	; (7230 <loop+0x5b0>)
    70f0:	6813      	ldr	r3, [r2, #0]
    70f2:	f023 0304 	bic.w	r3, r3, #4
    70f6:	6013      	str	r3, [r2, #0]
    70f8:	e68c      	b.n	6e14 <loop+0x194>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    70fa:	2102      	movs	r1, #2
    70fc:	484f      	ldr	r0, [pc, #316]	; (723c <loop+0x5bc>)
    70fe:	f005 f85b 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    7102:	484f      	ldr	r0, [pc, #316]	; (7240 <loop+0x5c0>)
    7104:	f002 fb10 	bl	9728 <Print::println()>
    7108:	211d      	movs	r1, #29
    710a:	484e      	ldr	r0, [pc, #312]	; (7244 <loop+0x5c4>)
    710c:	f005 f854 	bl	c1b8 <usb_serial_write>
    7110:	2102      	movs	r1, #2
    7112:	484a      	ldr	r0, [pc, #296]	; (723c <loop+0x5bc>)
    7114:	f005 f850 	bl	c1b8 <usb_serial_write>
    7118:	4849      	ldr	r0, [pc, #292]	; (7240 <loop+0x5c0>)
    711a:	f002 fb05 	bl	9728 <Print::println()>
    711e:	e672      	b.n	6e06 <loop+0x186>
    7120:	2102      	movs	r1, #2
    7122:	4846      	ldr	r0, [pc, #280]	; (723c <loop+0x5bc>)
    7124:	f005 f848 	bl	c1b8 <usb_serial_write>
    7128:	4845      	ldr	r0, [pc, #276]	; (7240 <loop+0x5c0>)
    712a:	f002 fafd 	bl	9728 <Print::println()>
    712e:	2119      	movs	r1, #25
    7130:	4845      	ldr	r0, [pc, #276]	; (7248 <loop+0x5c8>)
    7132:	f005 f841 	bl	c1b8 <usb_serial_write>
    7136:	2102      	movs	r1, #2
    7138:	4840      	ldr	r0, [pc, #256]	; (723c <loop+0x5bc>)
    713a:	f005 f83d 	bl	c1b8 <usb_serial_write>
    713e:	4840      	ldr	r0, [pc, #256]	; (7240 <loop+0x5c0>)
    7140:	f002 faf2 	bl	9728 <Print::println()>
    7144:	e601      	b.n	6d4a <loop+0xca>
          Discharge = 0;
    7146:	4b41      	ldr	r3, [pc, #260]	; (724c <loop+0x5cc>)
    7148:	4c2f      	ldr	r4, [pc, #188]	; (7208 <loop+0x588>)
    714a:	2200      	movs	r2, #0
    714c:	601a      	str	r2, [r3, #0]
          Prechargecon();
    714e:	f7fc faa3 	bl	3698 <Prechargecon()>
          break;
    7152:	e690      	b.n	6e76 <loop+0x1f6>
          Discharge = 0;
    7154:	4b3d      	ldr	r3, [pc, #244]	; (724c <loop+0x5cc>)
    7156:	2400      	movs	r4, #0
          digitalWrite(OUT4, LOW);
    7158:	4621      	mov	r1, r4
    715a:	2015      	movs	r0, #21
          Discharge = 0;
    715c:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    715e:	f003 f9b7 	bl	a4d0 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    7162:	4621      	mov	r1, r4
    7164:	2014      	movs	r0, #20
    7166:	f003 f9b3 	bl	a4d0 <digitalWrite>
          digitalWrite(OUT2, LOW);
    716a:	4621      	mov	r1, r4
    716c:	200c      	movs	r0, #12
    716e:	f003 f9af 	bl	a4d0 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    7172:	4621      	mov	r1, r4
    7174:	200b      	movs	r0, #11
    7176:	f003 f9ab 	bl	a4d0 <digitalWrite>
          contctrl = 0;
    717a:	4b22      	ldr	r3, [pc, #136]	; (7204 <loop+0x584>)
    717c:	601c      	str	r4, [r3, #0]
          bmsstatus = Ready;
    717e:	2301      	movs	r3, #1
    7180:	4c21      	ldr	r4, [pc, #132]	; (7208 <loop+0x588>)
    7182:	703b      	strb	r3, [r7, #0]
          break;
    7184:	e677      	b.n	6e76 <loop+0x1f6>
          Discharge = 0;
    7186:	4b31      	ldr	r3, [pc, #196]	; (724c <loop+0x5cc>)
    7188:	2400      	movs	r4, #0
          digitalWrite(OUT4, LOW);
    718a:	4621      	mov	r1, r4
    718c:	2015      	movs	r0, #21
          Discharge = 0;
    718e:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    7190:	f003 f99e 	bl	a4d0 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    7194:	4621      	mov	r1, r4
    7196:	2014      	movs	r0, #20
    7198:	f003 f99a 	bl	a4d0 <digitalWrite>
          digitalWrite(OUT2, LOW);
    719c:	4621      	mov	r1, r4
    719e:	200c      	movs	r0, #12
    71a0:	f003 f996 	bl	a4d0 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    71a4:	4621      	mov	r1, r4
    71a6:	200b      	movs	r0, #11
    71a8:	f003 f992 	bl	a4d0 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    71ac:	4b15      	ldr	r3, [pc, #84]	; (7204 <loop+0x584>)
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    71ae:	4818      	ldr	r0, [pc, #96]	; (7210 <loop+0x590>)
          contctrl = 0;             //turn off out 5 and 6
    71b0:	601c      	str	r4, [r3, #0]
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    71b2:	f7fa fbe1 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    71b6:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    71b8:	f006 f89a 	bl	d2f0 <__aeabi_fcmpgt>
    71bc:	2800      	cmp	r0, #0
    71be:	f040 81db 	bne.w	7578 <loop+0x8f8>
    71c2:	4b14      	ldr	r3, [pc, #80]	; (7214 <loop+0x594>)
    71c4:	6018      	str	r0, [r3, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    71c6:	2012      	movs	r0, #18
    71c8:	f003 f9a8 	bl	a51c <digitalRead>
    71cc:	2801      	cmp	r0, #1
    71ce:	f000 82ca 	beq.w	7766 <loop+0xae6>
    71d2:	4c0d      	ldr	r4, [pc, #52]	; (7208 <loop+0x588>)
          if (digitalRead(IN1) == HIGH && bms.getLowCellVolt() > settings.DischVsetpoint)  //detect Key ON
    71d4:	2011      	movs	r0, #17
    71d6:	f003 f9a1 	bl	a51c <digitalRead>
    71da:	2801      	cmp	r0, #1
    71dc:	f47f ae4b 	bne.w	6e76 <loop+0x1f6>
    71e0:	480b      	ldr	r0, [pc, #44]	; (7210 <loop+0x590>)
    71e2:	f7fa fba3 	bl	192c <BMSModuleManager::getLowCellVolt()>
    71e6:	69a9      	ldr	r1, [r5, #24]
    71e8:	f006 f882 	bl	d2f0 <__aeabi_fcmpgt>
    71ec:	2800      	cmp	r0, #0
    71ee:	f43f ae42 	beq.w	6e76 <loop+0x1f6>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    71f2:	6822      	ldr	r2, [r4, #0]
    71f4:	920a      	str	r2, [sp, #40]	; 0x28
            bmsstatus = Precharge;
    71f6:	2304      	movs	r3, #4
    71f8:	703b      	strb	r3, [r7, #0]
            Pretimer = millis();
    71fa:	4b15      	ldr	r3, [pc, #84]	; (7250 <loop+0x5d0>)
	return ret;
    71fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    71fe:	601a      	str	r2, [r3, #0]
    7200:	e639      	b.n	6e76 <loop+0x1f6>
    7202:	bf00      	nop
    7204:	1fffcfb0 	.word	0x1fffcfb0
    7208:	1fffd3c0 	.word	0x1fffd3c0
    720c:	1fffd1b0 	.word	0x1fffd1b0
    7210:	1fff91f0 	.word	0x1fff91f0
    7214:	1fff91e8 	.word	0x1fff91e8
    7218:	1fffd0cc 	.word	0x1fffd0cc
    721c:	1fff91cc 	.word	0x1fff91cc
    7220:	1fffcf34 	.word	0x1fffcf34
    7224:	1fff91d4 	.word	0x1fff91d4
    7228:	1fff91b4 	.word	0x1fff91b4
    722c:	1fff884c 	.word	0x1fff884c
    7230:	1fff91b0 	.word	0x1fff91b0
    7234:	1fffcfc4 	.word	0x1fffcfc4
    7238:	1fff8828 	.word	0x1fff8828
    723c:	00014fa8 	.word	0x00014fa8
    7240:	1fff89fc 	.word	0x1fff89fc
    7244:	0001513c 	.word	0x0001513c
    7248:	0001515c 	.word	0x0001515c
    724c:	1fff91ac 	.word	0x1fff91ac
    7250:	1fff91b8 	.word	0x1fff91b8
          Discharge = 1;
    7254:	4ba3      	ldr	r3, [pc, #652]	; (74e4 <loop+0x864>)
    7256:	2401      	movs	r4, #1
          if (digitalRead(IN1) == LOW)  //Key OFF
    7258:	2011      	movs	r0, #17
          Discharge = 1;
    725a:	601c      	str	r4, [r3, #0]
          if (digitalRead(IN1) == LOW)  //Key OFF
    725c:	f003 f95e 	bl	a51c <digitalRead>
    7260:	b900      	cbnz	r0, 7264 <loop+0x5e4>
            bmsstatus = Ready;
    7262:	703c      	strb	r4, [r7, #0]
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    7264:	2012      	movs	r0, #18
    7266:	f003 f959 	bl	a51c <digitalRead>
    726a:	2801      	cmp	r0, #1
    726c:	f47f ae02 	bne.w	6e74 <loop+0x1f4>
    7270:	489d      	ldr	r0, [pc, #628]	; (74e8 <loop+0x868>)
    7272:	f7fa fb81 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7276:	69e9      	ldr	r1, [r5, #28]
    7278:	4604      	mov	r4, r0
    727a:	6968      	ldr	r0, [r5, #20]
    727c:	f005 fd72 	bl	cd64 <__aeabi_fsub>
    7280:	4601      	mov	r1, r0
    7282:	4620      	mov	r0, r4
    7284:	f006 f816 	bl	d2b4 <__aeabi_fcmplt>
    7288:	2800      	cmp	r0, #0
    728a:	f43f adf3 	beq.w	6e74 <loop+0x1f4>
            bmsstatus = Charge;
    728e:	2303      	movs	r3, #3
    7290:	4c96      	ldr	r4, [pc, #600]	; (74ec <loop+0x86c>)
    7292:	703b      	strb	r3, [r7, #0]
    7294:	e5ef      	b.n	6e76 <loop+0x1f6>
          Discharge = 0;
    7296:	4b93      	ldr	r3, [pc, #588]	; (74e4 <loop+0x864>)
    7298:	2400      	movs	r4, #0
          digitalWrite(OUT4, LOW);
    729a:	4621      	mov	r1, r4
    729c:	2015      	movs	r0, #21
          Discharge = 0;
    729e:	601c      	str	r4, [r3, #0]
          digitalWrite(OUT4, LOW);
    72a0:	f003 f916 	bl	a4d0 <digitalWrite>
          digitalWrite(OUT3, LOW);  //turn off charger
    72a4:	4621      	mov	r1, r4
    72a6:	2014      	movs	r0, #20
    72a8:	f003 f912 	bl	a4d0 <digitalWrite>
          digitalWrite(OUT2, LOW);
    72ac:	4621      	mov	r1, r4
    72ae:	200c      	movs	r0, #12
    72b0:	f003 f90e 	bl	a4d0 <digitalWrite>
          digitalWrite(OUT1, LOW);  //turn off discharge
    72b4:	4621      	mov	r1, r4
    72b6:	200b      	movs	r0, #11
    72b8:	f003 f90a 	bl	a4d0 <digitalWrite>
          contctrl = 0;             //turn off out 5 and 6
    72bc:	4b8c      	ldr	r3, [pc, #560]	; (74f0 <loop+0x870>)
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    72be:	488a      	ldr	r0, [pc, #552]	; (74e8 <loop+0x868>)
          contctrl = 0;             //turn off out 5 and 6
    72c0:	601c      	str	r4, [r3, #0]
          if (bms.getLowCellVolt() >= settings.UnderVSetpoint && bms.getHighCellVolt() <= settings.OverVSetpoint && digitalRead(IN1) == LOW) {
    72c2:	f7fa fb33 	bl	192c <BMSModuleManager::getLowCellVolt()>
    72c6:	6929      	ldr	r1, [r5, #16]
    72c8:	f006 f808 	bl	d2dc <__aeabi_fcmpge>
    72cc:	2800      	cmp	r0, #0
    72ce:	f43f add1 	beq.w	6e74 <loop+0x1f4>
    72d2:	4885      	ldr	r0, [pc, #532]	; (74e8 <loop+0x868>)
    72d4:	f7fa fb50 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    72d8:	68e9      	ldr	r1, [r5, #12]
    72da:	f005 fff5 	bl	d2c8 <__aeabi_fcmple>
    72de:	2800      	cmp	r0, #0
    72e0:	f43f adc8 	beq.w	6e74 <loop+0x1f4>
    72e4:	2011      	movs	r0, #17
    72e6:	f003 f919 	bl	a51c <digitalRead>
    72ea:	2800      	cmp	r0, #0
    72ec:	f43f af47 	beq.w	717e <loop+0x4fe>
    72f0:	e5c0      	b.n	6e74 <loop+0x1f4>
          Discharge = 0;
    72f2:	4b7c      	ldr	r3, [pc, #496]	; (74e4 <loop+0x864>)
    72f4:	4c7f      	ldr	r4, [pc, #508]	; (74f4 <loop+0x874>)
    72f6:	2200      	movs	r2, #0
          digitalWrite(OUT3, HIGH);  //enable charger
    72f8:	2101      	movs	r1, #1
    72fa:	2014      	movs	r0, #20
          Discharge = 0;
    72fc:	601a      	str	r2, [r3, #0]
          digitalWrite(OUT3, HIGH);  //enable charger
    72fe:	f003 f8e7 	bl	a4d0 <digitalWrite>
          if (bms.getHighCellVolt() > settings.balanceVoltage) {
    7302:	4879      	ldr	r0, [pc, #484]	; (74e8 <loop+0x868>)
    7304:	f7fa fb38 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7308:	6ca9      	ldr	r1, [r5, #72]	; 0x48
    730a:	f005 fff1 	bl	d2f0 <__aeabi_fcmpgt>
    730e:	3800      	subs	r0, #0
    7310:	bf18      	it	ne
    7312:	2001      	movne	r0, #1
    7314:	6020      	str	r0, [r4, #0]
          if (bms.getHighCellVolt() > settings.ChargeVsetpoint) {
    7316:	4874      	ldr	r0, [pc, #464]	; (74e8 <loop+0x868>)
    7318:	f7fa fb2e 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    731c:	6969      	ldr	r1, [r5, #20]
    731e:	f005 ffe7 	bl	d2f0 <__aeabi_fcmpgt>
    7322:	2800      	cmp	r0, #0
    7324:	f040 8100 	bne.w	7528 <loop+0x8a8>
          if (digitalRead(IN3) == LOW)  //detect AC not present for charging
    7328:	2012      	movs	r0, #18
    732a:	f003 f8f7 	bl	a51c <digitalRead>
    732e:	2800      	cmp	r0, #0
    7330:	f43f af25 	beq.w	717e <loop+0x4fe>
    7334:	e59e      	b.n	6e74 <loop+0x1f4>
          if (UnderTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    7336:	4a70      	ldr	r2, [pc, #448]	; (74f8 <loop+0x878>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7338:	930d      	str	r3, [sp, #52]	; 0x34
	return ret;
    733a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    733c:	6812      	ldr	r2, [r2, #0]
            bmsstatus = Error;
    733e:	4f6f      	ldr	r7, [pc, #444]	; (74fc <loop+0x87c>)
          if (UnderTime < millis())  //check is last time not undervoltage is longer thatn UnderDur ago
    7340:	429a      	cmp	r2, r3
            bmsstatus = Error;
    7342:	bf3c      	itt	cc
    7344:	2305      	movcc	r3, #5
    7346:	703b      	strbcc	r3, [r7, #0]
    7348:	e692      	b.n	7070 <loop+0x3f0>
          if (settings.tripcont == 0) {
    734a:	f895 30c9 	ldrb.w	r3, [r5, #201]	; 0xc9
    734e:	2b00      	cmp	r3, #0
    7350:	f040 80bf 	bne.w	74d2 <loop+0x852>
            digitalWrite(OUT2, HIGH);  //trip breaker
    7354:	200c      	movs	r0, #12
    7356:	f003 f8bb 	bl	a4d0 <digitalWrite>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint && bms.getHighTemperature() < settings.OverTSetpoint && cellspresent == bms.seriescells() && cellspresent == (settings.Scells * settings.Pstrings)) {
    735a:	4863      	ldr	r0, [pc, #396]	; (74e8 <loop+0x868>)
    735c:	f7fa fae6 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7360:	6929      	ldr	r1, [r5, #16]
    7362:	f005 ffc5 	bl	d2f0 <__aeabi_fcmpgt>
    7366:	2800      	cmp	r0, #0
    7368:	f43f ad84 	beq.w	6e74 <loop+0x1f4>
    736c:	485e      	ldr	r0, [pc, #376]	; (74e8 <loop+0x868>)
    736e:	f7fa fb03 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7372:	68e9      	ldr	r1, [r5, #12]
    7374:	f005 ff9e 	bl	d2b4 <__aeabi_fcmplt>
    7378:	2800      	cmp	r0, #0
    737a:	f43f ad7b 	beq.w	6e74 <loop+0x1f4>
    737e:	485a      	ldr	r0, [pc, #360]	; (74e8 <loop+0x868>)
    7380:	f7fa fbaa 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    7384:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    7386:	f005 ff95 	bl	d2b4 <__aeabi_fcmplt>
    738a:	2800      	cmp	r0, #0
    738c:	f43f ad72 	beq.w	6e74 <loop+0x1f4>
    7390:	4855      	ldr	r0, [pc, #340]	; (74e8 <loop+0x868>)
    7392:	f7fa f813 	bl	13bc <BMSModuleManager::seriescells()>
    7396:	4a5a      	ldr	r2, [pc, #360]	; (7500 <loop+0x880>)
    7398:	6812      	ldr	r2, [r2, #0]
    739a:	4290      	cmp	r0, r2
    739c:	f47f ad6a 	bne.w	6e74 <loop+0x1f4>
    73a0:	6d6a      	ldr	r2, [r5, #84]	; 0x54
    73a2:	6da9      	ldr	r1, [r5, #88]	; 0x58
    73a4:	fb01 f202 	mul.w	r2, r1, r2
    73a8:	4290      	cmp	r0, r2
    73aa:	f47f ad63 	bne.w	6e74 <loop+0x1f4>
            if (ErrorReason == 0) {
    73ae:	4b55      	ldr	r3, [pc, #340]	; (7504 <loop+0x884>)
    73b0:	681b      	ldr	r3, [r3, #0]
    73b2:	2b00      	cmp	r3, #0
    73b4:	f43f aee3 	beq.w	717e <loop+0x4fe>
    73b8:	e55c      	b.n	6e74 <loop+0x1f4>
          if (storagemode == 1) {
    73ba:	2b01      	cmp	r3, #1
    73bc:	f47f addd 	bne.w	6f7a <loop+0x2fa>
            storagemode = 0;
    73c0:	f8c9 0000 	str.w	r0, [r9]
    73c4:	e5d9      	b.n	6f7a <loop+0x2fa>
          if (bms.getLowCellVolt() > settings.UnderVSetpoint && bms.getHighCellVolt() < settings.OverVSetpoint) {
    73c6:	4848      	ldr	r0, [pc, #288]	; (74e8 <loop+0x868>)
    73c8:	f7fa fab0 	bl	192c <BMSModuleManager::getLowCellVolt()>
    73cc:	6929      	ldr	r1, [r5, #16]
    73ce:	f005 ff8f 	bl	d2f0 <__aeabi_fcmpgt>
    73d2:	b140      	cbz	r0, 73e6 <loop+0x766>
    73d4:	4844      	ldr	r0, [pc, #272]	; (74e8 <loop+0x868>)
    73d6:	f7fa facf 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    73da:	68e9      	ldr	r1, [r5, #12]
    73dc:	f005 ff6a 	bl	d2b4 <__aeabi_fcmplt>
    73e0:	2800      	cmp	r0, #0
    73e2:	f040 81d8 	bne.w	7796 <loop+0xb16>
            digitalWrite(OUT4, LOW);  //ensure precharge is low
    73e6:	2100      	movs	r1, #0
    73e8:	2015      	movs	r0, #21
    73ea:	f003 f871 	bl	a4d0 <digitalWrite>
            mainconttimer = 0;
    73ee:	4b46      	ldr	r3, [pc, #280]	; (7508 <loop+0x888>)
    73f0:	2200      	movs	r2, #0
    73f2:	601a      	str	r2, [r3, #0]
    73f4:	e5b2      	b.n	6f5c <loop+0x2dc>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    73f6:	9310      	str	r3, [sp, #64]	; 0x40
	return ret;
    73f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
          OverTime = millis() + settings.triptime;
    73fa:	f8b5 30ca 	ldrh.w	r3, [r5, #202]	; 0xca
    if (debug != 0) {
    73fe:	f8df 910c 	ldr.w	r9, [pc, #268]	; 750c <loop+0x88c>
          OverTime = millis() + settings.triptime;
    7402:	4413      	add	r3, r2
    7404:	4a42      	ldr	r2, [pc, #264]	; (7510 <loop+0x890>)
    7406:	6013      	str	r3, [r2, #0]
    if (debug != 0) {
    7408:	f8d9 3000 	ldr.w	r3, [r9]
    740c:	e4c5      	b.n	6d9a <loop+0x11a>
      cellspresent = bms.seriescells();
    740e:	f7f9 ffd5 	bl	13bc <BMSModuleManager::seriescells()>
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    7412:	6d2b      	ldr	r3, [r5, #80]	; 0x50
      cellspresent = bms.seriescells();
    7414:	6030      	str	r0, [r6, #0]
      bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    7416:	6c6a      	ldr	r2, [r5, #68]	; 0x44
    7418:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
    741c:	4832      	ldr	r0, [pc, #200]	; (74e8 <loop+0x868>)
    741e:	f7fa fad9 	bl	19d4 <BMSModuleManager::setSensors(int, float, float)>
    7422:	e4f7      	b.n	6e14 <loop+0x194>
        if (bms.getHighCellVolt() < settings.UnderVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    7424:	4830      	ldr	r0, [pc, #192]	; (74e8 <loop+0x868>)
    7426:	f7fa fb57 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    742a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    742c:	f005 ff60 	bl	d2f0 <__aeabi_fcmpgt>
    7430:	2800      	cmp	r0, #0
    7432:	f47f ae26 	bne.w	7082 <loop+0x402>
    7436:	e626      	b.n	7086 <loop+0x406>
      bms.balanceCells(0);  //1 is debug
    7438:	482b      	ldr	r0, [pc, #172]	; (74e8 <loop+0x868>)
    743a:	2100      	movs	r1, #0
    743c:	f7f9 fce2 	bl	e04 <BMSModuleManager::balanceCells(int)>
      if (SOCset != 0) {
    7440:	f8da 3000 	ldr.w	r3, [sl]
    7444:	e49c      	b.n	6d80 <loop+0x100>
          if (bms.getHighCellVolt() > settings.StoreVsetpoint || chargecurrent == 0) {
    7446:	f7fa fa97 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    744a:	6a29      	ldr	r1, [r5, #32]
    744c:	f005 ff50 	bl	d2f0 <__aeabi_fcmpgt>
    7450:	4682      	mov	sl, r0
    7452:	2800      	cmp	r0, #0
    7454:	f040 80cb 	bne.w	75ee <loop+0x96e>
    7458:	4b2e      	ldr	r3, [pc, #184]	; (7514 <loop+0x894>)
    745a:	681b      	ldr	r3, [r3, #0]
    745c:	2b00      	cmp	r3, #0
    745e:	f000 80c6 	beq.w	75ee <loop+0x96e>
            if (Charged == 1) {
    7462:	4b2d      	ldr	r3, [pc, #180]	; (7518 <loop+0x898>)
    7464:	f8d3 b000 	ldr.w	fp, [r3]
    7468:	f1bb 0f01 	cmp.w	fp, #1
    746c:	f000 81e6 	beq.w	783c <loop+0xbbc>
                digitalWrite(OUT3, HIGH);  //turn on charger
    7470:	2101      	movs	r1, #1
    7472:	2014      	movs	r0, #20
    7474:	f003 f82c 	bl	a4d0 <digitalWrite>
    7478:	e5a4      	b.n	6fc4 <loop+0x344>
        if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    747a:	481b      	ldr	r0, [pc, #108]	; (74e8 <loop+0x868>)
    747c:	f7fa fa7c 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7480:	4682      	mov	sl, r0
    7482:	4819      	ldr	r0, [pc, #100]	; (74e8 <loop+0x868>)
    7484:	f7fa fa52 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7488:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    748a:	f005 fc6d 	bl	cd68 <__addsf3>
    748e:	4601      	mov	r1, r0
    7490:	4650      	mov	r0, sl
    7492:	f005 ff2d 	bl	d2f0 <__aeabi_fcmpgt>
    7496:	3800      	subs	r0, #0
    7498:	bf18      	it	ne
    749a:	2001      	movne	r0, #1
    749c:	e576      	b.n	6f8c <loop+0x30c>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    749e:	6823      	ldr	r3, [r4, #0]
    74a0:	9307      	str	r3, [sp, #28]
            if ((millis() - undertriptimer) > settings.triptime) {
    74a2:	4b1e      	ldr	r3, [pc, #120]	; (751c <loop+0x89c>)
    74a4:	681a      	ldr	r2, [r3, #0]
	return ret;
    74a6:	9b07      	ldr	r3, [sp, #28]
    74a8:	1a9b      	subs	r3, r3, r2
    74aa:	f8b5 20ca 	ldrh.w	r2, [r5, #202]	; 0xca
    74ae:	4293      	cmp	r3, r2
    74b0:	f67f ad9e 	bls.w	6ff0 <loop+0x370>
              Serial.println();
    74b4:	481a      	ldr	r0, [pc, #104]	; (7520 <loop+0x8a0>)
    74b6:	f002 f937 	bl	9728 <Print::println()>
    74ba:	2112      	movs	r1, #18
    74bc:	4819      	ldr	r0, [pc, #100]	; (7524 <loop+0x8a4>)
    74be:	f004 fe7b 	bl	c1b8 <usb_serial_write>
    74c2:	4817      	ldr	r0, [pc, #92]	; (7520 <loop+0x8a0>)
    74c4:	f002 f930 	bl	9728 <Print::println()>
              digitalWrite(OUT1, LOW);  //turn off discharge
    74c8:	2100      	movs	r1, #0
    74ca:	200b      	movs	r0, #11
    74cc:	f003 f800 	bl	a4d0 <digitalWrite>
    74d0:	e58e      	b.n	6ff0 <loop+0x370>
            digitalWrite(OUT2, LOW);  //turn off contactor
    74d2:	4621      	mov	r1, r4
    74d4:	200c      	movs	r0, #12
    74d6:	f002 fffb 	bl	a4d0 <digitalWrite>
            digitalWrite(OUT4, LOW);  //ensure precharge is low
    74da:	4621      	mov	r1, r4
    74dc:	2015      	movs	r0, #21
    74de:	f002 fff7 	bl	a4d0 <digitalWrite>
    74e2:	e73a      	b.n	735a <loop+0x6da>
    74e4:	1fff91ac 	.word	0x1fff91ac
    74e8:	1fff91f0 	.word	0x1fff91f0
    74ec:	1fffd3c0 	.word	0x1fffd3c0
    74f0:	1fffcfb0 	.word	0x1fffcfb0
    74f4:	1fff91e8 	.word	0x1fff91e8
    74f8:	1fff91d4 	.word	0x1fff91d4
    74fc:	1fffcf34 	.word	0x1fffcf34
    7500:	1fffcf3c 	.word	0x1fffcf3c
    7504:	1fff91b0 	.word	0x1fff91b0
    7508:	1fffd02c 	.word	0x1fffd02c
    750c:	1fff884c 	.word	0x1fff884c
    7510:	1fff91b4 	.word	0x1fff91b4
    7514:	1fffcf40 	.word	0x1fffcf40
    7518:	1fff91a8 	.word	0x1fff91a8
    751c:	1fffd1b4 	.word	0x1fffd1b4
    7520:	1fff89fc 	.word	0x1fff89fc
    7524:	000150ec 	.word	0x000150ec
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    7528:	48b0      	ldr	r0, [pc, #704]	; (77ec <loop+0xb6c>)
    752a:	f7fa fad9 	bl	1ae0 <BMSModuleManager::getAvgCellVolt()>
    752e:	69e9      	ldr	r1, [r5, #28]
    7530:	4604      	mov	r4, r0
    7532:	6968      	ldr	r0, [r5, #20]
    7534:	f005 fc16 	bl	cd64 <__aeabi_fsub>
    7538:	4601      	mov	r1, r0
    753a:	4620      	mov	r0, r4
    753c:	f005 fed8 	bl	d2f0 <__aeabi_fcmpgt>
    SOC = 100;
    7540:	4bab      	ldr	r3, [pc, #684]	; (77f0 <loop+0xb70>)
            if (bms.getAvgCellVolt() > (settings.ChargeVsetpoint - settings.ChargeHys)) {
    7542:	2800      	cmp	r0, #0
    7544:	f000 8125 	beq.w	7792 <loop+0xb12>
    SOC = 100;
    7548:	2264      	movs	r2, #100	; 0x64
    SOC = 95;
    754a:	601a      	str	r2, [r3, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    754c:	6daa      	ldr	r2, [r5, #88]	; 0x58
    754e:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    7550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7554:	fb02 f303 	mul.w	r3, r2, r3
    7558:	fb03 f000 	mul.w	r0, r3, r0
    755c:	f005 fcb8 	bl	ced0 <__aeabi_i2f>
    7560:	49a4      	ldr	r1, [pc, #656]	; (77f4 <loop+0xb74>)
    7562:	f005 fdbd 	bl	d0e0 <__aeabi_fdiv>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7566:	4aa4      	ldr	r2, [pc, #656]	; (77f8 <loop+0xb78>)
            digitalWrite(OUT3, LOW);  //turn off charger
    7568:	2100      	movs	r1, #0
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    756a:	6010      	str	r0, [r2, #0]
            digitalWrite(OUT3, LOW);  //turn off charger
    756c:	2014      	movs	r0, #20
    756e:	f002 ffaf 	bl	a4d0 <digitalWrite>
            bmsstatus = Ready;
    7572:	2301      	movs	r3, #1
    7574:	703b      	strb	r3, [r7, #0]
    7576:	e6d7      	b.n	7328 <loop+0x6a8>
          if (bms.getHighCellVolt() > settings.balanceVoltage && bms.getHighCellVolt() > bms.getLowCellVolt() + settings.balanceHyst) {
    7578:	489c      	ldr	r0, [pc, #624]	; (77ec <loop+0xb6c>)
    757a:	f7fa f9fd 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    757e:	4604      	mov	r4, r0
    7580:	489a      	ldr	r0, [pc, #616]	; (77ec <loop+0xb6c>)
    7582:	f7fa f9d3 	bl	192c <BMSModuleManager::getLowCellVolt()>
    7586:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
    7588:	f005 fbee 	bl	cd68 <__addsf3>
    758c:	4601      	mov	r1, r0
    758e:	4620      	mov	r0, r4
    7590:	f005 feae 	bl	d2f0 <__aeabi_fcmpgt>
    7594:	3800      	subs	r0, #0
    7596:	bf18      	it	ne
    7598:	2001      	movne	r0, #1
    759a:	e612      	b.n	71c2 <loop+0x542>
          if (bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighCellVolt() > settings.ChargeVsetpoint || chargecurrent == 0) {
    759c:	4893      	ldr	r0, [pc, #588]	; (77ec <loop+0xb6c>)
    759e:	f7fa f9eb 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    75a2:	6969      	ldr	r1, [r5, #20]
    75a4:	f005 fea4 	bl	d2f0 <__aeabi_fcmpgt>
    75a8:	2800      	cmp	r0, #0
    75aa:	f47f ad00 	bne.w	6fae <loop+0x32e>
    75ae:	4b93      	ldr	r3, [pc, #588]	; (77fc <loop+0xb7c>)
    75b0:	681b      	ldr	r3, [r3, #0]
    75b2:	2b00      	cmp	r3, #0
    75b4:	f43f acfb 	beq.w	6fae <loop+0x32e>
            if (Charged == 1) {
    75b8:	f8df b244 	ldr.w	fp, [pc, #580]	; 7800 <loop+0xb80>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    75bc:	6823      	ldr	r3, [r4, #0]
    75be:	f8db a000 	ldr.w	sl, [fp]
    75c2:	9306      	str	r3, [sp, #24]
            overtriptimer = millis();
    75c4:	4b8f      	ldr	r3, [pc, #572]	; (7804 <loop+0xb84>)
	return ret;
    75c6:	9a06      	ldr	r2, [sp, #24]
    75c8:	601a      	str	r2, [r3, #0]
            if (Charged == 1) {
    75ca:	f1ba 0f01 	cmp.w	sl, #1
    75ce:	f000 8167 	beq.w	78a0 <loop+0xc20>
              if (digitalRead(OUT3) == 0) {
    75d2:	2014      	movs	r0, #20
    75d4:	f002 ffa2 	bl	a51c <digitalRead>
    75d8:	2800      	cmp	r0, #0
    75da:	f47f acf3 	bne.w	6fc4 <loop+0x344>
                Serial.println();
    75de:	488a      	ldr	r0, [pc, #552]	; (7808 <loop+0xb88>)
    75e0:	f002 f8a2 	bl	9728 <Print::println()>
                Serial.println("Reset Over Voltage Trip Not Charged");
    75e4:	4989      	ldr	r1, [pc, #548]	; (780c <loop+0xb8c>)
    75e6:	4888      	ldr	r0, [pc, #544]	; (7808 <loop+0xb88>)
    75e8:	f7fa ff24 	bl	2434 <Print::println(char const*) [clone .isra.0]>
    75ec:	e740      	b.n	7470 <loop+0x7f0>
            digitalWrite(OUT3, LOW);  //turn off charger
    75ee:	2100      	movs	r1, #0
    75f0:	2014      	movs	r0, #20
    75f2:	f002 ff6d 	bl	a4d0 <digitalWrite>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    75f6:	6daa      	ldr	r2, [r5, #88]	; 0x58
    75f8:	6deb      	ldr	r3, [r5, #92]	; 0x5c
            Charged = 1;
    75fa:	4981      	ldr	r1, [pc, #516]	; (7800 <loop+0xb80>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    75fc:	fb02 f303 	mul.w	r3, r2, r3
    7600:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7604:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    7608:	4a79      	ldr	r2, [pc, #484]	; (77f0 <loop+0xb70>)
            Charged = 1;
    760a:	2301      	movs	r3, #1
    760c:	600b      	str	r3, [r1, #0]
    SOC = 100;
    760e:	2364      	movs	r3, #100	; 0x64
    7610:	6013      	str	r3, [r2, #0]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7612:	f005 fc5d 	bl	ced0 <__aeabi_i2f>
    7616:	4977      	ldr	r1, [pc, #476]	; (77f4 <loop+0xb74>)
    7618:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 77f8 <loop+0xb78>
    761c:	f005 fd60 	bl	d0e0 <__aeabi_fdiv>
    7620:	f8c9 0000 	str.w	r0, [r9]
    7624:	e4ce      	b.n	6fc4 <loop+0x344>
              if (digitalRead(OUT3) == 1) {
    7626:	2014      	movs	r0, #20
    7628:	f002 ff78 	bl	a51c <digitalRead>
    762c:	2801      	cmp	r0, #1
    762e:	4681      	mov	r9, r0
    7630:	f47f acc8 	bne.w	6fc4 <loop+0x344>
                Serial.println();
    7634:	4874      	ldr	r0, [pc, #464]	; (7808 <loop+0xb88>)
    7636:	f002 f877 	bl	9728 <Print::println()>
    763a:	2111      	movs	r1, #17
    763c:	4874      	ldr	r0, [pc, #464]	; (7810 <loop+0xb90>)
    763e:	f004 fdbb 	bl	c1b8 <usb_serial_write>
    7642:	4871      	ldr	r0, [pc, #452]	; (7808 <loop+0xb88>)
    7644:	f002 f870 	bl	9728 <Print::println()>
                digitalWrite(OUT3, LOW);  //turn off charger
    7648:	2014      	movs	r0, #20
    764a:	2100      	movs	r1, #0
    764c:	f002 ff40 	bl	a4d0 <digitalWrite>
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7650:	6daa      	ldr	r2, [r5, #88]	; 0x58
    7652:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    7654:	fb02 f303 	mul.w	r3, r2, r3
                Charged = 1;
    7658:	4a69      	ldr	r2, [pc, #420]	; (7800 <loop+0xb80>)
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    765a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
                Charged = 1;
    765e:	f8c2 9000 	str.w	r9, [r2]
    ampsecond = (settings.CAP * settings.Pstrings * 1000) / 0.27777777777778;  //reset to full, dependant on given capacity. Need to improve with auto correction for capcity.
    7662:	fb03 f000 	mul.w	r0, r3, r0
    SOC = 100;
    7666:	4a62      	ldr	r2, [pc, #392]	; (77f0 <loop+0xb70>)
    7668:	e7d1      	b.n	760e <loop+0x98e>
        if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() < settings.UnderVSetpoint) {
    766a:	4860      	ldr	r0, [pc, #384]	; (77ec <loop+0xb6c>)
    766c:	f7fa f984 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7670:	6929      	ldr	r1, [r5, #16]
    7672:	f005 fe1f 	bl	d2b4 <__aeabi_fcmplt>
    7676:	2800      	cmp	r0, #0
    7678:	f47f ac27 	bne.w	6eca <loop+0x24a>
          ErrorReason = ErrorReason & ~0x01;
    767c:	4a65      	ldr	r2, [pc, #404]	; (7814 <loop+0xb94>)
          if (debug != 0) {
    767e:	f8df 9198 	ldr.w	r9, [pc, #408]	; 7818 <loop+0xb98>
          ErrorReason = ErrorReason & ~0x01;
    7682:	6813      	ldr	r3, [r2, #0]
    7684:	4f65      	ldr	r7, [pc, #404]	; (781c <loop+0xb9c>)
    7686:	f023 0301 	bic.w	r3, r3, #1
    768a:	6013      	str	r3, [r2, #0]
          if (debug != 0) {
    768c:	f8d9 3000 	ldr.w	r3, [r9]
    7690:	f7ff bb83 	b.w	6d9a <loop+0x11a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7694:	6823      	ldr	r3, [r4, #0]
    7696:	9308      	str	r3, [sp, #32]
          undertriptimer = millis();
    7698:	4b61      	ldr	r3, [pc, #388]	; (7820 <loop+0xba0>)
	return ret;
    769a:	9a08      	ldr	r2, [sp, #32]
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys) {
    769c:	4853      	ldr	r0, [pc, #332]	; (77ec <loop+0xb6c>)
          undertriptimer = millis();
    769e:	601a      	str	r2, [r3, #0]
          if (bms.getLowCellVolt() > settings.DischVsetpoint + settings.DischHys) {
    76a0:	f7fa f944 	bl	192c <BMSModuleManager::getLowCellVolt()>
    76a4:	f8d5 10cc 	ldr.w	r1, [r5, #204]	; 0xcc
    76a8:	4681      	mov	r9, r0
    76aa:	69a8      	ldr	r0, [r5, #24]
    76ac:	f005 fb5c 	bl	cd68 <__addsf3>
    76b0:	4601      	mov	r1, r0
    76b2:	4648      	mov	r0, r9
    76b4:	f005 fe1c 	bl	d2f0 <__aeabi_fcmpgt>
    76b8:	2800      	cmp	r0, #0
    76ba:	f43f ac99 	beq.w	6ff0 <loop+0x370>
            if (digitalRead(OUT1) == 0) {
    76be:	200b      	movs	r0, #11
    76c0:	f002 ff2c 	bl	a51c <digitalRead>
    76c4:	2800      	cmp	r0, #0
    76c6:	f47f ac93 	bne.w	6ff0 <loop+0x370>
              Serial.println();
    76ca:	484f      	ldr	r0, [pc, #316]	; (7808 <loop+0xb88>)
    76cc:	f002 f82c 	bl	9728 <Print::println()>
    76d0:	2118      	movs	r1, #24
    76d2:	4854      	ldr	r0, [pc, #336]	; (7824 <loop+0xba4>)
    76d4:	f004 fd70 	bl	c1b8 <usb_serial_write>
    76d8:	484b      	ldr	r0, [pc, #300]	; (7808 <loop+0xb88>)
    76da:	f002 f825 	bl	9728 <Print::println()>
              digitalWrite(OUT1, HIGH);  //turn on discharge
    76de:	2101      	movs	r1, #1
    76e0:	200b      	movs	r0, #11
    76e2:	f002 fef5 	bl	a4d0 <digitalWrite>
    76e6:	e483      	b.n	6ff0 <loop+0x370>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    76e8:	f7fa f920 	bl	192c <BMSModuleManager::getLowCellVolt()>
    76ec:	6929      	ldr	r1, [r5, #16]
    76ee:	f005 fde1 	bl	d2b4 <__aeabi_fcmplt>
    76f2:	b940      	cbnz	r0, 7706 <loop+0xa86>
    76f4:	483d      	ldr	r0, [pc, #244]	; (77ec <loop+0xb6c>)
    76f6:	f7fa f93f 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    76fa:	68e9      	ldr	r1, [r5, #12]
    76fc:	f005 fdf8 	bl	d2f0 <__aeabi_fcmpgt>
    7700:	2800      	cmp	r0, #0
    7702:	f000 80c2 	beq.w	788a <loop+0xc0a>
              digitalWrite(OUT2, LOW);    //turn off contactor
    7706:	2100      	movs	r1, #0
    7708:	200c      	movs	r0, #12
    770a:	f002 fee1 	bl	a4d0 <digitalWrite>
              contctrl = contctrl & 253;  //turn off contactor
    770e:	f8d8 3000 	ldr.w	r3, [r8]
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    7712:	2100      	movs	r1, #0
              contctrl = contctrl & 253;  //turn off contactor
    7714:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    7718:	2015      	movs	r0, #21
              contctrl = contctrl & 253;  //turn off contactor
    771a:	f8c8 3000 	str.w	r3, [r8]
              digitalWrite(OUT4, LOW);    //ensure precharge is low
    771e:	f002 fed7 	bl	a4d0 <digitalWrite>
              bmsstatus = Error;
    7722:	2305      	movs	r3, #5
    7724:	703b      	strb	r3, [r7, #0]
    7726:	f7ff bba6 	b.w	6e76 <loop+0x1f6>
    772a:	2102      	movs	r1, #2
    772c:	483e      	ldr	r0, [pc, #248]	; (7828 <loop+0xba8>)
          bmsstatus = Error;
    772e:	4f3b      	ldr	r7, [pc, #236]	; (781c <loop+0xb9c>)
    7730:	f004 fd42 	bl	c1b8 <usb_serial_write>
    7734:	4834      	ldr	r0, [pc, #208]	; (7808 <loop+0xb88>)
    7736:	f001 fff7 	bl	9728 <Print::println()>
    773a:	211d      	movs	r1, #29
    773c:	483b      	ldr	r0, [pc, #236]	; (782c <loop+0xbac>)
    773e:	f004 fd3b 	bl	c1b8 <usb_serial_write>
    7742:	2102      	movs	r1, #2
    7744:	4838      	ldr	r0, [pc, #224]	; (7828 <loop+0xba8>)
    7746:	f004 fd37 	bl	c1b8 <usb_serial_write>
    774a:	482f      	ldr	r0, [pc, #188]	; (7808 <loop+0xb88>)
    774c:	f001 ffec 	bl	9728 <Print::println()>
          ErrorReason = ErrorReason | 0x01;
    7750:	4a30      	ldr	r2, [pc, #192]	; (7814 <loop+0xb94>)
    7752:	6813      	ldr	r3, [r2, #0]
    7754:	f043 0301 	orr.w	r3, r3, #1
    7758:	6013      	str	r3, [r2, #0]
          bmsstatus = Error;
    775a:	2305      	movs	r3, #5
    775c:	703b      	strb	r3, [r7, #0]
    if (debug != 0) {
    775e:	f8d9 3000 	ldr.w	r3, [r9]
          ErrorReason = ErrorReason | 0x01;
    7762:	f7ff bb1a 	b.w	6d9a <loop+0x11a>
          if (digitalRead(IN3) == HIGH && (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)))  //detect AC present for charging and check not balancing
    7766:	4821      	ldr	r0, [pc, #132]	; (77ec <loop+0xb6c>)
    7768:	f7fa f906 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    776c:	69e9      	ldr	r1, [r5, #28]
    776e:	4604      	mov	r4, r0
    7770:	6968      	ldr	r0, [r5, #20]
    7772:	f005 faf7 	bl	cd64 <__aeabi_fsub>
    7776:	4601      	mov	r1, r0
    7778:	4620      	mov	r0, r4
    777a:	f005 fd9b 	bl	d2b4 <__aeabi_fcmplt>
    777e:	2800      	cmp	r0, #0
    7780:	f43f ad27 	beq.w	71d2 <loop+0x552>
            if (settings.ChargerDirect == 1) {
    7784:	f895 30c8 	ldrb.w	r3, [r5, #200]	; 0xc8
    7788:	b33b      	cbz	r3, 77da <loop+0xb5a>
              bmsstatus = Charge;
    778a:	2303      	movs	r3, #3
    778c:	4c28      	ldr	r4, [pc, #160]	; (7830 <loop+0xbb0>)
    778e:	703b      	strb	r3, [r7, #0]
    7790:	e520      	b.n	71d4 <loop+0x554>
    SOC = 95;
    7792:	225f      	movs	r2, #95	; 0x5f
    7794:	e6d9      	b.n	754a <loop+0x8ca>
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW) {
    7796:	200c      	movs	r0, #12
    7798:	f002 fec0 	bl	a51c <digitalRead>
    779c:	2800      	cmp	r0, #0
    779e:	f000 80c0 	beq.w	7922 <loop+0xca2>
    77a2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 7834 <loop+0xbb4>
    77a6:	4c22      	ldr	r4, [pc, #136]	; (7830 <loop+0xbb0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    77a8:	6823      	ldr	r3, [r4, #0]
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent) {
    77aa:	f8d9 2000 	ldr.w	r2, [r9]
    77ae:	9302      	str	r3, [sp, #8]
    77b0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    77b4:	4413      	add	r3, r2
	return ret;
    77b6:	9a02      	ldr	r2, [sp, #8]
    77b8:	4293      	cmp	r3, r2
    77ba:	f0c0 8096 	bcc.w	78ea <loop+0xc6a>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    77be:	6822      	ldr	r2, [r4, #0]
    77c0:	9204      	str	r2, [sp, #16]
	return ret;
    77c2:	9a04      	ldr	r2, [sp, #16]
            if (mainconttimer + settings.Pretime + 1000 < millis()) {
    77c4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
    77c8:	4293      	cmp	r3, r2
    77ca:	f4bf abc8 	bcs.w	6f5e <loop+0x2de>
              digitalWrite(OUT4, LOW);  //ensure precharge is low
    77ce:	2100      	movs	r1, #0
    77d0:	2015      	movs	r0, #21
    77d2:	f002 fe7d 	bl	a4d0 <digitalWrite>
    77d6:	f7ff bbc2 	b.w	6f5e <loop+0x2de>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    77da:	4c15      	ldr	r4, [pc, #84]	; (7830 <loop+0xbb0>)
              bmsstatus = Precharge;
    77dc:	2304      	movs	r3, #4
    77de:	703b      	strb	r3, [r7, #0]
    77e0:	6823      	ldr	r3, [r4, #0]
    77e2:	9309      	str	r3, [sp, #36]	; 0x24
              Pretimer = millis();
    77e4:	4b14      	ldr	r3, [pc, #80]	; (7838 <loop+0xbb8>)
	return ret;
    77e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
    77e8:	601a      	str	r2, [r3, #0]
    77ea:	e4f3      	b.n	71d4 <loop+0x554>
    77ec:	1fff91f0 	.word	0x1fff91f0
    77f0:	1fff8828 	.word	0x1fff8828
    77f4:	3e8e38e4 	.word	0x3e8e38e4
    77f8:	1fff91e4 	.word	0x1fff91e4
    77fc:	1fffcf40 	.word	0x1fffcf40
    7800:	1fff91a8 	.word	0x1fff91a8
    7804:	1fffd0cc 	.word	0x1fffd0cc
    7808:	1fff89fc 	.word	0x1fff89fc
    780c:	000150c8 	.word	0x000150c8
    7810:	000150b4 	.word	0x000150b4
    7814:	1fff91b0 	.word	0x1fff91b0
    7818:	1fff884c 	.word	0x1fff884c
    781c:	1fffcf34 	.word	0x1fffcf34
    7820:	1fffd1b4 	.word	0x1fffd1b4
    7824:	00015100 	.word	0x00015100
    7828:	00014fa8 	.word	0x00014fa8
    782c:	0001511c 	.word	0x0001511c
    7830:	1fffd3c0 	.word	0x1fffd3c0
    7834:	1fffd02c 	.word	0x1fffd02c
    7838:	1fff91b8 	.word	0x1fff91b8
              if (bms.getHighCellVolt() < (settings.StoreVsetpoint - settings.ChargeHys)) {
    783c:	485c      	ldr	r0, [pc, #368]	; (79b0 <loop+0xd30>)
    783e:	f7fa f89b 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    7842:	69e9      	ldr	r1, [r5, #28]
    7844:	4681      	mov	r9, r0
    7846:	6a28      	ldr	r0, [r5, #32]
    7848:	f005 fa8c 	bl	cd64 <__aeabi_fsub>
    784c:	4601      	mov	r1, r0
    784e:	4648      	mov	r0, r9
    7850:	f005 fd30 	bl	d2b4 <__aeabi_fcmplt>
    7854:	4b57      	ldr	r3, [pc, #348]	; (79b4 <loop+0xd34>)
    7856:	2800      	cmp	r0, #0
    7858:	f43f abb4 	beq.w	6fc4 <loop+0x344>
                digitalWrite(OUT3, HIGH);  //turn on charger
    785c:	4659      	mov	r1, fp
    785e:	2014      	movs	r0, #20
                Charged = 0;
    7860:	f8c3 a000 	str.w	sl, [r3]
                digitalWrite(OUT3, HIGH);  //turn on charger
    7864:	f002 fe34 	bl	a4d0 <digitalWrite>
    7868:	f7ff bbac 	b.w	6fc4 <loop+0x344>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    786c:	4850      	ldr	r0, [pc, #320]	; (79b0 <loop+0xd30>)
    786e:	f7fa f933 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    7872:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    7874:	f005 fd3c 	bl	d2f0 <__aeabi_fcmpgt>
    7878:	4601      	mov	r1, r0
    787a:	2800      	cmp	r0, #0
    787c:	f47f abd2 	bne.w	7024 <loop+0x3a4>
              digitalWrite(OUT2, LOW);  //trip breaker
    7880:	200c      	movs	r0, #12
    7882:	f002 fe25 	bl	a4d0 <digitalWrite>
    7886:	f7ff baf6 	b.w	6e76 <loop+0x1f6>
            if (bms.getLowCellVolt() < settings.UnderVSetpoint || bms.getHighCellVolt() > settings.OverVSetpoint || bms.getHighTemperature() > settings.OverTSetpoint) {
    788a:	4849      	ldr	r0, [pc, #292]	; (79b0 <loop+0xd30>)
    788c:	f7fa f924 	bl	1ad8 <BMSModuleManager::getHighTemperature()>
    7890:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    7892:	f005 fd2d 	bl	d2f0 <__aeabi_fcmpgt>
    7896:	2800      	cmp	r0, #0
    7898:	f47f af35 	bne.w	7706 <loop+0xa86>
    789c:	f7ff baeb 	b.w	6e76 <loop+0x1f6>
              if (bms.getHighCellVolt() < (settings.ChargeVsetpoint - settings.ChargeHys)) {
    78a0:	4843      	ldr	r0, [pc, #268]	; (79b0 <loop+0xd30>)
    78a2:	f7fa f869 	bl	1978 <BMSModuleManager::getHighCellVolt()>
    78a6:	69e9      	ldr	r1, [r5, #28]
    78a8:	4681      	mov	r9, r0
    78aa:	6968      	ldr	r0, [r5, #20]
    78ac:	f005 fa5a 	bl	cd64 <__aeabi_fsub>
    78b0:	4601      	mov	r1, r0
    78b2:	4648      	mov	r0, r9
    78b4:	f005 fcfe 	bl	d2b4 <__aeabi_fcmplt>
    78b8:	2800      	cmp	r0, #0
    78ba:	f43f ab83 	beq.w	6fc4 <loop+0x344>
                if (digitalRead(OUT3) == 0) {
    78be:	2014      	movs	r0, #20
    78c0:	f002 fe2c 	bl	a51c <digitalRead>
    78c4:	4681      	mov	r9, r0
    78c6:	2800      	cmp	r0, #0
    78c8:	f47f ab7c 	bne.w	6fc4 <loop+0x344>
                  Serial.println();
    78cc:	483a      	ldr	r0, [pc, #232]	; (79b8 <loop+0xd38>)
    78ce:	f001 ff2b 	bl	9728 <Print::println()>
                  Serial.println("Reset Over Voltage Trip Not Charged");
    78d2:	493a      	ldr	r1, [pc, #232]	; (79bc <loop+0xd3c>)
    78d4:	4838      	ldr	r0, [pc, #224]	; (79b8 <loop+0xd38>)
    78d6:	f7fa fdad 	bl	2434 <Print::println(char const*) [clone .isra.0]>
                  digitalWrite(OUT3, HIGH);  //turn on charger
    78da:	4651      	mov	r1, sl
    78dc:	2014      	movs	r0, #20
                  Charged = 0;
    78de:	f8cb 9000 	str.w	r9, [fp]
                  digitalWrite(OUT3, HIGH);  //turn on charger
    78e2:	f002 fdf5 	bl	a4d0 <digitalWrite>
    78e6:	f7ff bb6d 	b.w	6fc4 <loop+0x344>
            if (mainconttimer + settings.Pretime < millis() && digitalRead(OUT2) == LOW && abs(currentact) < settings.Precurrent) {
    78ea:	200c      	movs	r0, #12
    78ec:	f002 fe16 	bl	a51c <digitalRead>
    78f0:	b988      	cbnz	r0, 7916 <loop+0xc96>
    78f2:	4b33      	ldr	r3, [pc, #204]	; (79c0 <loop+0xd40>)
    78f4:	f8d3 a000 	ldr.w	sl, [r3]
    78f8:	2100      	movs	r1, #0
    78fa:	4650      	mov	r0, sl
    78fc:	f005 fcf8 	bl	d2f0 <__aeabi_fcmpgt>
    7900:	b908      	cbnz	r0, 7906 <loop+0xc86>
    7902:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
    7906:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    790a:	f005 fae1 	bl	ced0 <__aeabi_i2f>
    790e:	4651      	mov	r1, sl
    7910:	f005 fcee 	bl	d2f0 <__aeabi_fcmpgt>
    7914:	bb68      	cbnz	r0, 7972 <loop+0xcf2>
            if (mainconttimer + settings.Pretime + 1000 < millis()) {
    7916:	f8d9 2000 	ldr.w	r2, [r9]
    791a:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    791e:	4413      	add	r3, r2
    7920:	e74d      	b.n	77be <loop+0xb3e>
            if (digitalRead(OUT2) == LOW && digitalRead(OUT4) == LOW) {
    7922:	2015      	movs	r0, #21
    7924:	f002 fdfa 	bl	a51c <digitalRead>
    7928:	4682      	mov	sl, r0
    792a:	2800      	cmp	r0, #0
    792c:	f47f af39 	bne.w	77a2 <loop+0xb22>
              digitalWrite(OUT4, HIGH);  //Precharge start
    7930:	4621      	mov	r1, r4
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7932:	4c24      	ldr	r4, [pc, #144]	; (79c4 <loop+0xd44>)
              mainconttimer = millis();
    7934:	f8df 9090 	ldr.w	r9, [pc, #144]	; 79c8 <loop+0xd48>
    7938:	6823      	ldr	r3, [r4, #0]
    793a:	9301      	str	r3, [sp, #4]
	return ret;
    793c:	9b01      	ldr	r3, [sp, #4]
    793e:	f8c9 3000 	str.w	r3, [r9]
              digitalWrite(OUT4, HIGH);  //Precharge start
    7942:	2015      	movs	r0, #21
    7944:	f002 fdc4 	bl	a4d0 <digitalWrite>
              Serial.println();
    7948:	481b      	ldr	r0, [pc, #108]	; (79b8 <loop+0xd38>)
    794a:	f001 feed 	bl	9728 <Print::println()>
              Serial.println("Precharge!!!");
    794e:	491f      	ldr	r1, [pc, #124]	; (79cc <loop+0xd4c>)
    7950:	4819      	ldr	r0, [pc, #100]	; (79b8 <loop+0xd38>)
    7952:	f7fa fd6f 	bl	2434 <Print::println(char const*) [clone .isra.0]>
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    7956:	f8d9 1000 	ldr.w	r1, [r9]
    795a:	4817      	ldr	r0, [pc, #92]	; (79b8 <loop+0xd38>)
    795c:	4653      	mov	r3, sl
    795e:	220a      	movs	r2, #10
    7960:	f001 fefa 	bl	9758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(unsigned long n)			{ return print(n) + println(); }
    7964:	4814      	ldr	r0, [pc, #80]	; (79b8 <loop+0xd38>)
    7966:	f001 fedf 	bl	9728 <Print::println()>
              Serial.println();
    796a:	4813      	ldr	r0, [pc, #76]	; (79b8 <loop+0xd38>)
    796c:	f001 fedc 	bl	9728 <Print::println()>
    7970:	e71a      	b.n	77a8 <loop+0xb28>
              digitalWrite(OUT2, HIGH);  //turn on contactor
    7972:	2101      	movs	r1, #1
    7974:	200c      	movs	r0, #12
    7976:	f002 fdab 	bl	a4d0 <digitalWrite>
              contctrl = contctrl | 2;   //turn on contactor
    797a:	f8d8 3000 	ldr.w	r3, [r8]
              Serial.println();
    797e:	480e      	ldr	r0, [pc, #56]	; (79b8 <loop+0xd38>)
              contctrl = contctrl | 2;   //turn on contactor
    7980:	f043 0302 	orr.w	r3, r3, #2
    7984:	f8c8 3000 	str.w	r3, [r8]
              Serial.println();
    7988:	f001 fece 	bl	9728 <Print::println()>
              Serial.println("Main On!!!");
    798c:	4910      	ldr	r1, [pc, #64]	; (79d0 <loop+0xd50>)
    798e:	480a      	ldr	r0, [pc, #40]	; (79b8 <loop+0xd38>)
    7990:	f7fa fd50 	bl	2434 <Print::println(char const*) [clone .isra.0]>
              Serial.println();
    7994:	4808      	ldr	r0, [pc, #32]	; (79b8 <loop+0xd38>)
    7996:	f001 fec7 	bl	9728 <Print::println()>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    799a:	6823      	ldr	r3, [r4, #0]
    799c:	9303      	str	r3, [sp, #12]
	return ret;
    799e:	9a03      	ldr	r2, [sp, #12]
              mainconttimer = millis() + settings.Pretime;
    79a0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    79a4:	441a      	add	r2, r3
    79a6:	f8c9 2000 	str.w	r2, [r9]
    79aa:	4413      	add	r3, r2
    79ac:	e707      	b.n	77be <loop+0xb3e>
    79ae:	bf00      	nop
    79b0:	1fff91f0 	.word	0x1fff91f0
    79b4:	1fff91a8 	.word	0x1fff91a8
    79b8:	1fff89fc 	.word	0x1fff89fc
    79bc:	000150c8 	.word	0x000150c8
    79c0:	1fffcfc4 	.word	0x1fffcfc4
    79c4:	1fffd3c0 	.word	0x1fffd3c0
    79c8:	1fffd02c 	.word	0x1fffd02c
    79cc:	00015098 	.word	0x00015098
    79d0:	000150a8 	.word	0x000150a8

000079d4 <low_voltage_isr>:

void low_voltage_isr(void) {
  EEPROM.update(1000, uint8_t(SOC));
    79d4:	4b0b      	ldr	r3, [pc, #44]	; (7a04 <low_voltage_isr+0x30>)
void low_voltage_isr(void) {
    79d6:	b510      	push	{r4, lr}
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    79d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
  EEPROM.update(1000, uint8_t(SOC));
    79dc:	781c      	ldrb	r4, [r3, #0]
    79de:	f002 f8bf 	bl	9b60 <eeprom_read_byte>
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    79e2:	4284      	cmp	r4, r0
    79e4:	d004      	beq.n	79f0 <low_voltage_isr+0x1c>
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    79e6:	4621      	mov	r1, r4
    79e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    79ec:	f002 f8d2 	bl	9b94 <eeprom_write_byte>

  PMC_LVDSC2 |= PMC_LVDSC2_LVWACK;  // clear if we can
    79f0:	4b05      	ldr	r3, [pc, #20]	; (7a08 <low_voltage_isr+0x34>)
    79f2:	785a      	ldrb	r2, [r3, #1]
    79f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    79f8:	705a      	strb	r2, [r3, #1]
  PMC_LVDSC1 |= PMC_LVDSC1_LVDACK;
    79fa:	781a      	ldrb	r2, [r3, #0]
    79fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    7a00:	701a      	strb	r2, [r3, #0]
}
    7a02:	bd10      	pop	{r4, pc}
    7a04:	1fff8828 	.word	0x1fff8828
    7a08:	4007d000 	.word	0x4007d000

00007a0c <_GLOBAL__sub_I_bms>:
    7a0c:	b510      	push	{r4, lr}
    EEPROMClass()                        { eeprom_initialize(); }
    7a0e:	f002 f871 	bl	9af4 <eeprom_initialize>
BMSModuleManager bms;
    7a12:	480b      	ldr	r0, [pc, #44]	; (7a40 <_GLOBAL__sub_I_bms+0x34>)
    7a14:	f7f9 f99a 	bl	d4c <BMSModuleManager::BMSModuleManager()>
SerialConsole console;
    7a18:	480a      	ldr	r0, [pc, #40]	; (7a44 <_GLOBAL__sub_I_bms+0x38>)
    7a1a:	f7fa fc9d 	bl	2358 <SerialConsole::SerialConsole()>
FilterOnePole lowpassFilter(LOWPASS, filterFrequency);
    7a1e:	4a0a      	ldr	r2, [pc, #40]	; (7a48 <_GLOBAL__sub_I_bms+0x3c>)
    7a20:	480a      	ldr	r0, [pc, #40]	; (7a4c <_GLOBAL__sub_I_bms+0x40>)
    7a22:	6812      	ldr	r2, [r2, #0]
    7a24:	2300      	movs	r3, #0
    7a26:	2101      	movs	r1, #1
    7a28:	f001 fbd8 	bl	91dc <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>
ADC* adc = new ADC();  // adc object
    7a2c:	2094      	movs	r0, #148	; 0x94
    7a2e:	f002 faab 	bl	9f88 <operator new(unsigned int)>
    7a32:	4604      	mov	r4, r0
    7a34:	f000 ff9e 	bl	8974 <ADC::ADC()>
    7a38:	4b05      	ldr	r3, [pc, #20]	; (7a50 <_GLOBAL__sub_I_bms+0x44>)
    7a3a:	601c      	str	r4, [r3, #0]
}
    7a3c:	bd10      	pop	{r4, pc}
    7a3e:	bf00      	nop
    7a40:	1fff91f0 	.word	0x1fff91f0
    7a44:	1fffcf50 	.word	0x1fffcf50
    7a48:	1fff8854 	.word	0x1fff8854
    7a4c:	1fffd00c 	.word	0x1fffd00c
    7a50:	1fff91dc 	.word	0x1fff91dc

00007a54 <setup>:
void setup() {
    7a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  delay(4000);  //just for easy debugging. It takes a few seconds for USB to come up properly on most OS's
    7a58:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
void setup() {
    7a5c:	b087      	sub	sp, #28
  delay(4000);  //just for easy debugging. It takes a few seconds for USB to come up properly on most OS's
    7a5e:	f002 fdc7 	bl	a5f0 <delay>
  pinMode(ACUR1, INPUT);
    7a62:	2100      	movs	r1, #0
    7a64:	200f      	movs	r0, #15
    7a66:	f002 fd67 	bl	a538 <pinMode>
  pinMode(ACUR2, INPUT);
    7a6a:	2100      	movs	r1, #0
    7a6c:	200e      	movs	r0, #14
    7a6e:	f002 fd63 	bl	a538 <pinMode>
  pinMode(IN1, INPUT);
    7a72:	2100      	movs	r1, #0
    7a74:	2011      	movs	r0, #17
    7a76:	f002 fd5f 	bl	a538 <pinMode>
  pinMode(IN2, INPUT);
    7a7a:	2100      	movs	r1, #0
    7a7c:	2010      	movs	r0, #16
    7a7e:	f002 fd5b 	bl	a538 <pinMode>
  pinMode(IN3, INPUT);
    7a82:	2100      	movs	r1, #0
    7a84:	2012      	movs	r0, #18
    7a86:	f002 fd57 	bl	a538 <pinMode>
  pinMode(IN4, INPUT);
    7a8a:	2100      	movs	r1, #0
    7a8c:	2013      	movs	r0, #19
    7a8e:	f002 fd53 	bl	a538 <pinMode>
  pinMode(OUT1, OUTPUT);  // drive contactor
    7a92:	2101      	movs	r1, #1
    7a94:	200b      	movs	r0, #11
    7a96:	f002 fd4f 	bl	a538 <pinMode>
  digitalWrite(OUT1, LOW);
    7a9a:	2100      	movs	r1, #0
    7a9c:	200b      	movs	r0, #11
    7a9e:	f002 fd17 	bl	a4d0 <digitalWrite>
  pinMode(OUT2, OUTPUT);  // precharge
    7aa2:	2101      	movs	r1, #1
    7aa4:	200c      	movs	r0, #12
    7aa6:	f002 fd47 	bl	a538 <pinMode>
  digitalWrite(OUT2, LOW);
    7aaa:	2100      	movs	r1, #0
    7aac:	200c      	movs	r0, #12
    7aae:	f002 fd0f 	bl	a4d0 <digitalWrite>
  pinMode(OUT3, OUTPUT);  // charge relay
    7ab2:	2101      	movs	r1, #1
    7ab4:	2014      	movs	r0, #20
    7ab6:	f002 fd3f 	bl	a538 <pinMode>
  digitalWrite(OUT3, LOW);
    7aba:	2100      	movs	r1, #0
    7abc:	2014      	movs	r0, #20
    7abe:	f002 fd07 	bl	a4d0 <digitalWrite>
  pinMode(OUT4, OUTPUT);  // Negative contactor
    7ac2:	2101      	movs	r1, #1
    7ac4:	2015      	movs	r0, #21
    7ac6:	f002 fd37 	bl	a538 <pinMode>
  digitalWrite(OUT4, LOW);
    7aca:	2100      	movs	r1, #0
    7acc:	2015      	movs	r0, #21
    7ace:	f002 fcff 	bl	a4d0 <digitalWrite>
  pinMode(OUT5, OUTPUT);  // pwm driver output
    7ad2:	2101      	movs	r1, #1
    7ad4:	2016      	movs	r0, #22
    7ad6:	f002 fd2f 	bl	a538 <pinMode>
  digitalWrite(OUT5, LOW);
    7ada:	2100      	movs	r1, #0
    7adc:	2016      	movs	r0, #22
    7ade:	f002 fcf7 	bl	a4d0 <digitalWrite>
  pinMode(OUT6, OUTPUT);  // pwm driver output
    7ae2:	2101      	movs	r1, #1
    7ae4:	2017      	movs	r0, #23
    7ae6:	f002 fd27 	bl	a538 <pinMode>
  digitalWrite(OUT6, LOW);
    7aea:	2100      	movs	r1, #0
    7aec:	2017      	movs	r0, #23
    7aee:	f002 fcef 	bl	a4d0 <digitalWrite>
  pinMode(OUT7, OUTPUT);  // pwm driver output
    7af2:	2101      	movs	r1, #1
    7af4:	2005      	movs	r0, #5
    7af6:	f002 fd1f 	bl	a538 <pinMode>
  digitalWrite(OUT7, LOW);
    7afa:	2100      	movs	r1, #0
    7afc:	2005      	movs	r0, #5
    7afe:	f002 fce7 	bl	a4d0 <digitalWrite>
  pinMode(OUT8, OUTPUT);  // pwm driver output
    7b02:	2101      	movs	r1, #1
    7b04:	2006      	movs	r0, #6
    7b06:	f002 fd17 	bl	a538 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    7b0a:	4cb3      	ldr	r4, [pc, #716]	; (7dd8 <L_29121_delayMicroseconds+0x112>)
    7b0c:	4db3      	ldr	r5, [pc, #716]	; (7ddc <L_29121_delayMicroseconds+0x116>)
    Can0.setFilter(filter, i);
    7b0e:	4eb4      	ldr	r6, [pc, #720]	; (7de0 <L_29121_delayMicroseconds+0x11a>)
  digitalWrite(OUT8, LOW);
    7b10:	2100      	movs	r1, #0
    7b12:	2006      	movs	r0, #6
    7b14:	f002 fcdc 	bl	a4d0 <digitalWrite>
  pinMode(led, OUTPUT);
    7b18:	2101      	movs	r1, #1
    7b1a:	200d      	movs	r0, #13
    7b1c:	f002 fd0c 	bl	a538 <pinMode>
  analogWriteFrequency(OUT5, pwmfreq);
    7b20:	8820      	ldrh	r0, [r4, #0]
    7b22:	f005 f9d1 	bl	cec8 <__aeabi_ui2f>
    7b26:	4601      	mov	r1, r0
    7b28:	2016      	movs	r0, #22
    7b2a:	f002 fc67 	bl	a3fc <analogWriteFrequency>
  analogWriteFrequency(OUT6, pwmfreq);
    7b2e:	8820      	ldrh	r0, [r4, #0]
    7b30:	f005 f9ca 	bl	cec8 <__aeabi_ui2f>
    7b34:	4601      	mov	r1, r0
    7b36:	2017      	movs	r0, #23
    7b38:	f002 fc60 	bl	a3fc <analogWriteFrequency>
  analogWriteFrequency(OUT7, pwmfreq);
    7b3c:	8820      	ldrh	r0, [r4, #0]
    7b3e:	f005 f9c3 	bl	cec8 <__aeabi_ui2f>
    7b42:	4601      	mov	r1, r0
    7b44:	2005      	movs	r0, #5
    7b46:	f002 fc59 	bl	a3fc <analogWriteFrequency>
  analogWriteFrequency(OUT8, pwmfreq);
    7b4a:	8820      	ldrh	r0, [r4, #0]
    7b4c:	f005 f9bc 	bl	cec8 <__aeabi_ui2f>
  Can0.begin(500000);
    7b50:	2400      	movs	r4, #0
  analogWriteFrequency(OUT8, pwmfreq);
    7b52:	4601      	mov	r1, r0
    7b54:	2006      	movs	r0, #6
    7b56:	f002 fc51 	bl	a3fc <analogWriteFrequency>
  Can0.begin(500000);
    7b5a:	4aa2      	ldr	r2, [pc, #648]	; (7de4 <L_29121_delayMicroseconds+0x11e>)
    7b5c:	49a2      	ldr	r1, [pc, #648]	; (7de8 <L_29121_delayMicroseconds+0x122>)
    7b5e:	48a0      	ldr	r0, [pc, #640]	; (7de0 <L_29121_delayMicroseconds+0x11a>)
    7b60:	9400      	str	r4, [sp, #0]
    7b62:	4623      	mov	r3, r4
    7b64:	f000 fb46 	bl	81f4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>
    filter.flags.extended = 0;
    7b68:	792b      	ldrb	r3, [r5, #4]
    Can0.setFilter(filter, i);
    7b6a:	b2e2      	uxtb	r2, r4
    filter.flags.extended = 0;
    7b6c:	f36f 0300 	bfc	r3, #0, #1
    Can0.setFilter(filter, i);
    7b70:	4629      	mov	r1, r5
    7b72:	4630      	mov	r0, r6
  for (int i = 0; i < 8; i++) {
    7b74:	3401      	adds	r4, #1
    filter.flags.extended = 0;
    7b76:	712b      	strb	r3, [r5, #4]
    Can0.setFilter(filter, i);
    7b78:	f000 fac8 	bl	810c <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 0; i < 8; i++) {
    7b7c:	2c08      	cmp	r4, #8
    7b7e:	d1f3      	bne.n	7b68 <setup+0x114>
    Can0.setFilter(filter, i);
    7b80:	4f96      	ldr	r7, [pc, #600]	; (7ddc <L_29121_delayMicroseconds+0x116>)
    7b82:	4e97      	ldr	r6, [pc, #604]	; (7de0 <L_29121_delayMicroseconds+0x11a>)
  for (int i = 9; i < 13; i++) {
    7b84:	2409      	movs	r4, #9
    filter.flags.extended = 1;
    7b86:	792b      	ldrb	r3, [r5, #4]
    Can0.setFilter(filter, i);
    7b88:	b2e2      	uxtb	r2, r4
    filter.flags.extended = 1;
    7b8a:	f043 0301 	orr.w	r3, r3, #1
    Can0.setFilter(filter, i);
    7b8e:	4639      	mov	r1, r7
    7b90:	4630      	mov	r0, r6
  for (int i = 9; i < 13; i++) {
    7b92:	3401      	adds	r4, #1
    filter.flags.extended = 1;
    7b94:	712b      	strb	r3, [r5, #4]
    Can0.setFilter(filter, i);
    7b96:	f000 fab9 	bl	810c <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
  for (int i = 9; i < 13; i++) {
    7b9a:	2c0d      	cmp	r4, #13
    7b9c:	d1f3      	bne.n	7b86 <setup+0x132>
  adc->adc0->setAveraging(16);   // set number of averages
    7b9e:	4c93      	ldr	r4, [pc, #588]	; (7dec <L_29121_delayMicroseconds+0x126>)
		uint32_t millis_begin = systick_millis_count;
    7ba0:	4f93      	ldr	r7, [pc, #588]	; (7df0 <L_29121_delayMicroseconds+0x12a>)
    7ba2:	6823      	ldr	r3, [r4, #0]
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() {
		yield();
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7ba4:	4e93      	ldr	r6, [pc, #588]	; (7df4 <L_29121_delayMicroseconds+0x12e>)
    7ba6:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    7baa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 7df8 <L_29121_delayMicroseconds+0x132>
    7bae:	2110      	movs	r1, #16
    7bb0:	f001 f9b8 	bl	8f24 <ADC_Module::setAveraging(unsigned char)>
  adc->adc0->setResolution(16);  // set bits of resolution
    7bb4:	6823      	ldr	r3, [r4, #0]
    7bb6:	2110      	movs	r1, #16
    7bb8:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7bbc:	f001 f878 	bl	8cb0 <ADC_Module::setResolution(unsigned char)>
  adc->adc0->setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    7bc0:	6823      	ldr	r3, [r4, #0]
    7bc2:	2102      	movs	r1, #2
    7bc4:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7bc8:	f000 ff5a 	bl	8a80 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
  adc->adc0->setSamplingSpeed(ADC_SAMPLING_SPEED::MED_SPEED);
    7bcc:	6823      	ldr	r3, [r4, #0]
    7bce:	2102      	movs	r1, #2
    7bd0:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7bd4:	f001 f952 	bl	8e7c <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>
  adc->adc0->startContinuous(ACUR1);
    7bd8:	6823      	ldr	r3, [r4, #0]
    7bda:	4c88      	ldr	r4, [pc, #544]	; (7dfc <L_29121_delayMicroseconds+0x136>)
    7bdc:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
    7be0:	210f      	movs	r1, #15
    7be2:	f001 fa03 	bl	8fec <ADC_Module::startContinuous(unsigned char)>
		uint32_t millis_begin = systick_millis_count;
    7be6:	683d      	ldr	r5, [r7, #0]
				if (elapsed > 750) break;
    7be8:	f240 28ee 	movw	r8, #750	; 0x2ee
		yield();
    7bec:	f004 fbea 	bl	c3c4 <yield>
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7bf0:	7823      	ldrb	r3, [r4, #0]
    7bf2:	2b00      	cmp	r3, #0
    7bf4:	f000 8136 	beq.w	7e64 <L_29121_delayMicroseconds+0x19e>
    7bf8:	7833      	ldrb	r3, [r6, #0]
    7bfa:	07d8      	lsls	r0, r3, #31
    7bfc:	f140 8132 	bpl.w	7e64 <L_29121_delayMicroseconds+0x19e>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    7c00:	683b      	ldr	r3, [r7, #0]
    7c02:	f8d9 2000 	ldr.w	r2, [r9]
    7c06:	1a9b      	subs	r3, r3, r2
		return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    7c08:	2b0e      	cmp	r3, #14
    7c0a:	f240 812b 	bls.w	7e64 <L_29121_delayMicroseconds+0x19e>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7c0e:	210c      	movs	r1, #12
    7c10:	487b      	ldr	r0, [pc, #492]	; (7e00 <L_29121_delayMicroseconds+0x13a>)
    7c12:	f004 fad1 	bl	c1b8 <usb_serial_write>
	size_t println(const char s[])			{ return print(s) + println(); }
    7c16:	487b      	ldr	r0, [pc, #492]	; (7e04 <L_29121_delayMicroseconds+0x13e>)
    7c18:	f001 fd86 	bl	9728 <Print::println()>
    7c1c:	210d      	movs	r1, #13
    7c1e:	487a      	ldr	r0, [pc, #488]	; (7e08 <L_29121_delayMicroseconds+0x142>)
    7c20:	f004 faca 	bl	c1b8 <usb_serial_write>
    7c24:	4877      	ldr	r0, [pc, #476]	; (7e04 <L_29121_delayMicroseconds+0x13e>)
    7c26:	f001 fd7f 	bl	9728 <Print::println()>
  Serial2.begin(115200);
    7c2a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    7c2e:	4877      	ldr	r0, [pc, #476]	; (7e0c <L_29121_delayMicroseconds+0x146>)
    7c30:	f001 fbc0 	bl	93b4 <HardwareSerial2::begin(unsigned long)>
  Serial.println();
    7c34:	4873      	ldr	r0, [pc, #460]	; (7e04 <L_29121_delayMicroseconds+0x13e>)
    7c36:	f001 fd77 	bl	9728 <Print::println()>
    7c3a:	2117      	movs	r1, #23
    7c3c:	4874      	ldr	r0, [pc, #464]	; (7e10 <L_29121_delayMicroseconds+0x14a>)
    7c3e:	f004 fabb 	bl	c1b8 <usb_serial_write>
    7c42:	4870      	ldr	r0, [pc, #448]	; (7e04 <L_29121_delayMicroseconds+0x13e>)
    7c44:	f001 fd70 	bl	9728 <Print::println()>
  if (RCM_SRS1 & RCM_SRS1_SACKERR) Serial.println("Stop Mode Acknowledge Error Reset");
    7c48:	4b72      	ldr	r3, [pc, #456]	; (7e14 <L_29121_delayMicroseconds+0x14e>)
    7c4a:	785b      	ldrb	r3, [r3, #1]
    7c4c:	0699      	lsls	r1, r3, #26
    7c4e:	f100 8163 	bmi.w	7f18 <L_29121_delayMicroseconds+0x252>
  if (RCM_SRS1 & RCM_SRS1_MDM_AP) Serial.println("MDM-AP Reset");
    7c52:	4b70      	ldr	r3, [pc, #448]	; (7e14 <L_29121_delayMicroseconds+0x14e>)
    7c54:	785b      	ldrb	r3, [r3, #1]
    7c56:	071a      	lsls	r2, r3, #28
    7c58:	f100 8156 	bmi.w	7f08 <L_29121_delayMicroseconds+0x242>
  if (RCM_SRS1 & RCM_SRS1_SW) Serial.println("Software Reset");  // reboot with SCB_AIRCR = 0x05FA0004
    7c5c:	4b6d      	ldr	r3, [pc, #436]	; (7e14 <L_29121_delayMicroseconds+0x14e>)
    7c5e:	785b      	ldrb	r3, [r3, #1]
    7c60:	075b      	lsls	r3, r3, #29
    7c62:	f100 8149 	bmi.w	7ef8 <L_29121_delayMicroseconds+0x232>
  if (RCM_SRS1 & RCM_SRS1_LOCKUP) Serial.println("Core Lockup Event Reset");
    7c66:	4b6b      	ldr	r3, [pc, #428]	; (7e14 <L_29121_delayMicroseconds+0x14e>)
    7c68:	785b      	ldrb	r3, [r3, #1]
    7c6a:	079e      	lsls	r6, r3, #30
    7c6c:	f100 8130 	bmi.w	7ed0 <L_29121_delayMicroseconds+0x20a>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    7c70:	4b68      	ldr	r3, [pc, #416]	; (7e14 <L_29121_delayMicroseconds+0x14e>)
    7c72:	781b      	ldrb	r3, [r3, #0]
    7c74:	061d      	lsls	r5, r3, #24
    7c76:	f100 8137 	bmi.w	7ee8 <L_29121_delayMicroseconds+0x222>
  if (RCM_SRS0 & RCM_SRS0_PIN) Serial.println("External Pin Reset");    // Reboot with software download
    7c7a:	4b66      	ldr	r3, [pc, #408]	; (7e14 <L_29121_delayMicroseconds+0x14e>)
    7c7c:	781b      	ldrb	r3, [r3, #0]
    7c7e:	065c      	lsls	r4, r3, #25
    7c80:	f100 811e 	bmi.w	7ec0 <L_29121_delayMicroseconds+0x1fa>
  if (RCM_SRS0 & RCM_SRS0_WDOG) Serial.println("Watchdog(COP) Reset");  // WDT timed out
    7c84:	4b63      	ldr	r3, [pc, #396]	; (7e14 <L_29121_delayMicroseconds+0x14e>)
    7c86:	781b      	ldrb	r3, [r3, #0]
    7c88:	0698      	lsls	r0, r3, #26
    7c8a:	f100 8111 	bmi.w	7eb0 <L_29121_delayMicroseconds+0x1ea>
  if (RCM_SRS0 & RCM_SRS0_LOC) Serial.println("Loss of External Clock Reset");
    7c8e:	4b61      	ldr	r3, [pc, #388]	; (7e14 <L_29121_delayMicroseconds+0x14e>)
    7c90:	781b      	ldrb	r3, [r3, #0]
    7c92:	0759      	lsls	r1, r3, #29
    7c94:	f100 8104 	bmi.w	7ea0 <L_29121_delayMicroseconds+0x1da>
  if (RCM_SRS0 & RCM_SRS0_LOL) Serial.println("Loss of Lock in PLL Reset");
    7c98:	4b5e      	ldr	r3, [pc, #376]	; (7e14 <L_29121_delayMicroseconds+0x14e>)
    7c9a:	781b      	ldrb	r3, [r3, #0]
    7c9c:	071a      	lsls	r2, r3, #28
    7c9e:	f100 80f7 	bmi.w	7e90 <L_29121_delayMicroseconds+0x1ca>
  if (RCM_SRS0 & RCM_SRS0_LVD) Serial.println("Low-voltage Detect Reset");
    7ca2:	4b5c      	ldr	r3, [pc, #368]	; (7e14 <L_29121_delayMicroseconds+0x14e>)
    7ca4:	781b      	ldrb	r3, [r3, #0]
    7ca6:	079b      	lsls	r3, r3, #30
    7ca8:	f100 80ea 	bmi.w	7e80 <L_29121_delayMicroseconds+0x1ba>
  Serial.println();
    7cac:	4855      	ldr	r0, [pc, #340]	; (7e04 <L_29121_delayMicroseconds+0x13e>)
    7cae:	f001 fd3b 	bl	9728 <Print::println()>
  noInterrupts();                  // don't allow interrupts while setting up WDOG
    7cb2:	b672      	cpsid	i
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    7cb4:	4b58      	ldr	r3, [pc, #352]	; (7e18 <L_29121_delayMicroseconds+0x152>)
    7cb6:	f24c 5120 	movw	r1, #50464	; 0xc520
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    7cba:	f64d 1228 	movw	r2, #55592	; 0xd928
#elif F_CPU == 2000000
	uint32_t n = usec >> 1;
#endif
    // changed because a delay of 1 micro Sec @ 2MHz will be 0
	if (n == 0) return;
	__asm__ volatile(
    7cbe:	2420      	movs	r4, #32
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ1;  // unlock access to WDOG registers
    7cc0:	81d9      	strh	r1, [r3, #14]
  WDOG_UNLOCK = WDOG_UNLOCK_SEQ2;
    7cc2:	81da      	strh	r2, [r3, #14]
    7cc4:	4622      	mov	r2, r4

00007cc6 <L_29121_delayMicroseconds>:
    7cc6:	3a01      	subs	r2, #1
    7cc8:	d1fd      	bne.n	7cc6 <L_29121_delayMicroseconds>
  WDOG_TOVALL = 0x0000;
    7cca:	2200      	movs	r2, #0
  WDOG_TOVALH = 0x1000;
    7ccc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7cd0:	8099      	strh	r1, [r3, #4]
  WDOG_TOVALL = 0x0000;
    7cd2:	80da      	strh	r2, [r3, #6]
  WDOG_PRESC = 0;
    7cd4:	82da      	strh	r2, [r3, #22]
  WDOG_STCTRLH |= WDOG_STCTRLH_ALLOWUPDATE | WDOG_STCTRLH_WDOGEN | WDOG_STCTRLH_WAITEN | WDOG_STCTRLH_STOPEN | WDOG_STCTRLH_CLKSRC;
    7cd6:	881a      	ldrh	r2, [r3, #0]
    7cd8:	b292      	uxth	r2, r2
    7cda:	f042 02d3 	orr.w	r2, r2, #211	; 0xd3
    7cde:	801a      	strh	r2, [r3, #0]
  interrupts();
    7ce0:	b662      	cpsie	i
  SERIALBMS.begin(115200);
    7ce2:	484e      	ldr	r0, [pc, #312]	; (7e1c <L_29121_delayMicroseconds+0x156>)
    7ce4:	f8df 8138 	ldr.w	r8, [pc, #312]	; 7e20 <L_29121_delayMicroseconds+0x15a>
    7ce8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
    7cec:	f001 fc1a 	bl	9524 <HardwareSerial3::begin(unsigned long)>
    7cf0:	4621      	mov	r1, r4
    7cf2:	484c      	ldr	r0, [pc, #304]	; (7e24 <L_29121_delayMicroseconds+0x15e>)
    7cf4:	f004 fa60 	bl	c1b8 <usb_serial_write>
    7cf8:	4842      	ldr	r0, [pc, #264]	; (7e04 <L_29121_delayMicroseconds+0x13e>)
    7cfa:	f001 fd15 	bl	9728 <Print::println()>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    7cfe:	f108 34ff 	add.w	r4, r8, #4294967295
    7d02:	f108 06d7 	add.w	r6, r8, #215	; 0xd7
    7d06:	f1c8 0501 	rsb	r5, r8, #1
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7d0a:	1928      	adds	r0, r5, r4
    7d0c:	f001 ff28 	bl	9b60 <eeprom_read_byte>
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    7d10:	f804 0f01 	strb.w	r0, [r4, #1]!
    7d14:	42b4      	cmp	r4, r6
    7d16:	d1f8      	bne.n	7d0a <L_29121_delayMicroseconds+0x44>
  if (settings.version != EEPROM_VERSION) {
    7d18:	f898 3000 	ldrb.w	r3, [r8]
    7d1c:	2b12      	cmp	r3, #18
    7d1e:	d004      	beq.n	7d2a <L_29121_delayMicroseconds+0x64>
    Serial.println();
    7d20:	4838      	ldr	r0, [pc, #224]	; (7e04 <L_29121_delayMicroseconds+0x13e>)
    7d22:	f001 fd01 	bl	9728 <Print::println()>
    loadSettings();
    7d26:	f7fa fb97 	bl	2458 <loadSettings()>
  Logger::setLoglevel(Logger::Off);  //Debug = 0, Info = 1, Warn = 2, Error = 3, Off = 4
    7d2a:	2004      	movs	r0, #4
    7d2c:	f7fa f9ac 	bl	2088 <Logger::setLoglevel(Logger::LogLevel)>
  lastUpdate = 0;
    7d30:	4b3d      	ldr	r3, [pc, #244]	; (7e28 <L_29121_delayMicroseconds+0x162>)
    7d32:	2200      	movs	r2, #0
  digitalWrite(led, HIGH);
    7d34:	2101      	movs	r1, #1
    7d36:	200d      	movs	r0, #13
  lastUpdate = 0;
    7d38:	601a      	str	r2, [r3, #0]
  digitalWrite(led, HIGH);
    7d3a:	f002 fbc9 	bl	a4d0 <digitalWrite>
  bms.setPstrings(settings.Pstrings);
    7d3e:	f8d8 1058 	ldr.w	r1, [r8, #88]	; 0x58
    7d42:	483a      	ldr	r0, [pc, #232]	; (7e2c <L_29121_delayMicroseconds+0x166>)
    7d44:	f7f9 fe44 	bl	19d0 <BMSModuleManager::setPstrings(int)>
  bms.setSensors(settings.IgnoreTemp, settings.IgnoreVolt, settings.DeltaVolt);
    7d48:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
    7d4c:	f8d8 2044 	ldr.w	r2, [r8, #68]	; 0x44
    7d50:	f898 1040 	ldrb.w	r1, [r8, #64]	; 0x40
    7d54:	4835      	ldr	r0, [pc, #212]	; (7e2c <L_29121_delayMicroseconds+0x166>)
    7d56:	f7f9 fe3d 	bl	19d4 <BMSModuleManager::setSensors(int, float, float)>
  bms.setBalanceHyst(settings.balanceHyst);
    7d5a:	f8d8 104c 	ldr.w	r1, [r8, #76]	; 0x4c
    7d5e:	4833      	ldr	r0, [pc, #204]	; (7e2c <L_29121_delayMicroseconds+0x166>)
    7d60:	f7f9 f84e 	bl	e00 <BMSModuleManager::setBalanceHyst(float)>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    7d64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7d68:	f001 fefa 	bl	9b60 <eeprom_read_byte>
  if (settings.voltsoc == 1) {
    7d6c:	f8d8 3084 	ldr.w	r3, [r8, #132]	; 0x84
  SOC = (EEPROM.read(1000));
    7d70:	4a2f      	ldr	r2, [pc, #188]	; (7e30 <L_29121_delayMicroseconds+0x16a>)
  if (settings.voltsoc == 1) {
    7d72:	2b01      	cmp	r3, #1
  SOC = (EEPROM.read(1000));
    7d74:	6010      	str	r0, [r2, #0]
  if (settings.voltsoc == 1) {
    7d76:	d001      	beq.n	7d7c <L_29121_delayMicroseconds+0xb6>
    if (SOC > 100) {
    7d78:	2864      	cmp	r0, #100	; 0x64
    7d7a:	dd02      	ble.n	7d82 <L_29121_delayMicroseconds+0xbc>
    SOCmem = 0;
    7d7c:	4b2d      	ldr	r3, [pc, #180]	; (7e34 <L_29121_delayMicroseconds+0x16e>)
    7d7e:	2200      	movs	r2, #0
    7d80:	601a      	str	r2, [r3, #0]
  pwmcurmin = (pwmcurmid / 50 * pwmcurmax * -1);
    7d82:	4b2d      	ldr	r3, [pc, #180]	; (7e38 <L_29121_delayMicroseconds+0x172>)
    7d84:	4a2d      	ldr	r2, [pc, #180]	; (7e3c <L_29121_delayMicroseconds+0x176>)
    7d86:	681b      	ldr	r3, [r3, #0]
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7d88:	6839      	ldr	r1, [r7, #0]
    7d8a:	9105      	str	r1, [sp, #20]
    7d8c:	fb82 0203 	smull	r0, r2, r2, r3
    7d90:	17db      	asrs	r3, r3, #31
    7d92:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    7d96:	4a2a      	ldr	r2, [pc, #168]	; (7e40 <L_29121_delayMicroseconds+0x17a>)
    7d98:	4c2a      	ldr	r4, [pc, #168]	; (7e44 <L_29121_delayMicroseconds+0x17e>)
    7d9a:	6812      	ldr	r2, [r2, #0]
	return ret;
    7d9c:	9905      	ldr	r1, [sp, #20]
    7d9e:	fb13 f302 	smulbb	r3, r3, r2
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7da2:	683a      	ldr	r2, [r7, #0]
    7da4:	9204      	str	r2, [sp, #16]
    7da6:	8023      	strh	r3, [r4, #0]
  Pretimer = millis();
    7da8:	4a27      	ldr	r2, [pc, #156]	; (7e48 <L_29121_delayMicroseconds+0x182>)
  Pretimer1 = millis();
    7daa:	4b28      	ldr	r3, [pc, #160]	; (7e4c <L_29121_delayMicroseconds+0x186>)
	return ret;
    7dac:	9804      	ldr	r0, [sp, #16]
  Pretimer = millis();
    7dae:	6011      	str	r1, [r2, #0]
  Pretimer1 = millis();
    7db0:	6018      	str	r0, [r3, #0]
  attachInterrupt(IN4, isrCP, CHANGE);  // attach BUTTON 1 interrupt handler [ pin# 7 ]
    7db2:	4927      	ldr	r1, [pc, #156]	; (7e50 <L_29121_delayMicroseconds+0x18a>)
    7db4:	2204      	movs	r2, #4
    7db6:	2013      	movs	r0, #19
    7db8:	f002 f93c 	bl	a034 <attachInterrupt>
  PMC_LVDSC1 = PMC_LVDSC1_LVDV(1);                     // enable hi v
    7dbc:	4b25      	ldr	r3, [pc, #148]	; (7e54 <L_29121_delayMicroseconds+0x18e>)
  NVIC_ENABLE_IRQ(IRQ_LOW_VOLTAGE);
    7dbe:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  PMC_LVDSC1 = PMC_LVDSC1_LVDV(1);                     // enable hi v
    7dc2:	2001      	movs	r0, #1
  PMC_LVDSC2 = PMC_LVDSC2_LVWIE | PMC_LVDSC2_LVWV(3);  // 2.92-3.08v
    7dc4:	2123      	movs	r1, #35	; 0x23
  PMC_LVDSC1 = PMC_LVDSC1_LVDV(1);                     // enable hi v
    7dc6:	7018      	strb	r0, [r3, #0]
  PMC_LVDSC2 = PMC_LVDSC2_LVWIE | PMC_LVDSC2_LVWV(3);  // 2.92-3.08v
    7dc8:	7059      	strb	r1, [r3, #1]
  NVIC_ENABLE_IRQ(IRQ_LOW_VOLTAGE);
    7dca:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    7dce:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    7dd2:	683a      	ldr	r2, [r7, #0]
    7dd4:	9203      	str	r2, [sp, #12]
    7dd6:	e03f      	b.n	7e58 <L_29121_delayMicroseconds+0x192>
    7dd8:	1fff8874 	.word	0x1fff8874
    7ddc:	1fffcfd4 	.word	0x1fffcfd4
    7de0:	1fffd1cc 	.word	0x1fffd1cc
    7de4:	1fffd368 	.word	0x1fffd368
    7de8:	0007a120 	.word	0x0007a120
    7dec:	1fff91dc 	.word	0x1fff91dc
    7df0:	1fffd3c0 	.word	0x1fffd3c0
    7df4:	1fffd5dc 	.word	0x1fffd5dc
    7df8:	1fffd5e0 	.word	0x1fffd5e0
    7dfc:	1fffd5b8 	.word	0x1fffd5b8
    7e00:	00015178 	.word	0x00015178
    7e04:	1fff89fc 	.word	0x1fff89fc
    7e08:	00015188 	.word	0x00015188
    7e0c:	1fff88bc 	.word	0x1fff88bc
    7e10:	00015198 	.word	0x00015198
    7e14:	4007f000 	.word	0x4007f000
    7e18:	40052000 	.word	0x40052000
    7e1c:	1fff88d0 	.word	0x1fff88d0
    7e20:	1fffd0d8 	.word	0x1fffd0d8
    7e24:	0001529c 	.word	0x0001529c
    7e28:	1fffcffc 	.word	0x1fffcffc
    7e2c:	1fff91f0 	.word	0x1fff91f0
    7e30:	1fff8828 	.word	0x1fff8828
    7e34:	1fff91c4 	.word	0x1fff91c4
    7e38:	1fff8870 	.word	0x1fff8870
    7e3c:	51eb851f 	.word	0x51eb851f
    7e40:	1fff886c 	.word	0x1fff886c
    7e44:	1fffd0d4 	.word	0x1fffd0d4
    7e48:	1fff91b8 	.word	0x1fff91b8
    7e4c:	1fff91bc 	.word	0x1fff91bc
    7e50:	00002385 	.word	0x00002385
    7e54:	4007d000 	.word	0x4007d000
  cleartime = millis();
    7e58:	4b33      	ldr	r3, [pc, #204]	; (7f28 <L_29121_delayMicroseconds+0x262>)
	return ret;
    7e5a:	9a03      	ldr	r2, [sp, #12]
    7e5c:	601a      	str	r2, [r3, #0]
}
    7e5e:	b007      	add	sp, #28
    7e60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			uint32_t elapsed = systick_millis_count - millis_begin;
    7e64:	683b      	ldr	r3, [r7, #0]
			if (usb_configuration) {
    7e66:	7822      	ldrb	r2, [r4, #0]
			uint32_t elapsed = systick_millis_count - millis_begin;
    7e68:	1b5b      	subs	r3, r3, r5
			if (usb_configuration) {
    7e6a:	b132      	cbz	r2, 7e7a <L_29121_delayMicroseconds+0x1b4>
				if (elapsed > 2000) break;
    7e6c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    7e70:	f63f aecd 	bhi.w	7c0e <setup+0x1ba>
			yield();
    7e74:	f004 faa6 	bl	c3c4 <yield>
    7e78:	e6b8      	b.n	7bec <setup+0x198>
				if (elapsed > 750) break;
    7e7a:	4543      	cmp	r3, r8
    7e7c:	d9fa      	bls.n	7e74 <L_29121_delayMicroseconds+0x1ae>
    7e7e:	e6c6      	b.n	7c0e <setup+0x1ba>
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    7e80:	2118      	movs	r1, #24
    7e82:	482a      	ldr	r0, [pc, #168]	; (7f2c <L_29121_delayMicroseconds+0x266>)
    7e84:	f004 f998 	bl	c1b8 <usb_serial_write>
    7e88:	4829      	ldr	r0, [pc, #164]	; (7f30 <L_29121_delayMicroseconds+0x26a>)
    7e8a:	f001 fc4d 	bl	9728 <Print::println()>
    7e8e:	e70d      	b.n	7cac <setup+0x258>
    7e90:	2119      	movs	r1, #25
    7e92:	4828      	ldr	r0, [pc, #160]	; (7f34 <L_29121_delayMicroseconds+0x26e>)
    7e94:	f004 f990 	bl	c1b8 <usb_serial_write>
    7e98:	4825      	ldr	r0, [pc, #148]	; (7f30 <L_29121_delayMicroseconds+0x26a>)
    7e9a:	f001 fc45 	bl	9728 <Print::println()>
    7e9e:	e700      	b.n	7ca2 <setup+0x24e>
    7ea0:	211c      	movs	r1, #28
    7ea2:	4825      	ldr	r0, [pc, #148]	; (7f38 <L_29121_delayMicroseconds+0x272>)
    7ea4:	f004 f988 	bl	c1b8 <usb_serial_write>
    7ea8:	4821      	ldr	r0, [pc, #132]	; (7f30 <L_29121_delayMicroseconds+0x26a>)
    7eaa:	f001 fc3d 	bl	9728 <Print::println()>
    7eae:	e6f3      	b.n	7c98 <setup+0x244>
    7eb0:	2113      	movs	r1, #19
    7eb2:	4822      	ldr	r0, [pc, #136]	; (7f3c <L_29121_delayMicroseconds+0x276>)
    7eb4:	f004 f980 	bl	c1b8 <usb_serial_write>
    7eb8:	481d      	ldr	r0, [pc, #116]	; (7f30 <L_29121_delayMicroseconds+0x26a>)
    7eba:	f001 fc35 	bl	9728 <Print::println()>
    7ebe:	e6e6      	b.n	7c8e <setup+0x23a>
    7ec0:	2112      	movs	r1, #18
    7ec2:	481f      	ldr	r0, [pc, #124]	; (7f40 <L_29121_delayMicroseconds+0x27a>)
    7ec4:	f004 f978 	bl	c1b8 <usb_serial_write>
    7ec8:	4819      	ldr	r0, [pc, #100]	; (7f30 <L_29121_delayMicroseconds+0x26a>)
    7eca:	f001 fc2d 	bl	9728 <Print::println()>
    7ece:	e6d9      	b.n	7c84 <setup+0x230>
    7ed0:	2117      	movs	r1, #23
    7ed2:	481c      	ldr	r0, [pc, #112]	; (7f44 <L_29121_delayMicroseconds+0x27e>)
    7ed4:	f004 f970 	bl	c1b8 <usb_serial_write>
    7ed8:	4815      	ldr	r0, [pc, #84]	; (7f30 <L_29121_delayMicroseconds+0x26a>)
    7eda:	f001 fc25 	bl	9728 <Print::println()>
  if (RCM_SRS0 & RCM_SRS0_POR) Serial.println("Power-on Reset");        // removed / applied power
    7ede:	4b1a      	ldr	r3, [pc, #104]	; (7f48 <L_29121_delayMicroseconds+0x282>)
    7ee0:	781b      	ldrb	r3, [r3, #0]
    7ee2:	061d      	lsls	r5, r3, #24
    7ee4:	f57f aec9 	bpl.w	7c7a <setup+0x226>
    7ee8:	210e      	movs	r1, #14
    7eea:	4818      	ldr	r0, [pc, #96]	; (7f4c <L_29121_delayMicroseconds+0x286>)
    7eec:	f004 f964 	bl	c1b8 <usb_serial_write>
    7ef0:	480f      	ldr	r0, [pc, #60]	; (7f30 <L_29121_delayMicroseconds+0x26a>)
    7ef2:	f001 fc19 	bl	9728 <Print::println()>
    7ef6:	e6c0      	b.n	7c7a <setup+0x226>
    7ef8:	210e      	movs	r1, #14
    7efa:	4815      	ldr	r0, [pc, #84]	; (7f50 <L_29121_delayMicroseconds+0x28a>)
    7efc:	f004 f95c 	bl	c1b8 <usb_serial_write>
    7f00:	480b      	ldr	r0, [pc, #44]	; (7f30 <L_29121_delayMicroseconds+0x26a>)
    7f02:	f001 fc11 	bl	9728 <Print::println()>
    7f06:	e6ae      	b.n	7c66 <setup+0x212>
    7f08:	210c      	movs	r1, #12
    7f0a:	4812      	ldr	r0, [pc, #72]	; (7f54 <L_29121_delayMicroseconds+0x28e>)
    7f0c:	f004 f954 	bl	c1b8 <usb_serial_write>
    7f10:	4807      	ldr	r0, [pc, #28]	; (7f30 <L_29121_delayMicroseconds+0x26a>)
    7f12:	f001 fc09 	bl	9728 <Print::println()>
    7f16:	e6a1      	b.n	7c5c <setup+0x208>
    7f18:	2121      	movs	r1, #33	; 0x21
    7f1a:	480f      	ldr	r0, [pc, #60]	; (7f58 <L_29121_delayMicroseconds+0x292>)
    7f1c:	f004 f94c 	bl	c1b8 <usb_serial_write>
    7f20:	4803      	ldr	r0, [pc, #12]	; (7f30 <L_29121_delayMicroseconds+0x26a>)
    7f22:	f001 fc01 	bl	9728 <Print::println()>
    7f26:	e694      	b.n	7c52 <setup+0x1fe>
    7f28:	1fffcf4c 	.word	0x1fffcf4c
    7f2c:	00015280 	.word	0x00015280
    7f30:	1fff89fc 	.word	0x1fff89fc
    7f34:	00015264 	.word	0x00015264
    7f38:	00015244 	.word	0x00015244
    7f3c:	00015230 	.word	0x00015230
    7f40:	0001521c 	.word	0x0001521c
    7f44:	000151f4 	.word	0x000151f4
    7f48:	4007f000 	.word	0x4007f000
    7f4c:	0001520c 	.word	0x0001520c
    7f50:	000151e4 	.word	0x000151e4
    7f54:	000151d4 	.word	0x000151d4
    7f58:	000151b0 	.word	0x000151b0

00007f5c <CANListener::frameHandler(CAN_message_t&, int, unsigned char)>:
{

    /* default implementation that doesn't handle frames */

    return (false);
}
    7f5c:	2000      	movs	r0, #0
    7f5e:	4770      	bx	lr

00007f60 <CANListener::txHandler(int, unsigned char)>:
 */

void CANListener::txHandler (int /*mailbox*/, uint8_t /*controller*/)
{

}
    7f60:	4770      	bx	lr
    7f62:	bf00      	nop

00007f64 <FlexCAN::FlexCAN(unsigned char)>:
FlexCAN::FlexCAN (uint8_t id)
    7f64:	b538      	push	{r3, r4, r5, lr}
    defaultMask.id = 0;
    7f66:	4b1b      	ldr	r3, [pc, #108]	; (7fd4 <FlexCAN::FlexCAN(unsigned char)+0x70>)
    flexcanBase = FLEXCAN0_BASE;
    7f68:	491b      	ldr	r1, [pc, #108]	; (7fd8 <FlexCAN::FlexCAN(unsigned char)+0x74>)
    defaultMask.flags.extended = 0;
    7f6a:	791a      	ldrb	r2, [r3, #4]
FlexCAN::FlexCAN (uint8_t id)
    7f6c:	4604      	mov	r4, r0
    defaultMask.id = 0;
    7f6e:	2500      	movs	r5, #0
    flexcanBase = FLEXCAN0_BASE;
    7f70:	6021      	str	r1, [r4, #0]
    defaultMask.flags.extended = 0;
    7f72:	f022 0203 	bic.w	r2, r2, #3
    IrqMessage=IRQ_CAN_MESSAGE;
    7f76:	211d      	movs	r1, #29
    7f78:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
    defaultMask.id = 0;
    7f7c:	601d      	str	r5, [r3, #0]
    defaultMask.flags.extended = 0;
    7f7e:	711a      	strb	r2, [r3, #4]
    numTxMailboxes=2;
    7f80:	2002      	movs	r0, #2
    sizeTxBuffer=SIZE_TX_BUFFER;
    7f82:	2310      	movs	r3, #16
    sizeRxBuffer=SIZE_RX_BUFFER;
    7f84:	2120      	movs	r1, #32
    sizeTxBuffer=SIZE_TX_BUFFER;
    7f86:	f8a4 3198 	strh.w	r3, [r4, #408]	; 0x198
    numTxMailboxes=2;
    7f8a:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    sizeRxBuffer=SIZE_RX_BUFFER;
    7f8e:	f8a4 1196 	strh.w	r1, [r4, #406]	; 0x196
    tx_buffer=0;
    7f92:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
      txRings[i]=0;
    7f96:	4629      	mov	r1, r5
    rx_buffer=0;
    7f98:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
      txRings[i]=0;
    7f9c:	2240      	movs	r2, #64	; 0x40
    7f9e:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
    7fa2:	f006 f86b 	bl	e07c <memset>
        listener[i] = NULL;
    7fa6:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
    7faa:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    7fae:	f8c4 508c 	str.w	r5, [r4, #140]	; 0x8c
    7fb2:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
    memset (&stats, 0, sizeof(stats));
    7fb6:	2298      	movs	r2, #152	; 0x98
    7fb8:	4629      	mov	r1, r5
    7fba:	f104 00fc 	add.w	r0, r4, #252	; 0xfc
    7fbe:	f006 f85d 	bl	e07c <memset>
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    7fc2:	221f      	movs	r2, #31
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    7fc4:	230f      	movs	r3, #15
    stats.ringRxMax = SIZE_RX_BUFFER - 1;
    7fc6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
    stats.ringTxMax = SIZE_TX_BUFFER - 1;
    7fca:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
}
    7fce:	4620      	mov	r0, r4
    7fd0:	bd38      	pop	{r3, r4, r5, pc}
    7fd2:	bf00      	nop
    7fd4:	1fffd368 	.word	0x1fffd368
    7fd8:	40024000 	.word	0x40024000

00007fdc <FlexCAN::setBaudRate(unsigned long)>:
void FlexCAN::setBaudRate(uint32_t baud) {
    7fdc:	b570      	push	{r4, r5, r6, lr}
    uint32_t result = 16000000 / baud / (divisor + 1);
    7fde:	4e2d      	ldr	r6, [pc, #180]	; (8094 <FlexCAN::setBaudRate(unsigned long)+0xb8>)
    7fe0:	fbb6 fcf1 	udiv	ip, r6, r1
    while (result > 5) {
    7fe4:	f1bc 0f05 	cmp.w	ip, #5
    int error = baud - (16000000 / (result * (divisor + 1)));
    7fe8:	fbb6 f4fc 	udiv	r4, r6, ip
    uint32_t bestDivisor = 0;
    7fec:	f04f 0500 	mov.w	r5, #0
    int error = baud - (16000000 / (result * (divisor + 1)));
    7ff0:	eba1 0404 	sub.w	r4, r1, r4
    while (result > 5) {
    7ff4:	d921      	bls.n	803a <FlexCAN::setBaudRate(unsigned long)+0x5e>
    uint32_t divisor = 0;
    7ff6:	462b      	mov	r3, r5
        divisor++;
    7ff8:	f103 0e01 	add.w	lr, r3, #1
        result = 16000000 / baud / (divisor + 1);
    7ffc:	3302      	adds	r3, #2
    7ffe:	fbbc f2f3 	udiv	r2, ip, r3
        if (result <= 25) {
    8002:	2a19      	cmp	r2, #25
            error = baud - (16000000 / (result * (divisor + 1)));
    8004:	fb02 f303 	mul.w	r3, r2, r3
        if (result <= 25) {
    8008:	d80f      	bhi.n	802a <FlexCAN::setBaudRate(unsigned long)+0x4e>
            error = baud - (16000000 / (result * (divisor + 1)));
    800a:	fbb6 f3f3 	udiv	r3, r6, r3
    800e:	1acb      	subs	r3, r1, r3
            if (error < 0)
    8010:	2b00      	cmp	r3, #0
    8012:	bfb8      	it	lt
    8014:	425b      	neglt	r3, r3
            if (error < bestError) {
    8016:	42a3      	cmp	r3, r4
    8018:	da09      	bge.n	802e <FlexCAN::setBaudRate(unsigned long)+0x52>
    801a:	461c      	mov	r4, r3
                bestDivisor = divisor;
    801c:	4675      	mov	r5, lr
            if ((error == bestError) && (result > 11) && (result < 19)) {
    801e:	2a0b      	cmp	r2, #11
    8020:	d906      	bls.n	8030 <FlexCAN::setBaudRate(unsigned long)+0x54>
    8022:	2a12      	cmp	r2, #18
    8024:	bf9c      	itt	ls
    8026:	461c      	movls	r4, r3
    8028:	4675      	movls	r5, lr
void FlexCAN::setBaudRate(uint32_t baud) {
    802a:	4673      	mov	r3, lr
    802c:	e7e4      	b.n	7ff8 <FlexCAN::setBaudRate(unsigned long)+0x1c>
            if ((error == bestError) && (result > 11) && (result < 19)) {
    802e:	d0f6      	beq.n	801e <FlexCAN::setBaudRate(unsigned long)+0x42>
    while (result > 5) {
    8030:	2a05      	cmp	r2, #5
    8032:	d8fa      	bhi.n	802a <FlexCAN::setBaudRate(unsigned long)+0x4e>
    result = 16000000 / baud / (divisor + 1);
    8034:	1c6b      	adds	r3, r5, #1
    8036:	fbbc fcf3 	udiv	ip, ip, r3
    if ((result < 5) || (result > 25) || (bestError > 300)) {
    803a:	f1ac 0c05 	sub.w	ip, ip, #5
    803e:	f1bc 0f14 	cmp.w	ip, #20
    8042:	d81e      	bhi.n	8082 <FlexCAN::setBaudRate(unsigned long)+0xa6>
    8044:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
    8048:	dc1b      	bgt.n	8082 <FlexCAN::setBaudRate(unsigned long)+0xa6>
    uint8_t pSeg1   = bitTimingTable[result][1];
    804a:	4b13      	ldr	r3, [pc, #76]	; (8098 <FlexCAN::setBaudRate(unsigned long)+0xbc>)
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    804c:	6800      	ldr	r0, [r0, #0]
    uint8_t pSeg1   = bitTimingTable[result][1];
    804e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    8052:	eb03 020c 	add.w	r2, r3, ip
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    8056:	f813 100c 	ldrb.w	r1, [r3, ip]
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    805a:	7853      	ldrb	r3, [r2, #1]
    805c:	7892      	ldrb	r2, [r2, #2]
    805e:	04db      	lsls	r3, r3, #19
    8060:	0412      	lsls	r2, r2, #16
    8062:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
    8066:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    806a:	f001 0107 	and.w	r1, r1, #7
                                    FLEXCAN_CTRL_PSEG1(pSeg1) | FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_PRESDIV(divisor));
    806e:	4313      	orrs	r3, r2
    8070:	430b      	orrs	r3, r1
    8072:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    8076:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    807a:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    FLEXCANb_CTRL1 (flexcanBase) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_ERR_MSK |
    807e:	6043      	str	r3, [r0, #4]
}
    8080:	bd70      	pop	{r4, r5, r6, pc}
    8082:	4806      	ldr	r0, [pc, #24]	; (809c <FlexCAN::setBaudRate(unsigned long)+0xc0>)
    8084:	2139      	movs	r1, #57	; 0x39
    8086:	f004 f897 	bl	c1b8 <usb_serial_write>
    808a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    808e:	4804      	ldr	r0, [pc, #16]	; (80a0 <FlexCAN::setBaudRate(unsigned long)+0xc4>)
    8090:	f001 bb4a 	b.w	9728 <Print::println()>
    8094:	00f42400 	.word	0x00f42400
    8098:	1fff887c 	.word	0x1fff887c
    809c:	000152c0 	.word	0x000152c0
    80a0:	1fff89fc 	.word	0x1fff89fc

000080a4 <FlexCAN::setNumTxBoxes(unsigned char)>:
{
    80a4:	b530      	push	{r4, r5, lr}
    80a6:	2901      	cmp	r1, #1
    80a8:	4604      	mov	r4, r0
    80aa:	bf38      	it	cc
    80ac:	2101      	movcc	r1, #1
    80ae:	290f      	cmp	r1, #15
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    80b0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    80b4:	4608      	mov	r0, r1
    80b6:	bf28      	it	cs
    80b8:	200f      	movcs	r0, #15
    numTxMailboxes = txboxes;
    80ba:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
    if ( !isInitialized() ) return numTxMailboxes;  // Just set the numTxMailboxes. Begin() will do final initialization.
    80be:	b31b      	cbz	r3, 8108 <FlexCAN::setNumTxBoxes(unsigned char)+0x64>
    void setMailBoxTxBufferSize(uint8_t mbox, uint16_t size);

    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    inline uint8_t getLastTxBox() { return getNumMailBoxes()-1; }
    inline uint8_t getNumMailBoxes() { return NUM_MAILBOXES; }
    inline uint8_t getNumRxBoxes() { return getNumMailBoxes()-numTxMailboxes; }
    80c0:	f1c0 0e10 	rsb	lr, r0, #16
    80c4:	fa5f f58e 	uxtb.w	r5, lr
    80c8:	46ae      	mov	lr, r5
    80ca:	2200      	movs	r2, #0
    80cc:	012d      	lsls	r5, r5, #4
        oldIde = FLEXCANb_MBn_CS(flexcanBase, c) & FLEXCAN_MB_CS_IDE;
    80ce:	6823      	ldr	r3, [r4, #0]
    80d0:	f103 0c80 	add.w	ip, r3, #128	; 0x80
    80d4:	f85c 3002 	ldr.w	r3, [ip, r2]
    80d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | oldIde;
    80dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    80e0:	f84c 3002 	str.w	r3, [ip, r2]
    for (c = 0; c < getNumRxBoxes(); c++) {
    80e4:	3210      	adds	r2, #16
    80e6:	4295      	cmp	r5, r2
    80e8:	d1f1      	bne.n	80ce <FlexCAN::setNumTxBoxes(unsigned char)+0x2a>
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    80ea:	2510      	movs	r5, #16
    80ec:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    80f0:	6823      	ldr	r3, [r4, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    80f2:	f10e 0201 	add.w	r2, lr, #1
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    80f6:	3380      	adds	r3, #128	; 0x80
    80f8:	fb15 330e 	smlabb	r3, r5, lr, r3
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    80fc:	fa5f fe82 	uxtb.w	lr, r2
    8100:	f1be 0f10 	cmp.w	lr, #16
        FLEXCANb_MBn_CS(flexcanBase, c) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    8104:	6019      	str	r1, [r3, #0]
    for (c = getFirstTxBox(); c < getNumMailBoxes(); c++) {
    8106:	d1f3      	bne.n	80f0 <FlexCAN::setNumTxBoxes(unsigned char)+0x4c>
}
    8108:	bd30      	pop	{r4, r5, pc}
    810a:	bf00      	nop

0000810c <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>:
    810c:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    8110:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    8114:	b2db      	uxtb	r3, r3
    8116:	429a      	cmp	r2, r3
    8118:	d222      	bcs.n	8160 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x54>
{
    811a:	b510      	push	{r4, lr}
    811c:	468c      	mov	ip, r1
    811e:	4686      	mov	lr, r0
        MBFilters[mbox] = filter;
    8120:	eb00 03c2 	add.w	r3, r0, r2, lsl #3
    8124:	e9d1 0100 	ldrd	r0, r1, [r1]
    8128:	3304      	adds	r3, #4
    812a:	e883 0003 	stmia.w	r3, {r0, r1}
        if (filter.flags.extended) {
    812e:	f89c 3004 	ldrb.w	r3, [ip, #4]
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    8132:	f8de 1000 	ldr.w	r1, [lr]
        if (filter.flags.extended) {
    8136:	07db      	lsls	r3, r3, #31
    8138:	d513      	bpl.n	8162 <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x56>
            FLEXCANb_MBn_ID(flexcanBase, mbox) = (filter.id & FLEXCAN_MB_ID_EXT_MASK);
    813a:	f8dc 0000 	ldr.w	r0, [ip]
    813e:	2310      	movs	r3, #16
    8140:	3184      	adds	r1, #132	; 0x84
    8142:	fb13 1102 	smlabb	r1, r3, r2, r1
    8146:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
    814a:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) |= FLEXCAN_MB_CS_IDE;
    814c:	f8de 1000 	ldr.w	r1, [lr]
    8150:	3180      	adds	r1, #128	; 0x80
    8152:	fb13 1302 	smlabb	r3, r3, r2, r1
    8156:	681a      	ldr	r2, [r3, #0]
    8158:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
    815c:	601a      	str	r2, [r3, #0]
}
    815e:	bd10      	pop	{r4, pc}
    8160:	4770      	bx	lr
            FLEXCANb_MBn_ID(flexcanBase, mbox) = FLEXCAN_MB_ID_IDSTD(filter.id);
    8162:	f8dc 4000 	ldr.w	r4, [ip]
    8166:	4809      	ldr	r0, [pc, #36]	; (818c <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)+0x80>)
    8168:	2310      	movs	r3, #16
    816a:	3184      	adds	r1, #132	; 0x84
    816c:	fb13 1102 	smlabb	r1, r3, r2, r1
    8170:	ea00 4084 	and.w	r0, r0, r4, lsl #18
    8174:	6008      	str	r0, [r1, #0]
            FLEXCANb_MBn_CS(flexcanBase, mbox) &= ~FLEXCAN_MB_CS_IDE;
    8176:	f8de 1000 	ldr.w	r1, [lr]
    817a:	3180      	adds	r1, #128	; 0x80
    817c:	fb13 1302 	smlabb	r3, r3, r2, r1
    8180:	681a      	ldr	r2, [r3, #0]
    8182:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    8186:	601a      	str	r2, [r3, #0]
}
    8188:	bd10      	pop	{r4, pc}
    818a:	bf00      	nop
    818c:	1ffc0000 	.word	0x1ffc0000

00008190 <FlexCAN::setMask(unsigned long, unsigned char)>:
    8190:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    8194:	f1c3 0310 	rsb	r3, r3, #16
    if ( mbox < getNumRxBoxes() ) {
    8198:	b2db      	uxtb	r3, r3
    819a:	429a      	cmp	r2, r3
    819c:	d221      	bcs.n	81e2 <FlexCAN::setMask(unsigned long, unsigned char)+0x52>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    819e:	6803      	ldr	r3, [r0, #0]
{
    81a0:	b410      	push	{r4}
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    81a2:	681c      	ldr	r4, [r3, #0]
      if (!wasFrozen) {
    81a4:	01e4      	lsls	r4, r4, #7
    81a6:	d41d      	bmi.n	81e4 <FlexCAN::setMask(unsigned long, unsigned char)+0x54>
  FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_FRZ;
    81a8:	681c      	ldr	r4, [r3, #0]
    81aa:	f044 4480 	orr.w	r4, r4, #1073741824	; 0x40000000
    81ae:	601c      	str	r4, [r3, #0]
    FLEXCANb_MCR(flexcanBase) |= (FLEXCAN_MCR_HALT);
    81b0:	6804      	ldr	r4, [r0, #0]
    81b2:	6823      	ldr	r3, [r4, #0]
    81b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    81b8:	6023      	str	r3, [r4, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    81ba:	6804      	ldr	r4, [r0, #0]
    81bc:	6823      	ldr	r3, [r4, #0]
  while (!isFrozen());
    81be:	01db      	lsls	r3, r3, #7
    81c0:	d5fc      	bpl.n	81bc <FlexCAN::setMask(unsigned long, unsigned char)+0x2c>
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    81c2:	f504 6408 	add.w	r4, r4, #2176	; 0x880
    81c6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    81ca:	6021      	str	r1, [r4, #0]
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    81cc:	6802      	ldr	r2, [r0, #0]
    81ce:	6813      	ldr	r3, [r2, #0]
    81d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    81d4:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    81d6:	6802      	ldr	r2, [r0, #0]
    81d8:	6813      	ldr	r3, [r2, #0]
  while (isFrozen());
    81da:	01db      	lsls	r3, r3, #7
    81dc:	d4fc      	bmi.n	81d8 <FlexCAN::setMask(unsigned long, unsigned char)+0x48>
}
    81de:	bc10      	pop	{r4}
    81e0:	4770      	bx	lr
    81e2:	4770      	bx	lr
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    81e4:	f503 6308 	add.w	r3, r3, #2176	; 0x880
    81e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
}
    81ec:	bc10      	pop	{r4}
      FLEXCANb_MB_MASK(flexcanBase, mbox) = mask;
    81ee:	6019      	str	r1, [r3, #0]
}
    81f0:	4770      	bx	lr
    81f2:	bf00      	nop

000081f4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)>:
{
    81f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81f8:	4617      	mov	r7, r2
    if ( isInitialized() ) return;
    81fa:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
{
    81fe:	f89d 8018 	ldrb.w	r8, [sp, #24]
    8202:	4606      	mov	r6, r0
    8204:	460d      	mov	r5, r1
    8206:	461c      	mov	r4, r3
    if ( isInitialized() ) return;
    8208:	2a00      	cmp	r2, #0
    820a:	f000 808f 	beq.w	832c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x138>
    if (flexcanBase == FLEXCAN0_BASE) {
    820e:	4a63      	ldr	r2, [pc, #396]	; (839c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a8>)
    8210:	6831      	ldr	r1, [r6, #0]
    8212:	4291      	cmp	r1, r2
    8214:	d07c      	beq.n	8310 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x11c>
    OSC0_CR |= OSC_ERCLKEN;
    8216:	4a62      	ldr	r2, [pc, #392]	; (83a0 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1ac>)
    8218:	7813      	ldrb	r3, [r2, #0]
    821a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    821e:	7013      	strb	r3, [r2, #0]
    if (flexcanBase == FLEXCAN0_BASE) {
    8220:	6833      	ldr	r3, [r6, #0]
    8222:	f5a2 2282 	sub.w	r2, r2, #266240	; 0x41000
    8226:	4293      	cmp	r3, r2
    8228:	d106      	bne.n	8238 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x44>
        SIM_SCGC6 |=  SIM_SCGC6_FLEXCAN0;
    822a:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    822e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    8230:	f043 0310 	orr.w	r3, r3, #16
    8234:	63d3      	str	r3, [r2, #60]	; 0x3c
    FLEXCANb_CTRL1(flexcanBase) &= ~FLEXCAN_CTRL_CLK_SRC;
    8236:	6833      	ldr	r3, [r6, #0]
    8238:	685a      	ldr	r2, [r3, #4]
    823a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
    823e:	605a      	str	r2, [r3, #4]
    FLEXCANb_MCR (flexcanBase) |=  FLEXCAN_MCR_FRZ;
    8240:	6832      	ldr	r2, [r6, #0]
    8242:	6813      	ldr	r3, [r2, #0]
    8244:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    8248:	6013      	str	r3, [r2, #0]
    FLEXCANb_MCR (flexcanBase) &= ~FLEXCAN_MCR_MDIS;
    824a:	6832      	ldr	r2, [r6, #0]
    824c:	6813      	ldr	r3, [r2, #0]
    824e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    8252:	6013      	str	r3, [r2, #0]
    while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_LPM_ACK)
    8254:	6832      	ldr	r2, [r6, #0]
    8256:	6813      	ldr	r3, [r2, #0]
    8258:	02d9      	lsls	r1, r3, #11
    825a:	d4fc      	bmi.n	8256 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x62>
  FLEXCANb_MCR (flexcanBase) ^=  FLEXCAN_MCR_SOFT_RST;
    825c:	6813      	ldr	r3, [r2, #0]
    825e:	f083 7300 	eor.w	r3, r3, #33554432	; 0x2000000
    8262:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR (flexcanBase) & FLEXCAN_MCR_SOFT_RST)
    8264:	6833      	ldr	r3, [r6, #0]
    8266:	681c      	ldr	r4, [r3, #0]
    8268:	f014 7400 	ands.w	r4, r4, #33554432	; 0x2000000
    826c:	d1fb      	bne.n	8266 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x72>
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    826e:	681a      	ldr	r2, [r3, #0]
  while (!isFrozen());
    8270:	01d2      	lsls	r2, r2, #7
    8272:	d5fc      	bpl.n	826e <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x7a>
    FLEXCANb_MCR (flexcanBase) |= FLEXCAN_MCR_SRX_DIS;
    8274:	681a      	ldr	r2, [r3, #0]
    8276:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    827a:	601a      	str	r2, [r3, #0]
    setBaudRate(baud);
    827c:	4629      	mov	r1, r5
    827e:	4630      	mov	r0, r6
    8280:	f7ff feac 	bl	7fdc <FlexCAN::setBaudRate(unsigned long)>
    FLEXCANb_MCR(flexcanBase) |= FLEXCAN_MCR_IRMQ;
    8284:	6832      	ldr	r2, [r6, #0]
    8286:	6813      	ldr	r3, [r2, #0]
    8288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    828c:	6013      	str	r3, [r2, #0]
    828e:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    8292:	2910      	cmp	r1, #16
    8294:	d012      	beq.n	82bc <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xc8>
    8296:	2500      	movs	r5, #0
        setMask (0, c);
    8298:	462a      	mov	r2, r5
    829a:	4630      	mov	r0, r6
    829c:	2100      	movs	r1, #0
    829e:	f7ff ff77 	bl	8190 <FlexCAN::setMask(unsigned long, unsigned char)>
        setFilter (mask, c);
    82a2:	462a      	mov	r2, r5
    82a4:	4639      	mov	r1, r7
    82a6:	f7ff ff31 	bl	810c <FlexCAN::setFilter(CAN_filter_t const&, unsigned char)>
    82aa:	f896 1194 	ldrb.w	r1, [r6, #404]	; 0x194
    for (uint8_t c = 0; c < getNumRxBoxes(); c++) {
    82ae:	3401      	adds	r4, #1
    82b0:	f1c1 0310 	rsb	r3, r1, #16
    82b4:	b2e5      	uxtb	r5, r4
    82b6:	b2db      	uxtb	r3, r3
    82b8:	429d      	cmp	r5, r3
    82ba:	d3ed      	bcc.n	8298 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xa4>
    FLEXCANb_MCR(flexcanBase) &= ~(FLEXCAN_MCR_HALT);
    82bc:	6832      	ldr	r2, [r6, #0]
    82be:	6813      	ldr	r3, [r2, #0]
    82c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    82c4:	6013      	str	r3, [r2, #0]
  return (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_FRZ_ACK);
    82c6:	6833      	ldr	r3, [r6, #0]
    82c8:	681a      	ldr	r2, [r3, #0]
  while (isFrozen());
    82ca:	01d0      	lsls	r0, r2, #7
    82cc:	d4fc      	bmi.n	82c8 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xd4>
  while (FLEXCANb_MCR(flexcanBase) & FLEXCAN_MCR_NOT_RDY);
    82ce:	681a      	ldr	r2, [r3, #0]
    82d0:	0112      	lsls	r2, r2, #4
    82d2:	d4fc      	bmi.n	82ce <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0xda>
    setNumTxBoxes (numTxMailboxes);
    82d4:	4630      	mov	r0, r6
    82d6:	f7ff fee5 	bl	80a4 <FlexCAN::setNumTxBoxes(unsigned char)>
    NVIC_SET_PRIORITY (IrqMessage, IRQ_PRIORITY);
    82da:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
    82de:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    82e2:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
    82e6:	2240      	movs	r2, #64	; 0x40
    82e8:	701a      	strb	r2, [r3, #0]
    NVIC_ENABLE_IRQ (IrqMessage);
    82ea:	f8d6 20f8 	ldr.w	r2, [r6, #248]	; 0xf8
    82ee:	0953      	lsrs	r3, r2, #5
    82f0:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    82f4:	3340      	adds	r3, #64	; 0x40
    82f6:	009b      	lsls	r3, r3, #2
    82f8:	2101      	movs	r1, #1
    82fa:	f002 021f 	and.w	r2, r2, #31
    82fe:	fa01 f202 	lsl.w	r2, r1, r2
    8302:	601a      	str	r2, [r3, #0]
    FLEXCANb_IMASK1 (flexcanBase) = 0xFFFF;
    8304:	6833      	ldr	r3, [r6, #0]
    8306:	f64f 70ff 	movw	r0, #65535	; 0xffff
    830a:	6298      	str	r0, [r3, #40]	; 0x28
}
    830c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (txAlt == 1)
    8310:	2c01      	cmp	r4, #1
    8312:	d02b      	beq.n	836c <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x178>
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    8314:	4b23      	ldr	r3, [pc, #140]	; (83a4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    8316:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    831a:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN3_CONFIG = PORT_PCR_MUX(2);
    831e:	631a      	str	r2, [r3, #48]	; 0x30
        if (rxAlt == 1)
    8320:	d02b      	beq.n	837a <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x186>
            CORE_PIN4_CONFIG = PORT_PCR_MUX(2);
    8322:	4b20      	ldr	r3, [pc, #128]	; (83a4 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b0>)
    8324:	f44f 7200 	mov.w	r2, #512	; 0x200
    8328:	635a      	str	r2, [r3, #52]	; 0x34
    832a:	e774      	b.n	8216 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    832c:	f8b0 0198 	ldrh.w	r0, [r0, #408]	; 0x198
    8330:	0100      	lsls	r0, r0, #4
    8332:	f001 fe2b 	bl	9f8c <operator new[](unsigned int)>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    8336:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
    if (tx_buffer==0) tx_buffer=new CAN_message_t[sizeTxBuffer];
    833a:	f8c6 00a0 	str.w	r0, [r6, #160]	; 0xa0
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    833e:	b30b      	cbz	r3, 8384 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x190>
    ring.buffer = buffer;
    8340:	f8c6 30ac 	str.w	r3, [r6, #172]	; 0xac
    ring.head = 0;
    8344:	2300      	movs	r3, #0
    8346:	f8a6 3094 	strh.w	r3, [r6, #148]	; 0x94
    ring.tail = 0;
    834a:	f8a6 3096 	strh.w	r3, [r6, #150]	; 0x96
    ring.head = 0;
    834e:	f8a6 30a4 	strh.w	r3, [r6, #164]	; 0xa4
    ring.tail = 0;
    8352:	f8a6 30a6 	strh.w	r3, [r6, #166]	; 0xa6
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    8356:	f8b6 3198 	ldrh.w	r3, [r6, #408]	; 0x198
    ring.size = size;
    835a:	f8a6 3098 	strh.w	r3, [r6, #152]	; 0x98
    initRingBuffer (rxRing, rx_buffer, sizeRxBuffer);
    835e:	f8b6 3196 	ldrh.w	r3, [r6, #406]	; 0x196
    ring.buffer = buffer;
    8362:	f8c6 009c 	str.w	r0, [r6, #156]	; 0x9c
    ring.size = size;
    8366:	f8a6 30a8 	strh.w	r3, [r6, #168]	; 0xa8
    ring.tail = 0;
    836a:	e750      	b.n	820e <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1a>
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    836c:	4b0e      	ldr	r3, [pc, #56]	; (83a8 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    836e:	f44f 7200 	mov.w	r2, #512	; 0x200
        if (rxAlt == 1)
    8372:	f1b8 0f01 	cmp.w	r8, #1
            CORE_PIN32_CONFIG = PORT_PCR_MUX(2);
    8376:	649a      	str	r2, [r3, #72]	; 0x48
        if (rxAlt == 1)
    8378:	d1d3      	bne.n	8322 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x12e>
            CORE_PIN25_CONFIG = PORT_PCR_MUX(2);
    837a:	4b0b      	ldr	r3, [pc, #44]	; (83a8 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x1b4>)
    837c:	f44f 7200 	mov.w	r2, #512	; 0x200
    8380:	64da      	str	r2, [r3, #76]	; 0x4c
    8382:	e748      	b.n	8216 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x22>
    if (rx_buffer==0) rx_buffer=new CAN_message_t[sizeRxBuffer];
    8384:	f8b6 0196 	ldrh.w	r0, [r6, #406]	; 0x196
    8388:	0100      	lsls	r0, r0, #4
    838a:	f001 fdff 	bl	9f8c <operator new[](unsigned int)>
    838e:	4603      	mov	r3, r0
    8390:	f8c6 00b0 	str.w	r0, [r6, #176]	; 0xb0
    initRingBuffer (txRing, tx_buffer, sizeTxBuffer);
    8394:	f8d6 00a0 	ldr.w	r0, [r6, #160]	; 0xa0
    8398:	e7d2      	b.n	8340 <FlexCAN::begin(unsigned long, CAN_filter_t const&, unsigned char, unsigned char)+0x14c>
    839a:	bf00      	nop
    839c:	40024000 	.word	0x40024000
    83a0:	40065000 	.word	0x40065000
    83a4:	40049000 	.word	0x40049000
    83a8:	4004a000 	.word	0x4004a000

000083ac <FlexCAN::available()>:
{
    83ac:	b410      	push	{r4}
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    83ae:	f8d0 40f8 	ldr.w	r4, [r0, #248]	; 0xf8
    83b2:	0963      	lsrs	r3, r4, #5
    83b4:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    83b8:	3340      	adds	r3, #64	; 0x40
    83ba:	009b      	lsls	r3, r3, #2
    83bc:	4602      	mov	r2, r0
    83be:	f004 041f 	and.w	r4, r4, #31
    83c2:	6818      	ldr	r0, [r3, #0]
    83c4:	2101      	movs	r1, #1
    83c6:	40a1      	lsls	r1, r4
    83c8:	ea10 0401 	ands.w	r4, r0, r1
    83cc:	bf14      	ite	ne
    83ce:	2001      	movne	r0, #1
    83d0:	2000      	moveq	r0, #0
    83d2:	f882 00f4 	strb.w	r0, [r2, #244]	; 0xf4
    83d6:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
    entries = ring.head - ring.tail;
    83da:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
    83de:	f8b2 30a6 	ldrh.w	r3, [r2, #166]	; 0xa6
    83e2:	b280      	uxth	r0, r0
    83e4:	b29b      	uxth	r3, r3
    if (entries < 0) {
    83e6:	1ac0      	subs	r0, r0, r3
        entries += ring.size;
    83e8:	bf44      	itt	mi
    83ea:	f8b2 30a8 	ldrhmi.w	r3, [r2, #168]	; 0xa8
    83ee:	18c0      	addmi	r0, r0, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    83f0:	b164      	cbz	r4, 840c <FlexCAN::available()+0x60>
    83f2:	f8d2 20f8 	ldr.w	r2, [r2, #248]	; 0xf8
    83f6:	0953      	lsrs	r3, r2, #5
    83f8:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    83fc:	3340      	adds	r3, #64	; 0x40
    83fe:	2101      	movs	r1, #1
    8400:	009b      	lsls	r3, r3, #2
    8402:	f002 021f 	and.w	r2, r2, #31
    8406:	fa01 f202 	lsl.w	r2, r1, r2
    840a:	601a      	str	r2, [r3, #0]
}
    840c:	bc10      	pop	{r4}
    840e:	4770      	bx	lr

00008410 <FlexCAN::read(CAN_message_t&)>:
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    8410:	f8d0 20f8 	ldr.w	r2, [r0, #248]	; 0xf8
{
    8414:	b538      	push	{r3, r4, r5, lr}
    8416:	0953      	lsrs	r3, r2, #5
    8418:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    841c:	3340      	adds	r3, #64	; 0x40
    841e:	009b      	lsls	r3, r3, #2
    8420:	4604      	mov	r4, r0
    8422:	2501      	movs	r5, #1
    8424:	4608      	mov	r0, r1
    8426:	f002 021f 	and.w	r2, r2, #31
    842a:	6819      	ldr	r1, [r3, #0]
    842c:	fa05 f202 	lsl.w	r2, r5, r2
    8430:	4211      	tst	r1, r2
    8432:	bf14      	ite	ne
    8434:	4629      	movne	r1, r5
    8436:	2100      	moveq	r1, #0
    8438:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
    843c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    8440:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    8444:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8448:	b292      	uxth	r2, r2
    844a:	b29b      	uxth	r3, r3
    844c:	429a      	cmp	r2, r3
    844e:	d028      	beq.n	84a2 <FlexCAN::read(CAN_message_t&)+0x92>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    8450:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8454:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    8458:	b29b      	uxth	r3, r3
    845a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    845e:	2210      	movs	r2, #16
    8460:	f001 fc44 	bl	9cec <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    8464:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    8468:	f8b4 20a8 	ldrh.w	r2, [r4, #168]	; 0xa8
    846c:	b29b      	uxth	r3, r3
    846e:	442b      	add	r3, r5
    8470:	fbb3 f1f2 	udiv	r1, r3, r2
    8474:	fb02 3311 	mls	r3, r2, r1, r3
    8478:	b29b      	uxth	r3, r3
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    847a:	f894 10f4 	ldrb.w	r1, [r4, #244]	; 0xf4
    847e:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
        result=1;
    8482:	4628      	mov	r0, r5
    8484:	b161      	cbz	r1, 84a0 <FlexCAN::read(CAN_message_t&)+0x90>
    8486:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    848a:	0953      	lsrs	r3, r2, #5
    848c:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8490:	3340      	adds	r3, #64	; 0x40
    8492:	2101      	movs	r1, #1
    8494:	009b      	lsls	r3, r3, #2
    8496:	f002 021f 	and.w	r2, r2, #31
    849a:	fa01 f202 	lsl.w	r2, r1, r2
    849e:	601a      	str	r2, [r3, #0]
}
    84a0:	bd38      	pop	{r3, r4, r5, pc}
    int result=0;
    84a2:	2000      	movs	r0, #0
    84a4:	e7ee      	b.n	8484 <FlexCAN::read(CAN_message_t&)+0x74>
    84a6:	bf00      	nop

000084a8 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>:
{
    84a8:	b530      	push	{r4, r5, lr}
    if (msg.flags.extended) {
    84aa:	798b      	ldrb	r3, [r1, #6]
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    84ac:	6804      	ldr	r4, [r0, #0]
    84ae:	f04f 0e10 	mov.w	lr, #16
    84b2:	f104 0c84 	add.w	ip, r4, #132	; 0x84
    if (msg.flags.extended) {
    84b6:	07dc      	lsls	r4, r3, #31
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    84b8:	fb1e cc02 	smlabb	ip, lr, r2, ip
    if (msg.flags.extended) {
    84bc:	d525      	bpl.n	850a <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0x62>
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    84be:	680c      	ldr	r4, [r1, #0]
    84c0:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    84c4:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    84c8:	6804      	ldr	r4, [r0, #0]
    84ca:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    84ce:	688c      	ldr	r4, [r1, #8]
    84d0:	fb1e cc02 	smlabb	ip, lr, r2, ip
    84d4:	ba24      	rev	r4, r4
    84d6:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    84da:	6804      	ldr	r4, [r0, #0]
    84dc:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    84e0:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = (msg.id & FLEXCAN_MB_ID_EXT_MASK);
    84e4:	fb12 fe0e 	smulbb	lr, r2, lr
    84e8:	68ca      	ldr	r2, [r1, #12]
    84ea:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    84ec:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    84f0:	079a      	lsls	r2, r3, #30
    84f2:	d53c      	bpl.n	856e <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xc6>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    84f4:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    84f6:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    84f8:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    84fa:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    84fc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
                                                   FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_RTR;
    8500:	f043 6347 	orr.w	r3, r3, #208666624	; 0xc700000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8504:	f842 300e 	str.w	r3, [r2, lr]
}
    8508:	bd30      	pop	{r4, r5, pc}
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    850a:	680d      	ldr	r5, [r1, #0]
    850c:	4c1d      	ldr	r4, [pc, #116]	; (8584 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xdc>)
    850e:	ea04 4485 	and.w	r4, r4, r5, lsl #18
    8512:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD0(flexcanBase, buffer) = (msg.buf[0]<<24)|(msg.buf[1]<<16)|(msg.buf[2]<<8)|msg.buf[3];
    8516:	6804      	ldr	r4, [r0, #0]
    8518:	f104 0c88 	add.w	ip, r4, #136	; 0x88
    851c:	688c      	ldr	r4, [r1, #8]
    851e:	fb1e cc02 	smlabb	ip, lr, r2, ip
    8522:	ba24      	rev	r4, r4
    8524:	f8cc 4000 	str.w	r4, [ip]
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    8528:	6804      	ldr	r4, [r0, #0]
    852a:	f104 0c8c 	add.w	ip, r4, #140	; 0x8c
    852e:	fb1e cc02 	smlabb	ip, lr, r2, ip
        FLEXCANb_MBn_ID(flexcanBase, buffer) = FLEXCAN_MB_ID_IDSTD(msg.id);
    8532:	fb12 fe0e 	smulbb	lr, r2, lr
    8536:	68ca      	ldr	r2, [r1, #12]
        if (msg.flags.remote) {
    8538:	079b      	lsls	r3, r3, #30
    853a:	ba12      	rev	r2, r2
    FLEXCANb_MBn_WORD1(flexcanBase, buffer) = (msg.buf[4]<<24)|(msg.buf[5]<<16)|(msg.buf[6]<<8)|msg.buf[7];
    853c:	f8cc 2000 	str.w	r2, [ip]
        if (msg.flags.remote) {
    8540:	d50a      	bpl.n	8558 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)+0xb0>
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    8542:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8544:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    8546:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8548:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_RTR;
    854a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    854e:	f043 6341 	orr.w	r3, r3, #202375168	; 0xc100000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8552:	f842 300e 	str.w	r3, [r2, lr]
}
    8556:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    8558:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    855a:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    855c:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    855e:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len);
    8560:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8564:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
    8568:	f842 300e 	str.w	r3, [r2, lr]
}
    856c:	bd30      	pop	{r4, r5, pc}
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    856e:	79cb      	ldrb	r3, [r1, #7]
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8570:	6802      	ldr	r2, [r0, #0]
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8572:	041b      	lsls	r3, r3, #16
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    8574:	3280      	adds	r2, #128	; 0x80
                                                   FLEXCAN_MB_CS_LENGTH(msg.len) | FLEXCAN_MB_CS_SRR |
    8576:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    857a:	f043 6346 	orr.w	r3, r3, #207618048	; 0xc600000
            FLEXCANb_MBn_CS(flexcanBase, buffer) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE) |
    857e:	f842 300e 	str.w	r3, [r2, lr]
}
    8582:	bd30      	pop	{r4, r5, pc}
    8584:	1ffc0000 	.word	0x1ffc0000

00008588 <FlexCAN::write(CAN_message_t const&)>:
{
    8588:	b570      	push	{r4, r5, r6, lr}
    858a:	4604      	mov	r4, r0
    void irqLock() { IrqEnabled=NVIC_IS_ENABLED(IrqMessage); NVIC_DISABLE_IRQ(IrqMessage); }
    858c:	f8d0 00f8 	ldr.w	r0, [r0, #248]	; 0xf8
    8590:	0943      	lsrs	r3, r0, #5
    8592:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    8596:	3340      	adds	r3, #64	; 0x40
    8598:	009b      	lsls	r3, r3, #2
    859a:	f000 001f 	and.w	r0, r0, #31
    859e:	681d      	ldr	r5, [r3, #0]
    85a0:	2201      	movs	r2, #1
    85a2:	4082      	lsls	r2, r0
    85a4:	4215      	tst	r5, r2
    85a6:	bf14      	ite	ne
    85a8:	2501      	movne	r5, #1
    85aa:	2500      	moveq	r5, #0
    85ac:	f884 50f4 	strb.w	r5, [r4, #244]	; 0xf4
    85b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    if (ring.head == ring.tail) {
    85b4:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    85b8:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    85bc:	b29b      	uxth	r3, r3
    85be:	b292      	uxth	r2, r2
    85c0:	429a      	cmp	r2, r3
    85c2:	d02d      	beq.n	8620 <FlexCAN::write(CAN_message_t const&)+0x98>
    nextEntry = (ring.head + 1) % ring.size;
    85c4:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    85c8:	f8b4 0098 	ldrh.w	r0, [r4, #152]	; 0x98
    if (nextEntry == ring.tail) {
    85cc:	f8b4 2096 	ldrh.w	r2, [r4, #150]	; 0x96
    nextEntry = (ring.head + 1) % ring.size;
    85d0:	b29b      	uxth	r3, r3
    85d2:	3301      	adds	r3, #1
    85d4:	fbb3 f6f0 	udiv	r6, r3, r0
    85d8:	fb00 3316 	mls	r3, r0, r6, r3
    if (nextEntry == ring.tail) {
    85dc:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    85de:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    85e0:	4296      	cmp	r6, r2
    85e2:	d042      	beq.n	866a <FlexCAN::write(CAN_message_t const&)+0xe2>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    85e4:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    85e8:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    85ec:	b29b      	uxth	r3, r3
    85ee:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    85f2:	2210      	movs	r2, #16
    85f4:	f001 fb7a 	bl	9cec <memcpy>
    void irqRelease() { if (IrqEnabled) NVIC_ENABLE_IRQ(IrqMessage); }
    85f8:	f894 50f4 	ldrb.w	r5, [r4, #244]	; 0xf4
    ring.head = nextEntry;
    85fc:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
            result=1;
    8600:	2001      	movs	r0, #1
    8602:	b165      	cbz	r5, 861e <FlexCAN::write(CAN_message_t const&)+0x96>
    8604:	f8d4 20f8 	ldr.w	r2, [r4, #248]	; 0xf8
    8608:	0953      	lsrs	r3, r2, #5
    860a:	f103 2338 	add.w	r3, r3, #939538432	; 0x38003800
    860e:	3340      	adds	r3, #64	; 0x40
    8610:	2101      	movs	r1, #1
    8612:	009b      	lsls	r3, r3, #2
    8614:	f002 021f 	and.w	r2, r2, #31
    8618:	fa01 f202 	lsl.w	r2, r1, r2
    861c:	601a      	str	r2, [r3, #0]
}
    861e:	bd70      	pop	{r4, r5, r6, pc}
    inline uint8_t getFirstTxBox() { return getNumMailBoxes()-numTxMailboxes; }
    8620:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    8624:	f1c2 0210 	rsb	r2, r2, #16
      for (index = getFirstTxBox(); index < getNumMailBoxes(); index++) {
    8628:	b2d2      	uxtb	r2, r2
    862a:	2a0f      	cmp	r2, #15
    862c:	d8ca      	bhi.n	85c4 <FlexCAN::write(CAN_message_t const&)+0x3c>
    862e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    8632:	332c      	adds	r3, #44	; 0x2c
    8634:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    8638:	f104 0cf0 	add.w	ip, r4, #240	; 0xf0
    863c:	e003      	b.n	8646 <FlexCAN::write(CAN_message_t const&)+0xbe>
    863e:	4563      	cmp	r3, ip
    8640:	f102 0201 	add.w	r2, r2, #1
    8644:	d0be      	beq.n	85c4 <FlexCAN::write(CAN_message_t const&)+0x3c>
    bool usesGlobalTxRing(uint8_t mbox) { return (mbox<getNumMailBoxes()?txRings[mbox]==0:true); }
    8646:	f853 0f04 	ldr.w	r0, [r3, #4]!
    864a:	2800      	cmp	r0, #0
    864c:	d1f7      	bne.n	863e <FlexCAN::write(CAN_message_t const&)+0xb6>
          if ( usesGlobalTxRing(index) && FLEXCAN_get_code(FLEXCANb_MBn_CS(flexcanBase, index)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    864e:	6826      	ldr	r6, [r4, #0]
    8650:	0110      	lsls	r0, r2, #4
    8652:	3680      	adds	r6, #128	; 0x80
    8654:	5830      	ldr	r0, [r6, r0]
    8656:	f3c0 6003 	ubfx	r0, r0, #24, #4
    865a:	2808      	cmp	r0, #8
    865c:	d1ef      	bne.n	863e <FlexCAN::write(CAN_message_t const&)+0xb6>
        writeTxRegisters (msg, index);
    865e:	4620      	mov	r0, r4
    8660:	b2d2      	uxtb	r2, r2
    8662:	f7ff ff21 	bl	84a8 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
        result=1;
    8666:	2001      	movs	r0, #1
    8668:	e7cb      	b.n	8602 <FlexCAN::write(CAN_message_t const&)+0x7a>
    int result=0;
    866a:	2000      	movs	r0, #0
    866c:	e7c9      	b.n	8602 <FlexCAN::write(CAN_message_t const&)+0x7a>
    866e:	bf00      	nop

00008670 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>:
{
    8670:	460b      	mov	r3, r1
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    8672:	6801      	ldr	r1, [r0, #0]
    8674:	f04f 0c10 	mov.w	ip, #16
    8678:	3180      	adds	r1, #128	; 0x80
    867a:	fb1c 1102 	smlabb	r1, ip, r2, r1
{
    867e:	b570      	push	{r4, r5, r6, lr}
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    8680:	6809      	ldr	r1, [r1, #0]
    msg.timestamp = FLEXCAN_get_timestamp (mb_CS);
    8682:	8099      	strh	r1, [r3, #4]
    msg.len = FLEXCAN_get_length (mb_CS);
    8684:	f3c1 4603 	ubfx	r6, r1, #16, #4
    8688:	71de      	strb	r6, [r3, #7]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    868a:	6804      	ldr	r4, [r0, #0]
    868c:	3484      	adds	r4, #132	; 0x84
    uint32_t mb_CS = FLEXCANb_MBn_CS(flexcanBase, buffer);
    868e:	fb12 fe0c 	smulbb	lr, r2, ip
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    8692:	fb1c 4c02 	smlabb	ip, ip, r2, r4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    8696:	f3c1 5500 	ubfx	r5, r1, #20, #1
    869a:	f3c1 5240 	ubfx	r2, r1, #21, #1
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    869e:	f8dc 4000 	ldr.w	r4, [ip]
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    86a2:	ea42 0245 	orr.w	r2, r2, r5, lsl #1
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    86a6:	f3c1 6c03 	ubfx	ip, r1, #24, #4
    msg.flags.extended = (mb_CS & FLEXCAN_MB_CS_IDE) ? 1:0;
    86aa:	719a      	strb	r2, [r3, #6]
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    86ac:	f1ac 0c06 	sub.w	ip, ip, #6
    if (!msg.flags.extended) {
    86b0:	b2d2      	uxtb	r2, r2
    86b2:	07d2      	lsls	r2, r2, #31
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    86b4:	fabc fc8c 	clz	ip, ip
    86b8:	799a      	ldrb	r2, [r3, #6]
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    86ba:	f024 4460 	bic.w	r4, r4, #3758096384	; 0xe0000000
    if (FLEXCAN_get_code (mb_CS) == FLEXCAN_MB_CODE_RX_OVERRUN) {
    86be:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
    msg.id  = (FLEXCANb_MBn_ID(flexcanBase, buffer) & FLEXCAN_MB_ID_EXT_MASK);
    86c2:	601c      	str	r4, [r3, #0]
    86c4:	f36c 0282 	bfi	r2, ip, #2, #1
        msg.id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    86c8:	bf5c      	itt	pl
    86ca:	0ca4      	lsrpl	r4, r4, #18
    86cc:	601c      	strpl	r4, [r3, #0]
    86ce:	719a      	strb	r2, [r3, #6]
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    86d0:	6802      	ldr	r2, [r0, #0]
    86d2:	3288      	adds	r2, #136	; 0x88
    if (msg.len > 4) {
    86d4:	2e04      	cmp	r6, #4
    uint32_t dataIn = FLEXCANb_MBn_WORD0(flexcanBase, buffer);
    86d6:	f852 200e 	ldr.w	r2, [r2, lr]
    msg.buf[0] = dataIn;
    86da:	ba12      	rev	r2, r2
    msg.len = FLEXCAN_get_length (mb_CS);
    86dc:	f3c1 4507 	ubfx	r5, r1, #16, #8
    msg.buf[0] = dataIn;
    86e0:	609a      	str	r2, [r3, #8]
    if (msg.len > 4) {
    86e2:	d905      	bls.n	86f0 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x80>
        dataIn = FLEXCANb_MBn_WORD1(flexcanBase, buffer);
    86e4:	6802      	ldr	r2, [r0, #0]
    86e6:	328c      	adds	r2, #140	; 0x8c
    86e8:	f852 200e 	ldr.w	r2, [r2, lr]
        msg.buf[4] = dataIn;
    86ec:	ba12      	rev	r2, r2
    86ee:	60da      	str	r2, [r3, #12]
    for (uint32_t loop=msg.len; loop < 8; loop++ ) {
    86f0:	f015 0108 	ands.w	r1, r5, #8
    86f4:	d108      	bne.n	8708 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)+0x98>
        msg.buf[loop] = 0;
    86f6:	f106 0008 	add.w	r0, r6, #8
    86fa:	f1c6 0208 	rsb	r2, r6, #8
    86fe:	4418      	add	r0, r3
}
    8700:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        msg.buf[loop] = 0;
    8704:	f005 bcba 	b.w	e07c <memset>
}
    8708:	bd70      	pop	{r4, r5, r6, pc}
    870a:	bf00      	nop

0000870c <FlexCAN::message_isr()>:
{
    870c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    8710:	4683      	mov	fp, r0
{
    8712:	b089      	sub	sp, #36	; 0x24
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    8714:	f85b 2bb4 	ldr.w	r2, [fp], #180
    8718:	f8d2 9030 	ldr.w	r9, [r2, #48]	; 0x30
    871c:	f8cd 900c 	str.w	r9, [sp, #12]
{
    8720:	4605      	mov	r5, r0
    uint32_t status = FLEXCANb_IFLAG1(flexcanBase);
    8722:	4682      	mov	sl, r0
    for (i = 0; i < getNumMailBoxes(); i++) {
    8724:	2400      	movs	r4, #0
    8726:	e008      	b.n	873a <FlexCAN::message_isr()+0x2e>
        switch (code) {
    8728:	2b02      	cmp	r3, #2
    872a:	d04c      	beq.n	87c6 <FlexCAN::message_isr()+0xba>
    for (i = 0; i < getNumMailBoxes(); i++) {
    872c:	3401      	adds	r4, #1
    872e:	2c10      	cmp	r4, #16
    8730:	f10a 0a08 	add.w	sl, sl, #8
    8734:	f10b 0b04 	add.w	fp, fp, #4
    8738:	d040      	beq.n	87bc <FlexCAN::message_isr()+0xb0>
        if ((status & (1UL << i)) == 0) {
    873a:	fa29 f304 	lsr.w	r3, r9, r4
    873e:	07d9      	lsls	r1, r3, #31
    8740:	d5f4      	bpl.n	872c <FlexCAN::message_isr()+0x20>
        uint32_t code = FLEXCAN_get_code (FLEXCANb_MBn_CS(flexcanBase, i));
    8742:	0127      	lsls	r7, r4, #4
    8744:	f102 0380 	add.w	r3, r2, #128	; 0x80
    8748:	59db      	ldr	r3, [r3, r7]
    874a:	f3c3 6303 	ubfx	r3, r3, #24, #4
        switch (code) {
    874e:	2b06      	cmp	r3, #6
    8750:	d039      	beq.n	87c6 <FlexCAN::message_isr()+0xba>
    8752:	2b08      	cmp	r3, #8
    8754:	d1e8      	bne.n	8728 <FlexCAN::message_isr()+0x1c>
    8756:	f8db 6000 	ldr.w	r6, [fp]
    875a:	2e00      	cmp	r6, #0
    875c:	f000 80b9 	beq.w	88d2 <FlexCAN::message_isr()+0x1c6>
    if (ring.head == ring.tail) {
    8760:	8831      	ldrh	r1, [r6, #0]
    8762:	8873      	ldrh	r3, [r6, #2]
    8764:	b289      	uxth	r1, r1
    8766:	b29b      	uxth	r3, r3
    8768:	4299      	cmp	r1, r3
    876a:	f000 80be 	beq.w	88ea <FlexCAN::message_isr()+0x1de>
    876e:	8831      	ldrh	r1, [r6, #0]
    8770:	8873      	ldrh	r3, [r6, #2]
    8772:	b289      	uxth	r1, r1
    8774:	b29b      	uxth	r3, r3
    8776:	4299      	cmp	r1, r3
    8778:	d0d8      	beq.n	872c <FlexCAN::message_isr()+0x20>
    memcpy ((void *)&msg, (void *)&ring.buffer[ring.tail], sizeof (CAN_message_t));
    877a:	8873      	ldrh	r3, [r6, #2]
    877c:	68b1      	ldr	r1, [r6, #8]
    877e:	b29b      	uxth	r3, r3
    8780:	2210      	movs	r2, #16
    8782:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    8786:	eb0d 0002 	add.w	r0, sp, r2
    878a:	f001 faaf 	bl	9cec <memcpy>
    ring.tail = (ring.tail + 1) % ring.size;
    878e:	8873      	ldrh	r3, [r6, #2]
    8790:	88b2      	ldrh	r2, [r6, #4]
    8792:	b29b      	uxth	r3, r3
    8794:	3301      	adds	r3, #1
    8796:	fbb3 f1f2 	udiv	r1, r3, r2
    879a:	fb02 3311 	mls	r3, r2, r1, r3
    879e:	b29b      	uxth	r3, r3
                    writeTxRegisters (msg, i);
    87a0:	b2e2      	uxtb	r2, r4
    ring.tail = (ring.tail + 1) % ring.size;
    87a2:	8073      	strh	r3, [r6, #2]
                    writeTxRegisters (msg, i);
    87a4:	a904      	add	r1, sp, #16
    87a6:	4628      	mov	r0, r5
    for (i = 0; i < getNumMailBoxes(); i++) {
    87a8:	3401      	adds	r4, #1
                    writeTxRegisters (msg, i);
    87aa:	f7ff fe7d 	bl	84a8 <FlexCAN::writeTxRegisters(CAN_message_t const&, unsigned char)>
    for (i = 0; i < getNumMailBoxes(); i++) {
    87ae:	2c10      	cmp	r4, #16
    FLEXCANb_IFLAG1(flexcanBase) = status;
    87b0:	682a      	ldr	r2, [r5, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    87b2:	f10a 0a08 	add.w	sl, sl, #8
    87b6:	f10b 0b04 	add.w	fp, fp, #4
    87ba:	d1be      	bne.n	873a <FlexCAN::message_isr()+0x2e>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    87bc:	9b03      	ldr	r3, [sp, #12]
    87be:	6313      	str	r3, [r2, #48]	; 0x30
}
    87c0:	b009      	add	sp, #36	; 0x24
    87c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            readRxRegisters (msg, i);
    87c6:	b2e2      	uxtb	r2, r4
    87c8:	a904      	add	r1, sp, #16
    87ca:	4628      	mov	r0, r5
    87cc:	f7ff ff50 	bl	8670 <FlexCAN::readRxRegisters(CAN_message_t&, unsigned char)>
            if (stats.enabled == true) {
    87d0:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    87d4:	b16b      	cbz	r3, 87f2 <FlexCAN::message_isr()+0xe6>
                stats.mb[i].refCount++;
    87d6:	f8da 3114 	ldr.w	r3, [sl, #276]	; 0x114
    87da:	3301      	adds	r3, #1
    87dc:	f8ca 3114 	str.w	r3, [sl, #276]	; 0x114
                if (msg.flags.overrun) {
    87e0:	f89d 3016 	ldrb.w	r3, [sp, #22]
    87e4:	075b      	lsls	r3, r3, #29
    87e6:	d504      	bpl.n	87f2 <FlexCAN::message_isr()+0xe6>
                    stats.mb[i].overrunCount++;
    87e8:	f8da 3118 	ldr.w	r3, [sl, #280]	; 0x118
    87ec:	3301      	adds	r3, #1
    87ee:	f8ca 3118 	str.w	r3, [sl, #280]	; 0x118
    87f2:	2301      	movs	r3, #1
    87f4:	40a3      	lsls	r3, r4
    87f6:	9300      	str	r3, [sp, #0]
    for (i = 0; i < getNumMailBoxes(); i++) {
    87f8:	2300      	movs	r3, #0
    87fa:	f105 0680 	add.w	r6, r5, #128	; 0x80
    87fe:	f105 0890 	add.w	r8, r5, #144	; 0x90
    8802:	9301      	str	r3, [sp, #4]
    8804:	f8cd b008 	str.w	fp, [sp, #8]
                thisListener = listener[listenerPos];
    8808:	f856 0f04 	ldr.w	r0, [r6, #4]!
                if (thisListener != NULL) {
    880c:	b148      	cbz	r0, 8822 <FlexCAN::message_isr()+0x116>
                    if (thisListener->callbacksActive & (1UL << i)) {
    880e:	6842      	ldr	r2, [r0, #4]
    8810:	9b00      	ldr	r3, [sp, #0]
    8812:	4013      	ands	r3, r2
    8814:	d033      	beq.n	887e <FlexCAN::message_isr()+0x172>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    8816:	6803      	ldr	r3, [r0, #0]
    8818:	f8d3 b000 	ldr.w	fp, [r3]
    881c:	4b45      	ldr	r3, [pc, #276]	; (8934 <FlexCAN::message_isr()+0x228>)
    881e:	459b      	cmp	fp, r3
    8820:	d15a      	bne.n	88d8 <FlexCAN::message_isr()+0x1cc>
            for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    8822:	45b0      	cmp	r8, r6
    8824:	d1f0      	bne.n	8808 <FlexCAN::message_isr()+0xfc>
            if (handledFrame == false) {
    8826:	9b01      	ldr	r3, [sp, #4]
    8828:	f8dd b008 	ldr.w	fp, [sp, #8]
    882c:	b393      	cbz	r3, 8894 <FlexCAN::message_isr()+0x188>
            if (stats.enabled == true) {
    882e:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    8832:	b183      	cbz	r3, 8856 <FlexCAN::message_isr()+0x14a>
    entries = ring.head - ring.tail;
    8834:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    8838:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    883c:	b29b      	uxth	r3, r3
    883e:	b292      	uxth	r2, r2
    if (entries < 0) {
    8840:	1a9b      	subs	r3, r3, r2
        entries += ring.size;
    8842:	bf44      	itt	mi
    8844:	f8b5 20a8 	ldrhmi.w	r2, [r5, #168]	; 0xa8
    8848:	189b      	addmi	r3, r3, r2
                if (stats.ringRxHighWater < rxEntries) {
    884a:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
    884e:	429a      	cmp	r2, r3
                    stats.ringRxHighWater = rxEntries;
    8850:	bf38      	it	cc
    8852:	f8c5 3104 	strcc.w	r3, [r5, #260]	; 0x104
            if (MBFilters[i].flags.extended) {
    8856:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    885a:	f8da 2004 	ldr.w	r2, [sl, #4]
            if (MBFilters[i].flags.extended) {
    885e:	7a1b      	ldrb	r3, [r3, #8]
    8860:	f013 0f01 	tst.w	r3, #1
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    8864:	682b      	ldr	r3, [r5, #0]
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    8866:	bf08      	it	eq
    8868:	4933      	ldreq	r1, [pc, #204]	; (8938 <FlexCAN::message_isr()+0x22c>)
                FLEXCANb_MBn_ID(flexcanBase, i) = (MBFilters[i].id & FLEXCAN_MB_ID_EXT_MASK);
    886a:	f103 0384 	add.w	r3, r3, #132	; 0x84
    886e:	bf14      	ite	ne
    8870:	f022 4260 	bicne.w	r2, r2, #3758096384	; 0xe0000000
                FLEXCANb_MBn_ID(flexcanBase, i) = FLEXCAN_MB_ID_IDSTD(MBFilters[i].id);
    8874:	ea01 4282 	andeq.w	r2, r1, r2, lsl #18
    8878:	51da      	str	r2, [r3, r7]
    FLEXCANb_IFLAG1(flexcanBase) = status;
    887a:	682a      	ldr	r2, [r5, #0]
    887c:	e756      	b.n	872c <FlexCAN::message_isr()+0x20>
                    } else if (thisListener->callbacksActive & (1UL << 31)) {
    887e:	2a00      	cmp	r2, #0
    8880:	dacf      	bge.n	8822 <FlexCAN::message_isr()+0x116>
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    8882:	6802      	ldr	r2, [r0, #0]
    8884:	f8d2 b000 	ldr.w	fp, [r2]
    8888:	4a2a      	ldr	r2, [pc, #168]	; (8934 <FlexCAN::message_isr()+0x228>)
    888a:	4593      	cmp	fp, r2
    888c:	d0c9      	beq.n	8822 <FlexCAN::message_isr()+0x116>
    888e:	f04f 32ff 	mov.w	r2, #4294967295
    8892:	e023      	b.n	88dc <FlexCAN::message_isr()+0x1d0>
    nextEntry = (ring.head + 1) % ring.size;
    8894:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    8898:	f8b5 10a8 	ldrh.w	r1, [r5, #168]	; 0xa8
    if (nextEntry == ring.tail) {
    889c:	f8b5 20a6 	ldrh.w	r2, [r5, #166]	; 0xa6
    nextEntry = (ring.head + 1) % ring.size;
    88a0:	b29b      	uxth	r3, r3
    88a2:	3301      	adds	r3, #1
    88a4:	fbb3 f0f1 	udiv	r0, r3, r1
    88a8:	fb01 3310 	mls	r3, r1, r0, r3
    if (nextEntry == ring.tail) {
    88ac:	b292      	uxth	r2, r2
    nextEntry = (ring.head + 1) % ring.size;
    88ae:	b29e      	uxth	r6, r3
    if (nextEntry == ring.tail) {
    88b0:	4296      	cmp	r6, r2
    88b2:	d031      	beq.n	8918 <FlexCAN::message_isr()+0x20c>
    memcpy ((void *)&ring.buffer[ring.head], (void *)&msg, sizeof (CAN_message_t));
    88b4:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
    88b8:	f8d5 00ac 	ldr.w	r0, [r5, #172]	; 0xac
    88bc:	b29b      	uxth	r3, r3
    88be:	2210      	movs	r2, #16
    88c0:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    88c4:	eb0d 0102 	add.w	r1, sp, r2
    88c8:	f001 fa10 	bl	9cec <memcpy>
    ring.head = nextEntry;
    88cc:	f8a5 60a4 	strh.w	r6, [r5, #164]	; 0xa4
    return (true);
    88d0:	e7ad      	b.n	882e <FlexCAN::message_isr()+0x122>
            pRing=( usesGlobalTxRing(i) ? &txRing : txRings[i] );
    88d2:	f105 0694 	add.w	r6, r5, #148	; 0x94
    88d6:	e743      	b.n	8760 <FlexCAN::message_isr()+0x54>
                        handledFrame |= thisListener->frameHandler (msg, i, controller);
    88d8:	2300      	movs	r3, #0
    88da:	4622      	mov	r2, r4
                        handledFrame |= thisListener->frameHandler (msg, -1, controller);
    88dc:	a904      	add	r1, sp, #16
    88de:	47d8      	blx	fp
    88e0:	9b01      	ldr	r3, [sp, #4]
    88e2:	4318      	orrs	r0, r3
    88e4:	b2c3      	uxtb	r3, r0
    88e6:	9301      	str	r3, [sp, #4]
    88e8:	e79b      	b.n	8822 <FlexCAN::message_isr()+0x116>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    88ea:	2701      	movs	r7, #1
    88ec:	40a7      	lsls	r7, r4
    88ee:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
    88f2:	f105 0680 	add.w	r6, r5, #128	; 0x80
    88f6:	f105 0890 	add.w	r8, r5, #144	; 0x90
                    thisListener = listener[listenerPos];
    88fa:	f856 0f04 	ldr.w	r0, [r6, #4]!
                    if (thisListener != NULL) {
    88fe:	b138      	cbz	r0, 8910 <FlexCAN::message_isr()+0x204>
                        if (thisListener->callbacksActive & (1UL << i | 1UL << 31)) {
    8900:	6843      	ldr	r3, [r0, #4]
    8902:	421f      	tst	r7, r3
    8904:	d004      	beq.n	8910 <FlexCAN::message_isr()+0x204>
                            thisListener->txHandler (i, controller);
    8906:	6803      	ldr	r3, [r0, #0]
    8908:	4a0c      	ldr	r2, [pc, #48]	; (893c <FlexCAN::message_isr()+0x230>)
    890a:	685b      	ldr	r3, [r3, #4]
    890c:	4293      	cmp	r3, r2
    890e:	d10d      	bne.n	892c <FlexCAN::message_isr()+0x220>
                for (uint32_t listenerPos = 0; listenerPos < SIZE_LISTENERS; listenerPos++) {
    8910:	45b0      	cmp	r8, r6
    8912:	d1f2      	bne.n	88fa <FlexCAN::message_isr()+0x1ee>
    FLEXCANb_IFLAG1(flexcanBase) = status;
    8914:	682a      	ldr	r2, [r5, #0]
    8916:	e709      	b.n	872c <FlexCAN::message_isr()+0x20>
                    if (stats.enabled == true) {
    8918:	f895 30fc 	ldrb.w	r3, [r5, #252]	; 0xfc
    891c:	2b00      	cmp	r3, #0
    891e:	d09a      	beq.n	8856 <FlexCAN::message_isr()+0x14a>
                        stats.ringRxFramesLost++;
    8920:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    8924:	3301      	adds	r3, #1
    8926:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            if (stats.enabled == true) {
    892a:	e783      	b.n	8834 <FlexCAN::message_isr()+0x128>
                            thisListener->txHandler (i, controller);
    892c:	2200      	movs	r2, #0
    892e:	4621      	mov	r1, r4
    8930:	4798      	blx	r3
    8932:	e7ed      	b.n	8910 <FlexCAN::message_isr()+0x204>
    8934:	00007f5d 	.word	0x00007f5d
    8938:	1ffc0000 	.word	0x1ffc0000
    893c:	00007f61 	.word	0x00007f61

00008940 <can0_message_isr>:
    Can0.message_isr ();
    8940:	4801      	ldr	r0, [pc, #4]	; (8948 <can0_message_isr+0x8>)
    8942:	f7ff bee3 	b.w	870c <FlexCAN::message_isr()>
    8946:	bf00      	nop
    8948:	1fffd1cc 	.word	0x1fffd1cc

0000894c <can0_bus_off_isr>:
}
    894c:	4770      	bx	lr
    894e:	bf00      	nop

00008950 <can0_error_isr>:
    uint32_t status = FLEXCANb_ESR1 (flexcanBase);
    8950:	4b01      	ldr	r3, [pc, #4]	; (8958 <can0_error_isr+0x8>)
    8952:	681b      	ldr	r3, [r3, #0]
    8954:	6a1b      	ldr	r3, [r3, #32]
}
    8956:	4770      	bx	lr
    8958:	1fffd1cc 	.word	0x1fffd1cc

0000895c <can0_tx_warn_isr>:
    895c:	4770      	bx	lr
    895e:	bf00      	nop

00008960 <can0_rx_warn_isr>:
    8960:	4770      	bx	lr
    8962:	bf00      	nop

00008964 <can0_wakeup_isr>:
    8964:	4770      	bx	lr
    8966:	bf00      	nop

00008968 <_GLOBAL__sub_I_Can0>:
FlexCAN Can0 (0);
    8968:	4801      	ldr	r0, [pc, #4]	; (8970 <_GLOBAL__sub_I_Can0+0x8>)
    896a:	2100      	movs	r1, #0
    896c:	f7ff bafa 	b.w	7f64 <FlexCAN::FlexCAN(unsigned char)>
    8970:	1fffd1cc 	.word	0x1fffd1cc

00008974 <ADC::ADC()>:
    0, 0, 0, 0, 0, 0                                    //22-27
};
#endif

// Constructor
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    8974:	b530      	push	{r4, r5, lr}
    8976:	b083      	sub	sp, #12
#if ADC_DIFF_PAIRS > 0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    8978:	490f      	ldr	r1, [pc, #60]	; (89b8 <ADC::ADC()+0x44>)
    897a:	9100      	str	r1, [sp, #0]
ADC::ADC() : // awkward initialization  so there are no -Wreorder warnings
    897c:	4604      	mov	r4, r0
             adc0_obj(0, channel2sc1aADC0, diff_table_ADC0, ADC0_START)
    897e:	4b0f      	ldr	r3, [pc, #60]	; (89bc <ADC::ADC()+0x48>)
    8980:	4a0f      	ldr	r2, [pc, #60]	; (89c0 <ADC::ADC()+0x4c>)
    8982:	2100      	movs	r1, #0
    8984:	f000 fa60 	bl	8e48 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
#ifdef ADC_DUAL_ADCS
             ,
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    8988:	f104 0540 	add.w	r5, r4, #64	; 0x40
    898c:	490d      	ldr	r1, [pc, #52]	; (89c4 <ADC::ADC()+0x50>)
    898e:	9100      	str	r1, [sp, #0]
    8990:	4b0d      	ldr	r3, [pc, #52]	; (89c8 <ADC::ADC()+0x54>)
    8992:	4a0e      	ldr	r2, [pc, #56]	; (89cc <ADC::ADC()+0x58>)
    8994:	2101      	movs	r1, #1
    8996:	4628      	mov	r0, r5
    8998:	f000 fa56 	bl	8e48 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>
    899c:	2302      	movs	r3, #2
#endif
{
    //ctor

    //digitalWriteFast(LED_BUILTIN, HIGH);
}
    899e:	4620      	mov	r0, r4
             adc1_obj(1, channel2sc1aADC1, diff_table_ADC1, ADC1_START)
    89a0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    89a4:	f8c4 4084 	str.w	r4, [r4, #132]	; 0x84
    89a8:	f8c4 5088 	str.w	r5, [r4, #136]	; 0x88
    89ac:	f8c4 408c 	str.w	r4, [r4, #140]	; 0x8c
    89b0:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
    89b4:	b003      	add	sp, #12
    89b6:	bd30      	pop	{r4, r5, pc}
    89b8:	4003b000 	.word	0x4003b000
    89bc:	000152fc 	.word	0x000152fc
    89c0:	00015304 	.word	0x00015304
    89c4:	400bb000 	.word	0x400bb000
    89c8:	00015300 	.word	0x00015300
    89cc:	00015330 	.word	0x00015330

000089d0 <ADC::startContinuous(unsigned char, signed char)>:
#ifdef ADC_SINGLE_ADC
    return adc0->startContinuous(pin); // use ADC0
#else
    /* Teensy 3.1
    */
    if (adc_num == -1)
    89d0:	1c53      	adds	r3, r2, #1
{
    89d2:	b570      	push	{r4, r5, r6, lr}
    89d4:	4604      	mov	r4, r0
    if (adc_num == -1)
    89d6:	d011      	beq.n	89fc <ADC::startContinuous(unsigned char, signed char)+0x2c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
            return false; // all others are invalid
        }
    }
    else if (adc_num == 0)
    89d8:	b152      	cbz	r2, 89f0 <ADC::startContinuous(unsigned char, signed char)+0x20>
    { // user wants ADC0
        return adc0->startContinuous(pin);
    }
    else if (adc_num == 1)
    89da:	2a01      	cmp	r2, #1
    89dc:	d029      	beq.n	8a32 <ADC::startContinuous(unsigned char, signed char)+0x62>
    { // user wants ADC 1
        return adc1->startContinuous(pin);
    }
    adc0->fail_flag |= ADC_ERROR::OTHER;
    89de:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
        return static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) & static_cast<uint16_t>(rhs));
    }
    //! |= operator for ADC_ERRORs, it changes the left hand side ADC_ERROR. @internal
    inline ADC_ERROR operator|=(volatile ADC_ERROR &lhs, ADC_ERROR rhs)
    {
        return lhs = static_cast<ADC_ERROR>(static_cast<uint16_t>(lhs) | static_cast<uint16_t>(rhs));
    89e2:	8ad3      	ldrh	r3, [r2, #22]
    89e4:	b29b      	uxth	r3, r3
    89e6:	f043 0301 	orr.w	r3, r3, #1
    89ea:	82d3      	strh	r3, [r2, #22]
    return false;
#endif
}
    89ec:	2000      	movs	r0, #0
    89ee:	bd70      	pop	{r4, r5, r6, pc}
    89f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc0->startContinuous(pin);
    89f4:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    89f8:	f000 baf8 	b.w	8fec <ADC_Module::startContinuous(unsigned char)>
        bool adc0Pin = adc0->checkPin(pin);
    89fc:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
    8a00:	460d      	mov	r5, r1
    8a02:	f000 fac9 	bl	8f98 <ADC_Module::checkPin(unsigned char)>
        bool adc1Pin = adc1->checkPin(pin);
    8a06:	4629      	mov	r1, r5
        bool adc0Pin = adc0->checkPin(pin);
    8a08:	4606      	mov	r6, r0
        bool adc1Pin = adc1->checkPin(pin);
    8a0a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8a0e:	f000 fac3 	bl	8f98 <ADC_Module::checkPin(unsigned char)>
        if (adc0Pin && adc1Pin)
    8a12:	b1a6      	cbz	r6, 8a3e <ADC::startContinuous(unsigned char, signed char)+0x6e>
    8a14:	b318      	cbz	r0, 8a5e <ADC::startContinuous(unsigned char, signed char)+0x8e>
            if ((adc0->num_measurements) > (adc1->num_measurements))
    8a16:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    8a1a:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8a1e:	7d59      	ldrb	r1, [r3, #21]
    8a20:	7d42      	ldrb	r2, [r0, #21]
    8a22:	4291      	cmp	r1, r2
                return adc1->startContinuous(pin);
    8a24:	4629      	mov	r1, r5
            if ((adc0->num_measurements) > (adc1->num_measurements))
    8a26:	d806      	bhi.n	8a36 <ADC::startContinuous(unsigned char, signed char)+0x66>
}
    8a28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                return adc0->startContinuous(pin);
    8a2c:	4618      	mov	r0, r3
    8a2e:	f000 badd 	b.w	8fec <ADC_Module::startContinuous(unsigned char)>
        return adc1->startContinuous(pin);
    8a32:	f8d0 0088 	ldr.w	r0, [r0, #136]	; 0x88
}
    8a36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        return adc1->startContinuous(pin);
    8a3a:	f000 bad7 	b.w	8fec <ADC_Module::startContinuous(unsigned char)>
        else if (adc1Pin)
    8a3e:	b9a8      	cbnz	r0, 8a6c <ADC::startContinuous(unsigned char, signed char)+0x9c>
            adc0->fail_flag |= ADC_ERROR::WRONG_PIN;
    8a40:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
            adc1->fail_flag |= ADC_ERROR::WRONG_PIN;
    8a44:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    8a48:	8acb      	ldrh	r3, [r1, #22]
    8a4a:	b29b      	uxth	r3, r3
    8a4c:	f043 0304 	orr.w	r3, r3, #4
    8a50:	82cb      	strh	r3, [r1, #22]
    8a52:	8ad3      	ldrh	r3, [r2, #22]
    8a54:	b29b      	uxth	r3, r3
    8a56:	f043 0304 	orr.w	r3, r3, #4
    8a5a:	82d3      	strh	r3, [r2, #22]
            return false; // all others are invalid
    8a5c:	e7c6      	b.n	89ec <ADC::startContinuous(unsigned char, signed char)+0x1c>
            return adc0->startContinuous(pin);
    8a5e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    8a62:	4629      	mov	r1, r5
}
    8a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc0->startContinuous(pin);
    8a68:	f000 bac0 	b.w	8fec <ADC_Module::startContinuous(unsigned char)>
            return adc1->startContinuous(pin);
    8a6c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    8a70:	4629      	mov	r1, r5
}
    8a72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            return adc1->startContinuous(pin);
    8a76:	f000 bab9 	b.w	8fec <ADC_Module::startContinuous(unsigned char)>
    8a7a:	bf00      	nop

00008a7c <ADC_Module::getMaxValue()>:
*
*/
uint32_t ADC_Module::getMaxValue()
{
    return analog_max_val;
}
    8a7c:	69c0      	ldr	r0, [r0, #28]
    8a7e:	4770      	bx	lr

00008a80 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>:
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setConversionSpeed(ADC_CONVERSION_SPEED speed)
{

    if (speed == conversion_speed)
    8a80:	f890 3023 	ldrb.w	r3, [r0, #35]	; 0x23
    8a84:	428b      	cmp	r3, r1
    8a86:	d00a      	beq.n	8a9e <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x1e>
{
    8a88:	b470      	push	{r4, r5, r6}
    //if (calibrating) wait_for_cal();

    bool is_adack = false;
    uint32_t ADC_CFG1_speed = 0; // store the clock and divisor (set to 0 to avoid warnings)

    switch (speed)
    8a8a:	2909      	cmp	r1, #9
    8a8c:	f200 8093 	bhi.w	8bb6 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x136>
    8a90:	e8df f001 	tbb	[pc, r1]
    8a94:	06612f2f 	.word	0x06612f2f
    8a98:	8e817106 	.word	0x8e817106
    8a9c:	5440      	.short	0x5440
    8a9e:	4770      	bx	lr
    case ADC_CONVERSION_SPEED::HIGH_SPEED:
#ifdef ADC_TEENSY_4
        atomic::setBitFlag(adc_regs.CFG, ADC_CFG_ADHSC);
        atomic::clearBitFlag(adc_regs.CFG, ADC_CFG_ADLPC);
#else
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8aa0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    *   \return A pointer to the aliased address of the bit of reg
    */
    template <typename T>
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    {
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8aa2:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8aa6:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8aaa:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8aae:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, bit) = 0;
    }
    template <typename T>
    __attribute__((always_inline)) inline void clearBitFlag(volatile T &reg, T flag)
    {
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8ab2:	2400      	movs	r4, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ab4:	2201      	movs	r2, #1
    8ab6:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8aba:	4626      	mov	r6, r4
    8abc:	61dc      	str	r4, [r3, #28]
    8abe:	2500      	movs	r5, #0
    8ac0:	f8cc 500c 	str.w	r5, [ip, #12]
        bitband_address(reg, bit) = state;
    }
    template <typename T>
    __attribute__((always_inline)) inline void changeBitFlag(volatile T &reg, T flag, T state)
    {
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8ac4:	601e      	str	r6, [r3, #0]
        if (__builtin_popcount(flag) > 1)
        {
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8ac6:	605d      	str	r5, [r3, #4]
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8ac8:	615c      	str	r4, [r3, #20]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8aca:	619a      	str	r2, [r3, #24]
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADICLK(3), ADC_CFG1_speed & ADC_CFG1_ADICLK(3));
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_ADIV(3), ADC_CFG1_speed & ADC_CFG1_ADIV(3));
#endif
    }

    conversion_speed = speed;
    8acc:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    __disable_irq();
    8ad0:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8ad2:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8ad4:	015b      	lsls	r3, r3, #5
    8ad6:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    calibrating = 1;
    8ada:	2201      	movs	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8adc:	2100      	movs	r1, #0
    8ade:	7642      	strb	r2, [r0, #25]
    8ae0:	f8c3 149c 	str.w	r1, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ae4:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    8ae8:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    8aec:	b662      	cpsie	i
    calibrate();
}
    8aee:	bc70      	pop	{r4, r5, r6}
    8af0:	4770      	bx	lr
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8af2:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8af4:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8af8:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8afc:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8b00:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b04:	2200      	movs	r2, #0
    8b06:	f8cc 2008 	str.w	r2, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b0a:	2201      	movs	r2, #1
    8b0c:	61da      	str	r2, [r3, #28]
    8b0e:	4614      	mov	r4, r2
    8b10:	4616      	mov	r6, r2
    8b12:	e7d4      	b.n	8abe <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8b14:	6b43      	ldr	r3, [r0, #52]	; 0x34
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b16:	2400      	movs	r4, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b18:	015a      	lsls	r2, r3, #5
    8b1a:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8b1e:	f502 7380 	add.w	r3, r2, #256	; 0x100
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b22:	f8c2 4188 	str.w	r4, [r2, #392]	; 0x188
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b26:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b2a:	61dc      	str	r4, [r3, #28]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b2c:	2401      	movs	r4, #1
    8b2e:	60d4      	str	r4, [r2, #12]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b30:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b32:	605c      	str	r4, [r3, #4]
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8b34:	601c      	str	r4, [r3, #0]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b36:	619a      	str	r2, [r3, #24]
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8b38:	615a      	str	r2, [r3, #20]
    }
    8b3a:	e7c7      	b.n	8acc <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x4c>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8b3c:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b3e:	015a      	lsls	r2, r3, #5
    8b40:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8b44:	f502 7380 	add.w	r3, r2, #256	; 0x100
    8b48:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b4c:	2401      	movs	r4, #1
    8b4e:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b50:	2400      	movs	r4, #0
    8b52:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    8b54:	e7ea      	b.n	8b2c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8b56:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b58:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8b5c:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8b60:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8b64:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b68:	2600      	movs	r6, #0
    8b6a:	2201      	movs	r2, #1
    8b6c:	f8cc 6008 	str.w	r6, [ip, #8]
    8b70:	4614      	mov	r4, r2
    8b72:	61de      	str	r6, [r3, #28]
    if (is_adack)
    8b74:	e7a3      	b.n	8abe <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8b76:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b78:	ea4f 1c43 	mov.w	ip, r3, lsl #5
    8b7c:	f10c 4c84 	add.w	ip, ip, #1107296256	; 0x42000000
    8b80:	f50c 7380 	add.w	r3, ip, #256	; 0x100
    8b84:	f50c 7cc0 	add.w	ip, ip, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b88:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8b8a:	2401      	movs	r4, #1
    8b8c:	f8cc 4008 	str.w	r4, [ip, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8b90:	4616      	mov	r6, r2
    8b92:	61da      	str	r2, [r3, #28]
    if (is_adack)
    8b94:	e793      	b.n	8abe <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x3e>
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8b96:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8b98:	015a      	lsls	r2, r3, #5
    8b9a:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8b9e:	f502 7380 	add.w	r3, r2, #256	; 0x100
    8ba2:	f502 72c0 	add.w	r2, r2, #384	; 0x180
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8ba6:	2400      	movs	r4, #0
    8ba8:	6094      	str	r4, [r2, #8]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8baa:	2401      	movs	r4, #1
    8bac:	61dc      	str	r4, [r3, #28]
    if (is_adack)
    8bae:	e7bd      	b.n	8b2c <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0xac>
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_ADHSC);
    8bb0:	6b43      	ldr	r3, [r0, #52]	; 0x34
    8bb2:	2401      	movs	r4, #1
    8bb4:	e7b0      	b.n	8b18 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x98>
    8bb6:	8ac3      	ldrh	r3, [r0, #22]
    8bb8:	b29b      	uxth	r3, r3
    8bba:	f043 0301 	orr.w	r3, r3, #1
    8bbe:	82c3      	strh	r3, [r0, #22]
    8bc0:	e795      	b.n	8aee <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)+0x6e>
    8bc2:	bf00      	nop

00008bc4 <ADC_Module::wait_for_cal()>:
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8bc4:	6b43      	ldr	r3, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8bc6:	015b      	lsls	r3, r3, #5
    8bc8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
{
    8bcc:	b510      	push	{r4, lr}
        return (volatile bool)bitband_address(reg, bit);
    }
    template <typename T>
    __attribute__((always_inline)) inline volatile bool getBitFlag(volatile T &reg, T flag)
    {
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    8bce:	f8d3 249c 	ldr.w	r2, [r3, #1180]	; 0x49c
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8bd2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
    8bd6:	4604      	mov	r4, r0
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8bd8:	b152      	cbz	r2, 8bf0 <ADC_Module::wait_for_cal()+0x2c>
        yield();
    8bda:	f003 fbf3 	bl	c3c4 <yield>
    while (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CAL))
    8bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8be0:	015b      	lsls	r3, r3, #5
    8be2:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    8be6:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    8bea:	69da      	ldr	r2, [r3, #28]
    8bec:	2a00      	cmp	r2, #0
    8bee:	d1f4      	bne.n	8bda <ADC_Module::wait_for_cal()+0x16>
    8bf0:	699b      	ldr	r3, [r3, #24]
    if (atomic::getBitFlag(adc_regs.SC3, ADC_SC3_CALF))
    8bf2:	b123      	cbz	r3, 8bfe <ADC_Module::wait_for_cal()+0x3a>
    8bf4:	8ae3      	ldrh	r3, [r4, #22]
    8bf6:	b29b      	uxth	r3, r3
    8bf8:	f043 0302 	orr.w	r3, r3, #2
    8bfc:	82e3      	strh	r3, [r4, #22]
    __disable_irq();
    8bfe:	b672      	cpsid	i
    if (calibrating)
    8c00:	7e63      	ldrb	r3, [r4, #25]
    8c02:	b303      	cbz	r3, 8c46 <ADC_Module::wait_for_cal()+0x82>
        sum = adc_regs.CLPS + adc_regs.CLP4 + adc_regs.CLP3 + adc_regs.CLP2 + adc_regs.CLP1 + adc_regs.CLP0;
    8c04:	6b62      	ldr	r2, [r4, #52]	; 0x34
    8c06:	6b93      	ldr	r3, [r2, #56]	; 0x38
    8c08:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
    8c0a:	440b      	add	r3, r1
    8c0c:	6c11      	ldr	r1, [r2, #64]	; 0x40
    8c0e:	6c50      	ldr	r0, [r2, #68]	; 0x44
    8c10:	440b      	add	r3, r1
    8c12:	6c91      	ldr	r1, [r2, #72]	; 0x48
    8c14:	4403      	add	r3, r0
    8c16:	440b      	add	r3, r1
    8c18:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
    8c1a:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    8c1c:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.PG = sum;
    8c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8c24:	62d3      	str	r3, [r2, #44]	; 0x2c
        sum = adc_regs.CLMS + adc_regs.CLM4 + adc_regs.CLM3 + adc_regs.CLM2 + adc_regs.CLM1 + adc_regs.CLM0;
    8c26:	6d93      	ldr	r3, [r2, #88]	; 0x58
    8c28:	6dd1      	ldr	r1, [r2, #92]	; 0x5c
    8c2a:	440b      	add	r3, r1
    8c2c:	6e11      	ldr	r1, [r2, #96]	; 0x60
    8c2e:	6e50      	ldr	r0, [r2, #100]	; 0x64
    8c30:	440b      	add	r3, r1
    8c32:	6e91      	ldr	r1, [r2, #104]	; 0x68
    8c34:	4403      	add	r3, r0
    8c36:	440b      	add	r3, r1
    8c38:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    8c3a:	440b      	add	r3, r1
        sum = (sum / 2) | 0x8000;
    8c3c:	f3c3 034e 	ubfx	r3, r3, #1, #15
        adc_regs.MG = sum;
    8c40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    8c44:	6313      	str	r3, [r2, #48]	; 0x30
    __enable_irq();
    8c46:	b662      	cpsie	i
    if (init_calib)
    8c48:	7ea3      	ldrb	r3, [r4, #26]
    calibrating = 0;
    8c4a:	2200      	movs	r2, #0
    8c4c:	7662      	strb	r2, [r4, #25]
    if (init_calib)
    8c4e:	b903      	cbnz	r3, 8c52 <ADC_Module::wait_for_cal()+0x8e>
}
    8c50:	bd10      	pop	{r4, pc}
        setConversionSpeed(ADC_CONVERSION_SPEED::MED_SPEED);
    8c52:	2102      	movs	r1, #2
    8c54:	4620      	mov	r0, r4
    8c56:	f7ff ff13 	bl	8a80 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
* HIGH_SPEED adds +6 ADCK.
* VERY_HIGH_SPEED is the highest possible sampling speed (0 ADCK added).
*/
void ADC_Module::setSamplingSpeed(ADC_SAMPLING_SPEED speed)
{
    if (calibrating)
    8c5a:	7e63      	ldrb	r3, [r4, #25]
    8c5c:	bb03      	cbnz	r3, 8ca0 <ADC_Module::wait_for_cal()+0xdc>
    case ADC_SAMPLING_SPEED::LOW_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
        atomic::changeBitFlag(adc_regs.CFG2, ADC_CFG2_ADLSTS(3), ADC_CFG2_ADLSTS(1)); // high sampling time (+16 ADCK)
        break;
    case ADC_SAMPLING_SPEED::MED_SPEED:
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8c5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8c60:	0159      	lsls	r1, r3, #5
    8c62:	f101 4284 	add.w	r2, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8c66:	2001      	movs	r0, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8c68:	2100      	movs	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8c6a:	f8c2 0110 	str.w	r0, [r2, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8c6e:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8c72:	f8c2 0184 	str.w	r0, [r2, #388]	; 0x184
*
*/
void ADC_Module::setAveraging(uint8_t num)
{

    if (calibrating)
    8c76:	7e62      	ldrb	r2, [r4, #25]
    sampling_speed = speed;
    8c78:	2102      	movs	r1, #2
    8c7a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
    if (calibrating)
    8c7e:	b992      	cbnz	r2, 8ca6 <ADC_Module::wait_for_cal()+0xe2>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8c80:	015b      	lsls	r3, r3, #5
    8c82:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8c86:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8c88:	2001      	movs	r0, #1
#else
            atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGS(3));
#endif
        }
    }
    analog_num_average = num;
    8c8a:	2104      	movs	r1, #4
    8c8c:	f8c3 0488 	str.w	r0, [r3, #1160]	; 0x488
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8c90:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8c94:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
    8c98:	f884 1020 	strb.w	r1, [r4, #32]
        init_calib = 0; // clear
    8c9c:	76a2      	strb	r2, [r4, #26]
}
    8c9e:	bd10      	pop	{r4, pc}
        wait_for_cal();
    8ca0:	f7ff ff90 	bl	8bc4 <ADC_Module::wait_for_cal()>
    8ca4:	e7db      	b.n	8c5e <ADC_Module::wait_for_cal()+0x9a>
        wait_for_cal();
    8ca6:	4620      	mov	r0, r4
    8ca8:	f7ff ff8c 	bl	8bc4 <ADC_Module::wait_for_cal()>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8cac:	6b63      	ldr	r3, [r4, #52]	; 0x34
    8cae:	e7e7      	b.n	8c80 <ADC_Module::wait_for_cal()+0xbc>

00008cb0 <ADC_Module::setResolution(unsigned char)>:
{
    8cb0:	b538      	push	{r3, r4, r5, lr}
    if (analog_res_bits == bits)
    8cb2:	7ec3      	ldrb	r3, [r0, #27]
    8cb4:	428b      	cmp	r3, r1
    8cb6:	d012      	beq.n	8cde <ADC_Module::setResolution(unsigned char)+0x2e>
    if (calibrating)
    8cb8:	7e43      	ldrb	r3, [r0, #25]
    8cba:	4604      	mov	r4, r0
    8cbc:	460d      	mov	r5, r1
    8cbe:	bb0b      	cbnz	r3, 8d04 <ADC_Module::setResolution(unsigned char)+0x54>
    if (bits <= 9)
    8cc0:	2d09      	cmp	r5, #9
    8cc2:	d80d      	bhi.n	8ce0 <ADC_Module::setResolution(unsigned char)+0x30>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    8cc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8cc6:	015b      	lsls	r3, r3, #5
    8cc8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8ccc:	2000      	movs	r0, #0
    8cce:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    8cd2:	21ff      	movs	r1, #255	; 0xff
        config = 8;
    8cd4:	2208      	movs	r2, #8
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8cd6:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 255; // diff mode 9 bits has 1 bit for sign, so max value is the same as single 8 bits
    8cda:	61e1      	str	r1, [r4, #28]
    analog_res_bits = config;
    8cdc:	76e2      	strb	r2, [r4, #27]
}
    8cde:	bd38      	pop	{r3, r4, r5, pc}
    else if (bits <= 11)
    8ce0:	2d0b      	cmp	r5, #11
    8ce2:	d912      	bls.n	8d0a <ADC_Module::setResolution(unsigned char)+0x5a>
    else if (bits <= 13)
    8ce4:	2d0d      	cmp	r5, #13
    8ce6:	d81e      	bhi.n	8d26 <ADC_Module::setResolution(unsigned char)+0x76>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(1));
    8ce8:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8cea:	015b      	lsls	r3, r3, #5
    8cec:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8cf0:	2200      	movs	r2, #0
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8cf2:	2001      	movs	r0, #1
    8cf4:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    8cf8:	f640 71ff 	movw	r1, #4095	; 0xfff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8cfc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 12;
    8d00:	220c      	movs	r2, #12
    8d02:	e7ea      	b.n	8cda <ADC_Module::setResolution(unsigned char)+0x2a>
        wait_for_cal();
    8d04:	f7ff ff5e 	bl	8bc4 <ADC_Module::wait_for_cal()>
    8d08:	e7da      	b.n	8cc0 <ADC_Module::setResolution(unsigned char)+0x10>
        atomic::changeBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3), ADC_CFG1_MODE(2));
    8d0a:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8d0c:	015b      	lsls	r3, r3, #5
    8d0e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8d12:	2201      	movs	r2, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8d14:	2000      	movs	r0, #0
    8d16:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
    __attribute__((always_inline)) inline volatile T &bitband_address(volatile T &reg, uint8_t bit)
    8d1a:	f240 31ff 	movw	r1, #1023	; 0x3ff
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8d1e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        config = 10;
    8d22:	220a      	movs	r2, #10
    8d24:	e7d9      	b.n	8cda <ADC_Module::setResolution(unsigned char)+0x2a>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_MODE(3));
    8d26:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8d28:	015b      	lsls	r3, r3, #5
    8d2a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8d2e:	2001      	movs	r0, #1
    8d30:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8d34:	f64f 71ff 	movw	r1, #65535	; 0xffff
        config = 16;
    8d38:	2210      	movs	r2, #16
    8d3a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108
        analog_max_val = 65535;
    8d3e:	e7cc      	b.n	8cda <ADC_Module::setResolution(unsigned char)+0x2a>

00008d40 <ADC_Module::analog_init()>:
{
    8d40:	b538      	push	{r3, r4, r5, lr}
        else
        {
            CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
        }
#else
        if (ADC_num == 0)
    8d42:	7e03      	ldrb	r3, [r0, #24]
        {
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    8d44:	4a3d      	ldr	r2, [pc, #244]	; (8e3c <ADC_Module::analog_init()+0xfc>)
    8d46:	4604      	mov	r4, r0
        if (ADC_num == 0)
    8d48:	2b00      	cmp	r3, #0
    8d4a:	d16a      	bne.n	8e22 <ADC_Module::analog_init()+0xe2>
            SIM_SCGC6 |= SIM_SCGC6_ADC0;
    8d4c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    8d4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    8d52:	63d3      	str	r3, [r2, #60]	; 0x3c
    atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    8d54:	6b62      	ldr	r2, [r4, #52]	; 0x34
    //! Stops the internal reference
    /** This is called automatically by ADC_Module::setReference(ref) when ref is any other than REF_1V2
    */
    __attribute__((always_inline)) inline void stop()
    {
        VREF_SC = 0;
    8d56:	483a      	ldr	r0, [pc, #232]	; (8e40 <ADC_Module::analog_init()+0x100>)
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8d58:	493a      	ldr	r1, [pc, #232]	; (8e44 <ADC_Module::analog_init()+0x104>)
    pga_value = 1;
    8d5a:	f240 4501 	movw	r5, #1025	; 0x401
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8d5e:	0152      	lsls	r2, r2, #5
    8d60:	8465      	strh	r5, [r4, #34]	; 0x22
    8d62:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    8d66:	2504      	movs	r5, #4
    analog_res_bits = 0;
    8d68:	2300      	movs	r3, #0
    sampling_speed = ADC_SAMPLING_SPEED::VERY_HIGH_SPEED;
    8d6a:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8d6e:	2501      	movs	r5, #1
    analog_res_bits = 0;
    8d70:	76e3      	strb	r3, [r4, #27]
    analog_max_val = 0;
    8d72:	61e3      	str	r3, [r4, #28]
    analog_num_average = 0;
    8d74:	f884 3020 	strb.w	r3, [r4, #32]
    interrupts_enabled = false;
    8d78:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    calibrating = 0;
    8d7c:	7663      	strb	r3, [r4, #25]
    fail_flag = ADC_ERROR::CLEAR; // clear all errors
    8d7e:	82e3      	strh	r3, [r4, #22]
    num_measurements = 0;
    8d80:	7563      	strb	r3, [r4, #21]
    8d82:	f8c2 5190 	str.w	r5, [r2, #400]	; 0x190
    8d86:	7043      	strb	r3, [r0, #1]
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8d88:	f881 3040 	strb.w	r3, [r1, #64]	; 0x40
        atomic::clearBitFlag(adc_regs.SC2, ADC_SC2_REFSEL(1));
    8d8c:	6b62      	ldr	r2, [r4, #52]	; 0x34
        analog_reference_internal = ADC_REF_SOURCE::REF_DEFAULT;
    8d8e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8d92:	0152      	lsls	r2, r2, #5
    8d94:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8d98:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
    __disable_irq();
    8d9c:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8d9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    calibrating = 1;
    8da0:	7665      	strb	r5, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8da2:	0152      	lsls	r2, r2, #5
    8da4:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8da8:	f8c2 349c 	str.w	r3, [r2, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8dac:	f8c2 5498 	str.w	r5, [r2, #1176]	; 0x498
    8db0:	f8c2 549c 	str.w	r5, [r2, #1180]	; 0x49c
    __enable_irq();
    8db4:	b662      	cpsie	i
    setResolution(10);
    8db6:	210a      	movs	r1, #10
    8db8:	4620      	mov	r0, r4
    8dba:	f7ff ff79 	bl	8cb0 <ADC_Module::setResolution(unsigned char)>
    if (calibrating)
    8dbe:	7e63      	ldrb	r3, [r4, #25]
    init_calib = 1;
    8dc0:	76a5      	strb	r5, [r4, #26]
    if (calibrating)
    8dc2:	bb9b      	cbnz	r3, 8e2c <ADC_Module::analog_init()+0xec>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8dc4:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8dc6:	015b      	lsls	r3, r3, #5
    8dc8:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8dcc:	2101      	movs	r1, #1
    analog_num_average = num;
    8dce:	2220      	movs	r2, #32
    8dd0:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    8dd4:	4620      	mov	r0, r4
    8dd6:	f8c3 1484 	str.w	r1, [r3, #1156]	; 0x484
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8dda:	f8c3 1480 	str.w	r1, [r3, #1152]	; 0x480
    analog_num_average = num;
    8dde:	f884 2020 	strb.w	r2, [r4, #32]
    setConversionSpeed(ADC_CONVERSION_SPEED::LOW_SPEED);
    8de2:	f7ff fe4d 	bl	8a80 <ADC_Module::setConversionSpeed(ADC_settings::ADC_CONVERSION_SPEED)>
    if (calibrating)
    8de6:	7e63      	ldrb	r3, [r4, #25]
    8de8:	bb23      	cbnz	r3, 8e34 <ADC_Module::analog_init()+0xf4>
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8dea:	6b63      	ldr	r3, [r4, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8dec:	0159      	lsls	r1, r3, #5
    8dee:	f101 4384 	add.w	r3, r1, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8df2:	2201      	movs	r2, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8df4:	2000      	movs	r0, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8df6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8dfa:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8dfe:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
    sampling_speed = speed;
    8e02:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __disable_irq();
    8e06:	b672      	cpsid	i
    atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_CAL);
    8e08:	6b63      	ldr	r3, [r4, #52]	; 0x34
    calibrating = 1;
    8e0a:	7662      	strb	r2, [r4, #25]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8e0c:	015b      	lsls	r3, r3, #5
    8e0e:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8e12:	f8c3 049c 	str.w	r0, [r3, #1180]	; 0x49c
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8e16:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
    8e1a:	f8c3 249c 	str.w	r2, [r3, #1180]	; 0x49c
    __enable_irq();
    8e1e:	b662      	cpsie	i
}
    8e20:	bd38      	pop	{r3, r4, r5, pc}
        }
        else
        {
            SIM_SCGC3 |= SIM_SCGC3_ADC1;
    8e22:	6b13      	ldr	r3, [r2, #48]	; 0x30
    8e24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
    8e28:	6313      	str	r3, [r2, #48]	; 0x30
    8e2a:	e793      	b.n	8d54 <ADC_Module::analog_init()+0x14>
        wait_for_cal();
    8e2c:	4620      	mov	r0, r4
    8e2e:	f7ff fec9 	bl	8bc4 <ADC_Module::wait_for_cal()>
    8e32:	e7c7      	b.n	8dc4 <ADC_Module::analog_init()+0x84>
        wait_for_cal();
    8e34:	f7ff fec6 	bl	8bc4 <ADC_Module::wait_for_cal()>
    8e38:	e7d7      	b.n	8dea <ADC_Module::analog_init()+0xaa>
    8e3a:	bf00      	nop
    8e3c:	40048000 	.word	0x40048000
    8e40:	40074000 	.word	0x40074000
    8e44:	42fa0000 	.word	0x42fa0000

00008e48 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)>:
ADC_Module::ADC_Module(uint8_t ADC_number,
    8e48:	b510      	push	{r4, lr}
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8e4a:	2900      	cmp	r1, #0
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    8e4c:	6282      	str	r2, [r0, #40]	; 0x28
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8e4e:	4a09      	ldr	r2, [pc, #36]	; (8e74 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x2c>)
                                                 diff_table(a_diff_table)
    8e50:	6303      	str	r3, [r0, #48]	; 0x30
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8e52:	bf0c      	ite	eq
    8e54:	2339      	moveq	r3, #57	; 0x39
    8e56:	233a      	movne	r3, #58	; 0x3a
                       ADC_REGS_t &a_adc_regs) : ADC_num(ADC_number), channel2sc1a(a_channel2sc1a)
    8e58:	7601      	strb	r1, [r0, #24]
                                                 IRQ_ADC(ADC_num ? IRQ_NUMBER_t::IRQ_ADC1 : IRQ_NUMBER_t::IRQ_ADC0)
    8e5a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8e5e:	4906      	ldr	r1, [pc, #24]	; (8e78 <ADC_Module::ADC_Module(unsigned char, unsigned char const*, ADC_Module::ADC_NLIST const*, ADC_settings::ADC_REGS_t&)+0x30>)
ADC_Module::ADC_Module(uint8_t ADC_number,
    8e60:	9b02      	ldr	r3, [sp, #8]
                                                 adc_regs(a_adc_regs)
    8e62:	6343      	str	r3, [r0, #52]	; 0x34
                                                 PDB0_CHnC1(ADC_num ? PDB0_CH1C1 : PDB0_CH0C1)
    8e64:	bf18      	it	ne
    8e66:	4611      	movne	r1, r2
ADC_Module::ADC_Module(uint8_t ADC_number,
    8e68:	4604      	mov	r4, r0
    8e6a:	6381      	str	r1, [r0, #56]	; 0x38
    analog_init();
    8e6c:	f7ff ff68 	bl	8d40 <ADC_Module::analog_init()>
}
    8e70:	4620      	mov	r0, r4
    8e72:	bd10      	pop	{r4, pc}
    8e74:	40036038 	.word	0x40036038
    8e78:	40036010 	.word	0x40036010

00008e7c <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)>:
{
    8e7c:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    8e7e:	7e43      	ldrb	r3, [r0, #25]
{
    8e80:	4605      	mov	r5, r0
    8e82:	460c      	mov	r4, r1
    if (calibrating)
    8e84:	b9a3      	cbnz	r3, 8eb0 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x34>
    switch (speed)
    8e86:	2c04      	cmp	r4, #4
    8e88:	d80f      	bhi.n	8eaa <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0x2e>
    8e8a:	e8df f004 	tbb	[pc, r4]
    8e8e:	2d1e      	.short	0x2d1e
    8e90:	033c      	.short	0x033c
    8e92:	14          	.byte	0x14
    8e93:	00          	.byte	0x00
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);    // long sampling time enable
    8e94:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8e96:	015a      	lsls	r2, r3, #5
    8e98:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8e9c:	2101      	movs	r1, #1
    8e9e:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
    8ea2:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8ea6:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    8eaa:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8eae:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    8eb0:	f7ff fe88 	bl	8bc4 <ADC_Module::wait_for_cal()>
    8eb4:	e7e7      	b.n	8e86 <ADC_Module::setSamplingSpeed(ADC_settings::ADC_SAMPLING_SPEED)+0xa>
        atomic::clearBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP); // shortest sampling time
    8eb6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8eb8:	015b      	lsls	r3, r3, #5
    8eba:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8ebe:	2200      	movs	r2, #0
    8ec0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    sampling_speed = speed;
    8ec4:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8ec8:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);      // long sampling time enable
    8eca:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8ecc:	015a      	lsls	r2, r3, #5
    8ece:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ed2:	2101      	movs	r1, #1
    8ed4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8ed8:	2100      	movs	r1, #0
    8eda:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8ede:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    sampling_speed = speed;
    8ee2:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8ee6:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8ee8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8eea:	015a      	lsls	r2, r3, #5
    8eec:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ef0:	2101      	movs	r1, #1
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8ef2:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8ef4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8ef8:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8efc:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    sampling_speed = speed;
    8f00:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8f04:	bd38      	pop	{r3, r4, r5, pc}
        atomic::setBitFlag(adc_regs.CFG1, ADC_CFG1_ADLSMP);                           // long sampling time enable
    8f06:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f08:	015a      	lsls	r2, r3, #5
    8f0a:	f102 4384 	add.w	r3, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f0e:	2101      	movs	r1, #1
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8f10:	2200      	movs	r2, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f12:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8f16:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8f1a:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
    sampling_speed = speed;
    8f1e:	f885 4024 	strb.w	r4, [r5, #36]	; 0x24
}
    8f22:	bd38      	pop	{r3, r4, r5, pc}

00008f24 <ADC_Module::setAveraging(unsigned char)>:
{
    8f24:	b538      	push	{r3, r4, r5, lr}
    if (calibrating)
    8f26:	7e43      	ldrb	r3, [r0, #25]
{
    8f28:	4604      	mov	r4, r0
    8f2a:	460d      	mov	r5, r1
    if (calibrating)
    8f2c:	bb2b      	cbnz	r3, 8f7a <ADC_Module::setAveraging(unsigned char)+0x56>
    if (num <= 1)
    8f2e:	2d01      	cmp	r5, #1
        atomic::clearBitFlag(adc_regs.SC3, ADC_SC3_AVGE);
    8f30:	6b63      	ldr	r3, [r4, #52]	; 0x34
    if (num <= 1)
    8f32:	d918      	bls.n	8f66 <ADC_Module::setAveraging(unsigned char)+0x42>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f34:	015b      	lsls	r3, r3, #5
    8f36:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    8f3a:	f503 6390 	add.w	r3, r3, #1152	; 0x480
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f3e:	2101      	movs	r1, #1
        if (num <= 4)
    8f40:	2d04      	cmp	r5, #4
    8f42:	6099      	str	r1, [r3, #8]
    8f44:	d806      	bhi.n	8f54 <ADC_Module::setAveraging(unsigned char)+0x30>
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8f46:	2100      	movs	r1, #0
    8f48:	6059      	str	r1, [r3, #4]
            num = 4;
    8f4a:	2204      	movs	r2, #4
            bitband_address(reg, __builtin_ctzl(flag)) = 0;
    8f4c:	6019      	str	r1, [r3, #0]
    analog_num_average = num;
    8f4e:	f884 2020 	strb.w	r2, [r4, #32]
}
    8f52:	bd38      	pop	{r3, r4, r5, pc}
        else if (num <= 8)
    8f54:	2d08      	cmp	r5, #8
    8f56:	d913      	bls.n	8f80 <ADC_Module::setAveraging(unsigned char)+0x5c>
        else if (num <= 16)
    8f58:	2d10      	cmp	r5, #16
    8f5a:	d818      	bhi.n	8f8e <ADC_Module::setAveraging(unsigned char)+0x6a>
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8f5c:	2200      	movs	r2, #0
    8f5e:	601a      	str	r2, [r3, #0]
            num = 16;
    8f60:	2210      	movs	r2, #16
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8f62:	6059      	str	r1, [r3, #4]
    }
    8f64:	e7f3      	b.n	8f4e <ADC_Module::setAveraging(unsigned char)+0x2a>
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f66:	015b      	lsls	r3, r3, #5
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8f68:	2100      	movs	r1, #0
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8f6a:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
        num = 0;
    8f6e:	460a      	mov	r2, r1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8f70:	f8c3 1488 	str.w	r1, [r3, #1160]	; 0x488
    analog_num_average = num;
    8f74:	f884 2020 	strb.w	r2, [r4, #32]
}
    8f78:	bd38      	pop	{r3, r4, r5, pc}
        wait_for_cal();
    8f7a:	f7ff fe23 	bl	8bc4 <ADC_Module::wait_for_cal()>
    8f7e:	e7d6      	b.n	8f2e <ADC_Module::setAveraging(unsigned char)+0xa>
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8f80:	2000      	movs	r0, #0
            num = 8;
    8f82:	2208      	movs	r2, #8
        bitband_address(reg, __builtin_ctzl(flag)) = (state >> __builtin_ctzl(flag)) & 0x1;
    8f84:	6019      	str	r1, [r3, #0]
            bitband_address(reg, 31 - __builtin_clzl(flag)) = (state >> (31 - __builtin_clzl(flag))) & 0x1;
    8f86:	6058      	str	r0, [r3, #4]
    analog_num_average = num;
    8f88:	f884 2020 	strb.w	r2, [r4, #32]
}
    8f8c:	bd38      	pop	{r3, r4, r5, pc}
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8f8e:	6059      	str	r1, [r3, #4]
            num = 32;
    8f90:	2220      	movs	r2, #32
            bitband_address(reg, __builtin_ctzl(flag)) = 1;
    8f92:	6019      	str	r1, [r3, #0]
    }
    8f94:	e7db      	b.n	8f4e <ADC_Module::setAveraging(unsigned char)+0x2a>
    8f96:	bf00      	nop

00008f98 <ADC_Module::checkPin(unsigned char)>:

// check whether the pin is a valid analog pin
bool ADC_Module::checkPin(uint8_t pin)
{

    if (pin > ADC_MAX_PIN)
    8f98:	292b      	cmp	r1, #43	; 0x2b
    8f9a:	d807      	bhi.n	8fac <ADC_Module::checkPin(unsigned char)+0x14>
    {
        return false; // all others are invalid
    }

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8f9c:	6a83      	ldr	r3, [r0, #40]	; 0x28

    // check for valid pin
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    8f9e:	5c58      	ldrb	r0, [r3, r1]
    8fa0:	f000 001f 	and.w	r0, r0, #31
    8fa4:	381f      	subs	r0, #31
    8fa6:	bf18      	it	ne
    8fa8:	2001      	movne	r0, #1
    8faa:	4770      	bx	lr
        return false; // all others are invalid
    8fac:	2000      	movs	r0, #0
    {
        return false; // all others are invalid
    }

    return true;
}
    8fae:	4770      	bx	lr

00008fb0 <ADC_Module::startReadFast(unsigned char)>:
// It doesn't change the continuous conversion bit
void ADC_Module::startReadFast(uint8_t pin)
{

    // translate pin number to SC1A number, that also contains MUX a or b info.
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8fb0:	6a83      	ldr	r3, [r0, #40]	; 0x28

#ifdef ADC_TEENSY_4
// Teensy 4 has no a or b channels
#else
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    8fb2:	565a      	ldrsb	r2, [r3, r1]
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8fb4:	5c5b      	ldrb	r3, [r3, r1]
    if (sc1a_pin & ADC_SC1A_PIN_MUX)
    8fb6:	2a00      	cmp	r2, #0
    { // mux a
        atomic::clearBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    8fb8:	6b42      	ldr	r2, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8fba:	ea4f 1242 	mov.w	r2, r2, lsl #5
    8fbe:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 0;
    8fc2:	bfb4      	ite	lt
    8fc4:	2100      	movlt	r1, #0
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    8fc6:	2101      	movge	r1, #1
    8fc8:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
        atomic::setBitFlag(adc_regs.CFG2, ADC_CFG2_MUXSEL);
    }
#endif

    // select pin for single-ended mode and start conversion, enable interrupts if requested
    __disable_irq();
    8fcc:	b672      	cpsid	i
#ifdef ADC_TEENSY_4
    adc_regs.HC0 = (sc1a_pin & ADC_SC1A_CHANNELS) + interrupts_enabled * ADC_HC_AIEN;
#else
    adc_regs.SC1A = (sc1a_pin & ADC_SC1A_CHANNELS) + atomic::getBitFlag(adc_regs.SC1A, ADC_SC1_AIEN) * ADC_SC1_AIEN;
    8fce:	6b41      	ldr	r1, [r0, #52]	; 0x34
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    8fd0:	014a      	lsls	r2, r1, #5
    8fd2:	f102 4284 	add.w	r2, r2, #1107296256	; 0x42000000
    8fd6:	f003 031f 	and.w	r3, r3, #31
        return (volatile bool)bitband_address(reg, 31 - __builtin_clzl(flag));
    8fda:	6992      	ldr	r2, [r2, #24]
    8fdc:	3a00      	subs	r2, #0
    8fde:	bf18      	it	ne
    8fe0:	2201      	movne	r2, #1
    8fe2:	eb03 1382 	add.w	r3, r3, r2, lsl #6
    8fe6:	600b      	str	r3, [r1, #0]
#endif
    __enable_irq();
    8fe8:	b662      	cpsie	i
}
    8fea:	4770      	bx	lr

00008fec <ADC_Module::startContinuous(unsigned char)>:
/* Starts continuous conversion on the pin
 * It returns as soon as the ADC is set, use analogReadContinuous() to read the values
 * Set the resolution, number of averages and voltage reference using the appropriate functions BEFORE calling this function
*/
bool ADC_Module::startContinuous(uint8_t pin)
{
    8fec:	b550      	push	{r4, r6, lr}
    if (pin > ADC_MAX_PIN)
    8fee:	292b      	cmp	r1, #43	; 0x2b
{
    8ff0:	b083      	sub	sp, #12
    8ff2:	4604      	mov	r4, r0
    if (pin > ADC_MAX_PIN)
    8ff4:	d817      	bhi.n	9026 <ADC_Module::startContinuous(unsigned char)+0x3a>
    const uint8_t sc1a_pin = channel2sc1a[pin];
    8ff6:	6a83      	ldr	r3, [r0, #40]	; 0x28
    if ((sc1a_pin & ADC_SC1A_CHANNELS) == ADC_SC1A_PIN_INVALID)
    8ff8:	5c5b      	ldrb	r3, [r3, r1]
    8ffa:	f003 031f 	and.w	r3, r3, #31
    8ffe:	2b1f      	cmp	r3, #31
    9000:	d011      	beq.n	9026 <ADC_Module::startContinuous(unsigned char)+0x3a>
        fail_flag |= ADC_ERROR::WRONG_PIN;
        return false;
    }

    // check for calibration before setting channels,
    if (calibrating)
    9002:	7e43      	ldrb	r3, [r0, #25]
    9004:	b9bb      	cbnz	r3, 9036 <ADC_Module::startContinuous(unsigned char)+0x4a>
        atomic::setBitFlag(adc_regs.SC3, ADC_SC3_ADCO);
    9006:	6b63      	ldr	r3, [r4, #52]	; 0x34
        wait_for_cal();

    // increase the counter of measurements
    num_measurements++;
    9008:	7d62      	ldrb	r2, [r4, #21]
        return (*(volatile T *)(((uint32_t)&reg - 0x40000000) * 32 + bit * 4 + 0x42000000));
    900a:	015b      	lsls	r3, r3, #5
    900c:	f103 4384 	add.w	r3, r3, #1107296256	; 0x42000000
    9010:	3201      	adds	r2, #1
        bitband_address(reg, 31 - __builtin_clzl(flag)) = 1;
    9012:	2601      	movs	r6, #1
    9014:	7562      	strb	r2, [r4, #21]

    // set continuous conversion flag
    continuousMode();

    startReadFast(pin);
    9016:	4620      	mov	r0, r4
    9018:	f8c3 648c 	str.w	r6, [r3, #1164]	; 0x48c
    901c:	f7ff ffc8 	bl	8fb0 <ADC_Module::startReadFast(unsigned char)>

    return true;
    9020:	4630      	mov	r0, r6
}
    9022:	b003      	add	sp, #12
    9024:	bd50      	pop	{r4, r6, pc}
    9026:	8ae3      	ldrh	r3, [r4, #22]
    9028:	b29b      	uxth	r3, r3
        return false;
    902a:	2000      	movs	r0, #0
    902c:	f043 0304 	orr.w	r3, r3, #4
    9030:	82e3      	strh	r3, [r4, #22]
}
    9032:	b003      	add	sp, #12
    9034:	bd50      	pop	{r4, r6, pc}
    9036:	9101      	str	r1, [sp, #4]
        wait_for_cal();
    9038:	f7ff fdc4 	bl	8bc4 <ADC_Module::wait_for_cal()>
    903c:	9901      	ldr	r1, [sp, #4]
    903e:	e7e2      	b.n	9006 <ADC_Module::startContinuous(unsigned char)+0x1a>

00009040 <EventResponder::triggerEvent(int, void*)>:
	// The code triggering the event does NOT control which of the above
	// response methods will be used.
	virtual void triggerEvent(int status=0, void *data=nullptr) {
		_status = status;
		_data = data;
		if (_type == EventTypeImmediate) {
    9040:	f890 c01c 	ldrb.w	ip, [r0, #28]
		_status = status;
    9044:	6041      	str	r1, [r0, #4]
		if (_type == EventTypeImmediate) {
    9046:	f1bc 0f02 	cmp.w	ip, #2
		_data = data;
    904a:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    904c:	d101      	bne.n	9052 <EventResponder::triggerEvent(int, void*)+0x12>
			(*_function)(*this);
    904e:	6883      	ldr	r3, [r0, #8]
    9050:	4718      	bx	r3
		} else {
			triggerEventNotImmediate();
    9052:	f000 b941 	b.w	92d8 <EventResponder::triggerEventNotImmediate()>
    9056:	bf00      	nop

00009058 <SPIClass::dma_rxisr()>:


//-------------------------------------------------------------------------
// DMA RX ISR
//-------------------------------------------------------------------------
void SPIClass::dma_rxisr(void) {
    9058:	b470      	push	{r4, r5, r6}
	void detachInterrupt(void) {
		NVIC_DISABLE_IRQ(IRQ_DMA_CH0 + channel);
	}

	void clearInterrupt(void) {
		DMA_CINT = channel;
    905a:	6b01      	ldr	r1, [r0, #48]	; 0x30
    905c:	4a4a      	ldr	r2, [pc, #296]	; (9188 <SPIClass::dma_rxisr()+0x130>)
    905e:	7909      	ldrb	r1, [r1, #4]
    9060:	77d1      	strb	r1, [r2, #31]
	bool complete(void) {
		if (TCD->CSR & DMA_TCD_CSR_DONE) return true;
		return false;
	}
	void clearComplete(void) {
		DMA_CDNE = channel;
    9062:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    9064:	7909      	ldrb	r1, [r1, #4]
    9066:	7711      	strb	r1, [r2, #28]
    9068:	6b01      	ldr	r1, [r0, #48]	; 0x30
    906a:	7909      	ldrb	r1, [r1, #4]
    906c:	7711      	strb	r1, [r2, #28]
	_dmaRX->clearInterrupt();
	_dmaTX->clearComplete();
	_dmaRX->clearComplete();

	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
	if (_dma_count_remaining) {
    906e:	6a82      	ldr	r2, [r0, #40]	; 0x28
void SPIClass::dma_rxisr(void) {
    9070:	4603      	mov	r3, r0
	if (_dma_count_remaining) {
    9072:	b32a      	cbz	r2, 90c0 <SPIClass::dma_rxisr()+0x68>
		// What do I need to do to start it back up again...
		// We will use the BITR/CITR from RX as TX may have prefed some stuff
		if (_dma_count_remaining > hardware().max_dma_count) {
    9074:	6841      	ldr	r1, [r0, #4]
    9076:	68c9      	ldr	r1, [r1, #12]
    9078:	428a      	cmp	r2, r1
    907a:	d943      	bls.n	9104 <SPIClass::dma_rxisr()+0xac>
			_dma_count_remaining -= hardware().max_dma_count;
    907c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
		} else {
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    907e:	6b00      	ldr	r0, [r0, #48]	; 0x30
			_dma_count_remaining -= hardware().max_dma_count;
    9080:	1a52      	subs	r2, r2, r1
    9082:	6821      	ldr	r1, [r4, #0]
    9084:	629a      	str	r2, [r3, #40]	; 0x28
			if (_dma_count_remaining == 1) should_reenable_tx = false;

			_dma_count_remaining = 0;
		}
		// In some cases we need to again start the TX manually to get it to work...
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    9086:	680d      	ldr	r5, [r1, #0]
    9088:	f103 0424 	add.w	r4, r3, #36	; 0x24
    908c:	42a5      	cmp	r5, r4
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    908e:	f04f 0201 	mov.w	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    9092:	d059      	beq.n	9148 <SPIClass::dma_rxisr()+0xf0>
	// setCS() is a special function, not intended for use from normal Arduino
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
	KINETISK_SPI_t & port() { return *(KINETISK_SPI_t *)port_addr; }
    9094:	681c      	ldr	r4, [r3, #0]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			}
		} else {
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    9096:	68e5      	ldr	r5, [r4, #12]
    9098:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
				// 16 bit mode
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    909c:	680d      	ldr	r5, [r1, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    909e:	d129      	bne.n	90f4 <SPIClass::dma_rxisr()+0x9c>
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
			} else  {
				uint8_t w = *((uint8_t*)_dmaTX->TCD->SADDR);
    90a0:	782d      	ldrb	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    90a2:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    90a4:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 1;
    90a8:	3601      	adds	r6, #1
    90aa:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    90ac:	6365      	str	r5, [r4, #52]	; 0x34
		DMA_SERQ = channel;
    90ae:	4936      	ldr	r1, [pc, #216]	; (9188 <SPIClass::dma_rxisr()+0x130>)
    90b0:	7900      	ldrb	r0, [r0, #4]
    90b2:	76c8      	strb	r0, [r1, #27]
			}
		}
		_dmaRX->enable();
		if (should_reenable_tx)
    90b4:	b112      	cbz	r2, 90bc <SPIClass::dma_rxisr()+0x64>
    90b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    90b8:	791b      	ldrb	r3, [r3, #4]
    90ba:	76cb      	strb	r3, [r1, #27]

		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
		_dma_event_responder->triggerEvent();

	}
}
    90bc:	bc70      	pop	{r4, r5, r6}
    90be:	4770      	bx	lr
    90c0:	6801      	ldr	r1, [r0, #0]
		port().SR = 0xFF0F0000;
    90c2:	4c32      	ldr	r4, [pc, #200]	; (918c <SPIClass::dma_rxisr()+0x134>)
		_dma_event_responder->triggerEvent();
    90c4:	6b40      	ldr	r0, [r0, #52]	; 0x34
		port().RSER = 0;
    90c6:	630a      	str	r2, [r1, #48]	; 0x30
		port().SR = 0xFF0F0000;
    90c8:	62cc      	str	r4, [r1, #44]	; 0x2c
		port().CTAR0  &= ~(SPI_CTAR_FMSZ(8)); 	// Hack restore back to 8 bits
    90ca:	68cc      	ldr	r4, [r1, #12]
    90cc:	f024 4480 	bic.w	r4, r4, #1073741824	; 0x40000000
    90d0:	60cc      	str	r4, [r1, #12]
		_dma_event_responder->triggerEvent();
    90d2:	6804      	ldr	r4, [r0, #0]
    90d4:	492e      	ldr	r1, [pc, #184]	; (9190 <SPIClass::dma_rxisr()+0x138>)
    90d6:	6824      	ldr	r4, [r4, #0]
		_dma_state = DMAState::completed;   // set back to 1 in case our call wants to start up dma again
    90d8:	f04f 0c03 	mov.w	ip, #3
    90dc:	428c      	cmp	r4, r1
    90de:	f883 c025 	strb.w	ip, [r3, #37]	; 0x25
		_dma_event_responder->triggerEvent();
    90e2:	d139      	bne.n	9158 <SPIClass::dma_rxisr()+0x100>
		if (_type == EventTypeImmediate) {
    90e4:	7f03      	ldrb	r3, [r0, #28]
		_status = status;
    90e6:	6042      	str	r2, [r0, #4]
		if (_type == EventTypeImmediate) {
    90e8:	2b02      	cmp	r3, #2
		_data = data;
    90ea:	60c2      	str	r2, [r0, #12]
		if (_type == EventTypeImmediate) {
    90ec:	d138      	bne.n	9160 <SPIClass::dma_rxisr()+0x108>
}
    90ee:	bc70      	pop	{r4, r5, r6}
			(*_function)(*this);
    90f0:	6883      	ldr	r3, [r0, #8]
    90f2:	4718      	bx	r3
				uint16_t w = *((uint16_t*)_dmaTX->TCD->SADDR);
    90f4:	882d      	ldrh	r5, [r5, #0]
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    90f6:	680e      	ldr	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    90f8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
				_dmaTX->TCD->SADDR = (volatile uint8_t*)(_dmaTX->TCD->SADDR) + 2;
    90fc:	3602      	adds	r6, #2
    90fe:	600e      	str	r6, [r1, #0]
				port().PUSHR = (w | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    9100:	6365      	str	r5, [r4, #52]	; 0x34
    9102:	e7d4      	b.n	90ae <SPIClass::dma_rxisr()+0x56>
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    9104:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    9106:	6809      	ldr	r1, [r1, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9108:	8bcc      	ldrh	r4, [r1, #30]
    910a:	0426      	lsls	r6, r4, #16
			DMAChanneltransferCount(_dmaTX, _dma_count_remaining-1);
    910c:	f102 30ff 	add.w	r0, r2, #4294967295
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9110:	d431      	bmi.n	9176 <SPIClass::dma_rxisr()+0x11e>
		tcd->BITER = len & 0x7fff;
    9112:	f3c0 000e 	ubfx	r0, r0, #0, #15
    9116:	83c8      	strh	r0, [r1, #30]
	tcd->CITER = tcd->BITER; 
    9118:	8bcc      	ldrh	r4, [r1, #30]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    911a:	6b18      	ldr	r0, [r3, #48]	; 0x30
	tcd->CITER = tcd->BITER; 
    911c:	b2a4      	uxth	r4, r4
    911e:	82cc      	strh	r4, [r1, #22]
			DMAChanneltransferCount(_dmaRX, _dma_count_remaining);
    9120:	6804      	ldr	r4, [r0, #0]
	if (!(tcd->BITER & DMA_TCD_BITER_ELINK)) {
    9122:	8be5      	ldrh	r5, [r4, #30]
    9124:	042d      	lsls	r5, r5, #16
    9126:	d41e      	bmi.n	9166 <SPIClass::dma_rxisr()+0x10e>
		tcd->BITER = len & 0x7fff;
    9128:	f3c2 050e 	ubfx	r5, r2, #0, #15
    912c:	83e5      	strh	r5, [r4, #30]
	tcd->CITER = tcd->BITER; 
    912e:	8be5      	ldrh	r5, [r4, #30]
    9130:	b2ad      	uxth	r5, r5
    9132:	82e5      	strh	r5, [r4, #22]
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    9134:	680d      	ldr	r5, [r1, #0]
			_dma_count_remaining = 0;
    9136:	2400      	movs	r4, #0
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    9138:	3a01      	subs	r2, #1
			_dma_count_remaining = 0;
    913a:	629c      	str	r4, [r3, #40]	; 0x28
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    913c:	f103 0424 	add.w	r4, r3, #36	; 0x24
	uint8_t should_reenable_tx = true;	// should we re-enable TX maybe not if count will be 0...
    9140:	bf18      	it	ne
    9142:	2201      	movne	r2, #1
		if (_dmaTX->TCD->SADDR == &_transferWriteFill) {
    9144:	42a5      	cmp	r5, r4
    9146:	d1a5      	bne.n	9094 <SPIClass::dma_rxisr()+0x3c>
    9148:	6819      	ldr	r1, [r3, #0]
			if (port().CTAR0  & SPI_CTAR_FMSZ(8)) {
    914a:	68cc      	ldr	r4, [r1, #12]
				port().PUSHR = (_transferWriteFill | SPI_PUSHR_CTAS(0) | SPI_PUSHR_CONT);
    914c:	f893 4024 	ldrb.w	r4, [r3, #36]	; 0x24
    9150:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
    9154:	634c      	str	r4, [r1, #52]	; 0x34
    9156:	e7aa      	b.n	90ae <SPIClass::dma_rxisr()+0x56>
		_dma_event_responder->triggerEvent();
    9158:	4623      	mov	r3, r4
    915a:	4611      	mov	r1, r2
}
    915c:	bc70      	pop	{r4, r5, r6}
		_dma_event_responder->triggerEvent();
    915e:	4718      	bx	r3
}
    9160:	bc70      	pop	{r4, r5, r6}
			triggerEventNotImmediate();
    9162:	f000 b8b9 	b.w	92d8 <EventResponder::triggerEventNotImmediate()>
		tcd->BITER = (tcd->BITER & 0xFE00) | (len & 0x1ff);
    9166:	8be5      	ldrh	r5, [r4, #30]
    9168:	f3c2 0608 	ubfx	r6, r2, #0, #9
    916c:	f405 457e 	and.w	r5, r5, #65024	; 0xfe00
    9170:	4335      	orrs	r5, r6
    9172:	83e5      	strh	r5, [r4, #30]
    9174:	e7db      	b.n	912e <SPIClass::dma_rxisr()+0xd6>
    9176:	8bcc      	ldrh	r4, [r1, #30]
    9178:	f3c0 0008 	ubfx	r0, r0, #0, #9
    917c:	f404 447e 	and.w	r4, r4, #65024	; 0xfe00
    9180:	4320      	orrs	r0, r4
    9182:	83c8      	strh	r0, [r1, #30]
    9184:	e7c8      	b.n	9118 <SPIClass::dma_rxisr()+0xc0>
    9186:	bf00      	nop
    9188:	40008000 	.word	0x40008000
    918c:	ff0f0000 	.word	0xff0f0000
    9190:	00009041 	.word	0x00009041

00009194 <_spi_dma_rxISR0()>:
void _spi_dma_rxISR0(void) {SPI.dma_rxisr();}
    9194:	b508      	push	{r3, lr}
    9196:	4802      	ldr	r0, [pc, #8]	; (91a0 <_spi_dma_rxISR0()+0xc>)
    9198:	f7ff ff5e 	bl	9058 <SPIClass::dma_rxisr()>
    919c:	bd08      	pop	{r3, pc}
    919e:	bf00      	nop
    91a0:	1fffd370 	.word	0x1fffd370

000091a4 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v>:
		: port_addr(myport), hardware_addr(myhardware) {
    91a4:	4a0a      	ldr	r2, [pc, #40]	; (91d0 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x2c>)
SPIClass SPI((uintptr_t)&KINETISK_SPI0, (uintptr_t)&SPIClass::spi0_hardware);
    91a6:	490b      	ldr	r1, [pc, #44]	; (91d4 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x30>)
    91a8:	2300      	movs	r3, #0
}
    91aa:	b410      	push	{r4}
    91ac:	4c0a      	ldr	r4, [pc, #40]	; (91d8 <_GLOBAL__sub_I__Z15_spi_dma_rxISR0v+0x34>)
    91ae:	6093      	str	r3, [r2, #8]
    91b0:	8493      	strh	r3, [r2, #36]	; 0x24
    91b2:	6014      	str	r4, [r2, #0]
    91b4:	6051      	str	r1, [r2, #4]
    91b6:	bc10      	pop	{r4}
    91b8:	60d3      	str	r3, [r2, #12]
    91ba:	6193      	str	r3, [r2, #24]
    91bc:	6293      	str	r3, [r2, #40]	; 0x28
    91be:	62d3      	str	r3, [r2, #44]	; 0x2c
    91c0:	6313      	str	r3, [r2, #48]	; 0x30
    91c2:	6353      	str	r3, [r2, #52]	; 0x34
    91c4:	6113      	str	r3, [r2, #16]
    91c6:	6153      	str	r3, [r2, #20]
    91c8:	61d3      	str	r3, [r2, #28]
    91ca:	6213      	str	r3, [r2, #32]
    91cc:	4770      	bx	lr
    91ce:	bf00      	nop
    91d0:	1fffd370 	.word	0x1fffd370
    91d4:	0001535c 	.word	0x0001535c
    91d8:	4002c000 	.word	0x4002c000

000091dc <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)>:
#include "FilterOnePole.h"
#include "FloatDefine.h"

FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    91dc:	b538      	push	{r3, r4, r5, lr}
    91de:	4604      	mov	r4, r0
    91e0:	4608      	mov	r0, r1
  setFilter( ft, fc, initialValue );
}

void FilterOnePole::setFilter( FILTER_TYPE ft, float fc, float initialValue ) {
  FT = ft;
    91e2:	7020      	strb	r0, [r4, #0]

  return output();
}

void FilterOnePole::setFrequency( float newFrequency ) {
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    91e4:	490a      	ldr	r1, [pc, #40]	; (9210 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x34>)
    91e6:	4610      	mov	r0, r2
FilterOnePole::FilterOnePole( FILTER_TYPE ft, float fc, float initialValue ) {
    91e8:	461d      	mov	r5, r3
  setTau( 1.0/(TWO_PI*newFrequency ) ); // τ=1/ω
    91ea:	f003 fec5 	bl	cf78 <__aeabi_fmul>
    91ee:	4601      	mov	r1, r0
    91f0:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    91f4:	f003 ff74 	bl	d0e0 <__aeabi_fdiv>
}

void FilterOnePole::setTau( float newTau ) {
  TauUS = newTau * 1e6;
    91f8:	4906      	ldr	r1, [pc, #24]	; (9214 <FilterOnePole::FilterOnePole(FILTER_TYPE, float, float)+0x38>)
    91fa:	f003 febd 	bl	cf78 <__aeabi_fmul>
  Y = initialValue;
    91fe:	60e5      	str	r5, [r4, #12]
  TauUS = newTau * 1e6;
    9200:	6060      	str	r0, [r4, #4]
  Ylast = initialValue;
    9202:	6125      	str	r5, [r4, #16]
  X = initialValue;
    9204:	6165      	str	r5, [r4, #20]
  LastUS = micros();
    9206:	f001 f9d3 	bl	a5b0 <micros>
    920a:	61e0      	str	r0, [r4, #28]
}
    920c:	4620      	mov	r0, r4
    920e:	bd38      	pop	{r3, r4, r5, pc}
    9210:	40c90fdb 	.word	0x40c90fdb
    9214:	49742400 	.word	0x49742400

00009218 <FilterOnePole::output()>:
}

float FilterOnePole::output() {
    // figure out which button to read
  switch (FT) {
    9218:	7803      	ldrb	r3, [r0, #0]
float FilterOnePole::output() {
    921a:	b510      	push	{r4, lr}
    921c:	4604      	mov	r4, r0
  switch (FT) {
    921e:	2b03      	cmp	r3, #3
    9220:	d821      	bhi.n	9266 <FilterOnePole::output()+0x4e>
    9222:	e8df f003 	tbb	[pc, r3]
    9226:	1e19      	.short	0x1e19
    9228:	0211      	.short	0x0211
      // highpass is the _difference_
      return X-Y;
      break;
    case DIFFERENTIATOR:
      // like a highpass, but normalize
      return (X-Y)/(TauUS/1.0e6);
    922a:	68c1      	ldr	r1, [r0, #12]
    922c:	6940      	ldr	r0, [r0, #20]
    922e:	f003 fd99 	bl	cd64 <__aeabi_fsub>
    9232:	490e      	ldr	r1, [pc, #56]	; (926c <FilterOnePole::output()+0x54>)
    9234:	4603      	mov	r3, r0
    9236:	6860      	ldr	r0, [r4, #4]
    9238:	461c      	mov	r4, r3
    923a:	f003 ff51 	bl	d0e0 <__aeabi_fdiv>
    923e:	4601      	mov	r1, r0
    9240:	4620      	mov	r0, r4
    9242:	f003 ff4d 	bl	d0e0 <__aeabi_fdiv>
      break;
    default:
      // should never get to here, return 0 just in case
      return 0;
  }
}
    9246:	bd10      	pop	{r4, pc}
      return Y * (TauUS/1.0e6);
    9248:	4908      	ldr	r1, [pc, #32]	; (926c <FilterOnePole::output()+0x54>)
    924a:	6840      	ldr	r0, [r0, #4]
    924c:	f003 ff48 	bl	d0e0 <__aeabi_fdiv>
    9250:	68e1      	ldr	r1, [r4, #12]
    9252:	f003 fe91 	bl	cf78 <__aeabi_fmul>
}
    9256:	bd10      	pop	{r4, pc}
      return X-Y;
    9258:	68c1      	ldr	r1, [r0, #12]
    925a:	6940      	ldr	r0, [r0, #20]
    925c:	f003 fd82 	bl	cd64 <__aeabi_fsub>
}
    9260:	bd10      	pop	{r4, pc}
      return Y; 
    9262:	68c0      	ldr	r0, [r0, #12]
}
    9264:	bd10      	pop	{r4, pc}
  switch (FT) {
    9266:	2000      	movs	r0, #0
}
    9268:	bd10      	pop	{r4, pc}
    926a:	bf00      	nop
    926c:	49742400 	.word	0x49742400

00009270 <FilterOnePole::input(float)>:
float FilterOnePole::input( float inVal ) {
    9270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9272:	4604      	mov	r4, r0
    9274:	460e      	mov	r6, r1
  long time = micros();
    9276:	f001 f99b 	bl	a5b0 <micros>
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    927a:	69e3      	ldr	r3, [r4, #28]
  long time = micros();
    927c:	4605      	mov	r5, r0
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    927e:	1ac0      	subs	r0, r0, r3
    9280:	f003 fe26 	bl	ced0 <__aeabi_i2f>
  Ylast = Y;
    9284:	68e7      	ldr	r7, [r4, #12]
  ElapsedUS = float(time - LastUS);   // cast to float here, for math
    9286:	61a0      	str	r0, [r4, #24]
    9288:	4601      	mov	r1, r0
  LastUS = time;                      // update this now
    928a:	61e5      	str	r5, [r4, #28]
  TauSamps = TauUS / ElapsedUS;
    928c:	6860      	ldr	r0, [r4, #4]
  X = inVal;                          // this is now the most recent input value
    928e:	6166      	str	r6, [r4, #20]
  Ylast = Y;
    9290:	6127      	str	r7, [r4, #16]
  TauSamps = TauUS / ElapsedUS;
    9292:	f003 ff25 	bl	d0e0 <__aeabi_fdiv>
    9296:	4601      	mov	r1, r0
    9298:	60a0      	str	r0, [r4, #8]
  ampFactor = exp( -1.0 / TauSamps );      // this is 1 if called quickly
    929a:	480e      	ldr	r0, [pc, #56]	; (92d4 <FilterOnePole::input(float)+0x64>)
    929c:	f003 ff20 	bl	d0e0 <__aeabi_fdiv>
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
    92a0:	f003 f96a 	bl	c578 <expf>
    92a4:	4605      	mov	r5, r0
  Y = (1.0-ampFactor)*X + ampFactor*Ylast;     // set the new value
    92a6:	4601      	mov	r1, r0
    92a8:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    92ac:	f003 fd5a 	bl	cd64 <__aeabi_fsub>
    92b0:	4631      	mov	r1, r6
    92b2:	f003 fe61 	bl	cf78 <__aeabi_fmul>
    92b6:	4629      	mov	r1, r5
    92b8:	4606      	mov	r6, r0
    92ba:	4638      	mov	r0, r7
    92bc:	f003 fe5c 	bl	cf78 <__aeabi_fmul>
    92c0:	4601      	mov	r1, r0
    92c2:	4630      	mov	r0, r6
    92c4:	f003 fd50 	bl	cd68 <__addsf3>
    92c8:	60e0      	str	r0, [r4, #12]
  return output();
    92ca:	4620      	mov	r0, r4
}
    92cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  return output();
    92d0:	f7ff bfa2 	b.w	9218 <FilterOnePole::output()>
    92d4:	bf800000 	.word	0xbf800000

000092d8 <EventResponder::triggerEventNotImmediate()>:
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    92d8:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    92dc:	b672      	cpsid	i
extern const uint8_t _serialEventUSB2_default __attribute__((weak)) PROGMEM = 0 ;

void EventResponder::triggerEventNotImmediate()
{
	bool irq = disableInterrupts();
	if (_triggered == false) {
    92de:	7f43      	ldrb	r3, [r0, #29]
    92e0:	b95b      	cbnz	r3, 92fa <EventResponder::triggerEventNotImmediate()+0x22>
		// not already triggered
		if (_type == EventTypeYield) {
    92e2:	7f01      	ldrb	r1, [r0, #28]
    92e4:	2901      	cmp	r1, #1
{
    92e6:	b430      	push	{r4, r5}
		if (_type == EventTypeYield) {
    92e8:	d00b      	beq.n	9302 <EventResponder::triggerEventNotImmediate()+0x2a>
				_next = nullptr;
				_prev = lastYield;
				_prev->_next = this;
				lastYield = this;
			}
		} else if (_type == EventTypeInterrupt) {
    92ea:	2903      	cmp	r1, #3
    92ec:	d013      	beq.n	9316 <EventResponder::triggerEventNotImmediate()+0x3e>
			}
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
		} else {
			// detached, easy :-)
		}
		_triggered = true;
    92ee:	2301      	movs	r3, #1
    92f0:	7743      	strb	r3, [r0, #29]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    92f2:	b902      	cbnz	r2, 92f6 <EventResponder::triggerEventNotImmediate()+0x1e>
    92f4:	b662      	cpsie	i
	}
	enableInterrupts(irq);
}
    92f6:	bc30      	pop	{r4, r5}
    92f8:	4770      	bx	lr
    92fa:	b90a      	cbnz	r2, 9300 <EventResponder::triggerEventNotImmediate()+0x28>
    92fc:	b662      	cpsie	i
    92fe:	4770      	bx	lr
    9300:	4770      	bx	lr
			if (firstYield == nullptr) {
    9302:	4c12      	ldr	r4, [pc, #72]	; (934c <EventResponder::triggerEventNotImmediate()+0x74>)
    9304:	6821      	ldr	r1, [r4, #0]
    9306:	b1b1      	cbz	r1, 9336 <EventResponder::triggerEventNotImmediate()+0x5e>
				_prev = lastYield;
    9308:	4911      	ldr	r1, [pc, #68]	; (9350 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    930a:	6143      	str	r3, [r0, #20]
				_prev = lastYield;
    930c:	680b      	ldr	r3, [r1, #0]
    930e:	6183      	str	r3, [r0, #24]
				lastYield = this;
    9310:	6008      	str	r0, [r1, #0]
				_prev->_next = this;
    9312:	6158      	str	r0, [r3, #20]
				lastYield = this;
    9314:	e7eb      	b.n	92ee <EventResponder::triggerEventNotImmediate()+0x16>
			if (firstInterrupt == nullptr) {
    9316:	4d0f      	ldr	r5, [pc, #60]	; (9354 <EventResponder::triggerEventNotImmediate()+0x7c>)
    9318:	490f      	ldr	r1, [pc, #60]	; (9358 <EventResponder::triggerEventNotImmediate()+0x80>)
    931a:	682c      	ldr	r4, [r5, #0]
    931c:	b18c      	cbz	r4, 9342 <EventResponder::triggerEventNotImmediate()+0x6a>
				_next = nullptr;
    931e:	6143      	str	r3, [r0, #20]
				_prev = lastInterrupt;
    9320:	680b      	ldr	r3, [r1, #0]
    9322:	6183      	str	r3, [r0, #24]
				_prev->_next = this;
    9324:	6158      	str	r0, [r3, #20]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9326:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    932a:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
				lastInterrupt = this;
    932e:	6008      	str	r0, [r1, #0]
			SCB_ICSR = SCB_ICSR_PENDSVSET; // set PendSV interrupt
    9330:	f8c3 4d04 	str.w	r4, [r3, #3332]	; 0xd04
    9334:	e7db      	b.n	92ee <EventResponder::triggerEventNotImmediate()+0x16>
				lastYield = this;
    9336:	4b06      	ldr	r3, [pc, #24]	; (9350 <EventResponder::triggerEventNotImmediate()+0x78>)
				_next = nullptr;
    9338:	6141      	str	r1, [r0, #20]
				_prev = nullptr;
    933a:	6181      	str	r1, [r0, #24]
				firstYield = this;
    933c:	6020      	str	r0, [r4, #0]
				lastYield = this;
    933e:	6018      	str	r0, [r3, #0]
    9340:	e7d5      	b.n	92ee <EventResponder::triggerEventNotImmediate()+0x16>
				_next = nullptr;
    9342:	6144      	str	r4, [r0, #20]
				_prev = nullptr;
    9344:	6184      	str	r4, [r0, #24]
				firstInterrupt = this;
    9346:	6028      	str	r0, [r5, #0]
				lastInterrupt = this;
    9348:	e7ed      	b.n	9326 <EventResponder::triggerEventNotImmediate()+0x4e>
    934a:	bf00      	nop
    934c:	1fffd3a8 	.word	0x1fffd3a8
    9350:	1fffd3b8 	.word	0x1fffd3b8
    9354:	1fffd3b0 	.word	0x1fffd3b0
    9358:	1fffd3ac 	.word	0x1fffd3ac

0000935c <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    935c:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    935e:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    9362:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    9364:	4c0c      	ldr	r4, [pc, #48]	; (9398 <EventResponder::runFromInterrupt()+0x3c>)
    9366:	6820      	ldr	r0, [r4, #0]
		if (first) {
    9368:	b180      	cbz	r0, 938c <EventResponder::runFromInterrupt()+0x30>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    936a:	4e0c      	ldr	r6, [pc, #48]	; (939c <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    936c:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    936e:	6943      	ldr	r3, [r0, #20]
    9370:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    9372:	b173      	cbz	r3, 9392 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    9374:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    9376:	b902      	cbnz	r2, 937a <EventResponder::runFromInterrupt()+0x1e>
    9378:	b662      	cpsie	i
			}
			enableInterrupts(irq);
			first->_triggered = false;
			(*(first->_function))(*first);
    937a:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    937c:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    937e:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9380:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    9384:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    9386:	6820      	ldr	r0, [r4, #0]
		if (first) {
    9388:	2800      	cmp	r0, #0
    938a:	d1f0      	bne.n	936e <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    938c:	b902      	cbnz	r2, 9390 <EventResponder::runFromInterrupt()+0x34>
    938e:	b662      	cpsie	i
		} else {
			enableInterrupts(irq);
			break;
		}
	}
}
    9390:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    9392:	6033      	str	r3, [r6, #0]
    9394:	e7ef      	b.n	9376 <EventResponder::runFromInterrupt()+0x1a>
    9396:	bf00      	nop
    9398:	1fffd3b0 	.word	0x1fffd3b0
    939c:	1fffd3ac 	.word	0x1fffd3ac

000093a0 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    93a0:	f7ff bfdc 	b.w	935c <EventResponder::runFromInterrupt()>

000093a4 <systick_isr>:

extern "C" volatile uint32_t systick_millis_count;

void systick_isr(void)
{
	systick_millis_count++;
    93a4:	4a02      	ldr	r2, [pc, #8]	; (93b0 <systick_isr+0xc>)
    93a6:	6813      	ldr	r3, [r2, #0]
    93a8:	3301      	adds	r3, #1
    93aa:	6013      	str	r3, [r2, #0]
}
    93ac:	4770      	bx	lr
    93ae:	bf00      	nop
    93b0:	1fffd3c0 	.word	0x1fffd3c0

000093b4 <HardwareSerial2::begin(unsigned long)>:
HardwareSerial2 Serial2(&serialEvent2);

uint8_t _serialEvent2_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial2::begin(uint32_t baud) {
	serial2_begin(BAUD2DIV2(baud));
    93b4:	084b      	lsrs	r3, r1, #1
    93b6:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
    93ba:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
void HardwareSerial2::begin(uint32_t baud) {
    93be:	b510      	push	{r4, lr}
    93c0:	4604      	mov	r4, r0
	serial2_begin(BAUD2DIV2(baud));
    93c2:	fbb3 f0f1 	udiv	r0, r3, r1
    93c6:	f001 f95f 	bl	a688 <serial2_begin>
	if (!_serialEvent2_default) addToSerialEventsList();
    93ca:	4b04      	ldr	r3, [pc, #16]	; (93dc <HardwareSerial2::begin(unsigned long)+0x28>)
    93cc:	781b      	ldrb	r3, [r3, #0]
    93ce:	b103      	cbz	r3, 93d2 <HardwareSerial2::begin(unsigned long)+0x1e>
}
    93d0:	bd10      	pop	{r4, pc}
	if (!_serialEvent2_default) addToSerialEventsList();
    93d2:	4620      	mov	r0, r4
}
    93d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent2_default) addToSerialEventsList();
    93d8:	f003 b86c 	b.w	c4b4 <HardwareSerial::addToSerialEventsList()>
    93dc:	1fff89f9 	.word	0x1fff89f9

000093e0 <HardwareSerial2::write9bit(unsigned long)>:
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial2_putchar(c); return 1; }
    93e0:	b508      	push	{r3, lr}
    93e2:	4608      	mov	r0, r1
    93e4:	f001 fb3e 	bl	aa64 <serial2_putchar>
    93e8:	2001      	movs	r0, #1
    93ea:	bd08      	pop	{r3, pc}

000093ec <HardwareSerial2::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    93ec:	b508      	push	{r3, lr}
    93ee:	4608      	mov	r0, r1
    93f0:	f001 fb38 	bl	aa64 <serial2_putchar>
    93f4:	2001      	movs	r0, #1
    93f6:	bd08      	pop	{r3, pc}

000093f8 <HardwareSerial2::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    93f8:	b538      	push	{r3, r4, r5, lr}
    93fa:	4608      	mov	r0, r1
    93fc:	460d      	mov	r5, r1
    93fe:	f004 ff5f 	bl	e2c0 <strlen>
    9402:	4604      	mov	r4, r0
					  serial2_write((const uint8_t *)str, len);
    9404:	4601      	mov	r1, r0
    9406:	4628      	mov	r0, r5
    9408:	f001 fba8 	bl	ab5c <serial2_write>
					  return len; }
    940c:	4620      	mov	r0, r4
    940e:	bd38      	pop	{r3, r4, r5, pc}

00009410 <HardwareSerial2::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    9410:	b510      	push	{r4, lr}
    9412:	4608      	mov	r0, r1
    9414:	4614      	mov	r4, r2
					{ serial2_write(buffer, size); return size; }
    9416:	4611      	mov	r1, r2
    9418:	f001 fba0 	bl	ab5c <serial2_write>
    941c:	4620      	mov	r0, r4
    941e:	bd10      	pop	{r4, pc}

00009420 <HardwareSerial2::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial2_add_memory_for_write(buffer, length);}
    9420:	4608      	mov	r0, r1
    9422:	4611      	mov	r1, r2
    9424:	f001 bdc8 	b.w	afb8 <serial2_add_memory_for_write>

00009428 <HardwareSerial2::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial2_add_memory_for_read(buffer, length);}
    9428:	4608      	mov	r0, r1
    942a:	4611      	mov	r1, r2
    942c:	f001 bda8 	b.w	af80 <serial2_add_memory_for_read>

00009430 <HardwareSerial2::clear()>:
	virtual void clear(void)	{ serial2_clear(); }
    9430:	f001 bcc0 	b.w	adb4 <serial2_clear>

00009434 <HardwareSerial2::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial2_set_cts(pin); }
    9434:	b508      	push	{r3, lr}
    9436:	4608      	mov	r0, r1
    9438:	f001 faf4 	bl	aa24 <serial2_set_cts>
    943c:	3800      	subs	r0, #0
    943e:	bf18      	it	ne
    9440:	2001      	movne	r0, #1
    9442:	bd08      	pop	{r3, pc}

00009444 <HardwareSerial2::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial2_set_rts(pin); }
    9444:	b508      	push	{r3, lr}
    9446:	4608      	mov	r0, r1
    9448:	f001 faca 	bl	a9e0 <serial2_set_rts>
    944c:	3800      	subs	r0, #0
    944e:	bf18      	it	ne
    9450:	2001      	movne	r0, #1
    9452:	bd08      	pop	{r3, pc}

00009454 <HardwareSerial2::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial2_set_tx(pin, opendrain); }
    9454:	4608      	mov	r0, r1
    9456:	4611      	mov	r1, r2
    9458:	f001 ba56 	b.w	a908 <serial2_set_tx>

0000945c <HardwareSerial2::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial2_set_rx(pin); }
    945c:	4608      	mov	r0, r1
    945e:	f001 ba91 	b.w	a984 <serial2_set_rx>
    9462:	bf00      	nop

00009464 <HardwareSerial2::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial2_set_transmit_pin(pin); }
    9464:	4608      	mov	r0, r1
    9466:	f001 ba33 	b.w	a8d0 <serial2_set_transmit_pin>
    946a:	bf00      	nop

0000946c <HardwareSerial2::end()>:
	virtual void end(void)		{ serial2_end(); }
    946c:	f001 b9c8 	b.w	a800 <serial2_end>

00009470 <HardwareSerial2::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    9470:	b510      	push	{r4, lr}
					  serial2_begin(BAUD2DIV2(baud));
    9472:	084b      	lsrs	r3, r1, #1
    9474:	f103 6337 	add.w	r3, r3, #191889408	; 0xb700000
	virtual void begin(uint32_t baud, uint32_t format) {
    9478:	4614      	mov	r4, r2
					  serial2_begin(BAUD2DIV2(baud));
    947a:	f503 33d8 	add.w	r3, r3, #110592	; 0x1b000
    947e:	fbb3 f0f1 	udiv	r0, r3, r1
    9482:	f001 f901 	bl	a688 <serial2_begin>
					  serial2_format(format); }
    9486:	4620      	mov	r0, r4
    9488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    948c:	f001 b96a 	b.w	a764 <serial2_format>

00009490 <HardwareSerial2::peek()>:
	virtual int peek(void)          { return serial2_peek(); }
    9490:	f001 bc6a 	b.w	ad68 <serial2_peek>

00009494 <HardwareSerial2::read()>:
	virtual int read(void)          { return serial2_getchar(); }
    9494:	f001 bc22 	b.w	acdc <serial2_getchar>

00009498 <HardwareSerial2::available()>:
	virtual int available(void)     { return serial2_available(); }
    9498:	f001 bc0c 	b.w	acb4 <serial2_available>

0000949c <HardwareSerial2::flush()>:
	virtual void flush(void)        { serial2_flush(); }
    949c:	f001 bbe6 	b.w	ac6c <serial2_flush>

000094a0 <HardwareSerial2::availableForWrite()>:
	virtual int availableForWrite(void) { return serial2_write_buffer_free(); }
    94a0:	f001 bbf0 	b.w	ac84 <serial2_write_buffer_free>

000094a4 <HardwareSerial2::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    94a4:	6803      	ldr	r3, [r0, #0]
    94a6:	4a06      	ldr	r2, [pc, #24]	; (94c0 <HardwareSerial2::write(int)+0x1c>)
    94a8:	681b      	ldr	r3, [r3, #0]
    94aa:	4293      	cmp	r3, r2
    94ac:	d105      	bne.n	94ba <HardwareSerial2::write(int)+0x16>
    94ae:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    94b0:	b2c8      	uxtb	r0, r1
    94b2:	f001 fad7 	bl	aa64 <serial2_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    94b6:	2001      	movs	r0, #1
    94b8:	bd10      	pop	{r4, pc}
    94ba:	b2c9      	uxtb	r1, r1
    94bc:	4718      	bx	r3
    94be:	bf00      	nop
    94c0:	000093ed 	.word	0x000093ed

000094c4 <HardwareSerial2::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    94c4:	6803      	ldr	r3, [r0, #0]
    94c6:	4a06      	ldr	r2, [pc, #24]	; (94e0 <HardwareSerial2::write(unsigned long)+0x1c>)
    94c8:	681b      	ldr	r3, [r3, #0]
    94ca:	4293      	cmp	r3, r2
    94cc:	d105      	bne.n	94da <HardwareSerial2::write(unsigned long)+0x16>
    94ce:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    94d0:	b2c8      	uxtb	r0, r1
    94d2:	f001 fac7 	bl	aa64 <serial2_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    94d6:	2001      	movs	r0, #1
    94d8:	bd10      	pop	{r4, pc}
    94da:	b2c9      	uxtb	r1, r1
    94dc:	4718      	bx	r3
    94de:	bf00      	nop
    94e0:	000093ed 	.word	0x000093ed

000094e4 <HardwareSerial2::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    94e4:	6803      	ldr	r3, [r0, #0]
    94e6:	4a06      	ldr	r2, [pc, #24]	; (9500 <HardwareSerial2::write(long)+0x1c>)
    94e8:	681b      	ldr	r3, [r3, #0]
    94ea:	4293      	cmp	r3, r2
    94ec:	d105      	bne.n	94fa <HardwareSerial2::write(long)+0x16>
    94ee:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    94f0:	b2c8      	uxtb	r0, r1
    94f2:	f001 fab7 	bl	aa64 <serial2_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    94f6:	2001      	movs	r0, #1
    94f8:	bd10      	pop	{r4, pc}
    94fa:	b2c9      	uxtb	r1, r1
    94fc:	4718      	bx	r3
    94fe:	bf00      	nop
    9500:	000093ed 	.word	0x000093ed

00009504 <HardwareSerial2::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9504:	6803      	ldr	r3, [r0, #0]
    9506:	4a06      	ldr	r2, [pc, #24]	; (9520 <HardwareSerial2::write(unsigned int)+0x1c>)
    9508:	681b      	ldr	r3, [r3, #0]
    950a:	4293      	cmp	r3, r2
    950c:	d105      	bne.n	951a <HardwareSerial2::write(unsigned int)+0x16>
    950e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial2_putchar(c); return 1; }
    9510:	b2c8      	uxtb	r0, r1
    9512:	f001 faa7 	bl	aa64 <serial2_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9516:	2001      	movs	r0, #1
    9518:	bd10      	pop	{r4, pc}
    951a:	b2c9      	uxtb	r1, r1
    951c:	4718      	bx	r3
    951e:	bf00      	nop
    9520:	000093ed 	.word	0x000093ed

00009524 <HardwareSerial3::begin(unsigned long)>:
HardwareSerial3 Serial3(&serialEvent3);

uint8_t _serialEvent3_default __attribute__((weak)) PROGMEM = 0 ;

void HardwareSerial3::begin(uint32_t baud) { 
	serial3_begin(BAUD2DIV3(baud));
    9524:	084b      	lsrs	r3, r1, #1
    9526:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
    952a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
void HardwareSerial3::begin(uint32_t baud) { 
    952e:	b510      	push	{r4, lr}
    9530:	4604      	mov	r4, r0
	serial3_begin(BAUD2DIV3(baud));
    9532:	fbb3 f0f1 	udiv	r0, r3, r1
    9536:	f001 fdc5 	bl	b0c4 <serial3_begin>
	if (!_serialEvent3_default) addToSerialEventsList();
    953a:	4b04      	ldr	r3, [pc, #16]	; (954c <HardwareSerial3::begin(unsigned long)+0x28>)
    953c:	781b      	ldrb	r3, [r3, #0]
    953e:	b103      	cbz	r3, 9542 <HardwareSerial3::begin(unsigned long)+0x1e>
}
    9540:	bd10      	pop	{r4, pc}
	if (!_serialEvent3_default) addToSerialEventsList();
    9542:	4620      	mov	r0, r4
}
    9544:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	if (!_serialEvent3_default) addToSerialEventsList();
    9548:	f002 bfb4 	b.w	c4b4 <HardwareSerial::addToSerialEventsList()>
    954c:	1fff89fa 	.word	0x1fff89fa

00009550 <HardwareSerial3::write9bit(unsigned long)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
					{ serial3_write(buffer, size); return size; }
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
					  serial3_write((const uint8_t *)str, len);
					  return len; }
	virtual size_t write9bit(uint32_t c)	{ serial3_putchar(c); return 1; }
    9550:	b508      	push	{r3, lr}
    9552:	4608      	mov	r0, r1
    9554:	f001 ff12 	bl	b37c <serial3_putchar>
    9558:	2001      	movs	r0, #1
    955a:	bd08      	pop	{r3, pc}

0000955c <HardwareSerial3::write(unsigned char)>:
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    955c:	b508      	push	{r3, lr}
    955e:	4608      	mov	r0, r1
    9560:	f001 ff0c 	bl	b37c <serial3_putchar>
    9564:	2001      	movs	r0, #1
    9566:	bd08      	pop	{r3, pc}

00009568 <HardwareSerial3::write(char const*)>:
        virtual size_t write(const char *str)	{ size_t len = strlen(str);
    9568:	b538      	push	{r3, r4, r5, lr}
    956a:	4608      	mov	r0, r1
    956c:	460d      	mov	r5, r1
    956e:	f004 fea7 	bl	e2c0 <strlen>
    9572:	4604      	mov	r4, r0
					  serial3_write((const uint8_t *)str, len);
    9574:	4601      	mov	r1, r0
    9576:	4628      	mov	r0, r5
    9578:	f001 ff0a 	bl	b390 <serial3_write>
					  return len; }
    957c:	4620      	mov	r0, r4
    957e:	bd38      	pop	{r3, r4, r5, pc}

00009580 <HardwareSerial3::write(unsigned char const*, unsigned int)>:
	virtual size_t write(const uint8_t *buffer, size_t size)
    9580:	b510      	push	{r4, lr}
    9582:	4608      	mov	r0, r1
    9584:	4614      	mov	r4, r2
					{ serial3_write(buffer, size); return size; }
    9586:	4611      	mov	r1, r2
    9588:	f001 ff02 	bl	b390 <serial3_write>
    958c:	4620      	mov	r0, r4
    958e:	bd10      	pop	{r4, pc}

00009590 <HardwareSerial3::addMemoryForWrite(void*, unsigned int)>:
	virtual void addMemoryForWrite(void *buffer, size_t length){serial3_add_memory_for_write(buffer, length);}
    9590:	4608      	mov	r0, r1
    9592:	4611      	mov	r1, r2
    9594:	f002 b876 	b.w	b684 <serial3_add_memory_for_write>

00009598 <HardwareSerial3::addMemoryForRead(void*, unsigned int)>:
 	virtual void addMemoryForRead(void *buffer, size_t length) {serial3_add_memory_for_read(buffer, length);}
    9598:	4608      	mov	r0, r1
    959a:	4611      	mov	r1, r2
    959c:	f002 b856 	b.w	b64c <serial3_add_memory_for_read>

000095a0 <HardwareSerial3::clear()>:
	virtual void clear(void)	{ serial3_clear(); }
    95a0:	f001 bfae 	b.w	b500 <serial3_clear>

000095a4 <HardwareSerial3::attachCts(unsigned char)>:
	virtual bool attachCts(uint8_t pin) { return serial3_set_cts(pin); }
    95a4:	b508      	push	{r3, lr}
    95a6:	4608      	mov	r0, r1
    95a8:	f001 fec8 	bl	b33c <serial3_set_cts>
    95ac:	3800      	subs	r0, #0
    95ae:	bf18      	it	ne
    95b0:	2001      	movne	r0, #1
    95b2:	bd08      	pop	{r3, pc}

000095b4 <HardwareSerial3::attachRts(unsigned char)>:
	virtual bool attachRts(uint8_t pin) { return serial3_set_rts(pin); }
    95b4:	b508      	push	{r3, lr}
    95b6:	4608      	mov	r0, r1
    95b8:	f001 fe9e 	bl	b2f8 <serial3_set_rts>
    95bc:	3800      	subs	r0, #0
    95be:	bf18      	it	ne
    95c0:	2001      	movne	r0, #1
    95c2:	bd08      	pop	{r3, pc}

000095c4 <HardwareSerial3::setTX(unsigned char, bool)>:
	virtual void setTX(uint8_t pin, bool opendrain=false) { serial3_set_tx(pin, opendrain); }
    95c4:	4608      	mov	r0, r1
    95c6:	4611      	mov	r1, r2
    95c8:	f001 be68 	b.w	b29c <serial3_set_tx>

000095cc <HardwareSerial3::setRX(unsigned char)>:
	virtual void setRX(uint8_t pin) { serial3_set_rx(pin); }
    95cc:	4608      	mov	r0, r1
    95ce:	f001 be91 	b.w	b2f4 <serial3_set_rx>
    95d2:	bf00      	nop

000095d4 <HardwareSerial3::transmitterEnable(unsigned char)>:
	virtual void transmitterEnable(uint8_t pin) { serial3_set_transmit_pin(pin); }
    95d4:	4608      	mov	r0, r1
    95d6:	f001 be45 	b.w	b264 <serial3_set_transmit_pin>
    95da:	bf00      	nop

000095dc <HardwareSerial3::end()>:
	virtual void end(void)          { serial3_end(); }
    95dc:	f001 be0c 	b.w	b1f8 <serial3_end>

000095e0 <HardwareSerial3::begin(unsigned long, unsigned long)>:
	virtual void begin(uint32_t baud, uint32_t format) {
    95e0:	b510      	push	{r4, lr}
					  serial3_begin(BAUD2DIV3(baud));
    95e2:	084b      	lsrs	r3, r1, #1
    95e4:	f103 63b7 	add.w	r3, r3, #95944704	; 0x5b80000
	virtual void begin(uint32_t baud, uint32_t format) {
    95e8:	4614      	mov	r4, r2
					  serial3_begin(BAUD2DIV3(baud));
    95ea:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    95ee:	fbb3 f0f1 	udiv	r0, r3, r1
    95f2:	f001 fd67 	bl	b0c4 <serial3_begin>
					  serial3_format(format); }
    95f6:	4620      	mov	r0, r4
    95f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    95fc:	f001 bdae 	b.w	b15c <serial3_format>

00009600 <HardwareSerial3::peek()>:
	virtual int peek(void)          { return serial3_peek(); }
    9600:	f001 bf58 	b.w	b4b4 <serial3_peek>

00009604 <HardwareSerial3::read()>:
	virtual int read(void)          { return serial3_getchar(); }
    9604:	f001 bf10 	b.w	b428 <serial3_getchar>

00009608 <HardwareSerial3::available()>:
	virtual int available(void)     { return serial3_available(); }
    9608:	f001 befa 	b.w	b400 <serial3_available>

0000960c <HardwareSerial3::flush()>:
	virtual void flush(void)        { serial3_flush(); }
    960c:	f001 bed4 	b.w	b3b8 <serial3_flush>

00009610 <HardwareSerial3::availableForWrite()>:
	virtual int availableForWrite(void) { return serial3_write_buffer_free(); }
    9610:	f001 bede 	b.w	b3d0 <serial3_write_buffer_free>

00009614 <HardwareSerial3::write(int)>:
	virtual size_t write(int n)             { return write((uint8_t)n); }
    9614:	6803      	ldr	r3, [r0, #0]
    9616:	4a06      	ldr	r2, [pc, #24]	; (9630 <HardwareSerial3::write(int)+0x1c>)
    9618:	681b      	ldr	r3, [r3, #0]
    961a:	4293      	cmp	r3, r2
    961c:	d105      	bne.n	962a <HardwareSerial3::write(int)+0x16>
    961e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9620:	b2c8      	uxtb	r0, r1
    9622:	f001 feab 	bl	b37c <serial3_putchar>
	virtual size_t write(int n)             { return write((uint8_t)n); }
    9626:	2001      	movs	r0, #1
    9628:	bd10      	pop	{r4, pc}
    962a:	b2c9      	uxtb	r1, r1
    962c:	4718      	bx	r3
    962e:	bf00      	nop
    9630:	0000955d 	.word	0x0000955d

00009634 <HardwareSerial3::write(unsigned long)>:
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    9634:	6803      	ldr	r3, [r0, #0]
    9636:	4a06      	ldr	r2, [pc, #24]	; (9650 <HardwareSerial3::write(unsigned long)+0x1c>)
    9638:	681b      	ldr	r3, [r3, #0]
    963a:	4293      	cmp	r3, r2
    963c:	d105      	bne.n	964a <HardwareSerial3::write(unsigned long)+0x16>
    963e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9640:	b2c8      	uxtb	r0, r1
    9642:	f001 fe9b 	bl	b37c <serial3_putchar>
	virtual size_t write(unsigned long n)   { return write((uint8_t)n); }
    9646:	2001      	movs	r0, #1
    9648:	bd10      	pop	{r4, pc}
    964a:	b2c9      	uxtb	r1, r1
    964c:	4718      	bx	r3
    964e:	bf00      	nop
    9650:	0000955d 	.word	0x0000955d

00009654 <HardwareSerial3::write(long)>:
	virtual size_t write(long n)            { return write((uint8_t)n); }
    9654:	6803      	ldr	r3, [r0, #0]
    9656:	4a06      	ldr	r2, [pc, #24]	; (9670 <HardwareSerial3::write(long)+0x1c>)
    9658:	681b      	ldr	r3, [r3, #0]
    965a:	4293      	cmp	r3, r2
    965c:	d105      	bne.n	966a <HardwareSerial3::write(long)+0x16>
    965e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9660:	b2c8      	uxtb	r0, r1
    9662:	f001 fe8b 	bl	b37c <serial3_putchar>
	virtual size_t write(long n)            { return write((uint8_t)n); }
    9666:	2001      	movs	r0, #1
    9668:	bd10      	pop	{r4, pc}
    966a:	b2c9      	uxtb	r1, r1
    966c:	4718      	bx	r3
    966e:	bf00      	nop
    9670:	0000955d 	.word	0x0000955d

00009674 <HardwareSerial3::write(unsigned int)>:
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9674:	6803      	ldr	r3, [r0, #0]
    9676:	4a06      	ldr	r2, [pc, #24]	; (9690 <HardwareSerial3::write(unsigned int)+0x1c>)
    9678:	681b      	ldr	r3, [r3, #0]
    967a:	4293      	cmp	r3, r2
    967c:	d105      	bne.n	968a <HardwareSerial3::write(unsigned int)+0x16>
    967e:	b510      	push	{r4, lr}
	virtual size_t write(uint8_t c) { serial3_putchar(c); return 1; }
    9680:	b2c8      	uxtb	r0, r1
    9682:	f001 fe7b 	bl	b37c <serial3_putchar>
	virtual size_t write(unsigned int n)    { return write((uint8_t)n); }
    9686:	2001      	movs	r0, #1
    9688:	bd10      	pop	{r4, pc}
    968a:	b2c9      	uxtb	r1, r1
    968c:	4718      	bx	r3
    968e:	bf00      	nop
    9690:	0000955d 	.word	0x0000955d

00009694 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>:
        return write(p, sizeof(buf) - (p - buf));
}

#else

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    9694:	b570      	push	{r4, r5, r6, lr}
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    9696:	2a01      	cmp	r2, #1
size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
    9698:	b08a      	sub	sp, #40	; 0x28
		base = 10;
    969a:	bf08      	it	eq
    969c:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    969e:	b3a1      	cbz	r1, 970a <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x76>
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
    96a0:	f04f 0e21 	mov.w	lr, #33	; 0x21
    96a4:	e002      	b.n	96ac <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    96a6:	fa5f fe86 	uxtb.w	lr, r6
			n /= base;
    96aa:	4629      	mov	r1, r5
			digit = n % base;
    96ac:	fbb1 f5f2 	udiv	r5, r1, r2
    96b0:	fb02 1415 	mls	r4, r2, r5, r1
    96b4:	fa5f fc84 	uxtb.w	ip, r4
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    96b8:	2c09      	cmp	r4, #9
    96ba:	f10c 0430 	add.w	r4, ip, #48	; 0x30
    96be:	bf98      	it	ls
    96c0:	fa5f fc84 	uxtbls.w	ip, r4
    96c4:	f10e 0428 	add.w	r4, lr, #40	; 0x28
    96c8:	bf88      	it	hi
    96ca:	f10c 0c37 	addhi.w	ip, ip, #55	; 0x37
    96ce:	446c      	add	r4, sp
    96d0:	bf88      	it	hi
    96d2:	fa5f fc8c 	uxtbhi.w	ip, ip
			if (n == 0) break;
    96d6:	4291      	cmp	r1, r2
			i--;
    96d8:	f10e 36ff 	add.w	r6, lr, #4294967295
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    96dc:	f804 cc24 	strb.w	ip, [r4, #-36]
			if (n == 0) break;
    96e0:	d2e1      	bcs.n	96a6 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x12>
		}
	}
	if (sign) {
    96e2:	b14b      	cbz	r3, 96f8 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x64>
		i--;
    96e4:	f10e 3eff 	add.w	lr, lr, #4294967295
    96e8:	fa5f fe8e 	uxtb.w	lr, lr
		buf[i] = '-';
    96ec:	f10e 0328 	add.w	r3, lr, #40	; 0x28
    96f0:	446b      	add	r3, sp
    96f2:	222d      	movs	r2, #45	; 0x2d
    96f4:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    96f8:	6803      	ldr	r3, [r0, #0]
    96fa:	a901      	add	r1, sp, #4
    96fc:	685b      	ldr	r3, [r3, #4]
    96fe:	f1ce 0222 	rsb	r2, lr, #34	; 0x22
    9702:	4471      	add	r1, lr
    9704:	4798      	blx	r3
}
    9706:	b00a      	add	sp, #40	; 0x28
    9708:	bd70      	pop	{r4, r5, r6, pc}
		buf[sizeof(buf) - 1] = '0';
    970a:	2230      	movs	r2, #48	; 0x30
    970c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
		i = sizeof(buf) - 1;
    9710:	f04f 0e21 	mov.w	lr, #33	; 0x21
    9714:	e7e5      	b.n	96e2 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]+0x4e>
    9716:	bf00      	nop

00009718 <Print::print(long)>:
	if (n < 0) {
    9718:	2900      	cmp	r1, #0
		n = -n;
    971a:	bfba      	itte	lt
    971c:	4249      	neglt	r1, r1
		sign = '-';
    971e:	232d      	movlt	r3, #45	; 0x2d
	uint8_t sign=0;
    9720:	2300      	movge	r3, #0
	if (base == 0) {
    9722:	220a      	movs	r2, #10
    9724:	f7ff bfb6 	b.w	9694 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>

00009728 <Print::println()>:
{
    9728:	b500      	push	{lr}
	return write(buf, 2);
    972a:	6803      	ldr	r3, [r0, #0]
{
    972c:	b083      	sub	sp, #12
	uint8_t buf[2]={'\r', '\n'};
    972e:	f640 220d 	movw	r2, #2573	; 0xa0d
    9732:	f8ad 2004 	strh.w	r2, [sp, #4]
	return write(buf, 2);
    9736:	685b      	ldr	r3, [r3, #4]
    9738:	2202      	movs	r2, #2
    973a:	a901      	add	r1, sp, #4
    973c:	4798      	blx	r3
}
    973e:	b003      	add	sp, #12
    9740:	f85d fb04 	ldr.w	pc, [sp], #4

00009744 <_write>:
	return ((class Print *)file)->write((uint8_t *)ptr, len);
    9744:	4b03      	ldr	r3, [pc, #12]	; (9754 <_write+0x10>)
    9746:	2802      	cmp	r0, #2
    9748:	bf88      	it	hi
    974a:	4603      	movhi	r3, r0
    974c:	4618      	mov	r0, r3
    974e:	681b      	ldr	r3, [r3, #0]
    9750:	685b      	ldr	r3, [r3, #4]
    9752:	4718      	bx	r3
    9754:	1fff89fc 	.word	0x1fff89fc

00009758 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	if (base == 0) {
    9758:	b932      	cbnz	r2, 9768 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x10>
		return write((uint8_t)n);
    975a:	6803      	ldr	r3, [r0, #0]
{
    975c:	b500      	push	{lr}
		return write((uint8_t)n);
    975e:	681b      	ldr	r3, [r3, #0]
}
    9760:	f85d eb04 	ldr.w	lr, [sp], #4
		return write((uint8_t)n);
    9764:	b2c9      	uxtb	r1, r1
    9766:	4718      	bx	r3
    9768:	f7ff bf94 	b.w	9694 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    976c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00009770 <Print::printFloat(double, unsigned char)>:
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    9770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    9774:	4619      	mov	r1, r3
{
    9776:	b087      	sub	sp, #28
    9778:	4606      	mov	r6, r0
	if (isnan(number)) return print("nan");
    977a:	4610      	mov	r0, r2
{
    977c:	4614      	mov	r4, r2
    977e:	469a      	mov	sl, r3
	if (isnan(number)) return print("nan");
    9780:	f003 fab6 	bl	ccf0 <__aeabi_dcmpun>
{
    9784:	f89d 7040 	ldrb.w	r7, [sp, #64]	; 0x40
	if (isnan(number)) return print("nan");
    9788:	2800      	cmp	r0, #0
    978a:	f040 80a9 	bne.w	98e0 <Print::printFloat(double, unsigned char)+0x170>
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
    978e:	f02a 4500 	bic.w	r5, sl, #2147483648	; 0x80000000
    	if (isinf(number)) return print("inf");
    9792:	4b5f      	ldr	r3, [pc, #380]	; (9910 <Print::printFloat(double, unsigned char)+0x1a0>)
    9794:	4620      	mov	r0, r4
    9796:	4629      	mov	r1, r5
    9798:	f04f 32ff 	mov.w	r2, #4294967295
    979c:	f003 faa8 	bl	ccf0 <__aeabi_dcmpun>
    97a0:	b948      	cbnz	r0, 97b6 <Print::printFloat(double, unsigned char)+0x46>
    97a2:	4b5b      	ldr	r3, [pc, #364]	; (9910 <Print::printFloat(double, unsigned char)+0x1a0>)
    97a4:	4620      	mov	r0, r4
    97a6:	4629      	mov	r1, r5
    97a8:	f04f 32ff 	mov.w	r2, #4294967295
    97ac:	f003 fa82 	bl	ccb4 <__aeabi_dcmple>
    97b0:	2800      	cmp	r0, #0
    97b2:	f000 808e 	beq.w	98d2 <Print::printFloat(double, unsigned char)+0x162>
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    97b6:	4b57      	ldr	r3, [pc, #348]	; (9914 <Print::printFloat(double, unsigned char)+0x1a4>)
    97b8:	4620      	mov	r0, r4
    97ba:	4651      	mov	r1, sl
    97bc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    97c0:	f003 fa8c 	bl	ccdc <__aeabi_dcmpgt>
    97c4:	2800      	cmp	r0, #0
    97c6:	d17b      	bne.n	98c0 <Print::printFloat(double, unsigned char)+0x150>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    97c8:	4b53      	ldr	r3, [pc, #332]	; (9918 <Print::printFloat(double, unsigned char)+0x1a8>)
    97ca:	4620      	mov	r0, r4
    97cc:	4651      	mov	r1, sl
    97ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
    97d2:	f003 fa65 	bl	cca0 <__aeabi_dcmplt>
    97d6:	2800      	cmp	r0, #0
    97d8:	d172      	bne.n	98c0 <Print::printFloat(double, unsigned char)+0x150>
	
	// Handle negative numbers
	if (number < 0.0) {
    97da:	4620      	mov	r0, r4
    97dc:	4651      	mov	r1, sl
    97de:	2200      	movs	r2, #0
    97e0:	2300      	movs	r3, #0
    97e2:	f003 fa5d 	bl	cca0 <__aeabi_dcmplt>
    97e6:	4605      	mov	r5, r0
    97e8:	2800      	cmp	r0, #0
    97ea:	d175      	bne.n	98d8 <Print::printFloat(double, unsigned char)+0x168>
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    97ec:	2f00      	cmp	r7, #0
    97ee:	d07a      	beq.n	98e6 <Print::printFloat(double, unsigned char)+0x176>
		rounding *= 0.1;
    97f0:	f20f 1914 	addw	r9, pc, #276	; 0x114
    97f4:	e9d9 8900 	ldrd	r8, r9, [r9]
	double rounding = 0.5;
    97f8:	4948      	ldr	r1, [pc, #288]	; (991c <Print::printFloat(double, unsigned char)+0x1ac>)
	for (uint8_t i=0; i<digits; ++i) {
    97fa:	f04f 0b00 	mov.w	fp, #0
	double rounding = 0.5;
    97fe:	2000      	movs	r0, #0
		rounding *= 0.1;
    9800:	464b      	mov	r3, r9
	for (uint8_t i=0; i<digits; ++i) {
    9802:	f10b 0b01 	add.w	fp, fp, #1
		rounding *= 0.1;
    9806:	4642      	mov	r2, r8
    9808:	f00a f806 	bl	13818 <__aeabi_dmul>
	for (uint8_t i=0; i<digits; ++i) {
    980c:	fa5f f38b 	uxtb.w	r3, fp
    9810:	42bb      	cmp	r3, r7
    9812:	d3f5      	bcc.n	9800 <Print::printFloat(double, unsigned char)+0x90>
	}
	number += rounding;
    9814:	4602      	mov	r2, r0
    9816:	460b      	mov	r3, r1
    9818:	4620      	mov	r0, r4
    981a:	4651      	mov	r1, sl
    981c:	f003 f82a 	bl	c874 <__adddf3>
    9820:	4689      	mov	r9, r1
    9822:	4680      	mov	r8, r0

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    9824:	f003 fa7a 	bl	cd1c <__aeabi_d2uiz>
    9828:	2f0f      	cmp	r7, #15
    982a:	bf28      	it	cs
    982c:	270f      	movcs	r7, #15
    982e:	4682      	mov	sl, r0
	double remainder = number - (double)int_part;
    9830:	9701      	str	r7, [sp, #4]
    9832:	f003 f95b 	bl	caec <__aeabi_ui2d>
    9836:	4602      	mov	r2, r0
    9838:	460b      	mov	r3, r1
    983a:	4640      	mov	r0, r8
    983c:	4649      	mov	r1, r9
    983e:	f003 f817 	bl	c870 <__aeabi_dsub>
    9842:	462b      	mov	r3, r5
    9844:	4680      	mov	r8, r0
    9846:	4689      	mov	r9, r1
    9848:	220a      	movs	r2, #10
    984a:	4651      	mov	r1, sl
    984c:	4630      	mov	r0, r6
    984e:	f7ff ff21 	bl	9694 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    9852:	232e      	movs	r3, #46	; 0x2e
	double remainder = number - (double)int_part;
    9854:	464d      	mov	r5, r9
		buf[0] = '.';
    9856:	f88d 3008 	strb.w	r3, [sp, #8]
    985a:	f10d 0209 	add.w	r2, sp, #9

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    985e:	1e7b      	subs	r3, r7, #1
			remainder *= 10.0;
    9860:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 9920 <Print::printFloat(double, unsigned char)+0x1b0>
	double remainder = number - (double)int_part;
    9864:	4644      	mov	r4, r8
	if (base == 0) {
    9866:	4683      	mov	fp, r0
		while (digits-- > 0) {
    9868:	fa52 fa83 	uxtab	sl, r2, r3
    986c:	af02      	add	r7, sp, #8
			remainder *= 10.0;
    986e:	f04f 0800 	mov.w	r8, #0
    9872:	4642      	mov	r2, r8
    9874:	464b      	mov	r3, r9
    9876:	4620      	mov	r0, r4
    9878:	4629      	mov	r1, r5
    987a:	f009 ffcd 	bl	13818 <__aeabi_dmul>
    987e:	460d      	mov	r5, r1
    9880:	4604      	mov	r4, r0
			n = (uint8_t)(remainder);
    9882:	f003 fa4b 	bl	cd1c <__aeabi_d2uiz>
    9886:	b2c0      	uxtb	r0, r0
			buf[count++] = '0' + n;
    9888:	f100 0330 	add.w	r3, r0, #48	; 0x30
    988c:	f807 3f01 	strb.w	r3, [r7, #1]!
			remainder -= n; 
    9890:	f003 f93c 	bl	cb0c <__aeabi_i2d>
    9894:	4602      	mov	r2, r0
    9896:	460b      	mov	r3, r1
    9898:	4620      	mov	r0, r4
    989a:	4629      	mov	r1, r5
    989c:	f002 ffe8 	bl	c870 <__aeabi_dsub>
		while (digits-- > 0) {
    98a0:	45ba      	cmp	sl, r7
			remainder -= n; 
    98a2:	4604      	mov	r4, r0
    98a4:	460d      	mov	r5, r1
		while (digits-- > 0) {
    98a6:	d1e4      	bne.n	9872 <Print::printFloat(double, unsigned char)+0x102>
			buf[count++] = '0' + n;
    98a8:	9a01      	ldr	r2, [sp, #4]
		}
		count += write(buf, count);
    98aa:	6833      	ldr	r3, [r6, #0]
			buf[count++] = '0' + n;
    98ac:	3201      	adds	r2, #1
		count += write(buf, count);
    98ae:	685b      	ldr	r3, [r3, #4]
    98b0:	b2d2      	uxtb	r2, r2
    98b2:	a902      	add	r1, sp, #8
    98b4:	4630      	mov	r0, r6
    98b6:	4798      	blx	r3
	}
	return count;
}
    98b8:	4658      	mov	r0, fp
    98ba:	b007      	add	sp, #28
    98bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
							  return write((const uint8_t *)str, strlen(str)); }
    98c0:	6833      	ldr	r3, [r6, #0]
    98c2:	4918      	ldr	r1, [pc, #96]	; (9924 <Print::printFloat(double, unsigned char)+0x1b4>)
    98c4:	685b      	ldr	r3, [r3, #4]
    98c6:	2203      	movs	r2, #3
    98c8:	4630      	mov	r0, r6
    98ca:	b007      	add	sp, #28
    98cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98d0:	4718      	bx	r3
    98d2:	6833      	ldr	r3, [r6, #0]
    98d4:	4914      	ldr	r1, [pc, #80]	; (9928 <Print::printFloat(double, unsigned char)+0x1b8>)
    98d6:	e7f5      	b.n	98c4 <Print::printFloat(double, unsigned char)+0x154>
		number = -number;
    98d8:	f10a 4a00 	add.w	sl, sl, #2147483648	; 0x80000000
		sign = 1;
    98dc:	2501      	movs	r5, #1
    98de:	e785      	b.n	97ec <Print::printFloat(double, unsigned char)+0x7c>
    98e0:	6833      	ldr	r3, [r6, #0]
    98e2:	4912      	ldr	r1, [pc, #72]	; (992c <Print::printFloat(double, unsigned char)+0x1bc>)
    98e4:	e7ee      	b.n	98c4 <Print::printFloat(double, unsigned char)+0x154>
	number += rounding;
    98e6:	4b0d      	ldr	r3, [pc, #52]	; (991c <Print::printFloat(double, unsigned char)+0x1ac>)
    98e8:	2200      	movs	r2, #0
    98ea:	4620      	mov	r0, r4
    98ec:	4651      	mov	r1, sl
    98ee:	f002 ffc1 	bl	c874 <__adddf3>
	unsigned long int_part = (unsigned long)number;
    98f2:	f003 fa13 	bl	cd1c <__aeabi_d2uiz>
    98f6:	462b      	mov	r3, r5
    98f8:	4601      	mov	r1, r0
    98fa:	220a      	movs	r2, #10
    98fc:	4630      	mov	r0, r6
}
    98fe:	b007      	add	sp, #28
    9900:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9904:	f7ff bec6 	b.w	9694 <Print::printNumber(unsigned long, unsigned char, unsigned char) [clone .part.0]>
    9908:	a0000000 	.word	0xa0000000
    990c:	3fb99999 	.word	0x3fb99999
    9910:	7fefffff 	.word	0x7fefffff
    9914:	41efffff 	.word	0x41efffff
    9918:	c1efffff 	.word	0xc1efffff
    991c:	3fe00000 	.word	0x3fe00000
    9920:	40240000 	.word	0x40240000
    9924:	000154b0 	.word	0x000154b0
    9928:	000154ac 	.word	0x000154ac
    992c:	000154a8 	.word	0x000154a8

00009930 <Stream::timedPeek()>:
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
{
    9930:	b570      	push	{r4, r5, r6, lr}
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9932:	4d0e      	ldr	r5, [pc, #56]	; (996c <Stream::timedPeek()+0x3c>)
    9934:	b082      	sub	sp, #8
    9936:	682b      	ldr	r3, [r5, #0]
    9938:	9300      	str	r3, [sp, #0]
	return ret;
    993a:	9e00      	ldr	r6, [sp, #0]
    993c:	4604      	mov	r4, r0
    993e:	e008      	b.n	9952 <Stream::timedPeek()+0x22>
  int c;
  unsigned long startMillis = millis();
  do {
    c = peek();
    if (c >= 0) return c;
    yield();
    9940:	f002 fd40 	bl	c3c4 <yield>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    9944:	682b      	ldr	r3, [r5, #0]
    9946:	9301      	str	r3, [sp, #4]
	return ret;
    9948:	9b01      	ldr	r3, [sp, #4]
  } while(millis() - startMillis < _timeout);
    994a:	68a2      	ldr	r2, [r4, #8]
    994c:	1b9b      	subs	r3, r3, r6
    994e:	4293      	cmp	r3, r2
    9950:	d207      	bcs.n	9962 <Stream::timedPeek()+0x32>
    c = peek();
    9952:	6823      	ldr	r3, [r4, #0]
    9954:	4620      	mov	r0, r4
    9956:	699b      	ldr	r3, [r3, #24]
    9958:	4798      	blx	r3
    if (c >= 0) return c;
    995a:	2800      	cmp	r0, #0
    995c:	dbf0      	blt.n	9940 <Stream::timedPeek()+0x10>
  return -1;     // -1 indicates timeout
}
    995e:	b002      	add	sp, #8
    9960:	bd70      	pop	{r4, r5, r6, pc}
  return -1;     // -1 indicates timeout
    9962:	f04f 30ff 	mov.w	r0, #4294967295
}
    9966:	b002      	add	sp, #8
    9968:	bd70      	pop	{r4, r5, r6, pc}
    996a:	bf00      	nop
    996c:	1fffd3c0 	.word	0x1fffd3c0

00009970 <Stream::parseInt(char)>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
    9970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9972:	4604      	mov	r4, r0
    9974:	460d      	mov	r5, r1
int Stream::peekNextDigit()
    9976:	e006      	b.n	9986 <Stream::parseInt(char)+0x16>
    if (c == '-') return c;
    9978:	2b2d      	cmp	r3, #45	; 0x2d
    997a:	d00f      	beq.n	999c <Stream::parseInt(char)+0x2c>
    if (c >= '0' && c <= '9') return c;
    997c:	2a09      	cmp	r2, #9
    997e:	d90d      	bls.n	999c <Stream::parseInt(char)+0x2c>
    read();  // discard non-numeric
    9980:	6823      	ldr	r3, [r4, #0]
    9982:	695b      	ldr	r3, [r3, #20]
    9984:	4798      	blx	r3
    c = timedPeek();
    9986:	4620      	mov	r0, r4
    9988:	f7ff ffd2 	bl	9930 <Stream::timedPeek()>
    if (c < 0) return c;  // timeout
    998c:	1e03      	subs	r3, r0, #0
    if (c >= '0' && c <= '9') return c;
    998e:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    read();  // discard non-numeric
    9992:	4620      	mov	r0, r4
    if (c < 0) return c;  // timeout
    9994:	daf0      	bge.n	9978 <Stream::parseInt(char)+0x8>
  int c;

  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout
    9996:	2700      	movs	r7, #0
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
    value = -value;
  return value;
}
    9998:	4638      	mov	r0, r7
    999a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(c == skipChar)
    999c:	2700      	movs	r7, #0
    999e:	463e      	mov	r6, r7
    99a0:	42ab      	cmp	r3, r5
    99a2:	d00b      	beq.n	99bc <Stream::parseInt(char)+0x4c>
    else if(c == '-')
    99a4:	2b2d      	cmp	r3, #45	; 0x2d
    99a6:	d01c      	beq.n	99e2 <Stream::parseInt(char)+0x72>
    else if(c >= '0' && c <= '9')        // is c a digit?
    99a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    99ac:	2a09      	cmp	r2, #9
    99ae:	d805      	bhi.n	99bc <Stream::parseInt(char)+0x4c>
      value = value * 10 + c - '0';
    99b0:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    99b4:	eb03 0347 	add.w	r3, r3, r7, lsl #1
    99b8:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
    read();  // consume the character we got with peek
    99bc:	6823      	ldr	r3, [r4, #0]
    99be:	4620      	mov	r0, r4
    99c0:	695b      	ldr	r3, [r3, #20]
    99c2:	4798      	blx	r3
    c = timedPeek();
    99c4:	4620      	mov	r0, r4
    99c6:	f7ff ffb3 	bl	9930 <Stream::timedPeek()>
  while( (c >= '0' && c <= '9') || c == skipChar );
    99ca:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    99ce:	2a09      	cmp	r2, #9
    c = timedPeek();
    99d0:	4603      	mov	r3, r0
  while( (c >= '0' && c <= '9') || c == skipChar );
    99d2:	d9e5      	bls.n	99a0 <Stream::parseInt(char)+0x30>
    99d4:	42a8      	cmp	r0, r5
    99d6:	d0f1      	beq.n	99bc <Stream::parseInt(char)+0x4c>
  if(isNegative)
    99d8:	2e00      	cmp	r6, #0
    99da:	d0dd      	beq.n	9998 <Stream::parseInt(char)+0x28>
    value = -value;
    99dc:	427f      	negs	r7, r7
}
    99de:	4638      	mov	r0, r7
    99e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      isNegative = true;
    99e2:	2601      	movs	r6, #1
    99e4:	e7ea      	b.n	99bc <Stream::parseInt(char)+0x4c>
    99e6:	bf00      	nop

000099e8 <Stream::parseInt()>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
    99e8:	2101      	movs	r1, #1
    99ea:	f7ff bfc1 	b.w	9970 <Stream::parseInt(char)>
    99ee:	bf00      	nop

000099f0 <analog_init>:
void analog_init(void)
{
	uint32_t num;

	#if defined(__MK20DX128__) || defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	VREF_TRM = 0x60;
    99f0:	4b2a      	ldr	r3, [pc, #168]	; (9a9c <analog_init+0xac>)
	VREF_SC = 0xE1;		// enable 1.2 volt ref
	#endif

	if (analog_config_bits == 8) {
    99f2:	4a2b      	ldr	r2, [pc, #172]	; (9aa0 <analog_init+0xb0>)
	VREF_TRM = 0x60;
    99f4:	2060      	movs	r0, #96	; 0x60
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    99f6:	21e1      	movs	r1, #225	; 0xe1
	VREF_TRM = 0x60;
    99f8:	7018      	strb	r0, [r3, #0]
	VREF_SC = 0xE1;		// enable 1.2 volt ref
    99fa:	7059      	strb	r1, [r3, #1]
	if (analog_config_bits == 8) {
    99fc:	7813      	ldrb	r3, [r2, #0]
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    99fe:	4829      	ldr	r0, [pc, #164]	; (9aa4 <analog_init+0xb4>)
	if (analog_config_bits == 8) {
    9a00:	2b08      	cmp	r3, #8
    9a02:	d034      	beq.n	9a6e <analog_init+0x7e>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 10) {
    9a04:	2b0a      	cmp	r3, #10
    9a06:	d020      	beq.n	9a4a <analog_init+0x5a>
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
		#endif
	} else if (analog_config_bits == 12) {
    9a08:	2b0c      	cmp	r3, #12
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    9a0a:	4b27      	ldr	r3, [pc, #156]	; (9aa8 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_12BIT + ADC_CFG1_MODE(1) + ADC_CFG1_ADLSMP;
    9a0c:	bf0c      	ite	eq
    9a0e:	2135      	moveq	r1, #53	; 0x35
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
		#endif
	} else {
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    9a10:	213d      	movne	r1, #61	; 0x3d
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    9a12:	2212      	movs	r2, #18
		ADC0_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    9a14:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    9a16:	60c2      	str	r2, [r0, #12]
		#ifdef HAS_KINETIS_ADC1
		ADC1_CFG1 = ADC_CFG1_16BIT + ADC_CFG1_MODE(3) + ADC_CFG1_ADLSMP;
    9a18:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(2);
    9a1a:	60da      	str	r2, [r3, #12]
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
	}
	#elif defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	if (analog_reference_internal) {
    9a1c:	4b23      	ldr	r3, [pc, #140]	; (9aac <analog_init+0xbc>)
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    9a1e:	4921      	ldr	r1, [pc, #132]	; (9aa4 <analog_init+0xb4>)
	if (analog_reference_internal) {
    9a20:	781b      	ldrb	r3, [r3, #0]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    9a22:	4a21      	ldr	r2, [pc, #132]	; (9aa8 <analog_init+0xb8>)
	if (analog_reference_internal) {
    9a24:	b1cb      	cbz	r3, 9a5a <analog_init+0x6a>
		ADC0_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    9a26:	2301      	movs	r3, #1
    9a28:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(1); // 1.2V ref
    9a2a:	6213      	str	r3, [r2, #32]
	} else {
		ADC0_SC2 = ADC_SC2_REFSEL(1); // vcc
	}
	#endif

	num = analog_num_average;
    9a2c:	4b20      	ldr	r3, [pc, #128]	; (9ab0 <analog_init+0xc0>)
	if (num <= 1) {
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    9a2e:	491d      	ldr	r1, [pc, #116]	; (9aa4 <analog_init+0xb4>)
	num = analog_num_average;
    9a30:	781b      	ldrb	r3, [r3, #0]
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    9a32:	4a1d      	ldr	r2, [pc, #116]	; (9aa8 <analog_init+0xb8>)
	if (num <= 1) {
    9a34:	2b01      	cmp	r3, #1
    9a36:	d913      	bls.n	9a60 <analog_init+0x70>
		#endif
	} else if (num <= 4) {
    9a38:	2b04      	cmp	r3, #4
    9a3a:	d81b      	bhi.n	9a74 <analog_init+0x84>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    9a3c:	2384      	movs	r3, #132	; 0x84
    9a3e:	624b      	str	r3, [r1, #36]	; 0x24
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(0);
    9a40:	6253      	str	r3, [r2, #36]	; 0x24
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#ifdef HAS_KINETIS_ADC1
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
		#endif
	}
	calibrating = 1;
    9a42:	4b1c      	ldr	r3, [pc, #112]	; (9ab4 <analog_init+0xc4>)
    9a44:	2201      	movs	r2, #1
    9a46:	701a      	strb	r2, [r3, #0]
}
    9a48:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9a4a:	4b17      	ldr	r3, [pc, #92]	; (9aa8 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9a4c:	2139      	movs	r1, #57	; 0x39
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    9a4e:	2213      	movs	r2, #19
		ADC0_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9a50:	6081      	str	r1, [r0, #8]
		ADC0_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    9a52:	60c2      	str	r2, [r0, #12]
		ADC1_CFG1 = ADC_CFG1_10BIT + ADC_CFG1_MODE(2) + ADC_CFG1_ADLSMP;
    9a54:	6099      	str	r1, [r3, #8]
		ADC1_CFG2 = ADC_CFG2_MUXSEL + ADC_CFG2_ADLSTS(3);
    9a56:	60da      	str	r2, [r3, #12]
    9a58:	e7e0      	b.n	9a1c <analog_init+0x2c>
		ADC0_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    9a5a:	620b      	str	r3, [r1, #32]
		ADC1_SC2 = ADC_SC2_REFSEL(0); // vcc/ext ref
    9a5c:	6213      	str	r3, [r2, #32]
    9a5e:	e7e5      	b.n	9a2c <analog_init+0x3c>
		ADC0_SC3 = ADC_SC3_CAL;  // begin cal
    9a60:	2380      	movs	r3, #128	; 0x80
    9a62:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL;  // begin cal
    9a64:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    9a66:	4b13      	ldr	r3, [pc, #76]	; (9ab4 <analog_init+0xc4>)
    9a68:	2201      	movs	r2, #1
    9a6a:	701a      	strb	r2, [r3, #0]
}
    9a6c:	4770      	bx	lr
		ADC1_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    9a6e:	4b0e      	ldr	r3, [pc, #56]	; (9aa8 <analog_init+0xb8>)
		ADC0_CFG1 = ADC_CFG1_8BIT + ADC_CFG1_MODE(0);
    9a70:	2101      	movs	r1, #1
    9a72:	e7ec      	b.n	9a4e <analog_init+0x5e>
	} else if (num <= 8) {
    9a74:	2b08      	cmp	r3, #8
    9a76:	d806      	bhi.n	9a86 <analog_init+0x96>
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    9a78:	2385      	movs	r3, #133	; 0x85
    9a7a:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(1);
    9a7c:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    9a7e:	4b0d      	ldr	r3, [pc, #52]	; (9ab4 <analog_init+0xc4>)
    9a80:	2201      	movs	r2, #1
    9a82:	701a      	strb	r2, [r3, #0]
}
    9a84:	4770      	bx	lr
	} else if (num <= 16) {
    9a86:	2b10      	cmp	r3, #16
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(2);
    9a88:	bf94      	ite	ls
    9a8a:	2386      	movls	r3, #134	; 0x86
		ADC0_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    9a8c:	2387      	movhi	r3, #135	; 0x87
    9a8e:	624b      	str	r3, [r1, #36]	; 0x24
		ADC1_SC3 = ADC_SC3_CAL + ADC_SC3_AVGE + ADC_SC3_AVGS(3);
    9a90:	6253      	str	r3, [r2, #36]	; 0x24
	calibrating = 1;
    9a92:	4b08      	ldr	r3, [pc, #32]	; (9ab4 <analog_init+0xc4>)
    9a94:	2201      	movs	r2, #1
    9a96:	701a      	strb	r2, [r3, #0]
}
    9a98:	4770      	bx	lr
    9a9a:	bf00      	nop
    9a9c:	40074000 	.word	0x40074000
    9aa0:	1fff88e4 	.word	0x1fff88e4
    9aa4:	4003b000 	.word	0x4003b000
    9aa8:	400bb000 	.word	0x400bb000
    9aac:	1fffd3bc 	.word	0x1fffd3bc
    9ab0:	1fff88e5 	.word	0x1fff88e5
    9ab4:	1fffd3bd 	.word	0x1fffd3bd

00009ab8 <analogWriteDAC0>:
typedef int16_t __attribute__((__may_alias__)) aliased_int16_t;

void analogWriteDAC0(int val)
{
#if defined(__MK20DX256__) || defined(__MK64FX512__) || defined(__MK66FX1M0__)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    9ab8:	4a0b      	ldr	r2, [pc, #44]	; (9ae8 <analogWriteDAC0+0x30>)
	if (analog_reference_internal) {
    9aba:	490c      	ldr	r1, [pc, #48]	; (9aec <analogWriteDAC0+0x34>)
	SIM_SCGC2 |= SIM_SCGC2_DAC0;
    9abc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    9abe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    9ac2:	62d3      	str	r3, [r2, #44]	; 0x2c
	if (analog_reference_internal) {
    9ac4:	780b      	ldrb	r3, [r1, #0]
    9ac6:	b14b      	cbz	r3, 9adc <analogWriteDAC0+0x24>
		DAC0_C0 = DAC_C0_DACEN;  // 1.2V ref is DACREF_1
    9ac8:	4b09      	ldr	r3, [pc, #36]	; (9af0 <analogWriteDAC0+0x38>)
    9aca:	2280      	movs	r2, #128	; 0x80
    9acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	} else {
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
	}
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    9ad0:	4b07      	ldr	r3, [pc, #28]	; (9af0 <analogWriteDAC0+0x38>)
	__asm__ ("usat    %[value], #12, %[value]\n\t" : [value] "+r" (val));  // 0 <= val <= 4095
    9ad2:	f380 000c 	usat	r0, #12, r0
	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
    9ad6:	b200      	sxth	r0, r0
    9ad8:	8018      	strh	r0, [r3, #0]
	if (val < 0) val = 0;
	else if (val > 4095) val = 4095;

	*(volatile aliased_int16_t *)&(DAC0_DAT0L) = val;
#endif
}
    9ada:	4770      	bx	lr
		DAC0_C0 = DAC_C0_DACEN | DAC_C0_DACRFS; // 3.3V VDDA is DACREF_2
    9adc:	4b04      	ldr	r3, [pc, #16]	; (9af0 <analogWriteDAC0+0x38>)
    9ade:	22c0      	movs	r2, #192	; 0xc0
    9ae0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    9ae4:	e7f4      	b.n	9ad0 <analogWriteDAC0+0x18>
    9ae6:	bf00      	nop
    9ae8:	40048000 	.word	0x40048000
    9aec:	1fffd3bc 	.word	0x1fffd3bc
    9af0:	400cc000 	.word	0x400cc000

00009af4 <eeprom_initialize>:
//
#define HANDLE_UNALIGNED_WRITES


void eeprom_initialize(void)
{
    9af4:	b510      	push	{r4, lr}
	uint32_t count=0;
	uint16_t do_flash_cmd[] = {
    9af6:	4b17      	ldr	r3, [pc, #92]	; (9b54 <eeprom_initialize+0x60>)
    9af8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
    9afa:	b084      	sub	sp, #16
	uint16_t do_flash_cmd[] = {
    9afc:	46ec      	mov	ip, sp
    9afe:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		0xf06f, 0x037f, 0x7003, 0x7803,
		0xf013, 0x0f80, 0xd0fb, 0x4770};
	uint8_t status;

	if (FTFL_FCNFG & FTFL_FCNFG_RAMRDY) {
    9b02:	4b15      	ldr	r3, [pc, #84]	; (9b58 <eeprom_initialize+0x64>)
    9b04:	785a      	ldrb	r2, [r3, #1]
    9b06:	0791      	lsls	r1, r2, #30
    9b08:	d517      	bpl.n	9b3a <eeprom_initialize+0x46>
		uint8_t stat = FTFL_FSTAT & 0x70;
    9b0a:	781a      	ldrb	r2, [r3, #0]
		if (stat) FTFL_FSTAT = stat;
		// FlexRAM is configured as traditional RAM
		// We need to reconfigure for EEPROM usage
		kinetis_hsrun_disable();
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    9b0c:	4c12      	ldr	r4, [pc, #72]	; (9b58 <eeprom_initialize+0x64>)
		if (stat) FTFL_FSTAT = stat;
    9b0e:	f012 0270 	ands.w	r2, r2, #112	; 0x70
    9b12:	bf18      	it	ne
    9b14:	701a      	strbne	r2, [r3, #0]
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    9b16:	2180      	movs	r1, #128	; 0x80
		FTFL_FCCOB3 = 0;
    9b18:	2300      	movs	r3, #0
		FTFL_FCCOB0 = 0x80; // PGMPART = Program Partition Command
    9b1a:	71e1      	strb	r1, [r4, #7]
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    9b1c:	2233      	movs	r2, #51	; 0x33
		FTFL_FCCOB3 = 0;
    9b1e:	7123      	strb	r3, [r4, #4]
		FTFL_FCCOB5 = EEPARTITION;
    9b20:	2303      	movs	r3, #3
		FTFL_FCCOB4 = EEESPLIT | EEESIZE;
    9b22:	72e2      	strb	r2, [r4, #11]
		FTFL_FCCOB5 = EEPARTITION;
    9b24:	72a3      	strb	r3, [r4, #10]
		__disable_irq();
    9b26:	b672      	cpsid	i
		// do_flash_cmd() must execute from RAM.  Luckily the C syntax is simple...
		(*((void (*)(volatile uint8_t *))((uint32_t)do_flash_cmd | 1)))(&FTFL_FSTAT);
    9b28:	f04c 0301 	orr.w	r3, ip, #1
    9b2c:	4620      	mov	r0, r4
    9b2e:	4798      	blx	r3
		__enable_irq();
    9b30:	b662      	cpsie	i
		kinetis_hsrun_enable();
		status = FTFL_FSTAT;
    9b32:	7823      	ldrb	r3, [r4, #0]
		if (status & 0x70) {
    9b34:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    9b38:	d109      	bne.n	9b4e <eeprom_initialize+0x5a>
{
    9b3a:	4b08      	ldr	r3, [pc, #32]	; (9b5c <eeprom_initialize+0x68>)
			FTFL_FSTAT = (status & 0x70);
			return; // error
		}
	}
	// wait for eeprom to become ready (is this really necessary?)
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9b3c:	4906      	ldr	r1, [pc, #24]	; (9b58 <eeprom_initialize+0x64>)
    9b3e:	e001      	b.n	9b44 <eeprom_initialize+0x50>
		if (++count > 200000) break;
    9b40:	3b01      	subs	r3, #1
    9b42:	d002      	beq.n	9b4a <eeprom_initialize+0x56>
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9b44:	784a      	ldrb	r2, [r1, #1]
    9b46:	07d2      	lsls	r2, r2, #31
    9b48:	d5fa      	bpl.n	9b40 <eeprom_initialize+0x4c>
	}
}
    9b4a:	b004      	add	sp, #16
    9b4c:	bd10      	pop	{r4, pc}
			FTFL_FSTAT = (status & 0x70);
    9b4e:	7023      	strb	r3, [r4, #0]
}
    9b50:	b004      	add	sp, #16
    9b52:	bd10      	pop	{r4, pc}
    9b54:	000154b4 	.word	0x000154b4
    9b58:	40020000 	.word	0x40020000
    9b5c:	00030d41 	.word	0x00030d41

00009b60 <eeprom_read_byte>:
#define FlexRAM ((volatile uint8_t *)0x14000000)

uint8_t eeprom_read_byte(const uint8_t *addr)
{
	uint32_t offset = (uint32_t)addr;
	if (offset >= EEPROM_SIZE) return 0;
    9b60:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    9b64:	d211      	bcs.n	9b8a <eeprom_read_byte+0x2a>
{
    9b66:	b510      	push	{r4, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9b68:	4b09      	ldr	r3, [pc, #36]	; (9b90 <eeprom_read_byte+0x30>)
    9b6a:	785b      	ldrb	r3, [r3, #1]
    9b6c:	07db      	lsls	r3, r3, #31
    9b6e:	4604      	mov	r4, r0
    9b70:	d504      	bpl.n	9b7c <eeprom_read_byte+0x1c>
	return FlexRAM[offset];
    9b72:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    9b76:	7820      	ldrb	r0, [r4, #0]
    9b78:	b2c0      	uxtb	r0, r0
}
    9b7a:	bd10      	pop	{r4, pc}
	return FlexRAM[offset];
    9b7c:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9b80:	f7ff ffb8 	bl	9af4 <eeprom_initialize>
	return FlexRAM[offset];
    9b84:	7820      	ldrb	r0, [r4, #0]
    9b86:	b2c0      	uxtb	r0, r0
}
    9b88:	bd10      	pop	{r4, pc}
	if (offset >= EEPROM_SIZE) return 0;
    9b8a:	2000      	movs	r0, #0
}
    9b8c:	4770      	bx	lr
    9b8e:	bf00      	nop
    9b90:	40020000 	.word	0x40020000

00009b94 <eeprom_write_byte>:

void eeprom_write_byte(uint8_t *addr, uint8_t value)
{
	uint32_t offset = (uint32_t)addr;

	if (offset >= EEPROM_SIZE) return;
    9b94:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    9b98:	d21f      	bcs.n	9bda <eeprom_write_byte+0x46>
{
    9b9a:	b538      	push	{r3, r4, r5, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9b9c:	4b0f      	ldr	r3, [pc, #60]	; (9bdc <eeprom_write_byte+0x48>)
    9b9e:	785b      	ldrb	r3, [r3, #1]
    9ba0:	07da      	lsls	r2, r3, #31
    9ba2:	4604      	mov	r4, r0
    9ba4:	460d      	mov	r5, r1
    9ba6:	d510      	bpl.n	9bca <eeprom_write_byte+0x36>
	if (FlexRAM[offset] != value) {
    9ba8:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
    9bac:	7823      	ldrb	r3, [r4, #0]
    9bae:	42ab      	cmp	r3, r5
    9bb0:	d00a      	beq.n	9bc8 <eeprom_write_byte+0x34>
		kinetis_hsrun_disable();
		uint8_t stat = FTFL_FSTAT & 0x70;
    9bb2:	4a0a      	ldr	r2, [pc, #40]	; (9bdc <eeprom_write_byte+0x48>)
    9bb4:	7813      	ldrb	r3, [r2, #0]
		if (stat) FTFL_FSTAT = stat;
    9bb6:	f013 0370 	ands.w	r3, r3, #112	; 0x70
    9bba:	bf18      	it	ne
    9bbc:	7013      	strbne	r3, [r2, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9bbe:	4a07      	ldr	r2, [pc, #28]	; (9bdc <eeprom_write_byte+0x48>)
		FlexRAM[offset] = value;
    9bc0:	7025      	strb	r5, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9bc2:	7853      	ldrb	r3, [r2, #1]
    9bc4:	07db      	lsls	r3, r3, #31
    9bc6:	d5fc      	bpl.n	9bc2 <eeprom_write_byte+0x2e>
		flexram_wait();
		kinetis_hsrun_enable();
	}
}
    9bc8:	bd38      	pop	{r3, r4, r5, pc}
	if (FlexRAM[offset] != value) {
    9bca:	f104 54a0 	add.w	r4, r4, #335544320	; 0x14000000
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9bce:	f7ff ff91 	bl	9af4 <eeprom_initialize>
	if (FlexRAM[offset] != value) {
    9bd2:	7823      	ldrb	r3, [r4, #0]
    9bd4:	42ab      	cmp	r3, r5
    9bd6:	d1ec      	bne.n	9bb2 <eeprom_write_byte+0x1e>
    9bd8:	e7f6      	b.n	9bc8 <eeprom_write_byte+0x34>
    9bda:	4770      	bx	lr
    9bdc:	40020000 	.word	0x40020000

00009be0 <eeprom_write_block>:
void eeprom_write_block(const void *buf, void *addr, uint32_t len)
{
	uint32_t offset = (uint32_t)addr;
	const uint8_t *src = (const uint8_t *)buf;

	if (offset >= EEPROM_SIZE) return;
    9be0:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    9be4:	d276      	bcs.n	9cd4 <eeprom_write_block+0xf4>
{
    9be6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9be8:	4b3b      	ldr	r3, [pc, #236]	; (9cd8 <eeprom_write_block+0xf8>)
    9bea:	785b      	ldrb	r3, [r3, #1]
    9bec:	07db      	lsls	r3, r3, #31
    9bee:	460e      	mov	r6, r1
    9bf0:	4604      	mov	r4, r0
    9bf2:	4617      	mov	r7, r2
    9bf4:	460d      	mov	r5, r1
    9bf6:	d51f      	bpl.n	9c38 <eeprom_write_block+0x58>
	if (len >= EEPROM_SIZE) len = EEPROM_SIZE;
    9bf8:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
    9bfc:	4638      	mov	r0, r7
    9bfe:	bf28      	it	cs
    9c00:	f44f 6000 	movcs.w	r0, #2048	; 0x800
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    9c04:	1833      	adds	r3, r6, r0
    9c06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    9c0a:	d212      	bcs.n	9c32 <eeprom_write_block+0x52>
	while (len > 0) {
    9c0c:	b187      	cbz	r7, 9c30 <eeprom_write_block+0x50>
		} else {
			// write 8 bits
			uint8_t val8 = *src++;
			if (FlexRAM[offset] != val8) {
				kinetis_hsrun_disable();
				uint8_t stat = FTFL_FSTAT & 0x70;
    9c0e:	4a32      	ldr	r2, [pc, #200]	; (9cd8 <eeprom_write_block+0xf8>)
		if (lsb == 0 && len >= 4) {
    9c10:	f015 0303 	ands.w	r3, r5, #3
    9c14:	d026      	beq.n	9c64 <eeprom_write_block+0x84>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    9c16:	2b02      	cmp	r3, #2
    9c18:	d011      	beq.n	9c3e <eeprom_write_block+0x5e>
			if (FlexRAM[offset] != val8) {
    9c1a:	f105 53a0 	add.w	r3, r5, #335544320	; 0x14000000
			uint8_t val8 = *src++;
    9c1e:	f814 1b01 	ldrb.w	r1, [r4], #1
			if (FlexRAM[offset] != val8) {
    9c22:	781e      	ldrb	r6, [r3, #0]
    9c24:	428e      	cmp	r6, r1
    9c26:	d137      	bne.n	9c98 <eeprom_write_block+0xb8>
				FlexRAM[offset] = val8;
				flexram_wait();
				kinetis_hsrun_enable();
			}
			offset++;
			len--;
    9c28:	3801      	subs	r0, #1
			offset++;
    9c2a:	3501      	adds	r5, #1
	while (len > 0) {
    9c2c:	2800      	cmp	r0, #0
    9c2e:	d1ef      	bne.n	9c10 <eeprom_write_block+0x30>
		}
	}
}
    9c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (offset + len >= EEPROM_SIZE) len = EEPROM_SIZE - offset;
    9c32:	f5c6 6000 	rsb	r0, r6, #2048	; 0x800
	while (len > 0) {
    9c36:	e7ea      	b.n	9c0e <eeprom_write_block+0x2e>
	if (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) eeprom_initialize();
    9c38:	f7ff ff5c 	bl	9af4 <eeprom_initialize>
    9c3c:	e7dc      	b.n	9bf8 <eeprom_write_block+0x18>
		} else if ((lsb == 0 || lsb == 2) && len >= 2) {
    9c3e:	2801      	cmp	r0, #1
    9c40:	d0eb      	beq.n	9c1a <eeprom_write_block+0x3a>
			val16 |= (*src++ << 8);
    9c42:	4621      	mov	r1, r4
			if (*(uint16_t *)(&FlexRAM[offset]) != val16) {
    9c44:	f105 56a0 	add.w	r6, r5, #335544320	; 0x14000000
    9c48:	7867      	ldrb	r7, [r4, #1]
    9c4a:	f811 3b02 	ldrb.w	r3, [r1], #2
    9c4e:	8834      	ldrh	r4, [r6, #0]
    9c50:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    9c54:	429c      	cmp	r4, r3
    9c56:	d129      	bne.n	9cac <eeprom_write_block+0xcc>
			len -= 2;
    9c58:	3802      	subs	r0, #2
			offset += 2;
    9c5a:	3502      	adds	r5, #2
			val16 |= (*src++ << 8);
    9c5c:	460c      	mov	r4, r1
	while (len > 0) {
    9c5e:	2800      	cmp	r0, #0
    9c60:	d1d6      	bne.n	9c10 <eeprom_write_block+0x30>
    9c62:	e7e5      	b.n	9c30 <eeprom_write_block+0x50>
		if (lsb == 0 && len >= 4) {
    9c64:	2803      	cmp	r0, #3
    9c66:	d9ea      	bls.n	9c3e <eeprom_write_block+0x5e>
			val32 |= (*src++ << 24);
    9c68:	4621      	mov	r1, r4
    9c6a:	f894 c001 	ldrb.w	ip, [r4, #1]
    9c6e:	f811 3b04 	ldrb.w	r3, [r1], #4
    9c72:	78a7      	ldrb	r7, [r4, #2]
    9c74:	78e6      	ldrb	r6, [r4, #3]
    9c76:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    9c7a:	f105 54a0 	add.w	r4, r5, #335544320	; 0x14000000
			val32 |= (*src++ << 24);
    9c7e:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
    9c82:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
			if (*(uint32_t *)(&FlexRAM[offset]) != val32) {
    9c86:	6826      	ldr	r6, [r4, #0]
    9c88:	429e      	cmp	r6, r3
    9c8a:	d119      	bne.n	9cc0 <eeprom_write_block+0xe0>
			len -= 4;
    9c8c:	3804      	subs	r0, #4
			offset += 4;
    9c8e:	3504      	adds	r5, #4
			val32 |= (*src++ << 24);
    9c90:	460c      	mov	r4, r1
	while (len > 0) {
    9c92:	2800      	cmp	r0, #0
    9c94:	d1bc      	bne.n	9c10 <eeprom_write_block+0x30>
    9c96:	e7cb      	b.n	9c30 <eeprom_write_block+0x50>
				uint8_t stat = FTFL_FSTAT & 0x70;
    9c98:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    9c9a:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    9c9e:	bf18      	it	ne
    9ca0:	7016      	strbne	r6, [r2, #0]
				FlexRAM[offset] = val8;
    9ca2:	7019      	strb	r1, [r3, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9ca4:	7853      	ldrb	r3, [r2, #1]
    9ca6:	07db      	lsls	r3, r3, #31
    9ca8:	d5fc      	bpl.n	9ca4 <eeprom_write_block+0xc4>
    9caa:	e7bd      	b.n	9c28 <eeprom_write_block+0x48>
				uint8_t stat = FTFL_FSTAT & 0x70;
    9cac:	7814      	ldrb	r4, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    9cae:	f014 0470 	ands.w	r4, r4, #112	; 0x70
    9cb2:	bf18      	it	ne
    9cb4:	7014      	strbne	r4, [r2, #0]
				*(uint16_t *)(&FlexRAM[offset]) = val16;
    9cb6:	8033      	strh	r3, [r6, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9cb8:	7853      	ldrb	r3, [r2, #1]
    9cba:	07dc      	lsls	r4, r3, #31
    9cbc:	d5fc      	bpl.n	9cb8 <eeprom_write_block+0xd8>
    9cbe:	e7cb      	b.n	9c58 <eeprom_write_block+0x78>
				uint8_t stat = FTFL_FSTAT & 0x70;
    9cc0:	7816      	ldrb	r6, [r2, #0]
				if (stat) FTFL_FSTAT = stat;
    9cc2:	f016 0670 	ands.w	r6, r6, #112	; 0x70
    9cc6:	bf18      	it	ne
    9cc8:	7016      	strbne	r6, [r2, #0]
				*(uint32_t *)(&FlexRAM[offset]) = val32;
    9cca:	6023      	str	r3, [r4, #0]
	while (!(FTFL_FCNFG & FTFL_FCNFG_EEERDY)) {
    9ccc:	7853      	ldrb	r3, [r2, #1]
    9cce:	07de      	lsls	r6, r3, #31
    9cd0:	d5fc      	bpl.n	9ccc <eeprom_write_block+0xec>
    9cd2:	e7db      	b.n	9c8c <eeprom_write_block+0xac>
    9cd4:	4770      	bx	lr
    9cd6:	bf00      	nop
    9cd8:	40020000 	.word	0x40020000

00009cdc <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    9cdc:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    9cde:	f7fd feb9 	bl	7a54 <setup>
	while (1) {
		loop();
    9ce2:	f7fc ffcd 	bl	6c80 <loop>
		yield();
    9ce6:	f002 fb6d 	bl	c3c4 <yield>
	while (1) {
    9cea:	e7fa      	b.n	9ce2 <main+0x6>

00009cec <memcpy>:
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
#else
	push	{r0}
    9cec:	b401      	push	{r0}
#endif
	orr	r3, r1, r0
    9cee:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    9cf2:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    9cf6:	d16f      	bne.n	9dd8 <memcpy+0xec>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9cf8:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    9cfa:	d341      	bcc.n	9d80 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9cfc:	f851 3b04 	ldr.w	r3, [r1], #4
    9d00:	f840 3b04 	str.w	r3, [r0], #4
    9d04:	f851 3b04 	ldr.w	r3, [r1], #4
    9d08:	f840 3b04 	str.w	r3, [r0], #4
    9d0c:	f851 3b04 	ldr.w	r3, [r1], #4
    9d10:	f840 3b04 	str.w	r3, [r0], #4
    9d14:	f851 3b04 	ldr.w	r3, [r1], #4
    9d18:	f840 3b04 	str.w	r3, [r0], #4
    9d1c:	f851 3b04 	ldr.w	r3, [r1], #4
    9d20:	f840 3b04 	str.w	r3, [r0], #4
    9d24:	f851 3b04 	ldr.w	r3, [r1], #4
    9d28:	f840 3b04 	str.w	r3, [r0], #4
    9d2c:	f851 3b04 	ldr.w	r3, [r1], #4
    9d30:	f840 3b04 	str.w	r3, [r0], #4
    9d34:	f851 3b04 	ldr.w	r3, [r1], #4
    9d38:	f840 3b04 	str.w	r3, [r0], #4
    9d3c:	f851 3b04 	ldr.w	r3, [r1], #4
    9d40:	f840 3b04 	str.w	r3, [r0], #4
    9d44:	f851 3b04 	ldr.w	r3, [r1], #4
    9d48:	f840 3b04 	str.w	r3, [r0], #4
    9d4c:	f851 3b04 	ldr.w	r3, [r1], #4
    9d50:	f840 3b04 	str.w	r3, [r0], #4
    9d54:	f851 3b04 	ldr.w	r3, [r1], #4
    9d58:	f840 3b04 	str.w	r3, [r0], #4
    9d5c:	f851 3b04 	ldr.w	r3, [r1], #4
    9d60:	f840 3b04 	str.w	r3, [r0], #4
    9d64:	f851 3b04 	ldr.w	r3, [r1], #4
    9d68:	f840 3b04 	str.w	r3, [r0], #4
    9d6c:	f851 3b04 	ldr.w	r3, [r1], #4
    9d70:	f840 3b04 	str.w	r3, [r0], #4
    9d74:	f851 3b04 	ldr.w	r3, [r1], #4
    9d78:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    9d7c:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    9d7e:	d2bd      	bcs.n	9cfc <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    9d80:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    9d82:	d311      	bcc.n	9da8 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    9d84:	f851 3b04 	ldr.w	r3, [r1], #4
    9d88:	f840 3b04 	str.w	r3, [r0], #4
    9d8c:	f851 3b04 	ldr.w	r3, [r1], #4
    9d90:	f840 3b04 	str.w	r3, [r0], #4
    9d94:	f851 3b04 	ldr.w	r3, [r1], #4
    9d98:	f840 3b04 	str.w	r3, [r0], #4
    9d9c:	f851 3b04 	ldr.w	r3, [r1], #4
    9da0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    9da4:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    9da6:	d2ed      	bcs.n	9d84 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    9da8:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    9daa:	d305      	bcc.n	9db8 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    9dac:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    9db0:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    9db4:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    9db6:	d2f9      	bcs.n	9dac <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    9db8:	3204      	adds	r2, #4
	beq	.Ldone
    9dba:	d00a      	beq.n	9dd2 <memcpy+0xe6>

	lsls	r2, r2, #31
    9dbc:	07d2      	lsls	r2, r2, #31
	itt ne
    9dbe:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9dc0:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9dc4:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    9dc8:	d303      	bcc.n	9dd2 <memcpy+0xe6>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
	strh	r3, [r0]
#else
	ldrb	r3, [r1]
    9dca:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9dcc:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9dce:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9dd0:	7043      	strb	r3, [r0, #1]

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    9dd2:	bc01      	pop	{r0}
#endif
	bx	lr
    9dd4:	4770      	bx	lr
    9dd6:	bf00      	nop
	beq	.Ldst_aligned
#else
	/* if len < 12, misalignment adjustment has more overhead than
	just byte-to-byte copy.  Also, len must >=8 to guarantee code
	afterward work correctly.  */
	cmp	r2, #12
    9dd8:	2a0c      	cmp	r2, #12
	blo	.Lbyte_copy
    9dda:	d34a      	bcc.n	9e72 <memcpy+0x186>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    9ddc:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    9de0:	d011      	beq.n	9e06 <memcpy+0x11a>

	rsb	r3, #4
    9de2:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    9de6:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    9de8:	07db      	lsls	r3, r3, #31
	itt ne
    9dea:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    9dec:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    9df0:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    9df4:	d307      	bcc.n	9e06 <memcpy+0x11a>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
	strh    r3, [r0], #2
	b	.Ldst_aligned
#else
	ldrb    r3, [r1], #1
    9df6:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9dfa:	f800 3b01 	strb.w	r3, [r0], #1
	ldrb    r3, [r1], #1
    9dfe:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9e02:	f800 3b01 	strb.w	r3, [r0], #1
	/* Now that dst is aligned */
.Ldst_aligned:
	/* if r1 is aligned now, it means r0/r1 has the same misalignment,
	and they are both aligned now.  Go aligned copy.  */
	ands	r3, r1, #3
    9e06:	f011 0303 	ands.w	r3, r1, #3
	beq	.Lbig_block
    9e0a:	f43f af75 	beq.w	9cf8 <memcpy+0xc>

	/* dst is aligned, but src isn't.  Misaligned copy.  */

	push	{r4, r5}
    9e0e:	b430      	push	{r4, r5}
	subs	r2, #4
    9e10:	3a04      	subs	r2, #4

	/* Backward r1 by misaligned bytes, to make r1 aligned.
	Since we need to restore r1 to unaligned address after the loop,
	we need keep the offset bytes to ip and sub it from r1 afterward.  */
	subs	r1, r3
    9e12:	1ac9      	subs	r1, r1, r3
	rsb	ip, r3, #4
    9e14:	f1c3 0c04 	rsb	ip, r3, #4

	/* Pre-load on word */
	ldr	r4, [r1], #4
    9e18:	f851 4b04 	ldr.w	r4, [r1], #4

	cmp	r3, #2
    9e1c:	2b02      	cmp	r3, #2
	beq	.Lmisaligned_copy_2_2
    9e1e:	d019      	beq.n	9e54 <memcpy+0x168>
	cmp	r3, #3
    9e20:	2b03      	cmp	r3, #3
	beq	.Lmisaligned_copy_3_1
    9e22:	d00b      	beq.n	9e3c <memcpy+0x150>
	subs	r2, #4
	bhs	1b
	.endm

.Lmisaligned_copy_1_3:
	mis_src_copy shift=8
    9e24:	0a24      	lsrs	r4, r4, #8
    9e26:	f851 3b04 	ldr.w	r3, [r1], #4
    9e2a:	061d      	lsls	r5, r3, #24
    9e2c:	ea44 0405 	orr.w	r4, r4, r5
    9e30:	f840 4b04 	str.w	r4, [r0], #4
    9e34:	461c      	mov	r4, r3
    9e36:	3a04      	subs	r2, #4
    9e38:	d2f4      	bcs.n	9e24 <memcpy+0x138>
	b	.Lsrc_misaligned_tail
    9e3a:	e016      	b.n	9e6a <memcpy+0x17e>

.Lmisaligned_copy_3_1:
	mis_src_copy shift=24
    9e3c:	0e24      	lsrs	r4, r4, #24
    9e3e:	f851 3b04 	ldr.w	r3, [r1], #4
    9e42:	021d      	lsls	r5, r3, #8
    9e44:	ea44 0405 	orr.w	r4, r4, r5
    9e48:	f840 4b04 	str.w	r4, [r0], #4
    9e4c:	461c      	mov	r4, r3
    9e4e:	3a04      	subs	r2, #4
    9e50:	d2f4      	bcs.n	9e3c <memcpy+0x150>
	b	.Lsrc_misaligned_tail
    9e52:	e00a      	b.n	9e6a <memcpy+0x17e>

.Lmisaligned_copy_2_2:
	/* For 2_2 misalignment, ldr is still faster than 2 x ldrh.  */
	mis_src_copy shift=16
    9e54:	0c24      	lsrs	r4, r4, #16
    9e56:	f851 3b04 	ldr.w	r3, [r1], #4
    9e5a:	041d      	lsls	r5, r3, #16
    9e5c:	ea44 0405 	orr.w	r4, r4, r5
    9e60:	f840 4b04 	str.w	r4, [r0], #4
    9e64:	461c      	mov	r4, r3
    9e66:	3a04      	subs	r2, #4
    9e68:	d2f4      	bcs.n	9e54 <memcpy+0x168>

.Lsrc_misaligned_tail:
	adds	r2, #4
    9e6a:	3204      	adds	r2, #4
	subs	r1, ip
    9e6c:	ebb1 010c 	subs.w	r1, r1, ip
	pop	{r4, r5}
    9e70:	bc30      	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    9e72:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    9e74:	d3a0      	bcc.n	9db8 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    9e76:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    9e78:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    9e7c:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    9e80:	d2f9      	bcs.n	9e76 <memcpy+0x18a>

	ldrb	r3, [r1]
    9e82:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    9e84:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    9e86:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    9e88:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    9e8a:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    9e8c:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
#else
	pop	{r0}
    9e8e:	bc01      	pop	{r0}
#endif
	bx	lr
    9e90:	4770      	bx	lr
    9e92:	bf00      	nop

00009e94 <fault_isr>:
{
    9e94:	b508      	push	{r3, lr}
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9e96:	4c0f      	ldr	r4, [pc, #60]	; (9ed4 <fault_isr+0x40>)
    9e98:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9e9a:	0358      	lsls	r0, r3, #13
    9e9c:	d40d      	bmi.n	9eba <fault_isr+0x26>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9ea0:	0559      	lsls	r1, r3, #21
    9ea2:	d40f      	bmi.n	9ec4 <fault_isr+0x30>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9ea4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9ea6:	051a      	lsls	r2, r3, #20
    9ea8:	d411      	bmi.n	9ece <fault_isr+0x3a>
		if (SIM_SCGC4 & SIM_SCGC4_UART2) uart2_status_isr();
    9eaa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9eac:	04db      	lsls	r3, r3, #19
    9eae:	d5f3      	bpl.n	9e98 <fault_isr+0x4>
    9eb0:	f001 fb38 	bl	b524 <uart2_status_isr>
		if (SIM_SCGC4 & SIM_SCGC4_USBOTG) usb_isr();
    9eb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9eb6:	0358      	lsls	r0, r3, #13
    9eb8:	d5f1      	bpl.n	9e9e <fault_isr+0xa>
    9eba:	f001 fcb5 	bl	b828 <usb_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART0) uart0_status_isr();
    9ebe:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9ec0:	0559      	lsls	r1, r3, #21
    9ec2:	d5ef      	bpl.n	9ea4 <fault_isr+0x10>
    9ec4:	f000 f808 	bl	9ed8 <unused_isr>
		if (SIM_SCGC4 & SIM_SCGC4_UART1) uart1_status_isr();
    9ec8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    9eca:	051a      	lsls	r2, r3, #20
    9ecc:	d5ed      	bpl.n	9eaa <fault_isr+0x16>
    9ece:	f000 ff95 	bl	adfc <uart1_status_isr>
    9ed2:	e7ea      	b.n	9eaa <fault_isr+0x16>
    9ed4:	40048000 	.word	0x40048000

00009ed8 <unused_isr>:
{
    9ed8:	b508      	push	{r3, lr}
	fault_isr();
    9eda:	f7ff ffdb 	bl	9e94 <fault_isr>
    9ede:	bf00      	nop

00009ee0 <startup_early_hook>:
	WDOG_STCTRLH = WDOG_STCTRLH_ALLOWUPDATE;
    9ee0:	4b01      	ldr	r3, [pc, #4]	; (9ee8 <startup_early_hook+0x8>)
    9ee2:	2210      	movs	r2, #16
    9ee4:	801a      	strh	r2, [r3, #0]
}
    9ee6:	4770      	bx	lr
    9ee8:	40052000 	.word	0x40052000

00009eec <startup_late_hook>:
static void startup_default_late_hook(void) {}
    9eec:	4770      	bx	lr
    9eee:	bf00      	nop

00009ef0 <_sbrk>:
__attribute__((weak))
void * _sbrk(int incr)
{
	char *prev, *stack;

	prev = __brkval;
    9ef0:	4a09      	ldr	r2, [pc, #36]	; (9f18 <_sbrk+0x28>)
{
    9ef2:	b508      	push	{r3, lr}
    9ef4:	4603      	mov	r3, r0
	prev = __brkval;
    9ef6:	6810      	ldr	r0, [r2, #0]
	if (incr != 0) {
    9ef8:	b133      	cbz	r3, 9f08 <_sbrk+0x18>
		__asm__ volatile("mov %0, sp" : "=r" (stack) ::);
    9efa:	4669      	mov	r1, sp
		if (prev + incr >= stack - STACK_MARGIN) {
    9efc:	4403      	add	r3, r0
    9efe:	f5a1 5180 	sub.w	r1, r1, #4096	; 0x1000
    9f02:	428b      	cmp	r3, r1
    9f04:	d201      	bcs.n	9f0a <_sbrk+0x1a>
			errno = ENOMEM;
			return (void *)-1;
		}
		__brkval = prev + incr;
    9f06:	6013      	str	r3, [r2, #0]
	}
	return prev;
}
    9f08:	bd08      	pop	{r3, pc}
			errno = ENOMEM;
    9f0a:	f004 f9a7 	bl	e25c <__errno>
    9f0e:	230c      	movs	r3, #12
    9f10:	6003      	str	r3, [r0, #0]
			return (void *)-1;
    9f12:	f04f 30ff 	mov.w	r0, #4294967295
}
    9f16:	bd08      	pop	{r3, pc}
    9f18:	1fff88e8 	.word	0x1fff88e8

00009f1c <_read>:

__attribute__((weak)) 
int _read(int file, char *ptr, int len)
{
	return 0;
}
    9f1c:	2000      	movs	r0, #0
    9f1e:	4770      	bx	lr

00009f20 <_close>:

__attribute__((weak)) 
int _close(int fd)
{
	return -1;
}
    9f20:	f04f 30ff 	mov.w	r0, #4294967295
    9f24:	4770      	bx	lr
    9f26:	bf00      	nop

00009f28 <_fstat>:
#include <sys/stat.h>

__attribute__((weak)) 
int _fstat(int fd, struct stat *st)
{
	st->st_mode = S_IFCHR;
    9f28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    9f2c:	604b      	str	r3, [r1, #4]
	return 0;
}
    9f2e:	2000      	movs	r0, #0
    9f30:	4770      	bx	lr
    9f32:	bf00      	nop

00009f34 <_isatty>:

__attribute__((weak)) 
int _isatty(int fd)
{
	return 1;
}
    9f34:	2001      	movs	r0, #1
    9f36:	4770      	bx	lr

00009f38 <_lseek>:

__attribute__((weak)) 
int _lseek(int fd, long long offset, int whence)
{
	return -1;
}
    9f38:	f04f 30ff 	mov.w	r0, #4294967295
    9f3c:	4770      	bx	lr
    9f3e:	bf00      	nop

00009f40 <abort>:
}

__attribute__((weak))
void abort(void)
{
	while (1) ;
    9f40:	e7fe      	b.n	9f40 <abort>
    9f42:	Address 0x00009f42 is out of bounds.


00009f44 <nvic_execution_priority>:
	uint32_t priority=256;
	uint32_t primask, faultmask, basepri, ipsr;

	// full algorithm in ARM DDI0403D, page B1-639
	// this isn't quite complete, but hopefully good enough
	__asm__ volatile("mrs %0, faultmask\n" : "=r" (faultmask)::);
    9f44:	f3ef 8313 	mrs	r3, FAULTMASK
	if (faultmask) return -1;
    9f48:	b9cb      	cbnz	r3, 9f7e <nvic_execution_priority+0x3a>
	__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    9f4a:	f3ef 8010 	mrs	r0, PRIMASK
	if (primask) return 0;
    9f4e:	b9a0      	cbnz	r0, 9f7a <nvic_execution_priority+0x36>
	__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    9f50:	f3ef 8305 	mrs	r3, IPSR
	if (ipsr) {
    9f54:	b943      	cbnz	r3, 9f68 <nvic_execution_priority+0x24>
	uint32_t priority=256;
    9f56:	f44f 7080 	mov.w	r0, #256	; 0x100
		if (ipsr < 16) priority = 0; // could be non-zero
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
	}
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    9f5a:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    9f5e:	b15b      	cbz	r3, 9f78 <nvic_execution_priority+0x34>
    9f60:	4298      	cmp	r0, r3
    9f62:	bf28      	it	cs
    9f64:	4618      	movcs	r0, r3
	return priority;
    9f66:	4770      	bx	lr
		if (ipsr < 16) priority = 0; // could be non-zero
    9f68:	2b0f      	cmp	r3, #15
    9f6a:	d9f6      	bls.n	9f5a <nvic_execution_priority+0x16>
		else priority = NVIC_GET_PRIORITY(ipsr - 16);
    9f6c:	4a05      	ldr	r2, [pc, #20]	; (9f84 <nvic_execution_priority+0x40>)
    9f6e:	5cd0      	ldrb	r0, [r2, r3]
	__asm__ volatile("mrs %0, basepri\n" : "=r" (basepri)::);
    9f70:	f3ef 8311 	mrs	r3, BASEPRI
	if (basepri > 0 && basepri < priority) priority = basepri;
    9f74:	2b00      	cmp	r3, #0
    9f76:	d1f3      	bne.n	9f60 <nvic_execution_priority+0x1c>
}
    9f78:	4770      	bx	lr
	if (primask) return 0;
    9f7a:	4618      	mov	r0, r3
}
    9f7c:	4770      	bx	lr
	if (faultmask) return -1;
    9f7e:	f04f 30ff 	mov.w	r0, #4294967295
    9f82:	4770      	bx	lr
    9f84:	e000e3f0 	.word	0xe000e3f0

00009f88 <operator new(unsigned int)>:

#include "new.h"

void * operator new(size_t size)
{
  return malloc(size);
    9f88:	f003 ba02 	b.w	d390 <malloc>

00009f8c <operator new[](unsigned int)>:
    9f8c:	f003 ba00 	b.w	d390 <malloc>

00009f90 <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    9f90:	f101 3cff 	add.w	ip, r1, #4294967295
{
    9f94:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    9f96:	4665      	mov	r5, ip
	int i=0, j;
    9f98:	2400      	movs	r4, #0
    9f9a:	e001      	b.n	9fa0 <ultoa+0x10>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
    9f9c:	4670      	mov	r0, lr
		if (val == 0) break;
		i++;
    9f9e:	3401      	adds	r4, #1
		digit = val % radix;
    9fa0:	fbb0 fef2 	udiv	lr, r0, r2
    9fa4:	fb02 031e 	mls	r3, r2, lr, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9fa8:	2b09      	cmp	r3, #9
    9faa:	f103 0630 	add.w	r6, r3, #48	; 0x30
    9fae:	bf8a      	itet	hi
    9fb0:	3337      	addhi	r3, #55	; 0x37
    9fb2:	b2f3      	uxtbls	r3, r6
    9fb4:	b2db      	uxtbhi	r3, r3
		if (val == 0) break;
    9fb6:	4290      	cmp	r0, r2
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    9fb8:	f805 3f01 	strb.w	r3, [r5, #1]!
		if (val == 0) break;
    9fbc:	d2ee      	bcs.n	9f9c <ultoa+0xc>
	}
	buf[i + 1] = 0;
    9fbe:	1c63      	adds	r3, r4, #1
    9fc0:	2200      	movs	r2, #0
    9fc2:	54ca      	strb	r2, [r1, r3]
    9fc4:	18c8      	adds	r0, r1, r3
	for (j=0; j < i; j++, i--) {
    9fc6:	b17c      	cbz	r4, 9fe8 <ultoa+0x58>
		t = buf[j];
    9fc8:	4662      	mov	r2, ip
    9fca:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    9fce:	f810 ed01 	ldrb.w	lr, [r0, #-1]!
    9fd2:	f88c e000 	strb.w	lr, [ip]
	for (j=0; j < i; j++, i--) {
    9fd6:	eba1 030c 	sub.w	r3, r1, ip
    9fda:	3202      	adds	r2, #2
    9fdc:	3b01      	subs	r3, #1
    9fde:	1a52      	subs	r2, r2, r1
    9fe0:	4423      	add	r3, r4
    9fe2:	429a      	cmp	r2, r3
		buf[i] = t;
    9fe4:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    9fe6:	dbef      	blt.n	9fc8 <ultoa+0x38>
	}
	return buf;
}
    9fe8:	4608      	mov	r0, r1
    9fea:	bd70      	pop	{r4, r5, r6, pc}

00009fec <dummy_isr>:
	{((volatile uint8_t *)&CORE_PIN26_PORTREG + (CORE_PIN26_BIT >> 3)), &CORE_PIN26_CONFIG, (1<<(CORE_PIN26_BIT & 7))}
};

#endif

static void dummy_isr() {};
    9fec:	4770      	bx	lr
    9fee:	bf00      	nop

00009ff0 <digitalWrite.part.0>:



// TODO: startup code needs to initialize all pins to GPIO mode, input by default

void digitalWrite(uint8_t pin, uint8_t val)
    9ff0:	b410      	push	{r4}
{
	if (pin >= CORE_NUM_DIGITAL) return;
#ifdef KINETISK
	if (*portModeRegister(pin)) {
    9ff2:	4b0f      	ldr	r3, [pc, #60]	; (a030 <digitalWrite.part.0+0x40>)
    9ff4:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    9ff8:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    9ffc:	b12c      	cbz	r4, a00a <digitalWrite.part.0+0x1a>
		if (val) {
			*portSetRegister(pin) = 1;
    9ffe:	2301      	movs	r3, #1
		if (val) {
    a000:	b191      	cbz	r1, a028 <digitalWrite.part.0+0x38>
			*portSetRegister(pin) = 1;
    a002:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
			*config &= ~(PORT_PCR_PE);
			//*config = PORT_PCR_MUX(1);
		}
	}

}
    a006:	bc10      	pop	{r4}
    a008:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    a00a:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    a00e:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a010:	681a      	ldr	r2, [r3, #0]
		if (val) {
    a012:	b921      	cbnz	r1, a01e <digitalWrite.part.0+0x2e>
			*config &= ~(PORT_PCR_PE);
    a014:	f022 0202 	bic.w	r2, r2, #2
}
    a018:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    a01a:	601a      	str	r2, [r3, #0]
}
    a01c:	4770      	bx	lr
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a01e:	f042 0203 	orr.w	r2, r2, #3
}
    a022:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a024:	601a      	str	r2, [r3, #0]
}
    a026:	4770      	bx	lr
			*portClearRegister(pin) = 1;
    a028:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    a02c:	bc10      	pop	{r4}
    a02e:	4770      	bx	lr
    a030:	000154d8 	.word	0x000154d8

0000a034 <attachInterrupt>:
	if (pin >= CORE_NUM_DIGITAL) return;
    a034:	2821      	cmp	r0, #33	; 0x21
    a036:	d835      	bhi.n	a0a4 <attachInterrupt+0x70>
	switch (mode) {
    a038:	2a04      	cmp	r2, #4
    a03a:	d833      	bhi.n	a0a4 <attachInterrupt+0x70>
{
    a03c:	b430      	push	{r4, r5}
	mask = (mask << 16) | 0x01000000;
    a03e:	4b2a      	ldr	r3, [pc, #168]	; (a0e8 <attachInterrupt+0xb4>)
	config = portConfigRegister(pin);
    a040:	4d2a      	ldr	r5, [pc, #168]	; (a0ec <attachInterrupt+0xb8>)
	mask = (mask << 16) | 0x01000000;
    a042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
	config = portConfigRegister(pin);
    a046:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
	mask = (mask << 16) | 0x01000000;
    a04a:	041b      	lsls	r3, r3, #16
	config = portConfigRegister(pin);
    a04c:	6854      	ldr	r4, [r2, #4]
	if ((*config & 0x00000700) == 0) {
    a04e:	6822      	ldr	r2, [r4, #0]
    a050:	f412 62e0 	ands.w	r2, r2, #1792	; 0x700
    a054:	d039      	beq.n	a0ca <attachInterrupt+0x96>
	_VectorsRam[irq + 16] = function;
    a056:	4a26      	ldr	r2, [pc, #152]	; (a0f0 <attachInterrupt+0xbc>)
    a058:	4826      	ldr	r0, [pc, #152]	; (a0f4 <attachInterrupt+0xc0>)
    a05a:	f8c2 019c 	str.w	r0, [r2, #412]	; 0x19c
    a05e:	4826      	ldr	r0, [pc, #152]	; (a0f8 <attachInterrupt+0xc4>)
    a060:	f8c2 01a0 	str.w	r0, [r2, #416]	; 0x1a0
    a064:	4825      	ldr	r0, [pc, #148]	; (a0fc <attachInterrupt+0xc8>)
    a066:	f8c2 01a4 	str.w	r0, [r2, #420]	; 0x1a4
    a06a:	4825      	ldr	r0, [pc, #148]	; (a100 <attachInterrupt+0xcc>)
    a06c:	f8c2 01a8 	str.w	r0, [r2, #424]	; 0x1a8
    a070:	4824      	ldr	r0, [pc, #144]	; (a104 <attachInterrupt+0xd0>)
    a072:	f8c2 01ac 	str.w	r0, [r2, #428]	; 0x1ac
	if(&PORTA_PCR0 <= config && config <= &PORTA_PCR31) isr_table = isr_table_portA;
    a076:	f104 4240 	add.w	r2, r4, #3221225472	; 0xc0000000
    a07a:	f5a2 2092 	sub.w	r0, r2, #299008	; 0x49000
    a07e:	287c      	cmp	r0, #124	; 0x7c
    a080:	d811      	bhi.n	a0a6 <attachInterrupt+0x72>
    a082:	4821      	ldr	r0, [pc, #132]	; (a108 <attachInterrupt+0xd4>)
	__disable_irq();
    a084:	b672      	cpsid	i
	cfg = *config;
    a086:	6822      	ldr	r2, [r4, #0]
	cfg &= ~0x000F0000;		// disable any previous interrupt
    a088:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
	*config = cfg;
    a08c:	6022      	str	r2, [r4, #0]
    a08e:	4313      	orrs	r3, r2
	return (v % 128) / 4;
    a090:	f3c4 0284 	ubfx	r2, r4, #2, #5
	cfg |= mask;
    a094:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	isr_table[pin_index] = function;	// set the function pointer
    a098:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	*config = cfg;			// enable the new interrupt
    a09c:	6023      	str	r3, [r4, #0]
	__enable_irq();
    a09e:	b662      	cpsie	i
}
    a0a0:	bc30      	pop	{r4, r5}
    a0a2:	4770      	bx	lr
    a0a4:	4770      	bx	lr
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    a0a6:	f5a2 2094 	sub.w	r0, r2, #303104	; 0x4a000
    a0aa:	287c      	cmp	r0, #124	; 0x7c
    a0ac:	d915      	bls.n	a0da <attachInterrupt+0xa6>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    a0ae:	f5a2 2096 	sub.w	r0, r2, #307200	; 0x4b000
    a0b2:	287c      	cmp	r0, #124	; 0x7c
    a0b4:	d913      	bls.n	a0de <attachInterrupt+0xaa>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    a0b6:	f5a2 2098 	sub.w	r0, r2, #311296	; 0x4c000
    a0ba:	287c      	cmp	r0, #124	; 0x7c
    a0bc:	d911      	bls.n	a0e2 <attachInterrupt+0xae>
	else if(&PORTE_PCR0 <= config && config <= &PORTE_PCR31) isr_table = isr_table_portE;
    a0be:	f5a2 229a 	sub.w	r2, r2, #315392	; 0x4d000
    a0c2:	2a7c      	cmp	r2, #124	; 0x7c
    a0c4:	d8ec      	bhi.n	a0a0 <attachInterrupt+0x6c>
    a0c6:	4811      	ldr	r0, [pc, #68]	; (a10c <attachInterrupt+0xd8>)
    a0c8:	e7dc      	b.n	a084 <attachInterrupt+0x50>
		} else {
		    *config &= ~PORT_PCR_ODE;
                }
	} else {
#ifdef KINETISK
		*portModeRegister(pin) = 0;
    a0ca:	f855 0030 	ldr.w	r0, [r5, r0, lsl #3]
    a0ce:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
#else
		*portModeRegister(pin) &= ~digitalPinToBitMask(pin);
#endif
		if (mode == INPUT) {
			*config = PORT_PCR_MUX(1);
    a0d2:	f44f 7280 	mov.w	r2, #256	; 0x100
    a0d6:	6022      	str	r2, [r4, #0]
    a0d8:	e7bd      	b.n	a056 <attachInterrupt+0x22>
	else if(&PORTB_PCR0 <= config && config <= &PORTB_PCR31) isr_table = isr_table_portB;
    a0da:	480d      	ldr	r0, [pc, #52]	; (a110 <attachInterrupt+0xdc>)
    a0dc:	e7d2      	b.n	a084 <attachInterrupt+0x50>
	else if(&PORTC_PCR0 <= config && config <= &PORTC_PCR31) isr_table = isr_table_portC;
    a0de:	480d      	ldr	r0, [pc, #52]	; (a114 <attachInterrupt+0xe0>)
    a0e0:	e7d0      	b.n	a084 <attachInterrupt+0x50>
	else if(&PORTD_PCR0 <= config && config <= &PORTD_PCR31) isr_table = isr_table_portD;
    a0e2:	480d      	ldr	r0, [pc, #52]	; (a118 <attachInterrupt+0xe4>)
    a0e4:	e7ce      	b.n	a084 <attachInterrupt+0x50>
    a0e6:	bf00      	nop
    a0e8:	000154c4 	.word	0x000154c4
    a0ec:	000154d8 	.word	0x000154d8
    a0f0:	1fff8200 	.word	0x1fff8200
    a0f4:	1fff87f1 	.word	0x1fff87f1
    a0f8:	1fff87bd 	.word	0x1fff87bd
    a0fc:	1fff8789 	.word	0x1fff8789
    a100:	1fff8755 	.word	0x1fff8755
    a104:	1fff8721 	.word	0x1fff8721
    a108:	1fff88f0 	.word	0x1fff88f0
    a10c:	1fff89c8 	.word	0x1fff89c8
    a110:	1fff8928 	.word	0x1fff8928
    a114:	1fff8978 	.word	0x1fff8978
    a118:	1fff89a8 	.word	0x1fff89a8

0000a11c <rtc_set>:
	RTC_SR = 0;
    a11c:	4b03      	ldr	r3, [pc, #12]	; (a12c <rtc_set+0x10>)
    a11e:	2200      	movs	r2, #0
	RTC_SR = RTC_SR_TCE;
    a120:	2110      	movs	r1, #16
	RTC_SR = 0;
    a122:	615a      	str	r2, [r3, #20]
	RTC_TPR = 0;
    a124:	605a      	str	r2, [r3, #4]
	RTC_TSR = t;
    a126:	6018      	str	r0, [r3, #0]
	RTC_SR = RTC_SR_TCE;
    a128:	6159      	str	r1, [r3, #20]
}
    a12a:	4770      	bx	lr
    a12c:	4003d000 	.word	0x4003d000

0000a130 <startup_middle_hook>:
static void startup_default_middle_hook(void) {}
    a130:	4770      	bx	lr
    a132:	bf00      	nop

0000a134 <_init_Teensyduino_internal_>:
{
    a134:	b5f0      	push	{r4, r5, r6, r7, lr}
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    a136:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    a13a:	f44f 0500 	mov.w	r5, #8388608	; 0x800000
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    a13e:	f04f 7c80 	mov.w	ip, #16777216	; 0x1000000
	NVIC_ENABLE_IRQ(IRQ_PORTA);
    a142:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTB);
    a146:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	NVIC_ENABLE_IRQ(IRQ_PORTC);
    a14a:	f04f 7c00 	mov.w	ip, #33554432	; 0x2000000
    a14e:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_CNT = 0;
    a152:	4a1d      	ldr	r2, [pc, #116]	; (a1c8 <_init_Teensyduino_internal_+0x94>)
	FTM1_CNT = 0;
    a154:	481d      	ldr	r0, [pc, #116]	; (a1cc <_init_Teensyduino_internal_+0x98>)
	FTM2_CNT = 0;
    a156:	491e      	ldr	r1, [pc, #120]	; (a1d0 <_init_Teensyduino_internal_+0x9c>)
	NVIC_ENABLE_IRQ(IRQ_PORTD);
    a158:	f04f 6c80 	mov.w	ip, #67108864	; 0x4000000
    a15c:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    a160:	2328      	movs	r3, #40	; 0x28
	FTM0_CNT = 0;
    a162:	2700      	movs	r7, #0
	FTM0_MOD = DEFAULT_FTM_MOD;
    a164:	f64b 76ff 	movw	r6, #49151	; 0xbfff
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a168:	2509      	movs	r5, #9
	NVIC_ENABLE_IRQ(IRQ_PORTE);
    a16a:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    a16e:	f8c4 c108 	str.w	ip, [r4, #264]	; 0x108
{
    a172:	b083      	sub	sp, #12
	FTM0_CNT = 0;
    a174:	6057      	str	r7, [r2, #4]
	FTM0_MOD = DEFAULT_FTM_MOD;
    a176:	6096      	str	r6, [r2, #8]
	FTM0_C0SC = 0x28; // MSnB:MSnA = 10, ELSnB:ELSnA = 10
    a178:	60d3      	str	r3, [r2, #12]
	FTM0_C1SC = 0x28;
    a17a:	6153      	str	r3, [r2, #20]
	FTM0_C2SC = 0x28;
    a17c:	61d3      	str	r3, [r2, #28]
	FTM0_C3SC = 0x28;
    a17e:	6253      	str	r3, [r2, #36]	; 0x24
	FTM0_C4SC = 0x28;
    a180:	62d3      	str	r3, [r2, #44]	; 0x2c
	FTM0_C5SC = 0x28;
    a182:	6353      	str	r3, [r2, #52]	; 0x34
	FTM0_C6SC = 0x28;
    a184:	63d3      	str	r3, [r2, #60]	; 0x3c
	FTM0_C7SC = 0x28;
    a186:	6453      	str	r3, [r2, #68]	; 0x44
	FTM0_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a188:	6015      	str	r5, [r2, #0]
	FTM1_CNT = 0;
    a18a:	6047      	str	r7, [r0, #4]
	FTM1_MOD = DEFAULT_FTM_MOD;
    a18c:	6086      	str	r6, [r0, #8]
	FTM1_C0SC = 0x28;
    a18e:	60c3      	str	r3, [r0, #12]
	FTM1_C1SC = 0x28;
    a190:	6143      	str	r3, [r0, #20]
	FTM1_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a192:	6005      	str	r5, [r0, #0]
	FTM2_CNT = 0;
    a194:	604f      	str	r7, [r1, #4]
	FTM2_MOD = DEFAULT_FTM_MOD;
    a196:	608e      	str	r6, [r1, #8]
	FTM2_C0SC = 0x28;
    a198:	60cb      	str	r3, [r1, #12]
	FTM2_C1SC = 0x28;
    a19a:	614b      	str	r3, [r1, #20]
	FTM2_SC = FTM_SC_CLKS(1) | FTM_SC_PS(DEFAULT_FTM_PRESCALE);
    a19c:	600d      	str	r5, [r1, #0]
	analog_init();
    a19e:	f7ff fc27 	bl	99f0 <analog_init>
	startup_middle_hook();
    a1a2:	f7ff ffc5 	bl	a130 <startup_middle_hook>
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    a1a6:	4c0b      	ldr	r4, [pc, #44]	; (a1d4 <_init_Teensyduino_internal_+0xa0>)
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a1a8:	6823      	ldr	r3, [r4, #0]
    a1aa:	9300      	str	r3, [sp, #0]
	return ret;
    a1ac:	9b00      	ldr	r3, [sp, #0]
    a1ae:	2b13      	cmp	r3, #19
    a1b0:	d9fa      	bls.n	a1a8 <_init_Teensyduino_internal_+0x74>
	usb_init();
    a1b2:	f001 fef3 	bl	bf9c <usb_init>
	volatile uint32_t ret = systick_millis_count; // single aligned 32 bit is atomic
    a1b6:	6823      	ldr	r3, [r4, #0]
    a1b8:	9301      	str	r3, [sp, #4]
	return ret;
    a1ba:	9b01      	ldr	r3, [sp, #4]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
    a1bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    a1c0:	d3f9      	bcc.n	a1b6 <_init_Teensyduino_internal_+0x82>
}
    a1c2:	b003      	add	sp, #12
    a1c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a1c6:	bf00      	nop
    a1c8:	40038000 	.word	0x40038000
    a1cc:	40039000 	.word	0x40039000
    a1d0:	400b8000 	.word	0x400b8000
    a1d4:	1fffd3c0 	.word	0x1fffd3c0

0000a1d8 <analogWrite>:
	if (pin == A14) {
    a1d8:	2828      	cmp	r0, #40	; 0x28
		uint8_t res = analog_write_res;
    a1da:	4b7f      	ldr	r3, [pc, #508]	; (a3d8 <analogWrite+0x200>)
	if (pin == A14) {
    a1dc:	d036      	beq.n	a24c <analogWrite+0x74>
	if (val <= 0) {
    a1de:	2900      	cmp	r1, #0
	max = 1 << analog_write_res;
    a1e0:	781b      	ldrb	r3, [r3, #0]
	if (val <= 0) {
    a1e2:	dd3f      	ble.n	a264 <analogWrite+0x8c>
	max = 1 << analog_write_res;
    a1e4:	2201      	movs	r2, #1
    a1e6:	fa02 fc03 	lsl.w	ip, r2, r3
	} else if (val >= max) {
    a1ea:	4561      	cmp	r1, ip
{
    a1ec:	b510      	push	{r4, lr}
	} else if (val >= max) {
    a1ee:	d254      	bcs.n	a29a <analogWrite+0xc2>
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    a1f0:	1ec2      	subs	r2, r0, #3
    a1f2:	2a01      	cmp	r2, #1
    a1f4:	d970      	bls.n	a2d8 <analogWrite+0x100>
	} else if (pin == FTM2_CH0_PIN || pin == FTM2_CH1_PIN) {
    a1f6:	2820      	cmp	r0, #32
    a1f8:	d067      	beq.n	a2ca <analogWrite+0xf2>
    a1fa:	2819      	cmp	r0, #25
    a1fc:	d065      	beq.n	a2ca <analogWrite+0xf2>
		cval = ((uint32_t)val * (uint32_t)(FTM0_MOD + 1)) >> analog_write_res;
    a1fe:	4a77      	ldr	r2, [pc, #476]	; (a3dc <analogWrite+0x204>)
    a200:	6892      	ldr	r2, [r2, #8]
    a202:	fb02 1201 	mla	r2, r2, r1, r1
    a206:	fa22 f303 	lsr.w	r3, r2, r3
	switch (pin) {
    a20a:	1f42      	subs	r2, r0, #5
    a20c:	2a1b      	cmp	r2, #27
    a20e:	d87d      	bhi.n	a30c <analogWrite+0x134>
    a210:	e8df f012 	tbh	[pc, r2, lsl #1]
    a214:	00bf00c6 	.word	0x00bf00c6
    a218:	007c007c 	.word	0x007c007c
    a21c:	00b100b8 	.word	0x00b100b8
    a220:	007c007c 	.word	0x007c007c
    a224:	007c007c 	.word	0x007c007c
    a228:	007c007c 	.word	0x007c007c
    a22c:	007c007c 	.word	0x007c007c
    a230:	00aa007c 	.word	0x00aa007c
    a234:	009c00a3 	.word	0x009c00a3
    a238:	007c0095 	.word	0x007c0095
    a23c:	007c00cd 	.word	0x007c00cd
    a240:	007c007c 	.word	0x007c007c
    a244:	007c007c 	.word	0x007c007c
    a248:	00d4007c 	.word	0x00d4007c
		uint8_t res = analog_write_res;
    a24c:	7818      	ldrb	r0, [r3, #0]
		if (res < 12) {
    a24e:	280b      	cmp	r0, #11
			val <<= 12 - res;
    a250:	bf95      	itete	ls
    a252:	f1c0 000c 	rsbls	r0, r0, #12
			val >>= res - 12;
    a256:	380c      	subhi	r0, #12
			val <<= 12 - res;
    a258:	fa01 f000 	lslls.w	r0, r1, r0
			val >>= res - 12;
    a25c:	fa41 f000 	asrhi.w	r0, r1, r0
		analogWriteDAC0(val);
    a260:	f7ff bc2a 	b.w	9ab8 <analogWriteDAC0>
	if (pin >= CORE_NUM_DIGITAL) return;
    a264:	2821      	cmp	r0, #33	; 0x21
    a266:	d817      	bhi.n	a298 <analogWrite+0xc0>
	if (*portModeRegister(pin)) {
    a268:	4b5d      	ldr	r3, [pc, #372]	; (a3e0 <analogWrite+0x208>)
    a26a:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    a26e:	f892 1280 	ldrb.w	r1, [r2, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    a272:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    a276:	2900      	cmp	r1, #0
    a278:	d03c      	beq.n	a2f4 <analogWrite+0x11c>
			*portClearRegister(pin) = 1;
    a27a:	2101      	movs	r1, #1
		volatile uint32_t *config = portConfigRegister(pin);
    a27c:	685b      	ldr	r3, [r3, #4]
			*portClearRegister(pin) = 1;
    a27e:	f882 1100 	strb.w	r1, [r2, #256]	; 0x100
		*portModeRegister(pin) = 1;
    a282:	2001      	movs	r0, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a284:	f44f 71a2 	mov.w	r1, #324	; 0x144
		*portModeRegister(pin) = 1;
    a288:	f882 0280 	strb.w	r0, [r2, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a28c:	6019      	str	r1, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a28e:	681a      	ldr	r2, [r3, #0]
    a290:	f022 0220 	bic.w	r2, r2, #32
    a294:	601a      	str	r2, [r3, #0]
    a296:	4770      	bx	lr
    a298:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return;
    a29a:	2821      	cmp	r0, #33	; 0x21
    a29c:	d814      	bhi.n	a2c8 <analogWrite+0xf0>
	if (*portModeRegister(pin)) {
    a29e:	4b50      	ldr	r3, [pc, #320]	; (a3e0 <analogWrite+0x208>)
    a2a0:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
    a2a4:	f891 4280 	ldrb.w	r4, [r1, #640]	; 0x280
		volatile uint32_t *config = portConfigRegister(pin);
    a2a8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
	if (*portModeRegister(pin)) {
    a2ac:	b344      	cbz	r4, a300 <analogWrite+0x128>
		volatile uint32_t *config = portConfigRegister(pin);
    a2ae:	685b      	ldr	r3, [r3, #4]
			*portSetRegister(pin) = 1;
    a2b0:	f881 2080 	strb.w	r2, [r1, #128]	; 0x80
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a2b4:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a2b8:	2001      	movs	r0, #1
    a2ba:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a2be:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a2c0:	681a      	ldr	r2, [r3, #0]
    a2c2:	f022 0220 	bic.w	r2, r2, #32
    a2c6:	601a      	str	r2, [r3, #0]
}
    a2c8:	bd10      	pop	{r4, pc}
		cval = ((uint32_t)val * (uint32_t)(FTM2_MOD + 1)) >> analog_write_res;
    a2ca:	4a46      	ldr	r2, [pc, #280]	; (a3e4 <analogWrite+0x20c>)
    a2cc:	6892      	ldr	r2, [r2, #8]
    a2ce:	fb02 1201 	mla	r2, r2, r1, r1
    a2d2:	fa22 f303 	lsr.w	r3, r2, r3
    a2d6:	e798      	b.n	a20a <analogWrite+0x32>
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    a2d8:	4c43      	ldr	r4, [pc, #268]	; (a3e8 <analogWrite+0x210>)
    a2da:	68a2      	ldr	r2, [r4, #8]
	switch (pin) {
    a2dc:	2804      	cmp	r0, #4
		cval = ((uint32_t)val * (uint32_t)(FTM1_MOD + 1)) >> analog_write_res;
    a2de:	fb02 1201 	mla	r2, r2, r1, r1
    a2e2:	fa22 f203 	lsr.w	r2, r2, r3
	switch (pin) {
    a2e6:	d170      	bne.n	a3ca <analogWrite+0x1f2>
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a2e8:	4b40      	ldr	r3, [pc, #256]	; (a3ec <analogWrite+0x214>)
		FTM1_C1V = cval;
    a2ea:	61a2      	str	r2, [r4, #24]
		FTM_PINCFG(FTM1_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a2ec:	f44f 7151 	mov.w	r1, #836	; 0x344
    a2f0:	6359      	str	r1, [r3, #52]	; 0x34
}
    a2f2:	bd10      	pop	{r4, pc}
		volatile uint32_t *config = portConfigRegister(pin);
    a2f4:	685b      	ldr	r3, [r3, #4]
			*config &= ~(PORT_PCR_PE);
    a2f6:	6819      	ldr	r1, [r3, #0]
    a2f8:	f021 0102 	bic.w	r1, r1, #2
    a2fc:	6019      	str	r1, [r3, #0]
    a2fe:	e7c0      	b.n	a282 <analogWrite+0xaa>
		volatile uint32_t *config = portConfigRegister(pin);
    a300:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a302:	681a      	ldr	r2, [r3, #0]
    a304:	f042 0203 	orr.w	r2, r2, #3
    a308:	601a      	str	r2, [r3, #0]
    a30a:	e7d3      	b.n	a2b4 <analogWrite+0xdc>
	if (pin >= CORE_NUM_DIGITAL) return;
    a30c:	2821      	cmp	r0, #33	; 0x21
    a30e:	d8db      	bhi.n	a2c8 <analogWrite+0xf0>
    a310:	297f      	cmp	r1, #127	; 0x7f
    a312:	bfd4      	ite	le
    a314:	2100      	movle	r1, #0
    a316:	2101      	movgt	r1, #1
    a318:	f7ff fe6a 	bl	9ff0 <digitalWrite.part.0>
	config = portConfigRegister(pin);
    a31c:	4b30      	ldr	r3, [pc, #192]	; (a3e0 <analogWrite+0x208>)
    a31e:	eb03 02c0 	add.w	r2, r3, r0, lsl #3
		*portModeRegister(pin) = 1;
    a322:	f853 1030 	ldr.w	r1, [r3, r0, lsl #3]
	config = portConfigRegister(pin);
    a326:	6853      	ldr	r3, [r2, #4]
		*portModeRegister(pin) = 1;
    a328:	2401      	movs	r4, #1
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a32a:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a32e:	f881 4280 	strb.w	r4, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a332:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a334:	681a      	ldr	r2, [r3, #0]
    a336:	f022 0220 	bic.w	r2, r2, #32
    a33a:	601a      	str	r2, [r3, #0]
}
    a33c:	bd10      	pop	{r4, pc}
		FTM0_C1V = cval;
    a33e:	4827      	ldr	r0, [pc, #156]	; (a3dc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a340:	4a2b      	ldr	r2, [pc, #172]	; (a3f0 <analogWrite+0x218>)
		FTM0_C1V = cval;
    a342:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM0_CH1_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a344:	f240 4144 	movw	r1, #1092	; 0x444
    a348:	6091      	str	r1, [r2, #8]
}
    a34a:	bd10      	pop	{r4, pc}
		FTM0_C0V = cval;
    a34c:	4823      	ldr	r0, [pc, #140]	; (a3dc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a34e:	4a28      	ldr	r2, [pc, #160]	; (a3f0 <analogWrite+0x218>)
		FTM0_C0V = cval;
    a350:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM0_CH0_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a352:	f240 4144 	movw	r1, #1092	; 0x444
    a356:	6051      	str	r1, [r2, #4]
}
    a358:	bd10      	pop	{r4, pc}
		FTM0_C6V = cval;
    a35a:	4820      	ldr	r0, [pc, #128]	; (a3dc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a35c:	4a25      	ldr	r2, [pc, #148]	; (a3f4 <analogWrite+0x21c>)
		FTM0_C6V = cval;
    a35e:	6403      	str	r3, [r0, #64]	; 0x40
		FTM_PINCFG(FTM0_CH6_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a360:	f240 4144 	movw	r1, #1092	; 0x444
    a364:	6191      	str	r1, [r2, #24]
}
    a366:	bd10      	pop	{r4, pc}
		FTM0_C5V = cval;
    a368:	481c      	ldr	r0, [pc, #112]	; (a3dc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a36a:	4a22      	ldr	r2, [pc, #136]	; (a3f4 <analogWrite+0x21c>)
		FTM0_C5V = cval;
    a36c:	6383      	str	r3, [r0, #56]	; 0x38
		FTM_PINCFG(FTM0_CH5_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a36e:	f240 4144 	movw	r1, #1092	; 0x444
    a372:	6151      	str	r1, [r2, #20]
}
    a374:	bd10      	pop	{r4, pc}
		FTM0_C3V = cval;
    a376:	4819      	ldr	r0, [pc, #100]	; (a3dc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a378:	4a1d      	ldr	r2, [pc, #116]	; (a3f0 <analogWrite+0x218>)
		FTM0_C3V = cval;
    a37a:	6283      	str	r3, [r0, #40]	; 0x28
		FTM_PINCFG(FTM0_CH3_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a37c:	f240 4144 	movw	r1, #1092	; 0x444
    a380:	6111      	str	r1, [r2, #16]
}
    a382:	bd10      	pop	{r4, pc}
		FTM0_C2V = cval;
    a384:	4815      	ldr	r0, [pc, #84]	; (a3dc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a386:	4a1a      	ldr	r2, [pc, #104]	; (a3f0 <analogWrite+0x218>)
		FTM0_C2V = cval;
    a388:	6203      	str	r3, [r0, #32]
		FTM_PINCFG(FTM0_CH2_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a38a:	f240 4144 	movw	r1, #1092	; 0x444
    a38e:	60d1      	str	r1, [r2, #12]
}
    a390:	bd10      	pop	{r4, pc}
		FTM0_C4V = cval;
    a392:	4812      	ldr	r0, [pc, #72]	; (a3dc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a394:	4a17      	ldr	r2, [pc, #92]	; (a3f4 <analogWrite+0x21c>)
		FTM0_C4V = cval;
    a396:	6303      	str	r3, [r0, #48]	; 0x30
		FTM_PINCFG(FTM0_CH4_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a398:	f240 4144 	movw	r1, #1092	; 0x444
    a39c:	6111      	str	r1, [r2, #16]
}
    a39e:	bd10      	pop	{r4, pc}
		FTM0_C7V = cval;
    a3a0:	480e      	ldr	r0, [pc, #56]	; (a3dc <analogWrite+0x204>)
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3a2:	4a14      	ldr	r2, [pc, #80]	; (a3f4 <analogWrite+0x21c>)
		FTM0_C7V = cval;
    a3a4:	6483      	str	r3, [r0, #72]	; 0x48
		FTM_PINCFG(FTM0_CH7_PIN) = PORT_PCR_MUX(4) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3a6:	f240 4144 	movw	r1, #1092	; 0x444
    a3aa:	61d1      	str	r1, [r2, #28]
}
    a3ac:	bd10      	pop	{r4, pc}
		FTM2_C1V = cval;
    a3ae:	480d      	ldr	r0, [pc, #52]	; (a3e4 <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3b0:	4a11      	ldr	r2, [pc, #68]	; (a3f8 <analogWrite+0x220>)
		FTM2_C1V = cval;
    a3b2:	6183      	str	r3, [r0, #24]
		FTM_PINCFG(FTM2_CH1_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3b4:	f44f 7151 	mov.w	r1, #836	; 0x344
    a3b8:	64d1      	str	r1, [r2, #76]	; 0x4c
}
    a3ba:	bd10      	pop	{r4, pc}
		FTM2_C0V = cval;
    a3bc:	4809      	ldr	r0, [pc, #36]	; (a3e4 <analogWrite+0x20c>)
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3be:	4a0e      	ldr	r2, [pc, #56]	; (a3f8 <analogWrite+0x220>)
		FTM2_C0V = cval;
    a3c0:	6103      	str	r3, [r0, #16]
		FTM_PINCFG(FTM2_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3c2:	f44f 7151 	mov.w	r1, #836	; 0x344
    a3c6:	6491      	str	r1, [r2, #72]	; 0x48
}
    a3c8:	bd10      	pop	{r4, pc}
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3ca:	4b08      	ldr	r3, [pc, #32]	; (a3ec <analogWrite+0x214>)
		FTM1_C0V = cval;
    a3cc:	6122      	str	r2, [r4, #16]
		FTM_PINCFG(FTM1_CH0_PIN) = PORT_PCR_MUX(3) | PORT_PCR_DSE | PORT_PCR_SRE;
    a3ce:	f44f 7151 	mov.w	r1, #836	; 0x344
    a3d2:	6319      	str	r1, [r3, #48]	; 0x30
}
    a3d4:	bd10      	pop	{r4, pc}
    a3d6:	bf00      	nop
    a3d8:	1fff88ec 	.word	0x1fff88ec
    a3dc:	40038000 	.word	0x40038000
    a3e0:	000154d8 	.word	0x000154d8
    a3e4:	400b8000 	.word	0x400b8000
    a3e8:	40039000 	.word	0x40039000
    a3ec:	40049000 	.word	0x40049000
    a3f0:	4004b000 	.word	0x4004b000
    a3f4:	4004c000 	.word	0x4004c000
    a3f8:	4004a000 	.word	0x4004a000

0000a3fc <analogWriteFrequency>:
{
    a3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a400:	460e      	mov	r6, r1
    a402:	4680      	mov	r8, r0
	if (frequency < (float)(F_TIMER >> 7) / 65536.0f) {
    a404:	492c      	ldr	r1, [pc, #176]	; (a4b8 <analogWriteFrequency+0xbc>)
    a406:	4630      	mov	r0, r6
    a408:	f002 ff54 	bl	d2b4 <__aeabi_fcmplt>
		ftmClockSource = 1; 	// Use default F_TIMER clock source
    a40c:	4b2b      	ldr	r3, [pc, #172]	; (a4bc <analogWriteFrequency+0xc0>)
    a40e:	2800      	cmp	r0, #0
    a410:	f647 2712 	movw	r7, #31250	; 0x7a12
    a414:	bf12      	itee	ne
    a416:	f04f 0a02 	movne.w	sl, #2
    a41a:	f04f 0a01 	moveq.w	sl, #1
    a41e:	461f      	moveq	r7, r3
	for (prescale = 0; prescale < 7; prescale++) {
    a420:	2400      	movs	r4, #0
		minfreq = (float)(ftmClock >> prescale) / 65536.0f;	//Use ftmClock instead of F_TIMER
    a422:	f04f 595e 	mov.w	r9, #931135488	; 0x37800000
    a426:	fa27 f004 	lsr.w	r0, r7, r4
    a42a:	f002 fd4d 	bl	cec8 <__aeabi_ui2f>
    a42e:	4649      	mov	r1, r9
    a430:	4605      	mov	r5, r0
    a432:	f002 fda1 	bl	cf78 <__aeabi_fmul>
    a436:	4601      	mov	r1, r0
		if (frequency >= minfreq) break;
    a438:	4630      	mov	r0, r6
    a43a:	f002 ff4f 	bl	d2dc <__aeabi_fcmpge>
    a43e:	b930      	cbnz	r0, a44e <analogWriteFrequency+0x52>
	for (prescale = 0; prescale < 7; prescale++) {
    a440:	3401      	adds	r4, #1
    a442:	2c07      	cmp	r4, #7
    a444:	d1ef      	bne.n	a426 <analogWriteFrequency+0x2a>
	mod = (float)(ftmClock >> prescale) / frequency - 0.5f;	//Use ftmClock instead of F_TIMER
    a446:	09f8      	lsrs	r0, r7, #7
    a448:	f002 fd3e 	bl	cec8 <__aeabi_ui2f>
    a44c:	4605      	mov	r5, r0
    a44e:	4631      	mov	r1, r6
    a450:	4628      	mov	r0, r5
    a452:	f002 fe45 	bl	d0e0 <__aeabi_fdiv>
    a456:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    a45a:	f002 fc83 	bl	cd64 <__aeabi_fsub>
    a45e:	f002 ff77 	bl	d350 <__aeabi_f2uiz>
    a462:	f64f 73ff 	movw	r3, #65535	; 0xffff
    a466:	4298      	cmp	r0, r3
    a468:	bf28      	it	cs
    a46a:	4618      	movcs	r0, r3
	if (pin == FTM1_CH0_PIN || pin == FTM1_CH1_PIN) {
    a46c:	f1a8 0303 	sub.w	r3, r8, #3
    a470:	2b01      	cmp	r3, #1
    a472:	d911      	bls.n	a498 <analogWriteFrequency+0x9c>
	} else if (pin == FTM0_CH0_PIN || pin == FTM0_CH1_PIN
    a474:	f1a8 0805 	sub.w	r8, r8, #5
    a478:	fa5f f888 	uxtb.w	r8, r8
    a47c:	f1b8 0f1b 	cmp.w	r8, #27
    a480:	d808      	bhi.n	a494 <analogWriteFrequency+0x98>
    a482:	4a0f      	ldr	r2, [pc, #60]	; (a4c0 <analogWriteFrequency+0xc4>)
    a484:	2301      	movs	r3, #1
    a486:	fa03 f308 	lsl.w	r3, r3, r8
    a48a:	401a      	ands	r2, r3
    a48c:	d110      	bne.n	a4b0 <analogWriteFrequency+0xb4>
    a48e:	f013 6f01 	tst.w	r3, #135266304	; 0x8100000
    a492:	d10b      	bne.n	a4ac <analogWriteFrequency+0xb0>
}
    a494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM1_SC = 0;
    a498:	4b0a      	ldr	r3, [pc, #40]	; (a4c4 <analogWriteFrequency+0xc8>)
    a49a:	2200      	movs	r2, #0
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    a49c:	ea44 04ca 	orr.w	r4, r4, sl, lsl #3
		FTM2_SC = 0;
    a4a0:	601a      	str	r2, [r3, #0]
		FTM2_CNT = 0;
    a4a2:	605a      	str	r2, [r3, #4]
		FTM2_MOD = mod;
    a4a4:	6098      	str	r0, [r3, #8]
		FTM2_SC = FTM_SC_CLKS(ftmClockSource) | FTM_SC_PS(prescale);	//Use ftmClockSource instead of 1
    a4a6:	601c      	str	r4, [r3, #0]
}
    a4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		FTM2_SC = 0;
    a4ac:	4b06      	ldr	r3, [pc, #24]	; (a4c8 <analogWriteFrequency+0xcc>)
    a4ae:	e7f5      	b.n	a49c <analogWriteFrequency+0xa0>
		FTM0_SC = 0;
    a4b0:	4b06      	ldr	r3, [pc, #24]	; (a4cc <analogWriteFrequency+0xd0>)
    a4b2:	2200      	movs	r2, #0
    a4b4:	e7f2      	b.n	a49c <analogWriteFrequency+0xa0>
    a4b6:	bf00      	nop
    a4b8:	40b71b00 	.word	0x40b71b00
    a4bc:	02dc6c00 	.word	0x02dc6c00
    a4c0:	00078033 	.word	0x00078033
    a4c4:	40039000 	.word	0x40039000
    a4c8:	400b8000 	.word	0x400b8000
    a4cc:	40038000 	.word	0x40038000

0000a4d0 <digitalWrite>:
	if (pin >= CORE_NUM_DIGITAL) return;
    a4d0:	2821      	cmp	r0, #33	; 0x21
    a4d2:	d816      	bhi.n	a502 <digitalWrite+0x32>
{
    a4d4:	b410      	push	{r4}
	if (*portModeRegister(pin)) {
    a4d6:	4b10      	ldr	r3, [pc, #64]	; (a518 <digitalWrite+0x48>)
    a4d8:	f853 2030 	ldr.w	r2, [r3, r0, lsl #3]
    a4dc:	f892 4280 	ldrb.w	r4, [r2, #640]	; 0x280
    a4e0:	b12c      	cbz	r4, a4ee <digitalWrite+0x1e>
			*portSetRegister(pin) = 1;
    a4e2:	2301      	movs	r3, #1
		if (val) {
    a4e4:	b971      	cbnz	r1, a504 <digitalWrite+0x34>
			*portClearRegister(pin) = 1;
    a4e6:	f882 3100 	strb.w	r3, [r2, #256]	; 0x100
}
    a4ea:	bc10      	pop	{r4}
    a4ec:	4770      	bx	lr
		volatile uint32_t *config = portConfigRegister(pin);
    a4ee:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    a4f2:	685b      	ldr	r3, [r3, #4]
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a4f4:	681a      	ldr	r2, [r3, #0]
		if (val) {
    a4f6:	b149      	cbz	r1, a50c <digitalWrite+0x3c>
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a4f8:	f042 0203 	orr.w	r2, r2, #3
}
    a4fc:	bc10      	pop	{r4}
			*config |= (PORT_PCR_PE | PORT_PCR_PS);
    a4fe:	601a      	str	r2, [r3, #0]
}
    a500:	4770      	bx	lr
    a502:	4770      	bx	lr
			*portSetRegister(pin) = 1;
    a504:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
}
    a508:	bc10      	pop	{r4}
    a50a:	4770      	bx	lr
			*config &= ~(PORT_PCR_PE);
    a50c:	f022 0202 	bic.w	r2, r2, #2
}
    a510:	bc10      	pop	{r4}
			*config &= ~(PORT_PCR_PE);
    a512:	601a      	str	r2, [r3, #0]
}
    a514:	4770      	bx	lr
    a516:	bf00      	nop
    a518:	000154d8 	.word	0x000154d8

0000a51c <digitalRead>:
	if (pin >= CORE_NUM_DIGITAL) return 0;
    a51c:	2821      	cmp	r0, #33	; 0x21
    a51e:	d806      	bhi.n	a52e <digitalRead+0x12>
	return *portInputRegister(pin);
    a520:	4b04      	ldr	r3, [pc, #16]	; (a534 <digitalRead+0x18>)
    a522:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    a526:	f893 0200 	ldrb.w	r0, [r3, #512]	; 0x200
    a52a:	b2c0      	uxtb	r0, r0
    a52c:	4770      	bx	lr
	if (pin >= CORE_NUM_DIGITAL) return 0;
    a52e:	2000      	movs	r0, #0
}
    a530:	4770      	bx	lr
    a532:	bf00      	nop
    a534:	000154d8 	.word	0x000154d8

0000a538 <pinMode>:
	if (pin >= CORE_NUM_DIGITAL) return;
    a538:	2821      	cmp	r0, #33	; 0x21
    a53a:	d820      	bhi.n	a57e <pinMode+0x46>
	config = portConfigRegister(pin);
    a53c:	4a1b      	ldr	r2, [pc, #108]	; (a5ac <pinMode+0x74>)
    a53e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a542:	2901      	cmp	r1, #1
	config = portConfigRegister(pin);
    a544:	685b      	ldr	r3, [r3, #4]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    a546:	d00f      	beq.n	a568 <pinMode+0x30>
    a548:	2904      	cmp	r1, #4
    a54a:	d01d      	beq.n	a588 <pinMode+0x50>
		*portModeRegister(pin) = 0;
    a54c:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
    a550:	2200      	movs	r2, #0
    a552:	f880 2280 	strb.w	r2, [r0, #640]	; 0x280
		if (mode == INPUT) {
    a556:	b199      	cbz	r1, a580 <pinMode+0x48>
		} else if (mode == INPUT_PULLUP) {
    a558:	2902      	cmp	r1, #2
    a55a:	d022      	beq.n	a5a2 <pinMode+0x6a>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		} else if (mode == INPUT_PULLDOWN) {
    a55c:	2903      	cmp	r1, #3
    a55e:	d10d      	bne.n	a57c <pinMode+0x44>
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE;
    a560:	f44f 7281 	mov.w	r2, #258	; 0x102
    a564:	601a      	str	r2, [r3, #0]
    a566:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    a568:	f852 0030 	ldr.w	r0, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a56c:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a570:	f880 1280 	strb.w	r1, [r0, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a574:	601a      	str	r2, [r3, #0]
		    *config &= ~PORT_PCR_ODE;
    a576:	681a      	ldr	r2, [r3, #0]
    a578:	f022 0220 	bic.w	r2, r2, #32
    a57c:	601a      	str	r2, [r3, #0]
		} else { // INPUT_DISABLE
			*config = 0;
		}
	}
}
    a57e:	4770      	bx	lr
			*config = PORT_PCR_MUX(1);
    a580:	f44f 7280 	mov.w	r2, #256	; 0x100
    a584:	601a      	str	r2, [r3, #0]
    a586:	4770      	bx	lr
		*portModeRegister(pin) = 1;
    a588:	f852 1030 	ldr.w	r1, [r2, r0, lsl #3]
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a58c:	f44f 72a2 	mov.w	r2, #324	; 0x144
		*portModeRegister(pin) = 1;
    a590:	2001      	movs	r0, #1
    a592:	f881 0280 	strb.w	r0, [r1, #640]	; 0x280
		*config = PORT_PCR_SRE | PORT_PCR_DSE | PORT_PCR_MUX(1);
    a596:	601a      	str	r2, [r3, #0]
		    *config |= PORT_PCR_ODE;
    a598:	681a      	ldr	r2, [r3, #0]
    a59a:	f042 0220 	orr.w	r2, r2, #32
    a59e:	601a      	str	r2, [r3, #0]
    a5a0:	4770      	bx	lr
			*config = PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
    a5a2:	f240 1203 	movw	r2, #259	; 0x103
    a5a6:	601a      	str	r2, [r3, #0]
    a5a8:	4770      	bx	lr
    a5aa:	bf00      	nop
    a5ac:	000154d8 	.word	0x000154d8

0000a5b0 <micros>:

uint32_t micros(void)
{
	uint32_t count, current, istatus;

	__disable_irq();
    a5b0:	b672      	cpsid	i
	current = SYST_CVR;
	count = systick_millis_count;
    a5b2:	490d      	ldr	r1, [pc, #52]	; (a5e8 <micros+0x38>)
	current = SYST_CVR;
    a5b4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a5b8:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    a5ba:	6808      	ldr	r0, [r1, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a5bc:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    a5c0:	b662      	cpsie	i
	 //systick_current = current;
	 //systick_count = count;
	 //systick_istatus = istatus & SCB_ICSR_PENDSTSET ? 1 : 0;
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a5c2:	0152      	lsls	r2, r2, #5
    a5c4:	d502      	bpl.n	a5cc <micros+0x1c>
    a5c6:	2b32      	cmp	r3, #50	; 0x32
    a5c8:	bf88      	it	hi
    a5ca:	3001      	addhi	r0, #1
#if defined(KINETISL) && F_CPU == 48000000
	return count * 1000 + ((current * (uint32_t)87381) >> 22);
#elif defined(KINETISL) && F_CPU == 24000000
	return count * 1000 + ((current * (uint32_t)174763) >> 22);
#endif
	return count * 1000 + current / (F_CPU / 1000000);
    a5cc:	4a07      	ldr	r2, [pc, #28]	; (a5ec <micros+0x3c>)
	current = ((F_CPU / 1000) - 1) - current;
    a5ce:	f5c3 33bb 	rsb	r3, r3, #95744	; 0x17600
	return count * 1000 + current / (F_CPU / 1000000);
    a5d2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	current = ((F_CPU / 1000) - 1) - current;
    a5d6:	33ff      	adds	r3, #255	; 0xff
	return count * 1000 + current / (F_CPU / 1000000);
    a5d8:	fba2 2303 	umull	r2, r3, r2, r3
    a5dc:	fb01 f000 	mul.w	r0, r1, r0
}
    a5e0:	eb00 1093 	add.w	r0, r0, r3, lsr #6
    a5e4:	4770      	bx	lr
    a5e6:	bf00      	nop
    a5e8:	1fffd3c0 	.word	0x1fffd3c0
    a5ec:	aaaaaaab 	.word	0xaaaaaaab

0000a5f0 <delay>:

void delay(uint32_t ms)
{
    a5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a5f4:	4604      	mov	r4, r0
	__disable_irq();
    a5f6:	b672      	cpsid	i
	count = systick_millis_count;
    a5f8:	4f20      	ldr	r7, [pc, #128]	; (a67c <delay+0x8c>)
	current = SYST_CVR;
    a5fa:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    a5fe:	6993      	ldr	r3, [r2, #24]
	count = systick_millis_count;
    a600:	683d      	ldr	r5, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a602:	f8d2 2d04 	ldr.w	r2, [r2, #3332]	; 0xd04
	__enable_irq();
    a606:	b662      	cpsie	i
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a608:	0152      	lsls	r2, r2, #5
    a60a:	d502      	bpl.n	a612 <delay+0x22>
    a60c:	2b32      	cmp	r3, #50	; 0x32
    a60e:	bf88      	it	hi
    a610:	3501      	addhi	r5, #1
	uint32_t start = micros();

	if (ms > 0) {
    a612:	b90c      	cbnz	r4, a618 <delay+0x28>
				start += 1000;
			}
			yield();
		}
	}
}
    a614:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	current = ((F_CPU / 1000) - 1) - current;
    a618:	f8df 9064 	ldr.w	r9, [pc, #100]	; a680 <delay+0x90>
	return count * 1000 + current / (F_CPU / 1000000);
    a61c:	f8df 8064 	ldr.w	r8, [pc, #100]	; a684 <delay+0x94>
	current = ((F_CPU / 1000) - 1) - current;
    a620:	eba9 0303 	sub.w	r3, r9, r3
	return count * 1000 + current / (F_CPU / 1000000);
    a624:	fba8 2303 	umull	r2, r3, r8, r3
    a628:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a62c:	fb02 f505 	mul.w	r5, r2, r5
    a630:	eb05 1593 	add.w	r5, r5, r3, lsr #6
	current = SYST_CVR;
    a634:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
	__disable_irq();
    a638:	b672      	cpsid	i
	current = SYST_CVR;
    a63a:	69b1      	ldr	r1, [r6, #24]
	count = systick_millis_count;
    a63c:	683a      	ldr	r2, [r7, #0]
	istatus = SCB_ICSR;	// bit 26 indicates if systick exception pending
    a63e:	f8d6 cd04 	ldr.w	ip, [r6, #3332]	; 0xd04
	__enable_irq();
    a642:	b662      	cpsie	i
	current = ((F_CPU / 1000) - 1) - current;
    a644:	eba9 0301 	sub.w	r3, r9, r1
	return count * 1000 + current / (F_CPU / 1000000);
    a648:	fba8 0303 	umull	r0, r3, r8, r3
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a64c:	f01c 6f80 	tst.w	ip, #67108864	; 0x4000000
			while ((micros() - start) >= 1000) {
    a650:	ebc5 1393 	rsb	r3, r5, r3, lsr #6
	return count * 1000 + current / (F_CPU / 1000000);
    a654:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	if ((istatus & SCB_ICSR_PENDSTSET) && current > 50) count++;
    a658:	d002      	beq.n	a660 <delay+0x70>
    a65a:	2932      	cmp	r1, #50	; 0x32
    a65c:	bf88      	it	hi
    a65e:	3201      	addhi	r2, #1
			while ((micros() - start) >= 1000) {
    a660:	fb00 3302 	mla	r3, r0, r2, r3
    a664:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    a668:	d304      	bcc.n	a674 <delay+0x84>
				if (ms == 0) return;
    a66a:	3c01      	subs	r4, #1
    a66c:	d0d2      	beq.n	a614 <delay+0x24>
				start += 1000;
    a66e:	f505 757a 	add.w	r5, r5, #1000	; 0x3e8
    a672:	e7e1      	b.n	a638 <delay+0x48>
			yield();
    a674:	f001 fea6 	bl	c3c4 <yield>
			while ((micros() - start) >= 1000) {
    a678:	e7de      	b.n	a638 <delay+0x48>
    a67a:	bf00      	nop
    a67c:	1fffd3c0 	.word	0x1fffd3c0
    a680:	000176ff 	.word	0x000176ff
    a684:	aaaaaaab 	.word	0xaaaaaaab

0000a688 <serial2_begin>:
#define GPIO_BITBAND_PTR(reg, bit) ((uint32_t *)GPIO_BITBAND_ADDR((reg), (bit)))
#define C3_TXDIR_BIT 5

void serial2_begin(uint32_t divisor)
{
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a688:	4a2a      	ldr	r2, [pc, #168]	; (a734 <serial2_begin+0xac>)
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
    a68a:	492b      	ldr	r1, [pc, #172]	; (a738 <serial2_begin+0xb0>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a68c:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    a68e:	b470      	push	{r4, r5, r6}
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a690:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
	rx_buffer_head = 0;
    a694:	4d29      	ldr	r5, [pc, #164]	; (a73c <serial2_begin+0xb4>)
	SIM_SCGC4 |= SIM_SCGC4_UART1;	// turn on clock, TODO: use bitband
    a696:	6353      	str	r3, [r2, #52]	; 0x34
	tx_buffer_head = 0;
	tx_buffer_tail = 0;
	transmitting = 0;
#if defined(KINETISK)
	switch (rx_pin_num) {
    a698:	4e29      	ldr	r6, [pc, #164]	; (a740 <serial2_begin+0xb8>)
	tx_buffer_head = 0;
    a69a:	4c2a      	ldr	r4, [pc, #168]	; (a744 <serial2_begin+0xbc>)
	switch (rx_pin_num) {
    a69c:	7832      	ldrb	r2, [r6, #0]
	rx_buffer_head = 0;
    a69e:	2300      	movs	r3, #0
    a6a0:	702b      	strb	r3, [r5, #0]
	rx_buffer_tail = 0;
    a6a2:	700b      	strb	r3, [r1, #0]
	tx_buffer_tail = 0;
    a6a4:	4928      	ldr	r1, [pc, #160]	; (a748 <serial2_begin+0xc0>)
	tx_buffer_head = 0;
    a6a6:	7023      	strb	r3, [r4, #0]
	tx_buffer_tail = 0;
    a6a8:	700b      	strb	r3, [r1, #0]
	transmitting = 0;
    a6aa:	4928      	ldr	r1, [pc, #160]	; (a74c <serial2_begin+0xc4>)
	switch (rx_pin_num) {
    a6ac:	2a09      	cmp	r2, #9
	transmitting = 0;
    a6ae:	700b      	strb	r3, [r1, #0]
	switch (rx_pin_num) {
    a6b0:	d033      	beq.n	a71a <serial2_begin+0x92>
    a6b2:	2a1a      	cmp	r2, #26
    a6b4:	d103      	bne.n	a6be <serial2_begin+0x36>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a6b6:	4b26      	ldr	r3, [pc, #152]	; (a750 <serial2_begin+0xc8>)
    a6b8:	f240 3213 	movw	r2, #787	; 0x313
    a6bc:	605a      	str	r2, [r3, #4]
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__)  // T3.5 or T3.6
		case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
		#endif
	}
	switch (tx_pin_num) {
    a6be:	4b25      	ldr	r3, [pc, #148]	; (a754 <serial2_begin+0xcc>)
    a6c0:	781b      	ldrb	r3, [r3, #0]
    a6c2:	2b0a      	cmp	r3, #10
    a6c4:	d031      	beq.n	a72a <serial2_begin+0xa2>
    a6c6:	2b1f      	cmp	r3, #31
    a6c8:	d103      	bne.n	a6d2 <serial2_begin+0x4a>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
		#if defined(__MK20DX128__) || defined(__MK20DX256__)    // T3.0, T3.1, T3.2
		case 31: CORE_PIN31_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    a6ca:	4b21      	ldr	r3, [pc, #132]	; (a750 <serial2_begin+0xc8>)
    a6cc:	f44f 7251 	mov.w	r2, #836	; 0x344
    a6d0:	601a      	str	r2, [r3, #0]
#elif defined(KINETISL)
	CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
	CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
#endif
#if defined(HAS_KINETISK_UART1)
	if (divisor < 32) divisor = 32;
    a6d2:	2820      	cmp	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    a6d4:	4b20      	ldr	r3, [pc, #128]	; (a758 <serial2_begin+0xd0>)
	UART1_BDH = (divisor >> 8) & 0x1F;
	UART1_BDL = divisor & 0xFF;
	UART1_C1 = 0;
#endif
	UART1_C2 = C2_TX_INACTIVE;
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a6d6:	4c21      	ldr	r4, [pc, #132]	; (a75c <serial2_begin+0xd4>)
    a6d8:	bf38      	it	cc
    a6da:	2020      	movcc	r0, #32
	UART1_BDH = (divisor >> 13) & 0x1F;
    a6dc:	f3c0 3c44 	ubfx	ip, r0, #13, #5
    a6e0:	f883 c000 	strb.w	ip, [r3]
	UART1_BDL = (divisor >> 5) & 0xFF;
    a6e4:	f3c0 1c47 	ubfx	ip, r0, #5, #8
	UART1_C4 = divisor & 0x1F;
    a6e8:	f000 001f 	and.w	r0, r0, #31
	UART1_BDL = (divisor >> 5) & 0xFF;
    a6ec:	f883 c001 	strb.w	ip, [r3, #1]
	UART1_C1 = UART_C1_ILT;
    a6f0:	2204      	movs	r2, #4
	UART1_C4 = divisor & 0x1F;
    a6f2:	7298      	strb	r0, [r3, #10]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    a6f4:	2002      	movs	r0, #2
	UART1_C1 = UART_C1_ILT;
    a6f6:	709a      	strb	r2, [r3, #2]
	UART1_TWFIFO = 2; // tx watermark, causes S1_TDRE to set
    a6f8:	74d8      	strb	r0, [r3, #19]
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    a6fa:	2088      	movs	r0, #136	; 0x88
	UART1_RWFIFO = 4; // rx watermark, causes S1_RDRF to set
    a6fc:	755a      	strb	r2, [r3, #21]
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a6fe:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	UART1_PFIFO = UART_PFIFO_TXFE | UART_PFIFO_RXFE;
    a702:	7418      	strb	r0, [r3, #16]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a704:	2240      	movs	r2, #64	; 0x40
	UART1_C2 = C2_TX_INACTIVE;
    a706:	203c      	movs	r0, #60	; 0x3c
    a708:	70d8      	strb	r0, [r3, #3]
	NVIC_SET_PRIORITY(IRQ_UART1_STATUS, IRQ_PRIORITY);
    a70a:	f884 202f 	strb.w	r2, [r4, #47]	; 0x2f
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a70e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
}
    a712:	bc70      	pop	{r4, r5, r6}
	NVIC_ENABLE_IRQ(IRQ_UART1_STATUS);
    a714:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
}
    a718:	4770      	bx	lr
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a71a:	4b11      	ldr	r3, [pc, #68]	; (a760 <serial2_begin+0xd8>)
    a71c:	f240 3213 	movw	r2, #787	; 0x313
    a720:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num) {
    a722:	4b0c      	ldr	r3, [pc, #48]	; (a754 <serial2_begin+0xcc>)
    a724:	781b      	ldrb	r3, [r3, #0]
    a726:	2b0a      	cmp	r3, #10
    a728:	d1cd      	bne.n	a6c6 <serial2_begin+0x3e>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3); break;
    a72a:	4b0d      	ldr	r3, [pc, #52]	; (a760 <serial2_begin+0xd8>)
    a72c:	f44f 7251 	mov.w	r2, #836	; 0x344
    a730:	611a      	str	r2, [r3, #16]
    a732:	e7ce      	b.n	a6d2 <serial2_begin+0x4a>
    a734:	40048000 	.word	0x40048000
    a738:	1fffd410 	.word	0x1fffd410
    a73c:	1fffd408 	.word	0x1fffd408
    a740:	1fff89dc 	.word	0x1fff89dc
    a744:	1fffd444 	.word	0x1fffd444
    a748:	1fffd44c 	.word	0x1fffd44c
    a74c:	1fffd418 	.word	0x1fffd418
    a750:	4004d000 	.word	0x4004d000
    a754:	1fff89e4 	.word	0x1fff89e4
    a758:	4006b000 	.word	0x4006b000
    a75c:	e000e400 	.word	0xe000e400
    a760:	4004b000 	.word	0x4004b000

0000a764 <serial2_format>:

void serial2_format(uint32_t format)
{
	uint8_t c;

	c = UART1_C1;
    a764:	4b21      	ldr	r3, [pc, #132]	; (a7ec <serial2_format+0x88>)
	c = (c & ~0x13) | (format & 0x03);	// configure parity
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
	UART1_C1 = c;
    a766:	4921      	ldr	r1, [pc, #132]	; (a7ec <serial2_format+0x88>)
	c = UART1_C1;
    a768:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    a76a:	f000 0203 	and.w	r2, r0, #3
    a76e:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    a772:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    a774:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a776:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    a77a:	bf48      	it	mi
    a77c:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a780:	2a04      	cmp	r2, #4
	UART1_C1 = c;
    a782:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART1_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    a784:	d103      	bne.n	a78e <serial2_format+0x2a>
    a786:	798b      	ldrb	r3, [r1, #6]
    a788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a78c:	718b      	strb	r3, [r1, #6]
	c = UART1_S2 & ~0x10;
    a78e:	4b17      	ldr	r3, [pc, #92]	; (a7ec <serial2_format+0x88>)
	if (format & 0x10) c |= 0x10;		// rx invert
	UART1_S2 = c;
    a790:	4a16      	ldr	r2, [pc, #88]	; (a7ec <serial2_format+0x88>)
	c = UART1_S2 & ~0x10;
    a792:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    a794:	06c1      	lsls	r1, r0, #27
	c = UART1_S2 & ~0x10;
    a796:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    a79a:	bf48      	it	mi
    a79c:	f043 0310 	orrmi.w	r3, r3, #16
	UART1_S2 = c;
    a7a0:	7153      	strb	r3, [r2, #5]
	c = UART1_C3 & ~0x10;
    a7a2:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    a7a4:	0682      	lsls	r2, r0, #26
	c = UART1_C3 & ~0x10;
    a7a6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART1_C3 = c;
    a7aa:	4a10      	ldr	r2, [pc, #64]	; (a7ec <serial2_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    a7ac:	bf48      	it	mi
    a7ae:	f043 0310 	orrmi.w	r3, r3, #16
		UART1_BDH |= UART_BDH_SBNS;		// Turn on 2 stop bits - was turned off by set baud
		UART1_BDL = bdl;		// Says BDH not acted on until BDL is written
	}
#endif
	// process request for half duplex.
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    a7b2:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART1_C3 = c;
    a7b6:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    a7b8:	d010      	beq.n	a7dc <serial2_format+0x78>
		c = UART1_C1;
    a7ba:	7893      	ldrb	r3, [r2, #2]
		#if defined(KINETISL)
		//CORE_PIN10_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(1) | PORT_PCR_PE | PORT_PCR_PS;
		CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
		half_duplex_mode = 1;
		#else
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a7bc:	490c      	ldr	r1, [pc, #48]	; (a7f0 <serial2_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    a7be:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART1_C1 = c;
    a7c2:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a7c4:	7809      	ldrb	r1, [r1, #0]
    a7c6:	4b0b      	ldr	r3, [pc, #44]	; (a7f4 <serial2_format+0x90>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a7c8:	4a0b      	ldr	r2, [pc, #44]	; (a7f8 <serial2_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a7ca:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    a7ce:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    a7d2:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a7d4:	4909      	ldr	r1, [pc, #36]	; (a7fc <serial2_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    a7d6:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT);
    a7d8:	6011      	str	r1, [r2, #0]
    a7da:	4770      	bx	lr

	} else {
		#if defined(KINETISL)
		half_duplex_mode = 0;
		#else
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART1_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    a7dc:	4b06      	ldr	r3, [pc, #24]	; (a7f8 <serial2_format+0x94>)
    a7de:	4a07      	ldr	r2, [pc, #28]	; (a7fc <serial2_format+0x98>)
    a7e0:	6819      	ldr	r1, [r3, #0]
    a7e2:	4291      	cmp	r1, r2
    a7e4:	bf08      	it	eq
    a7e6:	6018      	streq	r0, [r3, #0]
		#endif
	}
}
    a7e8:	4770      	bx	lr
    a7ea:	bf00      	nop
    a7ec:	4006b000 	.word	0x4006b000
    a7f0:	1fff89e4 	.word	0x1fff89e4
    a7f4:	000154d8 	.word	0x000154d8
    a7f8:	1fffd414 	.word	0x1fffd414
    a7fc:	42d600d4 	.word	0x42d600d4

0000a800 <serial2_end>:

void serial2_end(void)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    a800:	4b29      	ldr	r3, [pc, #164]	; (a8a8 <serial2_end+0xa8>)
    a802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a804:	051b      	lsls	r3, r3, #20
    a806:	d54d      	bpl.n	a8a4 <serial2_end+0xa4>
{
    a808:	b510      	push	{r4, lr}
	while (transmitting) yield();  // wait for buffered data to send
    a80a:	4c28      	ldr	r4, [pc, #160]	; (a8ac <serial2_end+0xac>)
    a80c:	7823      	ldrb	r3, [r4, #0]
    a80e:	b123      	cbz	r3, a81a <serial2_end+0x1a>
    a810:	f001 fdd8 	bl	c3c4 <yield>
    a814:	7823      	ldrb	r3, [r4, #0]
    a816:	2b00      	cmp	r3, #0
    a818:	d1fa      	bne.n	a810 <serial2_end+0x10>
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
	UART1_C2 = 0;
    a81a:	4a25      	ldr	r2, [pc, #148]	; (a8b0 <serial2_end+0xb0>)
#if defined(KINETISK)
	switch (rx_pin_num) {
    a81c:	4b25      	ldr	r3, [pc, #148]	; (a8b4 <serial2_end+0xb4>)
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    a81e:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    a822:	f44f 4400 	mov.w	r4, #32768	; 0x8000
	UART1_C2 = 0;
    a826:	2100      	movs	r1, #0
	NVIC_DISABLE_IRQ(IRQ_UART1_STATUS);
    a828:	f8c0 4184 	str.w	r4, [r0, #388]	; 0x184
	UART1_C2 = 0;
    a82c:	70d1      	strb	r1, [r2, #3]
	switch (rx_pin_num) {
    a82e:	781b      	ldrb	r3, [r3, #0]
    a830:	2b09      	cmp	r3, #9
    a832:	d02c      	beq.n	a88e <serial2_end+0x8e>
    a834:	2b1a      	cmp	r3, #26
    a836:	d01b      	beq.n	a870 <serial2_end+0x70>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
		#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
		case 59: CORE_PIN59_CONFIG = 0; break;
		#endif
	}
	switch (tx_pin_num & 127) {
    a838:	4b1f      	ldr	r3, [pc, #124]	; (a8b8 <serial2_end+0xb8>)
    a83a:	781b      	ldrb	r3, [r3, #0]
    a83c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a840:	2b0a      	cmp	r3, #10
    a842:	d01f      	beq.n	a884 <serial2_end+0x84>
    a844:	2b1f      	cmp	r3, #31
    a846:	d00e      	beq.n	a866 <serial2_end+0x66>
#endif
	UART1_S1;
	UART1_D; // clear leftover error status
	rx_buffer_head = 0;
	rx_buffer_tail = 0;
	if (rts_pin) rts_deassert();
    a848:	4b1c      	ldr	r3, [pc, #112]	; (a8bc <serial2_end+0xbc>)
	UART1_S1;
    a84a:	4a19      	ldr	r2, [pc, #100]	; (a8b0 <serial2_end+0xb0>)
	rx_buffer_head = 0;
    a84c:	4c1c      	ldr	r4, [pc, #112]	; (a8c0 <serial2_end+0xc0>)
	rx_buffer_tail = 0;
    a84e:	481d      	ldr	r0, [pc, #116]	; (a8c4 <serial2_end+0xc4>)
	if (rts_pin) rts_deassert();
    a850:	6819      	ldr	r1, [r3, #0]
	UART1_S1;
    a852:	f892 c004 	ldrb.w	ip, [r2, #4]
	UART1_D; // clear leftover error status
    a856:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    a858:	2300      	movs	r3, #0
    a85a:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    a85c:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    a85e:	b109      	cbz	r1, a864 <serial2_end+0x64>
    a860:	2301      	movs	r3, #1
    a862:	700b      	strb	r3, [r1, #0]
}
    a864:	bd10      	pop	{r4, pc}
		case 31: CORE_PIN31_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE0
    a866:	4b18      	ldr	r3, [pc, #96]	; (a8c8 <serial2_end+0xc8>)
    a868:	f240 1203 	movw	r2, #259	; 0x103
    a86c:	601a      	str	r2, [r3, #0]
    a86e:	e7eb      	b.n	a848 <serial2_end+0x48>
		case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTE1
    a870:	4b15      	ldr	r3, [pc, #84]	; (a8c8 <serial2_end+0xc8>)
    a872:	f240 1203 	movw	r2, #259	; 0x103
    a876:	605a      	str	r2, [r3, #4]
	switch (tx_pin_num & 127) {
    a878:	4b0f      	ldr	r3, [pc, #60]	; (a8b8 <serial2_end+0xb8>)
    a87a:	781b      	ldrb	r3, [r3, #0]
    a87c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a880:	2b0a      	cmp	r3, #10
    a882:	d1df      	bne.n	a844 <serial2_end+0x44>
		case 10: CORE_PIN10_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC4
    a884:	4b11      	ldr	r3, [pc, #68]	; (a8cc <serial2_end+0xcc>)
    a886:	f240 1203 	movw	r2, #259	; 0x103
    a88a:	611a      	str	r2, [r3, #16]
    a88c:	e7dc      	b.n	a848 <serial2_end+0x48>
		case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1); break; // PTC3
    a88e:	4b0f      	ldr	r3, [pc, #60]	; (a8cc <serial2_end+0xcc>)
    a890:	f240 1203 	movw	r2, #259	; 0x103
    a894:	60da      	str	r2, [r3, #12]
	switch (tx_pin_num & 127) {
    a896:	4b08      	ldr	r3, [pc, #32]	; (a8b8 <serial2_end+0xb8>)
    a898:	781b      	ldrb	r3, [r3, #0]
    a89a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a89e:	2b0a      	cmp	r3, #10
    a8a0:	d1d0      	bne.n	a844 <serial2_end+0x44>
    a8a2:	e7ef      	b.n	a884 <serial2_end+0x84>
    a8a4:	4770      	bx	lr
    a8a6:	bf00      	nop
    a8a8:	40048000 	.word	0x40048000
    a8ac:	1fffd418 	.word	0x1fffd418
    a8b0:	4006b000 	.word	0x4006b000
    a8b4:	1fff89dc 	.word	0x1fff89dc
    a8b8:	1fff89e4 	.word	0x1fff89e4
    a8bc:	1fffd3c4 	.word	0x1fffd3c4
    a8c0:	1fffd408 	.word	0x1fffd408
    a8c4:	1fffd410 	.word	0x1fffd410
    a8c8:	4004d000 	.word	0x4004d000
    a8cc:	4004b000 	.word	0x4004b000

0000a8d0 <serial2_set_transmit_pin>:

void serial2_set_transmit_pin(uint8_t pin)
{
	while (transmitting) ;
    a8d0:	4a0a      	ldr	r2, [pc, #40]	; (a8fc <serial2_set_transmit_pin+0x2c>)
{
    a8d2:	b538      	push	{r3, r4, r5, lr}
    a8d4:	4605      	mov	r5, r0
	while (transmitting) ;
    a8d6:	7813      	ldrb	r3, [r2, #0]
    a8d8:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    a8dc:	2b00      	cmp	r3, #0
    a8de:	d1fa      	bne.n	a8d6 <serial2_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    a8e0:	2101      	movs	r1, #1
    a8e2:	4628      	mov	r0, r5
    a8e4:	f7ff fe28 	bl	a538 <pinMode>
	digitalWrite(pin, LOW);
    a8e8:	4621      	mov	r1, r4
    a8ea:	4628      	mov	r0, r5
    a8ec:	f7ff fdf0 	bl	a4d0 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    a8f0:	4a03      	ldr	r2, [pc, #12]	; (a900 <serial2_set_transmit_pin+0x30>)
    a8f2:	4b04      	ldr	r3, [pc, #16]	; (a904 <serial2_set_transmit_pin+0x34>)
    a8f4:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    a8f8:	601a      	str	r2, [r3, #0]
	#if defined(KINETISL)
	transmit_mask = digitalPinToBitMask(pin);
	#endif
}
    a8fa:	bd38      	pop	{r3, r4, r5, pc}
    a8fc:	1fffd418 	.word	0x1fffd418
    a900:	000154d8 	.word	0x000154d8
    a904:	1fffd414 	.word	0x1fffd414

0000a908 <serial2_set_tx>:
void serial2_set_tx(uint8_t pin, uint8_t opendrain)
{
	#if defined(KINETISK)
	uint32_t cfg;

	if (opendrain) pin |= 128;
    a908:	b109      	cbz	r1, a90e <serial2_set_tx+0x6>
    a90a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    a90e:	4a19      	ldr	r2, [pc, #100]	; (a974 <serial2_set_tx+0x6c>)
    a910:	7813      	ldrb	r3, [r2, #0]
    a912:	4283      	cmp	r3, r0
    a914:	d017      	beq.n	a946 <serial2_set_tx+0x3e>
{
    a916:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    a918:	4c17      	ldr	r4, [pc, #92]	; (a978 <serial2_set_tx+0x70>)
    a91a:	6b64      	ldr	r4, [r4, #52]	; 0x34
    a91c:	0524      	lsls	r4, r4, #20
    a91e:	d50f      	bpl.n	a940 <serial2_set_tx+0x38>
		switch (tx_pin_num & 127) {
    a920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a924:	2b0a      	cmp	r3, #10
    a926:	d021      	beq.n	a96c <serial2_set_tx+0x64>
    a928:	2b1f      	cmp	r3, #31
    a92a:	d014      	beq.n	a956 <serial2_set_tx+0x4e>
			#endif
		}
		if (opendrain) {
			cfg = PORT_PCR_DSE | PORT_PCR_ODE;
		} else {
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    a92c:	2900      	cmp	r1, #0
    a92e:	f000 037f 	and.w	r3, r0, #127	; 0x7f
    a932:	bf14      	ite	ne
    a934:	2160      	movne	r1, #96	; 0x60
    a936:	2144      	moveq	r1, #68	; 0x44
		}
		switch (pin & 127) {
    a938:	2b0a      	cmp	r3, #10
    a93a:	d010      	beq.n	a95e <serial2_set_tx+0x56>
    a93c:	2b1f      	cmp	r3, #31
    a93e:	d003      	beq.n	a948 <serial2_set_tx+0x40>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 58: CORE_PIN58_CONFIG = cfg | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	tx_pin_num = pin;
    a940:	7010      	strb	r0, [r2, #0]
	#endif
}
    a942:	bc10      	pop	{r4}
    a944:	4770      	bx	lr
    a946:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = cfg | PORT_PCR_MUX(3); break;
    a948:	4b0c      	ldr	r3, [pc, #48]	; (a97c <serial2_set_tx+0x74>)
    a94a:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    a94e:	6019      	str	r1, [r3, #0]
	tx_pin_num = pin;
    a950:	7010      	strb	r0, [r2, #0]
}
    a952:	bc10      	pop	{r4}
    a954:	4770      	bx	lr
			case 31: CORE_PIN31_CONFIG = 0; break; // PTE0
    a956:	4b09      	ldr	r3, [pc, #36]	; (a97c <serial2_set_tx+0x74>)
    a958:	2400      	movs	r4, #0
    a95a:	601c      	str	r4, [r3, #0]
    a95c:	e7e6      	b.n	a92c <serial2_set_tx+0x24>
			case 10: CORE_PIN10_CONFIG = cfg | PORT_PCR_MUX(3); break;
    a95e:	4b08      	ldr	r3, [pc, #32]	; (a980 <serial2_set_tx+0x78>)
    a960:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    a964:	6119      	str	r1, [r3, #16]
	tx_pin_num = pin;
    a966:	7010      	strb	r0, [r2, #0]
}
    a968:	bc10      	pop	{r4}
    a96a:	4770      	bx	lr
			case 10: CORE_PIN10_CONFIG = 0; break; // PTC4
    a96c:	4b04      	ldr	r3, [pc, #16]	; (a980 <serial2_set_tx+0x78>)
    a96e:	2400      	movs	r4, #0
    a970:	611c      	str	r4, [r3, #16]
    a972:	e7db      	b.n	a92c <serial2_set_tx+0x24>
    a974:	1fff89e4 	.word	0x1fff89e4
    a978:	40048000 	.word	0x40048000
    a97c:	4004d000 	.word	0x4004d000
    a980:	4004b000 	.word	0x4004b000

0000a984 <serial2_set_rx>:

void serial2_set_rx(uint8_t pin)
{
	#if defined(KINETISK)
	if (pin == rx_pin_num) return;
    a984:	4b12      	ldr	r3, [pc, #72]	; (a9d0 <serial2_set_rx+0x4c>)
    a986:	781a      	ldrb	r2, [r3, #0]
    a988:	4282      	cmp	r2, r0
    a98a:	d00c      	beq.n	a9a6 <serial2_set_rx+0x22>
	if ((SIM_SCGC4 & SIM_SCGC4_UART1)) {
    a98c:	4911      	ldr	r1, [pc, #68]	; (a9d4 <serial2_set_rx+0x50>)
    a98e:	6b49      	ldr	r1, [r1, #52]	; 0x34
    a990:	0509      	lsls	r1, r1, #20
    a992:	d507      	bpl.n	a9a4 <serial2_set_rx+0x20>
		switch (rx_pin_num) {
    a994:	2a09      	cmp	r2, #9
    a996:	d016      	beq.n	a9c6 <serial2_set_rx+0x42>
    a998:	2a1a      	cmp	r2, #26
    a99a:	d00a      	beq.n	a9b2 <serial2_set_rx+0x2e>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = 0; break;
			#endif
		}
		switch (pin) {
    a99c:	2809      	cmp	r0, #9
    a99e:	d00d      	beq.n	a9bc <serial2_set_rx+0x38>
    a9a0:	281a      	cmp	r0, #26
    a9a2:	d001      	beq.n	a9a8 <serial2_set_rx+0x24>
			#elif defined(__MK64FX512__) || defined(__MK66FX1M0__) // T3.5, T3.6
			case 59: CORE_PIN59_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
			#endif
		}
	}
	rx_pin_num = pin;
    a9a4:	7018      	strb	r0, [r3, #0]
	#endif
}
    a9a6:	4770      	bx	lr
			case 26: CORE_PIN26_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a9a8:	4a0b      	ldr	r2, [pc, #44]	; (a9d8 <serial2_set_rx+0x54>)
    a9aa:	f240 3113 	movw	r1, #787	; 0x313
    a9ae:	6051      	str	r1, [r2, #4]
    a9b0:	e7f8      	b.n	a9a4 <serial2_set_rx+0x20>
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    a9b2:	4a09      	ldr	r2, [pc, #36]	; (a9d8 <serial2_set_rx+0x54>)
    a9b4:	2100      	movs	r1, #0
		switch (pin) {
    a9b6:	2809      	cmp	r0, #9
			case 26: CORE_PIN26_CONFIG = 0; break; // PTE1
    a9b8:	6051      	str	r1, [r2, #4]
		switch (pin) {
    a9ba:	d1f1      	bne.n	a9a0 <serial2_set_rx+0x1c>
			case 9: CORE_PIN9_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3); break;
    a9bc:	4a07      	ldr	r2, [pc, #28]	; (a9dc <serial2_set_rx+0x58>)
    a9be:	f240 3113 	movw	r1, #787	; 0x313
    a9c2:	60d1      	str	r1, [r2, #12]
    a9c4:	e7ee      	b.n	a9a4 <serial2_set_rx+0x20>
			case 9: CORE_PIN9_CONFIG = 0; break; // PTC3
    a9c6:	4a05      	ldr	r2, [pc, #20]	; (a9dc <serial2_set_rx+0x58>)
    a9c8:	2100      	movs	r1, #0
    a9ca:	60d1      	str	r1, [r2, #12]
    a9cc:	e7e6      	b.n	a99c <serial2_set_rx+0x18>
    a9ce:	bf00      	nop
    a9d0:	1fff89dc 	.word	0x1fff89dc
    a9d4:	40048000 	.word	0x40048000
    a9d8:	4004d000 	.word	0x4004d000
    a9dc:	4004b000 	.word	0x4004b000

0000a9e0 <serial2_set_rts>:

int serial2_set_rts(uint8_t pin)
{
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    a9e0:	4b0d      	ldr	r3, [pc, #52]	; (aa18 <serial2_set_rts+0x38>)
    a9e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    a9e4:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    a9e8:	d013      	beq.n	aa12 <serial2_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    a9ea:	2821      	cmp	r0, #33	; 0x21
    a9ec:	d903      	bls.n	a9f6 <serial2_set_rts+0x16>
		rts_mask = digitalPinToBitMask(pin);
		#endif
		pinMode(pin, OUTPUT);
		rts_assert();
	} else {
		rts_pin = NULL;
    a9ee:	4b0b      	ldr	r3, [pc, #44]	; (aa1c <serial2_set_rts+0x3c>)
    a9f0:	2000      	movs	r0, #0
    a9f2:	6018      	str	r0, [r3, #0]
		return 0;
    a9f4:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    a9f6:	4b0a      	ldr	r3, [pc, #40]	; (aa20 <serial2_set_rts+0x40>)
{
    a9f8:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    a9fa:	4c08      	ldr	r4, [pc, #32]	; (aa1c <serial2_set_rts+0x3c>)
    a9fc:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    aa00:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    aa02:	2101      	movs	r1, #1
    aa04:	f7ff fd98 	bl	a538 <pinMode>
		rts_assert();
    aa08:	6823      	ldr	r3, [r4, #0]
    aa0a:	2200      	movs	r2, #0
    aa0c:	701a      	strb	r2, [r3, #0]
		UART1_MODEM &= ~UART_MODEM_RXRTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_RXRTSE;
*/
	return 1;
    aa0e:	2001      	movs	r0, #1
}
    aa10:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    aa12:	4618      	mov	r0, r3
}
    aa14:	4770      	bx	lr
    aa16:	bf00      	nop
    aa18:	40048000 	.word	0x40048000
    aa1c:	1fffd3c4 	.word	0x1fffd3c4
    aa20:	000154d8 	.word	0x000154d8

0000aa24 <serial2_set_cts>:

int serial2_set_cts(uint8_t pin)
{
#if defined(KINETISK)
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    aa24:	4b0c      	ldr	r3, [pc, #48]	; (aa58 <serial2_set_cts+0x34>)
    aa26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    aa28:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
    aa2c:	d012      	beq.n	aa54 <serial2_set_cts+0x30>
	if (pin == 23) {
    aa2e:	2817      	cmp	r0, #23
    aa30:	d109      	bne.n	aa46 <serial2_set_cts+0x22>
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    aa32:	4b0a      	ldr	r3, [pc, #40]	; (aa5c <serial2_set_cts+0x38>)
	#endif
	} else {
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
		return 0;
	}
	UART1_MODEM |= UART_MODEM_TXCTSE;
    aa34:	4a0a      	ldr	r2, [pc, #40]	; (aa60 <serial2_set_cts+0x3c>)
		CORE_PIN23_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    aa36:	f240 3102 	movw	r1, #770	; 0x302
    aa3a:	6099      	str	r1, [r3, #8]
	UART1_MODEM |= UART_MODEM_TXCTSE;
    aa3c:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    aa3e:	2001      	movs	r0, #1
	UART1_MODEM |= UART_MODEM_TXCTSE;
    aa40:	4303      	orrs	r3, r0
    aa42:	7353      	strb	r3, [r2, #13]
	return 1;
    aa44:	4770      	bx	lr
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    aa46:	4a06      	ldr	r2, [pc, #24]	; (aa60 <serial2_set_cts+0x3c>)
    aa48:	7b53      	ldrb	r3, [r2, #13]
    aa4a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    aa4e:	2000      	movs	r0, #0
		UART1_MODEM &= ~UART_MODEM_TXCTSE;
    aa50:	7353      	strb	r3, [r2, #13]
		return 0;
    aa52:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return 0;
    aa54:	4618      	mov	r0, r3
#else
	return 0;
#endif
}
    aa56:	4770      	bx	lr
    aa58:	40048000 	.word	0x40048000
    aa5c:	4004b000 	.word	0x4004b000
    aa60:	4006b000 	.word	0x4006b000

0000aa64 <serial2_putchar>:

void serial2_putchar(uint32_t c)
{
    aa64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    aa68:	4b33      	ldr	r3, [pc, #204]	; (ab38 <serial2_putchar+0xd4>)
    aa6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    aa6c:	051a      	lsls	r2, r3, #20
    aa6e:	d53a      	bpl.n	aae6 <serial2_putchar+0x82>
	if (transmit_pin) transmit_assert();
    aa70:	4b32      	ldr	r3, [pc, #200]	; (ab3c <serial2_putchar+0xd8>)
    aa72:	681b      	ldr	r3, [r3, #0]
    aa74:	4606      	mov	r6, r0
    aa76:	b10b      	cbz	r3, aa7c <serial2_putchar+0x18>
    aa78:	2201      	movs	r2, #1
    aa7a:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART1_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    aa7c:	f8df 90c0 	ldr.w	r9, [pc, #192]	; ab40 <serial2_putchar+0xdc>
	if (++head >= tx_buffer_total_size_) head = 0;
    aa80:	f8df 80c0 	ldr.w	r8, [pc, #192]	; ab44 <serial2_putchar+0xe0>
	head = tx_buffer_head;
    aa84:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    aa88:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    aa8c:	4d2e      	ldr	r5, [pc, #184]	; (ab48 <serial2_putchar+0xe4>)
	if (++head >= tx_buffer_total_size_) head = 0;
    aa8e:	3401      	adds	r4, #1
    aa90:	42a3      	cmp	r3, r4
	while (tx_buffer_tail == head) {
    aa92:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    aa94:	d929      	bls.n	aaea <serial2_putchar+0x86>
	while (tx_buffer_tail == head) {
    aa96:	429c      	cmp	r4, r3
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
	}
	transmitting = 1;
	tx_buffer_head = head;
    aa98:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    aa9c:	d114      	bne.n	aac8 <serial2_putchar+0x64>
			if ((UART1_S1 & UART_S1_TDRE)) {
    aa9e:	4f2b      	ldr	r7, [pc, #172]	; (ab4c <serial2_putchar+0xe8>)
					n = tx_buffer[tail];
    aaa0:	f8df b0ac 	ldr.w	fp, [pc, #172]	; ab50 <serial2_putchar+0xec>
    aaa4:	e005      	b.n	aab2 <serial2_putchar+0x4e>
			if ((UART1_S1 & UART_S1_TDRE)) {
    aaa6:	793b      	ldrb	r3, [r7, #4]
    aaa8:	061b      	lsls	r3, r3, #24
    aaaa:	d423      	bmi.n	aaf4 <serial2_putchar+0x90>
	while (tx_buffer_tail == head) {
    aaac:	782b      	ldrb	r3, [r5, #0]
    aaae:	42a3      	cmp	r3, r4
    aab0:	d10a      	bne.n	aac8 <serial2_putchar+0x64>
		int priority = nvic_execution_priority();
    aab2:	f7ff fa47 	bl	9f44 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    aab6:	2840      	cmp	r0, #64	; 0x40
    aab8:	ddf5      	ble.n	aaa6 <serial2_putchar+0x42>
		} else if (priority >= 256) {
    aaba:	28ff      	cmp	r0, #255	; 0xff
    aabc:	ddf6      	ble.n	aaac <serial2_putchar+0x48>
			yield(); // wait
    aabe:	f001 fc81 	bl	c3c4 <yield>
	while (tx_buffer_tail == head) {
    aac2:	782b      	ldrb	r3, [r5, #0]
    aac4:	42a3      	cmp	r3, r4
    aac6:	d0f4      	beq.n	aab2 <serial2_putchar+0x4e>
	if (head < SERIAL2_TX_BUFFER_SIZE) {
    aac8:	2c27      	cmp	r4, #39	; 0x27
    aaca:	d929      	bls.n	ab20 <serial2_putchar+0xbc>
		tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = c;
    aacc:	4b21      	ldr	r3, [pc, #132]	; (ab54 <serial2_putchar+0xf0>)
    aace:	3c28      	subs	r4, #40	; 0x28
    aad0:	681b      	ldr	r3, [r3, #0]
    aad2:	b2f6      	uxtb	r6, r6
    aad4:	551e      	strb	r6, [r3, r4]
	transmitting = 1;
    aad6:	4a20      	ldr	r2, [pc, #128]	; (ab58 <serial2_putchar+0xf4>)
	UART1_C2 = C2_TX_ACTIVE;
    aad8:	4b1c      	ldr	r3, [pc, #112]	; (ab4c <serial2_putchar+0xe8>)
	transmitting = 1;
    aada:	2101      	movs	r1, #1
    aadc:	7011      	strb	r1, [r2, #0]
	UART1_C2 = C2_TX_ACTIVE;
    aade:	22bc      	movs	r2, #188	; 0xbc
	tx_buffer_head = head;
    aae0:	f889 a000 	strb.w	sl, [r9]
	UART1_C2 = C2_TX_ACTIVE;
    aae4:	70da      	strb	r2, [r3, #3]
}
    aae6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    aaea:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    aaee:	b9a3      	cbnz	r3, ab1a <serial2_putchar+0xb6>
	if (++head >= tx_buffer_total_size_) head = 0;
    aaf0:	4654      	mov	r4, sl
    aaf2:	e7d4      	b.n	aa9e <serial2_putchar+0x3a>
				uint32_t tail = tx_buffer_tail;
    aaf4:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    aaf6:	f8d8 1000 	ldr.w	r1, [r8]
    aafa:	1c5a      	adds	r2, r3, #1
    aafc:	4291      	cmp	r1, r2
				uint32_t tail = tx_buffer_tail;
    aafe:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    ab00:	d908      	bls.n	ab14 <serial2_putchar+0xb0>
				if (tail < SERIAL2_TX_BUFFER_SIZE) {
    ab02:	2a27      	cmp	r2, #39	; 0x27
    ab04:	d810      	bhi.n	ab28 <serial2_putchar+0xc4>
				tx_buffer_tail = tail;
    ab06:	b2d1      	uxtb	r1, r2
					n = tx_buffer[tail];
    ab08:	f81b 3002 	ldrb.w	r3, [fp, r2]
    ab0c:	b2db      	uxtb	r3, r3
				UART1_D = n;
    ab0e:	71fb      	strb	r3, [r7, #7]
				tx_buffer_tail = tail;
    ab10:	7029      	strb	r1, [r5, #0]
    ab12:	e7cb      	b.n	aaac <serial2_putchar+0x48>
    ab14:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    ab16:	460a      	mov	r2, r1
    ab18:	e7f6      	b.n	ab08 <serial2_putchar+0xa4>
	while (tx_buffer_tail == head) {
    ab1a:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    ab1e:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    ab20:	4b0b      	ldr	r3, [pc, #44]	; (ab50 <serial2_putchar+0xec>)
    ab22:	b2f6      	uxtb	r6, r6
    ab24:	551e      	strb	r6, [r3, r4]
    ab26:	e7d6      	b.n	aad6 <serial2_putchar+0x72>
				tx_buffer_tail = tail;
    ab28:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    ab2a:	4a0a      	ldr	r2, [pc, #40]	; (ab54 <serial2_putchar+0xf0>)
    ab2c:	3b27      	subs	r3, #39	; 0x27
    ab2e:	6812      	ldr	r2, [r2, #0]
    ab30:	5cd3      	ldrb	r3, [r2, r3]
    ab32:	b2db      	uxtb	r3, r3
    ab34:	e7eb      	b.n	ab0e <serial2_putchar+0xaa>
    ab36:	bf00      	nop
    ab38:	40048000 	.word	0x40048000
    ab3c:	1fffd414 	.word	0x1fffd414
    ab40:	1fffd444 	.word	0x1fffd444
    ab44:	1fff89e0 	.word	0x1fff89e0
    ab48:	1fffd44c 	.word	0x1fffd44c
    ab4c:	4006b000 	.word	0x4006b000
    ab50:	1fffd41c 	.word	0x1fffd41c
    ab54:	1fffd448 	.word	0x1fffd448
    ab58:	1fffd418 	.word	0x1fffd418

0000ab5c <serial2_write>:

#ifdef HAS_KINETISK_UART1_FIFO
void serial2_write(const void *buf, unsigned int count)
{
    ab5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	const uint8_t *p = (const uint8_t *)buf;
	const uint8_t *end = p + count;
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    ab60:	4b39      	ldr	r3, [pc, #228]	; (ac48 <serial2_write+0xec>)
    ab62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    ab64:	051a      	lsls	r2, r3, #20
    ab66:	d53c      	bpl.n	abe2 <serial2_write+0x86>
	if (transmit_pin) transmit_assert();
    ab68:	4b38      	ldr	r3, [pc, #224]	; (ac4c <serial2_write+0xf0>)
    ab6a:	681b      	ldr	r3, [r3, #0]
    ab6c:	b10b      	cbz	r3, ab72 <serial2_write+0x16>
    ab6e:	2201      	movs	r2, #1
    ab70:	701a      	strb	r2, [r3, #0]
	const uint8_t *end = p + count;
    ab72:	1847      	adds	r7, r0, r1
	while (p < end) {
    ab74:	42b8      	cmp	r0, r7
    ab76:	d231      	bcs.n	abdc <serial2_write+0x80>
    ab78:	4e35      	ldr	r6, [pc, #212]	; (ac50 <serial2_write+0xf4>)
    ab7a:	f8df 80d8 	ldr.w	r8, [pc, #216]	; ac54 <serial2_write+0xf8>
    ab7e:	4c36      	ldr	r4, [pc, #216]	; (ac58 <serial2_write+0xfc>)
		head = tx_buffer_head;
		if (++head >= tx_buffer_total_size_) head = 0;
		if (tx_buffer_tail == head) {
			UART1_C2 = C2_TX_ACTIVE;
    ab80:	f8df 90d8 	ldr.w	r9, [pc, #216]	; ac5c <serial2_write+0x100>
    ab84:	f100 0a01 	add.w	sl, r0, #1
    ab88:	e013      	b.n	abb2 <serial2_write+0x56>
		if (tx_buffer_tail == head) {
    ab8a:	f003 0bff 	and.w	fp, r3, #255	; 0xff
    ab8e:	b353      	cbz	r3, abe6 <serial2_write+0x8a>
    ab90:	f04f 0b00 	mov.w	fp, #0
    ab94:	465d      	mov	r5, fp
					yield();
				}
			} while (tx_buffer_tail == head);
		}
		if (head < SERIAL2_TX_BUFFER_SIZE) {
			tx_buffer[head] = *p++;
    ab96:	4a32      	ldr	r2, [pc, #200]	; (ac60 <serial2_write+0x104>)
    ab98:	f81a 3c01 	ldrb.w	r3, [sl, #-1]
    ab9c:	5553      	strb	r3, [r2, r5]
    ab9e:	4652      	mov	r2, sl
		} else {
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
		}
		transmitting = 1;
    aba0:	4930      	ldr	r1, [pc, #192]	; (ac64 <serial2_write+0x108>)
    aba2:	2301      	movs	r3, #1
	while (p < end) {
    aba4:	42ba      	cmp	r2, r7
		transmitting = 1;
    aba6:	700b      	strb	r3, [r1, #0]
	while (p < end) {
    aba8:	f10a 0a01 	add.w	sl, sl, #1
		tx_buffer_head = head;
    abac:	f886 b000 	strb.w	fp, [r6]
	while (p < end) {
    abb0:	d214      	bcs.n	abdc <serial2_write+0x80>
		head = tx_buffer_head;
    abb2:	7835      	ldrb	r5, [r6, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    abb4:	f8d8 3000 	ldr.w	r3, [r8]
    abb8:	3501      	adds	r5, #1
    abba:	42ab      	cmp	r3, r5
		if (tx_buffer_tail == head) {
    abbc:	7823      	ldrb	r3, [r4, #0]
		if (++head >= tx_buffer_total_size_) head = 0;
    abbe:	d9e4      	bls.n	ab8a <serial2_write+0x2e>
		if (tx_buffer_tail == head) {
    abc0:	42ab      	cmp	r3, r5
		tx_buffer_head = head;
    abc2:	fa5f fb85 	uxtb.w	fp, r5
		if (tx_buffer_tail == head) {
    abc6:	d00f      	beq.n	abe8 <serial2_write+0x8c>
		if (head < SERIAL2_TX_BUFFER_SIZE) {
    abc8:	2d27      	cmp	r5, #39	; 0x27
    abca:	d9e4      	bls.n	ab96 <serial2_write+0x3a>
			tx_buffer_storage_[head - SERIAL2_TX_BUFFER_SIZE] = *p++;
    abcc:	4b26      	ldr	r3, [pc, #152]	; (ac68 <serial2_write+0x10c>)
    abce:	f81a 2c01 	ldrb.w	r2, [sl, #-1]
    abd2:	681b      	ldr	r3, [r3, #0]
    abd4:	3d28      	subs	r5, #40	; 0x28
    abd6:	555a      	strb	r2, [r3, r5]
    abd8:	4652      	mov	r2, sl
    abda:	e7e1      	b.n	aba0 <serial2_write+0x44>
	}
	UART1_C2 = C2_TX_ACTIVE;
    abdc:	4b1f      	ldr	r3, [pc, #124]	; (ac5c <serial2_write+0x100>)
    abde:	22bc      	movs	r2, #188	; 0xbc
    abe0:	70da      	strb	r2, [r3, #3]
}
    abe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (tx_buffer_tail == head) {
    abe6:	465d      	mov	r5, fp
			UART1_C2 = C2_TX_ACTIVE;
    abe8:	f06f 0343 	mvn.w	r3, #67	; 0x43
    abec:	f889 3003 	strb.w	r3, [r9, #3]
    abf0:	e006      	b.n	ac00 <serial2_write+0xa4>
					if ((UART1_S1 & UART_S1_TDRE)) {
    abf2:	f899 3004 	ldrb.w	r3, [r9, #4]
    abf6:	061b      	lsls	r3, r3, #24
    abf8:	d40b      	bmi.n	ac12 <serial2_write+0xb6>
			} while (tx_buffer_tail == head);
    abfa:	7823      	ldrb	r3, [r4, #0]
    abfc:	42ab      	cmp	r3, r5
    abfe:	d1e3      	bne.n	abc8 <serial2_write+0x6c>
				int priority = nvic_execution_priority();
    ac00:	f7ff f9a0 	bl	9f44 <nvic_execution_priority>
				if (priority <= IRQ_PRIORITY) {
    ac04:	2840      	cmp	r0, #64	; 0x40
    ac06:	ddf4      	ble.n	abf2 <serial2_write+0x96>
				} else if (priority >= 256) {
    ac08:	28ff      	cmp	r0, #255	; 0xff
    ac0a:	ddf6      	ble.n	abfa <serial2_write+0x9e>
					yield();
    ac0c:	f001 fbda 	bl	c3c4 <yield>
    ac10:	e7f3      	b.n	abfa <serial2_write+0x9e>
						uint32_t tail = tx_buffer_tail;
    ac12:	7823      	ldrb	r3, [r4, #0]
						if (++tail >= tx_buffer_total_size_) tail = 0;
    ac14:	f8d8 1000 	ldr.w	r1, [r8]
    ac18:	1c5a      	adds	r2, r3, #1
    ac1a:	4291      	cmp	r1, r2
						uint32_t tail = tx_buffer_tail;
    ac1c:	b2db      	uxtb	r3, r3
						if (++tail >= tx_buffer_total_size_) tail = 0;
    ac1e:	d903      	bls.n	ac28 <serial2_write+0xcc>
						if (tail < SERIAL2_TX_BUFFER_SIZE) {
    ac20:	2a27      	cmp	r2, #39	; 0x27
    ac22:	d80a      	bhi.n	ac3a <serial2_write+0xde>
						tx_buffer_tail = tail;
    ac24:	b2d1      	uxtb	r1, r2
    ac26:	e001      	b.n	ac2c <serial2_write+0xd0>
    ac28:	2100      	movs	r1, #0
						if (++tail >= tx_buffer_total_size_) tail = 0;
    ac2a:	460a      	mov	r2, r1
							n = tx_buffer[tail];
    ac2c:	4b0c      	ldr	r3, [pc, #48]	; (ac60 <serial2_write+0x104>)
    ac2e:	5c9b      	ldrb	r3, [r3, r2]
    ac30:	b2db      	uxtb	r3, r3
						UART1_D = n;
    ac32:	f889 3007 	strb.w	r3, [r9, #7]
						tx_buffer_tail = tail;
    ac36:	7021      	strb	r1, [r4, #0]
    ac38:	e7df      	b.n	abfa <serial2_write+0x9e>
    ac3a:	b2d1      	uxtb	r1, r2
							n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    ac3c:	4a0a      	ldr	r2, [pc, #40]	; (ac68 <serial2_write+0x10c>)
    ac3e:	3b27      	subs	r3, #39	; 0x27
    ac40:	6812      	ldr	r2, [r2, #0]
    ac42:	5cd3      	ldrb	r3, [r2, r3]
    ac44:	b2db      	uxtb	r3, r3
    ac46:	e7f4      	b.n	ac32 <serial2_write+0xd6>
    ac48:	40048000 	.word	0x40048000
    ac4c:	1fffd414 	.word	0x1fffd414
    ac50:	1fffd444 	.word	0x1fffd444
    ac54:	1fff89e0 	.word	0x1fff89e0
    ac58:	1fffd44c 	.word	0x1fffd44c
    ac5c:	4006b000 	.word	0x4006b000
    ac60:	1fffd41c 	.word	0x1fffd41c
    ac64:	1fffd418 	.word	0x1fffd418
    ac68:	1fffd448 	.word	0x1fffd448

0000ac6c <serial2_flush>:
	while (count-- > 0) serial2_putchar(*p++);
}
#endif

void serial2_flush(void)
{
    ac6c:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    ac6e:	4c04      	ldr	r4, [pc, #16]	; (ac80 <serial2_flush+0x14>)
    ac70:	7823      	ldrb	r3, [r4, #0]
    ac72:	b123      	cbz	r3, ac7e <serial2_flush+0x12>
    ac74:	f001 fba6 	bl	c3c4 <yield>
    ac78:	7823      	ldrb	r3, [r4, #0]
    ac7a:	2b00      	cmp	r3, #0
    ac7c:	d1fa      	bne.n	ac74 <serial2_flush+0x8>
}
    ac7e:	bd10      	pop	{r4, pc}
    ac80:	1fffd418 	.word	0x1fffd418

0000ac84 <serial2_write_buffer_free>:

int serial2_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    ac84:	4a08      	ldr	r2, [pc, #32]	; (aca8 <serial2_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    ac86:	4b09      	ldr	r3, [pc, #36]	; (acac <serial2_write_buffer_free+0x28>)
	head = tx_buffer_head;
    ac88:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    ac8a:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ac8c:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    ac8e:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    ac90:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ac92:	d202      	bcs.n	ac9a <serial2_write_buffer_free+0x16>
	return tail - head - 1;
    ac94:	3b01      	subs	r3, #1
    ac96:	1a18      	subs	r0, r3, r0
}
    ac98:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    ac9a:	4a05      	ldr	r2, [pc, #20]	; (acb0 <serial2_write_buffer_free+0x2c>)
    ac9c:	6812      	ldr	r2, [r2, #0]
    ac9e:	3a01      	subs	r2, #1
    aca0:	4413      	add	r3, r2
    aca2:	1a18      	subs	r0, r3, r0
    aca4:	4770      	bx	lr
    aca6:	bf00      	nop
    aca8:	1fffd444 	.word	0x1fffd444
    acac:	1fffd44c 	.word	0x1fffd44c
    acb0:	1fff89e0 	.word	0x1fff89e0

0000acb4 <serial2_available>:

int serial2_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    acb4:	4a06      	ldr	r2, [pc, #24]	; (acd0 <serial2_available+0x1c>)
	tail = rx_buffer_tail;
    acb6:	4b07      	ldr	r3, [pc, #28]	; (acd4 <serial2_available+0x20>)
	head = rx_buffer_head;
    acb8:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    acba:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    acbc:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    acbe:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    acc0:	bf3c      	itt	cc
    acc2:	4a05      	ldrcc	r2, [pc, #20]	; (acd8 <serial2_available+0x24>)
    acc4:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    acc6:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    acc8:	bf38      	it	cc
    acca:	189b      	addcc	r3, r3, r2
    accc:	1a18      	subs	r0, r3, r0
}
    acce:	4770      	bx	lr
    acd0:	1fffd408 	.word	0x1fffd408
    acd4:	1fffd410 	.word	0x1fffd410
    acd8:	1fff89d8 	.word	0x1fff89d8

0000acdc <serial2_getchar>:
int serial2_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    acdc:	4b1b      	ldr	r3, [pc, #108]	; (ad4c <serial2_getchar+0x70>)
	tail = rx_buffer_tail;
    acde:	491c      	ldr	r1, [pc, #112]	; (ad50 <serial2_getchar+0x74>)
	head = rx_buffer_head;
    ace0:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    ace2:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    ace4:	429a      	cmp	r2, r3
    ace6:	d02e      	beq.n	ad46 <serial2_getchar+0x6a>
{
    ace8:	b510      	push	{r4, lr}
    acea:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    acee:	4a19      	ldr	r2, [pc, #100]	; (ad54 <serial2_getchar+0x78>)
    acf0:	b2d8      	uxtb	r0, r3
    acf2:	6812      	ldr	r2, [r2, #0]
    acf4:	1c43      	adds	r3, r0, #1
    acf6:	429a      	cmp	r2, r3
    acf8:	d919      	bls.n	ad2e <serial2_getchar+0x52>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    acfa:	2b3f      	cmp	r3, #63	; 0x3f
    acfc:	d81b      	bhi.n	ad36 <serial2_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    acfe:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    ad02:	4815      	ldr	r0, [pc, #84]	; (ad58 <serial2_getchar+0x7c>)
    ad04:	5cc0      	ldrb	r0, [r0, r3]
    ad06:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    ad08:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    ad0c:	4913      	ldr	r1, [pc, #76]	; (ad5c <serial2_getchar+0x80>)
    ad0e:	6809      	ldr	r1, [r1, #0]
    ad10:	b161      	cbz	r1, ad2c <serial2_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    ad12:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    ad14:	bf3c      	itt	cc
    ad16:	4472      	addcc	r2, lr
    ad18:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    ad1a:	4a11      	ldr	r2, [pc, #68]	; (ad60 <serial2_getchar+0x84>)
    ad1c:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    ad1e:	bf28      	it	cs
    ad20:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    ad24:	429a      	cmp	r2, r3
    ad26:	d301      	bcc.n	ad2c <serial2_getchar+0x50>
    ad28:	2300      	movs	r3, #0
    ad2a:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    ad2c:	bd10      	pop	{r4, pc}
    ad2e:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    ad32:	4663      	mov	r3, ip
    ad34:	e7e5      	b.n	ad02 <serial2_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    ad36:	4c0b      	ldr	r4, [pc, #44]	; (ad64 <serial2_getchar+0x88>)
    ad38:	383f      	subs	r0, #63	; 0x3f
    ad3a:	6824      	ldr	r4, [r4, #0]
    ad3c:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    ad3e:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    ad42:	b2c0      	uxtb	r0, r0
    ad44:	e7e0      	b.n	ad08 <serial2_getchar+0x2c>
	if (head == tail) return -1;
    ad46:	f04f 30ff 	mov.w	r0, #4294967295
}
    ad4a:	4770      	bx	lr
    ad4c:	1fffd408 	.word	0x1fffd408
    ad50:	1fffd410 	.word	0x1fffd410
    ad54:	1fff89d8 	.word	0x1fff89d8
    ad58:	1fffd3c8 	.word	0x1fffd3c8
    ad5c:	1fffd3c4 	.word	0x1fffd3c4
    ad60:	1fff89d4 	.word	0x1fff89d4
    ad64:	1fffd40c 	.word	0x1fffd40c

0000ad68 <serial2_peek>:

int serial2_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    ad68:	4a0d      	ldr	r2, [pc, #52]	; (ada0 <serial2_peek+0x38>)
	tail = rx_buffer_tail;
    ad6a:	4b0e      	ldr	r3, [pc, #56]	; (ada4 <serial2_peek+0x3c>)
	head = rx_buffer_head;
    ad6c:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    ad6e:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    ad70:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    ad72:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    ad74:	d011      	beq.n	ad9a <serial2_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    ad76:	490c      	ldr	r1, [pc, #48]	; (ada8 <serial2_peek+0x40>)
    ad78:	6809      	ldr	r1, [r1, #0]
    ad7a:	1c53      	adds	r3, r2, #1
    ad7c:	4299      	cmp	r1, r3
    ad7e:	d907      	bls.n	ad90 <serial2_peek+0x28>
	if (tail < SERIAL2_RX_BUFFER_SIZE) {
    ad80:	2b3f      	cmp	r3, #63	; 0x3f
    ad82:	d906      	bls.n	ad92 <serial2_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL2_RX_BUFFER_SIZE];
    ad84:	4b09      	ldr	r3, [pc, #36]	; (adac <serial2_peek+0x44>)
    ad86:	3a3f      	subs	r2, #63	; 0x3f
    ad88:	681b      	ldr	r3, [r3, #0]
    ad8a:	5c98      	ldrb	r0, [r3, r2]
    ad8c:	b2c0      	uxtb	r0, r0
    ad8e:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    ad90:	2300      	movs	r3, #0
		return rx_buffer[tail];
    ad92:	4a07      	ldr	r2, [pc, #28]	; (adb0 <serial2_peek+0x48>)
    ad94:	5cd0      	ldrb	r0, [r2, r3]
    ad96:	b2c0      	uxtb	r0, r0
    ad98:	4770      	bx	lr
	if (head == tail) return -1;
    ad9a:	f04f 30ff 	mov.w	r0, #4294967295
}
    ad9e:	4770      	bx	lr
    ada0:	1fffd408 	.word	0x1fffd408
    ada4:	1fffd410 	.word	0x1fffd410
    ada8:	1fff89d8 	.word	0x1fff89d8
    adac:	1fffd40c 	.word	0x1fffd40c
    adb0:	1fffd3c8 	.word	0x1fffd3c8

0000adb4 <serial2_clear>:

void serial2_clear(void)
{
#ifdef HAS_KINETISK_UART1_FIFO
	if (!(SIM_SCGC4 & SIM_SCGC4_UART1)) return;
    adb4:	4b0c      	ldr	r3, [pc, #48]	; (ade8 <serial2_clear+0x34>)
    adb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    adb8:	051b      	lsls	r3, r3, #20
    adba:	d514      	bpl.n	ade6 <serial2_clear+0x32>
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    adbc:	4b0b      	ldr	r3, [pc, #44]	; (adec <serial2_clear+0x38>)
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
#endif
	rx_buffer_head = rx_buffer_tail;
    adbe:	480c      	ldr	r0, [pc, #48]	; (adf0 <serial2_clear+0x3c>)
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    adc0:	78da      	ldrb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    adc2:	2140      	movs	r1, #64	; 0x40
	UART1_C2 &= ~(UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    adc4:	f002 02cb 	and.w	r2, r2, #203	; 0xcb
    adc8:	70da      	strb	r2, [r3, #3]
	UART1_CFIFO = UART_CFIFO_RXFLUSH;
    adca:	7459      	strb	r1, [r3, #17]
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    adcc:	78da      	ldrb	r2, [r3, #3]
	rx_buffer_head = rx_buffer_tail;
    adce:	4909      	ldr	r1, [pc, #36]	; (adf4 <serial2_clear+0x40>)
	UART1_C2 |= (UART_C2_RE | UART_C2_RIE | UART_C2_ILIE);
    add0:	f042 0234 	orr.w	r2, r2, #52	; 0x34
    add4:	70da      	strb	r2, [r3, #3]
	if (rts_pin) rts_assert();
    add6:	4a08      	ldr	r2, [pc, #32]	; (adf8 <serial2_clear+0x44>)
	rx_buffer_head = rx_buffer_tail;
    add8:	7803      	ldrb	r3, [r0, #0]
	if (rts_pin) rts_assert();
    adda:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    addc:	b2db      	uxtb	r3, r3
    adde:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    ade0:	b10a      	cbz	r2, ade6 <serial2_clear+0x32>
    ade2:	2300      	movs	r3, #0
    ade4:	7013      	strb	r3, [r2, #0]
}
    ade6:	4770      	bx	lr
    ade8:	40048000 	.word	0x40048000
    adec:	4006b000 	.word	0x4006b000
    adf0:	1fffd410 	.word	0x1fffd410
    adf4:	1fffd408 	.word	0x1fffd408
    adf8:	1fffd3c4 	.word	0x1fffd3c4

0000adfc <uart1_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart1_status_isr(void)
{
    adfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t c;
#ifdef HAS_KINETISK_UART1_FIFO
	uint32_t newhead;
	uint8_t avail;

	if (UART1_S1 & (UART_S1_RDRF | UART_S1_IDLE)) {
    ae00:	4c50      	ldr	r4, [pc, #320]	; (af44 <uart1_status_isr+0x148>)
    ae02:	7923      	ldrb	r3, [r4, #4]
    ae04:	f013 0f30 	tst.w	r3, #48	; 0x30
    ae08:	d047      	beq.n	ae9a <uart1_status_isr+0x9e>
		__disable_irq();
    ae0a:	b672      	cpsid	i
		avail = UART1_RCFIFO;
    ae0c:	7da3      	ldrb	r3, [r4, #22]
		if (avail == 0) {
    ae0e:	f003 01ff 	and.w	r1, r3, #255	; 0xff
    ae12:	2b00      	cmp	r3, #0
    ae14:	d058      	beq.n	aec8 <uart1_status_isr+0xcc>
			// which won't be simple, since we already manage
			// which transmit interrupts are enabled.
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
			__enable_irq();
		} else {
			__enable_irq();
    ae16:	b662      	cpsie	i
			head = rx_buffer_head;
    ae18:	f8df 812c 	ldr.w	r8, [pc, #300]	; af48 <uart1_status_isr+0x14c>
			tail = rx_buffer_tail;
    ae1c:	484b      	ldr	r0, [pc, #300]	; (af4c <uart1_status_isr+0x150>)
			head = rx_buffer_head;
    ae1e:	f898 3000 	ldrb.w	r3, [r8]
					n = UART1_D | 0x100;
				} else {
					n = UART1_D;
				}
				newhead = head + 1;
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    ae22:	4a4b      	ldr	r2, [pc, #300]	; (af50 <uart1_status_isr+0x154>)
			tail = rx_buffer_tail;
    ae24:	7805      	ldrb	r5, [r0, #0]
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    ae26:	6816      	ldr	r6, [r2, #0]
				if (newhead != tail) {
					head = newhead;
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
						rx_buffer[head] = n;
    ae28:	4f4a      	ldr	r7, [pc, #296]	; (af54 <uart1_status_isr+0x158>)
			head = rx_buffer_head;
    ae2a:	fa5f fc83 	uxtb.w	ip, r3
					} else {
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ae2e:	4b4a      	ldr	r3, [pc, #296]	; (af58 <uart1_status_isr+0x15c>)
			tail = rx_buffer_tail;
    ae30:	b2ed      	uxtb	r5, r5
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ae32:	f8d3 e000 	ldr.w	lr, [r3]
    ae36:	e008      	b.n	ae4a <uart1_status_isr+0x4e>
				if (newhead != tail) {
    ae38:	b11d      	cbz	r5, ae42 <uart1_status_isr+0x46>
    ae3a:	f04f 0c00 	mov.w	ip, #0
						rx_buffer[head] = n;
    ae3e:	f807 300c 	strb.w	r3, [r7, ip]
					}
				}
			} while (--avail > 0);
    ae42:	1e4a      	subs	r2, r1, #1
    ae44:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
    ae48:	d012      	beq.n	ae70 <uart1_status_isr+0x74>
					n = UART1_D;
    ae4a:	79e3      	ldrb	r3, [r4, #7]
				newhead = head + 1;
    ae4c:	f10c 0201 	add.w	r2, ip, #1
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    ae50:	4296      	cmp	r6, r2
					n = UART1_D;
    ae52:	b2db      	uxtb	r3, r3
				if (newhead >= rx_buffer_total_size_) newhead = 0;
    ae54:	d9f0      	bls.n	ae38 <uart1_status_isr+0x3c>
				if (newhead != tail) {
    ae56:	4295      	cmp	r5, r2
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ae58:	f1ac 003f 	sub.w	r0, ip, #63	; 0x3f
				if (newhead != tail) {
    ae5c:	d0f1      	beq.n	ae42 <uart1_status_isr+0x46>
					if (newhead < SERIAL2_RX_BUFFER_SIZE) {
    ae5e:	2a3f      	cmp	r2, #63	; 0x3f
    ae60:	d96d      	bls.n	af3e <uart1_status_isr+0x142>
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ae62:	4694      	mov	ip, r2
			} while (--avail > 0);
    ae64:	1e4a      	subs	r2, r1, #1
    ae66:	f012 01ff 	ands.w	r1, r2, #255	; 0xff
						rx_buffer_storage_[head-SERIAL2_RX_BUFFER_SIZE] = n;
    ae6a:	f80e 3000 	strb.w	r3, [lr, r0]
			} while (--avail > 0);
    ae6e:	d1ec      	bne.n	ae4a <uart1_status_isr+0x4e>
			rx_buffer_head = head;
    ae70:	fa5f f38c 	uxtb.w	r3, ip
    ae74:	f888 3000 	strb.w	r3, [r8]
			if (rts_pin) {
    ae78:	4b38      	ldr	r3, [pc, #224]	; (af5c <uart1_status_isr+0x160>)
    ae7a:	6819      	ldr	r1, [r3, #0]
    ae7c:	b169      	cbz	r1, ae9a <uart1_status_isr+0x9e>
				int avail;
				if (head >= tail) avail = head - tail;
    ae7e:	45ac      	cmp	ip, r5
				else avail = rx_buffer_total_size_ + head - tail;
    ae80:	bf3c      	itt	cc
    ae82:	1b72      	subcc	r2, r6, r5
    ae84:	eb02 030c 	addcc.w	r3, r2, ip
				if (avail >= rts_high_watermark_) rts_deassert();
    ae88:	4a35      	ldr	r2, [pc, #212]	; (af60 <uart1_status_isr+0x164>)
    ae8a:	6812      	ldr	r2, [r2, #0]
				if (head >= tail) avail = head - tail;
    ae8c:	bf28      	it	cs
    ae8e:	ebac 0305 	subcs.w	r3, ip, r5
				if (avail >= rts_high_watermark_) rts_deassert();
    ae92:	429a      	cmp	r2, r3
    ae94:	bf9c      	itt	ls
    ae96:	2301      	movls	r3, #1
    ae98:	700b      	strbls	r3, [r1, #0]
			}
		}
	}
	c = UART1_C2;
    ae9a:	482a      	ldr	r0, [pc, #168]	; (af44 <uart1_status_isr+0x148>)
    ae9c:	78c3      	ldrb	r3, [r0, #3]
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    ae9e:	061e      	lsls	r6, r3, #24
	c = UART1_C2;
    aea0:	b2dd      	uxtb	r5, r3
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    aea2:	d416      	bmi.n	aed2 <uart1_status_isr+0xd6>
			UART1_D = n;
			tx_buffer_tail = tail;
		}
	}
#endif
	if ((c & UART_C2_TCIE) && (UART1_S1 & UART_S1_TC)) {
    aea4:	066a      	lsls	r2, r5, #25
    aea6:	d50d      	bpl.n	aec4 <uart1_status_isr+0xc8>
    aea8:	4b26      	ldr	r3, [pc, #152]	; (af44 <uart1_status_isr+0x148>)
    aeaa:	791b      	ldrb	r3, [r3, #4]
    aeac:	065b      	lsls	r3, r3, #25
    aeae:	d509      	bpl.n	aec4 <uart1_status_isr+0xc8>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    aeb0:	4b2c      	ldr	r3, [pc, #176]	; (af64 <uart1_status_isr+0x168>)
		transmitting = 0;
    aeb2:	492d      	ldr	r1, [pc, #180]	; (af68 <uart1_status_isr+0x16c>)
		if (transmit_pin) transmit_deassert();
    aeb4:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    aeb6:	2200      	movs	r2, #0
    aeb8:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    aeba:	b103      	cbz	r3, aebe <uart1_status_isr+0xc2>
    aebc:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART1_C3 = reg;
			__enable_irq();
		}
		#endif		
		UART1_C2 = C2_TX_INACTIVE;
    aebe:	4b21      	ldr	r3, [pc, #132]	; (af44 <uart1_status_isr+0x148>)
    aec0:	223c      	movs	r2, #60	; 0x3c
    aec2:	70da      	strb	r2, [r3, #3]
	}
}
    aec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    aec8:	2340      	movs	r3, #64	; 0x40
			c = UART1_D;
    aeca:	79e2      	ldrb	r2, [r4, #7]
			UART1_CFIFO = UART_CFIFO_RXFLUSH;
    aecc:	7463      	strb	r3, [r4, #17]
			__enable_irq();
    aece:	b662      	cpsie	i
    aed0:	e7e3      	b.n	ae9a <uart1_status_isr+0x9e>
	if ((c & UART_C2_TIE) && (UART1_S1 & UART_S1_TDRE)) {
    aed2:	7903      	ldrb	r3, [r0, #4]
    aed4:	061c      	lsls	r4, r3, #24
    aed6:	d5e5      	bpl.n	aea4 <uart1_status_isr+0xa8>
		head = tx_buffer_head;
    aed8:	4b24      	ldr	r3, [pc, #144]	; (af6c <uart1_status_isr+0x170>)
			if (++tail >= tx_buffer_total_size_) tail = 0;
    aeda:	4a25      	ldr	r2, [pc, #148]	; (af70 <uart1_status_isr+0x174>)
		tail = tx_buffer_tail;
    aedc:	f8df e094 	ldr.w	lr, [pc, #148]	; af74 <uart1_status_isr+0x178>
		head = tx_buffer_head;
    aee0:	781c      	ldrb	r4, [r3, #0]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    aee2:	6816      	ldr	r6, [r2, #0]
		tail = tx_buffer_tail;
    aee4:	f89e 3000 	ldrb.w	r3, [lr]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    aee8:	4a23      	ldr	r2, [pc, #140]	; (af78 <uart1_status_isr+0x17c>)
				n = tx_buffer[tail];
    aeea:	4f24      	ldr	r7, [pc, #144]	; (af7c <uart1_status_isr+0x180>)
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    aeec:	f8d2 c000 	ldr.w	ip, [r2]
		head = tx_buffer_head;
    aef0:	b2e4      	uxtb	r4, r4
		tail = tx_buffer_tail;
    aef2:	b2db      	uxtb	r3, r3
    aef4:	e007      	b.n	af06 <uart1_status_isr+0x10a>
			avail = UART1_S1;
    aef6:	7903      	ldrb	r3, [r0, #4]
			if (++tail >= tx_buffer_total_size_) tail = 0;
    aef8:	2300      	movs	r3, #0
				n = tx_buffer[tail];
    aefa:	5cfa      	ldrb	r2, [r7, r3]
    aefc:	b2d2      	uxtb	r2, r2
			UART1_D = n;
    aefe:	71c2      	strb	r2, [r0, #7]
		} while (UART1_TCFIFO < 8);
    af00:	7d02      	ldrb	r2, [r0, #20]
    af02:	2a07      	cmp	r2, #7
    af04:	d811      	bhi.n	af2a <uart1_status_isr+0x12e>
			if (tail == head) break;
    af06:	42a3      	cmp	r3, r4
			if (++tail >= tx_buffer_total_size_) tail = 0;
    af08:	f103 0101 	add.w	r1, r3, #1
			if (tail == head) break;
    af0c:	d00e      	beq.n	af2c <uart1_status_isr+0x130>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    af0e:	428e      	cmp	r6, r1
    af10:	d9f1      	bls.n	aef6 <uart1_status_isr+0xfa>
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    af12:	2927      	cmp	r1, #39	; 0x27
			avail = UART1_S1;
    af14:	7902      	ldrb	r2, [r0, #4]
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    af16:	f1a3 0327 	sub.w	r3, r3, #39	; 0x27
			if (tail < SERIAL2_TX_BUFFER_SIZE) {
    af1a:	d801      	bhi.n	af20 <uart1_status_isr+0x124>
    af1c:	460b      	mov	r3, r1
    af1e:	e7ec      	b.n	aefa <uart1_status_isr+0xfe>
				n = tx_buffer_storage_[tail-SERIAL2_TX_BUFFER_SIZE];
    af20:	f81c 2003 	ldrb.w	r2, [ip, r3]
    af24:	460b      	mov	r3, r1
    af26:	b2d2      	uxtb	r2, r2
    af28:	e7e9      	b.n	aefe <uart1_status_isr+0x102>
		tx_buffer_tail = tail;
    af2a:	b2dc      	uxtb	r4, r3
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    af2c:	4b05      	ldr	r3, [pc, #20]	; (af44 <uart1_status_isr+0x148>)
		tx_buffer_tail = tail;
    af2e:	f88e 4000 	strb.w	r4, [lr]
		if (UART1_S1 & UART_S1_TDRE) UART1_C2 = C2_TX_COMPLETING;
    af32:	791a      	ldrb	r2, [r3, #4]
    af34:	0611      	lsls	r1, r2, #24
    af36:	bf44      	itt	mi
    af38:	227c      	movmi	r2, #124	; 0x7c
    af3a:	70da      	strbmi	r2, [r3, #3]
    af3c:	e7b2      	b.n	aea4 <uart1_status_isr+0xa8>
    af3e:	4694      	mov	ip, r2
    af40:	e77d      	b.n	ae3e <uart1_status_isr+0x42>
    af42:	bf00      	nop
    af44:	4006b000 	.word	0x4006b000
    af48:	1fffd408 	.word	0x1fffd408
    af4c:	1fffd410 	.word	0x1fffd410
    af50:	1fff89d8 	.word	0x1fff89d8
    af54:	1fffd3c8 	.word	0x1fffd3c8
    af58:	1fffd40c 	.word	0x1fffd40c
    af5c:	1fffd3c4 	.word	0x1fffd3c4
    af60:	1fff89d0 	.word	0x1fff89d0
    af64:	1fffd414 	.word	0x1fffd414
    af68:	1fffd418 	.word	0x1fffd418
    af6c:	1fffd444 	.word	0x1fffd444
    af70:	1fff89e0 	.word	0x1fff89e0
    af74:	1fffd44c 	.word	0x1fffd44c
    af78:	1fffd448 	.word	0x1fffd448
    af7c:	1fffd41c 	.word	0x1fffd41c

0000af80 <serial2_add_memory_for_read>:

void serial2_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    af80:	4b09      	ldr	r3, [pc, #36]	; (afa8 <serial2_add_memory_for_read+0x28>)
{
    af82:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    af84:	6018      	str	r0, [r3, #0]
	if (buffer) {
    af86:	b160      	cbz	r0, afa2 <serial2_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE + length;
    af88:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    af8c:	4b07      	ldr	r3, [pc, #28]	; (afac <serial2_add_memory_for_read+0x2c>)
    af8e:	4808      	ldr	r0, [pc, #32]	; (afb0 <serial2_add_memory_for_read+0x30>)
    af90:	f101 021a 	add.w	r2, r1, #26
    af94:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    af96:	4b07      	ldr	r3, [pc, #28]	; (afb4 <serial2_add_memory_for_read+0x34>)
    af98:	6004      	str	r4, [r0, #0]
    af9a:	3128      	adds	r1, #40	; 0x28
}
    af9c:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    af9e:	6019      	str	r1, [r3, #0]
}
    afa0:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL2_RX_BUFFER_SIZE;
    afa2:	2440      	movs	r4, #64	; 0x40
    afa4:	e7f2      	b.n	af8c <serial2_add_memory_for_read+0xc>
    afa6:	bf00      	nop
    afa8:	1fffd40c 	.word	0x1fffd40c
    afac:	1fff89d4 	.word	0x1fff89d4
    afb0:	1fff89d8 	.word	0x1fff89d8
    afb4:	1fff89d0 	.word	0x1fff89d0

0000afb8 <serial2_add_memory_for_write>:

void serial2_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    afb8:	4b05      	ldr	r3, [pc, #20]	; (afd0 <serial2_add_memory_for_write+0x18>)
    afba:	6018      	str	r0, [r3, #0]
	if (buffer) {
    afbc:	b118      	cbz	r0, afc6 <serial2_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE + length;
    afbe:	4b05      	ldr	r3, [pc, #20]	; (afd4 <serial2_add_memory_for_write+0x1c>)
    afc0:	3128      	adds	r1, #40	; 0x28
    afc2:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
	} 
}
    afc4:	4770      	bx	lr
    afc6:	4b03      	ldr	r3, [pc, #12]	; (afd4 <serial2_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL2_TX_BUFFER_SIZE;
    afc8:	2128      	movs	r1, #40	; 0x28
    afca:	6019      	str	r1, [r3, #0]
}
    afcc:	4770      	bx	lr
    afce:	bf00      	nop
    afd0:	1fffd448 	.word	0x1fffd448
    afd4:	1fff89e0 	.word	0x1fff89e0

0000afd8 <serial3_putchar.part.0>:
#else
	return 0;
#endif
}

void serial3_putchar(uint32_t c)
    afd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
{
	uint32_t head, n;

	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
	if (transmit_pin) transmit_assert();
    afdc:	4b31      	ldr	r3, [pc, #196]	; (b0a4 <serial3_putchar.part.0+0xcc>)
    afde:	681b      	ldr	r3, [r3, #0]
void serial3_putchar(uint32_t c)
    afe0:	4607      	mov	r7, r0
	if (transmit_pin) transmit_assert();
    afe2:	b10b      	cbz	r3, afe8 <serial3_putchar.part.0+0x10>
    afe4:	2201      	movs	r2, #1
    afe6:	701a      	strb	r2, [r3, #0]
		reg |= UART_C3_TXDIR;
		UART2_C3 = reg;
		__enable_irq();
	}
	#endif 
	head = tx_buffer_head;
    afe8:	f8df 90bc 	ldr.w	r9, [pc, #188]	; b0a8 <serial3_putchar.part.0+0xd0>
	if (++head >= tx_buffer_total_size_) head = 0;
    afec:	f8df 80bc 	ldr.w	r8, [pc, #188]	; b0ac <serial3_putchar.part.0+0xd4>
	head = tx_buffer_head;
    aff0:	f899 4000 	ldrb.w	r4, [r9]
	if (++head >= tx_buffer_total_size_) head = 0;
    aff4:	f8d8 3000 	ldr.w	r3, [r8]
	while (tx_buffer_tail == head) {
    aff8:	4d2d      	ldr	r5, [pc, #180]	; (b0b0 <serial3_putchar.part.0+0xd8>)
	if (++head >= tx_buffer_total_size_) head = 0;
    affa:	3401      	adds	r4, #1
    affc:	429c      	cmp	r4, r3
	while (tx_buffer_tail == head) {
    affe:	782b      	ldrb	r3, [r5, #0]
	if (++head >= tx_buffer_total_size_) head = 0;
    b000:	d32a      	bcc.n	b058 <serial3_putchar.part.0+0x80>
	while (tx_buffer_tail == head) {
    b002:	f003 0aff 	and.w	sl, r3, #255	; 0xff
    b006:	2b00      	cmp	r3, #0
    b008:	d13e      	bne.n	b088 <serial3_putchar.part.0+0xb0>
	if (++head >= tx_buffer_total_size_) head = 0;
    b00a:	4654      	mov	r4, sl
		int priority = nvic_execution_priority();
		if (priority <= IRQ_PRIORITY) {
			if ((UART2_S1 & UART_S1_TDRE)) {
    b00c:	4e29      	ldr	r6, [pc, #164]	; (b0b4 <serial3_putchar.part.0+0xdc>)
				uint32_t tail = tx_buffer_tail;
				if (++tail >= tx_buffer_total_size_) tail = 0;
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
					n = tx_buffer[tail];
    b00e:	f8df b0a8 	ldr.w	fp, [pc, #168]	; b0b8 <serial3_putchar.part.0+0xe0>
    b012:	e005      	b.n	b020 <serial3_putchar.part.0+0x48>
			if ((UART2_S1 & UART_S1_TDRE)) {
    b014:	7933      	ldrb	r3, [r6, #4]
    b016:	061b      	lsls	r3, r3, #24
    b018:	d423      	bmi.n	b062 <serial3_putchar.part.0+0x8a>
	while (tx_buffer_tail == head) {
    b01a:	782b      	ldrb	r3, [r5, #0]
    b01c:	42a3      	cmp	r3, r4
    b01e:	d10a      	bne.n	b036 <serial3_putchar.part.0+0x5e>
		int priority = nvic_execution_priority();
    b020:	f7fe ff90 	bl	9f44 <nvic_execution_priority>
		if (priority <= IRQ_PRIORITY) {
    b024:	2840      	cmp	r0, #64	; 0x40
    b026:	ddf5      	ble.n	b014 <serial3_putchar.part.0+0x3c>
				}
				if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
				UART2_D = n;
				tx_buffer_tail = tail;
			}
		} else if (priority >= 256) {
    b028:	28ff      	cmp	r0, #255	; 0xff
    b02a:	ddf6      	ble.n	b01a <serial3_putchar.part.0+0x42>
			yield(); // wait
    b02c:	f001 f9ca 	bl	c3c4 <yield>
	while (tx_buffer_tail == head) {
    b030:	782b      	ldrb	r3, [r5, #0]
    b032:	42a3      	cmp	r3, r4
    b034:	d0f4      	beq.n	b020 <serial3_putchar.part.0+0x48>
		}
	}
	if (head < SERIAL3_TX_BUFFER_SIZE) {
    b036:	2c27      	cmp	r4, #39	; 0x27
    b038:	d929      	bls.n	b08e <serial3_putchar.part.0+0xb6>
		tx_buffer[head] = c;
	} else {
		tx_buffer_storage_[head - SERIAL3_TX_BUFFER_SIZE] = c;
    b03a:	4b20      	ldr	r3, [pc, #128]	; (b0bc <serial3_putchar.part.0+0xe4>)
    b03c:	3c28      	subs	r4, #40	; 0x28
    b03e:	681b      	ldr	r3, [r3, #0]
    b040:	b2ff      	uxtb	r7, r7
    b042:	551f      	strb	r7, [r3, r4]
	}
	transmitting = 1;
    b044:	4a1e      	ldr	r2, [pc, #120]	; (b0c0 <serial3_putchar.part.0+0xe8>)
	tx_buffer_head = head;
	UART2_C2 = C2_TX_ACTIVE;
    b046:	4b1b      	ldr	r3, [pc, #108]	; (b0b4 <serial3_putchar.part.0+0xdc>)
	transmitting = 1;
    b048:	2101      	movs	r1, #1
    b04a:	7011      	strb	r1, [r2, #0]
	UART2_C2 = C2_TX_ACTIVE;
    b04c:	22ac      	movs	r2, #172	; 0xac
	tx_buffer_head = head;
    b04e:	f889 a000 	strb.w	sl, [r9]
	UART2_C2 = C2_TX_ACTIVE;
    b052:	70da      	strb	r2, [r3, #3]
}
    b054:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (tx_buffer_tail == head) {
    b058:	429c      	cmp	r4, r3
	tx_buffer_head = head;
    b05a:	fa5f fa84 	uxtb.w	sl, r4
	while (tx_buffer_tail == head) {
    b05e:	d0d5      	beq.n	b00c <serial3_putchar.part.0+0x34>
    b060:	e7e9      	b.n	b036 <serial3_putchar.part.0+0x5e>
				uint32_t tail = tx_buffer_tail;
    b062:	782b      	ldrb	r3, [r5, #0]
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b064:	f8d8 1000 	ldr.w	r1, [r8]
    b068:	1c5a      	adds	r2, r3, #1
    b06a:	428a      	cmp	r2, r1
				uint32_t tail = tx_buffer_tail;
    b06c:	b2db      	uxtb	r3, r3
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b06e:	d203      	bcs.n	b078 <serial3_putchar.part.0+0xa0>
				if (tail < SERIAL3_TX_BUFFER_SIZE) {
    b070:	2a27      	cmp	r2, #39	; 0x27
    b072:	d810      	bhi.n	b096 <serial3_putchar.part.0+0xbe>
				tx_buffer_tail = tail;
    b074:	b2d1      	uxtb	r1, r2
    b076:	e001      	b.n	b07c <serial3_putchar.part.0+0xa4>
    b078:	2100      	movs	r1, #0
				if (++tail >= tx_buffer_total_size_) tail = 0;
    b07a:	460a      	mov	r2, r1
					n = tx_buffer[tail];
    b07c:	f81b 3002 	ldrb.w	r3, [fp, r2]
    b080:	b2db      	uxtb	r3, r3
				UART2_D = n;
    b082:	71f3      	strb	r3, [r6, #7]
				tx_buffer_tail = tail;
    b084:	7029      	strb	r1, [r5, #0]
    b086:	e7c8      	b.n	b01a <serial3_putchar.part.0+0x42>
	while (tx_buffer_tail == head) {
    b088:	f04f 0a00 	mov.w	sl, #0
	if (++head >= tx_buffer_total_size_) head = 0;
    b08c:	4654      	mov	r4, sl
		tx_buffer[head] = c;
    b08e:	4b0a      	ldr	r3, [pc, #40]	; (b0b8 <serial3_putchar.part.0+0xe0>)
    b090:	b2ff      	uxtb	r7, r7
    b092:	551f      	strb	r7, [r3, r4]
    b094:	e7d6      	b.n	b044 <serial3_putchar.part.0+0x6c>
				tx_buffer_tail = tail;
    b096:	b2d1      	uxtb	r1, r2
					n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    b098:	4a08      	ldr	r2, [pc, #32]	; (b0bc <serial3_putchar.part.0+0xe4>)
    b09a:	3b27      	subs	r3, #39	; 0x27
    b09c:	6812      	ldr	r2, [r2, #0]
    b09e:	5cd3      	ldrb	r3, [r2, r3]
    b0a0:	b2db      	uxtb	r3, r3
    b0a2:	e7ee      	b.n	b082 <serial3_putchar.part.0+0xaa>
    b0a4:	1fffd4a0 	.word	0x1fffd4a0
    b0a8:	1fffd4d0 	.word	0x1fffd4d0
    b0ac:	1fff89f4 	.word	0x1fff89f4
    b0b0:	1fffd4d8 	.word	0x1fffd4d8
    b0b4:	4006c000 	.word	0x4006c000
    b0b8:	1fffd4a8 	.word	0x1fffd4a8
    b0bc:	1fffd4d4 	.word	0x1fffd4d4
    b0c0:	1fffd4a4 	.word	0x1fffd4a4

0000b0c4 <serial3_begin>:
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    b0c4:	4a1d      	ldr	r2, [pc, #116]	; (b13c <serial3_begin+0x78>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    b0c6:	491e      	ldr	r1, [pc, #120]	; (b140 <serial3_begin+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    b0c8:	6b53      	ldr	r3, [r2, #52]	; 0x34
{
    b0ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    b0ce:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
	transmitting = 0;
    b0d2:	4d1c      	ldr	r5, [pc, #112]	; (b144 <serial3_begin+0x80>)
	rx_buffer_head = 0;
    b0d4:	f8df 8070 	ldr.w	r8, [pc, #112]	; b148 <serial3_begin+0x84>
	rx_buffer_tail = 0;
    b0d8:	f8df 9070 	ldr.w	r9, [pc, #112]	; b14c <serial3_begin+0x88>
	tx_buffer_head = 0;
    b0dc:	4f1c      	ldr	r7, [pc, #112]	; (b150 <serial3_begin+0x8c>)
	tx_buffer_tail = 0;
    b0de:	4e1d      	ldr	r6, [pc, #116]	; (b154 <serial3_begin+0x90>)
	SIM_SCGC4 |= SIM_SCGC4_UART2;	// turn on clock, TODO: use bitband
    b0e0:	6353      	str	r3, [r2, #52]	; 0x34
	rx_buffer_head = 0;
    b0e2:	2300      	movs	r3, #0
    b0e4:	f888 3000 	strb.w	r3, [r8]
	rx_buffer_tail = 0;
    b0e8:	2820      	cmp	r0, #32
    b0ea:	f889 3000 	strb.w	r3, [r9]
	tx_buffer_head = 0;
    b0ee:	703b      	strb	r3, [r7, #0]
	tx_buffer_tail = 0;
    b0f0:	7033      	strb	r3, [r6, #0]
	transmitting = 0;
    b0f2:	702b      	strb	r3, [r5, #0]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_PFE | PORT_PCR_MUX(3);
    b0f4:	f240 3513 	movw	r5, #787	; 0x313
    b0f8:	608d      	str	r5, [r1, #8]
	UART2_BDH = (divisor >> 13) & 0x1F;
    b0fa:	f502 3210 	add.w	r2, r2, #147456	; 0x24000
    b0fe:	bf38      	it	cc
    b100:	2020      	movcc	r0, #32
	CORE_PIN8_CONFIG = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3);
    b102:	f44f 7551 	mov.w	r5, #836	; 0x344
    b106:	60cd      	str	r5, [r1, #12]
	UART2_BDH = (divisor >> 13) & 0x1F;
    b108:	f3c0 3144 	ubfx	r1, r0, #13, #5
    b10c:	7011      	strb	r1, [r2, #0]
	UART2_BDL = (divisor >> 5) & 0xFF;
    b10e:	f3c0 1e47 	ubfx	lr, r0, #5, #8
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    b112:	4c11      	ldr	r4, [pc, #68]	; (b158 <serial3_begin+0x94>)
	UART2_BDL = (divisor >> 5) & 0xFF;
    b114:	f882 e001 	strb.w	lr, [r2, #1]
	UART2_C4 = divisor & 0x1F;
    b118:	f000 001f 	and.w	r0, r0, #31
	UART2_C2 = C2_TX_INACTIVE;
    b11c:	212c      	movs	r1, #44	; 0x2c
	UART2_C4 = divisor & 0x1F;
    b11e:	7290      	strb	r0, [r2, #10]
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    b120:	f04f 2ce0 	mov.w	ip, #3758153728	; 0xe000e000
	UART2_C1 = 0;
    b124:	7093      	strb	r3, [r2, #2]
	UART2_PFIFO = 0;
    b126:	7413      	strb	r3, [r2, #16]
	UART2_C2 = C2_TX_INACTIVE;
    b128:	70d1      	strb	r1, [r2, #3]
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    b12a:	2240      	movs	r2, #64	; 0x40
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    b12c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
	NVIC_SET_PRIORITY(IRQ_UART2_STATUS, IRQ_PRIORITY);
    b130:	f884 2031 	strb.w	r2, [r4, #49]	; 0x31
	NVIC_ENABLE_IRQ(IRQ_UART2_STATUS);
    b134:	f8cc 3104 	str.w	r3, [ip, #260]	; 0x104
}
    b138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    b13c:	40048000 	.word	0x40048000
    b140:	4004c000 	.word	0x4004c000
    b144:	1fffd4a4 	.word	0x1fffd4a4
    b148:	1fffd494 	.word	0x1fffd494
    b14c:	1fffd49c 	.word	0x1fffd49c
    b150:	1fffd4d0 	.word	0x1fffd4d0
    b154:	1fffd4d8 	.word	0x1fffd4d8
    b158:	e000e400 	.word	0xe000e400

0000b15c <serial3_format>:
	c = UART2_C1;
    b15c:	4b21      	ldr	r3, [pc, #132]	; (b1e4 <serial3_format+0x88>)
	UART2_C1 = c;
    b15e:	4921      	ldr	r1, [pc, #132]	; (b1e4 <serial3_format+0x88>)
	c = UART2_C1;
    b160:	789b      	ldrb	r3, [r3, #2]
	c = (c & ~0x13) | (format & 0x03);	// configure parity
    b162:	f000 0203 	and.w	r2, r0, #3
    b166:	f003 03ec 	and.w	r3, r3, #236	; 0xec
    b16a:	4313      	orrs	r3, r2
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    b16c:	0742      	lsls	r2, r0, #29
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b16e:	f000 020f 	and.w	r2, r0, #15
	if (format & 0x04) c |= 0x10;		// 9 bits (might include parity)
    b172:	bf48      	it	mi
    b174:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b178:	2a04      	cmp	r2, #4
	UART2_C1 = c;
    b17a:	708b      	strb	r3, [r1, #2]
	if ((format & 0x0F) == 0x04) UART2_C3 |= 0x40; // 8N2 is 9 bit with 9th bit always 1
    b17c:	d103      	bne.n	b186 <serial3_format+0x2a>
    b17e:	798b      	ldrb	r3, [r1, #6]
    b180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b184:	718b      	strb	r3, [r1, #6]
	c = UART2_S2 & ~0x10;
    b186:	4b17      	ldr	r3, [pc, #92]	; (b1e4 <serial3_format+0x88>)
	UART2_S2 = c;
    b188:	4a16      	ldr	r2, [pc, #88]	; (b1e4 <serial3_format+0x88>)
	c = UART2_S2 & ~0x10;
    b18a:	795b      	ldrb	r3, [r3, #5]
	if (format & 0x10) c |= 0x10;		// rx invert
    b18c:	06c1      	lsls	r1, r0, #27
	c = UART2_S2 & ~0x10;
    b18e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	if (format & 0x10) c |= 0x10;		// rx invert
    b192:	bf48      	it	mi
    b194:	f043 0310 	orrmi.w	r3, r3, #16
	UART2_S2 = c;
    b198:	7153      	strb	r3, [r2, #5]
	c = UART2_C3 & ~0x10;
    b19a:	7993      	ldrb	r3, [r2, #6]
	if (format & 0x20) c |= 0x10;		// tx invert
    b19c:	0682      	lsls	r2, r0, #26
	c = UART2_C3 & ~0x10;
    b19e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	UART2_C3 = c;
    b1a2:	4a10      	ldr	r2, [pc, #64]	; (b1e4 <serial3_format+0x88>)
	if (format & 0x20) c |= 0x10;		// tx invert
    b1a4:	bf48      	it	mi
    b1a6:	f043 0310 	orrmi.w	r3, r3, #16
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    b1aa:	f410 7000 	ands.w	r0, r0, #512	; 0x200
	UART2_C3 = c;
    b1ae:	7193      	strb	r3, [r2, #6]
	if ((format & SERIAL_HALF_DUPLEX) != 0) {
    b1b0:	d010      	beq.n	b1d4 <serial3_format+0x78>
		c = UART2_C1;
    b1b2:	7893      	ldrb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b1b4:	490c      	ldr	r1, [pc, #48]	; (b1e8 <serial3_format+0x8c>)
		c |= UART_C1_LOOPS | UART_C1_RSRC;
    b1b6:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
		UART2_C1 = c;
    b1ba:	7093      	strb	r3, [r2, #2]
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b1bc:	7809      	ldrb	r1, [r1, #0]
    b1be:	4b0b      	ldr	r3, [pc, #44]	; (b1ec <serial3_format+0x90>)
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    b1c0:	4a0b      	ldr	r2, [pc, #44]	; (b1f0 <serial3_format+0x94>)
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b1c2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    b1c6:	f240 3047 	movw	r0, #839	; 0x347
		volatile uint32_t *reg = portConfigRegister(tx_pin_num);
    b1ca:	685b      	ldr	r3, [r3, #4]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    b1cc:	4909      	ldr	r1, [pc, #36]	; (b1f4 <serial3_format+0x98>)
		*reg = PORT_PCR_DSE | PORT_PCR_SRE | PORT_PCR_MUX(3) | PORT_PCR_PE | PORT_PCR_PS; // pullup on output pin;
    b1ce:	6018      	str	r0, [r3, #0]
		transmit_pin = (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT);
    b1d0:	6011      	str	r1, [r2, #0]
    b1d2:	4770      	bx	lr
		if (transmit_pin == (uint8_t*)GPIO_BITBAND_PTR(UART2_C3, C3_TXDIR_BIT)) transmit_pin = NULL;
    b1d4:	4b06      	ldr	r3, [pc, #24]	; (b1f0 <serial3_format+0x94>)
    b1d6:	4a07      	ldr	r2, [pc, #28]	; (b1f4 <serial3_format+0x98>)
    b1d8:	6819      	ldr	r1, [r3, #0]
    b1da:	4291      	cmp	r1, r2
    b1dc:	bf08      	it	eq
    b1de:	6018      	streq	r0, [r3, #0]
}
    b1e0:	4770      	bx	lr
    b1e2:	bf00      	nop
    b1e4:	4006c000 	.word	0x4006c000
    b1e8:	1fff89f8 	.word	0x1fff89f8
    b1ec:	000154d8 	.word	0x000154d8
    b1f0:	1fffd4a0 	.word	0x1fffd4a0
    b1f4:	42d800d4 	.word	0x42d800d4

0000b1f8 <serial3_end>:
{
    b1f8:	b538      	push	{r3, r4, r5, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b1fa:	4b13      	ldr	r3, [pc, #76]	; (b248 <serial3_end+0x50>)
    b1fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b1fe:	04db      	lsls	r3, r3, #19
    b200:	d520      	bpl.n	b244 <serial3_end+0x4c>
	while (transmitting) yield();  // wait for buffered data to send
    b202:	4c12      	ldr	r4, [pc, #72]	; (b24c <serial3_end+0x54>)
    b204:	7823      	ldrb	r3, [r4, #0]
    b206:	b123      	cbz	r3, b212 <serial3_end+0x1a>
    b208:	f001 f8dc 	bl	c3c4 <yield>
    b20c:	7823      	ldrb	r3, [r4, #0]
    b20e:	2b00      	cmp	r3, #0
    b210:	d1fa      	bne.n	b208 <serial3_end+0x10>
	UART2_C2 = 0;
    b212:	4a0f      	ldr	r2, [pc, #60]	; (b250 <serial3_end+0x58>)
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b214:	490f      	ldr	r1, [pc, #60]	; (b254 <serial3_end+0x5c>)
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    b216:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
	UART2_C2 = 0;
    b21a:	2300      	movs	r3, #0
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b21c:	f240 1003 	movw	r0, #259	; 0x103
	NVIC_DISABLE_IRQ(IRQ_UART2_STATUS);
    b220:	f44f 3500 	mov.w	r5, #131072	; 0x20000
    b224:	f8c4 5184 	str.w	r5, [r4, #388]	; 0x184
	UART2_C2 = 0;
    b228:	70d3      	strb	r3, [r2, #3]
	CORE_PIN7_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b22a:	6088      	str	r0, [r1, #8]
	CORE_PIN8_CONFIG = PORT_PCR_PE | PORT_PCR_PS | PORT_PCR_MUX(1);
    b22c:	60c8      	str	r0, [r1, #12]
	if (rts_pin) rts_deassert();
    b22e:	490a      	ldr	r1, [pc, #40]	; (b258 <serial3_end+0x60>)
	rx_buffer_head = 0;
    b230:	4c0a      	ldr	r4, [pc, #40]	; (b25c <serial3_end+0x64>)
	rx_buffer_tail = 0;
    b232:	480b      	ldr	r0, [pc, #44]	; (b260 <serial3_end+0x68>)
	if (rts_pin) rts_deassert();
    b234:	6809      	ldr	r1, [r1, #0]
	UART2_S1;
    b236:	7915      	ldrb	r5, [r2, #4]
	UART2_D; // clear leftover error status
    b238:	79d2      	ldrb	r2, [r2, #7]
	rx_buffer_head = 0;
    b23a:	7023      	strb	r3, [r4, #0]
	rx_buffer_tail = 0;
    b23c:	7003      	strb	r3, [r0, #0]
	if (rts_pin) rts_deassert();
    b23e:	b109      	cbz	r1, b244 <serial3_end+0x4c>
    b240:	2301      	movs	r3, #1
    b242:	700b      	strb	r3, [r1, #0]
}
    b244:	bd38      	pop	{r3, r4, r5, pc}
    b246:	bf00      	nop
    b248:	40048000 	.word	0x40048000
    b24c:	1fffd4a4 	.word	0x1fffd4a4
    b250:	4006c000 	.word	0x4006c000
    b254:	4004c000 	.word	0x4004c000
    b258:	1fffd450 	.word	0x1fffd450
    b25c:	1fffd494 	.word	0x1fffd494
    b260:	1fffd49c 	.word	0x1fffd49c

0000b264 <serial3_set_transmit_pin>:
	while (transmitting) ;
    b264:	4a0a      	ldr	r2, [pc, #40]	; (b290 <serial3_set_transmit_pin+0x2c>)
{
    b266:	b538      	push	{r3, r4, r5, lr}
    b268:	4605      	mov	r5, r0
	while (transmitting) ;
    b26a:	7813      	ldrb	r3, [r2, #0]
    b26c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    b270:	2b00      	cmp	r3, #0
    b272:	d1fa      	bne.n	b26a <serial3_set_transmit_pin+0x6>
	pinMode(pin, OUTPUT);
    b274:	2101      	movs	r1, #1
    b276:	4628      	mov	r0, r5
    b278:	f7ff f95e 	bl	a538 <pinMode>
	digitalWrite(pin, LOW);
    b27c:	4621      	mov	r1, r4
    b27e:	4628      	mov	r0, r5
    b280:	f7ff f926 	bl	a4d0 <digitalWrite>
	transmit_pin = portOutputRegister(pin);
    b284:	4a03      	ldr	r2, [pc, #12]	; (b294 <serial3_set_transmit_pin+0x30>)
    b286:	4b04      	ldr	r3, [pc, #16]	; (b298 <serial3_set_transmit_pin+0x34>)
    b288:	f852 2035 	ldr.w	r2, [r2, r5, lsl #3]
    b28c:	601a      	str	r2, [r3, #0]
}
    b28e:	bd38      	pop	{r3, r4, r5, pc}
    b290:	1fffd4a4 	.word	0x1fffd4a4
    b294:	000154d8 	.word	0x000154d8
    b298:	1fffd4a0 	.word	0x1fffd4a0

0000b29c <serial3_set_tx>:
	if (opendrain) pin |= 128;
    b29c:	b109      	cbz	r1, b2a2 <serial3_set_tx+0x6>
    b29e:	f040 0080 	orr.w	r0, r0, #128	; 0x80
	if (pin == tx_pin_num) return;
    b2a2:	4a11      	ldr	r2, [pc, #68]	; (b2e8 <serial3_set_tx+0x4c>)
    b2a4:	7813      	ldrb	r3, [r2, #0]
    b2a6:	4283      	cmp	r3, r0
    b2a8:	d016      	beq.n	b2d8 <serial3_set_tx+0x3c>
{
    b2aa:	b410      	push	{r4}
	if ((SIM_SCGC4 & SIM_SCGC4_UART2)) {
    b2ac:	4c0f      	ldr	r4, [pc, #60]	; (b2ec <serial3_set_tx+0x50>)
    b2ae:	6b64      	ldr	r4, [r4, #52]	; 0x34
    b2b0:	04e4      	lsls	r4, r4, #19
    b2b2:	d50e      	bpl.n	b2d2 <serial3_set_tx+0x36>
		switch (tx_pin_num & 127) {
    b2b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b2b8:	2b08      	cmp	r3, #8
    b2ba:	d102      	bne.n	b2c2 <serial3_set_tx+0x26>
			case 8:  CORE_PIN8_CONFIG = 0; break; // PTD3
    b2bc:	4b0c      	ldr	r3, [pc, #48]	; (b2f0 <serial3_set_tx+0x54>)
    b2be:	2400      	movs	r4, #0
    b2c0:	60dc      	str	r4, [r3, #12]
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    b2c2:	2900      	cmp	r1, #0
		switch (pin & 127) {
    b2c4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
			cfg = PORT_PCR_DSE | PORT_PCR_SRE;
    b2c8:	bf14      	ite	ne
    b2ca:	2160      	movne	r1, #96	; 0x60
    b2cc:	2144      	moveq	r1, #68	; 0x44
		switch (pin & 127) {
    b2ce:	2b08      	cmp	r3, #8
    b2d0:	d003      	beq.n	b2da <serial3_set_tx+0x3e>
	tx_pin_num = pin;
    b2d2:	7010      	strb	r0, [r2, #0]
}
    b2d4:	bc10      	pop	{r4}
    b2d6:	4770      	bx	lr
    b2d8:	4770      	bx	lr
			case 8:  CORE_PIN8_CONFIG = cfg | PORT_PCR_MUX(3); break;
    b2da:	4b05      	ldr	r3, [pc, #20]	; (b2f0 <serial3_set_tx+0x54>)
    b2dc:	f441 7140 	orr.w	r1, r1, #768	; 0x300
    b2e0:	60d9      	str	r1, [r3, #12]
	tx_pin_num = pin;
    b2e2:	7010      	strb	r0, [r2, #0]
}
    b2e4:	bc10      	pop	{r4}
    b2e6:	4770      	bx	lr
    b2e8:	1fff89f8 	.word	0x1fff89f8
    b2ec:	40048000 	.word	0x40048000
    b2f0:	4004c000 	.word	0x4004c000

0000b2f4 <serial3_set_rx>:
}
    b2f4:	4770      	bx	lr
    b2f6:	bf00      	nop

0000b2f8 <serial3_set_rts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b2f8:	4b0d      	ldr	r3, [pc, #52]	; (b330 <serial3_set_rts+0x38>)
    b2fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b2fc:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    b300:	d013      	beq.n	b32a <serial3_set_rts+0x32>
	if (pin < CORE_NUM_DIGITAL) {
    b302:	2821      	cmp	r0, #33	; 0x21
    b304:	d903      	bls.n	b30e <serial3_set_rts+0x16>
		rts_pin = NULL;
    b306:	4b0b      	ldr	r3, [pc, #44]	; (b334 <serial3_set_rts+0x3c>)
    b308:	2000      	movs	r0, #0
    b30a:	6018      	str	r0, [r3, #0]
		return 0;
    b30c:	4770      	bx	lr
		rts_pin = portOutputRegister(pin);
    b30e:	4b0a      	ldr	r3, [pc, #40]	; (b338 <serial3_set_rts+0x40>)
{
    b310:	b510      	push	{r4, lr}
		rts_pin = portOutputRegister(pin);
    b312:	4c08      	ldr	r4, [pc, #32]	; (b334 <serial3_set_rts+0x3c>)
    b314:	f853 3030 	ldr.w	r3, [r3, r0, lsl #3]
    b318:	6023      	str	r3, [r4, #0]
		pinMode(pin, OUTPUT);
    b31a:	2101      	movs	r1, #1
    b31c:	f7ff f90c 	bl	a538 <pinMode>
		rts_assert();
    b320:	6823      	ldr	r3, [r4, #0]
    b322:	2200      	movs	r2, #0
    b324:	701a      	strb	r2, [r3, #0]
	return 1;
    b326:	2001      	movs	r0, #1
}
    b328:	bd10      	pop	{r4, pc}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b32a:	4618      	mov	r0, r3
}
    b32c:	4770      	bx	lr
    b32e:	bf00      	nop
    b330:	40048000 	.word	0x40048000
    b334:	1fffd450 	.word	0x1fffd450
    b338:	000154d8 	.word	0x000154d8

0000b33c <serial3_set_cts>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b33c:	4b0c      	ldr	r3, [pc, #48]	; (b370 <serial3_set_cts+0x34>)
    b33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b340:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
    b344:	d012      	beq.n	b36c <serial3_set_cts+0x30>
	if (pin == 14) {
    b346:	280e      	cmp	r0, #14
    b348:	d109      	bne.n	b35e <serial3_set_cts+0x22>
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    b34a:	4b0a      	ldr	r3, [pc, #40]	; (b374 <serial3_set_cts+0x38>)
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b34c:	4a0a      	ldr	r2, [pc, #40]	; (b378 <serial3_set_cts+0x3c>)
		CORE_PIN14_CONFIG = PORT_PCR_MUX(3) | PORT_PCR_PE; // weak pulldown
    b34e:	f240 3102 	movw	r1, #770	; 0x302
    b352:	6059      	str	r1, [r3, #4]
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b354:	7b53      	ldrb	r3, [r2, #13]
	return 1;
    b356:	2001      	movs	r0, #1
	UART2_MODEM |= UART_MODEM_TXCTSE;
    b358:	4303      	orrs	r3, r0
    b35a:	7353      	strb	r3, [r2, #13]
	return 1;
    b35c:	4770      	bx	lr
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    b35e:	4a06      	ldr	r2, [pc, #24]	; (b378 <serial3_set_cts+0x3c>)
    b360:	7b53      	ldrb	r3, [r2, #13]
    b362:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
		return 0;
    b366:	2000      	movs	r0, #0
		UART2_MODEM &= ~UART_MODEM_TXCTSE;
    b368:	7353      	strb	r3, [r2, #13]
		return 0;
    b36a:	4770      	bx	lr
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return 0;
    b36c:	4618      	mov	r0, r3
}
    b36e:	4770      	bx	lr
    b370:	40048000 	.word	0x40048000
    b374:	4004c000 	.word	0x4004c000
    b378:	4006c000 	.word	0x4006c000

0000b37c <serial3_putchar>:
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b37c:	4b03      	ldr	r3, [pc, #12]	; (b38c <serial3_putchar+0x10>)
    b37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    b380:	04db      	lsls	r3, r3, #19
    b382:	d501      	bpl.n	b388 <serial3_putchar+0xc>
    b384:	f7ff be28 	b.w	afd8 <serial3_putchar.part.0>
}
    b388:	4770      	bx	lr
    b38a:	bf00      	nop
    b38c:	40048000 	.word	0x40048000

0000b390 <serial3_write>:

void serial3_write(const void *buf, unsigned int count)
{
	const uint8_t *p = (const uint8_t *)buf;
	while (count-- > 0) serial3_putchar(*p++);
    b390:	b179      	cbz	r1, b3b2 <serial3_write+0x22>
{
    b392:	b570      	push	{r4, r5, r6, lr}
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b394:	4e07      	ldr	r6, [pc, #28]	; (b3b4 <serial3_write+0x24>)
    b396:	4604      	mov	r4, r0
    b398:	1845      	adds	r5, r0, r1
    b39a:	6b73      	ldr	r3, [r6, #52]	; 0x34
    b39c:	04db      	lsls	r3, r3, #19
	while (count-- > 0) serial3_putchar(*p++);
    b39e:	f104 0401 	add.w	r4, r4, #1
	if (!(SIM_SCGC4 & SIM_SCGC4_UART2)) return;
    b3a2:	d503      	bpl.n	b3ac <serial3_write+0x1c>
    b3a4:	f814 0c01 	ldrb.w	r0, [r4, #-1]
    b3a8:	f7ff fe16 	bl	afd8 <serial3_putchar.part.0>
	while (count-- > 0) serial3_putchar(*p++);
    b3ac:	42ac      	cmp	r4, r5
    b3ae:	d1f4      	bne.n	b39a <serial3_write+0xa>
}
    b3b0:	bd70      	pop	{r4, r5, r6, pc}
    b3b2:	4770      	bx	lr
    b3b4:	40048000 	.word	0x40048000

0000b3b8 <serial3_flush>:

void serial3_flush(void)
{
    b3b8:	b510      	push	{r4, lr}
	while (transmitting) yield(); // wait
    b3ba:	4c04      	ldr	r4, [pc, #16]	; (b3cc <serial3_flush+0x14>)
    b3bc:	7823      	ldrb	r3, [r4, #0]
    b3be:	b123      	cbz	r3, b3ca <serial3_flush+0x12>
    b3c0:	f001 f800 	bl	c3c4 <yield>
    b3c4:	7823      	ldrb	r3, [r4, #0]
    b3c6:	2b00      	cmp	r3, #0
    b3c8:	d1fa      	bne.n	b3c0 <serial3_flush+0x8>
}
    b3ca:	bd10      	pop	{r4, pc}
    b3cc:	1fffd4a4 	.word	0x1fffd4a4

0000b3d0 <serial3_write_buffer_free>:

int serial3_write_buffer_free(void)
{
	uint32_t head, tail;

	head = tx_buffer_head;
    b3d0:	4a08      	ldr	r2, [pc, #32]	; (b3f4 <serial3_write_buffer_free+0x24>)
	tail = tx_buffer_tail;
    b3d2:	4b09      	ldr	r3, [pc, #36]	; (b3f8 <serial3_write_buffer_free+0x28>)
	head = tx_buffer_head;
    b3d4:	7811      	ldrb	r1, [r2, #0]
	tail = tx_buffer_tail;
    b3d6:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b3d8:	4291      	cmp	r1, r2
	head = tx_buffer_head;
    b3da:	b2c8      	uxtb	r0, r1
	tail = tx_buffer_tail;
    b3dc:	b2d3      	uxtb	r3, r2
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b3de:	d202      	bcs.n	b3e6 <serial3_write_buffer_free+0x16>
	return tail - head - 1;
    b3e0:	3b01      	subs	r3, #1
    b3e2:	1a18      	subs	r0, r3, r0
}
    b3e4:	4770      	bx	lr
	if (head >= tail) return tx_buffer_total_size_ - 1 - head + tail;
    b3e6:	4a05      	ldr	r2, [pc, #20]	; (b3fc <serial3_write_buffer_free+0x2c>)
    b3e8:	6812      	ldr	r2, [r2, #0]
    b3ea:	3a01      	subs	r2, #1
    b3ec:	4413      	add	r3, r2
    b3ee:	1a18      	subs	r0, r3, r0
    b3f0:	4770      	bx	lr
    b3f2:	bf00      	nop
    b3f4:	1fffd4d0 	.word	0x1fffd4d0
    b3f8:	1fffd4d8 	.word	0x1fffd4d8
    b3fc:	1fff89f4 	.word	0x1fff89f4

0000b400 <serial3_available>:

int serial3_available(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    b400:	4a06      	ldr	r2, [pc, #24]	; (b41c <serial3_available+0x1c>)
	tail = rx_buffer_tail;
    b402:	4b07      	ldr	r3, [pc, #28]	; (b420 <serial3_available+0x20>)
	head = rx_buffer_head;
    b404:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    b406:	781a      	ldrb	r2, [r3, #0]
	if (head >= tail) return head - tail;
    b408:	4291      	cmp	r1, r2
	tail = rx_buffer_tail;
    b40a:	b2d0      	uxtb	r0, r2
	return rx_buffer_total_size_ + head - tail;
    b40c:	bf3c      	itt	cc
    b40e:	4a05      	ldrcc	r2, [pc, #20]	; (b424 <serial3_available+0x24>)
    b410:	6812      	ldrcc	r2, [r2, #0]
	head = rx_buffer_head;
    b412:	b2cb      	uxtb	r3, r1
	return rx_buffer_total_size_ + head - tail;
    b414:	bf38      	it	cc
    b416:	189b      	addcc	r3, r3, r2
    b418:	1a18      	subs	r0, r3, r0
}
    b41a:	4770      	bx	lr
    b41c:	1fffd494 	.word	0x1fffd494
    b420:	1fffd49c 	.word	0x1fffd49c
    b424:	1fff89f0 	.word	0x1fff89f0

0000b428 <serial3_getchar>:
int serial3_getchar(void)
{
	uint32_t head, tail;
	int c;

	head = rx_buffer_head;
    b428:	4b1b      	ldr	r3, [pc, #108]	; (b498 <serial3_getchar+0x70>)
	tail = rx_buffer_tail;
    b42a:	491c      	ldr	r1, [pc, #112]	; (b49c <serial3_getchar+0x74>)
	head = rx_buffer_head;
    b42c:	781a      	ldrb	r2, [r3, #0]
	tail = rx_buffer_tail;
    b42e:	780b      	ldrb	r3, [r1, #0]
	if (head == tail) return -1;
    b430:	429a      	cmp	r2, r3
    b432:	d02e      	beq.n	b492 <serial3_getchar+0x6a>
{
    b434:	b510      	push	{r4, lr}
    b436:	fa5f fe82 	uxtb.w	lr, r2
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b43a:	4a19      	ldr	r2, [pc, #100]	; (b4a0 <serial3_getchar+0x78>)
    b43c:	b2d8      	uxtb	r0, r3
    b43e:	6812      	ldr	r2, [r2, #0]
    b440:	1c43      	adds	r3, r0, #1
    b442:	429a      	cmp	r2, r3
    b444:	d919      	bls.n	b47a <serial3_getchar+0x52>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    b446:	2b3f      	cmp	r3, #63	; 0x3f
    b448:	d81b      	bhi.n	b482 <serial3_getchar+0x5a>
		c = rx_buffer[tail];
	} else {
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
	}
	rx_buffer_tail = tail;
    b44a:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer[tail];
    b44e:	4815      	ldr	r0, [pc, #84]	; (b4a4 <serial3_getchar+0x7c>)
    b450:	5cc0      	ldrb	r0, [r0, r3]
    b452:	b2c0      	uxtb	r0, r0
	rx_buffer_tail = tail;
    b454:	f881 c000 	strb.w	ip, [r1]
	if (rts_pin) {
    b458:	4913      	ldr	r1, [pc, #76]	; (b4a8 <serial3_getchar+0x80>)
    b45a:	6809      	ldr	r1, [r1, #0]
    b45c:	b161      	cbz	r1, b478 <serial3_getchar+0x50>
		int avail;
		if (head >= tail) avail = head - tail;
    b45e:	459e      	cmp	lr, r3
		else avail = rx_buffer_total_size_ + head - tail;
    b460:	bf3c      	itt	cc
    b462:	4472      	addcc	r2, lr
    b464:	1ad3      	subcc	r3, r2, r3
		if (avail <= rts_low_watermark_) rts_assert();
    b466:	4a11      	ldr	r2, [pc, #68]	; (b4ac <serial3_getchar+0x84>)
    b468:	6812      	ldr	r2, [r2, #0]
		if (head >= tail) avail = head - tail;
    b46a:	bf28      	it	cs
    b46c:	ebae 0303 	subcs.w	r3, lr, r3
		if (avail <= rts_low_watermark_) rts_assert();
    b470:	429a      	cmp	r2, r3
    b472:	d301      	bcc.n	b478 <serial3_getchar+0x50>
    b474:	2300      	movs	r3, #0
    b476:	700b      	strb	r3, [r1, #0]
	}
	return c;
}
    b478:	bd10      	pop	{r4, pc}
    b47a:	f04f 0c00 	mov.w	ip, #0
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b47e:	4663      	mov	r3, ip
    b480:	e7e5      	b.n	b44e <serial3_getchar+0x26>
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b482:	4c0b      	ldr	r4, [pc, #44]	; (b4b0 <serial3_getchar+0x88>)
    b484:	383f      	subs	r0, #63	; 0x3f
    b486:	6824      	ldr	r4, [r4, #0]
    b488:	5c20      	ldrb	r0, [r4, r0]
	rx_buffer_tail = tail;
    b48a:	fa5f fc83 	uxtb.w	ip, r3
		c = rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b48e:	b2c0      	uxtb	r0, r0
    b490:	e7e0      	b.n	b454 <serial3_getchar+0x2c>
	if (head == tail) return -1;
    b492:	f04f 30ff 	mov.w	r0, #4294967295
}
    b496:	4770      	bx	lr
    b498:	1fffd494 	.word	0x1fffd494
    b49c:	1fffd49c 	.word	0x1fffd49c
    b4a0:	1fff89f0 	.word	0x1fff89f0
    b4a4:	1fffd454 	.word	0x1fffd454
    b4a8:	1fffd450 	.word	0x1fffd450
    b4ac:	1fff89ec 	.word	0x1fff89ec
    b4b0:	1fffd498 	.word	0x1fffd498

0000b4b4 <serial3_peek>:

int serial3_peek(void)
{
	uint32_t head, tail;

	head = rx_buffer_head;
    b4b4:	4a0d      	ldr	r2, [pc, #52]	; (b4ec <serial3_peek+0x38>)
	tail = rx_buffer_tail;
    b4b6:	4b0e      	ldr	r3, [pc, #56]	; (b4f0 <serial3_peek+0x3c>)
	head = rx_buffer_head;
    b4b8:	7811      	ldrb	r1, [r2, #0]
	tail = rx_buffer_tail;
    b4ba:	781b      	ldrb	r3, [r3, #0]
	if (head == tail) return -1;
    b4bc:	4299      	cmp	r1, r3
	tail = rx_buffer_tail;
    b4be:	b2da      	uxtb	r2, r3
	if (head == tail) return -1;
    b4c0:	d011      	beq.n	b4e6 <serial3_peek+0x32>
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b4c2:	490c      	ldr	r1, [pc, #48]	; (b4f4 <serial3_peek+0x40>)
    b4c4:	6809      	ldr	r1, [r1, #0]
    b4c6:	1c53      	adds	r3, r2, #1
    b4c8:	4299      	cmp	r1, r3
    b4ca:	d907      	bls.n	b4dc <serial3_peek+0x28>
	if (tail < SERIAL3_RX_BUFFER_SIZE) {
    b4cc:	2b3f      	cmp	r3, #63	; 0x3f
    b4ce:	d906      	bls.n	b4de <serial3_peek+0x2a>
		return rx_buffer[tail];
	}
	return rx_buffer_storage_[tail-SERIAL3_RX_BUFFER_SIZE];
    b4d0:	4b09      	ldr	r3, [pc, #36]	; (b4f8 <serial3_peek+0x44>)
    b4d2:	3a3f      	subs	r2, #63	; 0x3f
    b4d4:	681b      	ldr	r3, [r3, #0]
    b4d6:	5c98      	ldrb	r0, [r3, r2]
    b4d8:	b2c0      	uxtb	r0, r0
    b4da:	4770      	bx	lr
	if (++tail >= rx_buffer_total_size_) tail = 0;
    b4dc:	2300      	movs	r3, #0
		return rx_buffer[tail];
    b4de:	4a07      	ldr	r2, [pc, #28]	; (b4fc <serial3_peek+0x48>)
    b4e0:	5cd0      	ldrb	r0, [r2, r3]
    b4e2:	b2c0      	uxtb	r0, r0
    b4e4:	4770      	bx	lr
	if (head == tail) return -1;
    b4e6:	f04f 30ff 	mov.w	r0, #4294967295
}
    b4ea:	4770      	bx	lr
    b4ec:	1fffd494 	.word	0x1fffd494
    b4f0:	1fffd49c 	.word	0x1fffd49c
    b4f4:	1fff89f0 	.word	0x1fff89f0
    b4f8:	1fffd498 	.word	0x1fffd498
    b4fc:	1fffd454 	.word	0x1fffd454

0000b500 <serial3_clear>:

void serial3_clear(void)
{
	rx_buffer_head = rx_buffer_tail;
    b500:	4b05      	ldr	r3, [pc, #20]	; (b518 <serial3_clear+0x18>)
	if (rts_pin) rts_assert();
    b502:	4a06      	ldr	r2, [pc, #24]	; (b51c <serial3_clear+0x1c>)
	rx_buffer_head = rx_buffer_tail;
    b504:	781b      	ldrb	r3, [r3, #0]
    b506:	4906      	ldr	r1, [pc, #24]	; (b520 <serial3_clear+0x20>)
	if (rts_pin) rts_assert();
    b508:	6812      	ldr	r2, [r2, #0]
	rx_buffer_head = rx_buffer_tail;
    b50a:	b2db      	uxtb	r3, r3
    b50c:	700b      	strb	r3, [r1, #0]
	if (rts_pin) rts_assert();
    b50e:	b10a      	cbz	r2, b514 <serial3_clear+0x14>
    b510:	2300      	movs	r3, #0
    b512:	7013      	strb	r3, [r2, #0]
}
    b514:	4770      	bx	lr
    b516:	bf00      	nop
    b518:	1fffd49c 	.word	0x1fffd49c
    b51c:	1fffd450 	.word	0x1fffd450
    b520:	1fffd494 	.word	0x1fffd494

0000b524 <uart2_status_isr>:
//   Receive data above watermark   UART_S1_RDRF
//   LIN break detect		    UART_S2_LBKDIF
//   RxD pin active edge	    UART_S2_RXEDGIF

void uart2_status_isr(void)
{
    b524:	b430      	push	{r4, r5}
	uint32_t head, tail, n;
	uint8_t c;

	if (UART2_S1 & UART_S1_RDRF) {
    b526:	4b3a      	ldr	r3, [pc, #232]	; (b610 <uart2_status_isr+0xec>)
    b528:	791a      	ldrb	r2, [r3, #4]
    b52a:	0695      	lsls	r5, r2, #26
    b52c:	d524      	bpl.n	b578 <uart2_status_isr+0x54>
		if (use9Bits && (UART2_C3 & 0x80)) {
			n = UART2_D | 0x100;
		} else {
			n = UART2_D;
		}
		head = rx_buffer_head + 1;
    b52e:	4d39      	ldr	r5, [pc, #228]	; (b614 <uart2_status_isr+0xf0>)
		if (head >= rx_buffer_total_size_) head = 0;
    b530:	4939      	ldr	r1, [pc, #228]	; (b618 <uart2_status_isr+0xf4>)
			n = UART2_D;
    b532:	79db      	ldrb	r3, [r3, #7]
		head = rx_buffer_head + 1;
    b534:	782a      	ldrb	r2, [r5, #0]
		if (head >= rx_buffer_total_size_) head = 0;
    b536:	680c      	ldr	r4, [r1, #0]
			n = UART2_D;
    b538:	b2d8      	uxtb	r0, r3
		head = rx_buffer_head + 1;
    b53a:	1c53      	adds	r3, r2, #1
		if (head >= rx_buffer_total_size_) head = 0;
    b53c:	429c      	cmp	r4, r3
		head = rx_buffer_head + 1;
    b53e:	b2d2      	uxtb	r2, r2
		if (head >= rx_buffer_total_size_) head = 0;
    b540:	d831      	bhi.n	b5a6 <uart2_status_isr+0x82>
		if (head != rx_buffer_tail) {
    b542:	4b36      	ldr	r3, [pc, #216]	; (b61c <uart2_status_isr+0xf8>)
    b544:	781a      	ldrb	r2, [r3, #0]
    b546:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b54a:	b122      	cbz	r2, b556 <uart2_status_isr+0x32>
    b54c:	2200      	movs	r2, #0
    b54e:	4613      	mov	r3, r2
			if (head < SERIAL3_RX_BUFFER_SIZE) {
				rx_buffer[head] = n;
    b550:	4933      	ldr	r1, [pc, #204]	; (b620 <uart2_status_isr+0xfc>)
    b552:	54c8      	strb	r0, [r1, r3]
			} else {
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
			}

			rx_buffer_head = head;
    b554:	702a      	strb	r2, [r5, #0]
		}
		if (rts_pin) {
    b556:	4933      	ldr	r1, [pc, #204]	; (b624 <uart2_status_isr+0x100>)
    b558:	6809      	ldr	r1, [r1, #0]
    b55a:	b169      	cbz	r1, b578 <uart2_status_isr+0x54>
			int avail;
			tail = tx_buffer_tail;
    b55c:	4a32      	ldr	r2, [pc, #200]	; (b628 <uart2_status_isr+0x104>)
    b55e:	7810      	ldrb	r0, [r2, #0]
			if (head >= tail) avail = head - tail;
    b560:	4298      	cmp	r0, r3
			tail = tx_buffer_tail;
    b562:	b2c2      	uxtb	r2, r0
			else avail = rx_buffer_total_size_ + head - tail;
    b564:	bf8a      	itet	hi
    b566:	1aa2      	subhi	r2, r4, r2
			if (head >= tail) avail = head - tail;
    b568:	1a9b      	subls	r3, r3, r2
			else avail = rx_buffer_total_size_ + head - tail;
    b56a:	189b      	addhi	r3, r3, r2
			if (avail >= rts_high_watermark_) rts_deassert();
    b56c:	4a2f      	ldr	r2, [pc, #188]	; (b62c <uart2_status_isr+0x108>)
    b56e:	6812      	ldr	r2, [r2, #0]
    b570:	429a      	cmp	r2, r3
    b572:	bf9c      	itt	ls
    b574:	2301      	movls	r3, #1
    b576:	700b      	strbls	r3, [r1, #0]
		}
	}
	c = UART2_C2;
    b578:	4a25      	ldr	r2, [pc, #148]	; (b610 <uart2_status_isr+0xec>)
    b57a:	78d3      	ldrb	r3, [r2, #3]
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b57c:	061c      	lsls	r4, r3, #24
	c = UART2_C2;
    b57e:	b2d9      	uxtb	r1, r3
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b580:	d41e      	bmi.n	b5c0 <uart2_status_isr+0x9c>
			if (use9Bits) UART2_C3 = (UART2_C3 & ~0x40) | ((n & 0x100) >> 2);
			UART2_D = n;
			tx_buffer_tail = tail;
		}
	}
	if ((c & UART_C2_TCIE) && (UART2_S1 & UART_S1_TC)) {
    b582:	064a      	lsls	r2, r1, #25
    b584:	d50d      	bpl.n	b5a2 <uart2_status_isr+0x7e>
    b586:	4b22      	ldr	r3, [pc, #136]	; (b610 <uart2_status_isr+0xec>)
    b588:	791b      	ldrb	r3, [r3, #4]
    b58a:	065b      	lsls	r3, r3, #25
    b58c:	d509      	bpl.n	b5a2 <uart2_status_isr+0x7e>
		transmitting = 0;
		if (transmit_pin) transmit_deassert();
    b58e:	4b28      	ldr	r3, [pc, #160]	; (b630 <uart2_status_isr+0x10c>)
		transmitting = 0;
    b590:	4928      	ldr	r1, [pc, #160]	; (b634 <uart2_status_isr+0x110>)
		if (transmit_pin) transmit_deassert();
    b592:	681b      	ldr	r3, [r3, #0]
		transmitting = 0;
    b594:	2200      	movs	r2, #0
    b596:	700a      	strb	r2, [r1, #0]
		if (transmit_pin) transmit_deassert();
    b598:	b103      	cbz	r3, b59c <uart2_status_isr+0x78>
    b59a:	701a      	strb	r2, [r3, #0]
			reg &= ~UART_C3_TXDIR;
			UART2_C3 = reg;
			__enable_irq();
		}
		#endif
		UART2_C2 = C2_TX_INACTIVE;
    b59c:	4b1c      	ldr	r3, [pc, #112]	; (b610 <uart2_status_isr+0xec>)
    b59e:	222c      	movs	r2, #44	; 0x2c
    b5a0:	70da      	strb	r2, [r3, #3]
	}
}
    b5a2:	bc30      	pop	{r4, r5}
    b5a4:	4770      	bx	lr
		if (head != rx_buffer_tail) {
    b5a6:	491d      	ldr	r1, [pc, #116]	; (b61c <uart2_status_isr+0xf8>)
    b5a8:	7809      	ldrb	r1, [r1, #0]
    b5aa:	4299      	cmp	r1, r3
    b5ac:	d0d3      	beq.n	b556 <uart2_status_isr+0x32>
			if (head < SERIAL3_RX_BUFFER_SIZE) {
    b5ae:	2b3f      	cmp	r3, #63	; 0x3f
    b5b0:	d92c      	bls.n	b60c <uart2_status_isr+0xe8>
				rx_buffer_storage_[head-SERIAL3_RX_BUFFER_SIZE] = n;
    b5b2:	4921      	ldr	r1, [pc, #132]	; (b638 <uart2_status_isr+0x114>)
    b5b4:	3a3f      	subs	r2, #63	; 0x3f
    b5b6:	6809      	ldr	r1, [r1, #0]
    b5b8:	5488      	strb	r0, [r1, r2]
			rx_buffer_head = head;
    b5ba:	b2da      	uxtb	r2, r3
    b5bc:	702a      	strb	r2, [r5, #0]
    b5be:	e7ca      	b.n	b556 <uart2_status_isr+0x32>
	if ((c & UART_C2_TIE) && (UART2_S1 & UART_S1_TDRE)) {
    b5c0:	7913      	ldrb	r3, [r2, #4]
    b5c2:	0618      	lsls	r0, r3, #24
    b5c4:	d5dd      	bpl.n	b582 <uart2_status_isr+0x5e>
		head = tx_buffer_head;
    b5c6:	4b1d      	ldr	r3, [pc, #116]	; (b63c <uart2_status_isr+0x118>)
		tail = tx_buffer_tail;
    b5c8:	4817      	ldr	r0, [pc, #92]	; (b628 <uart2_status_isr+0x104>)
		head = tx_buffer_head;
    b5ca:	781d      	ldrb	r5, [r3, #0]
		tail = tx_buffer_tail;
    b5cc:	7803      	ldrb	r3, [r0, #0]
		if (head == tail) {
    b5ce:	429d      	cmp	r5, r3
		tail = tx_buffer_tail;
    b5d0:	b2dc      	uxtb	r4, r3
		if (head == tail) {
    b5d2:	d008      	beq.n	b5e6 <uart2_status_isr+0xc2>
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b5d4:	4a1a      	ldr	r2, [pc, #104]	; (b640 <uart2_status_isr+0x11c>)
    b5d6:	6812      	ldr	r2, [r2, #0]
    b5d8:	1c63      	adds	r3, r4, #1
    b5da:	429a      	cmp	r2, r3
    b5dc:	d906      	bls.n	b5ec <uart2_status_isr+0xc8>
			if (tail < SERIAL3_TX_BUFFER_SIZE) {
    b5de:	2b27      	cmp	r3, #39	; 0x27
    b5e0:	d80d      	bhi.n	b5fe <uart2_status_isr+0xda>
			tx_buffer_tail = tail;
    b5e2:	b2da      	uxtb	r2, r3
    b5e4:	e004      	b.n	b5f0 <uart2_status_isr+0xcc>
			UART2_C2 = C2_TX_COMPLETING;
    b5e6:	236c      	movs	r3, #108	; 0x6c
    b5e8:	70d3      	strb	r3, [r2, #3]
    b5ea:	e7ca      	b.n	b582 <uart2_status_isr+0x5e>
    b5ec:	2200      	movs	r2, #0
			if (++tail >= tx_buffer_total_size_) tail = 0;
    b5ee:	4613      	mov	r3, r2
				n = tx_buffer[tail];
    b5f0:	4c14      	ldr	r4, [pc, #80]	; (b644 <uart2_status_isr+0x120>)
    b5f2:	5ce3      	ldrb	r3, [r4, r3]
    b5f4:	b2db      	uxtb	r3, r3
			UART2_D = n;
    b5f6:	4c06      	ldr	r4, [pc, #24]	; (b610 <uart2_status_isr+0xec>)
    b5f8:	71e3      	strb	r3, [r4, #7]
			tx_buffer_tail = tail;
    b5fa:	7002      	strb	r2, [r0, #0]
    b5fc:	e7c1      	b.n	b582 <uart2_status_isr+0x5e>
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    b5fe:	4a12      	ldr	r2, [pc, #72]	; (b648 <uart2_status_isr+0x124>)
    b600:	3c27      	subs	r4, #39	; 0x27
    b602:	6815      	ldr	r5, [r2, #0]
			tx_buffer_tail = tail;
    b604:	b2da      	uxtb	r2, r3
				n = tx_buffer_storage_[tail-SERIAL3_TX_BUFFER_SIZE];
    b606:	5d2b      	ldrb	r3, [r5, r4]
    b608:	b2db      	uxtb	r3, r3
    b60a:	e7f4      	b.n	b5f6 <uart2_status_isr+0xd2>
			rx_buffer_head = head;
    b60c:	b2da      	uxtb	r2, r3
    b60e:	e79f      	b.n	b550 <uart2_status_isr+0x2c>
    b610:	4006c000 	.word	0x4006c000
    b614:	1fffd494 	.word	0x1fffd494
    b618:	1fff89f0 	.word	0x1fff89f0
    b61c:	1fffd49c 	.word	0x1fffd49c
    b620:	1fffd454 	.word	0x1fffd454
    b624:	1fffd450 	.word	0x1fffd450
    b628:	1fffd4d8 	.word	0x1fffd4d8
    b62c:	1fff89e8 	.word	0x1fff89e8
    b630:	1fffd4a0 	.word	0x1fffd4a0
    b634:	1fffd4a4 	.word	0x1fffd4a4
    b638:	1fffd498 	.word	0x1fffd498
    b63c:	1fffd4d0 	.word	0x1fffd4d0
    b640:	1fff89f4 	.word	0x1fff89f4
    b644:	1fffd4a8 	.word	0x1fffd4a8
    b648:	1fffd4d4 	.word	0x1fffd4d4

0000b64c <serial3_add_memory_for_read>:

void serial3_add_memory_for_read(void *buffer, size_t length)
{
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    b64c:	4b09      	ldr	r3, [pc, #36]	; (b674 <serial3_add_memory_for_read+0x28>)
{
    b64e:	b410      	push	{r4}
	rx_buffer_storage_ = (BUFTYPE*)buffer;
    b650:	6018      	str	r0, [r3, #0]
	if (buffer) {
    b652:	b160      	cbz	r0, b66e <serial3_add_memory_for_read+0x22>
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE + length;
    b654:	f101 0440 	add.w	r4, r1, #64	; 0x40
	} else {
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
	} 

	rts_low_watermark_ = RTS_LOW_WATERMARK + length;
    b658:	4b07      	ldr	r3, [pc, #28]	; (b678 <serial3_add_memory_for_read+0x2c>)
    b65a:	4808      	ldr	r0, [pc, #32]	; (b67c <serial3_add_memory_for_read+0x30>)
    b65c:	f101 021a 	add.w	r2, r1, #26
    b660:	601a      	str	r2, [r3, #0]
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    b662:	4b07      	ldr	r3, [pc, #28]	; (b680 <serial3_add_memory_for_read+0x34>)
    b664:	6004      	str	r4, [r0, #0]
    b666:	3128      	adds	r1, #40	; 0x28
}
    b668:	bc10      	pop	{r4}
	rts_high_watermark_ = RTS_HIGH_WATERMARK + length;
    b66a:	6019      	str	r1, [r3, #0]
}
    b66c:	4770      	bx	lr
		rx_buffer_total_size_ = SERIAL3_RX_BUFFER_SIZE;
    b66e:	2440      	movs	r4, #64	; 0x40
    b670:	e7f2      	b.n	b658 <serial3_add_memory_for_read+0xc>
    b672:	bf00      	nop
    b674:	1fffd498 	.word	0x1fffd498
    b678:	1fff89ec 	.word	0x1fff89ec
    b67c:	1fff89f0 	.word	0x1fff89f0
    b680:	1fff89e8 	.word	0x1fff89e8

0000b684 <serial3_add_memory_for_write>:

void serial3_add_memory_for_write(void *buffer, size_t length)
{
	tx_buffer_storage_ = (BUFTYPE*)buffer;
    b684:	4b05      	ldr	r3, [pc, #20]	; (b69c <serial3_add_memory_for_write+0x18>)
    b686:	6018      	str	r0, [r3, #0]
	if (buffer) {
    b688:	b118      	cbz	r0, b692 <serial3_add_memory_for_write+0xe>
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE + length;
    b68a:	4b05      	ldr	r3, [pc, #20]	; (b6a0 <serial3_add_memory_for_write+0x1c>)
    b68c:	3128      	adds	r1, #40	; 0x28
    b68e:	6019      	str	r1, [r3, #0]
	} else {
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
	} 
}
    b690:	4770      	bx	lr
    b692:	4b03      	ldr	r3, [pc, #12]	; (b6a0 <serial3_add_memory_for_write+0x1c>)
		tx_buffer_total_size_ = SERIAL3_TX_BUFFER_SIZE;
    b694:	2128      	movs	r1, #40	; 0x28
    b696:	6019      	str	r1, [r3, #0]
}
    b698:	4770      	bx	lr
    b69a:	bf00      	nop
    b69c:	1fffd4d4 	.word	0x1fffd4d4
    b6a0:	1fff89f4 	.word	0x1fff89f4

0000b6a4 <serialEvent2()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent2() __attribute__((weak));
void serialEvent2() {}		// No use calling this so disable if called...
    b6a4:	4770      	bx	lr
    b6a6:	bf00      	nop

0000b6a8 <serialEvent3()>:

#include <Arduino.h>
#include "HardwareSerial.h"
void serialEvent3() __attribute__((weak));
void serialEvent3() {}		// No use calling this so disable if called...
    b6a8:	4770      	bx	lr
    b6aa:	bf00      	nop

0000b6ac <usb_rx>:


usb_packet_t *usb_rx(uint32_t endpoint)
{
	usb_packet_t *ret;
	endpoint--;
    b6ac:	1e43      	subs	r3, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b6ae:	2b03      	cmp	r3, #3
    b6b0:	d817      	bhi.n	b6e2 <usb_rx+0x36>
	__disable_irq();
    b6b2:	b672      	cpsid	i
	ret = rx_first[endpoint];
    b6b4:	490c      	ldr	r1, [pc, #48]	; (b6e8 <usb_rx+0x3c>)
    b6b6:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
	if (ret) {
    b6ba:	b180      	cbz	r0, b6de <usb_rx+0x32>
{
    b6bc:	b410      	push	{r4}
		rx_first[endpoint] = ret->next;
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b6be:	4c0b      	ldr	r4, [pc, #44]	; (b6ec <usb_rx+0x40>)
    b6c0:	f8b0 c000 	ldrh.w	ip, [r0]
    b6c4:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    b6c8:	eba2 020c 	sub.w	r2, r2, ip
		rx_first[endpoint] = ret->next;
    b6cc:	f8d0 c004 	ldr.w	ip, [r0, #4]
    b6d0:	f841 c023 	str.w	ip, [r1, r3, lsl #2]
		usb_rx_byte_count_data[endpoint] -= ret->len;
    b6d4:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
	}
	__enable_irq();
    b6d8:	b662      	cpsie	i
	//serial_phex(endpoint);
	//serial_print(", packet=");
	//serial_phex32(ret);
	//serial_print("\n");
	return ret;
}
    b6da:	bc10      	pop	{r4}
    b6dc:	4770      	bx	lr
	__enable_irq();
    b6de:	b662      	cpsie	i
}
    b6e0:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return NULL;
    b6e2:	2000      	movs	r0, #0
    b6e4:	4770      	bx	lr
    b6e6:	bf00      	nop
    b6e8:	1fffd56c 	.word	0x1fffd56c
    b6ec:	1fffd5bc 	.word	0x1fffd5bc

0000b6f0 <usb_tx_packet_count>:
uint32_t usb_tx_packet_count(uint32_t endpoint)
{
	const usb_packet_t *p;
	uint32_t count=0;

	endpoint--;
    b6f0:	3801      	subs	r0, #1
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b6f2:	2803      	cmp	r0, #3
    b6f4:	d80b      	bhi.n	b70e <usb_tx_packet_count+0x1e>
	__disable_irq();
    b6f6:	b672      	cpsid	i
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    b6f8:	4b07      	ldr	r3, [pc, #28]	; (b718 <usb_tx_packet_count+0x28>)
    b6fa:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    b6fe:	b143      	cbz	r3, b712 <usb_tx_packet_count+0x22>
	uint32_t count=0;
    b700:	2000      	movs	r0, #0
	for (p = tx_first[endpoint]; p; p = p->next) count++;
    b702:	685b      	ldr	r3, [r3, #4]
    b704:	3001      	adds	r0, #1
    b706:	2b00      	cmp	r3, #0
    b708:	d1fb      	bne.n	b702 <usb_tx_packet_count+0x12>
	__enable_irq();
    b70a:	b662      	cpsie	i
	return count;
    b70c:	4770      	bx	lr
	if (endpoint >= NUM_ENDPOINTS) return 0;
    b70e:	2000      	movs	r0, #0
}
    b710:	4770      	bx	lr
	uint32_t count=0;
    b712:	4618      	mov	r0, r3
    b714:	e7f9      	b.n	b70a <usb_tx_packet_count+0x1a>
    b716:	bf00      	nop
    b718:	1fffd594 	.word	0x1fffd594

0000b71c <usb_rx_memory>:
// user is creating data very quickly, their consumption could starve reception
// without this prioritization.  The packet buffer (input) is assigned to the
// first endpoint needing memory.
//
void usb_rx_memory(usb_packet_t *packet)
{
    b71c:	b410      	push	{r4}
	unsigned int i;
	const uint8_t *cfg;

	cfg = usb_endpoint_config_table;
	//serial_print("rx_mem:");
	__disable_irq();
    b71e:	b672      	cpsid	i
	cfg = usb_endpoint_config_table;
    b720:	4a19      	ldr	r2, [pc, #100]	; (b788 <usb_rx_memory+0x6c>)
	for (i=1; i <= NUM_ENDPOINTS; i++) {
#ifdef AUDIO_INTERFACE
		if (i == AUDIO_RX_ENDPOINT) continue;
#endif
		if (*cfg++ & USB_ENDPT_EPRXEN) {
			if (table[index(i, RX, EVEN)].desc == 0) {
    b722:	4c1a      	ldr	r4, [pc, #104]	; (b78c <usb_rx_memory+0x70>)
	__disable_irq();
    b724:	2304      	movs	r3, #4
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b726:	f812 1b01 	ldrb.w	r1, [r2], #1
    b72a:	0709      	lsls	r1, r1, #28
				__enable_irq();
				//serial_phex(i);
				//serial_print(",even\n");
				return;
			}
			if (table[index(i, RX, ODD)].desc == 0) {
    b72c:	f043 0c01 	orr.w	ip, r3, #1
		if (*cfg++ & USB_ENDPT_EPRXEN) {
    b730:	d505      	bpl.n	b73e <usb_rx_memory+0x22>
			if (table[index(i, RX, EVEN)].desc == 0) {
    b732:	f854 1033 	ldr.w	r1, [r4, r3, lsl #3]
    b736:	b161      	cbz	r1, b752 <usb_rx_memory+0x36>
			if (table[index(i, RX, ODD)].desc == 0) {
    b738:	f854 103c 	ldr.w	r1, [r4, ip, lsl #3]
    b73c:	b1b9      	cbz	r1, b76e <usb_rx_memory+0x52>
	for (i=1; i <= NUM_ENDPOINTS; i++) {
    b73e:	3304      	adds	r3, #4
    b740:	2b14      	cmp	r3, #20
    b742:	d1f0      	bne.n	b726 <usb_rx_memory+0xa>
				//serial_print(",odd\n");
				return;
			}
		}
	}
	__enable_irq();
    b744:	b662      	cpsie	i
	// we should never reach this point.  If we get here, it means
	// usb_rx_memory_needed was set greater than zero, but no memory
	// was actually needed.
	usb_rx_memory_needed = 0;
    b746:	4b12      	ldr	r3, [pc, #72]	; (b790 <usb_rx_memory+0x74>)
    b748:	2200      	movs	r2, #0
    b74a:	701a      	strb	r2, [r3, #0]
	usb_free(packet);
	return;
}
    b74c:	bc10      	pop	{r4}
	usb_free(packet);
    b74e:	f000 bc9d 	b.w	c08c <usb_free>
				usb_rx_memory_needed--;
    b752:	490f      	ldr	r1, [pc, #60]	; (b790 <usb_rx_memory+0x74>)
				table[index(i, RX, EVEN)].addr = packet->buf;
    b754:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    b758:	3008      	adds	r0, #8
    b75a:	6050      	str	r0, [r2, #4]
				usb_rx_memory_needed--;
    b75c:	780a      	ldrb	r2, [r1, #0]
				table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    b75e:	480d      	ldr	r0, [pc, #52]	; (b794 <usb_rx_memory+0x78>)
    b760:	f844 0033 	str.w	r0, [r4, r3, lsl #3]
				usb_rx_memory_needed--;
    b764:	3a01      	subs	r2, #1
    b766:	700a      	strb	r2, [r1, #0]
				__enable_irq();
    b768:	b662      	cpsie	i
}
    b76a:	bc10      	pop	{r4}
    b76c:	4770      	bx	lr
				usb_rx_memory_needed--;
    b76e:	4a08      	ldr	r2, [pc, #32]	; (b790 <usb_rx_memory+0x74>)
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b770:	4909      	ldr	r1, [pc, #36]	; (b798 <usb_rx_memory+0x7c>)
				table[index(i, RX, ODD)].addr = packet->buf;
    b772:	eb04 03cc 	add.w	r3, r4, ip, lsl #3
    b776:	3008      	adds	r0, #8
    b778:	6058      	str	r0, [r3, #4]
				usb_rx_memory_needed--;
    b77a:	7813      	ldrb	r3, [r2, #0]
				table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    b77c:	f844 103c 	str.w	r1, [r4, ip, lsl #3]
				usb_rx_memory_needed--;
    b780:	3b01      	subs	r3, #1
    b782:	7013      	strb	r3, [r2, #0]
				__enable_irq();
    b784:	b662      	cpsie	i
				return;
    b786:	e7f0      	b.n	b76a <usb_rx_memory+0x4e>
    b788:	00015664 	.word	0x00015664
    b78c:	1fff8000 	.word	0x1fff8000
    b790:	1fffd5c4 	.word	0x1fffd5c4
    b794:	00400088 	.word	0x00400088
    b798:	004000c8 	.word	0x004000c8

0000b79c <usb_tx>:
void usb_tx(uint32_t endpoint, usb_packet_t *packet)
{
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
	uint8_t next;

	endpoint--;
    b79c:	1e42      	subs	r2, r0, #1
	if (endpoint >= NUM_ENDPOINTS) return;
    b79e:	2a03      	cmp	r2, #3
    b7a0:	d80e      	bhi.n	b7c0 <usb_tx+0x24>
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    b7a2:	4b1c      	ldr	r3, [pc, #112]	; (b814 <usb_tx+0x78>)
    b7a4:	0140      	lsls	r0, r0, #5
    b7a6:	f040 0010 	orr.w	r0, r0, #16
{
    b7aa:	b410      	push	{r4}
	bdt_t *b = &table[index(endpoint, TX, EVEN)];
    b7ac:	4403      	add	r3, r0
	__disable_irq();
    b7ae:	b672      	cpsid	i
	//serial_print("txstate=");
	//serial_phex(tx_state[endpoint]);
	//serial_print("\n");
	switch (tx_state[endpoint]) {
    b7b0:	4c19      	ldr	r4, [pc, #100]	; (b818 <usb_tx+0x7c>)
    b7b2:	5ca0      	ldrb	r0, [r4, r2]
    b7b4:	2803      	cmp	r0, #3
    b7b6:	d81c      	bhi.n	b7f2 <usb_tx+0x56>
    b7b8:	e8df f000 	tbb	[pc, r0]
    b7bc:	18031513 	.word	0x18031513
    b7c0:	4770      	bx	lr
    b7c2:	2005      	movs	r0, #5
		}
		tx_last[endpoint] = packet;
		__enable_irq();
		return;
	}
	tx_state[endpoint] = next;
    b7c4:	54a0      	strb	r0, [r4, r2]
	b->addr = packet->buf;
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b7c6:	f013 0f08 	tst.w	r3, #8
    b7ca:	8808      	ldrh	r0, [r1, #0]
    b7cc:	bf14      	ite	ne
    b7ce:	22c8      	movne	r2, #200	; 0xc8
    b7d0:	2288      	moveq	r2, #136	; 0x88
	b->addr = packet->buf;
    b7d2:	3108      	adds	r1, #8
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b7d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
	b->addr = packet->buf;
    b7d8:	6059      	str	r1, [r3, #4]
	b->desc = BDT_DESC(packet->len, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b7da:	601a      	str	r2, [r3, #0]
	__enable_irq();
    b7dc:	b662      	cpsie	i
}
    b7de:	bc10      	pop	{r4}
    b7e0:	4770      	bx	lr
		next = TX_STATE_ODD_FREE;
    b7e2:	2003      	movs	r0, #3
    b7e4:	e7ee      	b.n	b7c4 <usb_tx+0x28>
		b++;
    b7e6:	3308      	adds	r3, #8
		next = TX_STATE_EVEN_FREE;
    b7e8:	2002      	movs	r0, #2
		break;
    b7ea:	e7eb      	b.n	b7c4 <usb_tx+0x28>
		b++;
    b7ec:	3308      	adds	r3, #8
		next = TX_STATE_NONE_FREE_EVEN_FIRST;
    b7ee:	2004      	movs	r0, #4
		break;
    b7f0:	e7e8      	b.n	b7c4 <usb_tx+0x28>
		if (tx_first[endpoint] == NULL) {
    b7f2:	4b0a      	ldr	r3, [pc, #40]	; (b81c <usb_tx+0x80>)
    b7f4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b7f8:	b138      	cbz	r0, b80a <usb_tx+0x6e>
			tx_last[endpoint]->next = packet;
    b7fa:	4b09      	ldr	r3, [pc, #36]	; (b820 <usb_tx+0x84>)
    b7fc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    b800:	6041      	str	r1, [r0, #4]
		tx_last[endpoint] = packet;
    b802:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		__enable_irq();
    b806:	b662      	cpsie	i
		return;
    b808:	e7e9      	b.n	b7de <usb_tx+0x42>
			tx_first[endpoint] = packet;
    b80a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    b80e:	4b04      	ldr	r3, [pc, #16]	; (b820 <usb_tx+0x84>)
    b810:	e7f7      	b.n	b802 <usb_tx+0x66>
    b812:	bf00      	nop
    b814:	1fff8000 	.word	0x1fff8000
    b818:	1fffd5b4 	.word	0x1fffd5b4
    b81c:	1fffd594 	.word	0x1fffd594
    b820:	1fffd5a4 	.word	0x1fffd5a4

0000b824 <_reboot_Teensyduino_>:


void _reboot_Teensyduino_(void)
{
	// TODO: initialize R0 with a code....
	__asm__ volatile("bkpt");
    b824:	be00      	bkpt	0x0000
    b826:	bf00      	nop

0000b828 <usb_isr>:
}



void usb_isr(void)
{
    b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//serial_print("isr");
	//status = USB0_ISTAT;
	//serial_phex(status);
	//serial_print("\n");
	restart:
	status = USB0_ISTAT;
    b82c:	f8df a2cc 	ldr.w	sl, [pc, #716]	; bafc <usb_isr+0x2d4>
						//serial_phex(endpoint + 1);
						b->desc = 0;
						usb_rx_memory_needed++;
					}
				} else {
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b830:	f8df b2cc 	ldr.w	fp, [pc, #716]	; bb00 <usb_isr+0x2d8>
{
    b834:	b085      	sub	sp, #20
    b836:	e03d      	b.n	b8b4 <usb_isr+0x8c>
			bdt_t *b = stat2bufferdescriptor(stat);
    b838:	4db2      	ldr	r5, [pc, #712]	; (bb04 <usb_isr+0x2dc>)
    b83a:	089e      	lsrs	r6, r3, #2
    b83c:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
			endpoint--;	// endpoint is index to zero-based arrays
    b840:	3a01      	subs	r2, #1
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    b842:	6879      	ldr	r1, [r7, #4]
			if (stat & 0x08) { // transmit
    b844:	f013 0308 	ands.w	r3, r3, #8
			endpoint--;	// endpoint is index to zero-based arrays
    b848:	b2d4      	uxtb	r4, r2
			usb_packet_t *packet = (usb_packet_t *)((uint8_t *)(b->addr) - 8);
    b84a:	f1a1 0008 	sub.w	r0, r1, #8
			if (stat & 0x08) { // transmit
    b84e:	f040 80b8 	bne.w	b9c2 <usb_isr+0x19a>
				packet->len = b->desc >> 16;
    b852:	f855 2036 	ldr.w	r2, [r5, r6, lsl #3]
    b856:	ea4f 4c12 	mov.w	ip, r2, lsr #16
				if (packet->len > 0) {
    b85a:	0c12      	lsrs	r2, r2, #16
				packet->len = b->desc >> 16;
    b85c:	f821 cc08 	strh.w	ip, [r1, #-8]
				if (packet->len > 0) {
    b860:	f000 80a7 	beq.w	b9b2 <usb_isr+0x18a>
					packet->index = 0;
    b864:	f821 3c06 	strh.w	r3, [r1, #-6]
					packet->next = NULL;
    b868:	f841 3c04 	str.w	r3, [r1, #-4]
					if (rx_first[endpoint] == NULL) {
    b86c:	4ba6      	ldr	r3, [pc, #664]	; (bb08 <usb_isr+0x2e0>)
    b86e:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    b872:	2a00      	cmp	r2, #0
    b874:	f000 8201 	beq.w	bc7a <usb_isr+0x452>
						rx_last[endpoint]->next = packet;
    b878:	4ba4      	ldr	r3, [pc, #656]	; (bb0c <usb_isr+0x2e4>)
    b87a:	f853 2024 	ldr.w	r2, [r3, r4, lsl #2]
    b87e:	6050      	str	r0, [r2, #4]
					rx_last[endpoint] = packet;
    b880:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
					usb_rx_byte_count_data[endpoint] += packet->len;
    b884:	4ba2      	ldr	r3, [pc, #648]	; (bb10 <usb_isr+0x2e8>)
    b886:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
    b88a:	4494      	add	ip, r2
    b88c:	f823 c014 	strh.w	ip, [r3, r4, lsl #1]
					packet = usb_malloc();
    b890:	f000 fbdc 	bl	c04c <usb_malloc>
					if (packet) {
    b894:	2800      	cmp	r0, #0
    b896:	f000 81e9 	beq.w	bc6c <usb_isr+0x444>
						b->desc = BDT_DESC(64,
    b89a:	f017 0f08 	tst.w	r7, #8
    b89e:	4b9d      	ldr	r3, [pc, #628]	; (bb14 <usb_isr+0x2ec>)
						b->addr = packet->buf;
    b8a0:	f100 0008 	add.w	r0, r0, #8
						b->desc = BDT_DESC(64,
    b8a4:	bf18      	it	ne
    b8a6:	465b      	movne	r3, fp
						b->addr = packet->buf;
    b8a8:	6078      	str	r0, [r7, #4]
						b->desc = BDT_DESC(64,
    b8aa:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
				}
			}

		}
		USB0_ISTAT = USB_ISTAT_TOKDNE;
    b8ae:	2308      	movs	r3, #8
    b8b0:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	status = USB0_ISTAT;
    b8b4:	f89a 3080 	ldrb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    b8b8:	0759      	lsls	r1, r3, #29
	status = USB0_ISTAT;
    b8ba:	b2dc      	uxtb	r4, r3
	if ((status & USB_ISTAT_SOFTOK /* 04 */ )) {
    b8bc:	d51b      	bpl.n	b8f6 <usb_isr+0xce>
		if (usb_configuration) {
    b8be:	4b96      	ldr	r3, [pc, #600]	; (bb18 <usb_isr+0x2f0>)
    b8c0:	781b      	ldrb	r3, [r3, #0]
    b8c2:	b1ab      	cbz	r3, b8f0 <usb_isr+0xc8>
			t = usb_reboot_timer;
    b8c4:	4995      	ldr	r1, [pc, #596]	; (bb1c <usb_isr+0x2f4>)
    b8c6:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    b8c8:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b8cc:	b12a      	cbz	r2, b8da <usb_isr+0xb2>
				usb_reboot_timer = --t;
    b8ce:	3b01      	subs	r3, #1
    b8d0:	b2db      	uxtb	r3, r3
    b8d2:	700b      	strb	r3, [r1, #0]
				if (!t) _reboot_Teensyduino_();
    b8d4:	2b00      	cmp	r3, #0
    b8d6:	f000 8346 	beq.w	bf66 <usb_isr+0x73e>
			t = usb_cdc_transmit_flush_timer;
    b8da:	4991      	ldr	r1, [pc, #580]	; (bb20 <usb_isr+0x2f8>)
    b8dc:	780a      	ldrb	r2, [r1, #0]
			if (t) {
    b8de:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    b8e2:	b12a      	cbz	r2, b8f0 <usb_isr+0xc8>
				usb_cdc_transmit_flush_timer = --t;
    b8e4:	3b01      	subs	r3, #1
    b8e6:	b2db      	uxtb	r3, r3
    b8e8:	700b      	strb	r3, [r1, #0]
				if (t == 0) usb_serial_flush_callback();
    b8ea:	2b00      	cmp	r3, #0
    b8ec:	f000 81eb 	beq.w	bcc6 <usb_isr+0x49e>
		USB0_ISTAT = USB_ISTAT_SOFTOK;
    b8f0:	2304      	movs	r3, #4
    b8f2:	f88a 3080 	strb.w	r3, [sl, #128]	; 0x80
	if ((status & USB_ISTAT_TOKDNE /* 08 */ )) {
    b8f6:	f014 0208 	ands.w	r2, r4, #8
    b8fa:	f000 81cc 	beq.w	bc96 <usb_isr+0x46e>
		stat = USB0_STAT;
    b8fe:	f89a 2090 	ldrb.w	r2, [sl, #144]	; 0x90
    b902:	b2d3      	uxtb	r3, r2
		if (endpoint == 0) {
    b904:	0912      	lsrs	r2, r2, #4
    b906:	d197      	bne.n	b838 <usb_isr+0x10>
	b = stat2bufferdescriptor(stat);
    b908:	f8df 91f8 	ldr.w	r9, [pc, #504]	; bb04 <usb_isr+0x2dc>
    b90c:	089b      	lsrs	r3, r3, #2
    b90e:	eb09 04c3 	add.w	r4, r9, r3, lsl #3
	pid = BDT_PID(b->desc);
    b912:	f859 0033 	ldr.w	r0, [r9, r3, lsl #3]
	buf = b->addr;
    b916:	6864      	ldr	r4, [r4, #4]
	pid = BDT_PID(b->desc);
    b918:	f3c0 0083 	ubfx	r0, r0, #2, #4
	switch (pid) {
    b91c:	2809      	cmp	r0, #9
    b91e:	d07c      	beq.n	ba1a <usb_isr+0x1f2>
    b920:	d80f      	bhi.n	b942 <usb_isr+0x11a>
    b922:	3801      	subs	r0, #1
    b924:	2801      	cmp	r0, #1
    b926:	d808      	bhi.n	b93a <usb_isr+0x112>
		if (setup.wRequestAndType == 0x2021 /*CDC_SET_LINE_CODING*/) {
    b928:	4a7e      	ldr	r2, [pc, #504]	; (bb24 <usb_isr+0x2fc>)
    b92a:	8815      	ldrh	r5, [r2, #0]
    b92c:	f242 0021 	movw	r0, #8225	; 0x2021
    b930:	4285      	cmp	r5, r0
    b932:	f000 81fb 	beq.w	bd2c <usb_isr+0x504>
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    b936:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
	USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    b93a:	2301      	movs	r3, #1
    b93c:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
}
    b940:	e7b5      	b.n	b8ae <usb_isr+0x86>
	switch (pid) {
    b942:	280d      	cmp	r0, #13
    b944:	d1f9      	bne.n	b93a <usb_isr+0x112>
		setup.word2 = *(uint32_t *)(buf + 4);
    b946:	e9d4 0700 	ldrd	r0, r7, [r4]
		ep0_tx_ptr = NULL;
    b94a:	4d77      	ldr	r5, [pc, #476]	; (bb28 <usb_isr+0x300>)
		b->desc = BDT_DESC(EP0_SIZE, DATA1);
    b94c:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
		setup.word1 = *(uint32_t *)(buf);
    b950:	4e74      	ldr	r6, [pc, #464]	; (bb24 <usb_isr+0x2fc>)
		ep0_tx_data_toggle = 1;
    b952:	4c76      	ldr	r4, [pc, #472]	; (bb2c <usb_isr+0x304>)
		table[index(0, TX, EVEN)].desc = 0;
    b954:	f8c9 2010 	str.w	r2, [r9, #16]
    b958:	b283      	uxth	r3, r0
	switch (setup.wRequestAndType) {
    b95a:	f240 6c81 	movw	ip, #1665	; 0x681
		table[index(0, TX, ODD)].desc = 0;
    b95e:	f8c9 2018 	str.w	r2, [r9, #24]
		ep0_tx_ptr = NULL;
    b962:	602a      	str	r2, [r5, #0]
	switch (setup.wRequestAndType) {
    b964:	4563      	cmp	r3, ip
		ep0_tx_data_toggle = 1;
    b966:	f04f 0201 	mov.w	r2, #1
		setup.word2 = *(uint32_t *)(buf + 4);
    b96a:	e9c6 0700 	strd	r0, r7, [r6]
		ep0_tx_data_toggle = 1;
    b96e:	7022      	strb	r2, [r4, #0]
	switch (setup.wRequestAndType) {
    b970:	f200 80ff 	bhi.w	bb72 <usb_isr+0x34a>
    b974:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
    b978:	f080 82cb 	bcs.w	bf12 <usb_isr+0x6ea>
    b97c:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    b980:	f000 8226 	beq.w	bdd0 <usb_isr+0x5a8>
    b984:	f240 80de 	bls.w	bb44 <usb_isr+0x31c>
    b988:	f240 3202 	movw	r2, #770	; 0x302
    b98c:	4293      	cmp	r3, r2
    b98e:	d17b      	bne.n	ba88 <usb_isr+0x260>
		i = setup.wIndex & 0x7F;
    b990:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    b994:	2f04      	cmp	r7, #4
    b996:	f200 8108 	bhi.w	bbaa <usb_isr+0x382>
    b99a:	0c02      	lsrs	r2, r0, #16
    b99c:	f040 8105 	bne.w	bbaa <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) |= 0x02;
    b9a0:	4963      	ldr	r1, [pc, #396]	; (bb30 <usb_isr+0x308>)
    b9a2:	f811 3027 	ldrb.w	r3, [r1, r7, lsl #2]
    b9a6:	f043 0302 	orr.w	r3, r3, #2
    b9aa:	f801 3027 	strb.w	r3, [r1, r7, lsl #2]
	const uint8_t *data = NULL;
    b9ae:	4613      	mov	r3, r2
		break;
    b9b0:	e070      	b.n	ba94 <usb_isr+0x26c>
					b->desc = BDT_DESC(64, ((uint32_t)b & 8) ? DATA1 : DATA0);
    b9b2:	f017 0f08 	tst.w	r7, #8
    b9b6:	4b57      	ldr	r3, [pc, #348]	; (bb14 <usb_isr+0x2ec>)
    b9b8:	bf18      	it	ne
    b9ba:	465b      	movne	r3, fp
    b9bc:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    b9c0:	e775      	b.n	b8ae <usb_isr+0x86>
				usb_free(packet);
    b9c2:	f000 fb63 	bl	c08c <usb_free>
				packet = tx_first[endpoint];
    b9c6:	495b      	ldr	r1, [pc, #364]	; (bb34 <usb_isr+0x30c>)
					switch (tx_state[endpoint]) {
    b9c8:	4a5b      	ldr	r2, [pc, #364]	; (bb38 <usb_isr+0x310>)
				packet = tx_first[endpoint];
    b9ca:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
				if (packet) {
    b9ce:	2b00      	cmp	r3, #0
    b9d0:	f000 8157 	beq.w	bc82 <usb_isr+0x45a>
					tx_first[endpoint] = packet->next;
    b9d4:	6858      	ldr	r0, [r3, #4]
    b9d6:	f841 0024 	str.w	r0, [r1, r4, lsl #2]
					switch (tx_state[endpoint]) {
    b9da:	5d11      	ldrb	r1, [r2, r4]
					b->addr = packet->buf;
    b9dc:	f103 0008 	add.w	r0, r3, #8
    b9e0:	6078      	str	r0, [r7, #4]
					switch (tx_state[endpoint]) {
    b9e2:	2903      	cmp	r1, #3
    b9e4:	d805      	bhi.n	b9f2 <usb_isr+0x1ca>
    b9e6:	e8df f001 	tbb	[pc, r1]
    b9ea:	0f12      	.short	0x0f12
    b9ec:	0215      	.short	0x0215
						tx_state[endpoint] = TX_STATE_NONE_FREE_EVEN_FIRST;
    b9ee:	2104      	movs	r1, #4
    b9f0:	5511      	strb	r1, [r2, r4]
					b->desc = BDT_DESC(packet->len,
    b9f2:	881a      	ldrh	r2, [r3, #0]
    b9f4:	f017 0f08 	tst.w	r7, #8
    b9f8:	bf14      	ite	ne
    b9fa:	23c8      	movne	r3, #200	; 0xc8
    b9fc:	2388      	moveq	r3, #136	; 0x88
    b9fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    ba02:	f845 3036 	str.w	r3, [r5, r6, lsl #3]
    ba06:	e752      	b.n	b8ae <usb_isr+0x86>
						tx_state[endpoint] = TX_STATE_EVEN_FREE;
    ba08:	2102      	movs	r1, #2
    ba0a:	5511      	strb	r1, [r2, r4]
						break;
    ba0c:	e7f1      	b.n	b9f2 <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_ODD_FREE;
    ba0e:	2103      	movs	r1, #3
    ba10:	5511      	strb	r1, [r2, r4]
						break;
    ba12:	e7ee      	b.n	b9f2 <usb_isr+0x1ca>
						tx_state[endpoint] = TX_STATE_NONE_FREE_ODD_FIRST;
    ba14:	2105      	movs	r1, #5
    ba16:	5511      	strb	r1, [r2, r4]
						break;
    ba18:	e7eb      	b.n	b9f2 <usb_isr+0x1ca>
		data = ep0_tx_ptr;
    ba1a:	4d43      	ldr	r5, [pc, #268]	; (bb28 <usb_isr+0x300>)
    ba1c:	682a      	ldr	r2, [r5, #0]
		if (data) {
    ba1e:	b33a      	cbz	r2, ba70 <usb_isr+0x248>
			size = ep0_tx_len;
    ba20:	4946      	ldr	r1, [pc, #280]	; (bb3c <usb_isr+0x314>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba22:	4c42      	ldr	r4, [pc, #264]	; (bb2c <usb_isr+0x304>)
			size = ep0_tx_len;
    ba24:	880f      	ldrh	r7, [r1, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ba26:	4846      	ldr	r0, [pc, #280]	; (bb40 <usb_isr+0x318>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba28:	f894 e000 	ldrb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ba2c:	7806      	ldrb	r6, [r0, #0]
    ba2e:	2f40      	cmp	r7, #64	; 0x40
    ba30:	463b      	mov	r3, r7
    ba32:	bf28      	it	cs
    ba34:	2340      	movcs	r3, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba36:	f1be 0f00 	cmp.w	lr, #0
	ep0_tx_data_toggle ^= 1;
    ba3a:	f08e 0e01 	eor.w	lr, lr, #1
    ba3e:	f884 e000 	strb.w	lr, [r4]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ba42:	f046 0402 	orr.w	r4, r6, #2
	ep0_tx_bdt_bank ^= 1;
    ba46:	f086 0601 	eor.w	r6, r6, #1
    ba4a:	7006      	strb	r6, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ba4c:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
    ba50:	6042      	str	r2, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba52:	bf14      	ite	ne
    ba54:	20c8      	movne	r0, #200	; 0xc8
    ba56:	2088      	moveq	r0, #136	; 0x88
    ba58:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
			data += size;
    ba5c:	441a      	add	r2, r3
			ep0_tx_len -= size;
    ba5e:	1afb      	subs	r3, r7, r3
    ba60:	b29b      	uxth	r3, r3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    ba62:	f849 0034 	str.w	r0, [r9, r4, lsl #3]
			ep0_tx_len -= size;
    ba66:	800b      	strh	r3, [r1, #0]
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    ba68:	2b00      	cmp	r3, #0
    ba6a:	f000 8136 	beq.w	bcda <usb_isr+0x4b2>
    ba6e:	602a      	str	r2, [r5, #0]
		if (setup.bRequest == 5 && setup.bmRequestType == 0) {
    ba70:	4b2c      	ldr	r3, [pc, #176]	; (bb24 <usb_isr+0x2fc>)
    ba72:	881a      	ldrh	r2, [r3, #0]
    ba74:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    ba78:	f47f af5f 	bne.w	b93a <usb_isr+0x112>
			USB0_ADDR = setup.wValue;
    ba7c:	789a      	ldrb	r2, [r3, #2]
    ba7e:	f88a 2098 	strb.w	r2, [sl, #152]	; 0x98
			setup.bRequest = 0;
    ba82:	2200      	movs	r2, #0
    ba84:	705a      	strb	r2, [r3, #1]
			USB0_ADDR = setup.wValue;
    ba86:	e758      	b.n	b93a <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    ba88:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    ba8c:	f040 808d 	bne.w	bbaa <usb_isr+0x382>
	uint32_t datalen = 0;
    ba90:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    ba92:	4613      	mov	r3, r2
	if (datalen > setup.wLength) datalen = setup.wLength;
    ba94:	f8b6 c006 	ldrh.w	ip, [r6, #6]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    ba98:	4829      	ldr	r0, [pc, #164]	; (bb40 <usb_isr+0x318>)
    ba9a:	4594      	cmp	ip, r2
    ba9c:	bf28      	it	cs
    ba9e:	4694      	movcs	ip, r2
	if (size > EP0_SIZE) size = EP0_SIZE;
    baa0:	4667      	mov	r7, ip
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    baa2:	7802      	ldrb	r2, [r0, #0]
    baa4:	2f40      	cmp	r7, #64	; 0x40
    baa6:	bf28      	it	cs
    baa8:	2740      	movcs	r7, #64	; 0x40
    baaa:	f042 0e02 	orr.w	lr, r2, #2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    baae:	043e      	lsls	r6, r7, #16
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bab0:	eb09 08ce 	add.w	r8, r9, lr, lsl #3
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bab4:	f046 06c8 	orr.w	r6, r6, #200	; 0xc8
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bab8:	f8c8 3004 	str.w	r3, [r8, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    babc:	f849 603e 	str.w	r6, [r9, lr, lsl #3]
	ep0_tx_data_toggle ^= 1;
    bac0:	2600      	movs	r6, #0
	data += size;
    bac2:	443b      	add	r3, r7
	ep0_tx_data_toggle ^= 1;
    bac4:	7026      	strb	r6, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    bac6:	ebbc 0707 	subs.w	r7, ip, r7
	ep0_tx_bdt_bank ^= 1;
    baca:	f082 0601 	eor.w	r6, r2, #1
    bace:	7006      	strb	r6, [r0, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    bad0:	f040 8111 	bne.w	bcf6 <usb_isr+0x4ce>
    bad4:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
    bad8:	f04f 0501 	mov.w	r5, #1
    badc:	d909      	bls.n	baf2 <usb_isr+0x2ca>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bade:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    bae2:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bae4:	eb09 02c6 	add.w	r2, r9, r6, lsl #3
	ep0_tx_data_toggle ^= 1;
    bae8:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    baea:	6053      	str	r3, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    baec:	2388      	movs	r3, #136	; 0x88
    baee:	f849 3036 	str.w	r3, [r9, r6, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    baf2:	2301      	movs	r3, #1
    baf4:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    baf8:	e71f      	b.n	b93a <usb_isr+0x112>
    bafa:	bf00      	nop
    bafc:	40072000 	.word	0x40072000
    bb00:	004000c8 	.word	0x004000c8
    bb04:	1fff8000 	.word	0x1fff8000
    bb08:	1fffd56c 	.word	0x1fffd56c
    bb0c:	1fffd57c 	.word	0x1fffd57c
    bb10:	1fffd5bc 	.word	0x1fffd5bc
    bb14:	00400088 	.word	0x00400088
    bb18:	1fffd5b8 	.word	0x1fffd5b8
    bb1c:	1fffd5b9 	.word	0x1fffd5b9
    bb20:	1fffd5e4 	.word	0x1fffd5e4
    bb24:	1fffd58c 	.word	0x1fffd58c
    bb28:	1fffd560 	.word	0x1fffd560
    bb2c:	1fffd55d 	.word	0x1fffd55d
    bb30:	400720c0 	.word	0x400720c0
    bb34:	1fffd594 	.word	0x1fffd594
    bb38:	1fffd5b4 	.word	0x1fffd5b4
    bb3c:	1fffd55e 	.word	0x1fffd55e
    bb40:	1fffd55c 	.word	0x1fffd55c
	switch (setup.wRequestAndType) {
    bb44:	2b80      	cmp	r3, #128	; 0x80
    bb46:	f000 818b 	beq.w	be60 <usb_isr+0x638>
    bb4a:	2b82      	cmp	r3, #130	; 0x82
    bb4c:	d12d      	bne.n	bbaa <usb_isr+0x382>
		i = setup.wIndex & 0x7F;
    bb4e:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS) {
    bb52:	2f04      	cmp	r7, #4
    bb54:	d829      	bhi.n	bbaa <usb_isr+0x382>
		reply_buffer[0] = 0;
    bb56:	4aa7      	ldr	r2, [pc, #668]	; (bdf4 <usb_isr+0x5cc>)
    bb58:	2300      	movs	r3, #0
    bb5a:	8013      	strh	r3, [r2, #0]
		if (*(uint8_t *)(&USB0_ENDPT0 + i * 4) & 0x02) reply_buffer[0] = 1;
    bb5c:	4ba6      	ldr	r3, [pc, #664]	; (bdf8 <usb_isr+0x5d0>)
    bb5e:	f813 3027 	ldrb.w	r3, [r3, r7, lsl #2]
    bb62:	079f      	lsls	r7, r3, #30
    bb64:	f140 81fc 	bpl.w	bf60 <usb_isr+0x738>
    bb68:	2301      	movs	r3, #1
    bb6a:	7013      	strb	r3, [r2, #0]
		data = reply_buffer;
    bb6c:	4ba1      	ldr	r3, [pc, #644]	; (bdf4 <usb_isr+0x5cc>)
		datalen = 2;
    bb6e:	2202      	movs	r2, #2
    bb70:	e790      	b.n	ba94 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    bb72:	f242 0c21 	movw	ip, #8225	; 0x2021
    bb76:	4563      	cmp	r3, ip
    bb78:	d0bb      	beq.n	baf2 <usb_isr+0x2ca>
    bb7a:	d91d      	bls.n	bbb8 <usb_isr+0x390>
    bb7c:	f242 2221 	movw	r2, #8737	; 0x2221
    bb80:	4293      	cmp	r3, r2
    bb82:	d10d      	bne.n	bba0 <usb_isr+0x378>
		switch (setup.wIndex) {
    bb84:	b2bf      	uxth	r7, r7
    bb86:	2f00      	cmp	r7, #0
    bb88:	d182      	bne.n	ba90 <usb_isr+0x268>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    bb8a:	4b9c      	ldr	r3, [pc, #624]	; (bdfc <usb_isr+0x5d4>)
    bb8c:	681a      	ldr	r2, [r3, #0]
    bb8e:	4b9c      	ldr	r3, [pc, #624]	; (be00 <usb_isr+0x5d8>)
    bb90:	601a      	str	r2, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    bb92:	4b9c      	ldr	r3, [pc, #624]	; (be04 <usb_isr+0x5dc>)
    bb94:	f3c0 4007 	ubfx	r0, r0, #16, #8
	uint32_t datalen = 0;
    bb98:	2200      	movs	r2, #0
			usb_cdc_line_rtsdtr = setup.wValue;
    bb9a:	7018      	strb	r0, [r3, #0]
	const uint8_t *data = NULL;
    bb9c:	4613      	mov	r3, r2
			break;
    bb9e:	e779      	b.n	ba94 <usb_isr+0x26c>
	switch (setup.wRequestAndType) {
    bba0:	f242 3221 	movw	r2, #8993	; 0x2321
    bba4:	4293      	cmp	r3, r2
    bba6:	f43f af73 	beq.w	ba90 <usb_isr+0x268>
	USB0_ENDPT0 = USB_ENDPT_EPSTALL | USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bbaa:	230f      	movs	r3, #15
    bbac:	f88a 30c0 	strb.w	r3, [sl, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    bbb0:	2301      	movs	r3, #1
    bbb2:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    bbb6:	e6c0      	b.n	b93a <usb_isr+0x112>
	switch (setup.wRequestAndType) {
    bbb8:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    bbbc:	f000 814a 	beq.w	be54 <usb_isr+0x62c>
    bbc0:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    bbc4:	d1f1      	bne.n	bbaa <usb_isr+0x382>
		usb_configuration = setup.wValue;
    bbc6:	4b90      	ldr	r3, [pc, #576]	; (be08 <usb_isr+0x5e0>)
    bbc8:	f3c0 4007 	ubfx	r0, r0, #16, #8
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    bbcc:	2504      	movs	r5, #4
		usb_configuration = setup.wValue;
    bbce:	7018      	strb	r0, [r3, #0]
			if (table[i].desc & BDT_OWN) {
    bbd0:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    bbd4:	061a      	lsls	r2, r3, #24
    bbd6:	d406      	bmi.n	bbe6 <usb_isr+0x3be>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    bbd8:	3501      	adds	r5, #1
    bbda:	2d14      	cmp	r5, #20
    bbdc:	d00c      	beq.n	bbf8 <usb_isr+0x3d0>
			if (table[i].desc & BDT_OWN) {
    bbde:	f859 3035 	ldr.w	r3, [r9, r5, lsl #3]
    bbe2:	061a      	lsls	r2, r3, #24
    bbe4:	d5f8      	bpl.n	bbd8 <usb_isr+0x3b0>
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    bbe6:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    bbea:	3501      	adds	r5, #1
				usb_free((usb_packet_t *)((uint8_t *)(table[i].addr) - 8));
    bbec:	6858      	ldr	r0, [r3, #4]
    bbee:	3808      	subs	r0, #8
    bbf0:	f000 fa4c 	bl	c08c <usb_free>
		for (i=4; i < (NUM_ENDPOINTS+1)*4; i++) {
    bbf4:	2d14      	cmp	r5, #20
    bbf6:	d1f2      	bne.n	bbde <usb_isr+0x3b6>
    bbf8:	4a84      	ldr	r2, [pc, #528]	; (be0c <usb_isr+0x5e4>)
    bbfa:	4b85      	ldr	r3, [pc, #532]	; (be10 <usb_isr+0x5e8>)
    bbfc:	9202      	str	r2, [sp, #8]
    bbfe:	4a85      	ldr	r2, [pc, #532]	; (be14 <usb_isr+0x5ec>)
    bc00:	9201      	str	r2, [sp, #4]
    bc02:	4e85      	ldr	r6, [pc, #532]	; (be18 <usb_isr+0x5f0>)
    bc04:	4a85      	ldr	r2, [pc, #532]	; (be1c <usb_isr+0x5f4>)
    bc06:	f8df 8218 	ldr.w	r8, [pc, #536]	; be20 <usb_isr+0x5f8>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bc0a:	9403      	str	r4, [sp, #12]
    bc0c:	9200      	str	r2, [sp, #0]
			rx_first[i] = NULL;
    bc0e:	2500      	movs	r5, #0
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bc10:	461c      	mov	r4, r3
			p = rx_first[i];
    bc12:	f856 7b04 	ldr.w	r7, [r6], #4
			while (p) {
    bc16:	b12f      	cbz	r7, bc24 <usb_isr+0x3fc>
				n = p->next;
    bc18:	4638      	mov	r0, r7
    bc1a:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    bc1c:	f000 fa36 	bl	c08c <usb_free>
			while (p) {
    bc20:	2f00      	cmp	r7, #0
    bc22:	d1f9      	bne.n	bc18 <usb_isr+0x3f0>
			rx_last[i] = NULL;
    bc24:	9b00      	ldr	r3, [sp, #0]
			p = tx_first[i];
    bc26:	f8d8 7000 	ldr.w	r7, [r8]
			rx_last[i] = NULL;
    bc2a:	f843 5b04 	str.w	r5, [r3], #4
			rx_first[i] = NULL;
    bc2e:	f846 5c04 	str.w	r5, [r6, #-4]
			rx_last[i] = NULL;
    bc32:	9300      	str	r3, [sp, #0]
			while (p) {
    bc34:	b12f      	cbz	r7, bc42 <usb_isr+0x41a>
				n = p->next;
    bc36:	4638      	mov	r0, r7
    bc38:	687f      	ldr	r7, [r7, #4]
				usb_free(p);
    bc3a:	f000 fa27 	bl	c08c <usb_free>
			while (p) {
    bc3e:	2f00      	cmp	r7, #0
    bc40:	d1f9      	bne.n	bc36 <usb_isr+0x40e>
			tx_last[i] = NULL;
    bc42:	9b02      	ldr	r3, [sp, #8]
			tx_first[i] = NULL;
    bc44:	f848 5b04 	str.w	r5, [r8], #4
			tx_last[i] = NULL;
    bc48:	f843 5b04 	str.w	r5, [r3], #4
    bc4c:	9302      	str	r3, [sp, #8]
			usb_rx_byte_count_data[i] = 0;
    bc4e:	9b01      	ldr	r3, [sp, #4]
    bc50:	f823 5b02 	strh.w	r5, [r3], #2
    bc54:	9301      	str	r3, [sp, #4]
			switch (tx_state[i]) {
    bc56:	7823      	ldrb	r3, [r4, #0]
    bc58:	3b02      	subs	r3, #2
    bc5a:	2b03      	cmp	r3, #3
    bc5c:	f200 8109 	bhi.w	be72 <usb_isr+0x64a>
    bc60:	e8df f013 	tbh	[pc, r3, lsl #1]
    bc64:	0104013f 	.word	0x0104013f
    bc68:	0104013f 	.word	0x0104013f
						usb_rx_memory_needed++;
    bc6c:	4a6d      	ldr	r2, [pc, #436]	; (be24 <usb_isr+0x5fc>)
						b->desc = 0;
    bc6e:	f845 0036 	str.w	r0, [r5, r6, lsl #3]
						usb_rx_memory_needed++;
    bc72:	7813      	ldrb	r3, [r2, #0]
    bc74:	3301      	adds	r3, #1
    bc76:	7013      	strb	r3, [r2, #0]
    bc78:	e619      	b.n	b8ae <usb_isr+0x86>
						rx_first[endpoint] = packet;
    bc7a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
    bc7e:	4b67      	ldr	r3, [pc, #412]	; (be1c <usb_isr+0x5f4>)
    bc80:	e5fe      	b.n	b880 <usb_isr+0x58>
					switch (tx_state[endpoint]) {
    bc82:	5d11      	ldrb	r1, [r2, r4]
    bc84:	2902      	cmp	r1, #2
    bc86:	d026      	beq.n	bcd6 <usb_isr+0x4ae>
    bc88:	f67f ae11 	bls.w	b8ae <usb_isr+0x86>
    bc8c:	2903      	cmp	r1, #3
    bc8e:	d11d      	bne.n	bccc <usb_isr+0x4a4>
						tx_state[endpoint] = TX_STATE_BOTH_FREE_ODD_FIRST;
    bc90:	2301      	movs	r3, #1
    bc92:	5513      	strb	r3, [r2, r4]
						break;
    bc94:	e60b      	b.n	b8ae <usb_isr+0x86>
		goto restart;
	}



	if (status & USB_ISTAT_USBRST /* 01 */ ) {
    bc96:	07e0      	lsls	r0, r4, #31
    bc98:	d46e      	bmi.n	bd78 <usb_isr+0x550>
		USB0_CTL = USB_CTL_USBENSOFEN;
		return;
	}


	if ((status & USB_ISTAT_STALL /* 80 */ )) {
    bc9a:	0621      	lsls	r1, r4, #24
    bc9c:	d421      	bmi.n	bce2 <usb_isr+0x4ba>
		//serial_print("stall:\n");
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
		USB0_ISTAT = USB_ISTAT_STALL;
	}
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    bc9e:	07a2      	lsls	r2, r4, #30
    bca0:	d508      	bpl.n	bcb4 <usb_isr+0x48c>
		uint8_t err = USB0_ERRSTAT;
    bca2:	4b61      	ldr	r3, [pc, #388]	; (be28 <usb_isr+0x600>)
    bca4:	f893 2088 	ldrb.w	r2, [r3, #136]	; 0x88
		USB0_ERRSTAT = err;
		//serial_print("err:");
		//serial_phex(err);
		//serial_print("\n");
		USB0_ISTAT = USB_ISTAT_ERROR;
    bca8:	2102      	movs	r1, #2
		uint8_t err = USB0_ERRSTAT;
    bcaa:	b2d2      	uxtb	r2, r2
		USB0_ERRSTAT = err;
    bcac:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
		USB0_ISTAT = USB_ISTAT_ERROR;
    bcb0:	f883 1080 	strb.w	r1, [r3, #128]	; 0x80
	}

	if ((status & USB_ISTAT_SLEEP /* 10 */ )) {
    bcb4:	06e3      	lsls	r3, r4, #27
    bcb6:	d503      	bpl.n	bcc0 <usb_isr+0x498>
		//serial_print("sleep\n");
		USB0_ISTAT = USB_ISTAT_SLEEP;
    bcb8:	4b5b      	ldr	r3, [pc, #364]	; (be28 <usb_isr+0x600>)
    bcba:	2210      	movs	r2, #16
    bcbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

}
    bcc0:	b005      	add	sp, #20
    bcc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (t == 0) usb_serial_flush_callback();
    bcc6:	f000 fb59 	bl	c37c <usb_serial_flush_callback>
    bcca:	e611      	b.n	b8f0 <usb_isr+0xc8>
						tx_state[endpoint] = ((uint32_t)b & 8) ?
    bccc:	f017 0f08 	tst.w	r7, #8
    bcd0:	bf14      	ite	ne
    bcd2:	2303      	movne	r3, #3
    bcd4:	2302      	moveq	r3, #2
    bcd6:	5513      	strb	r3, [r2, r4]
						break;
    bcd8:	e5e9      	b.n	b8ae <usb_isr+0x86>
			ep0_tx_ptr = (ep0_tx_len > 0 || size == EP0_SIZE) ? data : NULL;
    bcda:	2f3f      	cmp	r7, #63	; 0x3f
    bcdc:	bf98      	it	ls
    bcde:	2200      	movls	r2, #0
    bce0:	e6c5      	b.n	ba6e <usb_isr+0x246>
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bce2:	4b51      	ldr	r3, [pc, #324]	; (be28 <usb_isr+0x600>)
		USB0_ISTAT = USB_ISTAT_STALL;
    bce4:	2280      	movs	r2, #128	; 0x80
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bce6:	210d      	movs	r1, #13
    bce8:	f883 10c0 	strb.w	r1, [r3, #192]	; 0xc0
		USB0_ISTAT = USB_ISTAT_STALL;
    bcec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	if ((status & USB_ISTAT_ERROR /* 02 */ )) {
    bcf0:	07a2      	lsls	r2, r4, #30
    bcf2:	d5df      	bpl.n	bcb4 <usb_isr+0x48c>
    bcf4:	e7d5      	b.n	bca2 <usb_isr+0x47a>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bcf6:	f046 0602 	orr.w	r6, r6, #2
	ep0_tx_bdt_bank ^= 1;
    bcfa:	7002      	strb	r2, [r0, #0]
    bcfc:	2f40      	cmp	r7, #64	; 0x40
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bcfe:	eb09 00c6 	add.w	r0, r9, r6, lsl #3
    bd02:	463a      	mov	r2, r7
    bd04:	bf28      	it	cs
    bd06:	2240      	movcs	r2, #64	; 0x40
    bd08:	6043      	str	r3, [r0, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd0a:	0410      	lsls	r0, r2, #16
	data += size;
    bd0c:	4413      	add	r3, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd0e:	f040 0088 	orr.w	r0, r0, #136	; 0x88
	ep0_tx_data_toggle ^= 1;
    bd12:	2101      	movs	r1, #1
	if (datalen == 0 && size < EP0_SIZE) return;
    bd14:	1aba      	subs	r2, r7, r2
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd16:	f849 0036 	str.w	r0, [r9, r6, lsl #3]
	ep0_tx_data_toggle ^= 1;
    bd1a:	7021      	strb	r1, [r4, #0]
	if (datalen == 0 && size < EP0_SIZE) return;
    bd1c:	d055      	beq.n	bdca <usb_isr+0x5a2>
	ep0_tx_ptr = data;
    bd1e:	602b      	str	r3, [r5, #0]
	ep0_tx_len = datalen;
    bd20:	4b42      	ldr	r3, [pc, #264]	; (be2c <usb_isr+0x604>)
    bd22:	801a      	strh	r2, [r3, #0]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    bd24:	2301      	movs	r3, #1
    bd26:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    bd2a:	e606      	b.n	b93a <usb_isr+0x112>
			switch (setup.wIndex) {
    bd2c:	8892      	ldrh	r2, [r2, #4]
    bd2e:	b95a      	cbnz	r2, bd48 <usb_isr+0x520>
    bd30:	4a3f      	ldr	r2, [pc, #252]	; (be30 <usb_isr+0x608>)
    bd32:	1de5      	adds	r5, r4, #7
					*dst++ = *buf++;
    bd34:	f814 1b01 	ldrb.w	r1, [r4], #1
    bd38:	f802 1f01 	strb.w	r1, [r2, #1]!
				for (i=0; i<7; i++) {
    bd3c:	42ac      	cmp	r4, r5
    bd3e:	d1f9      	bne.n	bd34 <usb_isr+0x50c>
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    bd40:	4a3c      	ldr	r2, [pc, #240]	; (be34 <usb_isr+0x60c>)
    bd42:	6812      	ldr	r2, [r2, #0]
    bd44:	2a86      	cmp	r2, #134	; 0x86
    bd46:	d03c      	beq.n	bdc2 <usb_isr+0x59a>
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd48:	4c3b      	ldr	r4, [pc, #236]	; (be38 <usb_isr+0x610>)
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bd4a:	483c      	ldr	r0, [pc, #240]	; (be3c <usb_isr+0x614>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd4c:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bd4e:	7802      	ldrb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd50:	2d00      	cmp	r5, #0
	ep0_tx_data_toggle ^= 1;
    bd52:	f085 0501 	eor.w	r5, r5, #1
    bd56:	7025      	strb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bd58:	f042 0402 	orr.w	r4, r2, #2
	ep0_tx_bdt_bank ^= 1;
    bd5c:	f082 0201 	eor.w	r2, r2, #1
    bd60:	7002      	strb	r2, [r0, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bd62:	eb09 02c4 	add.w	r2, r9, r4, lsl #3
    bd66:	f04f 0000 	mov.w	r0, #0
    bd6a:	6050      	str	r0, [r2, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bd6c:	bf14      	ite	ne
    bd6e:	22c8      	movne	r2, #200	; 0xc8
    bd70:	2288      	moveq	r2, #136	; 0x88
    bd72:	f849 2034 	str.w	r2, [r9, r4, lsl #3]
}
    bd76:	e5de      	b.n	b936 <usb_isr+0x10e>
		USB0_CTL = USB_CTL_ODDRST;
    bd78:	4b2b      	ldr	r3, [pc, #172]	; (be28 <usb_isr+0x600>)
		ep0_tx_bdt_bank = 0;
    bd7a:	4830      	ldr	r0, [pc, #192]	; (be3c <usb_isr+0x614>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    bd7c:	4930      	ldr	r1, [pc, #192]	; (be40 <usb_isr+0x618>)
    bd7e:	4c31      	ldr	r4, [pc, #196]	; (be44 <usb_isr+0x61c>)
		USB0_CTL = USB_CTL_ODDRST;
    bd80:	2502      	movs	r5, #2
    bd82:	f883 5094 	strb.w	r5, [r3, #148]	; 0x94
		ep0_tx_bdt_bank = 0;
    bd86:	7002      	strb	r2, [r0, #0]
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    bd88:	482f      	ldr	r0, [pc, #188]	; (be48 <usb_isr+0x620>)
		table[index(0, RX, EVEN)].desc = BDT_DESC(EP0_SIZE, 0);
    bd8a:	600c      	str	r4, [r1, #0]
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    bd8c:	4d2f      	ldr	r5, [pc, #188]	; (be4c <usb_isr+0x624>)
		table[index(0, RX, EVEN)].addr = ep0_rx0_buf;
    bd8e:	6048      	str	r0, [r1, #4]
		table[index(0, RX, ODD)].desc = BDT_DESC(EP0_SIZE, 0);
    bd90:	608c      	str	r4, [r1, #8]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bd92:	240d      	movs	r4, #13
		table[index(0, RX, ODD)].addr = ep0_rx1_buf;
    bd94:	60cd      	str	r5, [r1, #12]
		USB0_ERRSTAT = 0xFF;
    bd96:	20ff      	movs	r0, #255	; 0xff
		table[index(0, TX, EVEN)].desc = 0;
    bd98:	610a      	str	r2, [r1, #16]
		table[index(0, TX, ODD)].desc = 0;
    bd9a:	618a      	str	r2, [r1, #24]
		USB0_ENDPT0 = USB_ENDPT_EPRXEN | USB_ENDPT_EPTXEN | USB_ENDPT_EPHSHK;
    bd9c:	f883 40c0 	strb.w	r4, [r3, #192]	; 0xc0
		USB0_CTL = USB_CTL_USBENSOFEN;
    bda0:	2101      	movs	r1, #1
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    bda2:	249f      	movs	r4, #159	; 0x9f
		USB0_ERRSTAT = 0xFF;
    bda4:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
		USB0_ISTAT = 0xFF;
    bda8:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
		USB0_ADDR = 0;
    bdac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
		USB0_ERREN = 0xFF;
    bdb0:	f883 008c 	strb.w	r0, [r3, #140]	; 0x8c
		USB0_INTEN = USB_INTEN_TOKDNEEN |
    bdb4:	f883 4084 	strb.w	r4, [r3, #132]	; 0x84
		USB0_CTL = USB_CTL_USBENSOFEN;
    bdb8:	f883 1094 	strb.w	r1, [r3, #148]	; 0x94
}
    bdbc:	b005      	add	sp, #20
    bdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (line_coding[0] == 134) usb_reboot_timer = 15;
    bdc2:	4a23      	ldr	r2, [pc, #140]	; (be50 <usb_isr+0x628>)
    bdc4:	200f      	movs	r0, #15
    bdc6:	7010      	strb	r0, [r2, #0]
    bdc8:	e7be      	b.n	bd48 <usb_isr+0x520>
	if (datalen == 0 && size < EP0_SIZE) return;
    bdca:	2f3f      	cmp	r7, #63	; 0x3f
    bdcc:	d8a7      	bhi.n	bd1e <usb_isr+0x4f6>
    bdce:	e690      	b.n	baf2 <usb_isr+0x2ca>
		i = setup.wIndex & 0x7F;
    bdd0:	f007 077f 	and.w	r7, r7, #127	; 0x7f
		if (i > NUM_ENDPOINTS || setup.wValue != 0) {
    bdd4:	2f04      	cmp	r7, #4
    bdd6:	f63f aee8 	bhi.w	bbaa <usb_isr+0x382>
    bdda:	0c00      	lsrs	r0, r0, #16
    bddc:	f47f aee5 	bne.w	bbaa <usb_isr+0x382>
		(*(uint8_t *)(&USB0_ENDPT0 + i * 4)) &= ~0x02;
    bde0:	4a05      	ldr	r2, [pc, #20]	; (bdf8 <usb_isr+0x5d0>)
    bde2:	f812 3027 	ldrb.w	r3, [r2, r7, lsl #2]
    bde6:	f023 0302 	bic.w	r3, r3, #2
    bdea:	f802 3027 	strb.w	r3, [r2, r7, lsl #2]
	uint32_t datalen = 0;
    bdee:	2200      	movs	r2, #0
	const uint8_t *data = NULL;
    bdf0:	4613      	mov	r3, r2
		break;
    bdf2:	e64f      	b.n	ba94 <usb_isr+0x26c>
    bdf4:	1fffd564 	.word	0x1fffd564
    bdf8:	400720c0 	.word	0x400720c0
    bdfc:	1fffd3c0 	.word	0x1fffd3c0
    be00:	1fffd5e0 	.word	0x1fffd5e0
    be04:	1fffd5dc 	.word	0x1fffd5dc
    be08:	1fffd5b8 	.word	0x1fffd5b8
    be0c:	1fffd5a4 	.word	0x1fffd5a4
    be10:	1fffd5b4 	.word	0x1fffd5b4
    be14:	1fffd5bc 	.word	0x1fffd5bc
    be18:	1fffd56c 	.word	0x1fffd56c
    be1c:	1fffd57c 	.word	0x1fffd57c
    be20:	1fffd594 	.word	0x1fffd594
    be24:	1fffd5c4 	.word	0x1fffd5c4
    be28:	40072000 	.word	0x40072000
    be2c:	1fffd55e 	.word	0x1fffd55e
    be30:	1fffd5d3 	.word	0x1fffd5d3
    be34:	1fffd5d4 	.word	0x1fffd5d4
    be38:	1fffd55d 	.word	0x1fffd55d
    be3c:	1fffd55c 	.word	0x1fffd55c
    be40:	1fff8000 	.word	0x1fff8000
    be44:	00400088 	.word	0x00400088
    be48:	1fffd4dc 	.word	0x1fffd4dc
    be4c:	1fffd51c 	.word	0x1fffd51c
    be50:	1fffd5b9 	.word	0x1fffd5b9
		reply_buffer[0] = usb_configuration;
    be54:	4b48      	ldr	r3, [pc, #288]	; (bf78 <usb_isr+0x750>)
    be56:	4949      	ldr	r1, [pc, #292]	; (bf7c <usb_isr+0x754>)
    be58:	781b      	ldrb	r3, [r3, #0]
    be5a:	700b      	strb	r3, [r1, #0]
		data = reply_buffer;
    be5c:	460b      	mov	r3, r1
		break;
    be5e:	e619      	b.n	ba94 <usb_isr+0x26c>
		reply_buffer[0] = 0;
    be60:	4a46      	ldr	r2, [pc, #280]	; (bf7c <usb_isr+0x754>)
    be62:	2300      	movs	r3, #0
    be64:	8013      	strh	r3, [r2, #0]
		data = reply_buffer;
    be66:	4b45      	ldr	r3, [pc, #276]	; (bf7c <usb_isr+0x754>)
		datalen = 2;
    be68:	2202      	movs	r2, #2
		break;
    be6a:	e613      	b.n	ba94 <usb_isr+0x26c>
				tx_state[i] = TX_STATE_BOTH_FREE_ODD_FIRST;
    be6c:	f04f 0301 	mov.w	r3, #1
    be70:	7023      	strb	r3, [r4, #0]
		for (i=0; i < NUM_ENDPOINTS; i++) {
    be72:	4b43      	ldr	r3, [pc, #268]	; (bf80 <usb_isr+0x758>)
    be74:	42b3      	cmp	r3, r6
    be76:	f104 0401 	add.w	r4, r4, #1
    be7a:	f47f aeca 	bne.w	bc12 <usb_isr+0x3ea>
		usb_rx_memory_needed = 0;
    be7e:	4e41      	ldr	r6, [pc, #260]	; (bf84 <usb_isr+0x75c>)
    be80:	9c03      	ldr	r4, [sp, #12]
		cfg = usb_endpoint_config_table;
    be82:	f8df 8104 	ldr.w	r8, [pc, #260]	; bf88 <usb_isr+0x760>
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    be86:	4f41      	ldr	r7, [pc, #260]	; (bf8c <usb_isr+0x764>)
		usb_rx_memory_needed = 0;
    be88:	2300      	movs	r3, #0
    be8a:	7033      	strb	r3, [r6, #0]
    be8c:	2504      	movs	r5, #4
			epconf = *cfg++;
    be8e:	f818 3b01 	ldrb.w	r3, [r8], #1
			*reg = epconf;
    be92:	4a3f      	ldr	r2, [pc, #252]	; (bf90 <usb_isr+0x768>)
    be94:	54ab      	strb	r3, [r5, r2]
			if (epconf & USB_ENDPT_EPRXEN) {
    be96:	071b      	lsls	r3, r3, #28
    be98:	d425      	bmi.n	bee6 <usb_isr+0x6be>
			table[index(i, TX, EVEN)].desc = 0;
    be9a:	f045 0102 	orr.w	r1, r5, #2
			table[index(i, TX, ODD)].desc = 0;
    be9e:	f045 0203 	orr.w	r2, r5, #3
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    bea2:	3504      	adds	r5, #4
			table[index(i, TX, EVEN)].desc = 0;
    bea4:	2300      	movs	r3, #0
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    bea6:	2d14      	cmp	r5, #20
			table[index(i, TX, EVEN)].desc = 0;
    bea8:	f849 3031 	str.w	r3, [r9, r1, lsl #3]
			table[index(i, TX, ODD)].desc = 0;
    beac:	f849 3032 	str.w	r3, [r9, r2, lsl #3]
		for (i=1; i <= NUM_ENDPOINTS; i++) {
    beb0:	d1ed      	bne.n	be8e <usb_isr+0x666>
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    beb2:	4f38      	ldr	r7, [pc, #224]	; (bf94 <usb_isr+0x76c>)
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    beb4:	7825      	ldrb	r5, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    beb6:	783a      	ldrb	r2, [r7, #0]
    beb8:	f042 0002 	orr.w	r0, r2, #2
    bebc:	eb09 0cc0 	add.w	ip, r9, r0, lsl #3
	ep0_tx_data_toggle ^= 1;
    bec0:	f085 0601 	eor.w	r6, r5, #1
	table[index(0, TX, ep0_tx_bdt_bank)].addr = (void *)data;
    bec4:	f8cc 3004 	str.w	r3, [ip, #4]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bec8:	2d00      	cmp	r5, #0
    beca:	d14d      	bne.n	bf68 <usb_isr+0x740>
    becc:	2388      	movs	r3, #136	; 0x88
	ep0_tx_bdt_bank ^= 1;
    bece:	f082 0201 	eor.w	r2, r2, #1
	ep0_tx_data_toggle ^= 1;
    bed2:	7026      	strb	r6, [r4, #0]
	ep0_tx_bdt_bank ^= 1;
    bed4:	703a      	strb	r2, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bed6:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
		USB0_CTL = USB_CTL_USBENSOFEN; // clear TXSUSPENDTOKENBUSY bit
    beda:	2301      	movs	r3, #1
    bedc:	f88a 3094 	strb.w	r3, [sl, #148]	; 0x94
		break;
    bee0:	e52b      	b.n	b93a <usb_isr+0x112>
				tx_state[i] = TX_STATE_BOTH_FREE_EVEN_FIRST;
    bee2:	7025      	strb	r5, [r4, #0]
				break;
    bee4:	e7c5      	b.n	be72 <usb_isr+0x64a>
				p = usb_malloc();
    bee6:	f000 f8b1 	bl	c04c <usb_malloc>
				if (p) {
    beea:	2800      	cmp	r0, #0
    beec:	d032      	beq.n	bf54 <usb_isr+0x72c>
					table[index(i, RX, EVEN)].addr = p->buf;
    beee:	eb09 03c5 	add.w	r3, r9, r5, lsl #3
    bef2:	3008      	adds	r0, #8
    bef4:	6058      	str	r0, [r3, #4]
					table[index(i, RX, EVEN)].desc = BDT_DESC(64, 0);
    bef6:	f849 7035 	str.w	r7, [r9, r5, lsl #3]
				p = usb_malloc();
    befa:	f000 f8a7 	bl	c04c <usb_malloc>
				if (p) {
    befe:	b308      	cbz	r0, bf44 <usb_isr+0x71c>
					table[index(i, RX, ODD)].addr = p->buf;
    bf00:	f045 0301 	orr.w	r3, r5, #1
    bf04:	eb09 02c3 	add.w	r2, r9, r3, lsl #3
    bf08:	3008      	adds	r0, #8
    bf0a:	6050      	str	r0, [r2, #4]
					table[index(i, RX, ODD)].desc = BDT_DESC(64, 1);
    bf0c:	f849 b033 	str.w	fp, [r9, r3, lsl #3]
    bf10:	e7c3      	b.n	be9a <usb_isr+0x672>
			if (list->addr == NULL) break;
    bf12:	4a21      	ldr	r2, [pc, #132]	; (bf98 <usb_isr+0x770>)
    bf14:	6853      	ldr	r3, [r2, #4]
    bf16:	2b00      	cmp	r3, #0
    bf18:	f43f ae47 	beq.w	bbaa <usb_isr+0x382>
    bf1c:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    bf1e:	b2bf      	uxth	r7, r7
    bf20:	e004      	b.n	bf2c <usb_isr+0x704>
			if (list->addr == NULL) break;
    bf22:	6913      	ldr	r3, [r2, #16]
		for (list = usb_descriptor_list; 1; list++) {
    bf24:	320c      	adds	r2, #12
			if (list->addr == NULL) break;
    bf26:	2b00      	cmp	r3, #0
    bf28:	f43f ae3f 	beq.w	bbaa <usb_isr+0x382>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    bf2c:	8811      	ldrh	r1, [r2, #0]
    bf2e:	4281      	cmp	r1, r0
    bf30:	d1f7      	bne.n	bf22 <usb_isr+0x6fa>
    bf32:	8851      	ldrh	r1, [r2, #2]
    bf34:	42b9      	cmp	r1, r7
    bf36:	d1f4      	bne.n	bf22 <usb_isr+0x6fa>
				if ((setup.wValue >> 8) == 3) {
    bf38:	0a00      	lsrs	r0, r0, #8
    bf3a:	2803      	cmp	r0, #3
					datalen = *(list->addr);
    bf3c:	bf0c      	ite	eq
    bf3e:	781a      	ldrbeq	r2, [r3, #0]
					datalen = list->length;
    bf40:	8912      	ldrhne	r2, [r2, #8]
    bf42:	e5a7      	b.n	ba94 <usb_isr+0x26c>
					usb_rx_memory_needed++;
    bf44:	7833      	ldrb	r3, [r6, #0]
    bf46:	3301      	adds	r3, #1
    bf48:	7033      	strb	r3, [r6, #0]
					table[index(i, RX, ODD)].desc = 0;
    bf4a:	f045 0301 	orr.w	r3, r5, #1
    bf4e:	f849 0033 	str.w	r0, [r9, r3, lsl #3]
					usb_rx_memory_needed++;
    bf52:	e7a2      	b.n	be9a <usb_isr+0x672>
					usb_rx_memory_needed++;
    bf54:	7833      	ldrb	r3, [r6, #0]
					table[index(i, RX, EVEN)].desc = 0;
    bf56:	f849 0035 	str.w	r0, [r9, r5, lsl #3]
					usb_rx_memory_needed++;
    bf5a:	3301      	adds	r3, #1
    bf5c:	7033      	strb	r3, [r6, #0]
    bf5e:	e7cc      	b.n	befa <usb_isr+0x6d2>
		data = reply_buffer;
    bf60:	4b06      	ldr	r3, [pc, #24]	; (bf7c <usb_isr+0x754>)
		datalen = 2;
    bf62:	2202      	movs	r2, #2
    bf64:	e596      	b.n	ba94 <usb_isr+0x26c>
	__asm__ volatile("bkpt");
    bf66:	be00      	bkpt	0x0000
	ep0_tx_data_toggle ^= 1;
    bf68:	7026      	strb	r6, [r4, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf6a:	23c8      	movs	r3, #200	; 0xc8
	ep0_tx_bdt_bank ^= 1;
    bf6c:	f082 0601 	eor.w	r6, r2, #1
    bf70:	703e      	strb	r6, [r7, #0]
	table[index(0, TX, ep0_tx_bdt_bank)].desc = BDT_DESC(len, ep0_tx_data_toggle);
    bf72:	f849 3030 	str.w	r3, [r9, r0, lsl #3]
	if (datalen == 0 && size < EP0_SIZE) return;
    bf76:	e5bc      	b.n	baf2 <usb_isr+0x2ca>
    bf78:	1fffd5b8 	.word	0x1fffd5b8
    bf7c:	1fffd564 	.word	0x1fffd564
    bf80:	1fffd57c 	.word	0x1fffd57c
    bf84:	1fffd5c4 	.word	0x1fffd5c4
    bf88:	00015664 	.word	0x00015664
    bf8c:	00400088 	.word	0x00400088
    bf90:	400720c0 	.word	0x400720c0
    bf94:	1fffd55c 	.word	0x1fffd55c
    bf98:	00015610 	.word	0x00015610

0000bf9c <usb_init>:



void usb_init(void)
{
    bf9c:	b570      	push	{r4, r5, r6, lr}
	int i;

	//serial_begin(BAUD2DIV(115200));
	//serial_print("usb_init\n");

	usb_init_serialnumber();
    bf9e:	f000 fab3 	bl	c508 <usb_init_serialnumber>

	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    bfa2:	2300      	movs	r3, #0
    bfa4:	4a1a      	ldr	r2, [pc, #104]	; (c010 <usb_init+0x74>)
		table[i].desc = 0;
    bfa6:	4619      	mov	r1, r3
    bfa8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		table[i].addr = 0;
    bfac:	eb02 00c3 	add.w	r0, r2, r3, lsl #3
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    bfb0:	3301      	adds	r3, #1
    bfb2:	2b14      	cmp	r3, #20
		table[i].addr = 0;
    bfb4:	6041      	str	r1, [r0, #4]
	for (i=0; i < (NUM_ENDPOINTS+1)*4; i++) {
    bfb6:	d1f7      	bne.n	bfa8 <usb_init+0xc>
	// this basically follows the flowchart in the Kinetis
	// Quick Reference User Guide, Rev. 1, 03/2012, page 141

	// assume 48 MHz clock already running
	// SIM - enable clock
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    bfb8:	4c16      	ldr	r4, [pc, #88]	; (c014 <usb_init+0x78>)
	// reset USB module
	//USB0_USBTRC0 = USB_USBTRC_USBRESET;
	//while ((USB0_USBTRC0 & USB_USBTRC_USBRESET) != 0) ; // wait for reset to end

	// set desc table base addr
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    bfba:	4b17      	ldr	r3, [pc, #92]	; (c018 <usb_init+0x7c>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    bfbc:	6b60      	ldr	r0, [r4, #52]	; 0x34

	// enable reset interrupt
	USB0_INTEN = USB_INTEN_USBRSTEN;

	// enable interrupt in NVIC...
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    bfbe:	4d17      	ldr	r5, [pc, #92]	; (c01c <usb_init+0x80>)
	SIM_SCGC4 |= SIM_SCGC4_USBOTG;
    bfc0:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
    bfc4:	6360      	str	r0, [r4, #52]	; 0x34
	USB0_BDTPAGE1 = ((uint32_t)table) >> 8;
    bfc6:	f3c2 2407 	ubfx	r4, r2, #8, #8
    bfca:	f883 409c 	strb.w	r4, [r3, #156]	; 0x9c
	USB0_USBCTRL = 0;
    bfce:	4c14      	ldr	r4, [pc, #80]	; (c020 <usb_init+0x84>)
	USB0_ISTAT = 0xFF;
    bfd0:	20ff      	movs	r0, #255	; 0xff
	USB0_CTL = USB_CTL_USBENSOFEN;
    bfd2:	f04f 0c01 	mov.w	ip, #1
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    bfd6:	f3c2 4607 	ubfx	r6, r2, #16, #8
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    bfda:	0e12      	lsrs	r2, r2, #24
	USB0_BDTPAGE2 = ((uint32_t)table) >> 16;
    bfdc:	f883 60b0 	strb.w	r6, [r3, #176]	; 0xb0
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    bfe0:	f04f 2ee0 	mov.w	lr, #3758153728	; 0xe000e000
	USB0_BDTPAGE3 = ((uint32_t)table) >> 24;
    bfe4:	f883 20b4 	strb.w	r2, [r3, #180]	; 0xb4
	USB0_ISTAT = 0xFF;
    bfe8:	f883 0080 	strb.w	r0, [r3, #128]	; 0x80
	USB0_ERRSTAT = 0xFF;
    bfec:	f883 0088 	strb.w	r0, [r3, #136]	; 0x88
	USB0_OTGISTAT = 0xFF;
    bff0:	7418      	strb	r0, [r3, #16]
	USB0_CTL = USB_CTL_USBENSOFEN;
    bff2:	f883 c094 	strb.w	ip, [r3, #148]	; 0x94
	USB0_USBCTRL = 0;
    bff6:	7021      	strb	r1, [r4, #0]
	USB0_INTEN = USB_INTEN_USBRSTEN;
    bff8:	f883 c084 	strb.w	ip, [r3, #132]	; 0x84
	NVIC_SET_PRIORITY(IRQ_USBOTG, 112);
    bffc:	2370      	movs	r3, #112	; 0x70
    bffe:	f885 3049 	strb.w	r3, [r5, #73]	; 0x49
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c002:	f44f 7200 	mov.w	r2, #512	; 0x200

	// enable d+ pullup
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c006:	2310      	movs	r3, #16
	NVIC_ENABLE_IRQ(IRQ_USBOTG);
    c008:	f8ce 2108 	str.w	r2, [lr, #264]	; 0x108
	USB0_CONTROL = USB_CONTROL_DPPULLUPNONOTG;
    c00c:	7223      	strb	r3, [r4, #8]
}
    c00e:	bd70      	pop	{r4, r5, r6, pc}
    c010:	1fff8000 	.word	0x1fff8000
    c014:	40048000 	.word	0x40048000
    c018:	40072000 	.word	0x40072000
    c01c:	e000e400 	.word	0xe000e400
    c020:	40072100 	.word	0x40072100

0000c024 <usb_serial_class::clear()>:
        virtual void clear(void) { usb_serial_flush_input(); }
    c024:	f000 b8ac 	b.w	c180 <usb_serial_flush_input>

0000c028 <usb_serial_class::peek()>:
        virtual int peek() { return usb_serial_peekchar(); }
    c028:	f000 b87c 	b.w	c124 <usb_serial_peekchar>

0000c02c <usb_serial_class::read()>:
        virtual int read() { return usb_serial_getchar(); }
    c02c:	f000 b856 	b.w	c0dc <usb_serial_getchar>

0000c030 <usb_serial_class::available()>:
        virtual int available() { return usb_serial_available(); }
    c030:	f000 b890 	b.w	c154 <usb_serial_available>

0000c034 <usb_serial_class::flush()>:
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    c034:	f000 b976 	b.w	c324 <usb_serial_flush_output>

0000c038 <usb_serial_class::availableForWrite()>:
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    c038:	f000 b950 	b.w	c2dc <usb_serial_write_buffer_free>

0000c03c <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    c03c:	4608      	mov	r0, r1
    c03e:	4611      	mov	r1, r2
    c040:	f000 b8ba 	b.w	c1b8 <usb_serial_write>

0000c044 <usb_serial_class::write(unsigned char)>:
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    c044:	4608      	mov	r0, r1
    c046:	f000 b93b 	b.w	c2c0 <usb_serial_putchar>
    c04a:	bf00      	nop

0000c04c <usb_malloc>:
usb_packet_t * usb_malloc(void)
{
	unsigned int n, avail;
	uint8_t *p;

	__disable_irq();
    c04c:	b672      	cpsid	i
	avail = usb_buffer_available;
    c04e:	490d      	ldr	r1, [pc, #52]	; (c084 <usb_malloc+0x38>)
    c050:	680b      	ldr	r3, [r1, #0]
	n = __builtin_clz(avail); // clz = count leading zeros
    c052:	fab3 f083 	clz	r0, r3
	if (n >= NUM_USB_BUFFERS) {
    c056:	280b      	cmp	r0, #11
    c058:	dc10      	bgt.n	c07c <usb_malloc+0x30>
	}
	//serial_print("malloc:");
	//serial_phex(n);
	//serial_print("\n");

	usb_buffer_available = avail & ~(0x80000000 >> n);
    c05a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    c05e:	40c2      	lsrs	r2, r0
    c060:	ea23 0302 	bic.w	r3, r3, r2
    c064:	600b      	str	r3, [r1, #0]
	__enable_irq();
    c066:	b662      	cpsie	i
	p = usb_buffer_memory + (n * sizeof(usb_packet_t));
    c068:	4a07      	ldr	r2, [pc, #28]	; (c088 <usb_malloc+0x3c>)
    c06a:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    c06e:	00c1      	lsls	r1, r0, #3
    c070:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
	//serial_print("malloc:");
	//serial_phex32((int)p);
	//serial_print("\n");
	*(uint32_t *)p = 0;
    c074:	2300      	movs	r3, #0
    c076:	5053      	str	r3, [r2, r1]
	*(uint32_t *)(p + 4) = 0;
    c078:	6043      	str	r3, [r0, #4]
	return (usb_packet_t *)p;
}
    c07a:	4770      	bx	lr
		__enable_irq();
    c07c:	b662      	cpsie	i
		return NULL;
    c07e:	2000      	movs	r0, #0
    c080:	4770      	bx	lr
    c082:	bf00      	nop
    c084:	1fff8a0c 	.word	0x1fff8a0c
    c088:	1fff83bc 	.word	0x1fff83bc

0000c08c <usb_free>:
void usb_free(usb_packet_t *p)
{
	unsigned int n, mask;

	//serial_print("free:");
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c08c:	4b0e      	ldr	r3, [pc, #56]	; (c0c8 <usb_free+0x3c>)
    c08e:	1ac3      	subs	r3, r0, r3
	if (n >= NUM_USB_BUFFERS) return;
    c090:	f5b3 7f58 	cmp.w	r3, #864	; 0x360
    c094:	d210      	bcs.n	c0b8 <usb_free+0x2c>
	//serial_phex(n);
	//serial_print("\n");

	// if any endpoints are starving for memory to receive
	// packets, give this memory to them immediately!
	if (usb_rx_memory_needed && usb_configuration) {
    c096:	4a0d      	ldr	r2, [pc, #52]	; (c0cc <usb_free+0x40>)
    c098:	7812      	ldrb	r2, [r2, #0]
    c09a:	b972      	cbnz	r2, c0ba <usb_free+0x2e>
		usb_rx_memory(p);
		return;
	}

	mask = (0x80000000 >> n);
	__disable_irq();
    c09c:	b672      	cpsid	i
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c09e:	4a0c      	ldr	r2, [pc, #48]	; (c0d0 <usb_free+0x44>)
	usb_buffer_available |= mask;
    c0a0:	490c      	ldr	r1, [pc, #48]	; (c0d4 <usb_free+0x48>)
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c0a2:	fba2 2303 	umull	r2, r3, r2, r3
	usb_buffer_available |= mask;
    c0a6:	6808      	ldr	r0, [r1, #0]
	mask = (0x80000000 >> n);
    c0a8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	n = ((uint8_t *)p - usb_buffer_memory) / sizeof(usb_packet_t);
    c0ac:	091b      	lsrs	r3, r3, #4
	mask = (0x80000000 >> n);
    c0ae:	fa22 f303 	lsr.w	r3, r2, r3
	usb_buffer_available |= mask;
    c0b2:	4303      	orrs	r3, r0
    c0b4:	600b      	str	r3, [r1, #0]
	__enable_irq();
    c0b6:	b662      	cpsie	i

	//serial_print("free:");
	//serial_phex32((int)p);
	//serial_print("\n");
}
    c0b8:	4770      	bx	lr
	if (usb_rx_memory_needed && usb_configuration) {
    c0ba:	4a07      	ldr	r2, [pc, #28]	; (c0d8 <usb_free+0x4c>)
    c0bc:	7812      	ldrb	r2, [r2, #0]
    c0be:	2a00      	cmp	r2, #0
    c0c0:	d0ec      	beq.n	c09c <usb_free+0x10>
		usb_rx_memory(p);
    c0c2:	f7ff bb2b 	b.w	b71c <usb_rx_memory>
    c0c6:	bf00      	nop
    c0c8:	1fff83bc 	.word	0x1fff83bc
    c0cc:	1fffd5c4 	.word	0x1fffd5c4
    c0d0:	38e38e39 	.word	0x38e38e39
    c0d4:	1fff8a0c 	.word	0x1fff8a0c
    c0d8:	1fffd5b8 	.word	0x1fffd5b8

0000c0dc <usb_serial_getchar>:

#define TRANSMIT_FLUSH_TIMEOUT	5   /* in milliseconds */

// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    c0dc:	b538      	push	{r3, r4, r5, lr}
	unsigned int i;
	int c;

	if (!rx_packet) {
    c0de:	4c0f      	ldr	r4, [pc, #60]	; (c11c <usb_serial_getchar+0x40>)
    c0e0:	6820      	ldr	r0, [r4, #0]
    c0e2:	b178      	cbz	r0, c104 <usb_serial_getchar+0x28>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	i = rx_packet->index;
    c0e4:	8843      	ldrh	r3, [r0, #2]
	c = rx_packet->buf[i++];
	if (i >= rx_packet->len) {
    c0e6:	8802      	ldrh	r2, [r0, #0]
	c = rx_packet->buf[i++];
    c0e8:	18c1      	adds	r1, r0, r3
    c0ea:	3301      	adds	r3, #1
	if (i >= rx_packet->len) {
    c0ec:	429a      	cmp	r2, r3
	c = rx_packet->buf[i++];
    c0ee:	7a0d      	ldrb	r5, [r1, #8]
	if (i >= rx_packet->len) {
    c0f0:	d902      	bls.n	c0f8 <usb_serial_getchar+0x1c>
		usb_free(rx_packet);
		rx_packet = NULL;
	} else {
		rx_packet->index = i;
    c0f2:	8043      	strh	r3, [r0, #2]
	}
	return c;
}
    c0f4:	4628      	mov	r0, r5
    c0f6:	bd38      	pop	{r3, r4, r5, pc}
		usb_free(rx_packet);
    c0f8:	f7ff ffc8 	bl	c08c <usb_free>
		rx_packet = NULL;
    c0fc:	2300      	movs	r3, #0
    c0fe:	6023      	str	r3, [r4, #0]
}
    c100:	4628      	mov	r0, r5
    c102:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration) return -1;
    c104:	4b06      	ldr	r3, [pc, #24]	; (c120 <usb_serial_getchar+0x44>)
    c106:	781b      	ldrb	r3, [r3, #0]
    c108:	b12b      	cbz	r3, c116 <usb_serial_getchar+0x3a>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    c10a:	2003      	movs	r0, #3
    c10c:	f7ff face 	bl	b6ac <usb_rx>
    c110:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    c112:	2800      	cmp	r0, #0
    c114:	d1e6      	bne.n	c0e4 <usb_serial_getchar+0x8>
		if (!usb_configuration) return -1;
    c116:	f04f 35ff 	mov.w	r5, #4294967295
    c11a:	e7eb      	b.n	c0f4 <usb_serial_getchar+0x18>
    c11c:	1fffd5c8 	.word	0x1fffd5c8
    c120:	1fffd5b8 	.word	0x1fffd5b8

0000c124 <usb_serial_peekchar>:

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
    c124:	b510      	push	{r4, lr}
	if (!rx_packet) {
    c126:	4c09      	ldr	r4, [pc, #36]	; (c14c <usb_serial_peekchar+0x28>)
    c128:	6820      	ldr	r0, [r4, #0]
    c12a:	b118      	cbz	r0, c134 <usb_serial_peekchar+0x10>
		if (!usb_configuration) return -1;
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
		if (!rx_packet) return -1;
	}
	if (!rx_packet) return -1;
	return rx_packet->buf[rx_packet->index];
    c12c:	8843      	ldrh	r3, [r0, #2]
    c12e:	4418      	add	r0, r3
    c130:	7a00      	ldrb	r0, [r0, #8]
}
    c132:	bd10      	pop	{r4, pc}
		if (!usb_configuration) return -1;
    c134:	4b06      	ldr	r3, [pc, #24]	; (c150 <usb_serial_peekchar+0x2c>)
    c136:	781b      	ldrb	r3, [r3, #0]
    c138:	b12b      	cbz	r3, c146 <usb_serial_peekchar+0x22>
		rx_packet = usb_rx(CDC_RX_ENDPOINT);
    c13a:	2003      	movs	r0, #3
    c13c:	f7ff fab6 	bl	b6ac <usb_rx>
    c140:	6020      	str	r0, [r4, #0]
		if (!rx_packet) return -1;
    c142:	2800      	cmp	r0, #0
    c144:	d1f2      	bne.n	c12c <usb_serial_peekchar+0x8>
		if (!usb_configuration) return -1;
    c146:	f04f 30ff 	mov.w	r0, #4294967295
}
    c14a:	bd10      	pop	{r4, pc}
    c14c:	1fffd5c8 	.word	0x1fffd5c8
    c150:	1fffd5b8 	.word	0x1fffd5b8

0000c154 <usb_serial_available>:
// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	int count;
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c154:	4b08      	ldr	r3, [pc, #32]	; (c178 <usb_serial_available+0x24>)
static inline uint32_t usb_rx_byte_count(uint32_t endpoint) __attribute__((always_inline));
static inline uint32_t usb_rx_byte_count(uint32_t endpoint)
{
        endpoint--;
        if (endpoint >= NUM_ENDPOINTS) return 0;
        return usb_rx_byte_count_data[endpoint];
    c156:	4a09      	ldr	r2, [pc, #36]	; (c17c <usb_serial_available+0x28>)
    c158:	681b      	ldr	r3, [r3, #0]
{
    c15a:	b510      	push	{r4, lr}
	count = usb_rx_byte_count(CDC_RX_ENDPOINT);
    c15c:	8894      	ldrh	r4, [r2, #4]
	if (rx_packet) count += rx_packet->len - rx_packet->index;
    c15e:	b11b      	cbz	r3, c168 <usb_serial_available+0x14>
    c160:	881a      	ldrh	r2, [r3, #0]
    c162:	885b      	ldrh	r3, [r3, #2]
    c164:	1ad3      	subs	r3, r2, r3
    c166:	441c      	add	r4, r3
	if (count == 0) yield();
    c168:	b10c      	cbz	r4, c16e <usb_serial_available+0x1a>
	return count;
}
    c16a:	4620      	mov	r0, r4
    c16c:	bd10      	pop	{r4, pc}
	if (count == 0) yield();
    c16e:	f000 f929 	bl	c3c4 <yield>
}
    c172:	4620      	mov	r0, r4
    c174:	bd10      	pop	{r4, pc}
    c176:	bf00      	nop
    c178:	1fffd5c8 	.word	0x1fffd5c8
    c17c:	1fffd5bc 	.word	0x1fffd5bc

0000c180 <usb_serial_flush_input>:
// discard any buffered input
void usb_serial_flush_input(void)
{
	usb_packet_t *rx;

	if (!usb_configuration) return;
    c180:	4b0b      	ldr	r3, [pc, #44]	; (c1b0 <usb_serial_flush_input+0x30>)
    c182:	781b      	ldrb	r3, [r3, #0]
    c184:	b19b      	cbz	r3, c1ae <usb_serial_flush_input+0x2e>
{
    c186:	b510      	push	{r4, lr}
	if (rx_packet) {
    c188:	4c0a      	ldr	r4, [pc, #40]	; (c1b4 <usb_serial_flush_input+0x34>)
    c18a:	6820      	ldr	r0, [r4, #0]
    c18c:	b148      	cbz	r0, c1a2 <usb_serial_flush_input+0x22>
		usb_free(rx_packet);
    c18e:	f7ff ff7d 	bl	c08c <usb_free>
		rx_packet = NULL;
    c192:	2300      	movs	r3, #0
	}
	while (1) {
		rx = usb_rx(CDC_RX_ENDPOINT);
    c194:	2003      	movs	r0, #3
		rx_packet = NULL;
    c196:	6023      	str	r3, [r4, #0]
		rx = usb_rx(CDC_RX_ENDPOINT);
    c198:	f7ff fa88 	bl	b6ac <usb_rx>
		if (!rx) break;
    c19c:	b130      	cbz	r0, c1ac <usb_serial_flush_input+0x2c>
		usb_free(rx);
    c19e:	f7ff ff75 	bl	c08c <usb_free>
		rx = usb_rx(CDC_RX_ENDPOINT);
    c1a2:	2003      	movs	r0, #3
    c1a4:	f7ff fa82 	bl	b6ac <usb_rx>
		if (!rx) break;
    c1a8:	2800      	cmp	r0, #0
    c1aa:	d1f8      	bne.n	c19e <usb_serial_flush_input+0x1e>
	}
}
    c1ac:	bd10      	pop	{r4, pc}
    c1ae:	4770      	bx	lr
    c1b0:	1fffd5b8 	.word	0x1fffd5b8
    c1b4:	1fffd5c8 	.word	0x1fffd5c8

0000c1b8 <usb_serial_write>:
	return usb_serial_write(&c, 1);
}


int usb_serial_write(const void *buffer, uint32_t size)
{
    c1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t len;
	uint32_t wait_count;
	const uint8_t *src = (const uint8_t *)buffer;
	uint8_t *dest;

	tx_noautoflush = 1;
    c1bc:	f8df 90ec 	ldr.w	r9, [pc, #236]	; c2ac <usb_serial_write+0xf4>
{
    c1c0:	b083      	sub	sp, #12
	tx_noautoflush = 1;
    c1c2:	2201      	movs	r2, #1
    c1c4:	f889 2000 	strb.w	r2, [r9]
	while (size > 0) {
    c1c8:	9101      	str	r1, [sp, #4]
    c1ca:	b379      	cbz	r1, c22c <usb_serial_write+0x74>
    c1cc:	4f38      	ldr	r7, [pc, #224]	; (c2b0 <usb_serial_write+0xf8>)
		if (!tx_packet) {
			wait_count = 0;
			while (1) {
				if (!usb_configuration) {
    c1ce:	f8df 80e4 	ldr.w	r8, [pc, #228]	; c2b4 <usb_serial_write+0xfc>
	while (size > 0) {
    c1d2:	9d01      	ldr	r5, [sp, #4]
    c1d4:	4e38      	ldr	r6, [pc, #224]	; (c2b8 <usb_serial_write+0x100>)
		if (tx_packet->index >= CDC_TX_SIZE) {
			tx_packet->len = CDC_TX_SIZE;
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
			tx_packet = NULL;
		}
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    c1d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c2bc <usb_serial_write+0x104>
    c1da:	4683      	mov	fp, r0
		if (!tx_packet) {
    c1dc:	6839      	ldr	r1, [r7, #0]
    c1de:	b3a1      	cbz	r1, c24a <usb_serial_write+0x92>
		len = CDC_TX_SIZE - tx_packet->index;
    c1e0:	f8b1 e002 	ldrh.w	lr, [r1, #2]
    c1e4:	f1ce 0c40 	rsb	ip, lr, #64	; 0x40
    c1e8:	45ac      	cmp	ip, r5
    c1ea:	bf28      	it	cs
    c1ec:	46ac      	movcs	ip, r5
		tx_packet->index += len;
    c1ee:	eb0e 040c 	add.w	r4, lr, ip
		transmit_previous_timeout = 0;
    c1f2:	2200      	movs	r2, #0
		tx_packet->index += len;
    c1f4:	b2a4      	uxth	r4, r4
		transmit_previous_timeout = 0;
    c1f6:	7032      	strb	r2, [r6, #0]
		size -= len;
    c1f8:	eba5 050c 	sub.w	r5, r5, ip
		tx_packet->index += len;
    c1fc:	804c      	strh	r4, [r1, #2]
		dest = tx_packet->buf + tx_packet->index;
    c1fe:	f101 0208 	add.w	r2, r1, #8
		while (len-- > 0) *dest++ = *src++;
    c202:	f1bc 0f00 	cmp.w	ip, #0
    c206:	d00a      	beq.n	c21e <usb_serial_write+0x66>
    c208:	f10e 3eff 	add.w	lr, lr, #4294967295
    c20c:	4472      	add	r2, lr
    c20e:	44dc      	add	ip, fp
    c210:	f81b 4b01 	ldrb.w	r4, [fp], #1
    c214:	f802 4f01 	strb.w	r4, [r2, #1]!
    c218:	45dc      	cmp	ip, fp
    c21a:	d1f9      	bne.n	c210 <usb_serial_write+0x58>
		if (tx_packet->index >= CDC_TX_SIZE) {
    c21c:	884c      	ldrh	r4, [r1, #2]
    c21e:	2c3f      	cmp	r4, #63	; 0x3f
    c220:	d80b      	bhi.n	c23a <usb_serial_write+0x82>
		usb_cdc_transmit_flush_timer = TRANSMIT_FLUSH_TIMEOUT;
    c222:	2205      	movs	r2, #5
    c224:	f88a 2000 	strb.w	r2, [sl]
	while (size > 0) {
    c228:	2d00      	cmp	r5, #0
    c22a:	d1d7      	bne.n	c1dc <usb_serial_write+0x24>
	}
	tx_noautoflush = 0;
	return ret;
    c22c:	9801      	ldr	r0, [sp, #4]
	tx_noautoflush = 0;
    c22e:	2300      	movs	r3, #0
    c230:	f889 3000 	strb.w	r3, [r9]
}
    c234:	b003      	add	sp, #12
    c236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx_packet->len = CDC_TX_SIZE;
    c23a:	2240      	movs	r2, #64	; 0x40
    c23c:	800a      	strh	r2, [r1, #0]
			usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c23e:	2004      	movs	r0, #4
    c240:	f7ff faac 	bl	b79c <usb_tx>
			tx_packet = NULL;
    c244:	2200      	movs	r2, #0
    c246:	603a      	str	r2, [r7, #0]
    c248:	e7eb      	b.n	c222 <usb_serial_write+0x6a>
				if (!usb_configuration) {
    c24a:	f898 2000 	ldrb.w	r2, [r8]
    c24e:	b32a      	cbz	r2, c29c <usb_serial_write+0xe4>
    c250:	f24a 24f9 	movw	r4, #41721	; 0xa2f9
    c254:	e008      	b.n	c268 <usb_serial_write+0xb0>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c256:	3c01      	subs	r4, #1
    c258:	d019      	beq.n	c28e <usb_serial_write+0xd6>
    c25a:	7832      	ldrb	r2, [r6, #0]
    c25c:	b9ba      	cbnz	r2, c28e <usb_serial_write+0xd6>
				yield();
    c25e:	f000 f8b1 	bl	c3c4 <yield>
				if (!usb_configuration) {
    c262:	f898 2000 	ldrb.w	r2, [r8]
    c266:	b1ca      	cbz	r2, c29c <usb_serial_write+0xe4>
				if (usb_tx_packet_count(CDC_TX_ENDPOINT) < TX_PACKET_LIMIT) {
    c268:	2004      	movs	r0, #4
    c26a:	f7ff fa41 	bl	b6f0 <usb_tx_packet_count>
    c26e:	2807      	cmp	r0, #7
    c270:	d8f1      	bhi.n	c256 <usb_serial_write+0x9e>
					tx_noautoflush = 1;
    c272:	f04f 0301 	mov.w	r3, #1
    c276:	f889 3000 	strb.w	r3, [r9]
					tx_packet = usb_malloc();
    c27a:	f7ff fee7 	bl	c04c <usb_malloc>
    c27e:	4601      	mov	r1, r0
    c280:	6038      	str	r0, [r7, #0]
					if (tx_packet) break;
    c282:	2800      	cmp	r0, #0
    c284:	d1ac      	bne.n	c1e0 <usb_serial_write+0x28>
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c286:	3c01      	subs	r4, #1
					tx_noautoflush = 0;
    c288:	f889 0000 	strb.w	r0, [r9]
				if (++wait_count > TX_TIMEOUT || transmit_previous_timeout) {
    c28c:	d1e5      	bne.n	c25a <usb_serial_write+0xa2>
					transmit_previous_timeout = 1;
    c28e:	2301      	movs	r3, #1
					return -1;
    c290:	f04f 30ff 	mov.w	r0, #4294967295
					transmit_previous_timeout = 1;
    c294:	7033      	strb	r3, [r6, #0]
}
    c296:	b003      	add	sp, #12
    c298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					tx_noautoflush = 0;
    c29c:	2300      	movs	r3, #0
					return -1;
    c29e:	f04f 30ff 	mov.w	r0, #4294967295
					tx_noautoflush = 0;
    c2a2:	f889 3000 	strb.w	r3, [r9]
}
    c2a6:	b003      	add	sp, #12
    c2a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c2ac:	1fffd5cd 	.word	0x1fffd5cd
    c2b0:	1fffd5d0 	.word	0x1fffd5d0
    c2b4:	1fffd5b8 	.word	0x1fffd5b8
    c2b8:	1fffd5cc 	.word	0x1fffd5cc
    c2bc:	1fffd5e4 	.word	0x1fffd5e4

0000c2c0 <usb_serial_putchar>:
{
    c2c0:	b500      	push	{lr}
    c2c2:	b083      	sub	sp, #12
    c2c4:	4603      	mov	r3, r0
	return usb_serial_write(&c, 1);
    c2c6:	2101      	movs	r1, #1
    c2c8:	f10d 0007 	add.w	r0, sp, #7
{
    c2cc:	f88d 3007 	strb.w	r3, [sp, #7]
	return usb_serial_write(&c, 1);
    c2d0:	f7ff ff72 	bl	c1b8 <usb_serial_write>
}
    c2d4:	b003      	add	sp, #12
    c2d6:	f85d fb04 	ldr.w	pc, [sp], #4
    c2da:	bf00      	nop

0000c2dc <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    c2dc:	b538      	push	{r3, r4, r5, lr}
	uint32_t len;

	tx_noautoflush = 1;
	if (!tx_packet) {
    c2de:	4d0e      	ldr	r5, [pc, #56]	; (c318 <usb_serial_write_buffer_free+0x3c>)
	tx_noautoflush = 1;
    c2e0:	4c0e      	ldr	r4, [pc, #56]	; (c31c <usb_serial_write_buffer_free+0x40>)
	if (!tx_packet) {
    c2e2:	6828      	ldr	r0, [r5, #0]
	tx_noautoflush = 1;
    c2e4:	2301      	movs	r3, #1
    c2e6:	7023      	strb	r3, [r4, #0]
	if (!tx_packet) {
    c2e8:	b128      	cbz	r0, c2f6 <usb_serial_write_buffer_free+0x1a>
		  (tx_packet = usb_malloc()) == NULL) {
			tx_noautoflush = 0;
			return 0;
		}
	}
	len = CDC_TX_SIZE - tx_packet->index;
    c2ea:	8840      	ldrh	r0, [r0, #2]
	// space we just promised the user could write without blocking?
	// But does this come with other performance downsides?  Could it lead to
	// buffer data never actually transmitting in some usage cases?  More
	// investigation is needed.
	// https://github.com/PaulStoffregen/cores/issues/10#issuecomment-61514955
	tx_noautoflush = 0;
    c2ec:	2300      	movs	r3, #0
	len = CDC_TX_SIZE - tx_packet->index;
    c2ee:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
	tx_noautoflush = 0;
    c2f2:	7023      	strb	r3, [r4, #0]
	return len;
}
    c2f4:	bd38      	pop	{r3, r4, r5, pc}
		if (!usb_configuration ||
    c2f6:	4b0a      	ldr	r3, [pc, #40]	; (c320 <usb_serial_write_buffer_free+0x44>)
    c2f8:	781b      	ldrb	r3, [r3, #0]
    c2fa:	b913      	cbnz	r3, c302 <usb_serial_write_buffer_free+0x26>
			tx_noautoflush = 0;
    c2fc:	2000      	movs	r0, #0
    c2fe:	7020      	strb	r0, [r4, #0]
}
    c300:	bd38      	pop	{r3, r4, r5, pc}
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    c302:	2004      	movs	r0, #4
    c304:	f7ff f9f4 	bl	b6f0 <usb_tx_packet_count>
		if (!usb_configuration ||
    c308:	2807      	cmp	r0, #7
    c30a:	d8f7      	bhi.n	c2fc <usb_serial_write_buffer_free+0x20>
		  (tx_packet = usb_malloc()) == NULL) {
    c30c:	f7ff fe9e 	bl	c04c <usb_malloc>
    c310:	6028      	str	r0, [r5, #0]
		  usb_tx_packet_count(CDC_TX_ENDPOINT) >= TX_PACKET_LIMIT ||
    c312:	2800      	cmp	r0, #0
    c314:	d1e9      	bne.n	c2ea <usb_serial_write_buffer_free+0xe>
    c316:	e7f1      	b.n	c2fc <usb_serial_write_buffer_free+0x20>
    c318:	1fffd5d0 	.word	0x1fffd5d0
    c31c:	1fffd5cd 	.word	0x1fffd5cd
    c320:	1fffd5b8 	.word	0x1fffd5b8

0000c324 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    c324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!usb_configuration) return;
    c326:	4b11      	ldr	r3, [pc, #68]	; (c36c <usb_serial_flush_output+0x48>)
    c328:	781b      	ldrb	r3, [r3, #0]
    c32a:	b18b      	cbz	r3, c350 <usb_serial_flush_output+0x2c>
	tx_noautoflush = 1;
	if (tx_packet) {
    c32c:	4e10      	ldr	r6, [pc, #64]	; (c370 <usb_serial_flush_output+0x4c>)
	tx_noautoflush = 1;
    c32e:	4d11      	ldr	r5, [pc, #68]	; (c374 <usb_serial_flush_output+0x50>)
	if (tx_packet) {
    c330:	6834      	ldr	r4, [r6, #0]
	tx_noautoflush = 1;
    c332:	2701      	movs	r7, #1
    c334:	702f      	strb	r7, [r5, #0]
	if (tx_packet) {
    c336:	b164      	cbz	r4, c352 <usb_serial_flush_output+0x2e>
		usb_cdc_transmit_flush_timer = 0;
    c338:	4b0f      	ldr	r3, [pc, #60]	; (c378 <usb_serial_flush_output+0x54>)
    c33a:	2700      	movs	r7, #0
    c33c:	701f      	strb	r7, [r3, #0]
		tx_packet->len = tx_packet->index;
    c33e:	8863      	ldrh	r3, [r4, #2]
    c340:	8023      	strh	r3, [r4, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c342:	4621      	mov	r1, r4
    c344:	2004      	movs	r0, #4
    c346:	f7ff fa29 	bl	b79c <usb_tx>
		tx_packet = NULL;
    c34a:	6037      	str	r7, [r6, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
	tx_noautoflush = 0;
    c34c:	2300      	movs	r3, #0
    c34e:	702b      	strb	r3, [r5, #0]
}
    c350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_packet_t *tx = usb_malloc();
    c352:	f7ff fe7b 	bl	c04c <usb_malloc>
			usb_cdc_transmit_flush_timer = 0;
    c356:	4b08      	ldr	r3, [pc, #32]	; (c378 <usb_serial_flush_output+0x54>)
		if (tx) {
    c358:	4601      	mov	r1, r0
    c35a:	b120      	cbz	r0, c366 <usb_serial_flush_output+0x42>
			usb_tx(CDC_TX_ENDPOINT, tx);
    c35c:	2004      	movs	r0, #4
			usb_cdc_transmit_flush_timer = 0;
    c35e:	701c      	strb	r4, [r3, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
    c360:	f7ff fa1c 	bl	b79c <usb_tx>
    c364:	e7f2      	b.n	c34c <usb_serial_flush_output+0x28>
			usb_cdc_transmit_flush_timer = 1;
    c366:	701f      	strb	r7, [r3, #0]
    c368:	e7f0      	b.n	c34c <usb_serial_flush_output+0x28>
    c36a:	bf00      	nop
    c36c:	1fffd5b8 	.word	0x1fffd5b8
    c370:	1fffd5d0 	.word	0x1fffd5d0
    c374:	1fffd5cd 	.word	0x1fffd5cd
    c378:	1fffd5e4 	.word	0x1fffd5e4

0000c37c <usb_serial_flush_callback>:

void usb_serial_flush_callback(void)
{
    c37c:	b538      	push	{r3, r4, r5, lr}
	if (tx_noautoflush) return;
    c37e:	4b0e      	ldr	r3, [pc, #56]	; (c3b8 <usb_serial_flush_callback+0x3c>)
    c380:	781b      	ldrb	r3, [r3, #0]
    c382:	b953      	cbnz	r3, c39a <usb_serial_flush_callback+0x1e>
	if (tx_packet) {
    c384:	4c0d      	ldr	r4, [pc, #52]	; (c3bc <usb_serial_flush_callback+0x40>)
    c386:	6821      	ldr	r1, [r4, #0]
    c388:	b141      	cbz	r1, c39c <usb_serial_flush_callback+0x20>
    c38a:	f003 05ff 	and.w	r5, r3, #255	; 0xff
		tx_packet->len = tx_packet->index;
    c38e:	884b      	ldrh	r3, [r1, #2]
    c390:	800b      	strh	r3, [r1, #0]
		usb_tx(CDC_TX_ENDPOINT, tx_packet);
    c392:	2004      	movs	r0, #4
    c394:	f7ff fa02 	bl	b79c <usb_tx>
		tx_packet = NULL;
    c398:	6025      	str	r5, [r4, #0]
			usb_tx(CDC_TX_ENDPOINT, tx);
		} else {
			usb_cdc_transmit_flush_timer = 1;
		}
	}
}
    c39a:	bd38      	pop	{r3, r4, r5, pc}
		usb_packet_t *tx = usb_malloc();
    c39c:	f7ff fe56 	bl	c04c <usb_malloc>
		if (tx) {
    c3a0:	4601      	mov	r1, r0
    c3a2:	b120      	cbz	r0, c3ae <usb_serial_flush_callback+0x32>
}
    c3a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			usb_tx(CDC_TX_ENDPOINT, tx);
    c3a8:	2004      	movs	r0, #4
    c3aa:	f7ff b9f7 	b.w	b79c <usb_tx>
			usb_cdc_transmit_flush_timer = 1;
    c3ae:	4b04      	ldr	r3, [pc, #16]	; (c3c0 <usb_serial_flush_callback+0x44>)
    c3b0:	2201      	movs	r2, #1
    c3b2:	701a      	strb	r2, [r3, #0]
}
    c3b4:	bd38      	pop	{r3, r4, r5, pc}
    c3b6:	bf00      	nop
    c3b8:	1fffd5cd 	.word	0x1fffd5cd
    c3bc:	1fffd5d0 	.word	0x1fffd5d0
    c3c0:	1fffd5e4 	.word	0x1fffd5e4

0000c3c4 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    c3c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    c3c8:	4e32      	ldr	r6, [pc, #200]	; (c494 <yield+0xd0>)
    c3ca:	7833      	ldrb	r3, [r6, #0]
    c3cc:	b163      	cbz	r3, c3e8 <yield+0x24>
	if (running) return; // TODO: does this need to be atomic?
    c3ce:	4f32      	ldr	r7, [pc, #200]	; (c498 <yield+0xd4>)
    c3d0:	783a      	ldrb	r2, [r7, #0]
    c3d2:	b94a      	cbnz	r2, c3e8 <yield+0x24>
	running = 1;
    c3d4:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c3d6:	07d9      	lsls	r1, r3, #31
	running = 1;
    c3d8:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    c3da:	d443      	bmi.n	c464 <yield+0xa0>
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIALUSB2) {
		if (SerialUSB2.available()) serialEventUSB2();
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    c3dc:	079a      	lsls	r2, r3, #30
    c3de:	d426      	bmi.n	c42e <yield+0x6a>
		HardwareSerial::processSerialEventsList();
	}
	running = 0;
    c3e0:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c3e2:	075b      	lsls	r3, r3, #29
	running = 0;
    c3e4:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c3e6:	d401      	bmi.n	c3ec <yield+0x28>
	
};
    c3e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (!firstYield) return;  
    c3ec:	4b2b      	ldr	r3, [pc, #172]	; (c49c <yield+0xd8>)
    c3ee:	681a      	ldr	r2, [r3, #0]
    c3f0:	2a00      	cmp	r2, #0
    c3f2:	d0f9      	beq.n	c3e8 <yield+0x24>
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    c3f4:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    c3f8:	2a00      	cmp	r2, #0
    c3fa:	d1f5      	bne.n	c3e8 <yield+0x24>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    c3fc:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    c400:	b672      	cpsid	i
		EventResponder *first = firstYield;
    c402:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    c404:	2800      	cmp	r0, #0
    c406:	d03a      	beq.n	c47e <yield+0xba>
		if (runningFromYield) {
    c408:	4c25      	ldr	r4, [pc, #148]	; (c4a0 <yield+0xdc>)
    c40a:	7821      	ldrb	r1, [r4, #0]
    c40c:	2900      	cmp	r1, #0
    c40e:	d136      	bne.n	c47e <yield+0xba>
		firstYield = first->_next;
    c410:	6942      	ldr	r2, [r0, #20]
    c412:	601a      	str	r2, [r3, #0]
		runningFromYield = true;
    c414:	2301      	movs	r3, #1
    c416:	7023      	strb	r3, [r4, #0]
		if (firstYield) {
    c418:	2a00      	cmp	r2, #0
    c41a:	d037      	beq.n	c48c <yield+0xc8>
			firstYield->_prev = nullptr;
    c41c:	6191      	str	r1, [r2, #24]
		if (doit) __enable_irq();
    c41e:	b905      	cbnz	r5, c422 <yield+0x5e>
    c420:	b662      	cpsie	i
		first->_triggered = false;
    c422:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    c424:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    c426:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    c428:	4798      	blx	r3
		runningFromYield = false;
    c42a:	7025      	strb	r5, [r4, #0]
    c42c:	e7dc      	b.n	c3e8 <yield+0x24>
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c42e:	f8df 8074 	ldr.w	r8, [pc, #116]	; c4a4 <yield+0xe0>
    c432:	f898 2000 	ldrb.w	r2, [r8]
    c436:	2a00      	cmp	r2, #0
    c438:	d0d2      	beq.n	c3e0 <yield+0x1c>
    c43a:	2500      	movs	r5, #0
    c43c:	f8df 9068 	ldr.w	r9, [pc, #104]	; c4a8 <yield+0xe4>
    c440:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    c442:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		if (available()) (*_serialEvent)();
    c446:	6823      	ldr	r3, [r4, #0]
    c448:	4620      	mov	r0, r4
    c44a:	691b      	ldr	r3, [r3, #16]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c44c:	3501      	adds	r5, #1
		if (available()) (*_serialEvent)();
    c44e:	4798      	blx	r3
    c450:	b108      	cbz	r0, c456 <yield+0x92>
    c452:	6923      	ldr	r3, [r4, #16]
    c454:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c456:	f898 2000 	ldrb.w	r2, [r8]
    c45a:	b2eb      	uxtb	r3, r5
    c45c:	429a      	cmp	r2, r3
    c45e:	d8f0      	bhi.n	c442 <yield+0x7e>
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    c460:	7833      	ldrb	r3, [r6, #0]
    c462:	e7bd      	b.n	c3e0 <yield+0x1c>
        virtual int available() { return usb_serial_available(); }
    c464:	f7ff fe76 	bl	c154 <usb_serial_available>
		if (Serial.available()) serialEvent();
    c468:	b968      	cbnz	r0, c486 <yield+0xc2>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    c46a:	4b10      	ldr	r3, [pc, #64]	; (c4ac <yield+0xe8>)
    c46c:	781b      	ldrb	r3, [r3, #0]
    c46e:	b90b      	cbnz	r3, c474 <yield+0xb0>
    c470:	7833      	ldrb	r3, [r6, #0]
    c472:	e7b3      	b.n	c3dc <yield+0x18>
    c474:	7833      	ldrb	r3, [r6, #0]
    c476:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    c47a:	7033      	strb	r3, [r6, #0]
    c47c:	e7ae      	b.n	c3dc <yield+0x18>
		if (doit) __enable_irq();
    c47e:	2d00      	cmp	r5, #0
    c480:	d1b2      	bne.n	c3e8 <yield+0x24>
    c482:	b662      	cpsie	i
    c484:	e7b0      	b.n	c3e8 <yield+0x24>
		if (Serial.available()) serialEvent();
    c486:	f000 f83d 	bl	c504 <serialEvent()>
    c48a:	e7ee      	b.n	c46a <yield+0xa6>
			lastYield = nullptr;
    c48c:	4b08      	ldr	r3, [pc, #32]	; (c4b0 <yield+0xec>)
    c48e:	601a      	str	r2, [r3, #0]
    c490:	e7c5      	b.n	c41e <yield+0x5a>
    c492:	bf00      	nop
    c494:	1fff8a10 	.word	0x1fff8a10
    c498:	1fffd5e5 	.word	0x1fffd5e5
    c49c:	1fffd3a8 	.word	0x1fffd3a8
    c4a0:	1fffd3b4 	.word	0x1fffd3b4
    c4a4:	1fffd5f4 	.word	0x1fffd5f4
    c4a8:	1fffd5e8 	.word	0x1fffd5e8
    c4ac:	000153d4 	.word	0x000153d4
    c4b0:	1fffd3b8 	.word	0x1fffd3b8

0000c4b4 <HardwareSerial::addToSerialEventsList()>:
HardwareSerial 	*HardwareSerial::s_serials_with_serial_events[CNT_HARDWARE_SERIAL];
uint8_t 		HardwareSerial::s_count_serials_with_serial_events = 0;

// simple helper function that add us to the list of Serial ports that have
// their own serialEvent code defined that needs to be called at yield.
void HardwareSerial::addToSerialEventsList() {
    c4b4:	b470      	push	{r4, r5, r6}
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c4b6:	4e10      	ldr	r6, [pc, #64]	; (c4f8 <HardwareSerial::addToSerialEventsList()+0x44>)
    c4b8:	4d10      	ldr	r5, [pc, #64]	; (c4fc <HardwareSerial::addToSerialEventsList()+0x48>)
    c4ba:	7834      	ldrb	r4, [r6, #0]
    c4bc:	b1d4      	cbz	r4, c4f4 <HardwareSerial::addToSerialEventsList()+0x40>
    c4be:	1e62      	subs	r2, r4, #1
    c4c0:	b2d2      	uxtb	r2, r2
    c4c2:	1d29      	adds	r1, r5, #4
    c4c4:	462b      	mov	r3, r5
    c4c6:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    c4ca:	e001      	b.n	c4d0 <HardwareSerial::addToSerialEventsList()+0x1c>
    c4cc:	428b      	cmp	r3, r1
    c4ce:	d005      	beq.n	c4dc <HardwareSerial::addToSerialEventsList()+0x28>
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
    c4d0:	f853 2b04 	ldr.w	r2, [r3], #4
    c4d4:	4282      	cmp	r2, r0
    c4d6:	d1f9      	bne.n	c4cc <HardwareSerial::addToSerialEventsList()+0x18>
	}

	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
}
    c4d8:	bc70      	pop	{r4, r5, r6}
    c4da:	4770      	bx	lr
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c4dc:	1c63      	adds	r3, r4, #1
    c4de:	b2db      	uxtb	r3, r3
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c4e0:	4a07      	ldr	r2, [pc, #28]	; (c500 <HardwareSerial::addToSerialEventsList()+0x4c>)
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c4e2:	7033      	strb	r3, [r6, #0]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c4e4:	7813      	ldrb	r3, [r2, #0]
	s_serials_with_serial_events[s_count_serials_with_serial_events++] = this;
    c4e6:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	yield_active_check_flags |= YIELD_CHECK_HARDWARE_SERIAL;
    c4ea:	f043 0302 	orr.w	r3, r3, #2
    c4ee:	7013      	strb	r3, [r2, #0]
}
    c4f0:	bc70      	pop	{r4, r5, r6}
    c4f2:	4770      	bx	lr
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    c4f4:	2301      	movs	r3, #1
    c4f6:	e7f3      	b.n	c4e0 <HardwareSerial::addToSerialEventsList()+0x2c>
    c4f8:	1fffd5f4 	.word	0x1fffd5f4
    c4fc:	1fffd5e8 	.word	0x1fffd5e8
    c500:	1fff8a10 	.word	0x1fff8a10

0000c504 <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
}
    c504:	4770      	bx	lr
    c506:	bf00      	nop

0000c508 <usb_init_serialnumber>:
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    c508:	b510      	push	{r4, lr}
    c50a:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	__disable_irq();
    c50c:	b672      	cpsid	i
#if defined(HAS_KINETIS_FLASH_FTFA) || defined(HAS_KINETIS_FLASH_FTFL)
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    c50e:	4a17      	ldr	r2, [pc, #92]	; (c56c <usb_init_serialnumber+0x64>)
    c510:	2470      	movs	r4, #112	; 0x70
	FTFL_FCCOB0 = 0x41;
    c512:	2041      	movs	r0, #65	; 0x41
	FTFL_FCCOB1 = 15;
    c514:	210f      	movs	r1, #15
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    c516:	2380      	movs	r3, #128	; 0x80
	FTFL_FSTAT = FTFL_FSTAT_RDCOLERR | FTFL_FSTAT_ACCERR | FTFL_FSTAT_FPVIOL;
    c518:	7014      	strb	r4, [r2, #0]
	FTFL_FCCOB0 = 0x41;
    c51a:	71d0      	strb	r0, [r2, #7]
	FTFL_FCCOB1 = 15;
    c51c:	7191      	strb	r1, [r2, #6]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
    c51e:	7013      	strb	r3, [r2, #0]
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
    c520:	7813      	ldrb	r3, [r2, #0]
    c522:	061b      	lsls	r3, r3, #24
    c524:	d5fc      	bpl.n	c520 <usb_init_serialnumber+0x18>
	num = *(uint32_t *)&FTFL_FCCOB7;
    c526:	6890      	ldr	r0, [r2, #8]
	FTFL_FSTAT = FTFL_FSTAT_CCIF;
	while (!(FTFL_FSTAT & FTFL_FSTAT_CCIF)) ; // wait
	num = *(uint32_t *)&FTFL_FCCOBB;
	kinetis_hsrun_enable();
#endif
	__enable_irq();
    c528:	b662      	cpsie	i
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    c52a:	4b11      	ldr	r3, [pc, #68]	; (c570 <usb_init_serialnumber+0x68>)
    c52c:	4c11      	ldr	r4, [pc, #68]	; (c574 <usb_init_serialnumber+0x6c>)
    c52e:	4298      	cmp	r0, r3
    c530:	bf38      	it	cc
    c532:	eb00 0080 	addcc.w	r0, r0, r0, lsl #2
	ultoa(num, buf, 10);
    c536:	a901      	add	r1, sp, #4
	if (num < 10000000) num = num * 10;
    c538:	bf38      	it	cc
    c53a:	0040      	lslcc	r0, r0, #1
	ultoa(num, buf, 10);
    c53c:	220a      	movs	r2, #10
    c53e:	f7fd fd27 	bl	9f90 <ultoa>
	for (i=0; i<10; i++) {
    c542:	a901      	add	r1, sp, #4
    c544:	4620      	mov	r0, r4
    c546:	2300      	movs	r3, #0
		char c = buf[i];
    c548:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    c54c:	3301      	adds	r3, #1
		if (!c) break;
    c54e:	b13a      	cbz	r2, c560 <usb_init_serialnumber+0x58>
	for (i=0; i<10; i++) {
    c550:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    c552:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    c556:	d1f7      	bne.n	c548 <usb_init_serialnumber+0x40>
    c558:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c55a:	7023      	strb	r3, [r4, #0]
}
    c55c:	b004      	add	sp, #16
    c55e:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    c560:	005b      	lsls	r3, r3, #1
    c562:	b2db      	uxtb	r3, r3
    c564:	7023      	strb	r3, [r4, #0]
}
    c566:	b004      	add	sp, #16
    c568:	bd10      	pop	{r4, pc}
    c56a:	bf00      	nop
    c56c:	40020000 	.word	0x40020000
    c570:	00989680 	.word	0x00989680
    c574:	1fff8aa0 	.word	0x1fff8aa0

0000c578 <expf>:
    c578:	b538      	push	{r3, r4, r5, lr}
    c57a:	4604      	mov	r4, r0
    c57c:	f000 f82c 	bl	c5d8 <__ieee754_expf>
    c580:	4605      	mov	r5, r0
    c582:	4620      	mov	r0, r4
    c584:	f000 f820 	bl	c5c8 <finitef>
    c588:	b148      	cbz	r0, c59e <expf+0x26>
    c58a:	490d      	ldr	r1, [pc, #52]	; (c5c0 <expf+0x48>)
    c58c:	4620      	mov	r0, r4
    c58e:	f000 feaf 	bl	d2f0 <__aeabi_fcmpgt>
    c592:	b930      	cbnz	r0, c5a2 <expf+0x2a>
    c594:	490b      	ldr	r1, [pc, #44]	; (c5c4 <expf+0x4c>)
    c596:	4620      	mov	r0, r4
    c598:	f000 fe8c 	bl	d2b4 <__aeabi_fcmplt>
    c59c:	b948      	cbnz	r0, c5b2 <expf+0x3a>
    c59e:	4628      	mov	r0, r5
    c5a0:	bd38      	pop	{r3, r4, r5, pc}
    c5a2:	f001 fe5b 	bl	e25c <__errno>
    c5a6:	f04f 45ff 	mov.w	r5, #2139095040	; 0x7f800000
    c5aa:	2322      	movs	r3, #34	; 0x22
    c5ac:	6003      	str	r3, [r0, #0]
    c5ae:	4628      	mov	r0, r5
    c5b0:	bd38      	pop	{r3, r4, r5, pc}
    c5b2:	f001 fe53 	bl	e25c <__errno>
    c5b6:	2322      	movs	r3, #34	; 0x22
    c5b8:	2500      	movs	r5, #0
    c5ba:	6003      	str	r3, [r0, #0]
    c5bc:	e7ef      	b.n	c59e <expf+0x26>
    c5be:	bf00      	nop
    c5c0:	42b17217 	.word	0x42b17217
    c5c4:	c2cff1b5 	.word	0xc2cff1b5

0000c5c8 <finitef>:
    c5c8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    c5cc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
    c5d0:	bfac      	ite	ge
    c5d2:	2000      	movge	r0, #0
    c5d4:	2001      	movlt	r0, #1
    c5d6:	4770      	bx	lr

0000c5d8 <__ieee754_expf>:
    c5d8:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
    c5dc:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
    c5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c5e4:	4604      	mov	r4, r0
    c5e6:	d86c      	bhi.n	c6c2 <__ieee754_expf+0xea>
    c5e8:	ea4f 75d0 	mov.w	r5, r0, lsr #31
    c5ec:	f000 80c6 	beq.w	c77c <__ieee754_expf+0x1a4>
    c5f0:	497a      	ldr	r1, [pc, #488]	; (c7dc <__ieee754_expf+0x204>)
    c5f2:	4288      	cmp	r0, r1
    c5f4:	f300 80b4 	bgt.w	c760 <__ieee754_expf+0x188>
    c5f8:	2800      	cmp	r0, #0
    c5fa:	f2c0 80b6 	blt.w	c76a <__ieee754_expf+0x192>
    c5fe:	4b78      	ldr	r3, [pc, #480]	; (c7e0 <__ieee754_expf+0x208>)
    c600:	429a      	cmp	r2, r3
    c602:	d963      	bls.n	c6cc <__ieee754_expf+0xf4>
    c604:	4b77      	ldr	r3, [pc, #476]	; (c7e4 <__ieee754_expf+0x20c>)
    c606:	429a      	cmp	r2, r3
    c608:	f200 80c5 	bhi.w	c796 <__ieee754_expf+0x1be>
    c60c:	4b76      	ldr	r3, [pc, #472]	; (c7e8 <__ieee754_expf+0x210>)
    c60e:	4620      	mov	r0, r4
    c610:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    c614:	f000 fba6 	bl	cd64 <__aeabi_fsub>
    c618:	4b74      	ldr	r3, [pc, #464]	; (c7ec <__ieee754_expf+0x214>)
    c61a:	f1c5 0601 	rsb	r6, r5, #1
    c61e:	f853 9025 	ldr.w	r9, [r3, r5, lsl #2]
    c622:	4680      	mov	r8, r0
    c624:	1b76      	subs	r6, r6, r5
    c626:	4649      	mov	r1, r9
    c628:	4640      	mov	r0, r8
    c62a:	f000 fb9b 	bl	cd64 <__aeabi_fsub>
    c62e:	4601      	mov	r1, r0
    c630:	4605      	mov	r5, r0
    c632:	f000 fca1 	bl	cf78 <__aeabi_fmul>
    c636:	496e      	ldr	r1, [pc, #440]	; (c7f0 <__ieee754_expf+0x218>)
    c638:	4604      	mov	r4, r0
    c63a:	f000 fc9d 	bl	cf78 <__aeabi_fmul>
    c63e:	496d      	ldr	r1, [pc, #436]	; (c7f4 <__ieee754_expf+0x21c>)
    c640:	f000 fb90 	bl	cd64 <__aeabi_fsub>
    c644:	4621      	mov	r1, r4
    c646:	f000 fc97 	bl	cf78 <__aeabi_fmul>
    c64a:	496b      	ldr	r1, [pc, #428]	; (c7f8 <__ieee754_expf+0x220>)
    c64c:	f000 fb8c 	bl	cd68 <__addsf3>
    c650:	4621      	mov	r1, r4
    c652:	f000 fc91 	bl	cf78 <__aeabi_fmul>
    c656:	4969      	ldr	r1, [pc, #420]	; (c7fc <__ieee754_expf+0x224>)
    c658:	f000 fb84 	bl	cd64 <__aeabi_fsub>
    c65c:	4621      	mov	r1, r4
    c65e:	f000 fc8b 	bl	cf78 <__aeabi_fmul>
    c662:	4967      	ldr	r1, [pc, #412]	; (c800 <__ieee754_expf+0x228>)
    c664:	f000 fb80 	bl	cd68 <__addsf3>
    c668:	4621      	mov	r1, r4
    c66a:	f000 fc85 	bl	cf78 <__aeabi_fmul>
    c66e:	4601      	mov	r1, r0
    c670:	4628      	mov	r0, r5
    c672:	f000 fb77 	bl	cd64 <__aeabi_fsub>
    c676:	462c      	mov	r4, r5
    c678:	4607      	mov	r7, r0
    c67a:	4682      	mov	sl, r0
    c67c:	2e00      	cmp	r6, #0
    c67e:	d057      	beq.n	c730 <__ieee754_expf+0x158>
    c680:	4639      	mov	r1, r7
    c682:	4628      	mov	r0, r5
    c684:	f000 fc78 	bl	cf78 <__aeabi_fmul>
    c688:	4639      	mov	r1, r7
    c68a:	4604      	mov	r4, r0
    c68c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c690:	f000 fb68 	bl	cd64 <__aeabi_fsub>
    c694:	4601      	mov	r1, r0
    c696:	4620      	mov	r0, r4
    c698:	f000 fd22 	bl	d0e0 <__aeabi_fdiv>
    c69c:	4601      	mov	r1, r0
    c69e:	4648      	mov	r0, r9
    c6a0:	f000 fb60 	bl	cd64 <__aeabi_fsub>
    c6a4:	4641      	mov	r1, r8
    c6a6:	f000 fb5d 	bl	cd64 <__aeabi_fsub>
    c6aa:	4601      	mov	r1, r0
    c6ac:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    c6b0:	f000 fb58 	bl	cd64 <__aeabi_fsub>
    c6b4:	f116 0f7d 	cmn.w	r6, #125	; 0x7d
    c6b8:	db64      	blt.n	c784 <__ieee754_expf+0x1ac>
    c6ba:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    c6be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6c2:	4601      	mov	r1, r0
    c6c4:	f000 fb50 	bl	cd68 <__addsf3>
    c6c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c6cc:	f1b2 5f50 	cmp.w	r2, #872415232	; 0x34000000
    c6d0:	d209      	bcs.n	c6e6 <__ieee754_expf+0x10e>
    c6d2:	494c      	ldr	r1, [pc, #304]	; (c804 <__ieee754_expf+0x22c>)
    c6d4:	4620      	mov	r0, r4
    c6d6:	f000 fb47 	bl	cd68 <__addsf3>
    c6da:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c6de:	f000 fe07 	bl	d2f0 <__aeabi_fcmpgt>
    c6e2:	2800      	cmp	r0, #0
    c6e4:	d174      	bne.n	c7d0 <__ieee754_expf+0x1f8>
    c6e6:	4621      	mov	r1, r4
    c6e8:	4620      	mov	r0, r4
    c6ea:	f000 fc45 	bl	cf78 <__aeabi_fmul>
    c6ee:	4940      	ldr	r1, [pc, #256]	; (c7f0 <__ieee754_expf+0x218>)
    c6f0:	4605      	mov	r5, r0
    c6f2:	f000 fc41 	bl	cf78 <__aeabi_fmul>
    c6f6:	493f      	ldr	r1, [pc, #252]	; (c7f4 <__ieee754_expf+0x21c>)
    c6f8:	f000 fb34 	bl	cd64 <__aeabi_fsub>
    c6fc:	4629      	mov	r1, r5
    c6fe:	f000 fc3b 	bl	cf78 <__aeabi_fmul>
    c702:	493d      	ldr	r1, [pc, #244]	; (c7f8 <__ieee754_expf+0x220>)
    c704:	f000 fb30 	bl	cd68 <__addsf3>
    c708:	4629      	mov	r1, r5
    c70a:	f000 fc35 	bl	cf78 <__aeabi_fmul>
    c70e:	493b      	ldr	r1, [pc, #236]	; (c7fc <__ieee754_expf+0x224>)
    c710:	f000 fb28 	bl	cd64 <__aeabi_fsub>
    c714:	4629      	mov	r1, r5
    c716:	f000 fc2f 	bl	cf78 <__aeabi_fmul>
    c71a:	4939      	ldr	r1, [pc, #228]	; (c800 <__ieee754_expf+0x228>)
    c71c:	f000 fb24 	bl	cd68 <__addsf3>
    c720:	4629      	mov	r1, r5
    c722:	f000 fc29 	bl	cf78 <__aeabi_fmul>
    c726:	4601      	mov	r1, r0
    c728:	4620      	mov	r0, r4
    c72a:	f000 fb1b 	bl	cd64 <__aeabi_fsub>
    c72e:	4682      	mov	sl, r0
    c730:	4651      	mov	r1, sl
    c732:	4620      	mov	r0, r4
    c734:	f000 fc20 	bl	cf78 <__aeabi_fmul>
    c738:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c73c:	4605      	mov	r5, r0
    c73e:	4650      	mov	r0, sl
    c740:	f000 fb10 	bl	cd64 <__aeabi_fsub>
    c744:	4601      	mov	r1, r0
    c746:	4628      	mov	r0, r5
    c748:	f000 fcca 	bl	d0e0 <__aeabi_fdiv>
    c74c:	4621      	mov	r1, r4
    c74e:	f000 fb09 	bl	cd64 <__aeabi_fsub>
    c752:	4601      	mov	r1, r0
    c754:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
    c758:	f000 fb04 	bl	cd64 <__aeabi_fsub>
    c75c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c760:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c764:	2000      	movs	r0, #0
    c766:	f000 b87b 	b.w	c860 <__math_oflowf>
    c76a:	4b27      	ldr	r3, [pc, #156]	; (c808 <__ieee754_expf+0x230>)
    c76c:	429a      	cmp	r2, r3
    c76e:	f67f af46 	bls.w	c5fe <__ieee754_expf+0x26>
    c772:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c776:	2000      	movs	r0, #0
    c778:	f000 b86e 	b.w	c858 <__math_uflowf>
    c77c:	2d00      	cmp	r5, #0
    c77e:	d0a3      	beq.n	c6c8 <__ieee754_expf+0xf0>
    c780:	2000      	movs	r0, #0
    c782:	e7a1      	b.n	c6c8 <__ieee754_expf+0xf0>
    c784:	3664      	adds	r6, #100	; 0x64
    c786:	f04f 6158 	mov.w	r1, #226492416	; 0xd800000
    c78a:	eb00 50c6 	add.w	r0, r0, r6, lsl #23
    c78e:	f000 fbf3 	bl	cf78 <__aeabi_fmul>
    c792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c796:	491d      	ldr	r1, [pc, #116]	; (c80c <__ieee754_expf+0x234>)
    c798:	4620      	mov	r0, r4
    c79a:	f000 fbed 	bl	cf78 <__aeabi_fmul>
    c79e:	4b1c      	ldr	r3, [pc, #112]	; (c810 <__ieee754_expf+0x238>)
    c7a0:	f853 1025 	ldr.w	r1, [r3, r5, lsl #2]
    c7a4:	f000 fae0 	bl	cd68 <__addsf3>
    c7a8:	f000 fdac 	bl	d304 <__aeabi_f2iz>
    c7ac:	4606      	mov	r6, r0
    c7ae:	f000 fb8f 	bl	ced0 <__aeabi_i2f>
    c7b2:	4918      	ldr	r1, [pc, #96]	; (c814 <__ieee754_expf+0x23c>)
    c7b4:	4605      	mov	r5, r0
    c7b6:	f000 fbdf 	bl	cf78 <__aeabi_fmul>
    c7ba:	4601      	mov	r1, r0
    c7bc:	4620      	mov	r0, r4
    c7be:	f000 fad1 	bl	cd64 <__aeabi_fsub>
    c7c2:	4915      	ldr	r1, [pc, #84]	; (c818 <__ieee754_expf+0x240>)
    c7c4:	4680      	mov	r8, r0
    c7c6:	4628      	mov	r0, r5
    c7c8:	f000 fbd6 	bl	cf78 <__aeabi_fmul>
    c7cc:	4681      	mov	r9, r0
    c7ce:	e72a      	b.n	c626 <__ieee754_expf+0x4e>
    c7d0:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c7d4:	4620      	mov	r0, r4
    c7d6:	f000 fac7 	bl	cd68 <__addsf3>
    c7da:	e775      	b.n	c6c8 <__ieee754_expf+0xf0>
    c7dc:	42b17217 	.word	0x42b17217
    c7e0:	3eb17218 	.word	0x3eb17218
    c7e4:	3f851591 	.word	0x3f851591
    c7e8:	00015670 	.word	0x00015670
    c7ec:	00015678 	.word	0x00015678
    c7f0:	3331bb4c 	.word	0x3331bb4c
    c7f4:	35ddea0e 	.word	0x35ddea0e
    c7f8:	388ab355 	.word	0x388ab355
    c7fc:	3b360b61 	.word	0x3b360b61
    c800:	3e2aaaab 	.word	0x3e2aaaab
    c804:	7149f2ca 	.word	0x7149f2ca
    c808:	42cff1b5 	.word	0x42cff1b5
    c80c:	3fb8aa3b 	.word	0x3fb8aa3b
    c810:	00015668 	.word	0x00015668
    c814:	3f317180 	.word	0x3f317180
    c818:	3717f7d1 	.word	0x3717f7d1

0000c81c <with_errnof>:
    c81c:	b538      	push	{r3, r4, r5, lr}
    c81e:	4605      	mov	r5, r0
    c820:	460c      	mov	r4, r1
    c822:	f001 fd1b 	bl	e25c <__errno>
    c826:	4603      	mov	r3, r0
    c828:	4628      	mov	r0, r5
    c82a:	601c      	str	r4, [r3, #0]
    c82c:	bd38      	pop	{r3, r4, r5, pc}
    c82e:	bf00      	nop

0000c830 <xflowf>:
    c830:	b508      	push	{r3, lr}
    c832:	b140      	cbz	r0, c846 <xflowf+0x16>
    c834:	f101 4000 	add.w	r0, r1, #2147483648	; 0x80000000
    c838:	f000 fb9e 	bl	cf78 <__aeabi_fmul>
    c83c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c840:	2122      	movs	r1, #34	; 0x22
    c842:	f7ff bfeb 	b.w	c81c <with_errnof>
    c846:	4608      	mov	r0, r1
    c848:	f000 fb96 	bl	cf78 <__aeabi_fmul>
    c84c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    c850:	2122      	movs	r1, #34	; 0x22
    c852:	f7ff bfe3 	b.w	c81c <with_errnof>
    c856:	bf00      	nop

0000c858 <__math_uflowf>:
    c858:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    c85c:	f7ff bfe8 	b.w	c830 <xflowf>

0000c860 <__math_oflowf>:
    c860:	f04f 41e0 	mov.w	r1, #1879048192	; 0x70000000
    c864:	f7ff bfe4 	b.w	c830 <xflowf>

0000c868 <__aeabi_drsub>:
    c868:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c86c:	e002      	b.n	c874 <__adddf3>
    c86e:	bf00      	nop

0000c870 <__aeabi_dsub>:
    c870:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c874 <__adddf3>:
    c874:	b530      	push	{r4, r5, lr}
    c876:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c87a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c87e:	ea94 0f05 	teq	r4, r5
    c882:	bf08      	it	eq
    c884:	ea90 0f02 	teqeq	r0, r2
    c888:	bf1f      	itttt	ne
    c88a:	ea54 0c00 	orrsne.w	ip, r4, r0
    c88e:	ea55 0c02 	orrsne.w	ip, r5, r2
    c892:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c896:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c89a:	f000 80e2 	beq.w	ca62 <__adddf3+0x1ee>
    c89e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c8a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c8a6:	bfb8      	it	lt
    c8a8:	426d      	neglt	r5, r5
    c8aa:	dd0c      	ble.n	c8c6 <__adddf3+0x52>
    c8ac:	442c      	add	r4, r5
    c8ae:	ea80 0202 	eor.w	r2, r0, r2
    c8b2:	ea81 0303 	eor.w	r3, r1, r3
    c8b6:	ea82 0000 	eor.w	r0, r2, r0
    c8ba:	ea83 0101 	eor.w	r1, r3, r1
    c8be:	ea80 0202 	eor.w	r2, r0, r2
    c8c2:	ea81 0303 	eor.w	r3, r1, r3
    c8c6:	2d36      	cmp	r5, #54	; 0x36
    c8c8:	bf88      	it	hi
    c8ca:	bd30      	pophi	{r4, r5, pc}
    c8cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c8d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c8d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c8d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c8dc:	d002      	beq.n	c8e4 <__adddf3+0x70>
    c8de:	4240      	negs	r0, r0
    c8e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c8e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c8e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c8ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c8f0:	d002      	beq.n	c8f8 <__adddf3+0x84>
    c8f2:	4252      	negs	r2, r2
    c8f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c8f8:	ea94 0f05 	teq	r4, r5
    c8fc:	f000 80a7 	beq.w	ca4e <__adddf3+0x1da>
    c900:	f1a4 0401 	sub.w	r4, r4, #1
    c904:	f1d5 0e20 	rsbs	lr, r5, #32
    c908:	db0d      	blt.n	c926 <__adddf3+0xb2>
    c90a:	fa02 fc0e 	lsl.w	ip, r2, lr
    c90e:	fa22 f205 	lsr.w	r2, r2, r5
    c912:	1880      	adds	r0, r0, r2
    c914:	f141 0100 	adc.w	r1, r1, #0
    c918:	fa03 f20e 	lsl.w	r2, r3, lr
    c91c:	1880      	adds	r0, r0, r2
    c91e:	fa43 f305 	asr.w	r3, r3, r5
    c922:	4159      	adcs	r1, r3
    c924:	e00e      	b.n	c944 <__adddf3+0xd0>
    c926:	f1a5 0520 	sub.w	r5, r5, #32
    c92a:	f10e 0e20 	add.w	lr, lr, #32
    c92e:	2a01      	cmp	r2, #1
    c930:	fa03 fc0e 	lsl.w	ip, r3, lr
    c934:	bf28      	it	cs
    c936:	f04c 0c02 	orrcs.w	ip, ip, #2
    c93a:	fa43 f305 	asr.w	r3, r3, r5
    c93e:	18c0      	adds	r0, r0, r3
    c940:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c944:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c948:	d507      	bpl.n	c95a <__adddf3+0xe6>
    c94a:	f04f 0e00 	mov.w	lr, #0
    c94e:	f1dc 0c00 	rsbs	ip, ip, #0
    c952:	eb7e 0000 	sbcs.w	r0, lr, r0
    c956:	eb6e 0101 	sbc.w	r1, lr, r1
    c95a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c95e:	d31b      	bcc.n	c998 <__adddf3+0x124>
    c960:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c964:	d30c      	bcc.n	c980 <__adddf3+0x10c>
    c966:	0849      	lsrs	r1, r1, #1
    c968:	ea5f 0030 	movs.w	r0, r0, rrx
    c96c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c970:	f104 0401 	add.w	r4, r4, #1
    c974:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c978:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c97c:	f080 809a 	bcs.w	cab4 <__adddf3+0x240>
    c980:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c984:	bf08      	it	eq
    c986:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c98a:	f150 0000 	adcs.w	r0, r0, #0
    c98e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c992:	ea41 0105 	orr.w	r1, r1, r5
    c996:	bd30      	pop	{r4, r5, pc}
    c998:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c99c:	4140      	adcs	r0, r0
    c99e:	eb41 0101 	adc.w	r1, r1, r1
    c9a2:	3c01      	subs	r4, #1
    c9a4:	bf28      	it	cs
    c9a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
    c9aa:	d2e9      	bcs.n	c980 <__adddf3+0x10c>
    c9ac:	f091 0f00 	teq	r1, #0
    c9b0:	bf04      	itt	eq
    c9b2:	4601      	moveq	r1, r0
    c9b4:	2000      	moveq	r0, #0
    c9b6:	fab1 f381 	clz	r3, r1
    c9ba:	bf08      	it	eq
    c9bc:	3320      	addeq	r3, #32
    c9be:	f1a3 030b 	sub.w	r3, r3, #11
    c9c2:	f1b3 0220 	subs.w	r2, r3, #32
    c9c6:	da0c      	bge.n	c9e2 <__adddf3+0x16e>
    c9c8:	320c      	adds	r2, #12
    c9ca:	dd08      	ble.n	c9de <__adddf3+0x16a>
    c9cc:	f102 0c14 	add.w	ip, r2, #20
    c9d0:	f1c2 020c 	rsb	r2, r2, #12
    c9d4:	fa01 f00c 	lsl.w	r0, r1, ip
    c9d8:	fa21 f102 	lsr.w	r1, r1, r2
    c9dc:	e00c      	b.n	c9f8 <__adddf3+0x184>
    c9de:	f102 0214 	add.w	r2, r2, #20
    c9e2:	bfd8      	it	le
    c9e4:	f1c2 0c20 	rsble	ip, r2, #32
    c9e8:	fa01 f102 	lsl.w	r1, r1, r2
    c9ec:	fa20 fc0c 	lsr.w	ip, r0, ip
    c9f0:	bfdc      	itt	le
    c9f2:	ea41 010c 	orrle.w	r1, r1, ip
    c9f6:	4090      	lslle	r0, r2
    c9f8:	1ae4      	subs	r4, r4, r3
    c9fa:	bfa2      	ittt	ge
    c9fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    ca00:	4329      	orrge	r1, r5
    ca02:	bd30      	popge	{r4, r5, pc}
    ca04:	ea6f 0404 	mvn.w	r4, r4
    ca08:	3c1f      	subs	r4, #31
    ca0a:	da1c      	bge.n	ca46 <__adddf3+0x1d2>
    ca0c:	340c      	adds	r4, #12
    ca0e:	dc0e      	bgt.n	ca2e <__adddf3+0x1ba>
    ca10:	f104 0414 	add.w	r4, r4, #20
    ca14:	f1c4 0220 	rsb	r2, r4, #32
    ca18:	fa20 f004 	lsr.w	r0, r0, r4
    ca1c:	fa01 f302 	lsl.w	r3, r1, r2
    ca20:	ea40 0003 	orr.w	r0, r0, r3
    ca24:	fa21 f304 	lsr.w	r3, r1, r4
    ca28:	ea45 0103 	orr.w	r1, r5, r3
    ca2c:	bd30      	pop	{r4, r5, pc}
    ca2e:	f1c4 040c 	rsb	r4, r4, #12
    ca32:	f1c4 0220 	rsb	r2, r4, #32
    ca36:	fa20 f002 	lsr.w	r0, r0, r2
    ca3a:	fa01 f304 	lsl.w	r3, r1, r4
    ca3e:	ea40 0003 	orr.w	r0, r0, r3
    ca42:	4629      	mov	r1, r5
    ca44:	bd30      	pop	{r4, r5, pc}
    ca46:	fa21 f004 	lsr.w	r0, r1, r4
    ca4a:	4629      	mov	r1, r5
    ca4c:	bd30      	pop	{r4, r5, pc}
    ca4e:	f094 0f00 	teq	r4, #0
    ca52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    ca56:	bf06      	itte	eq
    ca58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    ca5c:	3401      	addeq	r4, #1
    ca5e:	3d01      	subne	r5, #1
    ca60:	e74e      	b.n	c900 <__adddf3+0x8c>
    ca62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    ca66:	bf18      	it	ne
    ca68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    ca6c:	d029      	beq.n	cac2 <__adddf3+0x24e>
    ca6e:	ea94 0f05 	teq	r4, r5
    ca72:	bf08      	it	eq
    ca74:	ea90 0f02 	teqeq	r0, r2
    ca78:	d005      	beq.n	ca86 <__adddf3+0x212>
    ca7a:	ea54 0c00 	orrs.w	ip, r4, r0
    ca7e:	bf04      	itt	eq
    ca80:	4619      	moveq	r1, r3
    ca82:	4610      	moveq	r0, r2
    ca84:	bd30      	pop	{r4, r5, pc}
    ca86:	ea91 0f03 	teq	r1, r3
    ca8a:	bf1e      	ittt	ne
    ca8c:	2100      	movne	r1, #0
    ca8e:	2000      	movne	r0, #0
    ca90:	bd30      	popne	{r4, r5, pc}
    ca92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    ca96:	d105      	bne.n	caa4 <__adddf3+0x230>
    ca98:	0040      	lsls	r0, r0, #1
    ca9a:	4149      	adcs	r1, r1
    ca9c:	bf28      	it	cs
    ca9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    caa2:	bd30      	pop	{r4, r5, pc}
    caa4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    caa8:	bf3c      	itt	cc
    caaa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    caae:	bd30      	popcc	{r4, r5, pc}
    cab0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cab4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    cab8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cabc:	f04f 0000 	mov.w	r0, #0
    cac0:	bd30      	pop	{r4, r5, pc}
    cac2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    cac6:	bf1a      	itte	ne
    cac8:	4619      	movne	r1, r3
    caca:	4610      	movne	r0, r2
    cacc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    cad0:	bf1c      	itt	ne
    cad2:	460b      	movne	r3, r1
    cad4:	4602      	movne	r2, r0
    cad6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cada:	bf06      	itte	eq
    cadc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    cae0:	ea91 0f03 	teqeq	r1, r3
    cae4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    cae8:	bd30      	pop	{r4, r5, pc}
    caea:	bf00      	nop

0000caec <__aeabi_ui2d>:
    caec:	f090 0f00 	teq	r0, #0
    caf0:	bf04      	itt	eq
    caf2:	2100      	moveq	r1, #0
    caf4:	4770      	bxeq	lr
    caf6:	b530      	push	{r4, r5, lr}
    caf8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cafc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cb00:	f04f 0500 	mov.w	r5, #0
    cb04:	f04f 0100 	mov.w	r1, #0
    cb08:	e750      	b.n	c9ac <__adddf3+0x138>
    cb0a:	bf00      	nop

0000cb0c <__aeabi_i2d>:
    cb0c:	f090 0f00 	teq	r0, #0
    cb10:	bf04      	itt	eq
    cb12:	2100      	moveq	r1, #0
    cb14:	4770      	bxeq	lr
    cb16:	b530      	push	{r4, r5, lr}
    cb18:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cb1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cb20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    cb24:	bf48      	it	mi
    cb26:	4240      	negmi	r0, r0
    cb28:	f04f 0100 	mov.w	r1, #0
    cb2c:	e73e      	b.n	c9ac <__adddf3+0x138>
    cb2e:	bf00      	nop

0000cb30 <__aeabi_f2d>:
    cb30:	0042      	lsls	r2, r0, #1
    cb32:	ea4f 01e2 	mov.w	r1, r2, asr #3
    cb36:	ea4f 0131 	mov.w	r1, r1, rrx
    cb3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
    cb3e:	bf1f      	itttt	ne
    cb40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    cb44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    cb48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    cb4c:	4770      	bxne	lr
    cb4e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
    cb52:	bf08      	it	eq
    cb54:	4770      	bxeq	lr
    cb56:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
    cb5a:	bf04      	itt	eq
    cb5c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
    cb60:	4770      	bxeq	lr
    cb62:	b530      	push	{r4, r5, lr}
    cb64:	f44f 7460 	mov.w	r4, #896	; 0x380
    cb68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cb6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cb70:	e71c      	b.n	c9ac <__adddf3+0x138>
    cb72:	bf00      	nop

0000cb74 <__aeabi_ul2d>:
    cb74:	ea50 0201 	orrs.w	r2, r0, r1
    cb78:	bf08      	it	eq
    cb7a:	4770      	bxeq	lr
    cb7c:	b530      	push	{r4, r5, lr}
    cb7e:	f04f 0500 	mov.w	r5, #0
    cb82:	e00a      	b.n	cb9a <__aeabi_l2d+0x16>

0000cb84 <__aeabi_l2d>:
    cb84:	ea50 0201 	orrs.w	r2, r0, r1
    cb88:	bf08      	it	eq
    cb8a:	4770      	bxeq	lr
    cb8c:	b530      	push	{r4, r5, lr}
    cb8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    cb92:	d502      	bpl.n	cb9a <__aeabi_l2d+0x16>
    cb94:	4240      	negs	r0, r0
    cb96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cb9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cb9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cba2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    cba6:	f43f aed8 	beq.w	c95a <__adddf3+0xe6>
    cbaa:	f04f 0203 	mov.w	r2, #3
    cbae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cbb2:	bf18      	it	ne
    cbb4:	3203      	addne	r2, #3
    cbb6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cbba:	bf18      	it	ne
    cbbc:	3203      	addne	r2, #3
    cbbe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    cbc2:	f1c2 0320 	rsb	r3, r2, #32
    cbc6:	fa00 fc03 	lsl.w	ip, r0, r3
    cbca:	fa20 f002 	lsr.w	r0, r0, r2
    cbce:	fa01 fe03 	lsl.w	lr, r1, r3
    cbd2:	ea40 000e 	orr.w	r0, r0, lr
    cbd6:	fa21 f102 	lsr.w	r1, r1, r2
    cbda:	4414      	add	r4, r2
    cbdc:	e6bd      	b.n	c95a <__adddf3+0xe6>
    cbde:	bf00      	nop

0000cbe0 <__gedf2>:
    cbe0:	f04f 3cff 	mov.w	ip, #4294967295
    cbe4:	e006      	b.n	cbf4 <__cmpdf2+0x4>
    cbe6:	bf00      	nop

0000cbe8 <__ledf2>:
    cbe8:	f04f 0c01 	mov.w	ip, #1
    cbec:	e002      	b.n	cbf4 <__cmpdf2+0x4>
    cbee:	bf00      	nop

0000cbf0 <__cmpdf2>:
    cbf0:	f04f 0c01 	mov.w	ip, #1
    cbf4:	f84d cd04 	str.w	ip, [sp, #-4]!
    cbf8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cbfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cc00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cc04:	bf18      	it	ne
    cc06:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
    cc0a:	d01b      	beq.n	cc44 <__cmpdf2+0x54>
    cc0c:	b001      	add	sp, #4
    cc0e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
    cc12:	bf0c      	ite	eq
    cc14:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
    cc18:	ea91 0f03 	teqne	r1, r3
    cc1c:	bf02      	ittt	eq
    cc1e:	ea90 0f02 	teqeq	r0, r2
    cc22:	2000      	moveq	r0, #0
    cc24:	4770      	bxeq	lr
    cc26:	f110 0f00 	cmn.w	r0, #0
    cc2a:	ea91 0f03 	teq	r1, r3
    cc2e:	bf58      	it	pl
    cc30:	4299      	cmppl	r1, r3
    cc32:	bf08      	it	eq
    cc34:	4290      	cmpeq	r0, r2
    cc36:	bf2c      	ite	cs
    cc38:	17d8      	asrcs	r0, r3, #31
    cc3a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
    cc3e:	f040 0001 	orr.w	r0, r0, #1
    cc42:	4770      	bx	lr
    cc44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    cc48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cc4c:	d102      	bne.n	cc54 <__cmpdf2+0x64>
    cc4e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    cc52:	d107      	bne.n	cc64 <__cmpdf2+0x74>
    cc54:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cc58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cc5c:	d1d6      	bne.n	cc0c <__cmpdf2+0x1c>
    cc5e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cc62:	d0d3      	beq.n	cc0c <__cmpdf2+0x1c>
    cc64:	f85d 0b04 	ldr.w	r0, [sp], #4
    cc68:	4770      	bx	lr
    cc6a:	bf00      	nop

0000cc6c <__aeabi_cdrcmple>:
    cc6c:	4684      	mov	ip, r0
    cc6e:	4610      	mov	r0, r2
    cc70:	4662      	mov	r2, ip
    cc72:	468c      	mov	ip, r1
    cc74:	4619      	mov	r1, r3
    cc76:	4663      	mov	r3, ip
    cc78:	e000      	b.n	cc7c <__aeabi_cdcmpeq>
    cc7a:	bf00      	nop

0000cc7c <__aeabi_cdcmpeq>:
    cc7c:	b501      	push	{r0, lr}
    cc7e:	f7ff ffb7 	bl	cbf0 <__cmpdf2>
    cc82:	2800      	cmp	r0, #0
    cc84:	bf48      	it	mi
    cc86:	f110 0f00 	cmnmi.w	r0, #0
    cc8a:	bd01      	pop	{r0, pc}

0000cc8c <__aeabi_dcmpeq>:
    cc8c:	f84d ed08 	str.w	lr, [sp, #-8]!
    cc90:	f7ff fff4 	bl	cc7c <__aeabi_cdcmpeq>
    cc94:	bf0c      	ite	eq
    cc96:	2001      	moveq	r0, #1
    cc98:	2000      	movne	r0, #0
    cc9a:	f85d fb08 	ldr.w	pc, [sp], #8
    cc9e:	bf00      	nop

0000cca0 <__aeabi_dcmplt>:
    cca0:	f84d ed08 	str.w	lr, [sp, #-8]!
    cca4:	f7ff ffea 	bl	cc7c <__aeabi_cdcmpeq>
    cca8:	bf34      	ite	cc
    ccaa:	2001      	movcc	r0, #1
    ccac:	2000      	movcs	r0, #0
    ccae:	f85d fb08 	ldr.w	pc, [sp], #8
    ccb2:	bf00      	nop

0000ccb4 <__aeabi_dcmple>:
    ccb4:	f84d ed08 	str.w	lr, [sp, #-8]!
    ccb8:	f7ff ffe0 	bl	cc7c <__aeabi_cdcmpeq>
    ccbc:	bf94      	ite	ls
    ccbe:	2001      	movls	r0, #1
    ccc0:	2000      	movhi	r0, #0
    ccc2:	f85d fb08 	ldr.w	pc, [sp], #8
    ccc6:	bf00      	nop

0000ccc8 <__aeabi_dcmpge>:
    ccc8:	f84d ed08 	str.w	lr, [sp, #-8]!
    cccc:	f7ff ffce 	bl	cc6c <__aeabi_cdrcmple>
    ccd0:	bf94      	ite	ls
    ccd2:	2001      	movls	r0, #1
    ccd4:	2000      	movhi	r0, #0
    ccd6:	f85d fb08 	ldr.w	pc, [sp], #8
    ccda:	bf00      	nop

0000ccdc <__aeabi_dcmpgt>:
    ccdc:	f84d ed08 	str.w	lr, [sp, #-8]!
    cce0:	f7ff ffc4 	bl	cc6c <__aeabi_cdrcmple>
    cce4:	bf34      	ite	cc
    cce6:	2001      	movcc	r0, #1
    cce8:	2000      	movcs	r0, #0
    ccea:	f85d fb08 	ldr.w	pc, [sp], #8
    ccee:	bf00      	nop

0000ccf0 <__aeabi_dcmpun>:
    ccf0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    ccf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    ccf8:	d102      	bne.n	cd00 <__aeabi_dcmpun+0x10>
    ccfa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    ccfe:	d10a      	bne.n	cd16 <__aeabi_dcmpun+0x26>
    cd00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    cd04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    cd08:	d102      	bne.n	cd10 <__aeabi_dcmpun+0x20>
    cd0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    cd0e:	d102      	bne.n	cd16 <__aeabi_dcmpun+0x26>
    cd10:	f04f 0000 	mov.w	r0, #0
    cd14:	4770      	bx	lr
    cd16:	f04f 0001 	mov.w	r0, #1
    cd1a:	4770      	bx	lr

0000cd1c <__aeabi_d2uiz>:
    cd1c:	004a      	lsls	r2, r1, #1
    cd1e:	d211      	bcs.n	cd44 <__aeabi_d2uiz+0x28>
    cd20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    cd24:	d211      	bcs.n	cd4a <__aeabi_d2uiz+0x2e>
    cd26:	d50d      	bpl.n	cd44 <__aeabi_d2uiz+0x28>
    cd28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    cd2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    cd30:	d40e      	bmi.n	cd50 <__aeabi_d2uiz+0x34>
    cd32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cd36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cd3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    cd3e:	fa23 f002 	lsr.w	r0, r3, r2
    cd42:	4770      	bx	lr
    cd44:	f04f 0000 	mov.w	r0, #0
    cd48:	4770      	bx	lr
    cd4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    cd4e:	d102      	bne.n	cd56 <__aeabi_d2uiz+0x3a>
    cd50:	f04f 30ff 	mov.w	r0, #4294967295
    cd54:	4770      	bx	lr
    cd56:	f04f 0000 	mov.w	r0, #0
    cd5a:	4770      	bx	lr

0000cd5c <__aeabi_frsub>:
    cd5c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    cd60:	e002      	b.n	cd68 <__addsf3>
    cd62:	bf00      	nop

0000cd64 <__aeabi_fsub>:
    cd64:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0000cd68 <__addsf3>:
    cd68:	0042      	lsls	r2, r0, #1
    cd6a:	bf1f      	itttt	ne
    cd6c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    cd70:	ea92 0f03 	teqne	r2, r3
    cd74:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    cd78:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    cd7c:	d06a      	beq.n	ce54 <__addsf3+0xec>
    cd7e:	ea4f 6212 	mov.w	r2, r2, lsr #24
    cd82:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    cd86:	bfc1      	itttt	gt
    cd88:	18d2      	addgt	r2, r2, r3
    cd8a:	4041      	eorgt	r1, r0
    cd8c:	4048      	eorgt	r0, r1
    cd8e:	4041      	eorgt	r1, r0
    cd90:	bfb8      	it	lt
    cd92:	425b      	neglt	r3, r3
    cd94:	2b19      	cmp	r3, #25
    cd96:	bf88      	it	hi
    cd98:	4770      	bxhi	lr
    cd9a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    cd9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cda2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cda6:	bf18      	it	ne
    cda8:	4240      	negne	r0, r0
    cdaa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    cdae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    cdb2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    cdb6:	bf18      	it	ne
    cdb8:	4249      	negne	r1, r1
    cdba:	ea92 0f03 	teq	r2, r3
    cdbe:	d03f      	beq.n	ce40 <__addsf3+0xd8>
    cdc0:	f1a2 0201 	sub.w	r2, r2, #1
    cdc4:	fa41 fc03 	asr.w	ip, r1, r3
    cdc8:	eb10 000c 	adds.w	r0, r0, ip
    cdcc:	f1c3 0320 	rsb	r3, r3, #32
    cdd0:	fa01 f103 	lsl.w	r1, r1, r3
    cdd4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    cdd8:	d502      	bpl.n	cde0 <__addsf3+0x78>
    cdda:	4249      	negs	r1, r1
    cddc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    cde0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    cde4:	d313      	bcc.n	ce0e <__addsf3+0xa6>
    cde6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    cdea:	d306      	bcc.n	cdfa <__addsf3+0x92>
    cdec:	0840      	lsrs	r0, r0, #1
    cdee:	ea4f 0131 	mov.w	r1, r1, rrx
    cdf2:	f102 0201 	add.w	r2, r2, #1
    cdf6:	2afe      	cmp	r2, #254	; 0xfe
    cdf8:	d251      	bcs.n	ce9e <__addsf3+0x136>
    cdfa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    cdfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    ce02:	bf08      	it	eq
    ce04:	f020 0001 	biceq.w	r0, r0, #1
    ce08:	ea40 0003 	orr.w	r0, r0, r3
    ce0c:	4770      	bx	lr
    ce0e:	0049      	lsls	r1, r1, #1
    ce10:	eb40 0000 	adc.w	r0, r0, r0
    ce14:	3a01      	subs	r2, #1
    ce16:	bf28      	it	cs
    ce18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
    ce1c:	d2ed      	bcs.n	cdfa <__addsf3+0x92>
    ce1e:	fab0 fc80 	clz	ip, r0
    ce22:	f1ac 0c08 	sub.w	ip, ip, #8
    ce26:	ebb2 020c 	subs.w	r2, r2, ip
    ce2a:	fa00 f00c 	lsl.w	r0, r0, ip
    ce2e:	bfaa      	itet	ge
    ce30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    ce34:	4252      	neglt	r2, r2
    ce36:	4318      	orrge	r0, r3
    ce38:	bfbc      	itt	lt
    ce3a:	40d0      	lsrlt	r0, r2
    ce3c:	4318      	orrlt	r0, r3
    ce3e:	4770      	bx	lr
    ce40:	f092 0f00 	teq	r2, #0
    ce44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    ce48:	bf06      	itte	eq
    ce4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    ce4e:	3201      	addeq	r2, #1
    ce50:	3b01      	subne	r3, #1
    ce52:	e7b5      	b.n	cdc0 <__addsf3+0x58>
    ce54:	ea4f 0341 	mov.w	r3, r1, lsl #1
    ce58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    ce5c:	bf18      	it	ne
    ce5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    ce62:	d021      	beq.n	cea8 <__addsf3+0x140>
    ce64:	ea92 0f03 	teq	r2, r3
    ce68:	d004      	beq.n	ce74 <__addsf3+0x10c>
    ce6a:	f092 0f00 	teq	r2, #0
    ce6e:	bf08      	it	eq
    ce70:	4608      	moveq	r0, r1
    ce72:	4770      	bx	lr
    ce74:	ea90 0f01 	teq	r0, r1
    ce78:	bf1c      	itt	ne
    ce7a:	2000      	movne	r0, #0
    ce7c:	4770      	bxne	lr
    ce7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    ce82:	d104      	bne.n	ce8e <__addsf3+0x126>
    ce84:	0040      	lsls	r0, r0, #1
    ce86:	bf28      	it	cs
    ce88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    ce8c:	4770      	bx	lr
    ce8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    ce92:	bf3c      	itt	cc
    ce94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    ce98:	4770      	bxcc	lr
    ce9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    ce9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    cea2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    cea6:	4770      	bx	lr
    cea8:	ea7f 6222 	mvns.w	r2, r2, asr #24
    ceac:	bf16      	itet	ne
    ceae:	4608      	movne	r0, r1
    ceb0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    ceb4:	4601      	movne	r1, r0
    ceb6:	0242      	lsls	r2, r0, #9
    ceb8:	bf06      	itte	eq
    ceba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    cebe:	ea90 0f01 	teqeq	r0, r1
    cec2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    cec6:	4770      	bx	lr

0000cec8 <__aeabi_ui2f>:
    cec8:	f04f 0300 	mov.w	r3, #0
    cecc:	e004      	b.n	ced8 <__aeabi_i2f+0x8>
    cece:	bf00      	nop

0000ced0 <__aeabi_i2f>:
    ced0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    ced4:	bf48      	it	mi
    ced6:	4240      	negmi	r0, r0
    ced8:	ea5f 0c00 	movs.w	ip, r0
    cedc:	bf08      	it	eq
    cede:	4770      	bxeq	lr
    cee0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    cee4:	4601      	mov	r1, r0
    cee6:	f04f 0000 	mov.w	r0, #0
    ceea:	e01c      	b.n	cf26 <__aeabi_l2f+0x2a>

0000ceec <__aeabi_ul2f>:
    ceec:	ea50 0201 	orrs.w	r2, r0, r1
    cef0:	bf08      	it	eq
    cef2:	4770      	bxeq	lr
    cef4:	f04f 0300 	mov.w	r3, #0
    cef8:	e00a      	b.n	cf10 <__aeabi_l2f+0x14>
    cefa:	bf00      	nop

0000cefc <__aeabi_l2f>:
    cefc:	ea50 0201 	orrs.w	r2, r0, r1
    cf00:	bf08      	it	eq
    cf02:	4770      	bxeq	lr
    cf04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    cf08:	d502      	bpl.n	cf10 <__aeabi_l2f+0x14>
    cf0a:	4240      	negs	r0, r0
    cf0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cf10:	ea5f 0c01 	movs.w	ip, r1
    cf14:	bf02      	ittt	eq
    cf16:	4684      	moveq	ip, r0
    cf18:	4601      	moveq	r1, r0
    cf1a:	2000      	moveq	r0, #0
    cf1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    cf20:	bf08      	it	eq
    cf22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    cf26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    cf2a:	fabc f28c 	clz	r2, ip
    cf2e:	3a08      	subs	r2, #8
    cf30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    cf34:	db10      	blt.n	cf58 <__aeabi_l2f+0x5c>
    cf36:	fa01 fc02 	lsl.w	ip, r1, r2
    cf3a:	4463      	add	r3, ip
    cf3c:	fa00 fc02 	lsl.w	ip, r0, r2
    cf40:	f1c2 0220 	rsb	r2, r2, #32
    cf44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    cf48:	fa20 f202 	lsr.w	r2, r0, r2
    cf4c:	eb43 0002 	adc.w	r0, r3, r2
    cf50:	bf08      	it	eq
    cf52:	f020 0001 	biceq.w	r0, r0, #1
    cf56:	4770      	bx	lr
    cf58:	f102 0220 	add.w	r2, r2, #32
    cf5c:	fa01 fc02 	lsl.w	ip, r1, r2
    cf60:	f1c2 0220 	rsb	r2, r2, #32
    cf64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    cf68:	fa21 f202 	lsr.w	r2, r1, r2
    cf6c:	eb43 0002 	adc.w	r0, r3, r2
    cf70:	bf08      	it	eq
    cf72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    cf76:	4770      	bx	lr

0000cf78 <__aeabi_fmul>:
    cf78:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cf7c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    cf80:	bf1e      	ittt	ne
    cf82:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    cf86:	ea92 0f0c 	teqne	r2, ip
    cf8a:	ea93 0f0c 	teqne	r3, ip
    cf8e:	d06f      	beq.n	d070 <__aeabi_fmul+0xf8>
    cf90:	441a      	add	r2, r3
    cf92:	ea80 0c01 	eor.w	ip, r0, r1
    cf96:	0240      	lsls	r0, r0, #9
    cf98:	bf18      	it	ne
    cf9a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
    cf9e:	d01e      	beq.n	cfde <__aeabi_fmul+0x66>
    cfa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    cfa4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
    cfa8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
    cfac:	fba0 3101 	umull	r3, r1, r0, r1
    cfb0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    cfb4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
    cfb8:	bf3e      	ittt	cc
    cfba:	0049      	lslcc	r1, r1, #1
    cfbc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
    cfc0:	005b      	lslcc	r3, r3, #1
    cfc2:	ea40 0001 	orr.w	r0, r0, r1
    cfc6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
    cfca:	2afd      	cmp	r2, #253	; 0xfd
    cfcc:	d81d      	bhi.n	d00a <__aeabi_fmul+0x92>
    cfce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    cfd2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    cfd6:	bf08      	it	eq
    cfd8:	f020 0001 	biceq.w	r0, r0, #1
    cfdc:	4770      	bx	lr
    cfde:	f090 0f00 	teq	r0, #0
    cfe2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    cfe6:	bf08      	it	eq
    cfe8:	0249      	lsleq	r1, r1, #9
    cfea:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    cfee:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
    cff2:	3a7f      	subs	r2, #127	; 0x7f
    cff4:	bfc2      	ittt	gt
    cff6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    cffa:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    cffe:	4770      	bxgt	lr
    d000:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d004:	f04f 0300 	mov.w	r3, #0
    d008:	3a01      	subs	r2, #1
    d00a:	dc5d      	bgt.n	d0c8 <__aeabi_fmul+0x150>
    d00c:	f112 0f19 	cmn.w	r2, #25
    d010:	bfdc      	itt	le
    d012:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
    d016:	4770      	bxle	lr
    d018:	f1c2 0200 	rsb	r2, r2, #0
    d01c:	0041      	lsls	r1, r0, #1
    d01e:	fa21 f102 	lsr.w	r1, r1, r2
    d022:	f1c2 0220 	rsb	r2, r2, #32
    d026:	fa00 fc02 	lsl.w	ip, r0, r2
    d02a:	ea5f 0031 	movs.w	r0, r1, rrx
    d02e:	f140 0000 	adc.w	r0, r0, #0
    d032:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
    d036:	bf08      	it	eq
    d038:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    d03c:	4770      	bx	lr
    d03e:	f092 0f00 	teq	r2, #0
    d042:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    d046:	bf02      	ittt	eq
    d048:	0040      	lsleq	r0, r0, #1
    d04a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    d04e:	3a01      	subeq	r2, #1
    d050:	d0f9      	beq.n	d046 <__aeabi_fmul+0xce>
    d052:	ea40 000c 	orr.w	r0, r0, ip
    d056:	f093 0f00 	teq	r3, #0
    d05a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    d05e:	bf02      	ittt	eq
    d060:	0049      	lsleq	r1, r1, #1
    d062:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    d066:	3b01      	subeq	r3, #1
    d068:	d0f9      	beq.n	d05e <__aeabi_fmul+0xe6>
    d06a:	ea41 010c 	orr.w	r1, r1, ip
    d06e:	e78f      	b.n	cf90 <__aeabi_fmul+0x18>
    d070:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    d074:	ea92 0f0c 	teq	r2, ip
    d078:	bf18      	it	ne
    d07a:	ea93 0f0c 	teqne	r3, ip
    d07e:	d00a      	beq.n	d096 <__aeabi_fmul+0x11e>
    d080:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    d084:	bf18      	it	ne
    d086:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    d08a:	d1d8      	bne.n	d03e <__aeabi_fmul+0xc6>
    d08c:	ea80 0001 	eor.w	r0, r0, r1
    d090:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    d094:	4770      	bx	lr
    d096:	f090 0f00 	teq	r0, #0
    d09a:	bf17      	itett	ne
    d09c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
    d0a0:	4608      	moveq	r0, r1
    d0a2:	f091 0f00 	teqne	r1, #0
    d0a6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
    d0aa:	d014      	beq.n	d0d6 <__aeabi_fmul+0x15e>
    d0ac:	ea92 0f0c 	teq	r2, ip
    d0b0:	d101      	bne.n	d0b6 <__aeabi_fmul+0x13e>
    d0b2:	0242      	lsls	r2, r0, #9
    d0b4:	d10f      	bne.n	d0d6 <__aeabi_fmul+0x15e>
    d0b6:	ea93 0f0c 	teq	r3, ip
    d0ba:	d103      	bne.n	d0c4 <__aeabi_fmul+0x14c>
    d0bc:	024b      	lsls	r3, r1, #9
    d0be:	bf18      	it	ne
    d0c0:	4608      	movne	r0, r1
    d0c2:	d108      	bne.n	d0d6 <__aeabi_fmul+0x15e>
    d0c4:	ea80 0001 	eor.w	r0, r0, r1
    d0c8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
    d0cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    d0d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d0d4:	4770      	bx	lr
    d0d6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    d0da:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
    d0de:	4770      	bx	lr

0000d0e0 <__aeabi_fdiv>:
    d0e0:	f04f 0cff 	mov.w	ip, #255	; 0xff
    d0e4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
    d0e8:	bf1e      	ittt	ne
    d0ea:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
    d0ee:	ea92 0f0c 	teqne	r2, ip
    d0f2:	ea93 0f0c 	teqne	r3, ip
    d0f6:	d069      	beq.n	d1cc <__aeabi_fdiv+0xec>
    d0f8:	eba2 0203 	sub.w	r2, r2, r3
    d0fc:	ea80 0c01 	eor.w	ip, r0, r1
    d100:	0249      	lsls	r1, r1, #9
    d102:	ea4f 2040 	mov.w	r0, r0, lsl #9
    d106:	d037      	beq.n	d178 <__aeabi_fdiv+0x98>
    d108:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d10c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
    d110:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
    d114:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
    d118:	428b      	cmp	r3, r1
    d11a:	bf38      	it	cc
    d11c:	005b      	lslcc	r3, r3, #1
    d11e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
    d122:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
    d126:	428b      	cmp	r3, r1
    d128:	bf24      	itt	cs
    d12a:	1a5b      	subcs	r3, r3, r1
    d12c:	ea40 000c 	orrcs.w	r0, r0, ip
    d130:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
    d134:	bf24      	itt	cs
    d136:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
    d13a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    d13e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
    d142:	bf24      	itt	cs
    d144:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
    d148:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    d14c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    d150:	bf24      	itt	cs
    d152:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
    d156:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    d15a:	011b      	lsls	r3, r3, #4
    d15c:	bf18      	it	ne
    d15e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
    d162:	d1e0      	bne.n	d126 <__aeabi_fdiv+0x46>
    d164:	2afd      	cmp	r2, #253	; 0xfd
    d166:	f63f af50 	bhi.w	d00a <__aeabi_fmul+0x92>
    d16a:	428b      	cmp	r3, r1
    d16c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    d170:	bf08      	it	eq
    d172:	f020 0001 	biceq.w	r0, r0, #1
    d176:	4770      	bx	lr
    d178:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
    d17c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
    d180:	327f      	adds	r2, #127	; 0x7f
    d182:	bfc2      	ittt	gt
    d184:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
    d188:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
    d18c:	4770      	bxgt	lr
    d18e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    d192:	f04f 0300 	mov.w	r3, #0
    d196:	3a01      	subs	r2, #1
    d198:	e737      	b.n	d00a <__aeabi_fmul+0x92>
    d19a:	f092 0f00 	teq	r2, #0
    d19e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
    d1a2:	bf02      	ittt	eq
    d1a4:	0040      	lsleq	r0, r0, #1
    d1a6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
    d1aa:	3a01      	subeq	r2, #1
    d1ac:	d0f9      	beq.n	d1a2 <__aeabi_fdiv+0xc2>
    d1ae:	ea40 000c 	orr.w	r0, r0, ip
    d1b2:	f093 0f00 	teq	r3, #0
    d1b6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    d1ba:	bf02      	ittt	eq
    d1bc:	0049      	lsleq	r1, r1, #1
    d1be:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
    d1c2:	3b01      	subeq	r3, #1
    d1c4:	d0f9      	beq.n	d1ba <__aeabi_fdiv+0xda>
    d1c6:	ea41 010c 	orr.w	r1, r1, ip
    d1ca:	e795      	b.n	d0f8 <__aeabi_fdiv+0x18>
    d1cc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
    d1d0:	ea92 0f0c 	teq	r2, ip
    d1d4:	d108      	bne.n	d1e8 <__aeabi_fdiv+0x108>
    d1d6:	0242      	lsls	r2, r0, #9
    d1d8:	f47f af7d 	bne.w	d0d6 <__aeabi_fmul+0x15e>
    d1dc:	ea93 0f0c 	teq	r3, ip
    d1e0:	f47f af70 	bne.w	d0c4 <__aeabi_fmul+0x14c>
    d1e4:	4608      	mov	r0, r1
    d1e6:	e776      	b.n	d0d6 <__aeabi_fmul+0x15e>
    d1e8:	ea93 0f0c 	teq	r3, ip
    d1ec:	d104      	bne.n	d1f8 <__aeabi_fdiv+0x118>
    d1ee:	024b      	lsls	r3, r1, #9
    d1f0:	f43f af4c 	beq.w	d08c <__aeabi_fmul+0x114>
    d1f4:	4608      	mov	r0, r1
    d1f6:	e76e      	b.n	d0d6 <__aeabi_fmul+0x15e>
    d1f8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
    d1fc:	bf18      	it	ne
    d1fe:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
    d202:	d1ca      	bne.n	d19a <__aeabi_fdiv+0xba>
    d204:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
    d208:	f47f af5c 	bne.w	d0c4 <__aeabi_fmul+0x14c>
    d20c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
    d210:	f47f af3c 	bne.w	d08c <__aeabi_fmul+0x114>
    d214:	e75f      	b.n	d0d6 <__aeabi_fmul+0x15e>
    d216:	bf00      	nop

0000d218 <__gesf2>:
    d218:	f04f 3cff 	mov.w	ip, #4294967295
    d21c:	e006      	b.n	d22c <__cmpsf2+0x4>
    d21e:	bf00      	nop

0000d220 <__lesf2>:
    d220:	f04f 0c01 	mov.w	ip, #1
    d224:	e002      	b.n	d22c <__cmpsf2+0x4>
    d226:	bf00      	nop

0000d228 <__cmpsf2>:
    d228:	f04f 0c01 	mov.w	ip, #1
    d22c:	f84d cd04 	str.w	ip, [sp, #-4]!
    d230:	ea4f 0240 	mov.w	r2, r0, lsl #1
    d234:	ea4f 0341 	mov.w	r3, r1, lsl #1
    d238:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d23c:	bf18      	it	ne
    d23e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    d242:	d011      	beq.n	d268 <__cmpsf2+0x40>
    d244:	b001      	add	sp, #4
    d246:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
    d24a:	bf18      	it	ne
    d24c:	ea90 0f01 	teqne	r0, r1
    d250:	bf58      	it	pl
    d252:	ebb2 0003 	subspl.w	r0, r2, r3
    d256:	bf88      	it	hi
    d258:	17c8      	asrhi	r0, r1, #31
    d25a:	bf38      	it	cc
    d25c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
    d260:	bf18      	it	ne
    d262:	f040 0001 	orrne.w	r0, r0, #1
    d266:	4770      	bx	lr
    d268:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    d26c:	d102      	bne.n	d274 <__cmpsf2+0x4c>
    d26e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
    d272:	d105      	bne.n	d280 <__cmpsf2+0x58>
    d274:	ea7f 6c23 	mvns.w	ip, r3, asr #24
    d278:	d1e4      	bne.n	d244 <__cmpsf2+0x1c>
    d27a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
    d27e:	d0e1      	beq.n	d244 <__cmpsf2+0x1c>
    d280:	f85d 0b04 	ldr.w	r0, [sp], #4
    d284:	4770      	bx	lr
    d286:	bf00      	nop

0000d288 <__aeabi_cfrcmple>:
    d288:	4684      	mov	ip, r0
    d28a:	4608      	mov	r0, r1
    d28c:	4661      	mov	r1, ip
    d28e:	e7ff      	b.n	d290 <__aeabi_cfcmpeq>

0000d290 <__aeabi_cfcmpeq>:
    d290:	b50f      	push	{r0, r1, r2, r3, lr}
    d292:	f7ff ffc9 	bl	d228 <__cmpsf2>
    d296:	2800      	cmp	r0, #0
    d298:	bf48      	it	mi
    d29a:	f110 0f00 	cmnmi.w	r0, #0
    d29e:	bd0f      	pop	{r0, r1, r2, r3, pc}

0000d2a0 <__aeabi_fcmpeq>:
    d2a0:	f84d ed08 	str.w	lr, [sp, #-8]!
    d2a4:	f7ff fff4 	bl	d290 <__aeabi_cfcmpeq>
    d2a8:	bf0c      	ite	eq
    d2aa:	2001      	moveq	r0, #1
    d2ac:	2000      	movne	r0, #0
    d2ae:	f85d fb08 	ldr.w	pc, [sp], #8
    d2b2:	bf00      	nop

0000d2b4 <__aeabi_fcmplt>:
    d2b4:	f84d ed08 	str.w	lr, [sp, #-8]!
    d2b8:	f7ff ffea 	bl	d290 <__aeabi_cfcmpeq>
    d2bc:	bf34      	ite	cc
    d2be:	2001      	movcc	r0, #1
    d2c0:	2000      	movcs	r0, #0
    d2c2:	f85d fb08 	ldr.w	pc, [sp], #8
    d2c6:	bf00      	nop

0000d2c8 <__aeabi_fcmple>:
    d2c8:	f84d ed08 	str.w	lr, [sp, #-8]!
    d2cc:	f7ff ffe0 	bl	d290 <__aeabi_cfcmpeq>
    d2d0:	bf94      	ite	ls
    d2d2:	2001      	movls	r0, #1
    d2d4:	2000      	movhi	r0, #0
    d2d6:	f85d fb08 	ldr.w	pc, [sp], #8
    d2da:	bf00      	nop

0000d2dc <__aeabi_fcmpge>:
    d2dc:	f84d ed08 	str.w	lr, [sp, #-8]!
    d2e0:	f7ff ffd2 	bl	d288 <__aeabi_cfrcmple>
    d2e4:	bf94      	ite	ls
    d2e6:	2001      	movls	r0, #1
    d2e8:	2000      	movhi	r0, #0
    d2ea:	f85d fb08 	ldr.w	pc, [sp], #8
    d2ee:	bf00      	nop

0000d2f0 <__aeabi_fcmpgt>:
    d2f0:	f84d ed08 	str.w	lr, [sp, #-8]!
    d2f4:	f7ff ffc8 	bl	d288 <__aeabi_cfrcmple>
    d2f8:	bf34      	ite	cc
    d2fa:	2001      	movcc	r0, #1
    d2fc:	2000      	movcs	r0, #0
    d2fe:	f85d fb08 	ldr.w	pc, [sp], #8
    d302:	bf00      	nop

0000d304 <__aeabi_f2iz>:
    d304:	ea4f 0240 	mov.w	r2, r0, lsl #1
    d308:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    d30c:	d30f      	bcc.n	d32e <__aeabi_f2iz+0x2a>
    d30e:	f04f 039e 	mov.w	r3, #158	; 0x9e
    d312:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    d316:	d90d      	bls.n	d334 <__aeabi_f2iz+0x30>
    d318:	ea4f 2300 	mov.w	r3, r0, lsl #8
    d31c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d320:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    d324:	fa23 f002 	lsr.w	r0, r3, r2
    d328:	bf18      	it	ne
    d32a:	4240      	negne	r0, r0
    d32c:	4770      	bx	lr
    d32e:	f04f 0000 	mov.w	r0, #0
    d332:	4770      	bx	lr
    d334:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d338:	d101      	bne.n	d33e <__aeabi_f2iz+0x3a>
    d33a:	0242      	lsls	r2, r0, #9
    d33c:	d105      	bne.n	d34a <__aeabi_f2iz+0x46>
    d33e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    d342:	bf08      	it	eq
    d344:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    d348:	4770      	bx	lr
    d34a:	f04f 0000 	mov.w	r0, #0
    d34e:	4770      	bx	lr

0000d350 <__aeabi_f2uiz>:
    d350:	0042      	lsls	r2, r0, #1
    d352:	d20e      	bcs.n	d372 <__aeabi_f2uiz+0x22>
    d354:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
    d358:	d30b      	bcc.n	d372 <__aeabi_f2uiz+0x22>
    d35a:	f04f 039e 	mov.w	r3, #158	; 0x9e
    d35e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    d362:	d409      	bmi.n	d378 <__aeabi_f2uiz+0x28>
    d364:	ea4f 2300 	mov.w	r3, r0, lsl #8
    d368:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    d36c:	fa23 f002 	lsr.w	r0, r3, r2
    d370:	4770      	bx	lr
    d372:	f04f 0000 	mov.w	r0, #0
    d376:	4770      	bx	lr
    d378:	f112 0f61 	cmn.w	r2, #97	; 0x61
    d37c:	d101      	bne.n	d382 <__aeabi_f2uiz+0x32>
    d37e:	0242      	lsls	r2, r0, #9
    d380:	d102      	bne.n	d388 <__aeabi_f2uiz+0x38>
    d382:	f04f 30ff 	mov.w	r0, #4294967295
    d386:	4770      	bx	lr
    d388:	f04f 0000 	mov.w	r0, #0
    d38c:	4770      	bx	lr
    d38e:	bf00      	nop

0000d390 <malloc>:
    d390:	4b02      	ldr	r3, [pc, #8]	; (d39c <malloc+0xc>)
    d392:	4601      	mov	r1, r0
    d394:	6818      	ldr	r0, [r3, #0]
    d396:	f000 b803 	b.w	d3a0 <_malloc_r>
    d39a:	bf00      	nop
    d39c:	1fff9160 	.word	0x1fff9160

0000d3a0 <_malloc_r>:
    d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3a4:	f101 060b 	add.w	r6, r1, #11
    d3a8:	2e16      	cmp	r6, #22
    d3aa:	b083      	sub	sp, #12
    d3ac:	4604      	mov	r4, r0
    d3ae:	d824      	bhi.n	d3fa <_malloc_r+0x5a>
    d3b0:	2910      	cmp	r1, #16
    d3b2:	f200 80ba 	bhi.w	d52a <_malloc_r+0x18a>
    d3b6:	f000 faa3 	bl	d900 <__malloc_lock>
    d3ba:	2610      	movs	r6, #16
    d3bc:	2218      	movs	r2, #24
    d3be:	2002      	movs	r0, #2
    d3c0:	4fb5      	ldr	r7, [pc, #724]	; (d698 <_malloc_r+0x2f8>)
    d3c2:	443a      	add	r2, r7
    d3c4:	f1a2 0108 	sub.w	r1, r2, #8
    d3c8:	6853      	ldr	r3, [r2, #4]
    d3ca:	428b      	cmp	r3, r1
    d3cc:	f000 80ba 	beq.w	d544 <_malloc_r+0x1a4>
    d3d0:	685a      	ldr	r2, [r3, #4]
    d3d2:	68d9      	ldr	r1, [r3, #12]
    d3d4:	f022 0203 	bic.w	r2, r2, #3
    d3d8:	441a      	add	r2, r3
    d3da:	689d      	ldr	r5, [r3, #8]
    d3dc:	60e9      	str	r1, [r5, #12]
    d3de:	608d      	str	r5, [r1, #8]
    d3e0:	6851      	ldr	r1, [r2, #4]
    d3e2:	f041 0101 	orr.w	r1, r1, #1
    d3e6:	4620      	mov	r0, r4
    d3e8:	6051      	str	r1, [r2, #4]
    d3ea:	f103 0508 	add.w	r5, r3, #8
    d3ee:	f000 fa8d 	bl	d90c <__malloc_unlock>
    d3f2:	4628      	mov	r0, r5
    d3f4:	b003      	add	sp, #12
    d3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3fa:	f036 0607 	bics.w	r6, r6, #7
    d3fe:	f100 8094 	bmi.w	d52a <_malloc_r+0x18a>
    d402:	42b1      	cmp	r1, r6
    d404:	f200 8091 	bhi.w	d52a <_malloc_r+0x18a>
    d408:	f000 fa7a 	bl	d900 <__malloc_lock>
    d40c:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    d410:	f0c0 819a 	bcc.w	d748 <_malloc_r+0x3a8>
    d414:	0a73      	lsrs	r3, r6, #9
    d416:	f000 808f 	beq.w	d538 <_malloc_r+0x198>
    d41a:	2b04      	cmp	r3, #4
    d41c:	f200 816f 	bhi.w	d6fe <_malloc_r+0x35e>
    d420:	09b3      	lsrs	r3, r6, #6
    d422:	f103 0039 	add.w	r0, r3, #57	; 0x39
    d426:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    d42a:	00c3      	lsls	r3, r0, #3
    d42c:	4f9a      	ldr	r7, [pc, #616]	; (d698 <_malloc_r+0x2f8>)
    d42e:	443b      	add	r3, r7
    d430:	f1a3 0508 	sub.w	r5, r3, #8
    d434:	685b      	ldr	r3, [r3, #4]
    d436:	429d      	cmp	r5, r3
    d438:	d106      	bne.n	d448 <_malloc_r+0xa8>
    d43a:	e00c      	b.n	d456 <_malloc_r+0xb6>
    d43c:	2900      	cmp	r1, #0
    d43e:	f280 8127 	bge.w	d690 <_malloc_r+0x2f0>
    d442:	68db      	ldr	r3, [r3, #12]
    d444:	429d      	cmp	r5, r3
    d446:	d006      	beq.n	d456 <_malloc_r+0xb6>
    d448:	685a      	ldr	r2, [r3, #4]
    d44a:	f022 0203 	bic.w	r2, r2, #3
    d44e:	1b91      	subs	r1, r2, r6
    d450:	290f      	cmp	r1, #15
    d452:	ddf3      	ble.n	d43c <_malloc_r+0x9c>
    d454:	4660      	mov	r0, ip
    d456:	693d      	ldr	r5, [r7, #16]
    d458:	f8df c240 	ldr.w	ip, [pc, #576]	; d69c <_malloc_r+0x2fc>
    d45c:	4565      	cmp	r5, ip
    d45e:	d07c      	beq.n	d55a <_malloc_r+0x1ba>
    d460:	686a      	ldr	r2, [r5, #4]
    d462:	f022 0203 	bic.w	r2, r2, #3
    d466:	1b93      	subs	r3, r2, r6
    d468:	2b0f      	cmp	r3, #15
    d46a:	f300 817b 	bgt.w	d764 <_malloc_r+0x3c4>
    d46e:	2b00      	cmp	r3, #0
    d470:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    d474:	f280 816c 	bge.w	d750 <_malloc_r+0x3b0>
    d478:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    d47c:	f080 811a 	bcs.w	d6b4 <_malloc_r+0x314>
    d480:	08d3      	lsrs	r3, r2, #3
    d482:	6879      	ldr	r1, [r7, #4]
    d484:	3301      	adds	r3, #1
    d486:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    d48a:	2201      	movs	r2, #1
    d48c:	fa02 f20e 	lsl.w	r2, r2, lr
    d490:	430a      	orrs	r2, r1
    d492:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    d496:	f8c5 e008 	str.w	lr, [r5, #8]
    d49a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    d49e:	3908      	subs	r1, #8
    d4a0:	60e9      	str	r1, [r5, #12]
    d4a2:	607a      	str	r2, [r7, #4]
    d4a4:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    d4a8:	f8ce 500c 	str.w	r5, [lr, #12]
    d4ac:	1083      	asrs	r3, r0, #2
    d4ae:	2101      	movs	r1, #1
    d4b0:	4099      	lsls	r1, r3
    d4b2:	4291      	cmp	r1, r2
    d4b4:	d857      	bhi.n	d566 <_malloc_r+0x1c6>
    d4b6:	4211      	tst	r1, r2
    d4b8:	d106      	bne.n	d4c8 <_malloc_r+0x128>
    d4ba:	f020 0003 	bic.w	r0, r0, #3
    d4be:	0049      	lsls	r1, r1, #1
    d4c0:	4211      	tst	r1, r2
    d4c2:	f100 0004 	add.w	r0, r0, #4
    d4c6:	d0fa      	beq.n	d4be <_malloc_r+0x11e>
    d4c8:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    d4cc:	464d      	mov	r5, r9
    d4ce:	4686      	mov	lr, r0
    d4d0:	f8d5 800c 	ldr.w	r8, [r5, #12]
    d4d4:	4545      	cmp	r5, r8
    d4d6:	d108      	bne.n	d4ea <_malloc_r+0x14a>
    d4d8:	e11d      	b.n	d716 <_malloc_r+0x376>
    d4da:	2b00      	cmp	r3, #0
    d4dc:	f280 8124 	bge.w	d728 <_malloc_r+0x388>
    d4e0:	f8d8 800c 	ldr.w	r8, [r8, #12]
    d4e4:	4545      	cmp	r5, r8
    d4e6:	f000 8116 	beq.w	d716 <_malloc_r+0x376>
    d4ea:	f8d8 2004 	ldr.w	r2, [r8, #4]
    d4ee:	f022 0203 	bic.w	r2, r2, #3
    d4f2:	1b93      	subs	r3, r2, r6
    d4f4:	2b0f      	cmp	r3, #15
    d4f6:	ddf0      	ble.n	d4da <_malloc_r+0x13a>
    d4f8:	4620      	mov	r0, r4
    d4fa:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    d4fe:	eb08 0106 	add.w	r1, r8, r6
    d502:	f046 0601 	orr.w	r6, r6, #1
    d506:	f8c8 6004 	str.w	r6, [r8, #4]
    d50a:	60ec      	str	r4, [r5, #12]
    d50c:	60a5      	str	r5, [r4, #8]
    d50e:	f043 0401 	orr.w	r4, r3, #1
    d512:	e9c7 1104 	strd	r1, r1, [r7, #16]
    d516:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    d51a:	604c      	str	r4, [r1, #4]
    d51c:	f848 3002 	str.w	r3, [r8, r2]
    d520:	f000 f9f4 	bl	d90c <__malloc_unlock>
    d524:	f108 0508 	add.w	r5, r8, #8
    d528:	e002      	b.n	d530 <_malloc_r+0x190>
    d52a:	230c      	movs	r3, #12
    d52c:	6023      	str	r3, [r4, #0]
    d52e:	2500      	movs	r5, #0
    d530:	4628      	mov	r0, r5
    d532:	b003      	add	sp, #12
    d534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d538:	f44f 7300 	mov.w	r3, #512	; 0x200
    d53c:	2040      	movs	r0, #64	; 0x40
    d53e:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    d542:	e773      	b.n	d42c <_malloc_r+0x8c>
    d544:	68d3      	ldr	r3, [r2, #12]
    d546:	429a      	cmp	r2, r3
    d548:	bf08      	it	eq
    d54a:	3002      	addeq	r0, #2
    d54c:	f47f af40 	bne.w	d3d0 <_malloc_r+0x30>
    d550:	693d      	ldr	r5, [r7, #16]
    d552:	f8df c148 	ldr.w	ip, [pc, #328]	; d69c <_malloc_r+0x2fc>
    d556:	4565      	cmp	r5, ip
    d558:	d182      	bne.n	d460 <_malloc_r+0xc0>
    d55a:	687a      	ldr	r2, [r7, #4]
    d55c:	1083      	asrs	r3, r0, #2
    d55e:	2101      	movs	r1, #1
    d560:	4099      	lsls	r1, r3
    d562:	4291      	cmp	r1, r2
    d564:	d9a7      	bls.n	d4b6 <_malloc_r+0x116>
    d566:	68bd      	ldr	r5, [r7, #8]
    d568:	686b      	ldr	r3, [r5, #4]
    d56a:	f023 0903 	bic.w	r9, r3, #3
    d56e:	454e      	cmp	r6, r9
    d570:	d803      	bhi.n	d57a <_malloc_r+0x1da>
    d572:	eba9 0306 	sub.w	r3, r9, r6
    d576:	2b0f      	cmp	r3, #15
    d578:	dc7a      	bgt.n	d670 <_malloc_r+0x2d0>
    d57a:	f8df b124 	ldr.w	fp, [pc, #292]	; d6a0 <_malloc_r+0x300>
    d57e:	4b49      	ldr	r3, [pc, #292]	; (d6a4 <_malloc_r+0x304>)
    d580:	f8db 2000 	ldr.w	r2, [fp]
    d584:	681b      	ldr	r3, [r3, #0]
    d586:	3201      	adds	r2, #1
    d588:	4433      	add	r3, r6
    d58a:	eb05 0a09 	add.w	sl, r5, r9
    d58e:	f000 8133 	beq.w	d7f8 <_malloc_r+0x458>
    d592:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    d596:	330f      	adds	r3, #15
    d598:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
    d59c:	f028 080f 	bic.w	r8, r8, #15
    d5a0:	4641      	mov	r1, r8
    d5a2:	4620      	mov	r0, r4
    d5a4:	f000 fe32 	bl	e20c <_sbrk_r>
    d5a8:	1c41      	adds	r1, r0, #1
    d5aa:	4602      	mov	r2, r0
    d5ac:	f000 80f3 	beq.w	d796 <_malloc_r+0x3f6>
    d5b0:	4582      	cmp	sl, r0
    d5b2:	f200 80ee 	bhi.w	d792 <_malloc_r+0x3f2>
    d5b6:	4b3c      	ldr	r3, [pc, #240]	; (d6a8 <_malloc_r+0x308>)
    d5b8:	6819      	ldr	r1, [r3, #0]
    d5ba:	4441      	add	r1, r8
    d5bc:	6019      	str	r1, [r3, #0]
    d5be:	4608      	mov	r0, r1
    d5c0:	f000 814e 	beq.w	d860 <_malloc_r+0x4c0>
    d5c4:	f8db 1000 	ldr.w	r1, [fp]
    d5c8:	9301      	str	r3, [sp, #4]
    d5ca:	3101      	adds	r1, #1
    d5cc:	bf1b      	ittet	ne
    d5ce:	eba2 010a 	subne.w	r1, r2, sl
    d5d2:	1809      	addne	r1, r1, r0
    d5d4:	f8cb 2000 	streq.w	r2, [fp]
    d5d8:	6019      	strne	r1, [r3, #0]
    d5da:	f012 0b07 	ands.w	fp, r2, #7
    d5de:	f000 8117 	beq.w	d810 <_malloc_r+0x470>
    d5e2:	f1cb 0108 	rsb	r1, fp, #8
    d5e6:	440a      	add	r2, r1
    d5e8:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
    d5ec:	4490      	add	r8, r2
    d5ee:	3108      	adds	r1, #8
    d5f0:	eba1 0108 	sub.w	r1, r1, r8
    d5f4:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d5f8:	4651      	mov	r1, sl
    d5fa:	4620      	mov	r0, r4
    d5fc:	9200      	str	r2, [sp, #0]
    d5fe:	f000 fe05 	bl	e20c <_sbrk_r>
    d602:	1c42      	adds	r2, r0, #1
    d604:	e9dd 2300 	ldrd	r2, r3, [sp]
    d608:	f000 814f 	beq.w	d8aa <_malloc_r+0x50a>
    d60c:	1a80      	subs	r0, r0, r2
    d60e:	eb00 080a 	add.w	r8, r0, sl
    d612:	6819      	ldr	r1, [r3, #0]
    d614:	60ba      	str	r2, [r7, #8]
    d616:	f048 0001 	orr.w	r0, r8, #1
    d61a:	4451      	add	r1, sl
    d61c:	42bd      	cmp	r5, r7
    d61e:	6050      	str	r0, [r2, #4]
    d620:	6019      	str	r1, [r3, #0]
    d622:	f000 8129 	beq.w	d878 <_malloc_r+0x4d8>
    d626:	f1b9 0f0f 	cmp.w	r9, #15
    d62a:	f240 8127 	bls.w	d87c <_malloc_r+0x4dc>
    d62e:	6868      	ldr	r0, [r5, #4]
    d630:	f1a9 0c0c 	sub.w	ip, r9, #12
    d634:	f02c 0c07 	bic.w	ip, ip, #7
    d638:	f000 0001 	and.w	r0, r0, #1
    d63c:	ea40 000c 	orr.w	r0, r0, ip
    d640:	6068      	str	r0, [r5, #4]
    d642:	f04f 0e05 	mov.w	lr, #5
    d646:	eb05 000c 	add.w	r0, r5, ip
    d64a:	f1bc 0f0f 	cmp.w	ip, #15
    d64e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
    d652:	f200 8132 	bhi.w	d8ba <_malloc_r+0x51a>
    d656:	6850      	ldr	r0, [r2, #4]
    d658:	4615      	mov	r5, r2
    d65a:	4b14      	ldr	r3, [pc, #80]	; (d6ac <_malloc_r+0x30c>)
    d65c:	681a      	ldr	r2, [r3, #0]
    d65e:	428a      	cmp	r2, r1
    d660:	bf38      	it	cc
    d662:	6019      	strcc	r1, [r3, #0]
    d664:	4b12      	ldr	r3, [pc, #72]	; (d6b0 <_malloc_r+0x310>)
    d666:	681a      	ldr	r2, [r3, #0]
    d668:	428a      	cmp	r2, r1
    d66a:	bf38      	it	cc
    d66c:	6019      	strcc	r1, [r3, #0]
    d66e:	e094      	b.n	d79a <_malloc_r+0x3fa>
    d670:	19aa      	adds	r2, r5, r6
    d672:	f043 0301 	orr.w	r3, r3, #1
    d676:	f046 0601 	orr.w	r6, r6, #1
    d67a:	606e      	str	r6, [r5, #4]
    d67c:	4620      	mov	r0, r4
    d67e:	60ba      	str	r2, [r7, #8]
    d680:	6053      	str	r3, [r2, #4]
    d682:	f000 f943 	bl	d90c <__malloc_unlock>
    d686:	3508      	adds	r5, #8
    d688:	4628      	mov	r0, r5
    d68a:	b003      	add	sp, #12
    d68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d690:	68d9      	ldr	r1, [r3, #12]
    d692:	441a      	add	r2, r3
    d694:	e6a1      	b.n	d3da <_malloc_r+0x3a>
    d696:	bf00      	nop
    d698:	1fff8ab8 	.word	0x1fff8ab8
    d69c:	1fff8ac0 	.word	0x1fff8ac0
    d6a0:	1fff8ec0 	.word	0x1fff8ec0
    d6a4:	1fffd628 	.word	0x1fffd628
    d6a8:	1fffd5f8 	.word	0x1fffd5f8
    d6ac:	1fffd620 	.word	0x1fffd620
    d6b0:	1fffd624 	.word	0x1fffd624
    d6b4:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    d6b8:	ea4f 2352 	mov.w	r3, r2, lsr #9
    d6bc:	d363      	bcc.n	d786 <_malloc_r+0x3e6>
    d6be:	2b14      	cmp	r3, #20
    d6c0:	f200 80b7 	bhi.w	d832 <_malloc_r+0x492>
    d6c4:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    d6c8:	00c9      	lsls	r1, r1, #3
    d6ca:	335b      	adds	r3, #91	; 0x5b
    d6cc:	eb07 0e01 	add.w	lr, r7, r1
    d6d0:	5879      	ldr	r1, [r7, r1]
    d6d2:	f1ae 0e08 	sub.w	lr, lr, #8
    d6d6:	458e      	cmp	lr, r1
    d6d8:	f000 8091 	beq.w	d7fe <_malloc_r+0x45e>
    d6dc:	684b      	ldr	r3, [r1, #4]
    d6de:	f023 0303 	bic.w	r3, r3, #3
    d6e2:	4293      	cmp	r3, r2
    d6e4:	d902      	bls.n	d6ec <_malloc_r+0x34c>
    d6e6:	6889      	ldr	r1, [r1, #8]
    d6e8:	458e      	cmp	lr, r1
    d6ea:	d1f7      	bne.n	d6dc <_malloc_r+0x33c>
    d6ec:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    d6f0:	687a      	ldr	r2, [r7, #4]
    d6f2:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    d6f6:	f8ce 5008 	str.w	r5, [lr, #8]
    d6fa:	60cd      	str	r5, [r1, #12]
    d6fc:	e6d6      	b.n	d4ac <_malloc_r+0x10c>
    d6fe:	2b14      	cmp	r3, #20
    d700:	d959      	bls.n	d7b6 <_malloc_r+0x416>
    d702:	2b54      	cmp	r3, #84	; 0x54
    d704:	f200 809d 	bhi.w	d842 <_malloc_r+0x4a2>
    d708:	0b33      	lsrs	r3, r6, #12
    d70a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    d70e:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    d712:	00c3      	lsls	r3, r0, #3
    d714:	e68a      	b.n	d42c <_malloc_r+0x8c>
    d716:	f10e 0e01 	add.w	lr, lr, #1
    d71a:	f01e 0f03 	tst.w	lr, #3
    d71e:	f105 0508 	add.w	r5, r5, #8
    d722:	f47f aed5 	bne.w	d4d0 <_malloc_r+0x130>
    d726:	e051      	b.n	d7cc <_malloc_r+0x42c>
    d728:	4442      	add	r2, r8
    d72a:	4645      	mov	r5, r8
    d72c:	6853      	ldr	r3, [r2, #4]
    d72e:	f8d8 100c 	ldr.w	r1, [r8, #12]
    d732:	f043 0301 	orr.w	r3, r3, #1
    d736:	6053      	str	r3, [r2, #4]
    d738:	f855 3f08 	ldr.w	r3, [r5, #8]!
    d73c:	4620      	mov	r0, r4
    d73e:	60d9      	str	r1, [r3, #12]
    d740:	608b      	str	r3, [r1, #8]
    d742:	f000 f8e3 	bl	d90c <__malloc_unlock>
    d746:	e6f3      	b.n	d530 <_malloc_r+0x190>
    d748:	08f0      	lsrs	r0, r6, #3
    d74a:	f106 0208 	add.w	r2, r6, #8
    d74e:	e637      	b.n	d3c0 <_malloc_r+0x20>
    d750:	442a      	add	r2, r5
    d752:	4620      	mov	r0, r4
    d754:	6853      	ldr	r3, [r2, #4]
    d756:	f043 0301 	orr.w	r3, r3, #1
    d75a:	6053      	str	r3, [r2, #4]
    d75c:	3508      	adds	r5, #8
    d75e:	f000 f8d5 	bl	d90c <__malloc_unlock>
    d762:	e6e5      	b.n	d530 <_malloc_r+0x190>
    d764:	19a9      	adds	r1, r5, r6
    d766:	4620      	mov	r0, r4
    d768:	f046 0601 	orr.w	r6, r6, #1
    d76c:	f043 0401 	orr.w	r4, r3, #1
    d770:	606e      	str	r6, [r5, #4]
    d772:	e9c7 1104 	strd	r1, r1, [r7, #16]
    d776:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    d77a:	604c      	str	r4, [r1, #4]
    d77c:	50ab      	str	r3, [r5, r2]
    d77e:	f000 f8c5 	bl	d90c <__malloc_unlock>
    d782:	3508      	adds	r5, #8
    d784:	e6d4      	b.n	d530 <_malloc_r+0x190>
    d786:	0993      	lsrs	r3, r2, #6
    d788:	f103 0139 	add.w	r1, r3, #57	; 0x39
    d78c:	00c9      	lsls	r1, r1, #3
    d78e:	3338      	adds	r3, #56	; 0x38
    d790:	e79c      	b.n	d6cc <_malloc_r+0x32c>
    d792:	42bd      	cmp	r5, r7
    d794:	d05f      	beq.n	d856 <_malloc_r+0x4b6>
    d796:	68bd      	ldr	r5, [r7, #8]
    d798:	6868      	ldr	r0, [r5, #4]
    d79a:	f020 0803 	bic.w	r8, r0, #3
    d79e:	4546      	cmp	r6, r8
    d7a0:	eba8 0306 	sub.w	r3, r8, r6
    d7a4:	d802      	bhi.n	d7ac <_malloc_r+0x40c>
    d7a6:	2b0f      	cmp	r3, #15
    d7a8:	f73f af62 	bgt.w	d670 <_malloc_r+0x2d0>
    d7ac:	4620      	mov	r0, r4
    d7ae:	f000 f8ad 	bl	d90c <__malloc_unlock>
    d7b2:	2500      	movs	r5, #0
    d7b4:	e6bc      	b.n	d530 <_malloc_r+0x190>
    d7b6:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    d7ba:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    d7be:	00c3      	lsls	r3, r0, #3
    d7c0:	e634      	b.n	d42c <_malloc_r+0x8c>
    d7c2:	f859 3908 	ldr.w	r3, [r9], #-8
    d7c6:	454b      	cmp	r3, r9
    d7c8:	f040 8096 	bne.w	d8f8 <_malloc_r+0x558>
    d7cc:	f010 0f03 	tst.w	r0, #3
    d7d0:	f100 30ff 	add.w	r0, r0, #4294967295
    d7d4:	d1f5      	bne.n	d7c2 <_malloc_r+0x422>
    d7d6:	687b      	ldr	r3, [r7, #4]
    d7d8:	ea23 0301 	bic.w	r3, r3, r1
    d7dc:	607b      	str	r3, [r7, #4]
    d7de:	0049      	lsls	r1, r1, #1
    d7e0:	4299      	cmp	r1, r3
    d7e2:	f63f aec0 	bhi.w	d566 <_malloc_r+0x1c6>
    d7e6:	b919      	cbnz	r1, d7f0 <_malloc_r+0x450>
    d7e8:	e6bd      	b.n	d566 <_malloc_r+0x1c6>
    d7ea:	0049      	lsls	r1, r1, #1
    d7ec:	f10e 0e04 	add.w	lr, lr, #4
    d7f0:	4219      	tst	r1, r3
    d7f2:	d0fa      	beq.n	d7ea <_malloc_r+0x44a>
    d7f4:	4670      	mov	r0, lr
    d7f6:	e667      	b.n	d4c8 <_malloc_r+0x128>
    d7f8:	f103 0810 	add.w	r8, r3, #16
    d7fc:	e6d0      	b.n	d5a0 <_malloc_r+0x200>
    d7fe:	109a      	asrs	r2, r3, #2
    d800:	f04f 0801 	mov.w	r8, #1
    d804:	687b      	ldr	r3, [r7, #4]
    d806:	fa08 f202 	lsl.w	r2, r8, r2
    d80a:	431a      	orrs	r2, r3
    d80c:	607a      	str	r2, [r7, #4]
    d80e:	e770      	b.n	d6f2 <_malloc_r+0x352>
    d810:	eb02 0108 	add.w	r1, r2, r8
    d814:	4249      	negs	r1, r1
    d816:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    d81a:	4651      	mov	r1, sl
    d81c:	4620      	mov	r0, r4
    d81e:	9200      	str	r2, [sp, #0]
    d820:	f000 fcf4 	bl	e20c <_sbrk_r>
    d824:	1c43      	adds	r3, r0, #1
    d826:	e9dd 2300 	ldrd	r2, r3, [sp]
    d82a:	f47f aeef 	bne.w	d60c <_malloc_r+0x26c>
    d82e:	46da      	mov	sl, fp
    d830:	e6ef      	b.n	d612 <_malloc_r+0x272>
    d832:	2b54      	cmp	r3, #84	; 0x54
    d834:	d825      	bhi.n	d882 <_malloc_r+0x4e2>
    d836:	0b13      	lsrs	r3, r2, #12
    d838:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    d83c:	00c9      	lsls	r1, r1, #3
    d83e:	336e      	adds	r3, #110	; 0x6e
    d840:	e744      	b.n	d6cc <_malloc_r+0x32c>
    d842:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d846:	d825      	bhi.n	d894 <_malloc_r+0x4f4>
    d848:	0bf3      	lsrs	r3, r6, #15
    d84a:	f103 0078 	add.w	r0, r3, #120	; 0x78
    d84e:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    d852:	00c3      	lsls	r3, r0, #3
    d854:	e5ea      	b.n	d42c <_malloc_r+0x8c>
    d856:	4b29      	ldr	r3, [pc, #164]	; (d8fc <_malloc_r+0x55c>)
    d858:	6818      	ldr	r0, [r3, #0]
    d85a:	4440      	add	r0, r8
    d85c:	6018      	str	r0, [r3, #0]
    d85e:	e6b1      	b.n	d5c4 <_malloc_r+0x224>
    d860:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
    d864:	f1bc 0f00 	cmp.w	ip, #0
    d868:	f47f aeac 	bne.w	d5c4 <_malloc_r+0x224>
    d86c:	68bd      	ldr	r5, [r7, #8]
    d86e:	44c8      	add	r8, r9
    d870:	f048 0001 	orr.w	r0, r8, #1
    d874:	6068      	str	r0, [r5, #4]
    d876:	e6f0      	b.n	d65a <_malloc_r+0x2ba>
    d878:	4615      	mov	r5, r2
    d87a:	e6ee      	b.n	d65a <_malloc_r+0x2ba>
    d87c:	2301      	movs	r3, #1
    d87e:	6053      	str	r3, [r2, #4]
    d880:	e794      	b.n	d7ac <_malloc_r+0x40c>
    d882:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    d886:	d823      	bhi.n	d8d0 <_malloc_r+0x530>
    d888:	0bd3      	lsrs	r3, r2, #15
    d88a:	f103 0178 	add.w	r1, r3, #120	; 0x78
    d88e:	00c9      	lsls	r1, r1, #3
    d890:	3377      	adds	r3, #119	; 0x77
    d892:	e71b      	b.n	d6cc <_malloc_r+0x32c>
    d894:	f240 5254 	movw	r2, #1364	; 0x554
    d898:	4293      	cmp	r3, r2
    d89a:	d823      	bhi.n	d8e4 <_malloc_r+0x544>
    d89c:	0cb3      	lsrs	r3, r6, #18
    d89e:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    d8a2:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    d8a6:	00c3      	lsls	r3, r0, #3
    d8a8:	e5c0      	b.n	d42c <_malloc_r+0x8c>
    d8aa:	f1ab 0b08 	sub.w	fp, fp, #8
    d8ae:	44d8      	add	r8, fp
    d8b0:	eba8 0802 	sub.w	r8, r8, r2
    d8b4:	f04f 0a00 	mov.w	sl, #0
    d8b8:	e6ab      	b.n	d612 <_malloc_r+0x272>
    d8ba:	f105 0108 	add.w	r1, r5, #8
    d8be:	4620      	mov	r0, r4
    d8c0:	9300      	str	r3, [sp, #0]
    d8c2:	f000 fdcb 	bl	e45c <_free_r>
    d8c6:	68bd      	ldr	r5, [r7, #8]
    d8c8:	9b00      	ldr	r3, [sp, #0]
    d8ca:	6868      	ldr	r0, [r5, #4]
    d8cc:	6819      	ldr	r1, [r3, #0]
    d8ce:	e6c4      	b.n	d65a <_malloc_r+0x2ba>
    d8d0:	f240 5154 	movw	r1, #1364	; 0x554
    d8d4:	428b      	cmp	r3, r1
    d8d6:	d80b      	bhi.n	d8f0 <_malloc_r+0x550>
    d8d8:	0c93      	lsrs	r3, r2, #18
    d8da:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    d8de:	00c9      	lsls	r1, r1, #3
    d8e0:	337c      	adds	r3, #124	; 0x7c
    d8e2:	e6f3      	b.n	d6cc <_malloc_r+0x32c>
    d8e4:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    d8e8:	207f      	movs	r0, #127	; 0x7f
    d8ea:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    d8ee:	e59d      	b.n	d42c <_malloc_r+0x8c>
    d8f0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    d8f4:	237e      	movs	r3, #126	; 0x7e
    d8f6:	e6e9      	b.n	d6cc <_malloc_r+0x32c>
    d8f8:	687b      	ldr	r3, [r7, #4]
    d8fa:	e770      	b.n	d7de <_malloc_r+0x43e>
    d8fc:	1fffd5f8 	.word	0x1fffd5f8

0000d900 <__malloc_lock>:
    d900:	4801      	ldr	r0, [pc, #4]	; (d908 <__malloc_lock+0x8>)
    d902:	f000 bcd9 	b.w	e2b8 <__retarget_lock_acquire_recursive>
    d906:	bf00      	nop
    d908:	1fffd770 	.word	0x1fffd770

0000d90c <__malloc_unlock>:
    d90c:	4801      	ldr	r0, [pc, #4]	; (d914 <__malloc_unlock+0x8>)
    d90e:	f000 bcd5 	b.w	e2bc <__retarget_lock_release_recursive>
    d912:	bf00      	nop
    d914:	1fffd770 	.word	0x1fffd770

0000d918 <_realloc_r>:
    d918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d91c:	4617      	mov	r7, r2
    d91e:	2900      	cmp	r1, #0
    d920:	f000 8098 	beq.w	da54 <_realloc_r+0x13c>
    d924:	460c      	mov	r4, r1
    d926:	f107 050b 	add.w	r5, r7, #11
    d92a:	4680      	mov	r8, r0
    d92c:	f7ff ffe8 	bl	d900 <__malloc_lock>
    d930:	2d16      	cmp	r5, #22
    d932:	f854 1c04 	ldr.w	r1, [r4, #-4]
    d936:	d85b      	bhi.n	d9f0 <_realloc_r+0xd8>
    d938:	2510      	movs	r5, #16
    d93a:	462a      	mov	r2, r5
    d93c:	42af      	cmp	r7, r5
    d93e:	d85c      	bhi.n	d9fa <_realloc_r+0xe2>
    d940:	f021 0603 	bic.w	r6, r1, #3
    d944:	4296      	cmp	r6, r2
    d946:	f1a4 0908 	sub.w	r9, r4, #8
    d94a:	da62      	bge.n	da12 <_realloc_r+0xfa>
    d94c:	4bbc      	ldr	r3, [pc, #752]	; (dc40 <_realloc_r+0x328>)
    d94e:	f8d3 c008 	ldr.w	ip, [r3, #8]
    d952:	eb09 0006 	add.w	r0, r9, r6
    d956:	4584      	cmp	ip, r0
    d958:	f000 8097 	beq.w	da8a <_realloc_r+0x172>
    d95c:	f8d0 c004 	ldr.w	ip, [r0, #4]
    d960:	f02c 0301 	bic.w	r3, ip, #1
    d964:	4403      	add	r3, r0
    d966:	685b      	ldr	r3, [r3, #4]
    d968:	07db      	lsls	r3, r3, #31
    d96a:	d468      	bmi.n	da3e <_realloc_r+0x126>
    d96c:	f02c 0c03 	bic.w	ip, ip, #3
    d970:	eb06 030c 	add.w	r3, r6, ip
    d974:	4293      	cmp	r3, r2
    d976:	da47      	bge.n	da08 <_realloc_r+0xf0>
    d978:	07cb      	lsls	r3, r1, #31
    d97a:	d410      	bmi.n	d99e <_realloc_r+0x86>
    d97c:	f854 3c08 	ldr.w	r3, [r4, #-8]
    d980:	eba9 0a03 	sub.w	sl, r9, r3
    d984:	f8da 3004 	ldr.w	r3, [sl, #4]
    d988:	f023 0103 	bic.w	r1, r3, #3
    d98c:	448c      	add	ip, r1
    d98e:	44b4      	add	ip, r6
    d990:	4594      	cmp	ip, r2
    d992:	f280 8111 	bge.w	dbb8 <_realloc_r+0x2a0>
    d996:	1873      	adds	r3, r6, r1
    d998:	4293      	cmp	r3, r2
    d99a:	f280 80e8 	bge.w	db6e <_realloc_r+0x256>
    d99e:	4639      	mov	r1, r7
    d9a0:	4640      	mov	r0, r8
    d9a2:	f7ff fcfd 	bl	d3a0 <_malloc_r>
    d9a6:	4607      	mov	r7, r0
    d9a8:	b1e0      	cbz	r0, d9e4 <_realloc_r+0xcc>
    d9aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d9ae:	f023 0301 	bic.w	r3, r3, #1
    d9b2:	444b      	add	r3, r9
    d9b4:	f1a0 0208 	sub.w	r2, r0, #8
    d9b8:	4293      	cmp	r3, r2
    d9ba:	f000 80d2 	beq.w	db62 <_realloc_r+0x24a>
    d9be:	1f32      	subs	r2, r6, #4
    d9c0:	2a24      	cmp	r2, #36	; 0x24
    d9c2:	f200 80f5 	bhi.w	dbb0 <_realloc_r+0x298>
    d9c6:	2a13      	cmp	r2, #19
    d9c8:	f200 80ac 	bhi.w	db24 <_realloc_r+0x20c>
    d9cc:	4603      	mov	r3, r0
    d9ce:	4622      	mov	r2, r4
    d9d0:	6811      	ldr	r1, [r2, #0]
    d9d2:	6019      	str	r1, [r3, #0]
    d9d4:	6851      	ldr	r1, [r2, #4]
    d9d6:	6059      	str	r1, [r3, #4]
    d9d8:	6892      	ldr	r2, [r2, #8]
    d9da:	609a      	str	r2, [r3, #8]
    d9dc:	4621      	mov	r1, r4
    d9de:	4640      	mov	r0, r8
    d9e0:	f000 fd3c 	bl	e45c <_free_r>
    d9e4:	4640      	mov	r0, r8
    d9e6:	f7ff ff91 	bl	d90c <__malloc_unlock>
    d9ea:	4638      	mov	r0, r7
    d9ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d9f0:	f025 0507 	bic.w	r5, r5, #7
    d9f4:	2d00      	cmp	r5, #0
    d9f6:	462a      	mov	r2, r5
    d9f8:	daa0      	bge.n	d93c <_realloc_r+0x24>
    d9fa:	230c      	movs	r3, #12
    d9fc:	f8c8 3000 	str.w	r3, [r8]
    da00:	2700      	movs	r7, #0
    da02:	4638      	mov	r0, r7
    da04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da08:	461e      	mov	r6, r3
    da0a:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
    da0e:	60d3      	str	r3, [r2, #12]
    da10:	609a      	str	r2, [r3, #8]
    da12:	1b73      	subs	r3, r6, r5
    da14:	2b0f      	cmp	r3, #15
    da16:	d822      	bhi.n	da5e <_realloc_r+0x146>
    da18:	f8d9 3004 	ldr.w	r3, [r9, #4]
    da1c:	f003 0301 	and.w	r3, r3, #1
    da20:	4333      	orrs	r3, r6
    da22:	444e      	add	r6, r9
    da24:	f8c9 3004 	str.w	r3, [r9, #4]
    da28:	6873      	ldr	r3, [r6, #4]
    da2a:	f043 0301 	orr.w	r3, r3, #1
    da2e:	6073      	str	r3, [r6, #4]
    da30:	4640      	mov	r0, r8
    da32:	4627      	mov	r7, r4
    da34:	f7ff ff6a 	bl	d90c <__malloc_unlock>
    da38:	4638      	mov	r0, r7
    da3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    da3e:	07c9      	lsls	r1, r1, #31
    da40:	d4ad      	bmi.n	d99e <_realloc_r+0x86>
    da42:	f854 3c08 	ldr.w	r3, [r4, #-8]
    da46:	eba9 0a03 	sub.w	sl, r9, r3
    da4a:	f8da 1004 	ldr.w	r1, [sl, #4]
    da4e:	f021 0103 	bic.w	r1, r1, #3
    da52:	e7a0      	b.n	d996 <_realloc_r+0x7e>
    da54:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da58:	4611      	mov	r1, r2
    da5a:	f7ff bca1 	b.w	d3a0 <_malloc_r>
    da5e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    da62:	eb09 0105 	add.w	r1, r9, r5
    da66:	f002 0201 	and.w	r2, r2, #1
    da6a:	444e      	add	r6, r9
    da6c:	f043 0301 	orr.w	r3, r3, #1
    da70:	432a      	orrs	r2, r5
    da72:	f8c9 2004 	str.w	r2, [r9, #4]
    da76:	604b      	str	r3, [r1, #4]
    da78:	6873      	ldr	r3, [r6, #4]
    da7a:	f043 0301 	orr.w	r3, r3, #1
    da7e:	3108      	adds	r1, #8
    da80:	6073      	str	r3, [r6, #4]
    da82:	4640      	mov	r0, r8
    da84:	f000 fcea 	bl	e45c <_free_r>
    da88:	e7d2      	b.n	da30 <_realloc_r+0x118>
    da8a:	f8dc 0004 	ldr.w	r0, [ip, #4]
    da8e:	f020 0b03 	bic.w	fp, r0, #3
    da92:	eb06 0c0b 	add.w	ip, r6, fp
    da96:	f105 0010 	add.w	r0, r5, #16
    da9a:	4584      	cmp	ip, r0
    da9c:	da4d      	bge.n	db3a <_realloc_r+0x222>
    da9e:	07c9      	lsls	r1, r1, #31
    daa0:	f53f af7d 	bmi.w	d99e <_realloc_r+0x86>
    daa4:	f854 1c08 	ldr.w	r1, [r4, #-8]
    daa8:	eba9 0a01 	sub.w	sl, r9, r1
    daac:	f8da 1004 	ldr.w	r1, [sl, #4]
    dab0:	f021 0103 	bic.w	r1, r1, #3
    dab4:	448b      	add	fp, r1
    dab6:	44b3      	add	fp, r6
    dab8:	4558      	cmp	r0, fp
    daba:	f73f af6c 	bgt.w	d996 <_realloc_r+0x7e>
    dabe:	4657      	mov	r7, sl
    dac0:	f8da 100c 	ldr.w	r1, [sl, #12]
    dac4:	f857 0f08 	ldr.w	r0, [r7, #8]!
    dac8:	1f32      	subs	r2, r6, #4
    daca:	2a24      	cmp	r2, #36	; 0x24
    dacc:	60c1      	str	r1, [r0, #12]
    dace:	6088      	str	r0, [r1, #8]
    dad0:	f200 80db 	bhi.w	dc8a <_realloc_r+0x372>
    dad4:	2a13      	cmp	r2, #19
    dad6:	f240 80d6 	bls.w	dc86 <_realloc_r+0x36e>
    dada:	6821      	ldr	r1, [r4, #0]
    dadc:	f8ca 1008 	str.w	r1, [sl, #8]
    dae0:	6861      	ldr	r1, [r4, #4]
    dae2:	f8ca 100c 	str.w	r1, [sl, #12]
    dae6:	2a1b      	cmp	r2, #27
    dae8:	f200 80df 	bhi.w	dcaa <_realloc_r+0x392>
    daec:	3408      	adds	r4, #8
    daee:	f10a 0210 	add.w	r2, sl, #16
    daf2:	6821      	ldr	r1, [r4, #0]
    daf4:	6011      	str	r1, [r2, #0]
    daf6:	6861      	ldr	r1, [r4, #4]
    daf8:	6051      	str	r1, [r2, #4]
    dafa:	68a1      	ldr	r1, [r4, #8]
    dafc:	6091      	str	r1, [r2, #8]
    dafe:	eb0a 0105 	add.w	r1, sl, r5
    db02:	ebab 0205 	sub.w	r2, fp, r5
    db06:	f042 0201 	orr.w	r2, r2, #1
    db0a:	6099      	str	r1, [r3, #8]
    db0c:	604a      	str	r2, [r1, #4]
    db0e:	f8da 3004 	ldr.w	r3, [sl, #4]
    db12:	f003 0301 	and.w	r3, r3, #1
    db16:	432b      	orrs	r3, r5
    db18:	4640      	mov	r0, r8
    db1a:	f8ca 3004 	str.w	r3, [sl, #4]
    db1e:	f7ff fef5 	bl	d90c <__malloc_unlock>
    db22:	e76e      	b.n	da02 <_realloc_r+0xea>
    db24:	6823      	ldr	r3, [r4, #0]
    db26:	6003      	str	r3, [r0, #0]
    db28:	6863      	ldr	r3, [r4, #4]
    db2a:	6043      	str	r3, [r0, #4]
    db2c:	2a1b      	cmp	r2, #27
    db2e:	d868      	bhi.n	dc02 <_realloc_r+0x2ea>
    db30:	f104 0208 	add.w	r2, r4, #8
    db34:	f100 0308 	add.w	r3, r0, #8
    db38:	e74a      	b.n	d9d0 <_realloc_r+0xb8>
    db3a:	eb09 0205 	add.w	r2, r9, r5
    db3e:	609a      	str	r2, [r3, #8]
    db40:	ebac 0305 	sub.w	r3, ip, r5
    db44:	f043 0301 	orr.w	r3, r3, #1
    db48:	6053      	str	r3, [r2, #4]
    db4a:	f854 3c04 	ldr.w	r3, [r4, #-4]
    db4e:	f003 0301 	and.w	r3, r3, #1
    db52:	432b      	orrs	r3, r5
    db54:	4640      	mov	r0, r8
    db56:	f844 3c04 	str.w	r3, [r4, #-4]
    db5a:	f7ff fed7 	bl	d90c <__malloc_unlock>
    db5e:	4627      	mov	r7, r4
    db60:	e74f      	b.n	da02 <_realloc_r+0xea>
    db62:	f850 3c04 	ldr.w	r3, [r0, #-4]
    db66:	f023 0303 	bic.w	r3, r3, #3
    db6a:	441e      	add	r6, r3
    db6c:	e751      	b.n	da12 <_realloc_r+0xfa>
    db6e:	4657      	mov	r7, sl
    db70:	f8da 100c 	ldr.w	r1, [sl, #12]
    db74:	f857 0f08 	ldr.w	r0, [r7, #8]!
    db78:	1f32      	subs	r2, r6, #4
    db7a:	2a24      	cmp	r2, #36	; 0x24
    db7c:	60c1      	str	r1, [r0, #12]
    db7e:	6088      	str	r0, [r1, #8]
    db80:	d84c      	bhi.n	dc1c <_realloc_r+0x304>
    db82:	2a13      	cmp	r2, #19
    db84:	d948      	bls.n	dc18 <_realloc_r+0x300>
    db86:	6821      	ldr	r1, [r4, #0]
    db88:	f8ca 1008 	str.w	r1, [sl, #8]
    db8c:	6861      	ldr	r1, [r4, #4]
    db8e:	f8ca 100c 	str.w	r1, [sl, #12]
    db92:	2a1b      	cmp	r2, #27
    db94:	d856      	bhi.n	dc44 <_realloc_r+0x32c>
    db96:	3408      	adds	r4, #8
    db98:	f10a 0210 	add.w	r2, sl, #16
    db9c:	461e      	mov	r6, r3
    db9e:	6823      	ldr	r3, [r4, #0]
    dba0:	6013      	str	r3, [r2, #0]
    dba2:	6863      	ldr	r3, [r4, #4]
    dba4:	6053      	str	r3, [r2, #4]
    dba6:	68a3      	ldr	r3, [r4, #8]
    dba8:	6093      	str	r3, [r2, #8]
    dbaa:	46d1      	mov	r9, sl
    dbac:	463c      	mov	r4, r7
    dbae:	e730      	b.n	da12 <_realloc_r+0xfa>
    dbb0:	4621      	mov	r1, r4
    dbb2:	f000 f9e7 	bl	df84 <memmove>
    dbb6:	e711      	b.n	d9dc <_realloc_r+0xc4>
    dbb8:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
    dbbc:	4657      	mov	r7, sl
    dbbe:	60cb      	str	r3, [r1, #12]
    dbc0:	6099      	str	r1, [r3, #8]
    dbc2:	f857 1f08 	ldr.w	r1, [r7, #8]!
    dbc6:	f8da 300c 	ldr.w	r3, [sl, #12]
    dbca:	60cb      	str	r3, [r1, #12]
    dbcc:	1f32      	subs	r2, r6, #4
    dbce:	2a24      	cmp	r2, #36	; 0x24
    dbd0:	6099      	str	r1, [r3, #8]
    dbd2:	d82d      	bhi.n	dc30 <_realloc_r+0x318>
    dbd4:	2a13      	cmp	r2, #19
    dbd6:	d929      	bls.n	dc2c <_realloc_r+0x314>
    dbd8:	6823      	ldr	r3, [r4, #0]
    dbda:	f8ca 3008 	str.w	r3, [sl, #8]
    dbde:	6863      	ldr	r3, [r4, #4]
    dbe0:	f8ca 300c 	str.w	r3, [sl, #12]
    dbe4:	2a1b      	cmp	r2, #27
    dbe6:	d842      	bhi.n	dc6e <_realloc_r+0x356>
    dbe8:	3408      	adds	r4, #8
    dbea:	f10a 0310 	add.w	r3, sl, #16
    dbee:	6822      	ldr	r2, [r4, #0]
    dbf0:	601a      	str	r2, [r3, #0]
    dbf2:	6862      	ldr	r2, [r4, #4]
    dbf4:	605a      	str	r2, [r3, #4]
    dbf6:	68a2      	ldr	r2, [r4, #8]
    dbf8:	609a      	str	r2, [r3, #8]
    dbfa:	4666      	mov	r6, ip
    dbfc:	46d1      	mov	r9, sl
    dbfe:	463c      	mov	r4, r7
    dc00:	e707      	b.n	da12 <_realloc_r+0xfa>
    dc02:	68a3      	ldr	r3, [r4, #8]
    dc04:	6083      	str	r3, [r0, #8]
    dc06:	68e3      	ldr	r3, [r4, #12]
    dc08:	60c3      	str	r3, [r0, #12]
    dc0a:	2a24      	cmp	r2, #36	; 0x24
    dc0c:	d026      	beq.n	dc5c <_realloc_r+0x344>
    dc0e:	f104 0210 	add.w	r2, r4, #16
    dc12:	f100 0310 	add.w	r3, r0, #16
    dc16:	e6db      	b.n	d9d0 <_realloc_r+0xb8>
    dc18:	463a      	mov	r2, r7
    dc1a:	e7bf      	b.n	db9c <_realloc_r+0x284>
    dc1c:	4621      	mov	r1, r4
    dc1e:	4638      	mov	r0, r7
    dc20:	461e      	mov	r6, r3
    dc22:	46d1      	mov	r9, sl
    dc24:	f000 f9ae 	bl	df84 <memmove>
    dc28:	463c      	mov	r4, r7
    dc2a:	e6f2      	b.n	da12 <_realloc_r+0xfa>
    dc2c:	463b      	mov	r3, r7
    dc2e:	e7de      	b.n	dbee <_realloc_r+0x2d6>
    dc30:	4621      	mov	r1, r4
    dc32:	4638      	mov	r0, r7
    dc34:	4666      	mov	r6, ip
    dc36:	46d1      	mov	r9, sl
    dc38:	f000 f9a4 	bl	df84 <memmove>
    dc3c:	463c      	mov	r4, r7
    dc3e:	e6e8      	b.n	da12 <_realloc_r+0xfa>
    dc40:	1fff8ab8 	.word	0x1fff8ab8
    dc44:	68a1      	ldr	r1, [r4, #8]
    dc46:	f8ca 1010 	str.w	r1, [sl, #16]
    dc4a:	68e1      	ldr	r1, [r4, #12]
    dc4c:	f8ca 1014 	str.w	r1, [sl, #20]
    dc50:	2a24      	cmp	r2, #36	; 0x24
    dc52:	d020      	beq.n	dc96 <_realloc_r+0x37e>
    dc54:	3410      	adds	r4, #16
    dc56:	f10a 0218 	add.w	r2, sl, #24
    dc5a:	e79f      	b.n	db9c <_realloc_r+0x284>
    dc5c:	6923      	ldr	r3, [r4, #16]
    dc5e:	6103      	str	r3, [r0, #16]
    dc60:	6961      	ldr	r1, [r4, #20]
    dc62:	6141      	str	r1, [r0, #20]
    dc64:	f104 0218 	add.w	r2, r4, #24
    dc68:	f100 0318 	add.w	r3, r0, #24
    dc6c:	e6b0      	b.n	d9d0 <_realloc_r+0xb8>
    dc6e:	68a3      	ldr	r3, [r4, #8]
    dc70:	f8ca 3010 	str.w	r3, [sl, #16]
    dc74:	68e3      	ldr	r3, [r4, #12]
    dc76:	f8ca 3014 	str.w	r3, [sl, #20]
    dc7a:	2a24      	cmp	r2, #36	; 0x24
    dc7c:	d021      	beq.n	dcc2 <_realloc_r+0x3aa>
    dc7e:	3410      	adds	r4, #16
    dc80:	f10a 0318 	add.w	r3, sl, #24
    dc84:	e7b3      	b.n	dbee <_realloc_r+0x2d6>
    dc86:	463a      	mov	r2, r7
    dc88:	e733      	b.n	daf2 <_realloc_r+0x1da>
    dc8a:	4621      	mov	r1, r4
    dc8c:	4638      	mov	r0, r7
    dc8e:	f000 f979 	bl	df84 <memmove>
    dc92:	4b16      	ldr	r3, [pc, #88]	; (dcec <_realloc_r+0x3d4>)
    dc94:	e733      	b.n	dafe <_realloc_r+0x1e6>
    dc96:	6922      	ldr	r2, [r4, #16]
    dc98:	f8ca 2018 	str.w	r2, [sl, #24]
    dc9c:	6962      	ldr	r2, [r4, #20]
    dc9e:	f8ca 201c 	str.w	r2, [sl, #28]
    dca2:	3418      	adds	r4, #24
    dca4:	f10a 0220 	add.w	r2, sl, #32
    dca8:	e778      	b.n	db9c <_realloc_r+0x284>
    dcaa:	68a1      	ldr	r1, [r4, #8]
    dcac:	f8ca 1010 	str.w	r1, [sl, #16]
    dcb0:	68e1      	ldr	r1, [r4, #12]
    dcb2:	f8ca 1014 	str.w	r1, [sl, #20]
    dcb6:	2a24      	cmp	r2, #36	; 0x24
    dcb8:	d00d      	beq.n	dcd6 <_realloc_r+0x3be>
    dcba:	3410      	adds	r4, #16
    dcbc:	f10a 0218 	add.w	r2, sl, #24
    dcc0:	e717      	b.n	daf2 <_realloc_r+0x1da>
    dcc2:	6923      	ldr	r3, [r4, #16]
    dcc4:	f8ca 3018 	str.w	r3, [sl, #24]
    dcc8:	6963      	ldr	r3, [r4, #20]
    dcca:	f8ca 301c 	str.w	r3, [sl, #28]
    dcce:	3418      	adds	r4, #24
    dcd0:	f10a 0320 	add.w	r3, sl, #32
    dcd4:	e78b      	b.n	dbee <_realloc_r+0x2d6>
    dcd6:	6922      	ldr	r2, [r4, #16]
    dcd8:	f8ca 2018 	str.w	r2, [sl, #24]
    dcdc:	6962      	ldr	r2, [r4, #20]
    dcde:	f8ca 201c 	str.w	r2, [sl, #28]
    dce2:	3418      	adds	r4, #24
    dce4:	f10a 0220 	add.w	r2, sl, #32
    dce8:	e703      	b.n	daf2 <_realloc_r+0x1da>
    dcea:	bf00      	nop
    dcec:	1fff8ab8 	.word	0x1fff8ab8

0000dcf0 <stdio_exit_handler>:
    dcf0:	4a02      	ldr	r2, [pc, #8]	; (dcfc <stdio_exit_handler+0xc>)
    dcf2:	4903      	ldr	r1, [pc, #12]	; (dd00 <stdio_exit_handler+0x10>)
    dcf4:	4803      	ldr	r0, [pc, #12]	; (dd04 <stdio_exit_handler+0x14>)
    dcf6:	f000 b8bb 	b.w	de70 <_fwalk_sglue>
    dcfa:	bf00      	nop
    dcfc:	1fff8ec8 	.word	0x1fff8ec8
    dd00:	000109b1 	.word	0x000109b1
    dd04:	1fff9040 	.word	0x1fff9040

0000dd08 <cleanup_stdio>:
    dd08:	4b0c      	ldr	r3, [pc, #48]	; (dd3c <cleanup_stdio+0x34>)
    dd0a:	6841      	ldr	r1, [r0, #4]
    dd0c:	4299      	cmp	r1, r3
    dd0e:	b510      	push	{r4, lr}
    dd10:	4604      	mov	r4, r0
    dd12:	d001      	beq.n	dd18 <cleanup_stdio+0x10>
    dd14:	f002 fe4c 	bl	109b0 <_fclose_r>
    dd18:	68a1      	ldr	r1, [r4, #8]
    dd1a:	4b09      	ldr	r3, [pc, #36]	; (dd40 <cleanup_stdio+0x38>)
    dd1c:	4299      	cmp	r1, r3
    dd1e:	d002      	beq.n	dd26 <cleanup_stdio+0x1e>
    dd20:	4620      	mov	r0, r4
    dd22:	f002 fe45 	bl	109b0 <_fclose_r>
    dd26:	68e1      	ldr	r1, [r4, #12]
    dd28:	4b06      	ldr	r3, [pc, #24]	; (dd44 <cleanup_stdio+0x3c>)
    dd2a:	4299      	cmp	r1, r3
    dd2c:	d004      	beq.n	dd38 <cleanup_stdio+0x30>
    dd2e:	4620      	mov	r0, r4
    dd30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dd34:	f002 be3c 	b.w	109b0 <_fclose_r>
    dd38:	bd10      	pop	{r4, pc}
    dd3a:	bf00      	nop
    dd3c:	1fffd62c 	.word	0x1fffd62c
    dd40:	1fffd694 	.word	0x1fffd694
    dd44:	1fffd6fc 	.word	0x1fffd6fc

0000dd48 <global_stdio_init.part.0>:
    dd48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    dd4c:	4c2a      	ldr	r4, [pc, #168]	; (ddf8 <global_stdio_init.part.0+0xb0>)
    dd4e:	4b2b      	ldr	r3, [pc, #172]	; (ddfc <global_stdio_init.part.0+0xb4>)
    dd50:	482b      	ldr	r0, [pc, #172]	; (de00 <global_stdio_init.part.0+0xb8>)
    dd52:	f8df 90b0 	ldr.w	r9, [pc, #176]	; de04 <global_stdio_init.part.0+0xbc>
    dd56:	f8df 80b0 	ldr.w	r8, [pc, #176]	; de08 <global_stdio_init.part.0+0xc0>
    dd5a:	4f2c      	ldr	r7, [pc, #176]	; (de0c <global_stdio_init.part.0+0xc4>)
    dd5c:	6018      	str	r0, [r3, #0]
    dd5e:	2500      	movs	r5, #0
    dd60:	2304      	movs	r3, #4
    dd62:	2208      	movs	r2, #8
    dd64:	4629      	mov	r1, r5
    dd66:	f104 005c 	add.w	r0, r4, #92	; 0x5c
    dd6a:	4e29      	ldr	r6, [pc, #164]	; (de10 <global_stdio_init.part.0+0xc8>)
    dd6c:	6665      	str	r5, [r4, #100]	; 0x64
    dd6e:	e9c4 5302 	strd	r5, r3, [r4, #8]
    dd72:	e9c4 5500 	strd	r5, r5, [r4]
    dd76:	e9c4 5504 	strd	r5, r5, [r4, #16]
    dd7a:	61a5      	str	r5, [r4, #24]
    dd7c:	f000 f97e 	bl	e07c <memset>
    dd80:	4b24      	ldr	r3, [pc, #144]	; (de14 <global_stdio_init.part.0+0xcc>)
    dd82:	6763      	str	r3, [r4, #116]	; 0x74
    dd84:	2208      	movs	r2, #8
    dd86:	4629      	mov	r1, r5
    dd88:	f104 00c4 	add.w	r0, r4, #196	; 0xc4
    dd8c:	e9c4 4907 	strd	r4, r9, [r4, #28]
    dd90:	e9c4 8709 	strd	r8, r7, [r4, #36]	; 0x24
    dd94:	e9c4 551a 	strd	r5, r5, [r4, #104]	; 0x68
    dd98:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
    dd9c:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
    dda0:	6725      	str	r5, [r4, #112]	; 0x70
    dda2:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
    dda6:	62e6      	str	r6, [r4, #44]	; 0x2c
    dda8:	f000 f968 	bl	e07c <memset>
    ddac:	4b1a      	ldr	r3, [pc, #104]	; (de18 <global_stdio_init.part.0+0xd0>)
    ddae:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
    ddb2:	4629      	mov	r1, r5
    ddb4:	f104 0368 	add.w	r3, r4, #104	; 0x68
    ddb8:	2208      	movs	r2, #8
    ddba:	f504 7096 	add.w	r0, r4, #300	; 0x12c
    ddbe:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    ddc2:	e9c4 9822 	strd	r9, r8, [r4, #136]	; 0x88
    ddc6:	e9c4 7624 	strd	r7, r6, [r4, #144]	; 0x90
    ddca:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
    ddce:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
    ddd2:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    ddd6:	f8c4 50d8 	str.w	r5, [r4, #216]	; 0xd8
    ddda:	f8c4 50e8 	str.w	r5, [r4, #232]	; 0xe8
    ddde:	f000 f94d 	bl	e07c <memset>
    dde2:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
    dde6:	e9c4 983c 	strd	r9, r8, [r4, #240]	; 0xf0
    ddea:	e9c4 763e 	strd	r7, r6, [r4, #248]	; 0xf8
    ddee:	f8c4 30ec 	str.w	r3, [r4, #236]	; 0xec
    ddf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ddf6:	bf00      	nop
    ddf8:	1fffd62c 	.word	0x1fffd62c
    ddfc:	1fffd764 	.word	0x1fffd764
    de00:	0000dcf1 	.word	0x0000dcf1
    de04:	0000def9 	.word	0x0000def9
    de08:	0000df1d 	.word	0x0000df1d
    de0c:	0000df5d 	.word	0x0000df5d
    de10:	0000df7d 	.word	0x0000df7d
    de14:	00010009 	.word	0x00010009
    de18:	00020012 	.word	0x00020012

0000de1c <__sinit>:
    de1c:	b510      	push	{r4, lr}
    de1e:	4604      	mov	r4, r0
    de20:	480a      	ldr	r0, [pc, #40]	; (de4c <__sinit+0x30>)
    de22:	f000 fa49 	bl	e2b8 <__retarget_lock_acquire_recursive>
    de26:	6b63      	ldr	r3, [r4, #52]	; 0x34
    de28:	b923      	cbnz	r3, de34 <__sinit+0x18>
    de2a:	4b09      	ldr	r3, [pc, #36]	; (de50 <__sinit+0x34>)
    de2c:	4a09      	ldr	r2, [pc, #36]	; (de54 <__sinit+0x38>)
    de2e:	681b      	ldr	r3, [r3, #0]
    de30:	6362      	str	r2, [r4, #52]	; 0x34
    de32:	b123      	cbz	r3, de3e <__sinit+0x22>
    de34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de38:	4804      	ldr	r0, [pc, #16]	; (de4c <__sinit+0x30>)
    de3a:	f000 ba3f 	b.w	e2bc <__retarget_lock_release_recursive>
    de3e:	f7ff ff83 	bl	dd48 <global_stdio_init.part.0>
    de42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    de46:	4801      	ldr	r0, [pc, #4]	; (de4c <__sinit+0x30>)
    de48:	f000 ba38 	b.w	e2bc <__retarget_lock_release_recursive>
    de4c:	1fffd774 	.word	0x1fffd774
    de50:	1fffd764 	.word	0x1fffd764
    de54:	0000dd09 	.word	0x0000dd09

0000de58 <__sfp_lock_acquire>:
    de58:	4801      	ldr	r0, [pc, #4]	; (de60 <__sfp_lock_acquire+0x8>)
    de5a:	f000 ba2d 	b.w	e2b8 <__retarget_lock_acquire_recursive>
    de5e:	bf00      	nop
    de60:	1fffd774 	.word	0x1fffd774

0000de64 <__sfp_lock_release>:
    de64:	4801      	ldr	r0, [pc, #4]	; (de6c <__sfp_lock_release+0x8>)
    de66:	f000 ba29 	b.w	e2bc <__retarget_lock_release_recursive>
    de6a:	bf00      	nop
    de6c:	1fffd774 	.word	0x1fffd774

0000de70 <_fwalk_sglue>:
    de70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    de74:	4680      	mov	r8, r0
    de76:	460f      	mov	r7, r1
    de78:	4616      	mov	r6, r2
    de7a:	f04f 0900 	mov.w	r9, #0
    de7e:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
    de82:	3d01      	subs	r5, #1
    de84:	d411      	bmi.n	deaa <_fwalk_sglue+0x3a>
    de86:	89a3      	ldrh	r3, [r4, #12]
    de88:	2b01      	cmp	r3, #1
    de8a:	f105 35ff 	add.w	r5, r5, #4294967295
    de8e:	d908      	bls.n	dea2 <_fwalk_sglue+0x32>
    de90:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    de94:	3301      	adds	r3, #1
    de96:	4621      	mov	r1, r4
    de98:	d003      	beq.n	dea2 <_fwalk_sglue+0x32>
    de9a:	4640      	mov	r0, r8
    de9c:	47b8      	blx	r7
    de9e:	ea49 0900 	orr.w	r9, r9, r0
    dea2:	1c6b      	adds	r3, r5, #1
    dea4:	f104 0468 	add.w	r4, r4, #104	; 0x68
    dea8:	d1ed      	bne.n	de86 <_fwalk_sglue+0x16>
    deaa:	6836      	ldr	r6, [r6, #0]
    deac:	2e00      	cmp	r6, #0
    deae:	d1e6      	bne.n	de7e <_fwalk_sglue+0xe>
    deb0:	4648      	mov	r0, r9
    deb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    deb6:	bf00      	nop

0000deb8 <sprintf>:
    deb8:	b40e      	push	{r1, r2, r3}
    deba:	b510      	push	{r4, lr}
    debc:	b09d      	sub	sp, #116	; 0x74
    debe:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
    dec2:	ab1f      	add	r3, sp, #124	; 0x7c
    dec4:	e9cd 0106 	strd	r0, r1, [sp, #24]
    dec8:	9104      	str	r1, [sp, #16]
    deca:	4909      	ldr	r1, [pc, #36]	; (def0 <sprintf+0x38>)
    decc:	f853 2b04 	ldr.w	r2, [r3], #4
    ded0:	9002      	str	r0, [sp, #8]
    ded2:	4c08      	ldr	r4, [pc, #32]	; (def4 <sprintf+0x3c>)
    ded4:	6808      	ldr	r0, [r1, #0]
    ded6:	9301      	str	r3, [sp, #4]
    ded8:	a902      	add	r1, sp, #8
    deda:	9405      	str	r4, [sp, #20]
    dedc:	f000 ff96 	bl	ee0c <_svfprintf_r>
    dee0:	9b02      	ldr	r3, [sp, #8]
    dee2:	2200      	movs	r2, #0
    dee4:	701a      	strb	r2, [r3, #0]
    dee6:	b01d      	add	sp, #116	; 0x74
    dee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    deec:	b003      	add	sp, #12
    deee:	4770      	bx	lr
    def0:	1fff9160 	.word	0x1fff9160
    def4:	ffff0208 	.word	0xffff0208

0000def8 <__sread>:
    def8:	b510      	push	{r4, lr}
    defa:	460c      	mov	r4, r1
    defc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    df00:	f000 f96e 	bl	e1e0 <_read_r>
    df04:	2800      	cmp	r0, #0
    df06:	db03      	blt.n	df10 <__sread+0x18>
    df08:	6d23      	ldr	r3, [r4, #80]	; 0x50
    df0a:	4403      	add	r3, r0
    df0c:	6523      	str	r3, [r4, #80]	; 0x50
    df0e:	bd10      	pop	{r4, pc}
    df10:	89a3      	ldrh	r3, [r4, #12]
    df12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    df16:	81a3      	strh	r3, [r4, #12]
    df18:	bd10      	pop	{r4, pc}
    df1a:	bf00      	nop

0000df1c <__swrite>:
    df1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    df20:	460c      	mov	r4, r1
    df22:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
    df26:	461f      	mov	r7, r3
    df28:	05cb      	lsls	r3, r1, #23
    df2a:	4605      	mov	r5, r0
    df2c:	4616      	mov	r6, r2
    df2e:	d40b      	bmi.n	df48 <__swrite+0x2c>
    df30:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
    df34:	81a1      	strh	r1, [r4, #12]
    df36:	463b      	mov	r3, r7
    df38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    df3c:	4632      	mov	r2, r6
    df3e:	4628      	mov	r0, r5
    df40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    df44:	f000 b974 	b.w	e230 <_write_r>
    df48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
    df4c:	2302      	movs	r3, #2
    df4e:	2200      	movs	r2, #0
    df50:	f000 f930 	bl	e1b4 <_lseek_r>
    df54:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
    df58:	e7ea      	b.n	df30 <__swrite+0x14>
    df5a:	bf00      	nop

0000df5c <__sseek>:
    df5c:	b510      	push	{r4, lr}
    df5e:	460c      	mov	r4, r1
    df60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    df64:	f000 f926 	bl	e1b4 <_lseek_r>
    df68:	89a3      	ldrh	r3, [r4, #12]
    df6a:	1c42      	adds	r2, r0, #1
    df6c:	bf0e      	itee	eq
    df6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
    df72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
    df76:	6520      	strne	r0, [r4, #80]	; 0x50
    df78:	81a3      	strh	r3, [r4, #12]
    df7a:	bd10      	pop	{r4, pc}

0000df7c <__sclose>:
    df7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
    df80:	f000 b906 	b.w	e190 <_close_r>

0000df84 <memmove>:
    df84:	4288      	cmp	r0, r1
    df86:	d90d      	bls.n	dfa4 <memmove+0x20>
    df88:	188b      	adds	r3, r1, r2
    df8a:	4283      	cmp	r3, r0
    df8c:	d90a      	bls.n	dfa4 <memmove+0x20>
    df8e:	eb00 0c02 	add.w	ip, r0, r2
    df92:	b1ba      	cbz	r2, dfc4 <memmove+0x40>
    df94:	4662      	mov	r2, ip
    df96:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
    df9a:	f802 cd01 	strb.w	ip, [r2, #-1]!
    df9e:	4299      	cmp	r1, r3
    dfa0:	d1f9      	bne.n	df96 <memmove+0x12>
    dfa2:	4770      	bx	lr
    dfa4:	2a0f      	cmp	r2, #15
    dfa6:	d80e      	bhi.n	dfc6 <memmove+0x42>
    dfa8:	4603      	mov	r3, r0
    dfaa:	f102 3cff 	add.w	ip, r2, #4294967295
    dfae:	b14a      	cbz	r2, dfc4 <memmove+0x40>
    dfb0:	f10c 0c01 	add.w	ip, ip, #1
    dfb4:	3b01      	subs	r3, #1
    dfb6:	448c      	add	ip, r1
    dfb8:	f811 2b01 	ldrb.w	r2, [r1], #1
    dfbc:	f803 2f01 	strb.w	r2, [r3, #1]!
    dfc0:	4561      	cmp	r1, ip
    dfc2:	d1f9      	bne.n	dfb8 <memmove+0x34>
    dfc4:	4770      	bx	lr
    dfc6:	ea40 0301 	orr.w	r3, r0, r1
    dfca:	079b      	lsls	r3, r3, #30
    dfcc:	d150      	bne.n	e070 <memmove+0xec>
    dfce:	f1a2 0310 	sub.w	r3, r2, #16
    dfd2:	b570      	push	{r4, r5, r6, lr}
    dfd4:	f101 0c20 	add.w	ip, r1, #32
    dfd8:	f023 050f 	bic.w	r5, r3, #15
    dfdc:	f101 0e10 	add.w	lr, r1, #16
    dfe0:	f100 0410 	add.w	r4, r0, #16
    dfe4:	44ac      	add	ip, r5
    dfe6:	091b      	lsrs	r3, r3, #4
    dfe8:	f85e 5c10 	ldr.w	r5, [lr, #-16]
    dfec:	f844 5c10 	str.w	r5, [r4, #-16]
    dff0:	f85e 5c0c 	ldr.w	r5, [lr, #-12]
    dff4:	f844 5c0c 	str.w	r5, [r4, #-12]
    dff8:	f85e 5c08 	ldr.w	r5, [lr, #-8]
    dffc:	f844 5c08 	str.w	r5, [r4, #-8]
    e000:	f85e 5c04 	ldr.w	r5, [lr, #-4]
    e004:	f844 5c04 	str.w	r5, [r4, #-4]
    e008:	f10e 0e10 	add.w	lr, lr, #16
    e00c:	45e6      	cmp	lr, ip
    e00e:	f104 0410 	add.w	r4, r4, #16
    e012:	d1e9      	bne.n	dfe8 <memmove+0x64>
    e014:	3301      	adds	r3, #1
    e016:	f012 0f0c 	tst.w	r2, #12
    e01a:	eb01 1103 	add.w	r1, r1, r3, lsl #4
    e01e:	f002 040f 	and.w	r4, r2, #15
    e022:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    e026:	d027      	beq.n	e078 <memmove+0xf4>
    e028:	3c04      	subs	r4, #4
    e02a:	f024 0603 	bic.w	r6, r4, #3
    e02e:	ea4f 0c94 	mov.w	ip, r4, lsr #2
    e032:	441e      	add	r6, r3
    e034:	1f1c      	subs	r4, r3, #4
    e036:	468e      	mov	lr, r1
    e038:	f85e 5b04 	ldr.w	r5, [lr], #4
    e03c:	f844 5f04 	str.w	r5, [r4, #4]!
    e040:	42b4      	cmp	r4, r6
    e042:	d1f9      	bne.n	e038 <memmove+0xb4>
    e044:	f10c 0401 	add.w	r4, ip, #1
    e048:	f002 0203 	and.w	r2, r2, #3
    e04c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    e050:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    e054:	f102 3cff 	add.w	ip, r2, #4294967295
    e058:	b14a      	cbz	r2, e06e <memmove+0xea>
    e05a:	f10c 0c01 	add.w	ip, ip, #1
    e05e:	3b01      	subs	r3, #1
    e060:	448c      	add	ip, r1
    e062:	f811 2b01 	ldrb.w	r2, [r1], #1
    e066:	f803 2f01 	strb.w	r2, [r3, #1]!
    e06a:	4561      	cmp	r1, ip
    e06c:	d1f9      	bne.n	e062 <memmove+0xde>
    e06e:	bd70      	pop	{r4, r5, r6, pc}
    e070:	f102 3cff 	add.w	ip, r2, #4294967295
    e074:	4603      	mov	r3, r0
    e076:	e79b      	b.n	dfb0 <memmove+0x2c>
    e078:	4622      	mov	r2, r4
    e07a:	e7eb      	b.n	e054 <memmove+0xd0>

0000e07c <memset>:
    e07c:	0783      	lsls	r3, r0, #30
    e07e:	b530      	push	{r4, r5, lr}
    e080:	d048      	beq.n	e114 <memset+0x98>
    e082:	1e54      	subs	r4, r2, #1
    e084:	2a00      	cmp	r2, #0
    e086:	d03f      	beq.n	e108 <memset+0x8c>
    e088:	b2ca      	uxtb	r2, r1
    e08a:	4603      	mov	r3, r0
    e08c:	e001      	b.n	e092 <memset+0x16>
    e08e:	3c01      	subs	r4, #1
    e090:	d33a      	bcc.n	e108 <memset+0x8c>
    e092:	f803 2b01 	strb.w	r2, [r3], #1
    e096:	079d      	lsls	r5, r3, #30
    e098:	d1f9      	bne.n	e08e <memset+0x12>
    e09a:	2c03      	cmp	r4, #3
    e09c:	d92d      	bls.n	e0fa <memset+0x7e>
    e09e:	b2cd      	uxtb	r5, r1
    e0a0:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    e0a4:	2c0f      	cmp	r4, #15
    e0a6:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    e0aa:	d936      	bls.n	e11a <memset+0x9e>
    e0ac:	f1a4 0210 	sub.w	r2, r4, #16
    e0b0:	f022 0c0f 	bic.w	ip, r2, #15
    e0b4:	f103 0e20 	add.w	lr, r3, #32
    e0b8:	44e6      	add	lr, ip
    e0ba:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    e0be:	f103 0210 	add.w	r2, r3, #16
    e0c2:	e942 5504 	strd	r5, r5, [r2, #-16]
    e0c6:	e942 5502 	strd	r5, r5, [r2, #-8]
    e0ca:	3210      	adds	r2, #16
    e0cc:	4572      	cmp	r2, lr
    e0ce:	d1f8      	bne.n	e0c2 <memset+0x46>
    e0d0:	f10c 0201 	add.w	r2, ip, #1
    e0d4:	f014 0f0c 	tst.w	r4, #12
    e0d8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    e0dc:	f004 0c0f 	and.w	ip, r4, #15
    e0e0:	d013      	beq.n	e10a <memset+0x8e>
    e0e2:	f1ac 0304 	sub.w	r3, ip, #4
    e0e6:	f023 0303 	bic.w	r3, r3, #3
    e0ea:	3304      	adds	r3, #4
    e0ec:	4413      	add	r3, r2
    e0ee:	f842 5b04 	str.w	r5, [r2], #4
    e0f2:	4293      	cmp	r3, r2
    e0f4:	d1fb      	bne.n	e0ee <memset+0x72>
    e0f6:	f00c 0403 	and.w	r4, ip, #3
    e0fa:	b12c      	cbz	r4, e108 <memset+0x8c>
    e0fc:	b2c9      	uxtb	r1, r1
    e0fe:	441c      	add	r4, r3
    e100:	f803 1b01 	strb.w	r1, [r3], #1
    e104:	429c      	cmp	r4, r3
    e106:	d1fb      	bne.n	e100 <memset+0x84>
    e108:	bd30      	pop	{r4, r5, pc}
    e10a:	4664      	mov	r4, ip
    e10c:	4613      	mov	r3, r2
    e10e:	2c00      	cmp	r4, #0
    e110:	d1f4      	bne.n	e0fc <memset+0x80>
    e112:	e7f9      	b.n	e108 <memset+0x8c>
    e114:	4603      	mov	r3, r0
    e116:	4614      	mov	r4, r2
    e118:	e7bf      	b.n	e09a <memset+0x1e>
    e11a:	461a      	mov	r2, r3
    e11c:	46a4      	mov	ip, r4
    e11e:	e7e0      	b.n	e0e2 <memset+0x66>

0000e120 <strncpy>:
    e120:	ea40 0301 	orr.w	r3, r0, r1
    e124:	079b      	lsls	r3, r3, #30
    e126:	b530      	push	{r4, r5, lr}
    e128:	d101      	bne.n	e12e <strncpy+0xe>
    e12a:	2a03      	cmp	r2, #3
    e12c:	d80f      	bhi.n	e14e <strncpy+0x2e>
    e12e:	4684      	mov	ip, r0
    e130:	f101 3eff 	add.w	lr, r1, #4294967295
    e134:	e007      	b.n	e146 <strncpy+0x26>
    e136:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
    e13a:	f803 1b01 	strb.w	r1, [r3], #1
    e13e:	1e54      	subs	r4, r2, #1
    e140:	b1c1      	cbz	r1, e174 <strncpy+0x54>
    e142:	469c      	mov	ip, r3
    e144:	4622      	mov	r2, r4
    e146:	4663      	mov	r3, ip
    e148:	2a00      	cmp	r2, #0
    e14a:	d1f4      	bne.n	e136 <strncpy+0x16>
    e14c:	bd30      	pop	{r4, r5, pc}
    e14e:	460b      	mov	r3, r1
    e150:	4684      	mov	ip, r0
    e152:	4619      	mov	r1, r3
    e154:	f853 5b04 	ldr.w	r5, [r3], #4
    e158:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
    e15c:	ea24 0405 	bic.w	r4, r4, r5
    e160:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    e164:	d1e4      	bne.n	e130 <strncpy+0x10>
    e166:	3a04      	subs	r2, #4
    e168:	2a03      	cmp	r2, #3
    e16a:	f84c 5b04 	str.w	r5, [ip], #4
    e16e:	4619      	mov	r1, r3
    e170:	d8ef      	bhi.n	e152 <strncpy+0x32>
    e172:	e7dd      	b.n	e130 <strncpy+0x10>
    e174:	4494      	add	ip, r2
    e176:	2c00      	cmp	r4, #0
    e178:	d0e8      	beq.n	e14c <strncpy+0x2c>
    e17a:	f803 1b01 	strb.w	r1, [r3], #1
    e17e:	4563      	cmp	r3, ip
    e180:	d1fb      	bne.n	e17a <strncpy+0x5a>
    e182:	bd30      	pop	{r4, r5, pc}

0000e184 <__locale_mb_cur_max>:
    e184:	4b01      	ldr	r3, [pc, #4]	; (e18c <__locale_mb_cur_max+0x8>)
    e186:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
    e18a:	4770      	bx	lr
    e18c:	1fff8ed4 	.word	0x1fff8ed4

0000e190 <_close_r>:
    e190:	b538      	push	{r3, r4, r5, lr}
    e192:	4d07      	ldr	r5, [pc, #28]	; (e1b0 <_close_r+0x20>)
    e194:	2200      	movs	r2, #0
    e196:	4604      	mov	r4, r0
    e198:	4608      	mov	r0, r1
    e19a:	602a      	str	r2, [r5, #0]
    e19c:	f7fb fec0 	bl	9f20 <_close>
    e1a0:	1c43      	adds	r3, r0, #1
    e1a2:	d000      	beq.n	e1a6 <_close_r+0x16>
    e1a4:	bd38      	pop	{r3, r4, r5, pc}
    e1a6:	682b      	ldr	r3, [r5, #0]
    e1a8:	2b00      	cmp	r3, #0
    e1aa:	d0fb      	beq.n	e1a4 <_close_r+0x14>
    e1ac:	6023      	str	r3, [r4, #0]
    e1ae:	bd38      	pop	{r3, r4, r5, pc}
    e1b0:	1fffd768 	.word	0x1fffd768

0000e1b4 <_lseek_r>:
    e1b4:	b538      	push	{r3, r4, r5, lr}
    e1b6:	460c      	mov	r4, r1
    e1b8:	4d08      	ldr	r5, [pc, #32]	; (e1dc <_lseek_r+0x28>)
    e1ba:	4684      	mov	ip, r0
    e1bc:	4611      	mov	r1, r2
    e1be:	4620      	mov	r0, r4
    e1c0:	461a      	mov	r2, r3
    e1c2:	2300      	movs	r3, #0
    e1c4:	602b      	str	r3, [r5, #0]
    e1c6:	4664      	mov	r4, ip
    e1c8:	f7fb feb6 	bl	9f38 <_lseek>
    e1cc:	1c43      	adds	r3, r0, #1
    e1ce:	d000      	beq.n	e1d2 <_lseek_r+0x1e>
    e1d0:	bd38      	pop	{r3, r4, r5, pc}
    e1d2:	682b      	ldr	r3, [r5, #0]
    e1d4:	2b00      	cmp	r3, #0
    e1d6:	d0fb      	beq.n	e1d0 <_lseek_r+0x1c>
    e1d8:	6023      	str	r3, [r4, #0]
    e1da:	bd38      	pop	{r3, r4, r5, pc}
    e1dc:	1fffd768 	.word	0x1fffd768

0000e1e0 <_read_r>:
    e1e0:	b538      	push	{r3, r4, r5, lr}
    e1e2:	460c      	mov	r4, r1
    e1e4:	4d08      	ldr	r5, [pc, #32]	; (e208 <_read_r+0x28>)
    e1e6:	4684      	mov	ip, r0
    e1e8:	4611      	mov	r1, r2
    e1ea:	4620      	mov	r0, r4
    e1ec:	461a      	mov	r2, r3
    e1ee:	2300      	movs	r3, #0
    e1f0:	602b      	str	r3, [r5, #0]
    e1f2:	4664      	mov	r4, ip
    e1f4:	f7fb fe92 	bl	9f1c <_read>
    e1f8:	1c43      	adds	r3, r0, #1
    e1fa:	d000      	beq.n	e1fe <_read_r+0x1e>
    e1fc:	bd38      	pop	{r3, r4, r5, pc}
    e1fe:	682b      	ldr	r3, [r5, #0]
    e200:	2b00      	cmp	r3, #0
    e202:	d0fb      	beq.n	e1fc <_read_r+0x1c>
    e204:	6023      	str	r3, [r4, #0]
    e206:	bd38      	pop	{r3, r4, r5, pc}
    e208:	1fffd768 	.word	0x1fffd768

0000e20c <_sbrk_r>:
    e20c:	b538      	push	{r3, r4, r5, lr}
    e20e:	4d07      	ldr	r5, [pc, #28]	; (e22c <_sbrk_r+0x20>)
    e210:	2200      	movs	r2, #0
    e212:	4604      	mov	r4, r0
    e214:	4608      	mov	r0, r1
    e216:	602a      	str	r2, [r5, #0]
    e218:	f7fb fe6a 	bl	9ef0 <_sbrk>
    e21c:	1c43      	adds	r3, r0, #1
    e21e:	d000      	beq.n	e222 <_sbrk_r+0x16>
    e220:	bd38      	pop	{r3, r4, r5, pc}
    e222:	682b      	ldr	r3, [r5, #0]
    e224:	2b00      	cmp	r3, #0
    e226:	d0fb      	beq.n	e220 <_sbrk_r+0x14>
    e228:	6023      	str	r3, [r4, #0]
    e22a:	bd38      	pop	{r3, r4, r5, pc}
    e22c:	1fffd768 	.word	0x1fffd768

0000e230 <_write_r>:
    e230:	b538      	push	{r3, r4, r5, lr}
    e232:	460c      	mov	r4, r1
    e234:	4d08      	ldr	r5, [pc, #32]	; (e258 <_write_r+0x28>)
    e236:	4684      	mov	ip, r0
    e238:	4611      	mov	r1, r2
    e23a:	4620      	mov	r0, r4
    e23c:	461a      	mov	r2, r3
    e23e:	2300      	movs	r3, #0
    e240:	602b      	str	r3, [r5, #0]
    e242:	4664      	mov	r4, ip
    e244:	f7fb fa7e 	bl	9744 <_write>
    e248:	1c43      	adds	r3, r0, #1
    e24a:	d000      	beq.n	e24e <_write_r+0x1e>
    e24c:	bd38      	pop	{r3, r4, r5, pc}
    e24e:	682b      	ldr	r3, [r5, #0]
    e250:	2b00      	cmp	r3, #0
    e252:	d0fb      	beq.n	e24c <_write_r+0x1c>
    e254:	6023      	str	r3, [r4, #0]
    e256:	bd38      	pop	{r3, r4, r5, pc}
    e258:	1fffd768 	.word	0x1fffd768

0000e25c <__errno>:
    e25c:	4b01      	ldr	r3, [pc, #4]	; (e264 <__errno+0x8>)
    e25e:	6818      	ldr	r0, [r3, #0]
    e260:	4770      	bx	lr
    e262:	bf00      	nop
    e264:	1fff9160 	.word	0x1fff9160

0000e268 <__libc_init_array>:
    e268:	b570      	push	{r4, r5, r6, lr}
    e26a:	4e0d      	ldr	r6, [pc, #52]	; (e2a0 <__libc_init_array+0x38>)
    e26c:	4d0d      	ldr	r5, [pc, #52]	; (e2a4 <__libc_init_array+0x3c>)
    e26e:	1b76      	subs	r6, r6, r5
    e270:	10b6      	asrs	r6, r6, #2
    e272:	d006      	beq.n	e282 <__libc_init_array+0x1a>
    e274:	2400      	movs	r4, #0
    e276:	f855 3b04 	ldr.w	r3, [r5], #4
    e27a:	3401      	adds	r4, #1
    e27c:	4798      	blx	r3
    e27e:	42a6      	cmp	r6, r4
    e280:	d1f9      	bne.n	e276 <__libc_init_array+0xe>
    e282:	4e09      	ldr	r6, [pc, #36]	; (e2a8 <__libc_init_array+0x40>)
    e284:	4d09      	ldr	r5, [pc, #36]	; (e2ac <__libc_init_array+0x44>)
    e286:	1b76      	subs	r6, r6, r5
    e288:	f007 fbe6 	bl	15a58 <_init>
    e28c:	10b6      	asrs	r6, r6, #2
    e28e:	d006      	beq.n	e29e <__libc_init_array+0x36>
    e290:	2400      	movs	r4, #0
    e292:	f855 3b04 	ldr.w	r3, [r5], #4
    e296:	3401      	adds	r4, #1
    e298:	4798      	blx	r3
    e29a:	42a6      	cmp	r6, r4
    e29c:	d1f9      	bne.n	e292 <__libc_init_array+0x2a>
    e29e:	bd70      	pop	{r4, r5, r6, pc}
    e2a0:	00015a64 	.word	0x00015a64
    e2a4:	00015a64 	.word	0x00015a64
    e2a8:	00015a78 	.word	0x00015a78
    e2ac:	00015a64 	.word	0x00015a64

0000e2b0 <__retarget_lock_init_recursive>:
    e2b0:	4770      	bx	lr
    e2b2:	bf00      	nop

0000e2b4 <__retarget_lock_close_recursive>:
    e2b4:	4770      	bx	lr
    e2b6:	bf00      	nop

0000e2b8 <__retarget_lock_acquire_recursive>:
    e2b8:	4770      	bx	lr
    e2ba:	bf00      	nop

0000e2bc <__retarget_lock_release_recursive>:
    e2bc:	4770      	bx	lr
    e2be:	bf00      	nop

0000e2c0 <strlen>:
    e2c0:	f890 f000 	pld	[r0]
    e2c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    e2c8:	f020 0107 	bic.w	r1, r0, #7
    e2cc:	f06f 0c00 	mvn.w	ip, #0
    e2d0:	f010 0407 	ands.w	r4, r0, #7
    e2d4:	f891 f020 	pld	[r1, #32]
    e2d8:	f040 8049 	bne.w	e36e <strlen+0xae>
    e2dc:	f04f 0400 	mov.w	r4, #0
    e2e0:	f06f 0007 	mvn.w	r0, #7
    e2e4:	e9d1 2300 	ldrd	r2, r3, [r1]
    e2e8:	f891 f040 	pld	[r1, #64]	; 0x40
    e2ec:	f100 0008 	add.w	r0, r0, #8
    e2f0:	fa82 f24c 	uadd8	r2, r2, ip
    e2f4:	faa4 f28c 	sel	r2, r4, ip
    e2f8:	fa83 f34c 	uadd8	r3, r3, ip
    e2fc:	faa2 f38c 	sel	r3, r2, ip
    e300:	bb4b      	cbnz	r3, e356 <strlen+0x96>
    e302:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    e306:	fa82 f24c 	uadd8	r2, r2, ip
    e30a:	f100 0008 	add.w	r0, r0, #8
    e30e:	faa4 f28c 	sel	r2, r4, ip
    e312:	fa83 f34c 	uadd8	r3, r3, ip
    e316:	faa2 f38c 	sel	r3, r2, ip
    e31a:	b9e3      	cbnz	r3, e356 <strlen+0x96>
    e31c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    e320:	fa82 f24c 	uadd8	r2, r2, ip
    e324:	f100 0008 	add.w	r0, r0, #8
    e328:	faa4 f28c 	sel	r2, r4, ip
    e32c:	fa83 f34c 	uadd8	r3, r3, ip
    e330:	faa2 f38c 	sel	r3, r2, ip
    e334:	b97b      	cbnz	r3, e356 <strlen+0x96>
    e336:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    e33a:	f101 0120 	add.w	r1, r1, #32
    e33e:	fa82 f24c 	uadd8	r2, r2, ip
    e342:	f100 0008 	add.w	r0, r0, #8
    e346:	faa4 f28c 	sel	r2, r4, ip
    e34a:	fa83 f34c 	uadd8	r3, r3, ip
    e34e:	faa2 f38c 	sel	r3, r2, ip
    e352:	2b00      	cmp	r3, #0
    e354:	d0c6      	beq.n	e2e4 <strlen+0x24>
    e356:	2a00      	cmp	r2, #0
    e358:	bf04      	itt	eq
    e35a:	3004      	addeq	r0, #4
    e35c:	461a      	moveq	r2, r3
    e35e:	ba12      	rev	r2, r2
    e360:	fab2 f282 	clz	r2, r2
    e364:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    e368:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    e36c:	4770      	bx	lr
    e36e:	e9d1 2300 	ldrd	r2, r3, [r1]
    e372:	f004 0503 	and.w	r5, r4, #3
    e376:	f1c4 0000 	rsb	r0, r4, #0
    e37a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    e37e:	f014 0f04 	tst.w	r4, #4
    e382:	f891 f040 	pld	[r1, #64]	; 0x40
    e386:	fa0c f505 	lsl.w	r5, ip, r5
    e38a:	ea62 0205 	orn	r2, r2, r5
    e38e:	bf1c      	itt	ne
    e390:	ea63 0305 	ornne	r3, r3, r5
    e394:	4662      	movne	r2, ip
    e396:	f04f 0400 	mov.w	r4, #0
    e39a:	e7a9      	b.n	e2f0 <strlen+0x30>

0000e39c <register_fini>:
    e39c:	4b02      	ldr	r3, [pc, #8]	; (e3a8 <register_fini+0xc>)
    e39e:	b113      	cbz	r3, e3a6 <register_fini+0xa>
    e3a0:	4802      	ldr	r0, [pc, #8]	; (e3ac <register_fini+0x10>)
    e3a2:	f000 b805 	b.w	e3b0 <atexit>
    e3a6:	4770      	bx	lr
    e3a8:	00000000 	.word	0x00000000
    e3ac:	00010bf5 	.word	0x00010bf5

0000e3b0 <atexit>:
    e3b0:	2300      	movs	r3, #0
    e3b2:	4601      	mov	r1, r0
    e3b4:	461a      	mov	r2, r3
    e3b6:	4618      	mov	r0, r3
    e3b8:	f002 bcba 	b.w	10d30 <__register_exitproc>

0000e3bc <_malloc_trim_r>:
    e3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3be:	4f24      	ldr	r7, [pc, #144]	; (e450 <_malloc_trim_r+0x94>)
    e3c0:	460c      	mov	r4, r1
    e3c2:	4606      	mov	r6, r0
    e3c4:	f7ff fa9c 	bl	d900 <__malloc_lock>
    e3c8:	68bb      	ldr	r3, [r7, #8]
    e3ca:	685d      	ldr	r5, [r3, #4]
    e3cc:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    e3d0:	310f      	adds	r1, #15
    e3d2:	f025 0503 	bic.w	r5, r5, #3
    e3d6:	194b      	adds	r3, r1, r5
    e3d8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    e3dc:	f023 030f 	bic.w	r3, r3, #15
    e3e0:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    e3e4:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    e3e8:	db07      	blt.n	e3fa <_malloc_trim_r+0x3e>
    e3ea:	2100      	movs	r1, #0
    e3ec:	4630      	mov	r0, r6
    e3ee:	f7ff ff0d 	bl	e20c <_sbrk_r>
    e3f2:	68bb      	ldr	r3, [r7, #8]
    e3f4:	442b      	add	r3, r5
    e3f6:	4298      	cmp	r0, r3
    e3f8:	d004      	beq.n	e404 <_malloc_trim_r+0x48>
    e3fa:	4630      	mov	r0, r6
    e3fc:	f7ff fa86 	bl	d90c <__malloc_unlock>
    e400:	2000      	movs	r0, #0
    e402:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e404:	4261      	negs	r1, r4
    e406:	4630      	mov	r0, r6
    e408:	f7ff ff00 	bl	e20c <_sbrk_r>
    e40c:	3001      	adds	r0, #1
    e40e:	d00d      	beq.n	e42c <_malloc_trim_r+0x70>
    e410:	4a10      	ldr	r2, [pc, #64]	; (e454 <_malloc_trim_r+0x98>)
    e412:	68bb      	ldr	r3, [r7, #8]
    e414:	1b2d      	subs	r5, r5, r4
    e416:	f045 0501 	orr.w	r5, r5, #1
    e41a:	605d      	str	r5, [r3, #4]
    e41c:	6813      	ldr	r3, [r2, #0]
    e41e:	4630      	mov	r0, r6
    e420:	1b1b      	subs	r3, r3, r4
    e422:	6013      	str	r3, [r2, #0]
    e424:	f7ff fa72 	bl	d90c <__malloc_unlock>
    e428:	2001      	movs	r0, #1
    e42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e42c:	2100      	movs	r1, #0
    e42e:	4630      	mov	r0, r6
    e430:	f7ff feec 	bl	e20c <_sbrk_r>
    e434:	68ba      	ldr	r2, [r7, #8]
    e436:	1a83      	subs	r3, r0, r2
    e438:	2b0f      	cmp	r3, #15
    e43a:	ddde      	ble.n	e3fa <_malloc_trim_r+0x3e>
    e43c:	f043 0301 	orr.w	r3, r3, #1
    e440:	6053      	str	r3, [r2, #4]
    e442:	4b05      	ldr	r3, [pc, #20]	; (e458 <_malloc_trim_r+0x9c>)
    e444:	4903      	ldr	r1, [pc, #12]	; (e454 <_malloc_trim_r+0x98>)
    e446:	681b      	ldr	r3, [r3, #0]
    e448:	1ac0      	subs	r0, r0, r3
    e44a:	6008      	str	r0, [r1, #0]
    e44c:	e7d5      	b.n	e3fa <_malloc_trim_r+0x3e>
    e44e:	bf00      	nop
    e450:	1fff8ab8 	.word	0x1fff8ab8
    e454:	1fffd5f8 	.word	0x1fffd5f8
    e458:	1fff8ec0 	.word	0x1fff8ec0

0000e45c <_free_r>:
    e45c:	2900      	cmp	r1, #0
    e45e:	d061      	beq.n	e524 <_free_r+0xc8>
    e460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e462:	460c      	mov	r4, r1
    e464:	4606      	mov	r6, r0
    e466:	f7ff fa4b 	bl	d900 <__malloc_lock>
    e46a:	f854 2c04 	ldr.w	r2, [r4, #-4]
    e46e:	4f7b      	ldr	r7, [pc, #492]	; (e65c <_free_r+0x200>)
    e470:	f1a4 0508 	sub.w	r5, r4, #8
    e474:	f022 0101 	bic.w	r1, r2, #1
    e478:	eb05 0c01 	add.w	ip, r5, r1
    e47c:	68b8      	ldr	r0, [r7, #8]
    e47e:	f8dc 3004 	ldr.w	r3, [ip, #4]
    e482:	4560      	cmp	r0, ip
    e484:	f023 0303 	bic.w	r3, r3, #3
    e488:	f000 808b 	beq.w	e5a2 <_free_r+0x146>
    e48c:	07d2      	lsls	r2, r2, #31
    e48e:	f8cc 3004 	str.w	r3, [ip, #4]
    e492:	d432      	bmi.n	e4fa <_free_r+0x9e>
    e494:	f854 2c08 	ldr.w	r2, [r4, #-8]
    e498:	1aad      	subs	r5, r5, r2
    e49a:	4411      	add	r1, r2
    e49c:	68aa      	ldr	r2, [r5, #8]
    e49e:	f107 0008 	add.w	r0, r7, #8
    e4a2:	4282      	cmp	r2, r0
    e4a4:	d06a      	beq.n	e57c <_free_r+0x120>
    e4a6:	eb0c 0403 	add.w	r4, ip, r3
    e4aa:	f8d4 e004 	ldr.w	lr, [r4, #4]
    e4ae:	68ec      	ldr	r4, [r5, #12]
    e4b0:	60d4      	str	r4, [r2, #12]
    e4b2:	f01e 0f01 	tst.w	lr, #1
    e4b6:	60a2      	str	r2, [r4, #8]
    e4b8:	f000 8097 	beq.w	e5ea <_free_r+0x18e>
    e4bc:	f041 0301 	orr.w	r3, r1, #1
    e4c0:	606b      	str	r3, [r5, #4]
    e4c2:	f8cc 1000 	str.w	r1, [ip]
    e4c6:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e4ca:	d235      	bcs.n	e538 <_free_r+0xdc>
    e4cc:	6878      	ldr	r0, [r7, #4]
    e4ce:	08cb      	lsrs	r3, r1, #3
    e4d0:	2201      	movs	r2, #1
    e4d2:	0949      	lsrs	r1, r1, #5
    e4d4:	3301      	adds	r3, #1
    e4d6:	408a      	lsls	r2, r1
    e4d8:	4302      	orrs	r2, r0
    e4da:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    e4de:	607a      	str	r2, [r7, #4]
    e4e0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    e4e4:	3a08      	subs	r2, #8
    e4e6:	e9c5 1202 	strd	r1, r2, [r5, #8]
    e4ea:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    e4ee:	60cd      	str	r5, [r1, #12]
    e4f0:	4630      	mov	r0, r6
    e4f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e4f6:	f7ff ba09 	b.w	d90c <__malloc_unlock>
    e4fa:	eb0c 0203 	add.w	r2, ip, r3
    e4fe:	6852      	ldr	r2, [r2, #4]
    e500:	07d0      	lsls	r0, r2, #31
    e502:	d410      	bmi.n	e526 <_free_r+0xca>
    e504:	4419      	add	r1, r3
    e506:	f107 0008 	add.w	r0, r7, #8
    e50a:	f8dc 3008 	ldr.w	r3, [ip, #8]
    e50e:	4283      	cmp	r3, r0
    e510:	d073      	beq.n	e5fa <_free_r+0x19e>
    e512:	f8dc 200c 	ldr.w	r2, [ip, #12]
    e516:	60da      	str	r2, [r3, #12]
    e518:	6093      	str	r3, [r2, #8]
    e51a:	f041 0301 	orr.w	r3, r1, #1
    e51e:	606b      	str	r3, [r5, #4]
    e520:	5069      	str	r1, [r5, r1]
    e522:	e7d0      	b.n	e4c6 <_free_r+0x6a>
    e524:	4770      	bx	lr
    e526:	f041 0301 	orr.w	r3, r1, #1
    e52a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    e52e:	f844 3c04 	str.w	r3, [r4, #-4]
    e532:	f8cc 1000 	str.w	r1, [ip]
    e536:	d3c9      	bcc.n	e4cc <_free_r+0x70>
    e538:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    e53c:	ea4f 2351 	mov.w	r3, r1, lsr #9
    e540:	d248      	bcs.n	e5d4 <_free_r+0x178>
    e542:	098b      	lsrs	r3, r1, #6
    e544:	f103 0039 	add.w	r0, r3, #57	; 0x39
    e548:	f103 0238 	add.w	r2, r3, #56	; 0x38
    e54c:	00c3      	lsls	r3, r0, #3
    e54e:	18f8      	adds	r0, r7, r3
    e550:	58fb      	ldr	r3, [r7, r3]
    e552:	3808      	subs	r0, #8
    e554:	4298      	cmp	r0, r3
    e556:	d059      	beq.n	e60c <_free_r+0x1b0>
    e558:	685a      	ldr	r2, [r3, #4]
    e55a:	f022 0203 	bic.w	r2, r2, #3
    e55e:	428a      	cmp	r2, r1
    e560:	d902      	bls.n	e568 <_free_r+0x10c>
    e562:	689b      	ldr	r3, [r3, #8]
    e564:	4298      	cmp	r0, r3
    e566:	d1f7      	bne.n	e558 <_free_r+0xfc>
    e568:	68d8      	ldr	r0, [r3, #12]
    e56a:	e9c5 3002 	strd	r3, r0, [r5, #8]
    e56e:	6085      	str	r5, [r0, #8]
    e570:	60dd      	str	r5, [r3, #12]
    e572:	4630      	mov	r0, r6
    e574:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e578:	f7ff b9c8 	b.w	d90c <__malloc_unlock>
    e57c:	eb0c 0203 	add.w	r2, ip, r3
    e580:	6852      	ldr	r2, [r2, #4]
    e582:	07d2      	lsls	r2, r2, #31
    e584:	d463      	bmi.n	e64e <_free_r+0x1f2>
    e586:	440b      	add	r3, r1
    e588:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    e58c:	60ca      	str	r2, [r1, #12]
    e58e:	6091      	str	r1, [r2, #8]
    e590:	f043 0201 	orr.w	r2, r3, #1
    e594:	606a      	str	r2, [r5, #4]
    e596:	4630      	mov	r0, r6
    e598:	50eb      	str	r3, [r5, r3]
    e59a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    e59e:	f7ff b9b5 	b.w	d90c <__malloc_unlock>
    e5a2:	440b      	add	r3, r1
    e5a4:	07d1      	lsls	r1, r2, #31
    e5a6:	d407      	bmi.n	e5b8 <_free_r+0x15c>
    e5a8:	f854 2c08 	ldr.w	r2, [r4, #-8]
    e5ac:	1aad      	subs	r5, r5, r2
    e5ae:	4413      	add	r3, r2
    e5b0:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    e5b4:	60ca      	str	r2, [r1, #12]
    e5b6:	6091      	str	r1, [r2, #8]
    e5b8:	f043 0201 	orr.w	r2, r3, #1
    e5bc:	606a      	str	r2, [r5, #4]
    e5be:	4a28      	ldr	r2, [pc, #160]	; (e660 <_free_r+0x204>)
    e5c0:	60bd      	str	r5, [r7, #8]
    e5c2:	6812      	ldr	r2, [r2, #0]
    e5c4:	429a      	cmp	r2, r3
    e5c6:	d893      	bhi.n	e4f0 <_free_r+0x94>
    e5c8:	4b26      	ldr	r3, [pc, #152]	; (e664 <_free_r+0x208>)
    e5ca:	4630      	mov	r0, r6
    e5cc:	6819      	ldr	r1, [r3, #0]
    e5ce:	f7ff fef5 	bl	e3bc <_malloc_trim_r>
    e5d2:	e78d      	b.n	e4f0 <_free_r+0x94>
    e5d4:	2b14      	cmp	r3, #20
    e5d6:	d90a      	bls.n	e5ee <_free_r+0x192>
    e5d8:	2b54      	cmp	r3, #84	; 0x54
    e5da:	d81f      	bhi.n	e61c <_free_r+0x1c0>
    e5dc:	0b0b      	lsrs	r3, r1, #12
    e5de:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    e5e2:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    e5e6:	00c3      	lsls	r3, r0, #3
    e5e8:	e7b1      	b.n	e54e <_free_r+0xf2>
    e5ea:	4419      	add	r1, r3
    e5ec:	e78d      	b.n	e50a <_free_r+0xae>
    e5ee:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    e5f2:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    e5f6:	00c3      	lsls	r3, r0, #3
    e5f8:	e7a9      	b.n	e54e <_free_r+0xf2>
    e5fa:	f041 0301 	orr.w	r3, r1, #1
    e5fe:	e9c7 5504 	strd	r5, r5, [r7, #16]
    e602:	e9c5 0002 	strd	r0, r0, [r5, #8]
    e606:	606b      	str	r3, [r5, #4]
    e608:	5069      	str	r1, [r5, r1]
    e60a:	e771      	b.n	e4f0 <_free_r+0x94>
    e60c:	6879      	ldr	r1, [r7, #4]
    e60e:	1092      	asrs	r2, r2, #2
    e610:	2401      	movs	r4, #1
    e612:	fa04 f202 	lsl.w	r2, r4, r2
    e616:	430a      	orrs	r2, r1
    e618:	607a      	str	r2, [r7, #4]
    e61a:	e7a6      	b.n	e56a <_free_r+0x10e>
    e61c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    e620:	d806      	bhi.n	e630 <_free_r+0x1d4>
    e622:	0bcb      	lsrs	r3, r1, #15
    e624:	f103 0078 	add.w	r0, r3, #120	; 0x78
    e628:	f103 0277 	add.w	r2, r3, #119	; 0x77
    e62c:	00c3      	lsls	r3, r0, #3
    e62e:	e78e      	b.n	e54e <_free_r+0xf2>
    e630:	f240 5254 	movw	r2, #1364	; 0x554
    e634:	4293      	cmp	r3, r2
    e636:	d806      	bhi.n	e646 <_free_r+0x1ea>
    e638:	0c8b      	lsrs	r3, r1, #18
    e63a:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    e63e:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    e642:	00c3      	lsls	r3, r0, #3
    e644:	e783      	b.n	e54e <_free_r+0xf2>
    e646:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    e64a:	227e      	movs	r2, #126	; 0x7e
    e64c:	e77f      	b.n	e54e <_free_r+0xf2>
    e64e:	f041 0301 	orr.w	r3, r1, #1
    e652:	606b      	str	r3, [r5, #4]
    e654:	f8cc 1000 	str.w	r1, [ip]
    e658:	e74a      	b.n	e4f0 <_free_r+0x94>
    e65a:	bf00      	nop
    e65c:	1fff8ab8 	.word	0x1fff8ab8
    e660:	1fff8ec4 	.word	0x1fff8ec4
    e664:	1fffd628 	.word	0x1fffd628

0000e668 <__ascii_mbtowc>:
    e668:	b082      	sub	sp, #8
    e66a:	b149      	cbz	r1, e680 <__ascii_mbtowc+0x18>
    e66c:	b15a      	cbz	r2, e686 <__ascii_mbtowc+0x1e>
    e66e:	b16b      	cbz	r3, e68c <__ascii_mbtowc+0x24>
    e670:	7813      	ldrb	r3, [r2, #0]
    e672:	600b      	str	r3, [r1, #0]
    e674:	7812      	ldrb	r2, [r2, #0]
    e676:	1e10      	subs	r0, r2, #0
    e678:	bf18      	it	ne
    e67a:	2001      	movne	r0, #1
    e67c:	b002      	add	sp, #8
    e67e:	4770      	bx	lr
    e680:	a901      	add	r1, sp, #4
    e682:	2a00      	cmp	r2, #0
    e684:	d1f3      	bne.n	e66e <__ascii_mbtowc+0x6>
    e686:	4610      	mov	r0, r2
    e688:	b002      	add	sp, #8
    e68a:	4770      	bx	lr
    e68c:	f06f 0001 	mvn.w	r0, #1
    e690:	e7f4      	b.n	e67c <__ascii_mbtowc+0x14>
    e692:	bf00      	nop

0000e694 <_Balloc>:
    e694:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e696:	b570      	push	{r4, r5, r6, lr}
    e698:	4605      	mov	r5, r0
    e69a:	460c      	mov	r4, r1
    e69c:	b14b      	cbz	r3, e6b2 <_Balloc+0x1e>
    e69e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    e6a2:	b180      	cbz	r0, e6c6 <_Balloc+0x32>
    e6a4:	6802      	ldr	r2, [r0, #0]
    e6a6:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    e6aa:	2300      	movs	r3, #0
    e6ac:	e9c0 3303 	strd	r3, r3, [r0, #12]
    e6b0:	bd70      	pop	{r4, r5, r6, pc}
    e6b2:	2221      	movs	r2, #33	; 0x21
    e6b4:	2104      	movs	r1, #4
    e6b6:	f002 fb9f 	bl	10df8 <_calloc_r>
    e6ba:	4603      	mov	r3, r0
    e6bc:	6468      	str	r0, [r5, #68]	; 0x44
    e6be:	2800      	cmp	r0, #0
    e6c0:	d1ed      	bne.n	e69e <_Balloc+0xa>
    e6c2:	2000      	movs	r0, #0
    e6c4:	bd70      	pop	{r4, r5, r6, pc}
    e6c6:	2101      	movs	r1, #1
    e6c8:	fa01 f604 	lsl.w	r6, r1, r4
    e6cc:	1d72      	adds	r2, r6, #5
    e6ce:	0092      	lsls	r2, r2, #2
    e6d0:	4628      	mov	r0, r5
    e6d2:	f002 fb91 	bl	10df8 <_calloc_r>
    e6d6:	2800      	cmp	r0, #0
    e6d8:	d0f3      	beq.n	e6c2 <_Balloc+0x2e>
    e6da:	e9c0 4601 	strd	r4, r6, [r0, #4]
    e6de:	e7e4      	b.n	e6aa <_Balloc+0x16>

0000e6e0 <_Bfree>:
    e6e0:	b131      	cbz	r1, e6f0 <_Bfree+0x10>
    e6e2:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e6e4:	684a      	ldr	r2, [r1, #4]
    e6e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e6ea:	6008      	str	r0, [r1, #0]
    e6ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    e6f0:	4770      	bx	lr
    e6f2:	bf00      	nop

0000e6f4 <__multadd>:
    e6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e6f8:	690d      	ldr	r5, [r1, #16]
    e6fa:	4607      	mov	r7, r0
    e6fc:	460e      	mov	r6, r1
    e6fe:	461c      	mov	r4, r3
    e700:	f101 0e14 	add.w	lr, r1, #20
    e704:	2000      	movs	r0, #0
    e706:	f8de 1000 	ldr.w	r1, [lr]
    e70a:	b28b      	uxth	r3, r1
    e70c:	fb02 4303 	mla	r3, r2, r3, r4
    e710:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    e714:	0c09      	lsrs	r1, r1, #16
    e716:	fb02 cc01 	mla	ip, r2, r1, ip
    e71a:	3001      	adds	r0, #1
    e71c:	b29b      	uxth	r3, r3
    e71e:	eb03 430c 	add.w	r3, r3, ip, lsl #16
    e722:	4285      	cmp	r5, r0
    e724:	f84e 3b04 	str.w	r3, [lr], #4
    e728:	ea4f 441c 	mov.w	r4, ip, lsr #16
    e72c:	dceb      	bgt.n	e706 <__multadd+0x12>
    e72e:	b13c      	cbz	r4, e740 <__multadd+0x4c>
    e730:	68b3      	ldr	r3, [r6, #8]
    e732:	42ab      	cmp	r3, r5
    e734:	dd07      	ble.n	e746 <__multadd+0x52>
    e736:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    e73a:	3501      	adds	r5, #1
    e73c:	615c      	str	r4, [r3, #20]
    e73e:	6135      	str	r5, [r6, #16]
    e740:	4630      	mov	r0, r6
    e742:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e746:	6871      	ldr	r1, [r6, #4]
    e748:	4638      	mov	r0, r7
    e74a:	3101      	adds	r1, #1
    e74c:	f7ff ffa2 	bl	e694 <_Balloc>
    e750:	4680      	mov	r8, r0
    e752:	b1a8      	cbz	r0, e780 <__multadd+0x8c>
    e754:	6932      	ldr	r2, [r6, #16]
    e756:	3202      	adds	r2, #2
    e758:	f106 010c 	add.w	r1, r6, #12
    e75c:	0092      	lsls	r2, r2, #2
    e75e:	300c      	adds	r0, #12
    e760:	f7fb fac4 	bl	9cec <memcpy>
    e764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    e766:	6872      	ldr	r2, [r6, #4]
    e768:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e76c:	6031      	str	r1, [r6, #0]
    e76e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    e772:	4646      	mov	r6, r8
    e774:	eb06 0385 	add.w	r3, r6, r5, lsl #2
    e778:	3501      	adds	r5, #1
    e77a:	615c      	str	r4, [r3, #20]
    e77c:	6135      	str	r5, [r6, #16]
    e77e:	e7df      	b.n	e740 <__multadd+0x4c>
    e780:	4b02      	ldr	r3, [pc, #8]	; (e78c <__multadd+0x98>)
    e782:	4803      	ldr	r0, [pc, #12]	; (e790 <__multadd+0x9c>)
    e784:	4642      	mov	r2, r8
    e786:	21ba      	movs	r1, #186	; 0xba
    e788:	f002 fb16 	bl	10db8 <__assert_func>
    e78c:	000157c8 	.word	0x000157c8
    e790:	000157dc 	.word	0x000157dc

0000e794 <__hi0bits>:
    e794:	0c02      	lsrs	r2, r0, #16
    e796:	0412      	lsls	r2, r2, #16
    e798:	4603      	mov	r3, r0
    e79a:	b9ca      	cbnz	r2, e7d0 <__hi0bits+0x3c>
    e79c:	0403      	lsls	r3, r0, #16
    e79e:	2010      	movs	r0, #16
    e7a0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
    e7a4:	bf04      	itt	eq
    e7a6:	021b      	lsleq	r3, r3, #8
    e7a8:	3008      	addeq	r0, #8
    e7aa:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
    e7ae:	bf04      	itt	eq
    e7b0:	011b      	lsleq	r3, r3, #4
    e7b2:	3004      	addeq	r0, #4
    e7b4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
    e7b8:	bf04      	itt	eq
    e7ba:	009b      	lsleq	r3, r3, #2
    e7bc:	3002      	addeq	r0, #2
    e7be:	2b00      	cmp	r3, #0
    e7c0:	db05      	blt.n	e7ce <__hi0bits+0x3a>
    e7c2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
    e7c6:	f100 0001 	add.w	r0, r0, #1
    e7ca:	bf08      	it	eq
    e7cc:	2020      	moveq	r0, #32
    e7ce:	4770      	bx	lr
    e7d0:	2000      	movs	r0, #0
    e7d2:	e7e5      	b.n	e7a0 <__hi0bits+0xc>

0000e7d4 <__lo0bits>:
    e7d4:	6803      	ldr	r3, [r0, #0]
    e7d6:	f013 0207 	ands.w	r2, r3, #7
    e7da:	4601      	mov	r1, r0
    e7dc:	d007      	beq.n	e7ee <__lo0bits+0x1a>
    e7de:	07da      	lsls	r2, r3, #31
    e7e0:	d41f      	bmi.n	e822 <__lo0bits+0x4e>
    e7e2:	0798      	lsls	r0, r3, #30
    e7e4:	d521      	bpl.n	e82a <__lo0bits+0x56>
    e7e6:	085b      	lsrs	r3, r3, #1
    e7e8:	600b      	str	r3, [r1, #0]
    e7ea:	2001      	movs	r0, #1
    e7ec:	4770      	bx	lr
    e7ee:	b298      	uxth	r0, r3
    e7f0:	b1a0      	cbz	r0, e81c <__lo0bits+0x48>
    e7f2:	4610      	mov	r0, r2
    e7f4:	b2da      	uxtb	r2, r3
    e7f6:	b90a      	cbnz	r2, e7fc <__lo0bits+0x28>
    e7f8:	3008      	adds	r0, #8
    e7fa:	0a1b      	lsrs	r3, r3, #8
    e7fc:	071a      	lsls	r2, r3, #28
    e7fe:	bf04      	itt	eq
    e800:	091b      	lsreq	r3, r3, #4
    e802:	3004      	addeq	r0, #4
    e804:	079a      	lsls	r2, r3, #30
    e806:	bf04      	itt	eq
    e808:	089b      	lsreq	r3, r3, #2
    e80a:	3002      	addeq	r0, #2
    e80c:	07da      	lsls	r2, r3, #31
    e80e:	d403      	bmi.n	e818 <__lo0bits+0x44>
    e810:	085b      	lsrs	r3, r3, #1
    e812:	f100 0001 	add.w	r0, r0, #1
    e816:	d006      	beq.n	e826 <__lo0bits+0x52>
    e818:	600b      	str	r3, [r1, #0]
    e81a:	4770      	bx	lr
    e81c:	0c1b      	lsrs	r3, r3, #16
    e81e:	2010      	movs	r0, #16
    e820:	e7e8      	b.n	e7f4 <__lo0bits+0x20>
    e822:	2000      	movs	r0, #0
    e824:	4770      	bx	lr
    e826:	2020      	movs	r0, #32
    e828:	4770      	bx	lr
    e82a:	089b      	lsrs	r3, r3, #2
    e82c:	600b      	str	r3, [r1, #0]
    e82e:	2002      	movs	r0, #2
    e830:	4770      	bx	lr
    e832:	bf00      	nop

0000e834 <__i2b>:
    e834:	b538      	push	{r3, r4, r5, lr}
    e836:	6c43      	ldr	r3, [r0, #68]	; 0x44
    e838:	4604      	mov	r4, r0
    e83a:	460d      	mov	r5, r1
    e83c:	b14b      	cbz	r3, e852 <__i2b+0x1e>
    e83e:	6858      	ldr	r0, [r3, #4]
    e840:	b1b0      	cbz	r0, e870 <__i2b+0x3c>
    e842:	6802      	ldr	r2, [r0, #0]
    e844:	605a      	str	r2, [r3, #4]
    e846:	2200      	movs	r2, #0
    e848:	2301      	movs	r3, #1
    e84a:	e9c0 3504 	strd	r3, r5, [r0, #16]
    e84e:	60c2      	str	r2, [r0, #12]
    e850:	bd38      	pop	{r3, r4, r5, pc}
    e852:	2221      	movs	r2, #33	; 0x21
    e854:	2104      	movs	r1, #4
    e856:	f002 facf 	bl	10df8 <_calloc_r>
    e85a:	4603      	mov	r3, r0
    e85c:	6460      	str	r0, [r4, #68]	; 0x44
    e85e:	2800      	cmp	r0, #0
    e860:	d1ed      	bne.n	e83e <__i2b+0xa>
    e862:	4b09      	ldr	r3, [pc, #36]	; (e888 <__i2b+0x54>)
    e864:	4809      	ldr	r0, [pc, #36]	; (e88c <__i2b+0x58>)
    e866:	2200      	movs	r2, #0
    e868:	f240 1145 	movw	r1, #325	; 0x145
    e86c:	f002 faa4 	bl	10db8 <__assert_func>
    e870:	221c      	movs	r2, #28
    e872:	2101      	movs	r1, #1
    e874:	4620      	mov	r0, r4
    e876:	f002 fabf 	bl	10df8 <_calloc_r>
    e87a:	2800      	cmp	r0, #0
    e87c:	d0f1      	beq.n	e862 <__i2b+0x2e>
    e87e:	2201      	movs	r2, #1
    e880:	2302      	movs	r3, #2
    e882:	e9c0 2301 	strd	r2, r3, [r0, #4]
    e886:	e7de      	b.n	e846 <__i2b+0x12>
    e888:	000157c8 	.word	0x000157c8
    e88c:	000157dc 	.word	0x000157dc

0000e890 <__multiply>:
    e890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e894:	690e      	ldr	r6, [r1, #16]
    e896:	6915      	ldr	r5, [r2, #16]
    e898:	42ae      	cmp	r6, r5
    e89a:	b085      	sub	sp, #20
    e89c:	4688      	mov	r8, r1
    e89e:	4614      	mov	r4, r2
    e8a0:	db05      	blt.n	e8ae <__multiply+0x1e>
    e8a2:	462a      	mov	r2, r5
    e8a4:	4623      	mov	r3, r4
    e8a6:	4635      	mov	r5, r6
    e8a8:	460c      	mov	r4, r1
    e8aa:	4616      	mov	r6, r2
    e8ac:	4698      	mov	r8, r3
    e8ae:	68a3      	ldr	r3, [r4, #8]
    e8b0:	6861      	ldr	r1, [r4, #4]
    e8b2:	19af      	adds	r7, r5, r6
    e8b4:	42bb      	cmp	r3, r7
    e8b6:	bfb8      	it	lt
    e8b8:	3101      	addlt	r1, #1
    e8ba:	f7ff feeb 	bl	e694 <_Balloc>
    e8be:	9001      	str	r0, [sp, #4]
    e8c0:	2800      	cmp	r0, #0
    e8c2:	f000 8087 	beq.w	e9d4 <__multiply+0x144>
    e8c6:	9b01      	ldr	r3, [sp, #4]
    e8c8:	f103 0914 	add.w	r9, r3, #20
    e8cc:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
    e8d0:	45d1      	cmp	r9, sl
    e8d2:	d205      	bcs.n	e8e0 <__multiply+0x50>
    e8d4:	464b      	mov	r3, r9
    e8d6:	2200      	movs	r2, #0
    e8d8:	f843 2b04 	str.w	r2, [r3], #4
    e8dc:	459a      	cmp	sl, r3
    e8de:	d8fb      	bhi.n	e8d8 <__multiply+0x48>
    e8e0:	f108 0814 	add.w	r8, r8, #20
    e8e4:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
    e8e8:	f104 0314 	add.w	r3, r4, #20
    e8ec:	45d8      	cmp	r8, fp
    e8ee:	461a      	mov	r2, r3
    e8f0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
    e8f4:	d25f      	bcs.n	e9b6 <__multiply+0x126>
    e8f6:	1b2b      	subs	r3, r5, r4
    e8f8:	3b15      	subs	r3, #21
    e8fa:	f023 0303 	bic.w	r3, r3, #3
    e8fe:	3304      	adds	r3, #4
    e900:	3415      	adds	r4, #21
    e902:	42a5      	cmp	r5, r4
    e904:	bf38      	it	cc
    e906:	2304      	movcc	r3, #4
    e908:	e9cd a702 	strd	sl, r7, [sp, #8]
    e90c:	46ac      	mov	ip, r5
    e90e:	461f      	mov	r7, r3
    e910:	4692      	mov	sl, r2
    e912:	e005      	b.n	e920 <__multiply+0x90>
    e914:	0c09      	lsrs	r1, r1, #16
    e916:	d129      	bne.n	e96c <__multiply+0xdc>
    e918:	45c3      	cmp	fp, r8
    e91a:	f109 0904 	add.w	r9, r9, #4
    e91e:	d948      	bls.n	e9b2 <__multiply+0x122>
    e920:	f858 1b04 	ldr.w	r1, [r8], #4
    e924:	b28d      	uxth	r5, r1
    e926:	2d00      	cmp	r5, #0
    e928:	d0f4      	beq.n	e914 <__multiply+0x84>
    e92a:	4656      	mov	r6, sl
    e92c:	464c      	mov	r4, r9
    e92e:	2300      	movs	r3, #0
    e930:	f856 1b04 	ldr.w	r1, [r6], #4
    e934:	6822      	ldr	r2, [r4, #0]
    e936:	fa1f fe81 	uxth.w	lr, r1
    e93a:	b290      	uxth	r0, r2
    e93c:	0c09      	lsrs	r1, r1, #16
    e93e:	fb05 000e 	mla	r0, r5, lr, r0
    e942:	0c12      	lsrs	r2, r2, #16
    e944:	4403      	add	r3, r0
    e946:	fb05 2201 	mla	r2, r5, r1, r2
    e94a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    e94e:	b29b      	uxth	r3, r3
    e950:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    e954:	45b4      	cmp	ip, r6
    e956:	f844 3b04 	str.w	r3, [r4], #4
    e95a:	ea4f 4312 	mov.w	r3, r2, lsr #16
    e95e:	d8e7      	bhi.n	e930 <__multiply+0xa0>
    e960:	f849 3007 	str.w	r3, [r9, r7]
    e964:	f858 1c04 	ldr.w	r1, [r8, #-4]
    e968:	0c09      	lsrs	r1, r1, #16
    e96a:	d0d5      	beq.n	e918 <__multiply+0x88>
    e96c:	f8d9 3000 	ldr.w	r3, [r9]
    e970:	4650      	mov	r0, sl
    e972:	461a      	mov	r2, r3
    e974:	464c      	mov	r4, r9
    e976:	2600      	movs	r6, #0
    e978:	8805      	ldrh	r5, [r0, #0]
    e97a:	0c12      	lsrs	r2, r2, #16
    e97c:	fb01 2205 	mla	r2, r1, r5, r2
    e980:	4416      	add	r6, r2
    e982:	b29b      	uxth	r3, r3
    e984:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    e988:	f844 3b04 	str.w	r3, [r4], #4
    e98c:	f850 5b04 	ldr.w	r5, [r0], #4
    e990:	6822      	ldr	r2, [r4, #0]
    e992:	0c2d      	lsrs	r5, r5, #16
    e994:	b293      	uxth	r3, r2
    e996:	fb01 3305 	mla	r3, r1, r5, r3
    e99a:	eb03 4316 	add.w	r3, r3, r6, lsr #16
    e99e:	4584      	cmp	ip, r0
    e9a0:	ea4f 4613 	mov.w	r6, r3, lsr #16
    e9a4:	d8e8      	bhi.n	e978 <__multiply+0xe8>
    e9a6:	45c3      	cmp	fp, r8
    e9a8:	f849 3007 	str.w	r3, [r9, r7]
    e9ac:	f109 0904 	add.w	r9, r9, #4
    e9b0:	d8b6      	bhi.n	e920 <__multiply+0x90>
    e9b2:	e9dd a702 	ldrd	sl, r7, [sp, #8]
    e9b6:	2f00      	cmp	r7, #0
    e9b8:	dc02      	bgt.n	e9c0 <__multiply+0x130>
    e9ba:	e005      	b.n	e9c8 <__multiply+0x138>
    e9bc:	3f01      	subs	r7, #1
    e9be:	d003      	beq.n	e9c8 <__multiply+0x138>
    e9c0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
    e9c4:	2b00      	cmp	r3, #0
    e9c6:	d0f9      	beq.n	e9bc <__multiply+0x12c>
    e9c8:	9b01      	ldr	r3, [sp, #4]
    e9ca:	4618      	mov	r0, r3
    e9cc:	611f      	str	r7, [r3, #16]
    e9ce:	b005      	add	sp, #20
    e9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e9d4:	4b03      	ldr	r3, [pc, #12]	; (e9e4 <__multiply+0x154>)
    e9d6:	4804      	ldr	r0, [pc, #16]	; (e9e8 <__multiply+0x158>)
    e9d8:	9a01      	ldr	r2, [sp, #4]
    e9da:	f44f 71b1 	mov.w	r1, #354	; 0x162
    e9de:	f002 f9eb 	bl	10db8 <__assert_func>
    e9e2:	bf00      	nop
    e9e4:	000157c8 	.word	0x000157c8
    e9e8:	000157dc 	.word	0x000157dc

0000e9ec <__pow5mult>:
    e9ec:	f012 0303 	ands.w	r3, r2, #3
    e9f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9f4:	4614      	mov	r4, r2
    e9f6:	4606      	mov	r6, r0
    e9f8:	d132      	bne.n	ea60 <__pow5mult+0x74>
    e9fa:	460d      	mov	r5, r1
    e9fc:	10a4      	asrs	r4, r4, #2
    e9fe:	d020      	beq.n	ea42 <__pow5mult+0x56>
    ea00:	f8d6 8040 	ldr.w	r8, [r6, #64]	; 0x40
    ea04:	f1b8 0f00 	cmp.w	r8, #0
    ea08:	d033      	beq.n	ea72 <__pow5mult+0x86>
    ea0a:	07e3      	lsls	r3, r4, #31
    ea0c:	f04f 0700 	mov.w	r7, #0
    ea10:	d407      	bmi.n	ea22 <__pow5mult+0x36>
    ea12:	1064      	asrs	r4, r4, #1
    ea14:	d015      	beq.n	ea42 <__pow5mult+0x56>
    ea16:	f8d8 0000 	ldr.w	r0, [r8]
    ea1a:	b1a8      	cbz	r0, ea48 <__pow5mult+0x5c>
    ea1c:	4680      	mov	r8, r0
    ea1e:	07e3      	lsls	r3, r4, #31
    ea20:	d5f7      	bpl.n	ea12 <__pow5mult+0x26>
    ea22:	4642      	mov	r2, r8
    ea24:	4629      	mov	r1, r5
    ea26:	4630      	mov	r0, r6
    ea28:	f7ff ff32 	bl	e890 <__multiply>
    ea2c:	b1b5      	cbz	r5, ea5c <__pow5mult+0x70>
    ea2e:	6869      	ldr	r1, [r5, #4]
    ea30:	6c73      	ldr	r3, [r6, #68]	; 0x44
    ea32:	1064      	asrs	r4, r4, #1
    ea34:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    ea38:	602a      	str	r2, [r5, #0]
    ea3a:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    ea3e:	4605      	mov	r5, r0
    ea40:	d1e9      	bne.n	ea16 <__pow5mult+0x2a>
    ea42:	4628      	mov	r0, r5
    ea44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ea48:	4642      	mov	r2, r8
    ea4a:	4641      	mov	r1, r8
    ea4c:	4630      	mov	r0, r6
    ea4e:	f7ff ff1f 	bl	e890 <__multiply>
    ea52:	f8c8 0000 	str.w	r0, [r8]
    ea56:	6007      	str	r7, [r0, #0]
    ea58:	4680      	mov	r8, r0
    ea5a:	e7e0      	b.n	ea1e <__pow5mult+0x32>
    ea5c:	4605      	mov	r5, r0
    ea5e:	e7d8      	b.n	ea12 <__pow5mult+0x26>
    ea60:	3b01      	subs	r3, #1
    ea62:	4a0f      	ldr	r2, [pc, #60]	; (eaa0 <__pow5mult+0xb4>)
    ea64:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    ea68:	2300      	movs	r3, #0
    ea6a:	f7ff fe43 	bl	e6f4 <__multadd>
    ea6e:	4605      	mov	r5, r0
    ea70:	e7c4      	b.n	e9fc <__pow5mult+0x10>
    ea72:	2101      	movs	r1, #1
    ea74:	4630      	mov	r0, r6
    ea76:	f7ff fe0d 	bl	e694 <_Balloc>
    ea7a:	4680      	mov	r8, r0
    ea7c:	b140      	cbz	r0, ea90 <__pow5mult+0xa4>
    ea7e:	2301      	movs	r3, #1
    ea80:	f240 2271 	movw	r2, #625	; 0x271
    ea84:	e9c0 3204 	strd	r3, r2, [r0, #16]
    ea88:	2300      	movs	r3, #0
    ea8a:	6430      	str	r0, [r6, #64]	; 0x40
    ea8c:	6003      	str	r3, [r0, #0]
    ea8e:	e7bc      	b.n	ea0a <__pow5mult+0x1e>
    ea90:	4b04      	ldr	r3, [pc, #16]	; (eaa4 <__pow5mult+0xb8>)
    ea92:	4805      	ldr	r0, [pc, #20]	; (eaa8 <__pow5mult+0xbc>)
    ea94:	4642      	mov	r2, r8
    ea96:	f240 1145 	movw	r1, #325	; 0x145
    ea9a:	f002 f98d 	bl	10db8 <__assert_func>
    ea9e:	bf00      	nop
    eaa0:	00015928 	.word	0x00015928
    eaa4:	000157c8 	.word	0x000157c8
    eaa8:	000157dc 	.word	0x000157dc

0000eaac <__lshift>:
    eaac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    eab0:	460c      	mov	r4, r1
    eab2:	4690      	mov	r8, r2
    eab4:	6926      	ldr	r6, [r4, #16]
    eab6:	68a3      	ldr	r3, [r4, #8]
    eab8:	6849      	ldr	r1, [r1, #4]
    eaba:	eb06 1662 	add.w	r6, r6, r2, asr #5
    eabe:	1c75      	adds	r5, r6, #1
    eac0:	429d      	cmp	r5, r3
    eac2:	4607      	mov	r7, r0
    eac4:	ea4f 1962 	mov.w	r9, r2, asr #5
    eac8:	dd04      	ble.n	ead4 <__lshift+0x28>
    eaca:	005b      	lsls	r3, r3, #1
    eacc:	429d      	cmp	r5, r3
    eace:	f101 0101 	add.w	r1, r1, #1
    ead2:	dcfa      	bgt.n	eaca <__lshift+0x1e>
    ead4:	4638      	mov	r0, r7
    ead6:	f7ff fddd 	bl	e694 <_Balloc>
    eada:	4684      	mov	ip, r0
    eadc:	2800      	cmp	r0, #0
    eade:	d051      	beq.n	eb84 <__lshift+0xd8>
    eae0:	f1b9 0f00 	cmp.w	r9, #0
    eae4:	f100 0014 	add.w	r0, r0, #20
    eae8:	dd0e      	ble.n	eb08 <__lshift+0x5c>
    eaea:	f109 0205 	add.w	r2, r9, #5
    eaee:	ea4f 0e82 	mov.w	lr, r2, lsl #2
    eaf2:	4603      	mov	r3, r0
    eaf4:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
    eaf8:	2100      	movs	r1, #0
    eafa:	f843 1b04 	str.w	r1, [r3], #4
    eafe:	4293      	cmp	r3, r2
    eb00:	d1fb      	bne.n	eafa <__lshift+0x4e>
    eb02:	f1ae 0314 	sub.w	r3, lr, #20
    eb06:	4418      	add	r0, r3
    eb08:	6921      	ldr	r1, [r4, #16]
    eb0a:	f104 0314 	add.w	r3, r4, #20
    eb0e:	f018 081f 	ands.w	r8, r8, #31
    eb12:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    eb16:	d02d      	beq.n	eb74 <__lshift+0xc8>
    eb18:	f1c8 0920 	rsb	r9, r8, #32
    eb1c:	4686      	mov	lr, r0
    eb1e:	f04f 0a00 	mov.w	sl, #0
    eb22:	681a      	ldr	r2, [r3, #0]
    eb24:	fa02 f208 	lsl.w	r2, r2, r8
    eb28:	ea42 020a 	orr.w	r2, r2, sl
    eb2c:	f84e 2b04 	str.w	r2, [lr], #4
    eb30:	f853 2b04 	ldr.w	r2, [r3], #4
    eb34:	4299      	cmp	r1, r3
    eb36:	fa22 fa09 	lsr.w	sl, r2, r9
    eb3a:	d8f2      	bhi.n	eb22 <__lshift+0x76>
    eb3c:	1b0b      	subs	r3, r1, r4
    eb3e:	3b15      	subs	r3, #21
    eb40:	f023 0303 	bic.w	r3, r3, #3
    eb44:	3304      	adds	r3, #4
    eb46:	f104 0215 	add.w	r2, r4, #21
    eb4a:	4291      	cmp	r1, r2
    eb4c:	bf38      	it	cc
    eb4e:	2304      	movcc	r3, #4
    eb50:	f1ba 0f00 	cmp.w	sl, #0
    eb54:	bf18      	it	ne
    eb56:	462e      	movne	r6, r5
    eb58:	f840 a003 	str.w	sl, [r0, r3]
    eb5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    eb5e:	6862      	ldr	r2, [r4, #4]
    eb60:	f8cc 6010 	str.w	r6, [ip, #16]
    eb64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    eb68:	6021      	str	r1, [r4, #0]
    eb6a:	4660      	mov	r0, ip
    eb6c:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
    eb70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    eb74:	3804      	subs	r0, #4
    eb76:	f853 2b04 	ldr.w	r2, [r3], #4
    eb7a:	f840 2f04 	str.w	r2, [r0, #4]!
    eb7e:	4299      	cmp	r1, r3
    eb80:	d8f9      	bhi.n	eb76 <__lshift+0xca>
    eb82:	e7eb      	b.n	eb5c <__lshift+0xb0>
    eb84:	4b03      	ldr	r3, [pc, #12]	; (eb94 <__lshift+0xe8>)
    eb86:	4804      	ldr	r0, [pc, #16]	; (eb98 <__lshift+0xec>)
    eb88:	4662      	mov	r2, ip
    eb8a:	f44f 71ef 	mov.w	r1, #478	; 0x1de
    eb8e:	f002 f913 	bl	10db8 <__assert_func>
    eb92:	bf00      	nop
    eb94:	000157c8 	.word	0x000157c8
    eb98:	000157dc 	.word	0x000157dc

0000eb9c <__mcmp>:
    eb9c:	690b      	ldr	r3, [r1, #16]
    eb9e:	4684      	mov	ip, r0
    eba0:	6900      	ldr	r0, [r0, #16]
    eba2:	1ac0      	subs	r0, r0, r3
    eba4:	d115      	bne.n	ebd2 <__mcmp+0x36>
    eba6:	f10c 0c14 	add.w	ip, ip, #20
    ebaa:	3114      	adds	r1, #20
    ebac:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
    ebb0:	b410      	push	{r4}
    ebb2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    ebb6:	e001      	b.n	ebbc <__mcmp+0x20>
    ebb8:	4594      	cmp	ip, r2
    ebba:	d208      	bcs.n	ebce <__mcmp+0x32>
    ebbc:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    ebc0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    ebc4:	428c      	cmp	r4, r1
    ebc6:	d0f7      	beq.n	ebb8 <__mcmp+0x1c>
    ebc8:	d204      	bcs.n	ebd4 <__mcmp+0x38>
    ebca:	f04f 30ff 	mov.w	r0, #4294967295
    ebce:	bc10      	pop	{r4}
    ebd0:	4770      	bx	lr
    ebd2:	4770      	bx	lr
    ebd4:	2001      	movs	r0, #1
    ebd6:	bc10      	pop	{r4}
    ebd8:	4770      	bx	lr
    ebda:	bf00      	nop

0000ebdc <__mdiff>:
    ebdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ebe0:	690f      	ldr	r7, [r1, #16]
    ebe2:	6913      	ldr	r3, [r2, #16]
    ebe4:	1aff      	subs	r7, r7, r3
    ebe6:	2f00      	cmp	r7, #0
    ebe8:	460e      	mov	r6, r1
    ebea:	4690      	mov	r8, r2
    ebec:	d17f      	bne.n	ecee <__mdiff+0x112>
    ebee:	f101 0514 	add.w	r5, r1, #20
    ebf2:	3214      	adds	r2, #20
    ebf4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    ebf8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    ebfc:	e001      	b.n	ec02 <__mdiff+0x26>
    ebfe:	429d      	cmp	r5, r3
    ec00:	d278      	bcs.n	ecf4 <__mdiff+0x118>
    ec02:	f853 1d04 	ldr.w	r1, [r3, #-4]!
    ec06:	f852 4d04 	ldr.w	r4, [r2, #-4]!
    ec0a:	42a1      	cmp	r1, r4
    ec0c:	d0f7      	beq.n	ebfe <__mdiff+0x22>
    ec0e:	d369      	bcc.n	ece4 <__mdiff+0x108>
    ec10:	6871      	ldr	r1, [r6, #4]
    ec12:	f7ff fd3f 	bl	e694 <_Balloc>
    ec16:	4681      	mov	r9, r0
    ec18:	2800      	cmp	r0, #0
    ec1a:	d077      	beq.n	ed0c <__mdiff+0x130>
    ec1c:	6935      	ldr	r5, [r6, #16]
    ec1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
    ec22:	60c7      	str	r7, [r0, #12]
    ec24:	f108 0e14 	add.w	lr, r8, #20
    ec28:	f106 0014 	add.w	r0, r6, #20
    ec2c:	f109 0a14 	add.w	sl, r9, #20
    ec30:	f106 0110 	add.w	r1, r6, #16
    ec34:	eb0e 0282 	add.w	r2, lr, r2, lsl #2
    ec38:	eb00 0785 	add.w	r7, r0, r5, lsl #2
    ec3c:	4656      	mov	r6, sl
    ec3e:	f04f 0c00 	mov.w	ip, #0
    ec42:	f85e 4b04 	ldr.w	r4, [lr], #4
    ec46:	f851 bf04 	ldr.w	fp, [r1, #4]!
    ec4a:	b2a3      	uxth	r3, r4
    ec4c:	fa1c fc8b 	uxtah	ip, ip, fp
    ec50:	ebac 0303 	sub.w	r3, ip, r3
    ec54:	ea4f 4c14 	mov.w	ip, r4, lsr #16
    ec58:	ebcc 4c1b 	rsb	ip, ip, fp, lsr #16
    ec5c:	eb0c 4c23 	add.w	ip, ip, r3, asr #16
    ec60:	b29b      	uxth	r3, r3
    ec62:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
    ec66:	4572      	cmp	r2, lr
    ec68:	f846 3b04 	str.w	r3, [r6], #4
    ec6c:	ea4f 4c2c 	mov.w	ip, ip, asr #16
    ec70:	d8e7      	bhi.n	ec42 <__mdiff+0x66>
    ec72:	eba2 0108 	sub.w	r1, r2, r8
    ec76:	3915      	subs	r1, #21
    ec78:	f108 0815 	add.w	r8, r8, #21
    ec7c:	4542      	cmp	r2, r8
    ec7e:	f021 0403 	bic.w	r4, r1, #3
    ec82:	f104 0404 	add.w	r4, r4, #4
    ec86:	bf38      	it	cc
    ec88:	2404      	movcc	r4, #4
    ec8a:	4420      	add	r0, r4
    ec8c:	f021 0203 	bic.w	r2, r1, #3
    ec90:	bf38      	it	cc
    ec92:	2200      	movcc	r2, #0
    ec94:	4287      	cmp	r7, r0
    ec96:	4452      	add	r2, sl
    ec98:	4454      	add	r4, sl
    ec9a:	d918      	bls.n	ecce <__mdiff+0xf2>
    ec9c:	4626      	mov	r6, r4
    ec9e:	4601      	mov	r1, r0
    eca0:	f851 3b04 	ldr.w	r3, [r1], #4
    eca4:	fa1c fc83 	uxtah	ip, ip, r3
    eca8:	ea4f 422c 	mov.w	r2, ip, asr #16
    ecac:	eb02 4213 	add.w	r2, r2, r3, lsr #16
    ecb0:	fa1f fc8c 	uxth.w	ip, ip
    ecb4:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
    ecb8:	428f      	cmp	r7, r1
    ecba:	f846 3b04 	str.w	r3, [r6], #4
    ecbe:	ea4f 4c22 	mov.w	ip, r2, asr #16
    ecc2:	d8ed      	bhi.n	eca0 <__mdiff+0xc4>
    ecc4:	3f01      	subs	r7, #1
    ecc6:	1a3f      	subs	r7, r7, r0
    ecc8:	f027 0703 	bic.w	r7, r7, #3
    eccc:	19e2      	adds	r2, r4, r7
    ecce:	b923      	cbnz	r3, ecda <__mdiff+0xfe>
    ecd0:	f852 3d04 	ldr.w	r3, [r2, #-4]!
    ecd4:	3d01      	subs	r5, #1
    ecd6:	2b00      	cmp	r3, #0
    ecd8:	d0fa      	beq.n	ecd0 <__mdiff+0xf4>
    ecda:	f8c9 5010 	str.w	r5, [r9, #16]
    ecde:	4648      	mov	r0, r9
    ece0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ece4:	4633      	mov	r3, r6
    ece6:	2701      	movs	r7, #1
    ece8:	4646      	mov	r6, r8
    ecea:	4698      	mov	r8, r3
    ecec:	e790      	b.n	ec10 <__mdiff+0x34>
    ecee:	dbf9      	blt.n	ece4 <__mdiff+0x108>
    ecf0:	2700      	movs	r7, #0
    ecf2:	e78d      	b.n	ec10 <__mdiff+0x34>
    ecf4:	2100      	movs	r1, #0
    ecf6:	f7ff fccd 	bl	e694 <_Balloc>
    ecfa:	4681      	mov	r9, r0
    ecfc:	b168      	cbz	r0, ed1a <__mdiff+0x13e>
    ecfe:	2201      	movs	r2, #1
    ed00:	2300      	movs	r3, #0
    ed02:	e9c9 2304 	strd	r2, r3, [r9, #16]
    ed06:	4648      	mov	r0, r9
    ed08:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed0c:	4b06      	ldr	r3, [pc, #24]	; (ed28 <__mdiff+0x14c>)
    ed0e:	4807      	ldr	r0, [pc, #28]	; (ed2c <__mdiff+0x150>)
    ed10:	464a      	mov	r2, r9
    ed12:	f240 2145 	movw	r1, #581	; 0x245
    ed16:	f002 f84f 	bl	10db8 <__assert_func>
    ed1a:	4b03      	ldr	r3, [pc, #12]	; (ed28 <__mdiff+0x14c>)
    ed1c:	4803      	ldr	r0, [pc, #12]	; (ed2c <__mdiff+0x150>)
    ed1e:	464a      	mov	r2, r9
    ed20:	f240 2137 	movw	r1, #567	; 0x237
    ed24:	f002 f848 	bl	10db8 <__assert_func>
    ed28:	000157c8 	.word	0x000157c8
    ed2c:	000157dc 	.word	0x000157dc

0000ed30 <__d2b>:
    ed30:	b570      	push	{r4, r5, r6, lr}
    ed32:	2101      	movs	r1, #1
    ed34:	b082      	sub	sp, #8
    ed36:	4616      	mov	r6, r2
    ed38:	461d      	mov	r5, r3
    ed3a:	f7ff fcab 	bl	e694 <_Balloc>
    ed3e:	4604      	mov	r4, r0
    ed40:	2800      	cmp	r0, #0
    ed42:	d04a      	beq.n	edda <__d2b+0xaa>
    ed44:	462b      	mov	r3, r5
    ed46:	f3c5 550a 	ubfx	r5, r5, #20, #11
    ed4a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ed4e:	b10d      	cbz	r5, ed54 <__d2b+0x24>
    ed50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    ed54:	2e00      	cmp	r6, #0
    ed56:	9301      	str	r3, [sp, #4]
    ed58:	d114      	bne.n	ed84 <__d2b+0x54>
    ed5a:	a801      	add	r0, sp, #4
    ed5c:	f7ff fd3a 	bl	e7d4 <__lo0bits>
    ed60:	9b01      	ldr	r3, [sp, #4]
    ed62:	6163      	str	r3, [r4, #20]
    ed64:	2101      	movs	r1, #1
    ed66:	3020      	adds	r0, #32
    ed68:	6121      	str	r1, [r4, #16]
    ed6a:	b315      	cbz	r5, edb2 <__d2b+0x82>
    ed6c:	9b06      	ldr	r3, [sp, #24]
    ed6e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    ed72:	4405      	add	r5, r0
    ed74:	601d      	str	r5, [r3, #0]
    ed76:	9b07      	ldr	r3, [sp, #28]
    ed78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    ed7c:	6018      	str	r0, [r3, #0]
    ed7e:	4620      	mov	r0, r4
    ed80:	b002      	add	sp, #8
    ed82:	bd70      	pop	{r4, r5, r6, pc}
    ed84:	4668      	mov	r0, sp
    ed86:	9600      	str	r6, [sp, #0]
    ed88:	f7ff fd24 	bl	e7d4 <__lo0bits>
    ed8c:	b308      	cbz	r0, edd2 <__d2b+0xa2>
    ed8e:	9b01      	ldr	r3, [sp, #4]
    ed90:	9900      	ldr	r1, [sp, #0]
    ed92:	f1c0 0220 	rsb	r2, r0, #32
    ed96:	fa03 f202 	lsl.w	r2, r3, r2
    ed9a:	430a      	orrs	r2, r1
    ed9c:	40c3      	lsrs	r3, r0
    ed9e:	9301      	str	r3, [sp, #4]
    eda0:	6162      	str	r2, [r4, #20]
    eda2:	2b00      	cmp	r3, #0
    eda4:	bf14      	ite	ne
    eda6:	2102      	movne	r1, #2
    eda8:	2101      	moveq	r1, #1
    edaa:	61a3      	str	r3, [r4, #24]
    edac:	6121      	str	r1, [r4, #16]
    edae:	2d00      	cmp	r5, #0
    edb0:	d1dc      	bne.n	ed6c <__d2b+0x3c>
    edb2:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    edb6:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
    edba:	6910      	ldr	r0, [r2, #16]
    edbc:	9a06      	ldr	r2, [sp, #24]
    edbe:	6013      	str	r3, [r2, #0]
    edc0:	f7ff fce8 	bl	e794 <__hi0bits>
    edc4:	9b07      	ldr	r3, [sp, #28]
    edc6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    edca:	6018      	str	r0, [r3, #0]
    edcc:	4620      	mov	r0, r4
    edce:	b002      	add	sp, #8
    edd0:	bd70      	pop	{r4, r5, r6, pc}
    edd2:	e9dd 2300 	ldrd	r2, r3, [sp]
    edd6:	6162      	str	r2, [r4, #20]
    edd8:	e7e3      	b.n	eda2 <__d2b+0x72>
    edda:	4b03      	ldr	r3, [pc, #12]	; (ede8 <__d2b+0xb8>)
    eddc:	4803      	ldr	r0, [pc, #12]	; (edec <__d2b+0xbc>)
    edde:	4622      	mov	r2, r4
    ede0:	f240 310f 	movw	r1, #783	; 0x30f
    ede4:	f001 ffe8 	bl	10db8 <__assert_func>
    ede8:	000157c8 	.word	0x000157c8
    edec:	000157dc 	.word	0x000157dc

0000edf0 <__ascii_wctomb>:
    edf0:	b149      	cbz	r1, ee06 <__ascii_wctomb+0x16>
    edf2:	2aff      	cmp	r2, #255	; 0xff
    edf4:	d802      	bhi.n	edfc <__ascii_wctomb+0xc>
    edf6:	700a      	strb	r2, [r1, #0]
    edf8:	2001      	movs	r0, #1
    edfa:	4770      	bx	lr
    edfc:	238a      	movs	r3, #138	; 0x8a
    edfe:	6003      	str	r3, [r0, #0]
    ee00:	f04f 30ff 	mov.w	r0, #4294967295
    ee04:	4770      	bx	lr
    ee06:	4608      	mov	r0, r1
    ee08:	4770      	bx	lr
    ee0a:	bf00      	nop

0000ee0c <_svfprintf_r>:
    ee0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ee10:	b0d9      	sub	sp, #356	; 0x164
    ee12:	460c      	mov	r4, r1
    ee14:	910c      	str	r1, [sp, #48]	; 0x30
    ee16:	4690      	mov	r8, r2
    ee18:	930e      	str	r3, [sp, #56]	; 0x38
    ee1a:	4682      	mov	sl, r0
    ee1c:	f001 fee6 	bl	10bec <_localeconv_r>
    ee20:	6803      	ldr	r3, [r0, #0]
    ee22:	9319      	str	r3, [sp, #100]	; 0x64
    ee24:	4618      	mov	r0, r3
    ee26:	f7ff fa4b 	bl	e2c0 <strlen>
    ee2a:	2208      	movs	r2, #8
    ee2c:	9017      	str	r0, [sp, #92]	; 0x5c
    ee2e:	2100      	movs	r1, #0
    ee30:	a828      	add	r0, sp, #160	; 0xa0
    ee32:	f7ff f923 	bl	e07c <memset>
    ee36:	89a3      	ldrh	r3, [r4, #12]
    ee38:	061f      	lsls	r7, r3, #24
    ee3a:	d503      	bpl.n	ee44 <_svfprintf_r+0x38>
    ee3c:	6923      	ldr	r3, [r4, #16]
    ee3e:	2b00      	cmp	r3, #0
    ee40:	f000 873f 	beq.w	fcc2 <_svfprintf_r+0xeb6>
    ee44:	2300      	movs	r3, #0
    ee46:	aa2f      	add	r2, sp, #188	; 0xbc
    ee48:	2400      	movs	r4, #0
    ee4a:	e9cd 332d 	strd	r3, r3, [sp, #180]	; 0xb4
    ee4e:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
    ee52:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
    ee56:	9313      	str	r3, [sp, #76]	; 0x4c
    ee58:	9318      	str	r3, [sp, #96]	; 0x60
    ee5a:	9309      	str	r3, [sp, #36]	; 0x24
    ee5c:	2300      	movs	r3, #0
    ee5e:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
    ee62:	922c      	str	r2, [sp, #176]	; 0xb0
    ee64:	4691      	mov	r9, r2
    ee66:	4644      	mov	r4, r8
    ee68:	46a0      	mov	r8, r4
    ee6a:	4b78      	ldr	r3, [pc, #480]	; (f04c <_svfprintf_r+0x240>)
    ee6c:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
    ee70:	f7ff f988 	bl	e184 <__locale_mb_cur_max>
    ee74:	4603      	mov	r3, r0
    ee76:	a828      	add	r0, sp, #160	; 0xa0
    ee78:	9000      	str	r0, [sp, #0]
    ee7a:	4642      	mov	r2, r8
    ee7c:	a924      	add	r1, sp, #144	; 0x90
    ee7e:	4650      	mov	r0, sl
    ee80:	47a8      	blx	r5
    ee82:	2800      	cmp	r0, #0
    ee84:	f000 80b0 	beq.w	efe8 <_svfprintf_r+0x1dc>
    ee88:	f2c0 80a6 	blt.w	efd8 <_svfprintf_r+0x1cc>
    ee8c:	9a24      	ldr	r2, [sp, #144]	; 0x90
    ee8e:	2a25      	cmp	r2, #37	; 0x25
    ee90:	4603      	mov	r3, r0
    ee92:	d001      	beq.n	ee98 <_svfprintf_r+0x8c>
    ee94:	4498      	add	r8, r3
    ee96:	e7e8      	b.n	ee6a <_svfprintf_r+0x5e>
    ee98:	ebb8 0704 	subs.w	r7, r8, r4
    ee9c:	4606      	mov	r6, r0
    ee9e:	f040 80a7 	bne.w	eff0 <_svfprintf_r+0x1e4>
    eea2:	2300      	movs	r3, #0
    eea4:	f04f 32ff 	mov.w	r2, #4294967295
    eea8:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    eeac:	469b      	mov	fp, r3
    eeae:	930b      	str	r3, [sp, #44]	; 0x2c
    eeb0:	f108 0801 	add.w	r8, r8, #1
    eeb4:	f898 3000 	ldrb.w	r3, [r8]
    eeb8:	9208      	str	r2, [sp, #32]
    eeba:	252b      	movs	r5, #43	; 0x2b
    eebc:	2620      	movs	r6, #32
    eebe:	f108 0801 	add.w	r8, r8, #1
    eec2:	f1a3 0220 	sub.w	r2, r3, #32
    eec6:	2a5a      	cmp	r2, #90	; 0x5a
    eec8:	f200 80c2 	bhi.w	f050 <_svfprintf_r+0x244>
    eecc:	e8df f012 	tbh	[pc, r2, lsl #1]
    eed0:	00c002e6 	.word	0x00c002e6
    eed4:	02e100c0 	.word	0x02e100c0
    eed8:	00c000c0 	.word	0x00c000c0
    eedc:	006a00c0 	.word	0x006a00c0
    eee0:	00c000c0 	.word	0x00c000c0
    eee4:	02840208 	.word	0x02840208
    eee8:	021300c0 	.word	0x021300c0
    eeec:	00c002c7 	.word	0x00c002c7
    eef0:	005b02c2 	.word	0x005b02c2
    eef4:	005b005b 	.word	0x005b005b
    eef8:	005b005b 	.word	0x005b005b
    eefc:	005b005b 	.word	0x005b005b
    ef00:	005b005b 	.word	0x005b005b
    ef04:	00c000c0 	.word	0x00c000c0
    ef08:	00c000c0 	.word	0x00c000c0
    ef0c:	00c000c0 	.word	0x00c000c0
    ef10:	014300c0 	.word	0x014300c0
    ef14:	018900c0 	.word	0x018900c0
    ef18:	0143021d 	.word	0x0143021d
    ef1c:	01430143 	.word	0x01430143
    ef20:	00c000c0 	.word	0x00c000c0
    ef24:	00c000c0 	.word	0x00c000c0
    ef28:	00c00218 	.word	0x00c00218
    ef2c:	029600c0 	.word	0x029600c0
    ef30:	00c000c0 	.word	0x00c000c0
    ef34:	01b100c0 	.word	0x01b100c0
    ef38:	02a900c0 	.word	0x02a900c0
    ef3c:	00c000c0 	.word	0x00c000c0
    ef40:	00c006dd 	.word	0x00c006dd
    ef44:	00c000c0 	.word	0x00c000c0
    ef48:	00c000c0 	.word	0x00c000c0
    ef4c:	00c000c0 	.word	0x00c000c0
    ef50:	014300c0 	.word	0x014300c0
    ef54:	018900c0 	.word	0x018900c0
    ef58:	014301e2 	.word	0x014301e2
    ef5c:	01430143 	.word	0x01430143
    ef60:	01e20277 	.word	0x01e20277
    ef64:	00c0007f 	.word	0x00c0007f
    ef68:	00c00289 	.word	0x00c00289
    ef6c:	06da025f 	.word	0x06da025f
    ef70:	007f0232 	.word	0x007f0232
    ef74:	01b100c0 	.word	0x01b100c0
    ef78:	06b4007c 	.word	0x06b4007c
    ef7c:	00c000c0 	.word	0x00c000c0
    ef80:	00c006b8 	.word	0x00c006b8
    ef84:	007c      	.short	0x007c
    ef86:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ef8a:	2100      	movs	r1, #0
    ef8c:	f818 3b01 	ldrb.w	r3, [r8], #1
    ef90:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    ef94:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    ef98:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    ef9c:	2a09      	cmp	r2, #9
    ef9e:	d9f5      	bls.n	ef8c <_svfprintf_r+0x180>
    efa0:	910b      	str	r1, [sp, #44]	; 0x2c
    efa2:	e78e      	b.n	eec2 <_svfprintf_r+0xb6>
    efa4:	4650      	mov	r0, sl
    efa6:	f001 fe21 	bl	10bec <_localeconv_r>
    efaa:	6843      	ldr	r3, [r0, #4]
    efac:	931c      	str	r3, [sp, #112]	; 0x70
    efae:	4618      	mov	r0, r3
    efb0:	f7ff f986 	bl	e2c0 <strlen>
    efb4:	901d      	str	r0, [sp, #116]	; 0x74
    efb6:	4607      	mov	r7, r0
    efb8:	4650      	mov	r0, sl
    efba:	f001 fe17 	bl	10bec <_localeconv_r>
    efbe:	6883      	ldr	r3, [r0, #8]
    efc0:	931a      	str	r3, [sp, #104]	; 0x68
    efc2:	2f00      	cmp	r7, #0
    efc4:	f040 85b1 	bne.w	fb2a <_svfprintf_r+0xd1e>
    efc8:	f898 3000 	ldrb.w	r3, [r8]
    efcc:	e777      	b.n	eebe <_svfprintf_r+0xb2>
    efce:	f898 3000 	ldrb.w	r3, [r8]
    efd2:	f04b 0b20 	orr.w	fp, fp, #32
    efd6:	e772      	b.n	eebe <_svfprintf_r+0xb2>
    efd8:	2208      	movs	r2, #8
    efda:	2100      	movs	r1, #0
    efdc:	a828      	add	r0, sp, #160	; 0xa0
    efde:	f7ff f84d 	bl	e07c <memset>
    efe2:	2301      	movs	r3, #1
    efe4:	4498      	add	r8, r3
    efe6:	e740      	b.n	ee6a <_svfprintf_r+0x5e>
    efe8:	ebb8 0704 	subs.w	r7, r8, r4
    efec:	4606      	mov	r6, r0
    efee:	d011      	beq.n	f014 <_svfprintf_r+0x208>
    eff0:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    eff2:	443b      	add	r3, r7
    eff4:	932e      	str	r3, [sp, #184]	; 0xb8
    eff6:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    eff8:	3301      	adds	r3, #1
    effa:	2b07      	cmp	r3, #7
    effc:	e9c9 4700 	strd	r4, r7, [r9]
    f000:	932d      	str	r3, [sp, #180]	; 0xb4
    f002:	dc19      	bgt.n	f038 <_svfprintf_r+0x22c>
    f004:	f109 0908 	add.w	r9, r9, #8
    f008:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f00a:	443b      	add	r3, r7
    f00c:	9309      	str	r3, [sp, #36]	; 0x24
    f00e:	2e00      	cmp	r6, #0
    f010:	f47f af47 	bne.w	eea2 <_svfprintf_r+0x96>
    f014:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
    f016:	2b00      	cmp	r3, #0
    f018:	f041 8201 	bne.w	1041e <_svfprintf_r+0x1612>
    f01c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    f01e:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
    f022:	f013 0f40 	tst.w	r3, #64	; 0x40
    f026:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f028:	bf18      	it	ne
    f02a:	f04f 33ff 	movne.w	r3, #4294967295
    f02e:	9309      	str	r3, [sp, #36]	; 0x24
    f030:	9809      	ldr	r0, [sp, #36]	; 0x24
    f032:	b059      	add	sp, #356	; 0x164
    f034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f038:	990c      	ldr	r1, [sp, #48]	; 0x30
    f03a:	aa2c      	add	r2, sp, #176	; 0xb0
    f03c:	4650      	mov	r0, sl
    f03e:	f002 ff4f 	bl	11ee0 <__ssprint_r>
    f042:	2800      	cmp	r0, #0
    f044:	d1ea      	bne.n	f01c <_svfprintf_r+0x210>
    f046:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f04a:	e7dd      	b.n	f008 <_svfprintf_r+0x1fc>
    f04c:	1fff8ed4 	.word	0x1fff8ed4
    f050:	9310      	str	r3, [sp, #64]	; 0x40
    f052:	2b00      	cmp	r3, #0
    f054:	d0de      	beq.n	f014 <_svfprintf_r+0x208>
    f056:	2200      	movs	r2, #0
    f058:	f88d 30fc 	strb.w	r3, [sp, #252]	; 0xfc
    f05c:	2301      	movs	r3, #1
    f05e:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    f062:	9307      	str	r3, [sp, #28]
    f064:	920d      	str	r2, [sp, #52]	; 0x34
    f066:	930a      	str	r3, [sp, #40]	; 0x28
    f068:	9208      	str	r2, [sp, #32]
    f06a:	9212      	str	r2, [sp, #72]	; 0x48
    f06c:	9216      	str	r2, [sp, #88]	; 0x58
    f06e:	9211      	str	r2, [sp, #68]	; 0x44
    f070:	ac3f      	add	r4, sp, #252	; 0xfc
    f072:	f01b 0302 	ands.w	r3, fp, #2
    f076:	d002      	beq.n	f07e <_svfprintf_r+0x272>
    f078:	9907      	ldr	r1, [sp, #28]
    f07a:	3102      	adds	r1, #2
    f07c:	9107      	str	r1, [sp, #28]
    f07e:	f01b 0184 	ands.w	r1, fp, #132	; 0x84
    f082:	910f      	str	r1, [sp, #60]	; 0x3c
    f084:	d105      	bne.n	f092 <_svfprintf_r+0x286>
    f086:	990b      	ldr	r1, [sp, #44]	; 0x2c
    f088:	9807      	ldr	r0, [sp, #28]
    f08a:	1a0f      	subs	r7, r1, r0
    f08c:	2f00      	cmp	r7, #0
    f08e:	f300 8382 	bgt.w	f796 <_svfprintf_r+0x98a>
    f092:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f094:	b182      	cbz	r2, f0b8 <_svfprintf_r+0x2ac>
    f096:	2201      	movs	r2, #1
    f098:	f8c9 2004 	str.w	r2, [r9, #4]
    f09c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f09e:	3201      	adds	r2, #1
    f0a0:	3601      	adds	r6, #1
    f0a2:	f10d 0187 	add.w	r1, sp, #135	; 0x87
    f0a6:	2a07      	cmp	r2, #7
    f0a8:	962e      	str	r6, [sp, #184]	; 0xb8
    f0aa:	922d      	str	r2, [sp, #180]	; 0xb4
    f0ac:	f8c9 1000 	str.w	r1, [r9]
    f0b0:	f300 83bd 	bgt.w	f82e <_svfprintf_r+0xa22>
    f0b4:	f109 0908 	add.w	r9, r9, #8
    f0b8:	b183      	cbz	r3, f0dc <_svfprintf_r+0x2d0>
    f0ba:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f0bc:	aa22      	add	r2, sp, #136	; 0x88
    f0be:	3301      	adds	r3, #1
    f0c0:	3602      	adds	r6, #2
    f0c2:	f8c9 2000 	str.w	r2, [r9]
    f0c6:	2b07      	cmp	r3, #7
    f0c8:	f04f 0202 	mov.w	r2, #2
    f0cc:	962e      	str	r6, [sp, #184]	; 0xb8
    f0ce:	932d      	str	r3, [sp, #180]	; 0xb4
    f0d0:	f8c9 2004 	str.w	r2, [r9, #4]
    f0d4:	f300 83c0 	bgt.w	f858 <_svfprintf_r+0xa4c>
    f0d8:	f109 0908 	add.w	r9, r9, #8
    f0dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f0de:	2b80      	cmp	r3, #128	; 0x80
    f0e0:	f000 8281 	beq.w	f5e6 <_svfprintf_r+0x7da>
    f0e4:	9b08      	ldr	r3, [sp, #32]
    f0e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f0e8:	1a9f      	subs	r7, r3, r2
    f0ea:	2f00      	cmp	r7, #0
    f0ec:	f300 82bc 	bgt.w	f668 <_svfprintf_r+0x85c>
    f0f0:	f41b 7f80 	tst.w	fp, #256	; 0x100
    f0f4:	f040 821e 	bne.w	f534 <_svfprintf_r+0x728>
    f0f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f0fa:	f8c9 3004 	str.w	r3, [r9, #4]
    f0fe:	441e      	add	r6, r3
    f100:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f102:	f8c9 4000 	str.w	r4, [r9]
    f106:	3301      	adds	r3, #1
    f108:	2b07      	cmp	r3, #7
    f10a:	962e      	str	r6, [sp, #184]	; 0xb8
    f10c:	932d      	str	r3, [sp, #180]	; 0xb4
    f10e:	f300 8337 	bgt.w	f780 <_svfprintf_r+0x974>
    f112:	f109 0908 	add.w	r9, r9, #8
    f116:	f01b 0f04 	tst.w	fp, #4
    f11a:	d005      	beq.n	f128 <_svfprintf_r+0x31c>
    f11c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f11e:	9a07      	ldr	r2, [sp, #28]
    f120:	1a9c      	subs	r4, r3, r2
    f122:	2c00      	cmp	r4, #0
    f124:	f300 83a4 	bgt.w	f870 <_svfprintf_r+0xa64>
    f128:	9b09      	ldr	r3, [sp, #36]	; 0x24
    f12a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f12c:	9907      	ldr	r1, [sp, #28]
    f12e:	428a      	cmp	r2, r1
    f130:	bfac      	ite	ge
    f132:	189b      	addge	r3, r3, r2
    f134:	185b      	addlt	r3, r3, r1
    f136:	9309      	str	r3, [sp, #36]	; 0x24
    f138:	2e00      	cmp	r6, #0
    f13a:	f040 82ca 	bne.w	f6d2 <_svfprintf_r+0x8c6>
    f13e:	2300      	movs	r3, #0
    f140:	932d      	str	r3, [sp, #180]	; 0xb4
    f142:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f144:	b11b      	cbz	r3, f14e <_svfprintf_r+0x342>
    f146:	990d      	ldr	r1, [sp, #52]	; 0x34
    f148:	4650      	mov	r0, sl
    f14a:	f7ff f987 	bl	e45c <_free_r>
    f14e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f152:	4644      	mov	r4, r8
    f154:	e688      	b.n	ee68 <_svfprintf_r+0x5c>
    f156:	9310      	str	r3, [sp, #64]	; 0x40
    f158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f15a:	3307      	adds	r3, #7
    f15c:	f023 0107 	bic.w	r1, r3, #7
    f160:	e8f1 2302 	ldrd	r2, r3, [r1], #8
    f164:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    f168:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
    f16c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
    f170:	910e      	str	r1, [sp, #56]	; 0x38
    f172:	4616      	mov	r6, r2
    f174:	4610      	mov	r0, r2
    f176:	4bb3      	ldr	r3, [pc, #716]	; (f444 <_svfprintf_r+0x638>)
    f178:	4629      	mov	r1, r5
    f17a:	f04f 32ff 	mov.w	r2, #4294967295
    f17e:	f7fd fdb7 	bl	ccf0 <__aeabi_dcmpun>
    f182:	2800      	cmp	r0, #0
    f184:	f040 84fc 	bne.w	fb80 <_svfprintf_r+0xd74>
    f188:	4bae      	ldr	r3, [pc, #696]	; (f444 <_svfprintf_r+0x638>)
    f18a:	4630      	mov	r0, r6
    f18c:	4629      	mov	r1, r5
    f18e:	f04f 32ff 	mov.w	r2, #4294967295
    f192:	f7fd fd8f 	bl	ccb4 <__aeabi_dcmple>
    f196:	2800      	cmp	r0, #0
    f198:	f040 84f2 	bne.w	fb80 <_svfprintf_r+0xd74>
    f19c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f1a0:	2200      	movs	r2, #0
    f1a2:	2300      	movs	r3, #0
    f1a4:	f7fd fd7c 	bl	cca0 <__aeabi_dcmplt>
    f1a8:	2800      	cmp	r0, #0
    f1aa:	f041 8038 	bne.w	1021e <_svfprintf_r+0x1412>
    f1ae:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f1b2:	4ca5      	ldr	r4, [pc, #660]	; (f448 <_svfprintf_r+0x63c>)
    f1b4:	4ba5      	ldr	r3, [pc, #660]	; (f44c <_svfprintf_r+0x640>)
    f1b6:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    f1ba:	9910      	ldr	r1, [sp, #64]	; 0x40
    f1bc:	2947      	cmp	r1, #71	; 0x47
    f1be:	bfc8      	it	gt
    f1c0:	461c      	movgt	r4, r3
    f1c2:	2300      	movs	r3, #0
    f1c4:	2103      	movs	r1, #3
    f1c6:	930d      	str	r3, [sp, #52]	; 0x34
    f1c8:	9107      	str	r1, [sp, #28]
    f1ca:	910a      	str	r1, [sp, #40]	; 0x28
    f1cc:	9308      	str	r3, [sp, #32]
    f1ce:	9312      	str	r3, [sp, #72]	; 0x48
    f1d0:	9316      	str	r3, [sp, #88]	; 0x58
    f1d2:	9311      	str	r3, [sp, #68]	; 0x44
    f1d4:	2a00      	cmp	r2, #0
    f1d6:	f43f af4c 	beq.w	f072 <_svfprintf_r+0x266>
    f1da:	9b07      	ldr	r3, [sp, #28]
    f1dc:	3301      	adds	r3, #1
    f1de:	9307      	str	r3, [sp, #28]
    f1e0:	e747      	b.n	f072 <_svfprintf_r+0x266>
    f1e2:	2b43      	cmp	r3, #67	; 0x43
    f1e4:	9310      	str	r3, [sp, #64]	; 0x40
    f1e6:	d003      	beq.n	f1f0 <_svfprintf_r+0x3e4>
    f1e8:	f01b 0f10 	tst.w	fp, #16
    f1ec:	f000 8551 	beq.w	fc92 <_svfprintf_r+0xe86>
    f1f0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    f1f2:	2208      	movs	r2, #8
    f1f4:	2100      	movs	r1, #0
    f1f6:	a82a      	add	r0, sp, #168	; 0xa8
    f1f8:	ac3f      	add	r4, sp, #252	; 0xfc
    f1fa:	f7fe ff3f 	bl	e07c <memset>
    f1fe:	ab2a      	add	r3, sp, #168	; 0xa8
    f200:	f856 2b04 	ldr.w	r2, [r6], #4
    f204:	4621      	mov	r1, r4
    f206:	4650      	mov	r0, sl
    f208:	f002 fe22 	bl	11e50 <_wcrtomb_r>
    f20c:	4603      	mov	r3, r0
    f20e:	3301      	adds	r3, #1
    f210:	900a      	str	r0, [sp, #40]	; 0x28
    f212:	f001 82c3 	beq.w	1079c <_svfprintf_r+0x1990>
    f216:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f218:	960e      	str	r6, [sp, #56]	; 0x38
    f21a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f21e:	9307      	str	r3, [sp, #28]
    f220:	2200      	movs	r2, #0
    f222:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
    f226:	920d      	str	r2, [sp, #52]	; 0x34
    f228:	9208      	str	r2, [sp, #32]
    f22a:	9212      	str	r2, [sp, #72]	; 0x48
    f22c:	9216      	str	r2, [sp, #88]	; 0x58
    f22e:	9211      	str	r2, [sp, #68]	; 0x44
    f230:	e71f      	b.n	f072 <_svfprintf_r+0x266>
    f232:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    f234:	9310      	str	r3, [sp, #64]	; 0x40
    f236:	f857 4b04 	ldr.w	r4, [r7], #4
    f23a:	2300      	movs	r3, #0
    f23c:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
    f240:	2c00      	cmp	r4, #0
    f242:	f000 854d 	beq.w	fce0 <_svfprintf_r+0xed4>
    f246:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f248:	2b53      	cmp	r3, #83	; 0x53
    f24a:	f000 86d4 	beq.w	fff6 <_svfprintf_r+0x11ea>
    f24e:	f01b 0310 	ands.w	r3, fp, #16
    f252:	9311      	str	r3, [sp, #68]	; 0x44
    f254:	f040 86cf 	bne.w	fff6 <_svfprintf_r+0x11ea>
    f258:	9b08      	ldr	r3, [sp, #32]
    f25a:	1c5d      	adds	r5, r3, #1
    f25c:	f001 80cc 	beq.w	103f8 <_svfprintf_r+0x15ec>
    f260:	9911      	ldr	r1, [sp, #68]	; 0x44
    f262:	461a      	mov	r2, r3
    f264:	4620      	mov	r0, r4
    f266:	f001 fcdb 	bl	10c20 <memchr>
    f26a:	900d      	str	r0, [sp, #52]	; 0x34
    f26c:	2800      	cmp	r0, #0
    f26e:	f001 8351 	beq.w	10914 <_svfprintf_r+0x1b08>
    f272:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f274:	9911      	ldr	r1, [sp, #68]	; 0x44
    f276:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f27a:	970e      	str	r7, [sp, #56]	; 0x38
    f27c:	1b1b      	subs	r3, r3, r4
    f27e:	930a      	str	r3, [sp, #40]	; 0x28
    f280:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f284:	9307      	str	r3, [sp, #28]
    f286:	2373      	movs	r3, #115	; 0x73
    f288:	9108      	str	r1, [sp, #32]
    f28a:	9112      	str	r1, [sp, #72]	; 0x48
    f28c:	9116      	str	r1, [sp, #88]	; 0x58
    f28e:	910d      	str	r1, [sp, #52]	; 0x34
    f290:	9310      	str	r3, [sp, #64]	; 0x40
    f292:	e79f      	b.n	f1d4 <_svfprintf_r+0x3c8>
    f294:	f01b 0f20 	tst.w	fp, #32
    f298:	9310      	str	r3, [sp, #64]	; 0x40
    f29a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f29c:	d03c      	beq.n	f318 <_svfprintf_r+0x50c>
    f29e:	3307      	adds	r3, #7
    f2a0:	f023 0307 	bic.w	r3, r3, #7
    f2a4:	461a      	mov	r2, r3
    f2a6:	4611      	mov	r1, r2
    f2a8:	685b      	ldr	r3, [r3, #4]
    f2aa:	f851 2b08 	ldr.w	r2, [r1], #8
    f2ae:	910e      	str	r1, [sp, #56]	; 0x38
    f2b0:	4619      	mov	r1, r3
    f2b2:	2b00      	cmp	r3, #0
    f2b4:	f2c0 8401 	blt.w	faba <_svfprintf_r+0xcae>
    f2b8:	9b08      	ldr	r3, [sp, #32]
    f2ba:	3301      	adds	r3, #1
    f2bc:	f000 82a8 	beq.w	f810 <_svfprintf_r+0xa04>
    f2c0:	ea52 0301 	orrs.w	r3, r2, r1
    f2c4:	f02b 0580 	bic.w	r5, fp, #128	; 0x80
    f2c8:	f040 82a3 	bne.w	f812 <_svfprintf_r+0xa06>
    f2cc:	9b08      	ldr	r3, [sp, #32]
    f2ce:	2b00      	cmp	r3, #0
    f2d0:	f040 82a4 	bne.w	f81c <_svfprintf_r+0xa10>
    f2d4:	46ab      	mov	fp, r5
    f2d6:	2300      	movs	r3, #0
    f2d8:	9308      	str	r3, [sp, #32]
    f2da:	930a      	str	r3, [sp, #40]	; 0x28
    f2dc:	ac58      	add	r4, sp, #352	; 0x160
    f2de:	e0ff      	b.n	f4e0 <_svfprintf_r+0x6d4>
    f2e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f2e2:	f853 2b04 	ldr.w	r2, [r3], #4
    f2e6:	920b      	str	r2, [sp, #44]	; 0x2c
    f2e8:	2a00      	cmp	r2, #0
    f2ea:	f280 840c 	bge.w	fb06 <_svfprintf_r+0xcfa>
    f2ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    f2f0:	930e      	str	r3, [sp, #56]	; 0x38
    f2f2:	4252      	negs	r2, r2
    f2f4:	920b      	str	r2, [sp, #44]	; 0x2c
    f2f6:	f898 3000 	ldrb.w	r3, [r8]
    f2fa:	f04b 0b04 	orr.w	fp, fp, #4
    f2fe:	e5de      	b.n	eebe <_svfprintf_r+0xb2>
    f300:	f898 3000 	ldrb.w	r3, [r8]
    f304:	f04b 0b08 	orr.w	fp, fp, #8
    f308:	e5d9      	b.n	eebe <_svfprintf_r+0xb2>
    f30a:	f04b 0b10 	orr.w	fp, fp, #16
    f30e:	f01b 0f20 	tst.w	fp, #32
    f312:	9310      	str	r3, [sp, #64]	; 0x40
    f314:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f316:	d1c2      	bne.n	f29e <_svfprintf_r+0x492>
    f318:	f01b 0f10 	tst.w	fp, #16
    f31c:	f040 83fe 	bne.w	fb1c <_svfprintf_r+0xd10>
    f320:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f324:	f000 83f6 	beq.w	fb14 <_svfprintf_r+0xd08>
    f328:	f933 2b04 	ldrsh.w	r2, [r3], #4
    f32c:	930e      	str	r3, [sp, #56]	; 0x38
    f32e:	17d1      	asrs	r1, r2, #31
    f330:	460b      	mov	r3, r1
    f332:	e7be      	b.n	f2b2 <_svfprintf_r+0x4a6>
    f334:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f336:	f853 2b04 	ldr.w	r2, [r3], #4
    f33a:	930e      	str	r3, [sp, #56]	; 0x38
    f33c:	f647 0330 	movw	r3, #30768	; 0x7830
    f340:	f8ad 3088 	strh.w	r3, [sp, #136]	; 0x88
    f344:	2078      	movs	r0, #120	; 0x78
    f346:	4b42      	ldr	r3, [pc, #264]	; (f450 <_svfprintf_r+0x644>)
    f348:	9318      	str	r3, [sp, #96]	; 0x60
    f34a:	f04b 0502 	orr.w	r5, fp, #2
    f34e:	2100      	movs	r1, #0
    f350:	2302      	movs	r3, #2
    f352:	9010      	str	r0, [sp, #64]	; 0x40
    f354:	2000      	movs	r0, #0
    f356:	9c08      	ldr	r4, [sp, #32]
    f358:	f88d 0087 	strb.w	r0, [sp, #135]	; 0x87
    f35c:	1c60      	adds	r0, r4, #1
    f35e:	f000 80a8 	beq.w	f4b2 <_svfprintf_r+0x6a6>
    f362:	ea52 0001 	orrs.w	r0, r2, r1
    f366:	f025 0b80 	bic.w	fp, r5, #128	; 0x80
    f36a:	f040 80a1 	bne.w	f4b0 <_svfprintf_r+0x6a4>
    f36e:	2c00      	cmp	r4, #0
    f370:	f040 8695 	bne.w	1009e <_svfprintf_r+0x1292>
    f374:	2b00      	cmp	r3, #0
    f376:	d1ae      	bne.n	f2d6 <_svfprintf_r+0x4ca>
    f378:	f015 0301 	ands.w	r3, r5, #1
    f37c:	930a      	str	r3, [sp, #40]	; 0x28
    f37e:	f000 83c7 	beq.w	fb10 <_svfprintf_r+0xd04>
    f382:	2330      	movs	r3, #48	; 0x30
    f384:	f88d 315f 	strb.w	r3, [sp, #351]	; 0x15f
    f388:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    f38c:	e0a8      	b.n	f4e0 <_svfprintf_r+0x6d4>
    f38e:	f01b 0f20 	tst.w	fp, #32
    f392:	f040 83e5 	bne.w	fb60 <_svfprintf_r+0xd54>
    f396:	f01b 0f10 	tst.w	fp, #16
    f39a:	f040 8686 	bne.w	100aa <_svfprintf_r+0x129e>
    f39e:	f01b 0f40 	tst.w	fp, #64	; 0x40
    f3a2:	f040 877f 	bne.w	102a4 <_svfprintf_r+0x1498>
    f3a6:	f41b 7f00 	tst.w	fp, #512	; 0x200
    f3aa:	f000 867e 	beq.w	100aa <_svfprintf_r+0x129e>
    f3ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f3b0:	9909      	ldr	r1, [sp, #36]	; 0x24
    f3b2:	f853 2b04 	ldr.w	r2, [r3], #4
    f3b6:	930e      	str	r3, [sp, #56]	; 0x38
    f3b8:	7011      	strb	r1, [r2, #0]
    f3ba:	4644      	mov	r4, r8
    f3bc:	e554      	b.n	ee68 <_svfprintf_r+0x5c>
    f3be:	f898 3000 	ldrb.w	r3, [r8]
    f3c2:	2b68      	cmp	r3, #104	; 0x68
    f3c4:	bf03      	ittte	eq
    f3c6:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    f3ca:	f44b 7b00 	orreq.w	fp, fp, #512	; 0x200
    f3ce:	f108 0801 	addeq.w	r8, r8, #1
    f3d2:	f04b 0b40 	orrne.w	fp, fp, #64	; 0x40
    f3d6:	e572      	b.n	eebe <_svfprintf_r+0xb2>
    f3d8:	f898 3000 	ldrb.w	r3, [r8]
    f3dc:	f88d 5087 	strb.w	r5, [sp, #135]	; 0x87
    f3e0:	e56d      	b.n	eebe <_svfprintf_r+0xb2>
    f3e2:	f898 3000 	ldrb.w	r3, [r8]
    f3e6:	2b6c      	cmp	r3, #108	; 0x6c
    f3e8:	bf03      	ittte	eq
    f3ea:	f898 3001 	ldrbeq.w	r3, [r8, #1]
    f3ee:	f04b 0b20 	orreq.w	fp, fp, #32
    f3f2:	f108 0801 	addeq.w	r8, r8, #1
    f3f6:	f04b 0b10 	orrne.w	fp, fp, #16
    f3fa:	e560      	b.n	eebe <_svfprintf_r+0xb2>
    f3fc:	9310      	str	r3, [sp, #64]	; 0x40
    f3fe:	f04b 0b10 	orr.w	fp, fp, #16
    f402:	f01b 0120 	ands.w	r1, fp, #32
    f406:	f000 834a 	beq.w	fa9e <_svfprintf_r+0xc92>
    f40a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f40c:	3307      	adds	r3, #7
    f40e:	f023 0307 	bic.w	r3, r3, #7
    f412:	6859      	ldr	r1, [r3, #4]
    f414:	f853 2b08 	ldr.w	r2, [r3], #8
    f418:	930e      	str	r3, [sp, #56]	; 0x38
    f41a:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    f41e:	2300      	movs	r3, #0
    f420:	e798      	b.n	f354 <_svfprintf_r+0x548>
    f422:	9310      	str	r3, [sp, #64]	; 0x40
    f424:	f04b 0510 	orr.w	r5, fp, #16
    f428:	f015 0120 	ands.w	r1, r5, #32
    f42c:	f000 8328 	beq.w	fa80 <_svfprintf_r+0xc74>
    f430:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    f432:	3307      	adds	r3, #7
    f434:	f023 0307 	bic.w	r3, r3, #7
    f438:	6859      	ldr	r1, [r3, #4]
    f43a:	f853 2b08 	ldr.w	r2, [r3], #8
    f43e:	930e      	str	r3, [sp, #56]	; 0x38
    f440:	2301      	movs	r3, #1
    f442:	e787      	b.n	f354 <_svfprintf_r+0x548>
    f444:	7fefffff 	.word	0x7fefffff
    f448:	00015934 	.word	0x00015934
    f44c:	000154ac 	.word	0x000154ac
    f450:	0001593c 	.word	0x0001593c
    f454:	f898 3000 	ldrb.w	r3, [r8]
    f458:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    f45c:	e52f      	b.n	eebe <_svfprintf_r+0xb2>
    f45e:	4641      	mov	r1, r8
    f460:	f811 3b01 	ldrb.w	r3, [r1], #1
    f464:	2b2a      	cmp	r3, #42	; 0x2a
    f466:	f001 827f 	beq.w	10968 <_svfprintf_r+0x1b5c>
    f46a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f46e:	2a09      	cmp	r2, #9
    f470:	4688      	mov	r8, r1
    f472:	bf98      	it	ls
    f474:	2100      	movls	r1, #0
    f476:	f201 8176 	bhi.w	10766 <_svfprintf_r+0x195a>
    f47a:	f818 3b01 	ldrb.w	r3, [r8], #1
    f47e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f482:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    f486:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
    f48a:	2a09      	cmp	r2, #9
    f48c:	d9f5      	bls.n	f47a <_svfprintf_r+0x66e>
    f48e:	9108      	str	r1, [sp, #32]
    f490:	e517      	b.n	eec2 <_svfprintf_r+0xb6>
    f492:	f898 3000 	ldrb.w	r3, [r8]
    f496:	f04b 0b01 	orr.w	fp, fp, #1
    f49a:	e510      	b.n	eebe <_svfprintf_r+0xb2>
    f49c:	f89d 3087 	ldrb.w	r3, [sp, #135]	; 0x87
    f4a0:	2b00      	cmp	r3, #0
    f4a2:	f47f ad91 	bne.w	efc8 <_svfprintf_r+0x1bc>
    f4a6:	f898 3000 	ldrb.w	r3, [r8]
    f4aa:	f88d 6087 	strb.w	r6, [sp, #135]	; 0x87
    f4ae:	e506      	b.n	eebe <_svfprintf_r+0xb2>
    f4b0:	465d      	mov	r5, fp
    f4b2:	2b01      	cmp	r3, #1
    f4b4:	f000 81ad 	beq.w	f812 <_svfprintf_r+0xa06>
    f4b8:	2b02      	cmp	r3, #2
    f4ba:	ac58      	add	r4, sp, #352	; 0x160
    f4bc:	d11f      	bne.n	f4fe <_svfprintf_r+0x6f2>
    f4be:	9818      	ldr	r0, [sp, #96]	; 0x60
    f4c0:	f002 030f 	and.w	r3, r2, #15
    f4c4:	0912      	lsrs	r2, r2, #4
    f4c6:	5cc3      	ldrb	r3, [r0, r3]
    f4c8:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f4cc:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
    f4d0:	0909      	lsrs	r1, r1, #4
    f4d2:	ea52 0301 	orrs.w	r3, r2, r1
    f4d6:	d1f3      	bne.n	f4c0 <_svfprintf_r+0x6b4>
    f4d8:	ab58      	add	r3, sp, #352	; 0x160
    f4da:	1b1b      	subs	r3, r3, r4
    f4dc:	46ab      	mov	fp, r5
    f4de:	930a      	str	r3, [sp, #40]	; 0x28
    f4e0:	990a      	ldr	r1, [sp, #40]	; 0x28
    f4e2:	9808      	ldr	r0, [sp, #32]
    f4e4:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f4e8:	4281      	cmp	r1, r0
    f4ea:	f04f 0300 	mov.w	r3, #0
    f4ee:	bfb8      	it	lt
    f4f0:	4601      	movlt	r1, r0
    f4f2:	930d      	str	r3, [sp, #52]	; 0x34
    f4f4:	9107      	str	r1, [sp, #28]
    f4f6:	9312      	str	r3, [sp, #72]	; 0x48
    f4f8:	9316      	str	r3, [sp, #88]	; 0x58
    f4fa:	9311      	str	r3, [sp, #68]	; 0x44
    f4fc:	e66a      	b.n	f1d4 <_svfprintf_r+0x3c8>
    f4fe:	f002 0307 	and.w	r3, r2, #7
    f502:	08d2      	lsrs	r2, r2, #3
    f504:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
    f508:	08c9      	lsrs	r1, r1, #3
    f50a:	3330      	adds	r3, #48	; 0x30
    f50c:	ea52 0601 	orrs.w	r6, r2, r1
    f510:	4620      	mov	r0, r4
    f512:	f804 3d01 	strb.w	r3, [r4, #-1]!
    f516:	d1f2      	bne.n	f4fe <_svfprintf_r+0x6f2>
    f518:	07e9      	lsls	r1, r5, #31
    f51a:	d5dd      	bpl.n	f4d8 <_svfprintf_r+0x6cc>
    f51c:	2b30      	cmp	r3, #48	; 0x30
    f51e:	d0db      	beq.n	f4d8 <_svfprintf_r+0x6cc>
    f520:	2330      	movs	r3, #48	; 0x30
    f522:	3802      	subs	r0, #2
    f524:	f804 3c01 	strb.w	r3, [r4, #-1]
    f528:	ab58      	add	r3, sp, #352	; 0x160
    f52a:	1a1b      	subs	r3, r3, r0
    f52c:	46ab      	mov	fp, r5
    f52e:	930a      	str	r3, [sp, #40]	; 0x28
    f530:	4604      	mov	r4, r0
    f532:	e7d5      	b.n	f4e0 <_svfprintf_r+0x6d4>
    f534:	9b10      	ldr	r3, [sp, #64]	; 0x40
    f536:	2b65      	cmp	r3, #101	; 0x65
    f538:	f340 80dc 	ble.w	f6f4 <_svfprintf_r+0x8e8>
    f53c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f540:	2200      	movs	r2, #0
    f542:	2300      	movs	r3, #0
    f544:	f7fd fba2 	bl	cc8c <__aeabi_dcmpeq>
    f548:	2800      	cmp	r0, #0
    f54a:	f000 81c8 	beq.w	f8de <_svfprintf_r+0xad2>
    f54e:	2301      	movs	r3, #1
    f550:	f8c9 3004 	str.w	r3, [r9, #4]
    f554:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f556:	4abd      	ldr	r2, [pc, #756]	; (f84c <_svfprintf_r+0xa40>)
    f558:	f8c9 2000 	str.w	r2, [r9]
    f55c:	3301      	adds	r3, #1
    f55e:	3601      	adds	r6, #1
    f560:	2b07      	cmp	r3, #7
    f562:	962e      	str	r6, [sp, #184]	; 0xb8
    f564:	932d      	str	r3, [sp, #180]	; 0xb4
    f566:	f300 8539 	bgt.w	ffdc <_svfprintf_r+0x11d0>
    f56a:	f109 0908 	add.w	r9, r9, #8
    f56e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f570:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f572:	4293      	cmp	r3, r2
    f574:	f280 82c2 	bge.w	fafc <_svfprintf_r+0xcf0>
    f578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f57a:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f57c:	441e      	add	r6, r3
    f57e:	e9c9 2300 	strd	r2, r3, [r9]
    f582:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f584:	962e      	str	r6, [sp, #184]	; 0xb8
    f586:	3301      	adds	r3, #1
    f588:	2b07      	cmp	r3, #7
    f58a:	932d      	str	r3, [sp, #180]	; 0xb4
    f58c:	f300 838d 	bgt.w	fcaa <_svfprintf_r+0xe9e>
    f590:	f109 0908 	add.w	r9, r9, #8
    f594:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f596:	1e5c      	subs	r4, r3, #1
    f598:	2c00      	cmp	r4, #0
    f59a:	f77f adbc 	ble.w	f116 <_svfprintf_r+0x30a>
    f59e:	2c10      	cmp	r4, #16
    f5a0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f5a2:	4dab      	ldr	r5, [pc, #684]	; (f850 <_svfprintf_r+0xa44>)
    f5a4:	f340 8555 	ble.w	10052 <_svfprintf_r+0x1246>
    f5a8:	4632      	mov	r2, r6
    f5aa:	2710      	movs	r7, #16
    f5ac:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f5ae:	e005      	b.n	f5bc <_svfprintf_r+0x7b0>
    f5b0:	f109 0908 	add.w	r9, r9, #8
    f5b4:	3c10      	subs	r4, #16
    f5b6:	2c10      	cmp	r4, #16
    f5b8:	f340 854a 	ble.w	10050 <_svfprintf_r+0x1244>
    f5bc:	3301      	adds	r3, #1
    f5be:	3210      	adds	r2, #16
    f5c0:	2b07      	cmp	r3, #7
    f5c2:	e9c9 5700 	strd	r5, r7, [r9]
    f5c6:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f5ca:	ddf1      	ble.n	f5b0 <_svfprintf_r+0x7a4>
    f5cc:	aa2c      	add	r2, sp, #176	; 0xb0
    f5ce:	4631      	mov	r1, r6
    f5d0:	4650      	mov	r0, sl
    f5d2:	f002 fc85 	bl	11ee0 <__ssprint_r>
    f5d6:	2800      	cmp	r0, #0
    f5d8:	f040 8083 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    f5dc:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f5e0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f5e4:	e7e6      	b.n	f5b4 <_svfprintf_r+0x7a8>
    f5e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    f5e8:	9a07      	ldr	r2, [sp, #28]
    f5ea:	1a9f      	subs	r7, r3, r2
    f5ec:	2f00      	cmp	r7, #0
    f5ee:	f77f ad79 	ble.w	f0e4 <_svfprintf_r+0x2d8>
    f5f2:	2f10      	cmp	r7, #16
    f5f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f5f6:	4d96      	ldr	r5, [pc, #600]	; (f850 <_svfprintf_r+0xa44>)
    f5f8:	dd23      	ble.n	f642 <_svfprintf_r+0x836>
    f5fa:	4632      	mov	r2, r6
    f5fc:	4626      	mov	r6, r4
    f5fe:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f600:	e004      	b.n	f60c <_svfprintf_r+0x800>
    f602:	3f10      	subs	r7, #16
    f604:	2f10      	cmp	r7, #16
    f606:	f109 0908 	add.w	r9, r9, #8
    f60a:	dd18      	ble.n	f63e <_svfprintf_r+0x832>
    f60c:	3301      	adds	r3, #1
    f60e:	3210      	adds	r2, #16
    f610:	2110      	movs	r1, #16
    f612:	2b07      	cmp	r3, #7
    f614:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f618:	f8c9 5000 	str.w	r5, [r9]
    f61c:	f8c9 1004 	str.w	r1, [r9, #4]
    f620:	ddef      	ble.n	f602 <_svfprintf_r+0x7f6>
    f622:	aa2c      	add	r2, sp, #176	; 0xb0
    f624:	4621      	mov	r1, r4
    f626:	4650      	mov	r0, sl
    f628:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f62c:	f002 fc58 	bl	11ee0 <__ssprint_r>
    f630:	2800      	cmp	r0, #0
    f632:	d156      	bne.n	f6e2 <_svfprintf_r+0x8d6>
    f634:	3f10      	subs	r7, #16
    f636:	2f10      	cmp	r7, #16
    f638:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f63c:	dce6      	bgt.n	f60c <_svfprintf_r+0x800>
    f63e:	4634      	mov	r4, r6
    f640:	4616      	mov	r6, r2
    f642:	3301      	adds	r3, #1
    f644:	443e      	add	r6, r7
    f646:	2b07      	cmp	r3, #7
    f648:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f64c:	f8c9 5000 	str.w	r5, [r9]
    f650:	f8c9 7004 	str.w	r7, [r9, #4]
    f654:	f300 8516 	bgt.w	10084 <_svfprintf_r+0x1278>
    f658:	9b08      	ldr	r3, [sp, #32]
    f65a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    f65c:	1a9f      	subs	r7, r3, r2
    f65e:	2f00      	cmp	r7, #0
    f660:	f109 0908 	add.w	r9, r9, #8
    f664:	f77f ad44 	ble.w	f0f0 <_svfprintf_r+0x2e4>
    f668:	2f10      	cmp	r7, #16
    f66a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f66c:	4d78      	ldr	r5, [pc, #480]	; (f850 <_svfprintf_r+0xa44>)
    f66e:	dd22      	ble.n	f6b6 <_svfprintf_r+0x8aa>
    f670:	4632      	mov	r2, r6
    f672:	4626      	mov	r6, r4
    f674:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f676:	e004      	b.n	f682 <_svfprintf_r+0x876>
    f678:	3f10      	subs	r7, #16
    f67a:	2f10      	cmp	r7, #16
    f67c:	f109 0908 	add.w	r9, r9, #8
    f680:	dd17      	ble.n	f6b2 <_svfprintf_r+0x8a6>
    f682:	3301      	adds	r3, #1
    f684:	3210      	adds	r2, #16
    f686:	2110      	movs	r1, #16
    f688:	2b07      	cmp	r3, #7
    f68a:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f68e:	f8c9 5000 	str.w	r5, [r9]
    f692:	f8c9 1004 	str.w	r1, [r9, #4]
    f696:	ddef      	ble.n	f678 <_svfprintf_r+0x86c>
    f698:	aa2c      	add	r2, sp, #176	; 0xb0
    f69a:	4621      	mov	r1, r4
    f69c:	4650      	mov	r0, sl
    f69e:	f002 fc1f 	bl	11ee0 <__ssprint_r>
    f6a2:	b9f0      	cbnz	r0, f6e2 <_svfprintf_r+0x8d6>
    f6a4:	3f10      	subs	r7, #16
    f6a6:	2f10      	cmp	r7, #16
    f6a8:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f6ac:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f6b0:	dce7      	bgt.n	f682 <_svfprintf_r+0x876>
    f6b2:	4634      	mov	r4, r6
    f6b4:	4616      	mov	r6, r2
    f6b6:	3301      	adds	r3, #1
    f6b8:	443e      	add	r6, r7
    f6ba:	2b07      	cmp	r3, #7
    f6bc:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f6c0:	f8c9 5000 	str.w	r5, [r9]
    f6c4:	f8c9 7004 	str.w	r7, [r9, #4]
    f6c8:	f300 81cd 	bgt.w	fa66 <_svfprintf_r+0xc5a>
    f6cc:	f109 0908 	add.w	r9, r9, #8
    f6d0:	e50e      	b.n	f0f0 <_svfprintf_r+0x2e4>
    f6d2:	990c      	ldr	r1, [sp, #48]	; 0x30
    f6d4:	aa2c      	add	r2, sp, #176	; 0xb0
    f6d6:	4650      	mov	r0, sl
    f6d8:	f002 fc02 	bl	11ee0 <__ssprint_r>
    f6dc:	2800      	cmp	r0, #0
    f6de:	f43f ad2e 	beq.w	f13e <_svfprintf_r+0x332>
    f6e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f6e4:	2b00      	cmp	r3, #0
    f6e6:	f43f ac99 	beq.w	f01c <_svfprintf_r+0x210>
    f6ea:	990d      	ldr	r1, [sp, #52]	; 0x34
    f6ec:	4650      	mov	r0, sl
    f6ee:	f7fe feb5 	bl	e45c <_free_r>
    f6f2:	e493      	b.n	f01c <_svfprintf_r+0x210>
    f6f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f6f6:	2b01      	cmp	r3, #1
    f6f8:	f340 816e 	ble.w	f9d8 <_svfprintf_r+0xbcc>
    f6fc:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    f6fe:	f8c9 4000 	str.w	r4, [r9]
    f702:	2301      	movs	r3, #1
    f704:	441f      	add	r7, r3
    f706:	3601      	adds	r6, #1
    f708:	2f07      	cmp	r7, #7
    f70a:	f8c9 3004 	str.w	r3, [r9, #4]
    f70e:	962e      	str	r6, [sp, #184]	; 0xb8
    f710:	972d      	str	r7, [sp, #180]	; 0xb4
    f712:	f300 81d9 	bgt.w	fac8 <_svfprintf_r+0xcbc>
    f716:	f109 0908 	add.w	r9, r9, #8
    f71a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    f71c:	9a19      	ldr	r2, [sp, #100]	; 0x64
    f71e:	3701      	adds	r7, #1
    f720:	441e      	add	r6, r3
    f722:	2f07      	cmp	r7, #7
    f724:	e9c9 2300 	strd	r2, r3, [r9]
    f728:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    f72c:	f300 81d9 	bgt.w	fae2 <_svfprintf_r+0xcd6>
    f730:	f109 0908 	add.w	r9, r9, #8
    f734:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    f738:	2200      	movs	r2, #0
    f73a:	2300      	movs	r3, #0
    f73c:	f7fd faa6 	bl	cc8c <__aeabi_dcmpeq>
    f740:	2800      	cmp	r0, #0
    f742:	f040 8167 	bne.w	fa14 <_svfprintf_r+0xc08>
    f746:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f748:	3701      	adds	r7, #1
    f74a:	3b01      	subs	r3, #1
    f74c:	3401      	adds	r4, #1
    f74e:	441e      	add	r6, r3
    f750:	2f07      	cmp	r7, #7
    f752:	f8c9 4000 	str.w	r4, [r9]
    f756:	972d      	str	r7, [sp, #180]	; 0xb4
    f758:	f8c9 3004 	str.w	r3, [r9, #4]
    f75c:	962e      	str	r6, [sp, #184]	; 0xb8
    f75e:	f300 814c 	bgt.w	f9fa <_svfprintf_r+0xbee>
    f762:	f109 0908 	add.w	r9, r9, #8
    f766:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    f768:	f8c9 3004 	str.w	r3, [r9, #4]
    f76c:	3701      	adds	r7, #1
    f76e:	441e      	add	r6, r3
    f770:	2f07      	cmp	r7, #7
    f772:	ab26      	add	r3, sp, #152	; 0x98
    f774:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
    f778:	f8c9 3000 	str.w	r3, [r9]
    f77c:	f77f acc9 	ble.w	f112 <_svfprintf_r+0x306>
    f780:	990c      	ldr	r1, [sp, #48]	; 0x30
    f782:	aa2c      	add	r2, sp, #176	; 0xb0
    f784:	4650      	mov	r0, sl
    f786:	f002 fbab 	bl	11ee0 <__ssprint_r>
    f78a:	2800      	cmp	r0, #0
    f78c:	d1a9      	bne.n	f6e2 <_svfprintf_r+0x8d6>
    f78e:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f790:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f794:	e4bf      	b.n	f116 <_svfprintf_r+0x30a>
    f796:	2f10      	cmp	r7, #16
    f798:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    f79c:	4d2d      	ldr	r5, [pc, #180]	; (f854 <_svfprintf_r+0xa48>)
    f79e:	dd27      	ble.n	f7f0 <_svfprintf_r+0x9e4>
    f7a0:	e9cd 381e 	strd	r3, r8, [sp, #120]	; 0x78
    f7a4:	2610      	movs	r6, #16
    f7a6:	46d0      	mov	r8, sl
    f7a8:	46a2      	mov	sl, r4
    f7aa:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    f7ac:	e004      	b.n	f7b8 <_svfprintf_r+0x9ac>
    f7ae:	3f10      	subs	r7, #16
    f7b0:	2f10      	cmp	r7, #16
    f7b2:	f109 0908 	add.w	r9, r9, #8
    f7b6:	dd16      	ble.n	f7e6 <_svfprintf_r+0x9da>
    f7b8:	3201      	adds	r2, #1
    f7ba:	3110      	adds	r1, #16
    f7bc:	2a07      	cmp	r2, #7
    f7be:	e9c9 5600 	strd	r5, r6, [r9]
    f7c2:	e9cd 212d 	strd	r2, r1, [sp, #180]	; 0xb4
    f7c6:	ddf2      	ble.n	f7ae <_svfprintf_r+0x9a2>
    f7c8:	aa2c      	add	r2, sp, #176	; 0xb0
    f7ca:	4621      	mov	r1, r4
    f7cc:	4640      	mov	r0, r8
    f7ce:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f7d2:	f002 fb85 	bl	11ee0 <__ssprint_r>
    f7d6:	2800      	cmp	r0, #0
    f7d8:	f040 83f2 	bne.w	ffc0 <_svfprintf_r+0x11b4>
    f7dc:	3f10      	subs	r7, #16
    f7de:	2f10      	cmp	r7, #16
    f7e0:	e9dd 212d 	ldrd	r2, r1, [sp, #180]	; 0xb4
    f7e4:	dce8      	bgt.n	f7b8 <_svfprintf_r+0x9ac>
    f7e6:	4654      	mov	r4, sl
    f7e8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f7ea:	46c2      	mov	sl, r8
    f7ec:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
    f7f0:	f8c9 5000 	str.w	r5, [r9]
    f7f4:	3201      	adds	r2, #1
    f7f6:	187e      	adds	r6, r7, r1
    f7f8:	2a07      	cmp	r2, #7
    f7fa:	e9cd 262d 	strd	r2, r6, [sp, #180]	; 0xb4
    f7fe:	f8c9 7004 	str.w	r7, [r9, #4]
    f802:	f300 83cc 	bgt.w	ff9e <_svfprintf_r+0x1192>
    f806:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    f80a:	f109 0908 	add.w	r9, r9, #8
    f80e:	e441      	b.n	f094 <_svfprintf_r+0x288>
    f810:	465d      	mov	r5, fp
    f812:	2a0a      	cmp	r2, #10
    f814:	f171 0300 	sbcs.w	r3, r1, #0
    f818:	f080 8329 	bcs.w	fe6e <_svfprintf_r+0x1062>
    f81c:	3230      	adds	r2, #48	; 0x30
    f81e:	2301      	movs	r3, #1
    f820:	f88d 215f 	strb.w	r2, [sp, #351]	; 0x15f
    f824:	46ab      	mov	fp, r5
    f826:	930a      	str	r3, [sp, #40]	; 0x28
    f828:	f20d 145f 	addw	r4, sp, #351	; 0x15f
    f82c:	e658      	b.n	f4e0 <_svfprintf_r+0x6d4>
    f82e:	990c      	ldr	r1, [sp, #48]	; 0x30
    f830:	931e      	str	r3, [sp, #120]	; 0x78
    f832:	aa2c      	add	r2, sp, #176	; 0xb0
    f834:	4650      	mov	r0, sl
    f836:	f002 fb53 	bl	11ee0 <__ssprint_r>
    f83a:	2800      	cmp	r0, #0
    f83c:	f47f af51 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    f840:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f842:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    f844:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f848:	e436      	b.n	f0b8 <_svfprintf_r+0x2ac>
    f84a:	bf00      	nop
    f84c:	000142ec 	.word	0x000142ec
    f850:	0001597c 	.word	0x0001597c
    f854:	0001596c 	.word	0x0001596c
    f858:	990c      	ldr	r1, [sp, #48]	; 0x30
    f85a:	aa2c      	add	r2, sp, #176	; 0xb0
    f85c:	4650      	mov	r0, sl
    f85e:	f002 fb3f 	bl	11ee0 <__ssprint_r>
    f862:	2800      	cmp	r0, #0
    f864:	f47f af3d 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    f868:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f86a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f86e:	e435      	b.n	f0dc <_svfprintf_r+0x2d0>
    f870:	2c10      	cmp	r4, #16
    f872:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f874:	4db8      	ldr	r5, [pc, #736]	; (fb58 <_svfprintf_r+0xd4c>)
    f876:	dd1f      	ble.n	f8b8 <_svfprintf_r+0xaac>
    f878:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
    f87c:	2710      	movs	r7, #16
    f87e:	e004      	b.n	f88a <_svfprintf_r+0xa7e>
    f880:	3c10      	subs	r4, #16
    f882:	2c10      	cmp	r4, #16
    f884:	f109 0908 	add.w	r9, r9, #8
    f888:	dd16      	ble.n	f8b8 <_svfprintf_r+0xaac>
    f88a:	3301      	adds	r3, #1
    f88c:	3610      	adds	r6, #16
    f88e:	2b07      	cmp	r3, #7
    f890:	e9c9 5700 	strd	r5, r7, [r9]
    f894:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f898:	ddf2      	ble.n	f880 <_svfprintf_r+0xa74>
    f89a:	aa2c      	add	r2, sp, #176	; 0xb0
    f89c:	4659      	mov	r1, fp
    f89e:	4650      	mov	r0, sl
    f8a0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f8a4:	f002 fb1c 	bl	11ee0 <__ssprint_r>
    f8a8:	2800      	cmp	r0, #0
    f8aa:	f47f af1a 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    f8ae:	3c10      	subs	r4, #16
    f8b0:	2c10      	cmp	r4, #16
    f8b2:	e9dd 362d 	ldrd	r3, r6, [sp, #180]	; 0xb4
    f8b6:	dce8      	bgt.n	f88a <_svfprintf_r+0xa7e>
    f8b8:	3301      	adds	r3, #1
    f8ba:	4426      	add	r6, r4
    f8bc:	2b07      	cmp	r3, #7
    f8be:	e9c9 5400 	strd	r5, r4, [r9]
    f8c2:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    f8c6:	f77f ac2f 	ble.w	f128 <_svfprintf_r+0x31c>
    f8ca:	990c      	ldr	r1, [sp, #48]	; 0x30
    f8cc:	aa2c      	add	r2, sp, #176	; 0xb0
    f8ce:	4650      	mov	r0, sl
    f8d0:	f002 fb06 	bl	11ee0 <__ssprint_r>
    f8d4:	2800      	cmp	r0, #0
    f8d6:	f47f af04 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    f8da:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    f8dc:	e424      	b.n	f128 <_svfprintf_r+0x31c>
    f8de:	9923      	ldr	r1, [sp, #140]	; 0x8c
    f8e0:	2900      	cmp	r1, #0
    f8e2:	f340 8327 	ble.w	ff34 <_svfprintf_r+0x1128>
    f8e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
    f8e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    f8ea:	429d      	cmp	r5, r3
    f8ec:	bfa8      	it	ge
    f8ee:	461d      	movge	r5, r3
    f8f0:	2d00      	cmp	r5, #0
    f8f2:	dd0b      	ble.n	f90c <_svfprintf_r+0xb00>
    f8f4:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f8f6:	3301      	adds	r3, #1
    f8f8:	442e      	add	r6, r5
    f8fa:	2b07      	cmp	r3, #7
    f8fc:	e9c9 4500 	strd	r4, r5, [r9]
    f900:	962e      	str	r6, [sp, #184]	; 0xb8
    f902:	932d      	str	r3, [sp, #180]	; 0xb4
    f904:	f300 86dd 	bgt.w	106c2 <_svfprintf_r+0x18b6>
    f908:	f109 0908 	add.w	r9, r9, #8
    f90c:	9f11      	ldr	r7, [sp, #68]	; 0x44
    f90e:	2d00      	cmp	r5, #0
    f910:	bfa8      	it	ge
    f912:	1b7f      	subge	r7, r7, r5
    f914:	2f00      	cmp	r7, #0
    f916:	f300 81f4 	bgt.w	fd02 <_svfprintf_r+0xef6>
    f91a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    f91c:	f41b 6f80 	tst.w	fp, #1024	; 0x400
    f920:	4423      	add	r3, r4
    f922:	930a      	str	r3, [sp, #40]	; 0x28
    f924:	f040 8214 	bne.w	fd50 <_svfprintf_r+0xf44>
    f928:	9b23      	ldr	r3, [sp, #140]	; 0x8c
    f92a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f92c:	4293      	cmp	r3, r2
    f92e:	db03      	blt.n	f938 <_svfprintf_r+0xb2c>
    f930:	f01b 0f01 	tst.w	fp, #1
    f934:	f000 84a5 	beq.w	10282 <_svfprintf_r+0x1476>
    f938:	9a17      	ldr	r2, [sp, #92]	; 0x5c
    f93a:	9919      	ldr	r1, [sp, #100]	; 0x64
    f93c:	4416      	add	r6, r2
    f93e:	e9c9 1200 	strd	r1, r2, [r9]
    f942:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
    f944:	962e      	str	r6, [sp, #184]	; 0xb8
    f946:	3201      	adds	r2, #1
    f948:	2a07      	cmp	r2, #7
    f94a:	922d      	str	r2, [sp, #180]	; 0xb4
    f94c:	f300 86c6 	bgt.w	106dc <_svfprintf_r+0x18d0>
    f950:	f109 0908 	add.w	r9, r9, #8
    f954:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    f956:	18a5      	adds	r5, r4, r2
    f958:	1ad4      	subs	r4, r2, r3
    f95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    f95c:	1aed      	subs	r5, r5, r3
    f95e:	42a5      	cmp	r5, r4
    f960:	bfa8      	it	ge
    f962:	4625      	movge	r5, r4
    f964:	2d00      	cmp	r5, #0
    f966:	dd0d      	ble.n	f984 <_svfprintf_r+0xb78>
    f968:	f8c9 3000 	str.w	r3, [r9]
    f96c:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f96e:	f8c9 5004 	str.w	r5, [r9, #4]
    f972:	3301      	adds	r3, #1
    f974:	442e      	add	r6, r5
    f976:	2b07      	cmp	r3, #7
    f978:	962e      	str	r6, [sp, #184]	; 0xb8
    f97a:	932d      	str	r3, [sp, #180]	; 0xb4
    f97c:	f300 86be 	bgt.w	106fc <_svfprintf_r+0x18f0>
    f980:	f109 0908 	add.w	r9, r9, #8
    f984:	2d00      	cmp	r5, #0
    f986:	bfa8      	it	ge
    f988:	1b64      	subge	r4, r4, r5
    f98a:	2c00      	cmp	r4, #0
    f98c:	f77f abc3 	ble.w	f116 <_svfprintf_r+0x30a>
    f990:	2c10      	cmp	r4, #16
    f992:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    f994:	4d71      	ldr	r5, [pc, #452]	; (fb5c <_svfprintf_r+0xd50>)
    f996:	f340 835c 	ble.w	10052 <_svfprintf_r+0x1246>
    f99a:	4632      	mov	r2, r6
    f99c:	2710      	movs	r7, #16
    f99e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    f9a0:	e005      	b.n	f9ae <_svfprintf_r+0xba2>
    f9a2:	f109 0908 	add.w	r9, r9, #8
    f9a6:	3c10      	subs	r4, #16
    f9a8:	2c10      	cmp	r4, #16
    f9aa:	f340 8351 	ble.w	10050 <_svfprintf_r+0x1244>
    f9ae:	3301      	adds	r3, #1
    f9b0:	3210      	adds	r2, #16
    f9b2:	2b07      	cmp	r3, #7
    f9b4:	e9c9 5700 	strd	r5, r7, [r9]
    f9b8:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    f9bc:	ddf1      	ble.n	f9a2 <_svfprintf_r+0xb96>
    f9be:	aa2c      	add	r2, sp, #176	; 0xb0
    f9c0:	4631      	mov	r1, r6
    f9c2:	4650      	mov	r0, sl
    f9c4:	f002 fa8c 	bl	11ee0 <__ssprint_r>
    f9c8:	2800      	cmp	r0, #0
    f9ca:	f47f ae8a 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    f9ce:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    f9d2:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    f9d6:	e7e6      	b.n	f9a6 <_svfprintf_r+0xb9a>
    f9d8:	f01b 0f01 	tst.w	fp, #1
    f9dc:	f47f ae8e 	bne.w	f6fc <_svfprintf_r+0x8f0>
    f9e0:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
    f9e2:	f8c9 4000 	str.w	r4, [r9]
    f9e6:	2301      	movs	r3, #1
    f9e8:	441f      	add	r7, r3
    f9ea:	3601      	adds	r6, #1
    f9ec:	2f07      	cmp	r7, #7
    f9ee:	f8c9 3004 	str.w	r3, [r9, #4]
    f9f2:	962e      	str	r6, [sp, #184]	; 0xb8
    f9f4:	972d      	str	r7, [sp, #180]	; 0xb4
    f9f6:	f77f aeb4 	ble.w	f762 <_svfprintf_r+0x956>
    f9fa:	990c      	ldr	r1, [sp, #48]	; 0x30
    f9fc:	aa2c      	add	r2, sp, #176	; 0xb0
    f9fe:	4650      	mov	r0, sl
    fa00:	f002 fa6e 	bl	11ee0 <__ssprint_r>
    fa04:	2800      	cmp	r0, #0
    fa06:	f47f ae6c 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    fa0a:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    fa0e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fa12:	e6a8      	b.n	f766 <_svfprintf_r+0x95a>
    fa14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fa16:	1e5c      	subs	r4, r3, #1
    fa18:	2c00      	cmp	r4, #0
    fa1a:	f77f aea4 	ble.w	f766 <_svfprintf_r+0x95a>
    fa1e:	2c10      	cmp	r4, #16
    fa20:	4d4e      	ldr	r5, [pc, #312]	; (fb5c <_svfprintf_r+0xd50>)
    fa22:	f340 834c 	ble.w	100be <_svfprintf_r+0x12b2>
    fa26:	4632      	mov	r2, r6
    fa28:	2310      	movs	r3, #16
    fa2a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    fa2c:	e005      	b.n	fa3a <_svfprintf_r+0xc2e>
    fa2e:	f109 0908 	add.w	r9, r9, #8
    fa32:	3c10      	subs	r4, #16
    fa34:	2c10      	cmp	r4, #16
    fa36:	f340 8341 	ble.w	100bc <_svfprintf_r+0x12b0>
    fa3a:	3701      	adds	r7, #1
    fa3c:	3210      	adds	r2, #16
    fa3e:	2f07      	cmp	r7, #7
    fa40:	e9c9 5300 	strd	r5, r3, [r9]
    fa44:	e9cd 722d 	strd	r7, r2, [sp, #180]	; 0xb4
    fa48:	ddf1      	ble.n	fa2e <_svfprintf_r+0xc22>
    fa4a:	aa2c      	add	r2, sp, #176	; 0xb0
    fa4c:	4631      	mov	r1, r6
    fa4e:	4650      	mov	r0, sl
    fa50:	f002 fa46 	bl	11ee0 <__ssprint_r>
    fa54:	2800      	cmp	r0, #0
    fa56:	f47f ae44 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    fa5a:	e9dd 722d 	ldrd	r7, r2, [sp, #180]	; 0xb4
    fa5e:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fa62:	2310      	movs	r3, #16
    fa64:	e7e5      	b.n	fa32 <_svfprintf_r+0xc26>
    fa66:	990c      	ldr	r1, [sp, #48]	; 0x30
    fa68:	aa2c      	add	r2, sp, #176	; 0xb0
    fa6a:	4650      	mov	r0, sl
    fa6c:	f002 fa38 	bl	11ee0 <__ssprint_r>
    fa70:	2800      	cmp	r0, #0
    fa72:	f47f ae36 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    fa76:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fa78:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fa7c:	f7ff bb38 	b.w	f0f0 <_svfprintf_r+0x2e4>
    fa80:	f015 0310 	ands.w	r3, r5, #16
    fa84:	d160      	bne.n	fb48 <_svfprintf_r+0xd3c>
    fa86:	f015 0240 	ands.w	r2, r5, #64	; 0x40
    fa8a:	f000 8373 	beq.w	10174 <_svfprintf_r+0x1368>
    fa8e:	980e      	ldr	r0, [sp, #56]	; 0x38
    fa90:	f850 2b04 	ldr.w	r2, [r0], #4
    fa94:	900e      	str	r0, [sp, #56]	; 0x38
    fa96:	4619      	mov	r1, r3
    fa98:	b292      	uxth	r2, r2
    fa9a:	2301      	movs	r3, #1
    fa9c:	e45a      	b.n	f354 <_svfprintf_r+0x548>
    fa9e:	f01b 0310 	ands.w	r3, fp, #16
    faa2:	d168      	bne.n	fb76 <_svfprintf_r+0xd6a>
    faa4:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    faa8:	f000 8356 	beq.w	10158 <_svfprintf_r+0x134c>
    faac:	980e      	ldr	r0, [sp, #56]	; 0x38
    faae:	f850 2b04 	ldr.w	r2, [r0], #4
    fab2:	900e      	str	r0, [sp, #56]	; 0x38
    fab4:	4619      	mov	r1, r3
    fab6:	b292      	uxth	r2, r2
    fab8:	e4af      	b.n	f41a <_svfprintf_r+0x60e>
    faba:	4252      	negs	r2, r2
    fabc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    fac0:	465d      	mov	r5, fp
    fac2:	202d      	movs	r0, #45	; 0x2d
    fac4:	2301      	movs	r3, #1
    fac6:	e446      	b.n	f356 <_svfprintf_r+0x54a>
    fac8:	990c      	ldr	r1, [sp, #48]	; 0x30
    faca:	aa2c      	add	r2, sp, #176	; 0xb0
    facc:	4650      	mov	r0, sl
    face:	f002 fa07 	bl	11ee0 <__ssprint_r>
    fad2:	2800      	cmp	r0, #0
    fad4:	f47f ae05 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    fad8:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    fadc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fae0:	e61b      	b.n	f71a <_svfprintf_r+0x90e>
    fae2:	990c      	ldr	r1, [sp, #48]	; 0x30
    fae4:	aa2c      	add	r2, sp, #176	; 0xb0
    fae6:	4650      	mov	r0, sl
    fae8:	f002 f9fa 	bl	11ee0 <__ssprint_r>
    faec:	2800      	cmp	r0, #0
    faee:	f47f adf8 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    faf2:	e9dd 762d 	ldrd	r7, r6, [sp, #180]	; 0xb4
    faf6:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fafa:	e61b      	b.n	f734 <_svfprintf_r+0x928>
    fafc:	f01b 0f01 	tst.w	fp, #1
    fb00:	f43f ab09 	beq.w	f116 <_svfprintf_r+0x30a>
    fb04:	e538      	b.n	f578 <_svfprintf_r+0x76c>
    fb06:	930e      	str	r3, [sp, #56]	; 0x38
    fb08:	f898 3000 	ldrb.w	r3, [r8]
    fb0c:	f7ff b9d7 	b.w	eebe <_svfprintf_r+0xb2>
    fb10:	ac58      	add	r4, sp, #352	; 0x160
    fb12:	e4e5      	b.n	f4e0 <_svfprintf_r+0x6d4>
    fb14:	f41b 7f00 	tst.w	fp, #512	; 0x200
    fb18:	f040 83bd 	bne.w	10296 <_svfprintf_r+0x148a>
    fb1c:	f853 2b04 	ldr.w	r2, [r3], #4
    fb20:	930e      	str	r3, [sp, #56]	; 0x38
    fb22:	17d1      	asrs	r1, r2, #31
    fb24:	460b      	mov	r3, r1
    fb26:	f7ff bbc4 	b.w	f2b2 <_svfprintf_r+0x4a6>
    fb2a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    fb2c:	2b00      	cmp	r3, #0
    fb2e:	f43f aa4b 	beq.w	efc8 <_svfprintf_r+0x1bc>
    fb32:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    fb34:	781b      	ldrb	r3, [r3, #0]
    fb36:	2b00      	cmp	r3, #0
    fb38:	f43f aa46 	beq.w	efc8 <_svfprintf_r+0x1bc>
    fb3c:	f898 3000 	ldrb.w	r3, [r8]
    fb40:	f44b 6b80 	orr.w	fp, fp, #1024	; 0x400
    fb44:	f7ff b9bb 	b.w	eebe <_svfprintf_r+0xb2>
    fb48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fb4a:	f853 2b04 	ldr.w	r2, [r3], #4
    fb4e:	930e      	str	r3, [sp, #56]	; 0x38
    fb50:	2301      	movs	r3, #1
    fb52:	f7ff bbff 	b.w	f354 <_svfprintf_r+0x548>
    fb56:	bf00      	nop
    fb58:	0001596c 	.word	0x0001596c
    fb5c:	0001597c 	.word	0x0001597c
    fb60:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fb62:	9809      	ldr	r0, [sp, #36]	; 0x24
    fb64:	f853 1b04 	ldr.w	r1, [r3], #4
    fb68:	930e      	str	r3, [sp, #56]	; 0x38
    fb6a:	17c2      	asrs	r2, r0, #31
    fb6c:	e9c1 0200 	strd	r0, r2, [r1]
    fb70:	4644      	mov	r4, r8
    fb72:	f7ff b979 	b.w	ee68 <_svfprintf_r+0x5c>
    fb76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fb78:	f853 2b04 	ldr.w	r2, [r3], #4
    fb7c:	930e      	str	r3, [sp, #56]	; 0x38
    fb7e:	e44c      	b.n	f41a <_svfprintf_r+0x60e>
    fb80:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    fb84:	4602      	mov	r2, r0
    fb86:	460b      	mov	r3, r1
    fb88:	f7fd f8b2 	bl	ccf0 <__aeabi_dcmpun>
    fb8c:	2800      	cmp	r0, #0
    fb8e:	f040 8675 	bne.w	1087c <_svfprintf_r+0x1a70>
    fb92:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fb94:	2b61      	cmp	r3, #97	; 0x61
    fb96:	f000 855b 	beq.w	10650 <_svfprintf_r+0x1844>
    fb9a:	2b41      	cmp	r3, #65	; 0x41
    fb9c:	f000 85ac 	beq.w	106f8 <_svfprintf_r+0x18ec>
    fba0:	9b08      	ldr	r3, [sp, #32]
    fba2:	3301      	adds	r3, #1
    fba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fba6:	f023 0320 	bic.w	r3, r3, #32
    fbaa:	9307      	str	r3, [sp, #28]
    fbac:	f000 8463 	beq.w	10476 <_svfprintf_r+0x166a>
    fbb0:	2b47      	cmp	r3, #71	; 0x47
    fbb2:	d104      	bne.n	fbbe <_svfprintf_r+0xdb2>
    fbb4:	9b08      	ldr	r3, [sp, #32]
    fbb6:	2b00      	cmp	r3, #0
    fbb8:	bf08      	it	eq
    fbba:	2301      	moveq	r3, #1
    fbbc:	9308      	str	r3, [sp, #32]
    fbbe:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
    fbc2:	460a      	mov	r2, r1
    fbc4:	2a00      	cmp	r2, #0
    fbc6:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    fbca:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
    fbce:	f2c0 85e1 	blt.w	10794 <_svfprintf_r+0x1988>
    fbd2:	469b      	mov	fp, r3
    fbd4:	2300      	movs	r3, #0
    fbd6:	4616      	mov	r6, r2
    fbd8:	931e      	str	r3, [sp, #120]	; 0x78
    fbda:	4607      	mov	r7, r0
    fbdc:	930d      	str	r3, [sp, #52]	; 0x34
    fbde:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fbe0:	3b41      	subs	r3, #65	; 0x41
    fbe2:	2b25      	cmp	r3, #37	; 0x25
    fbe4:	f200 8367 	bhi.w	102b6 <_svfprintf_r+0x14aa>
    fbe8:	e8df f013 	tbh	[pc, r3, lsl #1]
    fbec:	03650452 	.word	0x03650452
    fbf0:	03650365 	.word	0x03650365
    fbf4:	044e0449 	.word	0x044e0449
    fbf8:	03650365 	.word	0x03650365
    fbfc:	03650365 	.word	0x03650365
    fc00:	03650365 	.word	0x03650365
    fc04:	03650365 	.word	0x03650365
    fc08:	03650365 	.word	0x03650365
    fc0c:	03650365 	.word	0x03650365
    fc10:	03650365 	.word	0x03650365
    fc14:	03650365 	.word	0x03650365
    fc18:	03650365 	.word	0x03650365
    fc1c:	03650365 	.word	0x03650365
    fc20:	03650365 	.word	0x03650365
    fc24:	03650365 	.word	0x03650365
    fc28:	03650365 	.word	0x03650365
    fc2c:	03650365 	.word	0x03650365
    fc30:	03650365 	.word	0x03650365
    fc34:	044e0449 	.word	0x044e0449
    fc38:	9310      	str	r3, [sp, #64]	; 0x40
    fc3a:	465d      	mov	r5, fp
    fc3c:	f7ff bbf4 	b.w	f428 <_svfprintf_r+0x61c>
    fc40:	9310      	str	r3, [sp, #64]	; 0x40
    fc42:	4bb7      	ldr	r3, [pc, #732]	; (ff20 <_svfprintf_r+0x1114>)
    fc44:	9318      	str	r3, [sp, #96]	; 0x60
    fc46:	f01b 0120 	ands.w	r1, fp, #32
    fc4a:	f000 80fc 	beq.w	fe46 <_svfprintf_r+0x103a>
    fc4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fc50:	3307      	adds	r3, #7
    fc52:	f023 0307 	bic.w	r3, r3, #7
    fc56:	6859      	ldr	r1, [r3, #4]
    fc58:	f853 2b08 	ldr.w	r2, [r3], #8
    fc5c:	930e      	str	r3, [sp, #56]	; 0x38
    fc5e:	f01b 0f01 	tst.w	fp, #1
    fc62:	d00a      	beq.n	fc7a <_svfprintf_r+0xe6e>
    fc64:	ea52 0301 	orrs.w	r3, r2, r1
    fc68:	d007      	beq.n	fc7a <_svfprintf_r+0xe6e>
    fc6a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    fc6c:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
    fc70:	2330      	movs	r3, #48	; 0x30
    fc72:	f04b 0b02 	orr.w	fp, fp, #2
    fc76:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
    fc7a:	f42b 6580 	bic.w	r5, fp, #1024	; 0x400
    fc7e:	2302      	movs	r3, #2
    fc80:	f7ff bb68 	b.w	f354 <_svfprintf_r+0x548>
    fc84:	9310      	str	r3, [sp, #64]	; 0x40
    fc86:	f7ff bbbc 	b.w	f402 <_svfprintf_r+0x5f6>
    fc8a:	9310      	str	r3, [sp, #64]	; 0x40
    fc8c:	4ba5      	ldr	r3, [pc, #660]	; (ff24 <_svfprintf_r+0x1118>)
    fc8e:	9318      	str	r3, [sp, #96]	; 0x60
    fc90:	e7d9      	b.n	fc46 <_svfprintf_r+0xe3a>
    fc92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fc94:	2101      	movs	r1, #1
    fc96:	f853 2b04 	ldr.w	r2, [r3], #4
    fc9a:	9107      	str	r1, [sp, #28]
    fc9c:	f88d 20fc 	strb.w	r2, [sp, #252]	; 0xfc
    fca0:	930e      	str	r3, [sp, #56]	; 0x38
    fca2:	910a      	str	r1, [sp, #40]	; 0x28
    fca4:	ac3f      	add	r4, sp, #252	; 0xfc
    fca6:	f7ff babb 	b.w	f220 <_svfprintf_r+0x414>
    fcaa:	990c      	ldr	r1, [sp, #48]	; 0x30
    fcac:	aa2c      	add	r2, sp, #176	; 0xb0
    fcae:	4650      	mov	r0, sl
    fcb0:	f002 f916 	bl	11ee0 <__ssprint_r>
    fcb4:	2800      	cmp	r0, #0
    fcb6:	f47f ad14 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    fcba:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    fcbc:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fcc0:	e468      	b.n	f594 <_svfprintf_r+0x788>
    fcc2:	2140      	movs	r1, #64	; 0x40
    fcc4:	4650      	mov	r0, sl
    fcc6:	f7fd fb6b 	bl	d3a0 <_malloc_r>
    fcca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    fccc:	6018      	str	r0, [r3, #0]
    fcce:	6118      	str	r0, [r3, #16]
    fcd0:	2800      	cmp	r0, #0
    fcd2:	f000 8660 	beq.w	10996 <_svfprintf_r+0x1b8a>
    fcd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    fcd8:	2340      	movs	r3, #64	; 0x40
    fcda:	6153      	str	r3, [r2, #20]
    fcdc:	f7ff b8b2 	b.w	ee44 <_svfprintf_r+0x38>
    fce0:	9b08      	ldr	r3, [sp, #32]
    fce2:	940d      	str	r4, [sp, #52]	; 0x34
    fce4:	2b06      	cmp	r3, #6
    fce6:	4621      	mov	r1, r4
    fce8:	bf28      	it	cs
    fcea:	2306      	movcs	r3, #6
    fcec:	9408      	str	r4, [sp, #32]
    fcee:	4622      	mov	r2, r4
    fcf0:	9307      	str	r3, [sp, #28]
    fcf2:	4c8d      	ldr	r4, [pc, #564]	; (ff28 <_svfprintf_r+0x111c>)
    fcf4:	970e      	str	r7, [sp, #56]	; 0x38
    fcf6:	930a      	str	r3, [sp, #40]	; 0x28
    fcf8:	9112      	str	r1, [sp, #72]	; 0x48
    fcfa:	9116      	str	r1, [sp, #88]	; 0x58
    fcfc:	9111      	str	r1, [sp, #68]	; 0x44
    fcfe:	f7ff ba69 	b.w	f1d4 <_svfprintf_r+0x3c8>
    fd02:	2f10      	cmp	r7, #16
    fd04:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fd06:	4d89      	ldr	r5, [pc, #548]	; (ff2c <_svfprintf_r+0x1120>)
    fd08:	f340 8245 	ble.w	10196 <_svfprintf_r+0x138a>
    fd0c:	4632      	mov	r2, r6
    fd0e:	4626      	mov	r6, r4
    fd10:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    fd12:	e005      	b.n	fd20 <_svfprintf_r+0xf14>
    fd14:	f109 0908 	add.w	r9, r9, #8
    fd18:	3f10      	subs	r7, #16
    fd1a:	2f10      	cmp	r7, #16
    fd1c:	f340 8239 	ble.w	10192 <_svfprintf_r+0x1386>
    fd20:	3301      	adds	r3, #1
    fd22:	3210      	adds	r2, #16
    fd24:	2110      	movs	r1, #16
    fd26:	2b07      	cmp	r3, #7
    fd28:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
    fd2c:	f8c9 5000 	str.w	r5, [r9]
    fd30:	f8c9 1004 	str.w	r1, [r9, #4]
    fd34:	ddee      	ble.n	fd14 <_svfprintf_r+0xf08>
    fd36:	aa2c      	add	r2, sp, #176	; 0xb0
    fd38:	4621      	mov	r1, r4
    fd3a:	4650      	mov	r0, sl
    fd3c:	f002 f8d0 	bl	11ee0 <__ssprint_r>
    fd40:	2800      	cmp	r0, #0
    fd42:	f47f acce 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    fd46:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
    fd4a:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fd4e:	e7e3      	b.n	fd18 <_svfprintf_r+0xf0c>
    fd50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    fd52:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    fd54:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    fd58:	464a      	mov	r2, r9
    fd5a:	f8dd 9058 	ldr.w	r9, [sp, #88]	; 0x58
    fd5e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
    fd62:	18e3      	adds	r3, r4, r3
    fd64:	9308      	str	r3, [sp, #32]
    fd66:	9f1a      	ldr	r7, [sp, #104]	; 0x68
    fd68:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
    fd6c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    fd70:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fd72:	9410      	str	r4, [sp, #64]	; 0x40
    fd74:	4631      	mov	r1, r6
    fd76:	f1b9 0f00 	cmp.w	r9, #0
    fd7a:	d02e      	beq.n	fdda <_svfprintf_r+0xfce>
    fd7c:	bb83      	cbnz	r3, fde0 <_svfprintf_r+0xfd4>
    fd7e:	3f01      	subs	r7, #1
    fd80:	f109 39ff 	add.w	r9, r9, #4294967295
    fd84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    fd86:	e9c2 3b00 	strd	r3, fp, [r2]
    fd8a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    fd8c:	3301      	adds	r3, #1
    fd8e:	4459      	add	r1, fp
    fd90:	2b07      	cmp	r3, #7
    fd92:	912e      	str	r1, [sp, #184]	; 0xb8
    fd94:	932d      	str	r3, [sp, #180]	; 0xb4
    fd96:	dc5f      	bgt.n	fe58 <_svfprintf_r+0x104c>
    fd98:	3208      	adds	r2, #8
    fd9a:	9b08      	ldr	r3, [sp, #32]
    fd9c:	7838      	ldrb	r0, [r7, #0]
    fd9e:	1b5b      	subs	r3, r3, r5
    fda0:	4283      	cmp	r3, r0
    fda2:	bfa8      	it	ge
    fda4:	4603      	movge	r3, r0
    fda6:	2b00      	cmp	r3, #0
    fda8:	461e      	mov	r6, r3
    fdaa:	dd0b      	ble.n	fdc4 <_svfprintf_r+0xfb8>
    fdac:	982d      	ldr	r0, [sp, #180]	; 0xb4
    fdae:	3001      	adds	r0, #1
    fdb0:	4419      	add	r1, r3
    fdb2:	2807      	cmp	r0, #7
    fdb4:	e9c2 5300 	strd	r5, r3, [r2]
    fdb8:	912e      	str	r1, [sp, #184]	; 0xb8
    fdba:	902d      	str	r0, [sp, #180]	; 0xb4
    fdbc:	f300 8156 	bgt.w	1006c <_svfprintf_r+0x1260>
    fdc0:	7838      	ldrb	r0, [r7, #0]
    fdc2:	3208      	adds	r2, #8
    fdc4:	2e00      	cmp	r6, #0
    fdc6:	bfac      	ite	ge
    fdc8:	1b84      	subge	r4, r0, r6
    fdca:	4604      	movlt	r4, r0
    fdcc:	2c00      	cmp	r4, #0
    fdce:	dc0b      	bgt.n	fde8 <_svfprintf_r+0xfdc>
    fdd0:	4405      	add	r5, r0
    fdd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fdd4:	f1b9 0f00 	cmp.w	r9, #0
    fdd8:	d1d0      	bne.n	fd7c <_svfprintf_r+0xf70>
    fdda:	2b00      	cmp	r3, #0
    fddc:	f000 83d4 	beq.w	10588 <_svfprintf_r+0x177c>
    fde0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fde2:	3b01      	subs	r3, #1
    fde4:	9312      	str	r3, [sp, #72]	; 0x48
    fde6:	e7cd      	b.n	fd84 <_svfprintf_r+0xf78>
    fde8:	2c10      	cmp	r4, #16
    fdea:	982d      	ldr	r0, [sp, #180]	; 0xb4
    fdec:	dd1d      	ble.n	fe2a <_svfprintf_r+0x101e>
    fdee:	2610      	movs	r6, #16
    fdf0:	e004      	b.n	fdfc <_svfprintf_r+0xff0>
    fdf2:	3c10      	subs	r4, #16
    fdf4:	2c10      	cmp	r4, #16
    fdf6:	f102 0208 	add.w	r2, r2, #8
    fdfa:	dd16      	ble.n	fe2a <_svfprintf_r+0x101e>
    fdfc:	3001      	adds	r0, #1
    fdfe:	4b4b      	ldr	r3, [pc, #300]	; (ff2c <_svfprintf_r+0x1120>)
    fe00:	3110      	adds	r1, #16
    fe02:	2807      	cmp	r0, #7
    fe04:	e9c2 3600 	strd	r3, r6, [r2]
    fe08:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    fe0c:	ddf1      	ble.n	fdf2 <_svfprintf_r+0xfe6>
    fe0e:	aa2c      	add	r2, sp, #176	; 0xb0
    fe10:	4641      	mov	r1, r8
    fe12:	4650      	mov	r0, sl
    fe14:	f002 f864 	bl	11ee0 <__ssprint_r>
    fe18:	2800      	cmp	r0, #0
    fe1a:	f47f ac62 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    fe1e:	3c10      	subs	r4, #16
    fe20:	2c10      	cmp	r4, #16
    fe22:	e9dd 012d 	ldrd	r0, r1, [sp, #180]	; 0xb4
    fe26:	aa2f      	add	r2, sp, #188	; 0xbc
    fe28:	dce8      	bgt.n	fdfc <_svfprintf_r+0xff0>
    fe2a:	3001      	adds	r0, #1
    fe2c:	4b3f      	ldr	r3, [pc, #252]	; (ff2c <_svfprintf_r+0x1120>)
    fe2e:	6054      	str	r4, [r2, #4]
    fe30:	4421      	add	r1, r4
    fe32:	2807      	cmp	r0, #7
    fe34:	e9cd 012d 	strd	r0, r1, [sp, #180]	; 0xb4
    fe38:	6013      	str	r3, [r2, #0]
    fe3a:	f300 83fb 	bgt.w	10634 <_svfprintf_r+0x1828>
    fe3e:	7838      	ldrb	r0, [r7, #0]
    fe40:	3208      	adds	r2, #8
    fe42:	4405      	add	r5, r0
    fe44:	e7c5      	b.n	fdd2 <_svfprintf_r+0xfc6>
    fe46:	f01b 0310 	ands.w	r3, fp, #16
    fe4a:	f000 80bc 	beq.w	ffc6 <_svfprintf_r+0x11ba>
    fe4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    fe50:	f853 2b04 	ldr.w	r2, [r3], #4
    fe54:	930e      	str	r3, [sp, #56]	; 0x38
    fe56:	e702      	b.n	fc5e <_svfprintf_r+0xe52>
    fe58:	aa2c      	add	r2, sp, #176	; 0xb0
    fe5a:	4641      	mov	r1, r8
    fe5c:	4650      	mov	r0, sl
    fe5e:	f002 f83f 	bl	11ee0 <__ssprint_r>
    fe62:	2800      	cmp	r0, #0
    fe64:	f47f ac3d 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    fe68:	992e      	ldr	r1, [sp, #184]	; 0xb8
    fe6a:	aa2f      	add	r2, sp, #188	; 0xbc
    fe6c:	e795      	b.n	fd9a <_svfprintf_r+0xf8e>
    fe6e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
    fe72:	4b2f      	ldr	r3, [pc, #188]	; (ff30 <_svfprintf_r+0x1124>)
    fe74:	f8dd 9068 	ldr.w	r9, [sp, #104]	; 0x68
    fe78:	f8cd 801c 	str.w	r8, [sp, #28]
    fe7c:	f405 6780 	and.w	r7, r5, #1024	; 0x400
    fe80:	f04f 0c00 	mov.w	ip, #0
    fe84:	ac58      	add	r4, sp, #352	; 0x160
    fe86:	f04f 3bcc 	mov.w	fp, #3435973836	; 0xcccccccc
    fe8a:	950a      	str	r5, [sp, #40]	; 0x28
    fe8c:	e005      	b.n	fe9a <_svfprintf_r+0x108e>
    fe8e:	2a0a      	cmp	r2, #10
    fe90:	f171 0100 	sbcs.w	r1, r1, #0
    fe94:	d334      	bcc.n	ff00 <_svfprintf_r+0x10f4>
    fe96:	4642      	mov	r2, r8
    fe98:	4631      	mov	r1, r6
    fe9a:	1850      	adds	r0, r2, r1
    fe9c:	f140 0000 	adc.w	r0, r0, #0
    fea0:	fba3 5600 	umull	r5, r6, r3, r0
    fea4:	f026 0503 	bic.w	r5, r6, #3
    fea8:	eb05 0596 	add.w	r5, r5, r6, lsr #2
    feac:	1b40      	subs	r0, r0, r5
    feae:	1a15      	subs	r5, r2, r0
    feb0:	f161 0e00 	sbc.w	lr, r1, #0
    feb4:	fb0b f605 	mul.w	r6, fp, r5
    feb8:	fb03 660e 	mla	r6, r3, lr, r6
    febc:	fba5 8503 	umull	r8, r5, r5, r3
    fec0:	442e      	add	r6, r5
    fec2:	f008 0e01 	and.w	lr, r8, #1
    fec6:	2505      	movs	r5, #5
    fec8:	fbae 5e05 	umull	r5, lr, lr, r5
    fecc:	182d      	adds	r5, r5, r0
    fece:	ea4f 0858 	mov.w	r8, r8, lsr #1
    fed2:	3530      	adds	r5, #48	; 0x30
    fed4:	f804 5c01 	strb.w	r5, [r4, #-1]
    fed8:	ea48 78c6 	orr.w	r8, r8, r6, lsl #31
    fedc:	f10c 0c01 	add.w	ip, ip, #1
    fee0:	3c01      	subs	r4, #1
    fee2:	0876      	lsrs	r6, r6, #1
    fee4:	2f00      	cmp	r7, #0
    fee6:	d0d2      	beq.n	fe8e <_svfprintf_r+0x1082>
    fee8:	f899 0000 	ldrb.w	r0, [r9]
    feec:	4584      	cmp	ip, r0
    feee:	d1ce      	bne.n	fe8e <_svfprintf_r+0x1082>
    fef0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    fef4:	d0cb      	beq.n	fe8e <_svfprintf_r+0x1082>
    fef6:	2a0a      	cmp	r2, #10
    fef8:	f171 0100 	sbcs.w	r1, r1, #0
    fefc:	f080 8198 	bcs.w	10230 <_svfprintf_r+0x1424>
    ff00:	9d0a      	ldr	r5, [sp, #40]	; 0x28
    ff02:	f8cd 9068 	str.w	r9, [sp, #104]	; 0x68
    ff06:	ab58      	add	r3, sp, #352	; 0x160
    ff08:	1b1b      	subs	r3, r3, r4
    ff0a:	f8dd 801c 	ldr.w	r8, [sp, #28]
    ff0e:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    ff12:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
    ff16:	46ab      	mov	fp, r5
    ff18:	930a      	str	r3, [sp, #40]	; 0x28
    ff1a:	f7ff bae1 	b.w	f4e0 <_svfprintf_r+0x6d4>
    ff1e:	bf00      	nop
    ff20:	0001593c 	.word	0x0001593c
    ff24:	00015950 	.word	0x00015950
    ff28:	00015964 	.word	0x00015964
    ff2c:	0001597c 	.word	0x0001597c
    ff30:	cccccccd 	.word	0xcccccccd
    ff34:	2301      	movs	r3, #1
    ff36:	f8c9 3004 	str.w	r3, [r9, #4]
    ff3a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ff3c:	4aba      	ldr	r2, [pc, #744]	; (10228 <_svfprintf_r+0x141c>)
    ff3e:	f8c9 2000 	str.w	r2, [r9]
    ff42:	3301      	adds	r3, #1
    ff44:	3601      	adds	r6, #1
    ff46:	2b07      	cmp	r3, #7
    ff48:	962e      	str	r6, [sp, #184]	; 0xb8
    ff4a:	932d      	str	r3, [sp, #180]	; 0xb4
    ff4c:	f300 818c 	bgt.w	10268 <_svfprintf_r+0x145c>
    ff50:	f109 0908 	add.w	r9, r9, #8
    ff54:	2900      	cmp	r1, #0
    ff56:	f040 80be 	bne.w	100d6 <_svfprintf_r+0x12ca>
    ff5a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ff5c:	f00b 0301 	and.w	r3, fp, #1
    ff60:	4313      	orrs	r3, r2
    ff62:	f43f a8d8 	beq.w	f116 <_svfprintf_r+0x30a>
    ff66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    ff68:	9919      	ldr	r1, [sp, #100]	; 0x64
    ff6a:	199a      	adds	r2, r3, r6
    ff6c:	e9c9 1300 	strd	r1, r3, [r9]
    ff70:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
    ff72:	922e      	str	r2, [sp, #184]	; 0xb8
    ff74:	3301      	adds	r3, #1
    ff76:	2b07      	cmp	r3, #7
    ff78:	932d      	str	r3, [sp, #180]	; 0xb4
    ff7a:	f300 826e 	bgt.w	1045a <_svfprintf_r+0x164e>
    ff7e:	f109 0908 	add.w	r9, r9, #8
    ff82:	9913      	ldr	r1, [sp, #76]	; 0x4c
    ff84:	f8c9 4000 	str.w	r4, [r9]
    ff88:	3301      	adds	r3, #1
    ff8a:	188e      	adds	r6, r1, r2
    ff8c:	2b07      	cmp	r3, #7
    ff8e:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
    ff92:	f8c9 1004 	str.w	r1, [r9, #4]
    ff96:	f77f a8bc 	ble.w	f112 <_svfprintf_r+0x306>
    ff9a:	f7ff bbf1 	b.w	f780 <_svfprintf_r+0x974>
    ff9e:	990c      	ldr	r1, [sp, #48]	; 0x30
    ffa0:	931e      	str	r3, [sp, #120]	; 0x78
    ffa2:	aa2c      	add	r2, sp, #176	; 0xb0
    ffa4:	4650      	mov	r0, sl
    ffa6:	f001 ff9b 	bl	11ee0 <__ssprint_r>
    ffaa:	2800      	cmp	r0, #0
    ffac:	f47f ab99 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    ffb0:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
    ffb4:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ffb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    ffb8:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    ffbc:	f7ff b86a 	b.w	f094 <_svfprintf_r+0x288>
    ffc0:	46c2      	mov	sl, r8
    ffc2:	f7ff bb8e 	b.w	f6e2 <_svfprintf_r+0x8d6>
    ffc6:	f01b 0240 	ands.w	r2, fp, #64	; 0x40
    ffca:	f000 80b8 	beq.w	1013e <_svfprintf_r+0x1332>
    ffce:	980e      	ldr	r0, [sp, #56]	; 0x38
    ffd0:	f850 2b04 	ldr.w	r2, [r0], #4
    ffd4:	900e      	str	r0, [sp, #56]	; 0x38
    ffd6:	4619      	mov	r1, r3
    ffd8:	b292      	uxth	r2, r2
    ffda:	e640      	b.n	fc5e <_svfprintf_r+0xe52>
    ffdc:	990c      	ldr	r1, [sp, #48]	; 0x30
    ffde:	aa2c      	add	r2, sp, #176	; 0xb0
    ffe0:	4650      	mov	r0, sl
    ffe2:	f001 ff7d 	bl	11ee0 <__ssprint_r>
    ffe6:	2800      	cmp	r0, #0
    ffe8:	f47f ab7b 	bne.w	f6e2 <_svfprintf_r+0x8d6>
    ffec:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
    ffee:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
    fff2:	f7ff babc 	b.w	f56e <_svfprintf_r+0x762>
    fff6:	ae2a      	add	r6, sp, #168	; 0xa8
    fff8:	2208      	movs	r2, #8
    fffa:	2100      	movs	r1, #0
    fffc:	4630      	mov	r0, r6
    fffe:	9425      	str	r4, [sp, #148]	; 0x94
   10000:	f7fe f83c 	bl	e07c <memset>
   10004:	9b08      	ldr	r3, [sp, #32]
   10006:	1c5a      	adds	r2, r3, #1
   10008:	f000 80d4 	beq.w	101b4 <_svfprintf_r+0x13a8>
   1000c:	2500      	movs	r5, #0
   1000e:	f8cd 801c 	str.w	r8, [sp, #28]
   10012:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
   10016:	46a8      	mov	r8, r5
   10018:	469b      	mov	fp, r3
   1001a:	e00c      	b.n	10036 <_svfprintf_r+0x122a>
   1001c:	a93f      	add	r1, sp, #252	; 0xfc
   1001e:	4650      	mov	r0, sl
   10020:	f001 ff16 	bl	11e50 <_wcrtomb_r>
   10024:	1c43      	adds	r3, r0, #1
   10026:	4440      	add	r0, r8
   10028:	f000 83b8 	beq.w	1079c <_svfprintf_r+0x1990>
   1002c:	4558      	cmp	r0, fp
   1002e:	dc08      	bgt.n	10042 <_svfprintf_r+0x1236>
   10030:	f000 8435 	beq.w	1089e <_svfprintf_r+0x1a92>
   10034:	4680      	mov	r8, r0
   10036:	9a25      	ldr	r2, [sp, #148]	; 0x94
   10038:	5952      	ldr	r2, [r2, r5]
   1003a:	4633      	mov	r3, r6
   1003c:	3504      	adds	r5, #4
   1003e:	2a00      	cmp	r2, #0
   10040:	d1ec      	bne.n	1001c <_svfprintf_r+0x1210>
   10042:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   10046:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   1004a:	f8dd 801c 	ldr.w	r8, [sp, #28]
   1004e:	e0be      	b.n	101ce <_svfprintf_r+0x13c2>
   10050:	4616      	mov	r6, r2
   10052:	3301      	adds	r3, #1
   10054:	4426      	add	r6, r4
   10056:	2b07      	cmp	r3, #7
   10058:	f8c9 5000 	str.w	r5, [r9]
   1005c:	f8c9 4004 	str.w	r4, [r9, #4]
   10060:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   10064:	f77f a855 	ble.w	f112 <_svfprintf_r+0x306>
   10068:	f7ff bb8a 	b.w	f780 <_svfprintf_r+0x974>
   1006c:	aa2c      	add	r2, sp, #176	; 0xb0
   1006e:	4641      	mov	r1, r8
   10070:	4650      	mov	r0, sl
   10072:	f001 ff35 	bl	11ee0 <__ssprint_r>
   10076:	2800      	cmp	r0, #0
   10078:	f47f ab33 	bne.w	f6e2 <_svfprintf_r+0x8d6>
   1007c:	7838      	ldrb	r0, [r7, #0]
   1007e:	992e      	ldr	r1, [sp, #184]	; 0xb8
   10080:	aa2f      	add	r2, sp, #188	; 0xbc
   10082:	e69f      	b.n	fdc4 <_svfprintf_r+0xfb8>
   10084:	990c      	ldr	r1, [sp, #48]	; 0x30
   10086:	aa2c      	add	r2, sp, #176	; 0xb0
   10088:	4650      	mov	r0, sl
   1008a:	f001 ff29 	bl	11ee0 <__ssprint_r>
   1008e:	2800      	cmp	r0, #0
   10090:	f47f ab27 	bne.w	f6e2 <_svfprintf_r+0x8d6>
   10094:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10096:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   1009a:	f7ff b823 	b.w	f0e4 <_svfprintf_r+0x2d8>
   1009e:	2b01      	cmp	r3, #1
   100a0:	465d      	mov	r5, fp
   100a2:	f47f aa09 	bne.w	f4b8 <_svfprintf_r+0x6ac>
   100a6:	f7ff bbb9 	b.w	f81c <_svfprintf_r+0xa10>
   100aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   100ac:	9909      	ldr	r1, [sp, #36]	; 0x24
   100ae:	f853 2b04 	ldr.w	r2, [r3], #4
   100b2:	4644      	mov	r4, r8
   100b4:	6011      	str	r1, [r2, #0]
   100b6:	930e      	str	r3, [sp, #56]	; 0x38
   100b8:	f7fe bed6 	b.w	ee68 <_svfprintf_r+0x5c>
   100bc:	4616      	mov	r6, r2
   100be:	3701      	adds	r7, #1
   100c0:	4426      	add	r6, r4
   100c2:	2f07      	cmp	r7, #7
   100c4:	e9cd 762d 	strd	r7, r6, [sp, #180]	; 0xb4
   100c8:	f8c9 5000 	str.w	r5, [r9]
   100cc:	f8c9 4004 	str.w	r4, [r9, #4]
   100d0:	f77f ab47 	ble.w	f762 <_svfprintf_r+0x956>
   100d4:	e491      	b.n	f9fa <_svfprintf_r+0xbee>
   100d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   100d8:	9819      	ldr	r0, [sp, #100]	; 0x64
   100da:	199a      	adds	r2, r3, r6
   100dc:	e9c9 0300 	strd	r0, r3, [r9]
   100e0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   100e2:	922e      	str	r2, [sp, #184]	; 0xb8
   100e4:	3301      	adds	r3, #1
   100e6:	2b07      	cmp	r3, #7
   100e8:	932d      	str	r3, [sp, #180]	; 0xb4
   100ea:	f300 81b6 	bgt.w	1045a <_svfprintf_r+0x164e>
   100ee:	f109 0908 	add.w	r9, r9, #8
   100f2:	2900      	cmp	r1, #0
   100f4:	f6bf af45 	bge.w	ff82 <_svfprintf_r+0x1176>
   100f8:	424f      	negs	r7, r1
   100fa:	3110      	adds	r1, #16
   100fc:	4d4b      	ldr	r5, [pc, #300]	; (1022c <_svfprintf_r+0x1420>)
   100fe:	f280 8388 	bge.w	10812 <_svfprintf_r+0x1a06>
   10102:	4649      	mov	r1, r9
   10104:	2610      	movs	r6, #16
   10106:	46a1      	mov	r9, r4
   10108:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1010a:	e004      	b.n	10116 <_svfprintf_r+0x130a>
   1010c:	3108      	adds	r1, #8
   1010e:	3f10      	subs	r7, #16
   10110:	2f10      	cmp	r7, #16
   10112:	f340 837c 	ble.w	1080e <_svfprintf_r+0x1a02>
   10116:	3301      	adds	r3, #1
   10118:	3210      	adds	r2, #16
   1011a:	2b07      	cmp	r3, #7
   1011c:	e9c1 5600 	strd	r5, r6, [r1]
   10120:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   10124:	ddf2      	ble.n	1010c <_svfprintf_r+0x1300>
   10126:	aa2c      	add	r2, sp, #176	; 0xb0
   10128:	4621      	mov	r1, r4
   1012a:	4650      	mov	r0, sl
   1012c:	f001 fed8 	bl	11ee0 <__ssprint_r>
   10130:	2800      	cmp	r0, #0
   10132:	f47f aad6 	bne.w	f6e2 <_svfprintf_r+0x8d6>
   10136:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   1013a:	a92f      	add	r1, sp, #188	; 0xbc
   1013c:	e7e7      	b.n	1010e <_svfprintf_r+0x1302>
   1013e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10140:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
   10144:	bf1a      	itte	ne
   10146:	4611      	movne	r1, r2
   10148:	f853 2b04 	ldrne.w	r2, [r3], #4
   1014c:	f853 2b04 	ldreq.w	r2, [r3], #4
   10150:	930e      	str	r3, [sp, #56]	; 0x38
   10152:	bf18      	it	ne
   10154:	b2d2      	uxtbne	r2, r2
   10156:	e582      	b.n	fc5e <_svfprintf_r+0xe52>
   10158:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1015a:	f41b 7100 	ands.w	r1, fp, #512	; 0x200
   1015e:	bf1a      	itte	ne
   10160:	4611      	movne	r1, r2
   10162:	f853 2b04 	ldrne.w	r2, [r3], #4
   10166:	f853 2b04 	ldreq.w	r2, [r3], #4
   1016a:	930e      	str	r3, [sp, #56]	; 0x38
   1016c:	bf18      	it	ne
   1016e:	b2d2      	uxtbne	r2, r2
   10170:	f7ff b953 	b.w	f41a <_svfprintf_r+0x60e>
   10174:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10176:	f415 7100 	ands.w	r1, r5, #512	; 0x200
   1017a:	bf1a      	itte	ne
   1017c:	4611      	movne	r1, r2
   1017e:	f853 2b04 	ldrne.w	r2, [r3], #4
   10182:	f853 2b04 	ldreq.w	r2, [r3], #4
   10186:	930e      	str	r3, [sp, #56]	; 0x38
   10188:	bf18      	it	ne
   1018a:	b2d2      	uxtbne	r2, r2
   1018c:	2301      	movs	r3, #1
   1018e:	f7ff b8e1 	b.w	f354 <_svfprintf_r+0x548>
   10192:	4634      	mov	r4, r6
   10194:	4616      	mov	r6, r2
   10196:	3301      	adds	r3, #1
   10198:	443e      	add	r6, r7
   1019a:	2b07      	cmp	r3, #7
   1019c:	e9cd 362d 	strd	r3, r6, [sp, #180]	; 0xb4
   101a0:	f8c9 5000 	str.w	r5, [r9]
   101a4:	f8c9 7004 	str.w	r7, [r9, #4]
   101a8:	f300 814a 	bgt.w	10440 <_svfprintf_r+0x1634>
   101ac:	f109 0908 	add.w	r9, r9, #8
   101b0:	f7ff bbb3 	b.w	f91a <_svfprintf_r+0xb0e>
   101b4:	2300      	movs	r3, #0
   101b6:	4619      	mov	r1, r3
   101b8:	9600      	str	r6, [sp, #0]
   101ba:	aa25      	add	r2, sp, #148	; 0x94
   101bc:	4650      	mov	r0, sl
   101be:	f001 fe6d 	bl	11e9c <_wcsrtombs_r>
   101c2:	4603      	mov	r3, r0
   101c4:	3301      	adds	r3, #1
   101c6:	900a      	str	r0, [sp, #40]	; 0x28
   101c8:	f000 82e8 	beq.w	1079c <_svfprintf_r+0x1990>
   101cc:	9425      	str	r4, [sp, #148]	; 0x94
   101ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   101d0:	2b00      	cmp	r3, #0
   101d2:	d03d      	beq.n	10250 <_svfprintf_r+0x1444>
   101d4:	2b63      	cmp	r3, #99	; 0x63
   101d6:	f300 8129 	bgt.w	1042c <_svfprintf_r+0x1620>
   101da:	2300      	movs	r3, #0
   101dc:	930d      	str	r3, [sp, #52]	; 0x34
   101de:	ac3f      	add	r4, sp, #252	; 0xfc
   101e0:	2208      	movs	r2, #8
   101e2:	2100      	movs	r1, #0
   101e4:	4630      	mov	r0, r6
   101e6:	f7fd ff49 	bl	e07c <memset>
   101ea:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   101ec:	9600      	str	r6, [sp, #0]
   101ee:	462b      	mov	r3, r5
   101f0:	aa25      	add	r2, sp, #148	; 0x94
   101f2:	4621      	mov	r1, r4
   101f4:	4650      	mov	r0, sl
   101f6:	f001 fe51 	bl	11e9c <_wcsrtombs_r>
   101fa:	4285      	cmp	r5, r0
   101fc:	f040 83c4 	bne.w	10988 <_svfprintf_r+0x1b7c>
   10200:	990a      	ldr	r1, [sp, #40]	; 0x28
   10202:	970e      	str	r7, [sp, #56]	; 0x38
   10204:	2300      	movs	r3, #0
   10206:	5463      	strb	r3, [r4, r1]
   10208:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   1020c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10210:	9308      	str	r3, [sp, #32]
   10212:	9107      	str	r1, [sp, #28]
   10214:	9312      	str	r3, [sp, #72]	; 0x48
   10216:	9316      	str	r3, [sp, #88]	; 0x58
   10218:	9311      	str	r3, [sp, #68]	; 0x44
   1021a:	f7fe bfdb 	b.w	f1d4 <_svfprintf_r+0x3c8>
   1021e:	222d      	movs	r2, #45	; 0x2d
   10220:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   10224:	f7fe bfc5 	b.w	f1b2 <_svfprintf_r+0x3a6>
   10228:	000142ec 	.word	0x000142ec
   1022c:	0001597c 	.word	0x0001597c
   10230:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   10232:	991c      	ldr	r1, [sp, #112]	; 0x70
   10234:	1ae4      	subs	r4, r4, r3
   10236:	461a      	mov	r2, r3
   10238:	4620      	mov	r0, r4
   1023a:	f7fd ff71 	bl	e120 <strncpy>
   1023e:	f899 2001 	ldrb.w	r2, [r9, #1]
   10242:	4ba5      	ldr	r3, [pc, #660]	; (104d8 <_svfprintf_r+0x16cc>)
   10244:	b10a      	cbz	r2, 1024a <_svfprintf_r+0x143e>
   10246:	f109 0901 	add.w	r9, r9, #1
   1024a:	f04f 0c00 	mov.w	ip, #0
   1024e:	e622      	b.n	fe96 <_svfprintf_r+0x108a>
   10250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10252:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10256:	970e      	str	r7, [sp, #56]	; 0x38
   10258:	e9cd 3307 	strd	r3, r3, [sp, #28]
   1025c:	9312      	str	r3, [sp, #72]	; 0x48
   1025e:	9316      	str	r3, [sp, #88]	; 0x58
   10260:	9311      	str	r3, [sp, #68]	; 0x44
   10262:	930d      	str	r3, [sp, #52]	; 0x34
   10264:	f7fe bfb6 	b.w	f1d4 <_svfprintf_r+0x3c8>
   10268:	990c      	ldr	r1, [sp, #48]	; 0x30
   1026a:	aa2c      	add	r2, sp, #176	; 0xb0
   1026c:	4650      	mov	r0, sl
   1026e:	f001 fe37 	bl	11ee0 <__ssprint_r>
   10272:	2800      	cmp	r0, #0
   10274:	f47f aa35 	bne.w	f6e2 <_svfprintf_r+0x8d6>
   10278:	9923      	ldr	r1, [sp, #140]	; 0x8c
   1027a:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   1027c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10280:	e668      	b.n	ff54 <_svfprintf_r+0x1148>
   10282:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   10284:	990a      	ldr	r1, [sp, #40]	; 0x28
   10286:	18a5      	adds	r5, r4, r2
   10288:	1a6d      	subs	r5, r5, r1
   1028a:	1ad4      	subs	r4, r2, r3
   1028c:	42a5      	cmp	r5, r4
   1028e:	bfa8      	it	ge
   10290:	4625      	movge	r5, r4
   10292:	f7ff bb77 	b.w	f984 <_svfprintf_r+0xb78>
   10296:	f913 2b04 	ldrsb.w	r2, [r3], #4
   1029a:	930e      	str	r3, [sp, #56]	; 0x38
   1029c:	17d1      	asrs	r1, r2, #31
   1029e:	460b      	mov	r3, r1
   102a0:	f7ff b807 	b.w	f2b2 <_svfprintf_r+0x4a6>
   102a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   102a6:	9909      	ldr	r1, [sp, #36]	; 0x24
   102a8:	f853 2b04 	ldr.w	r2, [r3], #4
   102ac:	930e      	str	r3, [sp, #56]	; 0x38
   102ae:	8011      	strh	r1, [r2, #0]
   102b0:	4644      	mov	r4, r8
   102b2:	f7fe bdd9 	b.w	ee68 <_svfprintf_r+0x5c>
   102b6:	9b08      	ldr	r3, [sp, #32]
   102b8:	930a      	str	r3, [sp, #40]	; 0x28
   102ba:	2302      	movs	r3, #2
   102bc:	a92a      	add	r1, sp, #168	; 0xa8
   102be:	9104      	str	r1, [sp, #16]
   102c0:	a925      	add	r1, sp, #148	; 0x94
   102c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   102c4:	9103      	str	r1, [sp, #12]
   102c6:	a923      	add	r1, sp, #140	; 0x8c
   102c8:	9300      	str	r3, [sp, #0]
   102ca:	463a      	mov	r2, r7
   102cc:	4633      	mov	r3, r6
   102ce:	9501      	str	r5, [sp, #4]
   102d0:	9102      	str	r1, [sp, #8]
   102d2:	4650      	mov	r0, sl
   102d4:	f000 fe60 	bl	10f98 <_dtoa_r>
   102d8:	9b07      	ldr	r3, [sp, #28]
   102da:	2b47      	cmp	r3, #71	; 0x47
   102dc:	4604      	mov	r4, r0
   102de:	f000 81a3 	beq.w	10628 <_svfprintf_r+0x181c>
   102e2:	2b46      	cmp	r3, #70	; 0x46
   102e4:	4405      	add	r5, r0
   102e6:	d105      	bne.n	102f4 <_svfprintf_r+0x14e8>
   102e8:	7803      	ldrb	r3, [r0, #0]
   102ea:	2b30      	cmp	r3, #48	; 0x30
   102ec:	f000 82b8 	beq.w	10860 <_svfprintf_r+0x1a54>
   102f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   102f2:	441d      	add	r5, r3
   102f4:	4638      	mov	r0, r7
   102f6:	4631      	mov	r1, r6
   102f8:	2200      	movs	r2, #0
   102fa:	2300      	movs	r3, #0
   102fc:	f7fc fcc6 	bl	cc8c <__aeabi_dcmpeq>
   10300:	2800      	cmp	r0, #0
   10302:	f000 8166 	beq.w	105d2 <_svfprintf_r+0x17c6>
   10306:	462b      	mov	r3, r5
   10308:	1b1b      	subs	r3, r3, r4
   1030a:	9313      	str	r3, [sp, #76]	; 0x4c
   1030c:	9b07      	ldr	r3, [sp, #28]
   1030e:	2b47      	cmp	r3, #71	; 0x47
   10310:	f000 814a 	beq.w	105a8 <_svfprintf_r+0x179c>
   10314:	9b07      	ldr	r3, [sp, #28]
   10316:	2b46      	cmp	r3, #70	; 0x46
   10318:	f000 8200 	beq.w	1071c <_svfprintf_r+0x1910>
   1031c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1031e:	9311      	str	r3, [sp, #68]	; 0x44
   10320:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10322:	9a07      	ldr	r2, [sp, #28]
   10324:	3b01      	subs	r3, #1
   10326:	2a41      	cmp	r2, #65	; 0x41
   10328:	9323      	str	r3, [sp, #140]	; 0x8c
   1032a:	f000 8223 	beq.w	10774 <_svfprintf_r+0x1968>
   1032e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   10332:	2100      	movs	r1, #0
   10334:	2b00      	cmp	r3, #0
   10336:	bfb8      	it	lt
   10338:	9b11      	ldrlt	r3, [sp, #68]	; 0x44
   1033a:	f88d 2098 	strb.w	r2, [sp, #152]	; 0x98
   1033e:	bfba      	itte	lt
   10340:	f1c3 0301 	rsblt	r3, r3, #1
   10344:	222d      	movlt	r2, #45	; 0x2d
   10346:	222b      	movge	r2, #43	; 0x2b
   10348:	2b09      	cmp	r3, #9
   1034a:	f88d 2099 	strb.w	r2, [sp, #153]	; 0x99
   1034e:	f340 824f 	ble.w	107f0 <_svfprintf_r+0x19e4>
   10352:	f10d 05af 	add.w	r5, sp, #175	; 0xaf
   10356:	4e61      	ldr	r6, [pc, #388]	; (104dc <_svfprintf_r+0x16d0>)
   10358:	462a      	mov	r2, r5
   1035a:	4610      	mov	r0, r2
   1035c:	fb86 2103 	smull	r2, r1, r6, r3
   10360:	17da      	asrs	r2, r3, #31
   10362:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
   10366:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1036a:	eba3 0141 	sub.w	r1, r3, r1, lsl #1
   1036e:	3130      	adds	r1, #48	; 0x30
   10370:	f800 1c01 	strb.w	r1, [r0, #-1]
   10374:	4619      	mov	r1, r3
   10376:	2963      	cmp	r1, #99	; 0x63
   10378:	4613      	mov	r3, r2
   1037a:	f100 32ff 	add.w	r2, r0, #4294967295
   1037e:	dcec      	bgt.n	1035a <_svfprintf_r+0x154e>
   10380:	3330      	adds	r3, #48	; 0x30
   10382:	b2d9      	uxtb	r1, r3
   10384:	1e83      	subs	r3, r0, #2
   10386:	429d      	cmp	r5, r3
   10388:	f802 1c01 	strb.w	r1, [r2, #-1]
   1038c:	f240 82e9 	bls.w	10962 <_svfprintf_r+0x1b56>
   10390:	4613      	mov	r3, r2
   10392:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   10396:	e001      	b.n	1039c <_svfprintf_r+0x1590>
   10398:	f813 1b01 	ldrb.w	r1, [r3], #1
   1039c:	f802 1b01 	strb.w	r1, [r2], #1
   103a0:	429d      	cmp	r5, r3
   103a2:	d1f9      	bne.n	10398 <_svfprintf_r+0x158c>
   103a4:	f10d 03b1 	add.w	r3, sp, #177	; 0xb1
   103a8:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   103ac:	1a1b      	subs	r3, r3, r0
   103ae:	4413      	add	r3, r2
   103b0:	aa26      	add	r2, sp, #152	; 0x98
   103b2:	1a9b      	subs	r3, r3, r2
   103b4:	931b      	str	r3, [sp, #108]	; 0x6c
   103b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   103b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   103ba:	2b01      	cmp	r3, #1
   103bc:	441a      	add	r2, r3
   103be:	920a      	str	r2, [sp, #40]	; 0x28
   103c0:	f340 8249 	ble.w	10856 <_svfprintf_r+0x1a4a>
   103c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   103c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   103c8:	4413      	add	r3, r2
   103ca:	930a      	str	r3, [sp, #40]	; 0x28
   103cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   103ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   103d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
   103d4:	f443 7b80 	orr.w	fp, r3, #256	; 0x100
   103d8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   103dc:	2300      	movs	r3, #0
   103de:	9312      	str	r3, [sp, #72]	; 0x48
   103e0:	9207      	str	r2, [sp, #28]
   103e2:	9316      	str	r3, [sp, #88]	; 0x58
   103e4:	9311      	str	r3, [sp, #68]	; 0x44
   103e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
   103e8:	2b00      	cmp	r3, #0
   103ea:	f040 80eb 	bne.w	105c4 <_svfprintf_r+0x17b8>
   103ee:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   103f2:	9308      	str	r3, [sp, #32]
   103f4:	f7fe beee 	b.w	f1d4 <_svfprintf_r+0x3c8>
   103f8:	4620      	mov	r0, r4
   103fa:	970e      	str	r7, [sp, #56]	; 0x38
   103fc:	f7fd ff60 	bl	e2c0 <strlen>
   10400:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10402:	9308      	str	r3, [sp, #32]
   10404:	ea20 71e0 	bic.w	r1, r0, r0, asr #31
   10408:	9312      	str	r3, [sp, #72]	; 0x48
   1040a:	9316      	str	r3, [sp, #88]	; 0x58
   1040c:	930d      	str	r3, [sp, #52]	; 0x34
   1040e:	2373      	movs	r3, #115	; 0x73
   10410:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10414:	900a      	str	r0, [sp, #40]	; 0x28
   10416:	9107      	str	r1, [sp, #28]
   10418:	9310      	str	r3, [sp, #64]	; 0x40
   1041a:	f7fe bedb 	b.w	f1d4 <_svfprintf_r+0x3c8>
   1041e:	990c      	ldr	r1, [sp, #48]	; 0x30
   10420:	aa2c      	add	r2, sp, #176	; 0xb0
   10422:	4650      	mov	r0, sl
   10424:	f001 fd5c 	bl	11ee0 <__ssprint_r>
   10428:	f7fe bdf8 	b.w	f01c <_svfprintf_r+0x210>
   1042c:	1c59      	adds	r1, r3, #1
   1042e:	4650      	mov	r0, sl
   10430:	f7fc ffb6 	bl	d3a0 <_malloc_r>
   10434:	4604      	mov	r4, r0
   10436:	2800      	cmp	r0, #0
   10438:	f000 81b0 	beq.w	1079c <_svfprintf_r+0x1990>
   1043c:	900d      	str	r0, [sp, #52]	; 0x34
   1043e:	e6cf      	b.n	101e0 <_svfprintf_r+0x13d4>
   10440:	990c      	ldr	r1, [sp, #48]	; 0x30
   10442:	aa2c      	add	r2, sp, #176	; 0xb0
   10444:	4650      	mov	r0, sl
   10446:	f001 fd4b 	bl	11ee0 <__ssprint_r>
   1044a:	2800      	cmp	r0, #0
   1044c:	f47f a949 	bne.w	f6e2 <_svfprintf_r+0x8d6>
   10450:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10452:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10456:	f7ff ba60 	b.w	f91a <_svfprintf_r+0xb0e>
   1045a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1045c:	aa2c      	add	r2, sp, #176	; 0xb0
   1045e:	4650      	mov	r0, sl
   10460:	f001 fd3e 	bl	11ee0 <__ssprint_r>
   10464:	2800      	cmp	r0, #0
   10466:	f47f a93c 	bne.w	f6e2 <_svfprintf_r+0x8d6>
   1046a:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   1046e:	9923      	ldr	r1, [sp, #140]	; 0x8c
   10470:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10474:	e63d      	b.n	100f2 <_svfprintf_r+0x12e6>
   10476:	2306      	movs	r3, #6
   10478:	9308      	str	r3, [sp, #32]
   1047a:	f7ff bba0 	b.w	fbbe <_svfprintf_r+0xdb2>
   1047e:	9b08      	ldr	r3, [sp, #32]
   10480:	3301      	adds	r3, #1
   10482:	930a      	str	r3, [sp, #40]	; 0x28
   10484:	2302      	movs	r3, #2
   10486:	e719      	b.n	102bc <_svfprintf_r+0x14b0>
   10488:	9b08      	ldr	r3, [sp, #32]
   1048a:	930a      	str	r3, [sp, #40]	; 0x28
   1048c:	2303      	movs	r3, #3
   1048e:	e715      	b.n	102bc <_svfprintf_r+0x14b0>
   10490:	4638      	mov	r0, r7
   10492:	4631      	mov	r1, r6
   10494:	aa23      	add	r2, sp, #140	; 0x8c
   10496:	f000 fc13 	bl	10cc0 <frexp>
   1049a:	2200      	movs	r2, #0
   1049c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   104a0:	f003 f9ba 	bl	13818 <__aeabi_dmul>
   104a4:	2200      	movs	r2, #0
   104a6:	2300      	movs	r3, #0
   104a8:	4606      	mov	r6, r0
   104aa:	460f      	mov	r7, r1
   104ac:	f7fc fbee 	bl	cc8c <__aeabi_dcmpeq>
   104b0:	b108      	cbz	r0, 104b6 <_svfprintf_r+0x16aa>
   104b2:	2301      	movs	r3, #1
   104b4:	9323      	str	r3, [sp, #140]	; 0x8c
   104b6:	4b0a      	ldr	r3, [pc, #40]	; (104e0 <_svfprintf_r+0x16d4>)
   104b8:	930a      	str	r3, [sp, #40]	; 0x28
   104ba:	9b08      	ldr	r3, [sp, #32]
   104bc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   104c0:	3b01      	subs	r3, #1
   104c2:	e9cd 8b11 	strd	r8, fp, [sp, #68]	; 0x44
   104c6:	4625      	mov	r5, r4
   104c8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   104cc:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
   104d0:	4698      	mov	r8, r3
   104d2:	941f      	str	r4, [sp, #124]	; 0x7c
   104d4:	e00d      	b.n	104f2 <_svfprintf_r+0x16e6>
   104d6:	bf00      	nop
   104d8:	cccccccd 	.word	0xcccccccd
   104dc:	66666667 	.word	0x66666667
   104e0:	00015950 	.word	0x00015950
   104e4:	2200      	movs	r2, #0
   104e6:	2300      	movs	r3, #0
   104e8:	f108 38ff 	add.w	r8, r8, #4294967295
   104ec:	f7fc fbce 	bl	cc8c <__aeabi_dcmpeq>
   104f0:	b9e8      	cbnz	r0, 1052e <_svfprintf_r+0x1722>
   104f2:	4bae      	ldr	r3, [pc, #696]	; (107ac <_svfprintf_r+0x19a0>)
   104f4:	2200      	movs	r2, #0
   104f6:	4630      	mov	r0, r6
   104f8:	4639      	mov	r1, r7
   104fa:	f003 f98d 	bl	13818 <__aeabi_dmul>
   104fe:	460f      	mov	r7, r1
   10500:	4606      	mov	r6, r0
   10502:	f003 fb9b 	bl	13c3c <__aeabi_d2iz>
   10506:	4604      	mov	r4, r0
   10508:	f7fc fb00 	bl	cb0c <__aeabi_i2d>
   1050c:	460b      	mov	r3, r1
   1050e:	4602      	mov	r2, r0
   10510:	4639      	mov	r1, r7
   10512:	4630      	mov	r0, r6
   10514:	f7fc f9ac 	bl	c870 <__aeabi_dsub>
   10518:	f81b 3004 	ldrb.w	r3, [fp, r4]
   1051c:	f1b8 3fff 	cmp.w	r8, #4294967295
   10520:	46aa      	mov	sl, r5
   10522:	46c1      	mov	r9, r8
   10524:	f805 3b01 	strb.w	r3, [r5], #1
   10528:	4606      	mov	r6, r0
   1052a:	460f      	mov	r7, r1
   1052c:	d1da      	bne.n	104e4 <_svfprintf_r+0x16d8>
   1052e:	4ba0      	ldr	r3, [pc, #640]	; (107b0 <_svfprintf_r+0x19a4>)
   10530:	2200      	movs	r2, #0
   10532:	4630      	mov	r0, r6
   10534:	4639      	mov	r1, r7
   10536:	e9dd 8b11 	ldrd	r8, fp, [sp, #68]	; 0x44
   1053a:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
   1053e:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
   10542:	e9cd a412 	strd	sl, r4, [sp, #72]	; 0x48
   10546:	f8dd a058 	ldr.w	sl, [sp, #88]	; 0x58
   1054a:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
   1054c:	f7fc fbc6 	bl	ccdc <__aeabi_dcmpgt>
   10550:	2800      	cmp	r0, #0
   10552:	f040 8131 	bne.w	107b8 <_svfprintf_r+0x19ac>
   10556:	4b96      	ldr	r3, [pc, #600]	; (107b0 <_svfprintf_r+0x19a4>)
   10558:	4630      	mov	r0, r6
   1055a:	4639      	mov	r1, r7
   1055c:	2200      	movs	r2, #0
   1055e:	f7fc fb95 	bl	cc8c <__aeabi_dcmpeq>
   10562:	b118      	cbz	r0, 1056c <_svfprintf_r+0x1760>
   10564:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10566:	07de      	lsls	r6, r3, #31
   10568:	f100 8126 	bmi.w	107b8 <_svfprintf_r+0x19ac>
   1056c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1056e:	2b00      	cmp	r3, #0
   10570:	db07      	blt.n	10582 <_svfprintf_r+0x1776>
   10572:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10574:	3301      	adds	r3, #1
   10576:	442b      	add	r3, r5
   10578:	2230      	movs	r2, #48	; 0x30
   1057a:	f805 2b01 	strb.w	r2, [r5], #1
   1057e:	42ab      	cmp	r3, r5
   10580:	d1fb      	bne.n	1057a <_svfprintf_r+0x176e>
   10582:	1b2b      	subs	r3, r5, r4
   10584:	9313      	str	r3, [sp, #76]	; 0x4c
   10586:	e6c1      	b.n	1030c <_svfprintf_r+0x1500>
   10588:	9c10      	ldr	r4, [sp, #64]	; 0x40
   1058a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   1058c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   10590:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   10594:	971a      	str	r7, [sp, #104]	; 0x68
   10596:	18e3      	adds	r3, r4, r3
   10598:	429d      	cmp	r5, r3
   1059a:	bf28      	it	cs
   1059c:	461d      	movcs	r5, r3
   1059e:	4691      	mov	r9, r2
   105a0:	460e      	mov	r6, r1
   105a2:	950a      	str	r5, [sp, #40]	; 0x28
   105a4:	f7ff b9c0 	b.w	f928 <_svfprintf_r+0xb1c>
   105a8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   105aa:	9311      	str	r3, [sp, #68]	; 0x44
   105ac:	1cdd      	adds	r5, r3, #3
   105ae:	db02      	blt.n	105b6 <_svfprintf_r+0x17aa>
   105b0:	9a08      	ldr	r2, [sp, #32]
   105b2:	4293      	cmp	r3, r2
   105b4:	dd19      	ble.n	105ea <_svfprintf_r+0x17de>
   105b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   105b8:	3b02      	subs	r3, #2
   105ba:	9310      	str	r3, [sp, #64]	; 0x40
   105bc:	f023 0320 	bic.w	r3, r3, #32
   105c0:	9307      	str	r3, [sp, #28]
   105c2:	e6ad      	b.n	10320 <_svfprintf_r+0x1514>
   105c4:	222d      	movs	r2, #45	; 0x2d
   105c6:	2300      	movs	r3, #0
   105c8:	f88d 2087 	strb.w	r2, [sp, #135]	; 0x87
   105cc:	9308      	str	r3, [sp, #32]
   105ce:	f7fe be04 	b.w	f1da <_svfprintf_r+0x3ce>
   105d2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   105d4:	42ab      	cmp	r3, r5
   105d6:	f4bf ae97 	bcs.w	10308 <_svfprintf_r+0x14fc>
   105da:	2130      	movs	r1, #48	; 0x30
   105dc:	1c5a      	adds	r2, r3, #1
   105de:	922a      	str	r2, [sp, #168]	; 0xa8
   105e0:	7019      	strb	r1, [r3, #0]
   105e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   105e4:	429d      	cmp	r5, r3
   105e6:	d8f9      	bhi.n	105dc <_svfprintf_r+0x17d0>
   105e8:	e68e      	b.n	10308 <_svfprintf_r+0x14fc>
   105ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   105ec:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   105ee:	4293      	cmp	r3, r2
   105f0:	f2c0 80c5 	blt.w	1077e <_svfprintf_r+0x1972>
   105f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   105f6:	f013 0f01 	tst.w	r3, #1
   105fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   105fc:	f000 814d 	beq.w	1089a <_svfprintf_r+0x1a8e>
   10600:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10602:	4413      	add	r3, r2
   10604:	930a      	str	r3, [sp, #40]	; 0x28
   10606:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10608:	0559      	lsls	r1, r3, #21
   1060a:	d503      	bpl.n	10614 <_svfprintf_r+0x1808>
   1060c:	9b11      	ldr	r3, [sp, #68]	; 0x44
   1060e:	2b00      	cmp	r3, #0
   10610:	f300 8156 	bgt.w	108c0 <_svfprintf_r+0x1ab4>
   10614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10616:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1061a:	9307      	str	r3, [sp, #28]
   1061c:	2367      	movs	r3, #103	; 0x67
   1061e:	9310      	str	r3, [sp, #64]	; 0x40
   10620:	2300      	movs	r3, #0
   10622:	9312      	str	r3, [sp, #72]	; 0x48
   10624:	9316      	str	r3, [sp, #88]	; 0x58
   10626:	e6de      	b.n	103e6 <_svfprintf_r+0x15da>
   10628:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1062a:	07db      	lsls	r3, r3, #31
   1062c:	f100 809f 	bmi.w	1076e <_svfprintf_r+0x1962>
   10630:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   10632:	e669      	b.n	10308 <_svfprintf_r+0x14fc>
   10634:	aa2c      	add	r2, sp, #176	; 0xb0
   10636:	4641      	mov	r1, r8
   10638:	4650      	mov	r0, sl
   1063a:	f001 fc51 	bl	11ee0 <__ssprint_r>
   1063e:	2800      	cmp	r0, #0
   10640:	f47f a84f 	bne.w	f6e2 <_svfprintf_r+0x8d6>
   10644:	7838      	ldrb	r0, [r7, #0]
   10646:	992e      	ldr	r1, [sp, #184]	; 0xb8
   10648:	aa2f      	add	r2, sp, #188	; 0xbc
   1064a:	4405      	add	r5, r0
   1064c:	f7ff bbc1 	b.w	fdd2 <_svfprintf_r+0xfc6>
   10650:	2378      	movs	r3, #120	; 0x78
   10652:	f88d 3089 	strb.w	r3, [sp, #137]	; 0x89
   10656:	2330      	movs	r3, #48	; 0x30
   10658:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
   1065c:	f04b 0302 	orr.w	r3, fp, #2
   10660:	930f      	str	r3, [sp, #60]	; 0x3c
   10662:	9b08      	ldr	r3, [sp, #32]
   10664:	2b63      	cmp	r3, #99	; 0x63
   10666:	f300 80ed 	bgt.w	10844 <_svfprintf_r+0x1a38>
   1066a:	2300      	movs	r3, #0
   1066c:	930d      	str	r3, [sp, #52]	; 0x34
   1066e:	ac3f      	add	r4, sp, #252	; 0xfc
   10670:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   10674:	4613      	mov	r3, r2
   10676:	2b00      	cmp	r3, #0
   10678:	f44b 7b81 	orr.w	fp, fp, #258	; 0x102
   1067c:	db67      	blt.n	1074e <_svfprintf_r+0x1942>
   1067e:	461e      	mov	r6, r3
   10680:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10682:	f023 0320 	bic.w	r3, r3, #32
   10686:	9307      	str	r3, [sp, #28]
   10688:	2300      	movs	r3, #0
   1068a:	460f      	mov	r7, r1
   1068c:	931e      	str	r3, [sp, #120]	; 0x78
   1068e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10690:	2b61      	cmp	r3, #97	; 0x61
   10692:	f47f aaa4 	bne.w	fbde <_svfprintf_r+0xdd2>
   10696:	4638      	mov	r0, r7
   10698:	4631      	mov	r1, r6
   1069a:	aa23      	add	r2, sp, #140	; 0x8c
   1069c:	f000 fb10 	bl	10cc0 <frexp>
   106a0:	2200      	movs	r2, #0
   106a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   106a6:	f003 f8b7 	bl	13818 <__aeabi_dmul>
   106aa:	2200      	movs	r2, #0
   106ac:	2300      	movs	r3, #0
   106ae:	4606      	mov	r6, r0
   106b0:	460f      	mov	r7, r1
   106b2:	f7fc faeb 	bl	cc8c <__aeabi_dcmpeq>
   106b6:	b108      	cbz	r0, 106bc <_svfprintf_r+0x18b0>
   106b8:	2301      	movs	r3, #1
   106ba:	9323      	str	r3, [sp, #140]	; 0x8c
   106bc:	4b3d      	ldr	r3, [pc, #244]	; (107b4 <_svfprintf_r+0x19a8>)
   106be:	930a      	str	r3, [sp, #40]	; 0x28
   106c0:	e6fb      	b.n	104ba <_svfprintf_r+0x16ae>
   106c2:	990c      	ldr	r1, [sp, #48]	; 0x30
   106c4:	aa2c      	add	r2, sp, #176	; 0xb0
   106c6:	4650      	mov	r0, sl
   106c8:	f001 fc0a 	bl	11ee0 <__ssprint_r>
   106cc:	2800      	cmp	r0, #0
   106ce:	f47f a808 	bne.w	f6e2 <_svfprintf_r+0x8d6>
   106d2:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   106d4:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   106d8:	f7ff b918 	b.w	f90c <_svfprintf_r+0xb00>
   106dc:	990c      	ldr	r1, [sp, #48]	; 0x30
   106de:	aa2c      	add	r2, sp, #176	; 0xb0
   106e0:	4650      	mov	r0, sl
   106e2:	f001 fbfd 	bl	11ee0 <__ssprint_r>
   106e6:	2800      	cmp	r0, #0
   106e8:	f47e affb 	bne.w	f6e2 <_svfprintf_r+0x8d6>
   106ec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   106ee:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   106f0:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   106f4:	f7ff b92e 	b.w	f954 <_svfprintf_r+0xb48>
   106f8:	2358      	movs	r3, #88	; 0x58
   106fa:	e7aa      	b.n	10652 <_svfprintf_r+0x1846>
   106fc:	990c      	ldr	r1, [sp, #48]	; 0x30
   106fe:	aa2c      	add	r2, sp, #176	; 0xb0
   10700:	4650      	mov	r0, sl
   10702:	f001 fbed 	bl	11ee0 <__ssprint_r>
   10706:	2800      	cmp	r0, #0
   10708:	f47e afeb 	bne.w	f6e2 <_svfprintf_r+0x8d6>
   1070c:	9c23      	ldr	r4, [sp, #140]	; 0x8c
   1070e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10710:	9e2e      	ldr	r6, [sp, #184]	; 0xb8
   10712:	1b1c      	subs	r4, r3, r4
   10714:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10718:	f7ff b934 	b.w	f984 <_svfprintf_r+0xb78>
   1071c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
   1071e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10720:	9211      	str	r2, [sp, #68]	; 0x44
   10722:	2a00      	cmp	r2, #0
   10724:	f003 0301 	and.w	r3, r3, #1
   10728:	f340 8108 	ble.w	1093c <_svfprintf_r+0x1b30>
   1072c:	9908      	ldr	r1, [sp, #32]
   1072e:	430b      	orrs	r3, r1
   10730:	f040 80fd 	bne.w	1092e <_svfprintf_r+0x1b22>
   10734:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10736:	930a      	str	r3, [sp, #40]	; 0x28
   10738:	2366      	movs	r3, #102	; 0x66
   1073a:	9310      	str	r3, [sp, #64]	; 0x40
   1073c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1073e:	055a      	lsls	r2, r3, #21
   10740:	f100 80c0 	bmi.w	108c4 <_svfprintf_r+0x1ab8>
   10744:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10746:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1074a:	9307      	str	r3, [sp, #28]
   1074c:	e768      	b.n	10620 <_svfprintf_r+0x1814>
   1074e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   10750:	f023 0320 	bic.w	r3, r3, #32
   10754:	9307      	str	r3, [sp, #28]
   10756:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   1075a:	f103 4600 	add.w	r6, r3, #2147483648	; 0x80000000
   1075e:	232d      	movs	r3, #45	; 0x2d
   10760:	4617      	mov	r7, r2
   10762:	931e      	str	r3, [sp, #120]	; 0x78
   10764:	e793      	b.n	1068e <_svfprintf_r+0x1882>
   10766:	2200      	movs	r2, #0
   10768:	9208      	str	r2, [sp, #32]
   1076a:	f7fe bbaa 	b.w	eec2 <_svfprintf_r+0xb6>
   1076e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   10770:	4425      	add	r5, r4
   10772:	e5bf      	b.n	102f4 <_svfprintf_r+0x14e8>
   10774:	9a10      	ldr	r2, [sp, #64]	; 0x40
   10776:	320f      	adds	r2, #15
   10778:	b2d2      	uxtb	r2, r2
   1077a:	2101      	movs	r1, #1
   1077c:	e5da      	b.n	10334 <_svfprintf_r+0x1528>
   1077e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   10780:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   10782:	189a      	adds	r2, r3, r2
   10784:	9b11      	ldr	r3, [sp, #68]	; 0x44
   10786:	920a      	str	r2, [sp, #40]	; 0x28
   10788:	2b00      	cmp	r3, #0
   1078a:	f340 808f 	ble.w	108ac <_svfprintf_r+0x1aa0>
   1078e:	2367      	movs	r3, #103	; 0x67
   10790:	9310      	str	r3, [sp, #64]	; 0x40
   10792:	e7d3      	b.n	1073c <_svfprintf_r+0x1930>
   10794:	469b      	mov	fp, r3
   10796:	2300      	movs	r3, #0
   10798:	930d      	str	r3, [sp, #52]	; 0x34
   1079a:	e7dc      	b.n	10756 <_svfprintf_r+0x194a>
   1079c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1079e:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   107a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   107a6:	8193      	strh	r3, [r2, #12]
   107a8:	f7fe bc3b 	b.w	f022 <_svfprintf_r+0x216>
   107ac:	40300000 	.word	0x40300000
   107b0:	3fe00000 	.word	0x3fe00000
   107b4:	0001593c 	.word	0x0001593c
   107b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   107ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   107bc:	932a      	str	r3, [sp, #168]	; 0xa8
   107be:	7bd1      	ldrb	r1, [r2, #15]
   107c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   107c4:	428b      	cmp	r3, r1
   107c6:	462a      	mov	r2, r5
   107c8:	d109      	bne.n	107de <_svfprintf_r+0x19d2>
   107ca:	2030      	movs	r0, #48	; 0x30
   107cc:	f802 0c01 	strb.w	r0, [r2, #-1]
   107d0:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
   107d2:	1e53      	subs	r3, r2, #1
   107d4:	932a      	str	r3, [sp, #168]	; 0xa8
   107d6:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   107da:	4299      	cmp	r1, r3
   107dc:	d0f6      	beq.n	107cc <_svfprintf_r+0x19c0>
   107de:	2b39      	cmp	r3, #57	; 0x39
   107e0:	bf0b      	itete	eq
   107e2:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   107e4:	3301      	addne	r3, #1
   107e6:	7a9b      	ldrbeq	r3, [r3, #10]
   107e8:	b2db      	uxtbne	r3, r3
   107ea:	f802 3c01 	strb.w	r3, [r2, #-1]
   107ee:	e6c8      	b.n	10582 <_svfprintf_r+0x1776>
   107f0:	2900      	cmp	r1, #0
   107f2:	f040 808c 	bne.w	1090e <_svfprintf_r+0x1b02>
   107f6:	2230      	movs	r2, #48	; 0x30
   107f8:	f88d 209a 	strb.w	r2, [sp, #154]	; 0x9a
   107fc:	f10d 029b 	add.w	r2, sp, #155	; 0x9b
   10800:	3330      	adds	r3, #48	; 0x30
   10802:	f802 3b01 	strb.w	r3, [r2], #1
   10806:	ab26      	add	r3, sp, #152	; 0x98
   10808:	1ad3      	subs	r3, r2, r3
   1080a:	931b      	str	r3, [sp, #108]	; 0x6c
   1080c:	e5d3      	b.n	103b6 <_svfprintf_r+0x15aa>
   1080e:	464c      	mov	r4, r9
   10810:	4689      	mov	r9, r1
   10812:	3301      	adds	r3, #1
   10814:	443a      	add	r2, r7
   10816:	2b07      	cmp	r3, #7
   10818:	e9cd 322d 	strd	r3, r2, [sp, #180]	; 0xb4
   1081c:	f8c9 5000 	str.w	r5, [r9]
   10820:	f8c9 7004 	str.w	r7, [r9, #4]
   10824:	f77f abab 	ble.w	ff7e <_svfprintf_r+0x1172>
   10828:	990c      	ldr	r1, [sp, #48]	; 0x30
   1082a:	aa2c      	add	r2, sp, #176	; 0xb0
   1082c:	4650      	mov	r0, sl
   1082e:	f001 fb57 	bl	11ee0 <__ssprint_r>
   10832:	2800      	cmp	r0, #0
   10834:	f47e af55 	bne.w	f6e2 <_svfprintf_r+0x8d6>
   10838:	e9dd 322d 	ldrd	r3, r2, [sp, #180]	; 0xb4
   1083c:	f10d 09bc 	add.w	r9, sp, #188	; 0xbc
   10840:	f7ff bb9f 	b.w	ff82 <_svfprintf_r+0x1176>
   10844:	1c59      	adds	r1, r3, #1
   10846:	4650      	mov	r0, sl
   10848:	f7fc fdaa 	bl	d3a0 <_malloc_r>
   1084c:	4604      	mov	r4, r0
   1084e:	2800      	cmp	r0, #0
   10850:	d0a4      	beq.n	1079c <_svfprintf_r+0x1990>
   10852:	900d      	str	r0, [sp, #52]	; 0x34
   10854:	e70c      	b.n	10670 <_svfprintf_r+0x1864>
   10856:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   10858:	07d8      	lsls	r0, r3, #31
   1085a:	f57f adb7 	bpl.w	103cc <_svfprintf_r+0x15c0>
   1085e:	e5b1      	b.n	103c4 <_svfprintf_r+0x15b8>
   10860:	4638      	mov	r0, r7
   10862:	4631      	mov	r1, r6
   10864:	2200      	movs	r2, #0
   10866:	2300      	movs	r3, #0
   10868:	f7fc fa10 	bl	cc8c <__aeabi_dcmpeq>
   1086c:	2800      	cmp	r0, #0
   1086e:	f47f ad3f 	bne.w	102f0 <_svfprintf_r+0x14e4>
   10872:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10874:	f1c3 0301 	rsb	r3, r3, #1
   10878:	9323      	str	r3, [sp, #140]	; 0x8c
   1087a:	e53a      	b.n	102f2 <_svfprintf_r+0x14e6>
   1087c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1087e:	4c4a      	ldr	r4, [pc, #296]	; (109a8 <_svfprintf_r+0x1b9c>)
   10880:	2b00      	cmp	r3, #0
   10882:	bfb4      	ite	lt
   10884:	222d      	movlt	r2, #45	; 0x2d
   10886:	f89d 2087 	ldrbge.w	r2, [sp, #135]	; 0x87
   1088a:	4b48      	ldr	r3, [pc, #288]	; (109ac <_svfprintf_r+0x1ba0>)
   1088c:	bfb8      	it	lt
   1088e:	f88d 2087 	strblt.w	r2, [sp, #135]	; 0x87
   10892:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
   10896:	f7fe bc90 	b.w	f1ba <_svfprintf_r+0x3ae>
   1089a:	930a      	str	r3, [sp, #40]	; 0x28
   1089c:	e6b3      	b.n	10606 <_svfprintf_r+0x17fa>
   1089e:	9b08      	ldr	r3, [sp, #32]
   108a0:	f8dd 801c 	ldr.w	r8, [sp, #28]
   108a4:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   108a8:	930a      	str	r3, [sp, #40]	; 0x28
   108aa:	e490      	b.n	101ce <_svfprintf_r+0x13c2>
   108ac:	f1c3 0301 	rsb	r3, r3, #1
   108b0:	441a      	add	r2, r3
   108b2:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   108b6:	9307      	str	r3, [sp, #28]
   108b8:	2367      	movs	r3, #103	; 0x67
   108ba:	920a      	str	r2, [sp, #40]	; 0x28
   108bc:	9310      	str	r3, [sp, #64]	; 0x40
   108be:	e6af      	b.n	10620 <_svfprintf_r+0x1814>
   108c0:	2367      	movs	r3, #103	; 0x67
   108c2:	9310      	str	r3, [sp, #64]	; 0x40
   108c4:	991a      	ldr	r1, [sp, #104]	; 0x68
   108c6:	780b      	ldrb	r3, [r1, #0]
   108c8:	2bff      	cmp	r3, #255	; 0xff
   108ca:	d059      	beq.n	10980 <_svfprintf_r+0x1b74>
   108cc:	2500      	movs	r5, #0
   108ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
   108d0:	4628      	mov	r0, r5
   108d2:	e003      	b.n	108dc <_svfprintf_r+0x1ad0>
   108d4:	3001      	adds	r0, #1
   108d6:	3101      	adds	r1, #1
   108d8:	2bff      	cmp	r3, #255	; 0xff
   108da:	d008      	beq.n	108ee <_svfprintf_r+0x1ae2>
   108dc:	4293      	cmp	r3, r2
   108de:	da06      	bge.n	108ee <_svfprintf_r+0x1ae2>
   108e0:	1ad2      	subs	r2, r2, r3
   108e2:	784b      	ldrb	r3, [r1, #1]
   108e4:	2b00      	cmp	r3, #0
   108e6:	d1f5      	bne.n	108d4 <_svfprintf_r+0x1ac8>
   108e8:	780b      	ldrb	r3, [r1, #0]
   108ea:	3501      	adds	r5, #1
   108ec:	e7f4      	b.n	108d8 <_svfprintf_r+0x1acc>
   108ee:	9211      	str	r2, [sp, #68]	; 0x44
   108f0:	911a      	str	r1, [sp, #104]	; 0x68
   108f2:	9016      	str	r0, [sp, #88]	; 0x58
   108f4:	9512      	str	r5, [sp, #72]	; 0x48
   108f6:	9a12      	ldr	r2, [sp, #72]	; 0x48
   108f8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   108fa:	991d      	ldr	r1, [sp, #116]	; 0x74
   108fc:	4413      	add	r3, r2
   108fe:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   10900:	fb01 2303 	mla	r3, r1, r3, r2
   10904:	930a      	str	r3, [sp, #40]	; 0x28
   10906:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   1090a:	9307      	str	r3, [sp, #28]
   1090c:	e56b      	b.n	103e6 <_svfprintf_r+0x15da>
   1090e:	f10d 029a 	add.w	r2, sp, #154	; 0x9a
   10912:	e775      	b.n	10800 <_svfprintf_r+0x19f4>
   10914:	9b08      	ldr	r3, [sp, #32]
   10916:	9307      	str	r3, [sp, #28]
   10918:	930a      	str	r3, [sp, #40]	; 0x28
   1091a:	2373      	movs	r3, #115	; 0x73
   1091c:	f89d 2087 	ldrb.w	r2, [sp, #135]	; 0x87
   10920:	970e      	str	r7, [sp, #56]	; 0x38
   10922:	9008      	str	r0, [sp, #32]
   10924:	9012      	str	r0, [sp, #72]	; 0x48
   10926:	9016      	str	r0, [sp, #88]	; 0x58
   10928:	9310      	str	r3, [sp, #64]	; 0x40
   1092a:	f7fe bc53 	b.w	f1d4 <_svfprintf_r+0x3c8>
   1092e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10930:	18d5      	adds	r5, r2, r3
   10932:	4429      	add	r1, r5
   10934:	2366      	movs	r3, #102	; 0x66
   10936:	910a      	str	r1, [sp, #40]	; 0x28
   10938:	9310      	str	r3, [sp, #64]	; 0x40
   1093a:	e6ff      	b.n	1073c <_svfprintf_r+0x1930>
   1093c:	9a08      	ldr	r2, [sp, #32]
   1093e:	4313      	orrs	r3, r2
   10940:	d105      	bne.n	1094e <_svfprintf_r+0x1b42>
   10942:	2301      	movs	r3, #1
   10944:	2266      	movs	r2, #102	; 0x66
   10946:	9307      	str	r3, [sp, #28]
   10948:	9210      	str	r2, [sp, #64]	; 0x40
   1094a:	930a      	str	r3, [sp, #40]	; 0x28
   1094c:	e668      	b.n	10620 <_svfprintf_r+0x1814>
   1094e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   10950:	1c5d      	adds	r5, r3, #1
   10952:	442a      	add	r2, r5
   10954:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   10958:	9307      	str	r3, [sp, #28]
   1095a:	2366      	movs	r3, #102	; 0x66
   1095c:	920a      	str	r2, [sp, #40]	; 0x28
   1095e:	9310      	str	r3, [sp, #64]	; 0x40
   10960:	e65e      	b.n	10620 <_svfprintf_r+0x1814>
   10962:	2302      	movs	r3, #2
   10964:	931b      	str	r3, [sp, #108]	; 0x6c
   10966:	e526      	b.n	103b6 <_svfprintf_r+0x15aa>
   10968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   1096a:	f898 3001 	ldrb.w	r3, [r8, #1]
   1096e:	4688      	mov	r8, r1
   10970:	f852 1b04 	ldr.w	r1, [r2], #4
   10974:	920e      	str	r2, [sp, #56]	; 0x38
   10976:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   1097a:	9108      	str	r1, [sp, #32]
   1097c:	f7fe ba9f 	b.w	eebe <_svfprintf_r+0xb2>
   10980:	2300      	movs	r3, #0
   10982:	9312      	str	r3, [sp, #72]	; 0x48
   10984:	9316      	str	r3, [sp, #88]	; 0x58
   10986:	e7b6      	b.n	108f6 <_svfprintf_r+0x1aea>
   10988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1098a:	8993      	ldrh	r3, [r2, #12]
   1098c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10990:	8193      	strh	r3, [r2, #12]
   10992:	f7fe bea6 	b.w	f6e2 <_svfprintf_r+0x8d6>
   10996:	230c      	movs	r3, #12
   10998:	f8ca 3000 	str.w	r3, [sl]
   1099c:	f04f 33ff 	mov.w	r3, #4294967295
   109a0:	9309      	str	r3, [sp, #36]	; 0x24
   109a2:	f7fe bb45 	b.w	f030 <_svfprintf_r+0x224>
   109a6:	bf00      	nop
   109a8:	00015938 	.word	0x00015938
   109ac:	000154a8 	.word	0x000154a8

000109b0 <_fclose_r>:
   109b0:	b570      	push	{r4, r5, r6, lr}
   109b2:	2900      	cmp	r1, #0
   109b4:	d04b      	beq.n	10a4e <_fclose_r+0x9e>
   109b6:	4606      	mov	r6, r0
   109b8:	460c      	mov	r4, r1
   109ba:	b110      	cbz	r0, 109c2 <_fclose_r+0x12>
   109bc:	6b43      	ldr	r3, [r0, #52]	; 0x34
   109be:	2b00      	cmp	r3, #0
   109c0:	d048      	beq.n	10a54 <_fclose_r+0xa4>
   109c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   109c4:	07d8      	lsls	r0, r3, #31
   109c6:	d534      	bpl.n	10a32 <_fclose_r+0x82>
   109c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   109cc:	2b00      	cmp	r3, #0
   109ce:	d03e      	beq.n	10a4e <_fclose_r+0x9e>
   109d0:	4621      	mov	r1, r4
   109d2:	4630      	mov	r0, r6
   109d4:	f000 f850 	bl	10a78 <__sflush_r>
   109d8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   109da:	4605      	mov	r5, r0
   109dc:	b133      	cbz	r3, 109ec <_fclose_r+0x3c>
   109de:	69e1      	ldr	r1, [r4, #28]
   109e0:	4630      	mov	r0, r6
   109e2:	4798      	blx	r3
   109e4:	2800      	cmp	r0, #0
   109e6:	bfb8      	it	lt
   109e8:	f04f 35ff 	movlt.w	r5, #4294967295
   109ec:	89a3      	ldrh	r3, [r4, #12]
   109ee:	061a      	lsls	r2, r3, #24
   109f0:	d43c      	bmi.n	10a6c <_fclose_r+0xbc>
   109f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   109f4:	b141      	cbz	r1, 10a08 <_fclose_r+0x58>
   109f6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   109fa:	4299      	cmp	r1, r3
   109fc:	d002      	beq.n	10a04 <_fclose_r+0x54>
   109fe:	4630      	mov	r0, r6
   10a00:	f7fd fd2c 	bl	e45c <_free_r>
   10a04:	2300      	movs	r3, #0
   10a06:	6323      	str	r3, [r4, #48]	; 0x30
   10a08:	6c61      	ldr	r1, [r4, #68]	; 0x44
   10a0a:	b121      	cbz	r1, 10a16 <_fclose_r+0x66>
   10a0c:	4630      	mov	r0, r6
   10a0e:	f7fd fd25 	bl	e45c <_free_r>
   10a12:	2300      	movs	r3, #0
   10a14:	6463      	str	r3, [r4, #68]	; 0x44
   10a16:	f7fd fa1f 	bl	de58 <__sfp_lock_acquire>
   10a1a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10a1c:	2200      	movs	r2, #0
   10a1e:	07db      	lsls	r3, r3, #31
   10a20:	81a2      	strh	r2, [r4, #12]
   10a22:	d51f      	bpl.n	10a64 <_fclose_r+0xb4>
   10a24:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10a26:	f7fd fc45 	bl	e2b4 <__retarget_lock_close_recursive>
   10a2a:	f7fd fa1b 	bl	de64 <__sfp_lock_release>
   10a2e:	4628      	mov	r0, r5
   10a30:	bd70      	pop	{r4, r5, r6, pc}
   10a32:	89a3      	ldrh	r3, [r4, #12]
   10a34:	0599      	lsls	r1, r3, #22
   10a36:	d4cb      	bmi.n	109d0 <_fclose_r+0x20>
   10a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10a3a:	f7fd fc3d 	bl	e2b8 <__retarget_lock_acquire_recursive>
   10a3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10a42:	2b00      	cmp	r3, #0
   10a44:	d1c4      	bne.n	109d0 <_fclose_r+0x20>
   10a46:	6e65      	ldr	r5, [r4, #100]	; 0x64
   10a48:	f015 0501 	ands.w	r5, r5, #1
   10a4c:	d005      	beq.n	10a5a <_fclose_r+0xaa>
   10a4e:	2500      	movs	r5, #0
   10a50:	4628      	mov	r0, r5
   10a52:	bd70      	pop	{r4, r5, r6, pc}
   10a54:	f7fd f9e2 	bl	de1c <__sinit>
   10a58:	e7b3      	b.n	109c2 <_fclose_r+0x12>
   10a5a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10a5c:	f7fd fc2e 	bl	e2bc <__retarget_lock_release_recursive>
   10a60:	4628      	mov	r0, r5
   10a62:	bd70      	pop	{r4, r5, r6, pc}
   10a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10a66:	f7fd fc29 	bl	e2bc <__retarget_lock_release_recursive>
   10a6a:	e7db      	b.n	10a24 <_fclose_r+0x74>
   10a6c:	6921      	ldr	r1, [r4, #16]
   10a6e:	4630      	mov	r0, r6
   10a70:	f7fd fcf4 	bl	e45c <_free_r>
   10a74:	e7bd      	b.n	109f2 <_fclose_r+0x42>
   10a76:	bf00      	nop

00010a78 <__sflush_r>:
   10a78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   10a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a7e:	460c      	mov	r4, r1
   10a80:	0711      	lsls	r1, r2, #28
   10a82:	4607      	mov	r7, r0
   10a84:	d442      	bmi.n	10b0c <__sflush_r+0x94>
   10a86:	6863      	ldr	r3, [r4, #4]
   10a88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   10a8c:	2b00      	cmp	r3, #0
   10a8e:	81a2      	strh	r2, [r4, #12]
   10a90:	dd59      	ble.n	10b46 <__sflush_r+0xce>
   10a92:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10a94:	2d00      	cmp	r5, #0
   10a96:	d054      	beq.n	10b42 <__sflush_r+0xca>
   10a98:	2300      	movs	r3, #0
   10a9a:	683e      	ldr	r6, [r7, #0]
   10a9c:	603b      	str	r3, [r7, #0]
   10a9e:	b293      	uxth	r3, r2
   10aa0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   10aa4:	d153      	bne.n	10b4e <__sflush_r+0xd6>
   10aa6:	69e1      	ldr	r1, [r4, #28]
   10aa8:	2301      	movs	r3, #1
   10aaa:	4638      	mov	r0, r7
   10aac:	47a8      	blx	r5
   10aae:	1c42      	adds	r2, r0, #1
   10ab0:	d063      	beq.n	10b7a <__sflush_r+0x102>
   10ab2:	89a3      	ldrh	r3, [r4, #12]
   10ab4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   10ab6:	075b      	lsls	r3, r3, #29
   10ab8:	d505      	bpl.n	10ac6 <__sflush_r+0x4e>
   10aba:	6863      	ldr	r3, [r4, #4]
   10abc:	1ac0      	subs	r0, r0, r3
   10abe:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10ac0:	b10b      	cbz	r3, 10ac6 <__sflush_r+0x4e>
   10ac2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10ac4:	1ac0      	subs	r0, r0, r3
   10ac6:	69e1      	ldr	r1, [r4, #28]
   10ac8:	4602      	mov	r2, r0
   10aca:	2300      	movs	r3, #0
   10acc:	4638      	mov	r0, r7
   10ace:	47a8      	blx	r5
   10ad0:	1c41      	adds	r1, r0, #1
   10ad2:	d13e      	bne.n	10b52 <__sflush_r+0xda>
   10ad4:	683b      	ldr	r3, [r7, #0]
   10ad6:	2b00      	cmp	r3, #0
   10ad8:	d03b      	beq.n	10b52 <__sflush_r+0xda>
   10ada:	2b1d      	cmp	r3, #29
   10adc:	d001      	beq.n	10ae2 <__sflush_r+0x6a>
   10ade:	2b16      	cmp	r3, #22
   10ae0:	d152      	bne.n	10b88 <__sflush_r+0x110>
   10ae2:	89a3      	ldrh	r3, [r4, #12]
   10ae4:	6922      	ldr	r2, [r4, #16]
   10ae6:	6022      	str	r2, [r4, #0]
   10ae8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10aec:	2100      	movs	r1, #0
   10aee:	6061      	str	r1, [r4, #4]
   10af0:	81a3      	strh	r3, [r4, #12]
   10af2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   10af4:	603e      	str	r6, [r7, #0]
   10af6:	b321      	cbz	r1, 10b42 <__sflush_r+0xca>
   10af8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   10afc:	4299      	cmp	r1, r3
   10afe:	d002      	beq.n	10b06 <__sflush_r+0x8e>
   10b00:	4638      	mov	r0, r7
   10b02:	f7fd fcab 	bl	e45c <_free_r>
   10b06:	2000      	movs	r0, #0
   10b08:	6320      	str	r0, [r4, #48]	; 0x30
   10b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b0c:	6926      	ldr	r6, [r4, #16]
   10b0e:	b1c6      	cbz	r6, 10b42 <__sflush_r+0xca>
   10b10:	b293      	uxth	r3, r2
   10b12:	6825      	ldr	r5, [r4, #0]
   10b14:	6026      	str	r6, [r4, #0]
   10b16:	079a      	lsls	r2, r3, #30
   10b18:	bf0c      	ite	eq
   10b1a:	6963      	ldreq	r3, [r4, #20]
   10b1c:	2300      	movne	r3, #0
   10b1e:	1bad      	subs	r5, r5, r6
   10b20:	60a3      	str	r3, [r4, #8]
   10b22:	e00c      	b.n	10b3e <__sflush_r+0xc6>
   10b24:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   10b28:	69e1      	ldr	r1, [r4, #28]
   10b2a:	462b      	mov	r3, r5
   10b2c:	4632      	mov	r2, r6
   10b2e:	4638      	mov	r0, r7
   10b30:	47e0      	blx	ip
   10b32:	f1b0 0c00 	subs.w	ip, r0, #0
   10b36:	eba5 050c 	sub.w	r5, r5, ip
   10b3a:	4466      	add	r6, ip
   10b3c:	dd16      	ble.n	10b6c <__sflush_r+0xf4>
   10b3e:	2d00      	cmp	r5, #0
   10b40:	dcf0      	bgt.n	10b24 <__sflush_r+0xac>
   10b42:	2000      	movs	r0, #0
   10b44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b46:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   10b48:	2b00      	cmp	r3, #0
   10b4a:	dca2      	bgt.n	10a92 <__sflush_r+0x1a>
   10b4c:	e7f9      	b.n	10b42 <__sflush_r+0xca>
   10b4e:	6d20      	ldr	r0, [r4, #80]	; 0x50
   10b50:	e7b1      	b.n	10ab6 <__sflush_r+0x3e>
   10b52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   10b56:	6922      	ldr	r2, [r4, #16]
   10b58:	6022      	str	r2, [r4, #0]
   10b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   10b5e:	81a3      	strh	r3, [r4, #12]
   10b60:	2200      	movs	r2, #0
   10b62:	04db      	lsls	r3, r3, #19
   10b64:	6062      	str	r2, [r4, #4]
   10b66:	d5c4      	bpl.n	10af2 <__sflush_r+0x7a>
   10b68:	6520      	str	r0, [r4, #80]	; 0x50
   10b6a:	e7c2      	b.n	10af2 <__sflush_r+0x7a>
   10b6c:	89a3      	ldrh	r3, [r4, #12]
   10b6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10b72:	f04f 30ff 	mov.w	r0, #4294967295
   10b76:	81a3      	strh	r3, [r4, #12]
   10b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b7a:	683b      	ldr	r3, [r7, #0]
   10b7c:	2b00      	cmp	r3, #0
   10b7e:	d098      	beq.n	10ab2 <__sflush_r+0x3a>
   10b80:	2b1d      	cmp	r3, #29
   10b82:	d006      	beq.n	10b92 <__sflush_r+0x11a>
   10b84:	2b16      	cmp	r3, #22
   10b86:	d004      	beq.n	10b92 <__sflush_r+0x11a>
   10b88:	89a3      	ldrh	r3, [r4, #12]
   10b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10b8e:	81a3      	strh	r3, [r4, #12]
   10b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10b92:	603e      	str	r6, [r7, #0]
   10b94:	e7d5      	b.n	10b42 <__sflush_r+0xca>
   10b96:	bf00      	nop

00010b98 <_fflush_r>:
   10b98:	b538      	push	{r3, r4, r5, lr}
   10b9a:	460c      	mov	r4, r1
   10b9c:	4605      	mov	r5, r0
   10b9e:	b108      	cbz	r0, 10ba4 <_fflush_r+0xc>
   10ba0:	6b43      	ldr	r3, [r0, #52]	; 0x34
   10ba2:	b303      	cbz	r3, 10be6 <_fflush_r+0x4e>
   10ba4:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   10ba8:	b188      	cbz	r0, 10bce <_fflush_r+0x36>
   10baa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10bac:	07db      	lsls	r3, r3, #31
   10bae:	d401      	bmi.n	10bb4 <_fflush_r+0x1c>
   10bb0:	0581      	lsls	r1, r0, #22
   10bb2:	d50f      	bpl.n	10bd4 <_fflush_r+0x3c>
   10bb4:	4628      	mov	r0, r5
   10bb6:	4621      	mov	r1, r4
   10bb8:	f7ff ff5e 	bl	10a78 <__sflush_r>
   10bbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   10bbe:	07da      	lsls	r2, r3, #31
   10bc0:	4605      	mov	r5, r0
   10bc2:	d402      	bmi.n	10bca <_fflush_r+0x32>
   10bc4:	89a3      	ldrh	r3, [r4, #12]
   10bc6:	059b      	lsls	r3, r3, #22
   10bc8:	d508      	bpl.n	10bdc <_fflush_r+0x44>
   10bca:	4628      	mov	r0, r5
   10bcc:	bd38      	pop	{r3, r4, r5, pc}
   10bce:	4605      	mov	r5, r0
   10bd0:	4628      	mov	r0, r5
   10bd2:	bd38      	pop	{r3, r4, r5, pc}
   10bd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10bd6:	f7fd fb6f 	bl	e2b8 <__retarget_lock_acquire_recursive>
   10bda:	e7eb      	b.n	10bb4 <_fflush_r+0x1c>
   10bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   10bde:	f7fd fb6d 	bl	e2bc <__retarget_lock_release_recursive>
   10be2:	4628      	mov	r0, r5
   10be4:	bd38      	pop	{r3, r4, r5, pc}
   10be6:	f7fd f919 	bl	de1c <__sinit>
   10bea:	e7db      	b.n	10ba4 <_fflush_r+0xc>

00010bec <_localeconv_r>:
   10bec:	4800      	ldr	r0, [pc, #0]	; (10bf0 <_localeconv_r+0x4>)
   10bee:	4770      	bx	lr
   10bf0:	1fff8fc4 	.word	0x1fff8fc4

00010bf4 <__libc_fini_array>:
   10bf4:	b538      	push	{r3, r4, r5, lr}
   10bf6:	4d07      	ldr	r5, [pc, #28]	; (10c14 <__libc_fini_array+0x20>)
   10bf8:	4c07      	ldr	r4, [pc, #28]	; (10c18 <__libc_fini_array+0x24>)
   10bfa:	1b2c      	subs	r4, r5, r4
   10bfc:	10a4      	asrs	r4, r4, #2
   10bfe:	d005      	beq.n	10c0c <__libc_fini_array+0x18>
   10c00:	3c01      	subs	r4, #1
   10c02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   10c06:	4798      	blx	r3
   10c08:	2c00      	cmp	r4, #0
   10c0a:	d1f9      	bne.n	10c00 <__libc_fini_array+0xc>
   10c0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   10c10:	f004 bf32 	b.w	15a78 <__init_array_end>
	...
   10c1c:	ffffffff 	.word	0xffffffff

00010c20 <memchr>:
   10c20:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   10c24:	2a10      	cmp	r2, #16
   10c26:	db2b      	blt.n	10c80 <memchr+0x60>
   10c28:	f010 0f07 	tst.w	r0, #7
   10c2c:	d008      	beq.n	10c40 <memchr+0x20>
   10c2e:	f810 3b01 	ldrb.w	r3, [r0], #1
   10c32:	3a01      	subs	r2, #1
   10c34:	428b      	cmp	r3, r1
   10c36:	d02d      	beq.n	10c94 <memchr+0x74>
   10c38:	f010 0f07 	tst.w	r0, #7
   10c3c:	b342      	cbz	r2, 10c90 <memchr+0x70>
   10c3e:	d1f6      	bne.n	10c2e <memchr+0xe>
   10c40:	b4f0      	push	{r4, r5, r6, r7}
   10c42:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
   10c46:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
   10c4a:	f022 0407 	bic.w	r4, r2, #7
   10c4e:	f07f 0700 	mvns.w	r7, #0
   10c52:	2300      	movs	r3, #0
   10c54:	e8f0 5602 	ldrd	r5, r6, [r0], #8
   10c58:	3c08      	subs	r4, #8
   10c5a:	ea85 0501 	eor.w	r5, r5, r1
   10c5e:	ea86 0601 	eor.w	r6, r6, r1
   10c62:	fa85 f547 	uadd8	r5, r5, r7
   10c66:	faa3 f587 	sel	r5, r3, r7
   10c6a:	fa86 f647 	uadd8	r6, r6, r7
   10c6e:	faa5 f687 	sel	r6, r5, r7
   10c72:	b98e      	cbnz	r6, 10c98 <memchr+0x78>
   10c74:	d1ee      	bne.n	10c54 <memchr+0x34>
   10c76:	bcf0      	pop	{r4, r5, r6, r7}
   10c78:	f001 01ff 	and.w	r1, r1, #255	; 0xff
   10c7c:	f002 0207 	and.w	r2, r2, #7
   10c80:	b132      	cbz	r2, 10c90 <memchr+0x70>
   10c82:	f810 3b01 	ldrb.w	r3, [r0], #1
   10c86:	3a01      	subs	r2, #1
   10c88:	ea83 0301 	eor.w	r3, r3, r1
   10c8c:	b113      	cbz	r3, 10c94 <memchr+0x74>
   10c8e:	d1f8      	bne.n	10c82 <memchr+0x62>
   10c90:	2000      	movs	r0, #0
   10c92:	4770      	bx	lr
   10c94:	3801      	subs	r0, #1
   10c96:	4770      	bx	lr
   10c98:	2d00      	cmp	r5, #0
   10c9a:	bf06      	itte	eq
   10c9c:	4635      	moveq	r5, r6
   10c9e:	3803      	subeq	r0, #3
   10ca0:	3807      	subne	r0, #7
   10ca2:	f015 0f01 	tst.w	r5, #1
   10ca6:	d107      	bne.n	10cb8 <memchr+0x98>
   10ca8:	3001      	adds	r0, #1
   10caa:	f415 7f80 	tst.w	r5, #256	; 0x100
   10cae:	bf02      	ittt	eq
   10cb0:	3001      	addeq	r0, #1
   10cb2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
   10cb6:	3001      	addeq	r0, #1
   10cb8:	bcf0      	pop	{r4, r5, r6, r7}
   10cba:	3801      	subs	r0, #1
   10cbc:	4770      	bx	lr
   10cbe:	bf00      	nop

00010cc0 <frexp>:
   10cc0:	f8df c060 	ldr.w	ip, [pc, #96]	; 10d24 <frexp+0x64>
   10cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10cc6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10cca:	2700      	movs	r7, #0
   10ccc:	4563      	cmp	r3, ip
   10cce:	4604      	mov	r4, r0
   10cd0:	460d      	mov	r5, r1
   10cd2:	4616      	mov	r6, r2
   10cd4:	6017      	str	r7, [r2, #0]
   10cd6:	dc22      	bgt.n	10d1e <frexp+0x5e>
   10cd8:	4684      	mov	ip, r0
   10cda:	ea53 0c0c 	orrs.w	ip, r3, ip
   10cde:	d01e      	beq.n	10d1e <frexp+0x5e>
   10ce0:	f8df c044 	ldr.w	ip, [pc, #68]	; 10d28 <frexp+0x68>
   10ce4:	ea01 0c0c 	and.w	ip, r1, ip
   10ce8:	460a      	mov	r2, r1
   10cea:	f1bc 0f00 	cmp.w	ip, #0
   10cee:	d109      	bne.n	10d04 <frexp+0x44>
   10cf0:	4b0e      	ldr	r3, [pc, #56]	; (10d2c <frexp+0x6c>)
   10cf2:	2200      	movs	r2, #0
   10cf4:	f002 fd90 	bl	13818 <__aeabi_dmul>
   10cf8:	f06f 0735 	mvn.w	r7, #53	; 0x35
   10cfc:	4604      	mov	r4, r0
   10cfe:	460a      	mov	r2, r1
   10d00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   10d04:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   10d08:	151b      	asrs	r3, r3, #20
   10d0a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   10d0e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   10d12:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   10d16:	443b      	add	r3, r7
   10d18:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   10d1c:	6033      	str	r3, [r6, #0]
   10d1e:	4620      	mov	r0, r4
   10d20:	4629      	mov	r1, r5
   10d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10d24:	7fefffff 	.word	0x7fefffff
   10d28:	7ff00000 	.word	0x7ff00000
   10d2c:	43500000 	.word	0x43500000

00010d30 <__register_exitproc>:
   10d30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10d34:	f8df a074 	ldr.w	sl, [pc, #116]	; 10dac <__register_exitproc+0x7c>
   10d38:	4606      	mov	r6, r0
   10d3a:	f8da 0000 	ldr.w	r0, [sl]
   10d3e:	4698      	mov	r8, r3
   10d40:	460f      	mov	r7, r1
   10d42:	4691      	mov	r9, r2
   10d44:	f7fd fab8 	bl	e2b8 <__retarget_lock_acquire_recursive>
   10d48:	4b19      	ldr	r3, [pc, #100]	; (10db0 <__register_exitproc+0x80>)
   10d4a:	681c      	ldr	r4, [r3, #0]
   10d4c:	b324      	cbz	r4, 10d98 <__register_exitproc+0x68>
   10d4e:	6865      	ldr	r5, [r4, #4]
   10d50:	2d1f      	cmp	r5, #31
   10d52:	dc24      	bgt.n	10d9e <__register_exitproc+0x6e>
   10d54:	b95e      	cbnz	r6, 10d6e <__register_exitproc+0x3e>
   10d56:	1c6b      	adds	r3, r5, #1
   10d58:	3502      	adds	r5, #2
   10d5a:	f8da 0000 	ldr.w	r0, [sl]
   10d5e:	6063      	str	r3, [r4, #4]
   10d60:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   10d64:	f7fd faaa 	bl	e2bc <__retarget_lock_release_recursive>
   10d68:	2000      	movs	r0, #0
   10d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   10d6e:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   10d72:	2301      	movs	r3, #1
   10d74:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   10d78:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   10d7c:	40ab      	lsls	r3, r5
   10d7e:	431a      	orrs	r2, r3
   10d80:	2e02      	cmp	r6, #2
   10d82:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   10d86:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   10d8a:	d1e4      	bne.n	10d56 <__register_exitproc+0x26>
   10d8c:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   10d90:	431a      	orrs	r2, r3
   10d92:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
   10d96:	e7de      	b.n	10d56 <__register_exitproc+0x26>
   10d98:	4c06      	ldr	r4, [pc, #24]	; (10db4 <__register_exitproc+0x84>)
   10d9a:	601c      	str	r4, [r3, #0]
   10d9c:	e7d7      	b.n	10d4e <__register_exitproc+0x1e>
   10d9e:	f8da 0000 	ldr.w	r0, [sl]
   10da2:	f7fd fa8b 	bl	e2bc <__retarget_lock_release_recursive>
   10da6:	f04f 30ff 	mov.w	r0, #4294967295
   10daa:	e7de      	b.n	10d6a <__register_exitproc+0x3a>
   10dac:	1fff9164 	.word	0x1fff9164
   10db0:	1fffd778 	.word	0x1fffd778
   10db4:	1fffd77c 	.word	0x1fffd77c

00010db8 <__assert_func>:
   10db8:	b500      	push	{lr}
   10dba:	4c0b      	ldr	r4, [pc, #44]	; (10de8 <__assert_func+0x30>)
   10dbc:	6825      	ldr	r5, [r4, #0]
   10dbe:	4614      	mov	r4, r2
   10dc0:	68ee      	ldr	r6, [r5, #12]
   10dc2:	461a      	mov	r2, r3
   10dc4:	b085      	sub	sp, #20
   10dc6:	4603      	mov	r3, r0
   10dc8:	460d      	mov	r5, r1
   10dca:	b14c      	cbz	r4, 10de0 <__assert_func+0x28>
   10dcc:	4907      	ldr	r1, [pc, #28]	; (10dec <__assert_func+0x34>)
   10dce:	9500      	str	r5, [sp, #0]
   10dd0:	e9cd 1401 	strd	r1, r4, [sp, #4]
   10dd4:	4630      	mov	r0, r6
   10dd6:	4906      	ldr	r1, [pc, #24]	; (10df0 <__assert_func+0x38>)
   10dd8:	f001 f86e 	bl	11eb8 <fiprintf>
   10ddc:	f7f9 f8b0 	bl	9f40 <abort>
   10de0:	4904      	ldr	r1, [pc, #16]	; (10df4 <__assert_func+0x3c>)
   10de2:	460c      	mov	r4, r1
   10de4:	e7f3      	b.n	10dce <__assert_func+0x16>
   10de6:	bf00      	nop
   10de8:	1fff9160 	.word	0x1fff9160
   10dec:	0001598c 	.word	0x0001598c
   10df0:	0001599c 	.word	0x0001599c
   10df4:	0001433c 	.word	0x0001433c

00010df8 <_calloc_r>:
   10df8:	b538      	push	{r3, r4, r5, lr}
   10dfa:	fba1 1402 	umull	r1, r4, r1, r2
   10dfe:	bb8c      	cbnz	r4, 10e64 <_calloc_r+0x6c>
   10e00:	f7fc face 	bl	d3a0 <_malloc_r>
   10e04:	4605      	mov	r5, r0
   10e06:	b1e0      	cbz	r0, 10e42 <_calloc_r+0x4a>
   10e08:	f850 2c04 	ldr.w	r2, [r0, #-4]
   10e0c:	f022 0203 	bic.w	r2, r2, #3
   10e10:	3a04      	subs	r2, #4
   10e12:	2a24      	cmp	r2, #36	; 0x24
   10e14:	d817      	bhi.n	10e46 <_calloc_r+0x4e>
   10e16:	2a13      	cmp	r2, #19
   10e18:	d91a      	bls.n	10e50 <_calloc_r+0x58>
   10e1a:	2a1b      	cmp	r2, #27
   10e1c:	e9c0 4400 	strd	r4, r4, [r0]
   10e20:	d91d      	bls.n	10e5e <_calloc_r+0x66>
   10e22:	2a24      	cmp	r2, #36	; 0x24
   10e24:	bf14      	ite	ne
   10e26:	f100 0210 	addne.w	r2, r0, #16
   10e2a:	f100 0218 	addeq.w	r2, r0, #24
   10e2e:	f04f 0300 	mov.w	r3, #0
   10e32:	e9c0 4402 	strd	r4, r4, [r0, #8]
   10e36:	bf04      	itt	eq
   10e38:	6104      	streq	r4, [r0, #16]
   10e3a:	6144      	streq	r4, [r0, #20]
   10e3c:	e9c2 3300 	strd	r3, r3, [r2]
   10e40:	6093      	str	r3, [r2, #8]
   10e42:	4628      	mov	r0, r5
   10e44:	bd38      	pop	{r3, r4, r5, pc}
   10e46:	4621      	mov	r1, r4
   10e48:	f7fd f918 	bl	e07c <memset>
   10e4c:	4628      	mov	r0, r5
   10e4e:	bd38      	pop	{r3, r4, r5, pc}
   10e50:	4602      	mov	r2, r0
   10e52:	2300      	movs	r3, #0
   10e54:	e9c2 3300 	strd	r3, r3, [r2]
   10e58:	6093      	str	r3, [r2, #8]
   10e5a:	4628      	mov	r0, r5
   10e5c:	bd38      	pop	{r3, r4, r5, pc}
   10e5e:	f100 0208 	add.w	r2, r0, #8
   10e62:	e7f6      	b.n	10e52 <_calloc_r+0x5a>
   10e64:	f7fd f9fa 	bl	e25c <__errno>
   10e68:	230c      	movs	r3, #12
   10e6a:	2500      	movs	r5, #0
   10e6c:	6003      	str	r3, [r0, #0]
   10e6e:	e7e8      	b.n	10e42 <_calloc_r+0x4a>

00010e70 <quorem>:
   10e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10e74:	6903      	ldr	r3, [r0, #16]
   10e76:	690c      	ldr	r4, [r1, #16]
   10e78:	42a3      	cmp	r3, r4
   10e7a:	b083      	sub	sp, #12
   10e7c:	f2c0 8088 	blt.w	10f90 <quorem+0x120>
   10e80:	3c01      	subs	r4, #1
   10e82:	f101 0514 	add.w	r5, r1, #20
   10e86:	00a3      	lsls	r3, r4, #2
   10e88:	f100 0814 	add.w	r8, r0, #20
   10e8c:	9300      	str	r3, [sp, #0]
   10e8e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   10e92:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10e96:	3301      	adds	r3, #1
   10e98:	468a      	mov	sl, r1
   10e9a:	429a      	cmp	r2, r3
   10e9c:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   10ea0:	4681      	mov	r9, r0
   10ea2:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   10ea6:	9101      	str	r1, [sp, #4]
   10ea8:	fbb2 f6f3 	udiv	r6, r2, r3
   10eac:	d33a      	bcc.n	10f24 <quorem+0xb4>
   10eae:	f04f 0c00 	mov.w	ip, #0
   10eb2:	46ae      	mov	lr, r5
   10eb4:	4640      	mov	r0, r8
   10eb6:	4662      	mov	r2, ip
   10eb8:	4663      	mov	r3, ip
   10eba:	f85e bb04 	ldr.w	fp, [lr], #4
   10ebe:	6801      	ldr	r1, [r0, #0]
   10ec0:	fa1f fc8b 	uxth.w	ip, fp
   10ec4:	fb06 330c 	mla	r3, r6, ip, r3
   10ec8:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   10ecc:	ea4f 4b1b 	mov.w	fp, fp, lsr #16
   10ed0:	fb06 cc0b 	mla	ip, r6, fp, ip
   10ed4:	b29b      	uxth	r3, r3
   10ed6:	1ad3      	subs	r3, r2, r3
   10ed8:	fa1f f28c 	uxth.w	r2, ip
   10edc:	fa13 f381 	uxtah	r3, r3, r1
   10ee0:	ebc2 4211 	rsb	r2, r2, r1, lsr #16
   10ee4:	eb02 4223 	add.w	r2, r2, r3, asr #16
   10ee8:	b29b      	uxth	r3, r3
   10eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   10eee:	4577      	cmp	r7, lr
   10ef0:	f840 3b04 	str.w	r3, [r0], #4
   10ef4:	ea4f 4222 	mov.w	r2, r2, asr #16
   10ef8:	ea4f 431c 	mov.w	r3, ip, lsr #16
   10efc:	d2dd      	bcs.n	10eba <quorem+0x4a>
   10efe:	9b00      	ldr	r3, [sp, #0]
   10f00:	f858 3003 	ldr.w	r3, [r8, r3]
   10f04:	b973      	cbnz	r3, 10f24 <quorem+0xb4>
   10f06:	9b01      	ldr	r3, [sp, #4]
   10f08:	3b04      	subs	r3, #4
   10f0a:	4598      	cmp	r8, r3
   10f0c:	d304      	bcc.n	10f18 <quorem+0xa8>
   10f0e:	e007      	b.n	10f20 <quorem+0xb0>
   10f10:	4598      	cmp	r8, r3
   10f12:	f104 34ff 	add.w	r4, r4, #4294967295
   10f16:	d203      	bcs.n	10f20 <quorem+0xb0>
   10f18:	f853 2904 	ldr.w	r2, [r3], #-4
   10f1c:	2a00      	cmp	r2, #0
   10f1e:	d0f7      	beq.n	10f10 <quorem+0xa0>
   10f20:	f8c9 4010 	str.w	r4, [r9, #16]
   10f24:	4651      	mov	r1, sl
   10f26:	4648      	mov	r0, r9
   10f28:	f7fd fe38 	bl	eb9c <__mcmp>
   10f2c:	2800      	cmp	r0, #0
   10f2e:	db2b      	blt.n	10f88 <quorem+0x118>
   10f30:	3601      	adds	r6, #1
   10f32:	4641      	mov	r1, r8
   10f34:	2300      	movs	r3, #0
   10f36:	f855 0b04 	ldr.w	r0, [r5], #4
   10f3a:	f8d1 c000 	ldr.w	ip, [r1]
   10f3e:	b282      	uxth	r2, r0
   10f40:	1a9a      	subs	r2, r3, r2
   10f42:	0c03      	lsrs	r3, r0, #16
   10f44:	fa12 f28c 	uxtah	r2, r2, ip
   10f48:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   10f4c:	eb03 4322 	add.w	r3, r3, r2, asr #16
   10f50:	b292      	uxth	r2, r2
   10f52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   10f56:	42af      	cmp	r7, r5
   10f58:	f841 2b04 	str.w	r2, [r1], #4
   10f5c:	ea4f 4323 	mov.w	r3, r3, asr #16
   10f60:	d2e9      	bcs.n	10f36 <quorem+0xc6>
   10f62:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   10f66:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   10f6a:	b96a      	cbnz	r2, 10f88 <quorem+0x118>
   10f6c:	3b04      	subs	r3, #4
   10f6e:	4598      	cmp	r8, r3
   10f70:	d304      	bcc.n	10f7c <quorem+0x10c>
   10f72:	e007      	b.n	10f84 <quorem+0x114>
   10f74:	4598      	cmp	r8, r3
   10f76:	f104 34ff 	add.w	r4, r4, #4294967295
   10f7a:	d203      	bcs.n	10f84 <quorem+0x114>
   10f7c:	f853 2904 	ldr.w	r2, [r3], #-4
   10f80:	2a00      	cmp	r2, #0
   10f82:	d0f7      	beq.n	10f74 <quorem+0x104>
   10f84:	f8c9 4010 	str.w	r4, [r9, #16]
   10f88:	4630      	mov	r0, r6
   10f8a:	b003      	add	sp, #12
   10f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f90:	2000      	movs	r0, #0
   10f92:	b003      	add	sp, #12
   10f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010f98 <_dtoa_r>:
   10f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f9c:	6b81      	ldr	r1, [r0, #56]	; 0x38
   10f9e:	b099      	sub	sp, #100	; 0x64
   10fa0:	4690      	mov	r8, r2
   10fa2:	4699      	mov	r9, r3
   10fa4:	e9cd 8904 	strd	r8, r9, [sp, #16]
   10fa8:	9d25      	ldr	r5, [sp, #148]	; 0x94
   10faa:	4604      	mov	r4, r0
   10fac:	b141      	cbz	r1, 10fc0 <_dtoa_r+0x28>
   10fae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
   10fb0:	604a      	str	r2, [r1, #4]
   10fb2:	2301      	movs	r3, #1
   10fb4:	4093      	lsls	r3, r2
   10fb6:	608b      	str	r3, [r1, #8]
   10fb8:	f7fd fb92 	bl	e6e0 <_Bfree>
   10fbc:	2300      	movs	r3, #0
   10fbe:	63a3      	str	r3, [r4, #56]	; 0x38
   10fc0:	f1b9 0a00 	subs.w	sl, r9, #0
   10fc4:	bfb4      	ite	lt
   10fc6:	2301      	movlt	r3, #1
   10fc8:	2300      	movge	r3, #0
   10fca:	602b      	str	r3, [r5, #0]
   10fcc:	4b76      	ldr	r3, [pc, #472]	; (111a8 <_dtoa_r+0x210>)
   10fce:	bfbc      	itt	lt
   10fd0:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   10fd4:	f8cd a014 	strlt.w	sl, [sp, #20]
   10fd8:	ea33 030a 	bics.w	r3, r3, sl
   10fdc:	f000 80ab 	beq.w	11136 <_dtoa_r+0x19e>
   10fe0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   10fe4:	4610      	mov	r0, r2
   10fe6:	4619      	mov	r1, r3
   10fe8:	2200      	movs	r2, #0
   10fea:	2300      	movs	r3, #0
   10fec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   10ff0:	f7fb fe4c 	bl	cc8c <__aeabi_dcmpeq>
   10ff4:	4607      	mov	r7, r0
   10ff6:	b178      	cbz	r0, 11018 <_dtoa_r+0x80>
   10ff8:	9a24      	ldr	r2, [sp, #144]	; 0x90
   10ffa:	2301      	movs	r3, #1
   10ffc:	6013      	str	r3, [r2, #0]
   10ffe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11000:	2b00      	cmp	r3, #0
   11002:	f000 83ae 	beq.w	11762 <_dtoa_r+0x7ca>
   11006:	4b69      	ldr	r3, [pc, #420]	; (111ac <_dtoa_r+0x214>)
   11008:	9a26      	ldr	r2, [sp, #152]	; 0x98
   1100a:	6013      	str	r3, [r2, #0]
   1100c:	3b01      	subs	r3, #1
   1100e:	9303      	str	r3, [sp, #12]
   11010:	9803      	ldr	r0, [sp, #12]
   11012:	b019      	add	sp, #100	; 0x64
   11014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11018:	ab16      	add	r3, sp, #88	; 0x58
   1101a:	9301      	str	r3, [sp, #4]
   1101c:	ab17      	add	r3, sp, #92	; 0x5c
   1101e:	9300      	str	r3, [sp, #0]
   11020:	4620      	mov	r0, r4
   11022:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   11026:	f7fd fe83 	bl	ed30 <__d2b>
   1102a:	ea5f 561a 	movs.w	r6, sl, lsr #20
   1102e:	4605      	mov	r5, r0
   11030:	f040 8097 	bne.w	11162 <_dtoa_r+0x1ca>
   11034:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   11038:	443e      	add	r6, r7
   1103a:	f206 4332 	addw	r3, r6, #1074	; 0x432
   1103e:	2b20      	cmp	r3, #32
   11040:	f340 83a6 	ble.w	11790 <_dtoa_r+0x7f8>
   11044:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   11048:	fa0a fa03 	lsl.w	sl, sl, r3
   1104c:	f206 4312 	addw	r3, r6, #1042	; 0x412
   11050:	fa28 f003 	lsr.w	r0, r8, r3
   11054:	ea4a 0000 	orr.w	r0, sl, r0
   11058:	f7fb fd48 	bl	caec <__aeabi_ui2d>
   1105c:	2301      	movs	r3, #1
   1105e:	3e01      	subs	r6, #1
   11060:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   11064:	930f      	str	r3, [sp, #60]	; 0x3c
   11066:	4b52      	ldr	r3, [pc, #328]	; (111b0 <_dtoa_r+0x218>)
   11068:	2200      	movs	r2, #0
   1106a:	f7fb fc01 	bl	c870 <__aeabi_dsub>
   1106e:	a348      	add	r3, pc, #288	; (adr r3, 11190 <_dtoa_r+0x1f8>)
   11070:	e9d3 2300 	ldrd	r2, r3, [r3]
   11074:	f002 fbd0 	bl	13818 <__aeabi_dmul>
   11078:	a347      	add	r3, pc, #284	; (adr r3, 11198 <_dtoa_r+0x200>)
   1107a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1107e:	f7fb fbf9 	bl	c874 <__adddf3>
   11082:	4680      	mov	r8, r0
   11084:	4630      	mov	r0, r6
   11086:	4689      	mov	r9, r1
   11088:	f7fb fd40 	bl	cb0c <__aeabi_i2d>
   1108c:	a344      	add	r3, pc, #272	; (adr r3, 111a0 <_dtoa_r+0x208>)
   1108e:	e9d3 2300 	ldrd	r2, r3, [r3]
   11092:	f002 fbc1 	bl	13818 <__aeabi_dmul>
   11096:	4602      	mov	r2, r0
   11098:	460b      	mov	r3, r1
   1109a:	4640      	mov	r0, r8
   1109c:	4649      	mov	r1, r9
   1109e:	f7fb fbe9 	bl	c874 <__adddf3>
   110a2:	4680      	mov	r8, r0
   110a4:	4689      	mov	r9, r1
   110a6:	f002 fdc9 	bl	13c3c <__aeabi_d2iz>
   110aa:	2200      	movs	r2, #0
   110ac:	4683      	mov	fp, r0
   110ae:	2300      	movs	r3, #0
   110b0:	4640      	mov	r0, r8
   110b2:	4649      	mov	r1, r9
   110b4:	f7fb fdf4 	bl	cca0 <__aeabi_dcmplt>
   110b8:	2800      	cmp	r0, #0
   110ba:	f040 8345 	bne.w	11748 <_dtoa_r+0x7b0>
   110be:	f1bb 0f16 	cmp.w	fp, #22
   110c2:	f200 8334 	bhi.w	1172e <_dtoa_r+0x796>
   110c6:	4b3b      	ldr	r3, [pc, #236]	; (111b4 <_dtoa_r+0x21c>)
   110c8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   110cc:	e9d3 2300 	ldrd	r2, r3, [r3]
   110d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   110d4:	f7fb fde4 	bl	cca0 <__aeabi_dcmplt>
   110d8:	2800      	cmp	r0, #0
   110da:	d071      	beq.n	111c0 <_dtoa_r+0x228>
   110dc:	2300      	movs	r3, #0
   110de:	1bbf      	subs	r7, r7, r6
   110e0:	930e      	str	r3, [sp, #56]	; 0x38
   110e2:	1e7b      	subs	r3, r7, #1
   110e4:	f10b 3bff 	add.w	fp, fp, #4294967295
   110e8:	9306      	str	r3, [sp, #24]
   110ea:	f100 8327 	bmi.w	1173c <_dtoa_r+0x7a4>
   110ee:	2300      	movs	r3, #0
   110f0:	9309      	str	r3, [sp, #36]	; 0x24
   110f2:	f1bb 0f00 	cmp.w	fp, #0
   110f6:	da6a      	bge.n	111ce <_dtoa_r+0x236>
   110f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   110fa:	f8cd b01c 	str.w	fp, [sp, #28]
   110fe:	eba3 030b 	sub.w	r3, r3, fp
   11102:	9309      	str	r3, [sp, #36]	; 0x24
   11104:	f1cb 0300 	rsb	r3, fp, #0
   11108:	930d      	str	r3, [sp, #52]	; 0x34
   1110a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1110c:	2b09      	cmp	r3, #9
   1110e:	f04f 0b00 	mov.w	fp, #0
   11112:	d865      	bhi.n	111e0 <_dtoa_r+0x248>
   11114:	2b05      	cmp	r3, #5
   11116:	f340 8339 	ble.w	1178c <_dtoa_r+0x7f4>
   1111a:	3b04      	subs	r3, #4
   1111c:	9322      	str	r3, [sp, #136]	; 0x88
   1111e:	2600      	movs	r6, #0
   11120:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11122:	3b02      	subs	r3, #2
   11124:	2b03      	cmp	r3, #3
   11126:	f200 8667 	bhi.w	11df8 <_dtoa_r+0xe60>
   1112a:	e8df f013 	tbh	[pc, r3, lsl #1]
   1112e:	044e      	.short	0x044e
   11130:	0442044b 	.word	0x0442044b
   11134:	0425      	.short	0x0425
   11136:	9a24      	ldr	r2, [sp, #144]	; 0x90
   11138:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   1113c:	f242 730f 	movw	r3, #9999	; 0x270f
   11140:	ea5a 0a08 	orrs.w	sl, sl, r8
   11144:	6013      	str	r3, [r2, #0]
   11146:	d11a      	bne.n	1117e <_dtoa_r+0x1e6>
   11148:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1114a:	2b00      	cmp	r3, #0
   1114c:	f000 8663 	beq.w	11e16 <_dtoa_r+0xe7e>
   11150:	4b19      	ldr	r3, [pc, #100]	; (111b8 <_dtoa_r+0x220>)
   11152:	9303      	str	r3, [sp, #12]
   11154:	3308      	adds	r3, #8
   11156:	9a26      	ldr	r2, [sp, #152]	; 0x98
   11158:	9803      	ldr	r0, [sp, #12]
   1115a:	6013      	str	r3, [r2, #0]
   1115c:	b019      	add	sp, #100	; 0x64
   1115e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11162:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   11166:	f3c2 0313 	ubfx	r3, r2, #0, #20
   1116a:	4608      	mov	r0, r1
   1116c:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   11170:	970f      	str	r7, [sp, #60]	; 0x3c
   11172:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   11176:	9f16      	ldr	r7, [sp, #88]	; 0x58
   11178:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   1117c:	e773      	b.n	11066 <_dtoa_r+0xce>
   1117e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   11180:	2b00      	cmp	r3, #0
   11182:	f040 83db 	bne.w	1193c <_dtoa_r+0x9a4>
   11186:	4b0d      	ldr	r3, [pc, #52]	; (111bc <_dtoa_r+0x224>)
   11188:	9303      	str	r3, [sp, #12]
   1118a:	e741      	b.n	11010 <_dtoa_r+0x78>
   1118c:	f3af 8000 	nop.w
   11190:	636f4361 	.word	0x636f4361
   11194:	3fd287a7 	.word	0x3fd287a7
   11198:	8b60c8b3 	.word	0x8b60c8b3
   1119c:	3fc68a28 	.word	0x3fc68a28
   111a0:	509f79fb 	.word	0x509f79fb
   111a4:	3fd34413 	.word	0x3fd34413
   111a8:	7ff00000 	.word	0x7ff00000
   111ac:	000142ed 	.word	0x000142ed
   111b0:	3ff80000 	.word	0x3ff80000
   111b4:	00015860 	.word	0x00015860
   111b8:	000159cc 	.word	0x000159cc
   111bc:	000159d8 	.word	0x000159d8
   111c0:	1bbf      	subs	r7, r7, r6
   111c2:	1e7b      	subs	r3, r7, #1
   111c4:	9306      	str	r3, [sp, #24]
   111c6:	f100 847e 	bmi.w	11ac6 <_dtoa_r+0xb2e>
   111ca:	900e      	str	r0, [sp, #56]	; 0x38
   111cc:	9009      	str	r0, [sp, #36]	; 0x24
   111ce:	9b06      	ldr	r3, [sp, #24]
   111d0:	445b      	add	r3, fp
   111d2:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   111d6:	2300      	movs	r3, #0
   111d8:	930d      	str	r3, [sp, #52]	; 0x34
   111da:	9b22      	ldr	r3, [sp, #136]	; 0x88
   111dc:	2b09      	cmp	r3, #9
   111de:	d999      	bls.n	11114 <_dtoa_r+0x17c>
   111e0:	2300      	movs	r3, #0
   111e2:	e9cd 3322 	strd	r3, r3, [sp, #136]	; 0x88
   111e6:	2601      	movs	r6, #1
   111e8:	f04f 33ff 	mov.w	r3, #4294967295
   111ec:	960c      	str	r6, [sp, #48]	; 0x30
   111ee:	9308      	str	r3, [sp, #32]
   111f0:	9b08      	ldr	r3, [sp, #32]
   111f2:	9312      	str	r3, [sp, #72]	; 0x48
   111f4:	2100      	movs	r1, #0
   111f6:	63e1      	str	r1, [r4, #60]	; 0x3c
   111f8:	4620      	mov	r0, r4
   111fa:	f7fd fa4b 	bl	e694 <_Balloc>
   111fe:	9003      	str	r0, [sp, #12]
   11200:	2800      	cmp	r0, #0
   11202:	f000 8601 	beq.w	11e08 <_dtoa_r+0xe70>
   11206:	9b03      	ldr	r3, [sp, #12]
   11208:	63a3      	str	r3, [r4, #56]	; 0x38
   1120a:	9b08      	ldr	r3, [sp, #32]
   1120c:	2b0e      	cmp	r3, #14
   1120e:	f200 8113 	bhi.w	11438 <_dtoa_r+0x4a0>
   11212:	2e00      	cmp	r6, #0
   11214:	f000 8110 	beq.w	11438 <_dtoa_r+0x4a0>
   11218:	9907      	ldr	r1, [sp, #28]
   1121a:	2900      	cmp	r1, #0
   1121c:	f340 8455 	ble.w	11aca <_dtoa_r+0xb32>
   11220:	4bae      	ldr	r3, [pc, #696]	; (114dc <_dtoa_r+0x544>)
   11222:	f001 020f 	and.w	r2, r1, #15
   11226:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1122a:	ea4f 1821 	mov.w	r8, r1, asr #4
   1122e:	05c9      	lsls	r1, r1, #23
   11230:	e9d3 6700 	ldrd	r6, r7, [r3]
   11234:	f140 8411 	bpl.w	11a5a <_dtoa_r+0xac2>
   11238:	4ba9      	ldr	r3, [pc, #676]	; (114e0 <_dtoa_r+0x548>)
   1123a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   1123e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   11242:	f002 fc13 	bl	13a6c <__aeabi_ddiv>
   11246:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   1124a:	f008 080f 	and.w	r8, r8, #15
   1124e:	f04f 0a03 	mov.w	sl, #3
   11252:	f1b8 0f00 	cmp.w	r8, #0
   11256:	d013      	beq.n	11280 <_dtoa_r+0x2e8>
   11258:	f8df 9284 	ldr.w	r9, [pc, #644]	; 114e0 <_dtoa_r+0x548>
   1125c:	f018 0f01 	tst.w	r8, #1
   11260:	d009      	beq.n	11276 <_dtoa_r+0x2de>
   11262:	4630      	mov	r0, r6
   11264:	4639      	mov	r1, r7
   11266:	e9d9 2300 	ldrd	r2, r3, [r9]
   1126a:	f002 fad5 	bl	13818 <__aeabi_dmul>
   1126e:	f10a 0a01 	add.w	sl, sl, #1
   11272:	4606      	mov	r6, r0
   11274:	460f      	mov	r7, r1
   11276:	ea5f 0868 	movs.w	r8, r8, asr #1
   1127a:	f109 0908 	add.w	r9, r9, #8
   1127e:	d1ed      	bne.n	1125c <_dtoa_r+0x2c4>
   11280:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11284:	4632      	mov	r2, r6
   11286:	463b      	mov	r3, r7
   11288:	f002 fbf0 	bl	13a6c <__aeabi_ddiv>
   1128c:	4680      	mov	r8, r0
   1128e:	4689      	mov	r9, r1
   11290:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11292:	b143      	cbz	r3, 112a6 <_dtoa_r+0x30e>
   11294:	4b93      	ldr	r3, [pc, #588]	; (114e4 <_dtoa_r+0x54c>)
   11296:	2200      	movs	r2, #0
   11298:	4640      	mov	r0, r8
   1129a:	4649      	mov	r1, r9
   1129c:	f7fb fd00 	bl	cca0 <__aeabi_dcmplt>
   112a0:	2800      	cmp	r0, #0
   112a2:	f040 852a 	bne.w	11cfa <_dtoa_r+0xd62>
   112a6:	4650      	mov	r0, sl
   112a8:	f7fb fc30 	bl	cb0c <__aeabi_i2d>
   112ac:	4642      	mov	r2, r8
   112ae:	464b      	mov	r3, r9
   112b0:	f002 fab2 	bl	13818 <__aeabi_dmul>
   112b4:	4b8c      	ldr	r3, [pc, #560]	; (114e8 <_dtoa_r+0x550>)
   112b6:	2200      	movs	r2, #0
   112b8:	f7fb fadc 	bl	c874 <__adddf3>
   112bc:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   112c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   112c4:	9311      	str	r3, [sp, #68]	; 0x44
   112c6:	9b08      	ldr	r3, [sp, #32]
   112c8:	2b00      	cmp	r3, #0
   112ca:	f000 8099 	beq.w	11400 <_dtoa_r+0x468>
   112ce:	9b07      	ldr	r3, [sp, #28]
   112d0:	9314      	str	r3, [sp, #80]	; 0x50
   112d2:	9b08      	ldr	r3, [sp, #32]
   112d4:	9313      	str	r3, [sp, #76]	; 0x4c
   112d6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   112d8:	2b00      	cmp	r3, #0
   112da:	f000 84a5 	beq.w	11c28 <_dtoa_r+0xc90>
   112de:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   112e0:	4b7e      	ldr	r3, [pc, #504]	; (114dc <_dtoa_r+0x544>)
   112e2:	4982      	ldr	r1, [pc, #520]	; (114ec <_dtoa_r+0x554>)
   112e4:	9e03      	ldr	r6, [sp, #12]
   112e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   112ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   112ee:	2000      	movs	r0, #0
   112f0:	f002 fbbc 	bl	13a6c <__aeabi_ddiv>
   112f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   112f8:	f7fb faba 	bl	c870 <__aeabi_dsub>
   112fc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11300:	4649      	mov	r1, r9
   11302:	4640      	mov	r0, r8
   11304:	f002 fc9a 	bl	13c3c <__aeabi_d2iz>
   11308:	4607      	mov	r7, r0
   1130a:	f7fb fbff 	bl	cb0c <__aeabi_i2d>
   1130e:	4602      	mov	r2, r0
   11310:	460b      	mov	r3, r1
   11312:	4640      	mov	r0, r8
   11314:	4649      	mov	r1, r9
   11316:	f7fb faab 	bl	c870 <__aeabi_dsub>
   1131a:	3730      	adds	r7, #48	; 0x30
   1131c:	4680      	mov	r8, r0
   1131e:	4689      	mov	r9, r1
   11320:	4602      	mov	r2, r0
   11322:	460b      	mov	r3, r1
   11324:	f806 7b01 	strb.w	r7, [r6], #1
   11328:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1132c:	f7fb fcd6 	bl	ccdc <__aeabi_dcmpgt>
   11330:	2800      	cmp	r0, #0
   11332:	f040 8527 	bne.w	11d84 <_dtoa_r+0xdec>
   11336:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   1133a:	2700      	movs	r7, #0
   1133c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   11340:	9510      	str	r5, [sp, #64]	; 0x40
   11342:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   11344:	9413      	str	r4, [sp, #76]	; 0x4c
   11346:	e02a      	b.n	1139e <_dtoa_r+0x406>
   11348:	3701      	adds	r7, #1
   1134a:	42af      	cmp	r7, r5
   1134c:	f280 852a 	bge.w	11da4 <_dtoa_r+0xe0c>
   11350:	4b67      	ldr	r3, [pc, #412]	; (114f0 <_dtoa_r+0x558>)
   11352:	4650      	mov	r0, sl
   11354:	4659      	mov	r1, fp
   11356:	2200      	movs	r2, #0
   11358:	f002 fa5e 	bl	13818 <__aeabi_dmul>
   1135c:	4b64      	ldr	r3, [pc, #400]	; (114f0 <_dtoa_r+0x558>)
   1135e:	2200      	movs	r2, #0
   11360:	4682      	mov	sl, r0
   11362:	468b      	mov	fp, r1
   11364:	4640      	mov	r0, r8
   11366:	4649      	mov	r1, r9
   11368:	f002 fa56 	bl	13818 <__aeabi_dmul>
   1136c:	4689      	mov	r9, r1
   1136e:	4680      	mov	r8, r0
   11370:	f002 fc64 	bl	13c3c <__aeabi_d2iz>
   11374:	4604      	mov	r4, r0
   11376:	f7fb fbc9 	bl	cb0c <__aeabi_i2d>
   1137a:	4602      	mov	r2, r0
   1137c:	460b      	mov	r3, r1
   1137e:	4640      	mov	r0, r8
   11380:	4649      	mov	r1, r9
   11382:	f7fb fa75 	bl	c870 <__aeabi_dsub>
   11386:	3430      	adds	r4, #48	; 0x30
   11388:	f806 4b01 	strb.w	r4, [r6], #1
   1138c:	4652      	mov	r2, sl
   1138e:	465b      	mov	r3, fp
   11390:	4680      	mov	r8, r0
   11392:	4689      	mov	r9, r1
   11394:	f7fb fc84 	bl	cca0 <__aeabi_dcmplt>
   11398:	2800      	cmp	r0, #0
   1139a:	f040 84f1 	bne.w	11d80 <_dtoa_r+0xde8>
   1139e:	4642      	mov	r2, r8
   113a0:	464b      	mov	r3, r9
   113a2:	4950      	ldr	r1, [pc, #320]	; (114e4 <_dtoa_r+0x54c>)
   113a4:	2000      	movs	r0, #0
   113a6:	f7fb fa63 	bl	c870 <__aeabi_dsub>
   113aa:	4652      	mov	r2, sl
   113ac:	465b      	mov	r3, fp
   113ae:	f7fb fc77 	bl	cca0 <__aeabi_dcmplt>
   113b2:	2800      	cmp	r0, #0
   113b4:	d0c8      	beq.n	11348 <_dtoa_r+0x3b0>
   113b6:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   113ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
   113bc:	9a03      	ldr	r2, [sp, #12]
   113be:	9307      	str	r3, [sp, #28]
   113c0:	e002      	b.n	113c8 <_dtoa_r+0x430>
   113c2:	42b2      	cmp	r2, r6
   113c4:	f000 84c6 	beq.w	11d54 <_dtoa_r+0xdbc>
   113c8:	46b1      	mov	r9, r6
   113ca:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   113ce:	2b39      	cmp	r3, #57	; 0x39
   113d0:	d0f7      	beq.n	113c2 <_dtoa_r+0x42a>
   113d2:	3301      	adds	r3, #1
   113d4:	b2db      	uxtb	r3, r3
   113d6:	7033      	strb	r3, [r6, #0]
   113d8:	9b07      	ldr	r3, [sp, #28]
   113da:	3301      	adds	r3, #1
   113dc:	9307      	str	r3, [sp, #28]
   113de:	e192      	b.n	11706 <_dtoa_r+0x76e>
   113e0:	4650      	mov	r0, sl
   113e2:	f7fb fb93 	bl	cb0c <__aeabi_i2d>
   113e6:	4642      	mov	r2, r8
   113e8:	464b      	mov	r3, r9
   113ea:	f002 fa15 	bl	13818 <__aeabi_dmul>
   113ee:	4b3e      	ldr	r3, [pc, #248]	; (114e8 <_dtoa_r+0x550>)
   113f0:	2200      	movs	r2, #0
   113f2:	f7fb fa3f 	bl	c874 <__adddf3>
   113f6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   113fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   113fe:	9311      	str	r3, [sp, #68]	; 0x44
   11400:	4b3c      	ldr	r3, [pc, #240]	; (114f4 <_dtoa_r+0x55c>)
   11402:	4640      	mov	r0, r8
   11404:	4649      	mov	r1, r9
   11406:	2200      	movs	r2, #0
   11408:	f7fb fa32 	bl	c870 <__aeabi_dsub>
   1140c:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   11410:	4642      	mov	r2, r8
   11412:	464b      	mov	r3, r9
   11414:	4606      	mov	r6, r0
   11416:	460f      	mov	r7, r1
   11418:	f7fb fc60 	bl	ccdc <__aeabi_dcmpgt>
   1141c:	4682      	mov	sl, r0
   1141e:	2800      	cmp	r0, #0
   11420:	f040 84a8 	bne.w	11d74 <_dtoa_r+0xddc>
   11424:	4642      	mov	r2, r8
   11426:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   1142a:	4630      	mov	r0, r6
   1142c:	4639      	mov	r1, r7
   1142e:	f7fb fc37 	bl	cca0 <__aeabi_dcmplt>
   11432:	2800      	cmp	r0, #0
   11434:	f040 8345 	bne.w	11ac2 <_dtoa_r+0xb2a>
   11438:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1143a:	2b00      	cmp	r3, #0
   1143c:	f2c0 808c 	blt.w	11558 <_dtoa_r+0x5c0>
   11440:	9a07      	ldr	r2, [sp, #28]
   11442:	2a0e      	cmp	r2, #14
   11444:	f300 8088 	bgt.w	11558 <_dtoa_r+0x5c0>
   11448:	4b24      	ldr	r3, [pc, #144]	; (114dc <_dtoa_r+0x544>)
   1144a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   1144e:	e9d3 ab00 	ldrd	sl, fp, [r3]
   11452:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11454:	2b00      	cmp	r3, #0
   11456:	da1b      	bge.n	11490 <_dtoa_r+0x4f8>
   11458:	9b08      	ldr	r3, [sp, #32]
   1145a:	2b00      	cmp	r3, #0
   1145c:	dc18      	bgt.n	11490 <_dtoa_r+0x4f8>
   1145e:	f040 832e 	bne.w	11abe <_dtoa_r+0xb26>
   11462:	4b24      	ldr	r3, [pc, #144]	; (114f4 <_dtoa_r+0x55c>)
   11464:	4650      	mov	r0, sl
   11466:	2200      	movs	r2, #0
   11468:	4659      	mov	r1, fp
   1146a:	f002 f9d5 	bl	13818 <__aeabi_dmul>
   1146e:	4602      	mov	r2, r0
   11470:	460b      	mov	r3, r1
   11472:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11476:	f7fb fc1d 	bl	ccb4 <__aeabi_dcmple>
   1147a:	f8dd a020 	ldr.w	sl, [sp, #32]
   1147e:	4656      	mov	r6, sl
   11480:	2800      	cmp	r0, #0
   11482:	f000 82b9 	beq.w	119f8 <_dtoa_r+0xa60>
   11486:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   11488:	f8dd 800c 	ldr.w	r8, [sp, #12]
   1148c:	43df      	mvns	r7, r3
   1148e:	e2bb      	b.n	11a08 <_dtoa_r+0xa70>
   11490:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   11494:	4652      	mov	r2, sl
   11496:	465b      	mov	r3, fp
   11498:	4638      	mov	r0, r7
   1149a:	4641      	mov	r1, r8
   1149c:	f002 fae6 	bl	13a6c <__aeabi_ddiv>
   114a0:	f002 fbcc 	bl	13c3c <__aeabi_d2iz>
   114a4:	4681      	mov	r9, r0
   114a6:	9009      	str	r0, [sp, #36]	; 0x24
   114a8:	f7fb fb30 	bl	cb0c <__aeabi_i2d>
   114ac:	4652      	mov	r2, sl
   114ae:	465b      	mov	r3, fp
   114b0:	f002 f9b2 	bl	13818 <__aeabi_dmul>
   114b4:	9e03      	ldr	r6, [sp, #12]
   114b6:	460b      	mov	r3, r1
   114b8:	4602      	mov	r2, r0
   114ba:	4641      	mov	r1, r8
   114bc:	4638      	mov	r0, r7
   114be:	f7fb f9d7 	bl	c870 <__aeabi_dsub>
   114c2:	f109 0330 	add.w	r3, r9, #48	; 0x30
   114c6:	f806 3b01 	strb.w	r3, [r6], #1
   114ca:	9b08      	ldr	r3, [sp, #32]
   114cc:	2b01      	cmp	r3, #1
   114ce:	f000 835c 	beq.w	11b8a <_dtoa_r+0xbf2>
   114d2:	9406      	str	r4, [sp, #24]
   114d4:	2701      	movs	r7, #1
   114d6:	9504      	str	r5, [sp, #16]
   114d8:	461c      	mov	r4, r3
   114da:	e02a      	b.n	11532 <_dtoa_r+0x59a>
   114dc:	00015860 	.word	0x00015860
   114e0:	00015838 	.word	0x00015838
   114e4:	3ff00000 	.word	0x3ff00000
   114e8:	401c0000 	.word	0x401c0000
   114ec:	3fe00000 	.word	0x3fe00000
   114f0:	40240000 	.word	0x40240000
   114f4:	40140000 	.word	0x40140000
   114f8:	4652      	mov	r2, sl
   114fa:	465b      	mov	r3, fp
   114fc:	4640      	mov	r0, r8
   114fe:	4649      	mov	r1, r9
   11500:	f002 fab4 	bl	13a6c <__aeabi_ddiv>
   11504:	f002 fb9a 	bl	13c3c <__aeabi_d2iz>
   11508:	4605      	mov	r5, r0
   1150a:	f7fb faff 	bl	cb0c <__aeabi_i2d>
   1150e:	4652      	mov	r2, sl
   11510:	465b      	mov	r3, fp
   11512:	f002 f981 	bl	13818 <__aeabi_dmul>
   11516:	3701      	adds	r7, #1
   11518:	460b      	mov	r3, r1
   1151a:	4602      	mov	r2, r0
   1151c:	4649      	mov	r1, r9
   1151e:	4640      	mov	r0, r8
   11520:	f7fb f9a6 	bl	c870 <__aeabi_dsub>
   11524:	f105 0330 	add.w	r3, r5, #48	; 0x30
   11528:	42a7      	cmp	r7, r4
   1152a:	f806 3b01 	strb.w	r3, [r6], #1
   1152e:	f000 8329 	beq.w	11b84 <_dtoa_r+0xbec>
   11532:	4ba5      	ldr	r3, [pc, #660]	; (117c8 <_dtoa_r+0x830>)
   11534:	2200      	movs	r2, #0
   11536:	f002 f96f 	bl	13818 <__aeabi_dmul>
   1153a:	2200      	movs	r2, #0
   1153c:	2300      	movs	r3, #0
   1153e:	4680      	mov	r8, r0
   11540:	4689      	mov	r9, r1
   11542:	f7fb fba3 	bl	cc8c <__aeabi_dcmpeq>
   11546:	2800      	cmp	r0, #0
   11548:	d0d6      	beq.n	114f8 <_dtoa_r+0x560>
   1154a:	9d04      	ldr	r5, [sp, #16]
   1154c:	9c06      	ldr	r4, [sp, #24]
   1154e:	9b07      	ldr	r3, [sp, #28]
   11550:	3301      	adds	r3, #1
   11552:	9307      	str	r3, [sp, #28]
   11554:	46b1      	mov	r9, r6
   11556:	e0d6      	b.n	11706 <_dtoa_r+0x76e>
   11558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   1155a:	2a00      	cmp	r2, #0
   1155c:	f000 8107 	beq.w	1176e <_dtoa_r+0x7d6>
   11560:	9a22      	ldr	r2, [sp, #136]	; 0x88
   11562:	2a01      	cmp	r2, #1
   11564:	f340 8294 	ble.w	11a90 <_dtoa_r+0xaf8>
   11568:	9b08      	ldr	r3, [sp, #32]
   1156a:	f103 38ff 	add.w	r8, r3, #4294967295
   1156e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11570:	4543      	cmp	r3, r8
   11572:	f280 825e 	bge.w	11a32 <_dtoa_r+0xa9a>
   11576:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11578:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   1157c:	eba8 0303 	sub.w	r3, r8, r3
   11580:	449b      	add	fp, r3
   11582:	f04f 0800 	mov.w	r8, #0
   11586:	9b08      	ldr	r3, [sp, #32]
   11588:	2b00      	cmp	r3, #0
   1158a:	f2c0 832f 	blt.w	11bec <_dtoa_r+0xc54>
   1158e:	9a06      	ldr	r2, [sp, #24]
   11590:	441a      	add	r2, r3
   11592:	9206      	str	r2, [sp, #24]
   11594:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11596:	4617      	mov	r7, r2
   11598:	441a      	add	r2, r3
   1159a:	9209      	str	r2, [sp, #36]	; 0x24
   1159c:	2101      	movs	r1, #1
   1159e:	4620      	mov	r0, r4
   115a0:	f7fd f948 	bl	e834 <__i2b>
   115a4:	4606      	mov	r6, r0
   115a6:	b167      	cbz	r7, 115c2 <_dtoa_r+0x62a>
   115a8:	9906      	ldr	r1, [sp, #24]
   115aa:	2900      	cmp	r1, #0
   115ac:	460b      	mov	r3, r1
   115ae:	dd08      	ble.n	115c2 <_dtoa_r+0x62a>
   115b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   115b2:	42b9      	cmp	r1, r7
   115b4:	bfa8      	it	ge
   115b6:	463b      	movge	r3, r7
   115b8:	1ad2      	subs	r2, r2, r3
   115ba:	1aff      	subs	r7, r7, r3
   115bc:	1acb      	subs	r3, r1, r3
   115be:	9209      	str	r2, [sp, #36]	; 0x24
   115c0:	9306      	str	r3, [sp, #24]
   115c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   115c4:	b163      	cbz	r3, 115e0 <_dtoa_r+0x648>
   115c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   115c8:	2b00      	cmp	r3, #0
   115ca:	f000 82b6 	beq.w	11b3a <_dtoa_r+0xba2>
   115ce:	f1b8 0f00 	cmp.w	r8, #0
   115d2:	f300 8231 	bgt.w	11a38 <_dtoa_r+0xaa0>
   115d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   115d8:	ebb3 0208 	subs.w	r2, r3, r8
   115dc:	f040 8316 	bne.w	11c0c <_dtoa_r+0xc74>
   115e0:	2101      	movs	r1, #1
   115e2:	4620      	mov	r0, r4
   115e4:	f7fd f926 	bl	e834 <__i2b>
   115e8:	f1bb 0f00 	cmp.w	fp, #0
   115ec:	4682      	mov	sl, r0
   115ee:	f300 80d4 	bgt.w	1179a <_dtoa_r+0x802>
   115f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   115f4:	2b01      	cmp	r3, #1
   115f6:	f340 81a7 	ble.w	11948 <_dtoa_r+0x9b0>
   115fa:	f04f 0900 	mov.w	r9, #0
   115fe:	2001      	movs	r0, #1
   11600:	f1bb 0f00 	cmp.w	fp, #0
   11604:	f040 80d5 	bne.w	117b2 <_dtoa_r+0x81a>
   11608:	9b06      	ldr	r3, [sp, #24]
   1160a:	4418      	add	r0, r3
   1160c:	f010 001f 	ands.w	r0, r0, #31
   11610:	f000 8198 	beq.w	11944 <_dtoa_r+0x9ac>
   11614:	f1c0 0320 	rsb	r3, r0, #32
   11618:	2b04      	cmp	r3, #4
   1161a:	f300 80ad 	bgt.w	11778 <_dtoa_r+0x7e0>
   1161e:	f040 8224 	bne.w	11a6a <_dtoa_r+0xad2>
   11622:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11624:	2b00      	cmp	r3, #0
   11626:	dd05      	ble.n	11634 <_dtoa_r+0x69c>
   11628:	4629      	mov	r1, r5
   1162a:	461a      	mov	r2, r3
   1162c:	4620      	mov	r0, r4
   1162e:	f7fd fa3d 	bl	eaac <__lshift>
   11632:	4605      	mov	r5, r0
   11634:	9b06      	ldr	r3, [sp, #24]
   11636:	2b00      	cmp	r3, #0
   11638:	dd05      	ble.n	11646 <_dtoa_r+0x6ae>
   1163a:	4651      	mov	r1, sl
   1163c:	461a      	mov	r2, r3
   1163e:	4620      	mov	r0, r4
   11640:	f7fd fa34 	bl	eaac <__lshift>
   11644:	4682      	mov	sl, r0
   11646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11648:	2b00      	cmp	r3, #0
   1164a:	f040 815c 	bne.w	11906 <_dtoa_r+0x96e>
   1164e:	9b08      	ldr	r3, [sp, #32]
   11650:	2b00      	cmp	r3, #0
   11652:	f340 8143 	ble.w	118dc <_dtoa_r+0x944>
   11656:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11658:	2b00      	cmp	r3, #0
   1165a:	f040 80c6 	bne.w	117ea <_dtoa_r+0x852>
   1165e:	9b07      	ldr	r3, [sp, #28]
   11660:	3301      	adds	r3, #1
   11662:	9307      	str	r3, [sp, #28]
   11664:	f8dd 800c 	ldr.w	r8, [sp, #12]
   11668:	f8dd 9020 	ldr.w	r9, [sp, #32]
   1166c:	2701      	movs	r7, #1
   1166e:	e007      	b.n	11680 <_dtoa_r+0x6e8>
   11670:	4629      	mov	r1, r5
   11672:	2300      	movs	r3, #0
   11674:	220a      	movs	r2, #10
   11676:	4620      	mov	r0, r4
   11678:	f7fd f83c 	bl	e6f4 <__multadd>
   1167c:	3701      	adds	r7, #1
   1167e:	4605      	mov	r5, r0
   11680:	4651      	mov	r1, sl
   11682:	4628      	mov	r0, r5
   11684:	f7ff fbf4 	bl	10e70 <quorem>
   11688:	45b9      	cmp	r9, r7
   1168a:	f100 0330 	add.w	r3, r0, #48	; 0x30
   1168e:	f808 3b01 	strb.w	r3, [r8], #1
   11692:	dced      	bgt.n	11670 <_dtoa_r+0x6d8>
   11694:	9a08      	ldr	r2, [sp, #32]
   11696:	2a00      	cmp	r2, #0
   11698:	bfc8      	it	gt
   1169a:	4693      	movgt	fp, r2
   1169c:	9a03      	ldr	r2, [sp, #12]
   1169e:	bfd8      	it	le
   116a0:	f04f 0b01 	movle.w	fp, #1
   116a4:	4493      	add	fp, r2
   116a6:	2700      	movs	r7, #0
   116a8:	4629      	mov	r1, r5
   116aa:	2201      	movs	r2, #1
   116ac:	4620      	mov	r0, r4
   116ae:	9304      	str	r3, [sp, #16]
   116b0:	f7fd f9fc 	bl	eaac <__lshift>
   116b4:	4651      	mov	r1, sl
   116b6:	4605      	mov	r5, r0
   116b8:	f7fd fa70 	bl	eb9c <__mcmp>
   116bc:	2800      	cmp	r0, #0
   116be:	f340 81dc 	ble.w	11a7a <_dtoa_r+0xae2>
   116c2:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   116c6:	9a03      	ldr	r2, [sp, #12]
   116c8:	f10b 3bff 	add.w	fp, fp, #4294967295
   116cc:	e004      	b.n	116d8 <_dtoa_r+0x740>
   116ce:	455a      	cmp	r2, fp
   116d0:	f000 81ee 	beq.w	11ab0 <_dtoa_r+0xb18>
   116d4:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   116d8:	2b39      	cmp	r3, #57	; 0x39
   116da:	f10b 0901 	add.w	r9, fp, #1
   116de:	d0f6      	beq.n	116ce <_dtoa_r+0x736>
   116e0:	3301      	adds	r3, #1
   116e2:	f88b 3000 	strb.w	r3, [fp]
   116e6:	4651      	mov	r1, sl
   116e8:	4620      	mov	r0, r4
   116ea:	f7fc fff9 	bl	e6e0 <_Bfree>
   116ee:	b156      	cbz	r6, 11706 <_dtoa_r+0x76e>
   116f0:	b12f      	cbz	r7, 116fe <_dtoa_r+0x766>
   116f2:	42b7      	cmp	r7, r6
   116f4:	d003      	beq.n	116fe <_dtoa_r+0x766>
   116f6:	4639      	mov	r1, r7
   116f8:	4620      	mov	r0, r4
   116fa:	f7fc fff1 	bl	e6e0 <_Bfree>
   116fe:	4631      	mov	r1, r6
   11700:	4620      	mov	r0, r4
   11702:	f7fc ffed 	bl	e6e0 <_Bfree>
   11706:	4629      	mov	r1, r5
   11708:	4620      	mov	r0, r4
   1170a:	f7fc ffe9 	bl	e6e0 <_Bfree>
   1170e:	2300      	movs	r3, #0
   11710:	f889 3000 	strb.w	r3, [r9]
   11714:	9b24      	ldr	r3, [sp, #144]	; 0x90
   11716:	9a07      	ldr	r2, [sp, #28]
   11718:	601a      	str	r2, [r3, #0]
   1171a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   1171c:	2b00      	cmp	r3, #0
   1171e:	f43f ac77 	beq.w	11010 <_dtoa_r+0x78>
   11722:	9803      	ldr	r0, [sp, #12]
   11724:	f8c3 9000 	str.w	r9, [r3]
   11728:	b019      	add	sp, #100	; 0x64
   1172a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1172e:	2301      	movs	r3, #1
   11730:	1bbf      	subs	r7, r7, r6
   11732:	930e      	str	r3, [sp, #56]	; 0x38
   11734:	1e7b      	subs	r3, r7, #1
   11736:	9306      	str	r3, [sp, #24]
   11738:	f57f acd9 	bpl.w	110ee <_dtoa_r+0x156>
   1173c:	f1c7 0301 	rsb	r3, r7, #1
   11740:	9309      	str	r3, [sp, #36]	; 0x24
   11742:	2300      	movs	r3, #0
   11744:	9306      	str	r3, [sp, #24]
   11746:	e4d4      	b.n	110f2 <_dtoa_r+0x15a>
   11748:	4658      	mov	r0, fp
   1174a:	f7fb f9df 	bl	cb0c <__aeabi_i2d>
   1174e:	4642      	mov	r2, r8
   11750:	464b      	mov	r3, r9
   11752:	f7fb fa9b 	bl	cc8c <__aeabi_dcmpeq>
   11756:	2800      	cmp	r0, #0
   11758:	f47f acb1 	bne.w	110be <_dtoa_r+0x126>
   1175c:	f10b 3bff 	add.w	fp, fp, #4294967295
   11760:	e4ad      	b.n	110be <_dtoa_r+0x126>
   11762:	4b1a      	ldr	r3, [pc, #104]	; (117cc <_dtoa_r+0x834>)
   11764:	9303      	str	r3, [sp, #12]
   11766:	9803      	ldr	r0, [sp, #12]
   11768:	b019      	add	sp, #100	; 0x64
   1176a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1176e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   11772:	9f09      	ldr	r7, [sp, #36]	; 0x24
   11774:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   11776:	e716      	b.n	115a6 <_dtoa_r+0x60e>
   11778:	f1c0 001c 	rsb	r0, r0, #28
   1177c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1177e:	4403      	add	r3, r0
   11780:	9309      	str	r3, [sp, #36]	; 0x24
   11782:	9b06      	ldr	r3, [sp, #24]
   11784:	4403      	add	r3, r0
   11786:	4407      	add	r7, r0
   11788:	9306      	str	r3, [sp, #24]
   1178a:	e74a      	b.n	11622 <_dtoa_r+0x68a>
   1178c:	2601      	movs	r6, #1
   1178e:	e4c7      	b.n	11120 <_dtoa_r+0x188>
   11790:	f1c3 0320 	rsb	r3, r3, #32
   11794:	fa08 f003 	lsl.w	r0, r8, r3
   11798:	e45e      	b.n	11058 <_dtoa_r+0xc0>
   1179a:	4601      	mov	r1, r0
   1179c:	465a      	mov	r2, fp
   1179e:	4620      	mov	r0, r4
   117a0:	f7fd f924 	bl	e9ec <__pow5mult>
   117a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   117a6:	2b01      	cmp	r3, #1
   117a8:	4682      	mov	sl, r0
   117aa:	f340 81ba 	ble.w	11b22 <_dtoa_r+0xb8a>
   117ae:	f04f 0900 	mov.w	r9, #0
   117b2:	f8da 3010 	ldr.w	r3, [sl, #16]
   117b6:	eb0a 0383 	add.w	r3, sl, r3, lsl #2
   117ba:	6918      	ldr	r0, [r3, #16]
   117bc:	f7fc ffea 	bl	e794 <__hi0bits>
   117c0:	f1c0 0020 	rsb	r0, r0, #32
   117c4:	e720      	b.n	11608 <_dtoa_r+0x670>
   117c6:	bf00      	nop
   117c8:	40240000 	.word	0x40240000
   117cc:	000142ec 	.word	0x000142ec
   117d0:	4631      	mov	r1, r6
   117d2:	2300      	movs	r3, #0
   117d4:	220a      	movs	r2, #10
   117d6:	4620      	mov	r0, r4
   117d8:	f7fc ff8c 	bl	e6f4 <__multadd>
   117dc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   117de:	2b00      	cmp	r3, #0
   117e0:	4606      	mov	r6, r0
   117e2:	f340 82f3 	ble.w	11dcc <_dtoa_r+0xe34>
   117e6:	e9cd 8307 	strd	r8, r3, [sp, #28]
   117ea:	2f00      	cmp	r7, #0
   117ec:	f300 811a 	bgt.w	11a24 <_dtoa_r+0xa8c>
   117f0:	f1b9 0f00 	cmp.w	r9, #0
   117f4:	f040 81e3 	bne.w	11bbe <_dtoa_r+0xc26>
   117f8:	46b0      	mov	r8, r6
   117fa:	9b04      	ldr	r3, [sp, #16]
   117fc:	9f03      	ldr	r7, [sp, #12]
   117fe:	9908      	ldr	r1, [sp, #32]
   11800:	f003 0201 	and.w	r2, r3, #1
   11804:	1e7b      	subs	r3, r7, #1
   11806:	4419      	add	r1, r3
   11808:	9b22      	ldr	r3, [sp, #136]	; 0x88
   1180a:	920c      	str	r2, [sp, #48]	; 0x30
   1180c:	4313      	orrs	r3, r2
   1180e:	9109      	str	r1, [sp, #36]	; 0x24
   11810:	930a      	str	r3, [sp, #40]	; 0x28
   11812:	4651      	mov	r1, sl
   11814:	4628      	mov	r0, r5
   11816:	f7ff fb2b 	bl	10e70 <quorem>
   1181a:	4631      	mov	r1, r6
   1181c:	4683      	mov	fp, r0
   1181e:	4628      	mov	r0, r5
   11820:	f7fd f9bc 	bl	eb9c <__mcmp>
   11824:	4642      	mov	r2, r8
   11826:	4651      	mov	r1, sl
   11828:	4681      	mov	r9, r0
   1182a:	4620      	mov	r0, r4
   1182c:	f7fd f9d6 	bl	ebdc <__mdiff>
   11830:	68c2      	ldr	r2, [r0, #12]
   11832:	4601      	mov	r1, r0
   11834:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   11838:	2a00      	cmp	r2, #0
   1183a:	d142      	bne.n	118c2 <_dtoa_r+0x92a>
   1183c:	9006      	str	r0, [sp, #24]
   1183e:	4628      	mov	r0, r5
   11840:	9308      	str	r3, [sp, #32]
   11842:	f7fd f9ab 	bl	eb9c <__mcmp>
   11846:	9906      	ldr	r1, [sp, #24]
   11848:	9004      	str	r0, [sp, #16]
   1184a:	4620      	mov	r0, r4
   1184c:	f7fc ff48 	bl	e6e0 <_Bfree>
   11850:	9a04      	ldr	r2, [sp, #16]
   11852:	9b08      	ldr	r3, [sp, #32]
   11854:	b91a      	cbnz	r2, 1185e <_dtoa_r+0x8c6>
   11856:	990a      	ldr	r1, [sp, #40]	; 0x28
   11858:	2900      	cmp	r1, #0
   1185a:	f000 82a9 	beq.w	11db0 <_dtoa_r+0xe18>
   1185e:	f1b9 0f00 	cmp.w	r9, #0
   11862:	f2c0 8171 	blt.w	11b48 <_dtoa_r+0xbb0>
   11866:	9922      	ldr	r1, [sp, #136]	; 0x88
   11868:	ea49 0901 	orr.w	r9, r9, r1
   1186c:	990c      	ldr	r1, [sp, #48]	; 0x30
   1186e:	ea51 0909 	orrs.w	r9, r1, r9
   11872:	f000 8169 	beq.w	11b48 <_dtoa_r+0xbb0>
   11876:	2a00      	cmp	r2, #0
   11878:	f300 81bc 	bgt.w	11bf4 <_dtoa_r+0xc5c>
   1187c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1187e:	703b      	strb	r3, [r7, #0]
   11880:	f107 0901 	add.w	r9, r7, #1
   11884:	4297      	cmp	r7, r2
   11886:	46cb      	mov	fp, r9
   11888:	f000 81ba 	beq.w	11c00 <_dtoa_r+0xc68>
   1188c:	4629      	mov	r1, r5
   1188e:	2300      	movs	r3, #0
   11890:	220a      	movs	r2, #10
   11892:	4620      	mov	r0, r4
   11894:	f7fc ff2e 	bl	e6f4 <__multadd>
   11898:	4546      	cmp	r6, r8
   1189a:	4605      	mov	r5, r0
   1189c:	4631      	mov	r1, r6
   1189e:	f04f 0300 	mov.w	r3, #0
   118a2:	f04f 020a 	mov.w	r2, #10
   118a6:	4620      	mov	r0, r4
   118a8:	d012      	beq.n	118d0 <_dtoa_r+0x938>
   118aa:	f7fc ff23 	bl	e6f4 <__multadd>
   118ae:	4641      	mov	r1, r8
   118b0:	4606      	mov	r6, r0
   118b2:	2300      	movs	r3, #0
   118b4:	220a      	movs	r2, #10
   118b6:	4620      	mov	r0, r4
   118b8:	f7fc ff1c 	bl	e6f4 <__multadd>
   118bc:	464f      	mov	r7, r9
   118be:	4680      	mov	r8, r0
   118c0:	e7a7      	b.n	11812 <_dtoa_r+0x87a>
   118c2:	4620      	mov	r0, r4
   118c4:	9304      	str	r3, [sp, #16]
   118c6:	f7fc ff0b 	bl	e6e0 <_Bfree>
   118ca:	9b04      	ldr	r3, [sp, #16]
   118cc:	2201      	movs	r2, #1
   118ce:	e7c6      	b.n	1185e <_dtoa_r+0x8c6>
   118d0:	f7fc ff10 	bl	e6f4 <__multadd>
   118d4:	464f      	mov	r7, r9
   118d6:	4606      	mov	r6, r0
   118d8:	4680      	mov	r8, r0
   118da:	e79a      	b.n	11812 <_dtoa_r+0x87a>
   118dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   118de:	2b02      	cmp	r3, #2
   118e0:	dc79      	bgt.n	119d6 <_dtoa_r+0xa3e>
   118e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   118e4:	2b00      	cmp	r3, #0
   118e6:	d180      	bne.n	117ea <_dtoa_r+0x852>
   118e8:	9b07      	ldr	r3, [sp, #28]
   118ea:	4651      	mov	r1, sl
   118ec:	3301      	adds	r3, #1
   118ee:	4628      	mov	r0, r5
   118f0:	9307      	str	r3, [sp, #28]
   118f2:	f7ff fabd 	bl	10e70 <quorem>
   118f6:	f8dd b00c 	ldr.w	fp, [sp, #12]
   118fa:	f100 0330 	add.w	r3, r0, #48	; 0x30
   118fe:	f80b 3b01 	strb.w	r3, [fp], #1
   11902:	2700      	movs	r7, #0
   11904:	e6d0      	b.n	116a8 <_dtoa_r+0x710>
   11906:	4651      	mov	r1, sl
   11908:	4628      	mov	r0, r5
   1190a:	f7fd f947 	bl	eb9c <__mcmp>
   1190e:	2800      	cmp	r0, #0
   11910:	f6bf ae9d 	bge.w	1164e <_dtoa_r+0x6b6>
   11914:	4629      	mov	r1, r5
   11916:	2300      	movs	r3, #0
   11918:	220a      	movs	r2, #10
   1191a:	4620      	mov	r0, r4
   1191c:	f7fc feea 	bl	e6f4 <__multadd>
   11920:	9b07      	ldr	r3, [sp, #28]
   11922:	f103 38ff 	add.w	r8, r3, #4294967295
   11926:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11928:	4605      	mov	r5, r0
   1192a:	2b00      	cmp	r3, #0
   1192c:	f47f af50 	bne.w	117d0 <_dtoa_r+0x838>
   11930:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11932:	2b00      	cmp	r3, #0
   11934:	f340 8243 	ble.w	11dbe <_dtoa_r+0xe26>
   11938:	9308      	str	r3, [sp, #32]
   1193a:	e693      	b.n	11664 <_dtoa_r+0x6cc>
   1193c:	4bb6      	ldr	r3, [pc, #728]	; (11c18 <_dtoa_r+0xc80>)
   1193e:	9303      	str	r3, [sp, #12]
   11940:	3303      	adds	r3, #3
   11942:	e408      	b.n	11156 <_dtoa_r+0x1be>
   11944:	201c      	movs	r0, #28
   11946:	e719      	b.n	1177c <_dtoa_r+0x7e4>
   11948:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   1194c:	2900      	cmp	r1, #0
   1194e:	f47f ae54 	bne.w	115fa <_dtoa_r+0x662>
   11952:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11956:	2b00      	cmp	r3, #0
   11958:	f47f ae4f 	bne.w	115fa <_dtoa_r+0x662>
   1195c:	4baf      	ldr	r3, [pc, #700]	; (11c1c <_dtoa_r+0xc84>)
   1195e:	4013      	ands	r3, r2
   11960:	2b00      	cmp	r3, #0
   11962:	f000 820b 	beq.w	11d7c <_dtoa_r+0xde4>
   11966:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11968:	3301      	adds	r3, #1
   1196a:	9309      	str	r3, [sp, #36]	; 0x24
   1196c:	9b06      	ldr	r3, [sp, #24]
   1196e:	3301      	adds	r3, #1
   11970:	9306      	str	r3, [sp, #24]
   11972:	f04f 0901 	mov.w	r9, #1
   11976:	e642      	b.n	115fe <_dtoa_r+0x666>
   11978:	2301      	movs	r3, #1
   1197a:	930c      	str	r3, [sp, #48]	; 0x30
   1197c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   1197e:	9a07      	ldr	r2, [sp, #28]
   11980:	4413      	add	r3, r2
   11982:	9312      	str	r3, [sp, #72]	; 0x48
   11984:	3301      	adds	r3, #1
   11986:	2b01      	cmp	r3, #1
   11988:	461f      	mov	r7, r3
   1198a:	9308      	str	r3, [sp, #32]
   1198c:	bfb8      	it	lt
   1198e:	2701      	movlt	r7, #1
   11990:	2100      	movs	r1, #0
   11992:	2f17      	cmp	r7, #23
   11994:	63e1      	str	r1, [r4, #60]	; 0x3c
   11996:	f77f ac2f 	ble.w	111f8 <_dtoa_r+0x260>
   1199a:	2201      	movs	r2, #1
   1199c:	2304      	movs	r3, #4
   1199e:	005b      	lsls	r3, r3, #1
   119a0:	f103 0014 	add.w	r0, r3, #20
   119a4:	42b8      	cmp	r0, r7
   119a6:	4611      	mov	r1, r2
   119a8:	f102 0201 	add.w	r2, r2, #1
   119ac:	d9f7      	bls.n	1199e <_dtoa_r+0xa06>
   119ae:	63e1      	str	r1, [r4, #60]	; 0x3c
   119b0:	e422      	b.n	111f8 <_dtoa_r+0x260>
   119b2:	2301      	movs	r3, #1
   119b4:	930c      	str	r3, [sp, #48]	; 0x30
   119b6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   119b8:	2b00      	cmp	r3, #0
   119ba:	dd59      	ble.n	11a70 <_dtoa_r+0xad8>
   119bc:	9312      	str	r3, [sp, #72]	; 0x48
   119be:	9308      	str	r3, [sp, #32]
   119c0:	461f      	mov	r7, r3
   119c2:	e7e5      	b.n	11990 <_dtoa_r+0x9f8>
   119c4:	2300      	movs	r3, #0
   119c6:	930c      	str	r3, [sp, #48]	; 0x30
   119c8:	e7d8      	b.n	1197c <_dtoa_r+0x9e4>
   119ca:	2300      	movs	r3, #0
   119cc:	930c      	str	r3, [sp, #48]	; 0x30
   119ce:	e7f2      	b.n	119b6 <_dtoa_r+0xa1e>
   119d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   119d2:	e9cd 8307 	strd	r8, r3, [sp, #28]
   119d6:	9b08      	ldr	r3, [sp, #32]
   119d8:	2b00      	cmp	r3, #0
   119da:	f47f ad54 	bne.w	11486 <_dtoa_r+0x4ee>
   119de:	4651      	mov	r1, sl
   119e0:	2205      	movs	r2, #5
   119e2:	4620      	mov	r0, r4
   119e4:	f7fc fe86 	bl	e6f4 <__multadd>
   119e8:	4601      	mov	r1, r0
   119ea:	4682      	mov	sl, r0
   119ec:	4628      	mov	r0, r5
   119ee:	f7fd f8d5 	bl	eb9c <__mcmp>
   119f2:	2800      	cmp	r0, #0
   119f4:	f77f ad47 	ble.w	11486 <_dtoa_r+0x4ee>
   119f8:	9b03      	ldr	r3, [sp, #12]
   119fa:	9f07      	ldr	r7, [sp, #28]
   119fc:	2231      	movs	r2, #49	; 0x31
   119fe:	4698      	mov	r8, r3
   11a00:	f803 2b01 	strb.w	r2, [r3], #1
   11a04:	3701      	adds	r7, #1
   11a06:	9303      	str	r3, [sp, #12]
   11a08:	4651      	mov	r1, sl
   11a0a:	4620      	mov	r0, r4
   11a0c:	f7fc fe68 	bl	e6e0 <_Bfree>
   11a10:	1c7b      	adds	r3, r7, #1
   11a12:	f8dd 900c 	ldr.w	r9, [sp, #12]
   11a16:	9307      	str	r3, [sp, #28]
   11a18:	f8cd 800c 	str.w	r8, [sp, #12]
   11a1c:	2e00      	cmp	r6, #0
   11a1e:	f47f ae6e 	bne.w	116fe <_dtoa_r+0x766>
   11a22:	e670      	b.n	11706 <_dtoa_r+0x76e>
   11a24:	4631      	mov	r1, r6
   11a26:	463a      	mov	r2, r7
   11a28:	4620      	mov	r0, r4
   11a2a:	f7fd f83f 	bl	eaac <__lshift>
   11a2e:	4606      	mov	r6, r0
   11a30:	e6de      	b.n	117f0 <_dtoa_r+0x858>
   11a32:	eba3 0808 	sub.w	r8, r3, r8
   11a36:	e5a6      	b.n	11586 <_dtoa_r+0x5ee>
   11a38:	4631      	mov	r1, r6
   11a3a:	4642      	mov	r2, r8
   11a3c:	4620      	mov	r0, r4
   11a3e:	f7fc ffd5 	bl	e9ec <__pow5mult>
   11a42:	462a      	mov	r2, r5
   11a44:	4601      	mov	r1, r0
   11a46:	4606      	mov	r6, r0
   11a48:	4620      	mov	r0, r4
   11a4a:	f7fc ff21 	bl	e890 <__multiply>
   11a4e:	4629      	mov	r1, r5
   11a50:	4605      	mov	r5, r0
   11a52:	4620      	mov	r0, r4
   11a54:	f7fc fe44 	bl	e6e0 <_Bfree>
   11a58:	e5bd      	b.n	115d6 <_dtoa_r+0x63e>
   11a5a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   11a5e:	f04f 0a02 	mov.w	sl, #2
   11a62:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   11a66:	f7ff bbf4 	b.w	11252 <_dtoa_r+0x2ba>
   11a6a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   11a6e:	e685      	b.n	1177c <_dtoa_r+0x7e4>
   11a70:	2301      	movs	r3, #1
   11a72:	9323      	str	r3, [sp, #140]	; 0x8c
   11a74:	9308      	str	r3, [sp, #32]
   11a76:	f7ff bbbb 	b.w	111f0 <_dtoa_r+0x258>
   11a7a:	d103      	bne.n	11a84 <_dtoa_r+0xaec>
   11a7c:	9b04      	ldr	r3, [sp, #16]
   11a7e:	07db      	lsls	r3, r3, #31
   11a80:	f53f ae1f 	bmi.w	116c2 <_dtoa_r+0x72a>
   11a84:	46d9      	mov	r9, fp
   11a86:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   11a8a:	2b30      	cmp	r3, #48	; 0x30
   11a8c:	d0fa      	beq.n	11a84 <_dtoa_r+0xaec>
   11a8e:	e62a      	b.n	116e6 <_dtoa_r+0x74e>
   11a90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   11a92:	2a00      	cmp	r2, #0
   11a94:	f000 812d 	beq.w	11cf2 <_dtoa_r+0xd5a>
   11a98:	f203 4333 	addw	r3, r3, #1075	; 0x433
   11a9c:	9a06      	ldr	r2, [sp, #24]
   11a9e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   11aa2:	441a      	add	r2, r3
   11aa4:	9206      	str	r2, [sp, #24]
   11aa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11aa8:	4617      	mov	r7, r2
   11aaa:	441a      	add	r2, r3
   11aac:	9209      	str	r2, [sp, #36]	; 0x24
   11aae:	e575      	b.n	1159c <_dtoa_r+0x604>
   11ab0:	9b07      	ldr	r3, [sp, #28]
   11ab2:	9a03      	ldr	r2, [sp, #12]
   11ab4:	3301      	adds	r3, #1
   11ab6:	9307      	str	r3, [sp, #28]
   11ab8:	2331      	movs	r3, #49	; 0x31
   11aba:	7013      	strb	r3, [r2, #0]
   11abc:	e613      	b.n	116e6 <_dtoa_r+0x74e>
   11abe:	f04f 0a00 	mov.w	sl, #0
   11ac2:	4656      	mov	r6, sl
   11ac4:	e4df      	b.n	11486 <_dtoa_r+0x4ee>
   11ac6:	900e      	str	r0, [sp, #56]	; 0x38
   11ac8:	e638      	b.n	1173c <_dtoa_r+0x7a4>
   11aca:	f000 813d 	beq.w	11d48 <_dtoa_r+0xdb0>
   11ace:	9a07      	ldr	r2, [sp, #28]
   11ad0:	4b53      	ldr	r3, [pc, #332]	; (11c20 <_dtoa_r+0xc88>)
   11ad2:	4256      	negs	r6, r2
   11ad4:	f006 020f 	and.w	r2, r6, #15
   11ad8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   11adc:	e9d3 2300 	ldrd	r2, r3, [r3]
   11ae0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   11ae4:	f001 fe98 	bl	13818 <__aeabi_dmul>
   11ae8:	1136      	asrs	r6, r6, #4
   11aea:	4680      	mov	r8, r0
   11aec:	4689      	mov	r9, r1
   11aee:	f000 8178 	beq.w	11de2 <_dtoa_r+0xe4a>
   11af2:	4f4c      	ldr	r7, [pc, #304]	; (11c24 <_dtoa_r+0xc8c>)
   11af4:	2300      	movs	r3, #0
   11af6:	f04f 0a02 	mov.w	sl, #2
   11afa:	07f2      	lsls	r2, r6, #31
   11afc:	d506      	bpl.n	11b0c <_dtoa_r+0xb74>
   11afe:	e9d7 2300 	ldrd	r2, r3, [r7]
   11b02:	f001 fe89 	bl	13818 <__aeabi_dmul>
   11b06:	f10a 0a01 	add.w	sl, sl, #1
   11b0a:	2301      	movs	r3, #1
   11b0c:	1076      	asrs	r6, r6, #1
   11b0e:	f107 0708 	add.w	r7, r7, #8
   11b12:	d1f2      	bne.n	11afa <_dtoa_r+0xb62>
   11b14:	2b00      	cmp	r3, #0
   11b16:	f43f abbb 	beq.w	11290 <_dtoa_r+0x2f8>
   11b1a:	4680      	mov	r8, r0
   11b1c:	4689      	mov	r9, r1
   11b1e:	f7ff bbb7 	b.w	11290 <_dtoa_r+0x2f8>
   11b22:	9b04      	ldr	r3, [sp, #16]
   11b24:	2b00      	cmp	r3, #0
   11b26:	f47f ae42 	bne.w	117ae <_dtoa_r+0x816>
   11b2a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   11b2e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   11b32:	2b00      	cmp	r3, #0
   11b34:	f43f af12 	beq.w	1195c <_dtoa_r+0x9c4>
   11b38:	e639      	b.n	117ae <_dtoa_r+0x816>
   11b3a:	4629      	mov	r1, r5
   11b3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   11b3e:	4620      	mov	r0, r4
   11b40:	f7fc ff54 	bl	e9ec <__pow5mult>
   11b44:	4605      	mov	r5, r0
   11b46:	e54b      	b.n	115e0 <_dtoa_r+0x648>
   11b48:	2a00      	cmp	r2, #0
   11b4a:	dd12      	ble.n	11b72 <_dtoa_r+0xbda>
   11b4c:	4629      	mov	r1, r5
   11b4e:	2201      	movs	r2, #1
   11b50:	4620      	mov	r0, r4
   11b52:	9304      	str	r3, [sp, #16]
   11b54:	f7fc ffaa 	bl	eaac <__lshift>
   11b58:	4651      	mov	r1, sl
   11b5a:	4605      	mov	r5, r0
   11b5c:	f7fd f81e 	bl	eb9c <__mcmp>
   11b60:	2800      	cmp	r0, #0
   11b62:	9b04      	ldr	r3, [sp, #16]
   11b64:	f340 8118 	ble.w	11d98 <_dtoa_r+0xe00>
   11b68:	2b39      	cmp	r3, #57	; 0x39
   11b6a:	f000 80f9 	beq.w	11d60 <_dtoa_r+0xdc8>
   11b6e:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   11b72:	46b9      	mov	r9, r7
   11b74:	f809 3b01 	strb.w	r3, [r9], #1
   11b78:	9b07      	ldr	r3, [sp, #28]
   11b7a:	3301      	adds	r3, #1
   11b7c:	4637      	mov	r7, r6
   11b7e:	9307      	str	r3, [sp, #28]
   11b80:	4646      	mov	r6, r8
   11b82:	e5b0      	b.n	116e6 <_dtoa_r+0x74e>
   11b84:	9509      	str	r5, [sp, #36]	; 0x24
   11b86:	9c06      	ldr	r4, [sp, #24]
   11b88:	9d04      	ldr	r5, [sp, #16]
   11b8a:	4602      	mov	r2, r0
   11b8c:	460b      	mov	r3, r1
   11b8e:	f7fa fe71 	bl	c874 <__adddf3>
   11b92:	4652      	mov	r2, sl
   11b94:	465b      	mov	r3, fp
   11b96:	4680      	mov	r8, r0
   11b98:	4689      	mov	r9, r1
   11b9a:	f7fb f89f 	bl	ccdc <__aeabi_dcmpgt>
   11b9e:	b960      	cbnz	r0, 11bba <_dtoa_r+0xc22>
   11ba0:	4652      	mov	r2, sl
   11ba2:	465b      	mov	r3, fp
   11ba4:	4640      	mov	r0, r8
   11ba6:	4649      	mov	r1, r9
   11ba8:	f7fb f870 	bl	cc8c <__aeabi_dcmpeq>
   11bac:	2800      	cmp	r0, #0
   11bae:	f43f acce 	beq.w	1154e <_dtoa_r+0x5b6>
   11bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11bb4:	07d9      	lsls	r1, r3, #31
   11bb6:	f57f acca 	bpl.w	1154e <_dtoa_r+0x5b6>
   11bba:	9a03      	ldr	r2, [sp, #12]
   11bbc:	e404      	b.n	113c8 <_dtoa_r+0x430>
   11bbe:	6871      	ldr	r1, [r6, #4]
   11bc0:	4620      	mov	r0, r4
   11bc2:	f7fc fd67 	bl	e694 <_Balloc>
   11bc6:	4607      	mov	r7, r0
   11bc8:	2800      	cmp	r0, #0
   11bca:	f000 810e 	beq.w	11dea <_dtoa_r+0xe52>
   11bce:	6933      	ldr	r3, [r6, #16]
   11bd0:	3302      	adds	r3, #2
   11bd2:	009a      	lsls	r2, r3, #2
   11bd4:	f106 010c 	add.w	r1, r6, #12
   11bd8:	300c      	adds	r0, #12
   11bda:	f7f8 f887 	bl	9cec <memcpy>
   11bde:	4639      	mov	r1, r7
   11be0:	2201      	movs	r2, #1
   11be2:	4620      	mov	r0, r4
   11be4:	f7fc ff62 	bl	eaac <__lshift>
   11be8:	4680      	mov	r8, r0
   11bea:	e606      	b.n	117fa <_dtoa_r+0x862>
   11bec:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   11bf0:	1a9f      	subs	r7, r3, r2
   11bf2:	e4d3      	b.n	1159c <_dtoa_r+0x604>
   11bf4:	2b39      	cmp	r3, #57	; 0x39
   11bf6:	f000 80b3 	beq.w	11d60 <_dtoa_r+0xdc8>
   11bfa:	46b9      	mov	r9, r7
   11bfc:	3301      	adds	r3, #1
   11bfe:	e7b9      	b.n	11b74 <_dtoa_r+0xbdc>
   11c00:	9a07      	ldr	r2, [sp, #28]
   11c02:	3201      	adds	r2, #1
   11c04:	4637      	mov	r7, r6
   11c06:	9207      	str	r2, [sp, #28]
   11c08:	4646      	mov	r6, r8
   11c0a:	e54d      	b.n	116a8 <_dtoa_r+0x710>
   11c0c:	4629      	mov	r1, r5
   11c0e:	4620      	mov	r0, r4
   11c10:	f7fc feec 	bl	e9ec <__pow5mult>
   11c14:	4605      	mov	r5, r0
   11c16:	e4e3      	b.n	115e0 <_dtoa_r+0x648>
   11c18:	000159d8 	.word	0x000159d8
   11c1c:	7ff00000 	.word	0x7ff00000
   11c20:	00015860 	.word	0x00015860
   11c24:	00015838 	.word	0x00015838
   11c28:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   11c2c:	4981      	ldr	r1, [pc, #516]	; (11e34 <_dtoa_r+0xe9c>)
   11c2e:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   11c32:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11c36:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   11c3a:	f001 fded 	bl	13818 <__aeabi_dmul>
   11c3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11c42:	4649      	mov	r1, r9
   11c44:	4640      	mov	r0, r8
   11c46:	f001 fff9 	bl	13c3c <__aeabi_d2iz>
   11c4a:	4606      	mov	r6, r0
   11c4c:	f7fa ff5e 	bl	cb0c <__aeabi_i2d>
   11c50:	460b      	mov	r3, r1
   11c52:	4602      	mov	r2, r0
   11c54:	4649      	mov	r1, r9
   11c56:	4640      	mov	r0, r8
   11c58:	f7fa fe0a 	bl	c870 <__aeabi_dsub>
   11c5c:	9f03      	ldr	r7, [sp, #12]
   11c5e:	4653      	mov	r3, sl
   11c60:	3630      	adds	r6, #48	; 0x30
   11c62:	2b01      	cmp	r3, #1
   11c64:	f807 6b01 	strb.w	r6, [r7], #1
   11c68:	4680      	mov	r8, r0
   11c6a:	4689      	mov	r9, r1
   11c6c:	f000 80b7 	beq.w	11dde <_dtoa_r+0xe46>
   11c70:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   11c72:	9b03      	ldr	r3, [sp, #12]
   11c74:	441e      	add	r6, r3
   11c76:	4b70      	ldr	r3, [pc, #448]	; (11e38 <_dtoa_r+0xea0>)
   11c78:	2200      	movs	r2, #0
   11c7a:	4640      	mov	r0, r8
   11c7c:	4649      	mov	r1, r9
   11c7e:	f001 fdcb 	bl	13818 <__aeabi_dmul>
   11c82:	4689      	mov	r9, r1
   11c84:	4680      	mov	r8, r0
   11c86:	f001 ffd9 	bl	13c3c <__aeabi_d2iz>
   11c8a:	4682      	mov	sl, r0
   11c8c:	f7fa ff3e 	bl	cb0c <__aeabi_i2d>
   11c90:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   11c94:	4602      	mov	r2, r0
   11c96:	460b      	mov	r3, r1
   11c98:	4640      	mov	r0, r8
   11c9a:	4649      	mov	r1, r9
   11c9c:	f7fa fde8 	bl	c870 <__aeabi_dsub>
   11ca0:	f807 ab01 	strb.w	sl, [r7], #1
   11ca4:	42be      	cmp	r6, r7
   11ca6:	4680      	mov	r8, r0
   11ca8:	4689      	mov	r9, r1
   11caa:	d1e4      	bne.n	11c76 <_dtoa_r+0xcde>
   11cac:	4b63      	ldr	r3, [pc, #396]	; (11e3c <_dtoa_r+0xea4>)
   11cae:	2200      	movs	r2, #0
   11cb0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   11cb4:	f7fa fdde 	bl	c874 <__adddf3>
   11cb8:	4642      	mov	r2, r8
   11cba:	464b      	mov	r3, r9
   11cbc:	f7fa fff0 	bl	cca0 <__aeabi_dcmplt>
   11cc0:	2800      	cmp	r0, #0
   11cc2:	d164      	bne.n	11d8e <_dtoa_r+0xdf6>
   11cc4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   11cc8:	495c      	ldr	r1, [pc, #368]	; (11e3c <_dtoa_r+0xea4>)
   11cca:	2000      	movs	r0, #0
   11ccc:	f7fa fdd0 	bl	c870 <__aeabi_dsub>
   11cd0:	4642      	mov	r2, r8
   11cd2:	464b      	mov	r3, r9
   11cd4:	f7fb f802 	bl	ccdc <__aeabi_dcmpgt>
   11cd8:	2800      	cmp	r0, #0
   11cda:	f43f abad 	beq.w	11438 <_dtoa_r+0x4a0>
   11cde:	46b1      	mov	r9, r6
   11ce0:	3e01      	subs	r6, #1
   11ce2:	f819 3c01 	ldrb.w	r3, [r9, #-1]
   11ce6:	2b30      	cmp	r3, #48	; 0x30
   11ce8:	d0f9      	beq.n	11cde <_dtoa_r+0xd46>
   11cea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11cec:	3301      	adds	r3, #1
   11cee:	9307      	str	r3, [sp, #28]
   11cf0:	e509      	b.n	11706 <_dtoa_r+0x76e>
   11cf2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   11cf4:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   11cf8:	e6d0      	b.n	11a9c <_dtoa_r+0xb04>
   11cfa:	9b08      	ldr	r3, [sp, #32]
   11cfc:	2b00      	cmp	r3, #0
   11cfe:	f43f ab6f 	beq.w	113e0 <_dtoa_r+0x448>
   11d02:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11d04:	2b00      	cmp	r3, #0
   11d06:	f77f ab97 	ble.w	11438 <_dtoa_r+0x4a0>
   11d0a:	9a07      	ldr	r2, [sp, #28]
   11d0c:	3a01      	subs	r2, #1
   11d0e:	e9cd 3213 	strd	r3, r2, [sp, #76]	; 0x4c
   11d12:	4640      	mov	r0, r8
   11d14:	4b48      	ldr	r3, [pc, #288]	; (11e38 <_dtoa_r+0xea0>)
   11d16:	2200      	movs	r2, #0
   11d18:	4649      	mov	r1, r9
   11d1a:	f001 fd7d 	bl	13818 <__aeabi_dmul>
   11d1e:	4680      	mov	r8, r0
   11d20:	4689      	mov	r9, r1
   11d22:	f10a 0001 	add.w	r0, sl, #1
   11d26:	f7fa fef1 	bl	cb0c <__aeabi_i2d>
   11d2a:	4642      	mov	r2, r8
   11d2c:	464b      	mov	r3, r9
   11d2e:	f001 fd73 	bl	13818 <__aeabi_dmul>
   11d32:	4b43      	ldr	r3, [pc, #268]	; (11e40 <_dtoa_r+0xea8>)
   11d34:	2200      	movs	r2, #0
   11d36:	f7fa fd9d 	bl	c874 <__adddf3>
   11d3a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   11d3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   11d42:	9311      	str	r3, [sp, #68]	; 0x44
   11d44:	f7ff bac7 	b.w	112d6 <_dtoa_r+0x33e>
   11d48:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   11d4c:	f04f 0a02 	mov.w	sl, #2
   11d50:	f7ff ba9e 	b.w	11290 <_dtoa_r+0x2f8>
   11d54:	9b07      	ldr	r3, [sp, #28]
   11d56:	3301      	adds	r3, #1
   11d58:	9307      	str	r3, [sp, #28]
   11d5a:	2331      	movs	r3, #49	; 0x31
   11d5c:	f7ff bb3b 	b.w	113d6 <_dtoa_r+0x43e>
   11d60:	9b07      	ldr	r3, [sp, #28]
   11d62:	46bb      	mov	fp, r7
   11d64:	3301      	adds	r3, #1
   11d66:	9307      	str	r3, [sp, #28]
   11d68:	2339      	movs	r3, #57	; 0x39
   11d6a:	4637      	mov	r7, r6
   11d6c:	f80b 3b01 	strb.w	r3, [fp], #1
   11d70:	4646      	mov	r6, r8
   11d72:	e4a8      	b.n	116c6 <_dtoa_r+0x72e>
   11d74:	f04f 0a00 	mov.w	sl, #0
   11d78:	4656      	mov	r6, sl
   11d7a:	e63d      	b.n	119f8 <_dtoa_r+0xa60>
   11d7c:	4699      	mov	r9, r3
   11d7e:	e43e      	b.n	115fe <_dtoa_r+0x666>
   11d80:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11d82:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11d84:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11d86:	3301      	adds	r3, #1
   11d88:	9307      	str	r3, [sp, #28]
   11d8a:	46b1      	mov	r9, r6
   11d8c:	e4bb      	b.n	11706 <_dtoa_r+0x76e>
   11d8e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   11d90:	9a03      	ldr	r2, [sp, #12]
   11d92:	9307      	str	r3, [sp, #28]
   11d94:	f7ff bb18 	b.w	113c8 <_dtoa_r+0x430>
   11d98:	f47f aeeb 	bne.w	11b72 <_dtoa_r+0xbda>
   11d9c:	07da      	lsls	r2, r3, #31
   11d9e:	f57f aee8 	bpl.w	11b72 <_dtoa_r+0xbda>
   11da2:	e6e1      	b.n	11b68 <_dtoa_r+0xbd0>
   11da4:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   11da8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   11daa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   11dac:	f7ff bb44 	b.w	11438 <_dtoa_r+0x4a0>
   11db0:	2b39      	cmp	r3, #57	; 0x39
   11db2:	d0d5      	beq.n	11d60 <_dtoa_r+0xdc8>
   11db4:	f1b9 0f00 	cmp.w	r9, #0
   11db8:	f73f aed9 	bgt.w	11b6e <_dtoa_r+0xbd6>
   11dbc:	e6d9      	b.n	11b72 <_dtoa_r+0xbda>
   11dbe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11dc0:	2b02      	cmp	r3, #2
   11dc2:	f73f ae05 	bgt.w	119d0 <_dtoa_r+0xa38>
   11dc6:	f8cd 801c 	str.w	r8, [sp, #28]
   11dca:	e58d      	b.n	118e8 <_dtoa_r+0x950>
   11dcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   11dce:	2b02      	cmp	r3, #2
   11dd0:	f73f adfe 	bgt.w	119d0 <_dtoa_r+0xa38>
   11dd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   11dd6:	f8cd 801c 	str.w	r8, [sp, #28]
   11dda:	9308      	str	r3, [sp, #32]
   11ddc:	e505      	b.n	117ea <_dtoa_r+0x852>
   11dde:	463e      	mov	r6, r7
   11de0:	e764      	b.n	11cac <_dtoa_r+0xd14>
   11de2:	f04f 0a02 	mov.w	sl, #2
   11de6:	f7ff ba53 	b.w	11290 <_dtoa_r+0x2f8>
   11dea:	4b16      	ldr	r3, [pc, #88]	; (11e44 <_dtoa_r+0xeac>)
   11dec:	4816      	ldr	r0, [pc, #88]	; (11e48 <_dtoa_r+0xeb0>)
   11dee:	463a      	mov	r2, r7
   11df0:	f240 21ef 	movw	r1, #751	; 0x2ef
   11df4:	f7fe ffe0 	bl	10db8 <__assert_func>
   11df8:	2600      	movs	r6, #0
   11dfa:	63e6      	str	r6, [r4, #60]	; 0x3c
   11dfc:	4631      	mov	r1, r6
   11dfe:	4620      	mov	r0, r4
   11e00:	f7fc fc48 	bl	e694 <_Balloc>
   11e04:	9003      	str	r0, [sp, #12]
   11e06:	b950      	cbnz	r0, 11e1e <_dtoa_r+0xe86>
   11e08:	4b0e      	ldr	r3, [pc, #56]	; (11e44 <_dtoa_r+0xeac>)
   11e0a:	480f      	ldr	r0, [pc, #60]	; (11e48 <_dtoa_r+0xeb0>)
   11e0c:	2200      	movs	r2, #0
   11e0e:	f240 11af 	movw	r1, #431	; 0x1af
   11e12:	f7fe ffd1 	bl	10db8 <__assert_func>
   11e16:	4b0d      	ldr	r3, [pc, #52]	; (11e4c <_dtoa_r+0xeb4>)
   11e18:	9303      	str	r3, [sp, #12]
   11e1a:	f7ff b8f9 	b.w	11010 <_dtoa_r+0x78>
   11e1e:	9b03      	ldr	r3, [sp, #12]
   11e20:	63a3      	str	r3, [r4, #56]	; 0x38
   11e22:	f04f 33ff 	mov.w	r3, #4294967295
   11e26:	9312      	str	r3, [sp, #72]	; 0x48
   11e28:	9308      	str	r3, [sp, #32]
   11e2a:	2301      	movs	r3, #1
   11e2c:	9623      	str	r6, [sp, #140]	; 0x8c
   11e2e:	930c      	str	r3, [sp, #48]	; 0x30
   11e30:	f7ff bb02 	b.w	11438 <_dtoa_r+0x4a0>
   11e34:	00015860 	.word	0x00015860
   11e38:	40240000 	.word	0x40240000
   11e3c:	3fe00000 	.word	0x3fe00000
   11e40:	401c0000 	.word	0x401c0000
   11e44:	000157c8 	.word	0x000157c8
   11e48:	000159dc 	.word	0x000159dc
   11e4c:	000159cc 	.word	0x000159cc

00011e50 <_wcrtomb_r>:
   11e50:	b570      	push	{r4, r5, r6, lr}
   11e52:	4605      	mov	r5, r0
   11e54:	b084      	sub	sp, #16
   11e56:	b15b      	cbz	r3, 11e70 <_wcrtomb_r+0x20>
   11e58:	461c      	mov	r4, r3
   11e5a:	b169      	cbz	r1, 11e78 <_wcrtomb_r+0x28>
   11e5c:	4b0e      	ldr	r3, [pc, #56]	; (11e98 <_wcrtomb_r+0x48>)
   11e5e:	4628      	mov	r0, r5
   11e60:	f8d3 60e0 	ldr.w	r6, [r3, #224]	; 0xe0
   11e64:	4623      	mov	r3, r4
   11e66:	47b0      	blx	r6
   11e68:	1c43      	adds	r3, r0, #1
   11e6a:	d00f      	beq.n	11e8c <_wcrtomb_r+0x3c>
   11e6c:	b004      	add	sp, #16
   11e6e:	bd70      	pop	{r4, r5, r6, pc}
   11e70:	f500 7482 	add.w	r4, r0, #260	; 0x104
   11e74:	2900      	cmp	r1, #0
   11e76:	d1f1      	bne.n	11e5c <_wcrtomb_r+0xc>
   11e78:	4a07      	ldr	r2, [pc, #28]	; (11e98 <_wcrtomb_r+0x48>)
   11e7a:	4623      	mov	r3, r4
   11e7c:	f8d2 60e0 	ldr.w	r6, [r2, #224]	; 0xe0
   11e80:	4628      	mov	r0, r5
   11e82:	460a      	mov	r2, r1
   11e84:	a901      	add	r1, sp, #4
   11e86:	47b0      	blx	r6
   11e88:	1c43      	adds	r3, r0, #1
   11e8a:	d1ef      	bne.n	11e6c <_wcrtomb_r+0x1c>
   11e8c:	2200      	movs	r2, #0
   11e8e:	238a      	movs	r3, #138	; 0x8a
   11e90:	6022      	str	r2, [r4, #0]
   11e92:	602b      	str	r3, [r5, #0]
   11e94:	b004      	add	sp, #16
   11e96:	bd70      	pop	{r4, r5, r6, pc}
   11e98:	1fff8ed4 	.word	0x1fff8ed4

00011e9c <_wcsrtombs_r>:
   11e9c:	b500      	push	{lr}
   11e9e:	b083      	sub	sp, #12
   11ea0:	f8dd c010 	ldr.w	ip, [sp, #16]
   11ea4:	e9cd 3c00 	strd	r3, ip, [sp]
   11ea8:	f04f 33ff 	mov.w	r3, #4294967295
   11eac:	f001 fbb6 	bl	1361c <_wcsnrtombs_r>
   11eb0:	b003      	add	sp, #12
   11eb2:	f85d fb04 	ldr.w	pc, [sp], #4
   11eb6:	bf00      	nop

00011eb8 <fiprintf>:
   11eb8:	b40e      	push	{r1, r2, r3}
   11eba:	b510      	push	{r4, lr}
   11ebc:	b083      	sub	sp, #12
   11ebe:	ab05      	add	r3, sp, #20
   11ec0:	4c06      	ldr	r4, [pc, #24]	; (11edc <fiprintf+0x24>)
   11ec2:	f853 2b04 	ldr.w	r2, [r3], #4
   11ec6:	9301      	str	r3, [sp, #4]
   11ec8:	4601      	mov	r1, r0
   11eca:	6820      	ldr	r0, [r4, #0]
   11ecc:	f000 f8c4 	bl	12058 <_vfiprintf_r>
   11ed0:	b003      	add	sp, #12
   11ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   11ed6:	b003      	add	sp, #12
   11ed8:	4770      	bx	lr
   11eda:	bf00      	nop
   11edc:	1fff9160 	.word	0x1fff9160

00011ee0 <__ssprint_r>:
   11ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ee4:	6893      	ldr	r3, [r2, #8]
   11ee6:	6817      	ldr	r7, [r2, #0]
   11ee8:	b083      	sub	sp, #12
   11eea:	4692      	mov	sl, r2
   11eec:	2b00      	cmp	r3, #0
   11eee:	d070      	beq.n	11fd2 <__ssprint_r+0xf2>
   11ef0:	4681      	mov	r9, r0
   11ef2:	688a      	ldr	r2, [r1, #8]
   11ef4:	6808      	ldr	r0, [r1, #0]
   11ef6:	460c      	mov	r4, r1
   11ef8:	3708      	adds	r7, #8
   11efa:	e043      	b.n	11f84 <__ssprint_r+0xa4>
   11efc:	89a3      	ldrh	r3, [r4, #12]
   11efe:	f413 6f90 	tst.w	r3, #1152	; 0x480
   11f02:	d02e      	beq.n	11f62 <__ssprint_r+0x82>
   11f04:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
   11f08:	eba0 0801 	sub.w	r8, r0, r1
   11f0c:	eb06 0646 	add.w	r6, r6, r6, lsl #1
   11f10:	eb06 76d6 	add.w	r6, r6, r6, lsr #31
   11f14:	f108 0001 	add.w	r0, r8, #1
   11f18:	1076      	asrs	r6, r6, #1
   11f1a:	4428      	add	r0, r5
   11f1c:	42b0      	cmp	r0, r6
   11f1e:	4632      	mov	r2, r6
   11f20:	bf84      	itt	hi
   11f22:	4606      	movhi	r6, r0
   11f24:	4632      	movhi	r2, r6
   11f26:	055b      	lsls	r3, r3, #21
   11f28:	d537      	bpl.n	11f9a <__ssprint_r+0xba>
   11f2a:	4611      	mov	r1, r2
   11f2c:	4648      	mov	r0, r9
   11f2e:	f7fb fa37 	bl	d3a0 <_malloc_r>
   11f32:	9001      	str	r0, [sp, #4]
   11f34:	2800      	cmp	r0, #0
   11f36:	d03a      	beq.n	11fae <__ssprint_r+0xce>
   11f38:	4642      	mov	r2, r8
   11f3a:	6921      	ldr	r1, [r4, #16]
   11f3c:	f7f7 fed6 	bl	9cec <memcpy>
   11f40:	89a2      	ldrh	r2, [r4, #12]
   11f42:	9b01      	ldr	r3, [sp, #4]
   11f44:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   11f48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   11f4c:	81a2      	strh	r2, [r4, #12]
   11f4e:	eba6 0208 	sub.w	r2, r6, r8
   11f52:	eb03 0008 	add.w	r0, r3, r8
   11f56:	6166      	str	r6, [r4, #20]
   11f58:	60a2      	str	r2, [r4, #8]
   11f5a:	6123      	str	r3, [r4, #16]
   11f5c:	6020      	str	r0, [r4, #0]
   11f5e:	462e      	mov	r6, r5
   11f60:	46a8      	mov	r8, r5
   11f62:	4642      	mov	r2, r8
   11f64:	4659      	mov	r1, fp
   11f66:	f7fc f80d 	bl	df84 <memmove>
   11f6a:	f8da 3008 	ldr.w	r3, [sl, #8]
   11f6e:	68a2      	ldr	r2, [r4, #8]
   11f70:	6820      	ldr	r0, [r4, #0]
   11f72:	1b92      	subs	r2, r2, r6
   11f74:	4440      	add	r0, r8
   11f76:	1b5b      	subs	r3, r3, r5
   11f78:	60a2      	str	r2, [r4, #8]
   11f7a:	6020      	str	r0, [r4, #0]
   11f7c:	f8ca 3008 	str.w	r3, [sl, #8]
   11f80:	b33b      	cbz	r3, 11fd2 <__ssprint_r+0xf2>
   11f82:	3708      	adds	r7, #8
   11f84:	e957 b502 	ldrd	fp, r5, [r7, #-8]
   11f88:	2d00      	cmp	r5, #0
   11f8a:	d0fa      	beq.n	11f82 <__ssprint_r+0xa2>
   11f8c:	42aa      	cmp	r2, r5
   11f8e:	4616      	mov	r6, r2
   11f90:	4690      	mov	r8, r2
   11f92:	d9b3      	bls.n	11efc <__ssprint_r+0x1c>
   11f94:	462e      	mov	r6, r5
   11f96:	46a8      	mov	r8, r5
   11f98:	e7e3      	b.n	11f62 <__ssprint_r+0x82>
   11f9a:	4648      	mov	r0, r9
   11f9c:	f7fb fcbc 	bl	d918 <_realloc_r>
   11fa0:	4603      	mov	r3, r0
   11fa2:	2800      	cmp	r0, #0
   11fa4:	d1d3      	bne.n	11f4e <__ssprint_r+0x6e>
   11fa6:	6921      	ldr	r1, [r4, #16]
   11fa8:	4648      	mov	r0, r9
   11faa:	f7fc fa57 	bl	e45c <_free_r>
   11fae:	89a3      	ldrh	r3, [r4, #12]
   11fb0:	220c      	movs	r2, #12
   11fb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11fb6:	f8c9 2000 	str.w	r2, [r9]
   11fba:	f04f 30ff 	mov.w	r0, #4294967295
   11fbe:	81a3      	strh	r3, [r4, #12]
   11fc0:	2200      	movs	r2, #0
   11fc2:	2300      	movs	r3, #0
   11fc4:	f8ca 2008 	str.w	r2, [sl, #8]
   11fc8:	f8ca 3004 	str.w	r3, [sl, #4]
   11fcc:	b003      	add	sp, #12
   11fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fd2:	2000      	movs	r0, #0
   11fd4:	2300      	movs	r3, #0
   11fd6:	f8ca 3004 	str.w	r3, [sl, #4]
   11fda:	b003      	add	sp, #12
   11fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00011fe0 <__sprint_r.part.0>:
   11fe0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fe4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   11fe6:	049c      	lsls	r4, r3, #18
   11fe8:	4690      	mov	r8, r2
   11fea:	d52d      	bpl.n	12048 <__sprint_r.part.0+0x68>
   11fec:	6893      	ldr	r3, [r2, #8]
   11fee:	6812      	ldr	r2, [r2, #0]
   11ff0:	b343      	cbz	r3, 12044 <__sprint_r.part.0+0x64>
   11ff2:	468b      	mov	fp, r1
   11ff4:	4606      	mov	r6, r0
   11ff6:	f102 0908 	add.w	r9, r2, #8
   11ffa:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   11ffe:	ea5f 079a 	movs.w	r7, sl, lsr #2
   12002:	d015      	beq.n	12030 <__sprint_r.part.0+0x50>
   12004:	3d04      	subs	r5, #4
   12006:	2400      	movs	r4, #0
   12008:	e001      	b.n	1200e <__sprint_r.part.0+0x2e>
   1200a:	42a7      	cmp	r7, r4
   1200c:	d00e      	beq.n	1202c <__sprint_r.part.0+0x4c>
   1200e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   12012:	465a      	mov	r2, fp
   12014:	4630      	mov	r0, r6
   12016:	f001 fa51 	bl	134bc <_fputwc_r>
   1201a:	1c43      	adds	r3, r0, #1
   1201c:	f104 0401 	add.w	r4, r4, #1
   12020:	d1f3      	bne.n	1200a <__sprint_r.part.0+0x2a>
   12022:	2300      	movs	r3, #0
   12024:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12028:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1202c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   12030:	f02a 0a03 	bic.w	sl, sl, #3
   12034:	eba3 030a 	sub.w	r3, r3, sl
   12038:	f8c8 3008 	str.w	r3, [r8, #8]
   1203c:	f109 0908 	add.w	r9, r9, #8
   12040:	2b00      	cmp	r3, #0
   12042:	d1da      	bne.n	11ffa <__sprint_r.part.0+0x1a>
   12044:	2000      	movs	r0, #0
   12046:	e7ec      	b.n	12022 <__sprint_r.part.0+0x42>
   12048:	f001 f808 	bl	1305c <__sfvwrite_r>
   1204c:	2300      	movs	r3, #0
   1204e:	e9c8 3301 	strd	r3, r3, [r8, #4]
   12052:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12056:	bf00      	nop

00012058 <_vfiprintf_r>:
   12058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1205c:	b0c5      	sub	sp, #276	; 0x114
   1205e:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
   12062:	4683      	mov	fp, r0
   12064:	9103      	str	r1, [sp, #12]
   12066:	4616      	mov	r6, r2
   12068:	2100      	movs	r1, #0
   1206a:	2208      	movs	r2, #8
   1206c:	4650      	mov	r0, sl
   1206e:	461c      	mov	r4, r3
   12070:	9307      	str	r3, [sp, #28]
   12072:	f7fc f803 	bl	e07c <memset>
   12076:	f1bb 0f00 	cmp.w	fp, #0
   1207a:	d004      	beq.n	12086 <_vfiprintf_r+0x2e>
   1207c:	f8db 3034 	ldr.w	r3, [fp, #52]	; 0x34
   12080:	2b00      	cmp	r3, #0
   12082:	f000 86a1 	beq.w	12dc8 <_vfiprintf_r+0xd70>
   12086:	9a03      	ldr	r2, [sp, #12]
   12088:	6e53      	ldr	r3, [r2, #100]	; 0x64
   1208a:	07db      	lsls	r3, r3, #31
   1208c:	f140 851c 	bpl.w	12ac8 <_vfiprintf_r+0xa70>
   12090:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   12094:	b28a      	uxth	r2, r1
   12096:	0495      	lsls	r5, r2, #18
   12098:	d409      	bmi.n	120ae <_vfiprintf_r+0x56>
   1209a:	9b03      	ldr	r3, [sp, #12]
   1209c:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
   120a0:	8199      	strh	r1, [r3, #12]
   120a2:	b28a      	uxth	r2, r1
   120a4:	4619      	mov	r1, r3
   120a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   120a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   120ac:	664b      	str	r3, [r1, #100]	; 0x64
   120ae:	0710      	lsls	r0, r2, #28
   120b0:	f140 8104 	bpl.w	122bc <_vfiprintf_r+0x264>
   120b4:	9b03      	ldr	r3, [sp, #12]
   120b6:	691b      	ldr	r3, [r3, #16]
   120b8:	2b00      	cmp	r3, #0
   120ba:	f000 80ff 	beq.w	122bc <_vfiprintf_r+0x264>
   120be:	f002 031a 	and.w	r3, r2, #26
   120c2:	2b0a      	cmp	r3, #10
   120c4:	f000 8108 	beq.w	122d8 <_vfiprintf_r+0x280>
   120c8:	2300      	movs	r3, #0
   120ca:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
   120ce:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
   120d2:	aa1b      	add	r2, sp, #108	; 0x6c
   120d4:	930b      	str	r3, [sp, #44]	; 0x2c
   120d6:	9218      	str	r2, [sp, #96]	; 0x60
   120d8:	4691      	mov	r9, r2
   120da:	930c      	str	r3, [sp, #48]	; 0x30
   120dc:	9305      	str	r3, [sp, #20]
   120de:	46b0      	mov	r8, r6
   120e0:	4644      	mov	r4, r8
   120e2:	4ba6      	ldr	r3, [pc, #664]	; (1237c <_vfiprintf_r+0x324>)
   120e4:	f8d3 50e4 	ldr.w	r5, [r3, #228]	; 0xe4
   120e8:	f7fc f84c 	bl	e184 <__locale_mb_cur_max>
   120ec:	4622      	mov	r2, r4
   120ee:	4603      	mov	r3, r0
   120f0:	a912      	add	r1, sp, #72	; 0x48
   120f2:	f8cd a000 	str.w	sl, [sp]
   120f6:	4658      	mov	r0, fp
   120f8:	47a8      	blx	r5
   120fa:	2800      	cmp	r0, #0
   120fc:	f000 8140 	beq.w	12380 <_vfiprintf_r+0x328>
   12100:	f2c0 8133 	blt.w	1236a <_vfiprintf_r+0x312>
   12104:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12106:	2a25      	cmp	r2, #37	; 0x25
   12108:	4603      	mov	r3, r0
   1210a:	d001      	beq.n	12110 <_vfiprintf_r+0xb8>
   1210c:	441c      	add	r4, r3
   1210e:	e7e8      	b.n	120e2 <_vfiprintf_r+0x8a>
   12110:	ebb4 0608 	subs.w	r6, r4, r8
   12114:	4605      	mov	r5, r0
   12116:	f040 8137 	bne.w	12388 <_vfiprintf_r+0x330>
   1211a:	2300      	movs	r3, #0
   1211c:	7861      	ldrb	r1, [r4, #1]
   1211e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12122:	f104 0801 	add.w	r8, r4, #1
   12126:	9306      	str	r3, [sp, #24]
   12128:	f04f 37ff 	mov.w	r7, #4294967295
   1212c:	461e      	mov	r6, r3
   1212e:	242b      	movs	r4, #43	; 0x2b
   12130:	f108 0801 	add.w	r8, r8, #1
   12134:	f1a1 0320 	sub.w	r3, r1, #32
   12138:	2b5a      	cmp	r3, #90	; 0x5a
   1213a:	f200 8165 	bhi.w	12408 <_vfiprintf_r+0x3b0>
   1213e:	e8df f013 	tbh	[pc, r3, lsl #1]
   12142:	029f      	.short	0x029f
   12144:	01630163 	.word	0x01630163
   12148:	0163029a 	.word	0x0163029a
   1214c:	01630163 	.word	0x01630163
   12150:	0163006a 	.word	0x0163006a
   12154:	02670163 	.word	0x02670163
   12158:	01630277 	.word	0x01630277
   1215c:	02810272 	.word	0x02810272
   12160:	027c0163 	.word	0x027c0163
   12164:	005b005b 	.word	0x005b005b
   12168:	005b005b 	.word	0x005b005b
   1216c:	005b005b 	.word	0x005b005b
   12170:	005b005b 	.word	0x005b005b
   12174:	0163005b 	.word	0x0163005b
   12178:	01630163 	.word	0x01630163
   1217c:	01630163 	.word	0x01630163
   12180:	01630163 	.word	0x01630163
   12184:	01630163 	.word	0x01630163
   12188:	00840246 	.word	0x00840246
   1218c:	01630163 	.word	0x01630163
   12190:	01630163 	.word	0x01630163
   12194:	01630163 	.word	0x01630163
   12198:	01630163 	.word	0x01630163
   1219c:	01630163 	.word	0x01630163
   121a0:	016300e2 	.word	0x016300e2
   121a4:	01630163 	.word	0x01630163
   121a8:	0163021d 	.word	0x0163021d
   121ac:	016302c4 	.word	0x016302c4
   121b0:	05940163 	.word	0x05940163
   121b4:	01630163 	.word	0x01630163
   121b8:	01630163 	.word	0x01630163
   121bc:	01630163 	.word	0x01630163
   121c0:	01630163 	.word	0x01630163
   121c4:	01630163 	.word	0x01630163
   121c8:	00860246 	.word	0x00860246
   121cc:	01630163 	.word	0x01630163
   121d0:	02b70163 	.word	0x02b70163
   121d4:	007f0086 	.word	0x007f0086
   121d8:	02aa0163 	.word	0x02aa0163
   121dc:	02e70163 	.word	0x02e70163
   121e0:	02d700e4 	.word	0x02d700e4
   121e4:	0163007f 	.word	0x0163007f
   121e8:	007c021d 	.word	0x007c021d
   121ec:	01630572 	.word	0x01630572
   121f0:	05740163 	.word	0x05740163
   121f4:	007c0163 	.word	0x007c0163
   121f8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   121fc:	2200      	movs	r2, #0
   121fe:	f818 1b01 	ldrb.w	r1, [r8], #1
   12202:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   12206:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   1220a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   1220e:	2b09      	cmp	r3, #9
   12210:	d9f5      	bls.n	121fe <_vfiprintf_r+0x1a6>
   12212:	9206      	str	r2, [sp, #24]
   12214:	e78e      	b.n	12134 <_vfiprintf_r+0xdc>
   12216:	4658      	mov	r0, fp
   12218:	f7fe fce8 	bl	10bec <_localeconv_r>
   1221c:	6843      	ldr	r3, [r0, #4]
   1221e:	930d      	str	r3, [sp, #52]	; 0x34
   12220:	4618      	mov	r0, r3
   12222:	f7fc f84d 	bl	e2c0 <strlen>
   12226:	900e      	str	r0, [sp, #56]	; 0x38
   12228:	4605      	mov	r5, r0
   1222a:	4658      	mov	r0, fp
   1222c:	f7fe fcde 	bl	10bec <_localeconv_r>
   12230:	6883      	ldr	r3, [r0, #8]
   12232:	930c      	str	r3, [sp, #48]	; 0x30
   12234:	2d00      	cmp	r5, #0
   12236:	f040 84df 	bne.w	12bf8 <_vfiprintf_r+0xba0>
   1223a:	f898 1000 	ldrb.w	r1, [r8]
   1223e:	e777      	b.n	12130 <_vfiprintf_r+0xd8>
   12240:	f898 1000 	ldrb.w	r1, [r8]
   12244:	f046 0620 	orr.w	r6, r6, #32
   12248:	e772      	b.n	12130 <_vfiprintf_r+0xd8>
   1224a:	f046 0610 	orr.w	r6, r6, #16
   1224e:	06b4      	lsls	r4, r6, #26
   12250:	f140 8178 	bpl.w	12544 <_vfiprintf_r+0x4ec>
   12254:	9b07      	ldr	r3, [sp, #28]
   12256:	3307      	adds	r3, #7
   12258:	f023 0307 	bic.w	r3, r3, #7
   1225c:	461a      	mov	r2, r3
   1225e:	6859      	ldr	r1, [r3, #4]
   12260:	f852 3b08 	ldr.w	r3, [r2], #8
   12264:	9207      	str	r2, [sp, #28]
   12266:	460a      	mov	r2, r1
   12268:	2900      	cmp	r1, #0
   1226a:	f2c0 847a 	blt.w	12b62 <_vfiprintf_r+0xb0a>
   1226e:	1c79      	adds	r1, r7, #1
   12270:	f000 85a7 	beq.w	12dc2 <_vfiprintf_r+0xd6a>
   12274:	f026 0180 	bic.w	r1, r6, #128	; 0x80
   12278:	9102      	str	r1, [sp, #8]
   1227a:	ea53 0102 	orrs.w	r1, r3, r2
   1227e:	f000 8448 	beq.w	12b12 <_vfiprintf_r+0xaba>
   12282:	2b0a      	cmp	r3, #10
   12284:	f172 0100 	sbcs.w	r1, r2, #0
   12288:	f080 8549 	bcs.w	12d1e <_vfiprintf_r+0xcc6>
   1228c:	3330      	adds	r3, #48	; 0x30
   1228e:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12292:	9e02      	ldr	r6, [sp, #8]
   12294:	2301      	movs	r3, #1
   12296:	9304      	str	r3, [sp, #16]
   12298:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   1229c:	9b04      	ldr	r3, [sp, #16]
   1229e:	42bb      	cmp	r3, r7
   122a0:	bfb8      	it	lt
   122a2:	463b      	movlt	r3, r7
   122a4:	9302      	str	r3, [sp, #8]
   122a6:	2300      	movs	r3, #0
   122a8:	9308      	str	r3, [sp, #32]
   122aa:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   122ae:	2b00      	cmp	r3, #0
   122b0:	f000 80b8 	beq.w	12424 <_vfiprintf_r+0x3cc>
   122b4:	9b02      	ldr	r3, [sp, #8]
   122b6:	3301      	adds	r3, #1
   122b8:	9302      	str	r3, [sp, #8]
   122ba:	e0b3      	b.n	12424 <_vfiprintf_r+0x3cc>
   122bc:	9d03      	ldr	r5, [sp, #12]
   122be:	4658      	mov	r0, fp
   122c0:	4629      	mov	r1, r5
   122c2:	f001 f83f 	bl	13344 <__swsetup_r>
   122c6:	2800      	cmp	r0, #0
   122c8:	f040 8656 	bne.w	12f78 <_vfiprintf_r+0xf20>
   122cc:	89aa      	ldrh	r2, [r5, #12]
   122ce:	f002 031a 	and.w	r3, r2, #26
   122d2:	2b0a      	cmp	r3, #10
   122d4:	f47f aef8 	bne.w	120c8 <_vfiprintf_r+0x70>
   122d8:	9903      	ldr	r1, [sp, #12]
   122da:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   122de:	2b00      	cmp	r3, #0
   122e0:	f6ff aef2 	blt.w	120c8 <_vfiprintf_r+0x70>
   122e4:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   122e6:	07db      	lsls	r3, r3, #31
   122e8:	d402      	bmi.n	122f0 <_vfiprintf_r+0x298>
   122ea:	0597      	lsls	r7, r2, #22
   122ec:	f140 8618 	bpl.w	12f20 <_vfiprintf_r+0xec8>
   122f0:	9903      	ldr	r1, [sp, #12]
   122f2:	4623      	mov	r3, r4
   122f4:	4632      	mov	r2, r6
   122f6:	4658      	mov	r0, fp
   122f8:	f000 fe70 	bl	12fdc <__sbprintf>
   122fc:	9005      	str	r0, [sp, #20]
   122fe:	9805      	ldr	r0, [sp, #20]
   12300:	b045      	add	sp, #276	; 0x114
   12302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12306:	f046 0610 	orr.w	r6, r6, #16
   1230a:	f016 0220 	ands.w	r2, r6, #32
   1230e:	f000 8126 	beq.w	1255e <_vfiprintf_r+0x506>
   12312:	9b07      	ldr	r3, [sp, #28]
   12314:	3307      	adds	r3, #7
   12316:	f023 0307 	bic.w	r3, r3, #7
   1231a:	4619      	mov	r1, r3
   1231c:	685a      	ldr	r2, [r3, #4]
   1231e:	f851 3b08 	ldr.w	r3, [r1], #8
   12322:	9107      	str	r1, [sp, #28]
   12324:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12328:	9102      	str	r1, [sp, #8]
   1232a:	2100      	movs	r1, #0
   1232c:	2000      	movs	r0, #0
   1232e:	f88d 0043 	strb.w	r0, [sp, #67]	; 0x43
   12332:	1c78      	adds	r0, r7, #1
   12334:	f000 8200 	beq.w	12738 <_vfiprintf_r+0x6e0>
   12338:	9802      	ldr	r0, [sp, #8]
   1233a:	f020 0680 	bic.w	r6, r0, #128	; 0x80
   1233e:	ea53 0002 	orrs.w	r0, r3, r2
   12342:	f040 81f8 	bne.w	12736 <_vfiprintf_r+0x6de>
   12346:	2f00      	cmp	r7, #0
   12348:	f040 8543 	bne.w	12dd2 <_vfiprintf_r+0xd7a>
   1234c:	2900      	cmp	r1, #0
   1234e:	f040 83e4 	bne.w	12b1a <_vfiprintf_r+0xac2>
   12352:	9b02      	ldr	r3, [sp, #8]
   12354:	f013 0301 	ands.w	r3, r3, #1
   12358:	9304      	str	r3, [sp, #16]
   1235a:	f000 8420 	beq.w	12b9e <_vfiprintf_r+0xb46>
   1235e:	2330      	movs	r3, #48	; 0x30
   12360:	f88d 310f 	strb.w	r3, [sp, #271]	; 0x10f
   12364:	f20d 140f 	addw	r4, sp, #271	; 0x10f
   12368:	e798      	b.n	1229c <_vfiprintf_r+0x244>
   1236a:	2208      	movs	r2, #8
   1236c:	2100      	movs	r1, #0
   1236e:	4650      	mov	r0, sl
   12370:	f7fb fe84 	bl	e07c <memset>
   12374:	2301      	movs	r3, #1
   12376:	441c      	add	r4, r3
   12378:	e6b3      	b.n	120e2 <_vfiprintf_r+0x8a>
   1237a:	bf00      	nop
   1237c:	1fff8ed4 	.word	0x1fff8ed4
   12380:	ebb4 0608 	subs.w	r6, r4, r8
   12384:	4605      	mov	r5, r0
   12386:	d01a      	beq.n	123be <_vfiprintf_r+0x366>
   12388:	9b19      	ldr	r3, [sp, #100]	; 0x64
   1238a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   1238c:	3301      	adds	r3, #1
   1238e:	4432      	add	r2, r6
   12390:	2b07      	cmp	r3, #7
   12392:	e9c9 8600 	strd	r8, r6, [r9]
   12396:	921a      	str	r2, [sp, #104]	; 0x68
   12398:	9319      	str	r3, [sp, #100]	; 0x64
   1239a:	dd1a      	ble.n	123d2 <_vfiprintf_r+0x37a>
   1239c:	2a00      	cmp	r2, #0
   1239e:	f000 83b4 	beq.w	12b0a <_vfiprintf_r+0xab2>
   123a2:	9903      	ldr	r1, [sp, #12]
   123a4:	aa18      	add	r2, sp, #96	; 0x60
   123a6:	4658      	mov	r0, fp
   123a8:	f7ff fe1a 	bl	11fe0 <__sprint_r.part.0>
   123ac:	b9d8      	cbnz	r0, 123e6 <_vfiprintf_r+0x38e>
   123ae:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   123b2:	9b05      	ldr	r3, [sp, #20]
   123b4:	4433      	add	r3, r6
   123b6:	9305      	str	r3, [sp, #20]
   123b8:	2d00      	cmp	r5, #0
   123ba:	f47f aeae 	bne.w	1211a <_vfiprintf_r+0xc2>
   123be:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   123c0:	2b00      	cmp	r3, #0
   123c2:	f040 85ca 	bne.w	12f5a <_vfiprintf_r+0xf02>
   123c6:	9b03      	ldr	r3, [sp, #12]
   123c8:	2200      	movs	r2, #0
   123ca:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   123ce:	9219      	str	r2, [sp, #100]	; 0x64
   123d0:	e00c      	b.n	123ec <_vfiprintf_r+0x394>
   123d2:	f109 0908 	add.w	r9, r9, #8
   123d6:	e7ec      	b.n	123b2 <_vfiprintf_r+0x35a>
   123d8:	46b3      	mov	fp, r6
   123da:	9b08      	ldr	r3, [sp, #32]
   123dc:	b11b      	cbz	r3, 123e6 <_vfiprintf_r+0x38e>
   123de:	9908      	ldr	r1, [sp, #32]
   123e0:	4658      	mov	r0, fp
   123e2:	f7fc f83b 	bl	e45c <_free_r>
   123e6:	9b03      	ldr	r3, [sp, #12]
   123e8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
   123ec:	9a03      	ldr	r2, [sp, #12]
   123ee:	6e52      	ldr	r2, [r2, #100]	; 0x64
   123f0:	f012 0f01 	tst.w	r2, #1
   123f4:	b29a      	uxth	r2, r3
   123f6:	f000 809c 	beq.w	12532 <_vfiprintf_r+0x4da>
   123fa:	0650      	lsls	r0, r2, #25
   123fc:	f100 85c8 	bmi.w	12f90 <_vfiprintf_r+0xf38>
   12400:	9805      	ldr	r0, [sp, #20]
   12402:	b045      	add	sp, #276	; 0x114
   12404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12408:	2900      	cmp	r1, #0
   1240a:	d0d8      	beq.n	123be <_vfiprintf_r+0x366>
   1240c:	2300      	movs	r3, #0
   1240e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12412:	2301      	movs	r3, #1
   12414:	f88d 10ac 	strb.w	r1, [sp, #172]	; 0xac
   12418:	9302      	str	r3, [sp, #8]
   1241a:	9304      	str	r3, [sp, #16]
   1241c:	ac2b      	add	r4, sp, #172	; 0xac
   1241e:	2300      	movs	r3, #0
   12420:	9308      	str	r3, [sp, #32]
   12422:	461f      	mov	r7, r3
   12424:	f016 0302 	ands.w	r3, r6, #2
   12428:	9309      	str	r3, [sp, #36]	; 0x24
   1242a:	d002      	beq.n	12432 <_vfiprintf_r+0x3da>
   1242c:	9b02      	ldr	r3, [sp, #8]
   1242e:	3302      	adds	r3, #2
   12430:	9302      	str	r3, [sp, #8]
   12432:	f016 0384 	ands.w	r3, r6, #132	; 0x84
   12436:	930a      	str	r3, [sp, #40]	; 0x28
   12438:	d105      	bne.n	12446 <_vfiprintf_r+0x3ee>
   1243a:	9b06      	ldr	r3, [sp, #24]
   1243c:	9a02      	ldr	r2, [sp, #8]
   1243e:	1a9d      	subs	r5, r3, r2
   12440:	2d00      	cmp	r5, #0
   12442:	f300 8294 	bgt.w	1296e <_vfiprintf_r+0x916>
   12446:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1244a:	1c41      	adds	r1, r0, #1
   1244c:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12450:	b182      	cbz	r2, 12474 <_vfiprintf_r+0x41c>
   12452:	2201      	movs	r2, #1
   12454:	3301      	adds	r3, #1
   12456:	f8c9 2004 	str.w	r2, [r9, #4]
   1245a:	2907      	cmp	r1, #7
   1245c:	f10d 0243 	add.w	r2, sp, #67	; 0x43
   12460:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   12464:	f8c9 2000 	str.w	r2, [r9]
   12468:	f300 8264 	bgt.w	12934 <_vfiprintf_r+0x8dc>
   1246c:	4608      	mov	r0, r1
   1246e:	f109 0908 	add.w	r9, r9, #8
   12472:	3101      	adds	r1, #1
   12474:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12476:	b1da      	cbz	r2, 124b0 <_vfiprintf_r+0x458>
   12478:	aa11      	add	r2, sp, #68	; 0x44
   1247a:	3302      	adds	r3, #2
   1247c:	f8c9 2000 	str.w	r2, [r9]
   12480:	2907      	cmp	r1, #7
   12482:	f04f 0202 	mov.w	r2, #2
   12486:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   1248a:	f8c9 2004 	str.w	r2, [r9, #4]
   1248e:	f340 8269 	ble.w	12964 <_vfiprintf_r+0x90c>
   12492:	2b00      	cmp	r3, #0
   12494:	f000 8358 	beq.w	12b48 <_vfiprintf_r+0xaf0>
   12498:	9903      	ldr	r1, [sp, #12]
   1249a:	aa18      	add	r2, sp, #96	; 0x60
   1249c:	4658      	mov	r0, fp
   1249e:	f7ff fd9f 	bl	11fe0 <__sprint_r.part.0>
   124a2:	2800      	cmp	r0, #0
   124a4:	d199      	bne.n	123da <_vfiprintf_r+0x382>
   124a6:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   124aa:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   124ae:	1c41      	adds	r1, r0, #1
   124b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   124b2:	2a80      	cmp	r2, #128	; 0x80
   124b4:	f000 8182 	beq.w	127bc <_vfiprintf_r+0x764>
   124b8:	9a04      	ldr	r2, [sp, #16]
   124ba:	1abd      	subs	r5, r7, r2
   124bc:	2d00      	cmp	r5, #0
   124be:	f300 81e0 	bgt.w	12882 <_vfiprintf_r+0x82a>
   124c2:	9a04      	ldr	r2, [sp, #16]
   124c4:	f8c9 4000 	str.w	r4, [r9]
   124c8:	4413      	add	r3, r2
   124ca:	2907      	cmp	r1, #7
   124cc:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   124d0:	f8c9 2004 	str.w	r2, [r9, #4]
   124d4:	f340 816c 	ble.w	127b0 <_vfiprintf_r+0x758>
   124d8:	2b00      	cmp	r3, #0
   124da:	f000 829e 	beq.w	12a1a <_vfiprintf_r+0x9c2>
   124de:	9903      	ldr	r1, [sp, #12]
   124e0:	aa18      	add	r2, sp, #96	; 0x60
   124e2:	4658      	mov	r0, fp
   124e4:	f7ff fd7c 	bl	11fe0 <__sprint_r.part.0>
   124e8:	2800      	cmp	r0, #0
   124ea:	f47f af76 	bne.w	123da <_vfiprintf_r+0x382>
   124ee:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   124f0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   124f4:	0775      	lsls	r5, r6, #29
   124f6:	d505      	bpl.n	12504 <_vfiprintf_r+0x4ac>
   124f8:	9a06      	ldr	r2, [sp, #24]
   124fa:	9902      	ldr	r1, [sp, #8]
   124fc:	1a54      	subs	r4, r2, r1
   124fe:	2c00      	cmp	r4, #0
   12500:	f300 8295 	bgt.w	12a2e <_vfiprintf_r+0x9d6>
   12504:	e9dd 2105 	ldrd	r2, r1, [sp, #20]
   12508:	9802      	ldr	r0, [sp, #8]
   1250a:	4281      	cmp	r1, r0
   1250c:	bfac      	ite	ge
   1250e:	1852      	addge	r2, r2, r1
   12510:	1812      	addlt	r2, r2, r0
   12512:	9205      	str	r2, [sp, #20]
   12514:	2b00      	cmp	r3, #0
   12516:	f040 81fe 	bne.w	12916 <_vfiprintf_r+0x8be>
   1251a:	9908      	ldr	r1, [sp, #32]
   1251c:	2300      	movs	r3, #0
   1251e:	9319      	str	r3, [sp, #100]	; 0x64
   12520:	2900      	cmp	r1, #0
   12522:	f000 8148 	beq.w	127b6 <_vfiprintf_r+0x75e>
   12526:	4658      	mov	r0, fp
   12528:	f7fb ff98 	bl	e45c <_free_r>
   1252c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12530:	e5d6      	b.n	120e0 <_vfiprintf_r+0x88>
   12532:	059c      	lsls	r4, r3, #22
   12534:	f53f af61 	bmi.w	123fa <_vfiprintf_r+0x3a2>
   12538:	9c03      	ldr	r4, [sp, #12]
   1253a:	6da0      	ldr	r0, [r4, #88]	; 0x58
   1253c:	f7fb febe 	bl	e2bc <__retarget_lock_release_recursive>
   12540:	89a2      	ldrh	r2, [r4, #12]
   12542:	e75a      	b.n	123fa <_vfiprintf_r+0x3a2>
   12544:	06f0      	lsls	r0, r6, #27
   12546:	9a07      	ldr	r2, [sp, #28]
   12548:	f100 833e 	bmi.w	12bc8 <_vfiprintf_r+0xb70>
   1254c:	0671      	lsls	r1, r6, #25
   1254e:	f140 8338 	bpl.w	12bc2 <_vfiprintf_r+0xb6a>
   12552:	f932 3b04 	ldrsh.w	r3, [r2], #4
   12556:	9207      	str	r2, [sp, #28]
   12558:	17da      	asrs	r2, r3, #31
   1255a:	4611      	mov	r1, r2
   1255c:	e684      	b.n	12268 <_vfiprintf_r+0x210>
   1255e:	f016 0310 	ands.w	r3, r6, #16
   12562:	9907      	ldr	r1, [sp, #28]
   12564:	f040 8328 	bne.w	12bb8 <_vfiprintf_r+0xb60>
   12568:	f016 0040 	ands.w	r0, r6, #64	; 0x40
   1256c:	f000 8320 	beq.w	12bb0 <_vfiprintf_r+0xb58>
   12570:	461a      	mov	r2, r3
   12572:	f851 3b04 	ldr.w	r3, [r1], #4
   12576:	9107      	str	r1, [sp, #28]
   12578:	b29b      	uxth	r3, r3
   1257a:	e6d3      	b.n	12324 <_vfiprintf_r+0x2cc>
   1257c:	9b07      	ldr	r3, [sp, #28]
   1257e:	461a      	mov	r2, r3
   12580:	2300      	movs	r3, #0
   12582:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12586:	4613      	mov	r3, r2
   12588:	f853 4b04 	ldr.w	r4, [r3], #4
   1258c:	9302      	str	r3, [sp, #8]
   1258e:	2c00      	cmp	r4, #0
   12590:	f000 842d 	beq.w	12dee <_vfiprintf_r+0xd96>
   12594:	2953      	cmp	r1, #83	; 0x53
   12596:	f000 838a 	beq.w	12cae <_vfiprintf_r+0xc56>
   1259a:	f016 0510 	ands.w	r5, r6, #16
   1259e:	f040 8386 	bne.w	12cae <_vfiprintf_r+0xc56>
   125a2:	1c7b      	adds	r3, r7, #1
   125a4:	f000 84cc 	beq.w	12f40 <_vfiprintf_r+0xee8>
   125a8:	463a      	mov	r2, r7
   125aa:	4629      	mov	r1, r5
   125ac:	4620      	mov	r0, r4
   125ae:	f7fe fb37 	bl	10c20 <memchr>
   125b2:	9008      	str	r0, [sp, #32]
   125b4:	2800      	cmp	r0, #0
   125b6:	f000 84b8 	beq.w	12f2a <_vfiprintf_r+0xed2>
   125ba:	1b03      	subs	r3, r0, r4
   125bc:	9a02      	ldr	r2, [sp, #8]
   125be:	9304      	str	r3, [sp, #16]
   125c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   125c4:	462f      	mov	r7, r5
   125c6:	9207      	str	r2, [sp, #28]
   125c8:	9302      	str	r3, [sp, #8]
   125ca:	9508      	str	r5, [sp, #32]
   125cc:	e66d      	b.n	122aa <_vfiprintf_r+0x252>
   125ce:	2943      	cmp	r1, #67	; 0x43
   125d0:	d002      	beq.n	125d8 <_vfiprintf_r+0x580>
   125d2:	06f5      	lsls	r5, r6, #27
   125d4:	f140 8352 	bpl.w	12c7c <_vfiprintf_r+0xc24>
   125d8:	9d07      	ldr	r5, [sp, #28]
   125da:	2208      	movs	r2, #8
   125dc:	2100      	movs	r1, #0
   125de:	a816      	add	r0, sp, #88	; 0x58
   125e0:	ac2b      	add	r4, sp, #172	; 0xac
   125e2:	f7fb fd4b 	bl	e07c <memset>
   125e6:	ab16      	add	r3, sp, #88	; 0x58
   125e8:	f855 2b04 	ldr.w	r2, [r5], #4
   125ec:	4621      	mov	r1, r4
   125ee:	4658      	mov	r0, fp
   125f0:	f7ff fc2e 	bl	11e50 <_wcrtomb_r>
   125f4:	4603      	mov	r3, r0
   125f6:	3301      	adds	r3, #1
   125f8:	9004      	str	r0, [sp, #16]
   125fa:	f000 84ce 	beq.w	12f9a <_vfiprintf_r+0xf42>
   125fe:	9b04      	ldr	r3, [sp, #16]
   12600:	9507      	str	r5, [sp, #28]
   12602:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   12606:	9302      	str	r3, [sp, #8]
   12608:	2300      	movs	r3, #0
   1260a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   1260e:	e706      	b.n	1241e <_vfiprintf_r+0x3c6>
   12610:	9b07      	ldr	r3, [sp, #28]
   12612:	f853 2b04 	ldr.w	r2, [r3], #4
   12616:	9206      	str	r2, [sp, #24]
   12618:	2a00      	cmp	r2, #0
   1261a:	f280 82bb 	bge.w	12b94 <_vfiprintf_r+0xb3c>
   1261e:	9a06      	ldr	r2, [sp, #24]
   12620:	4252      	negs	r2, r2
   12622:	e9cd 2306 	strd	r2, r3, [sp, #24]
   12626:	f898 1000 	ldrb.w	r1, [r8]
   1262a:	f046 0604 	orr.w	r6, r6, #4
   1262e:	e57f      	b.n	12130 <_vfiprintf_r+0xd8>
   12630:	f898 1000 	ldrb.w	r1, [r8]
   12634:	f88d 4043 	strb.w	r4, [sp, #67]	; 0x43
   12638:	e57a      	b.n	12130 <_vfiprintf_r+0xd8>
   1263a:	f898 1000 	ldrb.w	r1, [r8]
   1263e:	f046 0680 	orr.w	r6, r6, #128	; 0x80
   12642:	e575      	b.n	12130 <_vfiprintf_r+0xd8>
   12644:	4642      	mov	r2, r8
   12646:	f812 1b01 	ldrb.w	r1, [r2], #1
   1264a:	292a      	cmp	r1, #42	; 0x2a
   1264c:	f000 84b0 	beq.w	12fb0 <_vfiprintf_r+0xf58>
   12650:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12654:	2b09      	cmp	r3, #9
   12656:	4690      	mov	r8, r2
   12658:	f04f 0700 	mov.w	r7, #0
   1265c:	f63f ad6a 	bhi.w	12134 <_vfiprintf_r+0xdc>
   12660:	f818 1b01 	ldrb.w	r1, [r8], #1
   12664:	eb07 0787 	add.w	r7, r7, r7, lsl #2
   12668:	eb03 0747 	add.w	r7, r3, r7, lsl #1
   1266c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
   12670:	2b09      	cmp	r3, #9
   12672:	d9f5      	bls.n	12660 <_vfiprintf_r+0x608>
   12674:	e55e      	b.n	12134 <_vfiprintf_r+0xdc>
   12676:	f898 1000 	ldrb.w	r1, [r8]
   1267a:	f046 0601 	orr.w	r6, r6, #1
   1267e:	e557      	b.n	12130 <_vfiprintf_r+0xd8>
   12680:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   12684:	2b00      	cmp	r3, #0
   12686:	f47f add8 	bne.w	1223a <_vfiprintf_r+0x1e2>
   1268a:	2320      	movs	r3, #32
   1268c:	f898 1000 	ldrb.w	r1, [r8]
   12690:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
   12694:	e54c      	b.n	12130 <_vfiprintf_r+0xd8>
   12696:	f898 1000 	ldrb.w	r1, [r8]
   1269a:	296c      	cmp	r1, #108	; 0x6c
   1269c:	bf03      	ittte	eq
   1269e:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   126a2:	f046 0620 	orreq.w	r6, r6, #32
   126a6:	f108 0801 	addeq.w	r8, r8, #1
   126aa:	f046 0610 	orrne.w	r6, r6, #16
   126ae:	e53f      	b.n	12130 <_vfiprintf_r+0xd8>
   126b0:	f898 1000 	ldrb.w	r1, [r8]
   126b4:	2968      	cmp	r1, #104	; 0x68
   126b6:	bf03      	ittte	eq
   126b8:	f898 1001 	ldrbeq.w	r1, [r8, #1]
   126bc:	f446 7600 	orreq.w	r6, r6, #512	; 0x200
   126c0:	f108 0801 	addeq.w	r8, r8, #1
   126c4:	f046 0640 	orrne.w	r6, r6, #64	; 0x40
   126c8:	e532      	b.n	12130 <_vfiprintf_r+0xd8>
   126ca:	f046 0310 	orr.w	r3, r6, #16
   126ce:	9302      	str	r3, [sp, #8]
   126d0:	9b02      	ldr	r3, [sp, #8]
   126d2:	f013 0220 	ands.w	r2, r3, #32
   126d6:	f000 8225 	beq.w	12b24 <_vfiprintf_r+0xacc>
   126da:	9b07      	ldr	r3, [sp, #28]
   126dc:	3307      	adds	r3, #7
   126de:	f023 0307 	bic.w	r3, r3, #7
   126e2:	4619      	mov	r1, r3
   126e4:	685a      	ldr	r2, [r3, #4]
   126e6:	f851 3b08 	ldr.w	r3, [r1], #8
   126ea:	9107      	str	r1, [sp, #28]
   126ec:	2101      	movs	r1, #1
   126ee:	e61d      	b.n	1232c <_vfiprintf_r+0x2d4>
   126f0:	9a07      	ldr	r2, [sp, #28]
   126f2:	f046 0302 	orr.w	r3, r6, #2
   126f6:	9302      	str	r3, [sp, #8]
   126f8:	f852 3b04 	ldr.w	r3, [r2], #4
   126fc:	9207      	str	r2, [sp, #28]
   126fe:	f647 0230 	movw	r2, #30768	; 0x7830
   12702:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
   12706:	4aa1      	ldr	r2, [pc, #644]	; (1298c <_vfiprintf_r+0x934>)
   12708:	920b      	str	r2, [sp, #44]	; 0x2c
   1270a:	2102      	movs	r1, #2
   1270c:	2200      	movs	r2, #0
   1270e:	e60d      	b.n	1232c <_vfiprintf_r+0x2d4>
   12710:	06b7      	lsls	r7, r6, #26
   12712:	f100 8267 	bmi.w	12be4 <_vfiprintf_r+0xb8c>
   12716:	06f5      	lsls	r5, r6, #27
   12718:	f100 8361 	bmi.w	12dde <_vfiprintf_r+0xd86>
   1271c:	0674      	lsls	r4, r6, #25
   1271e:	f100 83ee 	bmi.w	12efe <_vfiprintf_r+0xea6>
   12722:	05b0      	lsls	r0, r6, #22
   12724:	f140 835b 	bpl.w	12dde <_vfiprintf_r+0xd86>
   12728:	9b07      	ldr	r3, [sp, #28]
   1272a:	9905      	ldr	r1, [sp, #20]
   1272c:	f853 2b04 	ldr.w	r2, [r3], #4
   12730:	9307      	str	r3, [sp, #28]
   12732:	7011      	strb	r1, [r2, #0]
   12734:	e4d4      	b.n	120e0 <_vfiprintf_r+0x88>
   12736:	9602      	str	r6, [sp, #8]
   12738:	2901      	cmp	r1, #1
   1273a:	f43f ada2 	beq.w	12282 <_vfiprintf_r+0x22a>
   1273e:	2902      	cmp	r1, #2
   12740:	ac44      	add	r4, sp, #272	; 0x110
   12742:	d111      	bne.n	12768 <_vfiprintf_r+0x710>
   12744:	980b      	ldr	r0, [sp, #44]	; 0x2c
   12746:	f003 010f 	and.w	r1, r3, #15
   1274a:	091b      	lsrs	r3, r3, #4
   1274c:	5c41      	ldrb	r1, [r0, r1]
   1274e:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12752:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
   12756:	0912      	lsrs	r2, r2, #4
   12758:	ea53 0102 	orrs.w	r1, r3, r2
   1275c:	d1f3      	bne.n	12746 <_vfiprintf_r+0x6ee>
   1275e:	9e02      	ldr	r6, [sp, #8]
   12760:	ab44      	add	r3, sp, #272	; 0x110
   12762:	1b1b      	subs	r3, r3, r4
   12764:	9304      	str	r3, [sp, #16]
   12766:	e599      	b.n	1229c <_vfiprintf_r+0x244>
   12768:	f003 0107 	and.w	r1, r3, #7
   1276c:	08db      	lsrs	r3, r3, #3
   1276e:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
   12772:	08d2      	lsrs	r2, r2, #3
   12774:	3130      	adds	r1, #48	; 0x30
   12776:	ea53 0502 	orrs.w	r5, r3, r2
   1277a:	4620      	mov	r0, r4
   1277c:	f804 1d01 	strb.w	r1, [r4, #-1]!
   12780:	d1f2      	bne.n	12768 <_vfiprintf_r+0x710>
   12782:	9e02      	ldr	r6, [sp, #8]
   12784:	07f3      	lsls	r3, r6, #31
   12786:	d5eb      	bpl.n	12760 <_vfiprintf_r+0x708>
   12788:	2930      	cmp	r1, #48	; 0x30
   1278a:	d0e8      	beq.n	1275e <_vfiprintf_r+0x706>
   1278c:	2330      	movs	r3, #48	; 0x30
   1278e:	3802      	subs	r0, #2
   12790:	f804 3c01 	strb.w	r3, [r4, #-1]
   12794:	ab44      	add	r3, sp, #272	; 0x110
   12796:	1a1b      	subs	r3, r3, r0
   12798:	9e02      	ldr	r6, [sp, #8]
   1279a:	9304      	str	r3, [sp, #16]
   1279c:	4604      	mov	r4, r0
   1279e:	e57d      	b.n	1229c <_vfiprintf_r+0x244>
   127a0:	9b04      	ldr	r3, [sp, #16]
   127a2:	941b      	str	r4, [sp, #108]	; 0x6c
   127a4:	2201      	movs	r2, #1
   127a6:	931c      	str	r3, [sp, #112]	; 0x70
   127a8:	931a      	str	r3, [sp, #104]	; 0x68
   127aa:	9219      	str	r2, [sp, #100]	; 0x64
   127ac:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   127b0:	f109 0908 	add.w	r9, r9, #8
   127b4:	e69e      	b.n	124f4 <_vfiprintf_r+0x49c>
   127b6:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   127ba:	e491      	b.n	120e0 <_vfiprintf_r+0x88>
   127bc:	9a06      	ldr	r2, [sp, #24]
   127be:	9d02      	ldr	r5, [sp, #8]
   127c0:	1b55      	subs	r5, r2, r5
   127c2:	2d00      	cmp	r5, #0
   127c4:	f77f ae78 	ble.w	124b8 <_vfiprintf_r+0x460>
   127c8:	2d10      	cmp	r5, #16
   127ca:	f340 83d3 	ble.w	12f74 <_vfiprintf_r+0xf1c>
   127ce:	4619      	mov	r1, r3
   127d0:	4643      	mov	r3, r8
   127d2:	9409      	str	r4, [sp, #36]	; 0x24
   127d4:	46b8      	mov	r8, r7
   127d6:	9c03      	ldr	r4, [sp, #12]
   127d8:	4637      	mov	r7, r6
   127da:	465e      	mov	r6, fp
   127dc:	469b      	mov	fp, r3
   127de:	e007      	b.n	127f0 <_vfiprintf_r+0x798>
   127e0:	f100 0c02 	add.w	ip, r0, #2
   127e4:	f109 0908 	add.w	r9, r9, #8
   127e8:	4610      	mov	r0, r2
   127ea:	3d10      	subs	r5, #16
   127ec:	2d10      	cmp	r5, #16
   127ee:	dd1f      	ble.n	12830 <_vfiprintf_r+0x7d8>
   127f0:	4b67      	ldr	r3, [pc, #412]	; (12990 <_vfiprintf_r+0x938>)
   127f2:	f8c9 3000 	str.w	r3, [r9]
   127f6:	1c42      	adds	r2, r0, #1
   127f8:	3110      	adds	r1, #16
   127fa:	2310      	movs	r3, #16
   127fc:	2a07      	cmp	r2, #7
   127fe:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   12802:	f8c9 3004 	str.w	r3, [r9, #4]
   12806:	ddeb      	ble.n	127e0 <_vfiprintf_r+0x788>
   12808:	aa18      	add	r2, sp, #96	; 0x60
   1280a:	2900      	cmp	r1, #0
   1280c:	f000 808c 	beq.w	12928 <_vfiprintf_r+0x8d0>
   12810:	4621      	mov	r1, r4
   12812:	4630      	mov	r0, r6
   12814:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12818:	f7ff fbe2 	bl	11fe0 <__sprint_r.part.0>
   1281c:	2800      	cmp	r0, #0
   1281e:	f47f addb 	bne.w	123d8 <_vfiprintf_r+0x380>
   12822:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   12826:	3d10      	subs	r5, #16
   12828:	2d10      	cmp	r5, #16
   1282a:	f100 0c01 	add.w	ip, r0, #1
   1282e:	dcdf      	bgt.n	127f0 <_vfiprintf_r+0x798>
   12830:	465a      	mov	r2, fp
   12832:	9c09      	ldr	r4, [sp, #36]	; 0x24
   12834:	46b3      	mov	fp, r6
   12836:	460b      	mov	r3, r1
   12838:	463e      	mov	r6, r7
   1283a:	4647      	mov	r7, r8
   1283c:	4690      	mov	r8, r2
   1283e:	4a54      	ldr	r2, [pc, #336]	; (12990 <_vfiprintf_r+0x938>)
   12840:	f8c9 5004 	str.w	r5, [r9, #4]
   12844:	442b      	add	r3, r5
   12846:	f1bc 0f07 	cmp.w	ip, #7
   1284a:	e9cd c319 	strd	ip, r3, [sp, #100]	; 0x64
   1284e:	f8c9 2000 	str.w	r2, [r9]
   12852:	f340 81a7 	ble.w	12ba4 <_vfiprintf_r+0xb4c>
   12856:	2b00      	cmp	r3, #0
   12858:	f000 832c 	beq.w	12eb4 <_vfiprintf_r+0xe5c>
   1285c:	9903      	ldr	r1, [sp, #12]
   1285e:	aa18      	add	r2, sp, #96	; 0x60
   12860:	4658      	mov	r0, fp
   12862:	f7ff fbbd 	bl	11fe0 <__sprint_r.part.0>
   12866:	2800      	cmp	r0, #0
   12868:	f47f adb7 	bne.w	123da <_vfiprintf_r+0x382>
   1286c:	9a04      	ldr	r2, [sp, #16]
   1286e:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12872:	1abd      	subs	r5, r7, r2
   12874:	2d00      	cmp	r5, #0
   12876:	f100 0101 	add.w	r1, r0, #1
   1287a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   1287e:	f77f ae20 	ble.w	124c2 <_vfiprintf_r+0x46a>
   12882:	2d10      	cmp	r5, #16
   12884:	dd32      	ble.n	128ec <_vfiprintf_r+0x894>
   12886:	4619      	mov	r1, r3
   12888:	4643      	mov	r3, r8
   1288a:	9409      	str	r4, [sp, #36]	; 0x24
   1288c:	46b0      	mov	r8, r6
   1288e:	9c03      	ldr	r4, [sp, #12]
   12890:	465e      	mov	r6, fp
   12892:	2710      	movs	r7, #16
   12894:	469b      	mov	fp, r3
   12896:	e007      	b.n	128a8 <_vfiprintf_r+0x850>
   12898:	f100 0c02 	add.w	ip, r0, #2
   1289c:	f109 0908 	add.w	r9, r9, #8
   128a0:	4610      	mov	r0, r2
   128a2:	3d10      	subs	r5, #16
   128a4:	2d10      	cmp	r5, #16
   128a6:	dd1a      	ble.n	128de <_vfiprintf_r+0x886>
   128a8:	1c42      	adds	r2, r0, #1
   128aa:	4b39      	ldr	r3, [pc, #228]	; (12990 <_vfiprintf_r+0x938>)
   128ac:	3110      	adds	r1, #16
   128ae:	2a07      	cmp	r2, #7
   128b0:	e9c9 3700 	strd	r3, r7, [r9]
   128b4:	e9cd 2119 	strd	r2, r1, [sp, #100]	; 0x64
   128b8:	ddee      	ble.n	12898 <_vfiprintf_r+0x840>
   128ba:	aa18      	add	r2, sp, #96	; 0x60
   128bc:	b329      	cbz	r1, 1290a <_vfiprintf_r+0x8b2>
   128be:	4621      	mov	r1, r4
   128c0:	4630      	mov	r0, r6
   128c2:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   128c6:	f7ff fb8b 	bl	11fe0 <__sprint_r.part.0>
   128ca:	2800      	cmp	r0, #0
   128cc:	f47f ad84 	bne.w	123d8 <_vfiprintf_r+0x380>
   128d0:	e9dd 0119 	ldrd	r0, r1, [sp, #100]	; 0x64
   128d4:	3d10      	subs	r5, #16
   128d6:	2d10      	cmp	r5, #16
   128d8:	f100 0c01 	add.w	ip, r0, #1
   128dc:	dce4      	bgt.n	128a8 <_vfiprintf_r+0x850>
   128de:	465a      	mov	r2, fp
   128e0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   128e2:	460b      	mov	r3, r1
   128e4:	46b3      	mov	fp, r6
   128e6:	4661      	mov	r1, ip
   128e8:	4646      	mov	r6, r8
   128ea:	4690      	mov	r8, r2
   128ec:	4a28      	ldr	r2, [pc, #160]	; (12990 <_vfiprintf_r+0x938>)
   128ee:	f8c9 5004 	str.w	r5, [r9, #4]
   128f2:	442b      	add	r3, r5
   128f4:	2907      	cmp	r1, #7
   128f6:	e9cd 1319 	strd	r1, r3, [sp, #100]	; 0x64
   128fa:	f8c9 2000 	str.w	r2, [r9]
   128fe:	f300 80f3 	bgt.w	12ae8 <_vfiprintf_r+0xa90>
   12902:	f109 0908 	add.w	r9, r9, #8
   12906:	3101      	adds	r1, #1
   12908:	e5db      	b.n	124c2 <_vfiprintf_r+0x46a>
   1290a:	f04f 0c01 	mov.w	ip, #1
   1290e:	4608      	mov	r0, r1
   12910:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12914:	e7c5      	b.n	128a2 <_vfiprintf_r+0x84a>
   12916:	9903      	ldr	r1, [sp, #12]
   12918:	aa18      	add	r2, sp, #96	; 0x60
   1291a:	4658      	mov	r0, fp
   1291c:	f7ff fb60 	bl	11fe0 <__sprint_r.part.0>
   12920:	2800      	cmp	r0, #0
   12922:	f43f adfa 	beq.w	1251a <_vfiprintf_r+0x4c2>
   12926:	e558      	b.n	123da <_vfiprintf_r+0x382>
   12928:	f04f 0c01 	mov.w	ip, #1
   1292c:	4608      	mov	r0, r1
   1292e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12932:	e75a      	b.n	127ea <_vfiprintf_r+0x792>
   12934:	2b00      	cmp	r3, #0
   12936:	f000 810c 	beq.w	12b52 <_vfiprintf_r+0xafa>
   1293a:	9903      	ldr	r1, [sp, #12]
   1293c:	aa18      	add	r2, sp, #96	; 0x60
   1293e:	4658      	mov	r0, fp
   12940:	f7ff fb4e 	bl	11fe0 <__sprint_r.part.0>
   12944:	2800      	cmp	r0, #0
   12946:	f47f ad48 	bne.w	123da <_vfiprintf_r+0x382>
   1294a:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   1294e:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12952:	1c41      	adds	r1, r0, #1
   12954:	e58e      	b.n	12474 <_vfiprintf_r+0x41c>
   12956:	2302      	movs	r3, #2
   12958:	aa11      	add	r2, sp, #68	; 0x44
   1295a:	931c      	str	r3, [sp, #112]	; 0x70
   1295c:	921b      	str	r2, [sp, #108]	; 0x6c
   1295e:	2101      	movs	r1, #1
   12960:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12964:	4608      	mov	r0, r1
   12966:	f109 0908 	add.w	r9, r9, #8
   1296a:	1c41      	adds	r1, r0, #1
   1296c:	e5a0      	b.n	124b0 <_vfiprintf_r+0x458>
   1296e:	2d10      	cmp	r5, #16
   12970:	f340 82e2 	ble.w	12f38 <_vfiprintf_r+0xee0>
   12974:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12978:	4618      	mov	r0, r3
   1297a:	4643      	mov	r3, r8
   1297c:	940f      	str	r4, [sp, #60]	; 0x3c
   1297e:	46b8      	mov	r8, r7
   12980:	9c03      	ldr	r4, [sp, #12]
   12982:	4637      	mov	r7, r6
   12984:	465e      	mov	r6, fp
   12986:	469b      	mov	fp, r3
   12988:	e00c      	b.n	129a4 <_vfiprintf_r+0x94c>
   1298a:	bf00      	nop
   1298c:	0001593c 	.word	0x0001593c
   12990:	00015a48 	.word	0x00015a48
   12994:	f101 0c02 	add.w	ip, r1, #2
   12998:	f109 0908 	add.w	r9, r9, #8
   1299c:	4611      	mov	r1, r2
   1299e:	3d10      	subs	r5, #16
   129a0:	2d10      	cmp	r5, #16
   129a2:	dd1d      	ble.n	129e0 <_vfiprintf_r+0x988>
   129a4:	4bb2      	ldr	r3, [pc, #712]	; (12c70 <_vfiprintf_r+0xc18>)
   129a6:	f8c9 3000 	str.w	r3, [r9]
   129aa:	1c4a      	adds	r2, r1, #1
   129ac:	3010      	adds	r0, #16
   129ae:	2310      	movs	r3, #16
   129b0:	2a07      	cmp	r2, #7
   129b2:	e9cd 2019 	strd	r2, r0, [sp, #100]	; 0x64
   129b6:	f8c9 3004 	str.w	r3, [r9, #4]
   129ba:	ddeb      	ble.n	12994 <_vfiprintf_r+0x93c>
   129bc:	aa18      	add	r2, sp, #96	; 0x60
   129be:	b330      	cbz	r0, 12a0e <_vfiprintf_r+0x9b6>
   129c0:	4621      	mov	r1, r4
   129c2:	4630      	mov	r0, r6
   129c4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   129c8:	f7ff fb0a 	bl	11fe0 <__sprint_r.part.0>
   129cc:	2800      	cmp	r0, #0
   129ce:	f47f ad03 	bne.w	123d8 <_vfiprintf_r+0x380>
   129d2:	e9dd 1019 	ldrd	r1, r0, [sp, #100]	; 0x64
   129d6:	3d10      	subs	r5, #16
   129d8:	2d10      	cmp	r5, #16
   129da:	f101 0c01 	add.w	ip, r1, #1
   129de:	dce1      	bgt.n	129a4 <_vfiprintf_r+0x94c>
   129e0:	465a      	mov	r2, fp
   129e2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   129e4:	4603      	mov	r3, r0
   129e6:	46b3      	mov	fp, r6
   129e8:	4660      	mov	r0, ip
   129ea:	463e      	mov	r6, r7
   129ec:	4647      	mov	r7, r8
   129ee:	4690      	mov	r8, r2
   129f0:	4a9f      	ldr	r2, [pc, #636]	; (12c70 <_vfiprintf_r+0xc18>)
   129f2:	f8c9 5004 	str.w	r5, [r9, #4]
   129f6:	442b      	add	r3, r5
   129f8:	2807      	cmp	r0, #7
   129fa:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   129fe:	f8c9 2000 	str.w	r2, [r9]
   12a02:	f300 80b6 	bgt.w	12b72 <_vfiprintf_r+0xb1a>
   12a06:	f109 0908 	add.w	r9, r9, #8
   12a0a:	1c41      	adds	r1, r0, #1
   12a0c:	e51e      	b.n	1244c <_vfiprintf_r+0x3f4>
   12a0e:	4601      	mov	r1, r0
   12a10:	f04f 0c01 	mov.w	ip, #1
   12a14:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a18:	e7c1      	b.n	1299e <_vfiprintf_r+0x946>
   12a1a:	0776      	lsls	r6, r6, #29
   12a1c:	9319      	str	r3, [sp, #100]	; 0x64
   12a1e:	d54a      	bpl.n	12ab6 <_vfiprintf_r+0xa5e>
   12a20:	9a06      	ldr	r2, [sp, #24]
   12a22:	9902      	ldr	r1, [sp, #8]
   12a24:	1a54      	subs	r4, r2, r1
   12a26:	2c00      	cmp	r4, #0
   12a28:	dd45      	ble.n	12ab6 <_vfiprintf_r+0xa5e>
   12a2a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a2e:	2c10      	cmp	r4, #16
   12a30:	f340 829d 	ble.w	12f6e <_vfiprintf_r+0xf16>
   12a34:	9919      	ldr	r1, [sp, #100]	; 0x64
   12a36:	9e03      	ldr	r6, [sp, #12]
   12a38:	2510      	movs	r5, #16
   12a3a:	e006      	b.n	12a4a <_vfiprintf_r+0x9f2>
   12a3c:	1c88      	adds	r0, r1, #2
   12a3e:	f109 0908 	add.w	r9, r9, #8
   12a42:	4611      	mov	r1, r2
   12a44:	3c10      	subs	r4, #16
   12a46:	2c10      	cmp	r4, #16
   12a48:	dd1a      	ble.n	12a80 <_vfiprintf_r+0xa28>
   12a4a:	1c4a      	adds	r2, r1, #1
   12a4c:	4888      	ldr	r0, [pc, #544]	; (12c70 <_vfiprintf_r+0xc18>)
   12a4e:	3310      	adds	r3, #16
   12a50:	2a07      	cmp	r2, #7
   12a52:	e9c9 0500 	strd	r0, r5, [r9]
   12a56:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
   12a5a:	ddef      	ble.n	12a3c <_vfiprintf_r+0x9e4>
   12a5c:	aa18      	add	r2, sp, #96	; 0x60
   12a5e:	b32b      	cbz	r3, 12aac <_vfiprintf_r+0xa54>
   12a60:	4631      	mov	r1, r6
   12a62:	4658      	mov	r0, fp
   12a64:	f7ff fabc 	bl	11fe0 <__sprint_r.part.0>
   12a68:	2800      	cmp	r0, #0
   12a6a:	f47f acb6 	bne.w	123da <_vfiprintf_r+0x382>
   12a6e:	e9dd 1319 	ldrd	r1, r3, [sp, #100]	; 0x64
   12a72:	3c10      	subs	r4, #16
   12a74:	2c10      	cmp	r4, #16
   12a76:	f101 0001 	add.w	r0, r1, #1
   12a7a:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12a7e:	dce4      	bgt.n	12a4a <_vfiprintf_r+0x9f2>
   12a80:	4a7b      	ldr	r2, [pc, #492]	; (12c70 <_vfiprintf_r+0xc18>)
   12a82:	f8c9 4004 	str.w	r4, [r9, #4]
   12a86:	4423      	add	r3, r4
   12a88:	2807      	cmp	r0, #7
   12a8a:	e9cd 0319 	strd	r0, r3, [sp, #100]	; 0x64
   12a8e:	f8c9 2000 	str.w	r2, [r9]
   12a92:	f77f ad37 	ble.w	12504 <_vfiprintf_r+0x4ac>
   12a96:	b173      	cbz	r3, 12ab6 <_vfiprintf_r+0xa5e>
   12a98:	9903      	ldr	r1, [sp, #12]
   12a9a:	aa18      	add	r2, sp, #96	; 0x60
   12a9c:	4658      	mov	r0, fp
   12a9e:	f7ff fa9f 	bl	11fe0 <__sprint_r.part.0>
   12aa2:	2800      	cmp	r0, #0
   12aa4:	f47f ac99 	bne.w	123da <_vfiprintf_r+0x382>
   12aa8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12aaa:	e52b      	b.n	12504 <_vfiprintf_r+0x4ac>
   12aac:	2001      	movs	r0, #1
   12aae:	4619      	mov	r1, r3
   12ab0:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ab4:	e7c6      	b.n	12a44 <_vfiprintf_r+0x9ec>
   12ab6:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   12aba:	9902      	ldr	r1, [sp, #8]
   12abc:	428a      	cmp	r2, r1
   12abe:	bfac      	ite	ge
   12ac0:	189b      	addge	r3, r3, r2
   12ac2:	185b      	addlt	r3, r3, r1
   12ac4:	9305      	str	r3, [sp, #20]
   12ac6:	e528      	b.n	1251a <_vfiprintf_r+0x4c2>
   12ac8:	9b03      	ldr	r3, [sp, #12]
   12aca:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   12ace:	058f      	lsls	r7, r1, #22
   12ad0:	b28a      	uxth	r2, r1
   12ad2:	f53f aae0 	bmi.w	12096 <_vfiprintf_r+0x3e>
   12ad6:	461d      	mov	r5, r3
   12ad8:	6d98      	ldr	r0, [r3, #88]	; 0x58
   12ada:	f7fb fbed 	bl	e2b8 <__retarget_lock_acquire_recursive>
   12ade:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   12ae2:	b28a      	uxth	r2, r1
   12ae4:	f7ff bad7 	b.w	12096 <_vfiprintf_r+0x3e>
   12ae8:	2b00      	cmp	r3, #0
   12aea:	f43f ae59 	beq.w	127a0 <_vfiprintf_r+0x748>
   12aee:	9903      	ldr	r1, [sp, #12]
   12af0:	aa18      	add	r2, sp, #96	; 0x60
   12af2:	4658      	mov	r0, fp
   12af4:	f7ff fa74 	bl	11fe0 <__sprint_r.part.0>
   12af8:	2800      	cmp	r0, #0
   12afa:	f47f ac6e 	bne.w	123da <_vfiprintf_r+0x382>
   12afe:	9919      	ldr	r1, [sp, #100]	; 0x64
   12b00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12b02:	3101      	adds	r1, #1
   12b04:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b08:	e4db      	b.n	124c2 <_vfiprintf_r+0x46a>
   12b0a:	9219      	str	r2, [sp, #100]	; 0x64
   12b0c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b10:	e44f      	b.n	123b2 <_vfiprintf_r+0x35a>
   12b12:	2f00      	cmp	r7, #0
   12b14:	f47f abba 	bne.w	1228c <_vfiprintf_r+0x234>
   12b18:	9e02      	ldr	r6, [sp, #8]
   12b1a:	2700      	movs	r7, #0
   12b1c:	9704      	str	r7, [sp, #16]
   12b1e:	ac44      	add	r4, sp, #272	; 0x110
   12b20:	f7ff bbbc 	b.w	1229c <_vfiprintf_r+0x244>
   12b24:	9b02      	ldr	r3, [sp, #8]
   12b26:	f013 0310 	ands.w	r3, r3, #16
   12b2a:	d154      	bne.n	12bd6 <_vfiprintf_r+0xb7e>
   12b2c:	9a02      	ldr	r2, [sp, #8]
   12b2e:	f012 0040 	ands.w	r0, r2, #64	; 0x40
   12b32:	f000 8167 	beq.w	12e04 <_vfiprintf_r+0xdac>
   12b36:	9907      	ldr	r1, [sp, #28]
   12b38:	461a      	mov	r2, r3
   12b3a:	f851 3b04 	ldr.w	r3, [r1], #4
   12b3e:	9107      	str	r1, [sp, #28]
   12b40:	b29b      	uxth	r3, r3
   12b42:	2101      	movs	r1, #1
   12b44:	f7ff bbf2 	b.w	1232c <_vfiprintf_r+0x2d4>
   12b48:	2101      	movs	r1, #1
   12b4a:	4618      	mov	r0, r3
   12b4c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b50:	e4ae      	b.n	124b0 <_vfiprintf_r+0x458>
   12b52:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12b54:	2a00      	cmp	r2, #0
   12b56:	d15e      	bne.n	12c16 <_vfiprintf_r+0xbbe>
   12b58:	4618      	mov	r0, r3
   12b5a:	2101      	movs	r1, #1
   12b5c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b60:	e4a6      	b.n	124b0 <_vfiprintf_r+0x458>
   12b62:	425b      	negs	r3, r3
   12b64:	eb62 0242 	sbc.w	r2, r2, r2, lsl #1
   12b68:	9602      	str	r6, [sp, #8]
   12b6a:	202d      	movs	r0, #45	; 0x2d
   12b6c:	2101      	movs	r1, #1
   12b6e:	f7ff bbde 	b.w	1232e <_vfiprintf_r+0x2d6>
   12b72:	2b00      	cmp	r3, #0
   12b74:	f000 808d 	beq.w	12c92 <_vfiprintf_r+0xc3a>
   12b78:	9903      	ldr	r1, [sp, #12]
   12b7a:	aa18      	add	r2, sp, #96	; 0x60
   12b7c:	4658      	mov	r0, fp
   12b7e:	f7ff fa2f 	bl	11fe0 <__sprint_r.part.0>
   12b82:	2800      	cmp	r0, #0
   12b84:	f47f ac29 	bne.w	123da <_vfiprintf_r+0x382>
   12b88:	e9dd 0319 	ldrd	r0, r3, [sp, #100]	; 0x64
   12b8c:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12b90:	1c41      	adds	r1, r0, #1
   12b92:	e45b      	b.n	1244c <_vfiprintf_r+0x3f4>
   12b94:	f898 1000 	ldrb.w	r1, [r8]
   12b98:	9307      	str	r3, [sp, #28]
   12b9a:	f7ff bac9 	b.w	12130 <_vfiprintf_r+0xd8>
   12b9e:	ac44      	add	r4, sp, #272	; 0x110
   12ba0:	f7ff bb7c 	b.w	1229c <_vfiprintf_r+0x244>
   12ba4:	f109 0908 	add.w	r9, r9, #8
   12ba8:	f10c 0101 	add.w	r1, ip, #1
   12bac:	4660      	mov	r0, ip
   12bae:	e483      	b.n	124b8 <_vfiprintf_r+0x460>
   12bb0:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   12bb4:	f040 8191 	bne.w	12eda <_vfiprintf_r+0xe82>
   12bb8:	f851 3b04 	ldr.w	r3, [r1], #4
   12bbc:	9107      	str	r1, [sp, #28]
   12bbe:	f7ff bbb1 	b.w	12324 <_vfiprintf_r+0x2cc>
   12bc2:	05b3      	lsls	r3, r6, #22
   12bc4:	f100 8182 	bmi.w	12ecc <_vfiprintf_r+0xe74>
   12bc8:	f852 3b04 	ldr.w	r3, [r2], #4
   12bcc:	9207      	str	r2, [sp, #28]
   12bce:	17da      	asrs	r2, r3, #31
   12bd0:	4611      	mov	r1, r2
   12bd2:	f7ff bb49 	b.w	12268 <_vfiprintf_r+0x210>
   12bd6:	9907      	ldr	r1, [sp, #28]
   12bd8:	f851 3b04 	ldr.w	r3, [r1], #4
   12bdc:	9107      	str	r1, [sp, #28]
   12bde:	2101      	movs	r1, #1
   12be0:	f7ff bba4 	b.w	1232c <_vfiprintf_r+0x2d4>
   12be4:	9b07      	ldr	r3, [sp, #28]
   12be6:	9805      	ldr	r0, [sp, #20]
   12be8:	f853 1b04 	ldr.w	r1, [r3], #4
   12bec:	9307      	str	r3, [sp, #28]
   12bee:	17c2      	asrs	r2, r0, #31
   12bf0:	e9c1 0200 	strd	r0, r2, [r1]
   12bf4:	f7ff ba74 	b.w	120e0 <_vfiprintf_r+0x88>
   12bf8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12bfa:	2b00      	cmp	r3, #0
   12bfc:	f43f ab1d 	beq.w	1223a <_vfiprintf_r+0x1e2>
   12c00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12c02:	781b      	ldrb	r3, [r3, #0]
   12c04:	2b00      	cmp	r3, #0
   12c06:	f43f ab18 	beq.w	1223a <_vfiprintf_r+0x1e2>
   12c0a:	f898 1000 	ldrb.w	r1, [r8]
   12c0e:	f446 6680 	orr.w	r6, r6, #1024	; 0x400
   12c12:	f7ff ba8d 	b.w	12130 <_vfiprintf_r+0xd8>
   12c16:	2302      	movs	r3, #2
   12c18:	aa11      	add	r2, sp, #68	; 0x44
   12c1a:	931c      	str	r3, [sp, #112]	; 0x70
   12c1c:	921b      	str	r2, [sp, #108]	; 0x6c
   12c1e:	2001      	movs	r0, #1
   12c20:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12c24:	e69f      	b.n	12966 <_vfiprintf_r+0x90e>
   12c26:	9602      	str	r6, [sp, #8]
   12c28:	e552      	b.n	126d0 <_vfiprintf_r+0x678>
   12c2a:	4b12      	ldr	r3, [pc, #72]	; (12c74 <_vfiprintf_r+0xc1c>)
   12c2c:	930b      	str	r3, [sp, #44]	; 0x2c
   12c2e:	f016 0220 	ands.w	r2, r6, #32
   12c32:	d05f      	beq.n	12cf4 <_vfiprintf_r+0xc9c>
   12c34:	9b07      	ldr	r3, [sp, #28]
   12c36:	3307      	adds	r3, #7
   12c38:	f023 0307 	bic.w	r3, r3, #7
   12c3c:	4618      	mov	r0, r3
   12c3e:	685a      	ldr	r2, [r3, #4]
   12c40:	f850 3b08 	ldr.w	r3, [r0], #8
   12c44:	9007      	str	r0, [sp, #28]
   12c46:	07f4      	lsls	r4, r6, #31
   12c48:	d509      	bpl.n	12c5e <_vfiprintf_r+0xc06>
   12c4a:	ea53 0002 	orrs.w	r0, r3, r2
   12c4e:	d006      	beq.n	12c5e <_vfiprintf_r+0xc06>
   12c50:	f88d 1045 	strb.w	r1, [sp, #69]	; 0x45
   12c54:	2130      	movs	r1, #48	; 0x30
   12c56:	f046 0602 	orr.w	r6, r6, #2
   12c5a:	f88d 1044 	strb.w	r1, [sp, #68]	; 0x44
   12c5e:	f426 6180 	bic.w	r1, r6, #1024	; 0x400
   12c62:	9102      	str	r1, [sp, #8]
   12c64:	2102      	movs	r1, #2
   12c66:	f7ff bb61 	b.w	1232c <_vfiprintf_r+0x2d4>
   12c6a:	4b03      	ldr	r3, [pc, #12]	; (12c78 <_vfiprintf_r+0xc20>)
   12c6c:	930b      	str	r3, [sp, #44]	; 0x2c
   12c6e:	e7de      	b.n	12c2e <_vfiprintf_r+0xbd6>
   12c70:	00015a38 	.word	0x00015a38
   12c74:	0001593c 	.word	0x0001593c
   12c78:	00015950 	.word	0x00015950
   12c7c:	9b07      	ldr	r3, [sp, #28]
   12c7e:	2101      	movs	r1, #1
   12c80:	f853 2b04 	ldr.w	r2, [r3], #4
   12c84:	9102      	str	r1, [sp, #8]
   12c86:	f88d 20ac 	strb.w	r2, [sp, #172]	; 0xac
   12c8a:	9307      	str	r3, [sp, #28]
   12c8c:	9104      	str	r1, [sp, #16]
   12c8e:	ac2b      	add	r4, sp, #172	; 0xac
   12c90:	e4ba      	b.n	12608 <_vfiprintf_r+0x5b0>
   12c92:	f89d 2043 	ldrb.w	r2, [sp, #67]	; 0x43
   12c96:	2a00      	cmp	r2, #0
   12c98:	f040 8126 	bne.w	12ee8 <_vfiprintf_r+0xe90>
   12c9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   12c9e:	2a00      	cmp	r2, #0
   12ca0:	f47f ae59 	bne.w	12956 <_vfiprintf_r+0x8fe>
   12ca4:	4618      	mov	r0, r3
   12ca6:	2101      	movs	r1, #1
   12ca8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12cac:	e404      	b.n	124b8 <_vfiprintf_r+0x460>
   12cae:	2100      	movs	r1, #0
   12cb0:	2208      	movs	r2, #8
   12cb2:	a816      	add	r0, sp, #88	; 0x58
   12cb4:	9413      	str	r4, [sp, #76]	; 0x4c
   12cb6:	f7fb f9e1 	bl	e07c <memset>
   12cba:	1c79      	adds	r1, r7, #1
   12cbc:	f000 80b2 	beq.w	12e24 <_vfiprintf_r+0xdcc>
   12cc0:	2500      	movs	r5, #0
   12cc2:	9407      	str	r4, [sp, #28]
   12cc4:	462c      	mov	r4, r5
   12cc6:	e00c      	b.n	12ce2 <_vfiprintf_r+0xc8a>
   12cc8:	a92b      	add	r1, sp, #172	; 0xac
   12cca:	4658      	mov	r0, fp
   12ccc:	f7ff f8c0 	bl	11e50 <_wcrtomb_r>
   12cd0:	1c42      	adds	r2, r0, #1
   12cd2:	4420      	add	r0, r4
   12cd4:	f000 8161 	beq.w	12f9a <_vfiprintf_r+0xf42>
   12cd8:	42b8      	cmp	r0, r7
   12cda:	dc08      	bgt.n	12cee <_vfiprintf_r+0xc96>
   12cdc:	f000 8165 	beq.w	12faa <_vfiprintf_r+0xf52>
   12ce0:	4604      	mov	r4, r0
   12ce2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12ce4:	5952      	ldr	r2, [r2, r5]
   12ce6:	ab16      	add	r3, sp, #88	; 0x58
   12ce8:	3504      	adds	r5, #4
   12cea:	2a00      	cmp	r2, #0
   12cec:	d1ec      	bne.n	12cc8 <_vfiprintf_r+0xc70>
   12cee:	9404      	str	r4, [sp, #16]
   12cf0:	9c07      	ldr	r4, [sp, #28]
   12cf2:	e0a5      	b.n	12e40 <_vfiprintf_r+0xde8>
   12cf4:	f016 0310 	ands.w	r3, r6, #16
   12cf8:	9807      	ldr	r0, [sp, #28]
   12cfa:	d10c      	bne.n	12d16 <_vfiprintf_r+0xcbe>
   12cfc:	f016 0440 	ands.w	r4, r6, #64	; 0x40
   12d00:	d005      	beq.n	12d0e <_vfiprintf_r+0xcb6>
   12d02:	461a      	mov	r2, r3
   12d04:	f850 3b04 	ldr.w	r3, [r0], #4
   12d08:	9007      	str	r0, [sp, #28]
   12d0a:	b29b      	uxth	r3, r3
   12d0c:	e79b      	b.n	12c46 <_vfiprintf_r+0xbee>
   12d0e:	f416 7200 	ands.w	r2, r6, #512	; 0x200
   12d12:	f040 80d5 	bne.w	12ec0 <_vfiprintf_r+0xe68>
   12d16:	f850 3b04 	ldr.w	r3, [r0], #4
   12d1a:	9007      	str	r0, [sp, #28]
   12d1c:	e793      	b.n	12c46 <_vfiprintf_r+0xbee>
   12d1e:	9902      	ldr	r1, [sp, #8]
   12d20:	f8cd 8020 	str.w	r8, [sp, #32]
   12d24:	f401 6680 	and.w	r6, r1, #1024	; 0x400
   12d28:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   12d2c:	9704      	str	r7, [sp, #16]
   12d2e:	f04f 0c00 	mov.w	ip, #0
   12d32:	ac44      	add	r4, sp, #272	; 0x110
   12d34:	e005      	b.n	12d42 <_vfiprintf_r+0xcea>
   12d36:	2b0a      	cmp	r3, #10
   12d38:	f172 0200 	sbcs.w	r2, r2, #0
   12d3c:	d336      	bcc.n	12dac <_vfiprintf_r+0xd54>
   12d3e:	463b      	mov	r3, r7
   12d40:	462a      	mov	r2, r5
   12d42:	f8df e290 	ldr.w	lr, [pc, #656]	; 12fd4 <_vfiprintf_r+0xf7c>
   12d46:	1899      	adds	r1, r3, r2
   12d48:	f141 0100 	adc.w	r1, r1, #0
   12d4c:	fbae 0501 	umull	r0, r5, lr, r1
   12d50:	f025 0003 	bic.w	r0, r5, #3
   12d54:	eb00 0095 	add.w	r0, r0, r5, lsr #2
   12d58:	1a09      	subs	r1, r1, r0
   12d5a:	1a58      	subs	r0, r3, r1
   12d5c:	f04f 35cc 	mov.w	r5, #3435973836	; 0xcccccccc
   12d60:	f162 0700 	sbc.w	r7, r2, #0
   12d64:	fb05 f500 	mul.w	r5, r5, r0
   12d68:	fb0e 5507 	mla	r5, lr, r7, r5
   12d6c:	fba0 700e 	umull	r7, r0, r0, lr
   12d70:	4405      	add	r5, r0
   12d72:	f007 0e01 	and.w	lr, r7, #1
   12d76:	2005      	movs	r0, #5
   12d78:	fbae 0e00 	umull	r0, lr, lr, r0
   12d7c:	1840      	adds	r0, r0, r1
   12d7e:	087f      	lsrs	r7, r7, #1
   12d80:	3030      	adds	r0, #48	; 0x30
   12d82:	f804 0c01 	strb.w	r0, [r4, #-1]
   12d86:	ea47 77c5 	orr.w	r7, r7, r5, lsl #31
   12d8a:	f10c 0c01 	add.w	ip, ip, #1
   12d8e:	3c01      	subs	r4, #1
   12d90:	086d      	lsrs	r5, r5, #1
   12d92:	2e00      	cmp	r6, #0
   12d94:	d0cf      	beq.n	12d36 <_vfiprintf_r+0xcde>
   12d96:	f898 1000 	ldrb.w	r1, [r8]
   12d9a:	4561      	cmp	r1, ip
   12d9c:	d1cb      	bne.n	12d36 <_vfiprintf_r+0xcde>
   12d9e:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
   12da2:	d0c8      	beq.n	12d36 <_vfiprintf_r+0xcde>
   12da4:	2b0a      	cmp	r3, #10
   12da6:	f172 0200 	sbcs.w	r2, r2, #0
   12daa:	d26c      	bcs.n	12e86 <_vfiprintf_r+0xe2e>
   12dac:	ab44      	add	r3, sp, #272	; 0x110
   12dae:	1b1b      	subs	r3, r3, r4
   12db0:	9f04      	ldr	r7, [sp, #16]
   12db2:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
   12db6:	9e02      	ldr	r6, [sp, #8]
   12db8:	f8dd 8020 	ldr.w	r8, [sp, #32]
   12dbc:	9304      	str	r3, [sp, #16]
   12dbe:	f7ff ba6d 	b.w	1229c <_vfiprintf_r+0x244>
   12dc2:	9602      	str	r6, [sp, #8]
   12dc4:	f7ff ba5d 	b.w	12282 <_vfiprintf_r+0x22a>
   12dc8:	4658      	mov	r0, fp
   12dca:	f7fb f827 	bl	de1c <__sinit>
   12dce:	f7ff b95a 	b.w	12086 <_vfiprintf_r+0x2e>
   12dd2:	2901      	cmp	r1, #1
   12dd4:	9602      	str	r6, [sp, #8]
   12dd6:	f47f acb2 	bne.w	1273e <_vfiprintf_r+0x6e6>
   12dda:	f7ff ba57 	b.w	1228c <_vfiprintf_r+0x234>
   12dde:	9b07      	ldr	r3, [sp, #28]
   12de0:	9905      	ldr	r1, [sp, #20]
   12de2:	f853 2b04 	ldr.w	r2, [r3], #4
   12de6:	6011      	str	r1, [r2, #0]
   12de8:	9307      	str	r3, [sp, #28]
   12dea:	f7ff b979 	b.w	120e0 <_vfiprintf_r+0x88>
   12dee:	2f06      	cmp	r7, #6
   12df0:	463b      	mov	r3, r7
   12df2:	9a02      	ldr	r2, [sp, #8]
   12df4:	4c78      	ldr	r4, [pc, #480]	; (12fd8 <_vfiprintf_r+0xf80>)
   12df6:	9207      	str	r2, [sp, #28]
   12df8:	bf28      	it	cs
   12dfa:	2306      	movcs	r3, #6
   12dfc:	9304      	str	r3, [sp, #16]
   12dfe:	9302      	str	r3, [sp, #8]
   12e00:	f7ff bb0d 	b.w	1241e <_vfiprintf_r+0x3c6>
   12e04:	9b02      	ldr	r3, [sp, #8]
   12e06:	9907      	ldr	r1, [sp, #28]
   12e08:	f413 7200 	ands.w	r2, r3, #512	; 0x200
   12e0c:	bf14      	ite	ne
   12e0e:	f851 3b04 	ldrne.w	r3, [r1], #4
   12e12:	f851 3b04 	ldreq.w	r3, [r1], #4
   12e16:	9107      	str	r1, [sp, #28]
   12e18:	bf1c      	itt	ne
   12e1a:	4602      	movne	r2, r0
   12e1c:	b2db      	uxtbne	r3, r3
   12e1e:	2101      	movs	r1, #1
   12e20:	f7ff ba84 	b.w	1232c <_vfiprintf_r+0x2d4>
   12e24:	ab16      	add	r3, sp, #88	; 0x58
   12e26:	9300      	str	r3, [sp, #0]
   12e28:	2300      	movs	r3, #0
   12e2a:	4619      	mov	r1, r3
   12e2c:	aa13      	add	r2, sp, #76	; 0x4c
   12e2e:	4658      	mov	r0, fp
   12e30:	f7ff f834 	bl	11e9c <_wcsrtombs_r>
   12e34:	4603      	mov	r3, r0
   12e36:	3301      	adds	r3, #1
   12e38:	9004      	str	r0, [sp, #16]
   12e3a:	f000 80ae 	beq.w	12f9a <_vfiprintf_r+0xf42>
   12e3e:	9413      	str	r4, [sp, #76]	; 0x4c
   12e40:	9b04      	ldr	r3, [sp, #16]
   12e42:	b37b      	cbz	r3, 12ea4 <_vfiprintf_r+0xe4c>
   12e44:	2b63      	cmp	r3, #99	; 0x63
   12e46:	dc62      	bgt.n	12f0e <_vfiprintf_r+0xeb6>
   12e48:	2300      	movs	r3, #0
   12e4a:	9308      	str	r3, [sp, #32]
   12e4c:	ac2b      	add	r4, sp, #172	; 0xac
   12e4e:	2208      	movs	r2, #8
   12e50:	2100      	movs	r1, #0
   12e52:	a816      	add	r0, sp, #88	; 0x58
   12e54:	f7fb f912 	bl	e07c <memset>
   12e58:	9d04      	ldr	r5, [sp, #16]
   12e5a:	ab16      	add	r3, sp, #88	; 0x58
   12e5c:	9300      	str	r3, [sp, #0]
   12e5e:	aa13      	add	r2, sp, #76	; 0x4c
   12e60:	462b      	mov	r3, r5
   12e62:	4621      	mov	r1, r4
   12e64:	4658      	mov	r0, fp
   12e66:	f7ff f819 	bl	11e9c <_wcsrtombs_r>
   12e6a:	4285      	cmp	r5, r0
   12e6c:	f040 80ab 	bne.w	12fc6 <_vfiprintf_r+0xf6e>
   12e70:	9b02      	ldr	r3, [sp, #8]
   12e72:	9a04      	ldr	r2, [sp, #16]
   12e74:	9307      	str	r3, [sp, #28]
   12e76:	2300      	movs	r3, #0
   12e78:	54a3      	strb	r3, [r4, r2]
   12e7a:	461f      	mov	r7, r3
   12e7c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   12e80:	9302      	str	r3, [sp, #8]
   12e82:	f7ff ba12 	b.w	122aa <_vfiprintf_r+0x252>
   12e86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   12e88:	990d      	ldr	r1, [sp, #52]	; 0x34
   12e8a:	1ae4      	subs	r4, r4, r3
   12e8c:	461a      	mov	r2, r3
   12e8e:	4620      	mov	r0, r4
   12e90:	f7fb f946 	bl	e120 <strncpy>
   12e94:	f898 3001 	ldrb.w	r3, [r8, #1]
   12e98:	b10b      	cbz	r3, 12e9e <_vfiprintf_r+0xe46>
   12e9a:	f108 0801 	add.w	r8, r8, #1
   12e9e:	f04f 0c00 	mov.w	ip, #0
   12ea2:	e74c      	b.n	12d3e <_vfiprintf_r+0xce6>
   12ea4:	9b02      	ldr	r3, [sp, #8]
   12ea6:	9307      	str	r3, [sp, #28]
   12ea8:	9b04      	ldr	r3, [sp, #16]
   12eaa:	9302      	str	r3, [sp, #8]
   12eac:	461f      	mov	r7, r3
   12eae:	9308      	str	r3, [sp, #32]
   12eb0:	f7ff b9fb 	b.w	122aa <_vfiprintf_r+0x252>
   12eb4:	2101      	movs	r1, #1
   12eb6:	4618      	mov	r0, r3
   12eb8:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ebc:	f7ff bafc 	b.w	124b8 <_vfiprintf_r+0x460>
   12ec0:	f850 3b04 	ldr.w	r3, [r0], #4
   12ec4:	9007      	str	r0, [sp, #28]
   12ec6:	4622      	mov	r2, r4
   12ec8:	b2db      	uxtb	r3, r3
   12eca:	e6bc      	b.n	12c46 <_vfiprintf_r+0xbee>
   12ecc:	f912 3b04 	ldrsb.w	r3, [r2], #4
   12ed0:	9207      	str	r2, [sp, #28]
   12ed2:	17da      	asrs	r2, r3, #31
   12ed4:	4611      	mov	r1, r2
   12ed6:	f7ff b9c7 	b.w	12268 <_vfiprintf_r+0x210>
   12eda:	f851 3b04 	ldr.w	r3, [r1], #4
   12ede:	9107      	str	r1, [sp, #28]
   12ee0:	4602      	mov	r2, r0
   12ee2:	b2db      	uxtb	r3, r3
   12ee4:	f7ff ba1e 	b.w	12324 <_vfiprintf_r+0x2cc>
   12ee8:	2301      	movs	r3, #1
   12eea:	931c      	str	r3, [sp, #112]	; 0x70
   12eec:	2101      	movs	r1, #1
   12eee:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   12ef2:	931b      	str	r3, [sp, #108]	; 0x6c
   12ef4:	f10d 096c 	add.w	r9, sp, #108	; 0x6c
   12ef8:	460b      	mov	r3, r1
   12efa:	f7ff bab7 	b.w	1246c <_vfiprintf_r+0x414>
   12efe:	9b07      	ldr	r3, [sp, #28]
   12f00:	9905      	ldr	r1, [sp, #20]
   12f02:	f853 2b04 	ldr.w	r2, [r3], #4
   12f06:	9307      	str	r3, [sp, #28]
   12f08:	8011      	strh	r1, [r2, #0]
   12f0a:	f7ff b8e9 	b.w	120e0 <_vfiprintf_r+0x88>
   12f0e:	1c59      	adds	r1, r3, #1
   12f10:	4658      	mov	r0, fp
   12f12:	f7fa fa45 	bl	d3a0 <_malloc_r>
   12f16:	4604      	mov	r4, r0
   12f18:	2800      	cmp	r0, #0
   12f1a:	d03e      	beq.n	12f9a <_vfiprintf_r+0xf42>
   12f1c:	9008      	str	r0, [sp, #32]
   12f1e:	e796      	b.n	12e4e <_vfiprintf_r+0xdf6>
   12f20:	6d88      	ldr	r0, [r1, #88]	; 0x58
   12f22:	f7fb f9cb 	bl	e2bc <__retarget_lock_release_recursive>
   12f26:	f7ff b9e3 	b.w	122f0 <_vfiprintf_r+0x298>
   12f2a:	9b02      	ldr	r3, [sp, #8]
   12f2c:	9704      	str	r7, [sp, #16]
   12f2e:	9702      	str	r7, [sp, #8]
   12f30:	9307      	str	r3, [sp, #28]
   12f32:	9f08      	ldr	r7, [sp, #32]
   12f34:	f7ff b9b9 	b.w	122aa <_vfiprintf_r+0x252>
   12f38:	9819      	ldr	r0, [sp, #100]	; 0x64
   12f3a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   12f3c:	3001      	adds	r0, #1
   12f3e:	e557      	b.n	129f0 <_vfiprintf_r+0x998>
   12f40:	9b02      	ldr	r3, [sp, #8]
   12f42:	9307      	str	r3, [sp, #28]
   12f44:	4620      	mov	r0, r4
   12f46:	f7fb f9bb 	bl	e2c0 <strlen>
   12f4a:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   12f4e:	462f      	mov	r7, r5
   12f50:	9004      	str	r0, [sp, #16]
   12f52:	9302      	str	r3, [sp, #8]
   12f54:	9508      	str	r5, [sp, #32]
   12f56:	f7ff b9a8 	b.w	122aa <_vfiprintf_r+0x252>
   12f5a:	9903      	ldr	r1, [sp, #12]
   12f5c:	aa18      	add	r2, sp, #96	; 0x60
   12f5e:	4658      	mov	r0, fp
   12f60:	f7ff f83e 	bl	11fe0 <__sprint_r.part.0>
   12f64:	2800      	cmp	r0, #0
   12f66:	f43f aa2e 	beq.w	123c6 <_vfiprintf_r+0x36e>
   12f6a:	f7ff ba3c 	b.w	123e6 <_vfiprintf_r+0x38e>
   12f6e:	9819      	ldr	r0, [sp, #100]	; 0x64
   12f70:	3001      	adds	r0, #1
   12f72:	e585      	b.n	12a80 <_vfiprintf_r+0xa28>
   12f74:	468c      	mov	ip, r1
   12f76:	e462      	b.n	1283e <_vfiprintf_r+0x7e6>
   12f78:	9b03      	ldr	r3, [sp, #12]
   12f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   12f7c:	07d9      	lsls	r1, r3, #31
   12f7e:	d407      	bmi.n	12f90 <_vfiprintf_r+0xf38>
   12f80:	9b03      	ldr	r3, [sp, #12]
   12f82:	899b      	ldrh	r3, [r3, #12]
   12f84:	059a      	lsls	r2, r3, #22
   12f86:	d403      	bmi.n	12f90 <_vfiprintf_r+0xf38>
   12f88:	9b03      	ldr	r3, [sp, #12]
   12f8a:	6d98      	ldr	r0, [r3, #88]	; 0x58
   12f8c:	f7fb f996 	bl	e2bc <__retarget_lock_release_recursive>
   12f90:	f04f 33ff 	mov.w	r3, #4294967295
   12f94:	9305      	str	r3, [sp, #20]
   12f96:	f7ff ba33 	b.w	12400 <_vfiprintf_r+0x3a8>
   12f9a:	9a03      	ldr	r2, [sp, #12]
   12f9c:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   12fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12fa4:	8193      	strh	r3, [r2, #12]
   12fa6:	f7ff ba21 	b.w	123ec <_vfiprintf_r+0x394>
   12faa:	9c07      	ldr	r4, [sp, #28]
   12fac:	9704      	str	r7, [sp, #16]
   12fae:	e747      	b.n	12e40 <_vfiprintf_r+0xde8>
   12fb0:	9b07      	ldr	r3, [sp, #28]
   12fb2:	f898 1001 	ldrb.w	r1, [r8, #1]
   12fb6:	f853 7b04 	ldr.w	r7, [r3], #4
   12fba:	9307      	str	r3, [sp, #28]
   12fbc:	4690      	mov	r8, r2
   12fbe:	ea47 77e7 	orr.w	r7, r7, r7, asr #31
   12fc2:	f7ff b8b5 	b.w	12130 <_vfiprintf_r+0xd8>
   12fc6:	9a03      	ldr	r2, [sp, #12]
   12fc8:	8993      	ldrh	r3, [r2, #12]
   12fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12fce:	8193      	strh	r3, [r2, #12]
   12fd0:	f7ff ba03 	b.w	123da <_vfiprintf_r+0x382>
   12fd4:	cccccccd 	.word	0xcccccccd
   12fd8:	00015964 	.word	0x00015964

00012fdc <__sbprintf>:
   12fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   12fde:	461f      	mov	r7, r3
   12fe0:	898b      	ldrh	r3, [r1, #12]
   12fe2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   12fe6:	f023 0302 	bic.w	r3, r3, #2
   12fea:	f8ad 300c 	strh.w	r3, [sp, #12]
   12fee:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   12ff0:	9319      	str	r3, [sp, #100]	; 0x64
   12ff2:	89cb      	ldrh	r3, [r1, #14]
   12ff4:	f8ad 300e 	strh.w	r3, [sp, #14]
   12ff8:	69cb      	ldr	r3, [r1, #28]
   12ffa:	9307      	str	r3, [sp, #28]
   12ffc:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   12ffe:	9309      	str	r3, [sp, #36]	; 0x24
   13000:	ab1a      	add	r3, sp, #104	; 0x68
   13002:	9300      	str	r3, [sp, #0]
   13004:	9304      	str	r3, [sp, #16]
   13006:	f44f 6380 	mov.w	r3, #1024	; 0x400
   1300a:	4615      	mov	r5, r2
   1300c:	4606      	mov	r6, r0
   1300e:	9302      	str	r3, [sp, #8]
   13010:	9305      	str	r3, [sp, #20]
   13012:	a816      	add	r0, sp, #88	; 0x58
   13014:	2300      	movs	r3, #0
   13016:	460c      	mov	r4, r1
   13018:	9306      	str	r3, [sp, #24]
   1301a:	f7fb f949 	bl	e2b0 <__retarget_lock_init_recursive>
   1301e:	462a      	mov	r2, r5
   13020:	463b      	mov	r3, r7
   13022:	4669      	mov	r1, sp
   13024:	4630      	mov	r0, r6
   13026:	f7ff f817 	bl	12058 <_vfiprintf_r>
   1302a:	1e05      	subs	r5, r0, #0
   1302c:	db07      	blt.n	1303e <__sbprintf+0x62>
   1302e:	4669      	mov	r1, sp
   13030:	4630      	mov	r0, r6
   13032:	f7fd fdb1 	bl	10b98 <_fflush_r>
   13036:	2800      	cmp	r0, #0
   13038:	bf18      	it	ne
   1303a:	f04f 35ff 	movne.w	r5, #4294967295
   1303e:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   13042:	065b      	lsls	r3, r3, #25
   13044:	d503      	bpl.n	1304e <__sbprintf+0x72>
   13046:	89a3      	ldrh	r3, [r4, #12]
   13048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1304c:	81a3      	strh	r3, [r4, #12]
   1304e:	9816      	ldr	r0, [sp, #88]	; 0x58
   13050:	f7fb f930 	bl	e2b4 <__retarget_lock_close_recursive>
   13054:	4628      	mov	r0, r5
   13056:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   1305a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001305c <__sfvwrite_r>:
   1305c:	6893      	ldr	r3, [r2, #8]
   1305e:	2b00      	cmp	r3, #0
   13060:	f000 8081 	beq.w	13166 <__sfvwrite_r+0x10a>
   13064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13068:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   1306c:	460c      	mov	r4, r1
   1306e:	0719      	lsls	r1, r3, #28
   13070:	4680      	mov	r8, r0
   13072:	b083      	sub	sp, #12
   13074:	4617      	mov	r7, r2
   13076:	b298      	uxth	r0, r3
   13078:	d523      	bpl.n	130c2 <__sfvwrite_r+0x66>
   1307a:	6923      	ldr	r3, [r4, #16]
   1307c:	b30b      	cbz	r3, 130c2 <__sfvwrite_r+0x66>
   1307e:	f010 0302 	ands.w	r3, r0, #2
   13082:	683d      	ldr	r5, [r7, #0]
   13084:	d02b      	beq.n	130de <__sfvwrite_r+0x82>
   13086:	f04f 0a00 	mov.w	sl, #0
   1308a:	f8df b2b4 	ldr.w	fp, [pc, #692]	; 13340 <__sfvwrite_r+0x2e4>
   1308e:	4656      	mov	r6, sl
   13090:	455e      	cmp	r6, fp
   13092:	4633      	mov	r3, r6
   13094:	4652      	mov	r2, sl
   13096:	bf28      	it	cs
   13098:	465b      	movcs	r3, fp
   1309a:	4640      	mov	r0, r8
   1309c:	2e00      	cmp	r6, #0
   1309e:	d04f      	beq.n	13140 <__sfvwrite_r+0xe4>
   130a0:	69e1      	ldr	r1, [r4, #28]
   130a2:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   130a6:	47e0      	blx	ip
   130a8:	2800      	cmp	r0, #0
   130aa:	dd52      	ble.n	13152 <__sfvwrite_r+0xf6>
   130ac:	68bb      	ldr	r3, [r7, #8]
   130ae:	1a1b      	subs	r3, r3, r0
   130b0:	4482      	add	sl, r0
   130b2:	1a36      	subs	r6, r6, r0
   130b4:	60bb      	str	r3, [r7, #8]
   130b6:	2b00      	cmp	r3, #0
   130b8:	d1ea      	bne.n	13090 <__sfvwrite_r+0x34>
   130ba:	2000      	movs	r0, #0
   130bc:	b003      	add	sp, #12
   130be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130c2:	4621      	mov	r1, r4
   130c4:	4640      	mov	r0, r8
   130c6:	f000 f93d 	bl	13344 <__swsetup_r>
   130ca:	2800      	cmp	r0, #0
   130cc:	f040 8134 	bne.w	13338 <__sfvwrite_r+0x2dc>
   130d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   130d4:	683d      	ldr	r5, [r7, #0]
   130d6:	b298      	uxth	r0, r3
   130d8:	f010 0302 	ands.w	r3, r0, #2
   130dc:	d1d3      	bne.n	13086 <__sfvwrite_r+0x2a>
   130de:	f010 0901 	ands.w	r9, r0, #1
   130e2:	d142      	bne.n	1316a <__sfvwrite_r+0x10e>
   130e4:	464e      	mov	r6, r9
   130e6:	b33e      	cbz	r6, 13138 <__sfvwrite_r+0xdc>
   130e8:	0582      	lsls	r2, r0, #22
   130ea:	f8d4 b008 	ldr.w	fp, [r4, #8]
   130ee:	f140 8081 	bpl.w	131f4 <__sfvwrite_r+0x198>
   130f2:	45b3      	cmp	fp, r6
   130f4:	465a      	mov	r2, fp
   130f6:	f200 80b1 	bhi.w	1325c <__sfvwrite_r+0x200>
   130fa:	f410 6f90 	tst.w	r0, #1152	; 0x480
   130fe:	f040 80be 	bne.w	1327e <__sfvwrite_r+0x222>
   13102:	6820      	ldr	r0, [r4, #0]
   13104:	9201      	str	r2, [sp, #4]
   13106:	4649      	mov	r1, r9
   13108:	f7fa ff3c 	bl	df84 <memmove>
   1310c:	68a3      	ldr	r3, [r4, #8]
   1310e:	9a01      	ldr	r2, [sp, #4]
   13110:	eba3 010b 	sub.w	r1, r3, fp
   13114:	6823      	ldr	r3, [r4, #0]
   13116:	60a1      	str	r1, [r4, #8]
   13118:	4413      	add	r3, r2
   1311a:	46b2      	mov	sl, r6
   1311c:	6023      	str	r3, [r4, #0]
   1311e:	2600      	movs	r6, #0
   13120:	68bb      	ldr	r3, [r7, #8]
   13122:	eba3 030a 	sub.w	r3, r3, sl
   13126:	44d1      	add	r9, sl
   13128:	60bb      	str	r3, [r7, #8]
   1312a:	2b00      	cmp	r3, #0
   1312c:	d0c5      	beq.n	130ba <__sfvwrite_r+0x5e>
   1312e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   13132:	b280      	uxth	r0, r0
   13134:	2e00      	cmp	r6, #0
   13136:	d1d7      	bne.n	130e8 <__sfvwrite_r+0x8c>
   13138:	e9d5 9600 	ldrd	r9, r6, [r5]
   1313c:	3508      	adds	r5, #8
   1313e:	e7d2      	b.n	130e6 <__sfvwrite_r+0x8a>
   13140:	e9d5 a600 	ldrd	sl, r6, [r5]
   13144:	3508      	adds	r5, #8
   13146:	e7a3      	b.n	13090 <__sfvwrite_r+0x34>
   13148:	4621      	mov	r1, r4
   1314a:	4640      	mov	r0, r8
   1314c:	f7fd fd24 	bl	10b98 <_fflush_r>
   13150:	b380      	cbz	r0, 131b4 <__sfvwrite_r+0x158>
   13152:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1315a:	f04f 30ff 	mov.w	r0, #4294967295
   1315e:	81a3      	strh	r3, [r4, #12]
   13160:	b003      	add	sp, #12
   13162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13166:	2000      	movs	r0, #0
   13168:	4770      	bx	lr
   1316a:	461e      	mov	r6, r3
   1316c:	46ba      	mov	sl, r7
   1316e:	4699      	mov	r9, r3
   13170:	4618      	mov	r0, r3
   13172:	461f      	mov	r7, r3
   13174:	b366      	cbz	r6, 131d0 <__sfvwrite_r+0x174>
   13176:	b388      	cbz	r0, 131dc <__sfvwrite_r+0x180>
   13178:	464a      	mov	r2, r9
   1317a:	e9d4 c304 	ldrd	ip, r3, [r4, #16]
   1317e:	6820      	ldr	r0, [r4, #0]
   13180:	68a1      	ldr	r1, [r4, #8]
   13182:	42b2      	cmp	r2, r6
   13184:	bf28      	it	cs
   13186:	4632      	movcs	r2, r6
   13188:	4560      	cmp	r0, ip
   1318a:	d904      	bls.n	13196 <__sfvwrite_r+0x13a>
   1318c:	eb01 0b03 	add.w	fp, r1, r3
   13190:	455a      	cmp	r2, fp
   13192:	f300 80a7 	bgt.w	132e4 <__sfvwrite_r+0x288>
   13196:	4293      	cmp	r3, r2
   13198:	dc64      	bgt.n	13264 <__sfvwrite_r+0x208>
   1319a:	69e1      	ldr	r1, [r4, #28]
   1319c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   131a0:	463a      	mov	r2, r7
   131a2:	4640      	mov	r0, r8
   131a4:	47e0      	blx	ip
   131a6:	f1b0 0b00 	subs.w	fp, r0, #0
   131aa:	ddd2      	ble.n	13152 <__sfvwrite_r+0xf6>
   131ac:	ebb9 090b 	subs.w	r9, r9, fp
   131b0:	d0ca      	beq.n	13148 <__sfvwrite_r+0xec>
   131b2:	2001      	movs	r0, #1
   131b4:	f8da 3008 	ldr.w	r3, [sl, #8]
   131b8:	eba3 030b 	sub.w	r3, r3, fp
   131bc:	445f      	add	r7, fp
   131be:	eba6 060b 	sub.w	r6, r6, fp
   131c2:	f8ca 3008 	str.w	r3, [sl, #8]
   131c6:	2b00      	cmp	r3, #0
   131c8:	f43f af77 	beq.w	130ba <__sfvwrite_r+0x5e>
   131cc:	2e00      	cmp	r6, #0
   131ce:	d1d2      	bne.n	13176 <__sfvwrite_r+0x11a>
   131d0:	686e      	ldr	r6, [r5, #4]
   131d2:	462b      	mov	r3, r5
   131d4:	3508      	adds	r5, #8
   131d6:	2e00      	cmp	r6, #0
   131d8:	d0fa      	beq.n	131d0 <__sfvwrite_r+0x174>
   131da:	681f      	ldr	r7, [r3, #0]
   131dc:	4632      	mov	r2, r6
   131de:	210a      	movs	r1, #10
   131e0:	4638      	mov	r0, r7
   131e2:	f7fd fd1d 	bl	10c20 <memchr>
   131e6:	2800      	cmp	r0, #0
   131e8:	f000 809d 	beq.w	13326 <__sfvwrite_r+0x2ca>
   131ec:	3001      	adds	r0, #1
   131ee:	eba0 0907 	sub.w	r9, r0, r7
   131f2:	e7c1      	b.n	13178 <__sfvwrite_r+0x11c>
   131f4:	6820      	ldr	r0, [r4, #0]
   131f6:	6923      	ldr	r3, [r4, #16]
   131f8:	4298      	cmp	r0, r3
   131fa:	d817      	bhi.n	1322c <__sfvwrite_r+0x1d0>
   131fc:	6962      	ldr	r2, [r4, #20]
   131fe:	42b2      	cmp	r2, r6
   13200:	d814      	bhi.n	1322c <__sfvwrite_r+0x1d0>
   13202:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
   13206:	42b3      	cmp	r3, r6
   13208:	bf28      	it	cs
   1320a:	4633      	movcs	r3, r6
   1320c:	69e1      	ldr	r1, [r4, #28]
   1320e:	fb93 f3f2 	sdiv	r3, r3, r2
   13212:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   13216:	fb02 f303 	mul.w	r3, r2, r3
   1321a:	4640      	mov	r0, r8
   1321c:	464a      	mov	r2, r9
   1321e:	47e0      	blx	ip
   13220:	f1b0 0a00 	subs.w	sl, r0, #0
   13224:	dd95      	ble.n	13152 <__sfvwrite_r+0xf6>
   13226:	eba6 060a 	sub.w	r6, r6, sl
   1322a:	e779      	b.n	13120 <__sfvwrite_r+0xc4>
   1322c:	45b3      	cmp	fp, r6
   1322e:	46da      	mov	sl, fp
   13230:	bf28      	it	cs
   13232:	46b2      	movcs	sl, r6
   13234:	4652      	mov	r2, sl
   13236:	4649      	mov	r1, r9
   13238:	f7fa fea4 	bl	df84 <memmove>
   1323c:	68a3      	ldr	r3, [r4, #8]
   1323e:	6822      	ldr	r2, [r4, #0]
   13240:	eba3 030a 	sub.w	r3, r3, sl
   13244:	4452      	add	r2, sl
   13246:	60a3      	str	r3, [r4, #8]
   13248:	6022      	str	r2, [r4, #0]
   1324a:	2b00      	cmp	r3, #0
   1324c:	d1eb      	bne.n	13226 <__sfvwrite_r+0x1ca>
   1324e:	4621      	mov	r1, r4
   13250:	4640      	mov	r0, r8
   13252:	f7fd fca1 	bl	10b98 <_fflush_r>
   13256:	2800      	cmp	r0, #0
   13258:	d0e5      	beq.n	13226 <__sfvwrite_r+0x1ca>
   1325a:	e77a      	b.n	13152 <__sfvwrite_r+0xf6>
   1325c:	6820      	ldr	r0, [r4, #0]
   1325e:	46b3      	mov	fp, r6
   13260:	4632      	mov	r2, r6
   13262:	e74f      	b.n	13104 <__sfvwrite_r+0xa8>
   13264:	4639      	mov	r1, r7
   13266:	9201      	str	r2, [sp, #4]
   13268:	f7fa fe8c 	bl	df84 <memmove>
   1326c:	9a01      	ldr	r2, [sp, #4]
   1326e:	68a3      	ldr	r3, [r4, #8]
   13270:	1a9b      	subs	r3, r3, r2
   13272:	60a3      	str	r3, [r4, #8]
   13274:	6823      	ldr	r3, [r4, #0]
   13276:	4413      	add	r3, r2
   13278:	6023      	str	r3, [r4, #0]
   1327a:	4693      	mov	fp, r2
   1327c:	e796      	b.n	131ac <__sfvwrite_r+0x150>
   1327e:	6823      	ldr	r3, [r4, #0]
   13280:	6921      	ldr	r1, [r4, #16]
   13282:	eba3 0b01 	sub.w	fp, r3, r1
   13286:	6963      	ldr	r3, [r4, #20]
   13288:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   1328c:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   13290:	f10b 0301 	add.w	r3, fp, #1
   13294:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   13298:	4433      	add	r3, r6
   1329a:	4553      	cmp	r3, sl
   1329c:	4652      	mov	r2, sl
   1329e:	bf84      	itt	hi
   132a0:	469a      	movhi	sl, r3
   132a2:	4652      	movhi	r2, sl
   132a4:	0543      	lsls	r3, r0, #21
   132a6:	d52c      	bpl.n	13302 <__sfvwrite_r+0x2a6>
   132a8:	4611      	mov	r1, r2
   132aa:	4640      	mov	r0, r8
   132ac:	f7fa f878 	bl	d3a0 <_malloc_r>
   132b0:	2800      	cmp	r0, #0
   132b2:	d03b      	beq.n	1332c <__sfvwrite_r+0x2d0>
   132b4:	465a      	mov	r2, fp
   132b6:	6921      	ldr	r1, [r4, #16]
   132b8:	9001      	str	r0, [sp, #4]
   132ba:	f7f6 fd17 	bl	9cec <memcpy>
   132be:	89a2      	ldrh	r2, [r4, #12]
   132c0:	9b01      	ldr	r3, [sp, #4]
   132c2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   132c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   132ca:	81a2      	strh	r2, [r4, #12]
   132cc:	eb03 000b 	add.w	r0, r3, fp
   132d0:	6123      	str	r3, [r4, #16]
   132d2:	ebaa 030b 	sub.w	r3, sl, fp
   132d6:	f8c4 a014 	str.w	sl, [r4, #20]
   132da:	60a3      	str	r3, [r4, #8]
   132dc:	6020      	str	r0, [r4, #0]
   132de:	46b3      	mov	fp, r6
   132e0:	4632      	mov	r2, r6
   132e2:	e70f      	b.n	13104 <__sfvwrite_r+0xa8>
   132e4:	4639      	mov	r1, r7
   132e6:	465a      	mov	r2, fp
   132e8:	f7fa fe4c 	bl	df84 <memmove>
   132ec:	6823      	ldr	r3, [r4, #0]
   132ee:	445b      	add	r3, fp
   132f0:	6023      	str	r3, [r4, #0]
   132f2:	4621      	mov	r1, r4
   132f4:	4640      	mov	r0, r8
   132f6:	f7fd fc4f 	bl	10b98 <_fflush_r>
   132fa:	2800      	cmp	r0, #0
   132fc:	f43f af56 	beq.w	131ac <__sfvwrite_r+0x150>
   13300:	e727      	b.n	13152 <__sfvwrite_r+0xf6>
   13302:	4640      	mov	r0, r8
   13304:	f7fa fb08 	bl	d918 <_realloc_r>
   13308:	4603      	mov	r3, r0
   1330a:	2800      	cmp	r0, #0
   1330c:	d1de      	bne.n	132cc <__sfvwrite_r+0x270>
   1330e:	6921      	ldr	r1, [r4, #16]
   13310:	4640      	mov	r0, r8
   13312:	f7fb f8a3 	bl	e45c <_free_r>
   13316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1331a:	220c      	movs	r2, #12
   1331c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   13320:	f8c8 2000 	str.w	r2, [r8]
   13324:	e717      	b.n	13156 <__sfvwrite_r+0xfa>
   13326:	1c72      	adds	r2, r6, #1
   13328:	4691      	mov	r9, r2
   1332a:	e726      	b.n	1317a <__sfvwrite_r+0x11e>
   1332c:	220c      	movs	r2, #12
   1332e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13332:	f8c8 2000 	str.w	r2, [r8]
   13336:	e70e      	b.n	13156 <__sfvwrite_r+0xfa>
   13338:	f04f 30ff 	mov.w	r0, #4294967295
   1333c:	e6be      	b.n	130bc <__sfvwrite_r+0x60>
   1333e:	bf00      	nop
   13340:	7ffffc00 	.word	0x7ffffc00

00013344 <__swsetup_r>:
   13344:	b538      	push	{r3, r4, r5, lr}
   13346:	4b31      	ldr	r3, [pc, #196]	; (1340c <__swsetup_r+0xc8>)
   13348:	681b      	ldr	r3, [r3, #0]
   1334a:	4605      	mov	r5, r0
   1334c:	460c      	mov	r4, r1
   1334e:	b113      	cbz	r3, 13356 <__swsetup_r+0x12>
   13350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   13352:	2a00      	cmp	r2, #0
   13354:	d04e      	beq.n	133f4 <__swsetup_r+0xb0>
   13356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1335a:	0718      	lsls	r0, r3, #28
   1335c:	b29a      	uxth	r2, r3
   1335e:	d51c      	bpl.n	1339a <__swsetup_r+0x56>
   13360:	6921      	ldr	r1, [r4, #16]
   13362:	b329      	cbz	r1, 133b0 <__swsetup_r+0x6c>
   13364:	f012 0001 	ands.w	r0, r2, #1
   13368:	d007      	beq.n	1337a <__swsetup_r+0x36>
   1336a:	2000      	movs	r0, #0
   1336c:	60a0      	str	r0, [r4, #8]
   1336e:	6960      	ldr	r0, [r4, #20]
   13370:	4240      	negs	r0, r0
   13372:	61a0      	str	r0, [r4, #24]
   13374:	b139      	cbz	r1, 13386 <__swsetup_r+0x42>
   13376:	2000      	movs	r0, #0
   13378:	bd38      	pop	{r3, r4, r5, pc}
   1337a:	0795      	lsls	r5, r2, #30
   1337c:	bf58      	it	pl
   1337e:	6960      	ldrpl	r0, [r4, #20]
   13380:	60a0      	str	r0, [r4, #8]
   13382:	2900      	cmp	r1, #0
   13384:	d1f7      	bne.n	13376 <__swsetup_r+0x32>
   13386:	0612      	lsls	r2, r2, #24
   13388:	bf58      	it	pl
   1338a:	4608      	movpl	r0, r1
   1338c:	d5f4      	bpl.n	13378 <__swsetup_r+0x34>
   1338e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13392:	81a3      	strh	r3, [r4, #12]
   13394:	f04f 30ff 	mov.w	r0, #4294967295
   13398:	bd38      	pop	{r3, r4, r5, pc}
   1339a:	06d1      	lsls	r1, r2, #27
   1339c:	d52e      	bpl.n	133fc <__swsetup_r+0xb8>
   1339e:	0752      	lsls	r2, r2, #29
   133a0:	d414      	bmi.n	133cc <__swsetup_r+0x88>
   133a2:	6921      	ldr	r1, [r4, #16]
   133a4:	f043 0308 	orr.w	r3, r3, #8
   133a8:	81a3      	strh	r3, [r4, #12]
   133aa:	b29a      	uxth	r2, r3
   133ac:	2900      	cmp	r1, #0
   133ae:	d1d9      	bne.n	13364 <__swsetup_r+0x20>
   133b0:	f402 7020 	and.w	r0, r2, #640	; 0x280
   133b4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   133b8:	d0d4      	beq.n	13364 <__swsetup_r+0x20>
   133ba:	4621      	mov	r1, r4
   133bc:	4628      	mov	r0, r5
   133be:	f000 f93f 	bl	13640 <__smakebuf_r>
   133c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   133c6:	6921      	ldr	r1, [r4, #16]
   133c8:	b29a      	uxth	r2, r3
   133ca:	e7cb      	b.n	13364 <__swsetup_r+0x20>
   133cc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   133ce:	b151      	cbz	r1, 133e6 <__swsetup_r+0xa2>
   133d0:	f104 0240 	add.w	r2, r4, #64	; 0x40
   133d4:	4291      	cmp	r1, r2
   133d6:	d004      	beq.n	133e2 <__swsetup_r+0x9e>
   133d8:	4628      	mov	r0, r5
   133da:	f7fb f83f 	bl	e45c <_free_r>
   133de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   133e2:	2200      	movs	r2, #0
   133e4:	6322      	str	r2, [r4, #48]	; 0x30
   133e6:	6921      	ldr	r1, [r4, #16]
   133e8:	2200      	movs	r2, #0
   133ea:	e9c4 1200 	strd	r1, r2, [r4]
   133ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   133f2:	e7d7      	b.n	133a4 <__swsetup_r+0x60>
   133f4:	4618      	mov	r0, r3
   133f6:	f7fa fd11 	bl	de1c <__sinit>
   133fa:	e7ac      	b.n	13356 <__swsetup_r+0x12>
   133fc:	2209      	movs	r2, #9
   133fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   13402:	602a      	str	r2, [r5, #0]
   13404:	f04f 30ff 	mov.w	r0, #4294967295
   13408:	81a3      	strh	r3, [r4, #12]
   1340a:	bd38      	pop	{r3, r4, r5, pc}
   1340c:	1fff9160 	.word	0x1fff9160

00013410 <__fputwc>:
   13410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13414:	b083      	sub	sp, #12
   13416:	4607      	mov	r7, r0
   13418:	4688      	mov	r8, r1
   1341a:	4614      	mov	r4, r2
   1341c:	f7fa feb2 	bl	e184 <__locale_mb_cur_max>
   13420:	2801      	cmp	r0, #1
   13422:	d103      	bne.n	1342c <__fputwc+0x1c>
   13424:	f108 33ff 	add.w	r3, r8, #4294967295
   13428:	2bfe      	cmp	r3, #254	; 0xfe
   1342a:	d937      	bls.n	1349c <__fputwc+0x8c>
   1342c:	f10d 0904 	add.w	r9, sp, #4
   13430:	4642      	mov	r2, r8
   13432:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   13436:	4649      	mov	r1, r9
   13438:	4638      	mov	r0, r7
   1343a:	f7fe fd09 	bl	11e50 <_wcrtomb_r>
   1343e:	1c42      	adds	r2, r0, #1
   13440:	4606      	mov	r6, r0
   13442:	d033      	beq.n	134ac <__fputwc+0x9c>
   13444:	b328      	cbz	r0, 13492 <__fputwc+0x82>
   13446:	f89d c004 	ldrb.w	ip, [sp, #4]
   1344a:	2500      	movs	r5, #0
   1344c:	e009      	b.n	13462 <__fputwc+0x52>
   1344e:	6823      	ldr	r3, [r4, #0]
   13450:	1c5a      	adds	r2, r3, #1
   13452:	6022      	str	r2, [r4, #0]
   13454:	f883 c000 	strb.w	ip, [r3]
   13458:	3501      	adds	r5, #1
   1345a:	42b5      	cmp	r5, r6
   1345c:	d219      	bcs.n	13492 <__fputwc+0x82>
   1345e:	f819 cf01 	ldrb.w	ip, [r9, #1]!
   13462:	68a3      	ldr	r3, [r4, #8]
   13464:	3b01      	subs	r3, #1
   13466:	2b00      	cmp	r3, #0
   13468:	60a3      	str	r3, [r4, #8]
   1346a:	daf0      	bge.n	1344e <__fputwc+0x3e>
   1346c:	f8d4 e018 	ldr.w	lr, [r4, #24]
   13470:	4573      	cmp	r3, lr
   13472:	4661      	mov	r1, ip
   13474:	4622      	mov	r2, r4
   13476:	4638      	mov	r0, r7
   13478:	db02      	blt.n	13480 <__fputwc+0x70>
   1347a:	f1bc 0f0a 	cmp.w	ip, #10
   1347e:	d1e6      	bne.n	1344e <__fputwc+0x3e>
   13480:	f000 f94a 	bl	13718 <__swbuf_r>
   13484:	1c43      	adds	r3, r0, #1
   13486:	d1e7      	bne.n	13458 <__fputwc+0x48>
   13488:	4606      	mov	r6, r0
   1348a:	4630      	mov	r0, r6
   1348c:	b003      	add	sp, #12
   1348e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13492:	4646      	mov	r6, r8
   13494:	4630      	mov	r0, r6
   13496:	b003      	add	sp, #12
   13498:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1349c:	fa5f fc88 	uxtb.w	ip, r8
   134a0:	f88d c004 	strb.w	ip, [sp, #4]
   134a4:	4606      	mov	r6, r0
   134a6:	f10d 0904 	add.w	r9, sp, #4
   134aa:	e7ce      	b.n	1344a <__fputwc+0x3a>
   134ac:	89a3      	ldrh	r3, [r4, #12]
   134ae:	4630      	mov	r0, r6
   134b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   134b4:	81a3      	strh	r3, [r4, #12]
   134b6:	b003      	add	sp, #12
   134b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000134bc <_fputwc_r>:
   134bc:	b530      	push	{r4, r5, lr}
   134be:	6e53      	ldr	r3, [r2, #100]	; 0x64
   134c0:	f013 0f01 	tst.w	r3, #1
   134c4:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   134c8:	4614      	mov	r4, r2
   134ca:	b083      	sub	sp, #12
   134cc:	4605      	mov	r5, r0
   134ce:	b29a      	uxth	r2, r3
   134d0:	d101      	bne.n	134d6 <_fputwc_r+0x1a>
   134d2:	0598      	lsls	r0, r3, #22
   134d4:	d51c      	bpl.n	13510 <_fputwc_r+0x54>
   134d6:	0490      	lsls	r0, r2, #18
   134d8:	d406      	bmi.n	134e8 <_fputwc_r+0x2c>
   134da:	6e62      	ldr	r2, [r4, #100]	; 0x64
   134dc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   134e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   134e4:	81a3      	strh	r3, [r4, #12]
   134e6:	6662      	str	r2, [r4, #100]	; 0x64
   134e8:	4622      	mov	r2, r4
   134ea:	4628      	mov	r0, r5
   134ec:	f7ff ff90 	bl	13410 <__fputwc>
   134f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   134f2:	07da      	lsls	r2, r3, #31
   134f4:	4605      	mov	r5, r0
   134f6:	d402      	bmi.n	134fe <_fputwc_r+0x42>
   134f8:	89a3      	ldrh	r3, [r4, #12]
   134fa:	059b      	lsls	r3, r3, #22
   134fc:	d502      	bpl.n	13504 <_fputwc_r+0x48>
   134fe:	4628      	mov	r0, r5
   13500:	b003      	add	sp, #12
   13502:	bd30      	pop	{r4, r5, pc}
   13504:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13506:	f7fa fed9 	bl	e2bc <__retarget_lock_release_recursive>
   1350a:	4628      	mov	r0, r5
   1350c:	b003      	add	sp, #12
   1350e:	bd30      	pop	{r4, r5, pc}
   13510:	6da0      	ldr	r0, [r4, #88]	; 0x58
   13512:	9101      	str	r1, [sp, #4]
   13514:	f7fa fed0 	bl	e2b8 <__retarget_lock_acquire_recursive>
   13518:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1351c:	9901      	ldr	r1, [sp, #4]
   1351e:	b29a      	uxth	r2, r3
   13520:	e7d9      	b.n	134d6 <_fputwc_r+0x1a>
   13522:	bf00      	nop

00013524 <_wcsnrtombs_l>:
   13524:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13528:	b089      	sub	sp, #36	; 0x24
   1352a:	e9dd 8a13 	ldrd	r8, sl, [sp, #76]	; 0x4c
   1352e:	9f12      	ldr	r7, [sp, #72]	; 0x48
   13530:	9101      	str	r1, [sp, #4]
   13532:	4681      	mov	r9, r0
   13534:	9203      	str	r2, [sp, #12]
   13536:	461e      	mov	r6, r3
   13538:	f1b8 0f00 	cmp.w	r8, #0
   1353c:	d055      	beq.n	135ea <_wcsnrtombs_l+0xc6>
   1353e:	9b01      	ldr	r3, [sp, #4]
   13540:	2b00      	cmp	r3, #0
   13542:	d057      	beq.n	135f4 <_wcsnrtombs_l+0xd0>
   13544:	9b03      	ldr	r3, [sp, #12]
   13546:	681d      	ldr	r5, [r3, #0]
   13548:	2f00      	cmp	r7, #0
   1354a:	d063      	beq.n	13614 <_wcsnrtombs_l+0xf0>
   1354c:	1e74      	subs	r4, r6, #1
   1354e:	b32e      	cbz	r6, 1359c <_wcsnrtombs_l+0x78>
   13550:	9b01      	ldr	r3, [sp, #4]
   13552:	9302      	str	r3, [sp, #8]
   13554:	3d04      	subs	r5, #4
   13556:	2600      	movs	r6, #0
   13558:	e00a      	b.n	13570 <_wcsnrtombs_l+0x4c>
   1355a:	9b01      	ldr	r3, [sp, #4]
   1355c:	bb13      	cbnz	r3, 135a4 <_wcsnrtombs_l+0x80>
   1355e:	682a      	ldr	r2, [r5, #0]
   13560:	2a00      	cmp	r2, #0
   13562:	d035      	beq.n	135d0 <_wcsnrtombs_l+0xac>
   13564:	45bc      	cmp	ip, r7
   13566:	d257      	bcs.n	13618 <_wcsnrtombs_l+0xf4>
   13568:	3c01      	subs	r4, #1
   1356a:	1c63      	adds	r3, r4, #1
   1356c:	4666      	mov	r6, ip
   1356e:	d015      	beq.n	1359c <_wcsnrtombs_l+0x78>
   13570:	f8d8 3000 	ldr.w	r3, [r8]
   13574:	f855 2f04 	ldr.w	r2, [r5, #4]!
   13578:	9300      	str	r3, [sp, #0]
   1357a:	f8da c0e0 	ldr.w	ip, [sl, #224]	; 0xe0
   1357e:	f8d8 b004 	ldr.w	fp, [r8, #4]
   13582:	4643      	mov	r3, r8
   13584:	a905      	add	r1, sp, #20
   13586:	4648      	mov	r0, r9
   13588:	47e0      	blx	ip
   1358a:	1c42      	adds	r2, r0, #1
   1358c:	d037      	beq.n	135fe <_wcsnrtombs_l+0xda>
   1358e:	eb00 0c06 	add.w	ip, r0, r6
   13592:	45bc      	cmp	ip, r7
   13594:	d9e1      	bls.n	1355a <_wcsnrtombs_l+0x36>
   13596:	9b00      	ldr	r3, [sp, #0]
   13598:	e9c8 3b00 	strd	r3, fp, [r8]
   1359c:	4630      	mov	r0, r6
   1359e:	b009      	add	sp, #36	; 0x24
   135a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a4:	2800      	cmp	r0, #0
   135a6:	dd0c      	ble.n	135c2 <_wcsnrtombs_l+0x9e>
   135a8:	9b02      	ldr	r3, [sp, #8]
   135aa:	4418      	add	r0, r3
   135ac:	1e5a      	subs	r2, r3, #1
   135ae:	a905      	add	r1, sp, #20
   135b0:	f100 3eff 	add.w	lr, r0, #4294967295
   135b4:	f811 3b01 	ldrb.w	r3, [r1], #1
   135b8:	f802 3f01 	strb.w	r3, [r2, #1]!
   135bc:	4572      	cmp	r2, lr
   135be:	d1f9      	bne.n	135b4 <_wcsnrtombs_l+0x90>
   135c0:	9002      	str	r0, [sp, #8]
   135c2:	9b03      	ldr	r3, [sp, #12]
   135c4:	681a      	ldr	r2, [r3, #0]
   135c6:	3204      	adds	r2, #4
   135c8:	601a      	str	r2, [r3, #0]
   135ca:	682a      	ldr	r2, [r5, #0]
   135cc:	2a00      	cmp	r2, #0
   135ce:	d1c9      	bne.n	13564 <_wcsnrtombs_l+0x40>
   135d0:	9b01      	ldr	r3, [sp, #4]
   135d2:	b10b      	cbz	r3, 135d8 <_wcsnrtombs_l+0xb4>
   135d4:	9b03      	ldr	r3, [sp, #12]
   135d6:	601a      	str	r2, [r3, #0]
   135d8:	f10c 36ff 	add.w	r6, ip, #4294967295
   135dc:	2200      	movs	r2, #0
   135de:	4630      	mov	r0, r6
   135e0:	f8c8 2000 	str.w	r2, [r8]
   135e4:	b009      	add	sp, #36	; 0x24
   135e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135ea:	9b01      	ldr	r3, [sp, #4]
   135ec:	f500 7886 	add.w	r8, r0, #268	; 0x10c
   135f0:	2b00      	cmp	r3, #0
   135f2:	d1a7      	bne.n	13544 <_wcsnrtombs_l+0x20>
   135f4:	9b03      	ldr	r3, [sp, #12]
   135f6:	f04f 37ff 	mov.w	r7, #4294967295
   135fa:	681d      	ldr	r5, [r3, #0]
   135fc:	e7a6      	b.n	1354c <_wcsnrtombs_l+0x28>
   135fe:	4606      	mov	r6, r0
   13600:	218a      	movs	r1, #138	; 0x8a
   13602:	2200      	movs	r2, #0
   13604:	4630      	mov	r0, r6
   13606:	f8c9 1000 	str.w	r1, [r9]
   1360a:	f8c8 2000 	str.w	r2, [r8]
   1360e:	b009      	add	sp, #36	; 0x24
   13610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13614:	463e      	mov	r6, r7
   13616:	e7c1      	b.n	1359c <_wcsnrtombs_l+0x78>
   13618:	4666      	mov	r6, ip
   1361a:	e7bf      	b.n	1359c <_wcsnrtombs_l+0x78>

0001361c <_wcsnrtombs_r>:
   1361c:	b510      	push	{r4, lr}
   1361e:	b084      	sub	sp, #16
   13620:	4c05      	ldr	r4, [pc, #20]	; (13638 <_wcsnrtombs_r+0x1c>)
   13622:	9806      	ldr	r0, [sp, #24]
   13624:	9000      	str	r0, [sp, #0]
   13626:	9807      	ldr	r0, [sp, #28]
   13628:	9001      	str	r0, [sp, #4]
   1362a:	4804      	ldr	r0, [pc, #16]	; (1363c <_wcsnrtombs_r+0x20>)
   1362c:	6800      	ldr	r0, [r0, #0]
   1362e:	9402      	str	r4, [sp, #8]
   13630:	f7ff ff78 	bl	13524 <_wcsnrtombs_l>
   13634:	b004      	add	sp, #16
   13636:	bd10      	pop	{r4, pc}
   13638:	1fff8ed4 	.word	0x1fff8ed4
   1363c:	1fff9160 	.word	0x1fff9160

00013640 <__smakebuf_r>:
   13640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13644:	898b      	ldrh	r3, [r1, #12]
   13646:	460c      	mov	r4, r1
   13648:	0799      	lsls	r1, r3, #30
   1364a:	b096      	sub	sp, #88	; 0x58
   1364c:	d508      	bpl.n	13660 <__smakebuf_r+0x20>
   1364e:	f104 0343 	add.w	r3, r4, #67	; 0x43
   13652:	2201      	movs	r2, #1
   13654:	e9c4 3204 	strd	r3, r2, [r4, #16]
   13658:	6023      	str	r3, [r4, #0]
   1365a:	b016      	add	sp, #88	; 0x58
   1365c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   13664:	2900      	cmp	r1, #0
   13666:	4606      	mov	r6, r0
   13668:	db25      	blt.n	136b6 <__smakebuf_r+0x76>
   1366a:	466a      	mov	r2, sp
   1366c:	f000 f8ac 	bl	137c8 <_fstat_r>
   13670:	2800      	cmp	r0, #0
   13672:	db1f      	blt.n	136b4 <__smakebuf_r+0x74>
   13674:	9d01      	ldr	r5, [sp, #4]
   13676:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   1367a:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   1367e:	fab5 f585 	clz	r5, r5
   13682:	f44f 6880 	mov.w	r8, #1024	; 0x400
   13686:	096d      	lsrs	r5, r5, #5
   13688:	f44f 6700 	mov.w	r7, #2048	; 0x800
   1368c:	4641      	mov	r1, r8
   1368e:	4630      	mov	r0, r6
   13690:	f7f9 fe86 	bl	d3a0 <_malloc_r>
   13694:	b1e0      	cbz	r0, 136d0 <__smakebuf_r+0x90>
   13696:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   1369a:	f8c4 8014 	str.w	r8, [r4, #20]
   1369e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   136a2:	6020      	str	r0, [r4, #0]
   136a4:	6120      	str	r0, [r4, #16]
   136a6:	81a3      	strh	r3, [r4, #12]
   136a8:	bb35      	cbnz	r5, 136f8 <__smakebuf_r+0xb8>
   136aa:	433b      	orrs	r3, r7
   136ac:	81a3      	strh	r3, [r4, #12]
   136ae:	b016      	add	sp, #88	; 0x58
   136b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   136b4:	89a3      	ldrh	r3, [r4, #12]
   136b6:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   136ba:	d019      	beq.n	136f0 <__smakebuf_r+0xb0>
   136bc:	f04f 0840 	mov.w	r8, #64	; 0x40
   136c0:	2500      	movs	r5, #0
   136c2:	4641      	mov	r1, r8
   136c4:	4630      	mov	r0, r6
   136c6:	462f      	mov	r7, r5
   136c8:	f7f9 fe6a 	bl	d3a0 <_malloc_r>
   136cc:	2800      	cmp	r0, #0
   136ce:	d1e2      	bne.n	13696 <__smakebuf_r+0x56>
   136d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   136d4:	059a      	lsls	r2, r3, #22
   136d6:	d4c0      	bmi.n	1365a <__smakebuf_r+0x1a>
   136d8:	f023 0303 	bic.w	r3, r3, #3
   136dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
   136e0:	f043 0302 	orr.w	r3, r3, #2
   136e4:	2101      	movs	r1, #1
   136e6:	e9c4 2104 	strd	r2, r1, [r4, #16]
   136ea:	81a3      	strh	r3, [r4, #12]
   136ec:	6022      	str	r2, [r4, #0]
   136ee:	e7b4      	b.n	1365a <__smakebuf_r+0x1a>
   136f0:	f44f 6880 	mov.w	r8, #1024	; 0x400
   136f4:	462f      	mov	r7, r5
   136f6:	e7c9      	b.n	1368c <__smakebuf_r+0x4c>
   136f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   136fc:	4630      	mov	r0, r6
   136fe:	f000 f879 	bl	137f4 <_isatty_r>
   13702:	b910      	cbnz	r0, 1370a <__smakebuf_r+0xca>
   13704:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   13708:	e7cf      	b.n	136aa <__smakebuf_r+0x6a>
   1370a:	89a3      	ldrh	r3, [r4, #12]
   1370c:	f023 0303 	bic.w	r3, r3, #3
   13710:	f043 0301 	orr.w	r3, r3, #1
   13714:	b21b      	sxth	r3, r3
   13716:	e7c8      	b.n	136aa <__smakebuf_r+0x6a>

00013718 <__swbuf_r>:
   13718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1371a:	460d      	mov	r5, r1
   1371c:	4614      	mov	r4, r2
   1371e:	4606      	mov	r6, r0
   13720:	b110      	cbz	r0, 13728 <__swbuf_r+0x10>
   13722:	6b43      	ldr	r3, [r0, #52]	; 0x34
   13724:	2b00      	cmp	r3, #0
   13726:	d04c      	beq.n	137c2 <__swbuf_r+0xaa>
   13728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1372c:	69a3      	ldr	r3, [r4, #24]
   1372e:	60a3      	str	r3, [r4, #8]
   13730:	0717      	lsls	r7, r2, #28
   13732:	b290      	uxth	r0, r2
   13734:	d51b      	bpl.n	1376e <__swbuf_r+0x56>
   13736:	6923      	ldr	r3, [r4, #16]
   13738:	b1cb      	cbz	r3, 1376e <__swbuf_r+0x56>
   1373a:	b2ed      	uxtb	r5, r5
   1373c:	0481      	lsls	r1, r0, #18
   1373e:	462f      	mov	r7, r5
   13740:	d522      	bpl.n	13788 <__swbuf_r+0x70>
   13742:	6822      	ldr	r2, [r4, #0]
   13744:	6961      	ldr	r1, [r4, #20]
   13746:	1ad3      	subs	r3, r2, r3
   13748:	4299      	cmp	r1, r3
   1374a:	dd29      	ble.n	137a0 <__swbuf_r+0x88>
   1374c:	3301      	adds	r3, #1
   1374e:	68a1      	ldr	r1, [r4, #8]
   13750:	3901      	subs	r1, #1
   13752:	60a1      	str	r1, [r4, #8]
   13754:	1c51      	adds	r1, r2, #1
   13756:	6021      	str	r1, [r4, #0]
   13758:	7015      	strb	r5, [r2, #0]
   1375a:	6962      	ldr	r2, [r4, #20]
   1375c:	429a      	cmp	r2, r3
   1375e:	d027      	beq.n	137b0 <__swbuf_r+0x98>
   13760:	89a3      	ldrh	r3, [r4, #12]
   13762:	07db      	lsls	r3, r3, #31
   13764:	d501      	bpl.n	1376a <__swbuf_r+0x52>
   13766:	2d0a      	cmp	r5, #10
   13768:	d022      	beq.n	137b0 <__swbuf_r+0x98>
   1376a:	4638      	mov	r0, r7
   1376c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1376e:	4621      	mov	r1, r4
   13770:	4630      	mov	r0, r6
   13772:	f7ff fde7 	bl	13344 <__swsetup_r>
   13776:	bb08      	cbnz	r0, 137bc <__swbuf_r+0xa4>
   13778:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   1377c:	6923      	ldr	r3, [r4, #16]
   1377e:	b290      	uxth	r0, r2
   13780:	b2ed      	uxtb	r5, r5
   13782:	0481      	lsls	r1, r0, #18
   13784:	462f      	mov	r7, r5
   13786:	d4dc      	bmi.n	13742 <__swbuf_r+0x2a>
   13788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   1378c:	81a2      	strh	r2, [r4, #12]
   1378e:	6e62      	ldr	r2, [r4, #100]	; 0x64
   13790:	6961      	ldr	r1, [r4, #20]
   13792:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   13796:	6662      	str	r2, [r4, #100]	; 0x64
   13798:	6822      	ldr	r2, [r4, #0]
   1379a:	1ad3      	subs	r3, r2, r3
   1379c:	4299      	cmp	r1, r3
   1379e:	dcd5      	bgt.n	1374c <__swbuf_r+0x34>
   137a0:	4621      	mov	r1, r4
   137a2:	4630      	mov	r0, r6
   137a4:	f7fd f9f8 	bl	10b98 <_fflush_r>
   137a8:	b940      	cbnz	r0, 137bc <__swbuf_r+0xa4>
   137aa:	6822      	ldr	r2, [r4, #0]
   137ac:	2301      	movs	r3, #1
   137ae:	e7ce      	b.n	1374e <__swbuf_r+0x36>
   137b0:	4621      	mov	r1, r4
   137b2:	4630      	mov	r0, r6
   137b4:	f7fd f9f0 	bl	10b98 <_fflush_r>
   137b8:	2800      	cmp	r0, #0
   137ba:	d0d6      	beq.n	1376a <__swbuf_r+0x52>
   137bc:	f04f 37ff 	mov.w	r7, #4294967295
   137c0:	e7d3      	b.n	1376a <__swbuf_r+0x52>
   137c2:	f7fa fb2b 	bl	de1c <__sinit>
   137c6:	e7af      	b.n	13728 <__swbuf_r+0x10>

000137c8 <_fstat_r>:
   137c8:	b570      	push	{r4, r5, r6, lr}
   137ca:	460c      	mov	r4, r1
   137cc:	4d08      	ldr	r5, [pc, #32]	; (137f0 <_fstat_r+0x28>)
   137ce:	4603      	mov	r3, r0
   137d0:	2600      	movs	r6, #0
   137d2:	4620      	mov	r0, r4
   137d4:	4611      	mov	r1, r2
   137d6:	461c      	mov	r4, r3
   137d8:	602e      	str	r6, [r5, #0]
   137da:	f7f6 fba5 	bl	9f28 <_fstat>
   137de:	1c43      	adds	r3, r0, #1
   137e0:	d000      	beq.n	137e4 <_fstat_r+0x1c>
   137e2:	bd70      	pop	{r4, r5, r6, pc}
   137e4:	682b      	ldr	r3, [r5, #0]
   137e6:	2b00      	cmp	r3, #0
   137e8:	d0fb      	beq.n	137e2 <_fstat_r+0x1a>
   137ea:	6023      	str	r3, [r4, #0]
   137ec:	bd70      	pop	{r4, r5, r6, pc}
   137ee:	bf00      	nop
   137f0:	1fffd768 	.word	0x1fffd768

000137f4 <_isatty_r>:
   137f4:	b538      	push	{r3, r4, r5, lr}
   137f6:	4d07      	ldr	r5, [pc, #28]	; (13814 <_isatty_r+0x20>)
   137f8:	2200      	movs	r2, #0
   137fa:	4604      	mov	r4, r0
   137fc:	4608      	mov	r0, r1
   137fe:	602a      	str	r2, [r5, #0]
   13800:	f7f6 fb98 	bl	9f34 <_isatty>
   13804:	1c43      	adds	r3, r0, #1
   13806:	d000      	beq.n	1380a <_isatty_r+0x16>
   13808:	bd38      	pop	{r3, r4, r5, pc}
   1380a:	682b      	ldr	r3, [r5, #0]
   1380c:	2b00      	cmp	r3, #0
   1380e:	d0fb      	beq.n	13808 <_isatty_r+0x14>
   13810:	6023      	str	r3, [r4, #0]
   13812:	bd38      	pop	{r3, r4, r5, pc}
   13814:	1fffd768 	.word	0x1fffd768

00013818 <__aeabi_dmul>:
   13818:	b570      	push	{r4, r5, r6, lr}
   1381a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   1381e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   13822:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   13826:	bf1d      	ittte	ne
   13828:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   1382c:	ea94 0f0c 	teqne	r4, ip
   13830:	ea95 0f0c 	teqne	r5, ip
   13834:	f000 f8de 	bleq	139f4 <__aeabi_dmul+0x1dc>
   13838:	442c      	add	r4, r5
   1383a:	ea81 0603 	eor.w	r6, r1, r3
   1383e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   13842:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   13846:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   1384a:	bf18      	it	ne
   1384c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   13850:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   13858:	d038      	beq.n	138cc <__aeabi_dmul+0xb4>
   1385a:	fba0 ce02 	umull	ip, lr, r0, r2
   1385e:	f04f 0500 	mov.w	r5, #0
   13862:	fbe1 e502 	umlal	lr, r5, r1, r2
   13866:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   1386a:	fbe0 e503 	umlal	lr, r5, r0, r3
   1386e:	f04f 0600 	mov.w	r6, #0
   13872:	fbe1 5603 	umlal	r5, r6, r1, r3
   13876:	f09c 0f00 	teq	ip, #0
   1387a:	bf18      	it	ne
   1387c:	f04e 0e01 	orrne.w	lr, lr, #1
   13880:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   13884:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   13888:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   1388c:	d204      	bcs.n	13898 <__aeabi_dmul+0x80>
   1388e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   13892:	416d      	adcs	r5, r5
   13894:	eb46 0606 	adc.w	r6, r6, r6
   13898:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   1389c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   138a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   138a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   138a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   138ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   138b0:	bf88      	it	hi
   138b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   138b6:	d81e      	bhi.n	138f6 <__aeabi_dmul+0xde>
   138b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   138bc:	bf08      	it	eq
   138be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   138c2:	f150 0000 	adcs.w	r0, r0, #0
   138c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   138ca:	bd70      	pop	{r4, r5, r6, pc}
   138cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   138d0:	ea46 0101 	orr.w	r1, r6, r1
   138d4:	ea40 0002 	orr.w	r0, r0, r2
   138d8:	ea81 0103 	eor.w	r1, r1, r3
   138dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   138e0:	bfc2      	ittt	gt
   138e2:	ebd4 050c 	rsbsgt	r5, r4, ip
   138e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   138ea:	bd70      	popgt	{r4, r5, r6, pc}
   138ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   138f0:	f04f 0e00 	mov.w	lr, #0
   138f4:	3c01      	subs	r4, #1
   138f6:	f300 80ab 	bgt.w	13a50 <__aeabi_dmul+0x238>
   138fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
   138fe:	bfde      	ittt	le
   13900:	2000      	movle	r0, #0
   13902:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   13906:	bd70      	pople	{r4, r5, r6, pc}
   13908:	f1c4 0400 	rsb	r4, r4, #0
   1390c:	3c20      	subs	r4, #32
   1390e:	da35      	bge.n	1397c <__aeabi_dmul+0x164>
   13910:	340c      	adds	r4, #12
   13912:	dc1b      	bgt.n	1394c <__aeabi_dmul+0x134>
   13914:	f104 0414 	add.w	r4, r4, #20
   13918:	f1c4 0520 	rsb	r5, r4, #32
   1391c:	fa00 f305 	lsl.w	r3, r0, r5
   13920:	fa20 f004 	lsr.w	r0, r0, r4
   13924:	fa01 f205 	lsl.w	r2, r1, r5
   13928:	ea40 0002 	orr.w	r0, r0, r2
   1392c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   13930:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   13934:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   13938:	fa21 f604 	lsr.w	r6, r1, r4
   1393c:	eb42 0106 	adc.w	r1, r2, r6
   13940:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13944:	bf08      	it	eq
   13946:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1394a:	bd70      	pop	{r4, r5, r6, pc}
   1394c:	f1c4 040c 	rsb	r4, r4, #12
   13950:	f1c4 0520 	rsb	r5, r4, #32
   13954:	fa00 f304 	lsl.w	r3, r0, r4
   13958:	fa20 f005 	lsr.w	r0, r0, r5
   1395c:	fa01 f204 	lsl.w	r2, r1, r4
   13960:	ea40 0002 	orr.w	r0, r0, r2
   13964:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13968:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   1396c:	f141 0100 	adc.w	r1, r1, #0
   13970:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   13974:	bf08      	it	eq
   13976:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   1397a:	bd70      	pop	{r4, r5, r6, pc}
   1397c:	f1c4 0520 	rsb	r5, r4, #32
   13980:	fa00 f205 	lsl.w	r2, r0, r5
   13984:	ea4e 0e02 	orr.w	lr, lr, r2
   13988:	fa20 f304 	lsr.w	r3, r0, r4
   1398c:	fa01 f205 	lsl.w	r2, r1, r5
   13990:	ea43 0302 	orr.w	r3, r3, r2
   13994:	fa21 f004 	lsr.w	r0, r1, r4
   13998:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   1399c:	fa21 f204 	lsr.w	r2, r1, r4
   139a0:	ea20 0002 	bic.w	r0, r0, r2
   139a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   139a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   139ac:	bf08      	it	eq
   139ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   139b2:	bd70      	pop	{r4, r5, r6, pc}
   139b4:	f094 0f00 	teq	r4, #0
   139b8:	d10f      	bne.n	139da <__aeabi_dmul+0x1c2>
   139ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   139be:	0040      	lsls	r0, r0, #1
   139c0:	eb41 0101 	adc.w	r1, r1, r1
   139c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   139c8:	bf08      	it	eq
   139ca:	3c01      	subeq	r4, #1
   139cc:	d0f7      	beq.n	139be <__aeabi_dmul+0x1a6>
   139ce:	ea41 0106 	orr.w	r1, r1, r6
   139d2:	f095 0f00 	teq	r5, #0
   139d6:	bf18      	it	ne
   139d8:	4770      	bxne	lr
   139da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   139de:	0052      	lsls	r2, r2, #1
   139e0:	eb43 0303 	adc.w	r3, r3, r3
   139e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   139e8:	bf08      	it	eq
   139ea:	3d01      	subeq	r5, #1
   139ec:	d0f7      	beq.n	139de <__aeabi_dmul+0x1c6>
   139ee:	ea43 0306 	orr.w	r3, r3, r6
   139f2:	4770      	bx	lr
   139f4:	ea94 0f0c 	teq	r4, ip
   139f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   139fc:	bf18      	it	ne
   139fe:	ea95 0f0c 	teqne	r5, ip
   13a02:	d00c      	beq.n	13a1e <__aeabi_dmul+0x206>
   13a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13a08:	bf18      	it	ne
   13a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13a0e:	d1d1      	bne.n	139b4 <__aeabi_dmul+0x19c>
   13a10:	ea81 0103 	eor.w	r1, r1, r3
   13a14:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13a18:	f04f 0000 	mov.w	r0, #0
   13a1c:	bd70      	pop	{r4, r5, r6, pc}
   13a1e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13a22:	bf06      	itte	eq
   13a24:	4610      	moveq	r0, r2
   13a26:	4619      	moveq	r1, r3
   13a28:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13a2c:	d019      	beq.n	13a62 <__aeabi_dmul+0x24a>
   13a2e:	ea94 0f0c 	teq	r4, ip
   13a32:	d102      	bne.n	13a3a <__aeabi_dmul+0x222>
   13a34:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   13a38:	d113      	bne.n	13a62 <__aeabi_dmul+0x24a>
   13a3a:	ea95 0f0c 	teq	r5, ip
   13a3e:	d105      	bne.n	13a4c <__aeabi_dmul+0x234>
   13a40:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   13a44:	bf1c      	itt	ne
   13a46:	4610      	movne	r0, r2
   13a48:	4619      	movne	r1, r3
   13a4a:	d10a      	bne.n	13a62 <__aeabi_dmul+0x24a>
   13a4c:	ea81 0103 	eor.w	r1, r1, r3
   13a50:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   13a54:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13a58:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   13a5c:	f04f 0000 	mov.w	r0, #0
   13a60:	bd70      	pop	{r4, r5, r6, pc}
   13a62:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   13a66:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   13a6a:	bd70      	pop	{r4, r5, r6, pc}

00013a6c <__aeabi_ddiv>:
   13a6c:	b570      	push	{r4, r5, r6, lr}
   13a6e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   13a72:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   13a76:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   13a7a:	bf1d      	ittte	ne
   13a7c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   13a80:	ea94 0f0c 	teqne	r4, ip
   13a84:	ea95 0f0c 	teqne	r5, ip
   13a88:	f000 f8a7 	bleq	13bda <__aeabi_ddiv+0x16e>
   13a8c:	eba4 0405 	sub.w	r4, r4, r5
   13a90:	ea81 0e03 	eor.w	lr, r1, r3
   13a94:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13a98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   13a9c:	f000 8088 	beq.w	13bb0 <__aeabi_ddiv+0x144>
   13aa0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   13aa4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   13aa8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   13aac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   13ab0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   13ab4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   13ab8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   13abc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   13ac0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   13ac4:	429d      	cmp	r5, r3
   13ac6:	bf08      	it	eq
   13ac8:	4296      	cmpeq	r6, r2
   13aca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   13ace:	f504 7440 	add.w	r4, r4, #768	; 0x300
   13ad2:	d202      	bcs.n	13ada <__aeabi_ddiv+0x6e>
   13ad4:	085b      	lsrs	r3, r3, #1
   13ad6:	ea4f 0232 	mov.w	r2, r2, rrx
   13ada:	1ab6      	subs	r6, r6, r2
   13adc:	eb65 0503 	sbc.w	r5, r5, r3
   13ae0:	085b      	lsrs	r3, r3, #1
   13ae2:	ea4f 0232 	mov.w	r2, r2, rrx
   13ae6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   13aea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   13aee:	ebb6 0e02 	subs.w	lr, r6, r2
   13af2:	eb75 0e03 	sbcs.w	lr, r5, r3
   13af6:	bf22      	ittt	cs
   13af8:	1ab6      	subcs	r6, r6, r2
   13afa:	4675      	movcs	r5, lr
   13afc:	ea40 000c 	orrcs.w	r0, r0, ip
   13b00:	085b      	lsrs	r3, r3, #1
   13b02:	ea4f 0232 	mov.w	r2, r2, rrx
   13b06:	ebb6 0e02 	subs.w	lr, r6, r2
   13b0a:	eb75 0e03 	sbcs.w	lr, r5, r3
   13b0e:	bf22      	ittt	cs
   13b10:	1ab6      	subcs	r6, r6, r2
   13b12:	4675      	movcs	r5, lr
   13b14:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   13b18:	085b      	lsrs	r3, r3, #1
   13b1a:	ea4f 0232 	mov.w	r2, r2, rrx
   13b1e:	ebb6 0e02 	subs.w	lr, r6, r2
   13b22:	eb75 0e03 	sbcs.w	lr, r5, r3
   13b26:	bf22      	ittt	cs
   13b28:	1ab6      	subcs	r6, r6, r2
   13b2a:	4675      	movcs	r5, lr
   13b2c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   13b30:	085b      	lsrs	r3, r3, #1
   13b32:	ea4f 0232 	mov.w	r2, r2, rrx
   13b36:	ebb6 0e02 	subs.w	lr, r6, r2
   13b3a:	eb75 0e03 	sbcs.w	lr, r5, r3
   13b3e:	bf22      	ittt	cs
   13b40:	1ab6      	subcs	r6, r6, r2
   13b42:	4675      	movcs	r5, lr
   13b44:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   13b48:	ea55 0e06 	orrs.w	lr, r5, r6
   13b4c:	d018      	beq.n	13b80 <__aeabi_ddiv+0x114>
   13b4e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   13b52:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   13b56:	ea4f 1606 	mov.w	r6, r6, lsl #4
   13b5a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   13b5e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   13b62:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   13b66:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   13b6a:	d1c0      	bne.n	13aee <__aeabi_ddiv+0x82>
   13b6c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13b70:	d10b      	bne.n	13b8a <__aeabi_ddiv+0x11e>
   13b72:	ea41 0100 	orr.w	r1, r1, r0
   13b76:	f04f 0000 	mov.w	r0, #0
   13b7a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   13b7e:	e7b6      	b.n	13aee <__aeabi_ddiv+0x82>
   13b80:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   13b84:	bf04      	itt	eq
   13b86:	4301      	orreq	r1, r0
   13b88:	2000      	moveq	r0, #0
   13b8a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   13b8e:	bf88      	it	hi
   13b90:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   13b94:	f63f aeaf 	bhi.w	138f6 <__aeabi_dmul+0xde>
   13b98:	ebb5 0c03 	subs.w	ip, r5, r3
   13b9c:	bf04      	itt	eq
   13b9e:	ebb6 0c02 	subseq.w	ip, r6, r2
   13ba2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   13ba6:	f150 0000 	adcs.w	r0, r0, #0
   13baa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   13bae:	bd70      	pop	{r4, r5, r6, pc}
   13bb0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   13bb4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   13bb8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   13bbc:	bfc2      	ittt	gt
   13bbe:	ebd4 050c 	rsbsgt	r5, r4, ip
   13bc2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   13bc6:	bd70      	popgt	{r4, r5, r6, pc}
   13bc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   13bcc:	f04f 0e00 	mov.w	lr, #0
   13bd0:	3c01      	subs	r4, #1
   13bd2:	e690      	b.n	138f6 <__aeabi_dmul+0xde>
   13bd4:	ea45 0e06 	orr.w	lr, r5, r6
   13bd8:	e68d      	b.n	138f6 <__aeabi_dmul+0xde>
   13bda:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   13bde:	ea94 0f0c 	teq	r4, ip
   13be2:	bf08      	it	eq
   13be4:	ea95 0f0c 	teqeq	r5, ip
   13be8:	f43f af3b 	beq.w	13a62 <__aeabi_dmul+0x24a>
   13bec:	ea94 0f0c 	teq	r4, ip
   13bf0:	d10a      	bne.n	13c08 <__aeabi_ddiv+0x19c>
   13bf2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   13bf6:	f47f af34 	bne.w	13a62 <__aeabi_dmul+0x24a>
   13bfa:	ea95 0f0c 	teq	r5, ip
   13bfe:	f47f af25 	bne.w	13a4c <__aeabi_dmul+0x234>
   13c02:	4610      	mov	r0, r2
   13c04:	4619      	mov	r1, r3
   13c06:	e72c      	b.n	13a62 <__aeabi_dmul+0x24a>
   13c08:	ea95 0f0c 	teq	r5, ip
   13c0c:	d106      	bne.n	13c1c <__aeabi_ddiv+0x1b0>
   13c0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   13c12:	f43f aefd 	beq.w	13a10 <__aeabi_dmul+0x1f8>
   13c16:	4610      	mov	r0, r2
   13c18:	4619      	mov	r1, r3
   13c1a:	e722      	b.n	13a62 <__aeabi_dmul+0x24a>
   13c1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   13c20:	bf18      	it	ne
   13c22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   13c26:	f47f aec5 	bne.w	139b4 <__aeabi_dmul+0x19c>
   13c2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   13c2e:	f47f af0d 	bne.w	13a4c <__aeabi_dmul+0x234>
   13c32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   13c36:	f47f aeeb 	bne.w	13a10 <__aeabi_dmul+0x1f8>
   13c3a:	e712      	b.n	13a62 <__aeabi_dmul+0x24a>

00013c3c <__aeabi_d2iz>:
   13c3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   13c40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   13c44:	d215      	bcs.n	13c72 <__aeabi_d2iz+0x36>
   13c46:	d511      	bpl.n	13c6c <__aeabi_d2iz+0x30>
   13c48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   13c4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   13c50:	d912      	bls.n	13c78 <__aeabi_d2iz+0x3c>
   13c52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   13c56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   13c5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   13c5e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   13c62:	fa23 f002 	lsr.w	r0, r3, r2
   13c66:	bf18      	it	ne
   13c68:	4240      	negne	r0, r0
   13c6a:	4770      	bx	lr
   13c6c:	f04f 0000 	mov.w	r0, #0
   13c70:	4770      	bx	lr
   13c72:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   13c76:	d105      	bne.n	13c84 <__aeabi_d2iz+0x48>
   13c78:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   13c7c:	bf08      	it	eq
   13c7e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   13c82:	4770      	bx	lr
   13c84:	f04f 0000 	mov.w	r0, #0
   13c88:	4770      	bx	lr
   13c8a:	bf00      	nop
   13c8c:	6f4d      	ldr	r5, [r1, #116]	; 0x74
   13c8e:	7564      	strb	r4, [r4, #21]
   13c90:	656c      	str	r4, [r5, #84]	; 0x54
   13c92:	0000      	movs	r0, r0
   13c94:	6f43      	ldr	r3, [r0, #116]	; 0x74
   13c96:	6e75      	ldr	r5, [r6, #100]	; 0x64
   13c98:	6574      	str	r4, [r6, #84]	; 0x54
   13c9a:	2072      	movs	r0, #114	; 0x72
   13c9c:	6954      	ldr	r4, [r2, #20]
   13c9e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
   13ca0:	4320      	orrs	r0, r4
   13ca2:	6e61      	ldr	r1, [r4, #100]	; 0x64
   13ca4:	4520      	cmp	r0, r4
   13ca6:	7272      	strb	r2, [r6, #9]
   13ca8:	726f      	strb	r7, [r5, #9]
   13caa:	3a20      	subs	r2, #32
   13cac:	0020      	movs	r0, r4
   13cae:	ffff 6f4d 	vqrdmlsh.s<illegal width 64>	q11, <illegal reg q7.5>, d13[0]
   13cb2:	7564      	.short	0x7564
   13cb4:	0020656c 	.word	0x0020656c
   13cb8:	00207c20 	.word	0x00207c20
   13cbc:	54207c20 	.word	0x54207c20
   13cc0:	20706d65 	.word	0x20706d65
   13cc4:	6e756f46 	.word	0x6e756f46
   13cc8:	00000064 	.word	0x00000064
   13ccc:	5420207c 	.word	0x5420207c
   13cd0:	20706d65 	.word	0x20706d65
   13cd4:	6e756f46 	.word	0x6e756f46
   13cd8:	ffff0064 	.word	0xffff0064
   13cdc:	ffff002c 	.word	0xffff002c
   13ce0:	75646f4d 	.word	0x75646f4d
   13ce4:	2520656c 	.word	0x2520656c
   13ce8:	78652069 	.word	0x78652069
   13cec:	73747369 	.word	0x73747369
   13cf0:	6552202e 	.word	0x6552202e
   13cf4:	6e696461 	.word	0x6e696461
   13cf8:	6f762067 	.word	0x6f762067
   13cfc:	6761746c 	.word	0x6761746c
   13d00:	6e612065 	.word	0x6e612065
   13d04:	65742064 	.word	0x65742064
   13d08:	7265706d 	.word	0x7265706d
   13d0c:	72757461 	.word	0x72757461
   13d10:	61762065 	.word	0x61762065
   13d14:	7365756c 	.word	0x7365756c
   13d18:	00000000 	.word	0x00000000
   13d1c:	75646f4d 	.word	0x75646f4d
   13d20:	7620656c 	.word	0x7620656c
   13d24:	61746c6f 	.word	0x61746c6f
   13d28:	203a6567 	.word	0x203a6567
   13d2c:	00006625 	.word	0x00006625
   13d30:	65776f4c 	.word	0x65776f4c
   13d34:	43207473 	.word	0x43207473
   13d38:	206c6c65 	.word	0x206c6c65
   13d3c:	25203a56 	.word	0x25203a56
   13d40:	20202066 	.word	0x20202066
   13d44:	69482020 	.word	0x69482020
   13d48:	73656867 	.word	0x73656867
   13d4c:	65432074 	.word	0x65432074
   13d50:	56206c6c 	.word	0x56206c6c
   13d54:	6625203a 	.word	0x6625203a
   13d58:	00000000 	.word	0x00000000
   13d5c:	706d6554 	.word	0x706d6554
   13d60:	25203a31 	.word	0x25203a31
   13d64:	20202066 	.word	0x20202066
   13d68:	20202020 	.word	0x20202020
   13d6c:	706d6554 	.word	0x706d6554
   13d70:	25203a32 	.word	0x25203a32
   13d74:	00000066 	.word	0x00000066
   13d78:	20656e4f 	.word	0x20656e4f
   13d7c:	6d20726f 	.word	0x6d20726f
   13d80:	2065726f 	.word	0x2065726f
   13d84:	20534d42 	.word	0x20534d42
   13d88:	75646f6d 	.word	0x75646f6d
   13d8c:	2073656c 	.word	0x2073656c
   13d90:	65766168 	.word	0x65766168
   13d94:	746e6520 	.word	0x746e6520
   13d98:	64657265 	.word	0x64657265
   13d9c:	65687420 	.word	0x65687420
   13da0:	75616620 	.word	0x75616620
   13da4:	7320746c 	.word	0x7320746c
   13da8:	65746174 	.word	0x65746174
   13dac:	00000021 	.word	0x00000021
   13db0:	206c6c41 	.word	0x206c6c41
   13db4:	75646f6d 	.word	0x75646f6d
   13db8:	2073656c 	.word	0x2073656c
   13dbc:	65766168 	.word	0x65766168
   13dc0:	69786520 	.word	0x69786520
   13dc4:	20646574 	.word	0x20646574
   13dc8:	61662061 	.word	0x61662061
   13dcc:	65746c75 	.word	0x65746c75
   13dd0:	74732064 	.word	0x74732064
   13dd4:	00657461 	.word	0x00657461
   13dd8:	75646f4d 	.word	0x75646f4d
   13ddc:	3a73656c 	.word	0x3a73656c
   13de0:	20692520 	.word	0x20692520
   13de4:	6c654320 	.word	0x6c654320
   13de8:	203a736c 	.word	0x203a736c
   13dec:	20206925 	.word	0x20206925
   13df0:	746c6f56 	.word	0x746c6f56
   13df4:	3a656761 	.word	0x3a656761
   13df8:	56662520 	.word	0x56662520
   13dfc:	41202020 	.word	0x41202020
   13e00:	43206776 	.word	0x43206776
   13e04:	206c6c65 	.word	0x206c6c65
   13e08:	746c6f56 	.word	0x746c6f56
   13e0c:	3a656761 	.word	0x3a656761
   13e10:	56662520 	.word	0x56662520
   13e14:	20202020 	.word	0x20202020
   13e18:	67764120 	.word	0x67764120
   13e1c:	6d655420 	.word	0x6d655420
   13e20:	25203a70 	.word	0x25203a70
   13e24:	00204366 	.word	0x00204366
   13e28:	20202020 	.word	0x20202020
   13e2c:	20202020 	.word	0x20202020
   13e30:	20202020 	.word	0x20202020
   13e34:	20202020 	.word	0x20202020
   13e38:	20202020 	.word	0x20202020
   13e3c:	20202020 	.word	0x20202020
   13e40:	20202020 	.word	0x20202020
   13e44:	4d202020 	.word	0x4d202020
   13e48:	6c75646f 	.word	0x6c75646f
   13e4c:	25232065 	.word	0x25232065
   13e50:	00000069 	.word	0x00000069
   13e54:	6f562020 	.word	0x6f562020
   13e58:	6761746c 	.word	0x6761746c
   13e5c:	25203a65 	.word	0x25203a65
   13e60:	20205666 	.word	0x20205666
   13e64:	66252820 	.word	0x66252820
   13e68:	66252d56 	.word	0x66252d56
   13e6c:	20202956 	.word	0x20202956
   13e70:	54202020 	.word	0x54202020
   13e74:	65706d65 	.word	0x65706d65
   13e78:	75746172 	.word	0x75746172
   13e7c:	3a736572 	.word	0x3a736572
   13e80:	66252820 	.word	0x66252820
   13e84:	66252d43 	.word	0x66252d43
   13e88:	00002943 	.word	0x00002943
   13e8c:	4f4d2020 	.word	0x4f4d2020
   13e90:	454c5544 	.word	0x454c5544
   13e94:	20534920 	.word	0x20534920
   13e98:	4c554146 	.word	0x4c554146
   13e9c:	3a444554 	.word	0x3a444554
   13ea0:	00000000 	.word	0x00000000
   13ea4:	20202020 	.word	0x20202020
   13ea8:	7265764f 	.word	0x7265764f
   13eac:	746c6f76 	.word	0x746c6f76
   13eb0:	20656761 	.word	0x20656761
   13eb4:	6c6c6543 	.word	0x6c6c6543
   13eb8:	6d754e20 	.word	0x6d754e20
   13ebc:	73726562 	.word	0x73726562
   13ec0:	2d312820 	.word	0x2d312820
   13ec4:	203a2936 	.word	0x203a2936
   13ec8:	00000000 	.word	0x00000000
   13ecc:	20202020 	.word	0x20202020
   13ed0:	65646e55 	.word	0x65646e55
   13ed4:	6c6f7672 	.word	0x6c6f7672
   13ed8:	65676174 	.word	0x65676174
   13edc:	6c654320 	.word	0x6c654320
   13ee0:	754e206c 	.word	0x754e206c
   13ee4:	7265626d 	.word	0x7265626d
   13ee8:	31282073 	.word	0x31282073
   13eec:	3a29362d 	.word	0x3a29362d
   13ef0:	00000020 	.word	0x00000020
   13ef4:	20202020 	.word	0x20202020
   13ef8:	20435243 	.word	0x20435243
   13efc:	6f727265 	.word	0x6f727265
   13f00:	6e692072 	.word	0x6e692072
   13f04:	63657220 	.word	0x63657220
   13f08:	65766965 	.word	0x65766965
   13f0c:	61702064 	.word	0x61702064
   13f10:	74656b63 	.word	0x74656b63
   13f14:	00000000 	.word	0x00000000
   13f18:	20202020 	.word	0x20202020
   13f1c:	65776f50 	.word	0x65776f50
   13f20:	6e6f2072 	.word	0x6e6f2072
   13f24:	73657220 	.word	0x73657220
   13f28:	68207465 	.word	0x68207465
   13f2c:	6f207361 	.word	0x6f207361
   13f30:	72756363 	.word	0x72756363
   13f34:	00646572 	.word	0x00646572
   13f38:	20202020 	.word	0x20202020
   13f3c:	74736554 	.word	0x74736554
   13f40:	75616620 	.word	0x75616620
   13f44:	6120746c 	.word	0x6120746c
   13f48:	76697463 	.word	0x76697463
   13f4c:	00000065 	.word	0x00000065
   13f50:	20202020 	.word	0x20202020
   13f54:	65746e49 	.word	0x65746e49
   13f58:	6c616e72 	.word	0x6c616e72
   13f5c:	67657220 	.word	0x67657220
   13f60:	65747369 	.word	0x65747369
   13f64:	69207372 	.word	0x69207372
   13f68:	6e6f636e 	.word	0x6e6f636e
   13f6c:	74736973 	.word	0x74736973
   13f70:	00746e65 	.word	0x00746e65
   13f74:	4f4d2020 	.word	0x4f4d2020
   13f78:	454c5544 	.word	0x454c5544
   13f7c:	53414820 	.word	0x53414820
   13f80:	454c4120 	.word	0x454c4120
   13f84:	3a535452 	.word	0x3a535452
   13f88:	00000000 	.word	0x00000000
   13f8c:	20202020 	.word	0x20202020
   13f90:	7265764f 	.word	0x7265764f
   13f94:	6d657420 	.word	0x6d657420
   13f98:	61726570 	.word	0x61726570
   13f9c:	65727574 	.word	0x65727574
   13fa0:	206e6f20 	.word	0x206e6f20
   13fa4:	00315354 	.word	0x00315354
   13fa8:	20202020 	.word	0x20202020
   13fac:	7265764f 	.word	0x7265764f
   13fb0:	6d657420 	.word	0x6d657420
   13fb4:	61726570 	.word	0x61726570
   13fb8:	65727574 	.word	0x65727574
   13fbc:	206e6f20 	.word	0x206e6f20
   13fc0:	00325354 	.word	0x00325354
   13fc4:	20202020 	.word	0x20202020
   13fc8:	65656c53 	.word	0x65656c53
   13fcc:	6f6d2070 	.word	0x6f6d2070
   13fd0:	61206564 	.word	0x61206564
   13fd4:	76697463 	.word	0x76697463
   13fd8:	00000065 	.word	0x00000065
   13fdc:	20202020 	.word	0x20202020
   13fe0:	72656854 	.word	0x72656854
   13fe4:	206c616d 	.word	0x206c616d
   13fe8:	74756873 	.word	0x74756873
   13fec:	6e776f64 	.word	0x6e776f64
   13ff0:	74636120 	.word	0x74636120
   13ff4:	00657669 	.word	0x00657669
   13ff8:	20202020 	.word	0x20202020
   13ffc:	74736554 	.word	0x74736554
   14000:	656c4120 	.word	0x656c4120
   14004:	00007472 	.word	0x00007472
   14008:	20202020 	.word	0x20202020
   1400c:	2050544f 	.word	0x2050544f
   14010:	4f525045 	.word	0x4f525045
   14014:	6e55204d 	.word	0x6e55204d
   14018:	72726f63 	.word	0x72726f63
   1401c:	61746365 	.word	0x61746365
   14020:	20656c62 	.word	0x20656c62
   14024:	6f727245 	.word	0x6f727245
   14028:	00000072 	.word	0x00000072
   1402c:	20202020 	.word	0x20202020
   14030:	554f5247 	.word	0x554f5247
   14034:	52203350 	.word	0x52203350
   14038:	20736765 	.word	0x20736765
   1403c:	61766e49 	.word	0x61766e49
   14040:	0064696c 	.word	0x0064696c
   14044:	20202020 	.word	0x20202020
   14048:	72646441 	.word	0x72646441
   1404c:	20737365 	.word	0x20737365
   14050:	20746f6e 	.word	0x20746f6e
   14054:	69676572 	.word	0x69676572
   14058:	72657473 	.word	0x72657473
   1405c:	ff006465 	.word	0xff006465
   14060:	75646f4d 	.word	0x75646f4d
   14064:	3a73656c 	.word	0x3a73656c
   14068:	20692520 	.word	0x20692520
   1406c:	6c6c6543 	.word	0x6c6c6543
   14070:	25203a73 	.word	0x25203a73
   14074:	74532069 	.word	0x74532069
   14078:	676e6972 	.word	0x676e6972
   1407c:	25203a73 	.word	0x25203a73
   14080:	56202069 	.word	0x56202069
   14084:	61746c6f 	.word	0x61746c6f
   14088:	203a6567 	.word	0x203a6567
   1408c:	20566625 	.word	0x20566625
   14090:	76412020 	.word	0x76412020
   14094:	65432067 	.word	0x65432067
   14098:	56206c6c 	.word	0x56206c6c
   1409c:	61746c6f 	.word	0x61746c6f
   140a0:	203a6567 	.word	0x203a6567
   140a4:	20566625 	.word	0x20566625
   140a8:	776f4c20 	.word	0x776f4c20
   140ac:	6c654320 	.word	0x6c654320
   140b0:	6f56206c 	.word	0x6f56206c
   140b4:	6761746c 	.word	0x6761746c
   140b8:	25203a65 	.word	0x25203a65
   140bc:	20205666 	.word	0x20205666
   140c0:	67694820 	.word	0x67694820
   140c4:	65432068 	.word	0x65432068
   140c8:	56206c6c 	.word	0x56206c6c
   140cc:	61746c6f 	.word	0x61746c6f
   140d0:	203a6567 	.word	0x203a6567
   140d4:	20566625 	.word	0x20566625
   140d8:	746c6544 	.word	0x746c6544
   140dc:	6f562061 	.word	0x6f562061
   140e0:	6761746c 	.word	0x6761746c
   140e4:	25203a65 	.word	0x25203a65
   140e8:	20566d7a 	.word	0x20566d7a
   140ec:	76412020 	.word	0x76412020
   140f0:	65542067 	.word	0x65542067
   140f4:	203a706d 	.word	0x203a706d
   140f8:	20436625 	.word	0x20436625
   140fc:	00000000 	.word	0x00000000
   14100:	75646f4d 	.word	0x75646f4d
   14104:	2320656c 	.word	0x2320656c
   14108:	00000000 	.word	0x00000000
   1410c:	00000056 	.word	0x00000056
   14110:	65432020 	.word	0x65432020
   14114:	00006c6c 	.word	0x00006c6c
   14118:	6d655420 	.word	0x6d655420
   1411c:	3a312070 	.word	0x3a312070
   14120:	00000020 	.word	0x00000020
   14124:	65542043 	.word	0x65542043
   14128:	3220706d 	.word	0x3220706d
   1412c:	0000203a 	.word	0x0000203a
   14130:	65542043 	.word	0x65542043
   14134:	3320706d 	.word	0x3320706d
   14138:	0000203a 	.word	0x0000203a
   1413c:	207c2043 	.word	0x207c2043
   14140:	206c6142 	.word	0x206c6142
   14144:	74617453 	.word	0x74617453
   14148:	ff00203a 	.word	0xff00203a
   1414c:	00007830 	.word	0x00007830
   14150:	00006230 	.word	0x00006230
   14154:	00000054 	.word	0x00000054
   14158:	00000046 	.word	0x00000046
   1415c:	45555254 	.word	0x45555254
   14160:	00000000 	.word	0x00000000
   14164:	534c4146 	.word	0x534c4146
   14168:	ffff0045 	.word	0xffff0045
   1416c:	00202d20 	.word	0x00202d20
   14170:	55424544 	.word	0x55424544
   14174:	00000047 	.word	0x00000047
   14178:	4f464e49 	.word	0x4f464e49
   1417c:	00000000 	.word	0x00000000
   14180:	4e524157 	.word	0x4e524157
   14184:	00474e49 	.word	0x00474e49
   14188:	4f525245 	.word	0x4f525245
   1418c:	ffff0052 	.word	0xffff0052
   14190:	65736552 	.word	0x65736552
   14194:	6e697474 	.word	0x6e697474
   14198:	6f742067 	.word	0x6f742067
   1419c:	63616620 	.word	0x63616620
   141a0:	79726f74 	.word	0x79726f74
   141a4:	66656420 	.word	0x66656420
   141a8:	746c7561 	.word	0x746c7561
   141ac:	ffff0073 	.word	0xffff0073
   141b0:	20434f53 	.word	0x20434f53
   141b4:	0000203a 	.word	0x0000203a
   141b8:	75662020 	.word	0x75662020
   141bc:	70206c65 	.word	0x70206c65
   141c0:	3a206d77 	.word	0x3a206d77
   141c4:	ffff0020 	.word	0xffff0020
   141c8:	20534d42 	.word	0x20534d42
   141cc:	74617453 	.word	0x74617453
   141d0:	3a207375 	.word	0x3a207375
   141d4:	00000020 	.word	0x00000020
   141d8:	20535345 	.word	0x20535345
   141dc:	65646f4d 	.word	0x65646f4d
   141e0:	00000020 	.word	0x00000020
   141e4:	6e55203a 	.word	0x6e55203a
   141e8:	56726564 	.word	0x56726564
   141ec:	61746c6f 	.word	0x61746c6f
   141f0:	00206567 	.word	0x00206567
   141f4:	764f203a 	.word	0x764f203a
   141f8:	6f567265 	.word	0x6f567265
   141fc:	6761746c 	.word	0x6761746c
   14200:	00002065 	.word	0x00002065
   14204:	6543203a 	.word	0x6543203a
   14208:	49206c6c 	.word	0x49206c6c
   1420c:	6c61626d 	.word	0x6c61626d
   14210:	65636e61 	.word	0x65636e61
   14214:	00000020 	.word	0x00000020
   14218:	764f203a 	.word	0x764f203a
   1421c:	54207265 	.word	0x54207265
   14220:	20706d65 	.word	0x20706d65
   14224:	00000000 	.word	0x00000000
   14228:	6e55203a 	.word	0x6e55203a
   1422c:	20726564 	.word	0x20726564
   14230:	706d6554 	.word	0x706d6554
   14234:	00000020 	.word	0x00000020
   14238:	764f203a 	.word	0x764f203a
   1423c:	6f567265 	.word	0x6f567265
   14240:	6761746c 	.word	0x6761746c
   14244:	74532065 	.word	0x74532065
   14248:	6761726f 	.word	0x6761726f
   1424c:	00002065 	.word	0x00002065
   14250:	4e55203a 	.word	0x4e55203a
   14254:	70706168 	.word	0x70706168
   14258:	00003a79 	.word	0x00003a79
   1425c:	6148203a 	.word	0x6148203a
   14260:	20797070 	.word	0x20797070
   14264:	00000000 	.word	0x00000000
   14268:	53727245 	.word	0x53727245
   1426c:	00203a74 	.word	0x00203a74
   14270:	6f6f4220 	.word	0x6f6f4220
   14274:	00002074 	.word	0x00002074
   14278:	61655220 	.word	0x61655220
   1427c:	00207964 	.word	0x00207964
   14280:	65725020 	.word	0x65725020
   14284:	72616863 	.word	0x72616863
   14288:	00206567 	.word	0x00206567
   1428c:	69724420 	.word	0x69724420
   14290:	00206576 	.word	0x00206576
   14294:	61684320 	.word	0x61684320
   14298:	20656772 	.word	0x20656772
   1429c:	00000000 	.word	0x00000000
   142a0:	72724520 	.word	0x72724520
   142a4:	0020726f 	.word	0x0020726f
   142a8:	4341207c 	.word	0x4341207c
   142ac:	65725020 	.word	0x65725020
   142b0:	746e6573 	.word	0x746e6573
   142b4:	00007c20 	.word	0x00007c20
   142b8:	654b207c 	.word	0x654b207c
   142bc:	4e4f2079 	.word	0x4e4f2079
   142c0:	00007c20 	.word	0x00007c20
   142c4:	6c61427c 	.word	0x6c61427c
   142c8:	69636e61 	.word	0x69636e61
   142cc:	4120676e 	.word	0x4120676e
   142d0:	76697463 	.word	0x76697463
   142d4:	00000065 	.word	0x00000065
   142d8:	3a74754f 	.word	0x3a74754f
   142dc:	00000000 	.word	0x00000000
   142e0:	6e6f4320 	.word	0x6e6f4320
   142e4:	00003a74 	.word	0x00003a74
   142e8:	00000031 	.word	0x00000031
   142ec:	00000030 	.word	0x00000030
   142f0:	3a6e4920 	.word	0x3a6e4920
   142f4:	ffffff00 	.word	0xffffff00
   142f8:	20776f4c 	.word	0x20776f4c
   142fc:	676e6152 	.word	0x676e6152
   14300:	00203a65 	.word	0x00203a65
   14304:	676e6953 	.word	0x676e6953
   14308:	4920656c 	.word	0x4920656c
   1430c:	00203a6e 	.word	0x00203a6e
   14310:	756c6156 	.word	0x756c6156
   14314:	44412065 	.word	0x44412065
   14318:	203a3043 	.word	0x203a3043
   1431c:	00000000 	.word	0x00000000
   14320:	00416d20 	.word	0x00416d20
   14324:	68676948 	.word	0x68676948
   14328:	6e615220 	.word	0x6e615220
   1432c:	203a6567 	.word	0x203a6567
   14330:	00000000 	.word	0x00000000
   14334:	0000416d 	.word	0x0000416d
   14338:	2020416d 	.word	0x2020416d
   1433c:	ffffff00 	.word	0xffffff00
   14340:	2f2f2f2f 	.word	0x2f2f2f2f
   14344:	2f2f2f2f 	.word	0x2f2f2f2f
   14348:	2f2f2f2f 	.word	0x2f2f2f2f
   1434c:	2f2f2f2f 	.word	0x2f2f2f2f
   14350:	2f2f2f2f 	.word	0x2f2f2f2f
   14354:	2f2f2f2f 	.word	0x2f2f2f2f
   14358:	2f2f2f2f 	.word	0x2f2f2f2f
   1435c:	2f2f2f2f 	.word	0x2f2f2f2f
   14360:	2f2f2f2f 	.word	0x2f2f2f2f
   14364:	2f2f2f2f 	.word	0x2f2f2f2f
   14368:	434f5320 	.word	0x434f5320
   1436c:	54455320 	.word	0x54455320
   14370:	2f2f2f20 	.word	0x2f2f2f20
   14374:	2f2f2f2f 	.word	0x2f2f2f2f
   14378:	2f2f2f2f 	.word	0x2f2f2f2f
   1437c:	2f2f2f2f 	.word	0x2f2f2f2f
   14380:	2f2f2f2f 	.word	0x2f2f2f2f
   14384:	2f2f2f2f 	.word	0x2f2f2f2f
   14388:	2f2f2f2f 	.word	0x2f2f2f2f
   1438c:	2f2f2f2f 	.word	0x2f2f2f2f
   14390:	2f2f2f2f 	.word	0x2f2f2f2f
   14394:	2f2f2f2f 	.word	0x2f2f2f2f
   14398:	0000002f 	.word	0x0000002f
   1439c:	20776f4c 	.word	0x20776f4c
   143a0:	676e6152 	.word	0x676e6152
   143a4:	00002065 	.word	0x00002065
   143a8:	68676948 	.word	0x68676948
   143ac:	6e615220 	.word	0x6e615220
   143b0:	00006567 	.word	0x00006567
   143b4:	6c616e41 	.word	0x6c616e41
   143b8:	6575676f 	.word	0x6575676f
   143bc:	6e695320 	.word	0x6e695320
   143c0:	20656c67 	.word	0x20656c67
   143c4:	00000000 	.word	0x00000000
   143c8:	624e4143 	.word	0x624e4143
   143cc:	00207375 	.word	0x00207375
   143d0:	4f532025 	.word	0x4f532025
   143d4:	00002043 	.word	0x00002043
   143d8:	0068416d 	.word	0x0068416d
   143dc:	6c6c7570 	.word	0x6c6c7570
   143e0:	206e6920 	.word	0x206e6920
   143e4:	3654554f 	.word	0x3654554f
   143e8:	00000000 	.word	0x00000000
   143ec:	6c6c7570 	.word	0x6c6c7570
   143f0:	206e6920 	.word	0x206e6920
   143f4:	3754554f 	.word	0x3754554f
   143f8:	ffffff00 	.word	0xffffff00
   143fc:	6c614320 	.word	0x6c614320
   14400:	61726269 	.word	0x61726269
   14404:	676e6974 	.word	0x676e6974
   14408:	72754320 	.word	0x72754320
   1440c:	746e6572 	.word	0x746e6572
   14410:	66664f20 	.word	0x66664f20
   14414:	20746573 	.word	0x20746573
   14418:	3a3a3a3a 	.word	0x3a3a3a3a
   1441c:	0000203a 	.word	0x0000203a
   14420:	0000002e 	.word	0x0000002e
   14424:	72756320 	.word	0x72756320
   14428:	746e6572 	.word	0x746e6572
   1442c:	66666f20 	.word	0x66666f20
   14430:	20746573 	.word	0x20746573
   14434:	61632031 	.word	0x61632031
   14438:	7262696c 	.word	0x7262696c
   1443c:	64657461 	.word	0x64657461
   14440:	00000020 	.word	0x00000020
   14444:	72756320 	.word	0x72756320
   14448:	746e6572 	.word	0x746e6572
   1444c:	66666f20 	.word	0x66666f20
   14450:	20746573 	.word	0x20746573
   14454:	61632032 	.word	0x61632032
   14458:	7262696c 	.word	0x7262696c
   1445c:	64657461 	.word	0x64657461
   14460:	ffff0020 	.word	0xffff0020
   14464:	ffff0050 	.word	0xffff0050
   14468:	646f4320 	.word	0x646f4320
   1446c:	53206465 	.word	0x53206465
   14470:	69747465 	.word	0x69747465
   14474:	2073676e 	.word	0x2073676e
   14478:	64616f4c 	.word	0x64616f4c
   1447c:	00206465 	.word	0x00206465
   14480:	68416d20 	.word	0x68416d20
   14484:	73655220 	.word	0x73655220
   14488:	00207465 	.word	0x00207465
   1448c:	202d2031 	.word	0x202d2031
   14490:	706d6554 	.word	0x706d6554
   14494:	6e655320 	.word	0x6e655320
   14498:	20726f73 	.word	0x20726f73
   1449c:	74746553 	.word	0x74746553
   144a0:	3a676e69 	.word	0x3a676e69
   144a4:	00000000 	.word	0x00000000
   144a8:	202d2032 	.word	0x202d2032
   144ac:	746c6f56 	.word	0x746c6f56
   144b0:	20656761 	.word	0x20656761
   144b4:	65646e55 	.word	0x65646e55
   144b8:	68572072 	.word	0x68572072
   144bc:	20686369 	.word	0x20686369
   144c0:	49206f54 	.word	0x49206f54
   144c4:	726f6e67 	.word	0x726f6e67
   144c8:	65432065 	.word	0x65432065
   144cc:	3a736c6c 	.word	0x3a736c6c
   144d0:	00000000 	.word	0x00000000
   144d4:	0000566d 	.word	0x0000566d
   144d8:	202d2071 	.word	0x202d2071
   144dc:	62206f47 	.word	0x62206f47
   144e0:	206b6361 	.word	0x206b6361
   144e4:	6d206f74 	.word	0x6d206f74
   144e8:	00756e65 	.word	0x00756e65
   144ec:	202d2031 	.word	0x202d2031
   144f0:	6c6c6543 	.word	0x6c6c6543
   144f4:	61684320 	.word	0x61684320
   144f8:	20656772 	.word	0x20656772
   144fc:	746c6f56 	.word	0x746c6f56
   14500:	20656761 	.word	0x20656761
   14504:	696d694c 	.word	0x696d694c
   14508:	65532074 	.word	0x65532074
   1450c:	696f7074 	.word	0x696f7074
   14510:	203a746e 	.word	0x203a746e
   14514:	00000000 	.word	0x00000000
   14518:	202d2032 	.word	0x202d2032
   1451c:	72616843 	.word	0x72616843
   14520:	48206567 	.word	0x48206567
   14524:	65747379 	.word	0x65747379
   14528:	73697372 	.word	0x73697372
   1452c:	0000203a 	.word	0x0000203a
   14530:	202d2033 	.word	0x202d2033
   14534:	6b636150 	.word	0x6b636150
   14538:	78614d20 	.word	0x78614d20
   1453c:	61684320 	.word	0x61684320
   14540:	20656772 	.word	0x20656772
   14544:	72727543 	.word	0x72727543
   14548:	3a746e65 	.word	0x3a746e65
   1454c:	00000020 	.word	0x00000020
   14550:	50202d34 	.word	0x50202d34
   14554:	206b6361 	.word	0x206b6361
   14558:	20646e45 	.word	0x20646e45
   1455c:	4320666f 	.word	0x4320666f
   14560:	67726168 	.word	0x67726168
   14564:	75432065 	.word	0x75432065
   14568:	6e657272 	.word	0x6e657272
   1456c:	00203a74 	.word	0x00203a74
   14570:	43202d35 	.word	0x43202d35
   14574:	67726168 	.word	0x67726168
   14578:	54207265 	.word	0x54207265
   1457c:	3a657079 	.word	0x3a657079
   14580:	00000020 	.word	0x00000020
   14584:	616c6552 	.word	0x616c6552
   14588:	6f432079 	.word	0x6f432079
   1458c:	6f72746e 	.word	0x6f72746e
   14590:	0000006c 	.word	0x0000006c
   14594:	73757242 	.word	0x73757242
   14598:	4c4e2061 	.word	0x4c4e2061
   1459c:	78783547 	.word	0x78783547
   145a0:	00000000 	.word	0x00000000
   145a4:	746c6f56 	.word	0x746c6f56
   145a8:	61684320 	.word	0x61684320
   145ac:	72656772 	.word	0x72656772
   145b0:	00000000 	.word	0x00000000
   145b4:	65746c45 	.word	0x65746c45
   145b8:	6843206b 	.word	0x6843206b
   145bc:	65677261 	.word	0x65677261
   145c0:	00000072 	.word	0x00000072
   145c4:	6f636c45 	.word	0x6f636c45
   145c8:	6843206e 	.word	0x6843206e
   145cc:	65677261 	.word	0x65677261
   145d0:	00000072 	.word	0x00000072
   145d4:	74636956 	.word	0x74636956
   145d8:	2f6e6f72 	.word	0x2f6e6f72
   145dc:	00414d53 	.word	0x00414d53
   145e0:	61646f43 	.word	0x61646f43
   145e4:	00000000 	.word	0x00000000
   145e8:	6f6c7950 	.word	0x6f6c7950
   145ec:	202d206e 	.word	0x202d206e
   145f0:	54534554 	.word	0x54534554
   145f4:	20474e49 	.word	0x20474e49
   145f8:	594c4e4f 	.word	0x594c4e4f
   145fc:	00000000 	.word	0x00000000
   14600:	6c74754f 	.word	0x6c74754f
   14604:	65646e61 	.word	0x65646e61
   14608:	68432072 	.word	0x68432072
   1460c:	65677261 	.word	0x65677261
   14610:	00000072 	.word	0x00000072
   14614:	43202d36 	.word	0x43202d36
   14618:	67726168 	.word	0x67726168
   1461c:	43207265 	.word	0x43207265
   14620:	4d206e61 	.word	0x4d206e61
   14624:	53206773 	.word	0x53206773
   14628:	203a6470 	.word	0x203a6470
   1462c:	00000000 	.word	0x00000000
   14630:	0000536d 	.word	0x0000536d
   14634:	202d2037 	.word	0x202d2037
   14638:	72616843 	.word	0x72616843
   1463c:	20726567 	.word	0x20726567
   14640:	43205648 	.word	0x43205648
   14644:	656e6e6f 	.word	0x656e6e6f
   14648:	6f697463 	.word	0x6f697463
   1464c:	00203a6e 	.word	0x00203a6e
   14650:	68654220 	.word	0x68654220
   14654:	20646e69 	.word	0x20646e69
   14658:	746e6f43 	.word	0x746e6f43
   1465c:	6f746361 	.word	0x6f746361
   14660:	00007372 	.word	0x00007372
   14664:	65726944 	.word	0x65726944
   14668:	54207463 	.word	0x54207463
   1466c:	6142206f 	.word	0x6142206f
   14670:	72657474 	.word	0x72657474
   14674:	56482079 	.word	0x56482079
   14678:	00000000 	.word	0x00000000
   1467c:	202d2039 	.word	0x202d2039
   14680:	72616843 	.word	0x72616843
   14684:	43206567 	.word	0x43206567
   14688:	65727275 	.word	0x65727275
   1468c:	6420746e 	.word	0x6420746e
   14690:	74617265 	.word	0x74617265
   14694:	6f4c2065 	.word	0x6f4c2065
   14698:	00203a77 	.word	0x00203a77
   1469c:	00004320 	.word	0x00004320
   146a0:	202d2030 	.word	0x202d2030
   146a4:	6b636150 	.word	0x6b636150
   146a8:	6c6f4320 	.word	0x6c6f4320
   146ac:	68432064 	.word	0x68432064
   146b0:	65677261 	.word	0x65677261
   146b4:	72754320 	.word	0x72754320
   146b8:	746e6572 	.word	0x746e6572
   146bc:	0000203a 	.word	0x0000203a
   146c0:	72616c41 	.word	0x72616c41
   146c4:	6e61206d 	.word	0x6e61206d
   146c8:	61572064 	.word	0x61572064
   146cc:	6e696e72 	.word	0x6e696e72
   146d0:	65532067 	.word	0x65532067
   146d4:	6e697474 	.word	0x6e697474
   146d8:	4d207367 	.word	0x4d207367
   146dc:	00756e65 	.word	0x00756e65
   146e0:	202d2031 	.word	0x202d2031
   146e4:	746c6f56 	.word	0x746c6f56
   146e8:	20656761 	.word	0x20656761
   146ec:	6e726157 	.word	0x6e726157
   146f0:	20676e69 	.word	0x20676e69
   146f4:	7366664f 	.word	0x7366664f
   146f8:	203a7465 	.word	0x203a7465
   146fc:	00000000 	.word	0x00000000
   14700:	202d2032 	.word	0x202d2032
   14704:	6c6c6543 	.word	0x6c6c6543
   14708:	6c6f5620 	.word	0x6c6f5620
   1470c:	65676174 	.word	0x65676174
   14710:	66694420 	.word	0x66694420
   14714:	65726566 	.word	0x65726566
   14718:	2065636e 	.word	0x2065636e
   1471c:	72616c41 	.word	0x72616c41
   14720:	00203a6d 	.word	0x00203a6d
   14724:	202d2033 	.word	0x202d2033
   14728:	706d6554 	.word	0x706d6554
   1472c:	72615720 	.word	0x72615720
   14730:	676e696e 	.word	0x676e696e
   14734:	66664f20 	.word	0x66664f20
   14738:	3a746573 	.word	0x3a746573
   1473c:	00000020 	.word	0x00000020
   14740:	202d2034 	.word	0x202d2034
   14744:	7265764f 	.word	0x7265764f
   14748:	646e6120 	.word	0x646e6120
   1474c:	646e5520 	.word	0x646e5520
   14750:	56207265 	.word	0x56207265
   14754:	61746c6f 	.word	0x61746c6f
   14758:	44206567 	.word	0x44206567
   1475c:	79616c65 	.word	0x79616c65
   14760:	0000203a 	.word	0x0000203a
   14764:	00536d20 	.word	0x00536d20
   14768:	746e6f43 	.word	0x746e6f43
   1476c:	6f746361 	.word	0x6f746361
   14770:	6e612072 	.word	0x6e612072
   14774:	61472064 	.word	0x61472064
   14778:	20656775 	.word	0x20656775
   1477c:	74746553 	.word	0x74746553
   14780:	73676e69 	.word	0x73676e69
   14784:	6e654d20 	.word	0x6e654d20
   14788:	00000075 	.word	0x00000075
   1478c:	202d2031 	.word	0x202d2031
   14790:	43657250 	.word	0x43657250
   14794:	67726168 	.word	0x67726168
   14798:	69542065 	.word	0x69542065
   1479c:	3a72656d 	.word	0x3a72656d
   147a0:	00000020 	.word	0x00000020
   147a4:	202d2032 	.word	0x202d2032
   147a8:	43657250 	.word	0x43657250
   147ac:	67726168 	.word	0x67726168
   147b0:	69462065 	.word	0x69462065
   147b4:	6873696e 	.word	0x6873696e
   147b8:	72754320 	.word	0x72754320
   147bc:	746e6572 	.word	0x746e6572
   147c0:	0000203a 	.word	0x0000203a
   147c4:	202d2033 	.word	0x202d2033
   147c8:	204d5750 	.word	0x204d5750
   147cc:	746e6f63 	.word	0x746e6f63
   147d0:	6f746361 	.word	0x6f746361
   147d4:	6f482072 	.word	0x6f482072
   147d8:	3020646c 	.word	0x3020646c
   147dc:	3535322d 	.word	0x3535322d
   147e0:	00003a20 	.word	0x00003a20
   147e4:	202d2034 	.word	0x202d2034
   147e8:	204d5750 	.word	0x204d5750
   147ec:	20726f66 	.word	0x20726f66
   147f0:	67756147 	.word	0x67756147
   147f4:	6f4c2065 	.word	0x6f4c2065
   147f8:	2d302077 	.word	0x2d302077
   147fc:	20353532 	.word	0x20353532
   14800:	0000003a 	.word	0x0000003a
   14804:	202d2035 	.word	0x202d2035
   14808:	204d5750 	.word	0x204d5750
   1480c:	20726f66 	.word	0x20726f66
   14810:	67756147 	.word	0x67756147
   14814:	69482065 	.word	0x69482065
   14818:	30206867 	.word	0x30206867
   1481c:	3535322d 	.word	0x3535322d
   14820:	00003a20 	.word	0x00003a20
   14824:	202d2036 	.word	0x202d2036
   14828:	20535345 	.word	0x20535345
   1482c:	6e69614d 	.word	0x6e69614d
   14830:	6e6f4320 	.word	0x6e6f4320
   14834:	74636174 	.word	0x74636174
   14838:	6f20726f 	.word	0x6f20726f
   1483c:	72542072 	.word	0x72542072
   14840:	3a207069 	.word	0x3a207069
   14844:	00000000 	.word	0x00000000
   14848:	70697254 	.word	0x70697254
   1484c:	75685320 	.word	0x75685320
   14850:	0000746e 	.word	0x0000746e
   14854:	6e69614d 	.word	0x6e69614d
   14858:	6e6f4320 	.word	0x6e6f4320
   1485c:	74636174 	.word	0x74636174
   14860:	6120726f 	.word	0x6120726f
   14864:	5020646e 	.word	0x5020646e
   14868:	68636572 	.word	0x68636572
   1486c:	65677261 	.word	0x65677261
   14870:	00000000 	.word	0x00000000
   14874:	75626544 	.word	0x75626544
   14878:	65532067 	.word	0x65532067
   1487c:	6e697474 	.word	0x6e697474
   14880:	4d207367 	.word	0x4d207367
   14884:	00756e65 	.word	0x00756e65
   14888:	67676f54 	.word	0x67676f54
   1488c:	6f20656c 	.word	0x6f20656c
   14890:	666f2f6e 	.word	0x666f2f6e
   14894:	00000066 	.word	0x00000066
   14898:	202d2031 	.word	0x202d2031
   1489c:	206e6143 	.word	0x206e6143
   148a0:	75626544 	.word	0x75626544
   148a4:	003a2067 	.word	0x003a2067
   148a8:	202d2032 	.word	0x202d2032
   148ac:	72727543 	.word	0x72727543
   148b0:	20746e65 	.word	0x20746e65
   148b4:	75626544 	.word	0x75626544
   148b8:	003a2067 	.word	0x003a2067
   148bc:	202d2033 	.word	0x202d2033
   148c0:	7074754f 	.word	0x7074754f
   148c4:	43207475 	.word	0x43207475
   148c8:	6b636568 	.word	0x6b636568
   148cc:	00003a20 	.word	0x00003a20
   148d0:	202d2034 	.word	0x202d2034
   148d4:	75706e49 	.word	0x75706e49
   148d8:	68432074 	.word	0x68432074
   148dc:	206b6365 	.word	0x206b6365
   148e0:	0000003a 	.word	0x0000003a
   148e4:	202d2035 	.word	0x202d2035
   148e8:	20535345 	.word	0x20535345
   148ec:	65646f6d 	.word	0x65646f6d
   148f0:	00003a20 	.word	0x00003a20
   148f4:	202d2036 	.word	0x202d2036
   148f8:	6c6c6543 	.word	0x6c6c6543
   148fc:	72502073 	.word	0x72502073
   14900:	6e657365 	.word	0x6e657365
   14904:	65522074 	.word	0x65522074
   14908:	20746573 	.word	0x20746573
   1490c:	0000003a 	.word	0x0000003a
   14910:	202d2037 	.word	0x202d2037
   14914:	67756147 	.word	0x67756147
   14918:	65442065 	.word	0x65442065
   1491c:	20677562 	.word	0x20677562
   14920:	0000003a 	.word	0x0000003a
   14924:	202d2038 	.word	0x202d2038
   14928:	20565343 	.word	0x20565343
   1492c:	7074754f 	.word	0x7074754f
   14930:	3a207475 	.word	0x3a207475
   14934:	00000000 	.word	0x00000000
   14938:	202d2039 	.word	0x202d2039
   1493c:	69636544 	.word	0x69636544
   14940:	206c616d 	.word	0x206c616d
   14944:	63616c50 	.word	0x63616c50
   14948:	74207365 	.word	0x74207365
   1494c:	6853206f 	.word	0x6853206f
   14950:	3a20776f 	.word	0x3a20776f
   14954:	00000000 	.word	0x00000000
   14958:	72727543 	.word	0x72727543
   1495c:	20746e65 	.word	0x20746e65
   14960:	736e6553 	.word	0x736e6553
   14964:	4320726f 	.word	0x4320726f
   14968:	62696c61 	.word	0x62696c61
   1496c:	69746172 	.word	0x69746172
   14970:	4d206e6f 	.word	0x4d206e6f
   14974:	00756e65 	.word	0x00756e65
   14978:	202d2063 	.word	0x202d2063
   1497c:	63206f54 	.word	0x63206f54
   14980:	62696c61 	.word	0x62696c61
   14984:	65746172 	.word	0x65746172
   14988:	6e657320 	.word	0x6e657320
   1498c:	20726f73 	.word	0x20726f73
   14990:	7366666f 	.word	0x7366666f
   14994:	00007465 	.word	0x00007465
   14998:	202d2073 	.word	0x202d2073
   1499c:	72727543 	.word	0x72727543
   149a0:	20746e65 	.word	0x20746e65
   149a4:	736e6553 	.word	0x736e6553
   149a8:	5420726f 	.word	0x5420726f
   149ac:	20657079 	.word	0x20657079
   149b0:	0000203a 	.word	0x0000203a
   149b4:	616e4120 	.word	0x616e4120
   149b8:	75676f6c 	.word	0x75676f6c
   149bc:	75442065 	.word	0x75442065
   149c0:	43206c61 	.word	0x43206c61
   149c4:	65727275 	.word	0x65727275
   149c8:	5320746e 	.word	0x5320746e
   149cc:	6f736e65 	.word	0x6f736e65
   149d0:	00002072 	.word	0x00002072
   149d4:	616e4120 	.word	0x616e4120
   149d8:	75676f6c 	.word	0x75676f6c
   149dc:	69532065 	.word	0x69532065
   149e0:	656c676e 	.word	0x656c676e
   149e4:	72754320 	.word	0x72754320
   149e8:	746e6572 	.word	0x746e6572
   149ec:	6e655320 	.word	0x6e655320
   149f0:	20726f73 	.word	0x20726f73
   149f4:	00000000 	.word	0x00000000
   149f8:	6e614320 	.word	0x6e614320
   149fc:	20737562 	.word	0x20737562
   14a00:	72727543 	.word	0x72727543
   14a04:	20746e65 	.word	0x20746e65
   14a08:	736e6553 	.word	0x736e6553
   14a0c:	0020726f 	.word	0x0020726f
   14a10:	65646e55 	.word	0x65646e55
   14a14:	656e6966 	.word	0x656e6966
   14a18:	00000064 	.word	0x00000064
   14a1c:	202d2031 	.word	0x202d2031
   14a20:	65766e69 	.word	0x65766e69
   14a24:	63207472 	.word	0x63207472
   14a28:	65727275 	.word	0x65727275
   14a2c:	3a20746e 	.word	0x3a20746e
   14a30:	00000000 	.word	0x00000000
   14a34:	202d2032 	.word	0x202d2032
   14a38:	65727550 	.word	0x65727550
   14a3c:	6c6f5620 	.word	0x6c6f5620
   14a40:	65676174 	.word	0x65676174
   14a44:	73616220 	.word	0x73616220
   14a48:	53206465 	.word	0x53206465
   14a4c:	3a20434f 	.word	0x3a20434f
   14a50:	00000000 	.word	0x00000000
   14a54:	202d2033 	.word	0x202d2033
   14a58:	72727543 	.word	0x72727543
   14a5c:	20746e65 	.word	0x20746e65
   14a60:	746c754d 	.word	0x746c754d
   14a64:	696c7069 	.word	0x696c7069
   14a68:	69746163 	.word	0x69746163
   14a6c:	3a206e6f 	.word	0x3a206e6f
   14a70:	00000000 	.word	0x00000000
   14a74:	202d2034 	.word	0x202d2034
   14a78:	6c616e41 	.word	0x6c616e41
   14a7c:	6575676f 	.word	0x6575676f
   14a80:	776f4c20 	.word	0x776f4c20
   14a84:	6e615220 	.word	0x6e615220
   14a88:	43206567 	.word	0x43206567
   14a8c:	3a766e6f 	.word	0x3a766e6f
   14a90:	00000000 	.word	0x00000000
   14a94:	2f566d20 	.word	0x2f566d20
   14a98:	00000041 	.word	0x00000041
   14a9c:	202d2035 	.word	0x202d2035
   14aa0:	6c616e41 	.word	0x6c616e41
   14aa4:	6575676f 	.word	0x6575676f
   14aa8:	67694820 	.word	0x67694820
   14aac:	61522068 	.word	0x61522068
   14ab0:	2065676e 	.word	0x2065676e
   14ab4:	766e6f43 	.word	0x766e6f43
   14ab8:	0000003a 	.word	0x0000003a
   14abc:	202d2036 	.word	0x202d2036
   14ac0:	72727543 	.word	0x72727543
   14ac4:	20746e65 	.word	0x20746e65
   14ac8:	736e6553 	.word	0x736e6553
   14acc:	4420726f 	.word	0x4420726f
   14ad0:	62646165 	.word	0x62646165
   14ad4:	3a646e61 	.word	0x3a646e61
   14ad8:	00000000 	.word	0x00000000
   14adc:	00566d20 	.word	0x00566d20
   14ae0:	202d2038 	.word	0x202d2038
   14ae4:	72727543 	.word	0x72727543
   14ae8:	20746e65 	.word	0x20746e65
   14aec:	6e616843 	.word	0x6e616843
   14af0:	206c656e 	.word	0x206c656e
   14af4:	6e616843 	.word	0x6e616843
   14af8:	764f6567 	.word	0x764f6567
   14afc:	003a7265 	.word	0x003a7265
   14b00:	00004120 	.word	0x00004120
   14b04:	432d2037 	.word	0x432d2037
   14b08:	43206e61 	.word	0x43206e61
   14b0c:	65727275 	.word	0x65727275
   14b10:	5320746e 	.word	0x5320746e
   14b14:	6f736e65 	.word	0x6f736e65
   14b18:	003a2072 	.word	0x003a2072
   14b1c:	4d454c20 	.word	0x4d454c20
   14b20:	42414320 	.word	0x42414320
   14b24:	2f303033 	.word	0x2f303033
   14b28:	20303035 	.word	0x20303035
   14b2c:	69726573 	.word	0x69726573
   14b30:	00207365 	.word	0x00207365
   14b34:	4d454c20 	.word	0x4d454c20
   14b38:	42414320 	.word	0x42414320
   14b3c:	20303035 	.word	0x20303035
   14b40:	63657053 	.word	0x63657053
   14b44:	206c6169 	.word	0x206c6169
   14b48:	00000000 	.word	0x00000000
   14b4c:	61734920 	.word	0x61734920
   14b50:	6c616353 	.word	0x6c616353
   14b54:	56492065 	.word	0x56492065
   14b58:	20532d54 	.word	0x20532d54
   14b5c:	00000000 	.word	0x00000000
   14b60:	63695620 	.word	0x63695620
   14b64:	6e6f7274 	.word	0x6e6f7274
   14b68:	6e794c20 	.word	0x6e794c20
   14b6c:	45562078 	.word	0x45562078
   14b70:	4e41432e 	.word	0x4e41432e
   14b74:	75685320 	.word	0x75685320
   14b78:	0000746e 	.word	0x0000746e
   14b7c:	74746142 	.word	0x74746142
   14b80:	20797265 	.word	0x20797265
   14b84:	74746553 	.word	0x74746553
   14b88:	73676e69 	.word	0x73676e69
   14b8c:	6e654d20 	.word	0x6e654d20
   14b90:	00000075 	.word	0x00000075
   14b94:	202d2072 	.word	0x202d2072
   14b98:	65736552 	.word	0x65736552
   14b9c:	48412074 	.word	0x48412074
   14ba0:	756f6320 	.word	0x756f6320
   14ba4:	7265746e 	.word	0x7265746e
   14ba8:	00000000 	.word	0x00000000
   14bac:	202d2066 	.word	0x202d2066
   14bb0:	65736552 	.word	0x65736552
   14bb4:	6f742074 	.word	0x6f742074
   14bb8:	646f4320 	.word	0x646f4320
   14bbc:	53206465 	.word	0x53206465
   14bc0:	69747465 	.word	0x69747465
   14bc4:	0073676e 	.word	0x0073676e
   14bc8:	202d2031 	.word	0x202d2031
   14bcc:	6c6c6543 	.word	0x6c6c6543
   14bd0:	65764f20 	.word	0x65764f20
   14bd4:	6f562072 	.word	0x6f562072
   14bd8:	6761746c 	.word	0x6761746c
   14bdc:	65532065 	.word	0x65532065
   14be0:	696f7074 	.word	0x696f7074
   14be4:	203a746e 	.word	0x203a746e
   14be8:	00000000 	.word	0x00000000
   14bec:	202d2032 	.word	0x202d2032
   14bf0:	6c6c6543 	.word	0x6c6c6543
   14bf4:	646e5520 	.word	0x646e5520
   14bf8:	56207265 	.word	0x56207265
   14bfc:	61746c6f 	.word	0x61746c6f
   14c00:	53206567 	.word	0x53206567
   14c04:	6f707465 	.word	0x6f707465
   14c08:	3a746e69 	.word	0x3a746e69
   14c0c:	00000020 	.word	0x00000020
   14c10:	202d2033 	.word	0x202d2033
   14c14:	7265764f 	.word	0x7265764f
   14c18:	6d655420 	.word	0x6d655420
   14c1c:	61726570 	.word	0x61726570
   14c20:	65727574 	.word	0x65727574
   14c24:	74655320 	.word	0x74655320
   14c28:	6e696f70 	.word	0x6e696f70
   14c2c:	00203a74 	.word	0x00203a74
   14c30:	00000043 	.word	0x00000043
   14c34:	202d2034 	.word	0x202d2034
   14c38:	65646e55 	.word	0x65646e55
   14c3c:	65542072 	.word	0x65542072
   14c40:	7265706d 	.word	0x7265706d
   14c44:	72757461 	.word	0x72757461
   14c48:	65532065 	.word	0x65532065
   14c4c:	696f7074 	.word	0x696f7074
   14c50:	203a746e 	.word	0x203a746e
   14c54:	00000000 	.word	0x00000000
   14c58:	202d2035 	.word	0x202d2035
   14c5c:	6c6c6543 	.word	0x6c6c6543
   14c60:	6c614220 	.word	0x6c614220
   14c64:	65636e61 	.word	0x65636e61
   14c68:	6c6f5620 	.word	0x6c6f5620
   14c6c:	65676174 	.word	0x65676174
   14c70:	74655320 	.word	0x74655320
   14c74:	6e696f70 	.word	0x6e696f70
   14c78:	00203a74 	.word	0x00203a74
   14c7c:	202d2036 	.word	0x202d2036
   14c80:	616c6142 	.word	0x616c6142
   14c84:	2065636e 	.word	0x2065636e
   14c88:	746c6f56 	.word	0x746c6f56
   14c8c:	20656761 	.word	0x20656761
   14c90:	74737948 	.word	0x74737948
   14c94:	69737265 	.word	0x69737265
   14c98:	00203a73 	.word	0x00203a73
   14c9c:	202d2037 	.word	0x202d2037
   14ca0:	42206841 	.word	0x42206841
   14ca4:	65747461 	.word	0x65747461
   14ca8:	43207972 	.word	0x43207972
   14cac:	63617061 	.word	0x63617061
   14cb0:	3a797469 	.word	0x3a797469
   14cb4:	00000020 	.word	0x00000020
   14cb8:	00006841 	.word	0x00006841
   14cbc:	202d2038 	.word	0x202d2038
   14cc0:	6b636150 	.word	0x6b636150
   14cc4:	78614d20 	.word	0x78614d20
   14cc8:	73694420 	.word	0x73694420
   14ccc:	72616863 	.word	0x72616863
   14cd0:	203a6567 	.word	0x203a6567
   14cd4:	00000000 	.word	0x00000000
   14cd8:	202d2039 	.word	0x202d2039
   14cdc:	6c6c6543 	.word	0x6c6c6543
   14ce0:	73694420 	.word	0x73694420
   14ce4:	72616863 	.word	0x72616863
   14ce8:	56206567 	.word	0x56206567
   14cec:	61746c6f 	.word	0x61746c6f
   14cf0:	4c206567 	.word	0x4c206567
   14cf4:	74696d69 	.word	0x74696d69
   14cf8:	74655320 	.word	0x74655320
   14cfc:	6e696f70 	.word	0x6e696f70
   14d00:	00203a74 	.word	0x00203a74
   14d04:	202d2030 	.word	0x202d2030
   14d08:	76616c53 	.word	0x76616c53
   14d0c:	74732065 	.word	0x74732065
   14d10:	676e6972 	.word	0x676e6972
   14d14:	6e692073 	.word	0x6e692073
   14d18:	72617020 	.word	0x72617020
   14d1c:	656c6c61 	.word	0x656c6c61
   14d20:	00203a6c 	.word	0x00203a6c
   14d24:	202d2061 	.word	0x202d2061
   14d28:	6c6c6543 	.word	0x6c6c6543
   14d2c:	6e692073 	.word	0x6e692073
   14d30:	72655320 	.word	0x72655320
   14d34:	20736569 	.word	0x20736569
   14d38:	20726570 	.word	0x20726570
   14d3c:	69727453 	.word	0x69727453
   14d40:	203a676e 	.word	0x203a676e
   14d44:	00000000 	.word	0x00000000
   14d48:	202d2062 	.word	0x202d2062
   14d4c:	70746573 	.word	0x70746573
   14d50:	746e696f 	.word	0x746e696f
   14d54:	203a3120 	.word	0x203a3120
   14d58:	00000000 	.word	0x00000000
   14d5c:	202d2063 	.word	0x202d2063
   14d60:	20434f53 	.word	0x20434f53
   14d64:	70746573 	.word	0x70746573
   14d68:	746e696f 	.word	0x746e696f
   14d6c:	003a3120 	.word	0x003a3120
   14d70:	00000025 	.word	0x00000025
   14d74:	202d2064 	.word	0x202d2064
   14d78:	70746573 	.word	0x70746573
   14d7c:	746e696f 	.word	0x746e696f
   14d80:	203a3220 	.word	0x203a3220
   14d84:	00000000 	.word	0x00000000
   14d88:	202d2065 	.word	0x202d2065
   14d8c:	20434f53 	.word	0x20434f53
   14d90:	70746573 	.word	0x70746573
   14d94:	746e696f 	.word	0x746e696f
   14d98:	203a3220 	.word	0x203a3220
   14d9c:	00000000 	.word	0x00000000
   14da0:	202d2067 	.word	0x202d2067
   14da4:	726f7453 	.word	0x726f7453
   14da8:	20656761 	.word	0x20656761
   14dac:	70746553 	.word	0x70746553
   14db0:	746e696f 	.word	0x746e696f
   14db4:	0000203a 	.word	0x0000203a
   14db8:	202d2068 	.word	0x202d2068
   14dbc:	63736944 	.word	0x63736944
   14dc0:	67726168 	.word	0x67726168
   14dc4:	75432065 	.word	0x75432065
   14dc8:	6e657272 	.word	0x6e657272
   14dcc:	61542074 	.word	0x61542074
   14dd0:	20726570 	.word	0x20726570
   14dd4:	7366664f 	.word	0x7366664f
   14dd8:	203a7465 	.word	0x203a7465
   14ddc:	00000000 	.word	0x00000000
   14de0:	202d206a 	.word	0x202d206a
   14de4:	63736944 	.word	0x63736944
   14de8:	67726168 	.word	0x67726168
   14dec:	75432065 	.word	0x75432065
   14df0:	6e657272 	.word	0x6e657272
   14df4:	65542074 	.word	0x65542074
   14df8:	7265706d 	.word	0x7265706d
   14dfc:	72757461 	.word	0x72757461
   14e00:	65442065 	.word	0x65442065
   14e04:	65746172 	.word	0x65746172
   14e08:	00203a20 	.word	0x00203a20
   14e0c:	202d206b 	.word	0x202d206b
   14e10:	6c6c6543 	.word	0x6c6c6543
   14e14:	73694420 	.word	0x73694420
   14e18:	72616863 	.word	0x72616863
   14e1c:	56206567 	.word	0x56206567
   14e20:	61746c6f 	.word	0x61746c6f
   14e24:	48206567 	.word	0x48206567
   14e28:	65747379 	.word	0x65747379
   14e2c:	69736572 	.word	0x69736572
   14e30:	00203a73 	.word	0x00203a73
   14e34:	554e454d 	.word	0x554e454d
   14e38:	00000000 	.word	0x00000000
   14e3c:	75626544 	.word	0x75626544
   14e40:	6e696767 	.word	0x6e696767
   14e44:	61502067 	.word	0x61502067
   14e48:	64657375 	.word	0x64657375
   14e4c:	00000000 	.word	0x00000000
   14e50:	6d726946 	.word	0x6d726946
   14e54:	65726177 	.word	0x65726177
   14e58:	72655620 	.word	0x72655620
   14e5c:	6e6f6973 	.word	0x6e6f6973
   14e60:	00203a20 	.word	0x00203a20
   14e64:	202d2062 	.word	0x202d2062
   14e68:	74746142 	.word	0x74746142
   14e6c:	20797265 	.word	0x20797265
   14e70:	74746553 	.word	0x74746553
   14e74:	73676e69 	.word	0x73676e69
   14e78:	00000000 	.word	0x00000000
   14e7c:	202d2061 	.word	0x202d2061
   14e80:	72616c41 	.word	0x72616c41
   14e84:	6e61206d 	.word	0x6e61206d
   14e88:	61572064 	.word	0x61572064
   14e8c:	6e696e72 	.word	0x6e696e72
   14e90:	65532067 	.word	0x65532067
   14e94:	6e697474 	.word	0x6e697474
   14e98:	00007367 	.word	0x00007367
   14e9c:	202d2065 	.word	0x202d2065
   14ea0:	72616843 	.word	0x72616843
   14ea4:	676e6967 	.word	0x676e6967
   14ea8:	74655320 	.word	0x74655320
   14eac:	676e6974 	.word	0x676e6974
   14eb0:	00000073 	.word	0x00000073
   14eb4:	202d2063 	.word	0x202d2063
   14eb8:	72727543 	.word	0x72727543
   14ebc:	20746e65 	.word	0x20746e65
   14ec0:	736e6553 	.word	0x736e6553
   14ec4:	4320726f 	.word	0x4320726f
   14ec8:	62696c61 	.word	0x62696c61
   14ecc:	69746172 	.word	0x69746172
   14ed0:	00006e6f 	.word	0x00006e6f
   14ed4:	202d206b 	.word	0x202d206b
   14ed8:	746e6f43 	.word	0x746e6f43
   14edc:	6f746361 	.word	0x6f746361
   14ee0:	6e612072 	.word	0x6e612072
   14ee4:	61472064 	.word	0x61472064
   14ee8:	20656775 	.word	0x20656775
   14eec:	74746553 	.word	0x74746553
   14ef0:	73676e69 	.word	0x73676e69
   14ef4:	00000000 	.word	0x00000000
   14ef8:	202d2069 	.word	0x202d2069
   14efc:	6f6e6749 	.word	0x6f6e6749
   14f00:	56206572 	.word	0x56206572
   14f04:	65756c61 	.word	0x65756c61
   14f08:	74655320 	.word	0x74655320
   14f0c:	676e6974 	.word	0x676e6974
   14f10:	00000073 	.word	0x00000073
   14f14:	202d2064 	.word	0x202d2064
   14f18:	75626544 	.word	0x75626544
   14f1c:	65532067 	.word	0x65532067
   14f20:	6e697474 	.word	0x6e697474
   14f24:	00007367 	.word	0x00007367
   14f28:	202d2071 	.word	0x202d2071
   14f2c:	74697865 	.word	0x74697865
   14f30:	6e656d20 	.word	0x6e656d20
   14f34:	ffff0075 	.word	0xffff0075
   14f38:	0020416d 	.word	0x0020416d
   14f3c:	65747845 	.word	0x65747845
   14f40:	6465646e 	.word	0x6465646e
   14f44:	3a444920 	.word	0x3a444920
   14f48:	25783020 	.word	0x25783020
   14f4c:	586c382e 	.word	0x586c382e
   14f50:	4c442020 	.word	0x4c442020
   14f54:	25203a43 	.word	0x25203a43
   14f58:	20206431 	.word	0x20206431
   14f5c:	61746144 	.word	0x61746144
   14f60:	0000003a 	.word	0x0000003a
   14f64:	2578302c 	.word	0x2578302c
   14f68:	586c332e 	.word	0x586c332e
   14f6c:	6c61662c 	.word	0x6c61662c
   14f70:	252c6573 	.word	0x252c6573
   14f74:	00006431 	.word	0x00006431
   14f78:	4d455220 	.word	0x4d455220
   14f7c:	2045544f 	.word	0x2045544f
   14f80:	55514552 	.word	0x55514552
   14f84:	20545345 	.word	0x20545345
   14f88:	4d415246 	.word	0x4d415246
   14f8c:	00000045 	.word	0x00000045
   14f90:	7830202c 	.word	0x7830202c
   14f94:	58322e25 	.word	0x58322e25
   14f98:	ffffff00 	.word	0xffffff00
   14f9c:	75706e49 	.word	0x75706e49
   14fa0:	00203a74 	.word	0x00203a74
   14fa4:	4e4f2031 	.word	0x4e4f2031
   14fa8:	00002020 	.word	0x00002020
   14fac:	464f2031 	.word	0x464f2031
   14fb0:	00002046 	.word	0x00002046
   14fb4:	4e4f2032 	.word	0x4e4f2032
   14fb8:	00002020 	.word	0x00002020
   14fbc:	464f2032 	.word	0x464f2032
   14fc0:	00002046 	.word	0x00002046
   14fc4:	4e4f2033 	.word	0x4e4f2033
   14fc8:	00002020 	.word	0x00002020
   14fcc:	464f2033 	.word	0x464f2033
   14fd0:	00002046 	.word	0x00002046
   14fd4:	4e4f2034 	.word	0x4e4f2034
   14fd8:	00002020 	.word	0x00002020
   14fdc:	464f2034 	.word	0x464f2034
   14fe0:	ff002046 	.word	0xff002046
   14fe4:	74617473 	.word	0x74617473
   14fe8:	7478742e 	.word	0x7478742e
   14fec:	0000003d 	.word	0x0000003d
   14ff0:	74634120 	.word	0x74634120
   14ff4:	20657669 	.word	0x20657669
   14ff8:	00000000 	.word	0x00000000
   14ffc:	2e636f73 	.word	0x2e636f73
   15000:	3d6c6176 	.word	0x3d6c6176
   15004:	00000000 	.word	0x00000000
   15008:	31636f73 	.word	0x31636f73
   1500c:	6c61762e 	.word	0x6c61762e
   15010:	0000003d 	.word	0x0000003d
   15014:	72727563 	.word	0x72727563
   15018:	2e746e65 	.word	0x2e746e65
   1501c:	3d6c6176 	.word	0x3d6c6176
   15020:	00000000 	.word	0x00000000
   15024:	706d6574 	.word	0x706d6574
   15028:	6c61762e 	.word	0x6c61762e
   1502c:	0000003d 	.word	0x0000003d
   15030:	706d6574 	.word	0x706d6574
   15034:	2e776f6c 	.word	0x2e776f6c
   15038:	3d6c6176 	.word	0x3d6c6176
   1503c:	00000000 	.word	0x00000000
   15040:	706d6574 	.word	0x706d6574
   15044:	68676968 	.word	0x68676968
   15048:	6c61762e 	.word	0x6c61762e
   1504c:	0000003d 	.word	0x0000003d
   15050:	746c6f76 	.word	0x746c6f76
   15054:	6c61762e 	.word	0x6c61762e
   15058:	0000003d 	.word	0x0000003d
   1505c:	63776f6c 	.word	0x63776f6c
   15060:	2e6c6c65 	.word	0x2e6c6c65
   15064:	3d6c6176 	.word	0x3d6c6176
   15068:	00000000 	.word	0x00000000
   1506c:	68676968 	.word	0x68676968
   15070:	6c6c6563 	.word	0x6c6c6563
   15074:	6c61762e 	.word	0x6c61762e
   15078:	0000003d 	.word	0x0000003d
   1507c:	6d726966 	.word	0x6d726966
   15080:	6c61762e 	.word	0x6c61762e
   15084:	0000003d 	.word	0x0000003d
   15088:	6c6c6563 	.word	0x6c6c6563
   1508c:	746c6564 	.word	0x746c6564
   15090:	61762e61 	.word	0x61762e61
   15094:	ff003d6c 	.word	0xff003d6c
   15098:	63657250 	.word	0x63657250
   1509c:	67726168 	.word	0x67726168
   150a0:	21212165 	.word	0x21212165
   150a4:	00000000 	.word	0x00000000
   150a8:	6e69614d 	.word	0x6e69614d
   150ac:	216e4f20 	.word	0x216e4f20
   150b0:	00002121 	.word	0x00002121
   150b4:	7265764f 	.word	0x7265764f
   150b8:	6c6f5620 	.word	0x6c6f5620
   150bc:	65676174 	.word	0x65676174
   150c0:	69725420 	.word	0x69725420
   150c4:	00000070 	.word	0x00000070
   150c8:	65736552 	.word	0x65736552
   150cc:	764f2074 	.word	0x764f2074
   150d0:	56207265 	.word	0x56207265
   150d4:	61746c6f 	.word	0x61746c6f
   150d8:	54206567 	.word	0x54206567
   150dc:	20706972 	.word	0x20706972
   150e0:	20746f4e 	.word	0x20746f4e
   150e4:	72616843 	.word	0x72616843
   150e8:	00646567 	.word	0x00646567
   150ec:	65646e55 	.word	0x65646e55
   150f0:	6f562072 	.word	0x6f562072
   150f4:	6761746c 	.word	0x6761746c
   150f8:	72542065 	.word	0x72542065
   150fc:	00007069 	.word	0x00007069
   15100:	65736552 	.word	0x65736552
   15104:	6e552074 	.word	0x6e552074
   15108:	20726564 	.word	0x20726564
   1510c:	746c6f56 	.word	0x746c6f56
   15110:	20656761 	.word	0x20656761
   15114:	70697254 	.word	0x70697254
   15118:	00000000 	.word	0x00000000
   1511c:	21202020 	.word	0x21202020
   15120:	55202121 	.word	0x55202121
   15124:	7265646e 	.word	0x7265646e
   15128:	746c6f76 	.word	0x746c6f76
   1512c:	20656761 	.word	0x20656761
   15130:	6c756146 	.word	0x6c756146
   15134:	21212074 	.word	0x21212074
   15138:	00000021 	.word	0x00000021
   1513c:	21202020 	.word	0x21202020
   15140:	53202121 	.word	0x53202121
   15144:	65697265 	.word	0x65697265
   15148:	65432073 	.word	0x65432073
   1514c:	20736c6c 	.word	0x20736c6c
   15150:	6c756146 	.word	0x6c756146
   15154:	21212074 	.word	0x21212074
   15158:	00000021 	.word	0x00000021
   1515c:	21202020 	.word	0x21202020
   15160:	4d202121 	.word	0x4d202121
   15164:	4c55444f 	.word	0x4c55444f
   15168:	494d2045 	.word	0x494d2045
   1516c:	4e495353 	.word	0x4e495353
   15170:	21212047 	.word	0x21212047
   15174:	ffff0021 	.word	0xffff0021
   15178:	72617453 	.word	0x72617453
   1517c:	676e6974 	.word	0x676e6974
   15180:	21707520 	.word	0x21707520
   15184:	00000000 	.word	0x00000000
   15188:	706d6953 	.word	0x706d6953
   1518c:	20534d42 	.word	0x20534d42
   15190:	56203256 	.word	0x56203256
   15194:	00000057 	.word	0x00000057
   15198:	73616552 	.word	0x73616552
   1519c:	66206e6f 	.word	0x66206e6f
   151a0:	6c20726f 	.word	0x6c20726f
   151a4:	20747361 	.word	0x20747361
   151a8:	65736552 	.word	0x65736552
   151ac:	00203a74 	.word	0x00203a74
   151b0:	706f7453 	.word	0x706f7453
   151b4:	646f4d20 	.word	0x646f4d20
   151b8:	63412065 	.word	0x63412065
   151bc:	776f6e6b 	.word	0x776f6e6b
   151c0:	6764656c 	.word	0x6764656c
   151c4:	72452065 	.word	0x72452065
   151c8:	20726f72 	.word	0x20726f72
   151cc:	65736552 	.word	0x65736552
   151d0:	00000074 	.word	0x00000074
   151d4:	2d4d444d 	.word	0x2d4d444d
   151d8:	52205041 	.word	0x52205041
   151dc:	74657365 	.word	0x74657365
   151e0:	00000000 	.word	0x00000000
   151e4:	74666f53 	.word	0x74666f53
   151e8:	65726177 	.word	0x65726177
   151ec:	73655220 	.word	0x73655220
   151f0:	00007465 	.word	0x00007465
   151f4:	65726f43 	.word	0x65726f43
   151f8:	636f4c20 	.word	0x636f4c20
   151fc:	2070756b 	.word	0x2070756b
   15200:	6e657645 	.word	0x6e657645
   15204:	65522074 	.word	0x65522074
   15208:	00746573 	.word	0x00746573
   1520c:	65776f50 	.word	0x65776f50
   15210:	6e6f2d72 	.word	0x6e6f2d72
   15214:	73655220 	.word	0x73655220
   15218:	00007465 	.word	0x00007465
   1521c:	65747845 	.word	0x65747845
   15220:	6c616e72 	.word	0x6c616e72
   15224:	6e695020 	.word	0x6e695020
   15228:	73655220 	.word	0x73655220
   1522c:	00007465 	.word	0x00007465
   15230:	63746157 	.word	0x63746157
   15234:	676f6468 	.word	0x676f6468
   15238:	504f4328 	.word	0x504f4328
   1523c:	65522029 	.word	0x65522029
   15240:	00746573 	.word	0x00746573
   15244:	73736f4c 	.word	0x73736f4c
   15248:	20666f20 	.word	0x20666f20
   1524c:	65747845 	.word	0x65747845
   15250:	6c616e72 	.word	0x6c616e72
   15254:	6f6c4320 	.word	0x6f6c4320
   15258:	52206b63 	.word	0x52206b63
   1525c:	74657365 	.word	0x74657365
   15260:	00000000 	.word	0x00000000
   15264:	73736f4c 	.word	0x73736f4c
   15268:	20666f20 	.word	0x20666f20
   1526c:	6b636f4c 	.word	0x6b636f4c
   15270:	206e6920 	.word	0x206e6920
   15274:	204c4c50 	.word	0x204c4c50
   15278:	65736552 	.word	0x65736552
   1527c:	00000074 	.word	0x00000074
   15280:	2d776f4c 	.word	0x2d776f4c
   15284:	746c6f76 	.word	0x746c6f76
   15288:	20656761 	.word	0x20656761
   1528c:	65746544 	.word	0x65746544
   15290:	52207463 	.word	0x52207463
   15294:	74657365 	.word	0x74657365
   15298:	00000000 	.word	0x00000000
   1529c:	72617453 	.word	0x72617453
   152a0:	20646574 	.word	0x20646574
   152a4:	69726573 	.word	0x69726573
   152a8:	69206c61 	.word	0x69206c61
   152ac:	7265746e 	.word	0x7265746e
   152b0:	65636166 	.word	0x65636166
   152b4:	206f7420 	.word	0x206f7420
   152b8:	2e534d42 	.word	0x2e534d42
   152bc:	ffffff00 	.word	0xffffff00
   152c0:	726f6241 	.word	0x726f6241
   152c4:	6e692074 	.word	0x6e692074
   152c8:	4e414320 	.word	0x4e414320
   152cc:	67656220 	.word	0x67656220
   152d0:	202e6e69 	.word	0x202e6e69
   152d4:	6c756f43 	.word	0x6c756f43
   152d8:	74276e64 	.word	0x74276e64
   152dc:	6e696620 	.word	0x6e696620
   152e0:	20612064 	.word	0x20612064
   152e4:	74697573 	.word	0x74697573
   152e8:	656c6261 	.word	0x656c6261
   152ec:	75616220 	.word	0x75616220
   152f0:	6f632064 	.word	0x6f632064
   152f4:	6769666e 	.word	0x6769666e
   152f8:	ffff0021 	.word	0xffff0021

000152fc <ADC::diff_table_ADC0>:
   152fc:	03248022                                ".$.

00015300 <ADC::diff_table_ADC1>:
   15300:	80240322                                ".$.

00015304 <ADC::channel2sc1aADC0>:
   15304:	09080e05 07060c0d 1300040f 0e051f03     ................
   15314:	0c0d0908 040f0706 1f1f1f1f 1f1f1f1f     ................
   15324:	53401f1f 161a5f43 1e1d1b17              ..@SC_......

00015330 <ADC::channel2sc1aADC1>:
   15330:	09081f1f 1f1f1f1f 1f031f1f 1f1f1300     ................
   15340:	1f1f0908 1f1f1f1f 05851f1f 84070604     ................
   15350:	5f431f1f 121a5340 1e1d1b1f              ..C_@S......

0001535c <SPIClass::spi0_hardware>:
   1535c:	4004803c 00001000 00001a04 00007fff     <..@............
   1536c:	00001011 00009195 0000080c 00000200     ................
   1537c:	00000200 0000070b 00000240 00000200     ........@.......
   1538c:	00000e0d 00000240 00000200 0609020a     ....@...........
   1539c:	16151714 0000000f 00000200 00000200     ................
   153ac:	00000200 00000200 00000200 00000200     ................
   153bc:	00000200 00000200 00000200 02020101     ................
   153cc:	08080404 00000010                       ........

000153d4 <_serialEvent_default>:
   153d4:	ffffff00                                ....

000153d8 <vtable for HardwareSerial2>:
	...
   153e0:	000093ed 00009411 000094a1 0000949d     ................
   153f0:	00009499 00009495 00009491 000093b5     ................
   15400:	00009471 0000946d 00009465 0000945d     q...m...e...]...
   15410:	00009455 00009445 00009435 00009431     U...E...5...1...
   15420:	00009429 00009421 000094c5 000094e5     )...!...........
   15430:	00009505 000094a5 000093f9 000093e1     ................

00015440 <vtable for HardwareSerial3>:
	...
   15448:	0000955d 00009581 00009611 0000960d     ]...............
   15458:	00009609 00009605 00009601 00009525     ............%...
   15468:	000095e1 000095dd 000095d5 000095cd     ................
   15478:	000095c5 000095b5 000095a5 000095a1     ................
   15488:	00009599 00009591 00009635 00009655     ........5...U...
   15498:	00009675 00009615 00009569 00009551     u.......i...Q...
   154a8:	006e616e 00666e69 0066766f 037ff06f     nan.inf.ovf.o...
   154b8:	78037003 0f80f013 4770d0fb              .p.x......pG

000154c4 <CSWTCH.39>:
   154c4:	00000008 0000000c 0000000a 00000009     ................
   154d4:	0000000b                                ....

000154d8 <digital_pin_to_info_PGM>:
   154d8:	43fe0840 4004a040 43fe0844 4004a044     @..C@..@D..CD..@
   154e8:	43fe1800 4004c000 43fe0030 40049030     ...C...@0..C0..@
   154f8:	43fe0034 40049034 43fe181c 4004c01c     4..C4..@...C...@
   15508:	43fe1810 4004c010 43fe1808 4004c008     ...C...@...C...@
   15518:	43fe180c 4004c00c 43fe100c 4004b00c     ...C...@...C...@
   15528:	43fe1010 4004b010 43fe1018 4004b018     ...C...@...C...@
   15538:	43fe101c 4004b01c 43fe1014 4004b014     ...C...@...C...@
   15548:	43fe1804 4004c004 43fe1000 4004b000     ...C...@...C...@
   15558:	43fe0800 4004a000 43fe0804 4004a004     ...C...@...C...@
   15568:	43fe080c 4004a00c 43fe0808 4004a008     ...C...@...C...@
   15578:	43fe1814 4004c014 43fe1818 4004c018     ...C...@...C...@
   15588:	43fe1004 4004b004 43fe1008 4004b008     ...C...@...C...@
   15598:	43fe0014 40049014 43fe084c 4004a04c     ...C...@L..CL..@
   155a8:	43fe2004 4004d004 43fe1024 4004b024     . .C...@$..C$..@
   155b8:	43fe1020 4004b020 43fe1028 4004b028      ..C ..@(..C(..@
   155c8:	43fe102c 4004b02c 43fe2000 4004d000     ,..C,..@. .C...@
   155d8:	43fe0848 4004a048 43fe0010 40049010     H..CH..@...C...@

000155e8 <vtable for usb_serial_class>:
	...
   155f0:	0000c045 0000c03d 0000c039 0000c035     E...=...9...5...
   15600:	0000c031 0000c02d 0000c029 0000c025     1...-...)...%...

00015610 <usb_descriptor_list>:
   15610:	00000100 1fff8a58 00000012 00000200     ....X...........
   15620:	1fff8a14 00000043 00000300 1fff8a6c     ....C.......l...
   15630:	00000000 04090301 1fff8a70 00000000     ........p.......
   15640:	04090302 1fff8a88 00000000 04090303     ................
   15650:	1fff8aa0 00000000 00000000 00000000     ................
   15660:	00000000                                ....

00015664 <usb_endpoint_config_table>:
   15664:	15191500 3f000000 bf000000 3f317180     .......?.....q1?
   15674:	bf317180 3717f7d1 b717f7d1              .q1....7....

00015680 <_ctype_>:
   15680:	20202000 20202020 28282020 20282828     .         ((((( 
   15690:	20202020 20202020 20202020 20202020                     
   156a0:	10108820 10101010 10101010 10101010      ...............
   156b0:	04040410 04040404 10040404 10101010     ................
   156c0:	41411010 41414141 01010101 01010101     ..AAAAAA........
   156d0:	01010101 01010101 01010101 10101010     ................
   156e0:	42421010 42424242 02020202 02020202     ..BBBBBB........
   156f0:	02020202 02020202 02020202 10101010     ................
   15700:	00000020 00000000 00000000 00000000      ...............
	...
   15780:	ffffff00 435f434c 414c4c4f 00004554     ....LC_COLLATE..
   15790:	435f434c 45505954 00000000 4d5f434c     LC_CTYPE....LC_M
   157a0:	54454e4f 00595241 4e5f434c 52454d55     ONETARY.LC_NUMER
   157b0:	00004349 545f434c 00454d49 4d5f434c     IC..LC_TIME.LC_M
   157c0:	41535345 00534547 6c6c6142 7320636f     ESSAGES.Balloc s
   157d0:	65636375 64656465 00000000 7461642f     ucceeded..../dat
   157e0:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   157f0:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   15800:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   15810:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   15820:	696c2f62 732f6362 696c6474 706d2f62     b/libc/stdlib/mp
   15830:	2e636572 ffff0063                       rec.c...

00015838 <__mprec_bigtens>:
   15838:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   15848:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   15858:	7f73bf3c 75154fdd                       <.s..O.u

00015860 <__mprec_tens>:
   15860:	00000000 3ff00000 00000000 40240000     .......?......$@
   15870:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   15880:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   15890:	00000000 412e8480 00000000 416312d0     .......A......cA
   158a0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   158b0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   158c0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   158d0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   158e0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   158f0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   15900:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   15910:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   15920:	79d99db4 44ea7843 00000005 00000019     ...yCx.D........
   15930:	0000007d 00464e49 004e414e 33323130     }...INF.NAN.0123
   15940:	37363534 62613938 66656463 00000000     456789abcdef....
   15950:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   15960:	00000000 6c756e28 ff00296c 20202020     ....(null)..    
   15970:	20202020 20202020 20202020 30303030                 0000
   15980:	30303030 30303030 30303030 7566202c     000000000000, fu
   15990:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   159a0:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   159b0:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   159c0:	2520656e 25732564 ff000a73 69666e49     ne %d%s%s...Infi
   159d0:	7974696e 00000000 004e614e 7461642f     nity....NaN./dat
   159e0:	656a2f61 6e696b6e 6f772f73 70736b72     a/jenkins/worksp
   159f0:	2f656361 2d554e47 6c6f6f74 69616863     ace/GNU-toolchai
   15a00:	72612f6e 31312d6d 6372732f 77656e2f     n/arm-11/src/new
   15a10:	2d62696c 77677963 6e2f6e69 696c7765     lib-cygwin/newli
   15a20:	696c2f62 732f6362 696c6474 74642f62     b/libc/stdlib/dt
   15a30:	632e616f ffffff00 20202020 20202020     oa.c....        
   15a40:	20202020 20202020 30303030 30303030             00000000
   15a50:	30303030 30303030                       00000000

00015a58 <_init>:
   15a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a5a:	bf00      	nop
   15a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   15a5e:	bc08      	pop	{r3}
   15a60:	469e      	mov	lr, r3
   15a62:	4770      	bx	lr

00015a64 <__init_array_start>:
   15a64:	0000e39d 	.word	0x0000e39d

00015a68 <__frame_dummy_init_array_entry>:
   15a68:	00000435 00007a0d 00008969 000091a5     5....z..i.......

Disassembly of section .fini:

00015a78 <_fini>:
   15a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a7a:	bf00      	nop

Disassembly of section .data:

1fff8720 <port_E_isr>:
PORT_ISR_FUNCTION_CLZ(E)
1fff8720:	b538      	push	{r3, r4, r5, lr}
1fff8722:	4b0a      	ldr	r3, [pc, #40]	; (1fff874c <port_E_isr+0x2c>)
1fff8724:	4d0a      	ldr	r5, [pc, #40]	; (1fff8750 <port_E_isr+0x30>)
1fff8726:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff872a:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff872e:	e005      	b.n	1fff873c <port_E_isr+0x1c>
1fff8730:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8734:	4798      	blx	r3
1fff8736:	1e63      	subs	r3, r4, #1
1fff8738:	401c      	ands	r4, r3
1fff873a:	d005      	beq.n	1fff8748 <port_E_isr+0x28>
1fff873c:	fa94 f3a4 	rbit	r3, r4
1fff8740:	fab3 f383 	clz	r3, r3
1fff8744:	2c00      	cmp	r4, #0
1fff8746:	d1f3      	bne.n	1fff8730 <port_E_isr+0x10>
1fff8748:	bd38      	pop	{r3, r4, r5, pc}
1fff874a:	bf00      	nop
1fff874c:	4004d000 	.word	0x4004d000
1fff8750:	1fff89c8 	.word	0x1fff89c8

1fff8754 <port_D_isr>:
PORT_ISR_FUNCTION_CLZ(D)
1fff8754:	b538      	push	{r3, r4, r5, lr}
1fff8756:	4b0a      	ldr	r3, [pc, #40]	; (1fff8780 <port_D_isr+0x2c>)
1fff8758:	4d0a      	ldr	r5, [pc, #40]	; (1fff8784 <port_D_isr+0x30>)
1fff875a:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff875e:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8762:	e005      	b.n	1fff8770 <port_D_isr+0x1c>
1fff8764:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8768:	4798      	blx	r3
1fff876a:	1e63      	subs	r3, r4, #1
1fff876c:	401c      	ands	r4, r3
1fff876e:	d005      	beq.n	1fff877c <port_D_isr+0x28>
1fff8770:	fa94 f3a4 	rbit	r3, r4
1fff8774:	fab3 f383 	clz	r3, r3
1fff8778:	2c00      	cmp	r4, #0
1fff877a:	d1f3      	bne.n	1fff8764 <port_D_isr+0x10>
1fff877c:	bd38      	pop	{r3, r4, r5, pc}
1fff877e:	bf00      	nop
1fff8780:	4004c000 	.word	0x4004c000
1fff8784:	1fff89a8 	.word	0x1fff89a8

1fff8788 <port_C_isr>:
PORT_ISR_FUNCTION_CLZ(C)
1fff8788:	b538      	push	{r3, r4, r5, lr}
1fff878a:	4b0a      	ldr	r3, [pc, #40]	; (1fff87b4 <port_C_isr+0x2c>)
1fff878c:	4d0a      	ldr	r5, [pc, #40]	; (1fff87b8 <port_C_isr+0x30>)
1fff878e:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff8792:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff8796:	e005      	b.n	1fff87a4 <port_C_isr+0x1c>
1fff8798:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff879c:	4798      	blx	r3
1fff879e:	1e63      	subs	r3, r4, #1
1fff87a0:	401c      	ands	r4, r3
1fff87a2:	d005      	beq.n	1fff87b0 <port_C_isr+0x28>
1fff87a4:	fa94 f3a4 	rbit	r3, r4
1fff87a8:	fab3 f383 	clz	r3, r3
1fff87ac:	2c00      	cmp	r4, #0
1fff87ae:	d1f3      	bne.n	1fff8798 <port_C_isr+0x10>
1fff87b0:	bd38      	pop	{r3, r4, r5, pc}
1fff87b2:	bf00      	nop
1fff87b4:	4004b000 	.word	0x4004b000
1fff87b8:	1fff8978 	.word	0x1fff8978

1fff87bc <port_B_isr>:
PORT_ISR_FUNCTION_CLZ(B)
1fff87bc:	b538      	push	{r3, r4, r5, lr}
1fff87be:	4b0a      	ldr	r3, [pc, #40]	; (1fff87e8 <port_B_isr+0x2c>)
1fff87c0:	4d0a      	ldr	r5, [pc, #40]	; (1fff87ec <port_B_isr+0x30>)
1fff87c2:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff87c6:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff87ca:	e005      	b.n	1fff87d8 <port_B_isr+0x1c>
1fff87cc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff87d0:	4798      	blx	r3
1fff87d2:	1e63      	subs	r3, r4, #1
1fff87d4:	401c      	ands	r4, r3
1fff87d6:	d005      	beq.n	1fff87e4 <port_B_isr+0x28>
1fff87d8:	fa94 f3a4 	rbit	r3, r4
1fff87dc:	fab3 f383 	clz	r3, r3
1fff87e0:	2c00      	cmp	r4, #0
1fff87e2:	d1f3      	bne.n	1fff87cc <port_B_isr+0x10>
1fff87e4:	bd38      	pop	{r3, r4, r5, pc}
1fff87e6:	bf00      	nop
1fff87e8:	4004a000 	.word	0x4004a000
1fff87ec:	1fff8928 	.word	0x1fff8928

1fff87f0 <port_A_isr>:
PORT_ISR_FUNCTION_CLZ(A)
1fff87f0:	b538      	push	{r3, r4, r5, lr}
1fff87f2:	4b0a      	ldr	r3, [pc, #40]	; (1fff881c <port_A_isr+0x2c>)
1fff87f4:	4d0a      	ldr	r5, [pc, #40]	; (1fff8820 <port_A_isr+0x30>)
1fff87f6:	f8d3 40a0 	ldr.w	r4, [r3, #160]	; 0xa0
1fff87fa:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
1fff87fe:	e005      	b.n	1fff880c <port_A_isr+0x1c>
1fff8800:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
1fff8804:	4798      	blx	r3
1fff8806:	1e63      	subs	r3, r4, #1
1fff8808:	401c      	ands	r4, r3
1fff880a:	d005      	beq.n	1fff8818 <port_A_isr+0x28>
1fff880c:	fa94 f3a4 	rbit	r3, r4
1fff8810:	fab3 f383 	clz	r3, r3
1fff8814:	2c00      	cmp	r4, #0
1fff8816:	d1f3      	bne.n	1fff8800 <port_A_isr+0x10>
1fff8818:	bd38      	pop	{r3, r4, r5, pc}
1fff881a:	bf00      	nop
1fff881c:	40049000 	.word	0x40049000
1fff8820:	1fff88f0 	.word	0x1fff88f0

1fff8824 <Logger::logLevel>:
1fff8824:	00000001                                ....

1fff8828 <SOC>:
1fff8828:	00000064                                d...

1fff882c <SOH>:
1fff882c:	00000064                                d...

1fff8830 <bmsmanu>:
1fff8830:	504d4953 4f434520                       SIMP ECO

1fff8838 <bmsname>:
1fff8838:	504d4953 534d4220                       SIMP BMS

1fff8840 <chargerid1>:
1fff8840:	00000618                                ....

1fff8844 <chargerid2>:
1fff8844:	00000638                                8...

1fff8848 <controlid>:
1fff8848:	000000ba                                ....

1fff884c <debug>:
1fff884c:	00000001                                ....

1fff8850 <debugdigits>:
1fff8850:	00000002                                ....

1fff8854 <filterFrequency>:
1fff8854:	40a00000                                ...@

1fff8858 <firmver>:
1fff8858:	0003846f                                o...

1fff885c <maxac1>:
1fff885c:	00000010                                ....

1fff8860 <maxac2>:
1fff8860:	0000000a                                ....

1fff8864 <ncharger>:
1fff8864:	00000001                                ....

1fff8868 <pulltime>:
1fff8868:	000003e8                                ....

1fff886c <pwmcurmax>:
1fff886c:	000000c8                                ....

1fff8870 <pwmcurmid>:
1fff8870:	00000032                                2...

1fff8874 <pwmfreq>:
1fff8874:	00003a98                                .:..

1fff8878 <sensor>:
1fff8878:	00000001                                ....

1fff887c <bitTimingTable>:
1fff887c:	01010000 01010100 01010201 02010202     ................
1fff888c:	03020103 02040202 02020502 06020305     ................
1fff889c:	03070203 03040702 07030407 05070405     ................
1fff88ac:	05060704 07060607 07070606 00070707     ................

1fff88bc <Serial2>:
1fff88bc:	000153e0 00000000 000003e8 00000000     .S..............
1fff88cc:	0000b6a5                                ....

1fff88d0 <Serial3>:
1fff88d0:	00015448 00000000 000003e8 00000000     HT..............
1fff88e0:	0000b6a9                                ....

1fff88e4 <analog_config_bits>:
1fff88e4:	                                         .

1fff88e5 <analog_num_average>:
1fff88e5:	                                         ...

1fff88e8 <__brkval>:
1fff88e8:	1fffd90c                                ....

1fff88ec <analog_write_res>:
1fff88ec:	00000008                                ....

1fff88f0 <isr_table_portA>:
1fff88f0:	00009fed 00009fed 00009fed 00009fed     ................
1fff8900:	00009fed 00009fed 00009fed 00009fed     ................
1fff8910:	00009fed 00009fed 00009fed 00009fed     ................
1fff8920:	00009fed 00009fed                       ........

1fff8928 <isr_table_portB>:
1fff8928:	00009fed 00009fed 00009fed 00009fed     ................
1fff8938:	00009fed 00009fed 00009fed 00009fed     ................
1fff8948:	00009fed 00009fed 00009fed 00009fed     ................
1fff8958:	00009fed 00009fed 00009fed 00009fed     ................
1fff8968:	00009fed 00009fed 00009fed 00009fed     ................

1fff8978 <isr_table_portC>:
1fff8978:	00009fed 00009fed 00009fed 00009fed     ................
1fff8988:	00009fed 00009fed 00009fed 00009fed     ................
1fff8998:	00009fed 00009fed 00009fed 00009fed     ................

1fff89a8 <isr_table_portD>:
1fff89a8:	00009fed 00009fed 00009fed 00009fed     ................
1fff89b8:	00009fed 00009fed 00009fed 00009fed     ................

1fff89c8 <isr_table_portE>:
1fff89c8:	00009fed 00009fed                       ........

1fff89d0 <rts_high_watermark_>:
1fff89d0:	00000028                                (...

1fff89d4 <rts_low_watermark_>:
1fff89d4:	0000001a                                ....

1fff89d8 <rx_buffer_total_size_>:
1fff89d8:	00000040                                @...

1fff89dc <rx_pin_num>:
1fff89dc:	00000009                                ....

1fff89e0 <tx_buffer_total_size_>:
1fff89e0:	00000028                                (...

1fff89e4 <tx_pin_num>:
1fff89e4:	0000000a                                ....

1fff89e8 <rts_high_watermark_>:
1fff89e8:	00000028                                (...

1fff89ec <rts_low_watermark_>:
1fff89ec:	0000001a                                ....

1fff89f0 <rx_buffer_total_size_>:
1fff89f0:	00000040                                @...

1fff89f4 <tx_buffer_total_size_>:
1fff89f4:	00000028                                (...

1fff89f8 <tx_pin_num>:
1fff89f8:	                                         .

1fff89f9 <_serialEvent2_default>:
1fff89f9:	                                         .

1fff89fa <_serialEvent3_default>:
1fff89fa:	                                         ..

1fff89fc <Serial>:
1fff89fc:	000155f0 00000000 000003e8 00000000     .U..............

1fff8a0c <usb_buffer_available>:
1fff8a0c:	ffffffff                                ....

1fff8a10 <yield_active_check_flags>:
1fff8a10:	00000001                                ....

1fff8a14 <config_descriptor>:
1fff8a14:	00430209 c0000102 00040932 02020100     ..C.....2.......
1fff8a24:	24050001 05011000 01010124 06022404     ...$....$....$..
1fff8a34:	00062405 82050701 40001003 00010409     .$.........@....
1fff8a44:	00000a02 03050700 00004002 02840507     .........@......
1fff8a54:	00000040                                @...

1fff8a58 <device_descriptor>:
1fff8a58:	01100112 40000002 048316c0 02010275     .......@....u...
1fff8a68:	00000103                                ....

1fff8a6c <string0>:
1fff8a6c:	04090304                                ....

1fff8a70 <usb_string_manufacturer_name_default>:
1fff8a70:	00540318 00650065 0073006e 00640079     ..T.e.e.n.s.y.d.
1fff8a80:	00690075 006f006e                       u.i.n.o.

1fff8a88 <usb_string_product_name_default>:
1fff8a88:	00550316 00420053 00530020 00720065     ..U.S.B. .S.e.r.
1fff8a98:	00610069 0000006c                       i.a.l...

1fff8aa0 <usb_string_serial_number_default>:
1fff8aa0:	0000030c 00000000 00000000 00000000     ................
	...

1fff8ab8 <__malloc_av_>:
	...
1fff8ac0:	1fff8ab8 1fff8ab8 1fff8ac0 1fff8ac0     ................
1fff8ad0:	1fff8ac8 1fff8ac8 1fff8ad0 1fff8ad0     ................
1fff8ae0:	1fff8ad8 1fff8ad8 1fff8ae0 1fff8ae0     ................
1fff8af0:	1fff8ae8 1fff8ae8 1fff8af0 1fff8af0     ................
1fff8b00:	1fff8af8 1fff8af8 1fff8b00 1fff8b00     ................
1fff8b10:	1fff8b08 1fff8b08 1fff8b10 1fff8b10     ................
1fff8b20:	1fff8b18 1fff8b18 1fff8b20 1fff8b20     ........ ... ...
1fff8b30:	1fff8b28 1fff8b28 1fff8b30 1fff8b30     (...(...0...0...
1fff8b40:	1fff8b38 1fff8b38 1fff8b40 1fff8b40     8...8...@...@...
1fff8b50:	1fff8b48 1fff8b48 1fff8b50 1fff8b50     H...H...P...P...
1fff8b60:	1fff8b58 1fff8b58 1fff8b60 1fff8b60     X...X...`...`...
1fff8b70:	1fff8b68 1fff8b68 1fff8b70 1fff8b70     h...h...p...p...
1fff8b80:	1fff8b78 1fff8b78 1fff8b80 1fff8b80     x...x...........
1fff8b90:	1fff8b88 1fff8b88 1fff8b90 1fff8b90     ................
1fff8ba0:	1fff8b98 1fff8b98 1fff8ba0 1fff8ba0     ................
1fff8bb0:	1fff8ba8 1fff8ba8 1fff8bb0 1fff8bb0     ................
1fff8bc0:	1fff8bb8 1fff8bb8 1fff8bc0 1fff8bc0     ................
1fff8bd0:	1fff8bc8 1fff8bc8 1fff8bd0 1fff8bd0     ................
1fff8be0:	1fff8bd8 1fff8bd8 1fff8be0 1fff8be0     ................
1fff8bf0:	1fff8be8 1fff8be8 1fff8bf0 1fff8bf0     ................
1fff8c00:	1fff8bf8 1fff8bf8 1fff8c00 1fff8c00     ................
1fff8c10:	1fff8c08 1fff8c08 1fff8c10 1fff8c10     ................
1fff8c20:	1fff8c18 1fff8c18 1fff8c20 1fff8c20     ........ ... ...
1fff8c30:	1fff8c28 1fff8c28 1fff8c30 1fff8c30     (...(...0...0...
1fff8c40:	1fff8c38 1fff8c38 1fff8c40 1fff8c40     8...8...@...@...
1fff8c50:	1fff8c48 1fff8c48 1fff8c50 1fff8c50     H...H...P...P...
1fff8c60:	1fff8c58 1fff8c58 1fff8c60 1fff8c60     X...X...`...`...
1fff8c70:	1fff8c68 1fff8c68 1fff8c70 1fff8c70     h...h...p...p...
1fff8c80:	1fff8c78 1fff8c78 1fff8c80 1fff8c80     x...x...........
1fff8c90:	1fff8c88 1fff8c88 1fff8c90 1fff8c90     ................
1fff8ca0:	1fff8c98 1fff8c98 1fff8ca0 1fff8ca0     ................
1fff8cb0:	1fff8ca8 1fff8ca8 1fff8cb0 1fff8cb0     ................
1fff8cc0:	1fff8cb8 1fff8cb8 1fff8cc0 1fff8cc0     ................
1fff8cd0:	1fff8cc8 1fff8cc8 1fff8cd0 1fff8cd0     ................
1fff8ce0:	1fff8cd8 1fff8cd8 1fff8ce0 1fff8ce0     ................
1fff8cf0:	1fff8ce8 1fff8ce8 1fff8cf0 1fff8cf0     ................
1fff8d00:	1fff8cf8 1fff8cf8 1fff8d00 1fff8d00     ................
1fff8d10:	1fff8d08 1fff8d08 1fff8d10 1fff8d10     ................
1fff8d20:	1fff8d18 1fff8d18 1fff8d20 1fff8d20     ........ ... ...
1fff8d30:	1fff8d28 1fff8d28 1fff8d30 1fff8d30     (...(...0...0...
1fff8d40:	1fff8d38 1fff8d38 1fff8d40 1fff8d40     8...8...@...@...
1fff8d50:	1fff8d48 1fff8d48 1fff8d50 1fff8d50     H...H...P...P...
1fff8d60:	1fff8d58 1fff8d58 1fff8d60 1fff8d60     X...X...`...`...
1fff8d70:	1fff8d68 1fff8d68 1fff8d70 1fff8d70     h...h...p...p...
1fff8d80:	1fff8d78 1fff8d78 1fff8d80 1fff8d80     x...x...........
1fff8d90:	1fff8d88 1fff8d88 1fff8d90 1fff8d90     ................
1fff8da0:	1fff8d98 1fff8d98 1fff8da0 1fff8da0     ................
1fff8db0:	1fff8da8 1fff8da8 1fff8db0 1fff8db0     ................
1fff8dc0:	1fff8db8 1fff8db8 1fff8dc0 1fff8dc0     ................
1fff8dd0:	1fff8dc8 1fff8dc8 1fff8dd0 1fff8dd0     ................
1fff8de0:	1fff8dd8 1fff8dd8 1fff8de0 1fff8de0     ................
1fff8df0:	1fff8de8 1fff8de8 1fff8df0 1fff8df0     ................
1fff8e00:	1fff8df8 1fff8df8 1fff8e00 1fff8e00     ................
1fff8e10:	1fff8e08 1fff8e08 1fff8e10 1fff8e10     ................
1fff8e20:	1fff8e18 1fff8e18 1fff8e20 1fff8e20     ........ ... ...
1fff8e30:	1fff8e28 1fff8e28 1fff8e30 1fff8e30     (...(...0...0...
1fff8e40:	1fff8e38 1fff8e38 1fff8e40 1fff8e40     8...8...@...@...
1fff8e50:	1fff8e48 1fff8e48 1fff8e50 1fff8e50     H...H...P...P...
1fff8e60:	1fff8e58 1fff8e58 1fff8e60 1fff8e60     X...X...`...`...
1fff8e70:	1fff8e68 1fff8e68 1fff8e70 1fff8e70     h...h...p...p...
1fff8e80:	1fff8e78 1fff8e78 1fff8e80 1fff8e80     x...x...........
1fff8e90:	1fff8e88 1fff8e88 1fff8e90 1fff8e90     ................
1fff8ea0:	1fff8e98 1fff8e98 1fff8ea0 1fff8ea0     ................
1fff8eb0:	1fff8ea8 1fff8ea8 1fff8eb0 1fff8eb0     ................

1fff8ec0 <__malloc_sbrk_base>:
1fff8ec0:	ffffffff                                ....

1fff8ec4 <__malloc_trim_threshold>:
1fff8ec4:	00020000                                ....

1fff8ec8 <__sglue>:
1fff8ec8:	00000000 00000003 1fffd62c              ........,...

1fff8ed4 <__global_locale>:
1fff8ed4:	00000043 00000000 00000000 00000000     C...............
	...
1fff8ef4:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f14:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f34:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f54:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f74:	00000043 00000000 00000000 00000000     C...............
	...
1fff8f94:	00000043 00000000 00000000 00000000     C...............
	...
1fff8fb4:	0000edf1 0000e669 00000000 00015680     ....i........V..
1fff8fc4:	00014420 0001433c 0001433c 0001433c      D..<C..<C..<C..
1fff8fd4:	0001433c 0001433c 0001433c 0001433c     <C..<C..<C..<C..
1fff8fe4:	0001433c 0001433c ffffffff ffffffff     <C..<C..........
1fff8ff4:	ffffffff 0000ffff 53410001 00494943     ..........ASCII.
	...
1fff901c:	53410000 00494943 00000000 00000000     ..ASCII.........
	...

1fff9040 <_impure_data>:
1fff9040:	00000000 1fffd62c 1fffd694 1fffd6fc     ....,...........
	...
1fff90d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
1fff90e8:	0005deec 0000000b 00000000 00000000     ................
	...

1fff9160 <_impure_ptr>:
1fff9160:	1fff9040                                @...

1fff9164 <__atexit_recursive_mutex>:
1fff9164:	1fffd76c                                l...
